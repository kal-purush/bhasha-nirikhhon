{
    "identifiers": [
        "getDefaultOpts",
        "getDefaultOpts",
        "allOptionsOn",
        "showdown",
        "showdown",
        "showdown",
        "key",
        "value",
        "globalOptions",
        "key",
        "value",
        "showdown",
        "key",
        "globalOptions",
        "key",
        "showdown",
        "globalOptions",
        "showdown",
        "globalOptions",
        "getDefaultOpts",
        "showdown",
        "name",
        "flavor",
        "name",
        "name",
        "showdown",
        "flavor",
        "name",
        "setFlavor",
        "name",
        "option",
        "preset",
        "preset",
        "option",
        "globalOptions",
        "option",
        "preset",
        "option",
        "showdown",
        "setFlavor",
        "showdown",
        "name",
        "flavor",
        "name",
        "flavor",
        "name",
        "showdown",
        "simple",
        "getDefaultOpts",
        "simple",
        "showdown",
        "name",
        "func",
        "showdown",
        "name",
        "func",
        "parsers",
        "name",
        "func",
        "parsers",
        "name",
        "parsers",
        "name",
        "name",
        "showdown",
        "name",
        "ext",
        "showdown",
        "name",
        "name",
        "showdown",
        "name",
        "showdown",
        "ext",
        "extensions",
        "name",
        "name",
        "extensions",
        "name",
        "ext",
        "ext",
        "ext",
        "showdown",
        "ext",
        "ext",
        "ext",
        "validate",
        "ext",
        "name",
        "validExtension",
        "extensions",
        "name",
        "ext",
        "validExtension",
        "showdown",
        "extensions",
        "showdown",
        "name",
        "extensions",
        "name",
        "showdown",
        "extensions",
        "extension",
        "name",
        "name",
        "name",
        "showdown",
        "extension",
        "extension",
        "extension",
        "i",
        "extension",
        "i",
        "errMsg",
        "i",
        "extension",
        "i",
        "ext",
        "ret",
        "ret",
        "baseMsg",
        "ext",
        "ret",
        "showdown",
        "ext",
        "ret",
        "ret",
        "baseMsg",
        "ext",
        "ret",
        "ext",
        "ext",
        "ext",
        "ext",
        "ret",
        "ret",
        "baseMsg",
        "ret",
        "showdown",
        "ext",
        "ret",
        "ret",
        "baseMsg",
        "ret",
        "showdown",
        "ext",
        "showdown",
        "ext",
        "ret",
        "ret",
        "baseMsg",
        "ret",
        "ext",
        "ext",
        "ret",
        "ret",
        "baseMsg",
        "ext",
        "ret",
        "ln",
        "ext",
        "ext",
        "ln",
        "ext",
        "ln",
        "ret",
        "ret",
        "baseMsg",
        "ln",
        "ext",
        "ln",
        "ret",
        "ext",
        "ext",
        "ret",
        "ret",
        "baseMsg",
        "ext",
        "ret",
        "ext",
        "showdown",
        "ext",
        "ext",
        "ext",
        "ext",
        "ret",
        "ret",
        "baseMsg",
        "ext",
        "ret",
        "showdown",
        "ext",
        "ret",
        "ret",
        "baseMsg",
        "ret",
        "ret",
        "showdown",
        "ext",
        "validate",
        "ext",
        "validateExtension",
        "validateExtension"
    ],
    "literals": [
        "'vanilla'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "' flavor was not found'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'undefined'",
        "'SubParser named '",
        "' not registered!'",
        "'showdown.subParser function first argument must be a string (the name of the subparser)'",
        "'use strict'",
        "'Extension \\'name\\' must be a string'",
        "'Extension named '",
        "' is not registered!'",
        "'function'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'Error in '",
        "' extension->'",
        "'Error in unnamed extension'",
        "''",
        "' sub-extension '",
        "': '",
        "'object'",
        "'must be an object, but '",
        "' given'",
        "'property \"type\" must be a string, but '",
        "' given'",
        "'language'",
        "'lang'",
        "'html'",
        "'output'",
        "'lang'",
        "'output'",
        "'listener'",
        "'type '",
        "' is not recognized. Valid values: \"lang/language\", \"output/html\" or \"listener\"'",
        "'listener'",
        "'. Extensions of type \"listener\" must have a property called \"listeners\"'",
        "' extensions must define either a \"regex\" property or a \"filter\" method'",
        "'object'",
        "'\"listeners\" property must be an object but '",
        "' given'",
        "'function'",
        "'\"listeners\" property must be an hash of [event name]: [callback]. listeners.'",
        "' must be a function but '",
        "' given'",
        "'function'",
        "'\"filter\" must be a function, but '",
        "' given'",
        "'g'",
        "'\"regex\" property must either be a string or a RegExp object, but '",
        "' given'",
        "'\"regex\" extensions must implement a replace string or function'",
        "'use strict'"
    ],
    "variables": [
        "showdown",
        "parsers",
        "extensions",
        "globalOptions",
        "setFlavor",
        "flavor",
        "preset",
        "validExtension",
        "errMsg",
        "ret",
        "i",
        "baseMsg",
        "ext",
        "validateExtension"
    ],
    "comments": [
        "Private properties",
        "Getter",
        "Setter",
        "Expand extension if it's wrapped in a function",
        "Ensure extension is an array",
        "normalize extension type"
    ],
    "docstrings": [
        "* Created by Tivie on 06-01-2015.",
        "* helper namespace\n * @type {{}}",
        "* TODO LEGACY SUPPORT CODE\n * @type {{}}",
        "* Set a global option\n * @static\n * @param {string} key\n * @param {*} value\n * @returns {showdown}",
        "* Get a global option\n * @static\n * @param {string} key\n * @returns {*}",
        "* Get the global options\n * @static\n * @returns {{}}",
        "* Reset global options to the default values\n * @static",
        "* Set the flavor showdown should use as default\n * @param {string} name",
        "* Get the currently set flavor\n * @returns {string}",
        "* Get the options of a specified flavor. Returns undefined if the flavor was not found\n * @param {string} name Name of the flavor\n * @returns {{}|undefined}",
        "* Get the default options\n * @static\n * @param {boolean} [simple=true]\n * @returns {{}}",
        "* Get or set a subParser\n *\n * subParser(name)       - Get a registered subParser\n * subParser(name, func) - Register a subParser\n * @static\n * @param {string} name\n * @param {function} [func]\n * @returns {*}",
        "* Gets or registers an extension\n * @static\n * @param {string} name\n * @param {object|function=} ext\n * @returns {*}",
        "* Gets all extensions registered\n * @returns {{}}",
        "* Remove an extension\n * @param {string} name",
        "* Removes all extensions",
        "* Validate extension\n * @param {array} extension\n * @param {string} name\n * @returns {{valid: boolean, error: string}}",
        "* Validate extension\n * @param {object} ext\n * @returns {boolean}"
    ],
    "functions": [
        "validate"
    ],
    "classes": []
}