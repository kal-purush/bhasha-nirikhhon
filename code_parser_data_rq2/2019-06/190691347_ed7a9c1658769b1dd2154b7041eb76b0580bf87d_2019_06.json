{
    "identifiers": [
        "Mapping",
        "EditorState",
        "Plugin",
        "Decoration",
        "DecorationSet",
        "EditorView",
        "schema",
        "exampleSetup",
        "DOMParser",
        "element_id",
        "content_id",
        "to",
        "commit",
        "to",
        "commit",
        "message",
        "time",
        "steps",
        "maps",
        "hidden",
        "message",
        "time",
        "steps",
        "maps",
        "hidden",
        "blameMap",
        "commits",
        "uncommittedSteps",
        "uncommittedMaps",
        "blameMap",
        "commits",
        "uncommittedSteps",
        "uncommittedMaps",
        "transform",
        "transform",
        "step",
        "i",
        "step",
        "transform",
        "i",
        "updateBlameMap",
        "transform",
        "TrackState",
        "newBlame",
        "inverted",
        "transform",
        "message",
        "time",
        "Commit",
        "message",
        "time",
        "TrackState",
        "commit",
        "transform",
        "id",
        "transform",
        "i",
        "i",
        "i",
        "mapping",
        "span",
        "mapping",
        "span",
        "to",
        "result",
        "to",
        "span",
        "i",
        "mapping",
        "i",
        "mapping",
        "i",
        "mapping",
        "i",
        "_s",
        "_e",
        "start",
        "end",
        "insertIntoBlameMap",
        "result",
        "after",
        "start",
        "after",
        "end",
        "id",
        "result",
        "to",
        "commit",
        "to",
        "pos",
        "pos",
        "next",
        "pos",
        "next",
        "commit",
        "next",
        "next",
        "next",
        "next",
        "next",
        "next",
        "to",
        "pos",
        "left",
        "pos",
        "left",
        "next",
        "pos",
        "next",
        "commit",
        "next",
        "to",
        "next",
        "to",
        "to",
        "next",
        "pos",
        "next",
        "to",
        "next",
        "to",
        "pos",
        "to",
        "next",
        "next",
        "pos",
        "pos",
        "to",
        "commit",
        "Plugin",
        "_",
        "instance",
        "TrackState",
        "instance",
        "tr",
        "tracked",
        "tr",
        "tracked",
        "tracked",
        "tr",
        "tr",
        "commitMessage",
        "tracked",
        "tracked",
        "commitMessage",
        "tr",
        "tracked",
        "name",
        "attrs",
        "children",
        "name",
        "attrs",
        "attr",
        "attrs",
        "dom",
        "attr",
        "attrs",
        "attr",
        "i",
        "children",
        "i",
        "children",
        "i",
        "dom",
        "child",
        "child",
        "child",
        "dom",
        "Plugin",
        "DecorationSet",
        "tr",
        "prev",
        "oldState",
        "state",
        "tr",
        "highlight",
        "highlight",
        "prev",
        "highlight",
        "trackPlugin",
        "oldState",
        "tState",
        "span",
        "tState",
        "span",
        "highlight",
        "span",
        "Decoration",
        "span",
        "span",
        "DecorationSet",
        "state",
        "decos",
        "highlight",
        "highlight",
        "highlight",
        "prev",
        "highlight",
        "DecorationSet",
        "tr",
        "prev",
        "prev",
        "tr",
        "tr",
        "prev",
        "prev",
        "state",
        "state",
        "EditorState",
        "DOMParser",
        "schema",
        "content_id",
        "exampleSetup",
        "trackPlugin",
        "highlightPlugin",
        "tr",
        "state",
        "state",
        "tr",
        "view",
        "state",
        "setDisabled",
        "state",
        "renderCommits",
        "state",
        "dispatch",
        "view",
        "EditorView",
        "dispatch",
        "dispatch",
        "state",
        "trackPlugin",
        "alert",
        "state",
        "input",
        "button",
        "trackPlugin",
        "state",
        "message",
        "dispatch",
        "state",
        "trackPlugin",
        "message",
        "state",
        "dispatch",
        "trackPlugin",
        "state",
        "lastRendered",
        "curState",
        "lastRendered",
        "curState",
        "curState",
        "commits",
        "commit",
        "elt",
        "elt",
        "commit",
        "commit",
        "commit",
        "commit",
        "commit",
        "commit",
        "node",
        "revertCommit",
        "commit",
        "node",
        "e",
        "node",
        "e",
        "dispatch",
        "state",
        "highlightPlugin",
        "commit",
        "node",
        "e",
        "node",
        "e",
        "dispatch",
        "state",
        "highlightPlugin",
        "commit",
        "node",
        "commit",
        "trackPlugin",
        "state",
        "trackState",
        "commit",
        "index",
        "trackState",
        "alert",
        "Mapping",
        "trackState",
        "index",
        "maps",
        "c",
        "maps",
        "c",
        "state",
        "commit",
        "i",
        "i",
        "commit",
        "i",
        "remap",
        "i",
        "remapped",
        "tr",
        "remapped",
        "result",
        "remap",
        "remapped",
        "i",
        "tr",
        "dispatch",
        "tr",
        "trackPlugin",
        "commit",
        "e",
        "e",
        "doCommit",
        "e",
        "e",
        "view",
        "pos",
        "state",
        "trackPlugin",
        "state",
        "i",
        "i",
        "i",
        "pos",
        "i",
        "i",
        "e",
        "e",
        "e",
        "findInBlameMap",
        "state",
        "state",
        "commitID",
        "trackPlugin",
        "state",
        "commitID",
        "elt",
        "commitID",
        "elt",
        "elt",
        "commit",
        "commit",
        "node",
        "pos",
        "node",
        "pos",
        "node",
        "setTimeout",
        "node"
    ],
    "literals": [
        "\"prosemirror-transform\"",
        "\"prosemirror-state\"",
        "\"prosemirror-view\"",
        "\"prosemirror-schema-basic\"",
        "\"prosemirror-example-setup\"",
        "\"prosemirror-model\"",
        "\"string\"",
        "\"blame-marker\"",
        "\"#\"",
        "\"#editor\"",
        "\"Initial commit\"",
        "'커밋 멘트 적용'",
        "\"#message\"",
        "\"#commitbutton\"",
        "\"#commits\"",
        "\"\"",
        "\"div\"",
        "\"commit\"",
        "\"span\"",
        "\"commit-time\"",
        "\":\"",
        "\"0\"",
        "\"\"",
        "\":\"",
        "\"0\"",
        "\"\"",
        "\"\\u00a0 \"",
        "\"\\u00a0 \"",
        "\"click\"",
        "\"mouseover\"",
        "\"mouseout\"",
        "\"Commit your changes first!\"",
        "Revert '${commit.message}'",
        "\"#commit\"",
        "\"submit\"",
        "\"Unnamed\"",
        "\"\"",
        "\"#blame\"",
        "\"mousedown\"",
        "\"div\"",
        "\"blame-info\"",
        "\"span\"",
        "\"It was: \"",
        "\"strong\"",
        "\"Uncommitted\"",
        "\"No commit found\"",
        "\"px\"",
        "\"px\""
    ],
    "variables": [
        "inverted",
        "newBlame",
        "commit",
        "result",
        "mapping",
        "i",
        "span",
        "to",
        "i",
        "after",
        "pos",
        "next",
        "left",
        "trackPlugin",
        "commitMessage",
        "dom",
        "i",
        "child",
        "highlightPlugin",
        "highlight",
        "tState",
        "decos",
        "state",
        "view",
        "lastRendered",
        "input",
        "button",
        "curState",
        "commits",
        "node",
        "trackState",
        "index",
        "remap",
        "tr",
        "i",
        "remapped",
        "result",
        "i",
        "pos",
        "commitID",
        "commit",
        "node"
    ],
    "comments": [
        "export { EditorState } from \"prosemirror-state\";",
        "export { EditorView } from \"prosemirror-view\";",
        "export { Schema, DOMParser, Node } from \"prosemirror-model\";",
        "export { schema as basicSchema } from \"prosemirror-schema-basic\";",
        "export { exampleSetup } from \"prosemirror-example-setup\";",
        "export {EditorState} from \"prosemirror-state\";",
        "export {EditorView} from \"prosemirror-view\";",
        "export {Schema, DOMParser} from \"prosemirror-model\";",
        "export {schema} from \"prosemirror-schema-basic\";",
        "export {addListNodes} from \"prosemirror-schema-list\";",
        "export {exampleSetup} from \"prosemirror-example-setup\";",
        "export {collab} from \"prosemirror-collab\";",
        "export {app_index} from \"app_index\";",
        "import {EditorState} from \"prosemirror-state\"",
        "import {EditorView} from \"prosemirror-view\"",
        "import {Schema, DOMParser} from \"prosemirror-model\"",
        "import {schema} from \"prosemirror-schema-basic\"",
        "import {addListNodes} from \"prosemirror-schema-list\"",
        "import {exampleSetup} from \"prosemirror-example-setup\"",
        "import {schema} from \"prosemirror-schema-basic\"",
        "import {EditorState} from \"prosemirror-state\"",
        "import {EditorView} from \"prosemirror-view\"",
        "import {undo, redo, history} from \"prosemirror-history\"",
        "import {keymap} from \"prosemirror-keymap\"",
        "import {baseKeymap} from \"prosemirror-commands\"",
        "import {DOMParser} from \"prosemirror-model\"",
        "import {collab} from \"prosemirror-collab\"",
        "TrackState{",
        "The blame map is a data structure that lists a sequence of",
        "document ranges, along with the commit that inserted them. This",
        "can be used to, for example, highlight the part of the document",
        "that was inserted by a commit.",
        "The commit history, as an array of objects.",
        "Inverted steps and their maps corresponding to the changes that",
        "have been made since the last commit.",
        "Apply a transform to this state",
        "Invert the steps in the transaction, to be able to save them in",
        "the next commit",
        "Create a new state—since these are part of the editor state, a",
        "persistent data structure, they must not be mutated.",
        "When a transaction is marked as a commit, this is used to put any",
        "uncommitted steps into a new commit.",
        "}",
        "Different commit, not before",
        "Sticks out to the left (loop below will handle right side)",
        "trackPlugin{",
        "}",
        "dispatch(state.tr.insertText(\"Type something, and then commit it.\"))",
        "elt(\"button\", {class: \"commit-revert\"}, \"revert\")",
        "revertCommit{",
        "If this commit is not in the history, we can't revert it",
        "Reverting is only possible if there are no uncommitted changes",
        "This is the mapping from the document as it was at the start of",
        "the commit to the current document.",
        "Build up a transaction that includes all (inverted) steps in this",
        "commit, rebased to the current document. They have to be applied",
        "in reverse order.",
        "The mapping is sliced to not include maps for this step and the",
        "ones before it.",
        "If the step can be applied, add its map to our mapping",
        "pipeline, so that subsequent steps are mapped over it.",
        "Add a commit message and dispatch.",
        "}",
        "// export { EditorState } from \"prosemirror-state\";",
        "// export { EditorView } from \"prosemirror-view\";",
        "// export { Schema, DOMParser, Node } from \"prosemirror-model\";",
        "// export { schema as basicSchema } from \"prosemirror-schema-basic\";",
        "// export { exampleSetup } from \"prosemirror-example-setup\";",
        "",
        "// export {EditorState} from \"prosemirror-state\";",
        "// export {EditorView} from \"prosemirror-view\";",
        "// export {Schema, DOMParser} from \"prosemirror-model\";",
        "// export {schema} from \"prosemirror-schema-basic\";",
        "// export {addListNodes} from \"prosemirror-schema-list\";",
        "// export {exampleSetup} from \"prosemirror-example-setup\";",
        "// export {collab} from \"prosemirror-collab\";",
        "// export {app_index} from \"app_index\";",
        "",
        "",
        "",
        "",
        "",
        "// import {EditorState} from \"prosemirror-state\"",
        "// import {EditorView} from \"prosemirror-view\"",
        "// import {Schema, DOMParser} from \"prosemirror-model\"",
        "// import {schema} from \"prosemirror-schema-basic\"",
        "// import {addListNodes} from \"prosemirror-schema-list\"",
        "// import {exampleSetup} from \"prosemirror-example-setup\"",
        "",
        "import {schema} from \"prosemirror-schema-basic\"",
        "import {EditorState} from \"prosemirror-state\"",
        "import {EditorView} from \"prosemirror-view\"",
        "import {undo, redo, history} from \"prosemirror-history\"",
        "import {keymap} from \"prosemirror-keymap\"",
        "import {baseKeymap} from \"prosemirror-commands\"",
        "import {DOMParser} from \"prosemirror-model\"",
        "",
        "",
        "",
        "",
        "export function EditorInit(element_id, content_id){",
        "",
        "let state = EditorState.create({",
        "schema,",
        "doc: DOMParser.fromSchema(schema).parse(document.getElementById(content_id)),",
        "plugins:[",
        "history(),",
        "keymap({\"Mod-z\": undo, \"Mod-y\": redo}),",
        "keymap(baseKeymap)",
        "]",
        "});",
        "",
        "let view = new EditorView(document.querySelector(\"#\"+element_id), {",
        "state,",
        "dispatchTransaction(transaction) {",
        "console.log(\"Document size went from\", transaction.before.content.size, \"to\", transaction.doc.content.size)",
        "let newState = view.state.apply(transaction)",
        "view.updateState(newState)",
        "},",
        "",
        "});",
        "",
        "alert(\" 초기화 완료 >> \" + state + \" : \" + view);",
        "",
        "// //",
        "// const mySchema = new Schema({",
        "//     nodes: addListNodes(schema.spec.nodes, \"paragraph block*\", \"block\"),",
        "//     marks: schema.spec.marks",
        "// });",
        "//",
        "// window.view = new EditorView(document.querySelector(\"#\"+element_id), {",
        "//     state: EditorState.create({",
        "//         doc: DOMParser.fromSchema(mySchema).parse(document.querySelector(\"#\"+content_id)) ,",
        "//         plugins : exampleSetup({schema: mySchema})",
        "//     })",
        "// });",
        "}",
        "",
        "",
        ""
    ],
    "docstrings": [],
    "functions": [
        "EditorInit",
        "applyTransform",
        "applyCommit",
        "updateBlameMap",
        "insertIntoBlameMap",
        "init",
        "apply",
        "elt",
        "init",
        "apply",
        "decorations",
        "dispatch",
        "setDisabled",
        "doCommit",
        "renderCommits",
        "revertCommit",
        "findInBlameMap"
    ],
    "classes": [
        "Commit",
        "TrackState"
    ]
}