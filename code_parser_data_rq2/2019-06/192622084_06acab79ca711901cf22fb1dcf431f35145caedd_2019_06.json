{
    "identifiers": [
        "com",
        "apollographql",
        "apollo",
        "cache",
        "http",
        "java",
        "io",
        "Closeable",
        "java",
        "io",
        "EOFException",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileNotFoundException",
        "java",
        "io",
        "Flushable",
        "java",
        "io",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "LinkedHashMap",
        "java",
        "util",
        "NoSuchElementException",
        "java",
        "util",
        "concurrent",
        "Executor",
        "java",
        "util",
        "concurrent",
        "LinkedBlockingQueue",
        "java",
        "util",
        "concurrent",
        "ThreadFactory",
        "java",
        "util",
        "concurrent",
        "ThreadPoolExecutor",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "regex",
        "Matcher",
        "java",
        "util",
        "regex",
        "Pattern",
        "okio",
        "BufferedSink",
        "okio",
        "BufferedSource",
        "okio",
        "Okio",
        "okio",
        "Sink",
        "okio",
        "Source",
        "org",
        "jetbrains",
        "annotations",
        "NotNull",
        "org",
        "jetbrains",
        "annotations",
        "SuppressWarnings",
        "JOURNAL_FILE",
        "JOURNAL_FILE_TEMP",
        "JOURNAL_FILE_BACKUP",
        "MAGIC",
        "VERSION_1",
        "ANY_SEQUENCE_NUMBER",
        "LEGAL_KEY_PATTERN",
        "Pattern",
        "compile",
        "CLEAN",
        "DIRTY",
        "REMOVE",
        "READ",
        "fileSystem",
        "directory",
        "journalFile",
        "journalFileTmp",
        "journalFileBackup",
        "appVersion",
        "maxSize",
        "valueCount",
        "size",
        "journalWriter",
        "lruEntries",
        "redundantOpCount",
        "hasJournalErrors",
        "initialized",
        "closed",
        "mostRecentTrimFailed",
        "mostRecentRebuildFailed",
        "nextSequenceNumber",
        "executor",
        "cleanupRunnable",
        "Override",
        "DiskLruCache",
        "initialized",
        "closed",
        "trimToSize",
        "ignored",
        "mostRecentTrimFailed",
        "journalRebuildRequired",
        "rebuildJournal",
        "redundantOpCount",
        "e",
        "mostRecentRebuildFailed",
        "journalWriter",
        "Okio",
        "buffer",
        "Okio",
        "blackhole",
        "fileSystem",
        "directory",
        "appVersion",
        "valueCount",
        "maxSize",
        "executor",
        "fileSystem",
        "fileSystem",
        "directory",
        "directory",
        "appVersion",
        "appVersion",
        "journalFile",
        "directory",
        "JOURNAL_FILE",
        "journalFileTmp",
        "directory",
        "JOURNAL_FILE_TEMP",
        "journalFileBackup",
        "directory",
        "JOURNAL_FILE_BACKUP",
        "valueCount",
        "valueCount",
        "maxSize",
        "maxSize",
        "executor",
        "executor",
        "holdsLock",
        "initialized",
        "fileSystem",
        "exists",
        "journalFileBackup",
        "fileSystem",
        "exists",
        "journalFile",
        "fileSystem",
        "journalFileBackup",
        "fileSystem",
        "rename",
        "journalFileBackup",
        "journalFile",
        "fileSystem",
        "exists",
        "journalFile",
        "readJournal",
        "processJournal",
        "initialized",
        "journalIsCorrupt",
        "closed",
        "rebuildJournal",
        "initialized",
        "fileSystem",
        "directory",
        "appVersion",
        "valueCount",
        "maxSize",
        "maxSize",
        "valueCount",
        "executor",
        "TimeUnit",
        "SECONDS",
        "Override",
        "NotNull",
        "runnable",
        "result",
        "runnable",
        "result",
        "setDaemon",
        "result",
        "fileSystem",
        "directory",
        "appVersion",
        "valueCount",
        "maxSize",
        "executor",
        "source",
        "Okio",
        "buffer",
        "fileSystem",
        "source",
        "journalFile",
        "magic",
        "source",
        "readUtf8LineStrict",
        "version",
        "source",
        "readUtf8LineStrict",
        "appVersionString",
        "source",
        "readUtf8LineStrict",
        "valueCountString",
        "source",
        "readUtf8LineStrict",
        "blank",
        "source",
        "readUtf8LineStrict",
        "MAGIC",
        "equals",
        "magic",
        "VERSION_1",
        "equals",
        "version",
        "toString",
        "appVersion",
        "equals",
        "appVersionString",
        "toString",
        "valueCount",
        "equals",
        "valueCountString",
        "equals",
        "blank",
        "magic",
        "version",
        "valueCountString",
        "blank",
        "lineCount",
        "readJournalLine",
        "source",
        "readUtf8LineStrict",
        "lineCount",
        "endOfJournal",
        "redundantOpCount",
        "lineCount",
        "lruEntries",
        "size",
        "source",
        "exhausted",
        "rebuildJournal",
        "journalWriter",
        "newJournalWriter",
        "fileSink",
        "fileSystem",
        "appendingSink",
        "journalFile",
        "faultHidingSink",
        "fileSink",
        "Override",
        "e",
        "holdsLock",
        "DiskLruCache",
        "hasJournalErrors",
        "Okio",
        "buffer",
        "faultHidingSink",
        "line",
        "firstSpace",
        "line",
        "indexOf",
        "firstSpace",
        "line",
        "keyBegin",
        "firstSpace",
        "secondSpace",
        "line",
        "indexOf",
        "keyBegin",
        "key",
        "secondSpace",
        "key",
        "line",
        "substring",
        "keyBegin",
        "firstSpace",
        "REMOVE",
        "length",
        "line",
        "startsWith",
        "REMOVE",
        "lruEntries",
        "remove",
        "key",
        "key",
        "line",
        "substring",
        "keyBegin",
        "secondSpace",
        "entry",
        "lruEntries",
        "get",
        "key",
        "entry",
        "entry",
        "key",
        "lruEntries",
        "put",
        "key",
        "entry",
        "secondSpace",
        "firstSpace",
        "CLEAN",
        "length",
        "line",
        "startsWith",
        "CLEAN",
        "parts",
        "line",
        "substring",
        "secondSpace",
        "split",
        "entry",
        "readable",
        "entry",
        "currentEditor",
        "entry",
        "setLengths",
        "parts",
        "secondSpace",
        "firstSpace",
        "DIRTY",
        "length",
        "line",
        "startsWith",
        "DIRTY",
        "entry",
        "currentEditor",
        "entry",
        "secondSpace",
        "firstSpace",
        "READ",
        "length",
        "line",
        "startsWith",
        "READ",
        "line",
        "fileSystem",
        "journalFileTmp",
        "i",
        "lruEntries",
        "values",
        "iterator",
        "i",
        "hasNext",
        "entry",
        "i",
        "next",
        "entry",
        "currentEditor",
        "t",
        "t",
        "valueCount",
        "t",
        "size",
        "entry",
        "lengths",
        "t",
        "entry",
        "currentEditor",
        "t",
        "t",
        "valueCount",
        "t",
        "fileSystem",
        "entry",
        "cleanFiles",
        "t",
        "fileSystem",
        "entry",
        "dirtyFiles",
        "t",
        "i",
        "remove",
        "journalWriter",
        "journalWriter",
        "close",
        "writer",
        "Okio",
        "buffer",
        "fileSystem",
        "sink",
        "journalFileTmp",
        "writer",
        "writeUtf8",
        "MAGIC",
        "writeByte",
        "writer",
        "writeUtf8",
        "VERSION_1",
        "writeByte",
        "writer",
        "writeDecimalLong",
        "appVersion",
        "writeByte",
        "writer",
        "writeDecimalLong",
        "valueCount",
        "writeByte",
        "writer",
        "writeByte",
        "entry",
        "lruEntries",
        "values",
        "entry",
        "currentEditor",
        "writer",
        "writeUtf8",
        "DIRTY",
        "writeByte",
        "writer",
        "writeUtf8",
        "entry",
        "key",
        "writer",
        "writeByte",
        "writer",
        "writeUtf8",
        "CLEAN",
        "writeByte",
        "writer",
        "writeUtf8",
        "entry",
        "key",
        "entry",
        "writeLengths",
        "writer",
        "writer",
        "writeByte",
        "fileSystem",
        "exists",
        "journalFile",
        "fileSystem",
        "rename",
        "journalFile",
        "journalFileBackup",
        "fileSystem",
        "rename",
        "journalFileTmp",
        "journalFile",
        "fileSystem",
        "journalFileBackup",
        "journalWriter",
        "newJournalWriter",
        "hasJournalErrors",
        "mostRecentRebuildFailed",
        "key",
        "initialize",
        "checkNotClosed",
        "validateKey",
        "key",
        "entry",
        "lruEntries",
        "get",
        "key",
        "entry",
        "entry",
        "readable",
        "snapshot",
        "entry",
        "snapshot",
        "snapshot",
        "redundantOpCount",
        "journalWriter",
        "writeUtf8",
        "READ",
        "writeByte",
        "writeUtf8",
        "key",
        "writeByte",
        "journalRebuildRequired",
        "executor",
        "execute",
        "cleanupRunnable",
        "snapshot",
        "key",
        "edit",
        "key",
        "ANY_SEQUENCE_NUMBER",
        "key",
        "expectedSequenceNumber",
        "initialize",
        "checkNotClosed",
        "validateKey",
        "key",
        "entry",
        "lruEntries",
        "get",
        "key",
        "expectedSequenceNumber",
        "ANY_SEQUENCE_NUMBER",
        "entry",
        "entry",
        "sequenceNumber",
        "expectedSequenceNumber",
        "entry",
        "entry",
        "currentEditor",
        "mostRecentTrimFailed",
        "mostRecentRebuildFailed",
        "executor",
        "execute",
        "cleanupRunnable",
        "journalWriter",
        "writeUtf8",
        "DIRTY",
        "writeByte",
        "writeUtf8",
        "key",
        "writeByte",
        "journalWriter",
        "flush",
        "hasJournalErrors",
        "entry",
        "entry",
        "key",
        "lruEntries",
        "put",
        "key",
        "entry",
        "editor",
        "entry",
        "entry",
        "currentEditor",
        "editor",
        "editor",
        "directory",
        "maxSize",
        "maxSize",
        "maxSize",
        "maxSize",
        "initialized",
        "executor",
        "execute",
        "cleanupRunnable",
        "initialize",
        "size",
        "editor",
        "success",
        "entry",
        "editor",
        "entry",
        "entry",
        "currentEditor",
        "editor",
        "success",
        "entry",
        "readable",
        "i",
        "i",
        "valueCount",
        "i",
        "editor",
        "written",
        "i",
        "editor",
        "abort",
        "i",
        "fileSystem",
        "exists",
        "entry",
        "dirtyFiles",
        "i",
        "editor",
        "abort",
        "i",
        "i",
        "valueCount",
        "i",
        "dirty",
        "entry",
        "dirtyFiles",
        "i",
        "success",
        "fileSystem",
        "exists",
        "dirty",
        "clean",
        "entry",
        "cleanFiles",
        "i",
        "fileSystem",
        "rename",
        "dirty",
        "clean",
        "oldLength",
        "entry",
        "lengths",
        "i",
        "newLength",
        "fileSystem",
        "size",
        "clean",
        "entry",
        "lengths",
        "i",
        "newLength",
        "size",
        "size",
        "oldLength",
        "newLength",
        "fileSystem",
        "dirty",
        "redundantOpCount",
        "entry",
        "currentEditor",
        "entry",
        "readable",
        "success",
        "entry",
        "readable",
        "journalWriter",
        "writeUtf8",
        "CLEAN",
        "writeByte",
        "journalWriter",
        "writeUtf8",
        "entry",
        "key",
        "entry",
        "writeLengths",
        "journalWriter",
        "journalWriter",
        "writeByte",
        "success",
        "entry",
        "sequenceNumber",
        "nextSequenceNumber",
        "lruEntries",
        "remove",
        "entry",
        "key",
        "journalWriter",
        "writeUtf8",
        "REMOVE",
        "writeByte",
        "journalWriter",
        "writeUtf8",
        "entry",
        "key",
        "journalWriter",
        "writeByte",
        "journalWriter",
        "flush",
        "size",
        "maxSize",
        "journalRebuildRequired",
        "executor",
        "execute",
        "cleanupRunnable",
        "redundantOpCompactThreshold",
        "redundantOpCount",
        "redundantOpCompactThreshold",
        "redundantOpCount",
        "lruEntries",
        "size",
        "key",
        "initialize",
        "checkNotClosed",
        "validateKey",
        "key",
        "entry",
        "lruEntries",
        "get",
        "key",
        "entry",
        "removed",
        "removeEntry",
        "entry",
        "removed",
        "size",
        "maxSize",
        "mostRecentTrimFailed",
        "removed",
        "entry",
        "entry",
        "currentEditor",
        "entry",
        "currentEditor",
        "detach",
        "i",
        "i",
        "valueCount",
        "i",
        "fileSystem",
        "entry",
        "cleanFiles",
        "i",
        "size",
        "entry",
        "lengths",
        "i",
        "entry",
        "lengths",
        "i",
        "redundantOpCount",
        "journalWriter",
        "writeUtf8",
        "REMOVE",
        "writeByte",
        "writeUtf8",
        "entry",
        "key",
        "writeByte",
        "lruEntries",
        "remove",
        "entry",
        "key",
        "journalRebuildRequired",
        "executor",
        "execute",
        "cleanupRunnable",
        "closed",
        "isClosed",
        "Override",
        "initialized",
        "checkNotClosed",
        "trimToSize",
        "journalWriter",
        "flush",
        "Override",
        "initialized",
        "closed",
        "closed",
        "entry",
        "lruEntries",
        "values",
        "toArray",
        "lruEntries",
        "size",
        "entry",
        "currentEditor",
        "entry",
        "currentEditor",
        "abort",
        "trimToSize",
        "journalWriter",
        "close",
        "journalWriter",
        "closed",
        "size",
        "maxSize",
        "toEvict",
        "lruEntries",
        "values",
        "iterator",
        "next",
        "removeEntry",
        "toEvict",
        "mostRecentTrimFailed",
        "close",
        "fileSystem",
        "deleteContents",
        "directory",
        "initialize",
        "entry",
        "lruEntries",
        "values",
        "toArray",
        "lruEntries",
        "size",
        "removeEntry",
        "entry",
        "mostRecentTrimFailed",
        "key",
        "matcher",
        "LEGAL_KEY_PATTERN",
        "matcher",
        "key",
        "matcher",
        "matches",
        "key",
        "initialize",
        "lruEntries",
        "values",
        "iterator",
        "nextSnapshot",
        "removeSnapshot",
        "Override",
        "nextSnapshot",
        "DiskLruCache",
        "closed",
        "hasNext",
        "entry",
        "next",
        "snapshot",
        "entry",
        "snapshot",
        "snapshot",
        "nextSnapshot",
        "snapshot",
        "Override",
        "hasNext",
        "removeSnapshot",
        "nextSnapshot",
        "nextSnapshot",
        "removeSnapshot",
        "Override",
        "removeSnapshot",
        "DiskLruCache",
        "remove",
        "removeSnapshot",
        "key",
        "ignored",
        "removeSnapshot",
        "closeable",
        "name",
        "closeable",
        "closeable",
        "close",
        "e",
        "key",
        "sequenceNumber",
        "sources",
        "lengths",
        "key",
        "sequenceNumber",
        "sources",
        "lengths",
        "key",
        "key",
        "sequenceNumber",
        "sequenceNumber",
        "sources",
        "sources",
        "lengths",
        "lengths",
        "key",
        "DiskLruCache",
        "edit",
        "key",
        "sequenceNumber",
        "index",
        "sources",
        "index",
        "index",
        "lengths",
        "index",
        "Override",
        "sources",
        "closeQuietly",
        "entry",
        "written",
        "done",
        "entry",
        "entry",
        "entry",
        "written",
        "entry",
        "readable",
        "valueCount",
        "entry",
        "currentEditor",
        "i",
        "i",
        "valueCount",
        "i",
        "fileSystem",
        "entry",
        "dirtyFiles",
        "i",
        "e",
        "entry",
        "currentEditor",
        "index",
        "DiskLruCache",
        "done",
        "entry",
        "readable",
        "entry",
        "currentEditor",
        "fileSystem",
        "source",
        "entry",
        "cleanFiles",
        "index",
        "e",
        "index",
        "DiskLruCache",
        "done",
        "entry",
        "currentEditor",
        "Okio",
        "blackhole",
        "entry",
        "readable",
        "written",
        "index",
        "dirtyFile",
        "entry",
        "dirtyFiles",
        "index",
        "sink",
        "sink",
        "fileSystem",
        "sink",
        "dirtyFile",
        "e",
        "Okio",
        "blackhole",
        "sink",
        "Override",
        "e",
        "DiskLruCache",
        "detach",
        "DiskLruCache",
        "done",
        "entry",
        "currentEditor",
        "completeEdit",
        "done",
        "DiskLruCache",
        "done",
        "entry",
        "currentEditor",
        "completeEdit",
        "done",
        "DiskLruCache",
        "done",
        "entry",
        "currentEditor",
        "completeEdit",
        "ignored",
        "key",
        "lengths",
        "cleanFiles",
        "dirtyFiles",
        "readable",
        "currentEditor",
        "sequenceNumber",
        "key",
        "key",
        "key",
        "lengths",
        "valueCount",
        "cleanFiles",
        "valueCount",
        "dirtyFiles",
        "valueCount",
        "fileBuilder",
        "key",
        "append",
        "truncateTo",
        "fileBuilder",
        "length",
        "i",
        "i",
        "valueCount",
        "i",
        "fileBuilder",
        "append",
        "i",
        "cleanFiles",
        "i",
        "directory",
        "fileBuilder",
        "toString",
        "fileBuilder",
        "append",
        "dirtyFiles",
        "i",
        "directory",
        "fileBuilder",
        "toString",
        "fileBuilder",
        "setLength",
        "truncateTo",
        "strings",
        "strings",
        "length",
        "valueCount",
        "invalidLengths",
        "strings",
        "i",
        "i",
        "strings",
        "length",
        "i",
        "lengths",
        "i",
        "parseLong",
        "strings",
        "i",
        "e",
        "invalidLengths",
        "strings",
        "writer",
        "length",
        "lengths",
        "writer",
        "writeByte",
        "writeDecimalLong",
        "length",
        "strings",
        "Arrays",
        "toString",
        "strings",
        "holdsLock",
        "DiskLruCache",
        "sources",
        "valueCount",
        "lengths",
        "lengths",
        "clone",
        "i",
        "i",
        "valueCount",
        "i",
        "sources",
        "i",
        "fileSystem",
        "source",
        "cleanFiles",
        "i",
        "key",
        "sequenceNumber",
        "sources",
        "lengths",
        "e",
        "i",
        "i",
        "valueCount",
        "i",
        "sources",
        "i",
        "closeQuietly",
        "sources",
        "i",
        "removeEntry",
        "ignored"
    ],
    "literals": [
        "\"ConstantConditions\"",
        "\"journal\"",
        "\"journal.tmp\"",
        "\"journal.bkp\"",
        "\"libcore.io.DiskLruCache\"",
        "\"1\"",
        "\"[a-z0-9_-]{1,120}\"",
        "\"CLEAN\"",
        "\"DIRTY\"",
        "\"REMOVE\"",
        "\"READ\"",
        "\"maxSize <= 0\"",
        "\"valueCount <= 0\"",
        "\"OkHttp DiskLruCache\"",
        "\"\"",
        "\"unexpected journal header: [\"",
        "\", \"",
        "\", \"",
        "\", \"",
        "\"]\"",
        "\"unexpected journal line: \"",
        "\" \"",
        "\"unexpected journal line: \"",
        "\"Newly created entry didn't create value for index \"",
        "\"cache is closed\"",
        "\"keys must match regex [a-z0-9_-]{1,120}: \\\"\"",
        "\"\\\"\"",
        "\"remove() before next()\"",
        "\"source\"",
        "\".tmp\"",
        "\"unexpected journal line: \"",
        "\"file\""
    ],
    "variables": [
        "fileSystem",
        "directory",
        "journalFile",
        "journalFileTmp",
        "journalFileBackup",
        "appVersion",
        "maxSize",
        "valueCount",
        "journalWriter",
        "redundantOpCount",
        "hasJournalErrors",
        "initialized",
        "closed",
        "mostRecentTrimFailed",
        "mostRecentRebuildFailed",
        "executor",
        "key",
        "nextSnapshot",
        "removeSnapshot",
        "key",
        "sequenceNumber",
        "sources",
        "lengths",
        "entry",
        "written",
        "done",
        "sink",
        "key",
        "lengths",
        "cleanFiles",
        "dirtyFiles",
        "readable",
        "currentEditor",
        "sequenceNumber"
    ],
    "comments": [
        "Must be read and written when synchronized on 'this'.",
        "Nothing to do",
        "Already initialized.",
        "If a bkp file exists, use it instead.",
        "If journal file also exists just delete backup file.",
        "Prefer to pick up where we left off.",
        "logger.w(\"DiskLruCache \" + directory + \" is corrupt: \"",
        "+ journalIsCorrupt.getMessage() + \", removing\", journalIsCorrupt);",
        "The cache is corrupted, attempt to delete the contents of the directory. This can throw and",
        "we'll let that propagate out as it likely means there is a severe filesystem problem.",
        "Use a single background thread to evict entries.",
        "If we ended on a truncated line, rebuild the journal before appending to it.",
        "This work was already done by calling lruEntries.get().",
        "Snapshot is stale.",
        "Another edit is in progress.",
        "The OS has become our enemy! If the trim job failed, it means we are storing more data than",
        "requested by the user. Do not allow edits so we do not go over that limit any further. If",
        "the journal rebuild failed, the journal writer will not be active, meaning we will not be",
        "able to record the edit, causing file leaks. In both cases, we want to retry the clean up",
        "so we can get out of this state!",
        "Flush the journal before creating files to prevent file leaks.",
        "Don't edit; the journal can't be written.",
        "If this edit is creating the entry for the first time, every index must have a value.",
        "Prevent the edit from completing normally.",
        "Copying for safe iteration.",
        "Copying for safe iteration.",
        "If the cache is closed, truncate the iterator.",
        "Evicted since we copied the entries.",
        "Nothing useful to do here. We failed to remove from the cache. Most likely that's",
        "because we couldn't update the journal, but the cached entry will still be gone.",
        "logger.w(e, \"Failed to close \" + name);",
        "This file is potentially leaked. Not much we can do about that.",
        "The names are repetitive so re-use the same builder to avoid allocations.",
        "Defensive copy since these can be zeroed out.",
        "A file must have been deleted manually!",
        "Since the entry is no longer valid, remove it so the metadata is accurate (i.e. the cache",
        "size.)"
    ],
    "docstrings": [
        "* Copyright (C) 2011 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* A cache that uses a bounded amount of space on a filesystem. Each cache entry has a string key\n * and a fixed number of values. Each key must match the regex <strong>[a-z0-9_-]{1,64}</strong>.\n * Values are byte sequences, accessible as streams or files. Each value must be between {@code 0}\n * and {@code Integer.MAX_VALUE} bytes in length.\n *\n * <p>The cache stores its data in a directory on the filesystem. This directory must be exclusive\n * to the cache; the cache may delete or overwrite files from its directory. It is an error for\n * multiple processes to use the same cache directory at the same time.\n *\n * <p>This cache limits the number of bytes that it will store on the filesystem. When the number of\n * stored bytes exceeds the limit, the cache will remove entries in the background until the limit\n * is satisfied. The limit is not strict: the cache may temporarily exceed it while waiting for\n * files to be deleted. The limit does not include filesystem overhead or the cache journal so\n * space-sensitive applications should set a conservative limit.\n *\n * <p>Clients call {@link #edit} to create or update the values of an entry. An entry may have only\n * one editor at one time; if a value is not available to be edited then {@link #edit} will return\n * null.\n *\n * <ul>\n *     <li>When an entry is being <strong>created</strong> it is necessary to supply a full set of\n *         values; the empty value should be used as a placeholder if necessary.\n *     <li>When an entry is being <strong>edited</strong>, it is not necessary to supply data for\n *         every value; values default to their previous value.\n * </ul>\n *\n * <p>Every {@link #edit} call must be matched by a call to {@link Editor#commit} or {@link\n * Editor#abort}. Committing is atomic: a read observes the full set of values as they were before\n * or after the commit, but never a mix of values.\n *\n * <p>Clients call {@link #get} to read a snapshot of an entry. The read will observe the value at\n * the time that {@link #get} was called. Updates and removals after the call do not impact ongoing\n * reads.\n *\n * <p>This class is tolerant of some I/O errors. If files are missing from the filesystem, the\n * corresponding entries will be dropped from the cache. If an error occurs while writing a cache\n * value, the edit will fail silently. Callers should handle other problems by catching {@code\n * IOException} and responding appropriately.\n *\n * <p>Copied from OkHttp 3.14.2: https://github.com/square/okhttp/blob/\n * b8b6ee831c65208940c741f8e091ff02425566d5/\n * okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java",
        "* This cache uses a journal file named \"journal\". A typical journal file\n     * looks like this:\n     *     libcore.io.DiskLruCache\n     *     1\n     *     100\n     *     2\n     *\n     *     CLEAN 3400330d1dfc7f3f7f4b8d4d803dfcf6 832 21054\n     *     DIRTY 335c4c6028171cfddfbaae1a9c313c52\n     *     CLEAN 335c4c6028171cfddfbaae1a9c313c52 3934 2342\n     *     REMOVE 335c4c6028171cfddfbaae1a9c313c52\n     *     DIRTY 1ab96a171faeeee38496d8b330771a7a\n     *     CLEAN 1ab96a171faeeee38496d8b330771a7a 1600 234\n     *     READ 335c4c6028171cfddfbaae1a9c313c52\n     *     READ 3400330d1dfc7f3f7f4b8d4d803dfcf6\n     *\n     * The first five lines of the journal form its header. They are the\n     * constant string \"libcore.io.DiskLruCache\", the disk cache's version,\n     * the application's version, the value count, and a blank line.\n     *\n     * Each of the subsequent lines in the file is a record of the state of a\n     * cache entry. Each line contains space-separated values: a state, a key,\n     * and optional state-specific values.\n     *   o DIRTY lines track that an entry is actively being created or updated.\n     *     Every successful DIRTY action should be followed by a CLEAN or REMOVE\n     *     action. DIRTY lines without a matching CLEAN or REMOVE indicate that\n     *     temporary files may need to be deleted.\n     *   o CLEAN lines track a cache entry that has been successfully published\n     *     and may be read. A publish line is followed by the lengths of each of\n     *     its values.\n     *   o READ lines track accesses for LRU.\n     *   o REMOVE lines track entries that have been deleted.\n     *\n     * The journal file is appended to as cache operations occur. The journal may\n     * occasionally be compacted by dropping redundant lines. A temporary file named\n     * \"journal.tmp\" will be used during compaction; that file should be deleted if\n     * it exists when the cache is opened.",
        "* To differentiate between old and current snapshots, each entry is given a sequence number each\n   * time an edit is committed. A snapshot is stale if its sequence number is not equal to its\n   * entry's sequence number.",
        "Used to run 'cleanupRunnable' for journal rebuilds.",
        "* Create a cache which will reside in {@code directory}. This cache is lazily initialized on\n   * first access and will be created if it does not exist.\n   *\n   * @param directory a writable directory\n   * @param valueCount the number of values per cache entry. Must be positive.\n   * @param maxSize the maximum number of bytes this cache should use to store",
        "* Computes the initial size and collects garbage as a part of opening the cache. Dirty entries\n   * are assumed to be inconsistent and will be deleted.",
        "* Creates a new journal that omits redundant information. This replaces the current journal if it\n   * exists.",
        "* Returns a snapshot of the entry named {@code key}, or null if it doesn't exist is not currently\n   * readable. If a value is returned, it is moved to the head of the LRU queue.",
        "* Returns an editor for the entry named {@code key}, or null if another edit is in progress.",
        "Returns the directory where this cache stores its data.",
        "* Returns the maximum number of bytes that this cache should use to store its data.",
        "* Changes the maximum number of bytes the cache can store and queues a job to trim the existing\n   * store, if necessary.",
        "* Returns the number of bytes currently being used to store the values in this cache. This may be\n   * greater than the max size if a background deletion is pending.",
        "* We only rebuild the journal when it will halve the size of the journal and eliminate at least\n   * 2000 ops.",
        "* Drops the entry for {@code key} if it exists and can be removed. If the entry for {@code key}\n   * is currently being edited, that edit will complete normally but its value will not be stored.\n   *\n   * @return true if an entry was removed.",
        "Returns true if this cache has been closed.",
        "Force buffered operations to the filesystem.",
        "Closes this cache. Stored values will remain on the filesystem.",
        "* Closes the cache and deletes all of its stored values. This will delete all files in the cache\n   * directory including files that weren't created by the cache.",
        "* Deletes all stored values from the cache. In-flight edits will complete normally but their\n   * values will not be stored.",
        "* Returns an iterator over the cache's current entries. This iterator doesn't throw {@code\n   * ConcurrentModificationException}, but if new entries are added while iterating, those new\n   * entries will not be returned by the iterator. If existing entries are removed during iteration,\n   * they will be absent (unless they were already returned).\n   *\n   * <p>If there are I/O problems during iteration, this iterator fails silently. For example, if\n   * the hosting filesystem becomes unreachable, the iterator will omit elements rather than\n   * throwing exceptions.\n   *\n   * <p><strong>The caller must {@link Snapshot#close close}</strong> each snapshot returned by\n   * {@link Iterator#next}. Failing to do so leaks open files!\n   *\n   * <p>The returned iterator supports {@link Iterator#remove}.",
        "Iterate a copy of the entries to defend against concurrent modification errors.",
        "The snapshot to return from {@link #next}. Null if we haven't computed that yet.",
        "The snapshot to remove with {@link #remove}. Null if removal is illegal.",
        "A snapshot of the values for an entry.",
        "* Returns an editor for this snapshot's entry, or null if either the entry has changed since\n     * this snapshot was created or if another edit is in progress.",
        "Returns the unbuffered stream with the value for {@code index}.",
        "Returns the byte length of the value for {@code index}.",
        "Edits the values for an entry.",
        "* Prevents this editor from completing normally. This is necessary either when the edit causes\n     * an I/O error, or if the target entry is evicted while this editor is active. In either case\n     * we delete the editor's created files and prevent new files from being created. Note that once\n     * an editor has been detached it is possible for another editor to edit the entry.",
        "* Returns an unbuffered input stream to read the last committed value, or null if no value has\n     * been committed.",
        "* Returns a new unbuffered output stream to write the value at {@code index}. If the underlying\n     * output stream encounters errors when writing to the filesystem, this edit will be aborted\n     * when {@link #commit} is called. The returned output stream does not throw IOExceptions.",
        "* Commits this edit so it is visible to readers.  This releases the edit lock so another edit\n     * may be started on the same key.",
        "* Aborts this edit. This releases the edit lock so another edit may be started on the same\n     * key.",
        "Lengths of this entry's files.",
        "True if this entry has ever been published.",
        "The ongoing edit or null if this entry is not being edited.",
        "The sequence number of the most recently committed edit to this entry.",
        "Set lengths using decimal numbers like \"10123\".",
        "Append space-prefixed lengths to {@code writer}.",
        "* Returns a snapshot of this entry. This opens all streams eagerly to guarantee that we see a\n     * single published snapshot. If we opened streams lazily then the streams could come from\n     * different edits."
    ],
    "functions": [
        "run",
        "DiskLruCache",
        "initialize",
        "DiskLruCache",
        "create",
        "newThread",
        "readJournal",
        "BufferedSink",
        "newJournalWriter",
        "onException",
        "readJournalLine",
        "processJournal",
        "rebuildJournal",
        "Snapshot",
        "get",
        "Editor",
        "edit",
        "Editor",
        "edit",
        "File",
        "getDirectory",
        "getMaxSize",
        "setMaxSize",
        "size",
        "completeEdit",
        "journalRebuildRequired",
        "remove",
        "removeEntry",
        "isClosed",
        "checkNotClosed",
        "flush",
        "close",
        "trimToSize",
        "evictAll",
        "validateKey",
        "snapshots",
        "hasNext",
        "Snapshot",
        "next",
        "remove",
        "closeQuietly",
        "Snapshot",
        "key",
        "Editor",
        "edit",
        "Source",
        "getSource",
        "getLength",
        "close",
        "Editor",
        "detach",
        "Source",
        "newSource",
        "Sink",
        "newSink",
        "onException",
        "commit",
        "abort",
        "abortUnlessCommitted",
        "Entry",
        "setLengths",
        "writeLengths",
        "invalidLengths",
        "Snapshot",
        "snapshot"
    ],
    "classes": [
        "DiskLruCache",
        "Snapshot",
        "Editor",
        "Entry"
    ]
}