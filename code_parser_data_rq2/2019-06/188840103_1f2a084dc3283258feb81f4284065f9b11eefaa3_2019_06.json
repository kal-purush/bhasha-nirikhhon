{
    "identifiers": [
        "boundMethod",
        "TextChangeSession",
        "Selection",
        "SyncSubject",
        "NativeSyntheticEvent",
        "TextInputSelectionChangeEventData",
        "PCancelable",
        "DocumentDeltaAtomicUpdate",
        "TextBlock",
        "AsyncLock",
        "AsyncLock",
        "boundMethod",
        "executee",
        "LOCK_NAME",
        "executee",
        "overridingSelection",
        "atomicDeltaUpdate",
        "atomicDeltaUpdate",
        "atomicDeltaUpdate",
        "overridingSelection",
        "res",
        "hasCalledSelUpdate",
        "overridingSelection",
        "res",
        "res",
        "setTimeout",
        "hasCalledSelUpdate",
        "overridingSelection",
        "res",
        "res",
        "serialUpdatesGenerator",
        "PCancelable",
        "res",
        "rej",
        "onCancel",
        "onCancel",
        "onCancel",
        "update",
        "serialUpdatesGenerator",
        "update",
        "res",
        "e",
        "e",
        "PCancelable",
        "rej",
        "e",
        "syncSubject",
        "syncSubject",
        "nextText",
        "TextChangeSession",
        "nextText",
        "textInputSelectionChangeEvent",
        "Selection",
        "selection",
        "selection",
        "nextSelection",
        "promise",
        "iterator",
        "nextSelection",
        "promise",
        "contentChange",
        "contentChange"
    ],
    "literals": [
        "'autobind-decorator'",
        "'./TextChangeSession'",
        "'@delta/Selection'",
        "'./types'",
        "'react-native'",
        "'p-cancelable'",
        "'@delta/DocumentDeltaAtomicUpdate'",
        "'@model/TextBlock'",
        "'async-lock'",
        "'Sync'",
        "string"
    ],
    "variables": [
        "LOCK_NAME",
        "overridingSelection",
        "hasCalledSelUpdate",
        "textInputSelectionChangeEvent",
        "nextSelection",
        "promise",
        "iterator"
    ],
    "comments": [],
    "docstrings": [
        "* An entity responsible for granting state consistency in the {@link TextBlockController} component.\n *\n * @privateRemarks\n *\n * The synchronization mechanism is complex, because of three potential state discrepancies.\n *\n * **Fake equality**\n *\n * The second one is not a bug, but rather a feature of React virtual DOM engine. To understand the challange, lets propose a scenario:\n *\n * - The user types a word\n * - {@link react-native#TextInputProps.onChangeText} is fired\n * - {@link react-native#TextInputProps.onSelectionChange} is fired\n *\n * At that point, a delta is computed from text change and selection before and after change.\n * This delta strictly represents the result of applying a text diff algorithm to the previous text.\n *\n * Because of ordered and unordered lists in the context of a pure-text component, there is a set of rules which define\n * if applying a delta should result in adding or removing a text prefix. This phase is called *normalization*.\n *\n * Therefore, it appears that up to two delta might be computed for one {@link react-native#TextInputProps.onChangeText} call.\n * The concern is that, if we were to update component state with the latest delta alone, we could run into a situation were this\n * delta deeeply equals the previous delta, and thus the VDOM diff algorithm detects no changes after rerendering.\n *\n * This is why **we must serialy apply two delta updates when a normalization process happens**. We call this process *serial update*,\n * and the data necessary to perform such is encapsulated in the {@link DocumentDeltaSerialUpdate} class.\n *\n * **Selection discrepancy**\n *\n * Because of *normalization*, the active selection in native {@link react-native#TextInput} component might become inconsistant.\n * That is why we must update it during a *serial update*. We call this process *selection override*.\n *\n * However, {@link https://git.io/fjamu | a bug in RN < 60} prevents updating selection and text during the same\n * render cycle. Instead, any selection override must happen after the next {@link react-native#TextInputProps.onSelectionChange} call\n * following a render cycle.\n *\n * **Atomicity**\n *\n * A new issue might emerge during a *serial update*. That is: user types during the update, and the consistency breaks, introducing bugs.\n * One solution could be to lock state during update. But that would prevent the user from typing; not acceptable for UX.\n *\n * Another solution would be to deterministically infer a new state from this text update disruption. To do so, lets cut a *serial update*\n * into a list of atomic updates. Required updates are marked with an asterisk (*):\n *\n * 1. intermediary rich content (delta) update\n * 2. intermediary selection update\n * 3. final rich content (delta) update*\n * 4. final selection update\n *\n * When {@link react-native#TextInputProps.onChangeText} is called between one of these steps, we can:\n *\n * 1. compute a new *serial update* from the last delta passed to state\n * 2. ignore forthcoming atomic updates from the original *serial update*\n *",
        "* **Preconditions**: this method must be called before handleOnSelectionChange\n   * This is the current TextInput behavior.\n   *\n   * @param nextText",
        "* **Preconditions**: this method must be called after handleOnTextChanged\n   *\n   * @param textInputSelectionChangeEvent"
    ],
    "functions": [
        "onCancelActiveSerialUpdate",
        "textBlock",
        "acquireLock",
        "overrideSelection",
        "performAtomicUpdate",
        "performSerialUpdate",
        "handleOnSheetDomainTextChanged",
        "handleOnSheetDomainSelectionChange",
        "handleControlDomainContentChange",
        "release"
    ],
    "classes": [
        "Synchronizer"
    ]
}