{
    "identifiers": [
        "subprocess",
        "os",
        "sys",
        "shutil",
        "service_manager",
        "change_camera_mode",
        "change_calibration_mode",
        "repo",
        "repo",
        "command",
        "subprocess",
        "Popen",
        "command",
        "split",
        "stdout",
        "subprocess",
        "PIPE",
        "stderr",
        "subprocess",
        "STDOUT",
        "MyOut",
        "communicate",
        "error",
        "format",
        "command",
        "repo",
        "os",
        "chdir",
        "format",
        "repo",
        "shutil",
        "make_archive",
        "format",
        "repo",
        "repo",
        "format",
        "repo",
        "error",
        "error",
        "cd_into_repo",
        "repo",
        "check_cd",
        "repo",
        "get_requirements_path_in_repo",
        "repo",
        "repo_object",
        "cd_into_repo",
        "path_to_repo_requirements",
        "check_cd",
        "REQUIREMENTS_PATH_ERROR",
        "error",
        "error",
        "REQUIREMENTS_PATH_ERROR",
        "repo_object",
        "execute_command",
        "command",
        "stderr_update",
        "INSTALL_REQUIREMENTS_ERROR",
        "stdout_update",
        "stdout_update",
        "split",
        "lstrip",
        "lstrip",
        "format",
        "repo",
        "repo",
        "os",
        "chdir",
        "error",
        "error",
        "INSTALL_REQUIREMENTS_ERROR",
        "os",
        "chdir",
        "repo",
        "repos_to_zip",
        "format",
        "repo",
        "cd_into_repo",
        "repo",
        "check_cd_into_repo",
        "execute_command",
        "format",
        "repo",
        "repo",
        "execute_command",
        "command",
        "stdout",
        "stderr",
        "execute_command",
        "command",
        "stderr_pull",
        "format",
        "repo",
        "stderr_pull",
        "update_local_code_repo",
        "repo",
        "check",
        "general_errors",
        "check",
        "INSTALL_REQUIREMENTS_ERROR",
        "general_errors",
        "check",
        "REQUIREMENTS_PATH_CHANGE_ERROR",
        "check",
        "REQUIREMENTS_PATH_ERROR",
        "stderr",
        "stderr",
        "format",
        "stderr",
        "changed_path",
        "os",
        "chdir",
        "repos_to_zip",
        "general_errors",
        "general_errors",
        "len",
        "repos_to_zip",
        "general_errors",
        "roll_back",
        "format",
        "join",
        "repos_to_zip",
        "stop_services",
        "repo",
        "repos_to_zip",
        "format",
        "repo",
        "remove_repo",
        "repo",
        "check_removal",
        "repo",
        "format",
        "repo",
        "execute_command",
        "command",
        "stderr",
        "change_camera_mode",
        "change_calibration_mode",
        "repo",
        "os",
        "chdir",
        "os",
        "path",
        "abspath",
        "repo",
        "error",
        "error",
        "REQUIREMENTS_PATH_CHANGE_ERROR",
        "main"
    ],
    "literals": [
        "\"GIT_REPO_LOCATION\"",
        "\"wapy-camera-service\"",
        "\"wapy-calibration-service\"",
        "\"wapy-camera-service\"",
        "\"path\"",
        "\"CameraService\"",
        "\"command\"",
        "\"python -m pip install -r requirements.txt\"",
        "\"wapy-calibration-service\"",
        "\"path\"",
        "\".\"",
        "\"command\"",
        "\"npm install\"",
        "\"ERROR: failed to execute command: {}\"",
        "\"\"",
        "\"ERROR\"",
        "\"..\"",
        "\"\\tINFO: backing up repo {} before fetching and install updates\"",
        "\"./backups/backup_repo_{}\"",
        "'zip'",
        "\"\\tINFO: {} repo backed up\"",
        "\"INFO: starting to update packages...\"",
        "'path'",
        "'command'",
        "\"\\\\n\"",
        "'b'",
        "'\"'",
        "\"\"",
        "\"INFO: repo {} packages has been updated!\"",
        "\"wapy-camera-service\"",
        "\"..\"",
        "\"..\"",
        "\"INFO: checking for git changes in all repos...\"",
        "\"-\"",
        "\"INFO: checking for changes in {} repo\"",
        "\"INFO: cd into repo...\"",
        "\"ERROR: continue to the next repo...\"",
        "\"git checkout master\"",
        "\"git diff master origin/master\"",
        "\"INFO: there are changes, will pull now...\"",
        "\"git pull\"",
        "\"ERROR: Got errors while fetching repo {} from git: \\n{}\\n\"",
        "\"INFO: changes fetched from git, code has been updated...\"",
        "\"INFO: Done updating!\"",
        "\"INFO: NO changes in repo!\"",
        "\"ERROR: got some errors while fetching repo from git: \\n{}\"",
        "\"..\"",
        "\"-\"",
        "\"---- FINAL INFO: all repos has been updated! ----\"",
        "\"---- FINAL INFO: NONE of the repos has been updated ----\"",
        "\"---- FINAL INFO: some repos has not been updated, check log above ----\"",
        "\"ERROR: rolling back...\"",
        "\"ERROR: stopping all services: {}\"",
        "\", \"",
        "\"SENSITIVE: rolling back repo {}\"",
        "\"SENSITIVE: removed current repo...\"",
        "\"\\n!----- SENSITIVE: something went wrong removing files! -----!\\n\"",
        "\"Removed all Repos -> waiting for the next run that the agent will pull from git\"",
        "\"\\tSENSITIVE: removing repo...\"",
        "\"rmdir {} /s\"",
        "\"__main__\""
    ],
    "variables": [
        "environment_variable_git_repo",
        "repos_to_zip",
        "REQUIREMENTS_PATH_ERROR",
        "REQUIREMENTS_PATH_CHANGE_ERROR",
        "INSTALL_REQUIREMENTS_ERROR",
        "MyOut",
        "check_cd",
        "repo_object",
        "path_to_repo_requirements",
        "check_cd",
        "command",
        "stdout_update",
        "stderr_update",
        "general_errors",
        "changed_path",
        "check_cd_into_repo",
        "cmd",
        "errors",
        "command",
        "stdout",
        "stderr",
        "command",
        "stdout_pull",
        "stderr_pull",
        "check",
        "general_errors",
        "changed_path",
        "changed_path",
        "changed_path",
        "check_removal",
        "command",
        "stdout",
        "stderr"
    ],
    "comments": [
        "getting errors and the output",
        "get into the path to repo with the requirements for new code",
        "install the new components we need for the new code",
        "diff from git",
        "# backing up the repo before updating the repo - in case of failure",
        "if not backup_repo_before_update(repo):",
        "return False",
        "getting the new files from repo",
        "checking for errors while fetching",
        "update the components for python code",
        "checking the return code after updating repos",
        "return to the main folder with all repos",
        "remove current repo - maybe corrupted"
    ],
    "docstrings": [],
    "functions": [
        "get_requirements_path_in_repo",
        "execute_command",
        "backup_repo_before_update",
        "update_local_code_repo",
        "main",
        "roll_back",
        "remove_repo",
        "stop_services",
        "cd_into_repo"
    ],
    "classes": []
}