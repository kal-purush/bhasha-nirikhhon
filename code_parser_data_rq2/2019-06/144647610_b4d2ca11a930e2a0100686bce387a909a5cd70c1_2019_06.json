{
    "identifiers": [
        "pickle",
        "csv",
        "numpy",
        "np",
        "glob",
        "sys",
        "exit",
        "sklearn",
        "preprocessing",
        "array",
        "value",
        "np",
        "asarray",
        "array",
        "np",
        "abs",
        "array",
        "value",
        "diff_array",
        "argmin",
        "idx",
        "condition_ind",
        "repr",
        "condition_ind",
        "repr",
        "condition_ind",
        "repr",
        "condition_ind",
        "repr",
        "condition_ind",
        "open",
        "PT_filename",
        "newline",
        "csvfile",
        "csv",
        "reader",
        "csvfile",
        "delimiter",
        "quotechar",
        "row",
        "spamreader",
        "iter",
        "np",
        "elem",
        "elem",
        "row",
        "all_rows",
        "append",
        "row",
        "row",
        "iter",
        "PT_arrays",
        "append",
        "np",
        "asarray",
        "all_rows",
        "open",
        "PF_filename",
        "newline",
        "csvfile",
        "csv",
        "reader",
        "csvfile",
        "delimiter",
        "quotechar",
        "row",
        "spamreader",
        "iter",
        "np",
        "elem",
        "elem",
        "row",
        "all_rows",
        "append",
        "row",
        "row",
        "iter",
        "PF_arrays",
        "append",
        "np",
        "asarray",
        "all_rows",
        "open",
        "LC_filename",
        "newline",
        "csvfile",
        "csv",
        "reader",
        "csvfile",
        "delimiter",
        "quotechar",
        "row",
        "spamreader",
        "iter",
        "np",
        "elem",
        "elem",
        "row",
        "all_rows",
        "append",
        "row",
        "row",
        "iter",
        "LC_arrays",
        "append",
        "np",
        "asarray",
        "all_rows",
        "open",
        "LC_all_filename",
        "newline",
        "csvfile",
        "csv",
        "reader",
        "csvfile",
        "delimiter",
        "quotechar",
        "row",
        "spamreader",
        "iter",
        "np",
        "elem",
        "elem",
        "row",
        "all_rows",
        "append",
        "row",
        "row",
        "iter",
        "LC_all_arrays",
        "append",
        "np",
        "asarray",
        "all_rows",
        "array_ind",
        "len",
        "LC_arrays",
        "LC_arrays",
        "array_ind",
        "this_array",
        "PF_arrays",
        "array_ind",
        "PT_arrays",
        "array_ind",
        "time",
        "time_column",
        "find_nearest",
        "this_PF_array",
        "time",
        "filtered_PF_array",
        "append",
        "this_PF_array",
        "array_idx",
        "find_nearest",
        "this_PT_array",
        "time",
        "filtered_PT_array",
        "append",
        "this_PT_array",
        "array_idx",
        "f_PF_arrays",
        "append",
        "filtered_PF_array",
        "f_PT_arrays",
        "append",
        "filtered_PT_array"
    ],
    "literals": [
        "'SRI_collab/PT_Cond'",
        "'.csv'",
        "'SRI_collab/PF_Cond'",
        "'.csv'",
        "'SRI_collab/LC_Cond'",
        "'.csv'",
        "'SRI_collab/LC_all_Cond'",
        "'.csv'",
        "''",
        "','",
        "'|'",
        "''",
        "','",
        "'|'",
        "''",
        "','",
        "'|'",
        "''",
        "','",
        "'|'"
    ],
    "variables": [
        "with_debug",
        "scale_data",
        "array",
        "diff_array",
        "idx",
        "PT_arrays",
        "PF_arrays",
        "LC_arrays",
        "LC_all_arrays",
        "PT_filename",
        "PF_filename",
        "LC_filename",
        "LC_all_filename",
        "spamreader",
        "iter",
        "all_rows",
        "row",
        "iter",
        "spamreader",
        "iter",
        "all_rows",
        "row",
        "iter",
        "spamreader",
        "iter",
        "all_rows",
        "row",
        "iter",
        "spamreader",
        "iter",
        "all_rows",
        "row",
        "iter",
        "f_PF_arrays",
        "f_PT_arrays",
        "this_array",
        "time_column",
        "this_PF_array",
        "this_PT_array",
        "filtered_PF_array",
        "filtered_PT_array",
        "array_idx",
        "array_idx"
    ],
    "comments": [],
    "docstrings": [
        "'''\nif with_debug:\n\tprint \"[DEBUG]\" + repr(filelist);\n\nYp_global=[];\nYf_global=[];\nu_global=[];\n\n\nfor file in filelist[0:]:\n\t# filename='partMDdata/' + file\n\twith open(file,'rb') as datafile:\n\n\n\n\n\t\tdata=csv.reader(datafile, delimiter=',')\n\t\t\n\t\tif with_debug:\n\t\t\tprint \"[DEBUG]: data ingest object\" + repr(data)\n\n\t\t#Convert data obj to parsable format. \n\t\tdatalist=list(data)\n\t\tn_points = len(datalist); # number of time-series points. \n\n\t\tY_whole=np.asarray(datalist,dtype=np.float32)\n                #print Y_whole[0,freq_states] \n                #Y_whole[:,freq_states] = Y_whole[:,freq_states]\n                \n                print \"Y_whole.shape\" + repr(Y_whole.shape)\n\t\tif with_debug:\n\t\t\tprint \"Dimensions of data array: \" + repr(Y_whole.shape);\n\t\t#Extract State and Control Time-Series Matrices \n\t\tFiltered_State_Whole = np.empty([n_points,1]);\n\n\t\tfor i in range(0,len(chosen_state)):\n\t\t\ttime_horizon = len(Y_whole[:,0]);\n\t\t\tappend_vec = np.reshape(Y_whole[:,chosen_state[i]],(time_horizon,1) );\n\t\t\tif with_debug:\n\t\t\t\tprint \"[DEBUG] append_vec.shape: \" + repr (append_vec.shape);\n\t\t\tFiltered_State_Whole = np.hstack([Filtered_State_Whole, append_vec]);\n\n\n\t\tFiltered_State_Whole= np.delete(Filtered_State_Whole,0,1)\n\n\t\t\n\t\tif with_debug:\n\t\t\tprint \"[DEBUG]: shape of filtered states \" + repr(Filtered_State_Whole.shape)\n\n\n\n\t\tControl_Whole = Y_whole[:,-1-n_controls:-1];\n\n\t\t\n\t\t#Define One-Step State and Control Data \n\t\tYp = Filtered_State_Whole[0:n_points-1];\n\t\tYf = Filtered_State_Whole[1:n_points];\n\t\tUp = Control_Whole[0:n_points-1]; \n\n\t\t#Append time-series data to global data arrays. \n\t\tfor j in range(0,n_points_truncate):\n\t\t\tYp_global.append(Yp[j])\n\t\t\tYf_global.append(Yf[j])\n\t\t\tu_global.append(Up[j]);\n\n\t\tdatafile.close()\n\nprint Up\n\nif scale_data:\n\tu_scaler = preprocessing.StandardScaler().fit(u_global);\n\ty_scaler = preprocessing.StandardScaler().fit(Yp_global);\n\tYp_global = y_scaler.transform(Yp_global);\n\tYf_global = y_scaler.transform(Yf_global);\n\tu_global = u_scaler.transform(u_global);\n\tscalerfile_path = './koopman_scalers/MD_scaler.pickle';\n        scalerfile = open(scalerfile_path,'wb');\n        pickle.dump([u_scaler,y_scaler],scalerfile);\n        scalerfile.close();\n\n\t\t\n\nprint \"[Result] Successfully generated  \"\nprint \"\\n -------- \\n ----  Stats ----\\n --------\" + \"\\nNum. of States: \" + repr(len(Yp_global[0])) + \"\\nNum. of Controls: \" + repr(len(u_global[0])) + \"\\nNum. of Time-points: \" + repr(len(Yp_global));\n\n#print \"# time epoches:\" + repr(len(u_global))\n\n\npicklefile_path = './koopman_data/MD.pickle';\n# picklefile_path= './pickledata/MD.pickle'\n#picklefile_path= '/Users/youp387/Desktop/Koopman/KOdataset/pickledata/MD.pickle'\n\npicklefile=open(picklefile_path,'wb')\npickle.dump([Yp_global,Yf_global,u_global],picklefile)\n\npicklefile.close()\n'''"
    ],
    "functions": [
        "find_nearest"
    ],
    "classes": []
}