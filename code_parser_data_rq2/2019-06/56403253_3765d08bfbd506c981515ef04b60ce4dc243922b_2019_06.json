{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Numerics",
        "IO",
        "Diagnostics",
        "Contracts",
        "Collections",
        "ObjectModel",
        "Diagnostics",
        "Bpl",
        "Microsoft",
        "Boogie",
        "Microsoft",
        "Dafny",
        "Compiler",
        "ErrorReporter",
        "reporter",
        "reporter",
        "Import",
        "Import",
        "Import",
        "Name",
        "Path",
        "Import",
        "Import",
        "StandardImports",
        "Import",
        "Program",
        "program",
        "TargetWriter",
        "wr",
        "wr",
        "WriteLine",
        "program",
        "Name",
        "ModuleName",
        "MainModuleName",
        "HasMain",
        "program",
        "_",
        "Path",
        "GetFileNameWithoutExtension",
        "program",
        "Name",
        "wr",
        "WriteLine",
        "ModuleName",
        "wr",
        "WriteLine",
        "EmitImports",
        "wr",
        "RootImportWriter",
        "RootImportDummyWriter",
        "BuiltIns",
        "builtIns",
        "TargetWriter",
        "wr",
        "wr",
        "NewFile",
        "TargetWriter",
        "wr",
        "wr",
        "WriteLine",
        "ModuleName",
        "wr",
        "WriteLine",
        "ModuleName",
        "wr",
        "WriteLine",
        "wr",
        "WriteLine",
        "ModuleName",
        "wr",
        "WriteLine",
        "wr",
        "WriteLine",
        "EmitImports",
        "wr",
        "_",
        "_",
        "TargetWriter",
        "wr",
        "TargetWriter",
        "importWriter",
        "TargetWriter",
        "importDummyWriter",
        "NotImplementedException",
        "importDummyWriter",
        "wr",
        "ForkSection",
        "Imports",
        "EmitImport",
        "wr",
        "importDummyWriter",
        "Import",
        "TargetWriter",
        "importWriter",
        "TargetWriter",
        "importDummyWriter",
        "Path",
        "importWriter",
        "WriteLine",
        "path",
        "importWriter",
        "WriteLine",
        "IClassWriter",
        "wr",
        "NotImplementedException",
        "moduleName",
        "isDefault",
        "isExtern",
        "libraryName",
        "TargetWriter",
        "wr",
        "IdProtect",
        "moduleName",
        "Import",
        "Name",
        "moduleName",
        "Path",
        "pkgName",
        "Format",
        "pkgName",
        "wr",
        "NewFile",
        "filename",
        "ModuleName",
        "moduleName",
        "EmitModuleHeader",
        "w",
        "Format",
        "IdProtect",
        "moduleName",
        "wr",
        "NewBigBlock",
        "s",
        "s",
        "NotImplementedException",
        "SubsetTypeDecl",
        "sst",
        "TargetWriter",
        "wr",
        "CreateClass",
        "IdName",
        "sst",
        "sst",
        "TypeArgs",
        "wr",
        "ClassWriter",
        "sst",
        "WitnessKind",
        "SubsetTypeDecl",
        "WKind",
        "Compiled",
        "TargetWriter",
        "cw",
        "InstanceMemberWriter",
        "IndentLevel",
        "TrExpr",
        "sst",
        "Witness",
        "sw",
        "cw",
        "DeclareField",
        "sst",
        "Rhs",
        "sst",
        "tok",
        "sw",
        "ToString",
        "IClassWriter",
        "JavaCompiler",
        "compiler",
        "BlockTargetWriter",
        "instanceMemberWriter",
        "BlockTargetWriter",
        "staticMemberWriter",
        "Contract",
        "Requires",
        "compiler",
        "Contract",
        "Requires",
        "instanceMemberWriter",
        "Compiler",
        "compiler",
        "InstanceMemberWriter",
        "instanceMemberWriter",
        "StaticMemberWriter",
        "staticMemberWriter",
        "instanceMemberWriter",
        "staticMemberWriter",
        "isStatic",
        "isStatic",
        "StaticMemberWriter",
        "InstanceMemberWriter",
        "Method",
        "m",
        "createBody",
        "Compiler",
        "CreateMethod",
        "m",
        "createBody",
        "Writer",
        "m",
        "IsStatic",
        "name",
        "TypeParameter",
        "typeArgs",
        "Formal",
        "formals",
        "Type",
        "resultType",
        "Bpl",
        "IToken",
        "tok",
        "isStatic",
        "createBody",
        "MemberDecl",
        "member",
        "NotImplementedException",
        "name",
        "Type",
        "resultType",
        "Bpl",
        "IToken",
        "tok",
        "isStatic",
        "createBody",
        "MemberDecl",
        "member",
        "NotImplementedException",
        "name",
        "Type",
        "resultType",
        "Bpl",
        "IToken",
        "tok",
        "isStatic",
        "createBody",
        "MemberDecl",
        "member",
        "TargetWriter",
        "setterWriter",
        "NotImplementedException",
        "name",
        "isStatic",
        "isConst",
        "Type",
        "Bpl",
        "IToken",
        "tok",
        "rhs",
        "NotImplementedException",
        "InstanceMemberWriter",
        "Method",
        "m",
        "createBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "Type",
        "TextWriter",
        "wr",
        "Bpl",
        "IToken",
        "tok",
        "MemberDecl",
        "member",
        "Contract",
        "Ensures",
        "Contract",
        "Result",
        "Contract",
        "Assume",
        "NormalizeExpand",
        "xType",
        "TypeProxy",
        "xType",
        "BoolType",
        "xType",
        "CharType",
        "xType",
        "IntType",
        "xType",
        "BigOrdinalType",
        "xType",
        "RealType",
        "xType",
        "BitvectorType",
        "BitvectorType",
        "xType",
        "t",
        "NativeType",
        "GetNativeTypeName",
        "t",
        "NativeType",
        "xType",
        "AsNewtype",
        "xType",
        "AsNewtype",
        "NativeType",
        "nativeType",
        "GetNativeTypeName",
        "nativeType",
        "TypeName",
        "xType",
        "AsNewtype",
        "BaseType",
        "wr",
        "tok",
        "xType",
        "IsObjectQ",
        "xType",
        "IsArrayType",
        "xType",
        "AsArrayType",
        "Contract",
        "Assert",
        "at",
        "UserDefinedType",
        "ArrayElementType",
        "xType",
        "TypeName_SplitArrayName",
        "elType",
        "wr",
        "tok",
        "typeNameSansBrackets",
        "brackets",
        "typeNameSansBrackets",
        "TypeNameArrayBrackets",
        "at",
        "Dims",
        "brackets",
        "xType",
        "UserDefinedType",
        "UserDefinedType",
        "xType",
        "FullTypeName",
        "udt",
        "member",
        "udt",
        "ResolvedClass",
        "cl",
        "Attributes",
        "ContainsBool",
        "cl",
        "Attributes",
        "isHandle",
        "isHandle",
        "DafnyOptions",
        "O",
        "IronDafny",
        "xType",
        "ArrowType",
        "cl",
        "cl",
        "Module",
        "cl",
        "Module",
        "IsDefaultModule",
        "s",
        "cl",
        "FullCompileName",
        "TypeName_UDT",
        "s",
        "udt",
        "TypeArgs",
        "wr",
        "udt",
        "tok",
        "xType",
        "SetType",
        "SetType",
        "xType",
        "Arg",
        "ComplicatedTypeParameterForCompilation",
        "argType",
        "tok",
        "wr",
        "DafnySetClass",
        "TypeName",
        "argType",
        "wr",
        "tok",
        "xType",
        "SeqType",
        "SeqType",
        "xType",
        "Arg",
        "ComplicatedTypeParameterForCompilation",
        "argType",
        "tok",
        "wr",
        "DafnySeqClass",
        "TypeName",
        "argType",
        "wr",
        "tok",
        "xType",
        "MultiSetType",
        "MultiSetType",
        "xType",
        "Arg",
        "ComplicatedTypeParameterForCompilation",
        "argType",
        "tok",
        "wr",
        "DafnyMultiSetClass",
        "TypeName",
        "argType",
        "wr",
        "tok",
        "xType",
        "MapType",
        "MapType",
        "xType",
        "Domain",
        "MapType",
        "xType",
        "Range",
        "ComplicatedTypeParameterForCompilation",
        "domType",
        "ComplicatedTypeParameterForCompilation",
        "ranType",
        "tok",
        "wr",
        "DafnyMapClass",
        "TypeName",
        "domType",
        "wr",
        "tok",
        "TypeName",
        "ranType",
        "wr",
        "tok",
        "Contract",
        "Assert",
        "cce",
        "UnreachableException",
        "name",
        "PublicIdProtect",
        "name",
        "name",
        "name",
        "name",
        "First",
        "name",
        "name",
        "name",
        "name",
        "Type",
        "TextWriter",
        "wr",
        "Bpl",
        "IToken",
        "tok",
        "inAutoInitContext",
        "NotImplementedException",
        "fullCompileName",
        "Type",
        "typeArgs",
        "TextWriter",
        "wr",
        "Bpl",
        "IToken",
        "tok",
        "NotImplementedException",
        "Type",
        "TextWriter",
        "wr",
        "Bpl",
        "IToken",
        "tok",
        "MemberDecl",
        "member",
        "NotImplementedException",
        "prefix",
        "name",
        "Type",
        "Bpl",
        "IToken",
        "tok",
        "isInParam",
        "TextWriter",
        "wr",
        "NotImplementedException",
        "name",
        "Type",
        "Bpl",
        "IToken",
        "tok",
        "leaveRoomForRhs",
        "rhs",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "name",
        "Type",
        "Bpl",
        "IToken",
        "tok",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "name",
        "Type",
        "Bpl",
        "IToken",
        "tok",
        "rhs",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "Type",
        "typeArgs",
        "Bpl",
        "IToken",
        "tok",
        "TextWriter",
        "wr",
        "NotImplementedException",
        "target",
        "Type",
        "TextWriter",
        "wr",
        "Bpl",
        "IToken",
        "tok",
        "NotImplementedException",
        "TargetWriter",
        "wr",
        "Expression",
        "arg",
        "NotImplementedException",
        "Formal",
        "outParams",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "label",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "label",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "message",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "UserDefinedType",
        "udt",
        "MemberDecl",
        "member",
        "NotImplementedException",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "DatatypeValue",
        "dtv",
        "arguments",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "SpecialField",
        "ID",
        "id",
        "idParam",
        "compiledName",
        "preString",
        "postString",
        "NotImplementedException",
        "MemberDecl",
        "member",
        "isLValue",
        "Type",
        "expectedType",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "indices",
        "Type",
        "elmtType",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "Expression",
        "indices",
        "Type",
        "elmtType",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "Expression",
        "expr",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "Expression",
        "source",
        "Expression",
        "index",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "Expression",
        "source",
        "Expression",
        "index",
        "Expression",
        "value",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "nativeIndex",
        "NotImplementedException",
        "Expression",
        "source",
        "Expression",
        "lo",
        "Expression",
        "hi",
        "fromArray",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "MultiSetFormingExpr",
        "expr",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "Type",
        "functionType",
        "Bpl",
        "IToken",
        "tok",
        "Expression",
        "Expression",
        "arguments",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "boundVars",
        "Expression",
        "arguments",
        "typeArgs",
        "Type",
        "boundTypes",
        "Type",
        "resultType",
        "Bpl",
        "IToken",
        "resultTok",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "source",
        "Formal",
        "dtor",
        "formalNonGhostIndex",
        "DatatypeCtor",
        "ctor",
        "Type",
        "typeArgs",
        "Type",
        "bvType",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "Type",
        "inTypes",
        "Bpl",
        "IToken",
        "tok",
        "inNames",
        "Type",
        "resultType",
        "TargetWriter",
        "wr",
        "untyped",
        "NotImplementedException",
        "Expression",
        "source",
        "inLetExprBody",
        "Type",
        "sourceType",
        "Bpl",
        "IToken",
        "sourceTok",
        "Type",
        "resultType",
        "Bpl",
        "IToken",
        "resultTok",
        "bvName",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "source",
        "Type",
        "sourceType",
        "Bpl",
        "IToken",
        "sourceTok",
        "Type",
        "resultType",
        "Bpl",
        "IToken",
        "resultTok",
        "bvName",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "Type",
        "resultType",
        "Bpl",
        "IToken",
        "resultTok",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "ResolvedUnaryOp",
        "op",
        "Expression",
        "expr",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "BinaryExpr",
        "ResolvedOpcode",
        "op",
        "Expression",
        "e0",
        "Expression",
        "e1",
        "Bpl",
        "IToken",
        "tok",
        "Type",
        "resultType",
        "opString",
        "preOpString",
        "postOpString",
        "callString",
        "staticCallString",
        "reverseArguments",
        "truncateResult",
        "convertE1_to_int",
        "TextWriter",
        "errorWr",
        "NotImplementedException",
        "varName",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "ConversionExpr",
        "e",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "CollectionType",
        "ct",
        "Bpl",
        "IToken",
        "tok",
        "Expression",
        "elements",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "MapType",
        "mt",
        "Bpl",
        "IToken",
        "tok",
        "ExpressionPair",
        "elements",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "CollectionType",
        "ct",
        "Bpl",
        "IToken",
        "tok",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "CollectionType",
        "ct",
        "collName",
        "Expression",
        "elmt",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "MapType",
        "mt",
        "Bpl",
        "IToken",
        "tok",
        "collName",
        "Expression",
        "term",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "CollectionType",
        "ct",
        "Bpl",
        "IToken",
        "tok",
        "collName",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "Expression",
        "e",
        "inLetExprBody",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "name",
        "isExtern",
        "fullPrintName",
        "TypeParameter",
        "typeParameters",
        "Type",
        "superClasses",
        "Bpl",
        "IToken",
        "tok",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "name",
        "isExtern",
        "Type",
        "superClasses",
        "Bpl",
        "IToken",
        "tok",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "indexVar",
        "start",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "varName",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "varName",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "bvType",
        "NotImplementedException",
        "boundVar",
        "Type",
        "boundVarType",
        "TargetWriter",
        "collectionWriter",
        "TargetWriter",
        "wr",
        "altBoundVarName",
        "Type",
        "altVarType",
        "Bpl",
        "IToken",
        "tok",
        "NotImplementedException",
        "indexVar",
        "bound",
        "TargetWriter",
        "wr",
        "Type",
        "Bpl",
        "IToken",
        "tok",
        "CallStmt",
        "initCall",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "Type",
        "elmtType",
        "Bpl",
        "IToken",
        "tok",
        "Expression",
        "dimensions",
        "mustInitialize",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "TextWriter",
        "wr",
        "LiteralExpr",
        "e",
        "NotImplementedException",
        "isVerbatim",
        "TextWriter",
        "wr",
        "NotImplementedException",
        "BitvectorType",
        "bvType",
        "surroundByUnchecked",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "Expression",
        "e0",
        "Expression",
        "e1",
        "isRotateLeft",
        "TargetWriter",
        "wr",
        "inLetExprBody",
        "FCE_Arg_Translator",
        "tr",
        "NotImplementedException",
        "tupleTypeArgs",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "ingredients",
        "tupleTypeArgs",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "prefix",
        "i",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "source",
        "Type",
        "resultType",
        "Bpl",
        "IToken",
        "resultTok",
        "bvName",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "IteratorDecl",
        "iter",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "DatatypeDecl",
        "dt",
        "TargetWriter",
        "wr",
        "NotImplementedException",
        "NewtypeDecl",
        "nt",
        "TargetWriter",
        "wr",
        "NotImplementedException"
    ],
    "literals": [
        "\"Java\"",
        "\"_dafny\"",
        "\"dafny\"",
        "\"// Dafny program {0} compiled into Java\"",
        "\"main\"",
        "\"package {0};\"",
        "\"dafny/dafny.java\"",
        "\"// Package {0}\"",
        "\"// Dafny module {0} compiled into Java\"",
        "\"package {0};\"",
        "\"import java.*;\"",
        "\"import {0}.*;\"",
        "\"{0}/{0}.java\"",
        "\"package {0};\"",
        "\" // end of \"",
        "\"Witness\"",
        "\"object\"",
        "\"bool\"",
        "\"char\"",
        "\"BigInteger\"",
        "\"Dafny.BigRational\"",
        "\"BigInteger\"",
        "\"object\"",
        "\"handle\"",
        "\"ulong\"",
        "\"compilation of set<TRAIT> is not supported; consider introducing a ghost\"",
        "\"<\"",
        "\">\"",
        "\"compilation of seq<TRAIT> is not supported; consider introducing a ghost\"",
        "\"<\"",
        "\">\"",
        "\"compilation of multiset<TRAIT> is not supported; consider introducing a ghost\"",
        "\"<\"",
        "\">\"",
        "\"compilation of map<TRAIT, _> or map<_, TRAIT> is not supported; consider introducing a ghost\"",
        "\"<\"",
        "\",\"",
        "\">\"",
        "\"\"",
        "\"abstract\"",
        "\"assert\"",
        "\"break\"",
        "\"byte\"",
        "\"case\"",
        "\"catch\"",
        "\"char\"",
        "\"class\"",
        "\"continue\"",
        "\"default\"",
        "\"do\"",
        "\"double\"",
        "\"else\"",
        "\"enum\"",
        "\"extends\"",
        "\"final\"",
        "\"finally\"",
        "\"float\"",
        "\"for\"",
        "\"if\"",
        "\"implements\"",
        "\"import\"",
        "\"instanceof\"",
        "\"int\"",
        "\"interface\"",
        "\"long\"",
        "\"native\"",
        "\"new\"",
        "\"package\"",
        "\"private\"",
        "\"protected\"",
        "\"public\"",
        "\"return\"",
        "\"short\"",
        "\"static\"",
        "\"strictfp\"",
        "\"super\"",
        "\"switch\"",
        "\"synchronized\"",
        "\"this\"",
        "\"throw\"",
        "\"throws\"",
        "\"transient\"",
        "\"try\"",
        "\"void\"",
        "\"volatile\"",
        "\"while\"",
        "\"exports\"",
        "\"module\"",
        "\"requires\"",
        "\"const\"",
        "\"goto\"",
        "\"var\"",
        "\"false\"",
        "\"null\"",
        "\"true\"",
        "\"_\""
    ],
    "variables": [
        "TargetLanguage",
        "ModuleName",
        "MainModuleName",
        "StandardImports",
        "Imports",
        "TargetWriter",
        "RootImportWriter",
        "TargetWriter",
        "RootImportDummyWriter",
        "Name",
        "Path",
        "SuppressDummy",
        "rt",
        "path",
        "pkgName",
        "filename",
        "w",
        "s",
        "ClassWriter",
        "cw",
        "sw",
        "JavaCompiler",
        "Compiler",
        "BlockTargetWriter",
        "InstanceMemberWriter",
        "BlockTargetWriter",
        "StaticMemberWriter",
        "xType",
        "t",
        "nativeType",
        "ArrayClassDecl",
        "at",
        "Type",
        "elType",
        "typeNameSansBrackets",
        "brackets",
        "udt",
        "s",
        "cl",
        "isHandle",
        "Type",
        "argType",
        "Type",
        "argType",
        "Type",
        "argType",
        "Type",
        "domType",
        "Type",
        "ranType"
    ],
    "comments": [
        "-----------------------------------------------------------------------------",
        "",
        "Copyright (C) Amazon.  All Rights Reserved.",
        "",
        "-----------------------------------------------------------------------------",
        "RootImportWriter writes additional imports to the main file.",
        "TODO: Not sure what this does, might not need it? (Copied from Compiler-go.cs)",
        "Keep the import writers so that we can import subsequent modules into the main one",
        "TODO: Finish this method override",
        "TODO: Same format as compiler-go.cs, might need to follow C# depending on how DafnyRuntime.java looks",
        "ReadRuntimeSystem(\"DafnyRuntime.java\", rt); Commented out beceause DafnyRuntime.java does not exist yet.",
        "Creates file header for each module's file.",
        "TODO: Finish the part after EmitImports",
        "TODO: See if it is really necessary to import all of Java, though C# compiler imports all of System",
        "TODO: Figure out what importDummyWriter is and whether we need it or not.",
        "var id = IdProtect(import.Name);",
        "if (!import.SuppressDummy) {",
        "importDummyWriter.WriteLine(\"var _ {0}.{1}\", id, DummyTypeName);",
        "}",
        "TODO: Function needs to follow Go format because module will be in a separate file, so add module to Imports list",
        "TODO: Find out if \"isExtern\" applies to Java",
        "?",
        "TODO: Complete ClassWriter class, CreateClass function, TrExpr function",
        "TODO: Define all of these undefined methods.",
        "?",
        "?",
        "?",
        "return Compiler.CreateFunction(name, typeArgs, formals, resultType, tok, isStatic, createBody, member, Writer(isStatic));",
        "?",
        "?",
        "return Compiler.CreateGetter(name, resultType, tok, isStatic, createBody, Writer(isStatic));",
        "?",
        "?",
        "return Compiler.CreateGetterSetter(name, resultType, tok, isStatic, createBody, out setterWriter, Writer(isStatic));",
        "Compiler.DeclareField(name, isStatic, isConst, type, tok, rhs, Writer(isStatic));",
        "?",
        "TODO: Finish this method",
        "string targetReturnTypeReplacement = null;",
        "foreach (var p in m.Outs) {",
        "if (!p.IsGhost) {",
        "if (targetReturnTypeReplacement == null) {",
        "targetReturnTypeReplacement = TypeName(p.Type, wr, p.tok);",
        "} else if (targetReturnTypeReplacement != null) {",
        "// there's more than one out-parameter, so bail",
        "targetReturnTypeReplacement = null;",
        "break;",
        "}",
        "}",
        "}",
        "wr.Write(\"{0}{1}{2} {3}\",",
        "createBody ? \"public \" : \"\",",
        "m.IsStatic ? \"static \" : \"\",",
        "targetReturnTypeReplacement ?? \"void\",",
        "IdName(m));",
        "TODO: Implement all the methods starting from TypeNameArrayBrackets(at.Dims)",
        "Function copied and pasted from Compiler-Csharp.cs, will be modified later if deemed necessary.",
        "?",
        "precondition; this ought to be declared as a Requires in the superclass",
        "unresolved proxy; just treat as ref, since no particular type information is apparently needed for this type",
        "follows from type.IsArrayType",
        "unexpected type",
        "no need to further protect this name",
        "TODO: Finish with all the public IDs that need to be protected",
        "keywords Java 8 and before",
        "keywords since Java 9",
        "no longer used in Java but still reserved as keywords",
        "special identifiers since Java 10",
        "literal values",
        "TODO: figure out what to do here (C# uses @, Go uses _, JS uses _$$_)",
        "Package name is not a keyword, so it can be used",
        "ABSTRACT METHOD DECLARATIONS FOR THE SAKE OF BUILDING PROGRAM"
    ],
    "docstrings": [],
    "functions": [
        "JavaCompiler",
        "EmitHeader",
        "EmitBuiltInDecls",
        "EmitModuleHeader",
        "EmitImports",
        "EmitImport",
        "BlockTargetWriter",
        "CreateStaticMain",
        "TargetWriter",
        "CreateModule",
        "GetHelperModuleName",
        "DeclareSubsetType",
        "ClassWriter",
        "BlockTargetWriter",
        "Writer",
        "BlockTargetWriter",
        "CreateMethod",
        "BlockTargetWriter",
        "CreateFunction",
        "BlockTargetWriter",
        "CreateGetter",
        "BlockTargetWriter",
        "CreateGetterSetter",
        "DeclareField",
        "TextWriter",
        "ErrorWriter",
        "Finish",
        "BlockTargetWriter",
        "CreateMethod",
        "EmitJumpToTailCallStart",
        "TypeName",
        "IdProtect",
        "PublicIdProtect",
        "TypeInitializationValue",
        "TypeName_UDT",
        "TypeName_Companion",
        "DeclareFormal",
        "DeclareLocalVar",
        "TargetWriter",
        "DeclareLocalVar",
        "DeclareLocalOutVar",
        "EmitActualTypeArgs",
        "GenerateLhsDecl",
        "EmitPrintStmt",
        "EmitReturn",
        "TargetWriter",
        "CreateLabeledCode",
        "EmitBreak",
        "EmitYield",
        "EmitAbsurd",
        "FullTypeName",
        "EmitThis",
        "EmitDatatypeValue",
        "GetSpecialFieldInfo",
        "TargetWriter",
        "EmitMemberSelect",
        "TargetWriter",
        "EmitArraySelect",
        "TargetWriter",
        "EmitArraySelect",
        "EmitExprAsInt",
        "EmitIndexCollectionSelect",
        "EmitIndexCollectionUpdate",
        "EmitSeqSelectRange",
        "EmitMultiSetFormingExpr",
        "EmitApplyExpr",
        "TargetWriter",
        "EmitBetaRedex",
        "EmitDestructor",
        "BlockTargetWriter",
        "CreateLambda",
        "TargetWriter",
        "CreateIIFE_ExprBody",
        "TargetWriter",
        "CreateIIFE_ExprBody",
        "BlockTargetWriter",
        "CreateIIFE0",
        "EmitUnaryExpr",
        "CompileBinOp",
        "EmitIsZero",
        "EmitConversionExpr",
        "EmitCollectionDisplay",
        "EmitMapDisplay",
        "EmitCollectionBuilder_New",
        "EmitCollectionBuilder_Add",
        "TargetWriter",
        "EmitMapBuilder_Add",
        "GetCollectionBuilder_Build",
        "EmitSingleValueGenerator",
        "IClassWriter",
        "CreateClass",
        "IClassWriter",
        "CreateTrait",
        "BlockTargetWriter",
        "CreateDoublingForLoop",
        "EmitIncrementVar",
        "EmitDecrementVar",
        "GetQuantifierName",
        "BlockTargetWriter",
        "CreateForeachLoop",
        "BlockTargetWriter",
        "CreateForLoop",
        "EmitNew",
        "EmitNewArray",
        "EmitLiteralExpr",
        "EmitStringLiteral",
        "TargetWriter",
        "EmitBitvectorTruncation",
        "EmitRotate",
        "EmitEmptyTupleList",
        "TargetWriter",
        "EmitAddTupleToList",
        "EmitTupleSelect",
        "BlockTargetWriter",
        "CreateIIFE1",
        "BlockTargetWriter",
        "CreateIterator",
        "DeclareDatatype",
        "DeclareNewtype"
    ],
    "classes": [
        "JavaCompiler",
        "ClassWriter"
    ]
}