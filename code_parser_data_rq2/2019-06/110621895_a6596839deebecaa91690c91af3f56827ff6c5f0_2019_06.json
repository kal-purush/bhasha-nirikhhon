{
    "identifiers": [
        "absolute_import",
        "os",
        "subprocess",
        "tempfile",
        "git_config",
        "entry_point",
        "source_dir",
        "dependencies",
        "_validate_git_config",
        "git_config",
        "tempfile",
        "mkdtemp",
        "subprocess",
        "check_call",
        "git_config",
        "repo_dir",
        "_checkout_branch_and_commit",
        "git_config",
        "repo_dir",
        "entry_point",
        "source_dir",
        "dependencies",
        "source_dir",
        "os",
        "path",
        "isdir",
        "os",
        "path",
        "join",
        "repo_dir",
        "source_dir",
        "ValueError",
        "os",
        "path",
        "isfile",
        "os",
        "path",
        "join",
        "repo_dir",
        "source_dir",
        "entry_point",
        "ValueError",
        "os",
        "path",
        "join",
        "repo_dir",
        "source_dir",
        "os",
        "path",
        "isfile",
        "os",
        "path",
        "join",
        "repo_dir",
        "entry_point",
        "ValueError",
        "os",
        "path",
        "join",
        "repo_dir",
        "entry_point",
        "path",
        "dependencies",
        "os",
        "path",
        "exists",
        "os",
        "path",
        "join",
        "repo_dir",
        "path",
        "ValueError",
        "format",
        "path",
        "ret",
        "append",
        "os",
        "path",
        "join",
        "repo_dir",
        "path",
        "ret",
        "git_config",
        "git_config",
        "ValueError",
        "git_config",
        "repo_dir",
        "git_config",
        "subprocess",
        "check_call",
        "args",
        "git_config",
        "cwd",
        "repo_dir",
        "git_config",
        "subprocess",
        "check_call",
        "args",
        "git_config",
        "cwd",
        "repo_dir"
    ],
    "literals": [
        "\"git\"",
        "\"clone\"",
        "\"repo\"",
        "\"entry_point\"",
        "\"source_dir\"",
        "\"dependencies\"",
        "\"Source directory does not exist in the repo.\"",
        "\"Entry point does not exist in the repo.\"",
        "\"source_dir\"",
        "\"Entry point does not exist in the repo.\"",
        "\"entry_point\"",
        "\"dependencies\"",
        "\"Dependency {} does not exist in the repo.\"",
        "\"dependencies\"",
        "\"repo\"",
        "\"Please provide a repo for git_config.\"",
        "\"branch\"",
        "\"git\"",
        "\"checkout\"",
        "\"branch\"",
        "\"commit\"",
        "\"git\"",
        "\"checkout\"",
        "\"commit\""
    ],
    "variables": [
        "repo_dir",
        "ret",
        "ret",
        "ret",
        "ret"
    ],
    "comments": [
        "Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\"). You",
        "may not use this file except in compliance with the License. A copy of",
        "the License is located at",
        "",
        "http://aws.amazon.com/apache2.0/",
        "",
        "or in the \"license\" file accompanying this file. This file is",
        "distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF",
        "ANY KIND, either express or implied. See the License for the specific",
        "language governing permissions and limitations under the License.",
        "check if the cloned repo contains entry point, source directory and dependencies"
    ],
    "docstrings": [
        "\"\"\"Git clone repo containing the training code and serving code. This method also validate ``git_config``,\n    and set ``entry_point``, ``source_dir`` and ``dependencies`` to the right file or directory in the repo cloned.\n\n    Args:\n        git_config (dict[str, str]): Git configurations used for cloning files, including ``repo``, ``branch``\n            and ``commit``. ``branch`` and ``commit`` are optional. If ``branch`` is not specified, master branch\n            will be used. If ``commit`` is not specified, the latest commit in the required branch will be used.\n        entry_point (str): A relative location to the Python source file which should be executed as the entry point\n            to training or model hosting in the Git repo.\n        source_dir (str): A relative location to a directory with other training or model hosting source code\n            dependencies aside from the entry point file in the Git repo (default: None). Structure within this\n            directory are preserved when training on Amazon SageMaker.\n        dependencies (list[str]): A list of relative locations to directories with any additional libraries that will\n            be exported to the container in the Git repo (default: []).\n\n    Raises:\n        CalledProcessError: If 1. failed to clone git repo\n                               2. failed to checkout the required branch\n                               3. failed to checkout the required commit\n        ValueError: If 1. entry point specified does not exist in the repo\n                       2. source dir specified does not exist in the repo\n\n    Returns:\n        dict: A dict that contains the updated values of entry_point, source_dir and dependencies\n    \"\"\"",
        "\"\"\"check if a git_config param is valid\n\n    Args:\n        git_config ((dict[str, str]): Git configurations used for cloning files, including ``repo``, ``branch``\n            and ``commit``.\n\n    Raises:\n        ValueError: If:\n            1. git_config has no key 'repo'\n            2. git_config['repo'] is in the wrong format.\n    \"\"\"",
        "\"\"\"Checkout the required branch and commit.\n\n    Args:\n        git_config: (dict[str, str]): Git configurations used for cloning files, including ``repo``, ``branch``\n            and ``commit``.\n        repo_dir (str): the directory where the repo is cloned\n\n    Raises:\n        ValueError: If 1. entry point specified does not exist in the repo\n                       2. source dir specified does not exist in the repo\n    \"\"\""
    ],
    "functions": [
        "git_clone_repo",
        "_validate_git_config",
        "_checkout_branch_and_commit"
    ],
    "classes": []
}