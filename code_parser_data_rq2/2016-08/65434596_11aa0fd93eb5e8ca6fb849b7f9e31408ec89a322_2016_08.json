{
    "identifiers": [
        "os",
        "sys",
        "itertools",
        "izip",
        "gzip",
        "tempfile",
        "hashlib",
        "subprocess",
        "Popen",
        "PIPE",
        "collections",
        "namedtuple",
        "numpy",
        "np",
        "scipy",
        "stats",
        "itemfreq",
        "scipy",
        "stats",
        "mstats",
        "mquantiles",
        "h5py",
        "pybedtools",
        "pysam",
        "pandas",
        "pd",
        "bw",
        "BigWig",
        "pyDNAbinding",
        "binding_model",
        "DNASequence",
        "PWMBindingModel",
        "DNABindingModels",
        "load_binding_models",
        "pyDNAbinding",
        "DB",
        "load_binding_models_from_db",
        "NoBindingModelsFoundError",
        "load_all_pwms_from_db",
        "namedtuple",
        "scores",
        "quantile_probs",
        "scores",
        "mean",
        "len",
        "scores",
        "scores",
        "max",
        "rv",
        "extend",
        "mquantiles",
        "scores",
        "prob",
        "quantile_probs",
        "rv",
        "fname",
        "hashlib",
        "md5",
        "open",
        "fname",
        "f",
        "chunk",
        "iter",
        "f",
        "read",
        "hash_md5",
        "update",
        "chunk",
        "hash_md5",
        "hexdigest",
        "factor_name",
        "load_binding_models_from_db",
        "tf_names",
        "factor_name",
        "len",
        "models",
        "format",
        "factor_name",
        "NoBindingModelsFoundError",
        "factor_name",
        "load_TAF1_binding_model",
        "load_all_pwms_from_db",
        "tf_names",
        "factor_name",
        "models",
        "model",
        "split",
        "factor_name",
        "factor_names",
        "mos",
        "append",
        "load_model",
        "factor_name",
        "DNABindingModels",
        "mos",
        "open",
        "ofp",
        "ofp",
        "write",
        "mos",
        "yaml_str",
        "len",
        "data",
        "property",
        "data",
        "columns",
        "values",
        "label_index",
        "np",
        "zeros",
        "data",
        "ix",
        "label_index",
        "shape",
        "dtype",
        "np",
        "array",
        "data",
        "ix",
        "label_index",
        "dtype",
        "np",
        "array",
        "data",
        "ix",
        "label_index",
        "dtype",
        "labels",
        "normalize",
        "i",
        "xrange",
        "len",
        "samples",
        "predictors",
        "append",
        "dataframe",
        "ix",
        "i",
        "flank_size",
        "contig",
        "start",
        "stop",
        "data",
        "index",
        "GenomicRegion",
        "contig",
        "start",
        "stop",
        "fasta_fname",
        "pysam",
        "FastaFile",
        "fasta_fname",
        "genome",
        "fetch",
        "contig",
        "start",
        "stop",
        "upper",
        "contig",
        "start",
        "stop",
        "iter_regions",
        "flank_size",
        "labels_fname",
        "gzip",
        "open",
        "labels_fname",
        "fp",
        "next",
        "iter",
        "fp",
        "header_line",
        "strip",
        "split",
        "header_data",
        "ValueError",
        "header_line",
        "strip",
        "header_data",
        "_hash",
        "abs",
        "hash",
        "hashlib",
        "md5",
        "md5",
        "labels_fname",
        "regions_fname",
        "md5",
        "regions_fname",
        "max_n_rows",
        "hexdigest",
        "_hash",
        "property",
        "factor",
        "hash",
        "regions_fname",
        "tempfile",
        "NamedTemporaryFile",
        "Popen",
        "labels_fname",
        "stdout",
        "PIPE",
        "Popen",
        "stdout",
        "PIPE",
        "stdin",
        "p1",
        "stdout",
        "max_n_rows",
        "Popen",
        "max_n_rows",
        "stdout",
        "PIPE",
        "stdin",
        "p2",
        "stdout",
        "p3",
        "stdout",
        "p2",
        "stdout",
        "Popen",
        "regions_fname",
        "stdin",
        "p4_input",
        "stdout",
        "PIPE",
        "Popen",
        "stdin",
        "p4",
        "stdout",
        "stdout",
        "filtered_regions_fp",
        "p5",
        "wait",
        "p1",
        "terminate",
        "p2",
        "terminate",
        "p3",
        "p3",
        "terminate",
        "p4",
        "terminate",
        "filtered_regions_fp",
        "flush",
        "filtered_regions_fp",
        "seek",
        "pd",
        "read_table",
        "filtered_regions_fp",
        "index_col",
        "nrows",
        "max_n_rows",
        "names",
        "header",
        "pd",
        "read_table",
        "labels_fname",
        "header",
        "index_col",
        "nrows",
        "max_n_rows",
        "labels_fname",
        "regions_fname",
        "max_n_rows",
        "load_cached",
        "labels_fname",
        "regions_fname",
        "max_n_rows",
        "load_cached",
        "_init_header_data",
        "labels_fname",
        "os",
        "path",
        "basename",
        "labels_fname",
        "split",
        "load_cached",
        "cached_fname",
        "h5py",
        "File",
        "cached_fname",
        "pd",
        "read_hdf",
        "cached_fname",
        "KeyError",
        "_build_dataframe",
        "data",
        "to_hdf",
        "cached_fname",
        "h5store",
        "_build_dataframe",
        "fasta_fname",
        "np",
        "zeros",
        "len",
        "len",
        "aggregate_region_scores_labels",
        "dtype",
        "load_binding_models",
        "binding_models",
        "get_from_tfname",
        "factor",
        "i",
        "seq",
        "iter_seqs",
        "fasta_fname",
        "i",
        "sys",
        "stderr",
        "i",
        "len",
        "aggregate_region_scores",
        "DNASequence",
        "seq",
        "score_binding_sites",
        "model",
        "pd",
        "DataFrame",
        "all_agg_scores",
        "index",
        "data",
        "index",
        "columns",
        "aggregate_region_scores_labels",
        "all_agg_scores",
        "fasta_fname",
        "pd",
        "read_hdf",
        "cached_fname",
        "motif_scores",
        "data",
        "index",
        "KeyError",
        "build_motif_scores",
        "fasta_fname",
        "motif_scores",
        "to_hdf",
        "cached_fname",
        "motif_scores",
        "DNASE_FOLD_COV_DIR",
        "np",
        "zeros",
        "len",
        "len",
        "samples",
        "dtype",
        "sample_i",
        "sample_name",
        "samples",
        "format",
        "sample_name",
        "BigWig",
        "os",
        "path",
        "join",
        "path",
        "fname",
        "region_i",
        "region",
        "iter_regions",
        "region_i",
        "sample_i",
        "len",
        "samples",
        "region_i",
        "len",
        "b",
        "stats",
        "region",
        "contig",
        "region",
        "start",
        "region",
        "stop",
        "b",
        "close",
        "pd",
        "DataFrame",
        "np",
        "nan_to_num",
        "scores",
        "columns",
        "samples",
        "index",
        "data",
        "index",
        "pd",
        "read_hdf",
        "cached_fname",
        "KeyError",
        "build_dnase_fc_scores",
        "dnase_fc_scores",
        "to_hdf",
        "cached_fname",
        "IOError",
        "build_dnase_fc_scores",
        "dnase_fc_scores",
        "normalize",
        "load_or_build_dnase_fc_scores",
        "normalize",
        "dnase_scores",
        "dnase_scores",
        "mean",
        "dnase_scores",
        "std",
        "pd",
        "concat",
        "dnase_scores",
        "column",
        "column",
        "dnase_scores",
        "columns",
        "axis",
        "ignore_index",
        "dnase_scores",
        "fasta_fname",
        "normalize",
        "load_or_build_motif_scores",
        "fasta_fname",
        "normalize",
        "motif_scores",
        "motif_scores",
        "mean",
        "motif_scores",
        "std",
        "pd",
        "concat",
        "motif_scores",
        "len",
        "dnase_scores",
        "columns",
        "axis",
        "ignore_index",
        "pd",
        "concat",
        "motif_scores",
        "dnase_scores",
        "axis",
        "motif_scores",
        "columns",
        "rv",
        "factor",
        "TRAIN_TSV_BASE_DIR",
        "format",
        "factor",
        "LabelData",
        "labels_fname",
        "sample_i",
        "sample",
        "all_data",
        "samples",
        "sample_i",
        "sample",
        "sample_labels",
        "append",
        "sample",
        "DNASE_IDR_PEAKS_BASE_DIR",
        "sample",
        "LabelData",
        "labels_fname",
        "dnase_peaks_fname",
        "sample_data",
        "load_or_build_dnase_fc_scores",
        "sample",
        "all_data",
        "load_or_build_motif_scores",
        "dnase_scores",
        "join",
        "motif_scores",
        "subset_train_data",
        "append",
        "sample_train_df",
        "sample_data",
        "build_integer_labels",
        "sample_i",
        "subset_train_labels",
        "append",
        "sample_train_labels",
        "pd",
        "concat",
        "subset_train_data",
        "levels",
        "sample_labels",
        "train_df",
        "head",
        "np",
        "concatenate",
        "subset_train_labels",
        "axis",
        "train_labels",
        "train_df",
        "iloc",
        "non_ambiguous_labels",
        "as_matrix",
        "train_labels",
        "non_ambiguous_labels",
        "sklearn",
        "linear_model",
        "SGDClassifier",
        "SGDClassifier",
        "loss",
        "class_weight",
        "n_jobs",
        "mo",
        "fit",
        "train_amb_filtered_mat",
        "train_amb_filtered_labels",
        "FULL_GENOME_TSV_BASE_DIR",
        "format",
        "factor",
        "LabelData",
        "true_labels_fname",
        "label_data",
        "samples",
        "sample",
        "label_data",
        "samples",
        "DNASE_IDR_PEAKS_BASE_DIR",
        "sample",
        "LabelData",
        "true_labels_fname",
        "dnase_peaks_fname",
        "sample_data",
        "load_or_build_dnase_fc_scores",
        "sample",
        "label_data",
        "load_or_build_motif_scores",
        "dnase_scores",
        "join",
        "motif_scores",
        "how",
        "sample_train_df",
        "head",
        "mo",
        "predict_proba",
        "sample_train_df",
        "pd",
        "DataFrame",
        "pred_prbs",
        "index",
        "sample_train_df",
        "index",
        "result",
        "reindex",
        "label_data",
        "data",
        "index",
        "fill_value",
        "result",
        "head",
        "format",
        "factor",
        "sample",
        "result",
        "to_csv",
        "ofname",
        "sep",
        "header",
        "train_model",
        "sys",
        "argv",
        "main"
    ],
    "literals": [
        "'GenomicRegion'",
        "'contig'",
        "'start'",
        "'stop'",
        "\"...\"",
        "\"...\"",
        "\"...\"",
        "\"...\"",
        "\"mean\"",
        "\"max\"",
        "\"q99\"",
        "\"q95\"",
        "\"q90\"",
        "\"q75\"",
        "\"q50\"",
        "\"rb\"",
        "b\"\"",
        "\"Multiple binding models found for '{}'\"",
        "'TAF1'",
        "\"models.yaml\"",
        "\"w\"",
        "'A'",
        "'B'",
        "\"\\t\"",
        "'chr'",
        "'start'",
        "'stop'",
        "\"Unrecognized header line: '%s'\"",
        "\"labeldata.%s.%s.obj\"",
        "\"w+\"",
        "\"zcat\"",
        "\"tail\"",
        "\"-n\"",
        "\"+2\"",
        "\"head\"",
        "\"-n\"",
        "\"bedtools\"",
        "\"intersect\"",
        "\"-wa\"",
        "\"-a\"",
        "\"stdin\"",
        "\"-b\"",
        "\"uniq\"",
        "'.'",
        "\"Loading '%s'\"",
        "'data'",
        "'data'",
        "\"models.yaml\"",
        "'MAX'",
        "'motif_scores'",
        "'motif_scores'",
        "\"DNASE.{}.fc.signal.bigwig\"",
        "\"Sample %i/%i, row %i/%i\"",
        "'mean'",
        "'dnase_scores'",
        "'dnase_scores'",
        "'dnase_score'",
        "'dnase_score'",
        "\"{}.train.labels.tsv.gz\"",
        "\"DNASE.%s.conservative.narrowPeak.gz\"",
        "'dnase_fc'",
        "'hg19.genome.fa'",
        "\"Building the training data sets\"",
        "\"Filtering out ambiguous labels\"",
        "\"Fitting the model\"",
        "'log'",
        "'balanced'",
        "\"Loading the test set\"",
        "\"{}.train.labels.tsv.gz\"",
        "\"Loading the test predictors\"",
        "\"DNASE.%s.conservative.narrowPeak.gz\"",
        "'dnase_fc'",
        "\"Building the test data dataframe\"",
        "'hg19.genome.fa'",
        "'inner'",
        "\"Predicting prbs\"",
        "'prb'",
        "'F.{}.{}.tab'",
        "\"\\t\"",
        "'__main__'"
    ],
    "variables": [
        "GenomicRegion",
        "DNASE_IDR_PEAKS_BASE_DIR",
        "DNASE_FOLD_COV_DIR",
        "TRAIN_TSV_BASE_DIR",
        "TEST_TSV_BASE_DIR",
        "aggregate_region_scores_labels",
        "rv",
        "hash_md5",
        "models",
        "models",
        "models",
        "model",
        "factor_names",
        "mos",
        "mos",
        "labels",
        "labels",
        "labels",
        "predictors",
        "genome",
        "header_line",
        "header_data",
        "header",
        "_hash",
        "filtered_regions_fp",
        "p1",
        "p2",
        "p4_input",
        "p3",
        "p4_input",
        "p3",
        "p4_input",
        "p4",
        "p5",
        "labels_fname",
        "regions_fname",
        "max_n_rows",
        "_hash",
        "load_cached",
        "factor",
        "h5store",
        "data",
        "data",
        "data",
        "all_agg_scores",
        "binding_models",
        "model",
        "all_agg_scores",
        "i",
        "all_agg_scores",
        "motif_scores",
        "index",
        "motif_scores",
        "path",
        "scores",
        "fname",
        "b",
        "scores",
        "region_i",
        "sample_i",
        "dnase_fc_scores",
        "dnase_fc_scores",
        "dnase_fc_scores",
        "dnase_scores",
        "dnase_scores",
        "dnase_scores",
        "dnase_scores",
        "columns",
        "motif_scores",
        "motif_scores",
        "motif_scores",
        "rv",
        "rv",
        "columns",
        "labels_fname",
        "all_data",
        "sample_labels",
        "subset_train_data",
        "subset_train_labels",
        "dnase_peaks_fname",
        "sample_data",
        "dnase_scores",
        "dnase_scores",
        "columns",
        "motif_scores",
        "sample_train_df",
        "sample_train_labels",
        "train_df",
        "train_labels",
        "non_ambiguous_labels",
        "train_amb_filtered_mat",
        "train_amb_filtered_labels",
        "mo",
        "true_labels_fname",
        "label_data",
        "dnase_peaks_fname",
        "sample_data",
        "dnase_scores",
        "dnase_scores",
        "columns",
        "motif_scores",
        "sample_train_df",
        "pred_prbs",
        "result",
        "result",
        "ofname"
    ],
    "comments": [
        "if we couldnt find a good motif, just find any motif",
        "special case TAF1 because it doesnt exist in CISBP",
        "if filter_regions is specified, then restrict the labels to",
        "regions that overlap these",
        "load the data into a bed file",
        "zcat {fname} | tail -n +2 | head -n 10000 | \\",
        "bedtools intersect -wa -a stdin -b {regions_fname} \\",
        "| uniq > {output_fname}",
        "check to see if we should limit the numbere of input rows",
        "if we want to limit the number of rows, then add a call to head",
        "Allow p* to receive a SIGPIPE if p(*-1) exits.",
        "flush the output file cache, and reset the file pointer",
        "extract the sample names from the header",
        "assert labels_fname.endswith(\"labels.tsv.gz\"), \\",
        "\"Unrecognized labels filename '%s'\" % labels_fname",
        "extract the factor from the filename",
        "if we want to use a cached version...",
        "load and normalzie the motif and DNASE scores",
        "concat the DNASE scores into a single column, and repeat the motif",
        "scores so that each DNASE entry has a single motif score entry",
        "concat the dnase scores and motif scores, and then rename the columns"
    ],
    "docstrings": [
        "\"\"\"Load models from the DB.\n\n    This isn't useful - I just keep it here to show where the models came from.\n    \"\"\"",
        "\"\"\"Save models from all factors\n\n    This isn't useful - I just keep it here to show where the models came from.\n    \"\"\"",
        "\"\"\"\n    ARID3A\n    ATF2\n    ATF3\n    ATF7\n    CEBPB\n    CREB1\n    CTCF\n    E2F1\n    E2F6\n    EGR1\n    EP300\n    FOXA1\n    FOXA2\n    GABPA\n    GATA3\n    HNF4A\n    JUND\n    MAFK\n    MAX\n    MYC\n    NANOG\n    REST\n    RFX5\n    SPI1\n    SRF\n    STAT3\n    TAF1\n    TCF12\n    TCF7L2\n    TEAD4\n    YY1\n    ZNF143\n    \"\"\"",
        "\"\"\"Unstack the data frame accessibility score and labels.\n\n        \"\"\"",
        "\"\"\"Train a simple model to predict in-vivo binding.\n    \n    \"\"\""
    ],
    "functions": [
        "aggregate_region_scores",
        "md5",
        "load_model",
        "save_models",
        "__len__",
        "samples",
        "build_integer_labels",
        "build_train_array",
        "iter_regions",
        "iter_seqs",
        "_init_header_data",
        "__hash__",
        "cached_fname",
        "_build_dataframe",
        "build_motif_scores",
        "load_or_build_motif_scores",
        "build_dnase_fc_scores",
        "load_or_build_dnase_fc_scores",
        "dnase_dataframe",
        "dataframe",
        "train_model",
        "main"
    ],
    "classes": [
        "LabelData"
    ]
}