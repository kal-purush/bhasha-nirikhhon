{
    "identifiers": [
        "os",
        "sys",
        "binascii",
        "unhexlify",
        "crypto",
        "bytes_to_long",
        "long_to_bytes",
        "helpers",
        "get_nonces_dir",
        "helpers",
        "bin_to_hex",
        "platform",
        "SaveFile",
        "remote",
        "InvalidRPCMethod",
        "repository",
        "enc_cipher",
        "manifest_nonce",
        "repository",
        "enc_cipher",
        "manifest_nonce",
        "os",
        "path",
        "join",
        "get_nonces_dir",
        "repository",
        "id_str",
        "open",
        "nonce_file",
        "fd",
        "bytes_to_long",
        "unhexlify",
        "fd",
        "read",
        "FileNotFoundError",
        "next_unreserved",
        "start_nonce",
        "get_local_free_nonce",
        "start_nonce",
        "SaveFile",
        "nonce_file",
        "binary",
        "fd",
        "fd",
        "write",
        "bin_to_hex",
        "long_to_bytes",
        "next_unreserved",
        "repository",
        "get_free_nonce",
        "InvalidRPCMethod",
        "error",
        "sys",
        "stderr",
        "write",
        "next_unreserved",
        "start_nonce",
        "next_unreserved",
        "start_nonce",
        "repository",
        "commit_nonce_reservation",
        "next_unreserved",
        "start_nonce",
        "nonce_space_needed",
        "end_of_nonce_reservation",
        "from_bytes",
        "enc_cipher",
        "iv",
        "byteorder",
        "next_nonce",
        "end_of_nonce_reservation",
        "next_nonce",
        "nonce_space_needed",
        "end_of_nonce_reservation",
        "get_repo_free_nonce",
        "get_local_free_nonce",
        "max",
        "x",
        "x",
        "repo_free_nonce",
        "local_free_nonce",
        "manifest_nonce",
        "end_of_nonce_reservation",
        "x",
        "free_nonce_space",
        "nonce_space_needed",
        "NONCE_SPACE_RESERVATION",
        "reservation_end",
        "MAX_REPRESENTABLE_NONCE",
        "end_of_nonce_reservation",
        "enc_cipher",
        "reset",
        "free_nonce_space",
        "to_bytes",
        "byteorder",
        "free_nonce_space",
        "end_of_nonce_reservation",
        "enc_cipher",
        "reset",
        "free_nonce_space",
        "to_bytes",
        "byteorder",
        "commit_repo_nonce_reservation",
        "reservation_end",
        "repo_free_nonce",
        "commit_local_nonce_reservation",
        "reservation_end",
        "local_free_nonce",
        "reservation_end"
    ],
    "literals": [
        "'r'",
        "\"nonce space reservation with mismatched previous state\"",
        "\"Please upgrade to borg version 1.1+ on the server for safer AES-CTR nonce handling.\\n\"",
        "'big'",
        "'big'",
        "'big'"
    ],
    "variables": [
        "MAX_REPRESENTABLE_NONCE",
        "NONCE_SPACE_RESERVATION",
        "repository",
        "enc_cipher",
        "end_of_nonce_reservation",
        "manifest_nonce",
        "nonce_file",
        "get_repo_free_nonce",
        "commit_repo_nonce_reservation",
        "next_nonce",
        "repo_free_nonce",
        "local_free_nonce",
        "free_nonce_space",
        "reservation_end",
        "end_of_nonce_reservation"
    ],
    "comments": [
        "This in units of AES blocksize (16 bytes)",
        "old server version, suppress further calls",
        "Nonces may never repeat, even if a transaction aborts or the system crashes.",
        "Therefore a part of the nonce space is reserved before any nonce is used for encryption.",
        "As these reservations are commited to permanent storage before any nonce is used, this protects",
        "against nonce reuse in crashes and transaction aborts. In that case the reservation still",
        "persists and the whole reserved space is never reused.",
        "",
        "Local storage on the client is used to protect against an attacker that is able to rollback the",
        "state of the server or can do arbitrary modifications to the repository.",
        "Storage on the server is used for the multi client use case where a transaction on client A is",
        "aborted and later client B writes to the repository.",
        "",
        "This scheme does not protect against attacker who is able to rollback the state of the server",
        "or can do arbitrary modifications to the repository in the multi client usecase.",
        "we already got a reservation, if nonce_space_needed still fits everything is ok",
        "initialization, reset the encryption cipher to the start of the reservation",
        "expand existing reservation if possible",
        "some other client got an interleaved reservation, skip partial space in old reservation to avoid overlap"
    ],
    "docstrings": [],
    "functions": [
        "get_local_free_nonce",
        "commit_local_nonce_reservation",
        "get_repo_free_nonce",
        "commit_repo_nonce_reservation",
        "ensure_reservation"
    ],
    "classes": [
        "NonceManager"
    ]
}