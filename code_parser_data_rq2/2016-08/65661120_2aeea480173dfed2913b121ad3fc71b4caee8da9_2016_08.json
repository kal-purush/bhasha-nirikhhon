{
    "identifiers": [
        "key",
        "callbackfn",
        "value",
        "index",
        "thisArg",
        "key",
        "key",
        "key",
        "value",
        "key",
        "key",
        "key",
        "key",
        "value",
        "value",
        "value",
        "callbackfn",
        "value",
        "index",
        "thisArg",
        "value",
        "CreateMapPolyfill",
        "CreateSetPolyfill",
        "CreateWeakMapPolyfill",
        "_WeakMap",
        "decorate",
        "decorators",
        "target",
        "decorate",
        "decorators",
        "target",
        "targetKey",
        "descriptor",
        "decorators",
        "target",
        "targetKey",
        "targetDescriptor",
        "IsUndefined",
        "targetDescriptor",
        "IsArray",
        "decorators",
        "IsObject",
        "target",
        "IsUndefined",
        "targetKey",
        "IsObject",
        "targetDescriptor",
        "targetKey",
        "ToPropertyKey",
        "targetKey",
        "DecoratePropertyWithDescriptor",
        "decorators",
        "target",
        "targetKey",
        "targetDescriptor",
        "IsUndefined",
        "targetKey",
        "IsArray",
        "decorators",
        "IsObject",
        "target",
        "targetKey",
        "ToPropertyKey",
        "targetKey",
        "DecoratePropertyWithoutDescriptor",
        "decorators",
        "target",
        "targetKey",
        "IsArray",
        "decorators",
        "IsConstructor",
        "target",
        "DecorateConstructor",
        "decorators",
        "target",
        "metadataKey",
        "metadataValue",
        "decorator",
        "target",
        "decorator",
        "target",
        "targetKey",
        "target",
        "targetKey",
        "IsUndefined",
        "targetKey",
        "IsObject",
        "target",
        "targetKey",
        "ToPropertyKey",
        "targetKey",
        "OrdinaryDefineOwnMetadata",
        "metadataKey",
        "metadataValue",
        "target",
        "targetKey",
        "IsConstructor",
        "target",
        "OrdinaryDefineOwnMetadata",
        "metadataKey",
        "metadataValue",
        "target",
        "decorator",
        "defineMetadata",
        "metadataKey",
        "metadataValue",
        "target",
        "defineMetadata",
        "metadataKey",
        "metadataValue",
        "target",
        "targetKey",
        "metadataKey",
        "metadataValue",
        "target",
        "targetKey",
        "IsObject",
        "target",
        "IsUndefined",
        "targetKey",
        "targetKey",
        "ToPropertyKey",
        "targetKey",
        "OrdinaryDefineOwnMetadata",
        "metadataKey",
        "metadataValue",
        "target",
        "targetKey",
        "hasMetadata",
        "metadataKey",
        "target",
        "hasMetadata",
        "metadataKey",
        "target",
        "targetKey",
        "metadataKey",
        "target",
        "targetKey",
        "IsObject",
        "target",
        "IsUndefined",
        "targetKey",
        "targetKey",
        "ToPropertyKey",
        "targetKey",
        "OrdinaryHasMetadata",
        "metadataKey",
        "target",
        "targetKey",
        "hasOwnMetadata",
        "metadataKey",
        "target",
        "hasOwnMetadata",
        "metadataKey",
        "target",
        "targetKey",
        "metadataKey",
        "target",
        "targetKey",
        "IsObject",
        "target",
        "IsUndefined",
        "targetKey",
        "targetKey",
        "ToPropertyKey",
        "targetKey",
        "OrdinaryHasOwnMetadata",
        "metadataKey",
        "target",
        "targetKey",
        "getMetadata",
        "metadataKey",
        "target",
        "getMetadata",
        "metadataKey",
        "target",
        "targetKey",
        "metadataKey",
        "target",
        "targetKey",
        "IsObject",
        "target",
        "IsUndefined",
        "targetKey",
        "targetKey",
        "ToPropertyKey",
        "targetKey",
        "OrdinaryGetMetadata",
        "metadataKey",
        "target",
        "targetKey",
        "getOwnMetadata",
        "metadataKey",
        "target",
        "getOwnMetadata",
        "metadataKey",
        "target",
        "targetKey",
        "metadataKey",
        "target",
        "targetKey",
        "IsObject",
        "target",
        "IsUndefined",
        "targetKey",
        "targetKey",
        "ToPropertyKey",
        "targetKey",
        "OrdinaryGetOwnMetadata",
        "metadataKey",
        "target",
        "targetKey",
        "getMetadataKeys",
        "target",
        "getMetadataKeys",
        "target",
        "targetKey",
        "target",
        "targetKey",
        "IsObject",
        "target",
        "IsUndefined",
        "targetKey",
        "targetKey",
        "ToPropertyKey",
        "targetKey",
        "OrdinaryMetadataKeys",
        "target",
        "targetKey",
        "getOwnMetadataKeys",
        "target",
        "getOwnMetadataKeys",
        "target",
        "targetKey",
        "target",
        "targetKey",
        "IsObject",
        "target",
        "IsUndefined",
        "targetKey",
        "targetKey",
        "ToPropertyKey",
        "targetKey",
        "OrdinaryOwnMetadataKeys",
        "target",
        "targetKey",
        "deleteMetadata",
        "metadataKey",
        "target",
        "deleteMetadata",
        "metadataKey",
        "target",
        "targetKey",
        "metadataKey",
        "target",
        "targetKey",
        "IsObject",
        "target",
        "IsUndefined",
        "targetKey",
        "targetKey",
        "ToPropertyKey",
        "targetKey",
        "GetOrCreateMetadataMap",
        "target",
        "targetKey",
        "IsUndefined",
        "metadataMap",
        "metadataMap",
        "metadataKey",
        "metadataMap",
        "__Metadata__",
        "target",
        "targetMetadata",
        "targetKey",
        "targetMetadata",
        "__Metadata__",
        "target",
        "decorators",
        "target",
        "decorators",
        "i",
        "i",
        "decorators",
        "i",
        "decorator",
        "target",
        "IsUndefined",
        "decorated",
        "IsConstructor",
        "decorated",
        "target",
        "decorated",
        "target",
        "decorators",
        "target",
        "propertyKey",
        "descriptor",
        "decorators",
        "i",
        "i",
        "decorators",
        "i",
        "decorator",
        "target",
        "propertyKey",
        "descriptor",
        "IsUndefined",
        "decorated",
        "IsObject",
        "decorated",
        "descriptor",
        "decorated",
        "descriptor",
        "decorators",
        "target",
        "propertyKey",
        "decorators",
        "i",
        "i",
        "decorators",
        "i",
        "decorator",
        "target",
        "propertyKey",
        "target",
        "targetKey",
        "create",
        "__Metadata__",
        "target",
        "targetMetadata",
        "create",
        "targetMetadata",
        "_Map",
        "__Metadata__",
        "target",
        "targetMetadata",
        "targetMetadata",
        "targetKey",
        "keyMetadata",
        "create",
        "keyMetadata",
        "_Map",
        "targetMetadata",
        "targetKey",
        "keyMetadata",
        "keyMetadata",
        "MetadataKey",
        "O",
        "P",
        "OrdinaryHasOwnMetadata",
        "MetadataKey",
        "O",
        "P",
        "hasOwn",
        "GetPrototypeOf",
        "O",
        "parent",
        "OrdinaryHasMetadata",
        "MetadataKey",
        "parent",
        "P",
        "MetadataKey",
        "O",
        "P",
        "GetOrCreateMetadataMap",
        "O",
        "P",
        "metadataMap",
        "metadataMap",
        "MetadataKey",
        "MetadataKey",
        "O",
        "P",
        "OrdinaryHasOwnMetadata",
        "MetadataKey",
        "O",
        "P",
        "hasOwn",
        "OrdinaryGetOwnMetadata",
        "MetadataKey",
        "O",
        "P",
        "GetPrototypeOf",
        "O",
        "parent",
        "OrdinaryGetMetadata",
        "MetadataKey",
        "parent",
        "P",
        "MetadataKey",
        "O",
        "P",
        "GetOrCreateMetadataMap",
        "O",
        "P",
        "metadataMap",
        "metadataMap",
        "MetadataKey",
        "MetadataKey",
        "MetadataValue",
        "O",
        "P",
        "GetOrCreateMetadataMap",
        "O",
        "P",
        "metadataMap",
        "MetadataKey",
        "MetadataValue",
        "O",
        "P",
        "OrdinaryOwnMetadataKeys",
        "O",
        "P",
        "GetPrototypeOf",
        "O",
        "parent",
        "ownKeys",
        "OrdinaryMetadataKeys",
        "parent",
        "P",
        "parentKeys",
        "ownKeys",
        "ownKeys",
        "parentKeys",
        "_Set",
        "key",
        "ownKeys",
        "key",
        "hasKey",
        "key",
        "keys",
        "key",
        "key",
        "parentKeys",
        "key",
        "hasKey",
        "key",
        "keys",
        "key",
        "keys",
        "target",
        "targetKey",
        "GetOrCreateMetadataMap",
        "target",
        "targetKey",
        "metadataMap",
        "metadataMap",
        "_",
        "key",
        "keys",
        "key",
        "keys",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "value",
        "IsSymbol",
        "value",
        "value",
        "value",
        "O",
        "O",
        "O",
        "O",
        "functionPrototype",
        "proto",
        "proto",
        "functionPrototype",
        "proto",
        "O",
        "prototype",
        "prototypeProto",
        "prototypeProto",
        "proto",
        "prototypeProto",
        "proto",
        "O",
        "proto",
        "cacheSentinel",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "index",
        "key",
        "index",
        "key",
        "value",
        "key",
        "key",
        "value",
        "key",
        "key",
        "key",
        "index",
        "index",
        "index",
        "cacheSentinel",
        "cacheSentinel",
        "callback",
        "value",
        "key",
        "thisArg",
        "i",
        "size",
        "i",
        "i",
        "i",
        "key",
        "callback",
        "value",
        "key",
        "key",
        "keys",
        "i",
        "size",
        "i",
        "keys",
        "i",
        "key",
        "i",
        "_Map",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "callback",
        "value",
        "key",
        "thisArg",
        "callback",
        "thisArg",
        "isNode",
        "require",
        "key",
        "CreateUniqueKey",
        "CreateUniqueKey",
        "target",
        "GetOrCreateWeakMapTable",
        "target",
        "table",
        "table",
        "target",
        "GetOrCreateWeakMapTable",
        "target",
        "table",
        "table",
        "target",
        "value",
        "GetOrCreateWeakMapTable",
        "target",
        "table",
        "value",
        "target",
        "GetOrCreateWeakMapTable",
        "target",
        "table",
        "table",
        "table",
        "CreateUniqueKey",
        "buffer",
        "size",
        "i",
        "size",
        "i",
        "buffer",
        "i",
        "size",
        "nodeCrypto",
        "nodeCrypto",
        "size",
        "data",
        "Uint8Array",
        "Uint8Array",
        "size",
        "crypto",
        "crypto",
        "data",
        "msCrypto",
        "msCrypto",
        "data",
        "FillRandomBytes",
        "data",
        "size",
        "data",
        "size",
        "FillRandomBytes",
        "data",
        "size",
        "data",
        "GenRandomBytes",
        "UUID_SIZE",
        "data",
        "data",
        "data",
        "data",
        "offset",
        "UUID_SIZE",
        "offset",
        "data",
        "offset",
        "offset",
        "offset",
        "offset",
        "result",
        "result",
        "result",
        "result",
        "key",
        "CreateUUID",
        "hasOwn",
        "keys",
        "key",
        "keys",
        "key",
        "key",
        "target",
        "create",
        "key",
        "hasOwn",
        "target",
        "rootKey",
        "create",
        "target",
        "rootKey",
        "target",
        "rootKey",
        "offset",
        "__global",
        "__global",
        "__global",
        "p",
        "__global",
        "p",
        "p",
        "__global",
        "WorkerGlobalScope"
    ],
    "literals": [
        "\"use strict\"",
        "\"function\"",
        "\"function\"",
        "\"function\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"symbol\"",
        "string",
        "\"function\"",
        "\"function\"",
        "\"undefined\"",
        "'[object process]'",
        "\"crypto\"",
        "string",
        "\"function\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"\"",
        "\"-\"",
        "\"0\"",
        "string",
        "string",
        "\"@@WeakMap@@\"",
        "string",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"return this;\""
    ],
    "variables": [
        "WorkerGlobalScope",
        "crypto",
        "msCrypto",
        "require",
        "functionPrototype",
        "_Map",
        "_Set",
        "_WeakMap",
        "__Metadata__",
        "metadataMap",
        "targetMetadata",
        "i",
        "decorator",
        "decorated",
        "i",
        "decorator",
        "decorated",
        "i",
        "decorator",
        "targetMetadata",
        "keyMetadata",
        "hasOwn",
        "parent",
        "metadataMap",
        "hasOwn",
        "parent",
        "metadataMap",
        "metadataMap",
        "ownKeys",
        "parent",
        "parentKeys",
        "keys",
        "hasKey",
        "hasKey",
        "metadataMap",
        "keys",
        "proto",
        "prototype",
        "prototypeProto",
        "cacheSentinel",
        "index",
        "index",
        "size",
        "i",
        "key",
        "value",
        "keys",
        "size",
        "i",
        "cacheSentinel",
        "UUID_SIZE",
        "isNode",
        "nodeCrypto",
        "hasOwn",
        "keys",
        "rootKey",
        "table",
        "table",
        "table",
        "table",
        "i",
        "data",
        "data",
        "data",
        "data",
        "result",
        "offset",
        "key"
    ],
    "comments": [
        "! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use \nthis file except in compliance with the License. You may obtain a copy of the \nLicense at http://www.apache.org/licenses/LICENSE-2.0 \n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \nMERCHANTABLITY OR NON-INFRINGEMENT. \n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n*****************************************************************************",
        "Load global or shim versions of Map, Set, and WeakMap",
        "[[Metadata]] internal slot",
        "targetKey",
        "https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-",
        "create",
        "https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-",
        "https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-",
        "https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-",
        "create",
        "https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-",
        "https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-",
        "create",
        "https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-",
        "create",
        "https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-",
        "https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-",
        "create",
        "https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type",
        "https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray",
        "https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type",
        "https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor",
        "https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type",
        "https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey",
        "TypeScript doesn't set __proto__ in ES5, as it's non-standard.",
        "Try to determine the superclass constructor. Compatible implementations",
        "must either set __proto__ on a subclass constructor to the superclass constructor,",
        "or ensure each class has a valid `constructor` property on its prototype that",
        "points back to the constructor.",
        "If this is not the same as Function.[[Prototype]], then this is definately inherited.",
        "This is the case when in ES6 or when using __proto__ in a compatible browser.",
        "If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.",
        "if the constructor was not a function, then we cannot determine the heritage.",
        "if we have some kind of self-reference, then we cannot determine the heritage.",
        "we have a pretty good guess at the heritage.",
        "naive Map shim",
        "naive Set shim",
        "naive WeakMap shim",
        "create",
        "create",
        "create",
        "create",
        "NOTE: not a real clear, just makes the previous data unreachable",
        "mark as random - RFC 4122 § 4.4",
        "hook global Reflect"
    ],
    "docstrings": [
        "* Applies a set of decorators to a target object.\n      * @param decorators An array of decorators.\n      * @param target The target object.\n      * @returns The result of applying the provided decorators.\n      * @remarks Decorators are applied in reverse order of their positions in the array.\n      * @example\n      *\n      *     class C { }\n      *\n      *     // constructor\n      *     C = Reflect.decorate(decoratorsArray, C);\n      *",
        "* Applies a set of decorators to a property of a target object.\n      * @param decorators An array of decorators.\n      * @param target The target object.\n      * @param targetKey The property key to decorate.\n      * @param descriptor A property descriptor      \n      * @remarks Decorators are applied in reverse order.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *    \n      *         static staticMethod() { }\n      *         method() { }\n      *     }\n      *\n      *     // property (on constructor)\n      *     Reflect.decorate(decoratorsArray, C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     Reflect.decorate(decoratorsArray, C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     Object.defineProperty(C, \"staticMethod\", \n      *         Reflect.decorate(decoratorsArray, C, \"staticMethod\", \n      *             Object.getOwnPropertyDescriptor(C, \"staticMethod\")));\n      *\n      *     // method (on prototype)\n      *     Object.defineProperty(C.prototype, \"method\", \n      *         Reflect.decorate(decoratorsArray, C.prototype, \"method\", \n      *             Object.getOwnPropertyDescriptor(C.prototype, \"method\")));\n      *",
        "* Applies a set of decorators to a property of a target object.\n      * @param decorators An array of decorators.\n      * @param target The target object.\n      * @param targetKey (Optional) The property key to decorate.\n      * @param targetDescriptor (Optional) The property descriptor for the target key\n      * @remarks Decorators are applied in reverse order.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // constructor\n      *     C = Reflect.decorate(decoratorsArray, C);\n      *\n      *     // property (on constructor)\n      *     Reflect.decorate(decoratorsArray, C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     Reflect.decorate(decoratorsArray, C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     Object.defineProperty(C, \"staticMethod\", \n      *         Reflect.decorate(decoratorsArray, C, \"staticMethod\", \n      *             Object.getOwnPropertyDescriptor(C, \"staticMethod\")));\n      *\n      *     // method (on prototype)\n      *     Object.defineProperty(C.prototype, \"method\", \n      *         Reflect.decorate(decoratorsArray, C.prototype, \"method\", \n      *             Object.getOwnPropertyDescriptor(C.prototype, \"method\")));\n      *",
        "* A default metadata decorator factory that can be used on a class, class member, or parameter.\n      * @param metadataKey The key for the metadata entry.\n      * @param metadataValue The value for the metadata entry.\n      * @returns A decorator function.\n      * @remarks \n      * If `metadataKey` is already defined for the target and target key, the \n      * metadataValue for that key will be overwritten.\n      * @example\n      *\n      *     // constructor\n      *     @Reflect.metadata(key, value)\n      *     class C {\n      *     }\n      *\n      *     // property (on constructor, TypeScript only)\n      *     class C {\n      *         @Reflect.metadata(key, value)\n      *         static staticProperty;\n      *     }\n      *\n      *     // property (on prototype, TypeScript only)\n      *     class C {\n      *         @Reflect.metadata(key, value)\n      *         property;\n      *     }\n      *\n      *     // method (on constructor)\n      *     class C {\n      *         @Reflect.metadata(key, value)\n      *         static staticMethod() { }\n      *     }\n      *\n      *     // method (on prototype)\n      *     class C {\n      *         @Reflect.metadata(key, value)\n      *         method() { }\n      *     }\n      *",
        "* Define a unique metadata entry on the target.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param metadataValue A value that contains attached metadata.\n      * @param target The target object on which to define metadata.\n      * @example\n      *\n      *     class C {\n      *     }\n      *\n      *     // constructor\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C);\n      *\n      *     // decorator factory as metadata-producing annotation.\n      *     function MyAnnotation(options): ClassDecorator {\n      *         return target => Reflect.defineMetadata(\"custom:annotation\", options, target);\n      *     }\n      *",
        "* Define a unique metadata entry on the target.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param metadataValue A value that contains attached metadata.\n      * @param target The target object on which to define metadata.\n      * @param targetKey The property key for the target.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // property (on constructor)\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, C.prototype, \"method\");\n      *\n      *     // decorator factory as metadata-producing annotation.\n      *     function MyAnnotation(options): PropertyDecorator {\n      *         return (target, key) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n      *     }\n      *",
        "* Define a unique metadata entry on the target.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param metadataValue A value that contains attached metadata.\n      * @param target The target object on which to define metadata.\n      * @param targetKey (Optional) The property key for the target.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // constructor\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C);\n      *\n      *     // property (on constructor)\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"method\");\n      *\n      *     // decorator factory as metadata-producing annotation.\n      *     function MyAnnotation(options): Decorator {\n      *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n      *     }\n      *",
        "* Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n      * @example\n      *\n      *     class C {\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C);\n      *",
        "* Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey The property key for the target.\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // property (on constructor)\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"method\");\n      *",
        "* Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey (Optional) The property key for the target.\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"method\");\n      *",
        "* Gets a value indicating whether the target object has the provided metadata key defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n      * @example\n      *\n      *     class C {\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C);\n      *",
        "* Gets a value indicating whether the target object has the provided metadata key defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey The property key for the target.\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // property (on constructor)\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\n      *",
        "* Gets a value indicating whether the target object has the provided metadata key defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey (Optional) The property key for the target.\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\n      *",
        "* Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      *\n      *     class C {\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.getMetadata(\"custom:annotation\", C);\n      *",
        "* Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey The property key for the target.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // property (on constructor)\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"method\");\n      *",
        "* Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey (Optional) The property key for the target.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.getMetadata(\"custom:annotation\", C);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"method\");\n      *",
        "* Gets the metadata value for the provided metadata key on the target object.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      *\n      *     class C {\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C);\n      *",
        "* Gets the metadata value for the provided metadata key on the target object.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey The property key for the target.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // property (on constructor)\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\n      *",
        "* Gets the metadata value for the provided metadata key on the target object.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey (Optional) The property key for the target.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\n      *",
        "* Gets the metadata keys defined on the target object or its prototype chain.\n      * @param target The target object on which the metadata is defined.\n      * @returns An array of unique metadata keys.\n      * @example\n      *\n      *     class C {\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.getMetadataKeys(C);\n      *",
        "* Gets the metadata keys defined on the target object or its prototype chain.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey The property key for the target.\n      * @returns An array of unique metadata keys.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // property (on constructor)\n      *     result = Reflect.getMetadataKeys(C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.getMetadataKeys(C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.getMetadataKeys(C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.getMetadataKeys(C.prototype, \"method\");\n      *",
        "* Gets the metadata keys defined on the target object or its prototype chain.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey (Optional) The property key for the target.\n      * @returns An array of unique metadata keys.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.getMetadataKeys(C);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.getMetadataKeys(C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.getMetadataKeys(C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.getMetadataKeys(C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.getMetadataKeys(C.prototype, \"method\");\n      *",
        "* Gets the unique metadata keys defined on the target object.\n      * @param target The target object on which the metadata is defined.\n      * @returns An array of unique metadata keys.\n      * @example\n      *\n      *     class C {\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.getOwnMetadataKeys(C);\n      *",
        "* Gets the unique metadata keys defined on the target object.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey The property key for the target.\n      * @returns An array of unique metadata keys.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // property (on constructor)\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"method\");\n      *",
        "* Gets the unique metadata keys defined on the target object.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey (Optional) The property key for the target.\n      * @returns An array of unique metadata keys.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.getOwnMetadataKeys(C);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"method\");\n      *",
        "* Deletes the metadata entry from the target object with the provided key.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n      * @example\n      *\n      *     class C {\n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C);\n      *",
        "* Deletes the metadata entry from the target object with the provided key.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey The property key for the target.\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // property (on constructor)\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"method\");\n      *",
        "* Deletes the metadata entry from the target object with the provided key.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param target The target object on which the metadata is defined.\n      * @param targetKey (Optional) The property key for the target.\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n      * @example\n      *\n      *     class C {\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\n      *         // static staticProperty;      \n      *         // property;\n      *\n      *         constructor(p) { }\n      *         static staticMethod(p) { }\n      *         method(p) { } \n      *     }\n      *\n      *     // constructor\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C);\n      *\n      *     // property (on constructor)\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticProperty\");\n      *\n      *     // property (on prototype)\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"property\");\n      *\n      *     // method (on constructor)\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticMethod\");\n      *\n      *     // method (on prototype)\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"method\");\n      *"
    ],
    "functions": [
        "decorate",
        "metadata",
        "decorator",
        "defineMetadata",
        "hasMetadata",
        "hasOwnMetadata",
        "getMetadata",
        "getOwnMetadata",
        "getMetadataKeys",
        "getOwnMetadataKeys",
        "deleteMetadata",
        "DecorateConstructor",
        "DecoratePropertyWithDescriptor",
        "DecoratePropertyWithoutDescriptor",
        "GetOrCreateMetadataMap",
        "OrdinaryHasMetadata",
        "OrdinaryHasOwnMetadata",
        "OrdinaryGetMetadata",
        "OrdinaryGetOwnMetadata",
        "OrdinaryDefineOwnMetadata",
        "OrdinaryMetadataKeys",
        "OrdinaryOwnMetadataKeys",
        "IsUndefined",
        "IsArray",
        "IsObject",
        "IsConstructor",
        "IsSymbol",
        "ToPropertyKey",
        "GetPrototypeOf",
        "CreateMapPolyfill",
        "size",
        "has",
        "get",
        "clear",
        "forEach",
        "_find",
        "CreateSetPolyfill",
        "size",
        "has",
        "add",
        "clear",
        "forEach",
        "CreateWeakMapPolyfill",
        "has",
        "get",
        "clear",
        "FillRandomBytes",
        "GenRandomBytes",
        "CreateUUID",
        "CreateUniqueKey",
        "GetOrCreateWeakMapTable"
    ],
    "classes": []
}