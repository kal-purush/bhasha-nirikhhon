{
    "identifiers": [
        "AudioSampleLoader",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "AudioSampleLoader",
        "url",
        "XMLHttpRequest",
        "XHR",
        "url",
        "XHR",
        "XHR",
        "loader",
        "XHR",
        "buffer",
        "loader",
        "buffer",
        "loader",
        "loader",
        "XHR",
        "loader",
        "XHR",
        "AudioSampleLoader",
        "url",
        "index",
        "XMLHttpRequest",
        "XHR",
        "url",
        "XHR",
        "XHR",
        "loader",
        "XHR",
        "buffer",
        "loader",
        "index",
        "buffer",
        "loader",
        "loader",
        "loader",
        "loader",
        "loader",
        "loader",
        "XHR",
        "loader",
        "XHR"
    ],
    "literals": [
        "\"use strict\"",
        "\"use strict\"",
        "'ctx'",
        "'AudioSampleLoader: ctx not an instance of AudioContext'",
        "'onload'",
        "'AudioSampleLoader: Callback onload does not exist'",
        "'function'",
        "'AudioSampleLoader: Callback onload not a function'",
        "'onerror'",
        "'function'",
        "'string'",
        "'AudioSampleLoader: src['",
        "'] is not a string'",
        "'string'",
        "'AudioSampleLoader: src not string or list of strings'",
        "\"use strict\"",
        "'GET'",
        "'arraybuffer'",
        "'AudioSampleLoader: ctx.decodeAudioData() called onerror'",
        "'AudioSampleLoader: XMLHttpRequest called onerror'",
        "\"use strict\"",
        "'GET'",
        "'arraybuffer'",
        "'AudioSampleLoader: ctx.decodeAudioData() called onerror'",
        "'AudioSampleLoader: XMLHttpRequest called onerror'"
    ],
    "variables": [
        "i",
        "loader",
        "XHR",
        "loader",
        "XHR"
    ],
    "comments": [
        "Forward-declare AudioContext for Safari and older Google Chrome.",
        "TODO: Post an error, but do not overwrite the variable with a valid context.",
        "If src is a valid list of strings.",
        "If src is just a single string."
    ],
    "docstrings": [
        "* AudioSampleLoader loads and decodes audio samples with audioCtx. It can be \n* provided a single URL as a string or a list of URL strings. It is designed to\n* function very similar to XMLHttpRequest Level 2.\n* <p>\n* Sample Usage:<br>\n* var loader = new AudioSampleLoader();<br>\n* loader.ctx = yourWebAudioContext;<br>\n* loader.src = yourPathOrListOfPathsToAudioFiles;<br>\n* loader.onload = yourCallbackFunction;<br>\n* loader.onerror = yourOptionalErrorCallback;<br>\n* loader.send();<br>\n* <p>\n* When your callback is called, you can view your decoded buffers at:<br>\n* loader.response;<br>\n* ... which will be an AudioBuffer (or a list of AudioBuffers in the order that\n* you provided). Your response will NOT be an argument in the callback. The\n* callback only gives you a trigger for completion time (just like XHR).\n* <p>\n* Basically, imagine it like XMLHttpRequest for loading WebAudio samples.\n*\n* @author Scott Michaud\n* @version 0.2"
    ],
    "functions": [
        "AudioSampleLoader"
    ],
    "classes": []
}