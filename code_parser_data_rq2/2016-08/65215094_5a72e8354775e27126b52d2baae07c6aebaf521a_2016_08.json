{
    "identifiers": [
        "PROPERTY_DESCRIPTOR_SUPPORT",
        "definePropertyShim",
        "getNewChainableClass",
        "Sugar",
        "globalContext",
        "SUGAR_GLOBAL",
        "Sugar",
        "Sugar",
        "arg",
        "forEachProperty",
        "Sugar",
        "sugarNamespace",
        "name",
        "hasOwn",
        "namespacesByName",
        "name",
        "sugarNamespace",
        "arg",
        "Sugar",
        "hasExports",
        "Sugar",
        "globalContext",
        "SUGAR_GLOBAL",
        "Sugar",
        "e",
        "forEachProperty",
        "NATIVE_NAMES",
        "name",
        "createNamespace",
        "name",
        "setGlobalProperties",
        "name",
        "name",
        "getNewChainableClass",
        "name",
        "opts",
        "globalContext",
        "name",
        "nativeClass",
        "name",
        "target",
        "isObject",
        "target",
        "nativeProto",
        "allowObjectPrototype",
        "name",
        "name",
        "field",
        "val",
        "opts",
        "field",
        "arr",
        "el",
        "arr",
        "i",
        "i",
        "el",
        "val",
        "field",
        "val",
        "opts",
        "field",
        "arrayOptionExists",
        "field",
        "val",
        "methodName",
        "target",
        "flags",
        "target",
        "methodName",
        "flags",
        "i",
        "flags",
        "i",
        "opts",
        "flags",
        "i",
        "arrayOptionExists",
        "nativeClass",
        "arrayOptionExcludes",
        "nativeClass",
        "methodName",
        "arrayOptionExists",
        "methodName",
        "methodName",
        "method",
        "target",
        "objectRestricted",
        "methodName",
        "target",
        "disallowedByFlags",
        "methodName",
        "target",
        "method",
        "methodIsExcepted",
        "methodName",
        "opts",
        "opts",
        "methodsByName",
        "opts",
        "namespaceIsExcepted",
        "isObject",
        "opts",
        "allowObjectPrototype",
        "opts",
        "forEachProperty",
        "methodsByName",
        "sugarNamespace",
        "method",
        "methodName",
        "methodsByName",
        "methodName",
        "method",
        "method",
        "sugarNamespace",
        "methodName",
        "hasOwn",
        "method",
        "canExtend",
        "methodName",
        "method",
        "nativeProto",
        "instanceMethods",
        "methodName",
        "method",
        "hasOwn",
        "method",
        "canExtend",
        "methodName",
        "method",
        "nativeClass",
        "staticMethods",
        "methodName",
        "method",
        "extendNative",
        "nativeClass",
        "staticMethods",
        "extendNative",
        "nativeProto",
        "instanceMethods",
        "methodsByName",
        "setProperty",
        "sugarNamespace",
        "Sugar",
        "methodName",
        "instance",
        "args",
        "setProperty",
        "sugarNamespace",
        "methodName",
        "arg1",
        "arg2",
        "arg3",
        "collectDefineOptions",
        "arg1",
        "arg2",
        "arg3",
        "defineMethods",
        "sugarNamespace",
        "opts",
        "instance",
        "args",
        "opts",
        "sugarNamespace",
        "defineWithOptionCollect",
        "STATIC",
        "defineWithOptionCollect",
        "INSTANCE",
        "defineWithOptionCollect",
        "INSTANCE",
        "STATIC",
        "defineWithOptionCollect",
        "STATIC",
        "defineWithOptionCollect",
        "INSTANCE",
        "setProperty",
        "sugarNamespace",
        "arg1",
        "arg2",
        "arg3",
        "collectDefineOptions",
        "arg1",
        "arg2",
        "arg3",
        "extendNative",
        "globalContext",
        "name",
        "opts",
        "opts",
        "setProperty",
        "sugarNamespace",
        "arg1",
        "arg2",
        "arg3",
        "collectDefineOptions",
        "arg1",
        "arg2",
        "arg3",
        "extendNative",
        "globalContext",
        "name",
        "opts",
        "opts",
        "forEachProperty",
        "opts",
        "fn",
        "methodName",
        "defineChainableMethod",
        "sugarNamespace",
        "methodName",
        "fn",
        "setProperty",
        "sugarNamespace",
        "name",
        "source",
        "source",
        "sugarNamespace",
        "source",
        "source",
        "setMethod",
        "sugarNamespace",
        "name",
        "method",
        "setProperty",
        "sugarNamespace",
        "extend",
        "namespacesByName",
        "name",
        "sugarNamespace",
        "namespacesByClassString",
        "name",
        "sugarNamespace",
        "mapNativeToChainable",
        "name",
        "mapObjectChainablesToNamespace",
        "sugarNamespace",
        "Sugar",
        "name",
        "sugarNamespace",
        "setProperty",
        "Sugar",
        "Sugar",
        "setProperty",
        "Sugar",
        "toString",
        "setProperty",
        "Sugar",
        "createNamespace",
        "setProperty",
        "Sugar",
        "hasOwn",
        "getOwn",
        "setProperty",
        "classToString",
        "defineProperty",
        "forEachProperty",
        "mapNativeToChainable",
        "SUGAR_GLOBAL",
        "sugarNamespace",
        "methods",
        "args",
        "flags",
        "forEachProperty",
        "methods",
        "method",
        "methodName",
        "args",
        "staticMethod",
        "wrapMethodWithArguments",
        "method",
        "flags",
        "staticMethod",
        "flags",
        "INSTANCE",
        "method",
        "instanceMethod",
        "wrapInstanceMethod",
        "method",
        "args",
        "setProperty",
        "staticMethod",
        "instanceMethod",
        "STATIC",
        "setProperty",
        "staticMethod",
        "setMethod",
        "sugarNamespace",
        "methodName",
        "staticMethod",
        "sugarNamespace",
        "sugarNamespace",
        "methodName",
        "arg1",
        "arg2",
        "arg3",
        "arg1",
        "methods",
        "methods",
        "arg1",
        "arg2",
        "last",
        "arg3",
        "methods",
        "arg1",
        "last",
        "arg2",
        "last",
        "methods",
        "fn",
        "args",
        "args",
        "wrapMethodWithArguments",
        "fn",
        "wrapInstanceMethodFixed",
        "fn",
        "fn",
        "instance",
        "fn",
        "instance",
        "instance",
        "args",
        "len",
        "arguments",
        "startCollect",
        "i",
        "len",
        "i",
        "i",
        "startCollect",
        "args",
        "arguments",
        "i",
        "collectedArgs",
        "arguments",
        "i",
        "args",
        "collectedArgs",
        "fn",
        "args",
        "fn",
        "fn",
        "fn",
        "a",
        "fn",
        "a",
        "a",
        "b",
        "fn",
        "a",
        "b",
        "a",
        "b",
        "c",
        "fn",
        "a",
        "b",
        "c",
        "a",
        "b",
        "c",
        "d",
        "fn",
        "a",
        "b",
        "c",
        "d",
        "target",
        "source",
        "polyfill",
        "forEachProperty",
        "source",
        "method",
        "name",
        "polyfill",
        "target",
        "name",
        "setProperty",
        "target",
        "name",
        "method",
        "sugarNamespace",
        "methodName",
        "method",
        "sugarNamespace",
        "methodName",
        "method",
        "method",
        "defineChainableMethod",
        "sugarNamespace",
        "methodName",
        "method",
        "name",
        "SugarChainable",
        "obj",
        "arg",
        "fn",
        "fn",
        "obj",
        "arg",
        "fn",
        "obj",
        "obj",
        "arguments",
        "obj",
        "setProperty",
        "fn",
        "SUGAR_GLOBAL",
        "name",
        "setProperty",
        "fn",
        "fn",
        "sugarNamespace",
        "methodName",
        "fn",
        "wrapWithChainableResult",
        "fn",
        "dcp",
        "DefaultChainable",
        "existing",
        "dcp",
        "methodName",
        "collision",
        "existing",
        "existing",
        "methodName",
        "existing",
        "existing",
        "dcp",
        "methodName",
        "collision",
        "disambiguateMethod",
        "methodName",
        "wrapped",
        "sugarNamespace",
        "methodName",
        "wrapped",
        "sugarNamespace",
        "Sugar",
        "mapObjectChainableToAllNamespaces",
        "methodName",
        "wrapped",
        "sugarNamespace",
        "forEachProperty",
        "Sugar",
        "Sugar",
        "val",
        "methodName",
        "val",
        "setObjectChainableOnNamespace",
        "sugarNamespace",
        "methodName",
        "val",
        "methodName",
        "fn",
        "forEachProperty",
        "namespacesByName",
        "sugarNamespace",
        "setObjectChainableOnNamespace",
        "sugarNamespace",
        "methodName",
        "fn",
        "sugarNamespace",
        "methodName",
        "fn",
        "sugarNamespace",
        "hasOwn",
        "proto",
        "methodName",
        "proto",
        "methodName",
        "fn",
        "fn",
        "DefaultChainable",
        "fn",
        "arguments",
        "methodName",
        "raw",
        "sugarNamespace",
        "namespacesByClassString",
        "classToString",
        "raw",
        "sugarNamespace",
        "sugarNamespace",
        "Sugar",
        "fn",
        "sugarNamespace",
        "raw",
        "methodName",
        "fn",
        "raw",
        "fn",
        "arguments",
        "fn",
        "fn",
        "name",
        "methodNames",
        "namespacesByName",
        "name",
        "globalContext",
        "name",
        "methodNames",
        "ownPropertyNames",
        "methodNames",
        "ownPropertyNames",
        "nativeProto",
        "forEachProperty",
        "methodNames",
        "methodName",
        "nativeMethodProhibited",
        "methodName",
        "nativeProto",
        "methodName",
        "fn",
        "e",
        "defineChainableMethod",
        "sugarNamespace",
        "methodName",
        "fn",
        "methodName",
        "methodName",
        "methodName",
        "methodName",
        "obj",
        "fn",
        "key",
        "obj",
        "hasOwn",
        "obj",
        "key",
        "fn",
        "obj",
        "obj",
        "key",
        "key",
        "obj",
        "obj",
        "prop",
        "descriptor",
        "obj",
        "prop",
        "descriptor",
        "target",
        "name",
        "value",
        "enumerable",
        "defineProperty",
        "target",
        "name",
        "value",
        "enumerable",
        "obj",
        "internalToString",
        "obj",
        "obj",
        "prop",
        "obj",
        "internalHasOwnProperty",
        "obj",
        "prop",
        "obj",
        "prop",
        "hasOwn",
        "obj",
        "prop",
        "obj",
        "prop",
        "setupGlobal",
        "Sugar",
        "Sugar",
        "Sugar",
        "Sugar",
        "Sugar",
        "Sugar",
        "Sugar",
        "spaceSplit",
        "NATIVE_TYPES",
        "isBoolean",
        "buildPrimitiveClassCheck",
        "names",
        "isNumber",
        "buildPrimitiveClassCheck",
        "names",
        "isString",
        "buildPrimitiveClassCheck",
        "names",
        "isDate",
        "buildClassCheck",
        "names",
        "isRegExp",
        "buildClassCheck",
        "names",
        "isFunction",
        "buildClassCheck",
        "names",
        "isArray",
        "buildClassCheck",
        "names",
        "isError",
        "buildClassCheck",
        "names",
        "isSet",
        "buildClassCheck",
        "names",
        "isMap",
        "buildClassCheck",
        "names",
        "addKnownType",
        "addKnownType",
        "names",
        "addKnownType",
        "names",
        "addKnownType",
        "names",
        "addKnownType",
        "names",
        "addKnownType",
        "names",
        "addKnownType",
        "names",
        "forEach",
        "spaceSplit",
        "types",
        "addKnownType",
        "className",
        "className",
        "knownTypes",
        "className",
        "knownTypes",
        "className",
        "className",
        "globalObject",
        "globalObject",
        "isClass",
        "globalObject",
        "getConstructorClassCheck",
        "globalObject",
        "getToStringClassCheck",
        "className",
        "obj",
        "obj",
        "obj",
        "obj",
        "ctorStr",
        "className",
        "obj",
        "isClass",
        "obj",
        "className",
        "className",
        "className",
        "obj",
        "obj",
        "t",
        "t",
        "isClass",
        "obj",
        "className",
        "addCoreTypes",
        "addArrayTypes",
        "isSerializable",
        "obj",
        "className",
        "className",
        "className",
        "classToString",
        "obj",
        "isKnownType",
        "className",
        "isPlainObject",
        "obj",
        "className",
        "obj",
        "className",
        "classToString",
        "obj",
        "className",
        "method",
        "sugarNamespace",
        "arg1",
        "arg2",
        "sugarNamespace",
        "method",
        "arg1",
        "arg2",
        "wrapNamespace",
        "wrapNamespace",
        "wrapNamespace",
        "wrapNamespace",
        "wrapNamespace",
        "wrapNamespace",
        "wrapNamespace",
        "sugarNamespace",
        "fn",
        "flags",
        "defineInstance",
        "sugarNamespace",
        "collectSimilarMethods",
        "fn",
        "flags",
        "sugarNamespace",
        "fn",
        "flags",
        "defineInstanceAndStatic",
        "sugarNamespace",
        "collectSimilarMethods",
        "fn",
        "flags",
        "fn",
        "isString",
        "spaceSplit",
        "forEach",
        "el",
        "i",
        "fn",
        "methods",
        "el",
        "i",
        "methods",
        "fn",
        "a",
        "fn",
        "a",
        "args",
        "args",
        "args",
        "staticFn",
        "b",
        "fn",
        "b",
        "args",
        "args",
        "staticFn",
        "name",
        "fn",
        "setProperty",
        "name",
        "fn",
        "defaults",
        "simpleClone",
        "defaults",
        "name",
        "obj",
        "name",
        "name",
        "val",
        "val",
        "val",
        "defaults",
        "name",
        "obj",
        "name",
        "val",
        "defineAccessor",
        "getOption",
        "defineAccessor",
        "setOption",
        "getOption",
        "ctor",
        "methods",
        "ctor",
        "forEachProperty",
        "methods",
        "val",
        "key",
        "proto",
        "key",
        "val",
        "exists",
        "exists",
        "obj",
        "isFunction",
        "obj",
        "obj",
        "isArray",
        "obj",
        "obj",
        "isPrimitive",
        "obj",
        "n",
        "n",
        "n",
        "n",
        "isNumber",
        "n",
        "isFinite",
        "n",
        "RangeError",
        "trunc",
        "n",
        "o",
        "o",
        "o",
        "o",
        "key",
        "PRIVATE_PROP_PREFIX",
        "key",
        "obj",
        "val",
        "arguments",
        "setProperty",
        "obj",
        "privateKey",
        "val",
        "obj",
        "obj",
        "privateKey",
        "sugarNamespace",
        "createFn",
        "sugarNamespace",
        "createFn",
        "arguments",
        "f",
        "isPrimitive",
        "f",
        "classToString",
        "f",
        "isRegExp",
        "f",
        "className",
        "regexMatcher",
        "f",
        "isDate",
        "f",
        "className",
        "dateMatcher",
        "f",
        "isFunction",
        "f",
        "className",
        "functionMatcher",
        "f",
        "isPlainObject",
        "f",
        "className",
        "fuzzyMatcher",
        "f",
        "defaultMatcher",
        "f",
        "obj",
        "el",
        "i",
        "arr",
        "isObjectType",
        "el",
        "forEachProperty",
        "obj",
        "val",
        "key",
        "matchers",
        "key",
        "getOwn",
        "matchers",
        "key",
        "getMatcher",
        "val",
        "matchers",
        "key",
        "arr",
        "el",
        "key",
        "i",
        "arr",
        "matched",
        "matched",
        "matched",
        "f",
        "el",
        "isEqual",
        "el",
        "f",
        "reg",
        "reg",
        "reg",
        "el",
        "reg",
        "el",
        "d",
        "d",
        "el",
        "el",
        "el",
        "el",
        "ms",
        "fn",
        "el",
        "i",
        "arr",
        "el",
        "fn",
        "fn",
        "arr",
        "el",
        "i",
        "arr",
        "obj",
        "obj",
        "obj",
        "key",
        "handleDeepProperty",
        "obj",
        "key",
        "obj",
        "key",
        "handleDeepProperty",
        "obj",
        "key",
        "obj",
        "key",
        "val",
        "handleDeepProperty",
        "obj",
        "key",
        "val",
        "obj",
        "obj",
        "key",
        "has",
        "fill",
        "fillLast",
        "val",
        "ns",
        "obj",
        "key",
        "isObjectType",
        "key",
        "bs",
        "key",
        "key",
        "key",
        "key",
        "handleArrayIndexRange",
        "obj",
        "key",
        "val",
        "bs",
        "key",
        "isDefined",
        "val",
        "bs",
        "i",
        "blen",
        "i",
        "ps",
        "bs",
        "i",
        "isString",
        "ps",
        "ps",
        "periodSplit",
        "ps",
        "ps",
        "j",
        "plen",
        "j",
        "key",
        "ps",
        "j",
        "isLast",
        "i",
        "blen",
        "j",
        "plen",
        "cbi",
        "key",
        "isIndex",
        "cbi",
        "isPush",
        "cbi",
        "nextIsIndex",
        "blen",
        "j",
        "plen",
        "isPush",
        "key",
        "ns",
        "isIndex",
        "key",
        "key",
        "isIndex",
        "key",
        "key",
        "key",
        "ns",
        "i",
        "key",
        "blen",
        "exists",
        "key",
        "ns",
        "hasOwn",
        "ns",
        "key",
        "fill",
        "isLast",
        "fillLast",
        "exists",
        "ns",
        "ns",
        "key",
        "nextIsIndex",
        "fillLast",
        "isLast",
        "has",
        "isLast",
        "exists",
        "exists",
        "isLast",
        "assertWritable",
        "ns",
        "ns",
        "key",
        "val",
        "ns",
        "exists",
        "ns",
        "key",
        "ns",
        "obj",
        "key",
        "val",
        "match",
        "key",
        "PROPERTY_RANGE_REG",
        "match",
        "isDefined",
        "val",
        "leading",
        "match",
        "leading",
        "arr",
        "handleDeepProperty",
        "obj",
        "leading",
        "arr",
        "obj",
        "assertArray",
        "arr",
        "trailing",
        "match",
        "start",
        "match",
        "match",
        "end",
        "match",
        "match",
        "arr",
        "end",
        "end",
        "arr",
        "end",
        "i",
        "end",
        "i",
        "handleDeepProperty",
        "arr",
        "i",
        "trailing",
        "val",
        "arr",
        "arr",
        "start",
        "end",
        "trailing",
        "trailing",
        "HALF_WIDTH_PERIOD",
        "trailing",
        "trailing",
        "arr",
        "el",
        "handleDeepProperty",
        "el",
        "trailing",
        "arr",
        "obj",
        "key",
        "hasOwn",
        "obj",
        "key",
        "key",
        "obj",
        "prop",
        "isPrimitive",
        "obj",
        "prop",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "className",
        "isObjectType",
        "obj",
        "isClass",
        "obj",
        "className",
        "hasValidPlainObjectPrototype",
        "obj",
        "hasOwnEnumeratedProperties",
        "obj",
        "obj",
        "obj",
        "obj",
        "hasConstructor",
        "hasToString",
        "hasConstructor",
        "hasOwn",
        "obj",
        "hasOwn",
        "obj",
        "obj",
        "key",
        "obj",
        "obj",
        "key",
        "hasOwn",
        "obj",
        "key",
        "val",
        "objectProto",
        "key",
        "n",
        "fn",
        "i",
        "n",
        "i",
        "fn",
        "i",
        "obj",
        "simpleMerge",
        "obj",
        "target",
        "source",
        "forEachProperty",
        "source",
        "val",
        "key",
        "target",
        "key",
        "val",
        "target",
        "obj",
        "isPrimitive",
        "obj",
        "obj",
        "obj",
        "NO_KEYS_IN_STRING_OBJECTS",
        "isString",
        "obj",
        "forceStringCoercion",
        "obj",
        "obj",
        "obj",
        "chr",
        "obj",
        "i",
        "obj",
        "i",
        "chr",
        "a",
        "b",
        "stack",
        "a",
        "b",
        "a",
        "a",
        "b",
        "aClass",
        "classToString",
        "a",
        "bClass",
        "classToString",
        "b",
        "aClass",
        "bClass",
        "isSerializable",
        "a",
        "aClass",
        "isSerializable",
        "b",
        "bClass",
        "objectIsEqual",
        "a",
        "b",
        "aClass",
        "stack",
        "isSet",
        "a",
        "aClass",
        "isSet",
        "b",
        "bClass",
        "a",
        "b",
        "isEqual",
        "setToArray",
        "a",
        "setToArray",
        "b",
        "stack",
        "isMap",
        "a",
        "aClass",
        "isMap",
        "b",
        "bClass",
        "a",
        "b",
        "isEqual",
        "mapToArray",
        "a",
        "mapToArray",
        "b",
        "stack",
        "isError",
        "a",
        "aClass",
        "isError",
        "b",
        "bClass",
        "a",
        "b",
        "a",
        "b",
        "aClass",
        "stack",
        "a",
        "b",
        "aType",
        "bType",
        "isObjectType",
        "a",
        "a",
        "b",
        "count",
        "propsEqual",
        "iterateWithCyclicCheck",
        "a",
        "stack",
        "key",
        "val",
        "cyc",
        "stack",
        "cyc",
        "key",
        "b",
        "isEqual",
        "val",
        "b",
        "key",
        "stack",
        "propsEqual",
        "count",
        "propsEqual",
        "propsEqual",
        "count",
        "getKeys",
        "b",
        "a",
        "b",
        "obj",
        "refs",
        "stack",
        "obj",
        "isPrimitive",
        "obj",
        "isRealNaN",
        "obj",
        "obj",
        "className",
        "classToString",
        "obj",
        "isSerializable",
        "obj",
        "className",
        "indexOf",
        "refs",
        "obj",
        "refs",
        "refs",
        "obj",
        "isObjectType",
        "obj",
        "value",
        "serializeDeep",
        "obj",
        "refs",
        "stack",
        "obj",
        "obj",
        "Infinity",
        "value",
        "obj",
        "value",
        "obj",
        "className",
        "value",
        "obj",
        "refs",
        "stack",
        "iterateWithCyclicCheck",
        "obj",
        "stack",
        "key",
        "val",
        "cyc",
        "stack",
        "result",
        "cyc",
        "key",
        "serializeInternal",
        "val",
        "refs",
        "stack",
        "result",
        "obj",
        "sortedKeys",
        "stack",
        "fn",
        "val",
        "key",
        "stack",
        "stack",
        "i",
        "stack",
        "i",
        "val",
        "cyc",
        "stack",
        "val",
        "fn",
        "key",
        "val",
        "cyc",
        "stack",
        "stack",
        "getKeys",
        "obj",
        "i",
        "arr",
        "i",
        "key",
        "arr",
        "i",
        "next",
        "obj",
        "key",
        "arr",
        "i",
        "stack",
        "stack",
        "sortedKeys",
        "iterateWithSortedKeys",
        "forEachProperty",
        "obj",
        "next",
        "n",
        "n",
        "n",
        "n",
        "arr",
        "fn",
        "fromIndex",
        "loop",
        "getSparseArrayIndexes",
        "arr",
        "fromIndex",
        "loop",
        "indexes",
        "i",
        "len",
        "i",
        "index",
        "indexes",
        "i",
        "fn",
        "arr",
        "arr",
        "index",
        "index",
        "arr",
        "arr",
        "arr",
        "fromIndex",
        "loop",
        "fromRight",
        "i",
        "arr",
        "isArrayIndex",
        "i",
        "loop",
        "fromRight",
        "i",
        "fromIndex",
        "i",
        "fromIndex",
        "indexes",
        "i",
        "indexes",
        "a",
        "b",
        "a",
        "fromIndex",
        "b",
        "fromIndex",
        "aLoop",
        "bLoop",
        "aLoop",
        "a",
        "b",
        "indexes",
        "obj",
        "find",
        "loop",
        "isString",
        "obj",
        "isArray",
        "find",
        "entryAtIndex",
        "obj",
        "find",
        "length",
        "loop",
        "isString",
        "result",
        "find",
        "forEach",
        "find",
        "index",
        "i",
        "result",
        "i",
        "entryAtIndex",
        "obj",
        "index",
        "length",
        "loop",
        "isString",
        "result",
        "index",
        "length",
        "loop",
        "index",
        "loop",
        "index",
        "index",
        "length",
        "index",
        "index",
        "length",
        "index",
        "index",
        "obj",
        "index",
        "length",
        "loop",
        "isString",
        "index",
        "getNormalizedIndex",
        "index",
        "length",
        "loop",
        "isString",
        "obj",
        "index",
        "obj",
        "index",
        "el",
        "f",
        "context",
        "mapArgs",
        "f",
        "el",
        "f",
        "f",
        "context",
        "mapArgs",
        "isArray",
        "f",
        "f",
        "m",
        "mapWithShortcuts",
        "el",
        "m",
        "context",
        "mapArgs",
        "isFunction",
        "el",
        "f",
        "el",
        "f",
        "el",
        "deepGetProperty",
        "el",
        "f",
        "HALF_WIDTH_COMMA",
        "HALF_WIDTH_PERIOD",
        "arr",
        "fn",
        "arr",
        "i",
        "len",
        "i",
        "i",
        "arr",
        "iterateOverSparseArray",
        "arr",
        "fn",
        "i",
        "fn",
        "arr",
        "i",
        "i",
        "arr",
        "fn",
        "arr",
        "i",
        "len",
        "i",
        "arr",
        "i",
        "i",
        "arr",
        "fn",
        "el",
        "i",
        "result",
        "el",
        "result",
        "arr",
        "fn",
        "arr",
        "i",
        "len",
        "i",
        "i",
        "arr",
        "result",
        "fn",
        "arr",
        "i",
        "i",
        "result",
        "arr",
        "el",
        "arr",
        "i",
        "len",
        "i",
        "i",
        "arr",
        "arr",
        "i",
        "el",
        "i",
        "n",
        "n",
        "isFinite",
        "n",
        "n",
        "n",
        "ceil",
        "n",
        "floor",
        "n",
        "obj",
        "obj",
        "obj",
        "obj",
        "val",
        "precision",
        "fn",
        "pow",
        "abs",
        "precision",
        "fn",
        "fn",
        "round",
        "precision",
        "multiplier",
        "multiplier",
        "fn",
        "val",
        "multiplier",
        "multiplier",
        "num",
        "place",
        "sign",
        "replacement",
        "abs",
        "num",
        "repeatString",
        "replacement",
        "place",
        "sign",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "fullWidthNumberMap",
        "i",
        "i",
        "digit",
        "chr",
        "i",
        "FULL_WIDTH_ZERO",
        "fwn",
        "digit",
        "fullWidthNumberMap",
        "digit",
        "chr",
        "i",
        "HALF_WIDTH_ZERO",
        "fullWidthNumberMap",
        "hwc",
        "fullWidthNumberMap",
        "fwp",
        "hwp",
        "fullWidthNumberMap",
        "hwp",
        "hwp",
        "fullWidthNumberReg",
        "allCharsReg",
        "fwn",
        "fwp",
        "hwc",
        "hwp",
        "fullWidthNumbers",
        "fwn",
        "sanitized",
        "fullWidthNumberReg",
        "chr",
        "getOwn",
        "fullWidthNumberMap",
        "chr",
        "replacement",
        "HALF_WIDTH_PERIOD",
        "isDecimal",
        "replacement",
        "isDecimal",
        "parseFloat",
        "sanitized",
        "parseInt",
        "sanitized",
        "num",
        "num",
        "num",
        "result",
        "num",
        "result",
        "bracketMatcher",
        "percentMatcher",
        "precheck",
        "memoizeFunction",
        "compile",
        "format",
        "match",
        "match",
        "match",
        "match",
        "match",
        "percentMatcher",
        "token",
        "pKey",
        "get",
        "percentMatcher",
        "bKey",
        "token",
        "bKey",
        "get",
        "bracketMatcher",
        "pLit",
        "percentMatcher",
        "literal",
        "pLit",
        "literal",
        "match",
        "match",
        "get",
        "assertPassesPrecheck",
        "precheck",
        "bKey",
        "pKey",
        "fn",
        "obj",
        "opt",
        "get",
        "obj",
        "token",
        "opt",
        "format",
        "fn",
        "getLiteral",
        "literal",
        "format",
        "start",
        "end",
        "end",
        "start",
        "start",
        "end",
        "assertNoUnmatched",
        "sub",
        "OPEN_BRACE",
        "assertNoUnmatched",
        "sub",
        "CLOSE_BRACE",
        "format",
        "sub",
        "precheck",
        "bt",
        "pt",
        "precheck",
        "precheck",
        "bt",
        "pt",
        "bt",
        "pt",
        "chr",
        "chr",
        "chr",
        "reg",
        "match",
        "reg",
        "getSubstring",
        "format",
        "lastIndex",
        "match",
        "getToken",
        "format",
        "match",
        "lastIndex",
        "reg",
        "getSubstring",
        "format",
        "lastIndex",
        "format",
        "obj",
        "opt",
        "compileMemoized",
        "i",
        "format",
        "i",
        "result",
        "format",
        "i",
        "obj",
        "opt",
        "result",
        "Inflections",
        "Inflections",
        "Inflections",
        "Inflections",
        "Inflections",
        "Inflections",
        "src",
        "src",
        "reg",
        "add",
        "add",
        "add",
        "prop",
        "flag",
        "prop",
        "add",
        "flag",
        "flags",
        "flag",
        "checkFlag",
        "reg",
        "checkFlag",
        "reg",
        "checkFlag",
        "reg",
        "checkFlag",
        "reg",
        "flags",
        "isString",
        "privatePropertyAccessor",
        "d",
        "method",
        "d",
        "_utc",
        "d",
        "method",
        "d",
        "method",
        "value",
        "safe",
        "safe",
        "value",
        "callDateGet",
        "d",
        "method",
        "value",
        "d",
        "_utc",
        "d",
        "method",
        "value",
        "fn",
        "key",
        "hasOwn",
        "memo",
        "key",
        "memo",
        "key",
        "counter",
        "INTERNAL_MEMOIZE_LIMIT",
        "memo",
        "counter",
        "counter",
        "memo",
        "key",
        "fn",
        "key",
        "val",
        "arr",
        "i",
        "val",
        "arr",
        "val",
        "key",
        "arr",
        "i",
        "key",
        "val",
        "arr",
        "buildClassChecks",
        "buildFullWidthNumber",
        "forEachProperty",
        "obj",
        "fn",
        "forEachEnumerableProperty",
        "obj",
        "fn",
        "key",
        "DONT_ENUM_PROPS",
        "i",
        "i",
        "hasOwn",
        "obj",
        "key",
        "fn",
        "obj",
        "obj",
        "key",
        "key",
        "obj",
        "defineNativeMethodsOnChainable",
        "prefix",
        "arr",
        "i",
        "dateTokens",
        "i",
        "arr",
        "prefix",
        "dateTokens",
        "i",
        "forEachProperty",
        "nativeTokens",
        "name",
        "name",
        "addDateTokens",
        "tokens",
        "addDateTokens",
        "tokens",
        "addDateTokens",
        "tokens",
        "addDateTokens",
        "tokens",
        "tokens",
        "mapNativeToChainable",
        "name",
        "tokens",
        "buildDontEnumFix",
        "buildChainableNativeMethodsFix",
        "obj",
        "obj",
        "defineStaticPolyfill",
        "sugarObject",
        "obj",
        "assertNonNull",
        "obj",
        "forEachProperty",
        "coercePrimitiveToObject",
        "obj",
        "val",
        "key",
        "keys",
        "key",
        "keys",
        "arr",
        "search",
        "fromIndex",
        "fromRight",
        "arr",
        "increment",
        "fromRight",
        "defaultFromIndex",
        "fromRight",
        "length",
        "fromIndex",
        "trunc",
        "fromIndex",
        "fromIndex",
        "fromIndex",
        "fromIndex",
        "defaultFromIndex",
        "fromIndex",
        "fromIndex",
        "length",
        "fromIndex",
        "fromRight",
        "fromIndex",
        "fromRight",
        "fromIndex",
        "length",
        "fromIndex",
        "defaultFromIndex",
        "index",
        "fromIndex",
        "fromRight",
        "index",
        "fromRight",
        "index",
        "length",
        "index",
        "arr",
        "sparseIndexOf",
        "arr",
        "search",
        "fromIndex",
        "fromRight",
        "isArrayIndex",
        "index",
        "arr",
        "index",
        "search",
        "index",
        "index",
        "increment",
        "arr",
        "search",
        "fromIndex",
        "fromRight",
        "getSparseArrayIndexes",
        "arr",
        "fromIndex",
        "fromRight",
        "indexes",
        "a",
        "b",
        "fromRight",
        "b",
        "a",
        "a",
        "b",
        "index",
        "indexes",
        "arr",
        "index",
        "search",
        "index",
        "arr",
        "fn",
        "initialValue",
        "fromRight",
        "arr",
        "isDefined",
        "initialValue",
        "assertCallable",
        "fn",
        "length",
        "defined",
        "defined",
        "result",
        "initialValue",
        "result",
        "arr",
        "fromRight",
        "length",
        "count",
        "count",
        "count",
        "length",
        "index",
        "fromRight",
        "length",
        "count",
        "count",
        "index",
        "arr",
        "result",
        "fn",
        "result",
        "arr",
        "index",
        "index",
        "arr",
        "count",
        "result",
        "defineStaticPolyfill",
        "sugarArray",
        "obj",
        "isArray",
        "obj",
        "defineInstancePolyfill",
        "sugarArray",
        "fn",
        "arguments",
        "arguments",
        "assertCallable",
        "fn",
        "index",
        "length",
        "index",
        "fn",
        "context",
        "index",
        "index",
        "index",
        "fn",
        "arguments",
        "arguments",
        "assertCallable",
        "fn",
        "index",
        "length",
        "index",
        "fn",
        "context",
        "index",
        "index",
        "index",
        "fn",
        "arguments",
        "arguments",
        "length",
        "assertCallable",
        "fn",
        "index",
        "length",
        "index",
        "result",
        "index",
        "fn",
        "context",
        "index",
        "index",
        "index",
        "result",
        "fn",
        "arguments",
        "arguments",
        "assertCallable",
        "fn",
        "index",
        "length",
        "index",
        "fn",
        "context",
        "index",
        "index",
        "result",
        "index",
        "index",
        "result",
        "search",
        "arguments",
        "arguments",
        "isString",
        "search",
        "fromIndex",
        "arrayIndexOf",
        "search",
        "fromIndex",
        "search",
        "arguments",
        "arguments",
        "isString",
        "search",
        "fromIndex",
        "arrayIndexOf",
        "search",
        "fromIndex",
        "fn",
        "arguments",
        "arguments",
        "assertCallable",
        "fn",
        "index",
        "length",
        "index",
        "fn",
        "context",
        "index",
        "index",
        "index",
        "fn",
        "arguments",
        "arguments",
        "arrayReduce",
        "fn",
        "context",
        "fn",
        "arguments",
        "arguments",
        "arrayReduce",
        "fn",
        "context",
        "TRIM_CHARS",
        "TRIM_CHARS",
        "defineInstancePolyfill",
        "sugarString",
        "TRIM_REG",
        "defineInstancePolyfill",
        "sugarFunction",
        "context",
        "arguments",
        "$i",
        "$len",
        "$i",
        "boundArgs",
        "arguments",
        "$i",
        "assertCallable",
        "bound",
        "arguments",
        "$i",
        "$len",
        "$i",
        "args",
        "arguments",
        "$i",
        "fn",
        "fn",
        "fn",
        "context",
        "boundArgs",
        "args",
        "bound",
        "bound",
        "defineStaticPolyfill",
        "sugarDate",
        "d",
        "d",
        "defineInstancePolyfill",
        "sugarDate",
        "padNumber",
        "padNumber",
        "padNumber",
        "padNumber",
        "padNumber",
        "padNumber",
        "padNumber",
        "key",
        "arguments",
        "key",
        "hasISOSupport",
        "defineStatic",
        "sugarRegExp",
        "escapeRegExp",
        "defineInstance",
        "sugarRegExp",
        "r",
        "getRegExpFlags",
        "r",
        "r",
        "flags",
        "r",
        "flags",
        "r",
        "flags",
        "r",
        "getRegExpFlags",
        "r",
        "flags",
        "r",
        "flags",
        "allCharsReg",
        "flags",
        "r",
        "getRegExpFlags",
        "r",
        "reg"
    ],
    "literals": [
        "'use strict'",
        "'Sugar'",
        "'Object Number String Array Date RegExp Function'",
        "'undefined'",
        "'undefined'",
        "'Chainable'",
        "' '",
        "'Object'",
        "'get'",
        "'set'",
        "'except'",
        "'namespaces'",
        "'except'",
        "'boolean'",
        "'instance'",
        "'static'",
        "'active'",
        "'defineStatic'",
        "'defineInstance'",
        "'defineInstanceAndStatic'",
        "'defineStaticWithArguments'",
        "'defineInstanceWithArguments'",
        "'defineStaticPolyfill'",
        "'defineInstancePolyfill'",
        "'alias'",
        "'string'",
        "'extend'",
        "'[object '",
        "']'",
        "'extend'",
        "'toString'",
        "'createNamespace'",
        "'util'",
        "'hasOwn'",
        "'getOwn'",
        "'setProperty'",
        "'classToString'",
        "'defineProperty'",
        "'forEachProperty'",
        "'mapNativeToChainable'",
        "'instance'",
        "'static'",
        "'string'",
        "'toString'",
        "'valueOf'",
        "'function'",
        "'Cannot resolve namespace for '",
        "'function'",
        "'constructor'",
        "'valueOf'",
        "'__proto__'",
        "'enhance'",
        "'Boolean Number String Date RegExp Function Array Error Set Map'",
        "'0'",
        "'a'",
        "'_sugar_'",
        "'\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF'",
        "'.'",
        "'．'",
        "','",
        "'{'",
        "'}'",
        "'undefined'",
        "'undefined'",
        "'Arguments'",
        "'Int8 Uint8 Uint8Clamped Int16 Uint16 Int32 Uint32 Float32 Float64'",
        "'Array'",
        "'[object '",
        "']'",
        "'Object'",
        "'object'",
        "'[object '",
        "']'",
        "'alias'",
        "'defineStatic'",
        "'defineInstance'",
        "'defineStaticPolyfill'",
        "'defineInstancePolyfill'",
        "'defineInstanceAndStatic'",
        "'defineInstanceWithArguments'",
        "'getOption'",
        "'setOption'",
        "'Argument required'",
        "'Function is not callable'",
        "'Array required'",
        "'Property cannot be written'",
        "'Invalid number'",
        "'..'",
        "'['",
        "']'",
        "'object'",
        "'string'",
        "'number'",
        "'boolean'",
        "'Object'",
        "'toString'",
        "'constructor'",
        "'constructor'",
        "'isPrototypeOf'",
        "'-0'",
        "''",
        "'CYC'",
        "' '",
        "'0'",
        "''",
        "'-'",
        "'+'",
        "'th'",
        "'st'",
        "'nd'",
        "'rd'",
        "'th'",
        "''",
        "''",
        "''",
        "'Invalid token '",
        "' in format string'",
        "'Unmatched '",
        "' in format string'",
        "''",
        "'['",
        "']'",
        "'g'",
        "''",
        "''",
        "'g'",
        "'i'",
        "'m'",
        "'y'",
        "'\\\\$1'",
        "'utc'",
        "'get'",
        "'UTC'",
        "''",
        "'set'",
        "'UTC'",
        "''",
        "'valueOf'",
        "'toString'",
        "'constructor'",
        "'isPrototypeOf'",
        "'hasOwnProperty'",
        "'toLocaleString'",
        "'propertyIsEnumerable'",
        "'toString'",
        "'Function'",
        "'apply,call'",
        "'RegExp'",
        "'compile,exec,test'",
        "'Number'",
        "'toExponential,toFixed,toLocaleString,toPrecision'",
        "'Object'",
        "'hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString'",
        "'Array'",
        "'concat,join,pop,push,reverse,shift,slice,sort,splice,toLocaleString,unshift'",
        "'Date'",
        "'getTime,getTimezoneOffset,setTime,toDateString,toGMTString,toLocaleDateString,toLocaleString,toLocaleTimeString,toTimeString,toUTCString'",
        "'String'",
        "'anchor,big,blink,bold,charAt,charCodeAt,concat,fixed,fontcolor,fontsize,indexOf,italics,lastIndexOf,link,localeCompare,match,replace,search,slice,small,split,strike,sub,substr,substring,sup,toLocaleLowerCase,toLocaleUpperCase,toLowerCase,toUpperCase'",
        "'FullYear,Month,Date,Hours,Minutes,Seconds,Milliseconds'",
        "','",
        "','",
        "'Date'",
        "'get'",
        "'set'",
        "'getUTC'",
        "'setUTC'",
        "'toString'",
        "'Object required'",
        "'keys'",
        "'Reduce called on empty array with no initial value'",
        "'isArray'",
        "'every'",
        "'some'",
        "'map'",
        "'filter'",
        "'indexOf'",
        "'lastIndexOf'",
        "'forEach'",
        "'reduce'",
        "'reduceRight'",
        "'^['",
        "']+|['",
        "']+$'",
        "'g'",
        "'trim'",
        "''",
        "'bind'",
        "'now'",
        "'2000-01-01T00:00:00.000Z'",
        "'toISOString'",
        "'-'",
        "'-'",
        "'T'",
        "':'",
        "':'",
        "'.'",
        "'Z'",
        "'toJSON'",
        "'escape'",
        "'getFlags'",
        "'setFlags'",
        "'addFlags'",
        "'removeFlags'",
        "''"
    ],
    "variables": [
        "Sugar",
        "SUGAR_GLOBAL",
        "NATIVE_NAMES",
        "STATIC",
        "INSTANCE",
        "PROPERTY_DESCRIPTOR_SUPPORT",
        "globalContext",
        "hasExports",
        "allowObjectPrototype",
        "namespacesByName",
        "namespacesByClassString",
        "defineProperty",
        "DefaultChainable",
        "isObject",
        "sugarNamespace",
        "extend",
        "nativeClass",
        "nativeProto",
        "staticMethods",
        "instanceMethods",
        "methodsByName",
        "arr",
        "i",
        "el",
        "i",
        "opts",
        "opts",
        "opts",
        "method",
        "instanceMethod",
        "staticMethod",
        "method",
        "methods",
        "last",
        "startCollect",
        "args",
        "collectedArgs",
        "len",
        "i",
        "fn",
        "wrapped",
        "existing",
        "collision",
        "dcp",
        "proto",
        "fn",
        "raw",
        "sugarNamespace",
        "fn",
        "sugarNamespace",
        "nativeProto",
        "fn",
        "ownPropertyNames",
        "internalToString",
        "internalHasOwnProperty",
        "forEachProperty",
        "ENHANCEMENTS_FLAG",
        "NATIVE_TYPES",
        "NO_KEYS_IN_STRING_OBJECTS",
        "PRIVATE_PROP_PREFIX",
        "PROPERTY_RANGE_REG",
        "TRIM_CHARS",
        "STRING_FORMAT_REG",
        "HALF_WIDTH_ZERO",
        "FULL_WIDTH_ZERO",
        "HALF_WIDTH_PERIOD",
        "FULL_WIDTH_PERIOD",
        "HALF_WIDTH_COMMA",
        "OPEN_BRACE",
        "CLOSE_BRACE",
        "sugarObject",
        "sugarArray",
        "sugarDate",
        "sugarString",
        "sugarNumber",
        "sugarFunction",
        "sugarRegExp",
        "isSerializable",
        "isBoolean",
        "isNumber",
        "isString",
        "isDate",
        "isRegExp",
        "isFunction",
        "isArray",
        "isSet",
        "isMap",
        "isError",
        "knownTypes",
        "names",
        "types",
        "ctorStr",
        "t",
        "alias",
        "defineStatic",
        "defineInstance",
        "defineStaticPolyfill",
        "defineInstancePolyfill",
        "defineInstanceAndStatic",
        "defineInstanceWithArguments",
        "methods",
        "staticFn",
        "args",
        "arguments",
        "args",
        "arguments",
        "obj",
        "proto",
        "privateKey",
        "className",
        "matchers",
        "matched",
        "ms",
        "ns",
        "bs",
        "ps",
        "cbi",
        "isLast",
        "isPush",
        "isIndex",
        "nextIsIndex",
        "exists",
        "i",
        "blen",
        "j",
        "plen",
        "match",
        "start",
        "end",
        "leading",
        "trailing",
        "arr",
        "i",
        "start",
        "hasToString",
        "hasConstructor",
        "objectProto",
        "val",
        "i",
        "i",
        "chr",
        "aClass",
        "bClass",
        "aType",
        "bType",
        "propsEqual",
        "count",
        "className",
        "value",
        "result",
        "cyc",
        "i",
        "arr",
        "key",
        "i",
        "indexes",
        "index",
        "i",
        "len",
        "indexes",
        "i",
        "aLoop",
        "bLoop",
        "result",
        "length",
        "i",
        "len",
        "result",
        "i",
        "len",
        "el",
        "result",
        "i",
        "len",
        "i",
        "len",
        "trunc",
        "multiplier",
        "fullWidthNumberReg",
        "fullWidthNumberMap",
        "fullWidthNumbers",
        "fwp",
        "FULL_WIDTH_PERIOD",
        "hwp",
        "HALF_WIDTH_PERIOD",
        "hwc",
        "HALF_WIDTH_COMMA",
        "fwn",
        "i",
        "digit",
        "sanitized",
        "isDecimal",
        "replacement",
        "abs",
        "pow",
        "min",
        "max",
        "ceil",
        "floor",
        "round",
        "chr",
        "result",
        "reg",
        "STRING_FORMAT_REG",
        "compileMemoized",
        "get",
        "token",
        "literal",
        "fn",
        "bKey",
        "pLit",
        "pKey",
        "sub",
        "format",
        "lastIndex",
        "match",
        "format",
        "result",
        "i",
        "Inflections",
        "flags",
        "_utc",
        "INTERNAL_MEMOIZE_LIMIT",
        "memo",
        "counter",
        "arr",
        "i",
        "arr",
        "i",
        "DONT_ENUM_PROPS",
        "forEachEnumerableProperty",
        "forEachProperty",
        "i",
        "key",
        "nativeTokens",
        "dateTokens",
        "i",
        "tokens",
        "keys",
        "length",
        "defaultFromIndex",
        "index",
        "increment",
        "indexes",
        "index",
        "length",
        "count",
        "defined",
        "result",
        "index",
        "argLen",
        "context",
        "length",
        "index",
        "argLen",
        "context",
        "length",
        "index",
        "argLen",
        "context",
        "length",
        "index",
        "result",
        "argLen",
        "context",
        "length",
        "index",
        "result",
        "argLen",
        "fromIndex",
        "argLen",
        "fromIndex",
        "argLen",
        "context",
        "length",
        "index",
        "argLen",
        "context",
        "argLen",
        "context",
        "TRIM_REG",
        "boundArgs",
        "$i",
        "$len",
        "fn",
        "bound",
        "args",
        "$i",
        "$len",
        "d",
        "argLen",
        "reg"
    ],
    "comments": [
        "The global to export.",
        "The name of Sugar in the global namespace.",
        "Natives available on initialization. Letting Object go first to ensure its",
        "global is set by the time the rest are checking for chainable Object methods.",
        "Static method flag",
        "Instance method flag",
        "IE8 has a broken defineProperty but no defineProperties so this saves a try/catch.",
        "The global context. Rhino uses a different \"global\" keyword so",
        "do an extra check to be sure that it's actually the global context.",
        "Is the environment node?",
        "Whether object instance methods can be mapped to the prototype.",
        "A map from Array to SugarArray.",
        "A map from [object Object] to namespace.",
        "Defining properties.",
        "A default chainable class for unknown types.",
        "Global methods",
        "Reuse already defined Sugar global object.",
        "Although only the only enumerable properties on the global",
        "object are Sugar namespaces, environments that can't set",
        "non-enumerable properties will step through the utility methods",
        "as well here, so use this check to only allow true namespaces.",
        "Contexts such as QML have a read-only global context.",
        "Is the current namespace Object?",
        "A Sugar namespace is also a chainable class: Sugar.Array, etc.",
        "Disallowing methods by flag currently only applies if methods already",
        "exist to avoid enhancing native methods, as aliases should still be",
        "extended (i.e. Array#all should still be extended even if Array#every",
        "is being disallowed by a flag).",
        "Store \"objectPrototype\" flag for future reference.",
        "If we have method names passed in an array,",
        "then we need to flip the key and value here",
        "and find the method in the Sugar namespace.",
        "Accessing the extend target each time instead of holding a reference as",
        "it may have been overwritten (for example Date by Sinon). Also need to",
        "access through the global to allow extension of user-defined namespaces.",
        "If there are no method names passed, then",
        "all methods in the namespace will be extended",
        "to the native. This includes all future defined",
        "methods, so add a flag here to check later.",
        "Map instance polyfills to chainable as well.",
        "Each namespace can extend only itself through its .extend method.",
        "Cache the class to namespace relationship for later use.",
        "Export",
        "Defining Methods",
        "A method may define its own custom implementation, so",
        "make sure that's not the case before creating one.",
        "If the namespace has been activated (.extend has been called),",
        "then map this method as well.",
        "Functions accepting enumerated arguments will always have \"args\" as the",
        "last argument, so subtract one from the function length to get the point",
        "at which to start collecting arguments. If this is an instance method on",
        "a prototype, then \"this\" will be pushed into the arguments array so start",
        "collecting 1 argument earlier.",
        "Optimized: no leaking arguments",
        "Wrapped instance methods will always be passed the instance",
        "as the first argument, but requiring the argument to be defined",
        "may cause confusion here, so return the same wrapped function regardless.",
        "Method helpers",
        "Method exists, so bail.",
        "Chainables",
        "Allow modules to define their own constructors.",
        "If the method was previously defined on the default chainable, then a",
        "collision exists, so set the method to a disambiguation function that will",
        "lazily evaluate the object and find it's associated chainable. An extra",
        "check is required to avoid false positives from Object inherited methods.",
        "The disambiguation function is only required once.",
        "The target chainable always receives the wrapped method. Additionally,",
        "if the target chainable is Sugar.Object, then map the wrapped method",
        "to all other namespaces as well if they do not define their own method",
        "of the same name. This way, a Sugar.Number will have methods like",
        "isEqual that can be called on any object without having to traverse up",
        "the prototype chain and perform disambiguation, which costs cycles.",
        "Note that the \"if\" block below actually does nothing on init as Object",
        "goes first and no other namespaces exist yet. However it needs to be",
        "here as Object instance methods defined later also need to be mapped",
        "back onto existing namespaces.",
        "Find the Sugar namespace for this unknown.",
        "If no sugarNamespace can be resolved, then default",
        "back to Sugar.Object so that undefined and other",
        "non-supported types can still have basic object",
        "methods called on them, such as type checks.",
        "If the method about to be called on this chainable is",
        "itself a disambiguation method, then throw an error to",
        "prevent infinite recursion.",
        "Sugar chainables have their own constructors as well as \"valueOf\"",
        "methods, so exclude them here. The __proto__ argument should be trapped",
        "by the function check below, however simply accessing this property on",
        "Object.prototype causes QML to segfault, so pre-emptively excluding it.",
        "Bail on anything not a function.",
        "Function.prototype has properties that",
        "will throw errors when accessed.",
        "Util",
        "Internal references",
        "Defining this as a variable here as the ES5 module",
        "overwrites it to patch DONTENUM.",
        "PERF: Attempts to speed this method up get very Heisenbergy. Quickly",
        "returning based on typeof works for primitives, but slows down object",
        "types. Even === checks on null and undefined (no typeof) will end up",
        "basically breaking even. This seems to be as fast as it can go.",
        "Flag allowing native methods to be enhanced",
        "For type checking, etc. Excludes object as this is more nuanced.",
        "Do strings have no keys?",
        "Prefix for private properties",
        "Matches 1..2 style ranges in properties",
        "WhiteSpace/LineTerminator as defined in ES5.1 plus Unicode characters in the Space, Separator category.",
        "Regex for matching a formatted string",
        "Common chars",
        "Namespace aliases",
        "Class checks",
        "Wanted to enhance performance here by using simply \"typeof\"",
        "but Firefox has two major issues that make this impossible,",
        "one fixed, the other not, so perform a full class check here.",
        "",
        "1. Regexes can be typeof \"function\" in FF < 3",
        "https://bugzilla.mozilla.org/show_bug.cgi?id=61911 (fixed)",
        "",
        "2. HTMLEmbedElement and HTMLObjectElement are be typeof \"function\"",
        "https://bugzilla.mozilla.org/show_bug.cgi?id=268945 (won't fix)",
        "Add core types as known so that they can be checked by value below,",
        "notably excluding Functions and adding Arguments and Error.",
        "perf: Returning up front on instanceof appears to be slower.",
        "Only known objects can be serialized. This notably excludes functions,",
        "host objects, Symbols (which are matched by reference), and instances",
        "of classes. The latter can arguably be matched by value, but",
        "distinguishing between these and host objects -- which should never be",
        "compared by value -- is very tricky so not dealing with it here.",
        "Wrapping the core's \"define\" methods to",
        "save a few bytes in the minified script.",
        "Method define aliases",
        "This song and dance is to fix methods to a different length",
        "from what they actually accept in order to stay in line with",
        "spec. Additionally passing argument length, as some methods",
        "throw assertion errors based on this (undefined check is not",
        "enough). Fortunately for now spec is such that passing 3",
        "actual arguments covers all requirements. Note that passing",
        "the argument length also forces the compiler to not rewrite",
        "length of the compiled function.",
        "For methods defined directly on the prototype like Range",
        "Argument helpers",
        "If strict mode is active then primitives will throw an",
        "error when attempting to write properties. We can't be",
        "sure if strict mode is available, so pre-emptively",
        "throw an error here to ensure consistent behavior.",
        "Coerces an object to a positive integer.",
        "Does not allow Infinity.",
        "General helpers",
        "Fuzzy matching helpers",
        "Default is standard isEqual",
        "Return true up front if match by reference",
        "Object helpers",
        "Allow array and array-like accessors",
        "Is this the last key?",
        "Index of the closing ]",
        "Is the key an array index?",
        "Is this array push syntax \"[]\"?",
        "If the bracket split was successful and this is the last element",
        "in the dot split, then we know the next key will be an array index.",
        "Set the index to the end of the array",
        "Remove the closing ]",
        "If the array index is less than 0, then",
        "add its length to allow negative indexes.",
        "Bracket keys may look like users[5] or just [5], so the leading",
        "characters are optional. We can enter the namespace if this is the",
        "2nd part, if there is only 1 part, or if there is an explicit key.",
        "Non-existent namespaces are only filled if they are intermediate",
        "(not at the end) or explicitly filling the last.",
        "For our purposes, last only needs to be an array.",
        "Get object property with support for 0..1 style range notation.",
        "A range of 0..1 is inclusive, so we need to add 1 to the end. If this",
        "pushes the index from -1 to 0, then set it to the full length of the",
        "array, otherwise it will return nothing.",
        "If there are trailing properties, then they need to be mapped for each",
        "element in the array.",
        "Need to chomp the period if one is trailing after the range. We",
        "can't do this at the regex level because it will be required if",
        "we're setting the value as it needs to be concatentated together",
        "with the array index to be set.",
        "An object created with Object.create(null) has no methods in the",
        "prototype chain, so check if any are missing. The additional hasToString",
        "check is for false positives on some host objects in old IE which have",
        "toString but no constructor. If the object has an inherited constructor,",
        "then check if it is Object (the \"isPrototypeOf\" tapdance here is a more",
        "robust way of ensuring this if the global has been hijacked). Note that",
        "accessing the constructor directly (without \"in\" or \"hasOwnProperty\")",
        "will throw a permissions error in IE8 on cross-domain windows.",
        "Plain objects are generally defined as having enumerated properties",
        "all their own, however in early IE environments without defineProperty,",
        "there may also be enumerated methods in the prototype chain, so check",
        "for both of these cases.",
        "Make primtives types like strings into objects.",
        "Force strings to have their indexes set in",
        "environments that don't do this automatically.",
        "Equality helpers",
        "Return quickly up front when matched by reference,",
        "but be careful about 0 !== -0.",
        "perf: Quickly returning up front for arrays.",
        "Stringifying the value handles NaN, wrapped primitives, dates, and errors in one go.",
        "Serializes an object in a way that will provide a token unique",
        "to the type, class, and value of an object. Host objects, class",
        "instances etc, are not serializable, and are held in an array",
        "of references that will return the index as a unique identifier",
        "for the object. This array is passed from outside so that the",
        "calling function can decide when to dispose of this array.",
        "Return quickly for primitives to save cycles",
        "Allowing a step into the structure before triggering this check to save",
        "cycles on standard JSON structures and also to try as hard as possible to",
        "catch basic properties that may have been modified.",
        "Sorted keys is required for serialization, where object order",
        "does not matter but stringified order does.",
        "This method for checking for cyclic structures was egregiously stolen from",
        "the ingenious method by @kitcambridge from the Underscore script:",
        "https://github.com/documentcloud/underscore/issues/240",
        "Array helpers",
        "It's unclear whether or not sparse arrays qualify as \"simple enumerables\".",
        "If they are not, however, the wrapping function will be deoptimized, so",
        "isolate here (also to share between es5 and array modules).",
        "perf: Not using fixed array len here as it may be sparse.",
        "Number helpers",
        "This is only true of NaN",
        "Fullwidth number helpers",
        "Mapping this to itself to capture it easily",
        "in stringToNumber to detect decimals later.",
        "Takes into account full-width characters, commas, and decimals.",
        "Math aliases",
        "String helpers",
        "Inflection helper",
        "RegExp helpers",
        "Date helpers",
        "\"Safe\" denotes not setting the date if the value is the same as what is",
        "currently set. In theory this should be a noop, however it will cause",
        "timezone shifts when in the middle of a DST fallback. This is unavoidable",
        "as the notation itself is ambiguous (i.e. there are two \"1:00ams\" on",
        "November 1st, 2015 in northern hemisphere timezones that follow DST),",
        "however when advancing or rewinding dates this can throw off calculations",
        "so avoiding this unintentional shifting on an opt-in basis.",
        "Memoization helpers",
        "Note that attemps to consolidate this with Function#memoize",
        "ended up clunky as that is also serializing arguments. Separating",
        "these implementations turned out to be simpler.",
        "ES6 helpers",
        "Non-enumerable properties on Object.prototype. In early JScript implementations",
        "(< IE9) these will shadow object properties and break for..in loops.",
        "Polyfilled methods will automatically be added to the chainable prototype.",
        "However, Object.getOwnPropertyNames cannot be shimmed for non-enumerable",
        "properties, so if it does not exist, then the only way to access native",
        "methods previous to ES5 is to provide them as a list of tokens here.",
        "Force compiler to respect argument length.",
        "Force compiler to respect argument length.",
        "Force compiler to respect argument length.",
        "Force compiler to respect argument length.",
        "Force compiler to respect argument length.",
        "Force compiler to respect argument length.",
        "Force compiler to respect argument length.",
        "Force compiler to respect argument length.",
        "Force compiler to respect argument length.",
        "Optimized: no leaking arguments",
        "Optimized: no leaking arguments",
        "Force compiler to respect argument length."
    ],
    "docstrings": [
        "*  Sugar v2.0.0\n *\n *  Freely distributable and licensed under the MIT-style license.\n *  Copyright (c) Andrew Plummer\n *  https://sugarjs.com/\n *\n * ----------------------------",
        "*\n   * @module Core\n   * @description Core functionality including the ability to define methods and\n   *              extend onto natives.\n   *\n   **",
        "*\n   * @method createNamespace(<name>)\n   * @returns Namespace\n   * @global\n   * @short Creates a new Sugar namespace.\n   * @extra This method is for plugin developers who want to define methods to be\n   *        used with natives that Sugar does not handle by default. The new\n   *        namespace will appear on the `Sugar` global with all the methods of\n   *        normal namespaces, including the ability to define new methods. When\n   *        extended, any defined methods will be mapped to `name` in the global\n   *        context.\n   *\n   * @example\n   *\n   *   Sugar.createNamespace('Boolean');\n   *\n   **",
        "*\n     * @method extend([options])\n     * @returns Sugar\n     * @global\n     * @namespace\n     * @short Extends Sugar defined methods onto natives.\n     * @extra This method can be called on individual namespaces like\n     *        `Sugar.Array` or on the `Sugar` global itself, in which case\n     *        [options] will be forwarded to each `extend` call. For more,\n     *        see `extending`.\n     *\n     * @options\n     *\n     *   methods           An array of method names to explicitly extend.\n     *\n     *   except            An array of method names or global namespaces (`Array`,\n     *                     `String`) to explicitly exclude. Namespaces should be the\n     *                     actual global objects, not strings.\n     *\n     *   namespaces        An array of global namespaces (`Array`, `String`) to\n     *                     explicitly extend. Namespaces should be the actual\n     *                     global objects, not strings.\n     *\n     *   enhance           A shortcut to disallow all \"enhance\" flags at once\n     *                     (flags listed below). For more, see `enhanced methods`.\n     *                     Default is `true`.\n     *\n     *   enhanceString     A boolean allowing String enhancements. Default is `true`.\n     *\n     *   enhanceArray      A boolean allowing Array enhancements. Default is `true`.\n     *\n     *   objectPrototype   A boolean allowing Sugar to extend Object.prototype\n     *                     with instance methods. This option is off by default\n     *                     and should generally not be used except with caution.\n     *                     For more, see `object methods`.\n     *\n     * @example\n     *\n     *   Sugar.Array.extend();\n     *   Sugar.extend();\n     *\n     **",
        "*\n     * @method defineStatic(...)\n     * @returns Namespace\n     * @namespace\n     * @short Defines static methods on the namespace that can later be extended\n     *        onto the native globals.\n     * @extra Accepts either a single object mapping names to functions, or name\n     *        and function as two arguments. If `extend` was previously called\n     *        with no arguments, the method will be immediately mapped to its\n     *        native when defined.\n     *\n     * @example\n     *\n     *   Sugar.Number.defineStatic({\n     *     isOdd: function (num) {\n     *       return num % 2 === 1;\n     *     }\n     *   });\n     *\n     **",
        "*\n     * @method defineInstance(...)\n     * @returns Namespace\n     * @namespace\n     * @short Defines methods on the namespace that can later be extended as\n     *        instance methods onto the native prototype.\n     * @extra Accepts either a single object mapping names to functions, or name\n     *        and function as two arguments. All functions should accept the\n     *        native for which they are mapped as their first argument, and should\n     *        never refer to `this`. If `extend` was previously called with no\n     *        arguments, the method will be immediately mapped to its native when\n     *        defined.\n     *\n     *        Methods cannot accept more than 4 arguments in addition to the\n     *        native (5 arguments total). Any additional arguments will not be\n     *        mapped. If the method needs to accept unlimited arguments, use\n     *        `defineInstanceWithArguments`. Otherwise if more options are\n     *        required, use an options object instead.\n     *\n     * @example\n     *\n     *   Sugar.Number.defineInstance({\n     *     square: function (num) {\n     *       return num * num;\n     *     }\n     *   });\n     *\n     **",
        "*\n     * @method defineInstanceAndStatic(...)\n     * @returns Namespace\n     * @namespace\n     * @short A shortcut to define both static and instance methods on the namespace.\n     * @extra This method is intended for use with `Object` instance methods. Sugar\n     *        will not map any methods to `Object.prototype` by default, so defining\n     *        instance methods as static helps facilitate their proper use.\n     *\n     * @example\n     *\n     *   Sugar.Object.defineInstanceAndStatic({\n     *     isAwesome: function (obj) {\n     *       // check if obj is awesome!\n     *     }\n     *   });\n     *\n     **",
        "*\n     * @method defineStaticWithArguments(...)\n     * @returns Namespace\n     * @namespace\n     * @short Defines static methods that collect arguments.\n     * @extra This method is identical to `defineStatic`, except that when defined\n     *        methods are called, they will collect any arguments past `n - 1`,\n     *        where `n` is the number of arguments that the method accepts.\n     *        Collected arguments will be passed to the method in an array\n     *        as the last argument defined on the function.\n     *\n     * @example\n     *\n     *   Sugar.Number.defineStaticWithArguments({\n     *     addAll: function (num, args) {\n     *       for (var i = 0; i < args.length; i++) {\n     *         num += args[i];\n     *       }\n     *       return num;\n     *     }\n     *   });\n     *\n     **",
        "*\n     * @method defineInstanceWithArguments(...)\n     * @returns Namespace\n     * @namespace\n     * @short Defines instance methods that collect arguments.\n     * @extra This method is identical to `defineInstance`, except that when\n     *        defined methods are called, they will collect any arguments past\n     *        `n - 1`, where `n` is the number of arguments that the method\n     *        accepts. Collected arguments will be passed to the method as the\n     *        last argument defined on the function.\n     *\n     * @example\n     *\n     *   Sugar.Number.defineInstanceWithArguments({\n     *     addAll: function (num, args) {\n     *       for (var i = 0; i < args.length; i++) {\n     *         num += args[i];\n     *       }\n     *       return num;\n     *     }\n     *   });\n     *\n     **",
        "*\n     * @method defineStaticPolyfill(...)\n     * @returns Namespace\n     * @namespace\n     * @short Defines static methods that are mapped onto the native if they do\n     *        not already exist.\n     * @extra Intended only for use creating polyfills that follow the ECMAScript\n     *        spec. Accepts either a single object mapping names to functions, or\n     *        name and function as two arguments.\n     *\n     * @example\n     *\n     *   Sugar.Object.defineStaticPolyfill({\n     *     keys: function (obj) {\n     *       // get keys!\n     *     }\n     *   });\n     *\n     **",
        "*\n     * @method defineInstancePolyfill(...)\n     * @returns Namespace\n     * @namespace\n     * @short Defines instance methods that are mapped onto the native prototype\n     *        if they do not already exist.\n     * @extra Intended only for use creating polyfills that follow the ECMAScript\n     *        spec. Accepts either a single object mapping names to functions, or\n     *        name and function as two arguments. This method differs from\n     *        `defineInstance` as there is no static signature (as the method\n     *        is mapped as-is to the native), so it should refer to its `this`\n     *        object.\n     *\n     * @example\n     *\n     *   Sugar.Array.defineInstancePolyfill({\n     *     indexOf: function (arr, el) {\n     *       // index finding code here!\n     *     }\n     *   });\n     *\n     **",
        "*\n     * @method alias(<toName>, <fromName>)\n     * @returns Namespace\n     * @namespace\n     * @short Aliases one Sugar method to another.\n     *\n     * @example\n     *\n     *   Sugar.Array.alias('all', 'every');\n     *\n     **",
        "*\n   * @module Common\n   * @description Internal utility and common methods.\n   **",
        "*\n   * @module ES5\n   * @description Functions and polyfill methods that fix ES5 functionality. This\n   *              module is excluded from default builds, and can be included if\n   *              you need legacy browser support (IE8 and below).\n   *\n   **",
        "*\n   * @fix\n   * @short Fixes DontEnum bug for iteration methods in < IE9.\n   **",
        "*\n   * @fix\n   * @short Adds native methods to chainables in < IE9.\n   **",
        "* @namespace Object **",
        "* @namespace Array **",
        "*\n     *\n     * @method isArray(<obj>)\n     * @returns Boolean\n     * @polyfill ES5\n     * @static\n     * @short Returns true if <obj> is an Array.\n     *\n     * @example\n     *\n     *   Array.isArray(3)        -> false\n     *   Array.isArray(true)     -> false\n     *   Array.isArray('wasabi') -> false\n     *   Array.isArray([1,2,3])  -> true\n     *\n     **",
        "*\n     * @method indexOf(<search>, [fromIndex] = 0)\n     * @returns Number\n     * @polyfill ES5\n     * @short Searches the array and returns the first index where <search> occurs,\n     *        or `-1` if the element is not found.\n     * @extra [fromIndex] is the index from which to begin the search. This\n     *        method performs a simple strict equality comparison on <search>.\n     *        Sugar does not enhance this method to support `enhanced matching`.\n     *        For such functionality, use the `findIndex` method instead.\n     *\n     * @example\n     *\n     *   [1,2,3].indexOf(3) -> 1\n     *   [1,2,3].indexOf(7) -> -1\n     *\n     **",
        "*\n     * @method lastIndexOf(<search>, [fromIndex] = array.length - 1)\n     * @returns Number\n     * @polyfill ES5\n     * @short Searches the array from the end and returns the first index where\n     *        <search> occurs, or `-1` if the element is not found.\n     * @extra [fromIndex] is the index from which to begin the search. This method\n     *        performs a simple strict equality comparison on <search>.\n     *        Sugar does not enhance this method to support `enhanced matching`.\n     *\n     * @example\n     *\n     *   [1,2,1].lastIndexOf(1) -> 2\n     *   [1,2,1].lastIndexOf(7) -> -1\n     *\n     **",
        "*\n     * @method forEach([fn], [context])\n     * @polyfill ES5\n     * @short Iterates over the array, calling [fn] on each loop.\n     * @extra [context] becomes the `this` object.\n     *\n     * @callback fn\n     *\n     *   el   The element of the current iteration.\n     *   i    The index of the current iteration.\n     *   arr  A reference to the array.\n     *\n     * @example\n     *\n     *   ['a','b','c'].forEach(function(a) {\n     *     // Called 3 times: 'a','b','c'\n     *   });\n     *\n     **",
        "*\n     * @method reduce(<fn>, [init])\n     * @returns Mixed\n     * @polyfill ES5\n     * @short Reduces the array to a single result.\n     * @extra This operation is sometimes called \"accumulation\", as it takes the\n     *        result of the last iteration of <fn> and passes it as the first\n     *        argument to the next iteration, \"accumulating\" that value as it goes.\n     *        The return value of this method will be the return value of the final\n     *        iteration of <fn>. If [init] is passed, it will be the initial\n     *        \"accumulator\" (the first argument). If [init] is not passed, then it\n     *        will take the first element in the array, and <fn> will not be called\n     *        for that element.\n     *\n     * @callback fn\n     *\n     *   acc  The \"accumulator\". Either [init], the result of the last iteration\n     *        of <fn>, or the first element of the array.\n     *   el   The current element for this iteration.\n     *   idx  The current index for this iteration.\n     *   arr  A reference to the array.\n     *\n     * @example\n     *\n     *   [1,2,3].reduce(function(a, b) {\n     *     return a - b; // 1 - 2 - 3\n     *   });\n     *\n     *   [1,2,3].reduce(function(a, b) {\n     *     return a - b; // 100 - 1 - 2 - 3\n     *   }, 100);\n     *\n     **",
        "*\n     * @method reduceRight([fn], [init])\n     * @returns Mixed\n     * @polyfill ES5\n     * @short Similar to `Array#reduce`, but operates on the elements in reverse.\n     *\n     * @callback fn\n     *\n     *   acc  The \"accumulator\", either [init], the result of the last iteration\n     *        of <fn>, or the last element of the array.\n     *   el   The current element for this iteration.\n     *   idx  The current index for this iteration.\n     *   arr  A reference to the array.\n     *\n     * @example\n     *\n     *   [1,2,3].reduceRight(function(a, b) {\n     *     return a - b; // 3 - 2 - 1\n     *   });\n     *\n     *   [1,2,3].reduceRight(function(a, b) {\n     *     return a - b; // 100 - 3 - 2 - 1\n     *   }, 100);\n     *\n     *\n     **",
        "* @namespace String **",
        "*\n     * @method trim()\n     * @returns String\n     * @polyfill ES5\n     * @short Removes leading and trailing whitespace from the string.\n     * @extra Whitespace is defined as line breaks, tabs, and any character in the\n     *        \"Space, Separator\" Unicode category, conforming to the the ES5 spec.\n     *\n     * @example\n     *\n     *   '   wasabi   '.trim()      -> 'wasabi'\n     *   '   wasabi   '.trimLeft()  -> 'wasabi   '\n     *   '   wasabi   '.trimRight() -> '   wasabi'\n     *\n     **",
        "* @namespace Function **",
        "*\n     * @method bind(<context>, [arg1], ...)\n     * @returns Function\n     * @polyfill ES5\n     * @short Binds <context> as the `this` object for the function when it is\n     *        called. Also allows currying an unlimited number of parameters.\n     * @extra \"currying\" means setting parameters ([arg1], [arg2], etc.) ahead of\n     *        time so that they are passed when the function is called later. If\n     *        you pass additional parameters when the function is actually called,\n     *        they will be added to the end of the curried parameters.\n     *\n     * @example\n     *\n     *   logThis.bind('woof')()   -> logs 'woof' as its this object\n     *   addArgs.bind(1, 2, 3)()  -> returns 5 with 1 as the this object\n     *   addArgs.bind(1)(2, 3, 4) -> returns 9\n     *\n     **",
        "* @namespace Date **",
        "*\n     * @method now()\n     * @returns String\n     * @polyfill ES5\n     * @static\n     * @short Returns the current time as a Unix timestamp.\n     * @extra The number of milliseconds since January 1st, 1970 00:00:00 (UTC).\n     *\n     * @example\n     *\n     *   Date.now() -> ex. 1311938296231\n     *\n     **",
        "*\n     * @method toISOString()\n     * @returns String\n     * @polyfill ES5\n     * @short Formats the string to ISO8601 format.\n     * @extra This will always format as UTC time.\n     *\n     * @example\n     *\n     *   Date.create().toISOString() -> ex. 2011-07-05 12:24:55.528Z\n     *\n     **",
        "*\n     * @method toJSON([key])\n     * @returns String\n     * @polyfill ES5\n     * @short Returns a JSON representation of the date.\n     * @extra This is effectively an alias for `toISOString`. Will always return\n     *        the date in UTC time. [key] is ignored.\n     *\n     * @example\n     *\n     *   Date.create().toJSON() -> ex. 2011-07-05 12:24:55.528Z\n     *\n     **",
        "*\n   * @module RegExp\n   * @description RegExp escaping and flag manipulation.\n   *\n   * Note here that methods on the RegExp class like .exec and .test will fail in\n   * the current version of SpiderMonkey being used by CouchDB when using\n   * shorthand regex notation like /foo/. This is the reason for the intermixed\n   * use of shorthand and compiled regexes here. If you're using JS in CouchDB, it\n   * is safer to ALWAYS compile your regexes from a string.\n   *\n   **",
        "*\n     * @method escape(<str> = '')\n     * @returns String\n     * @static\n     * @short Escapes all RegExp tokens in a string.\n     *\n     * @example\n     *\n     *   RegExp.escape('really?')      -> 'really\\?'\n     *   RegExp.escape('yes.')         -> 'yes\\.'\n     *   RegExp.escape('(not really)') -> '\\(not really\\)'\n     *\n     **",
        "*\n     * @method getFlags()\n     * @returns String\n     * @short Returns the flags of the regex as a string.\n     *\n     * @example\n     *\n     *   /texty/gim.getFlags() -> 'gim'\n     *\n     **",
        "*\n     * @method setFlags(<flags>)\n     * @returns RegExp\n     * @short Creates a copy of the regex with <flags> set.\n     *\n     * @example\n     *\n     *   /texty/.setFlags('gim') -> now has global, ignoreCase, and multiline set\n     *\n     **",
        "*\n     * @method addFlags(<flags>)\n     * @returns RegExp\n     * @short Creates a copy of the regex with <flags> added.\n     *\n     * @example\n     *\n     *   /texty/.addFlags('g')  -> /texty/g\n     *   /texty/.addFlags('im') -> /texty/im\n     *\n     **",
        "*\n     * @method removeFlags(<flags>)\n     * @returns RegExp\n     * @short Creates a copy of the regex with <flags> removed.\n     *\n     * @example\n     *\n     *   /texty/gim.removeFlags('g')  -> /texty/im\n     *   /texty/gim.removeFlags('im') -> /texty/g\n     *\n     **"
    ],
    "functions": [
        "setupGlobal",
        "createNamespace",
        "objectRestricted",
        "arrayOptionExists",
        "arrayOptionExcludes",
        "disallowedByFlags",
        "namespaceIsExcepted",
        "methodIsExcepted",
        "canExtend",
        "defineWithOptionCollect",
        "setGlobalProperties",
        "toString",
        "defineMethods",
        "collectDefineOptions",
        "wrapInstanceMethod",
        "wrapMethodWithArguments",
        "wrapInstanceMethodFixed",
        "extendNative",
        "setMethod",
        "getNewChainableClass",
        "defineChainableMethod",
        "mapObjectChainablesToNamespace",
        "mapObjectChainableToAllNamespaces",
        "setObjectChainableOnNamespace",
        "wrapWithChainableResult",
        "disambiguateMethod",
        "mapNativeToChainable",
        "nativeMethodProhibited",
        "definePropertyShim",
        "setProperty",
        "classToString",
        "hasOwn",
        "getOwn",
        "buildClassChecks",
        "addCoreTypes",
        "addArrayTypes",
        "addKnownType",
        "isKnownType",
        "buildClassCheck",
        "getConstructorClassCheck",
        "getToStringClassCheck",
        "buildPrimitiveClassCheck",
        "isClass",
        "wrapNamespace",
        "defineInstanceSimilar",
        "defineInstanceAndStaticSimilar",
        "collectSimilarMethods",
        "fixArgumentLength",
        "defineAccessor",
        "defineOptionsAccessor",
        "getOption",
        "setOption",
        "defineOnPrototype",
        "assertArgument",
        "assertCallable",
        "assertArray",
        "assertWritable",
        "coercePositiveInteger",
        "isDefined",
        "isUndefined",
        "privatePropertyAccessor",
        "setChainableConstructor",
        "getMatcher",
        "fuzzyMatcher",
        "defaultMatcher",
        "regexMatcher",
        "dateMatcher",
        "functionMatcher",
        "getKeys",
        "deepHasProperty",
        "deepGetProperty",
        "deepSetProperty",
        "handleDeepProperty",
        "handleArrayIndexRange",
        "getOwnKey",
        "hasProperty",
        "isObjectType",
        "isPrimitive",
        "isPlainObject",
        "hasValidPlainObjectPrototype",
        "hasOwnEnumeratedProperties",
        "simpleRepeat",
        "simpleClone",
        "simpleMerge",
        "coercePrimitiveToObject",
        "forceStringCoercion",
        "isEqual",
        "objectIsEqual",
        "serializeInternal",
        "serializeDeep",
        "iterateWithCyclicCheck",
        "next",
        "iterateWithSortedKeys",
        "isArrayIndex",
        "iterateOverSparseArray",
        "getSparseArrayIndexes",
        "getEntriesForIndexes",
        "getNormalizedIndex",
        "entryAtIndex",
        "mapWithShortcuts",
        "spaceSplit",
        "commaSplit",
        "periodSplit",
        "forEach",
        "indexOf",
        "isRealNaN",
        "withPrecision",
        "padNumber",
        "getOrdinalSuffix",
        "buildFullWidthNumber",
        "stringToNumber",
        "trim",
        "repeatString",
        "simpleCapitalize",
        "createFormatMatcher",
        "getToken",
        "getSubstring",
        "getLiteral",
        "assertPassesPrecheck",
        "assertNoUnmatched",
        "compile",
        "getAcronym",
        "getHumanWord",
        "runHumanRules",
        "allCharsReg",
        "getRegExpFlags",
        "checkFlag",
        "escapeRegExp",
        "callDateGet",
        "callDateSet",
        "memoizeFunction",
        "setToArray",
        "mapToArray",
        "buildDontEnumFix",
        "buildChainableNativeMethodsFix",
        "defineNativeMethodsOnChainable",
        "addDateTokens",
        "assertNonNull",
        "arrayIndexOf",
        "sparseIndexOf",
        "arrayReduce",
        "hasISOSupport"
    ],
    "classes": []
}