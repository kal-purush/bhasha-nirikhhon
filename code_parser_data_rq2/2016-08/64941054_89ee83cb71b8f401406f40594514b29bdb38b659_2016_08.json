{
    "identifiers": [
        "angular",
        "src",
        "dst",
        "isArray",
        "src",
        "dst",
        "dst",
        "src",
        "i",
        "ii",
        "i",
        "dst",
        "i",
        "src",
        "i",
        "isObject",
        "src",
        "dst",
        "dst",
        "key",
        "src",
        "key",
        "key",
        "dst",
        "key",
        "src",
        "key",
        "dst",
        "src",
        "angular",
        "$RouteProvider",
        "angular",
        "isArray",
        "angular",
        "isObject",
        "angular",
        "parent",
        "extra",
        "angular",
        "parent",
        "extra",
        "path",
        "route",
        "shallowCopy",
        "route",
        "angular",
        "routeCopy",
        "routeCopy",
        "angular",
        "routeCopy",
        "routeCopy",
        "routes",
        "path",
        "angular",
        "routeCopy",
        "path",
        "pathRegExp",
        "path",
        "routeCopy",
        "path",
        "path",
        "path",
        "path",
        "path",
        "path",
        "routes",
        "redirectPath",
        "angular",
        "path",
        "pathRegExp",
        "redirectPath",
        "routeCopy",
        "path",
        "opts",
        "opts",
        "path",
        "path",
        "ret",
        "path",
        "path",
        "_",
        "slash",
        "key",
        "option",
        "option",
        "option",
        "option",
        "option",
        "keys",
        "key",
        "optional",
        "slash",
        "slash",
        "optional",
        "slash",
        "optional",
        "slash",
        "star",
        "optional",
        "optional",
        "ret",
        "path",
        "insensitive",
        "ret",
        "$rootScope",
        "$location",
        "$routeParams",
        "$q",
        "$injector",
        "$templateRequest",
        "$sce",
        "routes",
        "forceReload",
        "fakePreventDefault",
        "forceReload",
        "$rootScope",
        "prepareRoute",
        "fakeLocationEvent",
        "fakeLocationEvent",
        "commitRoute",
        "newParams",
        "newParams",
        "angular",
        "newParams",
        "$location",
        "interpolate",
        "newParams",
        "$location",
        "newParams",
        "$routeMinErr",
        "$rootScope",
        "prepareRoute",
        "$rootScope",
        "commitRoute",
        "$route",
        "on",
        "route",
        "route",
        "route",
        "route",
        "on",
        "m",
        "m",
        "i",
        "len",
        "i",
        "keys",
        "i",
        "m",
        "i",
        "key",
        "val",
        "key",
        "val",
        "$locationEvent",
        "$route",
        "preparedRoute",
        "parseRoute",
        "preparedRouteIsUpdateOnly",
        "preparedRoute",
        "lastRoute",
        "preparedRoute",
        "lastRoute",
        "angular",
        "preparedRoute",
        "lastRoute",
        "preparedRoute",
        "forceReload",
        "preparedRouteIsUpdateOnly",
        "lastRoute",
        "preparedRoute",
        "$rootScope",
        "preparedRoute",
        "lastRoute",
        "$locationEvent",
        "$locationEvent",
        "$route",
        "preparedRouteIsUpdateOnly",
        "lastRoute",
        "nextRoute",
        "angular",
        "lastRoute",
        "$routeParams",
        "$rootScope",
        "lastRoute",
        "nextRoute",
        "lastRoute",
        "forceReload",
        "$route",
        "nextRoute",
        "nextRoute",
        "nextRoute",
        "angular",
        "nextRoute",
        "$location",
        "interpolate",
        "nextRoute",
        "nextRoute",
        "nextRoute",
        "$location",
        "nextRoute",
        "nextRoute",
        "$location",
        "$location",
        "$q",
        "nextRoute",
        "resolveLocals",
        "locals",
        "nextRoute",
        "$route",
        "nextRoute",
        "nextRoute",
        "locals",
        "angular",
        "nextRoute",
        "$routeParams",
        "$rootScope",
        "nextRoute",
        "lastRoute",
        "error",
        "nextRoute",
        "$route",
        "$rootScope",
        "nextRoute",
        "lastRoute",
        "error",
        "route",
        "route",
        "angular",
        "route",
        "angular",
        "locals",
        "value",
        "key",
        "locals",
        "key",
        "angular",
        "value",
        "$injector",
        "value",
        "$injector",
        "value",
        "key",
        "getTemplateFor",
        "route",
        "angular",
        "template",
        "locals",
        "template",
        "$q",
        "locals",
        "route",
        "angular",
        "template",
        "route",
        "angular",
        "template",
        "template",
        "template",
        "route",
        "angular",
        "templateUrl",
        "route",
        "angular",
        "templateUrl",
        "templateUrl",
        "templateUrl",
        "route",
        "angular",
        "templateUrl",
        "route",
        "$sce",
        "templateUrl",
        "template",
        "$templateRequest",
        "templateUrl",
        "template",
        "angular",
        "routes",
        "route",
        "path",
        "match",
        "switchRouteMatcher",
        "$location",
        "route",
        "match",
        "inherit",
        "route",
        "angular",
        "$location",
        "match",
        "route",
        "match",
        "routes",
        "inherit",
        "routes",
        "angular",
        "segment",
        "i",
        "i",
        "result",
        "segment",
        "segment",
        "segmentMatch",
        "result",
        "key",
        "result",
        "segmentMatch",
        "key",
        "result",
        "ngRouteModule",
        "$RouteParamsProvider",
        "ngRouteModule",
        "ngViewFactory",
        "ngRouteModule",
        "ngViewFillContentFactory",
        "ngViewFactory",
        "$route",
        "$anchorScroll",
        "$animate",
        "scope",
        "$element",
        "attr",
        "ctrl",
        "$transclude",
        "attr",
        "attr",
        "scope",
        "update",
        "update",
        "previousLeaveAnimation",
        "$animate",
        "previousLeaveAnimation",
        "previousLeaveAnimation",
        "currentScope",
        "currentScope",
        "currentScope",
        "currentElement",
        "previousLeaveAnimation",
        "$animate",
        "currentElement",
        "previousLeaveAnimation",
        "previousLeaveAnimation",
        "currentElement",
        "$route",
        "$route",
        "locals",
        "locals",
        "angular",
        "template",
        "scope",
        "$route",
        "$transclude",
        "newScope",
        "clone",
        "$animate",
        "clone",
        "currentElement",
        "$element",
        "onNgViewEnter",
        "angular",
        "autoScrollExp",
        "autoScrollExp",
        "scope",
        "autoScrollExp",
        "$anchorScroll",
        "cleanupLastView",
        "currentElement",
        "clone",
        "currentScope",
        "current",
        "newScope",
        "currentScope",
        "currentScope",
        "onloadExp",
        "cleanupLastView",
        "ngViewFillContentFactory",
        "$compile",
        "$controller",
        "$route",
        "scope",
        "$element",
        "$route",
        "current",
        "$element",
        "locals",
        "$compile",
        "$element",
        "current",
        "locals",
        "scope",
        "$controller",
        "current",
        "locals",
        "current",
        "scope",
        "current",
        "controller",
        "$element",
        "controller",
        "$element",
        "controller",
        "scope",
        "current",
        "locals",
        "link",
        "scope"
    ],
    "literals": [
        "'use strict'",
        "'$'",
        "'$'",
        "'ngRoute'",
        "'ng'",
        "'$route'",
        "'ngRoute'",
        "'/'",
        "'/'",
        "'\\\\$1'",
        "'?'",
        "'*?'",
        "'?'",
        "'*'",
        "'*?'",
        "'*'",
        "''",
        "''",
        "''",
        "'(?:'",
        "''",
        "'(.+?)'",
        "'([^/]+)'",
        "''",
        "')'",
        "''",
        "'\\\\$1'",
        "'^'",
        "'$'",
        "'i'",
        "''",
        "'string'",
        "'$rootScope'",
        "'$location'",
        "'$routeParams'",
        "'$q'",
        "'$injector'",
        "'$templateRequest'",
        "'$sce'",
        "'norout'",
        "'Tried updating route when with no current route'",
        "'$locationChangeStart'",
        "'$locationChangeSuccess'",
        "'$routeChangeStart'",
        "'$routeUpdate'",
        "'$routeChangeSuccess'",
        "'$routeChangeError'",
        "'$template'",
        "''",
        "':'",
        "''",
        "''",
        "'$routeParams'",
        "'ngView'",
        "'ngView'",
        "'$route'",
        "'$anchorScroll'",
        "'$animate'",
        "'ECA'",
        "'element'",
        "''",
        "'$routeChangeSuccess'",
        "'$viewContentLoaded'",
        "'$compile'",
        "'$controller'",
        "'$route'",
        "'ECA'",
        "'$ngControllerController'",
        "'$ngControllerController'",
        "'$resolve'"
    ],
    "variables": [
        "i",
        "ii",
        "isArray",
        "isObject",
        "ngRouteModule",
        "$routeMinErr",
        "routes",
        "routeCopy",
        "redirectPath",
        "insensitive",
        "ret",
        "keys",
        "optional",
        "star",
        "forceReload",
        "preparedRoute",
        "preparedRouteIsUpdateOnly",
        "$route",
        "fakeLocationEvent",
        "keys",
        "m",
        "i",
        "len",
        "key",
        "val",
        "lastRoute",
        "lastRoute",
        "nextRoute",
        "preparedRoute",
        "locals",
        "template",
        "template",
        "templateUrl",
        "match",
        "result",
        "segmentMatch",
        "key",
        "currentScope",
        "currentElement",
        "previousLeaveAnimation",
        "autoScrollExp",
        "onloadExp",
        "locals",
        "template",
        "newScope",
        "current",
        "clone",
        "current",
        "locals",
        "link",
        "controller"
    ],
    "comments": [
        "global shallowCopy: true",
        "global shallowCopy: false",
        "There are necessary for `shallowCopy()` (included via `src/shallowCopy.js`).",
        "They are initialized inside the `$RouteProvider`, to ensure `window.angular` is available.",
        "global -ngRouteModule",
        "copy original route object to preserve params inherited from proto chain",
        "create redirection for trailing slashes",
        "interpolate modifies newParams, only query params are left",
        "",
        "after route change",
        "Match a route",
        "No route matched; fallback to \"otherwise\" route",
        "Note: This will also link all children of ng-view that were contained in the original",
        "html. If that content contains controllers, ... they could pollute/change the scope.",
        "However, using ng-view on an element with additional content does not make sense...",
        "Note: We can't remove them in the cloneAttchFn of $transclude as that",
        "function is called before linking the content, which would apply child",
        "directives to non existing elements.",
        "This directive is called during the $transclude call of the first `ngView` directive.",
        "It will replace and compile the content of the element with the loaded template.",
        "We need this directive so that the element content is already filled when",
        "the link function of another directive on the same element as ngView",
        "is called."
    ],
    "docstrings": [
        "* @license AngularJS v1.5.8\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT",
        "* Creates a shallow copy of an object, an array or a primitive.\n *\n * Assumes that there are no proto properties for objects.",
        "* @ngdoc module\n * @name ngRoute\n * @description\n *\n * # ngRoute\n *\n * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.\n *\n * ## Example\n * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n *\n *\n * <div doc-module-components=\"ngRoute\"></div>",
        "* @ngdoc provider\n * @name $routeProvider\n *\n * @description\n *\n * Used for configuring routes.\n *\n * ## Example\n * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n *\n * ## Dependencies\n * Requires the {@link ngRoute `ngRoute`} module to be installed.",
        "* @ngdoc method\n   * @name $routeProvider#when\n   *\n   * @param {string} path Route path (matched against `$location.path`). If `$location.path`\n   *    contains redundant trailing slash or is missing one, the route will still match and the\n   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the\n   *    route definition.\n   *\n   *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up\n   *        to the next slash are matched and stored in `$routeParams` under the given `name`\n   *        when the route matches.\n   *    * `path` can contain named groups starting with a colon and ending with a star:\n   *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`\n   *        when the route matches.\n   *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.\n   *\n   *    For example, routes like `/color/:color/largecode/:largecode*\\/edit` will match\n   *    `/color/brown/largecode/code/with/slashes/edit` and extract:\n   *\n   *    * `color: brown`\n   *    * `largecode: code/with/slashes`.\n   *\n   *\n   * @param {Object} route Mapping information to be assigned to `$route.current` on route\n   *    match.\n   *\n   *    Object properties:\n   *\n   *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with\n   *      newly created scope or the name of a {@link angular.Module#controller registered\n   *      controller} if passed as a string.\n   *    - `controllerAs` – `{string=}` – An identifier name for a reference to the controller.\n   *      If present, the controller will be published to scope under the `controllerAs` name.\n   *    - `template` – `{string=|function()=}` – html template as a string or a function that\n   *      returns an html template as a string which should be used by {@link\n   *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.\n   *      This property takes precedence over `templateUrl`.\n   *\n   *      If `template` is a function, it will be called with the following parameters:\n   *\n   *      - `{Array.<Object>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route\n   *\n   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html\n   *      template that should be used by {@link ngRoute.directive:ngView ngView}.\n   *\n   *      If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *      - `{Array.<Object>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route\n   *\n   *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n   *      be injected into the controller. If any of these dependencies are promises, the router\n   *      will wait for them all to be resolved or one to be rejected before the controller is\n   *      instantiated.\n   *      If all the promises are resolved successfully, the values of the resolved promises are\n   *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is\n   *      fired. If any of the promises are rejected the\n   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired.\n   *      For easier access to the resolved dependencies from the template, the `resolve` map will\n   *      be available on the scope of the route, under `$resolve` (by default) or a custom name\n   *      specified by the `resolveAs` property (see below). This can be particularly useful, when\n   *      working with {@link angular.Module#component components} as route templates.<br />\n   *      <div class=\"alert alert-warning\">\n   *        **Note:** If your scope already contains a property with this name, it will be hidden\n   *        or overwritten. Make sure, you specify an appropriate name for this property, that\n   *        does not collide with other properties on the scope.\n   *      </div>\n   *      The map object is:\n   *\n   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n   *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n   *        Otherwise if function, then it is {@link auto.$injector#invoke injected}\n   *        and the return value is treated as the dependency. If the result is a promise, it is\n   *        resolved before its value is injected into the controller. Be aware that\n   *        `ngRoute.$routeParams` will still refer to the previous route within these resolve\n   *        functions.  Use `$route.current.params` to access the new route parameters, instead.\n   *\n   *    - `resolveAs` - `{string=}` - The name under which the `resolve` map will be available on\n   *      the scope of the route. If omitted, defaults to `$resolve`.\n   *\n   *    - `redirectTo` – `{(string|function())=}` – value to update\n   *      {@link ng.$location $location} path with and trigger route redirection.\n   *\n   *      If `redirectTo` is a function, it will be called with the following parameters:\n   *\n   *      - `{Object.<string>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route templateUrl.\n   *      - `{string}` - current `$location.path()`\n   *      - `{Object}` - current `$location.search()`\n   *\n   *      The custom `redirectTo` function is expected to return a string which will be used\n   *      to update `$location.path()` and `$location.search()`.\n   *\n   *    - `[reloadOnSearch=true]` - `{boolean=}` - reload route when only `$location.search()`\n   *      or `$location.hash()` changes.\n   *\n   *      If the option is set to `false` and url in the browser changes, then\n   *      `$routeUpdate` event is broadcasted on the root scope.\n   *\n   *    - `[caseInsensitiveMatch=false]` - `{boolean=}` - match routes without being case sensitive\n   *\n   *      If the option is set to `true`, then the particular route can be matched without being\n   *      case sensitive\n   *\n   * @returns {Object} self\n   *\n   * @description\n   * Adds a new route definition to the `$route` service.",
        "* @ngdoc property\n   * @name $routeProvider#caseInsensitiveMatch\n   * @description\n   *\n   * A boolean property indicating if routes defined\n   * using this provider should be matched using a case insensitive\n   * algorithm. Defaults to `false`.",
        "* @param path {string} path\n    * @param opts {Object} options\n    * @return {?Object}\n    *\n    * @description\n    * Normalizes the given path, returning a regular expression\n    * and the original path.\n    *\n    * Inspired by pathRexp in visionmedia/express/lib/utils.js.",
        "* @ngdoc method\n   * @name $routeProvider#otherwise\n   *\n   * @description\n   * Sets route definition that will be used on route change when no other route definition\n   * is matched.\n   *\n   * @param {Object|string} params Mapping information to be assigned to `$route.current`.\n   * If called with a string, the value maps to `redirectTo`.\n   * @returns {Object} self",
        "* @ngdoc service\n     * @name $route\n     * @requires $location\n     * @requires $routeParams\n     *\n     * @property {Object} current Reference to the current route definition.\n     * The route definition contains:\n     *\n     *   - `controller`: The controller constructor as defined in the route definition.\n     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for\n     *     controller instantiation. The `locals` contain\n     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:\n     *\n     *     - `$scope` - The current route scope.\n     *     - `$template` - The current route template HTML.\n     *\n     *     The `locals` will be assigned to the route scope's `$resolve` property. You can override\n     *     the property name, using `resolveAs` in the route definition. See\n     *     {@link ngRoute.$routeProvider $routeProvider} for more info.\n     *\n     * @property {Object} routes Object with all route configuration Objects as its properties.\n     *\n     * @description\n     * `$route` is used for deep-linking URLs to controllers and views (HTML partials).\n     * It watches `$location.url()` and tries to map the path to an existing route definition.\n     *\n     * Requires the {@link ngRoute `ngRoute`} module to be installed.\n     *\n     * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.\n     *\n     * The `$route` service is typically used in conjunction with the\n     * {@link ngRoute.directive:ngView `ngView`} directive and the\n     * {@link ngRoute.$routeParams `$routeParams`} service.\n     *\n     * @example\n     * This example shows how changing the URL hash causes the `$route` to match a route against the\n     * URL, and the `ngView` pulls in the partial.\n     *\n     * <example name=\"$route-service\" module=\"ngRouteExample\"\n     *          deps=\"angular-route.js\" fixBase=\"true\">\n     *   <file name=\"index.html\">\n     *     <div ng-controller=\"MainController\">\n     *       Choose:\n     *       <a href=\"Book/Moby\">Moby</a> |\n     *       <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n     *       <a href=\"Book/Gatsby\">Gatsby</a> |\n     *       <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n     *       <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n     *\n     *       <div ng-view></div>\n     *\n     *       <hr />\n     *\n     *       <pre>$location.path() = {{$location.path()}}</pre>\n     *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n     *       <pre>$route.current.params = {{$route.current.params}}</pre>\n     *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n     *       <pre>$routeParams = {{$routeParams}}</pre>\n     *     </div>\n     *   </file>\n     *\n     *   <file name=\"book.html\">\n     *     controller: {{name}}<br />\n     *     Book Id: {{params.bookId}}<br />\n     *   </file>\n     *\n     *   <file name=\"chapter.html\">\n     *     controller: {{name}}<br />\n     *     Book Id: {{params.bookId}}<br />\n     *     Chapter Id: {{params.chapterId}}\n     *   </file>\n     *\n     *   <file name=\"script.js\">\n     *     angular.module('ngRouteExample', ['ngRoute'])\n     *\n     *      .controller('MainController', function($scope, $route, $routeParams, $location) {\n     *          $scope.$route = $route;\n     *          $scope.$location = $location;\n     *          $scope.$routeParams = $routeParams;\n     *      })\n     *\n     *      .controller('BookController', function($scope, $routeParams) {\n     *          $scope.name = \"BookController\";\n     *          $scope.params = $routeParams;\n     *      })\n     *\n     *      .controller('ChapterController', function($scope, $routeParams) {\n     *          $scope.name = \"ChapterController\";\n     *          $scope.params = $routeParams;\n     *      })\n     *\n     *     .config(function($routeProvider, $locationProvider) {\n     *       $routeProvider\n     *        .when('/Book/:bookId', {\n     *         templateUrl: 'book.html',\n     *         controller: 'BookController',\n     *         resolve: {\n     *           // I will cause a 1 second delay\n     *           delay: function($q, $timeout) {\n     *             var delay = $q.defer();\n     *             $timeout(delay.resolve, 1000);\n     *             return delay.promise;\n     *           }\n     *         }\n     *       })\n     *       .when('/Book/:bookId/ch/:chapterId', {\n     *         templateUrl: 'chapter.html',\n     *         controller: 'ChapterController'\n     *       });\n     *\n     *       // configure html5 to get links working on jsfiddle\n     *       $locationProvider.html5Mode(true);\n     *     });\n     *\n     *   </file>\n     *\n     *   <file name=\"protractor.js\" type=\"protractor\">\n     *     it('should load and compile correct template', function() {\n     *       element(by.linkText('Moby: Ch1')).click();\n     *       var content = element(by.css('[ng-view]')).getText();\n     *       expect(content).toMatch(/controller\\: ChapterController/);\n     *       expect(content).toMatch(/Book Id\\: Moby/);\n     *       expect(content).toMatch(/Chapter Id\\: 1/);\n     *\n     *       element(by.partialLinkText('Scarlet')).click();\n     *\n     *       content = element(by.css('[ng-view]')).getText();\n     *       expect(content).toMatch(/controller\\: BookController/);\n     *       expect(content).toMatch(/Book Id\\: Scarlet/);\n     *     });\n     *   </file>\n     * </example>",
        "* @ngdoc event\n     * @name $route#$routeChangeStart\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted before a route change. At this  point the route services starts\n     * resolving all of the dependencies needed for the route change to occur.\n     * Typically this involves fetching the view template as well as any dependencies\n     * defined in `resolve` route property. Once  all of the dependencies are resolved\n     * `$routeChangeSuccess` is fired.\n     *\n     * The route change (and the `$location` change that triggered it) can be prevented\n     * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}\n     * for more details about event object.\n     *\n     * @param {Object} angularEvent Synthetic event object.\n     * @param {Route} next Future route information.\n     * @param {Route} current Current route information.",
        "* @ngdoc event\n     * @name $route#$routeChangeSuccess\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted after a route change has happened successfully.\n     * The `resolve` dependencies are now available in the `current.locals` property.\n     *\n     * {@link ngRoute.directive:ngView ngView} listens for the directive\n     * to instantiate the controller and render the view.\n     *\n     * @param {Object} angularEvent Synthetic event object.\n     * @param {Route} current Current route information.\n     * @param {Route|Undefined} previous Previous route information, or undefined if current is\n     * first route entered.",
        "* @ngdoc event\n     * @name $route#$routeChangeError\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted if any of the resolve promises are rejected.\n     *\n     * @param {Object} angularEvent Synthetic event object\n     * @param {Route} current Current route information.\n     * @param {Route} previous Previous route information.\n     * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.",
        "* @ngdoc event\n     * @name $route#$routeUpdate\n     * @eventType broadcast on root scope\n     * @description\n     * The `reloadOnSearch` property has been set to false, and we are reusing the same\n     * instance of the Controller.\n     *\n     * @param {Object} angularEvent Synthetic event object\n     * @param {Route} current Current/previous route information.",
        "* @ngdoc method\n           * @name $route#reload\n           *\n           * @description\n           * Causes `$route` service to reload the current route even if\n           * {@link ng.$location $location} hasn't changed.\n           *\n           * As a result of that, {@link ngRoute.directive:ngView ngView}\n           * creates new scope and reinstantiates the controller.",
        "* @ngdoc method\n           * @name $route#updateParams\n           *\n           * @description\n           * Causes `$route` service to update the current URL, replacing\n           * current route parameters with those specified in `newParams`.\n           * Provided property names that match the route's path segment\n           * definitions will be interpolated into the location's path, while\n           * remaining properties will be treated as query params.\n           *\n           * @param {!Object<string, string>} newParams mapping of URL parameter names to values",
        "* @param on {string} current url\n     * @param route {Object} route regexp to match the url against\n     * @return {?Object}\n     *\n     * @description\n     * Check if the route matches the current url.\n     *\n     * Inspired by match in\n     * visionmedia/express/lib/router/router.js.",
        "* @returns {Object} the current active route, by matching it against the URL",
        "* @returns {string} interpolation of the redirect path with the parameters",
        "* @ngdoc service\n * @name $routeParams\n * @requires $route\n *\n * @description\n * The `$routeParams` service allows you to retrieve the current set of route parameters.\n *\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n *\n * The route parameters are a combination of {@link ng.$location `$location`}'s\n * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.\n * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.\n *\n * In case of parameter name collision, `path` params take precedence over `search` params.\n *\n * The service guarantees that the identity of the `$routeParams` object will remain unchanged\n * (but its properties will likely change) even when a route change occurs.\n *\n * Note that the `$routeParams` are only updated *after* a route change completes successfully.\n * This means that you cannot rely on `$routeParams` being correct in route resolve functions.\n * Instead you can use `$route.current.params` to access the new route's parameters.\n *\n * @example\n * ```js\n *  // Given:\n *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n *  // Route: /Chapter/:chapterId/Section/:sectionId\n *  //\n *  // Then\n *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}\n * ```",
        "* @ngdoc directive\n * @name ngView\n * @restrict ECA\n *\n * @description\n * # Overview\n * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by\n * including the rendered template of the current route into the main layout (`index.html`) file.\n * Every time the current route changes, the included view changes with it according to the\n * configuration of the `$route` service.\n *\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n *\n * @animations\n * | Animation                        | Occurs                              |\n * |----------------------------------|-------------------------------------|\n * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM |\n * | {@link ng.$animate#leave leave}  | when the old element is removed from to the DOM  |\n *\n * The enter and leave animation occur concurrently.\n *\n * @knownIssue If `ngView` is contained in an asynchronously loaded template (e.g. in another\n *             directive's templateUrl or in a template loaded using `ngInclude`), then you need to\n *             make sure that `$route` is instantiated in time to capture the initial\n *             `$locationChangeStart` event and load the appropriate view. One way to achieve this\n *             is to have it as a dependency in a `.run` block:\n *             `myModule.run(['$route', function() {}]);`\n *\n * @scope\n * @priority 400\n * @param {string=} onload Expression to evaluate whenever the view updates.\n *\n * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll\n *                  $anchorScroll} to scroll the viewport after the view is updated.\n *\n *                  - If the attribute is not set, disable scrolling.\n *                  - If the attribute is set without value, enable scrolling.\n *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated\n *                    as an expression yields a truthy value.\n * @example\n    <example name=\"ngView-directive\" module=\"ngViewExample\"\n             deps=\"angular-route.js;angular-animate.js\"\n             animations=\"true\" fixBase=\"true\">\n      <file name=\"index.html\">\n        <div ng-controller=\"MainCtrl as main\">\n          Choose:\n          <a href=\"Book/Moby\">Moby</a> |\n          <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n          <a href=\"Book/Gatsby\">Gatsby</a> |\n          <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n          <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n          <div class=\"view-animate-container\">\n            <div ng-view class=\"view-animate\"></div>\n          </div>\n          <hr />\n\n          <pre>$location.path() = {{main.$location.path()}}</pre>\n          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>\n          <pre>$route.current.params = {{main.$route.current.params}}</pre>\n          <pre>$routeParams = {{main.$routeParams}}</pre>\n        </div>\n      </file>\n\n      <file name=\"book.html\">\n        <div>\n          controller: {{book.name}}<br />\n          Book Id: {{book.params.bookId}}<br />\n        </div>\n      </file>\n\n      <file name=\"chapter.html\">\n        <div>\n          controller: {{chapter.name}}<br />\n          Book Id: {{chapter.params.bookId}}<br />\n          Chapter Id: {{chapter.params.chapterId}}\n        </div>\n      </file>\n\n      <file name=\"animations.css\">\n        .view-animate-container {\n          position:relative;\n          height:100px!important;\n          background:white;\n          border:1px solid black;\n          height:40px;\n          overflow:hidden;\n        }\n\n        .view-animate {\n          padding:10px;\n        }\n\n        .view-animate.ng-enter, .view-animate.ng-leave {\n          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n\n          display:block;\n          width:100%;\n          border-left:1px solid black;\n\n          position:absolute;\n          top:0;\n          left:0;\n          right:0;\n          bottom:0;\n          padding:10px;\n        }\n\n        .view-animate.ng-enter {\n          left:100%;\n        }\n        .view-animate.ng-enter.ng-enter-active {\n          left:0;\n        }\n        .view-animate.ng-leave.ng-leave-active {\n          left:-100%;\n        }\n      </file>\n\n      <file name=\"script.js\">\n        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])\n          .config(['$routeProvider', '$locationProvider',\n            function($routeProvider, $locationProvider) {\n              $routeProvider\n                .when('/Book/:bookId', {\n                  templateUrl: 'book.html',\n                  controller: 'BookCtrl',\n                  controllerAs: 'book'\n                })\n                .when('/Book/:bookId/ch/:chapterId', {\n                  templateUrl: 'chapter.html',\n                  controller: 'ChapterCtrl',\n                  controllerAs: 'chapter'\n                });\n\n              $locationProvider.html5Mode(true);\n          }])\n          .controller('MainCtrl', ['$route', '$routeParams', '$location',\n            function($route, $routeParams, $location) {\n              this.$route = $route;\n              this.$location = $location;\n              this.$routeParams = $routeParams;\n          }])\n          .controller('BookCtrl', ['$routeParams', function($routeParams) {\n            this.name = \"BookCtrl\";\n            this.params = $routeParams;\n          }])\n          .controller('ChapterCtrl', ['$routeParams', function($routeParams) {\n            this.name = \"ChapterCtrl\";\n            this.params = $routeParams;\n          }]);\n\n      </file>\n\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should load and compile correct template', function() {\n          element(by.linkText('Moby: Ch1')).click();\n          var content = element(by.css('[ng-view]')).getText();\n          expect(content).toMatch(/controller\\: ChapterCtrl/);\n          expect(content).toMatch(/Book Id\\: Moby/);\n          expect(content).toMatch(/Chapter Id\\: 1/);\n\n          element(by.partialLinkText('Scarlet')).click();\n\n          content = element(by.css('[ng-view]')).getText();\n          expect(content).toMatch(/controller\\: BookCtrl/);\n          expect(content).toMatch(/Book Id\\: Scarlet/);\n        });\n      </file>\n    </example>",
        "* @ngdoc event\n * @name ngView#$viewContentLoaded\n * @eventType emit on the current ngView scope\n * @description\n * Emitted every time the ngView content is reloaded."
    ],
    "functions": [
        "shallowCopy",
        "$RouteProvider",
        "inherit",
        "pathRegExp",
        "switchRouteMatcher",
        "prepareRoute",
        "commitRoute",
        "resolveLocals",
        "getTemplateFor",
        "parseRoute",
        "interpolate",
        "$RouteParamsProvider",
        "ngViewFactory",
        "cleanupLastView",
        "update",
        "ngViewFillContentFactory"
    ],
    "classes": []
}