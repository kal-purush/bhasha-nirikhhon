{
    "identifiers": [
        "JSSnake",
        "options",
        "$",
        "$",
        "options",
        "$",
        "setTimeout",
        "setInterval",
        "$",
        "clearInterval",
        "detacherId",
        "JSSnake",
        "JSSnake",
        "$",
        "$",
        "$",
        "jQuery",
        "jQuery",
        "jQuery",
        "JSSnake",
        "$",
        "screen",
        "$",
        "$",
        "$",
        "question",
        "$",
        "lifes",
        "x",
        "y",
        "ctx",
        "ctx",
        "x",
        "snakesize",
        "y",
        "snakesize",
        "snakesize",
        "snakesize",
        "ctx",
        "ctx",
        "x",
        "snakesize",
        "y",
        "snakesize",
        "snakesize",
        "snakesize",
        "x",
        "y",
        "ctx",
        "ctx",
        "x",
        "optionsize",
        "y",
        "optionsize",
        "optionsize",
        "optionsize",
        "ctx",
        "ctx",
        "x",
        "optionsize",
        "y",
        "optionsize",
        "optionsize",
        "optionsize",
        "qctx",
        "qctx",
        "qctx",
        "qctx",
        "qctx",
        "lctx",
        "lctx",
        "lctx",
        "lctx",
        "lctx",
        "ctx",
        "ctx",
        "w",
        "h",
        "$",
        "e",
        "e",
        "key",
        "direction",
        "direction",
        "key",
        "direction",
        "direction",
        "key",
        "direction",
        "direction",
        "key",
        "direction",
        "direction",
        "paint_question",
        "create_snake",
        "create_options",
        "gameloop",
        "setInterval",
        "paint",
        "interval",
        "init",
        "x",
        "y",
        "array",
        "i",
        "array",
        "i",
        "array",
        "i",
        "x",
        "array",
        "i",
        "y",
        "length",
        "i",
        "i",
        "snake",
        "i",
        "optiona",
        "w",
        "optionsize",
        "optionsize",
        "h",
        "optionsize",
        "optionsize",
        "i",
        "snake",
        "i",
        "snakeX",
        "snake",
        "i",
        "snakeY",
        "snake",
        "i",
        "optiona",
        "snakeX",
        "optiona",
        "snakeY",
        "optiona",
        "snakeY",
        "optiona",
        "snakeX",
        "optiona",
        "optiona",
        "optionb",
        "w",
        "optionsize",
        "optionsize",
        "h",
        "optionsize",
        "optionsize",
        "i",
        "snake",
        "i",
        "snakeX",
        "snake",
        "i",
        "snakeY",
        "snake",
        "i",
        "optionb",
        "snakeX",
        "optionb",
        "snakeY",
        "optionb",
        "snakeY",
        "optionb",
        "snakeX",
        "optionb",
        "optionb",
        "optionc",
        "w",
        "optionsize",
        "optionsize",
        "h",
        "optionsize",
        "optionsize",
        "i",
        "snake",
        "i",
        "snakeX",
        "snake",
        "i",
        "snakeY",
        "snake",
        "i",
        "optionc",
        "snakeX",
        "optionc",
        "snakeY",
        "optionc",
        "snakeY",
        "optionc",
        "snakeX",
        "optionc",
        "optionc",
        "optiond",
        "w",
        "optionsize",
        "optionsize",
        "h",
        "optionsize",
        "optionsize",
        "i",
        "snake",
        "i",
        "snakeX",
        "snake",
        "i",
        "snakeY",
        "snake",
        "i",
        "optiond",
        "snakeX",
        "optiond",
        "snakeY",
        "optiond",
        "snakeY",
        "optiond",
        "snakeX",
        "optiond",
        "optiond",
        "ctx",
        "ctx",
        "w",
        "h",
        "ctx",
        "ctx",
        "w",
        "h",
        "snakeX",
        "snake",
        "snakeY",
        "snake",
        "direction",
        "snakeX",
        "direction",
        "snakeX",
        "direction",
        "snakeY",
        "direction",
        "snakeY",
        "snakeX",
        "snakeX",
        "w",
        "snakesize",
        "snakeY",
        "snakeY",
        "h",
        "snakesize",
        "check_collision",
        "snakeX",
        "snakeY",
        "snake",
        "interval",
        "ctx",
        "w",
        "h",
        "gameloop",
        "clearInterval",
        "gameloop",
        "snakeX",
        "optiona",
        "snakeY",
        "optiona",
        "tail",
        "snakeX",
        "snakeY",
        "i",
        "i",
        "tail",
        "snake",
        "snake",
        "ctx",
        "w",
        "h",
        "ctx",
        "ctx",
        "w",
        "h",
        "gameloop",
        "clearInterval",
        "gameloop",
        "create_options",
        "tail",
        "snake",
        "tail",
        "snakeX",
        "tail",
        "snakeY",
        "snake",
        "tail",
        "i",
        "snake",
        "i",
        "paint_snake",
        "snake",
        "i",
        "snake",
        "i",
        "paint_options",
        "optiona",
        "optiona",
        "paint_options",
        "optionb",
        "optionb",
        "paint_options",
        "optionc",
        "optionc",
        "paint_options",
        "optiond",
        "optiond",
        "paint_lifes",
        "JSSnake",
        "$",
        "e",
        "e",
        "$",
        "setTimeout",
        "$",
        "elem",
        "$",
        "elem",
        "$",
        "e",
        "e",
        "e",
        "$",
        "JSSnake",
        "$",
        "$",
        "$",
        "$",
        "$",
        "$",
        "count",
        "style",
        "$",
        "count",
        "style",
        "JSSnake",
        "$",
        "parseFloat",
        "$",
        "parseFloat",
        "$",
        "$",
        "parseFloat",
        "$",
        "parseFloat",
        "$",
        "$",
        "$",
        "$",
        "$",
        "JSSnake",
        "options",
        "correct",
        "options",
        "options",
        "i",
        "i",
        "arr",
        "options",
        "i",
        "options",
        "i",
        "correct",
        "isCorrect",
        "isCorrect",
        "arr",
        "correct",
        "arr",
        "arr",
        "arr",
        "JSSnake",
        "min",
        "max",
        "max",
        "min",
        "min",
        "JSSnake",
        "array",
        "array",
        "currentIndex",
        "randomIndex",
        "currentIndex",
        "currentIndex",
        "temporaryValue",
        "array",
        "currentIndex",
        "array",
        "currentIndex",
        "array",
        "randomIndex",
        "array",
        "randomIndex",
        "temporaryValue",
        "array",
        "JSSnake",
        "array",
        "item",
        "i",
        "array",
        "i",
        "array",
        "i",
        "item"
    ],
    "literals": [
        "\"constructor\"",
        "'body'",
        "'/'",
        "'normal'",
        "'<div class=\"gamearea\"></div>'",
        "'body'",
        "\"JSSnake.prototype.start\"",
        "\"Game area has been drawn\"",
        "\"JSSnake.prototype.drawGameArea\"",
        "'<div class=\"snakeScreen\" id=\"screencanvas\"></div>'",
        "'<div class=\"questioncanvas\" id=\"questioncanvas\"></div>'",
        "'<div class=\"lifescanvas\" id=\"lifescanvas\"></div>'",
        "'#screencanvas'",
        "'<canvas id=\"screen\" height=\"800\" width=1400> </canvas>'",
        "'#questioncanvas'",
        "'<canvas id=\"question\" height=\"60\" width=\"1400\"> </canvas>'",
        "'#lifescanvas'",
        "'<canvas id=\"lifes\" height=\"60\" width=\"1400\"> </canvas>'",
        "\"JSSnake.prototype.startGame\"",
        "\"#screen\"",
        "\"2d\"",
        "\"#screen\"",
        "\"#screen\"",
        "\"#question\"",
        "\"2d\"",
        "\"#lifes\"",
        "\"2d\"",
        "\"blue\"",
        "\"white\"",
        "\"green\"",
        "\"white\"",
        "\"red\"",
        "\"30px 'Comic Sans MS'\"",
        "\"left\"",
        "\"Question: \"",
        "\"red\"",
        "\"30px 'Comic Sans MS'\"",
        "\"left\"",
        "\"Lifes: \"",
        "'red'",
        "\"Game ended\"",
        "\"37\"",
        "\"right\"",
        "\"left\"",
        "\"38\"",
        "\"down\"",
        "\"up\"",
        "\"39\"",
        "\"left\"",
        "\"right\"",
        "\"40\"",
        "\"up\"",
        "\"down\"",
        "\"right\"",
        "\"white\"",
        "\"black\"",
        "\"right\"",
        "\"left\"",
        "\"up\"",
        "\"down\"",
        "\"snake is smaller than 1\"",
        "'red'",
        "\"Game ended\"",
        "\"JSSnake.prototype.drawStartScreen\"",
        "'<div class=\"startbutton\">Start!</div>'",
        "'.startbutton'",
        "'keypress'",
        "'.startButton'",
        "\"JSSnake.prototype.loadCss\"",
        "\"[id^=boilerpalte-style]\"",
        "\"normal\"",
        "'something_else'",
        "'stylesheets/something_else.css'",
        "\"Theme not supported, using 'normal'\"",
        "\"normal\"",
        "\"[id^=boilerpalte-style]\"",
        "'head'",
        "'<link id=\"boilerpalte-style'",
        "'\" rel=\"stylesheet\" href=\"'",
        "'stylesheets/base_theme.css'",
        "'\">'",
        "'head'",
        "'<link id=\"boilerpalte-style'",
        "'\" rel=\"stylesheet\" href=\"'",
        "'\">'",
        "\"JSSnake.prototype.resize\"",
        "'px'",
        "'px'"
    ],
    "variables": [
        "detacherId",
        "screen",
        "ctx",
        "w",
        "h",
        "question",
        "qctx",
        "lifes",
        "lctx",
        "key",
        "option",
        "optionsize",
        "snake",
        "snakesize",
        "tail",
        "length",
        "direction",
        "score",
        "snakeX",
        "snakeY",
        "interval",
        "growinterval",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "elem",
        "style",
        "count",
        "arr",
        "isCorrect",
        "i",
        "currentIndex",
        "temporaryValue",
        "randomIndex",
        "i"
    ],
    "comments": [
        "Constructor for JSSNake. If you rename this, you need to rename it also in init.js",
        "Take options object as a parameters. Given options override defaults",
        "Make this object visible in functions.",
        "Default values for options",
        "These are defined pretty well in init.js. I'll save some space and leave this half empty.",
        "Extend default options with given options",
        "This uses jQuery ($)",
        "Make some options easier to access",
        "Create a container for the game.",
        "There needs to be a \"gamearea\"-container, which is positioned relative and takes the",
        "full width and height of it's parent. Everything in the game must be placed inside \"gamearea\".",
        "Note: self.options.parent is the most outer container",
        "self.parent is the game itself and everything should be added there",
        "USE self.parent TO ADD THINGS IN YOUR GAME!",
        "Add the game to the outer element",
        "Load necessary CSS-files",
        "Make the are fullscreen. Give some time to make sure",
        "the parent is rendered before resizing",
        "Handle window resize",
        "Check if game has been detached every 1000ms",
        "Detach all key and mouse listeners here.",
        "Aslo clear all intervals and timeouts",
        "Draw start screen",
        "JSSnake constructor",
        "Starting point for the game",
        "start function",
        "div elements for the snake game and its parts",
        "Lets create three different canvas for future use",
        "drawGameArea function",
        "######################### Draw necessary things #########################",
        "Defining gamescreen",
        "Function to paint snake",
        "Define snake color to blue",
        "x , y, width, height",
        "Define snakes border color to white",
        "x , y, width, height",
        "paint_snake",
        "Function to paint options",
        "differentiate options from snake and paint it to green",
        "paint_options",
        "Function to paint question",
        "x,y, width, height // clears the old question before painting new",
        "paint_question",
        "Function to paint amount of lifes",
        "x,y, width, height // clears the old life number",
        "console.log(self.lifes); // for debugging",
        "paint_life",
        "Function to end game",
        "text, x, y",
        "end_game",
        "######################### End of drawing #########################",
        "Keyboard controls for snake",
        "keyboard controls",
        "Variables to make things easier",
        "option size",
        "snake itself created as a array",
        "snake size",
        "snakes tail",
        "Initial length of the snake (number of boxes)",
        "defaulted direction",
        "Start from zero",
        "x-cordinate for snake",
        "y-cordinate for snake",
        "defines game speed, smaller number is faster",
        "defines how often snake will grow",
        "Init function to start the game",
        "paints the question area",
        "creates snake",
        "creates options",
        "loop to keep the painting on going i.e game running",
        "Initialize the game",
        "######################### Help functions #########################",
        "Function to check if the snake collides with something",
        "check collision",
        "Make the snake to move by adding element at the end of array by using the push method",
        "Function to create options",
        "Create four different options to get four options for collecting",
        "optiona",
        "Check that option is not created on top of snake and if it is then re-create it",
        "if",
        "for",
        "optionb",
        "Check that option is not created on top of snake and if it is then re-create it",
        "if",
        "for",
        "optionc",
        "Check that option is not created on top of snake and if it is then re-create it",
        "if",
        "for",
        "optiond",
        "Check that option is not created on top of snake and if it is then re-create it",
        "if",
        "for",
        "create_options",
        "######################### End of help functions #########################",
        "Main function for painting the snake and all of the parts needed for snake game",
        "The actual space for playing. Colored as white",
        "This white space has black borders",
        "Snake head cordinates to easier usable variables",
        "Make the snake move by adding or removing from snake",
        "debugging",
        "console.log(\"snakeX: \"+snakeX+\" snakeY: \"+snakeY+\" snakeX == w/snakesize \"+w/snakesize+\" snakeY == h/snakesize \"+h/snakesize);",
        "Check if snake collides with itself or with the borders and then reduce lifes or stop the game",
        "Restart game if lifes have ended",
        "gameloop = clearInterval(gameloop);",
        "make game very much slower",
        "if lifes are down to zero then clear game area",
        "else-if",
        "if",
        "few lines for debugging",
        "console.log(\"snakeX: \"+snakeX+\" snakeY: \"+snakeY+\" optiona.x: \"+optiona.x+\" optiona.y: \"+optiona.y);",
        "console.log(\"optiona.x/snakesize \"+optiona.x/snakesize+\" optiona.y/snakesize \"+optiona.y/snakesize);",
        "Check if the snake eats the correct option",
        "Reduce the length of the snake (pop the tail X times)",
        "for",
        "Stop game if snake length becomes smaller than 1",
        "text, x, y",
        "If tail is long enough create new options",
        "else-if",
        "Remove last cell of the array by using pop method",
        "else-if",
        "Adds the tail in front of the snake array by using unshift method",
        "Paints the snake with the paint_snake function",
        "for",
        "Create the four options to the canvas",
        "Last but not least paint the amount of lifes",
        "paint",
        "start Game",
        "#########################  End of snake code #################################################",
        "Draws the initial start screen, with a big start-button.",
        "Game starts only after user has decide to start the game.",
        "You can skip this, if you like.",
        "disable keylistener",
        "ugly hack to wait until the animation is completed.",
        "fade button, start game, remove button",
        "focus parent div (needed, if you have keylistener in your game)",
        "start the game",
        "remove start-button",
        "drawstartScreen",
        "Load the base_theme.css and set theme, if available.",
        "No need to modify this, unless you want to implement themes or",
        "load external css-libraries",
        "remove all existing stylesheets (should not be any)",
        "",
        "See which theme is selected, default is normal or empty",
        "",
        "Example for alterntive theme",
        "Not implemented in this boilerplate!",
        "Default case, if the theme is completely missing from options",
        "",
        "Load the files",
        "",
        "load the base_theme.css",
        "Load special theme",
        "Loading any external stylesheets, like animate.css",
        "$('head').append('<link id=\"boilerpalte-style'+ (count+2) +'\" rel=\"stylesheet\" href=\"' + self.options.url + 'stylesheets/animate.css\">');",
        "loadCss",
        "Keep the game in fullscreen even on window resize",
        "First make sure that the outer most element is full width and height",
        "Make sure that the game container fills the outer most container.",
        "resize",
        "",
        "Helper functions, use if you need",
        "",
        "Shuffle options array. Makes sure correct option is included in shuffled array",
        "shuffleOptions",
        "Get random int including min and max",
        "randomInt",
        "Shuffle array",
        "While there remain elements to shuffle...",
        "Pick a remaining element...",
        "And swap it with the current element.",
        "Shuffle",
        "Checks if array as given item",
        "isIn"
    ],
    "docstrings": [],
    "functions": [
        "paint_snake",
        "paint_options",
        "paint_question",
        "paint_lifes",
        "end_game",
        "init",
        "check_collision",
        "create_snake",
        "create_options",
        "paint"
    ],
    "classes": []
}