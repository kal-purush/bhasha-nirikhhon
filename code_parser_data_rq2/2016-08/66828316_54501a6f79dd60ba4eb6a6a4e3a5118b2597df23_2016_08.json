{
    "identifiers": [
        "root",
        "factory",
        "define",
        "define",
        "define",
        "factory",
        "factory",
        "root",
        "factory",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "rand128",
        "JsonSync",
        "mark",
        "op",
        "op",
        "op",
        "pointer",
        "value",
        "pointer",
        "pointer",
        "jsonPointerFromPath",
        "path",
        "pathFromJsonPointer",
        "pointer",
        "path",
        "path",
        "value",
        "pointer",
        "value",
        "mark",
        "oldValue",
        "op",
        "oldValue",
        "op",
        "op",
        "op",
        "path",
        "value",
        "value",
        "cloneValue",
        "value",
        "path",
        "value",
        "i",
        "path",
        "i",
        "target",
        "path",
        "path",
        "i",
        "target",
        "target",
        "path",
        "i",
        "path",
        "path",
        "target",
        "target",
        "target",
        "key",
        "key",
        "target",
        "target",
        "key",
        "value",
        "target",
        "key",
        "value",
        "pointer",
        "pointer",
        "pointer",
        "jsonPointerFromPath",
        "path",
        "pathFromJsonPointer",
        "pointer",
        "path",
        "path",
        "pointer",
        "mark",
        "oldValue",
        "op",
        "oldValue",
        "op",
        "op",
        "op",
        "path",
        "path",
        "i",
        "path",
        "i",
        "target",
        "path",
        "path",
        "i",
        "target",
        "target",
        "path",
        "i",
        "path",
        "path",
        "target",
        "target",
        "target",
        "key",
        "key",
        "target",
        "target",
        "key",
        "target",
        "key",
        "pointer",
        "pointer",
        "pointer",
        "jsonPointerFromPath",
        "path",
        "pathFromJsonPointer",
        "pointer",
        "i",
        "path",
        "i",
        "target",
        "target",
        "target",
        "path",
        "i",
        "target",
        "diff",
        "diff",
        "cloneValue",
        "diff",
        "diff",
        "j",
        "j",
        "lessThanMark",
        "j",
        "op",
        "rollbackPoint",
        "j",
        "changes",
        "rollbackPoint",
        "invertOperation",
        "diff",
        "i",
        "diffLen",
        "i",
        "diff",
        "i",
        "j",
        "histLen",
        "j",
        "lessThanMark",
        "op",
        "j",
        "insertionPoint",
        "j",
        "changes",
        "changes",
        "previousInsertionPoint",
        "insertionPoint",
        "changes",
        "op",
        "insertionPoint",
        "op",
        "op",
        "insertionPoint",
        "previousInsertionPoint",
        "insertionPoint",
        "changes",
        "changes",
        "previousInsertionPoint",
        "changes",
        "i",
        "changesLen",
        "i",
        "changes",
        "i",
        "op",
        "op",
        "path",
        "path",
        "pathFromJsonPointer",
        "op",
        "path",
        "op",
        "op",
        "op",
        "path",
        "path",
        "pathFromJsonPointer",
        "op",
        "path",
        "changes",
        "callback",
        "callback",
        "callback",
        "callback",
        "eventListeners",
        "i",
        "len",
        "i",
        "eventListeners",
        "i",
        "callback",
        "eventListeners",
        "i",
        "data",
        "eventListeners",
        "i",
        "len",
        "i",
        "eventListeners",
        "i",
        "data",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "cloneValue",
        "cloneObject",
        "v",
        "obj",
        "key",
        "obj",
        "res",
        "key",
        "cloneValue",
        "obj",
        "key",
        "res",
        "pointer",
        "pointer",
        "pointer",
        "parts",
        "part",
        "part",
        "part",
        "part",
        "path",
        "path",
        "path",
        "part",
        "part",
        "mark1",
        "mark2",
        "i",
        "mark1",
        "mark2",
        "i",
        "mark1",
        "i",
        "mark2",
        "i",
        "mark1",
        "i",
        "mark2",
        "i",
        "mark1",
        "mark2",
        "mark1",
        "mark2",
        "nodejs",
        "require",
        "randomBytes",
        "buf",
        "buf",
        "buf",
        "buf",
        "browser",
        "Uint32Array",
        "buf",
        "buf",
        "buf",
        "buf",
        "buf",
        "rand32NoEntropy",
        "rand32NoEntropy",
        "rand32NoEntropy",
        "rand32NoEntropy",
        "JsonSync"
    ],
    "literals": [
        "'function'",
        "'object'",
        "'object'",
        "'string'",
        "'add'",
        "'broadcast'",
        "'localUpdate'",
        "\"\"",
        "'object'",
        "'JsonSync had an add operation on '",
        "' but it could not find an object or an array at '",
        "'/'",
        "'-'",
        "'string'",
        "'remove'",
        "'broadcast'",
        "'localUpdate'",
        "'object'",
        "'JsonSync had a remove operation on '",
        "' but it could not find an object or an array at '",
        "'/'",
        "'-'",
        "'string'",
        "'object'",
        "'add'",
        "'string'",
        "'remove'",
        "'string'",
        "'update'",
        "'function'",
        "'Non-function callback'",
        "'add'",
        "'remove'",
        "'remove'",
        "'add'",
        "'boolean'",
        "'number'",
        "'string'",
        "'string'",
        "'pathFromJsonPointer() only supports strings, '",
        "'something else was given'",
        "'/'",
        "'/'",
        "'~'",
        "'jsonPointerFromPath() only supports arrays, '",
        "'something else was given'",
        "'/'",
        "'~0'",
        "'~1'",
        "'/'",
        "'crypto'",
        "'JsonSync could not find any good source of entropy.'"
    ],
    "variables": [
        "nodejs",
        "browser",
        "JsonSync",
        "mark",
        "path",
        "pointer",
        "path",
        "oldValue",
        "mark",
        "op",
        "target",
        "i",
        "key",
        "path",
        "pointer",
        "path",
        "oldValue",
        "mark",
        "op",
        "target",
        "i",
        "key",
        "path",
        "pointer",
        "path",
        "target",
        "i",
        "changes",
        "rollbackPoint",
        "op",
        "j",
        "previousInsertionPoint",
        "rollbackPoint",
        "i",
        "diffLen",
        "op",
        "insertionPoint",
        "j",
        "previousInsertionPoint",
        "histLen",
        "i",
        "changesLen",
        "op",
        "path",
        "path",
        "eventListeners",
        "i",
        "len",
        "eventListeners",
        "i",
        "len",
        "invertOperation",
        "cloneValue",
        "cloneObject",
        "res",
        "pathFromJsonPointer",
        "parts",
        "jsonPointerFromPath",
        "i",
        "rand128",
        "randomBytes",
        "buf",
        "buf",
        "rand32NoEntropy"
    ],
    "comments": [
        "https://github.com/umdjs/umd/blob/master/templates/returnExports.js",
        "Main constructor.",
        "options:",
        "- machine: list of numbers identifying the current node in the network.",
        "Collisions break your data's convergence guarantees, so beware.",
        "Optional. It defaults to using whatever good source of randomness there is.",
        "- value: default JSON value.",
        "Local copy of the JSON data.",
        "TODO: support direct edits like `data.content.comments.shift()` through",
        "Proxies. We'd need to trap set() and deleteProperty().",
        "Lamport timestamp.",
        "Local identifier. Used to ensure total order in operations in the Lamport",
        "timestamps.",
        "List of operations. Conforms to JSON Patch, with marks.",
        "The op is an operation from outside.",
        "Operations.",
        "Ensure that this is a JSON Pointer, even if given a list.",
        "Perform the change locally.",
        "Transmit the change.",
        "true if the operation was valid.",
        "path: list of keys.",
        "Ensure that this is a JSON Pointer, even if given a list.",
        "Perform the change locally.",
        "Transmit the change.",
        "true if the operation was valid.",
        "path: list of keys.",
        "Give the JSON object corresponding to that JSON Pointer (or path).",
        "Ensure that this is a JSON Pointer, even if given a list.",
        "Use this when we receive a diff from the network.",
        "The diff is a list of operations, as per JSON Patch, with marks.",
        "We assume that within a diff, marks are correctly ordered.",
        "changes are a list of changes that will be sent to the view.",
        "We need to find the oldest point to which we must rollback.",
        "We must insert it at the right position in history.",
        "Perform the changes locally.",
        "Event emission.",
        "Invert any JSON Patch operation.",
        "Returns undefined if it cannot.",
        "Convert a JSON Pointer to a list.",
        "It is important to end with the ~ replacement,",
        "to avoid converting `~01` to a `/`.",
        "It is important to start with the ~ replacement,",
        "to avoid converting `/` to `~01`.",
        "Mark is a list. Return the alphabetically-ordered lesser one:",
        "-1 if mark1 is smaller than mark2, 1 if it is higher, 0 otherwise.",
        "else go on.",
        "We have gone through all of them, they are all equal.",
        "Random 128-bit represented as a list of numbers.",
        "If we have not found a good way to return yet, we will fall back on raw JS.",
        "But it is absolutely not enough for our guarantee requirements."
    ],
    "docstrings": [],
    "functions": [
        "lessThanMark"
    ],
    "classes": []
}