{
    "identifiers": [
        "provide",
        "Injector",
        "describe",
        "expect",
        "it",
        "xit",
        "inject",
        "async",
        "fakeAsync",
        "beforeEachProviders",
        "ResponseOptions",
        "Response",
        "Http",
        "BaseRequestOptions",
        "RequestMethod",
        "MockBackend",
        "MockConnection",
        "Observable",
        "MealSetXPath",
        "XpathResolutionResult",
        "XpathService",
        "Location",
        "LocationJSON",
        "Marker",
        "MapService",
        "MockBackend",
        "BaseRequestOptions",
        "backend",
        "defaultOptions",
        "Http",
        "backend",
        "defaultOptions",
        "describe",
        "beforeEachProviders",
        "MockBackend",
        "BaseRequestOptions",
        "provide",
        "Http",
        "mockHttpProvider",
        "MapService",
        "it",
        "async",
        "inject",
        "MapService",
        "testService",
        "spyOn",
        "localStorage",
        "testService",
        "generateFakeHome",
        "expect",
        "setItemSpy",
        "expect",
        "setItemSpy",
        "expect",
        "setItemSpy",
        "it",
        "async",
        "inject",
        "MapService",
        "testService",
        "spyOn",
        "localStorage",
        "key",
        "generateFakeHome",
        "testService",
        "expect",
        "getItemSpy",
        "expect",
        "marker",
        "expect",
        "marker",
        "expect",
        "marker",
        "expect",
        "marker",
        "expect",
        "marker",
        "expect",
        "marker",
        "it",
        "async",
        "inject",
        "MapService",
        "testService",
        "spyOn",
        "localStorage",
        "key",
        "testService",
        "expect",
        "getItemSpy",
        "expect",
        "marker",
        "it",
        "async",
        "inject",
        "MapService",
        "testService",
        "spyOn",
        "localStorage",
        "key",
        "testService",
        "expect",
        "getItemSpy",
        "expect",
        "marker",
        "it",
        "async",
        "inject",
        "MapService",
        "MockBackend",
        "testService",
        "backend",
        "backend",
        "connection",
        "expect",
        "connection",
        "RequestMethod",
        "expect",
        "connection",
        "ResponseOptions",
        "generateMockGeoResponse",
        "connection",
        "Response",
        "response",
        "testService",
        "expect",
        "locationObs",
        "locationObs",
        "data",
        "expect",
        "data",
        "expect",
        "data",
        "expect",
        "data",
        "it",
        "async",
        "inject",
        "MapService",
        "MockBackend",
        "testService",
        "backend",
        "backend",
        "connection",
        "expect",
        "connection",
        "RequestMethod",
        "expect",
        "connection",
        "ResponseOptions",
        "connection",
        "Response",
        "response",
        "testService",
        "expect",
        "locationObs",
        "locationObs",
        "data",
        "expect",
        "data",
        "it",
        "async",
        "inject",
        "MapService",
        "testService",
        "testService",
        "expect",
        "distance",
        "expect",
        "distance",
        "Marker",
        "Location"
    ],
    "literals": [
        "'@angular/core'",
        "'@angular/core/testing'",
        "'@angular/http'",
        "'@angular/http/testing'",
        "'rxjs/Rx'",
        "'../meal-set'",
        "'../xpath'",
        "'./index'",
        "'Test MapService'",
        "' should cache home marker'",
        "'setItem'",
        "'home'",
        "'home'",
        "'address'",
        "'555555'",
        "' should return cached marker if exists'",
        "'getItem'",
        "'home'",
        "'home'",
        "'address'",
        "'555555'",
        "' should return undefined if no cached home exists'",
        "'getItem'",
        "'home'",
        "' should return undefined if cached value cannot be parsed'",
        "'getItem'",
        "'bla'",
        "'home'",
        "' should extract location from GMaps response'",
        "'Szentendrei%20ut%20135'",
        "'Budapest, Szentendrei ut 135'",
        "' should return undefined as location if address is unknown'",
        "'Pointe%20Source%20d\\'Argent'",
        "\"results\"",
        "\"status\"",
        "\"ZERO_RESULTS\"",
        "'Pointe Source d\\'Argent'",
        "' should calculate distance correctly'",
        "'home'",
        "'address'",
        "'555555'",
        "string",
        "{\n     \"results\" : [\n        {\n           \"address_components\" : [\n              {\n                 \"long_name\" : \"135\",\n                 \"short_name\" : \"135\",\n                 \"types\" : [ \"street_number\" ]\n              },\n              {\n                 \"long_name\" : \"Szentendrei út\",\n                 \"short_name\" : \"Szentendrei út\",\n                 \"types\" : [ \"route\" ]\n              },\n              {\n                 \"long_name\" : \"III. kerület\",\n                 \"short_name\" : \"III. kerület\",\n                 \"types\" : [ \"political\", \"sublocality\", \"sublocality_level_1\" ]\n              },\n              {\n                 \"long_name\" : \"Budapest\",\n                 \"short_name\" : \"Budapest\",\n                 \"types\" : [ \"locality\", \"political\" ]\n              },\n              {\n                 \"long_name\" : \"Budapest\",\n                 \"short_name\" : \"Budapest\",\n                 \"types\" : [ \"administrative_area_level_2\", \"political\" ]\n              },\n              {\n                 \"long_name\" : \"Budapest\",\n                 \"short_name\" : \"Budapest\",\n                 \"types\" : [ \"administrative_area_level_1\", \"political\" ]\n              },\n              {\n                 \"long_name\" : \"Magyarország\",\n                 \"short_name\" : \"HU\",\n                 \"types\" : [ \"country\", \"political\" ]\n              },\n              {\n                 \"long_name\" : \"1031\",\n                 \"short_name\" : \"1031\",\n                 \"types\" : [ \"postal_code\" ]\n              }\n           ],\n           \"formatted_address\" : \"Budapest, Szentendrei út 135, 1031 Magyarország\",\n           \"geometry\" : {\n              \"location\" : {\n                 \"lat\" : 47.562754,\n                 \"lng\" : 19.048568\n              },\n              \"location_type\" : \"ROOFTOP\",\n              \"viewport\" : {\n                 \"northeast\" : {\n                    \"lat\" : 47.56410298029149,\n                    \"lng\" : 19.0499169802915\n                 },\n                 \"southwest\" : {\n                    \"lat\" : 47.5614050197085,\n                    \"lng\" : 19.0472190197085\n                 }\n              }\n           },\n           \"place_id\" : \"ChIJPcO4G53ZQUcRdn6ZDw_WnuA\",\n           \"types\" : [ \"street_address\" ]\n        }\n     ],\n     \"status\" : \"OK\"\n  }"
    ],
    "variables": [
        "mockHttpProvider",
        "setItemSpy",
        "getItemSpy",
        "marker",
        "getItemSpy",
        "marker",
        "getItemSpy",
        "marker",
        "response",
        "locationObs",
        "response",
        "locationObs",
        "distance"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "generateFakeHome",
        "generateMockGeoResponse"
    ],
    "classes": []
}