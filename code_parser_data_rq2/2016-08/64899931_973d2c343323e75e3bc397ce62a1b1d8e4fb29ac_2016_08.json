{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "process",
        "process",
        "escapeChar",
        "path",
        "cwd",
        "path",
        "cwd",
        "path",
        "cwd",
        "grunt",
        "require",
        "grunt",
        "buildDirectory",
        "path",
        "buildDirectory",
        "distDirectory",
        "path",
        "distDirectory",
        "grunt",
        "grunt",
        "grunt",
        "emberPath",
        "path",
        "cwd",
        "grunt",
        "chalk",
        "error",
        "grunt",
        "chalk",
        "error",
        "mode",
        "mode",
        "emberPath",
        "emberPath",
        "emberPath",
        "path",
        "process",
        "path",
        "cwd",
        "grunt",
        "cfg",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "process",
        "process",
        "process",
        "cfg",
        "process",
        "grunt",
        "require",
        "process",
        "process",
        "config",
        "done",
        "err",
        "grunt",
        "err",
        "done",
        "grunt",
        "require",
        "require",
        "migration",
        "models",
        "migration",
        "done",
        "err",
        "grunt",
        "err",
        "grunt",
        "test",
        "test",
        "grunt",
        "test",
        "test",
        "test",
        "test",
        "test",
        "fs",
        "test",
        "grunt",
        "cfg",
        "test",
        "grunt",
        "cfg",
        "grunt",
        "grunt",
        "_",
        "cfg",
        "file",
        "path",
        "cwd",
        "file",
        "fs",
        "filePath",
        "grunt",
        "process",
        "grunt",
        "process",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "grunt",
        "require",
        "process",
        "Git",
        "Git",
        "path",
        "cwd",
        "first",
        "second",
        "_",
        "second",
        "contributor",
        "_",
        "first",
        "contributor",
        "contributorInFirst",
        "contributorInFirst",
        "contributor",
        "first",
        "contributor",
        "_",
        "first",
        "grunt",
        "thisGit",
        "thisGit",
        "clientGit",
        "clientGit",
        "props",
        "getContribList",
        "oauthKey",
        "props",
        "getContribList",
        "oauthKey",
        "props",
        "results",
        "mergeContribs",
        "results",
        "results",
        "grunt",
        "_",
        "contributors",
        "done",
        "error",
        "grunt",
        "error",
        "error",
        "grunt",
        "error",
        "error",
        "grunt",
        "error",
        "error",
        "require",
        "error",
        "done",
        "grunt",
        "grunt",
        "fs",
        "pattern",
        "pattern",
        "pattern",
        "pattern",
        "grunt",
        "configureGrunt"
    ],
    "literals": [
        "'lodash'",
        "'chalk'",
        "'fs-extra'",
        "'path'",
        "'bluebird'",
        "'git-wrapper'",
        "'^'",
        "'\\\\'",
        "'$1'",
        "'.build'",
        "'.dist'",
        "'/core/client/node_modules/.bin/ember'",
        "'matchdep'",
        "'grunt-*'",
        "'!grunt-cli'",
        "'release'",
        "'release'",
        "'Build'",
        "'package.json'",
        "'server/views/default.hbs'",
        "'built/assets/ghost.js'",
        "'built/assets/ghost.css'",
        "'built/assets/vendor.js'",
        "'built/assets/vendor.css'",
        "'content/themes/casper/assets/css/*.css'",
        "'content/themes/casper/assets/js/*.js'",
        "'core/built/assets/*.js'",
        "'core/client/dist/index.html'",
        "'core/ghost-server.js'",
        "'core/server/**/*.js'",
        "'express:dev'",
        "'core/client/app/styles/**/*.css'",
        "'shell:csscombfix'",
        "'index.js'",
        "'Ghost is running'",
        "'testing'",
        "'.jshintrc'",
        "'*.js'",
        "'!config*.js'",
        "'core/*.js'",
        "'core/server/**/*.js'",
        "'core/test/**/*.js'",
        "'!core/test/coverage/**'",
        "'!core/shared/vendor/**/*.js'",
        "'*.js'",
        "'!config*.js'",
        "'core/*.js'",
        "'core/server/**/*.js'",
        "'core/test/**/*.js'",
        "'!core/test/coverage/**'",
        "'!core/shared/vendor/**/*.js'",
        "'bdd'",
        "'reporter'",
        "'spec'",
        "'15000'",
        "'reporter-output'",
        "'core/server/overrides'",
        "'core/test/unit/**/*_spec.js'",
        "'core/server/apps/**/tests/*_spec.js'",
        "'core/test/integration/**/*_spec.js'",
        "'core/test/integration/*_spec.js'",
        "'core/test/functional/routes/**/*_spec.js'",
        "'core/test/functional/module/**/*_spec.js'",
        "'core/test/unit'",
        "'core/server/apps'",
        "'**/*_spec.js'",
        "'core/test/coverage/unit'",
        "'--timeout=15000'",
        "'--require'",
        "'core/server/overrides'",
        "'core/client'",
        "'core/server/built'",
        "'core/test/integration'",
        "'core/server/apps'",
        "'core/test/functional'",
        "'core/test/unit'",
        "'core/test/coverage/all'",
        "'**/*_spec.js'",
        "'--timeout=15000'",
        "'--require'",
        "'core/server/overrides'",
        "'core/client'",
        "'core/server/built'",
        "' build --watch'",
        "'/core/client/'",
        "'Ember-cli::'",
        "'Ember-cli::'",
        "'prod'",
        "' build --environment=production --silent'",
        "'dev'",
        "' build'",
        "'test'",
        "' test --silent'",
        "'/core/client/'",
        "'npm shrinkwrap'",
        "'npm prune'",
        "'npm dedupe'",
        "'/node_modules/.bin/csscomb -c core/client/app/styles/csscomb.json -v core/client/app/styles'",
        "'docs'",
        "'.'",
        "'node_modules,bower_components,content,core/client,*test,*doc*,'",
        "'*vendor,config.js,*buil*,.dist*,.idea,.git*,.travis.yml,.bower*,.editorconfig,.js*,*.md'",
        "'fileSearch'",
        "'core/built/**'",
        "'core/client/dist/**'",
        "'core/client/public/assets/img/contributors/**'",
        "'core/client/app/templates/-contributors.hbs'",
        "'<%= paths.releaseBuild %>/**'",
        "'content/data/ghost-test.db'",
        "'.tmp/**'",
        "'node_modules/**'",
        "'core/client/bower_components/**'",
        "'core/client/node_modules/**'",
        "'<%= paths.releaseDist %>/Ghost-<%= pkg.version %>.zip'",
        "'<%= paths.releaseBuild %>/'",
        "'**'",
        "'--init'",
        "'core/shared/ghost-url.min.js'",
        "'core/shared/ghost-url.js'",
        "'core/client'",
        "'init'",
        "'core/client'",
        "'lint'",
        "'help'",
        "'Outputs help information if you type `grunt help` instead of `grunt --help`'",
        "'Type `grunt --help` to get the details of available grunt tasks.'",
        "'docs'",
        "'Generate Docs'",
        "'docker'",
        "'watch-docs'",
        "'core/server/**/*'",
        "'index.js'",
        "'Gruntfile.js'",
        "'config.example.js'",
        "'docker'",
        "'watch:docs'",
        "'setTestEnv'",
        "'Use \"testing\" Ghost config; unless we are running on travis (then show queries for debugging)'",
        "'testing'",
        "'ensureConfig'",
        "'./core/server/config'",
        "'client'",
        "'cleanDatabase'",
        "'./core/server/models'",
        "'./core/server/data/migration'",
        "'test'",
        "'Run a particular spec file from the core/test directory e.g. `grunt test:unit/apps_spec.js`'",
        "'No test provided. `grunt test` expects a filename. e.g.: `grunt test:unit/apps_spec.js`. Did you mean `npm test` or `grunt validate`?'",
        "'core/test/'",
        "'/**'",
        "'This file does not exist!'",
        "'test-setup'",
        "'mochacli:single'",
        "'stubClientFiles'",
        "'/core/'",
        "'validate'",
        "'Run tests and lint code'",
        "'server'",
        "'stubClientFiles'",
        "'test-server'",
        "'lint'",
        "'lint'",
        "'validate-all'",
        "'validate-all'",
        "'Lint code and run all tests'",
        "'init'",
        "'lint'",
        "'test-all'",
        "'test-all'",
        "'Run tests for both server and client'",
        "'test-server'",
        "'test-client'",
        "'test-server'",
        "'Run server tests'",
        "'test-routes'",
        "'test-module'",
        "'test-unit'",
        "'test-integration'",
        "'test-client'",
        "'Run client tests'",
        "'test-ember'",
        "'lint'",
        "'Run the code style checks and linter for server'",
        "'jshint'",
        "'jscs'",
        "'lint-all'",
        "'Run the code style checks and linter for server and client'",
        "'lint'",
        "'subgrunt:lint'",
        "'test-setup'",
        "'Setup ready to run tests'",
        "'clean:test'",
        "'setTestEnv'",
        "'ensureConfig'",
        "'test-unit'",
        "'Run unit tests (mocha)'",
        "'test-setup'",
        "'mochacli:unit'",
        "'test-integration'",
        "'Run integration tests (mocha + db access)'",
        "'test-setup'",
        "'mochacli:integration'",
        "'test-routes'",
        "'Run functional route tests (mocha)'",
        "'test-setup'",
        "'mochacli:routes'",
        "'test-module'",
        "'Run functional module tests (mocha)'",
        "'test-setup'",
        "'mochacli:module'",
        "'test-ember'",
        "'Run the ember unit tests'",
        "'test-setup'",
        "'shell:ember:test'",
        "'coverage'",
        "'Generate unit and integration (mocha) tests coverage report'",
        "'test-setup'",
        "'mocha_istanbul:coverage'",
        "'coverage-all'",
        "'Generate unit and integration tests coverage report'",
        "'test-setup'",
        "'mocha_istanbul:coverage_all'",
        "'master-warn'",
        "'Outputs a warning to runners of grunt prod, that master shouldn\\'t be used for live blogs'",
        "'Use the '",
        "'stable'",
        "' branch for live blogs. '",
        "'Never'",
        "' master!'",
        "'>'",
        "'Always two there are, no more, no less. A master and a '",
        "'stable'",
        "'.'",
        "'init'",
        "'Prepare the project for development'",
        "'update_submodules'",
        "'subgrunt:init'",
        "'clean:tmp'",
        "'default'",
        "'default'",
        "'Build JS & templates for development'",
        "'shell:ember:dev'",
        "'prod'",
        "'Build JS & templates for production'",
        "'shell:ember:prod'",
        "'uglify:prod'",
        "'master-warn'",
        "'dev'",
        "'Dev Mode; watch files and restart server on changes'",
        "'bgShell:ember'",
        "'express:dev'",
        "'watch'",
        "'contributors'",
        "'Generate a list of contributors for a release'",
        "'gh-contrib-list'",
        "'git-dir'",
        "'/core/client/.git'",
        "'id'",
        "'commitCount'",
        "'desc'",
        "'You must supply a tag name. Please run like this: `grunt contributors:<tag-name>`'",
        "'rev-list'",
        "'rev-list'",
        "'tryghost'",
        "'ghost'",
        "'tryghost'",
        "'ghost-admin'",
        "'name'",
        "', '",
        "'GitHub API request returned status: '",
        "'Rate limit data: limit: %d, remaining: %d, reset: %s'",
        "'moment'",
        "'release'",
        "'Release task - creates a final built zip\\n'",
        "' - Do our standard build steps \\n'",
        "' - Copy files to release-folder/#/#{version} directory\\n'",
        "' - Clean out unnecessary files (travis, .git*, etc)\\n'",
        "' - Zip files in release-folder to dist-folder/#{version} directory'",
        "'copy.release'",
        "'.npmignore'",
        "'utf8'",
        "'\\n'",
        "'!'",
        "'!'",
        "'<%= paths.releaseBuild %>/'",
        "'init'",
        "'prod'",
        "'clean:release'",
        "'shell:dedupe'",
        "'shell:prune'",
        "'shell:shrinkwrap'",
        "'copy:release'",
        "'compress:release'"
    ],
    "variables": [
        "_",
        "chalk",
        "fs",
        "path",
        "Git",
        "escapeChar",
        "cwd",
        "buildDirectory",
        "distDirectory",
        "emberPath",
        "configureGrunt",
        "cfg",
        "config",
        "done",
        "done",
        "models",
        "migration",
        "filePath",
        "getContribList",
        "oauthKey",
        "thisGit",
        "clientGit",
        "done",
        "contributorInFirst",
        "contributors"
    ],
    "comments": [
        "# Task automation for Ghost",
        "",
        "Run various tasks when developing for and working with Ghost.",
        "",
        "",
        "## Grunt configuration",
        "#### Load all grunt tasks",
        "",
        "Find all of the task which start with `grunt-` and load them, rather than explicitly declaring them all",
        "#### Common paths used by tasks",
        "Standard build type, for when we have nightlies again.",
        "Load package.json so that we can create correctly versioned releases.",
        "### grunt-contrib-watch",
        "Watch files and livereload in the browser during development.",
        "See the [grunt dev](#live%20reload) task for how this is used.",
        "### grunt-express-server",
        "Start a Ghost expess server for use in development and testing",
        "### grunt-contrib-jshint",
        "Linting rules, run as part of `grunt validate`. See [grunt validate](#validate) and its subtasks for",
        "more information.",
        "note: i added this, do we want this linted?",
        "note: i added this, do we want this linted?",
        "### grunt-mocha-cli",
        "Configuration for the mocha test runner, used to run unit, integration and route tests as part of",
        "`grunt validate`. See [grunt validate](#validate) and its sub tasks for more information.",
        "#### All Unit tests",
        "#### All Integration tests",
        "#### All Route tests",
        "#### All Module tests",
        "#### Run single test (src is set dynamically, see grunt task 'test')",
        "### grunt-mocha-istanbul",
        "Configuration for the mocha test coverage generator",
        "`grunt coverage`.",
        "they can also have coverage generated for them & the order doesn't matter",
        "### grunt-bg-shell",
        "Used to run ember-cli watch in the background",
        "### grunt-shell",
        "Command line tools where it's easier to run a command directly than configure a grunt plugin",
        "### grunt-docker",
        "Generate documentation from code",
        "### grunt-contrib-clean",
        "Clean up files as part of other tasks",
        "### grunt-contrib-compress",
        "Zip up files for builds / releases",
        "### grunt-update-submodules",
        "Grunt task to update git submodules",
        "### grunt-subgrunt",
        "Run grunt tasks in submodule Gruntfiles",
        "Load the configuration",
        "# Custom Tasks",
        "Ghost has a number of useful tasks that we use every day in development. Tasks marked as *Utility* are used",
        "by grunt to perform current actions, but isn't useful to developers.",
        "",
        "Skip ahead to the section on:",
        "",
        "`grunt init`, `grunt` & `grunt prod` or live reload with `grunt dev`",
        "`grunt validate`, the `grunt test-*` sub-tasks or generate a coverage report with `grunt coverage`.",
        "### Help",
        "Run `grunt help` on the commandline to get a print out of the available tasks and details of",
        "what each one does along with any available options. This is an alias for `grunt --help`",
        "### Documentation",
        "Run `grunt docs` to generate annotated source code using the documentation described in the code comments.",
        "Runun `grunt watch-docs` to setup livereload & watch whilst you're editing the docs",
        "## Testing",
        "Ghost has an extensive set of test suites. The following section documents the various types of tests",
        "and how to run them.",
        "",
        "TLDR; run `grunt validate`",
        "#### Set Test Env *(Utility Task)*",
        "Set the NODE_ENV to 'testing' unless the environment is already set to TRAVIS.",
        "This ensures that the tests get run under the correct environment, using the correct database, and",
        "that they work as expected. Trying to run tests with no ENV set will throw an error to do with `client`.",
        "#### Ensure Config *(Utility Task)*",
        "Make sure that we have a `config.js` file when running tests",
        "Ghost requires a `config.js` file to specify the database settings etc. Ghost comes with an example file:",
        "`config.example.js` which is copied and renamed to `config.js` by the bootstrap process",
        "#### Reset Database to \"New\" state *(Utility Task)*",
        "Drops all database tables and then runs the migration process to put the database",
        "in a \"new\" state.",
        "### Test",
        "",
        "`grunt test:unit/apps_spec.js` will run just the tests inside the apps_spec.js file",
        "",
        "It works for any path relative to the core/test folder. It will also run all the tests in a single directory",
        "You can also run a test with grunt test:core/test/unit/... to get bash autocompletion",
        "",
        "`grunt test:integration/api` - runs the api integration tests",
        "`grunt test:integration` - runs the integration tests in the root folder and excludes all api & model tests",
        "CASE: execute folder",
        "#### Stub out ghost files *(Utility Task)*",
        "Creates stub files in the built directory and the views directory",
        "so that the test environments do not need to build out the client files",
        "### Validate",
        "",
        "`grunt validate` will build, lint and test your local Ghost codebase.",
        "",
        "`grunt validate` is one of the most important and useful grunt tasks that we have available to use. It",
        "manages the build of your environment and then calls `grunt test`",
        "",
        "`grunt validate` is called by `npm test` and is used by Travis.",
        "### Test-All",
        "",
        "`grunt test-all` will lint and test your pre-built local Ghost codebase.",
        "",
        "`grunt test-all` runs all 6 test suites. See the individual sub tasks below for",
        "details of each of the test suites.",
        "",
        "### Lint",
        "",
        "`grunt lint` will run the linter and the code style checker so you can make sure your code is pretty",
        "### test-setup *(utility)(",
        "`grunt test-setup` will run all the setup tasks required for running tests",
        "### Unit Tests *(sub task)*",
        "`grunt test-unit` will run just the unit tests",
        "",
        "If you need to run an individual unit test file, you can use the `grunt test:<file_path>` task:",
        "",
        "`grunt test:unit/config_spec.js`",
        "",
        "This also works for folders (although it isn't recursive), E.g.",
        "",
        "`grunt test:unit/server_helpers`",
        "",
        "Unit tests are run with [mocha](http://mochajs.org/) using",
        "[should](https://github.com/visionmedia/should.js) to describe the tests in a highly readable style.",
        "Unit tests do **not** touch the database.",
        "A coverage report can be generated for these tests using the `grunt test-coverage` task.",
        "### Integration tests *(sub task)*",
        "`grunt test-integration` will run just the integration tests",
        "",
        "Provided you already have a `config.js` file, you can run just the model integration tests by running:",
        "",
        "`grunt test:integration/model`",
        "",
        "Or just the api integration tests by running:",
        "",
        "`grunt test:integration/api`",
        "",
        "Integration tests are run with [mocha](http://mochajs.org/) using",
        "[should](https://github.com/visionmedia/should.js) to describe the tests in a highly readable style.",
        "Integration tests are different to the unit tests because they make requests to the database.",
        "",
        "If you need to run an individual integration test file you can use the `grunt test:<file_path>` task:",
        "",
        "`grunt test:integration/api/api_tags_spec.js`",
        "",
        "Their purpose is to test that both the api and models behave as expected when the database layer is involved.",
        "These tests are run against sqlite3, mysql and pg on travis and ensure that differences between the databases",
        "don't cause bugs. At present, pg often fails and is not officially supported.",
        "",
        "A coverage report can be generated for these tests using the `grunt test-coverage` task.",
        "### Route tests *(sub task)*",
        "`grunt test-routes` will run just the route tests",
        "",
        "If you need to run an individual route test file, you can use the `grunt test:<file_path>` task:",
        "",
        "`grunt test:functional/routes/admin_spec.js`",
        "",
        "Route tests are run with [mocha](http://mochajs.org/) using",
        "[should](https://github.com/visionmedia/should.js) and [supertest](https://github.com/visionmedia/supertest)",
        "to describe and create the tests.",
        "",
        "Supertest enables us to describe requests that we want to make, and also describe the response we expect to",
        "receive back. It works directly with express, so we don't have to run a server to run the tests.",
        "",
        "The purpose of the route tests is to ensure that all of the routes (pages, and API requests) in Ghost",
        "are working as expected, including checking the headers and status codes received. It is very easy and",
        "quick to test many permutations of routes / urls in the system.",
        "### Module tests *(sub task)*",
        "`grunt test-module` will run just the module tests",
        "",
        "The purpose of the module tests is to ensure that Ghost can be used as an npm module and exposes all",
        "required methods to interact with it.",
        "### Ember unit tests *(sub task)*",
        "`grunt test-ember` will run just the ember unit tests",
        "### Coverage",
        "`grunt coverage` will generate a report for the Unit Tests.",
        "",
        "This is not currently done as part of CI or any build, but is a tool we have available to keep an eye on how",
        "well the unit and integration tests are covering the code base.",
        "Ghost does not have a minimum coverage level - we're more interested in ensuring important and useful areas",
        "of the codebase are covered, than that the whole codebase is covered to a particular level.",
        "",
        "Key areas for coverage are: helpers and theme elements, apps / GDK, the api and model layers.",
        "#### Master Warning *(Utility Task)*",
        "Warns git users not ot use the `master` branch in production.",
        "`master` is an unstable branch and shouldn't be used in production as you run the risk of ending up with a",
        "database in an unrecoverable state. Instead there is a branch called `stable` which is the equivalent of the",
        "release zip for git users.",
        "## Building assets",
        "",
        "Ghost's GitHub repository contains the un-built source code for Ghost. If you're looking for the already",
        "built release zips, you can get these from the [release page](https://github.com/TryGhost/Ghost/releases) on",
        "GitHub or from https://ghost.org/download. These zip files are created using the [grunt release](#release)",
        "task.",
        "",
        "If you want to work on Ghost core, or you want to use the source files from GitHub, then you have to build",
        "the Ghost assets in order to make them work.",
        "",
        "There are a number of grunt tasks available to help with this. Firstly after fetching an updated version of",
        "the Ghost codebase, after running `npm install`, you will need to run [grunt init](#init%20assets).",
        "",
        "For production blogs you will need to run [grunt prod](#production%20assets).",
        "",
        "For updating assets during development, the tasks [grunt](#default%20asset%20build) and",
        "[grunt dev](#live%20reload) are available.",
        "### Init assets",
        "`grunt init` - will run an initial asset build for you",
        "",
        "Grunt init runs `npm install && bower install` inside `core/client` as well as the standard asset build",
        "tasks which occur when you run just `grunt`. This fetches the latest client-side dependencies.",
        "",
        "This task is very important, and should always be run when fetching down an updated code base just after",
        "running `npm install`.",
        "",
        "`bower` does have some quirks, such as not running as root. If you have problems please try running",
        "`grunt init --verbose` to see if there are any errors.",
        "### Default asset build",
        "`grunt` - default grunt task",
        "",
        "Build assets and dev version of the admin app.",
        "### Production assets",
        "`grunt prod` - will build the minified assets used in production.",
        "",
        "It is otherwise the same as running `grunt`, but is only used when running Ghost in the `production` env.",
        "### Live reload",
        "`grunt dev` - build assets on the fly whilst developing",
        "",
        "If you want Ghost to live reload for you whilst you're developing, you can do this by running `grunt dev`.",
        "This works hand-in-hand with the [livereload](http://livereload.com/) chrome extension.",
        "",
        "`grunt dev` manages starting an express server and restarting the server whenever core files change (which",
        "require a server restart for the changes to take effect) and also manage reloading the browser whenever",
        "frontend code changes.",
        "",
        "Note that the current implementation of watch only works with casper, not other themes.",
        "### Contributors",
        "`grunt contributors:<tag-name>` - generate a comma-separated list of contributors for a Ghost release.",
        "",
        "You must supply a tag name to us",
        "",
        "### Release",
        "Run `grunt release` to create a Ghost release zip file.",
        "Uses the files specified by `.npmignore` to know what should and should not be included.",
        "Runs the asset generation tasks for both development and production so that the release can be used in",
        "either environment, and packages all the files up into a zip.",
        "#### Build File Patterns",
        "A list of files and patterns to include when creating a release zip.",
        "This is read from the `.npmignore` file and all patterns are inverted as the `.npmignore`",
        "file defines what to ignore, whereas we want to define what to include."
    ],
    "docstrings": [
        "**Usage instructions:** can be found in the [Custom Tasks](#custom%20tasks) section or by running `grunt --help`.",
        "**Debug tip:** If you have any problems with any Grunt tasks, try running them with the `--verbose` command",
        "* [Building assets](#building%20assets):",
        "* [Testing](#testing):",
        "**Testing utility**",
        "**Main testing task**",
        "**Main testing task**"
    ],
    "functions": [
        "mergeContribs"
    ],
    "classes": []
}