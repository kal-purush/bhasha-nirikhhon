{
    "identifiers": [
        "com",
        "basho",
        "riakts",
        "java",
        "net",
        "UnknownHostException",
        "java",
        "text",
        "ParseException",
        "java",
        "text",
        "SimpleDateFormat",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "ExecutionException",
        "com",
        "basho",
        "riak",
        "client",
        "api",
        "RiakClient",
        "com",
        "basho",
        "riak",
        "client",
        "api",
        "commands",
        "timeseries",
        "Fetch",
        "com",
        "basho",
        "riak",
        "client",
        "api",
        "commands",
        "timeseries",
        "Query",
        "com",
        "basho",
        "riak",
        "client",
        "core",
        "query",
        "timeseries",
        "Cell",
        "com",
        "basho",
        "riak",
        "client",
        "core",
        "query",
        "timeseries",
        "QueryResult",
        "com",
        "basho",
        "riak",
        "client",
        "core",
        "query",
        "timeseries",
        "Row",
        "args",
        "client",
        "RiakClient",
        "newClient",
        "timeStamp",
        "sdf",
        "date",
        "sdf",
        "parse",
        "timeStamp",
        "timeStampEpoch",
        "date",
        "getTime",
        "insertQuery",
        "timeStampEpoch",
        "insertQuery",
        "query",
        "insertQuery",
        "build",
        "queryResult",
        "client",
        "execute",
        "query",
        "keyCells",
        "Arrays",
        "asList",
        "Cell",
        "newTimestamp",
        "timeStampEpoch",
        "fetch",
        "keyCells",
        "build",
        "queryResult",
        "client",
        "execute",
        "fetch",
        "rows",
        "queryResult",
        "iterator",
        "rows",
        "hasNext",
        "row",
        "rows",
        "next",
        "cells",
        "row",
        "iterator",
        "rowOut",
        "cells",
        "hasNext",
        "cell",
        "cells",
        "next",
        "rowOut",
        "Utility",
        "getCellStringVal",
        "cell",
        "rowOut",
        "client",
        "shutdown"
    ],
    "literals": [
        "\"127.0.0.1\"",
        "\"06/06/2016 12:30:00.00\"",
        "\"dd/MM/yyyy HH:mm:ss.SS\"",
        "\"INSERT INTO WeatherStationData \"",
        "\"(device, deviceId, time, temperature, humidity, pressure, windSpeed, windDirection) \"",
        "\"VALUES \"",
        "\"('Weather Station 0001', 'abc-xxx-001-001', \"",
        "\", 14.5, 52.0, 20.0, 10.0, 176.0)\"",
        "\"Weather Station 0001\"",
        "\"abc-xxx-001-001\"",
        "\"WeatherStationData\"",
        "\"\"",
        "\" | \""
    ],
    "variables": [],
    "comments": [
        "Create the Riak TS client to use to write data to",
        "Update the IP and Port if needed to connect to your cluster",
        "Create timestamp string for our record",
        "Convert string format to epoch for TS",
        "TS SQL INSERT - Insert a single row into TS using the SQL INSERT command",
        "See http://docs.basho.com/riakts/latest/using/writingdata/#adding-data-via-sql",
        "for more information about using INSERT.",
        "Send the query to Riak TS to save our record",
        "Retrieve the record we just wrote to make sure its there",
        "Use the Fetch class to pass the table name and primary key to the client",
        "Get Iterator from QueryResult"
    ],
    "docstrings": [
        "*\n * WriteWithSql\n * @author cvitter\n * Demonstrates how to write a single row of data to a Riak TS\n * table using the SQL INSERT command.\n * \n * For more information see the Java Client API documentation at: \n * http://docs.basho.com/riakts/latest/developing/java/\n * \n * Note: This example uses the WeatherStationData table created in\n * CreateTable.java and the data written in WriteTo.java."
    ],
    "functions": [
        "main"
    ],
    "classes": [
        "WriteWithSql"
    ]
}