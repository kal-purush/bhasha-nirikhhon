{
    "identifiers": [
        "process",
        "process",
        "inNodeJS",
        "require",
        "XMLHttpRequest",
        "testXHR",
        "supportsCORS",
        "supportsCORS",
        "inLegacyIE",
        "e",
        "array",
        "item",
        "array",
        "indexOfProto",
        "array",
        "indexOfProto",
        "array",
        "item",
        "i",
        "l",
        "i",
        "array",
        "i",
        "item",
        "i",
        "options",
        "Tabletop",
        "Tabletop",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "supportsCORS",
        "options",
        "Tabletop",
        "Tabletop",
        "inNodeJS",
        "supportsCORS",
        "Tabletop",
        "Tabletop",
        "options",
        "Tabletop",
        "options",
        "Tabletop",
        "Tabletop",
        "callback",
        "callback",
        "callback",
        "path",
        "callback",
        "inNodeJS",
        "path",
        "callback",
        "supportsCORS",
        "inLegacyIE",
        "protocol",
        "location",
        "path",
        "callback",
        "path",
        "callback",
        "path",
        "callback",
        "inLegacyIE",
        "XDomainRequest",
        "XMLHttpRequest",
        "xhr",
        "path",
        "xhr",
        "xhr",
        "e",
        "e",
        "callback",
        "json",
        "xhr",
        "path",
        "callback",
        "callback",
        "callbackName",
        "callback",
        "callbackName",
        "callbackName",
        "Tabletop",
        "callbackName",
        "arguments",
        "callback",
        "args",
        "script",
        "script",
        "Tabletop",
        "callbackName",
        "callbackName",
        "callbackName",
        "path",
        "callbackName",
        "path",
        "script",
        "path",
        "script",
        "script",
        "url",
        "script",
        "encodeURIComponent",
        "script",
        "script",
        "path",
        "callback",
        "request",
        "path",
        "err",
        "resp",
        "body",
        "err",
        "err",
        "callback",
        "body",
        "sheetName",
        "ttIndexOf",
        "sheetName",
        "sheet",
        "ttIndexOf",
        "sheet",
        "sheet",
        "data",
        "data",
        "i",
        "ilen",
        "data",
        "i",
        "ilen",
        "i",
        "data",
        "i",
        "data",
        "i",
        "data",
        "i",
        "data",
        "i",
        "linkIdx",
        "sheet_id",
        "inNodeJS",
        "supportsCORS",
        "json_path",
        "json_path",
        "json_path",
        "json_path",
        "json_path",
        "toLoad",
        "json_path",
        "toLoad",
        "i",
        "ilen",
        "toLoad",
        "i",
        "ilen",
        "i",
        "toLoad",
        "i",
        "sheetName",
        "sheetName",
        "sheetName",
        "sheetName",
        "model",
        "model",
        "model",
        "ttIndexOf",
        "model",
        "model",
        "data",
        "Tabletop",
        "data",
        "that",
        "msg",
        "arguments",
        "Tabletop",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "key",
        "options",
        "key",
        "key",
        "i",
        "ilen",
        "options",
        "i",
        "ilen",
        "i",
        "options",
        "i",
        "j",
        "jlen",
        "j",
        "source",
        "j",
        "cell",
        "options",
        "cell",
        "isNaN",
        "cell",
        "element",
        "j",
        "cell",
        "element",
        "j",
        "cell",
        "element",
        "j",
        "element",
        "element",
        "i",
        "options",
        "options",
        "element",
        "element",
        "options",
        "Tabletop",
        "cellurl",
        "data",
        "that",
        "data",
        "data",
        "column_names",
        "i",
        "l",
        "i",
        "data",
        "i",
        "pretty_columns",
        "column_names",
        "i",
        "data",
        "i",
        "pretty_columns",
        "column_names",
        "i",
        "column_names",
        "i",
        "pretty_columns",
        "j",
        "jlen",
        "j",
        "jlen",
        "j",
        "ordered_pretty_names",
        "j",
        "i",
        "ilen",
        "i",
        "ilen",
        "i",
        "j",
        "jlen",
        "j",
        "jlen",
        "j",
        "j",
        "new_element",
        "new_column_name",
        "i",
        "j",
        "pretty_elements",
        "new_element",
        "pretty_elements",
        "ordered_pretty_names",
        "i",
        "ilen",
        "i",
        "ilen",
        "i",
        "j",
        "jlen",
        "j",
        "jlen",
        "j",
        "row",
        "i",
        "j",
        "array",
        "row",
        "array",
        "Tabletop",
        "define",
        "define",
        "define",
        "Tabletop",
        "Tabletop"
    ],
    "literals": [
        "\"use strict\"",
        "'undefined'",
        "'request'",
        "'undefined'",
        "\"XDomainRequest\"",
        "'string'",
        "''",
        "\"https://spreadsheets.google.com\"",
        "'undefined'",
        "'undefined'",
        "''",
        "'undefined'",
        "\"WARNING! Tabletop singleton already defined\"",
        "\"You passed an old Google Docs url as the key! Attempting to parse.\"",
        "\"key=(.*?)(&|#|$)\"",
        "\"You passed a new Google Spreadsheets url as the key! Attempting to parse.\"",
        "\"d\\\\/(.*?)\\\\/pubhtml\"",
        "\"You need to pass Tabletop a key!\"",
        "\"Initializing with key \"",
        "\"/feeds/worksheets/\"",
        "\"/public/basic?alt=\"",
        "'json'",
        "'json-in-script'",
        "\"Times have changed! You'll want to use var tabletop = Tabletop.init(...); tabletop.sheets(...); instead of Tabletop.sheets(...)\"",
        "\"undefined\"",
        "\"//\"",
        "\"http\"",
        "\"GET\"",
        "'script'",
        "'Tabletop.singleton.loadSheets'",
        "'Tabletop.singleton.loadSheet'",
        "'tt'",
        "'Tabletop.callbacks.'",
        "\"&callback=\"",
        "\"/list/\"",
        "\"/\"",
        "\"-\"",
        "\"/\"",
        "\"/\"",
        "'script'",
        "\"WARNING You have more than one sheet but are using simple sheet mode! Don't blame me when something goes wrong.\"",
        "'/'",
        "\"/feeds/list/\"",
        "\"/\"",
        "\"/public/values?alt=\"",
        "'json'",
        "'json-in-script'",
        "\"&sq=\"",
        "\"&orderby=column:\"",
        "\"&reverse=true\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "'undefined'",
        "\"Missing data for \"",
        "\", make sure you didn't forget column headers\"",
        "\"gsx$\"",
        "\"\"",
        "\"gsx$\"",
        "'undefined'",
        "''",
        "''",
        "'/feeds/list/'",
        "'/feeds/cells/'",
        "'https://spreadsheets.google.com'",
        "''",
        "'undefined'",
        "\"undefined\"",
        "'function'"
    ],
    "variables": [
        "inNodeJS",
        "request",
        "supportsCORS",
        "inLegacyIE",
        "testXHR",
        "indexOfProto",
        "ttIndexOf",
        "i",
        "l",
        "Tabletop",
        "protocol",
        "xhr",
        "json",
        "script",
        "callbackName",
        "args",
        "url",
        "i",
        "ilen",
        "toLoad",
        "linkIdx",
        "sheet_id",
        "json_path",
        "that",
        "model",
        "i",
        "j",
        "ilen",
        "jlen",
        "source",
        "element",
        "j",
        "jlen",
        "cell",
        "cellurl",
        "that",
        "pretty_columns",
        "column_names",
        "i",
        "l",
        "pretty_elements",
        "ordered_pretty_names",
        "i",
        "j",
        "ilen",
        "jlen",
        "ordered_pretty_names",
        "new_element",
        "new_column_name",
        "array",
        "i",
        "j",
        "ilen",
        "jlen",
        "row"
    ],
    "comments": [
        "prevents browserify from bundling the module",
        "Create a simple indexOf function for support",
        "of older browsers.  Uses native indexOf if",
        "available.  Code similar to underscores.",
        "By making a separate function, instead of adding",
        "to the prototype, we will not break bad for loops",
        "in older browsers",
        "Initialize with Tabletop.init( { key: '0AjAPaAU9MeLFdHUxTlJiVVRYNGRJQnRmSnQwTlpoUXc' } )\n      OR!\n    Initialize with Tabletop.init( { key: 'https://docs.google.com/spreadsheet/pub?hl=en_US&hl=en_US&key=0AjAPaAU9MeLFdHUxTlJiVVRYNGRJQnRmSnQwTlpoUXc&output=html&widget=true' } )\n      OR!\n    Initialize with Tabletop.init('0AjAPaAU9MeLFdHUxTlJiVVRYNGRJQnRmSnQwTlpoUXc')",
        "Make sure Tabletop is being used as a constructor no matter what.",
        "Default to on, unless there's a proxy, in which case it's default off",
        "Remove trailing slash, it will break the app",
        "Let's only use CORS (straight JSON request) when",
        "fetching straight from Google",
        "Be friendly about what you accept",
        "A global storage for callbacks.",
        "Backwards compatibility.",
        "This will call the environment appropriate request method.\n      \n      In browser it will use JSON-P, in node it will use request()",
        "CORS only works in IE8/9 across the same protocol",
        "You must have your server on HTTPS to talk to Google, or it'll fall back on injection",
        "Use Cross-Origin XMLHttpRequest to get the data in browsers that support it.",
        "support IE8's separate cross-domain object",
        "Insert the URL into the page as a script tag. Once it's loaded the spreadsheet data\n      it triggers the callback. This helps you avoid cross-domain errors\n      http://code.google.com/apis/gdata/samples/spreadsheet_sample.html\n\n      Let's be plain-Jane and not use jQuery or anything.",
        "Create a temp callback which will get removed once it has executed,",
        "this allows multiple instances of Tabletop to coexist.",
        "We've gone down a rabbit hole of passing injectScript the path, so let's",
        "just pull the sheet_id out of the path like the least efficient worker bees",
        "This will only run if tabletop is being run in node.js",
        "Is this a sheet you want to pull?\n      If { wanted: [\"Sheet1\"] } has been specified, only Sheet1 is imported\n      Pulls all sheets if none are specified",
        "What gets send to the callback\n      if simpleSheet === true, then don't return an array of Tabletop.this.models,\n      only return the first one's elements",
        "If the instance is being queried before the data's been fetched",
        "then return undefined.",
        "Add another sheet to the wanted list",
        "Load all worksheets of the spreadsheet, turning each into a Tabletop Model.\n      Need to use injectScript because the worksheet view that you're working from\n      doesn't actually include the data. The list-based feed (/feeds/list/key..) does, though.\n      Calls back to loadSheet in order to get the real work done.\n\n      Used as a callback for the worksheet-based JSON",
        "Only pull in desired sheets to reduce loading",
        "Access layer for the this.models\n      .sheets() gets you all of the sheets\n      .sheets('Sheet1') gets you the sheet named Sheet1",
        "alert( \"Can't find \" + sheetName );",
        "Parse a single list-based worksheet, turning it into a Tabletop Model\n\n      Used as a callback for the list-based JSON",
        "Execute the callback upon loading! Rely on this.data() because you might\n        only request certain pieces of data (i.e. simpleSheet mode)\n      Tests this.sheetsToLoad just in case a race condition happens to show up",
        "Tabletop.Model stores the attribute names and parses the worksheet data\n      to turn it into something worthwhile\n\n    Options should be in the format { data: XXX }, with XXX being the list-based worksheet",
        "A copy of the sheet's raw data, for accessing minutiae",
        "Returns all of the elements (rows) of the worksheet as objects",
        "Return the elements as an array of arrays, instead of an array of objects",
        "don't just use inNodeJS, we may be in Browserify"
    ],
    "docstrings": [
        "* Store column names as an object\n     * with keys of Google-formatted \"columnName\"\n     * and values of human-readable \"Column name\"",
        "* Go through each row, substitutiting\n     * Google-formatted \"columnName\"\n     * with human-readable \"Column name\""
    ],
    "functions": [],
    "classes": []
}