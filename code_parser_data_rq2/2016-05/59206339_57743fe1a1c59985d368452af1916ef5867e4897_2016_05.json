{
    "identifiers": [
        "exports",
        "main",
        "format",
        "format",
        "compile",
        "frmt",
        "r",
        "fmt",
        "r",
        "r",
        "m",
        "p1",
        "offset",
        "p1",
        "tokens",
        "it",
        "it",
        "all",
        "token",
        "x",
        "tokens",
        "token",
        "x",
        "x",
        "fmt",
        "reg",
        "m",
        "p1",
        "offset",
        "which",
        "m",
        "tokens",
        "t",
        "res",
        "arguments",
        "r",
        "r",
        "res",
        "b",
        "res",
        "res"
    ],
    "literals": [
        "'use strict'",
        "'day/month time ip \"method url protocol/httpVer\" status size \"referer\" \"userAgent\" duration ms'",
        "'var outStream = process.stdout;\\n'",
        "'return {\\n'",
        "'  gen: function* (next) {'",
        "'},\\n'",
        "'  setStream: function (s) { outStream = s; return this; }\\n'",
        "'}'",
        "''",
        "''",
        "'\\\\n'",
        "\"'\\\\n'\"",
        "\"(this.headers['x-forwarded-for'] || this.ip)\"",
        "'this.method'",
        "'this.url'",
        "'this.status'",
        "'this.req.httpVersion'",
        "'this.protocol.toUpperCase()'",
        "\"(this.length || '-')\"",
        "\"(this.header['referer'] || '-')\"",
        "\"(this.header['user-agent'] || '-')\"",
        "'var startAt = new Date();\\n'",
        "\"( startAt.getDate() < 10 ? '0' : '' ) + startAt.getDate()\"",
        "'var startAt = new Date();\\n'",
        "'startAt.toString().slice(4,7)'",
        "'var startAt = new Date();\\n'",
        "'startAt.getFullYear()'",
        "'var startAt = new Date();\\n'",
        "\"( startAt.getHours() < 10 ? '0' : '' ) + startAt.getHours()\"",
        "'var startAt = new Date();\\n'",
        "\"startAt.toTimeString().slice(0, 8)\"",
        "'var startAt = new Date();\\n'",
        "\"startAt.toTimeString().slice(12, 17)\"",
        "'var startAt = new Date();\\n'",
        "'var endAt = new Date();\\n'",
        "\"( endAt.getTime() - startAt.getTime() )\"",
        "\"custom\\\\[(\\\\w+)\\\\]\"",
        "\"(this.\"",
        "\" || '-')\"",
        "'(?:'",
        "')'",
        "'|'",
        "'g'",
        "'No pattern found'",
        "\"' + \"",
        "\" + '\"",
        "''",
        "\"\\noutStream.write('\"",
        "\"\\\\n');\"",
        "'yield next;\\n'"
    ],
    "variables": [
        "frmt",
        "r",
        "res",
        "tokens",
        "all",
        "reg",
        "b",
        "t",
        "r"
    ],
    "comments": [
        "koa-logger2 - index.js\n (c) 2014 Tomasz Rojek (http://tomrosystems.com/)\n MIT licensed",
        "here we are constructing generator function based on format",
        "TODO: consider remembering stream in temporary variable ...",
        "here goes yield",
        "... and use it here",
        "actually this one is not used",
        "=== date formating",
        "short string representation",
        "this one highly depends on v8 extension",
        "extension",
        "custom one",
        "build one regular expression from above tokens",
        "maybe there's some better way to do this?"
    ],
    "docstrings": [],
    "functions": [
        "compile",
        "which"
    ],
    "classes": []
}