{
    "identifiers": [
        "IFPSAnalyzr",
        "IFPSAnalyzrSettings",
        "ITimestampGetter",
        "settings",
        "settings",
        "settings",
        "performance",
        "performance",
        "performance",
        "performance",
        "performance",
        "performance",
        "performance",
        "settings",
        "time",
        "time",
        "time",
        "fps",
        "fps",
        "getAll",
        "getAll",
        "i",
        "copy",
        "i",
        "copy",
        "i",
        "copy",
        "i",
        "copy",
        "i",
        "max",
        "i",
        "total",
        "i",
        "total",
        "max",
        "copy",
        "fpsKeptReal",
        "copy",
        "copy",
        "fpsKeptHalf",
        "copy",
        "fpsKeptHalf",
        "copy",
        "fpsKeptHalf",
        "i",
        "max",
        "i",
        "i",
        "fps",
        "highest",
        "highest",
        "fps",
        "fps",
        "lowest",
        "lowest",
        "fps",
        "lowest",
        "highest",
        "extremes",
        "extremes",
        "copy",
        "copy"
    ],
    "literals": [
        "\"./IFPSAnalyzr\"",
        "\"undefined\"",
        "\"undefined\""
    ],
    "variables": [
        "copy",
        "i",
        "max",
        "total",
        "i",
        "copy",
        "fpsKeptReal",
        "fpsKeptHalf",
        "max",
        "lowest",
        "highest",
        "lowest",
        "i",
        "fps",
        "extremes",
        "copy"
    ],
    "comments": [
        "Headless browsers like PhantomJS won't know performance, so Date.now",
        "is used as a backup"
    ],
    "docstrings": [
        "* Storage and analysis for framerate measurements.",
        "* Function to generate a current timestamp, commonly performance.now.",
        "* How many FPS measurements to keep at any given time, at most.",
        "* A recent history of FPS measurements (normally an Array). These are\n     * stored as changes in millisecond timestamps.",
        "* The actual number of FPS measurements currently known.",
        "* The current position in the internal measurements listing.",
        "* The most recent timestamp from getTimestamp.",
        "* Initializes a new instance of the FPSAnalyzr class.\n     * \n     * @param [settings]",
        "* Standard public measurement function.\n     * Marks the current timestamp as timeCurrent, and adds an FPS measurement\n     * if there was a previous timeCurrent.\n     * \n     * @param [time]   An optional timestamp (by default, getTimestamp() is used).",
        "* Adds an FPS measurement to measurements, and increments the associated\n     * count variables.\n     * \n     * @param fps   An FPS calculated as the difference between two timestamps.",
        "* @returns The number of FPS measurements to keep.",
        "* @returns The actual number of FPS measurements currently known.",
        "* @returns The most recent performance.now timestamp.",
        "* @returns The current position in measurements.",
        "* @param getAll   Whether all measurements should be returned, rather than\n     *                 the most recent (by default, false).\n     * @returns The stored FPS measurements.",
        "* Get function for a copy of the measurements listing, but with the FPS\n     * measurements transformed back into time differences\n     * \n     * @returns A container of the most recent FPS time differences.",
        "* @returns The average recorded FPS measurement.",
        "* @returns The median recorded FPS measurement.\n     * @remarks This is O(n*log(n)), where n is the size of the history,\n     *          as it creates a copy of the history and sorts it.",
        "* @returns Array containing the lowest and highest recorded FPS \n     *          measurements, in that order.",
        "* @returns The range of recorded FPS measurements.",
        "* Converts all measurements to a Number[] in sorted order, regardless\n     * of whether they're initially stored in an Array or Object.\n     * \n     * @returns All measurements, sorted."
    ],
    "functions": [
        "measure",
        "addFPS",
        "getMaxKept",
        "getNumRecorded",
        "getTimeCurrent",
        "getTicker",
        "getMeasurements",
        "getDifferences",
        "getAverage",
        "getMedian",
        "getExtremes",
        "getRange",
        "getMeasurementsSorted"
    ],
    "classes": [
        "FPSAnalyzr"
    ]
}