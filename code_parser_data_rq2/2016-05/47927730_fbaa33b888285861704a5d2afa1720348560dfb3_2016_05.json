{
    "identifiers": [
        "goog",
        "goog",
        "Blockly",
        "source",
        "Blockly",
        "source",
        "goog",
        "Blockly",
        "Blockly",
        "Blockly",
        "otherConnection",
        "otherConnection",
        "otherConnection",
        "xDiff",
        "xDiff",
        "yDiff",
        "yDiff",
        "Blockly",
        "staticConnection",
        "Blockly",
        "Blockly",
        "rootBlock",
        "rootBlock",
        "rootBlock",
        "staticConnection",
        "rootBlock",
        "staticConnection",
        "reverse",
        "rootBlock",
        "rootBlock",
        "staticConnection",
        "Blockly",
        "staticConnection",
        "Blockly",
        "reverse",
        "dy",
        "dy",
        "rootBlock",
        "dx",
        "dx",
        "rootBlock",
        "dx",
        "dy",
        "Blockly",
        "x",
        "y",
        "x",
        "y",
        "Blockly",
        "dx",
        "dy",
        "dx",
        "dy",
        "Blockly",
        "dx",
        "dy",
        "block",
        "svgRoot",
        "Blockly",
        "svgRoot",
        "block",
        "xy",
        "dx",
        "xy",
        "dy",
        "block",
        "dx",
        "dy",
        "Blockly",
        "maxLimit",
        "dx",
        "dy",
        "maxLimit",
        "dx",
        "dy",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "Blockly",
        "steps",
        "Blockly",
        "steps",
        "Blockly",
        "xy",
        "xy",
        "Blockly",
        "Blockly",
        "steps",
        "x",
        "y",
        "Blockly",
        "Blockly",
        "Blockly",
        "renderList",
        "block",
        "block",
        "connections",
        "block",
        "connections",
        "block",
        "block",
        "connections",
        "block",
        "block",
        "connections",
        "block",
        "connections",
        "block",
        "c",
        "connections",
        "c",
        "renderList",
        "renderList",
        "connections",
        "c",
        "renderList",
        "renderList",
        "block",
        "renderList",
        "Blockly",
        "goog",
        "Blockly",
        "Blockly",
        "Blockly",
        "hidden",
        "hidden",
        "hidden",
        "hidden",
        "Blockly",
        "b",
        "blocks",
        "b",
        "blocks",
        "b",
        "block",
        "c",
        "connections",
        "c",
        "connections",
        "c",
        "block",
        "i",
        "icons",
        "i",
        "icons",
        "i",
        "Blockly",
        "candidate",
        "maxRadius",
        "candidate",
        "maxRadius",
        "Blockly",
        "candidate",
        "Blockly",
        "parentBlock",
        "childBlock",
        "parentConnection",
        "Blockly",
        "parentBlock",
        "childBlock",
        "parentConnection",
        "parentBlock",
        "parentBlock",
        "childBlock",
        "childBlock",
        "childBlock",
        "Blockly",
        "parentConnection",
        "parentBlock",
        "parentConnection",
        "parentBlock",
        "shadow",
        "Blockly",
        "Blockly",
        "parentBlock",
        "shadow",
        "blockShadow",
        "parentConnection",
        "blockShadow",
        "blockShadow",
        "parentConnection",
        "blockShadow",
        "blockShadow",
        "blockShadow"
    ],
    "literals": [
        "'use strict'",
        "'Blockly.RenderedConnection'",
        "'Blockly.Connection'",
        "'block is not rendered.'",
        "'transform'",
        "'translate('",
        "','",
        "')'",
        "'m 0,0 '",
        "' v 5'",
        "'m -20,0 h 5 '",
        "' h 5'",
        "'path'",
        "'class'",
        "'blocklyHighlightedConnectionPath'",
        "'d'",
        "'translate('",
        "','",
        "')'",
        "' scale(-1 1)'",
        "''",
        "'Child block does not have output or previous statement.'"
    ],
    "variables": [
        "xDiff",
        "yDiff",
        "rootBlock",
        "reverse",
        "dx",
        "dy",
        "dx",
        "dy",
        "block",
        "svgRoot",
        "xy",
        "steps",
        "tabWidth",
        "xy",
        "x",
        "y",
        "renderList",
        "block",
        "connections",
        "c",
        "blocks",
        "b",
        "block",
        "connections",
        "c",
        "icons",
        "i",
        "shadow",
        "blockShadow"
    ],
    "comments": [
        "Don't move blocks around while the user is doing the same.",
        "Move the root block.",
        "Don't move blocks around in a flyout.",
        "Can't bump an uneditable block away.",
        "Check to see if the other block is movable.",
        "Swap the connections and move the 'static' connection instead.",
        "Raise it to the top for extra visibility.",
        "When reversing a bump due to an uneditable block, bump up.",
        "Remove it from its old location in the database (if already present)",
        "Insert it into its new location in the database.",
        "All blocks that need unhiding must be unhidden before any rendering takes",
        "place, since rendering requires knowing the dimensions of lower blocks.",
        "Also, since rendering a block renders all its parents, we only need to",
        "render the leaf nodes.",
        "Only spider down.",
        "This block should only be partially revealed since it is collapsed.",
        "Show all connections of this block.",
        "Leaf block.",
        "Hide all connections of all children.",
        "Close all bubbles of all children.",
        "Rerender the parent so that it may reflow.",
        "Respawn the shadow block if there is one."
    ],
    "docstrings": [
        "* @license\n * Visual Blocks Editor\n *\n * Copyright 2016 Google Inc.\n * https://developers.google.com/blockly/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @fileoverview Components for creating connections between blocks.\n * @author fenichel@google.com (Rachel Fenichel)",
        "* Class for a connection between blocks that may be rendered on screen.\n * @param {!Blockly.Block} source The block establishing this connection.\n * @param {number} type The type of the connection.\n * @constructor",
        "* Returns the distance between this connection and another connection.\n * @param {!Blockly.Connection} otherConnection The other connection to measure\n *     the distance to.\n * @return {number} The distance between connections.",
        "* Move the block(s) belonging to the connection to a point where they don't\n * visually interfere with the specified connection.\n * @param {!Blockly.Connection} staticConnection The connection to move away\n *     from.\n * @private",
        "* Change the connection's coordinates.\n * @param {number} x New absolute x coordinate.\n * @param {number} y New absolute y coordinate.",
        "* Change the connection's coordinates.\n * @param {number} dx Change to x coordinate.\n * @param {number} dy Change to y coordinate.",
        "* Move the blocks on either side of this connection right next to each other.\n * @private",
        "* Find the closest compatible connection to this connection.\n * @param {number} maxLimit The maximum radius to another connection.\n * @param {number} dx Horizontal offset between this connection's location\n *     in the database and the current location (as a result of dragging).\n * @param {number} dy Vertical offset between this connection's location\n *     in the database and the current location (as a result of dragging).\n * @return {!{connection: ?Blockly.Connection, radius: number}} Contains two\n *     properties:' connection' which is either another connection or null,\n *     and 'radius' which is the distance.",
        "* Add highlighting around this connection.",
        "* Unhide this connection, as well as all down-stream connections on any block\n * attached to this connection.  This happens when a block is expanded.\n * Also unhides down-stream comments.\n * @return {!Array.<!Blockly.Block>} List of blocks to render.",
        "* Remove the highlighting around this connection.",
        "* Set whether this connections is hidden (not tracked in a database) or not.\n * @param {boolean} hidden True if connection is hidden.",
        "* Hide this connection, as well as all down-stream connections on any block\n * attached to this connection.  This happens when a block is collapsed.\n * Also hides down-stream comments.",
        "* Check if the two connections can be dragged to connect to each other.\n * @param {!Blockly.Connection} candidate A nearby connection to check.\n * @param {number} maxRadius The maximum radius allowed for connections.\n * @return {boolean} True if the connection is allowed, false otherwise."
    ],
    "functions": [],
    "classes": []
}