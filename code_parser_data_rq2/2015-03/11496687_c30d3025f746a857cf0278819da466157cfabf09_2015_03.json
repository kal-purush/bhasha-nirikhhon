{
    "identifiers": [
        "Diagnostics",
        "Org",
        "BouncyCastle",
        "Crypto",
        "Parameters",
        "Org",
        "BouncyCastle",
        "Crypto",
        "Utilities",
        "Org",
        "BouncyCastle",
        "Crypto",
        "Engines",
        "IBlockCipher",
        "r",
        "shift",
        "r",
        "shift",
        "r",
        "shift",
        "x",
        "x",
        "m2",
        "x",
        "m1",
        "m3",
        "x",
        "FFmulX",
        "x",
        "FFmulX",
        "f2",
        "FFmulX",
        "f4",
        "x",
        "f8",
        "f2",
        "f4",
        "f8",
        "Shift",
        "f2",
        "f9",
        "Shift",
        "f4",
        "f9",
        "Shift",
        "f9",
        "x",
        "S",
        "x",
        "S",
        "x",
        "S",
        "x",
        "S",
        "x",
        "key",
        "forEncryption",
        "key",
        "Length",
        "KC",
        "KC",
        "KC",
        "KC",
        "key",
        "Length",
        "ArgumentException",
        "ROUNDS",
        "KC",
        "ROUNDS",
        "i",
        "ROUNDS",
        "i",
        "W",
        "i",
        "i",
        "key",
        "Length",
        "t",
        "W",
        "t",
        "t",
        "Pack",
        "LE_To_UInt32",
        "key",
        "i",
        "i",
        "ROUNDS",
        "i",
        "k",
        "i",
        "W",
        "i",
        "i",
        "i",
        "KC",
        "temp",
        "SubWord",
        "Shift",
        "temp",
        "rcon",
        "i",
        "KC",
        "KC",
        "i",
        "KC",
        "temp",
        "SubWord",
        "temp",
        "W",
        "i",
        "i",
        "W",
        "i",
        "KC",
        "i",
        "KC",
        "temp",
        "forEncryption",
        "j",
        "ROUNDS",
        "j",
        "W",
        "j",
        "i",
        "i",
        "w",
        "i",
        "Inv_Mcol",
        "w",
        "i",
        "W",
        "forEncryption",
        "ICipherParameters",
        "parameters",
        "parameters",
        "KeyParameter",
        "keyParameter",
        "ArgumentException",
        "parameters",
        "GetType",
        "Name",
        "WorkingKey",
        "GenerateWorkingKey",
        "keyParameter",
        "GetKey",
        "forEncryption",
        "forEncryption",
        "forEncryption",
        "BLOCK_SIZE",
        "input",
        "inOff",
        "output",
        "outOff",
        "WorkingKey",
        "InvalidOperationException",
        "Check",
        "DataLength",
        "input",
        "inOff",
        "Check",
        "OutputLength",
        "output",
        "outOff",
        "UnPackBlock",
        "input",
        "inOff",
        "forEncryption",
        "EncryptBlock",
        "WorkingKey",
        "DecryptBlock",
        "WorkingKey",
        "PackBlock",
        "output",
        "outOff",
        "BLOCK_SIZE",
        "off",
        "C0",
        "Pack",
        "LE_To_UInt32",
        "off",
        "C1",
        "Pack",
        "LE_To_UInt32",
        "off",
        "C2",
        "Pack",
        "LE_To_UInt32",
        "off",
        "C3",
        "Pack",
        "LE_To_UInt32",
        "off",
        "off",
        "Pack",
        "UInt32_To_LE",
        "C0",
        "off",
        "Pack",
        "UInt32_To_LE",
        "C1",
        "off",
        "Pack",
        "UInt32_To_LE",
        "C2",
        "off",
        "Pack",
        "UInt32_To_LE",
        "C3",
        "off",
        "KW",
        "KW",
        "C0",
        "kw",
        "C1",
        "kw",
        "C2",
        "kw",
        "C3",
        "kw",
        "r",
        "ROUNDS",
        "kw",
        "KW",
        "r",
        "r0",
        "T0",
        "t0",
        "T1",
        "t1",
        "T2",
        "t2",
        "T3",
        "r3",
        "kw",
        "r1",
        "T0",
        "t1",
        "T1",
        "t2",
        "T2",
        "r3",
        "T3",
        "t0",
        "kw",
        "r2",
        "T0",
        "t2",
        "T1",
        "r3",
        "T2",
        "t0",
        "T3",
        "t1",
        "kw",
        "r3",
        "T0",
        "r3",
        "T1",
        "t0",
        "T2",
        "t1",
        "T3",
        "t2",
        "kw",
        "kw",
        "KW",
        "r",
        "t0",
        "T0",
        "r0",
        "T1",
        "r1",
        "T2",
        "r2",
        "T3",
        "r3",
        "kw",
        "t1",
        "T0",
        "r1",
        "T1",
        "r2",
        "T2",
        "r3",
        "T3",
        "r0",
        "kw",
        "t2",
        "T0",
        "r2",
        "T1",
        "r3",
        "T2",
        "r0",
        "T3",
        "r1",
        "kw",
        "r3",
        "T0",
        "r3",
        "T1",
        "r0",
        "T2",
        "r1",
        "T3",
        "r2",
        "kw",
        "kw",
        "KW",
        "r",
        "r0",
        "T0",
        "t0",
        "T1",
        "t1",
        "T2",
        "t2",
        "T3",
        "r3",
        "kw",
        "r1",
        "T0",
        "t1",
        "T1",
        "t2",
        "T2",
        "r3",
        "T3",
        "t0",
        "kw",
        "r2",
        "T0",
        "t2",
        "T1",
        "r3",
        "T2",
        "t0",
        "T3",
        "t1",
        "kw",
        "r3",
        "T0",
        "r3",
        "T1",
        "t0",
        "T2",
        "t1",
        "T3",
        "t2",
        "kw",
        "kw",
        "KW",
        "r",
        "C0",
        "S",
        "r0",
        "S",
        "r1",
        "S",
        "r2",
        "S",
        "r3",
        "kw",
        "C1",
        "S",
        "r1",
        "S",
        "r2",
        "S",
        "r3",
        "S",
        "r0",
        "kw",
        "C2",
        "S",
        "r2",
        "S",
        "r3",
        "S",
        "r0",
        "S",
        "r1",
        "kw",
        "C3",
        "S",
        "r3",
        "S",
        "r0",
        "S",
        "r1",
        "S",
        "r2",
        "kw",
        "KW",
        "KW",
        "ROUNDS",
        "C0",
        "kw",
        "C1",
        "kw",
        "C2",
        "kw",
        "C3",
        "kw",
        "ROUNDS",
        "r",
        "kw",
        "KW",
        "r",
        "r0",
        "Tinv0",
        "t0",
        "Tinv1",
        "r3",
        "Tinv2",
        "t2",
        "Tinv3",
        "t1",
        "kw",
        "r1",
        "Tinv0",
        "t1",
        "Tinv1",
        "t0",
        "Tinv2",
        "r3",
        "Tinv3",
        "t2",
        "kw",
        "r2",
        "Tinv0",
        "t2",
        "Tinv1",
        "t1",
        "Tinv2",
        "t0",
        "Tinv3",
        "r3",
        "kw",
        "r3",
        "Tinv0",
        "r3",
        "Tinv1",
        "t2",
        "Tinv2",
        "t1",
        "Tinv3",
        "t0",
        "kw",
        "kw",
        "KW",
        "r",
        "t0",
        "Tinv0",
        "r0",
        "Tinv1",
        "r3",
        "Tinv2",
        "r2",
        "Tinv3",
        "r1",
        "kw",
        "t1",
        "Tinv0",
        "r1",
        "Tinv1",
        "r0",
        "Tinv2",
        "r3",
        "Tinv3",
        "r2",
        "kw",
        "t2",
        "Tinv0",
        "r2",
        "Tinv1",
        "r1",
        "Tinv2",
        "r0",
        "Tinv3",
        "r3",
        "kw",
        "r3",
        "Tinv0",
        "r3",
        "Tinv1",
        "r2",
        "Tinv2",
        "r1",
        "Tinv3",
        "r0",
        "kw",
        "kw",
        "KW",
        "r0",
        "Tinv0",
        "t0",
        "Tinv1",
        "r3",
        "Tinv2",
        "t2",
        "Tinv3",
        "t1",
        "kw",
        "r1",
        "Tinv0",
        "t1",
        "Tinv1",
        "t0",
        "Tinv2",
        "r3",
        "Tinv3",
        "t2",
        "kw",
        "r2",
        "Tinv0",
        "t2",
        "Tinv1",
        "t1",
        "Tinv2",
        "t0",
        "Tinv3",
        "r3",
        "kw",
        "r3",
        "Tinv0",
        "r3",
        "Tinv1",
        "t2",
        "Tinv2",
        "t1",
        "Tinv3",
        "t0",
        "kw",
        "kw",
        "KW",
        "C0",
        "Si",
        "r0",
        "Si",
        "r3",
        "Si",
        "r2",
        "Si",
        "r1",
        "kw",
        "C1",
        "Si",
        "r1",
        "Si",
        "r0",
        "Si",
        "r3",
        "Si",
        "r2",
        "kw",
        "C2",
        "Si",
        "r2",
        "Si",
        "r1",
        "Si",
        "r0",
        "Si",
        "r3",
        "kw",
        "C3",
        "Si",
        "r3",
        "Si",
        "r2",
        "Si",
        "r1",
        "Si",
        "r0",
        "kw"
    ],
    "literals": [
        "\"Key length not 128/192/256 bits.\"",
        "\"invalid parameter passed to AES init - \"",
        "\"AES\"",
        "\"AES engine not initialised\"",
        "\"input buffer too short\"",
        "\"output buffer too short\""
    ],
    "variables": [
        "S",
        "Si",
        "rcon",
        "T0",
        "T1",
        "T2",
        "T3",
        "Tinv0",
        "Tinv1",
        "Tinv2",
        "Tinv3",
        "m1",
        "m2",
        "m3",
        "f2",
        "f4",
        "f8",
        "f9",
        "KC",
        "W",
        "i",
        "t",
        "i",
        "k",
        "i",
        "KC",
        "temp",
        "j",
        "w",
        "i",
        "ROUNDS",
        "WorkingKey",
        "C0",
        "C1",
        "C2",
        "C3",
        "forEncryption",
        "BLOCK_SIZE",
        "KeyParameter",
        "keyParameter",
        "AlgorithmName",
        "IsPartialBlockOkay",
        "kw",
        "t0",
        "t1",
        "t2",
        "r0",
        "r1",
        "r2",
        "r3",
        "r",
        "kw",
        "t0",
        "t1",
        "t2",
        "r0",
        "r1",
        "r2",
        "r3",
        "r"
    ],
    "comments": [
        "The S box",
        "The inverse S-box",
        "vector used in calculating key schedule (powers of x in GF(256))",
        "precomputation tables of calculations for rounds",
        "multiply four bytes in GF(2^8) by 'x' {02} in parallel",
        "The following defines provide alternative definitions of FFmulX that might\n        give improved performance if a fast 32-bit multiply is not available.\n\n        private int FFmulX(int x) { int u = x & m1; u |= (u >> 1); return ((x & m2) << 1) ^ ((u >>> 3) | (u >>> 6)); }\n        private static final int  m4 = 0x1b1b1b1b;\n        private int FFmulX(int x) { int u = x & m1; return ((x & m2) << 1) ^ ((u - (u >>> 7)) & m4); }",
        "key length in words",
        "This is not always true for the generalized Rijndael that allows larger block sizes",
        "4 words in a block",
        "",
        "copy the key into the round key array",
        "",
        "",
        "while not enough round key material calculated",
        "calculate new values",
        "",
        "the final round's table is a simple function of S so we don't use a whole other four tables for it",
        "the final round's table is a simple function of Si so we don't use a whole other four tables for it"
    ],
    "docstrings": [
        "* an implementation of the AES (Rijndael)), from FIPS-197.\n    * <p>\n    * For further details see: <a href=\"http://csrc.nist.gov/encryption/aes/\">http://csrc.nist.gov/encryption/aes/</a>.\n    *\n    * This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at\n    * <a href=\"http://fp.gladman.plus.com/cryptography_technology/rijndael/\">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>\n    *\n    * There are three levels of tradeoff of speed vs memory\n    * Because java has no preprocessor), they are written as three separate classes from which to choose\n    *\n    * The fastest uses 8Kbytes of static tables to precompute round calculations), 4 256 word tables for encryption\n    * and 4 for decryption.\n    *\n    * The middle performance version uses only one 256 word table for each), for a total of 2Kbytes),\n    * adding 12 rotate operations per round to compute the values contained in the other tables from\n    * the contents of the first\n    *\n    * The slowest version uses no static tables at all and computes the values in each round\n    * </p>\n    * <p>\n    * This file contains the fast version with 8Kbytes of static tables for round precomputation\n    * </p>",
        "* Calculate the necessary round keys\n        * The number of calculations depends on key size and block size\n        * AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits\n        * This code is written assuming those are the only possible values",
        "* default constructor - 128 bit block size.",
        "* initialise an AES cipher.\n        *\n        * @param forEncryption whether or not we are for encryption.\n        * @param parameters the parameters required to set up the cipher.\n        * @exception ArgumentException if the parameters argument is\n        * inappropriate."
    ],
    "functions": [
        "Shift",
        "FFmulX",
        "Inv_Mcol",
        "SubWord",
        "GenerateWorkingKey",
        "AesFastEngine",
        "Init",
        "GetBlockSize",
        "ProcessBlock",
        "Reset",
        "UnPackBlock",
        "PackBlock",
        "EncryptBlock",
        "DecryptBlock"
    ],
    "classes": [
        "AesFastEngine"
    ]
}