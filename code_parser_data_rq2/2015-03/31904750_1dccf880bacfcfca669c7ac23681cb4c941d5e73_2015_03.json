{
    "identifiers": [
        "os",
        "sys",
        "time",
        "numpy",
        "theano",
        "theano",
        "tensor",
        "T",
        "theano",
        "tensor",
        "signal",
        "downsample",
        "theano",
        "tensor",
        "nnet",
        "conv",
        "logistic_sgd",
        "LogisticRegression",
        "load_data",
        "mlp",
        "HiddenLayer",
        "dataset",
        "os",
        "path",
        "split",
        "dataset",
        "data_dir",
        "os",
        "path",
        "isfile",
        "dataset",
        "os",
        "path",
        "join",
        "os",
        "path",
        "split",
        "dataset",
        "os",
        "path",
        "isfile",
        "new_path",
        "data_file",
        "new_path",
        "os",
        "path",
        "isfile",
        "dataset",
        "data_file",
        "urllib",
        "origin",
        "urllib",
        "urlretrieve",
        "origin",
        "dataset",
        "gzip",
        "open",
        "dataset",
        "cPickle",
        "load",
        "f",
        "f",
        "close",
        "data_xy",
        "borrow",
        "data_xy",
        "theano",
        "shared",
        "numpy",
        "asarray",
        "data_x",
        "dtype",
        "theano",
        "config",
        "floatX",
        "borrow",
        "borrow",
        "theano",
        "shared",
        "numpy",
        "asarray",
        "data_y",
        "dtype",
        "theano",
        "config",
        "floatX",
        "borrow",
        "borrow",
        "shared_x",
        "T",
        "cast",
        "shared_y",
        "shared_dataset",
        "test_set",
        "shared_dataset",
        "valid_set",
        "shared_dataset",
        "train_set",
        "train_set_x",
        "train_set_y",
        "valid_set_x",
        "valid_set_y",
        "test_set_x",
        "test_set_y",
        "rval",
        "rng",
        "input",
        "filter_shape",
        "image_shape",
        "poolsize",
        "image_shape",
        "filter_shape",
        "input",
        "numpy",
        "prod",
        "filter_shape",
        "filter_shape",
        "numpy",
        "prod",
        "filter_shape",
        "numpy",
        "prod",
        "poolsize",
        "numpy",
        "sqrt",
        "fan_in",
        "fan_out",
        "theano",
        "shared",
        "numpy",
        "asarray",
        "rng",
        "uniform",
        "low",
        "W_bound",
        "high",
        "W_bound",
        "size",
        "filter_shape",
        "dtype",
        "theano",
        "config",
        "floatX",
        "borrow",
        "numpy",
        "zeros",
        "filter_shape",
        "dtype",
        "theano",
        "config",
        "floatX",
        "theano",
        "shared",
        "value",
        "b_values",
        "borrow",
        "conv",
        "conv2d",
        "input",
        "input",
        "filters",
        "W",
        "filter_shape",
        "filter_shape",
        "image_shape",
        "image_shape",
        "downsample",
        "max_pool_2d",
        "input",
        "conv_out",
        "ds",
        "poolsize",
        "ignore_border",
        "T",
        "tanh",
        "pooled_out",
        "b",
        "dimshuffle",
        "W",
        "b",
        "learning_rate",
        "n_epochs",
        "dataset",
        "nkerns",
        "batch_size",
        "numpy",
        "random",
        "RandomState",
        "load_data",
        "dataset",
        "datasets",
        "datasets",
        "datasets",
        "train_set_x",
        "get_value",
        "borrow",
        "shape",
        "valid_set_x",
        "get_value",
        "borrow",
        "shape",
        "test_set_x",
        "get_value",
        "borrow",
        "shape",
        "n_train_batches",
        "batch_size",
        "n_valid_batches",
        "batch_size",
        "n_test_batches",
        "batch_size",
        "T",
        "lscalar",
        "T",
        "matrix",
        "T",
        "ivector",
        "x",
        "reshape",
        "batch_size",
        "LeNetConvPoolLayer",
        "rng",
        "input",
        "layer0_input",
        "image_shape",
        "batch_size",
        "filter_shape",
        "nkerns",
        "poolsize",
        "LeNetConvPoolLayer",
        "rng",
        "input",
        "layer0",
        "output",
        "image_shape",
        "batch_size",
        "nkerns",
        "filter_shape",
        "nkerns",
        "nkerns",
        "poolsize",
        "layer1",
        "output",
        "flatten",
        "HiddenLayer",
        "rng",
        "input",
        "layer2_input",
        "n_in",
        "nkerns",
        "n_out",
        "activation",
        "T",
        "tanh",
        "LogisticRegression",
        "input",
        "layer2",
        "output",
        "n_in",
        "n_out",
        "layer3",
        "negative_log_likelihood",
        "y",
        "theano",
        "index",
        "layer3",
        "errors",
        "y",
        "givens",
        "x",
        "test_set_x",
        "index",
        "batch_size",
        "index",
        "batch_size",
        "y",
        "test_set_y",
        "index",
        "batch_size",
        "index",
        "batch_size",
        "theano",
        "index",
        "layer3",
        "errors",
        "y",
        "givens",
        "x",
        "valid_set_x",
        "index",
        "batch_size",
        "index",
        "batch_size",
        "y",
        "valid_set_y",
        "index",
        "batch_size",
        "index",
        "batch_size",
        "layer3",
        "layer2",
        "layer1",
        "layer0",
        "T",
        "grad",
        "cost",
        "param_i",
        "param_i",
        "learning_rate",
        "grad_i",
        "param_i",
        "grad_i",
        "grads",
        "theano",
        "index",
        "cost",
        "updates",
        "updates",
        "givens",
        "x",
        "train_set_x",
        "index",
        "batch_size",
        "index",
        "batch_size",
        "y",
        "train_set_y",
        "index",
        "batch_size",
        "index",
        "batch_size",
        "min",
        "n_train_batches",
        "patience",
        "numpy",
        "inf",
        "time",
        "clock",
        "epoch",
        "n_epochs",
        "done_looping",
        "epoch",
        "minibatch_index",
        "xrange",
        "n_train_batches",
        "epoch",
        "n_train_batches",
        "minibatch_index",
        "iter",
        "iter",
        "train_model",
        "minibatch_index",
        "iter",
        "validation_frequency",
        "validate_model",
        "i",
        "i",
        "xrange",
        "n_valid_batches",
        "numpy",
        "mean",
        "validation_losses",
        "epoch",
        "minibatch_index",
        "n_train_batches",
        "this_validation_loss",
        "this_validation_loss",
        "best_validation_loss",
        "this_validation_loss",
        "best_validation_loss",
        "improvement_threshold",
        "max",
        "patience",
        "iter",
        "patience_increase",
        "this_validation_loss",
        "iter",
        "test_model",
        "i",
        "i",
        "xrange",
        "n_test_batches",
        "numpy",
        "mean",
        "test_losses",
        "epoch",
        "minibatch_index",
        "n_train_batches",
        "test_score",
        "patience",
        "iter",
        "time",
        "clock",
        "best_validation_loss",
        "best_iter",
        "test_score",
        "sys",
        "stderr",
        "end_time",
        "start_time",
        "gc",
        "i",
        "gc",
        "collect"
    ],
    "literals": [
        "\"\"",
        "\"..\"",
        "\"data\"",
        "'mnist.pkl.gz'",
        "'mnist.pkl.gz'",
        "'http://www.iro.umontreal.ca/~lisa/deep/data/mnist/mnist.pkl.gz'",
        "'Downloading data from %s'",
        "'... loading data'",
        "'rb'",
        "'int32'",
        "'x'",
        "'x'",
        "'x'",
        "'mnist.pkl.gz'",
        "'x'",
        "'y'",
        "'... building the model'",
        "'... training'",
        "'training @ iter = '",
        "'epoch %i, minibatch %i/%i, validation error %f %%'",
        "'     epoch %i, minibatch %i/%i, test error of '",
        "'best model %f %%'",
        "'Optimization complete.'",
        "'Best validation score of %f %% obtained at iteration %i, '",
        "'with test performance %f %%'",
        "'The code ran for %.2fm'"
    ],
    "variables": [
        "data_dir",
        "data_file",
        "new_path",
        "dataset",
        "origin",
        "f",
        "train_set",
        "valid_set",
        "test_set",
        "data_x",
        "data_y",
        "shared_x",
        "shared_y",
        "test_set_x",
        "test_set_y",
        "valid_set_x",
        "valid_set_y",
        "train_set_x",
        "train_set_y",
        "rval",
        "input",
        "fan_in",
        "fan_out",
        "W_bound",
        "W",
        "b_values",
        "b",
        "conv_out",
        "pooled_out",
        "output",
        "rng",
        "datasets",
        "train_set_x",
        "train_set_y",
        "valid_set_x",
        "valid_set_y",
        "test_set_x",
        "test_set_y",
        "n_train_batches",
        "n_valid_batches",
        "n_test_batches",
        "index",
        "x",
        "y",
        "layer0_input",
        "layer0",
        "layer1",
        "layer2_input",
        "layer2",
        "layer3",
        "cost",
        "test_model",
        "validate_model",
        "grads",
        "updates",
        "train_model",
        "patience",
        "patience_increase",
        "improvement_threshold",
        "validation_frequency",
        "best_validation_loss",
        "best_iter",
        "test_score",
        "start_time",
        "epoch",
        "done_looping",
        "epoch",
        "iter",
        "cost_ij",
        "validation_losses",
        "this_validation_loss",
        "patience",
        "best_validation_loss",
        "best_iter",
        "test_losses",
        "test_score",
        "done_looping",
        "end_time"
    ],
    "comments": [
        "",
        "LOAD DATA #",
        "",
        "Download the MNIST dataset if it is not present",
        "Check if dataset is in the data directory.",
        "Load the dataset",
        "train_set, valid_set, test_set format: tuple(input, target)",
        "input is an numpy.ndarray of 2 dimensions (a matrix)",
        "witch row's correspond to an example. target is a",
        "numpy.ndarray of 1 dimensions (vector)) that have the same length as",
        "the number of rows in the input. It should give the target",
        "target to the example with the same index in the input.",
        "When storing data on the GPU it has to be stored as floats",
        "therefore we will store the labels as ``floatX`` as well",
        "(``shared_y`` does exactly that). But during our computations",
        "we need them as ints (we use labels as index, and if they are",
        "floats it doesn't make sense) therefore instead of returning",
        "``shared_y`` we will have to cast it to int. This little hack",
        "lets ous get around this issue",
        "there are \"num input feature maps * filter height * filter width\"",
        "inputs to each hidden unit",
        "each unit in the lower layer receives a gradient from:",
        "\"num output feature maps * filter height * filter width\" /",
        "pooling size",
        "initialize weights with random weights",
        "the bias is a 1D tensor -- one bias per output feature map",
        "convolve input feature maps with filters",
        "downsample each feature map individually, using maxpooling",
        "add the bias term. Since the bias is a vector (1D array), we first",
        "reshape it to a tensor of shape (1, n_filters, 1, 1). Each bias will",
        "thus be broadcasted across mini-batches and feature map",
        "width & height",
        "store parameters of this layer",
        "compute number of minibatches for training, validation and testing",
        "allocate symbolic variables for the data",
        "index to a [mini]batch",
        "start-snippet-1",
        "the data is presented as rasterized images",
        "the labels are presented as 1D vector of",
        "[int] labels",
        "",
        "BUILD ACTUAL MODEL #",
        "",
        "Reshape matrix of rasterized images of shape (batch_size, 28 * 28)",
        "to a 4D tensor, compatible with our LeNetConvPoolLayer",
        "(28, 28) is the size of MNIST images.",
        "Construct the first convolutional pooling layer:",
        "filtering reduces the image size to (28-5+1 , 28-5+1) = (24, 24)",
        "maxpooling reduces this further to (24/2, 24/2) = (12, 12)",
        "4D output tensor is thus of shape (batch_size, nkerns[0], 12, 12)",
        "Construct the second convolutional pooling layer",
        "filtering reduces the image size to (12-5+1, 12-5+1) = (8, 8)",
        "maxpooling reduces this further to (8/2, 8/2) = (4, 4)",
        "4D output tensor is thus of shape (batch_size, nkerns[1], 4, 4)",
        "the HiddenLayer being fully-connected, it operates on 2D matrices of",
        "shape (batch_size, num_pixels) (i.e matrix of rasterized images).",
        "This will generate a matrix of shape (batch_size, nkerns[1] * 4 * 4),",
        "or (500, 50 * 4 * 4) = (500, 800) with the default values.",
        "construct a fully-connected sigmoidal layer",
        "classify the values of the fully-connected sigmoidal layer",
        "the cost we minimize during training is the NLL of the model",
        "create a function to compute the mistakes that are made by the model",
        "create a list of all model parameters to be fit by gradient descent",
        "create a list of gradients for all model parameters",
        "train_model is a function that updates the model parameters by",
        "SGD Since this model has many parameters, it would be tedious to",
        "manually create an update rule for each model parameter. We thus",
        "create the updates list by automatically looping over all",
        "(params[i], grads[i]) pairs.",
        "end-snippet-1",
        "",
        "TRAIN MODEL #",
        "",
        "early-stopping parameters",
        "look as this many examples regardless",
        "wait this much longer when a new best is",
        "found",
        "a relative improvement of this much is",
        "considered significant",
        "go through this many",
        "minibatche before checking the network",
        "on the validation set; in this case we",
        "check every epoch",
        "compute zero-one loss on validation set",
        "if we got the best validation score until now",
        "improve patience if loss improvement is good enough",
        "save best validation score and iteration number",
        "test it on the test set",
        "Call Python GC to make sure the GPU memory is freed. That way,",
        "we are sure next call will have enough memory."
    ],
    "docstrings": [
        "\"\"\"This tutorial introduces the LeNet5 neural network architecture\nusing Theano.  LeNet5 is a convolutional neural network, good for\nclassifying images. This tutorial shows how to build the architecture,\nand comes with all the hyper-parameters you need to reproduce the\npaper's MNIST results.\n\n\nThis implementation simplifies the model in the following ways:\n\n - LeNetConvPool doesn't implement location-specific gain and bias parameters\n - LeNetConvPool doesn't implement pooling by average, it implements pooling\n   by max.\n - Digit classification is implemented with a logistic regression rather than\n   an RBF network\n - LeNet5 was not fully-connected convolutions at second layer\n\nReferences:\n - Y. LeCun, L. Bottou, Y. Bengio and P. Haffner:\n   Gradient-Based Learning Applied to Document\n   Recognition, Proceedings of the IEEE, 86(11):2278-2324, November 1998.\n   http://yann.lecun.com/exdb/publis/pdf/lecun-98.pdf\n\n\"\"\"",
        "''' Loads the dataset\n\n    :type dataset: string\n    :param dataset: the path to the dataset (here MNIST)\n    '''",
        "\"\"\" Function that loads the dataset into shared variables\n\n        The reason we store our dataset in shared variables is to allow\n        Theano to copy it into the GPU memory (when code is run on GPU).\n        Since copying data into the GPU is slow, copying a minibatch everytime\n        is needed (the default behaviour if the data is not in a shared\n        variable) would lead to a large decrease in performance.\n        \"\"\"",
        "\"\"\"Pool Layer of a convolutional network \"\"\"",
        "\"\"\"\n        Allocate a LeNetConvPoolLayer with shared variable internal parameters.\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type input: theano.tensor.dtensor4\n        :param input: symbolic image tensor, of shape image_shape\n\n        :type filter_shape: tuple or list of length 4\n        :param filter_shape: (number of filters, num input feature maps,\n                              filter height, filter width)\n\n        :type image_shape: tuple or list of length 4\n        :param image_shape: (batch size, num input feature maps,\n                             image height, image width)\n\n        :type poolsize: tuple or list of length 2\n        :param poolsize: the downsampling (pooling) factor (#rows, #cols)\n        \"\"\"",
        "\"\"\" Demonstrates lenet on MNIST dataset\n\n    :type learning_rate: float\n    :param learning_rate: learning rate used (factor for the stochastic\n                          gradient)\n\n    :type n_epochs: int\n    :param n_epochs: maximal number of epochs to run the optimizer\n\n    :type dataset: string\n    :param dataset: path to the dataset used for training /testing (MNIST here)\n\n    :type nkerns: list of ints\n    :param nkerns: number of kernels on each layer\n    \"\"\""
    ],
    "functions": [
        "load_data",
        "shared_dataset",
        "evaluate_lenet5"
    ],
    "classes": [
        "LeNetConvPoolLayer"
    ]
}