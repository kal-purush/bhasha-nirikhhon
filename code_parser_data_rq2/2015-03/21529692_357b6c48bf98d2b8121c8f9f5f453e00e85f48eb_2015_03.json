{
    "identifiers": [
        "requests",
        "zipfile",
        "os",
        "shutil",
        "json",
        "path",
        "i",
        "len",
        "path",
        "path",
        "i",
        "os",
        "path",
        "exists",
        "path",
        "i",
        "os",
        "mkdir",
        "path",
        "i",
        "addr",
        "repos_cached",
        "requests",
        "get",
        "addr",
        "i",
        "pages",
        "headers",
        "split",
        "pages",
        "append",
        "requests",
        "get",
        "pages",
        "headers",
        "split",
        "i",
        "page",
        "pages",
        "repo",
        "page",
        "json",
        "repo",
        "repo",
        "repo",
        "repos_cached",
        "repo",
        "repos_cached",
        "repo",
        "repo",
        "repo",
        "repos2update",
        "pages",
        "status_code",
        "path_to_cache",
        "open",
        "path_to_cache",
        "json",
        "loads",
        "repos_cached_file",
        "read",
        "repos_cached_file",
        "close",
        "repos_cached",
        "path_to_cache",
        "repos_cached",
        "mk_path_for_file",
        "path_to_cache",
        "open",
        "path_to_cache",
        "repos_cached_file",
        "write",
        "json",
        "dumps",
        "repos_cached",
        "indent",
        "repos_cached_file",
        "close",
        "addr",
        "dest",
        "mk_path_for_file",
        "dest",
        "requests",
        "get",
        "addr",
        "open",
        "dest",
        "f",
        "write",
        "remotef",
        "content",
        "f",
        "close",
        "remotef",
        "status_code",
        "source",
        "dest",
        "zipfile",
        "ZipFile",
        "source",
        "shutil",
        "rmtree",
        "dest",
        "namelist",
        "FileNotFoundError",
        "extractall",
        "path",
        "dest",
        "os",
        "rename",
        "dest",
        "namelist",
        "dest",
        "namelist",
        "os",
        "remove",
        "source",
        "foot_dir",
        "fp_lib_table",
        "mk_path_for_file",
        "fp_lib_table",
        "open",
        "fp_lib_table",
        "table",
        "write",
        "item",
        "os",
        "listdir",
        "foot_dir",
        "item",
        "table",
        "write",
        "format",
        "item",
        "table",
        "write",
        "format",
        "foot_dir",
        "item",
        "table",
        "write",
        "table",
        "write",
        "table",
        "close"
    ],
    "literals": [
        "\"/\"",
        "\"Link\"",
        "\"Link\"",
        "\"size\"",
        "\".pretty\"",
        "\"name\"",
        "\"full_name\"",
        "\"pushed_at\"",
        "\"full_name\"",
        "\"full_name\"",
        "\"pushed_at\"",
        "\"r\"",
        "\"w\"",
        "\"wb\"",
        "\"w\"",
        "\"(fp_lib_table\\n\"",
        "\".pretty\"",
        "\"(lib (name {})(type KiCad)\"",
        "\"(uri {})\"",
        "\"(options \\\"\\\")(descr \\\"The way you like them.\\\"))\\n\"",
        "\")\\n\""
    ],
    "variables": [
        "pages",
        "repos2update",
        "repos2update",
        "repos_cached_file",
        "repos_cached",
        "repos_cached_file",
        "remotef",
        "f",
        "table"
    ],
    "comments": [
        "Functions for downloading and extracting github .pretty repositories",
        "if size is not zero and repository and \".pretty\" in name and doesn't exist in repos_cached",
        "and/or \"pushed_at\" differs"
    ],
    "docstrings": [
        "\"\"\"Make path for file, for example mk_path_for_file(directory1/directory2/file1.txt) will make \n    directory \\\"directory1/directory2/\\\"\"\"\"",
        "\"\"\"Check repositories for updating, addr is a string with github api adress, repos_cached is dict\n    {\"repository_name\": \"date_of_latest_push\"}, for example\n    check_update(\"https://api.github.com/users/KiCad/repos\", {\"Choke_SMD.pretty\": \"2014-11-21T21:13:48Z\"})\n    will return all .pretty repositories that aren't in repos_cached dict or have different date of latest\n    push\"\"\"",
        "\"\"\"Reads .json file\"\"\"",
        "\"\"\"Writes .json file\"\"\"",
        "\"\"\"Downloads file from addr to dest\"\"\"",
        "\"\"\"Extracts source to dest, designed for .pretty repositories\"\"\"",
        "\"\"\"Makes fp_lib_table for all .pretty directories in foot_dir\"\"\""
    ],
    "functions": [
        "mk_path_for_file",
        "check_update",
        "cache_read",
        "cache_write",
        "download",
        "extract",
        "mk_table"
    ],
    "classes": []
}