{
    "identifiers": [
        "org",
        "wso2",
        "carbon",
        "connector",
        "integration",
        "test",
        "common",
        "systemLineSeparator",
        "getProperty",
        "map1",
        "i",
        "c",
        "c",
        "c",
        "map1",
        "i",
        "c",
        "c",
        "c",
        "c",
        "map1",
        "i",
        "c",
        "c",
        "c",
        "c",
        "map1",
        "i",
        "c",
        "map1",
        "i",
        "map1",
        "i",
        "map2",
        "i",
        "i",
        "map2",
        "length",
        "i",
        "map2",
        "i",
        "i",
        "i",
        "i",
        "map2",
        "map1",
        "i",
        "i",
        "s",
        "encode",
        "s",
        "getBytes",
        "encodeLines",
        "length",
        "systemLineSeparator",
        "iOff",
        "iLen",
        "lineLen",
        "lineSeparator",
        "blockLen",
        "lineLen",
        "blockLen",
        "lines",
        "iLen",
        "blockLen",
        "blockLen",
        "bufLen",
        "iLen",
        "lines",
        "lineSeparator",
        "length",
        "buf",
        "bufLen",
        "ip",
        "ip",
        "iLen",
        "l",
        "min",
        "iLen",
        "ip",
        "blockLen",
        "buf",
        "append",
        "encode",
        "iOff",
        "ip",
        "l",
        "buf",
        "append",
        "lineSeparator",
        "ip",
        "l",
        "buf",
        "toString",
        "encode",
        "length",
        "iLen",
        "encode",
        "iLen",
        "iOff",
        "iLen",
        "oDataLen",
        "iLen",
        "oLen",
        "iLen",
        "oLen",
        "ip",
        "iOff",
        "iEnd",
        "iOff",
        "iLen",
        "op",
        "ip",
        "iEnd",
        "i0",
        "ip",
        "i1",
        "ip",
        "iEnd",
        "ip",
        "i2",
        "ip",
        "iEnd",
        "ip",
        "o0",
        "i0",
        "o1",
        "i0",
        "i1",
        "o2",
        "i1",
        "i2",
        "o3",
        "i2",
        "op",
        "map1",
        "o0",
        "op",
        "map1",
        "o1",
        "op",
        "op",
        "oDataLen",
        "map1",
        "o2",
        "op",
        "op",
        "op",
        "oDataLen",
        "map1",
        "o3",
        "op",
        "s",
        "decode",
        "s",
        "s",
        "buf",
        "s",
        "length",
        "p",
        "ip",
        "ip",
        "s",
        "length",
        "ip",
        "c",
        "s",
        "charAt",
        "ip",
        "c",
        "c",
        "c",
        "c",
        "buf",
        "p",
        "c",
        "decode",
        "buf",
        "p",
        "s",
        "decode",
        "s",
        "toCharArray",
        "decode",
        "length",
        "iOff",
        "iLen",
        "iLen",
        "iLen",
        "iOff",
        "iLen",
        "iLen",
        "oLen",
        "iLen",
        "oLen",
        "ip",
        "iOff",
        "iEnd",
        "iOff",
        "iLen",
        "op",
        "ip",
        "iEnd",
        "i0",
        "ip",
        "i1",
        "ip",
        "i2",
        "ip",
        "iEnd",
        "ip",
        "i3",
        "ip",
        "iEnd",
        "ip",
        "i0",
        "i1",
        "i2",
        "i3",
        "b0",
        "map2",
        "i0",
        "b1",
        "map2",
        "i1",
        "b2",
        "map2",
        "i2",
        "b3",
        "map2",
        "i3",
        "b0",
        "b1",
        "b2",
        "b3",
        "o0",
        "b0",
        "b1",
        "o1",
        "b1",
        "b2",
        "o2",
        "b2",
        "b3",
        "op",
        "o0",
        "op",
        "oLen",
        "op",
        "o1",
        "op",
        "oLen",
        "op",
        "o2"
    ],
    "literals": [
        "\"line.separator\"",
        "\"Length of Base64 encoded input string is not a multiple of 4.\"",
        "\"Illegal character in Base64 encoded data.\"",
        "\"Illegal character in Base64 encoded data.\""
    ],
    "variables": [],
    "comments": [
        "The line separator string of the operating system.",
        "Mapping table from 6-bit nibbles to Base64 characters.",
        "Mapping table from Base64 characters to 6-bit nibbles.",
        "output length without padding",
        "output length including padding",
        "Dummy constructor."
    ],
    "docstrings": [
        "Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n*\n*  WSO2 Inc. licenses this file to you under the Apache License,\n*  Version 2.0 (the \"License\"); you may not use this file except\n*  in compliance with the License.\n*  You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.",
        "* Encodes a string into Base64 format.\n    * No blanks or line breaks are inserted.\n    * @param s  A String to be encoded.\n    * @return   A String containing the Base64 encoded data.",
        "* Encodes a byte array into Base 64 format and breaks the output into lines of 76 characters.\n    * This method is compatible with <code>sun.misc.BASE64Encoder.encodeBuffer(byte[])</code>.\n    * @param in  An array containing the data bytes to be encoded.\n    * @return    A String containing the Base64 encoded data, broken into lines.",
        "* Encodes a byte array into Base 64 format and breaks the output into lines.\n    * @param in            An array containing the data bytes to be encoded.\n    * @param iOff          Offset of the first byte in <code>in</code> to be processed.\n    * @param iLen          Number of bytes to be processed in <code>in</code>, starting at <code>iOff</code>.\n    * @param lineLen       Line length for the output data. Should be a multiple of 4.\n    * @param lineSeparator The line separator to be used to separate the output lines.\n    * @return              A String containing the Base64 encoded data, broken into lines.",
        "* Encodes a byte array into Base64 format.\n    * No blanks or line breaks are inserted in the output.\n    * @param in  An array containing the data bytes to be encoded.\n    * @return    A character array containing the Base64 encoded data.",
        "* Encodes a byte array into Base64 format.\n    * No blanks or line breaks are inserted in the output.\n    * @param in    An array containing the data bytes to be encoded.\n    * @param iLen  Number of bytes to process in <code>in</code>.\n    * @return      A character array containing the Base64 encoded data.",
        "* Encodes a byte array into Base64 format.\n    * No blanks or line breaks are inserted in the output.\n    * @param in    An array containing the data bytes to be encoded.\n    * @param iOff  Offset of the first byte in <code>in</code> to be processed.\n    * @param iLen  Number of bytes to process in <code>in</code>, starting at <code>iOff</code>.\n    * @return      A character array containing the Base64 encoded data.",
        "* Decodes a string from Base64 format.\n    * No blanks or line breaks are allowed within the Base64 encoded input data.\n    * @param s  A Base64 String to be decoded.\n    * @return   A String containing the decoded data.\n    * @throws   IllegalArgumentException If the input is not valid Base64 encoded data.",
        "* Decodes a byte array from Base64 format and ignores line separators, tabs and blanks.\n    * CR, LF, Tab and Space characters are ignored in the input data.\n    * This method is compatible with <code>sun.misc.BASE64Decoder.decodeBuffer(String)</code>.\n    * @param s  A Base64 String to be decoded.\n    * @return   An array containing the decoded data bytes.\n    * @throws   IllegalArgumentException If the input is not valid Base64 encoded data.",
        "* Decodes a byte array from Base64 format.\n    * No blanks or line breaks are allowed within the Base64 encoded input data.\n    * @param s  A Base64 String to be decoded.\n    * @return   An array containing the decoded data bytes.\n    * @throws   IllegalArgumentException If the input is not valid Base64 encoded data.",
        "* Decodes a byte array from Base64 format.\n    * No blanks or line breaks are allowed within the Base64 encoded input data.\n    * @param in  A character array containing the Base64 encoded data.\n    * @return    An array containing the decoded data bytes.\n    * @throws    IllegalArgumentException If the input is not valid Base64 encoded data.",
        "* Decodes a byte array from Base64 format.\n    * No blanks or line breaks are allowed within the Base64 encoded input data.\n    * @param in    A character array containing the Base64 encoded data.\n    * @param iOff  Offset of the first character in <code>in</code> to be processed.\n    * @param iLen  Number of characters to process in <code>in</code>, starting at <code>iOff</code>.\n    * @return      An array containing the decoded data bytes.\n    * @throws      IllegalArgumentException If the input is not valid Base64 encoded data."
    ],
    "functions": [
        "encodeString",
        "encodeLines",
        "encodeLines",
        "encode",
        "encode",
        "encode",
        "decodeString",
        "decodeLines",
        "decode",
        "decode",
        "decode",
        "Base64Coder"
    ],
    "classes": [
        "Base64Coder"
    ]
}