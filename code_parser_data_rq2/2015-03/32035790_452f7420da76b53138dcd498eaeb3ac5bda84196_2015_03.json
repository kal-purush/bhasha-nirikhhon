{
    "identifiers": [
        "x",
        "x",
        "x",
        "x",
        "x",
        "isFunction",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "target",
        "decorators",
        "target",
        "decorators",
        "i",
        "i",
        "decorators",
        "i",
        "decorator",
        "target",
        "decorated",
        "decorated",
        "target",
        "decorated",
        "target",
        "target",
        "propertyKey",
        "decorators",
        "target",
        "propertyKey",
        "descriptor",
        "target",
        "propertyKey",
        "descriptor",
        "descriptor",
        "decorators",
        "i",
        "i",
        "decorators",
        "i",
        "decorator",
        "target",
        "propertyKey",
        "descriptor",
        "decorated",
        "decorated",
        "descriptor",
        "decorated",
        "enumerable",
        "descriptor",
        "configurable",
        "descriptor",
        "writable",
        "descriptor",
        "value",
        "descriptor",
        "get",
        "descriptor",
        "descriptor",
        "target",
        "propertyKey",
        "descriptor",
        "target",
        "target",
        "parameterIndex",
        "decorators",
        "target",
        "paramterIndex",
        "decorators",
        "i",
        "i",
        "decorators",
        "i",
        "decorator",
        "target",
        "parameterIndex",
        "metadataKey",
        "metadata",
        "target",
        "keyOrIndex",
        "isObject",
        "target",
        "isPropertyKey",
        "keyOrIndex",
        "definePropertyMetadata",
        "target",
        "keyOrIndex",
        "metadataKey",
        "metadata",
        "isFunction",
        "target",
        "isNumber",
        "keyOrIndex",
        "defineParameterMetadata",
        "target",
        "keyOrIndex",
        "metadataKey",
        "metadata",
        "isFunction",
        "target",
        "defineMetadata",
        "target",
        "metadataKey",
        "metadata",
        "metadataFor",
        "metadataKey",
        "target",
        "metadataFor",
        "metadataKey",
        "target",
        "propertyKey",
        "metadataFor",
        "metadataKey",
        "target",
        "paramIndex",
        "metadataKey",
        "target",
        "keyOrIndex",
        "isObject",
        "target",
        "isPropertyKey",
        "keyOrIndex",
        "getOwnPropertyMetadata",
        "target",
        "keyOrIndex",
        "metadataKey",
        "isFunction",
        "target",
        "isNumber",
        "keyOrIndex",
        "getParameterMetadata",
        "target",
        "keyOrIndex",
        "metadataKey",
        "getOwnMetadata",
        "target",
        "metadataKey",
        "target",
        "metadataKey",
        "metadata",
        "weakMetadata",
        "target",
        "metadataMap",
        "metadataMap",
        "weakMetadata",
        "target",
        "metadataMap",
        "metadataMap",
        "metadataKey",
        "metadata",
        "target",
        "metadataKey",
        "target",
        "target",
        "metadataKey",
        "target",
        "target",
        "target",
        "metadataKey",
        "target",
        "target",
        "metadataKey",
        "target",
        "metadataKey",
        "target",
        "target",
        "target",
        "target",
        "key",
        "target",
        "keySet",
        "key",
        "keySet",
        "key",
        "keys",
        "key",
        "target",
        "target",
        "keys",
        "target",
        "metadataKey",
        "weakMetadata",
        "target",
        "metadataMap",
        "metadataMap",
        "metadataKey",
        "target",
        "metadataKey",
        "weakMetadata",
        "target",
        "metadataMap",
        "metadataMap",
        "metadataKey",
        "target",
        "weakMetadata",
        "target",
        "metadataMap",
        "metadataMap",
        "target",
        "metadataKey",
        "weakMetadata",
        "target",
        "metadataMap",
        "metadataMap",
        "metadataKey",
        "target",
        "propertyKey",
        "metadataKey",
        "metadata",
        "weakPropertyMetadata",
        "target",
        "propertyMap",
        "propertyMap",
        "weakPropertyMetadata",
        "target",
        "propertyMap",
        "propertyMap",
        "propertyKey",
        "metadataMap",
        "metadataMap",
        "propertyMap",
        "propertyKey",
        "metadataMap",
        "metadataMap",
        "metadataKey",
        "metadata",
        "target",
        "propertyKey",
        "metadataKey",
        "target",
        "target",
        "propertyKey",
        "metadataKey",
        "target",
        "target",
        "target",
        "propertyKey",
        "metadataKey",
        "target",
        "target",
        "propertyKey",
        "metadataKey",
        "target",
        "propertyKey",
        "metadataKey",
        "target",
        "target",
        "target",
        "propertyKey",
        "target",
        "key",
        "target",
        "keySet",
        "key",
        "keySet",
        "key",
        "keys",
        "key",
        "target",
        "target",
        "keys",
        "target",
        "propertyKey",
        "metadataKey",
        "weakPropertyMetadata",
        "target",
        "propertyMap",
        "propertyMap",
        "propertyKey",
        "metadataMap",
        "metadataMap",
        "metadataKey",
        "target",
        "propertyKey",
        "metadataKey",
        "weakPropertyMetadata",
        "target",
        "propertyMap",
        "propertyMap",
        "propertyKey",
        "metadataMap",
        "metadataMap",
        "metadataKey",
        "target",
        "propertyKey",
        "weakPropertyMetadata",
        "target",
        "propertyMap",
        "propertyMap",
        "propertyKey",
        "metadataMap",
        "metadataMap",
        "target",
        "propertyKey",
        "metadataKey",
        "weakPropertyMetadata",
        "target",
        "propertyMap",
        "propertyMap",
        "propertyKey",
        "metadataMap",
        "metadataMap",
        "metadataKey",
        "target",
        "parameterIndex",
        "metadataKey",
        "metadata",
        "weakParameterMetadata",
        "target",
        "parameterMap",
        "parameterMap",
        "weakParameterMetadata",
        "target",
        "parameterMap",
        "parameterMap",
        "parameterIndex",
        "metadataMap",
        "metadataMap",
        "parameterMap",
        "parameterIndex",
        "metadataMap",
        "metadataMap",
        "metadataKey",
        "metadata",
        "target",
        "parameterIndex",
        "metadataKey",
        "weakParameterMetadata",
        "target",
        "parameterMap",
        "parameterMap",
        "parameterIndex",
        "metadataMap",
        "metadataMap",
        "metadataKey",
        "target",
        "parameterIndex",
        "metadataKey",
        "weakParameterMetadata",
        "target",
        "parameterMap",
        "parameterMap",
        "parameterIndex",
        "metadataMap",
        "metadataMap",
        "metadataKey",
        "target",
        "parameterIndex",
        "weakParameterMetadata",
        "target",
        "parameterMap",
        "parameterMap",
        "parameterIndex",
        "metadataMap",
        "metadataMap",
        "target",
        "parameterIndex",
        "metadataKey",
        "weakParameterMetadata",
        "target",
        "parameterMap",
        "parameterMap",
        "parameterIndex",
        "metadataMap",
        "metadataMap",
        "metadataKey"
    ],
    "literals": [
        "\"use strict\"",
        "\"function\"",
        "\"object\"",
        "\"number\"",
        "\"string\"",
        "\"symbol\"",
        "string"
    ],
    "variables": [
        "weakMetadata",
        "weakPropertyMetadata",
        "weakParameterMetadata",
        "i",
        "decorator",
        "decorated",
        "descriptor",
        "descriptor",
        "i",
        "decorator",
        "decorated",
        "i",
        "decorator",
        "metadataMap",
        "keySet",
        "keys",
        "metadataMap",
        "metadataMap",
        "metadataMap",
        "metadataMap",
        "propertyMap",
        "metadataMap",
        "keySet",
        "keys",
        "propertyMap",
        "metadataMap",
        "propertyMap",
        "metadataMap",
        "propertyMap",
        "metadataMap",
        "propertyMap",
        "metadataMap",
        "parameterMap",
        "metadataMap",
        "parameterMap",
        "metadataMap",
        "parameterMap",
        "metadataMap",
        "parameterMap",
        "metadataMap",
        "parameterMap",
        "metadataMap"
    ],
    "comments": [
        "(target: Object, key: string | symbol)",
        "(target: Function, index: number)",
        "(target: Function)"
    ],
    "docstrings": [
        "* Applies a set of decorators to a target object.\n      * @param target The target object.\n      * @param decorators An array of decorators.\n      * @remarks Decorators are applied in reverse order.",
        "* Applies a set of decorators to a property of a target object.\n      * @param target The target object.\n      * @param propertyKey The property key to decorate.\n      * @param decorators An array of decorators.\n      * @remarks Decorators are applied in reverse order.",
        "* Applies a set of decorators to a function parameter.\n      * @param target The target function.\n      * @param parameterIndex The index of the parameter to decorate.\n      * @param decorators An array of decorators.\n      * @remarks Decorators are applied in reverse order.",
        "* A default metadata decorator that can be used on a class, class member, or parameter.\n      * @example\n      *\n      *     // on class\n      *     @Reflect.metadata(key, value)\n      *     class MyClass {\n      *\n      *         // on member\n      *         @Reflect.metadata(key, value)\n      *         method1() { \n      *         }\n      *\n      *         // on parameter\n      *         method2(@Reflect.metadata(key, value) x) {\n      *         }\n      *     }",
        "* Gets the own metadata for a property on an object, a parameter of a function, or an object.",
        "* Define a unique metadata entry on the target.\n      * @param target The target object on which to define metadata.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param metadata A value that contains attached metadata.\n      * @example\n      * ```\n      * // Component decorator factory as metadata-producing annotation.\n      * function Component(options) {\n      *     return (target) => { Reflect.defineMetadata(target, Component, options); }\n      * }\n      * ```",
        "* Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n      * @param target The target object on which the metadata is defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.",
        "* Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n      * @param target The target object on which the metadata is defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      * ```\n      * let metadata = Reflect.getMetadata(target, Component);\n      * ```",
        "* Gets the metadata keys defined on the target object or its prototype chain.\n      * @param target The target object on which the metadata is defined.\n      * @returns An array of unique metadata keys.",
        "* Gets a value indicating whether the target object has the provided metadata key defined.\n      * @param target The target object on which the metadata is defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.",
        "* Gets the metadata value for the provided metadata key on the target object.\n      * @param target The target object on which the metadata is defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      * ```\n      * let metadata = Reflect.getOwnMetadata(target, Component);\n      * ```",
        "* Gets the unique metadata keys defined on the target object.\n      * @param target The target object on which the metadata is defined.\n      * @returns An array of unique metadata keys.",
        "* Deletes the metadata entry from the target object with the provided key.\n      * @param target The target object on which the metadata is defined.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.",
        "* Define a metadata entry on a property of the target.\n      * @param target The target object on which to define metadata.\n      * @param propertyKey The key of the property on the target.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param metadata A value that contains attached metadata.\n      * @example\n      * ```\n      * // MarshalAs decorator factory as metadata-producing annotation.\n      * function MarshalAs(options) {\n      *     return (target, propertyKey) => { Reflect.definePropertyMetadata(target, propertyKey, MarshalAs, options); }\n      * }\n      * ```",
        "* Gets a value indicating whether a property of the target object or its prototype chain has the provided metadata key defined.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey The key of the property on the target.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns `true` if the metadata key was defined on a property of the target object or its prototype chain; otherwise, `false`.",
        "* Gets the first metadata value for the provided metadata key on a property of the target object or its prototype chain.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey The key of the property on the target.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      * ```\n      * let metadata = Reflect.getPropertyMetadata(target, propertyKey, MarshalAs);\n      * ```",
        "* Gets the metadata keys defined on a property of the target object or its prototype chain.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey The key of the property on the target.\n      * @returns An array of unique metadata keys.",
        "* Gets a value indicating whether a property of the target object has the provided metadata key defined.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey The key of the property on the target.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.",
        "* Gets the metadata value for the provided metadata key on a property of the target object.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey The key of the property on the target.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      * ```\n      * let metadata = Reflect.getOwnPropertyMetadata(target, propertyKey, MarshalAs);\n      * ```",
        "* Gets the metadata keys defined on a property of the target object.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey The key of the property on the target.\n      * @returns An array of unique metadata keys.",
        "* Deletes the metadata from a property of the target object with the provided key.\n      * @param target The target object on which the metadata is defined.\n      * @param propertyKey The key of the property on the target.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.",
        "* Define a metadata entry on a parameter of the target function.\n      * @param target The target function on which to define metadata.\n      * @param parameterIndex The ordinal parameter index.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @param metadata A value that contains attached metadata.\n      * @returns The target function.\n      * @example\n      * ```\n      * // Inject decorator factory as metadata-producing annotation.\n      * function Inject(type) {\n      *     return (target, parameterIndex) => { Reflect.defineMetadata(target, parameterIndex, Inject, type); }\n      * }\n      * ```",
        "* Gets a value indicating whether a parameter of the target function or its prototype chain has the provided metadata key defined.\n      * @param target The target function on which the metadata is defined.\n      * @param parameterIndex The ordinal parameter index.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns `true` if the metadata key was defined on a property of the target function or its prototype chain; otherwise, `false`.",
        "* Gets the first occurance of metadata for the provided metadata key on a parameter of the target function.\n      * @param target The target function on which the metadata is defined.\n      * @param parameterIndex The ordinal parameter index.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n      * @example\n      * ```\n      * let metadata = Reflect.getParameterMetadata(target, parameterIndex, Inject);\n      * ```",
        "* Gets the unique metadata keys defined on a parameter of the target function.\n      * @param target The target function on which the metadata is defined.\n      * @param parameterIndex The ordinal parameter index.\n      * @returns An array of unique metadata keys.",
        "* Deletes the metadata from a parameter of the target function with the provided key.\n      * @param target The target function on which the metadata is defined.\n      * @param parameterIndex The ordinal parameter index.\n      * @param metadataKey A key used to store and retrieve metadata.\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false."
    ],
    "functions": [
        "isFunction",
        "isObject",
        "isNumber",
        "isPropertyKey",
        "decorate",
        "decorateProperty",
        "decorateParameter",
        "metadata",
        "metadataFor",
        "defineMetadata",
        "hasMetadata",
        "getMetadata",
        "getMetadataKeys",
        "hasOwnMetadata",
        "getOwnMetadata",
        "getOwnMetadataKeys",
        "deleteOwnMetadata",
        "definePropertyMetadata",
        "hasPropertyMetadata",
        "getPropertyMetadata",
        "getPropertyMetadataKeys",
        "hasOwnPropertyMetadata",
        "getOwnPropertyMetadata",
        "getOwnPropertyMetadataKeys",
        "deleteOwnPropertyMetadata",
        "defineParameterMetadata",
        "hasParameterMetadata",
        "getParameterMetadata",
        "getParameterMetadataKeys",
        "deleteParameterMetadata"
    ],
    "classes": []
}