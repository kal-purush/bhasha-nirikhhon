{
    "identifiers": [
        "crackingthecode",
        "part1datastructures",
        "java",
        "util",
        "Arrays",
        "trim",
        "length",
        "length",
        "check",
        "i",
        "i",
        "length",
        "i",
        "val",
        "charAt",
        "i",
        "check",
        "val",
        "check",
        "val",
        "trim",
        "length",
        "charset",
        "i",
        "i",
        "length",
        "i",
        "val",
        "charAt",
        "i",
        "charset",
        "val",
        "charset",
        "val",
        "cstr",
        "cstr",
        "cstr",
        "length",
        "i",
        "j",
        "cstr",
        "length",
        "i",
        "j",
        "temp",
        "cstr",
        "i",
        "cstr",
        "i",
        "cstr",
        "j",
        "cstr",
        "j",
        "temp",
        "i",
        "j",
        "cstr",
        "cstr",
        "cstr",
        "cstr",
        "length",
        "stringBuilder",
        "stringBuffer",
        "i",
        "i",
        "cstr",
        "length",
        "i",
        "i",
        "cstr",
        "length",
        "cstr",
        "i",
        "cstr",
        "i",
        "cstr",
        "i",
        "cstr",
        "i",
        "cstr",
        "i",
        "cstr",
        "str2",
        "str2",
        "length",
        "length",
        "length",
        "str2",
        "length",
        "length",
        "chars",
        "toCharArray",
        "chars2",
        "str2",
        "toCharArray",
        "chars",
        "length",
        "chars2",
        "length",
        "Arrays",
        "sort",
        "chars",
        "Arrays",
        "sort",
        "chars2",
        "Arrays",
        "equals",
        "chars",
        "chars2",
        "str2",
        "str2",
        "total",
        "length",
        "length",
        "length",
        "str2",
        "length",
        "length",
        "counts",
        "total",
        "i",
        "i",
        "length",
        "i",
        "counts",
        "charAt",
        "i",
        "counts",
        "str2",
        "charAt",
        "i",
        "i",
        "i",
        "total",
        "i",
        "counts",
        "i",
        "stringBuilder",
        "chars",
        "toCharArray",
        "aChar",
        "chars",
        "aChar",
        "stringBuilder",
        "append",
        "stringBuilder",
        "append",
        "aChar",
        "stringBuilder",
        "toString",
        "replaceAll",
        "image",
        "image",
        "length",
        "image",
        "length",
        "i",
        "i",
        "length",
        "i",
        "last",
        "length",
        "i",
        "j",
        "i",
        "j",
        "last",
        "j",
        "offset",
        "j",
        "i",
        "temp",
        "image",
        "i",
        "j",
        "image",
        "i",
        "j",
        "image",
        "last",
        "offset",
        "i",
        "image",
        "last",
        "offset",
        "i",
        "image",
        "last",
        "last",
        "offset",
        "image",
        "last",
        "last",
        "offset",
        "image",
        "j",
        "last",
        "image",
        "j",
        "last",
        "temp",
        "image",
        "image",
        "image",
        "length",
        "image",
        "length",
        "newImage",
        "length",
        "length",
        "i",
        "i",
        "length",
        "i",
        "j",
        "j",
        "length",
        "j",
        "newImage",
        "i",
        "j",
        "image",
        "length",
        "j",
        "i",
        "newImage",
        "matrix",
        "matrix",
        "rows",
        "matrix",
        "length",
        "cols",
        "matrix",
        "length",
        "row",
        "rows",
        "col",
        "cols",
        "i",
        "i",
        "rows",
        "i",
        "j",
        "j",
        "cols",
        "j",
        "matrix",
        "i",
        "j",
        "row",
        "i",
        "col",
        "j",
        "i",
        "i",
        "rows",
        "i",
        "j",
        "j",
        "cols",
        "j",
        "row",
        "i",
        "col",
        "j",
        "matrix",
        "i",
        "j",
        "matrix",
        "s1",
        "s2",
        "s1",
        "s2",
        "s1",
        "length",
        "s2",
        "length",
        "s2",
        "s2",
        "contains",
        "s1"
    ],
    "literals": [
        "\"%20\"",
        "\" \"",
        "\"%20\""
    ],
    "variables": [
        "stringBuilder",
        "stringBuffer"
    ],
    "comments": [
        "Time - O(N), Space O(1)",
        "assuming lower case english alphabet",
        "Time - O(N), Space - O(N)",
        "need to increase if charset is greater than 256",
        "Time - O(N), Space - O(1)",
        "TODO",
        "Time - N LOG(N), Space - O(N)",
        "Time - O(N), Space - O(N)",
        "need to increase if charset is greater than 256",
        "all chars",
        "Time - O(N), Space - O(N)",
        "Time - O(N), Space - O(N)",
        "Time - O(N), Space - O(1)",
        "save top",
        "left -> top",
        "bottom -> left",
        "right -> bottom",
        "top -> right",
        "Time - O(N), Space - O(N)",
        "Time - O(NM), Space - O(OM)",
        "keep positions of \"0\"s",
        "mark the positions of the \"0\"s",
        "finally go back and set row/col to 0",
        "Time - O(n), Space O(N)"
    ],
    "docstrings": [
        "* 1.1 - Implement an algorithm to determine if a string has all unique characters. What if you\n     * can not use additional data structures?",
        "* 1.2 - Write code to reverse a C-Style String. (C-String means that “abcd” is represented as\n     * five characters, including the null character.)",
        "* 1.3 - Design an algorithm and write code to remove the duplicate characters in a string\n     * without using any additional buffer. NOTE: One or two additional variables are fine. An extra\n     * copy of the array is not.\n     * FOLLOW UP\n     * Write the test cases for this method.",
        "* 1.4 - Write a method to decide if two strings are anagrams or not.",
        "* 1.5 - Write a method to replace all spaces in a string with '%20'.",
        "* 1.6 - Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes,\n     * write a method to rotate the image by 90 degrees. Can you do this in place?",
        "* 1.7 - Write an algorithm such that if an element in an MxN matrix is 0, its entire row and\n     * column is set to 0.",
        "* 1.8 - Assume you have a method isSubstring which checks if one word is a substring of\n     * another. Given two strings, s1 and s2, write code to check if s2 is a rotation of s1 using\n     * only one call to isSubstring (i.e., “waterbottle” is a rotation of “erbottlewat”)."
    ],
    "functions": [
        "isUniqueCharacters",
        "isUniqueCharacters2",
        "reverseString",
        "removeDuplicates",
        "isAnagram",
        "isAnagram2",
        "replaceSpaces",
        "replaceSpaces2",
        "rotateImage",
        "rotateImage2",
        "markRows",
        "isSubstring"
    ],
    "classes": [
        "Chapter1ArraysAndStrings"
    ]
}