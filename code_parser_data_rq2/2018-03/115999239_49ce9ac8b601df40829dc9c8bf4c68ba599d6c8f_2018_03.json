{
    "identifiers": [
        "numpy",
        "np",
        "sklearn",
        "ensemble",
        "GradientBoostingClassifier",
        "sklearn",
        "model_selection",
        "train_test_split",
        "sklearn",
        "pipeline",
        "make_pipeline",
        "make_union",
        "tpot",
        "builtins",
        "StackingEstimator",
        "Config",
        "np",
        "load",
        "DGBDT_config",
        "trainingdata_path",
        "trainingdata",
        "trainingdata",
        "reshape",
        "train_test_split",
        "x",
        "y",
        "test_size",
        "random_state",
        "make_pipeline",
        "StackingEstimator",
        "estimator",
        "GradientBoostingClassifier",
        "learning_rate",
        "max_depth",
        "max_features",
        "min_samples_leaf",
        "min_samples_split",
        "n_estimators",
        "subsample",
        "GradientBoostingClassifier",
        "learning_rate",
        "max_depth",
        "max_features",
        "min_samples_leaf",
        "min_samples_split",
        "n_estimators",
        "subsample",
        "pipeline",
        "fit",
        "train_x",
        "train_y",
        "pipeline",
        "score",
        "train_x",
        "train_y",
        "pipeline",
        "score",
        "validation_x",
        "validation_y",
        "score_train",
        "score_test",
        "np",
        "load",
        "DGBDT_config",
        "testingdata_path",
        "pipeline",
        "predict",
        "testingdata",
        "predict",
        "np",
        "savetxt",
        "predict"
    ],
    "literals": [
        "\"./data/trainingdata_bool.npy\"",
        "\"./data/test_x.npy\"",
        "'__main__'",
        "'./data/predict/predict.txt'"
    ],
    "variables": [
        "trainingdata_path",
        "testingdata_path",
        "DGBDT_config",
        "trainingdata",
        "x",
        "y",
        "train_x",
        "validation_x",
        "train_y",
        "validation_y",
        "pipeline",
        "score_train",
        "score_test",
        "testingdata",
        "predict"
    ],
    "comments": [
        "prediction_train = pipeline.predict(train_x)",
        "prediction_val = pipeline.predict(validation_x)",
        "mse = [np.mean(np.square(prediction_train - train_y)) / 2,",
        "np.mean(np.square(prediction_val - validation_y)) / 2]",
        "print(mse)"
    ],
    "docstrings": [],
    "functions": [],
    "classes": [
        "Config"
    ]
}