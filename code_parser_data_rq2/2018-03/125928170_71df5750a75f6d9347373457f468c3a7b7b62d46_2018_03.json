{
    "identifiers": [
        "XRegExp",
        "XRegExp",
        "pattern",
        "flags",
        "XRegExp",
        "XRegExp",
        "pattern",
        "flags",
        "clone",
        "pattern",
        "isInsideConstructor",
        "flags",
        "flags",
        "context",
        "flag",
        "flags",
        "flag",
        "flag",
        "flags",
        "flag",
        "pos",
        "pattern",
        "tokenResult",
        "runTokens",
        "pattern",
        "pos",
        "currScope",
        "context",
        "tokenResult",
        "output",
        "tokenResult",
        "pos",
        "tokenResult",
        "match",
        "nativ",
        "nativeTokens",
        "currScope",
        "pattern",
        "pos",
        "output",
        "match",
        "pos",
        "match",
        "chr",
        "pattern",
        "pos",
        "chr",
        "currScope",
        "XRegExp",
        "chr",
        "currScope",
        "XRegExp",
        "output",
        "chr",
        "pos",
        "regex",
        "output",
        "nativ",
        "flags",
        "flagClip",
        "regex",
        "pattern",
        "context",
        "context",
        "regex",
        "XRegExp",
        "XRegExp",
        "XRegExp",
        "nativ",
        "nativ",
        "x",
        "x",
        "nativeTokens",
        "XRegExp",
        "nativeTokens",
        "XRegExp",
        "XRegExp",
        "regex",
        "handler",
        "scope",
        "trigger",
        "tokens",
        "clone",
        "regex",
        "hasNativeY",
        "handler",
        "scope",
        "XRegExp",
        "trigger",
        "XRegExp",
        "pattern",
        "flags",
        "pattern",
        "flags",
        "XRegExp",
        "key",
        "XRegExp",
        "key",
        "XRegExp",
        "pattern",
        "flags",
        "XRegExp",
        "regex",
        "clone",
        "regex",
        "XRegExp",
        "XRegExp",
        "regex",
        "pos",
        "anchored",
        "clone",
        "regex",
        "anchored",
        "hasNativeY",
        "r2",
        "pos",
        "pos",
        "match",
        "r2",
        "anchored",
        "match",
        "match",
        "pos",
        "match",
        "regex",
        "regex",
        "match",
        "r2",
        "match",
        "XRegExp",
        "XRegExp",
        "XRegExp",
        "o",
        "o",
        "XRegExp",
        "regex",
        "callback",
        "context",
        "clone",
        "regex",
        "match",
        "r2",
        "regex",
        "regex",
        "r2",
        "callback",
        "context",
        "match",
        "i",
        "regex",
        "r2",
        "match",
        "r2",
        "regex",
        "regex",
        "XRegExp",
        "chain",
        "recurseChain",
        "values",
        "level",
        "chain",
        "level",
        "chain",
        "level",
        "chain",
        "level",
        "clone",
        "item",
        "i",
        "i",
        "values",
        "i",
        "XRegExp",
        "values",
        "i",
        "regex",
        "match",
        "matches",
        "item",
        "match",
        "item",
        "match",
        "level",
        "chain",
        "matches",
        "matches",
        "recurseChain",
        "matches",
        "level",
        "context",
        "args",
        "args",
        "context",
        "origLastIndex",
        "match",
        "nativ",
        "arguments",
        "match",
        "compliantExecNpcg",
        "match",
        "indexOf",
        "match",
        "r2",
        "nativ",
        "getNativeFlags",
        "nativ",
        "match",
        "r2",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "match",
        "i",
        "i",
        "match",
        "i",
        "name",
        "i",
        "name",
        "match",
        "name",
        "match",
        "i",
        "compliantLastIndexIncrement",
        "match",
        "match",
        "origLastIndex",
        "match",
        "origLastIndex",
        "match",
        "nativ",
        "match",
        "compliantLastIndexIncrement",
        "match",
        "match",
        "origLastIndex",
        "match",
        "regex",
        "XRegExp",
        "regex",
        "regex",
        "regex",
        "regex",
        "nativ",
        "arguments",
        "regex",
        "result",
        "regex",
        "search",
        "replacement",
        "XRegExp",
        "search",
        "isRegex",
        "search",
        "captureNames",
        "search",
        "search",
        "origLastIndex",
        "search",
        "search",
        "search",
        "replacement",
        "result",
        "nativ",
        "search",
        "captureNames",
        "arguments",
        "arguments",
        "i",
        "captureNames",
        "i",
        "captureNames",
        "i",
        "arguments",
        "captureNames",
        "i",
        "arguments",
        "i",
        "isRegex",
        "search",
        "search",
        "arguments",
        "arguments",
        "arguments",
        "replacement",
        "arguments",
        "result",
        "nativ",
        "search",
        "nativ",
        "replacement",
        "replacementToken",
        "$0",
        "$1",
        "$2",
        "$1",
        "$1",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "$1",
        "$1",
        "$1",
        "$0",
        "$1",
        "args",
        "literalNumbers",
        "$1",
        "literalNumbers",
        "$1",
        "$1",
        "$1",
        "args",
        "$1",
        "literalNumbers",
        "$2",
        "n",
        "args",
        "args",
        "n",
        "n",
        "captureNames",
        "indexOf",
        "captureNames",
        "$2",
        "n",
        "args",
        "n",
        "$0",
        "isRegex",
        "search",
        "search",
        "search",
        "origLastIndex",
        "result",
        "s",
        "limit",
        "XRegExp",
        "s",
        "nativ",
        "arguments",
        "limit",
        "limit",
        "limit",
        "Infinity",
        "limit",
        "limit",
        "limit",
        "s",
        "XRegExp",
        "s",
        "match",
        "s",
        "s",
        "lastLastIndex",
        "output",
        "lastLastIndex",
        "match",
        "match",
        "match",
        "output",
        "match",
        "lastLength",
        "match",
        "lastLastIndex",
        "s",
        "output",
        "limit",
        "s",
        "match",
        "s",
        "lastLastIndex",
        "nativ",
        "s",
        "lastLength",
        "output",
        "output",
        "lastLastIndex",
        "output",
        "limit",
        "output",
        "limit",
        "output",
        "regex",
        "additionalFlags",
        "XRegExp",
        "regex",
        "regex",
        "regex",
        "XRegExp",
        "regex",
        "getNativeFlags",
        "regex",
        "additionalFlags",
        "x",
        "regex",
        "x",
        "x",
        "x",
        "regex",
        "regex",
        "regex",
        "regex",
        "regex",
        "regex",
        "regex",
        "pattern",
        "index",
        "scope",
        "context",
        "tokens",
        "isInsideConstructor",
        "i",
        "t",
        "tokens",
        "i",
        "scope",
        "t",
        "t",
        "t",
        "context",
        "t",
        "index",
        "match",
        "t",
        "pattern",
        "match",
        "match",
        "index",
        "result",
        "t",
        "context",
        "match",
        "scope",
        "match",
        "err",
        "err",
        "isInsideConstructor",
        "result",
        "array",
        "item",
        "array",
        "item",
        "i",
        "array",
        "i",
        "array",
        "i",
        "item",
        "i",
        "XRegExp",
        "match",
        "nativ",
        "quantifier",
        "match",
        "match",
        "match",
        "XRegExp",
        "XRegExp",
        "match",
        "match",
        "XRegExp",
        "match",
        "indexOf",
        "match",
        "index",
        "index",
        "isNaN",
        "match",
        "match",
        "match",
        "match",
        "XRegExp",
        "match",
        "match",
        "XRegExp",
        "match",
        "match",
        "XRegExp",
        "match",
        "nativ",
        "quantifier",
        "match",
        "match",
        "match",
        "XRegExp",
        "XRegExp",
        "XRegExp"
    ],
    "literals": [
        "\"can't load XRegExp twice in the same frame\"",
        "\"can't supply flags when constructing one RegExp from another\"",
        "\"can't call the XRegExp constructor within token definition functions\"",
        "\"\"",
        "\"[\"",
        "\"]\"",
        "\"\"",
        "\"\"",
        "\"1.5.1\"",
        "\"\"",
        "\"\"",
        "\"g\"",
        "\"y\"",
        "\"\"",
        "\"/\"",
        "\"\"",
        "\"g\"",
        "\"\\\\$&\"",
        "\"g\"",
        "\"y\"",
        "\"\"",
        "\"can't run addToken after freezeTokens\"",
        "\"[object RegExp]\"",
        "\"g\"",
        "\"g\"",
        "\"\"",
        "\"\"",
        "\"g\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"[object Function]\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"$\"",
        "\"$\"",
        "\"&\"",
        "\"`\"",
        "\"'\"",
        "\"\"",
        "\"\"",
        "\"$\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"type RegExp expected\"",
        "\"\"",
        "\"g\"",
        "\"\"",
        "\"i\"",
        "\"\"",
        "\"m\"",
        "\"\"",
        "\"x\"",
        "\"\"",
        "\"y\"",
        "\"\"",
        "\"\"",
        "\"(?:)\"",
        "\"(\"",
        "\"(\"",
        "\"\\\\\"",
        "\"\"",
        "\"(?:)\"",
        "\"[]\"",
        "\"\\\\b\\\\B\"",
        "\"[\\\\s\\\\S]\"",
        "\"\"",
        "\"\"",
        "\"(?:)\"",
        "\"x\"",
        "\"[\\\\s\\\\S]\"",
        "\"s\""
    ],
    "variables": [
        "XRegExp",
        "output",
        "currScope",
        "pos",
        "context",
        "tokenResult",
        "match",
        "chr",
        "regex",
        "replacementToken",
        "flagClip",
        "quantifier",
        "isInsideConstructor",
        "tokens",
        "nativ",
        "compliantExecNpcg",
        "compliantLastIndexIncrement",
        "x",
        "hasNativeY",
        "nativeTokens",
        "key",
        "r2",
        "match",
        "r2",
        "i",
        "match",
        "item",
        "regex",
        "matches",
        "i",
        "match",
        "name",
        "r2",
        "origLastIndex",
        "i",
        "i",
        "match",
        "origLastIndex",
        "result",
        "isRegex",
        "captureNames",
        "result",
        "origLastIndex",
        "i",
        "args",
        "arguments",
        "literalNumbers",
        "n",
        "output",
        "lastLastIndex",
        "match",
        "lastLength",
        "x",
        "i",
        "result",
        "match",
        "t",
        "i",
        "index"
    ],
    "comments": [
        "XRegExp 1.5.1",
        "(c) 2007-2012 Steven Levithan",
        "MIT License",
        "<http://xregexp.com>",
        "Provides an augmented, extensible, cross-browser implementation of regular expressions,",
        "including support for additional syntax, flags, and methods",
        "Avoid running twice, since that would break references to native globals",
        "Run within an anonymous function to protect variables and avoid new globals",
        "---------------------------------",
        "Constructor",
        "---------------------------------",
        "Accepts a pattern and flags; returns a new, extended `RegExp` object. Differs from a native",
        "regular expression in that additional syntax and flags are supported and cross-browser",
        "syntax inconsistencies are ameliorated. `XRegExp(/regex/)` clones an existing regex and",
        "converts to type XRegExp",
        "Tokens become part of the regex construction process, so protect against infinite",
        "recursion when an XRegExp is constructed within a token handler or trigger",
        "`this` object for custom tokens",
        "Check for custom tokens at the current position",
        "Check for native multicharacter metasequences (excluding character classes) at",
        "the current position",
        "Advance position one character",
        "---------------------------------",
        "Public properties",
        "---------------------------------",
        "Token scope bitflags",
        "---------------------------------",
        "Private variables",
        "---------------------------------",
        "Nonnative and duplicate flags",
        "Copy native globals for reference (\"native\" is an ES3 reserved keyword)",
        "check `exec` handling of nonparticipating capturing groups",
        "`nativeTokens` match native multicharacter metasequences only (including deprecated octals,",
        "excluding character classes)",
        "---------------------------------",
        "Public methods",
        "---------------------------------",
        "Lets you extend or change XRegExp syntax and create custom flags. This is used internally by",
        "the XRegExp library and can be used to create XRegExp plugins. This function is intended for",
        "users with advanced knowledge of JavaScript's regular expression syntax and behavior. It can",
        "be disabled by `XRegExp.freezeTokens`",
        "Accepts a pattern and flags; returns an extended `RegExp` object. If the pattern and flag",
        "combination has previously been cached, the cached copy is returned; otherwise the newly",
        "created regex is cached",
        "Accepts a `RegExp` instance; returns a copy with the `/g` flag set. The copy has a fresh",
        "`lastIndex` (set to zero). If you want to copy a regex without forcing the `global`",
        "property, use `XRegExp(regex)`. Do not use `RegExp(regex)` because it will not preserve",
        "special properties required for named capture",
        "Accepts a string; returns the string with regex metacharacters escaped. The returned string",
        "can safely be used at any point within a regex to match the provided literal string. Escaped",
        "characters are [ ] { } ( ) * + ? - . , \\ ^ $ | # and whitespace",
        "Accepts a string to search, regex to search with, position to start the search within the",
        "string (default: 0), and an optional Boolean indicating whether matches must start at-or-",
        "after the position or at the specified position only. This function ignores the `lastIndex`",
        "of the provided regex in its own handling, but updates the property for compatibility",
        "Run the altered `exec` (required for `lastIndex` fix, etc.)",
        "Breaks the unrestorable link to XRegExp's private list of tokens, thereby preventing",
        "syntax and flag changes. Should be run after XRegExp and any plugins are loaded",
        "Accepts any value; returns a Boolean indicating whether the argument is a `RegExp` object.",
        "Note that this is also `true` for regex literals and regexes created by the `XRegExp`",
        "constructor. This works correctly for variables created in another frame, when `instanceof`",
        "and `constructor` checks would fail to work as intended",
        "Executes `callback` once per match within `str`. Provides a simpler and cleaner way to",
        "iterate over regex matches compared to the traditional approaches of subverting",
        "`String.prototype.replace` or repeatedly calling `exec` within a `while` loop",
        "Run the altered `exec` (required for `lastIndex` fix, etc.)",
        "Doing this to follow expectations if `lastIndex` is checked within `callback`",
        "Accepts a string and an array of regexes; returns the result of using each successive regex",
        "to search within the matches of the previous regex. The array of regexes can also contain",
        "objects with `regex` and `backref` properties, in which case the named or numbered back-",
        "references specified are passed forward to the next regex or returned. E.g.:",
        "var xregexpImgFileNames = XRegExp.matchChain(html, [",
        "{regex: /<img\\b([^>]+)>/i, backref: 1}, // <img> tag attributes",
        "{regex: XRegExp('(?ix) \\\\s src=\" (?<src> [^\"]+ )'), backref: \"src\"}, // src attribute values",
        "{regex: XRegExp(\"^http://xregexp\\\\.com(/[^#?]+)\", \"i\"), backref: 1}, // xregexp.com paths",
        "/[^\\/]+$/ // filenames (strip directory paths)",
        "]);",
        "---------------------------------",
        "New RegExp prototype methods",
        "---------------------------------",
        "Accepts a context object and arguments array; returns the result of calling `exec` with the",
        "first value in the arguments array. the context is ignored but is accepted for congruity",
        "with `Function.prototype.apply`",
        "Accepts a context object and string; returns the result of calling `exec` with the provided",
        "string. the context is ignored but is accepted for congruity with `Function.prototype.call`",
        "---------------------------------",
        "Overridden native methods",
        "---------------------------------",
        "Adds named capture support (with backreferences returned as `result.name`), and fixes two",
        "cross-browser issues per ES3:",
        "- Captured values for nonparticipating capturing groups should be returned as `undefined`,",
        "rather than the empty string.",
        "- `lastIndex` should not be incremented after zero-length matches.",
        "Fix browsers whose `exec` methods don't consistently return `undefined` for",
        "nonparticipating capturing groups",
        "Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed",
        "matching due to characters outside the match",
        "Attach named capture properties",
        "Fix browsers that increment `lastIndex` after zero-length matches",
        "Fix IE, Opera bug (last tested IE 9.0.5, Opera 11.61 on Windows)",
        "Fix browser bugs in native method",
        "Use the native `exec` to skip some processing overhead, even though the altered",
        "`exec` would take care of the `lastIndex` fixes",
        "Fix browsers that increment `lastIndex` after zero-length matches",
        "Fix IE, Opera bug (last tested IE 9.0.5, Opera 11.61 on Windows)",
        "Adds named capture support and fixes browser bugs in native method",
        "Native `RegExp`",
        "Fix IE bug",
        "Run the altered `exec`",
        "Adds support for `${n}` tokens for named and numbered backreferences in replacement text,",
        "and provides named backreferences to replacement functions as `arguments[0].name`. Also",
        "fixes cross-browser differences in replacement text syntax when performing a replacement",
        "using a nonregex search value, and the value of replacement regexes' `lastIndex` property",
        "during replacement iterations. Note that this doesn't support SpiderMonkey's proprietary",
        "third (`flags`) parameter",
        "There are too many combinations of search/replacement types/values and browser bugs that",
        "preclude passing to native `replace`, so don't try",
        "if (...)",
        "return nativ.replace.apply(this, arguments);",
        "Array or `null`",
        "Type conversion",
        "Change the `arguments[0]` string primitive to a String object which can store properties",
        "Store named backreferences on `arguments[0]`",
        "Update `lastIndex` before calling `replacement` (fix browsers)",
        "Type conversion, so `args[args.length - 1]` will be a string (given nonstring `this`)",
        "Keep this function's `arguments` available through closure",
        "Numbered backreference (without delimiters) or special variable",
        "Numbered backreference",
        "What does \"$10\" mean?",
        "- Backreference 10, if 10 or more capturing groups exist",
        "- Backreference 1 followed by \"0\", if 1-9 capturing groups exist",
        "- Otherwise, it's the string \"$10\"",
        "Also note:",
        "- Backreferences cannot be more than two digits (enforced by `replacementToken`)",
        "- \"$01\" is equivalent to \"$1\" if a capturing group exists, otherwise it's the string \"$01\"",
        "- There is no \"$0\" token (\"$&\" is the entire match)",
        "Type conversion; drop leading zero",
        "`$1` was \"0\" or \"00\"",
        "Drop the last digit",
        "Named backreference or delimited numbered backreference",
        "What does \"${n}\" mean?",
        "- Backreference to numbered capture n. Two differences from \"$n\":",
        "- n can be more than two digits",
        "- Backreference 0 is allowed, and is the entire match",
        "- Backreference to named capture n, if it exists and is not a number overridden by numbered capture",
        "- Otherwise, it's the string \"${n}\"",
        "Type conversion; drop leading zeros",
        "Fix IE, Safari bug (last tested IE 9.0.5, Safari 5.1.2 on Windows)",
        "Fix IE, Opera bug (last tested IE 9.0.5, Opera 11.61 on Windows)",
        "A consistent cross-browser, ES3 compliant `split`",
        "separator",
        "If separator `s` is not a regex, use the native `split`",
        "Type conversion",
        "Behavior for `limit`: if it's...",
        "- `undefined`: No limit",
        "- `NaN` or zero: Return an empty array",
        "- A positive number: Use `Math.floor(limit)`",
        "- A negative number: No limit",
        "- Other: Type-convert, then use the above rules",
        "This is required if not `s.global`, and it avoids needing to set `s.lastIndex` to zero",
        "and restore it to its original value when we're done using the regex",
        "Run the altered `exec` (required for `lastIndex` fix, etc.)",
        "---------------------------------",
        "Private helper functions",
        "---------------------------------",
        "Supporting function for `XRegExp`, `XRegExp.copyAsGlobal`, etc. Returns a copy of a `RegExp`",
        "instance with a fresh `lastIndex` (set to zero), preserving properties required for named",
        "capture. Also allows adding new flags in the process of copying the regex",
        "Proposed for ES4; included in AS3",
        "Protect against constructing XRegExps within token handler and trigger functions",
        "Must reset `isInsideConstructor`, even if a `trigger` or `handler` throws",
        "Run in reverse order",
        "Running the altered `exec` here allows use of named backreferences, etc.",
        "Use the native array method if available",
        "---------------------------------",
        "Built-in tokens",
        "---------------------------------",
        "Augment XRegExp's regular expression syntax and flags. Note that when adding tokens, the",
        "third (`scope`) argument defaults to `XRegExp.OUTSIDE_CLASS`",
        "Comment pattern: (?# )",
        "Keep tokens separated unless the following token is a quantifier",
        "Capturing group (match the opening parenthesis only).",
        "Required for support of named capturing groups",
        "Named capturing group (match the opening delimiter only): (?<name>",
        "Named backreference: \\k<name>",
        "Keep backreferences separate from subsequent literal numbers. Preserve back-",
        "references to named groups that are undefined at this point as literal strings",
        "Empty character class: [] or [^]",
        "For cross-browser compatibility with ES3, convert [] to \\b\\B and [^] to [\\s\\S].",
        "(?!) should work like \\b\\B, but is unreliable in Firefox",
        "Mode modifier at the start of the pattern only, with any combination of flags imsx: (?imsx)",
        "Does not support x(?i), (?-i), (?i-m), (?i: ), (?i)(?m), etc.",
        "Whitespace and comments, in free-spacing (aka extended) mode only",
        "Keep tokens separated unless the following token is a quantifier",
        "Dot, in dotall (aka singleline) mode only",
        "---------------------------------",
        "Backward compatibility",
        "---------------------------------",
        "Uncomment the following block for compatibility with XRegExp 1.0-1.2:",
        "XRegExp.matchWithinChain = XRegExp.matchChain;\n    RegExp.prototype.addFlags = function (s) {return clone(this, s);};\n    RegExp.prototype.execAll = function (s) {var r = []; XRegExp.iterate(s, this, function (m) {r.push(m);}); return r;};\n    RegExp.prototype.forEachExec = function (s, f, c) {return XRegExp.iterate(s, this, f, c);};\n    RegExp.prototype.validate = function (s) {var r = RegExp(\"^(?:\" + this.source + \")$(?!\\\\s)\", getNativeFlags(this)); if (this.global) this.lastIndex = 0; return s.search(r) === 0;};"
    ],
    "docstrings": [],
    "functions": [
        "clone",
        "getNativeFlags",
        "runTokens",
        "indexOf"
    ],
    "classes": []
}