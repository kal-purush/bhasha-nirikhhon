{
    "identifiers": [
        "numpy",
        "b",
        "m",
        "points",
        "i",
        "len",
        "points",
        "points",
        "i",
        "points",
        "i",
        "totalError",
        "y",
        "m",
        "x",
        "b",
        "totalError",
        "len",
        "points",
        "current_b",
        "current_m",
        "points",
        "learningRate",
        "len",
        "points",
        "i",
        "len",
        "points",
        "points",
        "i",
        "points",
        "i",
        "b_gradient",
        "N",
        "y",
        "current_m",
        "x",
        "current_b",
        "m_gradient",
        "N",
        "x",
        "y",
        "current_m",
        "x",
        "current_b",
        "current_b",
        "learningRate",
        "b_gradient",
        "current_m",
        "learningRate",
        "m_gradient",
        "new_b",
        "new_m",
        "points",
        "starting_b",
        "starting_m",
        "learning_rate",
        "num_iterations",
        "starting_b",
        "starting_m",
        "i",
        "num_iterations",
        "step_gradient",
        "b",
        "m",
        "array",
        "points",
        "learning_rate",
        "b",
        "m",
        "genfromtxt",
        "delimiter",
        "format",
        "initial_b",
        "initial_m",
        "compute_error_for_given_points",
        "initial_b",
        "initial_m",
        "points",
        "gradient_descent_runner",
        "points",
        "initial_b",
        "initial_m",
        "learning_rate",
        "num_iterations",
        "format",
        "num_iterations",
        "b",
        "m",
        "compute_error_for_given_points",
        "b",
        "m",
        "points",
        "run"
    ],
    "literals": [
        "\"data.csv\"",
        "\",\"",
        "\"Starting gradient descent at b = {0}, m = {1}, error = {2}\"",
        "\"After {0} iterations b = {1}, m = {2}, error = {3}\"",
        "'__main__'"
    ],
    "variables": [
        "totalError",
        "x",
        "y",
        "b_gradient",
        "m_gradient",
        "N",
        "x",
        "y",
        "new_b",
        "new_m",
        "b",
        "m",
        "b",
        "m",
        "points",
        "learning_rate",
        "initial_b",
        "initial_m",
        "num_iterations",
        "b",
        "m"
    ],
    "comments": [
        "sum of squared errors gives error value (measure distance from each points to line drawn, square them, then sum all together and divide by total number of points) minimised by gradient descent",
        "gradient descent, calculating gradient by calculating partial derivative in respect to values b and m",
        "iterate through all the points",
        "slope forumla y = mx + b (b = y intercept / m = slope)",
        "how many iterations to run training step for",
        "get ideal b and m values using gradient descent runner step by feeding values we have defined"
    ],
    "docstrings": [],
    "functions": [
        "compute_error_for_given_points",
        "step_gradient",
        "gradient_descent_runner",
        "run"
    ],
    "classes": []
}