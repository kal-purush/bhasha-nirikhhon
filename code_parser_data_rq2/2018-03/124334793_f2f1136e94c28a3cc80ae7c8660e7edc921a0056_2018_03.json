{
    "identifiers": [
        "init",
        "navigator",
        "_parseGetMediaDevices",
        "_addEvents",
        "_startStream",
        "_handleError",
        "$",
        "_extractFaces",
        "deviceInfos",
        "navigator",
        "getMediaConstraints",
        "navigator",
        "getMediaConstraints",
        "stream",
        "video",
        "stream",
        "error",
        "error",
        "_getSnapshot",
        "img",
        "_detectFaces",
        "$",
        "video",
        "video",
        "canvas",
        "canvas",
        "canvas",
        "width",
        "canvas",
        "height",
        "context",
        "canvas",
        "context",
        "video",
        "width",
        "height",
        "img",
        "img",
        "img",
        "img",
        "canvas",
        "img",
        "img",
        "$",
        "_chopImages",
        "faces",
        "$",
        "faces",
        "$",
        "key",
        "faces",
        "faces",
        "key",
        "face",
        "face",
        "canvas",
        "key",
        "canvas",
        "canvas",
        "face",
        "canvas",
        "face",
        "context",
        "canvas",
        "context",
        "snapshot",
        "face",
        "face",
        "face",
        "face",
        "face",
        "face",
        "img",
        "key",
        "img",
        "img",
        "canvas",
        "$",
        "img",
        "error",
        "error",
        "adapters",
        "ImageCaptureTest"
    ],
    "literals": [
        "'use strict'",
        "'init'",
        "'default'",
        "''",
        "'#extract-faces'",
        "'click'",
        "'Access the default web cam'",
        "'Permission granted'",
        "'my-video'",
        "'Permission denied'",
        "'Could not access the camera. Error: '",
        "'Could not access the camera.'",
        "'.snapshot'",
        "'my-video'",
        "'canvas'",
        "'id'",
        "'canvas-snapshot'",
        "'class'",
        "'snapshot'",
        "'2d'",
        "'img'",
        "'id'",
        "'video-snapshot'",
        "'class'",
        "'snapshot'",
        "'style'",
        "'display: none;'",
        "'image/png'",
        "'_detectFaces'",
        "'#video-snapshot'",
        "'#faces'",
        "''",
        "'No faces found'",
        "'#faces'",
        "'No faces found'",
        "'video-snapshot'",
        "'canvas'",
        "'id'",
        "'snapshot-canvas-'",
        "'class'",
        "'snapshot'",
        "'2d'",
        "'img'",
        "'id'",
        "'snapshot-face-'",
        "'class'",
        "'snapshot'",
        "'image/png'",
        "'#faces'",
        "'Error: '"
    ],
    "variables": [
        "adapters",
        "getMediaConstraints",
        "init",
        "_addEvents",
        "_parseGetMediaDevices",
        "_startStream",
        "video",
        "_extractFaces",
        "img",
        "_getSnapshot",
        "video",
        "width",
        "height",
        "canvas",
        "context",
        "img",
        "_detectFaces",
        "_chopImages",
        "face",
        "snapshot",
        "canvas",
        "context",
        "img"
    ],
    "comments": [
        "eslint",
        "global $",
        "Adapters",
        "For access to back/front cameras see: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia",
        "Populate this if you want a specific camera. See _parseGetMediaDevices",
        "Find camera ID if you have two",
        "for (var i = 0; i !== deviceInfos.length; ++i) {\n      var deviceInfo = deviceInfos[i]\n      var option = document.createElement('option')\n      option.value = deviceInfo.deviceId\n      if (deviceInfo.kind === 'audioinput') {\n        option.text = deviceInfo.label ||\n          'microphone ' + (audioSelect.length + 1)\n        audioSelect.appendChild(option)\n      } else if (deviceInfo.kind === 'videoinput') {\n        option.text = deviceInfo.label || 'camera ' +\n          (videoSelect.length + 1)\n        videoSelect.appendChild(option)\n      } else {\n        console.log('Found one other kind of source/device: ', deviceInfo)\n      }\n    }",
        "use MediaDevices API",
        "docs: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia",
        "Return adapters (must be at end of adapter)",
        "End A (Adapter)"
    ],
    "docstrings": [],
    "functions": [
        "ImageCaptureTest",
        "_handleError"
    ],
    "classes": []
}