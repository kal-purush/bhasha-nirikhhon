{
    "identifiers": [
        "Injectable",
        "ActivatedRoute",
        "ActivatedRouteSnapshot",
        "Params",
        "Router",
        "UrlSegment",
        "BehaviorSubject",
        "Observable",
        "Subject",
        "Subscription",
        "interval",
        "_",
        "NzModalService",
        "Injectable",
        "BehaviorSubject",
        "router",
        "activatedRoute",
        "modal",
        "Subject",
        "message",
        "message",
        "url",
        "url",
        "url",
        "WebSocket",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "message",
        "e",
        "e",
        "e",
        "e",
        "interval",
        "val",
        "val",
        "url",
        "interval",
        "val",
        "val",
        "interval",
        "period",
        "period"
    ],
    "literals": [
        "'@angular/core'",
        "'@angular/router'",
        "'rxjs'",
        "'lodash'",
        "'ng-zorro-antd/modal'",
        "'root'",
        "string",
        "string",
        "'Start heartbeat detection'",
        "string",
        "string",
        "string",
        "'websocket connected'",
        "'message received'",
        "'Message received time'",
        "'connection closed'",
        "'Connection abnormality'",
        "'The connection has been successful, stop reconnecting'",
        "'Reconnecting, return directly'",
        "Reconnection:${val}Second-rate",
        "'undefined'",
        "'Connection status, send messages to stay connected'",
        "'The connection has been disconnected, reconnect'",
        "'undefined'",
        "'operation hours'",
        "${period}minute",
        "'undefined'"
    ],
    "variables": [
        "message",
        "url"
    ],
    "comments": [
        "Perform heartbeat detection as soon as you enter the program to avoid interruption of the connection at the beginning and no subsequent reconnection.",
        "Subject object, used to send events",
        "Default requested url",
        "Websocket object",
        "websocket connection successful",
        "Check every 10 minutes",
        "Periodically detect connection objects",
        "Reconnection",
        "If reconnection fails, reconnect once every 5 seconds.",
        "Reconnect subscription object",
        "Record running connection subscription",
        "Record running connection time",
        "Create websocket object",
        "If no connection has been established, establish the connection and add time monitoring",
        "Connection established successfully",
        "message received",
        "connection closed",
        "abnormal",
        "Set up connection successfully",
        "If it is reconnecting",
        "1.Stop reconnecting",
        "2.Restart heartbeat",
        "3.Restart calculation of running time",
        "Publish received messages",
        "Start reconnecting when closed",
        "throw new Error('webSocket connection closed:)');",
        "When an exception occurs, on close will always be entered, so only one reconnection action is performed on close.",
        "throw new Error('webSocket connection error:)');",
        "If it has been reconnected, return directly to avoid repeated connections.",
        "If the connection is in progress, return directly to avoid multiple polling events.",
        "Start reconnecting",
        "If the connection fails, reconnect regularly.",
        "reconnect",
        "The connection flag is set to false",
        "unsubscribe",
        "Stay connected and reset"
    ],
    "docstrings": [
        "* @Author: zhangxuefeng\n * @Date: 2024-01-15 14:09:16\n * @LastEditors: zhangxuefeng\n * @LastEditTime: 2024-01-16 14:50:02\n * @Description:"
    ],
    "functions": [
        "sendMessage",
        "connect",
        "createWebSocket",
        "onOpen",
        "onMessage",
        "onClose",
        "onError",
        "reconnect",
        "stopReconnect",
        "heartCheckStart",
        "heartCheckStop",
        "calcRunTime",
        "stopRunTime"
    ],
    "classes": [
        "SocketService"
    ]
}