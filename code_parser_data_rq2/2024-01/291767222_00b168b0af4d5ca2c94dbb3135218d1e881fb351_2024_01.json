{
    "identifiers": [
        "warnings",
        "warn",
        "ansys",
        "dpf",
        "core",
        "dpf_operator",
        "Operator",
        "ansys",
        "dpf",
        "core",
        "inputs",
        "Input",
        "_Inputs",
        "ansys",
        "dpf",
        "core",
        "outputs",
        "Output",
        "_Outputs",
        "ansys",
        "dpf",
        "core",
        "operators",
        "specification",
        "PinSpecification",
        "Specification",
        "Operator",
        "time_scoping",
        "mesh_scoping",
        "fields_container",
        "streams_container",
        "data_sources",
        "bool_rotate_to_global",
        "all_dofs",
        "sector_mesh",
        "read_cyclic",
        "expanded_meshed_region",
        "cyclic_support",
        "config",
        "server",
        "name",
        "config",
        "config",
        "server",
        "server",
        "InputsCyclicNmisc",
        "OutputsCyclicNmisc",
        "time_scoping",
        "inputs",
        "time_scoping",
        "connect",
        "time_scoping",
        "mesh_scoping",
        "inputs",
        "mesh_scoping",
        "connect",
        "mesh_scoping",
        "fields_container",
        "inputs",
        "fields_container",
        "connect",
        "fields_container",
        "streams_container",
        "inputs",
        "streams_container",
        "connect",
        "streams_container",
        "data_sources",
        "inputs",
        "data_sources",
        "connect",
        "data_sources",
        "bool_rotate_to_global",
        "inputs",
        "bool_rotate_to_global",
        "connect",
        "bool_rotate_to_global",
        "all_dofs",
        "inputs",
        "all_dofs",
        "connect",
        "all_dofs",
        "sector_mesh",
        "inputs",
        "sector_mesh",
        "connect",
        "sector_mesh",
        "read_cyclic",
        "inputs",
        "read_cyclic",
        "connect",
        "read_cyclic",
        "expanded_meshed_region",
        "inputs",
        "expanded_meshed_region",
        "connect",
        "expanded_meshed_region",
        "cyclic_support",
        "inputs",
        "cyclic_support",
        "connect",
        "cyclic_support",
        "staticmethod",
        "Specification",
        "description",
        "description",
        "map_input_pin_spec",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "map_output_pin_spec",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "PinSpecification",
        "name",
        "type_names",
        "optional",
        "spec",
        "staticmethod",
        "server",
        "Operator",
        "default_config",
        "name",
        "server",
        "server",
        "property",
        "inputs",
        "property",
        "outputs",
        "_Inputs",
        "op",
        "Operator",
        "cyclic_nmisc",
        "_spec",
        "inputs",
        "op",
        "Input",
        "cyclic_nmisc",
        "_spec",
        "input_pin",
        "op",
        "_inputs",
        "append",
        "_time_scoping",
        "Input",
        "cyclic_nmisc",
        "_spec",
        "input_pin",
        "op",
        "_inputs",
        "append",
        "_mesh_scoping",
        "Input",
        "cyclic_nmisc",
        "_spec",
        "input_pin",
        "op",
        "_inputs",
        "append",
        "_fields_container",
        "Input",
        "cyclic_nmisc",
        "_spec",
        "input_pin",
        "op",
        "_inputs",
        "append",
        "_streams_container",
        "Input",
        "cyclic_nmisc",
        "_spec",
        "input_pin",
        "op",
        "_inputs",
        "append",
        "_data_sources",
        "Input",
        "cyclic_nmisc",
        "_spec",
        "input_pin",
        "op",
        "_inputs",
        "append",
        "_bool_rotate_to_global",
        "Input",
        "cyclic_nmisc",
        "_spec",
        "input_pin",
        "op",
        "_inputs",
        "append",
        "_all_dofs",
        "Input",
        "cyclic_nmisc",
        "_spec",
        "input_pin",
        "op",
        "_inputs",
        "append",
        "_sector_mesh",
        "Input",
        "cyclic_nmisc",
        "_spec",
        "input_pin",
        "op",
        "_inputs",
        "append",
        "_read_cyclic",
        "Input",
        "cyclic_nmisc",
        "_spec",
        "input_pin",
        "op",
        "_inputs",
        "append",
        "_expanded_meshed_region",
        "Input",
        "cyclic_nmisc",
        "_spec",
        "input_pin",
        "op",
        "_inputs",
        "append",
        "_cyclic_support",
        "property",
        "_time_scoping",
        "property",
        "_mesh_scoping",
        "property",
        "_fields_container",
        "property",
        "_streams_container",
        "property",
        "_data_sources",
        "property",
        "_bool_rotate_to_global",
        "property",
        "_all_dofs",
        "property",
        "_sector_mesh",
        "property",
        "_read_cyclic",
        "property",
        "_expanded_meshed_region",
        "property",
        "_cyclic_support",
        "_Outputs",
        "op",
        "Operator",
        "cyclic_nmisc",
        "_spec",
        "outputs",
        "op",
        "Output",
        "cyclic_nmisc",
        "_spec",
        "output_pin",
        "op",
        "_outputs",
        "append",
        "_fields_container",
        "Output",
        "cyclic_nmisc",
        "_spec",
        "output_pin",
        "op",
        "_outputs",
        "append",
        "_expanded_meshes",
        "property",
        "_fields_container",
        "property",
        "_expanded_meshes"
    ],
    "literals": [
        "\"mapdl::rst::NMISC_cyclic\"",
        "\"time_scoping\"",
        "\"scoping\"",
        "\"vector<int32>\"",
        "\"mesh_scoping\"",
        "\"scopings_container\"",
        "\"scoping\"",
        "\"vector<int32>\"",
        "\"fields_container\"",
        "\"fields_container\"",
        "\"streams_container\"",
        "\"streams_container\"",
        "\"stream\"",
        "\"data_sources\"",
        "\"data_sources\"",
        "\"bool_rotate_to_global\"",
        "\"bool\"",
        "\"all_dofs\"",
        "\"bool\"",
        "\"sector_mesh\"",
        "\"abstract_meshed_region\"",
        "\"meshes_container\"",
        "\"read_cyclic\"",
        "\"enum dataProcessing::ECyclicReading\"",
        "\"int32\"",
        "\"expanded_meshed_region\"",
        "\"abstract_meshed_region\"",
        "\"meshes_container\"",
        "\"cyclic_support\"",
        "\"cyclic_support\"",
        "\"fields_container\"",
        "\"fields_container\"",
        "\"expanded_meshes\"",
        "\"meshes_container\"",
        "\"mapdl::rst::NMISC_cyclic\""
    ],
    "variables": [
        "_inputs",
        "_outputs",
        "description",
        "spec",
        "_time_scoping",
        "_mesh_scoping",
        "_fields_container",
        "_streams_container",
        "_data_sources",
        "_bool_rotate_to_global",
        "_all_dofs",
        "_sector_mesh",
        "_read_cyclic",
        "_expanded_meshed_region",
        "_cyclic_support",
        "_fields_container",
        "_expanded_meshes"
    ],
    "comments": [
        "noqa: E501",
        "noqa: E501"
    ],
    "docstrings": [
        "\"\"\"\ncyclic_nmisc\n============\nAutogenerated DPF operator classes.\n\"\"\"",
        "\"\"\"Computes mapdl::rst::NMISC from an rst file.\n\n    Parameters\n    ----------\n    time_scoping : Scoping, optional\n    mesh_scoping : ScopingsContainer or Scoping, optional\n    fields_container : FieldsContainer, optional\n        Fieldscontainer already allocated modified\n        inplace\n    streams_container : StreamsContainer or Stream, optional\n        Streams containing the result file.\n    data_sources : DataSources\n        Data sources containing the result file.\n    bool_rotate_to_global : bool, optional\n        If true the field is rotated to global\n        coordinate system (default true)\n    all_dofs : bool, optional\n        If this pin is set to true, all the dofs are\n        retrieved. by default this pin is set\n        to false and only the translational\n        dofs are retrieved.\n    sector_mesh : MeshedRegion or MeshesContainer, optional\n        Mesh of the base sector (can be a skin).\n    read_cyclic : int, optional\n        If 0 cyclic symmetry is ignored, if 1 cyclic\n        sector is read, if 2 cyclic expansion\n        is done, if 3 cyclic expansion is\n        done and stages are merged (default\n        is 1)\n    expanded_meshed_region : MeshedRegion or MeshesContainer, optional\n        Mesh expanded.\n    cyclic_support : CyclicSupport, optional\n\n\n    Examples\n    --------\n    >>> from ansys.dpf import core as dpf\n\n    >>> # Instantiate operator\n    >>> op = dpf.operators.result.cyclic_nmisc()\n\n    >>> # Make input connections\n    >>> my_time_scoping = dpf.Scoping()\n    >>> op.inputs.time_scoping.connect(my_time_scoping)\n    >>> my_mesh_scoping = dpf.ScopingsContainer()\n    >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)\n    >>> my_fields_container = dpf.FieldsContainer()\n    >>> op.inputs.fields_container.connect(my_fields_container)\n    >>> my_streams_container = dpf.StreamsContainer()\n    >>> op.inputs.streams_container.connect(my_streams_container)\n    >>> my_data_sources = dpf.DataSources()\n    >>> op.inputs.data_sources.connect(my_data_sources)\n    >>> my_bool_rotate_to_global = bool()\n    >>> op.inputs.bool_rotate_to_global.connect(my_bool_rotate_to_global)\n    >>> my_all_dofs = bool()\n    >>> op.inputs.all_dofs.connect(my_all_dofs)\n    >>> my_sector_mesh = dpf.MeshedRegion()\n    >>> op.inputs.sector_mesh.connect(my_sector_mesh)\n    >>> my_read_cyclic = int()\n    >>> op.inputs.read_cyclic.connect(my_read_cyclic)\n    >>> my_expanded_meshed_region = dpf.MeshedRegion()\n    >>> op.inputs.expanded_meshed_region.connect(my_expanded_meshed_region)\n    >>> my_cyclic_support = dpf.CyclicSupport()\n    >>> op.inputs.cyclic_support.connect(my_cyclic_support)\n\n    >>> # Instantiate operator and connect inputs in one line\n    >>> op = dpf.operators.result.cyclic_nmisc(\n    ...     time_scoping=my_time_scoping,\n    ...     mesh_scoping=my_mesh_scoping,\n    ...     fields_container=my_fields_container,\n    ...     streams_container=my_streams_container,\n    ...     data_sources=my_data_sources,\n    ...     bool_rotate_to_global=my_bool_rotate_to_global,\n    ...     all_dofs=my_all_dofs,\n    ...     sector_mesh=my_sector_mesh,\n    ...     read_cyclic=my_read_cyclic,\n    ...     expanded_meshed_region=my_expanded_meshed_region,\n    ...     cyclic_support=my_cyclic_support,\n    ... )\n\n    >>> # Get output data\n    >>> result_fields_container = op.outputs.fields_container()\n    >>> result_expanded_meshes = op.outputs.expanded_meshes()\n    \"\"\"",
        "\"\"\"Computes mapdl::rst::NMISC from an rst file.\"\"\"",
        "\"\"\"\"\"\"",
        "\"\"\"\"\"\"",
        "\"\"\"Fieldscontainer already allocated modified\n        inplace\"\"\"",
        "\"\"\"Streams containing the result file.\"\"\"",
        "\"\"\"Data sources containing the result file.\"\"\"",
        "\"\"\"If true the field is rotated to global\n        coordinate system (default true)\"\"\"",
        "\"\"\"If this pin is set to true, all the dofs are\n        retrieved. by default this pin is set\n        to false and only the translational\n        dofs are retrieved.\"\"\"",
        "\"\"\"Mesh of the base sector (can be a skin).\"\"\"",
        "\"\"\"If 0 cyclic symmetry is ignored, if 1 cyclic\n        sector is read, if 2 cyclic expansion\n        is done, if 3 cyclic expansion is\n        done and stages are merged (default\n        is 1)\"\"\"",
        "\"\"\"Mesh expanded.\"\"\"",
        "\"\"\"\"\"\"",
        "\"\"\"Fieldscontainer filled in\"\"\"",
        "\"\"\"\"\"\"",
        "\"\"\"Returns the default config of the operator.\n\n        This config can then be changed to the user needs and be used to\n        instantiate the operator. The Configuration allows to customize\n        how the operation will be processed by the operator.\n\n        Parameters\n        ----------\n        server : server.DPFServer, optional\n            Server with channel connected to the remote or local instance. When\n            ``None``, attempts to use the global server.\n        \"\"\"",
        "\"\"\"Enables to connect inputs to the operator\n\n        Returns\n        --------\n        inputs : InputsCyclicNmisc\n        \"\"\"",
        "\"\"\"Enables to get outputs of the operator by evaluating it\n\n        Returns\n        --------\n        outputs : OutputsCyclicNmisc\n        \"\"\"",
        "\"\"\"Intermediate class used to connect user inputs to\n    cyclic_nmisc operator.\n\n    Examples\n    --------\n    >>> from ansys.dpf import core as dpf\n    >>> op = dpf.operators.result.cyclic_nmisc()\n    >>> my_time_scoping = dpf.Scoping()\n    >>> op.inputs.time_scoping.connect(my_time_scoping)\n    >>> my_mesh_scoping = dpf.ScopingsContainer()\n    >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)\n    >>> my_fields_container = dpf.FieldsContainer()\n    >>> op.inputs.fields_container.connect(my_fields_container)\n    >>> my_streams_container = dpf.StreamsContainer()\n    >>> op.inputs.streams_container.connect(my_streams_container)\n    >>> my_data_sources = dpf.DataSources()\n    >>> op.inputs.data_sources.connect(my_data_sources)\n    >>> my_bool_rotate_to_global = bool()\n    >>> op.inputs.bool_rotate_to_global.connect(my_bool_rotate_to_global)\n    >>> my_all_dofs = bool()\n    >>> op.inputs.all_dofs.connect(my_all_dofs)\n    >>> my_sector_mesh = dpf.MeshedRegion()\n    >>> op.inputs.sector_mesh.connect(my_sector_mesh)\n    >>> my_read_cyclic = int()\n    >>> op.inputs.read_cyclic.connect(my_read_cyclic)\n    >>> my_expanded_meshed_region = dpf.MeshedRegion()\n    >>> op.inputs.expanded_meshed_region.connect(my_expanded_meshed_region)\n    >>> my_cyclic_support = dpf.CyclicSupport()\n    >>> op.inputs.cyclic_support.connect(my_cyclic_support)\n    \"\"\"",
        "\"\"\"Allows to connect time_scoping input to the operator.\n\n        Parameters\n        ----------\n        my_time_scoping : Scoping\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> op.inputs.time_scoping.connect(my_time_scoping)\n        >>> # or\n        >>> op.inputs.time_scoping(my_time_scoping)\n        \"\"\"",
        "\"\"\"Allows to connect mesh_scoping input to the operator.\n\n        Parameters\n        ----------\n        my_mesh_scoping : ScopingsContainer or Scoping\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)\n        >>> # or\n        >>> op.inputs.mesh_scoping(my_mesh_scoping)\n        \"\"\"",
        "\"\"\"Allows to connect fields_container input to the operator.\n\n        Fieldscontainer already allocated modified\n        inplace\n\n        Parameters\n        ----------\n        my_fields_container : FieldsContainer\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> op.inputs.fields_container.connect(my_fields_container)\n        >>> # or\n        >>> op.inputs.fields_container(my_fields_container)\n        \"\"\"",
        "\"\"\"Allows to connect streams_container input to the operator.\n\n        Streams containing the result file.\n\n        Parameters\n        ----------\n        my_streams_container : StreamsContainer or Stream\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> op.inputs.streams_container.connect(my_streams_container)\n        >>> # or\n        >>> op.inputs.streams_container(my_streams_container)\n        \"\"\"",
        "\"\"\"Allows to connect data_sources input to the operator.\n\n        Data sources containing the result file.\n\n        Parameters\n        ----------\n        my_data_sources : DataSources\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> op.inputs.data_sources.connect(my_data_sources)\n        >>> # or\n        >>> op.inputs.data_sources(my_data_sources)\n        \"\"\"",
        "\"\"\"Allows to connect bool_rotate_to_global input to the operator.\n\n        If true the field is rotated to global\n        coordinate system (default true)\n\n        Parameters\n        ----------\n        my_bool_rotate_to_global : bool\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> op.inputs.bool_rotate_to_global.connect(my_bool_rotate_to_global)\n        >>> # or\n        >>> op.inputs.bool_rotate_to_global(my_bool_rotate_to_global)\n        \"\"\"",
        "\"\"\"Allows to connect all_dofs input to the operator.\n\n        If this pin is set to true, all the dofs are\n        retrieved. by default this pin is set\n        to false and only the translational\n        dofs are retrieved.\n\n        Parameters\n        ----------\n        my_all_dofs : bool\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> op.inputs.all_dofs.connect(my_all_dofs)\n        >>> # or\n        >>> op.inputs.all_dofs(my_all_dofs)\n        \"\"\"",
        "\"\"\"Allows to connect sector_mesh input to the operator.\n\n        Mesh of the base sector (can be a skin).\n\n        Parameters\n        ----------\n        my_sector_mesh : MeshedRegion or MeshesContainer\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> op.inputs.sector_mesh.connect(my_sector_mesh)\n        >>> # or\n        >>> op.inputs.sector_mesh(my_sector_mesh)\n        \"\"\"",
        "\"\"\"Allows to connect read_cyclic input to the operator.\n\n        If 0 cyclic symmetry is ignored, if 1 cyclic\n        sector is read, if 2 cyclic expansion\n        is done, if 3 cyclic expansion is\n        done and stages are merged (default\n        is 1)\n\n        Parameters\n        ----------\n        my_read_cyclic : int\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> op.inputs.read_cyclic.connect(my_read_cyclic)\n        >>> # or\n        >>> op.inputs.read_cyclic(my_read_cyclic)\n        \"\"\"",
        "\"\"\"Allows to connect expanded_meshed_region input to the operator.\n\n        Mesh expanded.\n\n        Parameters\n        ----------\n        my_expanded_meshed_region : MeshedRegion or MeshesContainer\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> op.inputs.expanded_meshed_region.connect(my_expanded_meshed_region)\n        >>> # or\n        >>> op.inputs.expanded_meshed_region(my_expanded_meshed_region)\n        \"\"\"",
        "\"\"\"Allows to connect cyclic_support input to the operator.\n\n        Parameters\n        ----------\n        my_cyclic_support : CyclicSupport\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> op.inputs.cyclic_support.connect(my_cyclic_support)\n        >>> # or\n        >>> op.inputs.cyclic_support(my_cyclic_support)\n        \"\"\"",
        "\"\"\"Intermediate class used to get outputs from\n    cyclic_nmisc operator.\n\n    Examples\n    --------\n    >>> from ansys.dpf import core as dpf\n    >>> op = dpf.operators.result.cyclic_nmisc()\n    >>> # Connect inputs : op.inputs. ...\n    >>> result_fields_container = op.outputs.fields_container()\n    >>> result_expanded_meshes = op.outputs.expanded_meshes()\n    \"\"\"",
        "\"\"\"Allows to get fields_container output of the operator\n\n        Returns\n        ----------\n        my_fields_container : FieldsContainer\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> # Connect inputs : op.inputs. ...\n        >>> result_fields_container = op.outputs.fields_container()\n        \"\"\"",
        "\"\"\"Allows to get expanded_meshes output of the operator\n\n        Returns\n        ----------\n        my_expanded_meshes : MeshesContainer\n\n        Examples\n        --------\n        >>> from ansys.dpf import core as dpf\n        >>> op = dpf.operators.result.cyclic_nmisc()\n        >>> # Connect inputs : op.inputs. ...\n        >>> result_expanded_meshes = op.outputs.expanded_meshes()\n        \"\"\""
    ],
    "functions": [
        "_spec",
        "default_config",
        "inputs",
        "outputs",
        "time_scoping",
        "mesh_scoping",
        "fields_container",
        "streams_container",
        "data_sources",
        "bool_rotate_to_global",
        "all_dofs",
        "sector_mesh",
        "read_cyclic",
        "expanded_meshed_region",
        "cyclic_support",
        "fields_container",
        "expanded_meshes"
    ],
    "classes": [
        "cyclic_nmisc",
        "InputsCyclicNmisc",
        "OutputsCyclicNmisc"
    ]
}