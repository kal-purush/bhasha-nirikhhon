{
    "identifiers": [
        "express",
        "MongoClient",
        "ObjectId",
        "bcrypt",
        "jwt",
        "express",
        "MongoClient",
        "mongoURL",
        "client",
        "db",
        "client",
        "dbName",
        "error",
        "error",
        "connectToMongo",
        "app",
        "PORT",
        "PORT",
        "app",
        "express",
        "req",
        "res",
        "req",
        "username",
        "password",
        "res",
        "db",
        "COLLECTIONS",
        "userCollection",
        "existingUser",
        "res",
        "bcrypt",
        "password",
        "userCollection",
        "hashedPassword",
        "jwt",
        "res",
        "error",
        "res",
        "error",
        "app",
        "express",
        "req",
        "res",
        "req",
        "username",
        "password",
        "res",
        "db",
        "COLLECTIONS",
        "userCollection",
        "user",
        "bcrypt",
        "password",
        "user",
        "jwt",
        "res",
        "token",
        "res",
        "error",
        "res",
        "error",
        "app",
        "express",
        "req",
        "res",
        "req",
        "title",
        "content",
        "res",
        "req",
        "jwt",
        "token",
        "err",
        "decoded",
        "err",
        "res",
        "db",
        "COLLECTIONS",
        "collection",
        "decoded",
        "res",
        "result",
        "error",
        "res",
        "error",
        "app",
        "express",
        "req",
        "res",
        "req",
        "ObjectId",
        "noteId",
        "res",
        "req",
        "jwt",
        "token",
        "err",
        "decoded",
        "err",
        "res",
        "db",
        "COLLECTIONS",
        "collection",
        "decoded",
        "ObjectId",
        "noteId",
        "data",
        "res",
        "res",
        "data",
        "error",
        "res",
        "error",
        "app",
        "express",
        "req",
        "res",
        "req",
        "jwt",
        "token",
        "err",
        "decoded",
        "err",
        "res",
        "db",
        "COLLECTIONS",
        "collection",
        "decoded",
        "res",
        "data",
        "error",
        "res",
        "error",
        "app",
        "express",
        "req",
        "res",
        "req",
        "ObjectId",
        "noteId",
        "res",
        "req",
        "jwt",
        "token",
        "err",
        "decoded",
        "err",
        "res",
        "db",
        "COLLECTIONS",
        "collection",
        "decoded",
        "ObjectId",
        "noteId",
        "data",
        "res",
        "res",
        "noteId",
        "error",
        "res",
        "error",
        "app",
        "express",
        "req",
        "res",
        "req",
        "title",
        "content",
        "res",
        "req",
        "ObjectId",
        "noteId",
        "res",
        "req",
        "jwt",
        "token",
        "err",
        "decoded",
        "err",
        "res",
        "db",
        "COLLECTIONS",
        "title",
        "title",
        "collection",
        "decoded",
        "ObjectId",
        "noteId",
        "content",
        "content",
        "collection",
        "decoded",
        "ObjectId",
        "noteId",
        "collection",
        "decoded",
        "ObjectId",
        "noteId",
        "title",
        "content",
        "data",
        "res",
        "res",
        "noteId",
        "error",
        "res",
        "error"
    ],
    "literals": [
        "\"express\"",
        "\"mongodb\"",
        "\"bcrypt\"",
        "\"jsonwebtoken\"",
        "\"mongodb://localhost:27017\"",
        "\"quirknotes\"",
        "\"Connected to MongoDB\"",
        "\"Error connecting to MongoDB:\"",
        "Server is running on http://localhost:${PORT}",
        "\"notes\"",
        "\"users\"",
        "\"/registerUser\"",
        "\"Username and password both needed to register.\"",
        "\"Username already exists.\"",
        "\"secret-key\"",
        "\"1h\"",
        "\"User registered successfully.\"",
        "\"/loginUser\"",
        "\"Username and password both needed to login.\"",
        "\"secret-key\"",
        "\"1h\"",
        "\"User logged in succesfully.\"",
        "\"Authentication failed.\"",
        "\"/postNote\"",
        "\"Title and content are both required.\"",
        "\" \"",
        "\"secret-key\"",
        "\"Unauthorized.\"",
        "\"Note added succesfully.\"",
        "\"/getNote/:noteId\"",
        "\"Invalid note ID.\"",
        "\" \"",
        "\"secret-key\"",
        "\"Unauthorized.\"",
        "\"Unable to find note with given ID.\"",
        "\"/getAllNotes\"",
        "\" \"",
        "\"secret-key\"",
        "\"Unauthorized.\"",
        "\"/deleteNote/:noteId\"",
        "\"Invalid note ID\"",
        "\" \"",
        "\"secret-key\"",
        "\"Unauthorized.\"",
        "\"Unable to find note with given ID.\"",
        "Document with ID ${noteId} properly deleted.",
        "\"/editNote/:noteId\"",
        "\"Title and content are both required.\"",
        "\"Invalid note ID.\"",
        "\" \"",
        "\"secret-key\"",
        "\"Unauthorized.\"",
        "\"Unable to find note with given ID.\"",
        "Document with ID ${noteId} properly updated."
    ],
    "variables": [
        "app",
        "PORT",
        "mongoURL",
        "dbName",
        "db",
        "client",
        "COLLECTIONS",
        "userCollection",
        "existingUser",
        "hashedPassword",
        "token",
        "userCollection",
        "user",
        "token",
        "token",
        "collection",
        "result",
        "noteId",
        "token",
        "collection",
        "data",
        "token",
        "collection",
        "data",
        "noteId",
        "token",
        "collection",
        "data",
        "noteId",
        "token",
        "collection",
        "data"
    ],
    "comments": [
        "Connect to MongoDB",
        "Open Port",
        "Collections to manage",
        "Register a new user",
        "Basic body request check",
        "Checking if username does not already exist in database",
        "Creating hashed password (search up bcrypt online for more info)",
        "and storing user info in database",
        "Returning JSON Web Token (search JWT for more explanation)",
        "Log in an existing user",
        "Basic body request check",
        "Find username in database",
        "Validate user against hashed password in database",
        "Send JSON Web Token to valid user",
        "Implicitly status 200",
        "Post a note belonging to the user",
        "Basic body request check",
        "Verify the JWT from the request headers",
        "Send note to database",
        "Retrieve a note belonging to the user",
        "Basic param checking",
        "Verify the JWT from the request headers",
        "Find note with given ID",
        "find notes"
    ],
    "docstrings": [],
    "functions": [
        "connectToMongo"
    ],
    "classes": []
}