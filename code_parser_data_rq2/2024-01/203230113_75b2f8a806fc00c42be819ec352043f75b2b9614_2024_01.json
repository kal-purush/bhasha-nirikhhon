{
    "identifiers": [
        "de",
        "tsl2",
        "nano",
        "autotest",
        "java",
        "lang",
        "reflect",
        "java",
        "time",
        "LocalDate",
        "java",
        "time",
        "LocalDateTime",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "BiConsumer",
        "java",
        "util",
        "Supplier",
        "java",
        "util",
        "stream",
        "IntStream",
        "java",
        "util",
        "stream",
        "Stream",
        "PROGRESS_STEPS",
        "getInteger",
        "maxItemsPerField",
        "currentFieldValues",
        "start",
        "counter",
        "maxCount",
        "name",
        "maxItemsPerField",
        "init",
        "name",
        "maxItemsPerField",
        "name",
        "maxItemsPerField",
        "maxItemsPerField",
        "maxItemsPerField",
        "currentFieldValues",
        "maxItemsPerField",
        "length",
        "maxCount",
        "getMaxCount",
        "log",
        "name",
        "maxCount",
        "counter",
        "start",
        "start",
        "currentTimeMillis",
        "currentFieldValues",
        "printProgress",
        "counter",
        "maxCount",
        "i",
        "i",
        "maxItemsPerField",
        "length",
        "i",
        "currentFieldValues",
        "i",
        "maxItemsPerField",
        "i",
        "currentFieldValues",
        "i",
        "currentFieldValues",
        "currentFieldValues",
        "i",
        "log",
        "currentTimeMillis",
        "start",
        "counter",
        "c",
        "i",
        "i",
        "maxItemsPerField",
        "length",
        "i",
        "c",
        "maxItemsPerField",
        "i",
        "c",
        "i",
        "len",
        "i",
        "len",
        "PROGRESS_STEPS",
        "PROGRESS_STEPS",
        "len",
        "PROGRESS_STEPS",
        "estimatedTime",
        "currentTimeMillis",
        "start",
        "len",
        "i",
        "estimatedTimeLeft",
        "estimatedTime",
        "estimatedTime",
        "len",
        "i",
        "i",
        "len",
        "estimatedTimeLeft",
        "t",
        "t",
        "SuppressWarnings",
        "instances",
        "valueMethodSets",
        "instance",
        "instances",
        "get",
        "currentFieldValues",
        "i",
        "c",
        "valueMethodSets",
        "keySet",
        "c",
        "accept",
        "instance",
        "valueMethodSets",
        "get",
        "c",
        "currentFieldValues",
        "i",
        "name",
        "runOnEach",
        "instances",
        "valueMethodSets",
        "valueMethodsSetsLength",
        "valueMethodSets",
        "values",
        "stream",
        "mapToInt",
        "vs",
        "vs",
        "length",
        "toArray",
        "init",
        "name",
        "ValueSet",
        "concatIntArrays",
        "instances",
        "size",
        "valueMethodsSetsLength",
        "result",
        "next",
        "permuteValues",
        "instances",
        "valueMethodSets",
        "result",
        "runOnEach",
        "get",
        "ex",
        "ex",
        "getMessage",
        "Arrays",
        "toString",
        "instances",
        "toArray",
        "ex",
        "result",
        "name",
        "runOnEach",
        "instances",
        "valueMethodSets",
        "runAll",
        "name",
        "runOnEach",
        "instances",
        "valueMethodSets",
        "userTime",
        "userTime",
        "userTime",
        "minusDays",
        "userTime",
        "plusDays",
        "userTime",
        "minusSeconds",
        "userTime",
        "plusSeconds",
        "withNull",
        "withNull",
        "TRUE",
        "FALSE",
        "userDate",
        "userDate",
        "userDate",
        "minusDays",
        "userDate",
        "plusDays",
        "enumType",
        "withNull",
        "withNull",
        "addNull",
        "enumType",
        "getEnumConstants",
        "enumType",
        "getEnumConstants",
        "SuppressWarnings",
        "values",
        "concat",
        "values",
        "newInstance",
        "values",
        "getClass",
        "getComponentType",
        "values",
        "additionalValues",
        "Stream",
        "concat",
        "Arrays",
        "stream",
        "values",
        "Arrays",
        "stream",
        "additionalValues",
        "toArray",
        "l",
        "newInstance",
        "values",
        "getClass",
        "getComponentType",
        "l",
        "values",
        "additionalValues",
        "IntStream",
        "concat",
        "Arrays",
        "stream",
        "values",
        "Arrays",
        "stream",
        "additionalValues",
        "toArray",
        "i",
        "j",
        "IntStream",
        "i",
        "j",
        "boxed",
        "toArray"
    ],
    "literals": [
        "\"permutator.progress.steps\"",
        "\": creating \"",
        "\" permutations\"",
        "\" permutations finished in \"",
        "\" sec\"",
        "\"\\r\"",
        "\" / \"",
        "\" (estimated time left: \"",
        "\" sec)\"",
        "\"rawtypes\"",
        "\"unchecked\"",
        "\" on:\\n\"",
        "\"init\"",
        "\"unchecked\""
    ],
    "variables": [
        "maxItemsPerField",
        "currentFieldValues",
        "start",
        "counter",
        "maxCount",
        "maxItemsPerField",
        "maxItemsPerField",
        "additionalValues",
        "additionalValues"
    ],
    "comments": [],
    "docstrings": [
        "* permutator to iterate through all given possibilities.<p/>\n * useful for tests, checking all possibilities or creating test data...\n * \n * Usage:<br/>\n * 1. simply iterate by yourself\n *   Example:\n *      Permutator p = new Permutator(\"test-3x3\", 3, 3, 3);\n        int[] c;\n        while ((c = p.next() ) != null) {\n            System.out.println(Arrays.toString(c));\n        }\n *\n * 2. deletate the whole process to the permutator\n *  Example:\n *  Permutator.run(\"item-search\",\n    (() -> TimedRunner.runAt(currentTestTimeString, () -> TestController.search(items3))),\n    items3,\n    Map.of(\n            (c, v) -> c.setName((String) v), allNames,\n            (c, v) -> c.setStatus((Item.Status) v), allStatus,\n            (c, v) -> c.setValidFrom((LocalDate) v), allDates,\n            (c, v) -> c.setValidTo((LocalDate) v), allDates,\n            (c, v) -> c.setPublished((LocalDateTime) v), allTimes,\n            (c, v) -> c.setAvailable((int) v), allNumbers,\n            (c, v) -> c.setHidden((Boolean) v), trueFalse));"
    ],
    "functions": [
        "Permutator",
        "init",
        "next",
        "getCounter",
        "getMaxCount",
        "printProgress",
        "log",
        "permuteValues",
        "T",
        "runAll",
        "T",
        "run",
        "getTimesAround",
        "getAllBooleans",
        "getDatesAround",
        "getAllEnums",
        "addNull",
        "concat",
        "concatIntArrays",
        "getNumbers"
    ],
    "classes": [
        "Permutator",
        "ValueSet"
    ]
}