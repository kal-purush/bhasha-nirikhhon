{
    "identifiers": [
        "os",
        "listdir",
        "os",
        "path",
        "basename",
        "dirname",
        "exists",
        "isfile",
        "join",
        "importlib",
        "machinery",
        "SourceFileLoader",
        "sys",
        "abc",
        "ABC",
        "abstractmethod",
        "ABC",
        "cls",
        "kwargs",
        "hasattr",
        "cls",
        "RuntimeError",
        "__init_subclass__",
        "kwargs",
        "__class__",
        "registry",
        "cls",
        "derivative_name",
        "cls",
        "abstractmethod",
        "email_account",
        "kwargs",
        "email_account",
        "abstractmethod",
        "abstractmethod",
        "message",
        "additional_dirs",
        "additional_dirs",
        "join",
        "dirname",
        "additional_dirs",
        "derivatives_dir",
        "dirs",
        "exists",
        "derivatives_dir",
        "filename",
        "listdir",
        "derivatives_dir",
        "basename",
        "filename",
        "join",
        "derivatives_dir",
        "filename",
        "startswith",
        "isfile",
        "full_path",
        "filename",
        "SourceFileLoader",
        "full_path",
        "load_module"
    ],
    "literals": [
        "'derivative_name'",
        "\"Derivative subclass must have `derivative_name` attribute\"",
        "'derivatives'",
        "'_'",
        "'.py'"
    ],
    "variables": [
        "registry",
        "account",
        "additional_dirs",
        "dirs",
        "full_path"
    ],
    "comments": [
        "Registry of derivatives, key = cls.derivative_name, value = cls",
        "skip if not a normal, non underscored file ending in .py"
    ],
    "docstrings": [
        "\"\"\"Derivative - abstract base class and registry for concrete derivatives, which are processors that create new files or accomplish processing tasks based on the contents of a mailbox.\n\n    This class serves two purposes.  Firstly, it serves as an abstract base class, defining\n    the methods and properties required by a processor that produces derivatives for an EmailAccount.\n\n    Secondly, it serves as a registry of such formats, with the goal of allowing new formats to\n    be implemented in a \"plug-in\" fashion.  Any class subclassing this one, with the expected\n    properties and a class variable \"derivative_name\" will be registered on this class and thus usable\n    by the software.\"\"\"",
        "\"\"\"Enforce format_name attribute on subclasses, register them\"\"\"",
        "\"\"\"Set up email account for use in processing methods.\n\n        If not taking any other steps, the implementation of this can simple be `super()`\n        \"\"\"",
        "\"\"\"Perform any tasks that should happen once per whole account.\"\"\"",
        "\"\"\"Perform any tasks that should happen once per message\"\"\""
    ],
    "functions": [
        "__init_subclass__",
        "do_task_per_account",
        "do_task_per_message",
        "import_derivatives"
    ],
    "classes": [
        "Derivative"
    ]
}