{
    "identifiers": [
        "nock",
        "getAndMergeDiscoveryData",
        "fakeDiscoveryResponse",
        "generateBoltUrlWithAllowedScheme",
        "s",
        "s",
        "describe",
        "beforeAll",
        "text",
        "logs",
        "text",
        "beforeEach",
        "logs",
        "afterEach",
        "nock",
        "afterAll",
        "logger",
        "test",
        "nock",
        "browserHost",
        "fakeDiscoveryResponse",
        "boltHost",
        "getAndMergeDiscoveryData",
        "baseAction",
        "browserHost",
        "expect",
        "discoveryData",
        "expect",
        "discoveryData",
        "boltHost",
        "expect",
        "discoveryData",
        "expect",
        "discoveryData",
        "expect",
        "discoveryData",
        "neo4jVersion",
        "test",
        "nock",
        "browserHost",
        "boltHost",
        "boltHost",
        "neo4jVersion",
        "getAndMergeDiscoveryData",
        "baseAction",
        "browserHost",
        "expect",
        "discoveryData",
        "expect",
        "discoveryData",
        "boltHost",
        "expect",
        "discoveryData",
        "expect",
        "discoveryData",
        "expect",
        "discoveryData",
        "neo4jVersion",
        "test",
        "hostedURL",
        "forceURL",
        "discoveryURL",
        "host",
        "nock",
        "host",
        "fakeDiscoveryResponse",
        "nock",
        "sessionStorageHost",
        "fakeDiscoveryResponse",
        "baseAction",
        "getAndMergeDiscoveryData",
        "expect",
        "discoveryData",
        "expect",
        "discoveryData",
        "p",
        "p",
        "test",
        "sessionStorageHost",
        "hostedURL",
        "forceURL",
        "discoveryURL",
        "nock",
        "host",
        "fakeDiscoveryResponse",
        "baseAction",
        "getAndMergeDiscoveryData",
        "expect",
        "discoveryData",
        "expect",
        "discoveryData",
        "expect",
        "discoveryData",
        "p",
        "p",
        "test",
        "sessionStorageHost",
        "hostedURL",
        "forceURL",
        "discoveryURL",
        "nock",
        "host",
        "fakeDiscoveryResponse",
        "baseAction",
        "getAndMergeDiscoveryData",
        "expect",
        "discoveryData",
        "expect",
        "discoveryData",
        "expect",
        "discoveryData",
        "p",
        "p"
    ],
    "literals": [
        "'nock'",
        "'isomorphic-fetch'",
        "'./discoveryHelpers'",
        "'./discoveryMocks'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'http://sessionStorageHost.com'",
        "'http://hostedURL.com'",
        "'http://forceURL.com'",
        "'http://discoveryURL.com'",
        "string",
        "'getAndMergeDiscoveryData'",
        "string",
        "'finds host when only discovery endpoint (with SSO) is set up'",
        "'neo4j://localhost:7687'",
        "'http://localhost:7474'",
        "'4.4.1'",
        "'/'",
        "'finds host when only discovery endpoint (pre 4.4, without SSO) is set up'",
        "'neo4j://localhost:7687'",
        "'http://localhost:7474'",
        "'4.3.1'",
        "'/'",
        "'enterprise'",
        "'finds and priotises sso providers from session storage/connect form when all discovery sources are present, but doesnt merge when hosts differ'",
        "'/'",
        "'azure'",
        "'otherhost'",
        "'/'",
        "'google'",
        "'lundskommun'",
        "'bolthost'",
        "'google'",
        "'lundskommun'",
        "'finds sso providers from all discovery sources and merges if hosts are identical'",
        "'malmöstad'",
        "'trelleborg'",
        "'göteborg'",
        "'petalburg'",
        "'/'",
        "'bolthost'",
        "'bolthost'",
        "'malmöstad'",
        "'göteborg'",
        "'petalburg'",
        "'trelleborg'",
        "'finds sso providers from some providers and merges without overriding'",
        "'malmöstad'",
        "'trelleborg'",
        "'göteborg'",
        "'petalburg'",
        "'/'",
        "'bolthost'",
        "'bolthost'",
        "'malmöstad'",
        "'göteborg'",
        "'petalburg'",
        "'trelleborg'"
    ],
    "variables": [
        "baseAction",
        "sessionStorageHost",
        "hostedURL",
        "forceURL",
        "discoveryURL",
        "generateBoltUrlWithAllowedScheme",
        "logs",
        "logger",
        "boltHost",
        "browserHost",
        "neo4jVersion",
        "discoveryData",
        "boltHost",
        "browserHost",
        "neo4jVersion",
        "discoveryData",
        "action",
        "discoveryData",
        "hasDiscoveryEndpoint",
        "action",
        "discoveryData",
        "hasDiscoveryEndpoint",
        "action",
        "discoveryData"
    ],
    "comments": [
        "When",
        "expect(discoveryData?.source).toEqual(DISCOVERY_ENDPOINT)",
        "When",
        "expect(discoveryData?.source).toEqual(DISCOVERY_ENDPOINT)",
        "Todo test source via logs",
        "Given",
        "When",
        "Then",
        "expect(discoveryData?.source).toEqual(CONNECT_FORM)",
        "Given",
        "When",
        "Then",
        "expect(discoveryData?.source).toEqual(CONNECT_FORM)",
        "Given",
        "When",
        "Then",
        "expect(discoveryData?.source).toEqual(CONNECT_FORM)",
        "Tests yet not written:",
        "test connect form and connectURL working even when host is missing",
        "new check",
        "Correct sso error",
        "test with weird stuff in localstorage",
        "check the data that comes form forcde uRL"
    ],
    "docstrings": [
        "* Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Neo4j is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>."
    ],
    "functions": [],
    "classes": []
}