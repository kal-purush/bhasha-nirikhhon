{
    "identifiers": [
        "Location",
        "LocationsAndGroups",
        "LocationService",
        "Observable",
        "QueryService",
        "TypingSimulatorService",
        "switchMap",
        "TenantSettingsService",
        "describe",
        "beforeEach",
        "locationService",
        "LocationService",
        "queryService",
        "QueryService",
        "typingSimulatorService",
        "TypingSimulatorService",
        "tenantSettingsService",
        "TenantSettingsService",
        "jasmine",
        "afterEach",
        "jasmine",
        "it",
        "REPLACE_WITH_YOUR_RXJS_SOLUTION",
        "value",
        "result",
        "value",
        "jasmine",
        "expect",
        "result",
        "expect",
        "result",
        "it",
        "REPLACE_WITH_YOUR_RXJS_SOLUTION",
        "value",
        "results",
        "value",
        "jasmine",
        "expect",
        "results",
        "tenantSettingsService",
        "jasmine",
        "expect",
        "results",
        "it",
        "REPLACE_WITH_YOUR_RXJS_SOLUTION",
        "value",
        "result",
        "value",
        "jasmine",
        "expect",
        "result",
        "expect",
        "result",
        "myNewLocation",
        "it",
        "typingSimulatorService",
        "REPLACE_WITH_YOUR_RXJS_SOLUTION",
        "results",
        "returnedResults",
        "results",
        "simulator",
        "expect",
        "queryService",
        "simulator",
        "expect",
        "queryService",
        "simulator",
        "expect",
        "queryService",
        "simulator",
        "expect",
        "queryService",
        "expect",
        "returnedResults",
        "simulator",
        "expect",
        "queryService",
        "expect",
        "returnedResults"
    ],
    "literals": [
        "'./services/location.service'",
        "'rxjs'",
        "'./services/query.service'",
        "'./services/typing-simulator.service'",
        "'rxjs/operators'",
        "'./services/tenant-settings.service'",
        "'Observables'",
        "'My Location'",
        "'[Challenge 1]: Parallel Requests'",
        "'[Challenge 2]: Trigger re-fetch after TenantSettings changed'",
        "'my-new-tenant-id'",
        "'[Challenge 3]: Observable with void return type'",
        "'[Challenge 4]: Aborting ongoing observables'",
        "string",
        "string"
    ],
    "variables": [
        "locationService",
        "queryService",
        "tenantSettingsService",
        "typingSimulatorService",
        "myNewLocation",
        "REPLACE_WITH_YOUR_RXJS_SOLUTION",
        "result",
        "results",
        "result",
        "simulator",
        "returnedResults"
    ],
    "comments": [
        "Now we could populate the locations inside of the locationsGroups with the instances",
        "Trigger tenant change",
        "@ts-ignore",
        "H",
        "He",
        "Hel",
        "Hell",
        "Allow the last input value \"Hell\" to be returning values by having the \"debounceTime\" to be passed"
    ],
    "docstrings": [
        "* Instructions:\n   * We need the Locations returned from getLocations() to populate the LocationGroups returned from getLocationGroups()\n   * Use:\n   *  - locationService.getLocations()\n   *  - locationService.getLocationGroups()",
        "* Instructions:\n   * When we change the current tenant we want to refetch the locations as we have another tenantId\n   * This needs to happen continuously\n   *\n   * Use:\n   *  tenantSettings.tenantSettingChanges() -> Triggers when the currently selected tenant changes (will trigger twice)\n   *  locationService.getLocations()\n   *",
        "* Instructions:\n   * We want to update our Location and then reload the list of all locations in our location overview\n   * Use:\n   *  - locationService.updateLocation(myLocation)\n   *  - locationService.getLocationGroups()\n   * Bonus Points:\n   *  - Use only one subscribe",
        "* Instructions:\n   * We want to search for autocomplete suggestions on the backend. To save backend resources we want to abort old requests\n   * Use:\n   *  simulator.onKeyUp$ -> For User inputs - no need to debounce\n   *  queryService.lookupAutocompleteSuggestions(inputValue)\n   *"
    ],
    "functions": [],
    "classes": []
}