{
    "identifiers": [
        "definition",
        "definition",
        "e",
        "getExposeDocs",
        "e",
        "expose",
        "expose",
        "title",
        "expose",
        "expose",
        "title",
        "expose",
        "lines",
        "capitalizeFirstLetter",
        "expose",
        "expose",
        "expose",
        "title",
        "title",
        "expose",
        "expose",
        "lines",
        "expose",
        "expose",
        "access",
        "lines",
        "expose",
        "lines",
        "expose",
        "access",
        "lines",
        "expose",
        "access",
        "lines",
        "expose",
        "lines",
        "expose",
        "access",
        "lines",
        "expose",
        "lines",
        "expose",
        "expose",
        "expose",
        "lines",
        "expose",
        "expose",
        "expose",
        "lines",
        "expose",
        "expose",
        "expose",
        "expose",
        "expose",
        "lines",
        "expose",
        "expose",
        "expose",
        "expose",
        "lines",
        "expose",
        "e",
        "e",
        "expose",
        "expose",
        "e",
        "e",
        "expose",
        "state",
        "state",
        "lines",
        "expose",
        "state",
        "stateStr",
        "state",
        "access",
        "expose",
        "lines",
        "expose",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "lines",
        "expose",
        "state",
        "v",
        "state",
        "v",
        "lines",
        "expose",
        "state",
        "state",
        "state",
        "state",
        "lines",
        "state",
        "access",
        "lines",
        "expose",
        "state",
        "lines",
        "expose",
        "e",
        "expose",
        "e",
        "e",
        "e",
        "lines",
        "e",
        "e",
        "e",
        "e",
        "expose",
        "expose",
        "e",
        "e",
        "mode",
        "lines",
        "mode",
        "mode",
        "e",
        "e",
        "expose",
        "expose",
        "e",
        "e",
        "lockState",
        "lines",
        "lockState",
        "e",
        "e",
        "expose",
        "expose",
        "e",
        "e",
        "expose",
        "e",
        "e",
        "expose",
        "e",
        "e",
        "expose",
        "e",
        "e",
        "expose",
        "e",
        "e",
        "expose",
        "e",
        "e",
        "lines",
        "expose",
        "e",
        "e",
        "state",
        "lines",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "brightness",
        "lines",
        "brightness",
        "brightness",
        "brightness",
        "brightness",
        "colorTemp",
        "colorTemp",
        "p",
        "p",
        "lines",
        "colorTemp",
        "colorTemp",
        "colorTemp",
        "colorTemp",
        "presets",
        "colorTempStartup",
        "colorTempStartup",
        "p",
        "p",
        "lines",
        "colorTempStartup",
        "colorTempStartup",
        "colorTempStartup",
        "colorTempStartup",
        "presets",
        "colorXY",
        "lines",
        "colorXY",
        "colorXY",
        "lines",
        "lines",
        "lines",
        "colorHS",
        "lines",
        "colorHS",
        "colorHS",
        "lines",
        "lines",
        "lines",
        "lines",
        "lines",
        "lines",
        "lines",
        "lines",
        "lines",
        "lines",
        "lines",
        "lines",
        "lines",
        "lines",
        "brightness",
        "lines",
        "lines",
        "lines",
        "brightness",
        "lines",
        "lines",
        "lines",
        "colorTemp",
        "lines",
        "lines",
        "lines",
        "colorHS",
        "lines",
        "lines",
        "lines",
        "lines",
        "lines",
        "lines",
        "expose",
        "lines",
        "expose",
        "e",
        "e",
        "f",
        "expose",
        "e",
        "e",
        "lines",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "expose",
        "e",
        "e",
        "localTemperature",
        "lines",
        "localTemperature",
        "localTemperature",
        "localTemperature",
        "localTemperature",
        "access",
        "lines",
        "lines",
        "localTemperature",
        "lines",
        "lines",
        "f",
        "expose",
        "e",
        "e",
        "lines",
        "f",
        "f",
        "f",
        "f",
        "v",
        "v",
        "f",
        "expose",
        "e",
        "e",
        "runningState",
        "lines",
        "runningState",
        "runningState",
        "runningState",
        "v",
        "v",
        "runningState",
        "expose",
        "e",
        "e",
        "awayMode",
        "lines",
        "awayMode",
        "awayMode",
        "awayMode",
        "awayMode",
        "awayMode",
        "awayMode",
        "awayMode",
        "expose",
        "lines",
        "expose",
        "expose",
        "e",
        "e",
        "feature",
        "expose",
        "feature",
        "ft",
        "feature",
        "feature",
        "feature",
        "ft",
        "feature",
        "v",
        "v",
        "lines",
        "feature",
        "feature",
        "feature",
        "ft",
        "lines"
    ],
    "literals": [
        "## Exposes\n\n${definition.exposes.map((e) => getExposeDocs(e)).join('\\n\\n')}",
        "'\\n\\n'",
        "${expose.endpoint} endpoint",
        "### ${capitalizeFirstLetter(expose.name ? expose.name : expose.type)} ${title.length > 0 ? `(${title.join(', ')})` : ''}",
        "(${title.join(', ')})",
        "', '",
        "''",
        "'numeric'",
        "'binary'",
        "'text'",
        "'enum'",
        "'.'",
        "Value can be found in the published state on the \\`${expose.property}\\` property.",
        "Value will **not** be published in the state.",
        "It's not possible to read (\\`/get\\`) or write (\\`/set\\`) this value.",
        "To read (\\`/get\\`) the value publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${expose.property}\": \"\"}\\`.",
        "It's not possible to read (\\`/get\\`) this value.",
        "To write (\\`/set\\`) a value publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${expose.property}\": NEW_VALUE}\\`.",
        "It's not possible to write (\\`/set\\`) this value.",
        "'numeric'",
        "'value_max'",
        "'value_max'",
        "The minimal value is \\`${expose.value_min}\\` and the maximum value is \\`${expose.value_max}\\`.",
        "The unit of this value is \\`${expose.unit}\\`.",
        "'Not supported'",
        "'binary'",
        "'value_on'",
        "'value_off'",
        "If value equals \\`${expose.value_on}\\` ${expose.name} is ON, if \\`${expose.value_off}\\` OFF.",
        "'enum'",
        "The possible values are: ${expose.values.map((e) => `\\`${e}\\``).join(', ')}.",
        "\\`${e}\\",
        "', '",
        "'switch'",
        "'lock'",
        "'cover'",
        "'fan'",
        "'state'",
        "'cover'",
        "(value is \\`OPEN\\` or \\`CLOSE\\`)",
        "(value is \\`${state.value_on}\\` or \\`${state.value_off}\\`)",
        "The current state of this ${expose.type} is in the published state under the \\`${state.property}\\` property ${stateStr}.",
        "'switch'",
        "To control this ${expose.type} publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${state.property}\": \"${state.value_on}\"}\\`, \\`{\"${state.property}\": \"${state.value_off}\"}\\` or \\`{\"${state.property}\": \"${state.value_toggle}\"}\\`.",
        "'enum'",
        "To control this ${expose.type} publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload ${state.values.map((v) => `\\`{\"${state.property}\": \"${v}\"}\\``).join(', ')}.",
        "\\`{\"${state.property}\": \"${v}\"}\\",
        "', '",
        "To control this ${expose.type} publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${state.property}\": \"${state.value_on}\"}\\` or \\`{\"${state.property}\": \"${state.value_off}\"}\\`.",
        "It's not possible to write (\\`/set\\`) this value.",
        "To read the current state of this ${expose.type} publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${state.property}\": \"\"}\\`.",
        "It's not possible to read (\\`/get\\`) this value.",
        "'cover'",
        "'position'",
        "'tilt'",
        "To change the ${e.name} publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${e.property}\": VALUE}\\` where \\`VALUE\\` is a number between \\`${e.value_min}\\` and \\`${e.value_max}\\`.",
        "'fan'",
        "'mode'",
        "To change the mode publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${mode.property}\": VALUE}\\` where \\`VALUE\\` can be: ${mode.values.map((e) => `\\`${e}\\``).join(', ')}.",
        "\\`${e}\\",
        "', '",
        "'lock'",
        "'lock_state'",
        "This lock exposes a lock state which can be found in the published state under the \\`lock_state\\` property. It's not possible to read (\\`/get\\`) or write (\\`/set\\`) this value. The possible values are: ${lockState.values.map((e) => `\\`${e}\\``).join(', ')}.",
        "\\`${e}\\",
        "', '",
        "'light'",
        "'state'",
        "'brightness'",
        "'color_temp'",
        "'color_temp_startup'",
        "'color_xy'",
        "'color_hs'",
        "This light supports the following features: ${expose.features.map((e) => `\\`${e.name}\\``).join(', ')}.",
        "\\`${e.name}\\",
        "', '",
        "- \\`state\\`: To control the state publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${state.property}\": \"${state.value_on}\"}\\`, \\`{\"${state.property}\": \"${state.value_off}\"}\\` or \\`{\"${state.property}\": \"${state.value_toggle}\"}\\`. To read the state send a message to \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${state.property}\": \"\"}\\`.",
        "- \\`brightness\\`: To control the brightness publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${brightness.property}\": VALUE}\\` where \\`VALUE\\` is a number between \\`${brightness.value_min}\\` and \\`${brightness.value_max}\\`. To read the brightness send a message to \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${brightness.property}\": \"\"}\\`.",
        "Besides the numeric values the following values are accepected: ${colorTemp.presets.map((p) => `\\`${p.name}\\``).join(', ')}.",
        "\\`${p.name}\\",
        "', '",
        "- \\`color_temp\\`: To control the color temperature (in reciprocal megakelvin a.k.a. mired scale) publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${colorTemp.property}\": VALUE}\\` where \\`VALUE\\` is a number between \\`${colorTemp.value_min}\\` and \\`${colorTemp.value_max}\\`, the higher the warmer the color. To read the color temperature send a message to \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${colorTemp.property}\": \"\"}\\`. ${presets}",
        "Besides the numeric values the following values are accepected: ${colorTempStartup.presets.map((p) => `\\`${p.name}\\``).join(', ')}.",
        "\\`${p.name}\\",
        "', '",
        "- \\`color_temp_startup\\`: To set the startup color temperature (in reciprocal megakelvin a.k.a. mired scale) publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${colorTempStartup.property}\": VALUE}\\` where \\`VALUE\\` is a number between \\`${colorTempStartup.value_min}\\` and \\`${colorTempStartup.value_max}\\`, the higher the warmer the color. To read the startup color temperature send a message to \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${colorTempStartup.property}\": \"\"}\\`. ${presets}",
        "- \\`color_xy\\`: To control the XY color (CIE 1931 color space) publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${colorXY.property}\": {\"x\": X_VALUE, \"y\": Y_VALUE}}\\` (e.g. \\`{\"color\":{\"x\":0.123,\"y\":0.123}}\\`). To read the XY color send a message to \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${colorXY.property}\":{\"x\":\"\",\"y\":\"\"}}\\`. Alternatively it is possible to set the XY color via RGB:",
        "- \\`{\"color\": {\"r\": R, \"g\": G, \"b\": B}}\\` e.g. \\`{\"color\":{\"r\":46,\"g\":102,\"b\":150}}\\",
        "- \\`{\"color\": {\"rgb\": \"R,G,B\"}}\\` e.g. \\`{\"color\":{\"rgb\":\"46,102,150\"}}\\",
        "- \\`{\"color\": {\"hex\": HEX}}\\` e.g. \\`{\"color\":{\"hex\":\"#547CFF\"}}\\",
        "- \\`color_hs\\`: To control the hue/saturation (color) publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${colorHS.property}\": {\"hue\": HUE, \"saturation\": SATURATION}}\\` (e.g. \\`{\"color\":{\"hue\":360,\"saturation\":100}}\\`). To read the hue/saturation send a message to \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${colorHS.property}\":{\"hue\":\"\",\"saturation\":\"\"}}\\`. Alternatively it is possible to set the hue/saturation via:",
        "- HSB space (hue, saturation, brightness): \\`{\"color\": {\"h\": H, \"s\": S, \"b\": B}}\\` e.g. \\`{\"color\":{\"h\":360,\"s\":100,\"b\":100}}\\` or \\`{\"color\": {\"hsb\": \"H,S,B\"}}\\` e.g. \\`{\"color\":{\"hsb\":\"360,100,100\"}}\\",
        "- HSV space (hue, saturation, brightness):\\`{\"color\": {\"h\": H, \"s\": S, \"v\": V}}\\` e.g. \\`{\"color\":{\"h\":360,\"s\":100,\"v\":100}}\\` or \\`{\"color\": {\"hsv\": \"H,S,V\"}}\\` e.g. \\`{\"color\":{\"hsv\":\"360,100,100\"}}\\",
        "- HSL space (hue, saturation, lightness)\\`{\"color\": {\"h\": H, \"s\": S, \"l\": L}}\\` e.g. \\`{\"color\":{\"h\":360,\"s\":100,\"l\":100}}\\` or \\`{\"color\": {\"hsl\": \"H,S,L\"}}\\` e.g. \\`{\"color\":{\"hsl\":\"360,100,100\"}}\\",
        "",
        "#### Transition",
        "For all of the above mentioned features it is possible to do a transition of the value over time. To do this add an additional property \\`transition\\` to the payload which is the transition time in seconds.",
        "Examples: \\`{\"brightness\":156,\"transition\":3}\\`, \\`{\"color_temp\":241,\"transition\":1}\\`.",
        "",
        "#### Moving/stepping",
        "Instead of setting a value (e.g. brightness) directly it is also possible to:",
        "- move: this will automatically move the value over time, to stop send value \\`stop\\` or \\`0\\`.",
        "- step: this will increment/decrement the current value by the given one.",
        "\\nThe direction of move and step can be either up or down, provide a negative value to move/step down, a positive value to move/step up.",
        "To do this send a payload like below to \\`zigbee2mqtt/FRIENDLY_NAME/set\\",
        "\\n**NOTE**: brightness move/step will stop at the minimum brightness and won't turn on the light when it's off. In this case use \\`brightness_move_onoff\\`/\\`brightness_step_onoff\\",
        "\\`\\`\\`\\`js",
        "{",
        "\"brightness_move\": -40, // Starts moving brightness down at 40 units per second",
        "\"brightness_move\": 0, // Stop moving brightness",
        "\"brightness_step\": 40 // Increases brightness by 40",
        "\"color_temp_move\": 60, // Starts moving color temperature up at 60 units per second",
        "\"color_temp_move\": \"stop\", // Stop moving color temperature",
        "\"color_temp_step\": 99, // Increase color temperature by 99",
        "\"hue_move\": 40, // Starts moving hue up at 40 units per second, will endlessly loop (allowed value range: -255 till 255)",
        "\"hue_step\": -90, // Decrease hue by 90 (allowed value range: -255 till 255)",
        "\"saturation_move\": -55, // Starts moving saturation down at -55 units per second (allowed value range: -255 till 255)",
        "\"saturation_step\": 66, // Increase saturation by 66 (allowed value range: -255 till 255)",
        "}",
        "\\`\\`\\`\\",
        "'climate'",
        "This climate device supports the following features: ${expose.features.map((e) => `\\`${e.name}\\``).join(', ')}.",
        "\\`${e.name}\\",
        "', '",
        "'occupied_heating_setpoint'",
        "'occupied_cooling_setpoint'",
        "'current_heating_setpoint'",
        "- \\`${f.name}\\`: ${f.description}. To control publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${f.property}\": VALUE}\\` where \\`VALUE\\` is the ${f.unit} between \\`${f.value_min}\\` and \\`${f.value_max}\\`. To read send a message to \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${f.property}\": \"\"}\\`.",
        "'local_temperature'",
        "- \\`${localTemperature.name}\\`: ${localTemperature.description} (in ${localTemperature.unit}).",
        "To read send a message to \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${localTemperature.property}\": \"\"}\\`.",
        "Reading (\\`/get\\`) this attribute is not possible.",
        "'system_mode'",
        "'preset'",
        "'mode'",
        "- \\`${f.name}\\`: ${f.description}. To control publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${f.property}\": VALUE}\\` where \\`VALUE\\` is one of: ${f.values.map((v) => `\\`${v}\\``).join(', ')}. To read send a message to \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${f.property}\": \"\"}\\`.",
        "\\`${v}\\",
        "', '",
        "'running_state'",
        "- \\`${runningState.name}\\`: ${runningState.description}. Possible values are: ${runningState.values.map((v) => `\\`${v}\\``).join(', ')}. To read send a message to \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${runningState.property}\": \"\"}\\`.",
        "\\`${v}\\",
        "', '",
        "'away_mode'",
        "- \\`${awayMode.name}\\`: ${awayMode.description}. To control publish a message to topic \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${awayMode.property}\": \"${awayMode.value_on}\"}\\` or \\`{\"${awayMode.property}\": \"${awayMode.value_off}\"}\\`. To read send a message to \\`zigbee2mqtt/FRIENDLY_NAME/get\\` with payload \\`{\"${awayMode.property}\": \"\"}\\`.",
        "'composite'",
        "Can be set by publishing to \\`zigbee2mqtt/FRIENDLY_NAME/set\\` with payload \\`{\"${expose.property}\": {${expose.features.map((e) => `\"${e.property}\": VALUE`).join(', ')}}}\\",
        "\"${e.property}\": VALUE",
        "', '",
        "''",
        "'binary'",
        "Allowed values: \\`${feature.value_on}\\` or \\`${feature.value_off}\\",
        "'enum'",
        "Allowed values: ${feature.values.map((v) => `\\`${v}\\``).join(', ')}",
        "\\`${v}\\",
        "', '",
        "- \\`${feature.property}\\` (${feature.type}): ${feature.description}. ${ft}",
        "'Not supported'",
        "'\\n'"
    ],
    "variables": [
        "access",
        "lines",
        "title",
        "state",
        "stateStr",
        "mode",
        "lockState",
        "state",
        "brightness",
        "colorTemp",
        "colorTempStartup",
        "colorXY",
        "colorHS",
        "presets",
        "presets",
        "localTemperature",
        "runningState",
        "awayMode",
        "ft"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "generateExpose",
        "capitalizeFirstLetter",
        "getExposeDocs"
    ],
    "classes": []
}