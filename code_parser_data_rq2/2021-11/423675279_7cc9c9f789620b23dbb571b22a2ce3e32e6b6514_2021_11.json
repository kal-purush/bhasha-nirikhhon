{
    "identifiers": [
        "argparse",
        "os",
        "platform",
        "sys",
        "pathlib",
        "Path",
        "socket",
        "cv2",
        "numpy",
        "np",
        "torch",
        "torch",
        "backends",
        "cudnn",
        "cudnn",
        "Path",
        "resolve",
        "FILE",
        "parents",
        "ROOT",
        "sys",
        "path",
        "sys",
        "path",
        "append",
        "ROOT",
        "Path",
        "os",
        "path",
        "relpath",
        "ROOT",
        "Path",
        "cwd",
        "models",
        "experimental",
        "attempt_load",
        "utils",
        "datasets",
        "IMG_FORMATS",
        "VID_FORMATS",
        "LoadImages",
        "LoadStreams",
        "utils",
        "general",
        "LOGGER",
        "apply_classifier",
        "check_file",
        "check_img_size",
        "check_imshow",
        "check_requirements",
        "check_suffix",
        "colorstr",
        "increment_path",
        "non_max_suppression",
        "print_args",
        "scale_coords",
        "strip_optimizer",
        "xyxy2xywh",
        "utils",
        "plots",
        "Annotator",
        "colors",
        "save_one_box",
        "utils",
        "torch_utils",
        "load_classifier",
        "select_device",
        "time_sync",
        "torch",
        "no_grad",
        "weights",
        "ROOT",
        "source",
        "ROOT",
        "imgsz",
        "conf_thres",
        "iou_thres",
        "max_det",
        "device",
        "view_img",
        "save_txt",
        "save_conf",
        "save_crop",
        "nosave",
        "classes",
        "agnostic_nms",
        "augment",
        "visualize",
        "update",
        "project",
        "ROOT",
        "name",
        "exist_ok",
        "line_thickness",
        "hide_labels",
        "hide_conf",
        "half",
        "dnn",
        "source",
        "nosave",
        "source",
        "endswith",
        "Path",
        "source",
        "suffix",
        "IMG_FORMATS",
        "VID_FORMATS",
        "source",
        "lower",
        "startswith",
        "source",
        "isnumeric",
        "source",
        "endswith",
        "is_url",
        "is_file",
        "is_url",
        "is_file",
        "check_file",
        "source",
        "increment_path",
        "Path",
        "project",
        "name",
        "exist_ok",
        "exist_ok",
        "save_dir",
        "save_txt",
        "save_dir",
        "mkdir",
        "parents",
        "exist_ok",
        "select_device",
        "device",
        "half",
        "device",
        "weights",
        "isinstance",
        "weights",
        "weights",
        "Path",
        "w",
        "suffix",
        "lower",
        "check_suffix",
        "w",
        "suffixes",
        "suffix",
        "x",
        "x",
        "suffixes",
        "i",
        "i",
        "pt",
        "torch",
        "jit",
        "load",
        "w",
        "w",
        "attempt_load",
        "weights",
        "map_location",
        "device",
        "model",
        "stride",
        "max",
        "model",
        "names",
        "hasattr",
        "model",
        "model",
        "names",
        "half",
        "model",
        "half",
        "classify",
        "load_classifier",
        "name",
        "n",
        "modelc",
        "load_state_dict",
        "torch",
        "load",
        "map_location",
        "device",
        "to",
        "device",
        "eval",
        "onnx",
        "dnn",
        "check_requirements",
        "cv2",
        "dnn",
        "readNetFromONNX",
        "w",
        "check_requirements",
        "torch",
        "has_cuda",
        "onnxruntime",
        "onnxruntime",
        "InferenceSession",
        "w",
        "tensorflow",
        "tf",
        "pb",
        "gd",
        "inputs",
        "outputs",
        "tf",
        "compat",
        "v1",
        "wrap_function",
        "tf",
        "compat",
        "v1",
        "import_graph_def",
        "gd",
        "name",
        "x",
        "prune",
        "tf",
        "nest",
        "map_structure",
        "x",
        "graph",
        "as_graph_element",
        "inputs",
        "tf",
        "nest",
        "map_structure",
        "x",
        "graph",
        "as_graph_element",
        "outputs",
        "tf",
        "Graph",
        "as_graph_def",
        "graph_def",
        "ParseFromString",
        "open",
        "w",
        "read",
        "wrap_frozen_graph",
        "gd",
        "graph_def",
        "inputs",
        "outputs",
        "saved_model",
        "tf",
        "keras",
        "models",
        "load_model",
        "w",
        "tflite",
        "w",
        "tflite_runtime",
        "interpreter",
        "tflri",
        "platform",
        "system",
        "tflri",
        "Interpreter",
        "model_path",
        "w",
        "experimental_delegates",
        "tflri",
        "load_delegate",
        "tf",
        "lite",
        "Interpreter",
        "model_path",
        "w",
        "interpreter",
        "allocate_tensors",
        "interpreter",
        "get_input_details",
        "interpreter",
        "get_output_details",
        "input_details",
        "np",
        "uint8",
        "check_img_size",
        "imgsz",
        "s",
        "stride",
        "webcam",
        "check_imshow",
        "LoadStreams",
        "source",
        "img_size",
        "imgsz",
        "stride",
        "stride",
        "auto",
        "pt",
        "len",
        "dataset",
        "LoadImages",
        "source",
        "img_size",
        "imgsz",
        "stride",
        "stride",
        "auto",
        "pt",
        "bs",
        "bs",
        "pt",
        "device",
        "model",
        "torch",
        "zeros",
        "imgsz",
        "to",
        "device",
        "type_as",
        "next",
        "model",
        "parameters",
        "socket",
        "socket",
        "obj",
        "connect",
        "host",
        "port",
        "path",
        "img",
        "im0s",
        "vid_cap",
        "s",
        "dataset",
        "time_sync",
        "onnx",
        "img",
        "astype",
        "torch",
        "from_numpy",
        "img",
        "to",
        "device",
        "img",
        "half",
        "half",
        "img",
        "img",
        "len",
        "img",
        "shape",
        "img",
        "time_sync",
        "dt",
        "t2",
        "t1",
        "pt",
        "increment_path",
        "save_dir",
        "Path",
        "path",
        "stem",
        "mkdir",
        "visualize",
        "model",
        "img",
        "augment",
        "augment",
        "visualize",
        "visualize",
        "onnx",
        "dnn",
        "net",
        "setInput",
        "img",
        "torch",
        "tensor",
        "net",
        "forward",
        "torch",
        "tensor",
        "session",
        "run",
        "session",
        "get_outputs",
        "name",
        "session",
        "get_inputs",
        "name",
        "img",
        "img",
        "permute",
        "cpu",
        "numpy",
        "pb",
        "frozen_func",
        "x",
        "tf",
        "constant",
        "imn",
        "numpy",
        "saved_model",
        "model",
        "imn",
        "training",
        "numpy",
        "tflite",
        "int8",
        "input_details",
        "imn",
        "scale",
        "zero_point",
        "astype",
        "np",
        "uint8",
        "interpreter",
        "set_tensor",
        "input_details",
        "imn",
        "interpreter",
        "invoke",
        "interpreter",
        "get_tensor",
        "output_details",
        "int8",
        "output_details",
        "pred",
        "astype",
        "np",
        "float32",
        "zero_point",
        "scale",
        "pred",
        "imgsz",
        "pred",
        "imgsz",
        "pred",
        "imgsz",
        "pred",
        "imgsz",
        "torch",
        "tensor",
        "pred",
        "time_sync",
        "dt",
        "t3",
        "t2",
        "non_max_suppression",
        "pred",
        "conf_thres",
        "iou_thres",
        "classes",
        "agnostic_nms",
        "max_det",
        "max_det",
        "dt",
        "time_sync",
        "t3",
        "classify",
        "apply_classifier",
        "pred",
        "modelc",
        "img",
        "im0s",
        "i",
        "det",
        "pred",
        "seen",
        "webcam",
        "path",
        "i",
        "im0s",
        "i",
        "copy",
        "dataset",
        "count",
        "s",
        "i",
        "path",
        "im0s",
        "copy",
        "getattr",
        "dataset",
        "Path",
        "p",
        "save_dir",
        "p",
        "name",
        "save_dir",
        "p",
        "stem",
        "dataset",
        "mode",
        "frame",
        "s",
        "img",
        "shape",
        "torch",
        "tensor",
        "im0",
        "shape",
        "im0",
        "copy",
        "save_crop",
        "im0",
        "Annotator",
        "im0",
        "line_width",
        "line_thickness",
        "example",
        "names",
        "len",
        "det",
        "scale_coords",
        "img",
        "shape",
        "det",
        "im0",
        "shape",
        "round",
        "c",
        "det",
        "unique",
        "det",
        "c",
        "sum",
        "s",
        "n",
        "names",
        "c",
        "n",
        "xyxy",
        "conf",
        "cls",
        "reversed",
        "det",
        "save_txt",
        "xyxy2xywh",
        "torch",
        "tensor",
        "xyxy",
        "view",
        "gn",
        "view",
        "tolist",
        "cls",
        "xywh",
        "conf",
        "save_conf",
        "cls",
        "xywh",
        "open",
        "txt_path",
        "f",
        "f",
        "write",
        "len",
        "line",
        "rstrip",
        "line",
        "save_img",
        "save_crop",
        "view_img",
        "cls",
        "hide_labels",
        "names",
        "c",
        "hide_conf",
        "names",
        "c",
        "conf",
        "annotator",
        "box_label",
        "xyxy",
        "label",
        "color",
        "colors",
        "c",
        "save_crop",
        "save_one_box",
        "xyxy",
        "imc",
        "file",
        "save_dir",
        "names",
        "c",
        "p",
        "stem",
        "BGR",
        "LOGGER",
        "info",
        "s",
        "t3",
        "t2",
        "s",
        "find",
        "obj",
        "sendall",
        "msg",
        "encode",
        "obj",
        "sendall",
        "msg",
        "encode",
        "annotator",
        "result",
        "view_img",
        "cv2",
        "imshow",
        "p",
        "im0",
        "cv2",
        "waitKey",
        "save_img",
        "dataset",
        "mode",
        "cv2",
        "imwrite",
        "save_path",
        "im0",
        "vid_path",
        "i",
        "save_path",
        "save_path",
        "isinstance",
        "vid_writer",
        "i",
        "cv2",
        "VideoWriter",
        "vid_writer",
        "i",
        "release",
        "vid_cap",
        "vid_cap",
        "get",
        "cv2",
        "CAP_PROP_FPS",
        "vid_cap",
        "get",
        "cv2",
        "CAP_PROP_FRAME_WIDTH",
        "vid_cap",
        "get",
        "cv2",
        "CAP_PROP_FRAME_HEIGHT",
        "im0",
        "shape",
        "im0",
        "shape",
        "save_path",
        "cv2",
        "VideoWriter",
        "save_path",
        "cv2",
        "VideoWriter_fourcc",
        "fps",
        "w",
        "h",
        "vid_writer",
        "i",
        "write",
        "im0",
        "obj",
        "close",
        "x",
        "seen",
        "x",
        "dt",
        "LOGGER",
        "info",
        "imgsz",
        "t",
        "save_txt",
        "save_img",
        "len",
        "save_dir",
        "glob",
        "save_dir",
        "save_txt",
        "LOGGER",
        "info",
        "colorstr",
        "save_dir",
        "s",
        "update",
        "strip_optimizer",
        "weights",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "nargs",
        "ROOT",
        "help",
        "parser",
        "add_argument",
        "ROOT",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "ROOT",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "parse_args",
        "opt",
        "imgsz",
        "len",
        "opt",
        "imgsz",
        "print_args",
        "FILE",
        "stem",
        "opt",
        "opt",
        "opt",
        "check_requirements",
        "exclude",
        "run",
        "vars",
        "opt",
        "parse_opt",
        "main",
        "opt"
    ],
    "literals": [
        "'localhost'",
        "'yolov5s.pt'",
        "'data/images'",
        "''",
        "'runs/detect'",
        "'exp'",
        "'.txt'",
        "'rtsp://'",
        "'rtmp://'",
        "'http://'",
        "'https://'",
        "'.txt'",
        "'labels'",
        "'cpu'",
        "'.pt'",
        "'.onnx'",
        "'.tflite'",
        "'.pb'",
        "''",
        "f'class{i}'",
        "'torchscript'",
        "'module'",
        "'resnet50'",
        "'resnet50.pt'",
        "'model'",
        "'opencv-python>=4.5.4'",
        "'onnx'",
        "'onnxruntime-gpu'",
        "'onnxruntime'",
        "\"\"",
        "'rb'",
        "\"x:0\"",
        "\"Identity:0\"",
        "\"edgetpu\"",
        "'Linux'",
        "'libedgetpu.so.1'",
        "'Darwin'",
        "'libedgetpu.1.dylib'",
        "'Windows'",
        "'edgetpu.dll'",
        "'dtype'",
        "'cpu'",
        "'float32'",
        "'quantization'",
        "'index'",
        "'index'",
        "'quantization'",
        "f'{i}: '",
        "'frame'",
        "'labels'",
        "''",
        "'image'",
        "f'_{frame}'",
        "'%gx%g '",
        "f\"{n} {names[int(c)]}{'s' * (n > 1)}, \"",
        "'s'",
        "'.txt'",
        "'a'",
        "'%g '",
        "'\\n'",
        "f'{names[c]} {conf:.2f}'",
        "'crops'",
        "f'{p.stem}.jpg'",
        "f'{s}Done. ({t3 - t2:.3f}s)'",
        "'lego'",
        "\"Dont\"",
        "\"Lego\"",
        "'image'",
        "'.mp4'",
        "'mp4v'",
        "f'Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {(1, 3, *imgsz)}'",
        "f\"\\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}\"",
        "'labels/*.txt'",
        "'labels'",
        "''",
        "f\"Results saved to {colorstr('bold', save_dir)}{s}\"",
        "'bold'",
        "'--weights'",
        "'+'",
        "'yolov5s.pt'",
        "'model path(s)'",
        "'--source'",
        "'data/images'",
        "'file/dir/URL/glob, 0 for webcam'",
        "'--imgsz'",
        "'--img'",
        "'--img-size'",
        "'+'",
        "'inference size h,w'",
        "'--conf-thres'",
        "'confidence threshold'",
        "'--iou-thres'",
        "'NMS IoU threshold'",
        "'--max-det'",
        "'maximum detections per image'",
        "'--device'",
        "''",
        "'cuda device, i.e. 0 or 0,1,2,3 or cpu'",
        "'--view-img'",
        "'store_true'",
        "'show results'",
        "'--save-txt'",
        "'store_true'",
        "'save results to *.txt'",
        "'--save-conf'",
        "'store_true'",
        "'save confidences in --save-txt labels'",
        "'--save-crop'",
        "'store_true'",
        "'save cropped prediction boxes'",
        "'--nosave'",
        "'store_true'",
        "'do not save images/videos'",
        "'--classes'",
        "'+'",
        "'filter by class: --classes 0, or --classes 0 2 3'",
        "'--agnostic-nms'",
        "'store_true'",
        "'class-agnostic NMS'",
        "'--augment'",
        "'store_true'",
        "'augmented inference'",
        "'--visualize'",
        "'store_true'",
        "'visualize features'",
        "'--update'",
        "'store_true'",
        "'update all models'",
        "'--project'",
        "'runs/detect'",
        "'save results to project/name'",
        "'--name'",
        "'exp'",
        "'save results to project/name'",
        "'--exist-ok'",
        "'store_true'",
        "'existing project/name ok, do not increment'",
        "'--line-thickness'",
        "'bounding box thickness (pixels)'",
        "'--hide-labels'",
        "'store_true'",
        "'hide labels'",
        "'--hide-conf'",
        "'store_true'",
        "'hide confidences'",
        "'--half'",
        "'store_true'",
        "'use FP16 half-precision inference'",
        "'--dnn'",
        "'store_true'",
        "'use OpenCV DNN for ONNX inference'",
        "'tensorboard'",
        "'thop'",
        "\"__main__\""
    ],
    "variables": [
        "host",
        "port",
        "FILE",
        "ROOT",
        "ROOT",
        "source",
        "save_img",
        "is_file",
        "is_url",
        "webcam",
        "source",
        "save_dir",
        "device",
        "w",
        "classify",
        "suffix",
        "suffixes",
        "pt",
        "onnx",
        "tflite",
        "pb",
        "saved_model",
        "stride",
        "names",
        "model",
        "stride",
        "names",
        "modelc",
        "net",
        "session",
        "x",
        "graph_def",
        "frozen_func",
        "model",
        "interpreter",
        "interpreter",
        "input_details",
        "output_details",
        "int8",
        "imgsz",
        "view_img",
        "cudnn",
        "benchmark",
        "dataset",
        "bs",
        "dataset",
        "bs",
        "vid_path",
        "vid_writer",
        "dt",
        "seen",
        "obj",
        "t1",
        "img",
        "img",
        "img",
        "img",
        "t2",
        "visualize",
        "pred",
        "pred",
        "pred",
        "imn",
        "pred",
        "pred",
        "scale",
        "zero_point",
        "imn",
        "pred",
        "scale",
        "zero_point",
        "pred",
        "pred",
        "t3",
        "pred",
        "pred",
        "p",
        "im0",
        "frame",
        "p",
        "im0",
        "frame",
        "p",
        "save_path",
        "txt_path",
        "gn",
        "imc",
        "annotator",
        "det",
        "n",
        "xywh",
        "line",
        "c",
        "label",
        "msg",
        "msg",
        "im0",
        "vid_path",
        "i",
        "fps",
        "w",
        "h",
        "fps",
        "w",
        "h",
        "vid_writer",
        "i",
        "t",
        "s",
        "parser",
        "opt",
        "opt"
    ],
    "comments": [
        "YOLOv5 🚀 by Ultralytics, GPL-3.0 license",
        "Variables",
        "YOLOv5 root directory",
        "add ROOT to PATH",
        "relative",
        "model.pt path(s)",
        "file/dir/URL/glob, 0 for webcam",
        "inference size (pixels)",
        "confidence threshold",
        "NMS IOU threshold",
        "maximum detections per image",
        "cuda device, i.e. 0 or 0,1,2,3 or cpu",
        "show results",
        "save results to *.txt",
        "save confidences in --save-txt labels",
        "save cropped prediction boxes",
        "do not save images/videos",
        "filter by class: --class 0, or --class 0 2 3",
        "class-agnostic NMS",
        "augmented inference",
        "visualize features",
        "update all models",
        "save results to project/name",
        "save results to project/name",
        "existing project/name ok, do not increment",
        "bounding box thickness (pixels)",
        "hide labels",
        "hide confidences",
        "use FP16 half-precision inference",
        "use OpenCV DNN for ONNX inference",
        "save inference images",
        "download",
        "Directories",
        "increment run",
        "make dir",
        "Initialize",
        "half precision only supported on CUDA",
        "Load model",
        "check weights have acceptable suffix",
        "backend booleans",
        "assign defaults",
        "model stride",
        "get class names",
        "to FP16",
        "second-stage classifier",
        "initialize",
        "TensorFlow models",
        "https://www.tensorflow.org/guide/migrate#a_graphpb_or_graphpbtxt",
        "wrapped import",
        "https://www.tensorflow.org/lite/guide/python#install_tensorflow_lite_for_python",
        "install libedgetpu https://coral.ai/software/#edgetpu-runtime",
        "load TFLite model",
        "allocate",
        "inputs",
        "outputs",
        "is TFLite quantized uint8 model",
        "check image size",
        "Dataloader",
        "set True to speed up constant image size inference",
        "batch_size",
        "batch_size",
        "Run inference",
        "run once",
        "uint8 to fp16/32",
        "0 - 255 to 0.0 - 1.0",
        "expand for batch dim",
        "Inference",
        "tensorflow model (tflite, pb, saved_model)",
        "image in numpy",
        "de-scale",
        "re-scale",
        "x",
        "y",
        "w",
        "h",
        "NMS",
        "Second-stage classifier (optional)",
        "Process predictions",
        "per image",
        "batch_size >= 1",
        "to Path",
        "img.jpg",
        "img.txt",
        "print string",
        "normalization gain whwh",
        "for save_crop",
        "Rescale boxes from img_size to im0 size",
        "Print results",
        "detections per class",
        "add to string",
        "Write results",
        "Write to file",
        "normalized xywh",
        "label format",
        "Add bbox to image",
        "integer class",
        "Print time (inference-only)",
        "Stream results",
        "1 millisecond",
        "Save results (image with detections)",
        "'video' or 'stream'",
        "new video",
        "release previous video writer",
        "video",
        "stream",
        "Con el método send, enviamos el mensaje",
        "Print results",
        "speeds per image",
        "update model (to fix SourceChangeWarning)",
        "expand"
    ],
    "docstrings": [
        "\"\"\"\nRun inference on images, videos, directories, streams, etc.\n\nUsage:\n    $ python path/to/detect.py --weights yolov5s.pt --source 0  # webcam\n                                                             img.jpg  # image\n                                                             vid.mp4  # video\n                                                             path/  # directory\n                                                             path/*.jpg  # glob\n                                                             'https://youtu.be/Zgi9g1ksQHc'  # YouTube\n                                                             'rtsp://example.com/media.mp4'  # RTSP, RTMP, HTTP stream\n\"\"\""
    ],
    "functions": [
        "run",
        "wrap_frozen_graph",
        "parse_opt",
        "main"
    ],
    "classes": []
}