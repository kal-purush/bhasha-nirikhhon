{
    "identifiers": [
        "software",
        "amazon",
        "smithy",
        "utils",
        "java",
        "util",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "LinkedHashMap",
        "java",
        "util",
        "LinkedHashSet",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "BuilderRef",
        "Collections",
        "unmodifiableMap",
        "Collections",
        "emptyMap",
        "LinkedHashMap",
        "LinkedHashMap",
        "Collections",
        "unmodifiableMap",
        "Collections",
        "emptyMap",
        "Collections",
        "unmodifiableList",
        "Collections",
        "emptyList",
        "Collections",
        "unmodifiableSet",
        "Collections",
        "emptySet",
        "LinkedHashSet",
        "LinkedHashSet",
        "Collections",
        "unmodifiableSet",
        "Collections",
        "emptySet"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.",
        "* Manages the creation, copying, and reuse of values created by builders.\n *\n * <p>BuilderRef manages the state of a mutable value contained in a builder.\n * It ensures that things like arrays built up in a builder can be used\n * directly in objects being built without copies, and it allows the builder\n * to be reused without mutating previously built objects.\n *\n * <p>Smithy uses lots of builders to build up immutable objects. To make an\n * immutable object in Java, you need to make defensive copies of things like\n * lists, sets, and maps, but doing that for every single one of these types\n * in builders results in lots of copies. One option is to just use the lists\n * et al contained in builders directly in the built objects, but that runs the\n * risk of the builder being further mutated and thus mutating the object.\n * Another option is to clear out the state of the builder and give \"ownership\"\n * of lists et al to built objects, but that means builders can't easily be\n * used to build up multiple objects (and while that rare, it's a use case that\n * probably *should* work, and always has worked in Smithy).\n *\n * <p>BuilderRef creates the value if needed when the builder needs to mutate\n * the wrapped value (see {@link #get}. It creates an immutable copy of the value\n * when {@link #copy} is called, and an immutable \"borrowed\" reference to the\n * copied value is maintained in the reference. This borrowed copy can be queried\n * using {@link #peek}, but it can't be mutated. If the reference only has a\n * borrowed value but attempts to call {@link #get}, then a copy of the borrowed\n * value is created and returned from {@code get()}.\n *\n * @param <T> Type of value being created.",
        "* Gets a mutable {@code T} from the reference, creating one if needed.\n     *\n     * <p>Subsequent calls to {@link #hasValue()} will return true after\n     * this method is called.\n     *\n     * @return Returns a mutable {@code T} value.",
        "* Gets an immutable {@code T} from the reference, reusing borrowed\n     * values if possible, and creating owned values if needed.\n     *\n     * <p>Attempting to mutate the provided value <em>should</em> fail\n     * at runtime, but even if it doesn't, doing so could inadvertently\n     * mutate previously built objects.\n     *\n     * <p>Subsequent calls to {@link #hasValue()} may or may not return true\n     * after this method is called.\n     *\n     * @return Returns an immutable peeked {@code T} value.",
        "* Creates an immutable copy of {@code T}.\n     *\n     * <p>Subsequent calls to {@link #hasValue()} may or may not return true\n     * after this method is called.\n     *\n     * @return Returns the copied immutable value.",
        "* Checks if the reference currently has a borrowed or owned value.\n     *\n     * <p>This method does not check if the contained value is considered\n     * empty. This method only returns true if the reference contains any\n     * kind of previously built value. This might be useful for builder\n     * methods that attempt to remove values from the contained object.\n     * If there is no contained object, then there's no need to create\n     * one just to remove a value from an empty container.\n     *\n     * @return Returns true if the reference contains a value of any kind.",
        "* Removes any borrowed or owned values from the reference.\n     *\n     * <p>Subsequent calls to {@link #hasValue()} will return false after\n     * this method is called.",
        "* Creates a builder reference to an unordered map.\n     *\n     * @param <K> Type of key of the map.\n     * @param <V> Type of value of the map.\n     * @return Returns the created map.",
        "* Creates a builder reference to a ordered map.\n     *\n     * @param <K> Type of key of the map.\n     * @param <V> Type of value of the map.\n     * @return Returns the created map.",
        "* Creates a builder reference to a list.\n     *\n     * @param <T> Type of value in the list.\n     * @return Returns the created list.",
        "* Creates a builder reference to an unordered set.\n     *\n     * @param <T> Type of value in the set.\n     * @return Returns the created set.",
        "* Creates a builder reference to an ordered set.\n     *\n     * @param <T> Type of value in the set.\n     * @return Returns the created set."
    ],
    "functions": [
        "T",
        "get",
        "T",
        "peek",
        "T",
        "copy",
        "hasValue",
        "clear",
        "forUnorderedMap",
        "forOrderedMap",
        "forList",
        "forUnorderedSet",
        "forOrderedSet"
    ],
    "classes": []
}