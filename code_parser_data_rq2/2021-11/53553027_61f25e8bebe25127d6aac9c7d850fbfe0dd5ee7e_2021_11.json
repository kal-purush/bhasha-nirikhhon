{
    "identifiers": [
        "grpc",
        "pytest",
        "kubernetes",
        "client",
        "rest",
        "ApiException",
        "settings",
        "TEST_DATA",
        "DEPLOYMENTS",
        "suite",
        "custom_assertions",
        "assert_event_starts_with_text_and_contains_errors",
        "assert_grpc_entries_exist",
        "assert_proxy_entries_do_not_exist",
        "assert_proxy_entries_exist",
        "suite",
        "custom_resources_utils",
        "read_custom_resource",
        "suite",
        "grpc",
        "helloworld_pb2",
        "HelloRequest",
        "suite",
        "grpc",
        "helloworld_pb2_grpc",
        "GreeterStub",
        "suite",
        "resources_utils",
        "create_example_app",
        "wait_until_all_pods_are_ready",
        "delete_common_app",
        "create_secret_from_yaml",
        "replace_configmap_from_yaml",
        "delete_items_from_yaml",
        "get_first_pod_name",
        "get_events",
        "suite",
        "ssl_utils",
        "get_certificate",
        "suite",
        "vs_vsr_resources_utils",
        "get_vs_nginx_template_conf",
        "patch_v_s_route_from_yaml",
        "suite",
        "resources_utils",
        "wait_before_test",
        "pytest",
        "fixture",
        "scope",
        "request",
        "kube_apis",
        "ingress_controller_prerequisites",
        "test_namespace",
        "request",
        "param",
        "get",
        "TEST_DATA",
        "replace_configmap_from_yaml",
        "kube_apis",
        "v1",
        "ingress_controller_prerequisites",
        "config_map",
        "ingress_controller_prerequisites",
        "cm_source",
        "request",
        "param",
        "get",
        "create_example_app",
        "kube_apis",
        "app_name",
        "test_namespace",
        "wait_until_all_pods_are_ready",
        "kube_apis",
        "v1",
        "test_namespace",
        "ex",
        "replace_configmap_from_yaml",
        "kube_apis",
        "v1",
        "ingress_controller_prerequisites",
        "config_map",
        "ingress_controller_prerequisites",
        "DEPLOYMENTS",
        "delete_common_app",
        "kube_apis",
        "app_name",
        "test_namespace",
        "pytest",
        "fail",
        "replace_configmap_from_yaml",
        "kube_apis",
        "v1",
        "ingress_controller_prerequisites",
        "config_map",
        "ingress_controller_prerequisites",
        "DEPLOYMENTS",
        "delete_common_app",
        "kube_apis",
        "app_name",
        "test_namespace",
        "request",
        "addfinalizer",
        "fin",
        "pytest",
        "mark",
        "vsr",
        "pytest",
        "mark",
        "smoke",
        "pytest",
        "mark",
        "parametrize",
        "indirect",
        "kube_apis",
        "v_s_route_setup",
        "TEST_DATA",
        "patch_v_s_route_from_yaml",
        "kube_apis",
        "custom_objects",
        "v_s_route_setup",
        "route_m",
        "name",
        "patch_src",
        "v_s_route_setup",
        "route_m",
        "kube_apis",
        "v_s_route_setup",
        "TEST_DATA",
        "create_secret_from_yaml",
        "kube_apis",
        "v1",
        "v_s_route_setup",
        "route_m",
        "src_sec_yaml",
        "create_secret_from_yaml",
        "kube_apis",
        "v1",
        "v_s_route_setup",
        "route_s",
        "src_sec_yaml",
        "wait_before_test",
        "pytest",
        "mark",
        "parametrize",
        "indirect",
        "kube_apis",
        "ingress_controller_prerequisites",
        "crd_ingress_controller",
        "backend_setup",
        "v_s_route_setup",
        "deploy_tls_secrets",
        "kube_apis",
        "v_s_route_setup",
        "get_first_pod_name",
        "kube_apis",
        "v1",
        "ingress_controller_prerequisites",
        "get_vs_nginx_template_conf",
        "kube_apis",
        "v1",
        "v_s_route_setup",
        "v_s_route_setup",
        "vs_name",
        "ic_pod_name",
        "ingress_controller_prerequisites",
        "assert_proxy_entries_do_not_exist",
        "config",
        "assert_grpc_entries_exist",
        "config",
        "pytest",
        "mark",
        "parametrize",
        "indirect",
        "kube_apis",
        "ingress_controller_prerequisites",
        "crd_ingress_controller",
        "backend_setup",
        "v_s_route_setup",
        "get_first_pod_name",
        "kube_apis",
        "v1",
        "ingress_controller_prerequisites",
        "patch_v_s_route_from_yaml",
        "kube_apis",
        "custom_objects",
        "v_s_route_setup",
        "route_m",
        "name",
        "TEST_DATA",
        "v_s_route_setup",
        "route_m",
        "wait_before_test",
        "get_vs_nginx_template_conf",
        "kube_apis",
        "v1",
        "v_s_route_setup",
        "v_s_route_setup",
        "vs_name",
        "ic_pod_name",
        "ingress_controller_prerequisites",
        "config",
        "pytest",
        "mark",
        "parametrize",
        "indirect",
        "kube_apis",
        "ingress_controller_prerequisites",
        "crd_ingress_controller",
        "backend_setup",
        "v_s_route_setup",
        "patch_v_s_route_from_yaml",
        "kube_apis",
        "custom_objects",
        "v_s_route_setup",
        "route_m",
        "name",
        "TEST_DATA",
        "v_s_route_setup",
        "route_m",
        "wait_before_test",
        "v_s_route_setup",
        "route_m",
        "v_s_route_setup",
        "route_m",
        "name",
        "text_m",
        "get_events",
        "kube_apis",
        "v1",
        "v_s_route_setup",
        "route_m",
        "assert_event_starts_with_text_and_contains_errors",
        "vsr_m_event_text",
        "vsr_m_events",
        "invalid_fields_m",
        "patch_valid_vs_route",
        "kube_apis",
        "v_s_route_setup",
        "wait_before_test",
        "pytest",
        "mark",
        "parametrize",
        "indirect",
        "kube_apis",
        "ingress_controller_prerequisites",
        "crd_ingress_controller",
        "backend_setup",
        "v_s_route_setup",
        "patch_v_s_route_from_yaml",
        "kube_apis",
        "custom_objects",
        "v_s_route_setup",
        "route_m",
        "name",
        "TEST_DATA",
        "v_s_route_setup",
        "route_m",
        "wait_before_test",
        "get_first_pod_name",
        "kube_apis",
        "v1",
        "ingress_controller_prerequisites",
        "get_vs_nginx_template_conf",
        "kube_apis",
        "v1",
        "v_s_route_setup",
        "v_s_route_setup",
        "vs_name",
        "ic_pod_name",
        "ingress_controller_prerequisites",
        "assert_proxy_entries_exist",
        "config",
        "assert_grpc_entries_exist",
        "config"
    ],
    "literals": [
        "\"function\"",
        "\"app_type\"",
        "\"------------------------- Replace ConfigMap with HTTP2 -------------------------\"",
        "f\"{TEST_DATA}/virtual-server-route-grpc/nginx-config.yaml\"",
        "'metadata'",
        "'name'",
        "\"------------------------- Deploy App -----------------------------\"",
        "\"app_type\"",
        "\"Failed to complete setup, cleaning up..\"",
        "'metadata'",
        "'name'",
        "f\"{DEPLOYMENTS}/common/nginx-config.yaml\"",
        "f\"VSR GRPC setup failed\"",
        "\"Clean up:\"",
        "'metadata'",
        "'name'",
        "f\"{DEPLOYMENTS}/common/nginx-config.yaml\"",
        "'crd_ingress_controller, v_s_route_setup'",
        "\"type\"",
        "\"complete\"",
        "\"extra_args\"",
        "f\"-enable-custom-resources\"",
        "\"example\"",
        "\"virtual-server-route-grpc\"",
        "f\"{TEST_DATA}/virtual-server-route-grpc/route-multiple.yaml\"",
        "\"------------------------- Deploy Secrets -----------------------------\"",
        "f\"{TEST_DATA}/virtual-server-route-grpc/tls-secret.yaml\"",
        "\"backend_setup\"",
        "\"app_type\"",
        "\"grpc-vs\"",
        "\"\\nStep 1: assert config\"",
        "\"backend_setup\"",
        "\"app_type\"",
        "\"grpc-vs\"",
        "f\"{TEST_DATA}/virtual-server-route-grpc/route-updated.yaml\"",
        "'grpc_pass grpcs://'",
        "\"backend_setup\"",
        "\"app_type\"",
        "\"grpc-vs\"",
        "\"\\nTest 1: Wrong type\"",
        "f\"{TEST_DATA}/virtual-server-route-grpc/route-invalid-type.yaml\"",
        "f\"{v_s_route_setup.route_m.namespace}/{v_s_route_setup.route_m.name}\"",
        "f\"VirtualServerRoute {text_m} was rejected with error:\"",
        "\"spec.upstreams[0].type\"",
        "\"spec.upstreams[1].type\"",
        "\"backend_setup\"",
        "\"app_type\"",
        "\"grpc-vs-mixed\"",
        "f\"{TEST_DATA}/virtual-server-route-grpc/route-multiple-mixed.yaml\""
    ],
    "variables": [
        "app_name",
        "cm_source",
        "app_name",
        "patch_src",
        "src_sec_yaml",
        "ic_pod_name",
        "config",
        "ic_pod_name",
        "config",
        "text_m",
        "vsr_m_event_text",
        "invalid_fields_m",
        "vsr_m_events",
        "ic_pod_name",
        "config"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    Replace the ConfigMap and deploy the secret.\n\n    :param request: pytest fixture\n    :param kube_apis: client apis\n    :param test_namespace:\n    \"\"\"",
        "\"\"\"\n        Function to revert vs deployment to valid state\n        \"\"\"",
        "\"\"\"\n        Function to deploy secrets to the vs route namespaces.\n        \"\"\""
    ],
    "functions": [
        "backend_setup",
        "fin",
        "patch_valid_vs_route",
        "deploy_tls_secrets",
        "test_config_after_setup",
        "test_config_after_enable_tls",
        "test_validation_flow",
        "test_mixed_config"
    ],
    "classes": [
        "TestVirtualServerRouteGrpc"
    ]
}