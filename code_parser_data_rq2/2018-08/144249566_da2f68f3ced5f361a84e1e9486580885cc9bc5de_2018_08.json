{
    "identifiers": [
        "cheerio",
        "request",
        "sqlite3",
        "moment",
        "sqlite3",
        "resolve",
        "reject",
        "sqlite3",
        "database",
        "database",
        "resolve",
        "database",
        "database",
        "developmentApplication",
        "resolve",
        "reject",
        "database",
        "sqlStatement",
        "developmentApplication",
        "developmentApplication",
        "developmentApplication",
        "developmentApplication",
        "developmentApplication",
        "developmentApplication",
        "developmentApplication",
        "error",
        "row",
        "error",
        "error",
        "reject",
        "error",
        "developmentApplication",
        "developmentApplication",
        "developmentApplication",
        "developmentApplication",
        "developmentApplication",
        "developmentApplication",
        "sqlStatement",
        "resolve",
        "row",
        "minimum",
        "maximum",
        "maximum",
        "minimum",
        "minimum",
        "initializeDatabase",
        "DevelopmentApplicationsMainUrl",
        "request",
        "request",
        "DevelopmentApplicationsMainUrl",
        "jar",
        "cheerio",
        "body",
        "DevelopmentApplicationsEnquiryUrl",
        "body",
        "request",
        "DevelopmentApplicationsEnquiryUrl",
        "jar",
        "$",
        "cheerio",
        "body",
        "body",
        "main",
        "error",
        "error"
    ],
    "literals": [
        "\"use strict\"",
        "\"cheerio\"",
        "\"request-promise-native\"",
        "\"sqlite3\"",
        "\"moment\"",
        "\"https://epathway.wtcc.sa.gov.au/ePathway/Production/Web/default.aspx\"",
        "\"https://epathway.wtcc.sa.gov.au/ePathway/Production/Web/GeneralEnquiry/EnquiryLists.aspx?ModuleCode=LAP\"",
        "\"mailto:csu@wtcc.sa.gov.au\"",
        "\"data.sqlite\"",
        "\"create table if not exists [data] ([council_reference] text primary key, [address] text, [description] text, [info_url] text, [comment_url] text, [date_scraped] text, [date_received] text, [on_notice_from] text, [on_notice_to] text)\"",
        "\"insert or ignore into [data] values (?, ?, ?, ?, ?, ?, ?, ?, ?)\"",
        "Inserted: application \\\"${developmentApplication.applicationNumber}\\\" with address \\\"${developmentApplication.address}\\\" and reason \\\"${developmentApplication.reason}\\\" into the database.",
        "Skipped: application \\\"${developmentApplication.applicationNumber}\\\" with address \\\"${developmentApplication.address}\\\" and reason \\\"${developmentApplication.reason}\\\" because it was already present in the database.",
        "Retrieving page: ${DevelopmentApplicationsMainUrl}",
        "Retrieving page: ${DevelopmentApplicationsEnquiryUrl}",
        "\"Complete.\""
    ],
    "variables": [
        "DevelopmentApplicationsMainUrl",
        "DevelopmentApplicationsEnquiryUrl",
        "CommentUrl",
        "database",
        "sqlStatement",
        "database",
        "jar",
        "body",
        "$"
    ],
    "comments": [
        "Parses the development applications at the South Australian City of West Torrens web site and",
        "places them in a database.",
        "",
        "In each VSCode session: to automatically compile this TypeScript script into JavaScript whenever",
        "the TypeScript is changed and saved, press Ctrl+Shift+B and select \"tsc:watch - tsconfig.json\".",
        "This starts a task that watches for changes to the TypeScript script.",
        "",
        "Michael Bone",
        "5th August 2018",
        "Sets up an sqlite database.",
        "Inserts a row in the database if it does not already exist.",
        "releases any locks",
        "Gets a random integer in the specified range: [minimum, maximum).",
        "Parses the development applications.",
        "Ensure that the database exists.",
        "Retrieve the main page.",
        "Retrieve the enquiry page.",
        "// Find all CSV URLs on the main page.",
        "let urls: string[] = [];",
        "for (let element of $(\"a.resource-url-analytics\").get())",
        "if (!urls.some(url => url === element.attribs.href))",
        "urls.push(element.attribs.href);",
        "if (urls.length === 0) {",
        "console.log(`No CSV files to parse were found on the page: ${DevelopmentApplicationsUrl}`);",
        "return;",
        "}",
        "// Retrieve two of the development application CSV files (the most recent and one other random",
        "// selection).  Retrieving all development application CSV files may otherwise use too much",
        "// memory and result in morph.io terminating the current process.",
        "let selectedUrls = [ urls.pop() ];",
        "if (urls.length >= 1)",
        "selectedUrls.push(urls[getRandom(0, urls.length)]);",
        "for (let url of selectedUrls) {",
        "console.log(`Retrieving: ${url}`);",
        "let body = await request({ url: url });",
        "let rows = parse(body);",
        "if (rows.length === 0)",
        "continue;",
        "// Determine which columns contain the required development application information.",
        "let applicationNumberColumnIndex = -1;",
        "let receivedDateColumnIndex = -1;",
        "let reasonColumnIndex = -1;",
        "let addressColumnIndex1 = -1;",
        "let addressColumnIndex2 = -1;",
        "for (let columnIndex = 0; columnIndex < rows[0].length; columnIndex++) {",
        "let cell: string = rows[0][columnIndex];",
        "if (cell === \"ApplicationNumber\")",
        "applicationNumberColumnIndex = columnIndex;",
        "else if (cell === \"LodgementDate\")",
        "receivedDateColumnIndex = columnIndex;",
        "else if (cell === \"ApplicationDesc\")",
        "reasonColumnIndex = columnIndex;",
        "else if (cell === \"PropertyAddress\")",
        "addressColumnIndex1 = columnIndex;",
        "else if (cell === \"PropertySuburbPostCode\")",
        "addressColumnIndex2 = columnIndex;",
        "}",
        "if (applicationNumberColumnIndex < 0 || (addressColumnIndex1 < 0 && addressColumnIndex2 < 0)) {",
        "console.log(`Could not parse any development applications from ${url}.`);",
        "continue;",
        "}",
        "// Extract the development application information.",
        "let developmentApplications = [];",
        "for (let rowIndex = 1; rowIndex < rows.length; rowIndex++) {",
        "let row = rows[rowIndex];",
        "let applicationNumber = row[applicationNumberColumnIndex].trim();",
        "let address1 = (addressColumnIndex1 < 0) ? \"\" : row[addressColumnIndex1].trim();",
        "let address2 = (addressColumnIndex2 < 0) ? \"\" : row[addressColumnIndex2].trim();",
        "let reason = (reasonColumnIndex < 0) ? \"\" : row[reasonColumnIndex].trim();",
        "let receivedDate = moment(((receivedDateColumnIndex < 0) ? null : row[receivedDateColumnIndex].trim()), \"D/MM/YYYY HH:mm:ss A\", true);  // allows the leading zero of the day to be omitted",
        "let address = address1 + ((address1 !== \"\" && address2 !== \"\") ? \" \" : \"\") + address2;",
        "address = address.trim().replace(/\\s\\s+/g, \" \");  // reduce multiple consecutive spaces in the address to a single space",
        "if (applicationNumber !== \"\" && address !== \"\")",
        "await insertRow(database, {",
        "applicationNumber: applicationNumber,",
        "address: address,",
        "reason: reason,",
        "informationUrl: url,",
        "commentUrl: CommentUrl,",
        "scrapeDate: moment().format(\"YYYY-MM-DD\"),",
        "receivedDate: receivedDate.isValid() ? receivedDate.format(\"YYYY-MM-DD\") : \"\"",
        "});",
        "}",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "initializeDatabase",
        "insertRow",
        "getRandom",
        "main"
    ],
    "classes": []
}