{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "os",
        "optparse",
        "sys",
        "shutil",
        "json",
        "uuid",
        "subprocess",
        "copy",
        "deepcopy",
        "collections",
        "Sequence",
        "ansible",
        "plugins",
        "lookup",
        "LookupBase",
        "ansible",
        "module_utils",
        "six",
        "StringIO",
        "iteritems",
        "string_types",
        "PY3",
        "ansible",
        "utils",
        "path",
        "unfrackpath",
        "makedirs_safe",
        "ansible",
        "errors",
        "AnsibleError",
        "display",
        "ImportError",
        "ansible",
        "utils",
        "display",
        "Display",
        "Display",
        "pyang",
        "plugin",
        "error",
        "pyang",
        "statements",
        "pyang",
        "util",
        "unique_prefixes",
        "pyang",
        "types",
        "Decimal64Value",
        "ImportError",
        "AnsibleError",
        "LookupBase",
        "terms",
        "variables",
        "kwargs",
        "terms",
        "IndexError",
        "AnsibleError",
        "os",
        "path",
        "isfile",
        "yang_file",
        "AnsibleError",
        "yang_file",
        "kwargs",
        "pop",
        "kwargs",
        "pop",
        "path",
        "search_path",
        "split",
        "path",
        "os",
        "path",
        "isdir",
        "path",
        "AnsibleError",
        "path",
        "kwargs",
        "pop",
        "kwargs",
        "pop",
        "doctype",
        "valid_doctype",
        "AnsibleError",
        "path",
        "join",
        "valid_doctype",
        "find_file_in_path",
        "deepcopy",
        "sys",
        "argv",
        "StringIO",
        "unfrackpath",
        "YANG_SPEC_DIR_PATH",
        "makedirs_safe",
        "plugindir",
        "os",
        "path",
        "join",
        "YANG_SPEC_DIR_PATH",
        "uuid",
        "uuid4",
        "os",
        "path",
        "join",
        "YANG_SPEC_DIR_PATH",
        "uuid",
        "uuid4",
        "os",
        "path",
        "join",
        "YANG_SPEC_DIR_PATH",
        "uuid",
        "uuid4",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "tree_file_path",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "xml_file_path",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "json_file_path",
        "pyang_exec_path",
        "xml_file_path",
        "yang_file",
        "search_path",
        "doctype",
        "sample_xml_skeleton_cmd",
        "append",
        "annotations",
        "sample_xml_skeleton_cmd",
        "append",
        "subprocess",
        "check_output",
        "join",
        "sample_xml_skeleton_cmd",
        "stderr",
        "subprocess",
        "STDOUT",
        "shell",
        "SystemExit",
        "e",
        "shutil",
        "rmtree",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "YANG_SPEC_DIR_PATH",
        "ignore_errors",
        "AnsibleError",
        "e",
        "sys",
        "stdout",
        "getvalue",
        "err",
        "err",
        "lower",
        "shutil",
        "rmtree",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "YANG_SPEC_DIR_PATH",
        "ignore_errors",
        "AnsibleError",
        "err",
        "sys",
        "stdout",
        "flush",
        "sys",
        "stderr",
        "flush",
        "pyang_exec_path",
        "tree_file_path",
        "yang_file",
        "search_path",
        "subprocess",
        "check_output",
        "join",
        "tree_cmd",
        "stderr",
        "subprocess",
        "STDOUT",
        "shell",
        "SystemExit",
        "e",
        "shutil",
        "rmtree",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "YANG_SPEC_DIR_PATH",
        "ignore_errors",
        "AnsibleError",
        "e",
        "sys",
        "stdout",
        "getvalue",
        "err",
        "err",
        "lower",
        "shutil",
        "rmtree",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "YANG_SPEC_DIR_PATH",
        "ignore_errors",
        "AnsibleError",
        "err",
        "sys",
        "stdout",
        "flush",
        "sys",
        "stderr",
        "flush",
        "os",
        "path",
        "join",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "abspath",
        "shutil",
        "copy",
        "plugin_file_src",
        "plugindir",
        "pyang_exec_path",
        "plugindir",
        "json_file_path",
        "yang_file",
        "search_path",
        "doctype",
        "sample_json_skeleton_cmd",
        "append",
        "subprocess",
        "check_output",
        "join",
        "sample_json_skeleton_cmd",
        "stderr",
        "subprocess",
        "STDOUT",
        "shell",
        "SystemExit",
        "e",
        "shutil",
        "rmtree",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "YANG_SPEC_DIR_PATH",
        "ignore_errors",
        "AnsibleError",
        "e",
        "sys",
        "stdout",
        "getvalue",
        "err",
        "err",
        "lower",
        "shutil",
        "rmtree",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "YANG_SPEC_DIR_PATH",
        "ignore_errors",
        "AnsibleError",
        "err",
        "open",
        "tree_file_path",
        "f",
        "f",
        "read",
        "open",
        "xml_file_path",
        "f",
        "f",
        "read",
        "open",
        "json_file_path",
        "f",
        "json",
        "load",
        "f",
        "shutil",
        "rmtree",
        "plugindir",
        "ignore_errors",
        "res",
        "append",
        "output",
        "res",
        "filename",
        "os",
        "environ",
        "split",
        "os",
        "pathsep",
        "os",
        "path",
        "dirname",
        "sys",
        "argv",
        "dirname",
        "paths",
        "os",
        "path",
        "join",
        "dirname",
        "filename",
        "os",
        "path",
        "isfile",
        "fullpath",
        "fullpath",
        "plugin",
        "register_plugin",
        "SampleJSONSkeletonPlugin",
        "val",
        "isinstance",
        "val",
        "Sequence",
        "val",
        "val",
        "val",
        "plugin",
        "PyangPlugin",
        "optparser",
        "optparse",
        "make_option",
        "dest",
        "help",
        "optparse",
        "make_option",
        "action",
        "dest",
        "help",
        "optparser",
        "add_option_group",
        "g",
        "add_options",
        "optlist",
        "fmts",
        "ctx",
        "ctx",
        "modules",
        "fd",
        "epos",
        "etag",
        "eargs",
        "ctx",
        "errors",
        "error",
        "is_error",
        "error",
        "err_level",
        "etag",
        "error",
        "EmitError",
        "ctx",
        "opts",
        "sample_defaults",
        "ctx",
        "opts",
        "doctype",
        "doctype",
        "error",
        "EmitError",
        "doctype",
        "modules",
        "process_children",
        "tree",
        "json",
        "dump",
        "tree",
        "fd",
        "indent",
        "node",
        "parent",
        "pmod",
        "ch",
        "node",
        "i_children",
        "doctype",
        "ch",
        "i_config",
        "ch",
        "keyword",
        "ch",
        "keyword",
        "process_children",
        "ch",
        "parent",
        "pmod",
        "ch",
        "i_module",
        "i_modulename",
        "pmod",
        "pmod",
        "ch",
        "arg",
        "ch",
        "i_module",
        "i_modulename",
        "nmod",
        "ch",
        "arg",
        "ch",
        "keyword",
        "process_children",
        "ch",
        "ndata",
        "nmod",
        "ndata",
        "ch",
        "keyword",
        "ndata",
        "append",
        "process_children",
        "ch",
        "ndata",
        "nmod",
        "ndata",
        "ch",
        "keyword",
        "ch",
        "arg",
        "ch",
        "i_default",
        "defaults",
        "ch",
        "i_default",
        "ch",
        "keyword",
        "to_list",
        "ch",
        "i_default",
        "defaults",
        "ch",
        "i_default",
        "ndata",
        "arg",
        "i_type_spec",
        "i_target_node",
        "i_typedef",
        "i_typedef",
        "node",
        "search_one",
        "arg",
        "arg",
        "search_one",
        "arg",
        "arg",
        "arg",
        "base_type",
        "x",
        "x",
        "i_type_spec",
        "types",
        "arg"
    ],
    "literals": [
        "\"pyang is not installed\"",
        "\"~/.ansible/tmp/yang_spec\"",
        "'the yang file must be specified'",
        "'%s invalid file path'",
        "'search_path'",
        "''",
        "'annotations'",
        "''",
        "':'",
        "''",
        "'%s is invalid directory path'",
        "'defaults'",
        "'doctype'",
        "'config'",
        "'config'",
        "'data'",
        "'docttpe value %s is invalid, valid value are %s'",
        "', '",
        "'pyang'",
        "'%s.%s'",
        "'txt'",
        "'%s.%s'",
        "'xml'",
        "'%s.%s'",
        "'json'",
        "'-f'",
        "'sample-xml-skeleton'",
        "'-o'",
        "'-p'",
        "\"--sample-xml-skeleton-doctype\"",
        "\"--lax-quote-checks\"",
        "\"--sample-xml-skeleton-defaults\"",
        "\"--sample-xml-skeleton-annotations\"",
        "' '",
        "'Error while generating skeleton xml file: %s'",
        "'error'",
        "'Error while generating skeleton xml file: %s'",
        "'-f'",
        "'tree'",
        "'-o'",
        "'-p'",
        "\"--lax-quote-checks\"",
        "' '",
        "'Error while generating tree file: %s'",
        "'error'",
        "'Error while generating tree file: %s'",
        "'yang_spec.py'",
        "'--plugindir'",
        "'-f'",
        "'sample-json-skeleton'",
        "'-o'",
        "'-p'",
        "'--lax-quote-checks'",
        "'--sample-json-skeleton-doctype'",
        "\"--sample-json-skeleton-defaults\"",
        "' '",
        "'Error while generating skeleton json file: %s'",
        "'error'",
        "'Error while generating tree json: %s'",
        "'r'",
        "'tree'",
        "'r'",
        "'xml_skeleton'",
        "'r'",
        "'json_skeleton'",
        "'PATH'",
        "\"--sample-json-skeleton-doctype\"",
        "\"doctype\"",
        "\"data\"",
        "\"Type of sample JSON document \"",
        "\"(data or config).\"",
        "\"--sample-json-skeleton-defaults\"",
        "\"store_true\"",
        "\"sample_defaults\"",
        "\"Insert data with defaults values.\"",
        "\"Sample-json-skeleton output specific options\"",
        "'sample-json-skeleton'",
        "\"JTOX plugin needs a valid module\"",
        "\"config\"",
        "\"data\"",
        "\"Unsupported document type: %s\"",
        "'config'",
        "\"rpc\"",
        "\"notification\"",
        "\"choice\"",
        "\"case\"",
        "\"%s:%s\"",
        "\"container\"",
        "\"list\"",
        "\"leaf\"",
        "'keepalive-interval'",
        "\"\"",
        "\"leaf-list\"",
        "\"\"",
        "\"leafref\"",
        "\"type\"",
        "\"decimal64\"",
        "\"fraction-digits\"",
        "\"union\""
    ],
    "variables": [
        "__metaclass__",
        "DOCUMENTATION",
        "EXAMPLES",
        "RETURN",
        "display",
        "YANG_SPEC_DIR_PATH",
        "res",
        "output",
        "yang_file",
        "search_path",
        "annotations",
        "doctype",
        "valid_doctype",
        "pyang_exec_path",
        "saved_arg",
        "sys",
        "stdout",
        "sys",
        "stderr",
        "plugindir",
        "tree_file_path",
        "xml_file_path",
        "json_file_path",
        "tree_file_path",
        "xml_file_path",
        "json_file_path",
        "sample_xml_skeleton_cmd",
        "err",
        "tree_cmd",
        "err",
        "plugin_file_src",
        "sample_json_skeleton_cmd",
        "err",
        "output",
        "output",
        "output",
        "paths",
        "fullpath",
        "optlist",
        "g",
        "multiple_modules",
        "fmts",
        "ctx",
        "implicit_errors",
        "tree",
        "defaults",
        "doctype",
        "nmod",
        "nodename",
        "nmod",
        "nodename",
        "ndata",
        "parent",
        "nodename",
        "ndata",
        "parent",
        "nodename",
        "ndata",
        "ndata",
        "parent",
        "nodename",
        "node",
        "node"
    ],
    "comments": [
        "(c) 2018 Red Hat, Inc.",
        "GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with Ansible.  If not, see <http://www.gnu.org/licenses/>.",
        "fill in the sys args before invoking pyang to retrieve xml skeleton",
        "fill in the sys args before invoking pyang to retrieve tree structure",
        "fill in the sys args before invoking pyang to retrieve json skeleton",
        "Check $PATH first, followed by same directory as sys.argv[0]"
    ],
    "docstrings": [
        "\"\"\"\n    lookup: yang_spec\n    author: Ansible Network\n    version_added: \"2.6\"\n    short_description:  This plugin reads the content of given yang document and generates json and xml\n                        configuration skeleton and a tree structure of yang document.\n    description:\n      - This plugin parses yang document and generates json and xml configuration skeleton and a tree\n        structure of yang document. The tree structure document is as per RFC 8340 which helps to consume\n        the yang document along with json and xml configuration skeleton.\n    options:\n      _terms:\n        description: The path points to the location of the top level yang module which\n        is to be transformed into to Ansible spec.\n        required: True\n      search_path:\n        description:\n          - is a colon C(:) separated list of directories to search for imported yang modules\n            in the yang file mentioned in C(path) option. If the value is not given it will search in\n            the current directory.\n      defaults:\n        description:\n          - This boolean flag indicates if the generated json and xml configuration schema should have\n            fields initialized with default values or not.\n        default: False\n      doctype:\n        description:\n          - Identifies the root node of the configuration skeleton. If value is C(config) only configuration\n            data will be present in skeleton, if value is C(data) both config and state data fields will be present\n            in output.\n        default: config\n        choices: ['config', 'data']\n      annotations:\n        description:\n          - The boolean flag identifies if the xml skeleton should have comments describing the field or not.\n        default: False\n        type: boolean\n\"\"\"",
        "\"\"\"\n- name: Get interface yang config spec without defaults\n  set_fact:\n    interfaces_spec: \"{{ lookup('yang_spec', 'openconfig/public/release/models/interfaces/openconfig-interfaces.yang',\n                            search_path='openconfig/public/release/models:pyang/modules/', default=True, doctype='data') }}\"\n\n- name: Get interface yang spec with defaults and state data\n  set_fact:\n    interfaces_spec: \"{{ lookup('yang_spec', 'openconfig/public/release/models/interfaces/openconfig-interfaces.yang',\n                            search_path='openconfig/public/release/models:pyang/modules/', default=True, doctype='data') }}\"\n\"\"\"",
        "\"\"\"\n  _list:\n    description:\n      - It returns json skeleton configuration schema, xml skeleton schema and tree structure (as per RFC 8340)\n        for given yang schema.\n    type: complex\n    contains:\n      tree:\n        description: The tree representation of yang scehma as per RFC 8340\n        returned: success\n        type: dict\n        sample: |\n            module: openconfig-interfaces\n              +--rw interfaces\n                 +--rw interface* [name]\n                    +--rw name             -> ../config/name\n                    +--rw config\n                    |  +--rw name?            string\n                    |  +--rw type             identityref\n                    |  +--rw mtu?             uint16\n                    |  +--rw loopback-mode?   boolean\n                    |  +--rw description?     string\n                    |  +--rw enabled?         boolean\n                    +--ro state\n                    |  +--ro name?            string\n                    |  +--ro type             identityref\n                    |  +--ro mtu?             uint16\n                    |  +--ro loopback-mode?   boolean\n                    |  +--ro description?     string\n                    |  +--ro enabled?         boolean\n                    |  +--ro ifindex?         uint32\n                    |  +--ro admin-status     enumeration\n                    |  +--ro oper-status      enumeration\n                    |  +--ro last-change?     oc-types:timeticks64\n      json_skeleton:\n        description: The json configuration skeleton generated from yang document\n        returned: success\n        type: dict\n        sample: |\n            {\n                \"openconfig-interfaces:interfaces\": {\n                    \"interface\": [\n                        {\n                            \"hold-time\": {\n                                \"config\": {\n                                    \"down\": \"\",\n                                    \"up\": \"\"\n                                }\n                            },\n                            \"config\": {\n                                \"description\": \"\",\n                                \"type\": \"\",\n                                \"enabled\": \"\",\n                                \"mtu\": \"\",\n                                \"loopback-mode\": \"\",\n                                \"name\": \"\"\n                            },\n                            \"name\": \"\",\n                            \"subinterfaces\": {\n                                \"subinterface\": [\n                                    {\n                                        \"index\": \"\",\n                                        \"config\": {\n                                            \"index\": \"\",\n                                            \"enabled\": \"\",\n                                            \"description\": \"\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n      xml_skeleton:\n        description: The xml configuration skeleton generated from yang document\n        returned: success\n        type: dict\n        sample: |\n            <config xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n              <interfaces xmlns=\"http://openconfig.net/yang/interfaces\">\n                <interface>\n                  <name/>\n                  <config>\n                    <name/>\n                    <type/>\n                    <mtu/>\n                    <loopback-mode></loopback-mode>\n                    <description/>\n                    <enabled>True</enabled>\n                  </config>\n                  <hold-time>\n                    <config>\n                      <up></up>\n                      <down></down>\n                    </config>\n                  </hold-time>\n                  <subinterfaces>\n                    <subinterface>\n                      <index/>\n                      <config>\n                        <index></index>\n                        <description/>\n                        <enabled></enabled>\n                      </config>\n                    </subinterface>\n                  </subinterfaces>\n                </interface>\n              </interfaces>\n            </config>\n\"\"\"",
        "\"\"\"Main control function.\n        \"\"\"",
        "\"\"\"Process all children of `node`, except \"rpc\" and \"notification\".\n        \"\"\"",
        "\"\"\"Return the base type of `type`.\"\"\""
    ],
    "functions": [
        "run",
        "find_file_in_path",
        "pyang_plugin_init",
        "to_list",
        "add_opts",
        "add_output_format",
        "setup_fmt",
        "emit",
        "process_children",
        "base_type"
    ],
    "classes": [
        "LookupModule",
        "SampleJSONSkeletonPlugin"
    ]
}