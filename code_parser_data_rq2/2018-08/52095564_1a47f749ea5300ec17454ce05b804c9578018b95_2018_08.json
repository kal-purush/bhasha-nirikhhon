{
    "identifiers": [
        "net",
        "openid",
        "appauth",
        "android",
        "net",
        "Uri",
        "android",
        "support",
        "annotation",
        "NonNull",
        "android",
        "support",
        "annotation",
        "android",
        "text",
        "TextUtils",
        "android",
        "util",
        "Base64",
        "net",
        "openid",
        "appauth",
        "AuthorizationException",
        "GeneralErrors",
        "org",
        "json",
        "JSONException",
        "org",
        "json",
        "JSONObject",
        "java",
        "util",
        "java",
        "util",
        "KEY_ISSUER",
        "KEY_SUBJECT",
        "KEY_AUDIENCE",
        "KEY_EXPIRATION",
        "KEY_ISSUED_AT",
        "KEY_NONCE",
        "MILLIS_PER_SECOND",
        "TEN_MINUTES_IN_SECONDS",
        "issuer",
        "subject",
        "audience",
        "expiration",
        "issuedAt",
        "nonce",
        "NonNull",
        "issuer",
        "NonNull",
        "subject",
        "NonNull",
        "audience",
        "NonNull",
        "expiration",
        "NonNull",
        "issuedAt",
        "nonce",
        "issuer",
        "issuer",
        "subject",
        "subject",
        "audience",
        "audience",
        "expiration",
        "expiration",
        "issuedAt",
        "issuedAt",
        "nonce",
        "nonce",
        "section",
        "decodedSection",
        "Base64",
        "decode",
        "section",
        "Base64",
        "URL_SAFE",
        "jsonString",
        "decodedSection",
        "jsonString",
        "token",
        "sections",
        "token",
        "split",
        "sections",
        "length",
        "parseJwtSection",
        "sections",
        "claims",
        "parseJwtSection",
        "sections",
        "issuer",
        "JsonUtil",
        "getString",
        "claims",
        "KEY_ISSUER",
        "subject",
        "JsonUtil",
        "getString",
        "claims",
        "KEY_SUBJECT",
        "audience",
        "audience",
        "JsonUtil",
        "getStringList",
        "claims",
        "KEY_AUDIENCE",
        "jsonEx",
        "audience",
        "audience",
        "add",
        "JsonUtil",
        "getString",
        "claims",
        "KEY_AUDIENCE",
        "expiration",
        "claims",
        "getLong",
        "KEY_EXPIRATION",
        "issuedAt",
        "claims",
        "getLong",
        "KEY_ISSUED_AT",
        "nonce",
        "JsonUtil",
        "getStringIfDefined",
        "claims",
        "KEY_NONCE",
        "issuer",
        "subject",
        "audience",
        "expiration",
        "issuedAt",
        "nonce",
        "NonNull",
        "tokenRequest",
        "clock",
        "discoveryDoc",
        "tokenRequest",
        "configuration",
        "discoveryDoc",
        "discoveryDoc",
        "expectedIssuer",
        "discoveryDoc",
        "getIssuer",
        "issuer",
        "equals",
        "expectedIssuer",
        "AuthorizationException",
        "fromTemplate",
        "GeneralErrors",
        "ID_TOKEN_VALIDATION_ERROR",
        "issuerUri",
        "Uri",
        "parse",
        "issuer",
        "issuerUri",
        "getScheme",
        "equals",
        "AuthorizationException",
        "fromTemplate",
        "GeneralErrors",
        "ID_TOKEN_VALIDATION_ERROR",
        "TextUtils",
        "isEmpty",
        "issuerUri",
        "getHost",
        "AuthorizationException",
        "fromTemplate",
        "GeneralErrors",
        "ID_TOKEN_VALIDATION_ERROR",
        "issuerUri",
        "getFragment",
        "issuerUri",
        "getQueryParameterNames",
        "size",
        "AuthorizationException",
        "fromTemplate",
        "GeneralErrors",
        "ID_TOKEN_VALIDATION_ERROR",
        "clientId",
        "tokenRequest",
        "clientId",
        "audience",
        "contains",
        "clientId",
        "AuthorizationException",
        "fromTemplate",
        "GeneralErrors",
        "ID_TOKEN_VALIDATION_ERROR",
        "nowInSeconds",
        "clock",
        "getCurrentTimeMillis",
        "MILLIS_PER_SECOND",
        "nowInSeconds",
        "expiration",
        "AuthorizationException",
        "fromTemplate",
        "GeneralErrors",
        "ID_TOKEN_VALIDATION_ERROR",
        "abs",
        "nowInSeconds",
        "issuedAt",
        "TEN_MINUTES_IN_SECONDS",
        "AuthorizationException",
        "fromTemplate",
        "GeneralErrors",
        "ID_TOKEN_VALIDATION_ERROR",
        "GrantTypeValues",
        "AUTHORIZATION_CODE",
        "equals",
        "tokenRequest",
        "grantType",
        "expectedNonce",
        "tokenRequest",
        "nonce",
        "TextUtils",
        "equals",
        "nonce",
        "expectedNonce",
        "AuthorizationException",
        "fromTemplate",
        "GeneralErrors",
        "ID_TOKEN_VALIDATION_ERROR",
        "message",
        "message"
    ],
    "literals": [
        "\"iss\"",
        "\"sub\"",
        "\"aud\"",
        "\"exp\"",
        "\"iat\"",
        "\"nonce\"",
        "\"\\\\.\"",
        "\"ID token must have both header and claims section\"",
        "\"Issuer mismatch\"",
        "\"https\"",
        "\"Issuer must be an https URL\"",
        "\"Issuer host can not be empty\"",
        "\"Issuer URL should not containt query parameters or fragment components\"",
        "\"Audience mismatch\"",
        "\"ID Token expired\"",
        "\"Issued at time is more than 10 minutes \"",
        "\"before or after the current time\"",
        "\"Nonce mismatch\""
    ],
    "variables": [
        "issuer",
        "subject",
        "audience",
        "expiration",
        "issuedAt",
        "nonce",
        "audience"
    ],
    "comments": [
        "We ignore header contents, but parse it to check that it is structurally valid JSON",
        "OpenID Connect Core Section 3.1.3.7. rule #1",
        "Not enforced: AppAuth does not support JWT encryption.",
        "OpenID Connect Core Section 3.1.3.7. rule #2",
        "Validates that the issuer in the ID Token matches that of the discovery document.",
        "OpenID Connect Core Section 2.",
        "The iss value is a case sensitive URL using the https scheme that contains scheme,",
        "host, and optionally, port number and path components and no query or fragment",
        "components.",
        "OpenID Connect Core Section 3.1.3.7. rule #3",
        "Validates that the audience of the ID Token matches the client ID.",
        "OpenID Connect Core Section 3.1.3.7. rules #4 & #5",
        "Not enforced.",
        "OpenID Connect Core Section 3.1.3.7. rule #6",
        "As noted above, AppAuth only supports the code flow which results in direct",
        "communication of the ID Token from the Token Endpoint to the Client, and we are",
        "exercising the option to use TLS server validation instead of checking the token",
        "signature. Users may additionally check the token signature should they wish.",
        "OpenID Connect Core Section 3.1.3.7. rules #7 & #8",
        "Not enforced. See rule #6.",
        "OpenID Connect Core Section 3.1.3.7. rule #9",
        "Validates that the current time is before the expiry time.",
        "OpenID Connect Core Section 3.1.3.7. rule #10",
        "Validates that the issued at time is not more than +/- 10 minutes on the current",
        "time.",
        "Only relevant for the authorization_code response type",
        "OpenID Connect Core Section 3.1.3.7. rule #11",
        "Validates the nonce.",
        "OpenID Connect Core Section 3.1.3.7. rules #12",
        "ACR is not directly supported by AppAuth.",
        "OpenID Connect Core Section 3.1.3.7. rules #12",
        "max_age is not directly supported by AppAuth."
    ],
    "docstrings": [
        "* Copyright 2018 The AppAuth for Android Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
        "* An OpenID Connect ID Token. Contains claims about the authentication of an End-User by an\n * Authorization Server. Supports parsing ID Tokens from JWT Compact Serializations and validation\n * according to the OpenID Connect specification.\n *\n * @see \"OpenID Connect Core ID Token, Section 2\n * <http://openid.net/specs/openid-connect-core-1_0.html#IDToken>\"\n * @see \"OpenID Connect Core ID Token Validation, Section 3.1.3.7\n * <http://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation>\""
    ],
    "functions": [
        "IdToken",
        "JSONObject",
        "parseJwtSection",
        "IdToken",
        "validate",
        "IdTokenException"
    ],
    "classes": [
        "IdToken",
        "IdTokenException"
    ]
}