{
    "identifiers": [
        "HalconDotNet",
        "Drawing",
        "Drawing",
        "Imaging",
        "Runtime",
        "InteropServices",
        "Threading",
        "Tasks",
        "BitmapHImageConverter",
        "HImage",
        "ho_Image",
        "iNumChannels",
        "ho_Image",
        "CountChannels",
        "iNumChannels",
        "iNumChannels",
        "iNumChannels",
        "iNumChannels",
        "ip_Data",
        "ho_Image",
        "GetImagePointer1",
        "sType",
        "iWidth",
        "iHeight",
        "CalculateBitmapStride",
        "iWidth",
        "iNumChannels",
        "bitmap",
        "Bitmap",
        "iWidth",
        "iHeight",
        "PixelFormat",
        "Format8bppIndexed",
        "CopyBytesIntoBitmap",
        "bitmap",
        "ip_Data",
        "iWidth",
        "iStride",
        "bitmap",
        "Palette",
        "CreateGrayColorPalette",
        "bitmap",
        "iNumChannels",
        "ho_Image",
        "GetImagePointer3",
        "ip_R",
        "ip_G",
        "ip_B",
        "sType",
        "iWidth",
        "iHeight",
        "CalculateBitmapStride",
        "iWidth",
        "iNumChannels",
        "ho_Image",
        "InterleaveChannels",
        "iStride",
        "bitmap",
        "Bitmap",
        "iWidth",
        "iHeight",
        "PixelFormat",
        "Format24bppRgb",
        "ip_Data",
        "ho_ImageInterleaved",
        "GetImagePointer1",
        "sType",
        "iWidthIntlvd",
        "iHeightIntlvd",
        "CopyBytesIntoBitmap",
        "bitmap",
        "ip_Data",
        "iStride",
        "iStride",
        "ho_ImageInterleaved",
        "Dispose",
        "ex",
        "ex",
        "bitmap",
        "HImage",
        "ho_Image",
        "HImage",
        "ho_ImageInterleaved",
        "ho_ImageInterleaved",
        "HImage",
        "iNumChannels",
        "ho_Image",
        "CountChannels",
        "iNumChannels",
        "ip_Gray",
        "ho_Image",
        "GetImagePointer1",
        "sType",
        "iWidth",
        "iHeight",
        "CalculateBitmapPadding",
        "iWidth",
        "iNumChannels",
        "iPadding",
        "bitmap",
        "Bitmap",
        "iWidth",
        "iHeight",
        "iWidth",
        "PixelFormat",
        "Format8bppIndexed",
        "ip_Gray",
        "bitmap",
        "Palette",
        "CreateGrayColorPalette",
        "bitmap",
        "iNumChannels",
        "ho_Image",
        "GetImagePointer1",
        "sType",
        "iWidth",
        "iHeight",
        "CalculateBitmapStride",
        "iWidth",
        "iNumChannels",
        "ho_ImageInterleaved",
        "ho_Image",
        "InterleaveChannels",
        "iStride",
        "ip_Gray",
        "ho_ImageInterleaved",
        "GetImagePointer1",
        "sType",
        "iWidthIntlvd",
        "iHeightIndlvd",
        "bitmap",
        "Bitmap",
        "iWidth",
        "iHeight",
        "iStride",
        "PixelFormat",
        "Format24bppRgb",
        "ip_Gray",
        "iNumChannels",
        "NotImplementedException",
        "iNumChannels",
        "ex",
        "ex",
        "bitmap",
        "Bitmap",
        "bitmap",
        "ho_ImageOut",
        "HImage",
        "pf",
        "bitmap",
        "PixelFormat",
        "bitmap",
        "Width",
        "bitmap",
        "Height",
        "pf",
        "PixelFormat",
        "Format8bppIndexed",
        "CalculateBitmapPadding",
        "bitmap",
        "Width",
        "CalculateBitmapStride",
        "iWidth",
        "iPadding",
        "bmpData",
        "bitmap",
        "LockBits",
        "Rectangle",
        "iWidth",
        "iHeight",
        "ImageLockMode",
        "ReadOnly",
        "pf",
        "ho_ImageOut",
        "GenImage1",
        "iWidth",
        "iHeight",
        "bmpData",
        "Scan0",
        "bitmap",
        "UnlockBits",
        "bmpData",
        "ho_ImageOut",
        "HImage",
        "iWidth",
        "iHeight",
        "ip_Data",
        "ho_ImageOut",
        "GetImagePointer1",
        "sType",
        "iWidth",
        "iHeight",
        "bmpData",
        "bitmap",
        "LockBits",
        "Rectangle",
        "iWidth",
        "iHeight",
        "ImageLockMode",
        "ReadOnly",
        "pf",
        "Parallel",
        "For",
        "iHeight",
        "bmpData",
        "Scan0",
        "r",
        "iStride",
        "ip_Data",
        "r",
        "iWidth",
        "iWidth",
        "Marshal",
        "Copy",
        "posRead",
        "source",
        "iWidth",
        "Marshal",
        "Copy",
        "source",
        "posWrite",
        "iWidth",
        "bitmap",
        "UnlockBits",
        "bmpData",
        "pf",
        "PixelFormat",
        "Format24bppRgb",
        "CalculateBitmapPadding",
        "iWidth",
        "iPadding",
        "bmpData",
        "bitmap",
        "LockBits",
        "Rectangle",
        "iWidth",
        "iHeight",
        "ImageLockMode",
        "ReadOnly",
        "pf",
        "pBitmap",
        "bmpData",
        "Scan0",
        "ho_ImageOut",
        "GenImageInterleaved",
        "pBitmap",
        "iWidth",
        "iHeight",
        "iWidth",
        "iHeight",
        "bitmap",
        "UnlockBits",
        "bmpData",
        "bImage32",
        "Bitmap",
        "bitmap",
        "Width",
        "bitmap",
        "Height",
        "PixelFormat",
        "Format32bppRgb",
        "Graphics",
        "FromImage",
        "bImage32",
        "g",
        "DrawImage",
        "bitmap",
        "Point",
        "g",
        "Dispose",
        "Rectangle",
        "bitmap",
        "Width",
        "bitmap",
        "Height",
        "bmpData",
        "bImage32",
        "LockBits",
        "rect",
        "ImageLockMode",
        "ReadOnly",
        "PixelFormat",
        "Format32bppRgb",
        "pBitmap",
        "bmpData",
        "Scan0",
        "ho_ImageOut",
        "GenImageInterleaved",
        "pBitmap",
        "bitmap",
        "Width",
        "bitmap",
        "Height",
        "bitmap",
        "Width",
        "bitmap",
        "Height",
        "bImage32",
        "UnlockBits",
        "bmpData",
        "bImage32",
        "Dispose",
        "NotImplementedException",
        "ex",
        "ex",
        "ho_ImageOut",
        "HRegion",
        "ho_Region",
        "iWidth",
        "iHeight",
        "ho_Region",
        "GetRegionPoints",
        "rows",
        "cols",
        "rows",
        "Length",
        "iPoints",
        "bitmap",
        "bitmap",
        "Bitmap",
        "iWidth",
        "iHeight",
        "PixelFormat",
        "Format1bppIndexed",
        "bitmap",
        "LockBits",
        "Rectangle",
        "iWidth",
        "iHeight",
        "ImageLockMode",
        "WriteOnly",
        "bitmap",
        "PixelFormat",
        "i",
        "iPoints",
        "i",
        "rows",
        "i",
        "rows",
        "i",
        "iHeight",
        "cols",
        "i",
        "cols",
        "i",
        "iWidth",
        "bmpData",
        "Stride",
        "rows",
        "i",
        "cols",
        "i",
        "cols",
        "i",
        "bitNumber",
        "bitNumber",
        "Marshal",
        "ReadByte",
        "bmpData",
        "Scan0",
        "byteNumber",
        "bitNumber",
        "b",
        "b",
        "mask",
        "Marshal",
        "WriteByte",
        "bmpData",
        "Scan0",
        "byteNumber",
        "b",
        "bitmap",
        "UnlockBits",
        "bmpData",
        "ex",
        "ex",
        "bitmap",
        "Bitmap",
        "bitmap",
        "IntPtr",
        "ip_Gray",
        "bytesPerRow",
        "iStride",
        "bitmap",
        "Height",
        "bitmap",
        "LockBits",
        "Rectangle",
        "bitmap",
        "Width",
        "iHeight",
        "ImageLockMode",
        "WriteOnly",
        "bitmap",
        "PixelFormat",
        "Parallel",
        "For",
        "iHeight",
        "ip_Gray",
        "r",
        "bytesPerRow",
        "bmpData",
        "Scan0",
        "r",
        "iStride",
        "bytesPerRow",
        "Marshal",
        "Copy",
        "posRead",
        "source",
        "bytesPerRow",
        "Marshal",
        "Copy",
        "source",
        "posWrite",
        "bytesPerRow",
        "bitmap",
        "UnlockBits",
        "bmpData",
        "Bitmap",
        "bitmap",
        "bitmap",
        "Palette",
        "i",
        "i",
        "cp_P",
        "Entries",
        "i",
        "Color",
        "FromArgb",
        "i",
        "i",
        "i",
        "cp_P",
        "iWidth",
        "iChannels",
        "CalculateBitmapPadding",
        "iWidth",
        "iChannels",
        "iWidth",
        "iChannels",
        "iPadding",
        "iStride",
        "iWidth",
        "iChannels",
        "iWidth",
        "iChannels",
        "iPadding"
    ],
    "literals": [
        "\"Conversion of HImage to Bitmap failed. Number of channels of the HImage is: \"",
        "\". Conversion rule exists only for images with 1 or 3 chanels\"",
        "\"rgb\"",
        "\"Conversion of HImage to Bitmap failed.\"",
        "\"Conversion of HImage to Bitmap failed. \"",
        "\" Padding (=width modulo 4) of Bitmap not zero (mandatory to copy by reference). \"",
        "\"To solve, please use HImage2Bitmap\"",
        "\"rgb\"",
        "\"Conversion of HImage to Bitmap failed. Number of channels in HImage is: \"",
        "\". Direct conversion by reference only possible with images of 1,3 or 4 channels.\"",
        "\"Conversion of HImage to Bitmap failed.\"",
        "\"byte\"",
        "\"byte\"",
        "\"bgr\"",
        "\"byte\"",
        "\"bgrx\"",
        "\"byte\"",
        "\"Method \\\"Bitmap2HImage\\\" only implemented for 1 and 3 channel images\"",
        "\"Conversion of Bitmap to HImage failed.\"",
        "\"Conversion of HRegion to monochrome Bitmap failed.\""
    ],
    "variables": [
        "iWidth",
        "iHeight",
        "iNumChannels",
        "IntPtr",
        "ip_R",
        "ip_G",
        "ip_B",
        "ip_Data",
        "sType",
        "Bitmap",
        "bitmap",
        "iStride",
        "iStride",
        "HImage",
        "ho_ImageInterleaved",
        "iWidthIntlvd",
        "iHeightIntlvd",
        "iWidth",
        "iHeight",
        "iNumChannels",
        "IntPtr",
        "ip_Gray",
        "sType",
        "Bitmap",
        "bitmap",
        "iPadding",
        "iStride",
        "iWidthIntlvd",
        "iHeightIndlvd",
        "HImage",
        "ho_ImageOut",
        "BitmapData",
        "bmpData",
        "IntPtr",
        "pBitmap",
        "ip_Data",
        "PixelFormat",
        "pf",
        "iWidth",
        "iHeight",
        "iPadding",
        "iStride",
        "sType",
        "IntPtr",
        "posRead",
        "IntPtr",
        "posWrite",
        "source",
        "iPadding",
        "Bitmap",
        "bImage32",
        "Graphics",
        "g",
        "Rectangle",
        "rect",
        "Bitmap",
        "bitmap",
        "HTuple",
        "rows",
        "cols",
        "iPoints",
        "BitmapData",
        "bmpData",
        "i",
        "byteNumber",
        "bitNumber",
        "b",
        "mask",
        "iHeight",
        "BitmapData",
        "bmpData",
        "IntPtr",
        "posRead",
        "IntPtr",
        "posWrite",
        "source",
        "ColorPalette",
        "cp_P",
        "i",
        "iPadding",
        "iStride",
        "iPadding"
    ],
    "comments": [
        "Create a bitmap from a HImage. Image data is copied -> new bitmap is independent of HImage lifetime",
        "</summary>",
        "<param name=\"ho_Image\">input HImage</param>",
        "<returns>output new System.Drawing.Imaging.Bitmap</returns>",
        "null return object",
        "",
        "Note that pixel data is stored differently in a System.Drawing.Bitmap:",
        "a) Stride:",
        "stride is the width, rounded up to a multiple of 4 (padding)",
        "Size of data array HALCON: heigth*width, Bitmap: heigth*stride",
        "compare: https://msdn.microsoft.com/en-us/library/zy1a2d14%28v=vs.110%29.aspx",
        "b) RGB data storage:",
        "Bitmap: one array, alternating red/green/blue (HALCON: three arrays)",
        "",
        "get the number of channels to run different conversion method",
        "",
        "1) Get the image pointer",
        "",
        "2) Calculate the stride",
        "",
        "3) Create a new gray Bitmap object, allocating the necessary (managed) memory",
        "note for high performance, image can be copied by reference (see HImage2BitmapByReference)",
        "",
        "4) Copy the image data directly into the bitmap data object",
        "",
        "5) Adjust color palette to grayscale (linearized grayscale)",
        "",
        "1) Calculate the stride",
        "",
        "2) Create interleaved image in HALCON",
        "",
        "3) Create a new RGB Bitmap object, allocating the necessary (managed) memory",
        "note for high performance, image can be copied by reference (see HImage2BitmapByReference)",
        "",
        "4) Copy bytes",
        "",
        "5) Free temp HALCON image",
        "Create a bitmap from a HALCON HImage by reference.",
        "Make sure to keep the interleaved HImage alive as long as the bitmap is used.",
        "in case of 1 channel image, padding must be 0",
        "</summary>",
        "<param name=\"ho_Image\"></param>",
        "<returns></returns>",
        "null return objects",
        "",
        "Note that pixel data is stored differently in System.Drawing.Bitmap",
        "",
        "1) Get the image pointer",
        "",
        "2) Calculate the stride",
        "",
        "3) Create a new gray Bitmap object, copy by reference.",
        "keep in mind that the bitmap object's validity relies on the HImage lifetime",
        "",
        "4) Adjust palette to grayscale (linearized grayscale)",
        "",
        "1) Get the image stride",
        "",
        "2) Create an interleaved HALCON image using operator interleave_channels",
        "",
        "3) Create a new gray Bitmap object, copy by reference.",
        "keep in mind that the bitmap object's validity relies on the HImage lifetime",
        "Convert a Bitmap into HALCON HImage.",
        "Bitmap data is copied, so memory can be released afterwards.",
        "note: in case of 8Bit bitmap images, and an image width divisable by 4, one can also use operator GenImage1Extern",
        "</summary>",
        "<param name=\"bitmap\"></param>",
        "<returns></returns>",
        "one channel image",
        "Access bitmap data object",
        "",
        "Create new HObject",
        "Note that GenImage1 allocates new memory. Use GenImage1Extern to create HImage by reference.",
        "In case of padding, data must be copied manually",
        "allocate HALCON object",
        "",
        "BitmapData lets us access the data in memory",
        "Copy data.",
        "System.Threading.Tasks.Parallel processing requires .NET framework >= 4.0",
        "copy full line at once",
        "",
        "Let the .NET memory management take over control",
        "",
        "RGB images",
        "depending on the padding, the data can be copied directly",
        "Access bitmap data",
        "",
        "Create new HObject",
        "",
        "Let the .NET memory management take over control",
        "Convert 24 bit bitmap to 32 bit bitmap in order to ensure",
        "that the bit width of the image (the Stride) is divisible by four.",
        "Otherwise, one might obtain skewed conversions.",
        "",
        "Obtain the image pointer.",
        "Don't forget to unlock the bits again. ;-)",
        "Release memory by dereferencing and garbage collection",
        "convert a HALCON HRegion into a monochrome System.Drawing.Bitmap",
        "</summary>",
        "<param name=\"ho_Region\"></param>",
        "<returns></returns>",
        "null return object",
        "get region points",
        "return if region contains no points",
        "",
        "create a new monochrome Bitmap object, allocating the necessary (managed) memory",
        "",
        "loop: set bit value for each point in the monochrome BitmapData",
        "if region point is not outside of image",
        "pointer to BitmapData + desired offset to read/write",
        "reverse bit order",
        "read the byte",
        "modify byte (set desired bit to 1)",
        "write the modified byte",
        "let the windows memory management take over control",
        "Helper method to copy the (interleaved) image data into the bitmap",
        "</summary>",
        "<param name=\"bytesPerRow\">number of bytes to copy from source per row</param>",
        "Copy the image data directly into the bitmap data object",
        "BitmapData lets us access the data in memory",
        "System.Threading.Tasks.Parallel processing requires .NET framework >= 4.0",
        "copy full line at once",
        "",
        "Let the .NET memory management take over control",
        "Helper method to create and return a color palette for grayscale bitmaps",
        "</summary>",
        "<returns></returns>",
        "ColorPalette has no constructor -> obtain it from the Bitmap",
        "Helper method to calculate the stride of a Drawing.Bitmap at given width",
        "</summary>",
        "<param name=\"iWidth\"></param>",
        "<returns></returns>",
        "Calculate the stride",
        "Stride = image_width + padding",
        "Helper method to calculate the Padding of a Drawing.Bitmap at given width",
        "</summary>",
        "<param name=\"iWidth\"></param>",
        "<returns></returns>",
        "Calculate the padding",
        "padding: image width modulo 4"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "Bitmap",
        "HImage2Bitmap",
        "Bitmap",
        "HImage2BitmapByReference",
        "HImage",
        "Bitmap2HImage",
        "Bitmap",
        "HRegion2Bitmap",
        "CopyBytesIntoBitmap",
        "ColorPalette",
        "CreateGrayColorPalette",
        "CalculateBitmapStride",
        "CalculateBitmapPadding"
    ],
    "classes": [
        "BitmapHImageConverter"
    ]
}