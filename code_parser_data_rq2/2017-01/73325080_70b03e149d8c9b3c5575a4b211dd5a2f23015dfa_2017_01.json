{
    "identifiers": [
        "Component",
        "Input",
        "Output",
        "EventEmitter",
        "OnInit",
        "Observable",
        "Subject",
        "Component",
        "electron",
        "Subject",
        "Output",
        "EventEmitter",
        "Input",
        "value",
        "value",
        "value",
        "Input",
        "language",
        "language",
        "language",
        "language",
        "language",
        "Input",
        "editorStyle",
        "editorStyle",
        "Input",
        "theme",
        "theme",
        "theme",
        "monacoHTML",
        "Subject",
        "monacoContainer"
    ],
    "literals": [
        "'@angular/core'",
        "'rxjs/Observable'",
        "'rxjs/Subject'",
        "'td-monaco-editor'",
        "'./monaco-editor.component.html'",
        "'./monaco-editor.component.scss'",
        "string",
        "'border:1px solid grey;'",
        "string",
        "string",
        "''",
        "string",
        "'vs'",
        "string",
        "'javascript'",
        "string",
        "'editorValueChange'",
        "'value'",
        "string",
        "'setEditorContent'",
        "string",
        "'getEditorContent'",
        "'language'",
        "string",
        "'setLanguage'",
        "string",
        "'registerLanguage'",
        "'editorStyle'",
        "string",
        "string",
        "'theme'",
        "string",
        "'setEditorOptions'",
        "'theme'",
        "string",
        "string",
        "<!DOCTYPE html>\n        <html style=\"height:100%\">\n        <head>\n            <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n            <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" >\n            <link rel=\"stylesheet\" data-name=\"vs/editor/editor.main\" \n                href=\"file:///node_modules/monaco-editor/min/vs/editor/editor.main.css\">\n        </head>\n        <body style=\"height:100%\">\n        <div id=\"container\" style=\"width:100%;height:100%;${this._editorStyle}\"></div>\n        <script>\n            // Get the ipcRenderer of electron for communication\n            const {ipcRenderer} = require('electron');\n        </script>\n        <script src=\"file:///node_modules/monaco-editor/min/vs/loader.js\"></script>\n        <script>\n            var editor;\n            var theme = '${this._theme}';\n\n            require.config({\n                baseUrl: '${this._appPath}/node_modules/monaco-editor/min'\n            });\n            self.module = undefined;\n            self.process.browser = true;\n\n            require(['vs/editor/editor.main'], function() {\n                editor = monaco.editor.create(document.getElementById('container'), {\n                    value: '${this._value}',\n                    language: '${this.language}',\n                    theme: '${this._theme}',\n                });\n                editor.getModel().onDidChangeContent( (e)=> {\n                    ipcRenderer.sendToHost(\"onEditorContentChange\", editor.getValue());\n                });\n            });\n\n            // return back the value in the editor to the mainview\n            ipcRenderer.on('getEditorContent', function(){\n                ipcRenderer.sendToHost(\"editorContent\", editor.getValue());\n            });\n\n            // set the value of the editor from what was sent from the mainview\n            ipcRenderer.on('setEditorContent', function(event, data){\n                editor.setValue(data);\n            });\n\n            // set the options of the editor from what was sent from the mainview\n            ipcRenderer.on('setEditorOptions', function(event, data){\n                editor.updateOptions(data);\n            });\n\n            // set the language of the editor from what was sent from the mainview\n            ipcRenderer.on('setLanguage', function(event, data){\n                var currentValue = editor.getValue();\n                editor.dispose();\n                editor = monaco.editor.create(document.getElementById('container'), {\n                    value: currentValue,\n                    language: data,\n                    theme: theme,\n                });\n            });\n\n            // register a new language with editor\n            ipcRenderer.on('registerLanguage', function(event, data){\n                var currentValue = editor.getValue();\n                editor.dispose();\n\n                for (var i = 0; i < data.completionItemProvider.length; i++) {\n                    var provider = data.completionItemProvider[i];\n                    provider.kind = eval(provider.kind);\n                }\n                for (var i = 0; i < data.monarchTokensProvider.length; i++) {\n                    var monarchTokens = data.monarchTokensProvider[i];\n                    monarchTokens[0] = eval(monarchTokens[0]);\n                }\n                monaco.languages.register({ id: data.id });\n\n                monaco.languages.setMonarchTokensProvider(data.id, {\n                    tokenizer: {\n                        root: data.monarchTokensProvider\n                    }\n                });\n\n                monaco.languages.registerCompletionItemProvider(data.id, {\n                    provideCompletionItems: () => {\n                        return data.completionItemProvider\n                    }\n                });\n\n                var css = document.createElement(\"style\");\n                css.type = \"text/css\";\n                css.innerHTML = data.monarchTokensProviderCSS;\n                document.body.appendChild(css);\n            });\n        </script>\n        </body>\n        </html>",
        "'webview'",
        "'nodeintegration'",
        "'true'",
        "'disablewebsecurity'",
        "'true'",
        "'src'",
        "'data:text/html;base64,'",
        "'style'",
        "'display:inline-flex; width:100%; height:100%'",
        "'ipc-message'",
        "'editorContent'",
        "'onEditorContentChange'",
        "'monacoContainer'"
    ],
    "variables": [
        "monacoHTML",
        "monacoContainer"
    ],
    "comments": [
        "no getter for editor Value because need to use async call",
        "instead using getEditorContent function below",
        "dynamically create the Electron Webview Element",
        "this will sandbox the monaco code into its own DOM and its own",
        "javascript instance. Need to do this to avoid problems with monaco",
        "using AMD Requires and Electron using Node Requires",
        "see https://github.com/Microsoft/monaco-editor/issues/90",
        "take the html content for the webview and base64 encode it and use as the src tag",
        "this._webview.addEventListener('dom-ready', () => {",
        "this._webview.openDevTools();",
        "});",
        "Process the data from the webview",
        "append the webview to the DOM"
    ],
    "docstrings": [
        "* editorValueChange: function($event)\n  * Event emitted any time something changes the editor value",
        "* value?: string\n   * Value in the Editor after async getEditorContent was called",
        "* getEditorContent?: function\n   * Returns the content within the monaco editor",
        "* language?: string\n   * language used in editor",
        "* registerLanguage?: function\n   * Registers a custom Language within the monaco editor",
        "* style?: string\n   * css style of the editor on the page",
        "* theme?: string\n   * Theme to be applied to editor"
    ],
    "functions": [
        "value",
        "getValue",
        "language",
        "language",
        "registerLanguage",
        "editorStyle",
        "editorStyle",
        "theme",
        "theme",
        "ngOnInit"
    ],
    "classes": [
        "TdMonacoEditorComponent"
    ]
}