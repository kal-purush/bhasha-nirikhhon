{
    "identifiers": [
        "orca",
        "policy",
        "core",
        "orca",
        "shirako",
        "api",
        "IReservation",
        "orca",
        "shirako",
        "common",
        "SliceID",
        "orca",
        "shirako",
        "kernel",
        "IKernelSlice",
        "orca",
        "shirako",
        "kernel",
        "ReservationStates",
        "orca",
        "shirako",
        "util",
        "ReservationSet",
        "orca",
        "util",
        "persistence",
        "NotPersistent",
        "java",
        "util",
        "java",
        "util",
        "orca",
        "manage",
        "OrcaConstants",
        "NotPersistent",
        "pendingRedeem",
        "pendingRedeem",
        "Override",
        "reservation",
        "pendingRedeem",
        "calendar",
        "addPending",
        "reservation",
        "myPending",
        "calendar",
        "getPending",
        "sliceStatusMap",
        "myPending",
        "reservation",
        "myPending",
        "reservation",
        "getSlice",
        "sliceID",
        "getSliceID",
        "reservation",
        "isFailed",
        "reservation",
        "isTicketed",
        "sliceStatusMap",
        "containsKey",
        "sliceID",
        "sliceStatusMap",
        "put",
        "sliceID",
        "ReservationStateActive",
        "sliceReservation",
        "getReservations",
        "sliceReservation",
        "getState",
        "ReservationStateFailed",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "sliceReservation",
        "getReservationID",
        "getName",
        "reservation",
        "getReservationID",
        "sliceStatusMap",
        "put",
        "sliceID",
        "ReservationStateFailed",
        "sliceReservation",
        "getState",
        "ReservationStateNascent",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "sliceReservation",
        "getReservationID",
        "getName",
        "reservation",
        "getReservationID",
        "sliceStatusMap",
        "put",
        "sliceID",
        "ReservationStateNascent",
        "sliceStatusMap",
        "get",
        "sliceID",
        "ReservationStateFailed",
        "logger",
        "info",
        "reservation",
        "getReservationID",
        "getName",
        "reservation",
        "transition",
        "ReservationStates",
        "Failed",
        "ReservationStates",
        "calendar",
        "removePending",
        "reservation",
        "pendingNotify",
        "remove",
        "reservation",
        "sliceStatusMap",
        "get",
        "sliceID",
        "ReservationStateNascent",
        "logger",
        "info",
        "reservation",
        "getReservationID",
        "getName",
        "pendingRedeem",
        "add",
        "reservation",
        "calendar",
        "removePending",
        "reservation",
        "checkPending"
    ],
    "literals": [
        "\"Found Failed Reservation \"",
        "\" in Slice \"",
        "\" when checkPending() for \"",
        "\"Found Nascent Reservation \"",
        "\" in Slice \"",
        "\" when checkPending() for \"",
        "\"Failing reservation \"",
        "\" due to failure in Slice \"",
        "\"fail on slice reservation failed\"",
        "\"Moving reservation \"",
        "\" to pendingRedeem list, due to nascent reservation in slice \""
    ],
    "variables": [
        "pendingRedeem"
    ],
    "comments": [
        "add all of our pendingRedeem, so they can be checked",
        "get set of reservations that need to be redeemed",
        "keep track of status of the slice containing each reservation",
        "nothing to do!",
        "check the status of the Slice of each reservation",
        "only want to do this for 'new' tickets",
        "set the default status",
        "examine every reservation contained within the slice,",
        "until we have found either a Failed or Nascent reservation",
        "there could be a Failed one too, but we'll just stop here",
        "take action on the current reservation",
        "Fail the reservation, and remove it from everything",
        "save this reservation for later",
        "anything remaining in calendar.pending will be processed in parent class"
    ],
    "docstrings": [
        "* This implementation of a Service Manager policy is almost identical to the parent\n * ServiceManagerSimplePolicy.\n *\n * The only real difference is that it addresses the following issue:\n * https://github.com/RENCI-NRIG/orca5/issues/88\n * Tickets should not be redeemed if any reservations are currently Failed or Nascent.\n *",
        "* Check to make sure all reservations are Ticketed (not Failed or Nascent)\n     * before calling the parent method.\n     *\n     * @throws Exception"
    ],
    "functions": [
        "ServiceManagerTicketReviewPolicy",
        "checkPending"
    ],
    "classes": [
        "ServiceManagerTicketReviewPolicy"
    ]
}