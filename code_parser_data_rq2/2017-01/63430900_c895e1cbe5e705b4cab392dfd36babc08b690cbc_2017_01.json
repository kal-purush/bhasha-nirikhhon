{
    "identifiers": [
        "header",
        "k",
        "header",
        "header",
        "p",
        "k",
        "c",
        "c",
        "p",
        "t",
        "t",
        "p",
        "res",
        "res",
        "now",
        "res",
        "res",
        "res",
        "parseHeader",
        "res",
        "h",
        "parseInt",
        "h",
        "age",
        "res",
        "h",
        "parseInt",
        "h",
        "age",
        "res",
        "res",
        "req",
        "res",
        "parseHeader",
        "res",
        "h",
        "parseInt",
        "h",
        "age",
        "res",
        "h",
        "parseInt",
        "h",
        "age",
        "res",
        "req",
        "parseHeader",
        "req",
        "h",
        "h",
        "parseInt",
        "h",
        "age",
        "res",
        "h",
        "parseInt",
        "h",
        "expires",
        "res",
        "serverMatch",
        "clientMatch",
        "res",
        "req",
        "res",
        "parseHeader",
        "res",
        "h",
        "h",
        "h",
        "parseInt",
        "h",
        "maxAge",
        "parseInt",
        "h",
        "age",
        "res",
        "req",
        "parseHeader",
        "req",
        "h",
        "expires",
        "res",
        "parseInt",
        "h",
        "serverMatch",
        "clientMatch",
        "res",
        "res",
        "parseHeader",
        "res",
        "h",
        "parseInt",
        "h",
        "age",
        "res",
        "serverMatch",
        "clientMatch",
        "req",
        "req",
        "req",
        "parseHeader",
        "req",
        "req",
        "req",
        "parseHeader",
        "req",
        "res",
        "headerFn",
        "h",
        "Headers",
        "kv",
        "res",
        "headers",
        "kv",
        "kv",
        "headers",
        "headerFn",
        "headerFn",
        "cloneHeaders",
        "res",
        "resolve",
        "res",
        "blob",
        "resolve",
        "Response",
        "blob",
        "res",
        "res",
        "headers",
        "req",
        "headerFn",
        "h",
        "Headers",
        "kv",
        "req",
        "headers",
        "kv",
        "kv",
        "headers",
        "headerFn",
        "headerFn",
        "cloneHeaders",
        "req",
        "Request",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "headers",
        "r",
        "req",
        "res",
        "cache",
        "reqFn",
        "r",
        "resFn",
        "req",
        "res",
        "cache",
        "reqFn",
        "resFn",
        "req",
        "req",
        "req",
        "res",
        "res",
        "fetch",
        "req",
        "resFn",
        "res",
        "res",
        "res",
        "parseHeader",
        "res",
        "canCache",
        "res",
        "req",
        "caches",
        "cache",
        "cache",
        "req",
        "cache",
        "req",
        "res",
        "res",
        "req",
        "req",
        "req",
        "Request",
        "req",
        "req",
        "origin",
        "sameOrigin",
        "fetch",
        "req",
        "r",
        "r",
        "req",
        "reqFn",
        "req",
        "cacheSufficient",
        "req",
        "add",
        "req",
        "caches",
        "cache",
        "cache",
        "cache",
        "req",
        "res",
        "res",
        "freshMatch",
        "res",
        "req",
        "res",
        "staleMatch",
        "res",
        "req",
        "add",
        "req",
        "res",
        "cache",
        "req",
        "add",
        "req",
        "r",
        "r",
        "r",
        "errorMatch",
        "res",
        "res",
        "r",
        "e",
        "errorMatch",
        "res",
        "res",
        "e",
        "cacheNecessary",
        "req",
        "Response",
        "add",
        "req",
        "scope",
        "scope",
        "scope",
        "scope",
        "scope"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"date\"",
        "\"NO DATE\"",
        "\"date\"",
        "\"cache-control\"",
        "\"cache-control\"",
        "\"s-maxage\"",
        "\"s-maxage\"",
        "\"max-age\"",
        "\"max-age\"",
        "\"cache-control\"",
        "\"cache-control\"",
        "\"s-maxage\"",
        "\"s-maxage\"",
        "\"max-age\"",
        "\"max-age\"",
        "\"cache-control\"",
        "\"cache-control\"",
        "\"no-cache\"",
        "\"max-age\"",
        "\"max-age\"",
        "\"min-fresh\"",
        "\"min-fresh\"",
        "\"cache-control\"",
        "\"cache-control\"",
        "\"must-revalidate\"",
        "\"stale-while-revalidate\"",
        "\"max-age\"",
        "\"max-age\"",
        "\"stale-while-revalidate\"",
        "\"cache-control\"",
        "\"cache-control\"",
        "\"max-stale\"",
        "\"max-stale\"",
        "\"cache-control\"",
        "\"cache-control\"",
        "\"stale-if-error\"",
        "\"stale-if-error\"",
        "\"cache-control\"",
        "\"cache-control\"",
        "\"no-cache\"",
        "\"no-cache\"",
        "\"cache-control\"",
        "\"cache-control\"",
        "\"only-if-cached\"",
        "\"cache-control\"",
        "'same-origin'",
        "string",
        "string",
        "\"cache-control\"",
        "\"no-store\"",
        "\"cache-control\"",
        "\"date\"",
        "\"MISSING DATE HEADER\"",
        "\"ADDING TO CACHE\"",
        "string",
        "\"string\"",
        "\"//\"",
        "\"NOT CACHED\"",
        "\"Resource not cached\"",
        "'install'",
        "'activate'"
    ],
    "variables": [
        "now",
        "t",
        "h",
        "h",
        "h",
        "h",
        "maxAge",
        "h",
        "h",
        "headers",
        "headers",
        "headers",
        "headers",
        "cache",
        "resFn",
        "origin",
        "add",
        "cache",
        "reqFn"
    ],
    "comments": [
        "Copyright 2016 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
        "There doesn't seem to be an authoritative source of service worker",
        "definitions; reference these hand-written definitions for now.",
        "<reference path=\"service-worker.d.ts\"/>",
        "## Request/Response Utils",
        "Takes a HTTP header (`MAX-AGE=600, stale-while-revalidate=30, public`) and",
        "returns the equivalent object",
        "(`{\"max-age\":\"600\",\"public\":undefined,\"stale-while-revalidate\":\"30\"}`).",
        "Returns the number of milliseconds since the Resource was cached.",
        "Returns number of milliseconds until the resource expires. This number will",
        "be negative if the expiration time is in the past.",
        "Returns **true** if the freshness requirements of the `Request` and",
        "`Response` are satisfied, otherwise **false**.",
        "Server must whitelist cached response via `s-maxage` or `max-age`.",
        "Client can blacklist cached response via `max-age` or `min-fresh`.",
        "Returns **true** if the \"staleness\" requirements of the `Request` and",
        "`Response` are satisfied, otherwise **false**.",
        "Server must whitelist via [`stale-while-revalidate`](https://tools.ietf.org/html/rfc5861#section-3).",
        "Client can blacklist via [`max-stale`](https://tools.ietf.org/html/rfc7234#section-5.2.1.2).",
        "Returns **true** if the response satisfies `stale-if-error` requirements,",
        "otherwise **false**.",
        "Server can whitelist via `stale-if-error`.",
        "Client can't override.",
        "Returns **true** if the client will accept a cached response, otherwise",
        "Returns **true** if the client requires a cached response, otherwise",
        "[RFC7234](https://tools.ietf.org/html/rfc7234#section-5.2.1.7).)",
        "Takes a `Response` and (optionally) a function for transforming headers",
        "(`Headers` → `Headers`). Returns a new `Response`.",
        "This function is necessary because sadly [res.headers is",
        "read-only](https://developer.mozilla.org/en-US/docs/Web/API/Response/headers)…",
        "Takes a `Request` and (optionally) a function for transforming headers",
        "(`Headers` → `Headers`). Returns a new `Request`.",
        "This function is necessary because sadly [res.headers is",
        "read-only](https://developer.mozilla.org/en-US/docs/Web/API/Response/headers)…",
        "Returns (otherwise unnecessary) Promise to parallel `newResponse()`.",
        "http://stackoverflow.com/a/35421858/11543",
        "Should be 'manual'? http://stackoverflow.com/a/35421858/11543",
        "## HttpProxy",
        "",
        "Implements a [RFC 7234](https://tools.ietf.org/html/rfc7234)/[RFC",
        "5861](https://tools.ietf.org/html/rfc5861) compliant HTTP",
        "cache. (Well, that's the idea anyway. There's probably quite a few bugs.)",
        "### HttpProxy.add(cache, reqFn, resFn)",
        "",
        "Constructor. `cache` is the cache name (a string); `reqFn` and `resFn` are",
        "(optional) functions that transform the request and response.",
        "### HttpProxy.add()",
        "",
        "Parallels",
        "[`Cache.add()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/add);",
        "takes a `Request` and returns a Promise resolving to a `Response`. The",
        "`Response` can optionally be transformed by the instance variable `resFn`.",
        "`resFn` transforms the `Response`, if provided.",
        "Fetch `req` and transform `Response`.",
        "If the `Response` allows caching, save it.",
        "[1]",
        "[2]",
        "We clone() at both [1] and [2] because otherwise (at least I think this\n      /* is what happens), the res returned at [2] can get drained by the caller\n      /* before we attempt the clone() at [1], at which point it's too late.\n      /* (Always Be Cloning, basically.)",
        "### HttpProxy.fetch()",
        "",
        "Parallels the global `fetch()` function; takes a `Request` and returns a",
        "Promise resolving to a `Response`.",
        "https://github.com/Microsoft/TypeScript/issues/10339",
        "Abort if req is not on the same origin--we can't inspect headers in that",
        "case, and so can't effectively proxy.",
        "`reqFn` transforms the `Request`, if provided.",
        "If a cached response is not acceptable, try the network.",
        "Look for responses matching `Request` `req` in the cache.",
        "`Response` received …",
        "… if it's fresh, ship it.",
        "… if it's stale, ship it (and revalidate).",
        "… otherwise, try the network (and delete from the cache).",
        "TODO Handle authentication errors",
        "No `Response` received …",
        "… if a cached response is required, return a 504.",
        "… otherwise, try the network.",
        "## Service Worker Utils",
        "",
        "Configures the passed service worker to \"skip waiting\"--that is, to activate",
        "as soon as possible, instead of waiting for the page to be reloaded.",
        "http://stackoverflow.com/a/34681584/11543"
    ],
    "docstrings": [
        "* @param  {string} header HTTP header\n * @return {object}",
        "**false**.",
        "**false**. (See",
        "* @param  {Response} res\n * @param  {function} headerFn passed mutatable `Headers`\n * @return {Promise<Response>}",
        "* @param  {Request} req\n * @param  {function} headerFn passed mutable `Headers`\n * @return {Promise<Request>}",
        "* @param {string} cache name\n * @param {function} [reqFn] transforms request (Request → Request)\n * @param {function} [resFn] transforms response ((Request, Response) → Response)",
        "* @param {Request} req\n   * @return {Promise<Response>}",
        "* @param  {Request} req\n   * @return {Promise<Response>}",
        "**skipWaitingAndClaim(scope)**",
        "* @param  {ServiceWorkerGlobalScope} scope Probably `self`"
    ],
    "functions": [
        "parseHeader",
        "age",
        "expires",
        "freshMatch",
        "serverMatch",
        "clientMatch",
        "staleMatch",
        "serverMatch",
        "clientMatch",
        "errorMatch",
        "serverMatch",
        "clientMatch",
        "cacheSufficient",
        "cacheNecessary",
        "newResponse",
        "cloneHeaders",
        "newRequest",
        "cloneHeaders",
        "add",
        "canCache",
        "fetch",
        "sameOrigin",
        "skipWaitingAndClaim"
    ],
    "classes": [
        "Proxy"
    ]
}