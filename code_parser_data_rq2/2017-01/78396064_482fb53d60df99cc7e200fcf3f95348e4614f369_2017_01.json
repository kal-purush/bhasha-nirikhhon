{
    "identifiers": [
        "platform",
        "sys",
        "mmap",
        "numpy",
        "uint8",
        "uint32",
        "device",
        "of1",
        "of2",
        "sys",
        "argv",
        "strip",
        "of1",
        "of2",
        "of1",
        "of1",
        "sys",
        "argv",
        "strip",
        "of2",
        "of2",
        "device",
        "offset",
        "offset",
        "setboot",
        "device",
        "offset",
        "offset",
        "uint32",
        "index",
        "EXFAT_VBR_SIZE",
        "index",
        "uint8",
        "device",
        "offset",
        "index",
        "uint32",
        "checksum",
        "checksum",
        "value",
        "pack",
        "checksum",
        "offset",
        "offset",
        "checksum_chunk",
        "argv",
        "argv",
        "sys",
        "argv",
        "open",
        "argv",
        "strip",
        "mmap",
        "mmap",
        "device_fd",
        "fileno",
        "device",
        "setboot",
        "device",
        "device",
        "setboot",
        "device",
        "device",
        "setExfat",
        "device",
        "setExfat",
        "device",
        "argv",
        "file",
        "sys",
        "stderr",
        "device",
        "flush",
        "device_fd",
        "close",
        "main"
    ],
    "literals": [
        "'Applying parameters on device'",
        "'  writing %s at offset %x (Volume Label)'",
        "'  writing BOOTDISK at offset %x (Boot code)'",
        "\"UTF-8\"",
        "b'BOOTDISK'",
        "'Updating EXFAT VBR at %x'",
        "'Calculating VBR checksum'",
        "'<I'",
        "'r+b'",
        "b'FAT16   '",
        "'Identified FAT16 partition'",
        "b'FAT32   '",
        "'Identified FAT32 partition'",
        "b'EXFAT   '",
        "'Identified EXFAT partition'",
        "'__main__'"
    ],
    "variables": [
        "device",
        "device",
        "EXFAT_VBR_SIZE",
        "checksum",
        "value",
        "checksum",
        "checksum_chunk",
        "device",
        "argv",
        "device_fd",
        "device"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "",
        "Copyright © 2013 Diego Elio Pettenò <flameeyes@flameeyes.eu>",
        "Inspired by Trammel's and arm.indiana@gmail.com's shell script",
        "",
        "DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE",
        "Version 2, December 2004",
        "",
        "Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>",
        "",
        "Everyone is permitted to copy and distribute verbatim or modified",
        "copies of this license document, and changing it is allowed as long",
        "as the name is changed.",
        "",
        "DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE",
        "TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION",
        "",
        "0. You just DO WHAT THE FUCK YOU WANT TO.",
        "",
        "",
        "patch the SD/CF card bootsector to make it bootable on Canon DSLR",
        "See http://chdk.setepontos.com/index.php/topic,4214.0.html",
        "",
        "usage: make_bootable.py device (e.g. /dev/sdb1)",
        "",
        "Supports FAT16, FAT32 and EXFAT devices; should work on all",
        "operating systems as long as Numpy is available.",
        "Only map the longest boot recod we need to write to (512*24 is",
        "needed for exfat)",
        "backup VBR, set that one up as well"
    ],
    "docstrings": [
        "\"\"\"Device %s is not a valid filesystem in the supported range.\nSupported filesystems are FAT16, FAT32, EXFAT.\nFormat your card in camera before using this script.\"\"\""
    ],
    "functions": [
        "setboot",
        "setExfat",
        "main"
    ],
    "classes": []
}