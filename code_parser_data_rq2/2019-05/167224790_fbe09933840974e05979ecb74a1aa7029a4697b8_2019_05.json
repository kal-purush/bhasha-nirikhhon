{
    "identifiers": [
        "pdb",
        "functools",
        "partial",
        "logging",
        "urllib",
        "error",
        "pandas",
        "pd",
        "pvlib",
        "iotools",
        "requests",
        "exceptions",
        "HTTPError",
        "solarforecastarbiter",
        "io",
        "reference_observations",
        "common",
        "logging",
        "getLogger",
        "site",
        "year",
        "month",
        "common",
        "decode_extra_parameters",
        "site",
        "extra_params",
        "extra_params",
        "FILE_TYPE_MAP",
        "interval_length",
        "file_type",
        "file_types",
        "iotools",
        "read_srml_month_from_solardat",
        "station_code",
        "year",
        "month",
        "file_type",
        "error",
        "URLError",
        "logger",
        "info",
        "file_type",
        "site",
        "name",
        "year",
        "month",
        "logger",
        "debug",
        "station_code",
        "pd",
        "errors",
        "EmptyDataError",
        "logger",
        "warning",
        "site",
        "name",
        "year",
        "month",
        "srml_month",
        "api",
        "site",
        "start",
        "end",
        "month",
        "pd",
        "date_range",
        "start",
        "end",
        "pd",
        "Timedelta",
        "freq",
        "logger",
        "info",
        "site",
        "name",
        "month",
        "strftime",
        "request_data",
        "site",
        "month",
        "year",
        "month",
        "month",
        "srml_month",
        "month_dfs",
        "append",
        "srml_month",
        "month_dfs",
        "pd",
        "concat",
        "month_dfs",
        "col",
        "col",
        "all_period_data",
        "columns",
        "col",
        "all_period_data",
        "var_columns",
        "all_period_data",
        "api",
        "site",
        "pd",
        "Timestamp",
        "now",
        "pd",
        "Timestamp",
        "now",
        "common",
        "decode_extra_parameters",
        "site",
        "fetch",
        "api",
        "site",
        "start",
        "end",
        "error",
        "HTTPError",
        "logger",
        "error",
        "site",
        "name",
        "site_df",
        "logger",
        "error",
        "site",
        "name",
        "variable",
        "srml_variable_map",
        "keys",
        "col",
        "col",
        "site_df",
        "columns",
        "variable",
        "col",
        "match",
        "matches",
        "extra_params",
        "copy",
        "observation_extra_parameters",
        "update",
        "match",
        "common",
        "create_observation",
        "api",
        "site",
        "srml_variable_map",
        "variable",
        "name",
        "site",
        "name",
        "match",
        "extra_params",
        "observation_extra_parameters",
        "HTTPError",
        "e",
        "logger",
        "error",
        "variable",
        "site",
        "name",
        "e",
        "api",
        "sites",
        "observations",
        "start",
        "end",
        "partial",
        "common",
        "check_network",
        "sites",
        "site",
        "srml_sites",
        "fetch",
        "api",
        "site",
        "start",
        "end",
        "obs",
        "obs",
        "observations",
        "obs",
        "site",
        "site",
        "obs",
        "site_observations",
        "common",
        "decode_extra_parameters",
        "obs",
        "obs_params",
        "obs_df",
        "var_label",
        "var_df",
        "rename",
        "columns",
        "var_label",
        "var_df",
        "pd",
        "Timestamp",
        "now",
        "tz",
        "obs",
        "site",
        "timezone",
        "var_df",
        "var_df",
        "last_valid_index",
        "logger",
        "info",
        "obs",
        "name",
        "var_df",
        "index",
        "strftime",
        "var_df",
        "index",
        "strftime",
        "var_df",
        "dropna",
        "var_df",
        "empty",
        "logger",
        "warning",
        "obs",
        "name",
        "obs_df",
        "index",
        "strftime",
        "obs_df",
        "index",
        "strftime",
        "api",
        "post_observation_values",
        "obs",
        "observation_id",
        "var_df",
        "start",
        "end",
        "HTTPError",
        "e",
        "logger",
        "error",
        "obs",
        "name",
        "e"
    ],
    "literals": [
        "'ghi_'",
        "'ghi'",
        "'dni_'",
        "'dni'",
        "'dhi_'",
        "'dhi'",
        "'wind_speed_'",
        "'wind_speed'",
        "'temp_air_'",
        "'air_temperature'",
        "'PO'",
        "'RO'",
        "'PF'",
        "'RF'",
        "'PQ'",
        "'RQ'",
        "'PH'",
        "'RH'",
        "'reference_data'",
        "'network_api_abbreviation'",
        "'observation_interval_length'",
        "f'Could not retrieve {file_type} for SRML data '",
        "f'for site {site.name} on {year}/{month} .'",
        "f'Site abbreviation: {station_code}'",
        "f'SRML returned an empty file for station'",
        "f'{site.name} on {year}/{month}.'",
        "'M'",
        "'M'",
        "f'Requesting data for SRML site {site.name}'",
        "f' on {month.strftime(\"%Y%m%d\")}.'",
        "\"%Y%m%d\"",
        "'_flag'",
        "'Could not find data to create observations '",
        "f'for SRML site {site.name}.'",
        "'Could not find data to create observations '",
        "f'for SRML site {site.name}.'",
        "'network_data_label'",
        "f'{site.name} {match}'",
        "f'Failed to create {variable} observation at Site '",
        "f'{site.name}. Error: {e}'",
        "'UO SRML'",
        "'network_data_label'",
        "'value'",
        "'quality_flag'",
        "'value'",
        "f'Updating {obs.name} from '",
        "f'{var_df.index[0].strftime(\"%Y%m%dT%H%MZ\")} '",
        "\"%Y%m%dT%H%MZ\"",
        "f'to {var_df.index[-1].strftime(\"%Y%m%dT%H%MZ\")}.'",
        "\"%Y%m%dT%H%MZ\"",
        "f'{obs.name} data empty from '",
        "f'{obs_df.index[0].strftime(\"%Y%m%dT%H%MZ\")} '",
        "\"%Y%m%dT%H%MZ\"",
        "f'to {obs_df.index[-1].strftime(\"%Y%m%dT%H%MZ\")}.'",
        "\"%Y%m%dT%H%MZ\"",
        "f'Posting data to {obs.name} failed'",
        "f'with error: {e}.'"
    ],
    "variables": [
        "srml_variable_map",
        "FILE_TYPE_MAP",
        "logger",
        "extra_params",
        "station_code",
        "interval_length",
        "file_types",
        "srml_month",
        "month_dfs",
        "srml_month",
        "all_period_data",
        "var_columns",
        "all_period_data",
        "start",
        "end",
        "extra_params",
        "site_df",
        "matches",
        "observation_extra_parameters",
        "srml_sites",
        "obs_df",
        "site_observations",
        "obs_params",
        "var_label",
        "var_df",
        "var_df",
        "var_df",
        "var_df",
        "var_df",
        "var_df"
    ],
    "comments": [
        "maps the desired variable names to those returned by pvlib.iotools",
        "maps SolarForecastArbiter interval_label to the SRML infix which",
        "designates the time resolution of each file. The list of file types",
        "is tried in order, so file types starting with 'P' designating",
        "processed data are listed first, such that if processed data exists",
        "we retrieve that first.",
        "The list file_types are listed with processed data",
        "file types first. On a successful retrieval we return",
        "the month of data, otherwise we log info and continue",
        "until we've exhausted the list.",
        "Need to extend the range of fetched data so that if start and end",
        "are in the same month we retrieve that month's file.",
        "Here, we pass a name with match instead of variable",
        "to differentiate between multiple observations of",
        "the same variable",
        "SRML files are provided by month, with future dates",
        "forward filled with missing values.",
        "e.g. On April 15th, An april file would contain valid",
        "data from April 1-15, and April 16-30 would contain",
        "NaNs during the day and 0s at night.",
        "",
        "To avoid inserting missing data, we select only up",
        "until the last valid index today.",
        "will need to remove dropna() call when json NaNs work.",
        "temporarily skip post with empty data"
    ],
    "docstrings": [
        "\"\"\"Tries a reuqest for each file type until successful or we\n    run out of filetypes.\n\n    Parameters\n    ----------\n    interval_length: int\n        The number of minutes between each timestep in the data. Used\n        to lookup filetypes in FILE_TYPE_MAP.\n    station: string\n        The two character station abbreviation found in filenames.\n    year: int\n        The year of the data to request.\n    month: int\n        The month of the data to request.\n\n    Returns\n    -------\n    DataFrame\n        A month of SRML data.\n    \"\"\"",
        "\"\"\"Retrieve observation data for a srml site between start and end.\n\n    Parameters\n    ----------\n    api : io.APISession\n        An APISession with a valid JWT for accessing the Reference Data\n        user.\n    site : datamodel.Site\n        Site object with the appropriate metadata.\n    start : datetime\n        The beginning of the period to request data for.\n    end : datetime\n        The end of the period to request data for.\n\n    Returns\n    -------\n    data : pandas.DataFrame\n        All of the requested data concatenated into a single DataFrame.\n    \"\"\"",
        "\"\"\"Creates an observaiton at the site for each variable in\n    an SRML site's file.\n\n    Parameters\n    ----------\n    api: io.api.APISession\n\n    site : datamodel.Site\n        The site object for which to create Observations.\n\n    Notes\n    -----\n    Since variables are labelled with an integer instrument\n    number, Observations are named with their variable and\n    instrument number found in the source files. \n    \n    e.g. A SRML file contains two columns labelled, 1001, and\n    1002. These columns represent GHI at instrument 1 and\n    instrument 2 respectively. The `pvlib.iotools` package\n    converts these to 'ghi_1' and 'ghi_2' for us. We use these\n    labels to differentiate between measurements recorded by\n    different instruments.\n    \"\"\"",
        "\"\"\"Post new observation data to a list of SRML Observations\n    from start to end.\n\n    api : solarforecastarbiter.io.api.APISession\n        An active Reference user session.\n    sites: list\n        List of all reference sites as Objects\n    start : datetime\n        The beginning of the period to request data for.\n    end : datetime\n        The end of the period to request data for.\n    \"\"\""
    ],
    "functions": [
        "request_data",
        "fetch",
        "initialize_site_observations",
        "update_observation_data"
    ],
    "classes": []
}