{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "math",
        "warnings",
        "torch",
        "torch",
        "nn",
        "nn",
        "torch",
        "distributions",
        "constraints",
        "pyro",
        "distributions",
        "torch_transform",
        "TransformModule",
        "pyro",
        "distributions",
        "util",
        "copy_docs_from",
        "copy_docs_from",
        "TransformModule",
        "TransformModule",
        "constraints",
        "real",
        "constraints",
        "real",
        "input_dim",
        "count_transforms",
        "HouseholderFlow",
        "cache_size",
        "input_dim",
        "count_transforms",
        "count_transforms",
        "input_dim",
        "warnings",
        "warn",
        "format",
        "count_transforms",
        "input_dim",
        "count_transforms",
        "nn",
        "Parameter",
        "torch",
        "Tensor",
        "count_transforms",
        "input_dim",
        "reset_parameters",
        "math",
        "sqrt",
        "u",
        "size",
        "u",
        "data",
        "uniform_",
        "stdv",
        "stdv",
        "x",
        "x",
        "u",
        "pow",
        "sum",
        "idx",
        "count_transforms",
        "u",
        "idx",
        "y",
        "sum",
        "dim",
        "keepdim",
        "u",
        "idx",
        "squared_norm",
        "idx",
        "y",
        "projection",
        "y",
        "y",
        "_call",
        "y",
        "x",
        "y",
        "torch",
        "zeros",
        "x",
        "size",
        "dtype",
        "x",
        "dtype",
        "layout",
        "x",
        "layout",
        "device",
        "x",
        "device"
    ],
    "literals": [
        "\"Number of Householder transforms, {}, is greater than input dimension {}, which is an \\\nover-parametrization!\""
    ],
    "variables": [
        "domain",
        "codomain",
        "bijective",
        "event_dim",
        "input_dim",
        "count_transforms",
        "u",
        "stdv",
        "y",
        "squared_norm",
        "projection",
        "y"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    A flow formed from multiple applications of the Householder transformation. A single Householder transformation\n    takes the form,\n\n        :math:`\\\\mathbf{y} = (I - 2*\\\\frac{\\\\mathbf{u}\\\\mathbf{u}^T}{||\\\\mathbf{u}||^2})\\\\mathbf{x}`\n\n    where :math:`\\\\mathbf{x}` are the inputs, :math:`\\\\mathbf{y}` are the outputs, and the learnable parameters\n    are :math:`\\\\mathbf{u}\\\\in\\\\mathbb{R}^D` for input dimension :math:`D`.\n\n    The transformation represents the reflection of :math:`\\\\mathbf{x}` through the plane passing through the\n    origin with normal :math:`\\\\mathbf{u}`.\n\n    :math:`D` applications of this transformation are able to transform standard i.i.d. standard Gaussian noise\n    into a Gaussian variable with an arbitrary covariance matrix. With :math:`K<D` transformations, one is able\n    to approximate a full-rank Gaussian distribution using a linear transformation of rank :math:`K`.\n\n    Together with `TransformedDistribution` this provides a way to create richer variational approximations.\n\n    Example usage:\n\n    >>> base_dist = dist.Normal(torch.zeros(10), torch.ones(10))\n    >>> flow = HouseholderFlow(10, count_transforms=5)\n    >>> pyro.module(\"my_flow\", p) # doctest: +SKIP\n    >>> flow_dist = dist.TransformedDistribution(base_dist, flow)\n    >>> flow_dist.sample()  # doctest: +SKIP\n        tensor([-0.4071, -0.5030,  0.7924, -0.2366, -0.2387, -0.1417,  0.0868,\n                0.1389, -0.4629,  0.0986])\n\n    :param input_dim: the dimension of the input (and output) variable.\n    :type input_dim: int\n    :param count_transforms: number of applications of Householder transformation to apply.\n    :type count_transforms: int\n\n    References:\n\n    Improving Variational Auto-Encoders using Householder Flow, [arXiv:1611.09630]\n    Tomczak, J. M., & Welling, M.\n\n    \"\"\"",
        "\"\"\"\n        :param x: the input into the bijection\n        :type x: torch.Tensor\n\n        Invokes the bijection x=>y; in the prototypical context of a TransformedDistribution `x` is a\n        sample from the base distribution (or the output of a previous flow)\n        \"\"\"",
        "\"\"\"\n        :param y: the output of the bijection\n        :type y: torch.Tensor\n\n        Inverts y => x. The Householder transformation, H, is \"involutory,\" i.e. H^2 = I. If you reflect a\n        point around a plane, then the same operation will reflect it back\n        \"\"\"",
        "\"\"\"\n        Calculates the elementwise determinant of the log jacobian. Householder flow is measure preserving,\n        so log(|detJ|) = 0\n        \"\"\""
    ],
    "functions": [
        "reset_parameters",
        "_call",
        "_inverse",
        "log_abs_det_jacobian"
    ],
    "classes": [
        "HouseholderFlow"
    ]
}