{
    "identifiers": [
        "pandas",
        "pd",
        "numpy",
        "np",
        "joblib",
        "dump",
        "load",
        "sklearn",
        "utils",
        "resample",
        "itertools",
        "product",
        "imblearn",
        "ensemble",
        "BalancedRandomForestClassifier",
        "sklearn",
        "metrics",
        "confusion_matrix",
        "recall_score",
        "f1_score",
        "pd",
        "read_parquet",
        "x",
        "y",
        "x",
        "y",
        "product",
        "periods",
        "periods",
        "train_df",
        "period",
        "isin",
        "training_range",
        "train_df",
        "period",
        "isin",
        "testing_range",
        "train_df",
        "train_flag",
        "train_df",
        "test_flag",
        "train",
        "drop",
        "axis",
        "set_index",
        "train",
        "set_index",
        "loc",
        "test",
        "drop",
        "axis",
        "set_index",
        "test",
        "set_index",
        "loc",
        "mode",
        "BalancedRandomForestClassifier",
        "n_jobs",
        "verbose",
        "n_estimators",
        "random_state",
        "rf",
        "fit",
        "X_train",
        "y_train",
        "dump",
        "rf",
        "mode",
        "load",
        "rf",
        "predict",
        "X_train",
        "confusion_matrix",
        "y_train",
        "y_train_pred",
        "recall_score",
        "y_train",
        "y_train_pred",
        "f1_score",
        "y_train",
        "y_train_pred",
        "rf",
        "predict",
        "X_test",
        "confusion_matrix",
        "y_test",
        "y_test_pred",
        "recall_score",
        "y_test",
        "y_test_pred",
        "f1_score",
        "y_test",
        "y_test_pred",
        "rf",
        "feature_importances_",
        "np",
        "argsort",
        "importances",
        "X_train",
        "columns",
        "f",
        "X_train",
        "shape",
        "f",
        "cols",
        "indices",
        "f",
        "importances",
        "indices",
        "f"
    ],
    "literals": [
        "'read'",
        "'df.parquet.gzip'",
        "\"-\"",
        "'Creating Test/Train Splits'",
        "'Splitting Data'",
        "'target'",
        "\"agent1\"",
        "\"agent2\"",
        "\"period\"",
        "\"agent1\"",
        "\"agent2\"",
        "\"period\"",
        "\"target\"",
        "'target'",
        "\"agent1\"",
        "\"agent2\"",
        "\"period\"",
        "\"agent1\"",
        "\"agent2\"",
        "\"period\"",
        "\"target\"",
        "'Complete'",
        "'train'",
        "'model.joblib'",
        "'read'",
        "'model.joblib'",
        "\"Recall Score (TRAIN): \"",
        "\"F1 (TRAIN): \"",
        "\"Recall Score (TEST): \"",
        "\"F1 (TEST): \"",
        "\"Feature ranking:\"",
        "'. Feature: '",
        "' '"
    ],
    "variables": [
        "mode",
        "train_df",
        "periods",
        "training_range",
        "testing_range",
        "train_flag",
        "test_flag",
        "train",
        "test",
        "X_train",
        "y_train",
        "X_test",
        "y_test",
        "rf",
        "rf",
        "y_train_pred",
        "y_test_pred",
        "importances",
        "indices",
        "cols"
    ],
    "comments": [
        "%% [markdown]",
        "# Supervised Link Prediction with the Armed Conflict Location Event Database",
        "## Modelling Notebook",
        "%%",
        "%% [markdown]",
        "# Read in training data",
        "From feature engineering phase",
        "%%",
        "%% [markdown]",
        "## Define the time periods of interest",
        "%%",
        "%% [markdown]",
        "## Set the test/train split",
        "1998-1 - 2017-12 as Train <br>",
        "2018-1 - 2018-12 as Test",
        "%%",
        "%%",
        "%%",
        "%% [markdown]",
        "# Model Training",
        "Here we shall be using a Balanced Random Forest from the imbalanced-learn package.",
        "A regular random forest takes random subsamples of the data when constructing each tree but",
        "a balanced random forest creates a subsample by upsampling the minority class.",
        "%%",
        "%% [markdown]",
        "# Model performance",
        "This is a very very imbalanced dataset, so accuracy shouldn't be the metric of",
        "overall performance.",
        "Accuracy doesn't tell us enough about false positives or false negatives (independently).",
        "We shall choose the metric of interest as recall. This is because (for example) a",
        "UN agent would be more concerned about false negatives than false positives. People could",
        "die if you get false negatives!",
        "%% [markdown]",
        "# Performance on Training data",
        "%%",
        "%% [markdown]",
        "#### Confusion Matrix",
        "%%",
        "%%",
        "%% [markdown]",
        "# Performance on Testing data",
        "%%",
        "%% [markdown]",
        "#### Confusion Matrix",
        "%%",
        "%%",
        "%% [markdown]",
        "# Feature Importances",
        "%%",
        "Print the feature ranking"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}