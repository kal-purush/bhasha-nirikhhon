{
    "identifiers": [
        "org",
        "apache",
        "calcite",
        "rel",
        "rules",
        "org",
        "apache",
        "calcite",
        "plan",
        "RelOptRuleCall",
        "org",
        "apache",
        "calcite",
        "plan",
        "RelOptUtil",
        "org",
        "apache",
        "calcite",
        "plan",
        "RelRule",
        "org",
        "apache",
        "calcite",
        "plan",
        "Strong",
        "org",
        "apache",
        "calcite",
        "rel",
        "RelNode",
        "org",
        "apache",
        "calcite",
        "rel",
        "core",
        "Join",
        "org",
        "apache",
        "calcite",
        "rel",
        "core",
        "JoinRelType",
        "org",
        "apache",
        "calcite",
        "rel",
        "logical",
        "LogicalJoin",
        "org",
        "apache",
        "calcite",
        "rel",
        "metadata",
        "RelMetadataQuery",
        "org",
        "apache",
        "calcite",
        "tools",
        "RelBuilder",
        "org",
        "apache",
        "calcite",
        "util",
        "ImmutableBitSet",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableList",
        "org",
        "immutables",
        "value",
        "Value",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Collectors",
        "Value",
        "Enclosing",
        "config",
        "config",
        "Override",
        "call",
        "join",
        "call",
        "rel",
        "relBuilder",
        "call",
        "builder",
        "mq",
        "call",
        "getMetadataQuery",
        "notNullableKeys",
        "ImmutableBitSet",
        "builder",
        "RelOptUtil",
        "conjunctions",
        "join",
        "getCondition",
        "forEach",
        "node",
        "Strong",
        "isStrong",
        "node",
        "notNullableKeys",
        "addAll",
        "RelOptUtil",
        "InputFinder",
        "bits",
        "node",
        "leftKeys",
        "rightKeys",
        "offset",
        "join",
        "getLeft",
        "getRowType",
        "getFieldCount",
        "notNullableKeys",
        "build",
        "asList",
        "forEach",
        "i",
        "i",
        "offset",
        "leftKeys",
        "add",
        "i",
        "rightKeys",
        "add",
        "i",
        "offset",
        "relBuilder",
        "push",
        "join",
        "getLeft",
        "withPredicates",
        "mq",
        "r",
        "r",
        "leftKeys",
        "stream",
        "r",
        "field",
        "r",
        "isNotNull",
        "collect",
        "Collectors",
        "toList",
        "newLeft",
        "relBuilder",
        "build",
        "relBuilder",
        "push",
        "join",
        "getRight",
        "withPredicates",
        "mq",
        "r",
        "r",
        "rightKeys",
        "stream",
        "r",
        "field",
        "r",
        "isNotNull",
        "collect",
        "Collectors",
        "toList",
        "newRight",
        "relBuilder",
        "build",
        "newLeft",
        "join",
        "getLeft",
        "newRight",
        "join",
        "getRight",
        "newJoin",
        "join",
        "copy",
        "join",
        "getTraitSet",
        "ImmutableList",
        "of",
        "newLeft",
        "newRight",
        "call",
        "transformTo",
        "newJoin",
        "Value",
        "Immutable",
        "Config",
        "DEFAULT",
        "ImmutableJoinDeriveIsNotNullFilterRule",
        "Config",
        "of",
        "withOperandSupplier",
        "b",
        "b",
        "operand",
        "predicate",
        "join",
        "join",
        "getJoinType",
        "JoinRelType",
        "INNER",
        "join",
        "getCondition",
        "isAlwaysTrue",
        "anyInputs",
        "Override"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Planner rule that derives IS NOT NULL predicates from a inner\n * {@link org.apache.calcite.rel.core.Join} and creates\n * {@link org.apache.calcite.rel.core.Filter}s with those predicates as new inputs of the join.\n *\n * Since the Null value can never match in the inner join and it can lead to skewness due to\n * too many Null values, a not-null filter can be created and pushed down into the input of join.\n *\n * Similar to {@link CoreRules#FILTER_INTO_JOIN}, it would try to create filters and push them into\n * the inputs of the join to filter data as much as possible before join.\n *",
        "* Rule configuration."
    ],
    "functions": [
        "JoinDeriveIsNotNullFilterRule",
        "onMatch",
        "JoinDeriveIsNotNullFilterRule",
        "toRule"
    ],
    "classes": [
        "JoinDeriveIsNotNullFilterRule"
    ]
}