{
    "identifiers": [
        "Collections",
        "Generic",
        "Text",
        "Numerics",
        "EnderPi",
        "Cryptography",
        "PseudoRandomFunction",
        "input",
        "CryptographicHash2",
        "hasher",
        "ComputeHash",
        "input",
        "_functions",
        "PseudoRandomFunction",
        "i",
        "_functions",
        "Length",
        "i",
        "_functions",
        "i",
        "PseudoRandomFunction",
        "i",
        "input",
        "ComputeHash",
        "input",
        "input",
        "requestedNumberOfOutputBytes",
        "InitializeState",
        "PadInput",
        "input",
        "AddEntropy",
        "paddedInput",
        "StirPool",
        "GetEntropy",
        "requestedNumberOfOutputBytes",
        "ClearState",
        "hash",
        "input",
        "output",
        "InitializeState",
        "PadInput",
        "input",
        "AddEntropy",
        "padded",
        "StirPool",
        "i",
        "output",
        "Length",
        "i",
        "output",
        "i",
        "_state",
        "StirPool",
        "ClearState",
        "input",
        "output",
        "InitializeState",
        "PadInput",
        "input",
        "AddEntropy",
        "padded",
        "StirPool",
        "i",
        "output",
        "Length",
        "i",
        "output",
        "i",
        "Convert",
        "ToUInt32",
        "_state",
        "UInt32",
        "MaxValue",
        "StirPool",
        "ClearState",
        "i",
        "_state",
        "Length",
        "i",
        "_state",
        "i",
        "_pointer",
        "bytesToRetrieve",
        "bytesToRetrieve",
        "_blockSize",
        "numberOfBlocks",
        "_blockSize",
        "bytesToRetrieve",
        "numberOfBlocks",
        "numberOfBlocks",
        "_blockSize",
        "i",
        "numberOfBlocks",
        "i",
        "j",
        "_blockSize",
        "j",
        "BitConverter",
        "GetBytes",
        "_state",
        "j",
        "Buffer",
        "BlockCopy",
        "newBuffer",
        "i",
        "_blockSize",
        "j",
        "StirPool",
        "bytesToRetrieve",
        "Buffer",
        "BlockCopy",
        "newBuffer",
        "output",
        "bytesToRetrieve",
        "output",
        "paddedInput",
        "i",
        "paddedInput",
        "Length",
        "_blockSize",
        "i",
        "_state",
        "BitConverter",
        "ToUInt64",
        "paddedInput",
        "i",
        "StirPool",
        "input",
        "input",
        "Length",
        "_blockSize",
        "numberOfBlocks",
        "_blockSize",
        "input",
        "Length",
        "numberOfBlocks",
        "numberOfBlocks",
        "numberOfBlocks",
        "_blockSize",
        "Buffer",
        "BlockCopy",
        "input",
        "newBuffer",
        "input",
        "Length",
        "Buffer",
        "BlockCopy",
        "BitConverter",
        "GetBytes",
        "input",
        "Length",
        "newBuffer",
        "_blockSize",
        "numberOfBlocks",
        "newBuffer",
        "_state",
        "_internalStateSize",
        "i",
        "_state",
        "Length",
        "i",
        "_state",
        "i",
        "_initialState",
        "i",
        "iterations",
        "i",
        "iterations",
        "i",
        "_state",
        "j",
        "_state",
        "Length",
        "j",
        "_state",
        "j",
        "_state",
        "j",
        "_functions",
        "_pointer",
        "F",
        "_state",
        "j",
        "_state",
        "_state",
        "Length",
        "first",
        "_pointer",
        "_pointer",
        "x",
        "key",
        "x",
        "key",
        "C2",
        "BitOperations",
        "RotateRight",
        "C4",
        "x",
        "x",
        "BitOperations",
        "RotateRight",
        "C6",
        "x",
        "x"
    ],
    "literals": [],
    "variables": [
        "_state",
        "_functions",
        "_initialState",
        "_pointer",
        "_internalStateSize",
        "_blockSize",
        "hasher",
        "i",
        "paddedInput",
        "hash",
        "padded",
        "i",
        "padded",
        "i",
        "i",
        "numberOfBlocks",
        "newBuffer",
        "i",
        "j",
        "output",
        "i",
        "numberOfBlocks",
        "newBuffer",
        "i",
        "i",
        "first",
        "j",
        "C2",
        "C4",
        "C6"
    ],
    "comments": [
        "The internal state, which is 1 kilobyte.",
        "</summary>",
        "A set of simple 64-bit keys whish is used in the internal round function.",
        "</summary>",
        "<remarks>",
        "Derived from the SHA256 hashes of 0-63.  These are added at each round of the Feistel network, so virtually any value will work.",
        "</remarks>",
        "This is an arbitrary initial state.",
        "</summary>",
        "<remarks>",
        "Derived from the SHA256 hashes of 0-15.",
        "</remarks>",
        "Pointer at the current constant to use.",
        "</summary>",
        "The internal state size, in number of ulongs.",
        "</summary>",
        "The block size, in number of ulongs.  This is the rate at which data leaves or enters the sponge.",
        "</summary>",
        "Static API for convenience.",
        "</summary>",
        "<remarks>",
        "This is included purely as a convenience.  This method is thread-safe.",
        "</remarks>",
        "<param name=\"input\">The byte array to hash.</param>",
        "<returns>The hash of the input.</returns>",
        "Public constructor.  This class doesn't maintain internal state.",
        "</summary>",
        "Computes a 256-bit hash.",
        "</summary>",
        "<param name=\"input\"></param>",
        "<returns></returns>",
        "The pool is only coarsely stirred during entropy addition.  The call below ensures that the hash is strong.",
        "Clear the internal state before returning the hash for security purposes.  Recovering the state could lead to an attack.",
        "Request an output stream of ulongs from a given input stream of ulongs.  Useful for key schedules.",
        "</summary>",
        "<param name=\"input\"></param>",
        "<param name=\"output\"></param>",
        "Request an output stream of ulongs from a given input stream of ulongs.  Useful for key schedules.",
        "</summary>",
        "<param name=\"input\"></param>",
        "<param name=\"output\"></param>",
        "Clears the internal state for security purposes.",
        "</summary>",
        "Retrieves entropy from the internal state.",
        "</summary>",
        "<param name=\"bytesToRetrieve\">How many bytes of entropy to retrive.</param>",
        "<returns>The requested entropy.</returns>",
        "grab the right integer to get enough bytes with padding",
        "This handles the case where the number of bytes requested is not a multiple of 8.",
        "block copy to the passed in buffer, discarding extra",
        "Adds all of the entropy to the entropy pool.",
        "</summary>",
        "<param name=\"paddedInput\">The entropy to add to the internal pool.</param>",
        "Correct input padding ensures that streams differing by an empty byte at the end will still hash differently.",
        "</summary>",
        "<remarks>",
        "This pads with a ulong which is the input length.",
        "</remarks>",
        "<param name=\"input\">The byte array to pad.</param>",
        "<returns>A copied, padded byte array.</returns>",
        "Initializes the internal state with an arbitrary initial state.",
        "</summary>",
        "Stirs the entropy pool the given number of times.",
        "</summary>",
        "<remarks>",
        "Requires 16 iterations minimum, in principle, to bring all the bits into communication with each other.",
        "</remarks>",
        "<param name=\"iterations\">The number of rounds of the feistel function to run.  1 is a coarse stir, 64 is a thorough blend.</param>",
        "RoundFunction(_state[j], _additionConstants[_pointer]);",
        "The below constants were all derived from a genetic algorithm.  The round function, by itself, passes",
        "randomness tests at 10 million deviates, and resists differential and linear cryptanalysis at 10 M deviates.",
        "This particular round function was designed with genetic programming.  It has strong randomness as a",
        "U64->U64 hash by itself, and is resistant to differential cryptanalysis.",
        "</summary>",
        "<remarks>",
        "The round function from the genetic algorithm was modified by pre-whitening the input by XOR",
        "with the key.",
        "</remarks>",
        "<param name=\"x\">The number to hash</param>",
        "<param name=\"key\">The round key</param>",
        "<returns></returns>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "Hash",
        "CryptographicHash2",
        "CryptographicHash2",
        "ComputeHash",
        "ComputeHash",
        "RequestStream",
        "RequestStream",
        "ClearState",
        "GetEntropy",
        "AddEntropy",
        "PadInput",
        "InitializeState",
        "StirPool",
        "RoundFunction"
    ],
    "classes": [
        "CryptographicHash2"
    ]
}