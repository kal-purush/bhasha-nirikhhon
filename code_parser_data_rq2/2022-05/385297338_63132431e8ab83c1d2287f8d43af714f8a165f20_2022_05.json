{
    "identifiers": [
        "pytest",
        "util",
        "new_test_table",
        "new_type",
        "user_type",
        "cassandra",
        "protocol",
        "InvalidRequest",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "cql",
        "test_keyspace",
        "new_test_table",
        "cql",
        "test_keyspace",
        "table",
        "cql",
        "prepare",
        "table",
        "i",
        "j",
        "k",
        "cql",
        "execute",
        "stmt",
        "i",
        "j",
        "k",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "pytest",
        "raises",
        "InvalidRequest",
        "match",
        "cql",
        "execute",
        "table",
        "pytest",
        "raises",
        "InvalidRequest",
        "match",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "cql",
        "test_keyspace",
        "new_test_table",
        "cql",
        "test_keyspace",
        "table",
        "cql",
        "prepare",
        "table",
        "i",
        "j",
        "cql",
        "execute",
        "stmt",
        "i",
        "j",
        "j",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "cql",
        "test_keyspace",
        "new_test_table",
        "cql",
        "test_keyspace",
        "table",
        "cql",
        "prepare",
        "table",
        "i",
        "j",
        "k",
        "cql",
        "execute",
        "stmt",
        "i",
        "j",
        "k",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "pytest",
        "raises",
        "InvalidRequest",
        "match",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "cql",
        "test_keyspace",
        "new_test_table",
        "cql",
        "test_keyspace",
        "table",
        "cql",
        "prepare",
        "table",
        "i",
        "j",
        "cql",
        "execute",
        "stmt",
        "i",
        "j",
        "cql",
        "execute",
        "table",
        "cql",
        "execute",
        "table",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "cql",
        "test_keyspace",
        "new_test_table",
        "cql",
        "test_keyspace",
        "table",
        "cql",
        "prepare",
        "table",
        "i",
        "j",
        "cql",
        "execute",
        "stmt",
        "i",
        "j",
        "x",
        "x",
        "x",
        "cql",
        "execute",
        "table",
        "p_tokens",
        "cql",
        "execute",
        "table",
        "sometoken",
        "x",
        "y",
        "x",
        "p_tokens",
        "x",
        "sometoken",
        "y",
        "result",
        "expected",
        "cql",
        "execute",
        "table",
        "sometoken",
        "x",
        "x",
        "p_tokens",
        "x",
        "sometoken",
        "result",
        "expected",
        "cql",
        "execute",
        "table",
        "sometoken",
        "somep",
        "result",
        "somep",
        "somep"
    ],
    "literals": [
        "\"issues #64 and #4244\"",
        "\"p int, c1 int, c2 int, c3 int, PRIMARY KEY (p, c1, c2, c3)\"",
        "f\"INSERT INTO {table} (p, c1, c2, c3) VALUES (1, ?, ?, ?)\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE p=1 AND c1=1\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE p=1 AND c1=1 AND c2=2\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE p=1 AND (c1, c2) = (1, 2)\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE p=1 AND c1=1 AND c2=2 and c3=1\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE p=1 AND (c1, c2) = (1, 2) and c3=1\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE p=1 AND c1=1 AND (c2, c3) = (2, 1)\"",
        "'ulti-column'",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE p=1 AND c2=2 AND (c1, c3) = (1, 1)\"",
        "'ulti-column'",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE (p, c1) = (1,1) AND c2 = 2 AND c3 = 1\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE p=1 AND c1<1\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE p=1 AND c1=1 AND c2<1\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE p=1 AND (c1,c2) < (0,2)\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE p=1 AND c1=1 AND (c2,c3) < (1,2)\"",
        "\"issue #6200\"",
        "\"p int, c1 int, c2 int, r int, PRIMARY KEY (p, c1, c2)\"",
        "f\"INSERT INTO {table} (p, c1, c2, r) VALUES (1, ?, ?, ?)\"",
        "f\"SELECT c1,c2,r FROM {table} WHERE p=1 AND (c1, c2) = (0,1)\"",
        "f\"SELECT c1,c2,r FROM {table} WHERE p=1 AND (c1, c2) = (0,1) AND r=1 ALLOW FILTERING\"",
        "f\"SELECT c1,c2,r FROM {table} WHERE p=1 AND (c1, c2) = (0,1) AND r=0 ALLOW FILTERING\"",
        "\"issue #64\"",
        "\"p int, c0 int, c1 int, c2 int, c3 int, PRIMARY KEY (p, c0, c1, c2, c3)\"",
        "f\"INSERT INTO {table} (p, c0, c1, c2, c3) VALUES (1, 1, ?, ?, ?)\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE c1=1 ALLOW FILTERING\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE c2=1 ALLOW FILTERING\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE (c1,c2) = (1,2) ALLOW FILTERING\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE (c2,c3) = (1,2) ALLOW FILTERING\"",
        "'ulti-column'",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE (c1,c3) = (1,2) ALLOW FILTERING\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE (c1,c2) = (1,2) AND c3=1 ALLOW FILTERING\"",
        "f\"SELECT c1,c2,c3 FROM {table} WHERE c1 = 1 AND (c2,c3) = (2,1) ALLOW FILTERING\"",
        "\"issue #4244\"",
        "\"p int, c1 int, c2 int, PRIMARY KEY (p, c1, c2)\"",
        "f\"INSERT INTO {table} (p, c1, c2) VALUES (1, ?, ?)\"",
        "f\"SELECT c1,c2 FROM {table} WHERE p=1 AND (c1,c2) > (1,2)\"",
        "f\"SELECT c1,c2 FROM {table} WHERE p=1 AND (c1,c2) > (1,2) AND c1 < 2\"",
        "\"issue #4244\"",
        "\"p int, c int, PRIMARY KEY (p, c)\"",
        "f\"INSERT INTO {table} (p, c) VALUES (?, ?)\"",
        "f\"SELECT p,token(p) FROM {table} WHERE c = 1 ALLOW FILTERING\"",
        "f\"SELECT p,c FROM {table} WHERE token(p) < {sometoken}\"",
        "f\"SELECT p,c FROM {table} WHERE token(p) < {sometoken} AND c=1 ALLOW FILTERING\"",
        "f\"SELECT p,c FROM {table} WHERE token(p) <= {sometoken} AND p = {somep}\""
    ],
    "variables": [
        "stmt",
        "stmt",
        "stmt",
        "stmt",
        "stmt",
        "p_tokens",
        "somep",
        "sometoken",
        "result",
        "expected",
        "result",
        "expected",
        "result"
    ],
    "comments": [
        "Copyright 2022-present ScyllaDB",
        "",
        "SPDX-License-Identifier: AGPL-3.0-or-later",
        "",
        "Tests for scanning SELECT requests (which read many rows and/or many",
        "partitions).",
        "We have a separate test file test_filtering.py for scans which also involve",
        "filtering, and test_allow_filtering.py for checking when \"ALLOW FILTERING\"",
        "is needed in scan. test_secondary_index.py also contains tests for scanning",
        "using a secondary index.",
        "",
        "Test that in a table with multiple clustering-key columns, we can have",
        "multi-column restrictions on involving various legal combinations of",
        "clustering key columns. multi-column restrictions are expressions involving",
        "tuples of columns - such as (c2, c3) = (2,3) or (c2, c3) < (2,3).",
        "This test focuses on cases which do not need ALLOW FILTERING. The next",
        "test will focus on those that do.",
        "Reproduces issue #64 and #4244",
        "Restrictions with equality on a full prefix of clustering keys do",
        "not require ALLOW FILTERING. This prefix may be composed of",
        "single-column restrictions or multi-column restrictions:",
        "Reproduces #4244:",
        "Reproduces #64:",
        "Multi-column restrictions are only allowed on adjacent clustering",
        "columns - it cannot involved non-adjacent clustering columns, or",
        "partition columns.",
        "Restrictions with inequality on a full prefix of clustering keys",
        "ending in the inequality also do not require ALLOW FILTERING.",
        "The inequality may be composed of single-column restrictions or",
        "multi-column restrictions:",
        "Reproduces #64:",
        "Test that if we have multi-column restrictions on the clustering key",
        "and additional filtering on regular columns, both restrictions are obeyed.",
        "Reproduces #6200.",
        "Since in that result r=1, adding \"AND r=1\" should return the same",
        "result, and adding \"AND r=0\" should return nothing.",
        "Reproduces #6200:",
        "Like the previous test, just in cases that require ALLOW FILTERING.",
        "We add another clustering key column to ensure that filtering *in*",
        "a long partition is really needed - not just filtering on the partitions",
        "(these are two different code paths).",
        "Check various equality conditions with single and multi-column",
        "restrictions. The conditions do not restrict p or c0, so they",
        "require ALLOW FILTERING and use Scylla's filtering code path.",
        "All of the tests below reproduce #64 because the restriction",
        "\"skipped\" c0.",
        "Test that it is allowed for the same column to participate in both a muli-",
        "column restriction and a single-column restriction - for example",
        "(c1,c2) > (0,1) AND c1<10",
        "Reproduces #4244. Contrasting with the other reproducers for #4244 above,",
        "in this test the single-column restriction is on the same column as the",
        "multi-column restriction, not a different column.",
        "Reproduces #4244:",
        "Cassandra does not support the following request, saying that",
        "\"Column \"c2\" cannot be restricted by two inequalities not starting",
        "with the same column\". I think this is a Cassandra bug - such a",
        "query could have been supported with ALLOW FILTERING, but for",
        "now, let's just not test this case.",
        "assert list(cql.execute(f\"SELECT c1,c2 FROM {table} WHERE p=1 AND (c1,c2) > (1,2) AND c2 < 2 ALLOW FILTERING\")) == [(2,0), (2,1)]",
        "Test that a token restriction can be combined with a non-token restriction,",
        "on the same column and on a different column..",
        "Reproduces issue #4244 (note that this is a different aspect of #4244 than",
        "the multi-column restriction problems reproduced by other tests above).",
        "We don't know which tokens the partitions keys 0..9 got, so we need",
        "to retrieve them first:",
        "Check just token(p) < sometoken:",
        "the fifth element",
        "Now check combination of restriction on token(p) and on c:",
        "Now check combination of restriction on token(p) and on p itself",
        "This reproduces issue #4244."
    ],
    "docstrings": [],
    "functions": [
        "test_multi_column_restrictions_ck",
        "test_multi_column_restrictions_and_filtering",
        "test_multi_column_restrictions_ck_filtering",
        "test_multi_column_and_single_column_restriction_same_ck",
        "test_restriction_token_and_nontoken"
    ],
    "classes": []
}