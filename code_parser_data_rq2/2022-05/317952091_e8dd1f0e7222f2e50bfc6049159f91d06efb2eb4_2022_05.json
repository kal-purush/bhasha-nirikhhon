{
    "identifiers": [
        "com",
        "modrinth",
        "minotaur",
        "dependencies",
        "container",
        "com",
        "modrinth",
        "minotaur",
        "dependencies",
        "Dependency",
        "org",
        "gradle",
        "api",
        "NamedDomainObjectContainer",
        "org",
        "gradle",
        "api",
        "model",
        "ObjectFactory",
        "javax",
        "inject",
        "Inject",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Collectors",
        "dependencies",
        "incompatible",
        "optional",
        "required",
        "Inject",
        "objects",
        "dependencies",
        "objects",
        "domainObjectContainer",
        "incompatible",
        "objects",
        "newInstance",
        "dependencies",
        "optional",
        "objects",
        "newInstance",
        "dependencies",
        "required",
        "objects",
        "newInstance",
        "dependencies",
        "dependencies",
        "stream",
        "NamedDependency",
        "getDependency",
        "collect",
        "Collectors",
        "toList",
        "incompatible",
        "optional",
        "required"
    ],
    "literals": [],
    "variables": [
        "dependencies",
        "incompatible",
        "optional",
        "required"
    ],
    "comments": [],
    "docstrings": [
        "* the Nested Dependencies configuration",
        "* Instantiates a new dependencies configuration.\n     *\n     * @param objects ObjectFactory",
        "* Returns the complete NamedDependency container set mapped and collected as a {@literal List<Dependency>}\n     *\n     * @return {@literal List<Dependency>}",
        "* Retrieve the reference to an {@link NamedDependencyContainer.Incompatible} instance.\n     * Provided as a utility method for external uses.\n     *\n     * @return incompatible {@link NamedDependencyContainer.Incompatible}",
        "* Retrieve the reference to an {@link NamedDependencyContainer.Optional} instance.\n     * Provided as a utility method for external uses.\n     *\n     * @return optional {@link NamedDependencyContainer.Optional}",
        "* Retrieve the reference to an {@link NamedDependencyContainer.Required} instance.\n     * Provided as a utility method for external uses.\n     *\n     * @return required {@link NamedDependencyContainer.Required}"
    ],
    "functions": [
        "DependencyDSL",
        "getNamedDependenciesAsList",
        "getIncompatible",
        "getOptional",
        "getRequired"
    ],
    "classes": [
        "DependencyDSL"
    ]
}