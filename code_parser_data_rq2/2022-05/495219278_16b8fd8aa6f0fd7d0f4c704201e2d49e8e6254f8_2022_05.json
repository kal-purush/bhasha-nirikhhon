{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "DesignPatten",
        "Practice",
        "Structural",
        "Facade",
        "SubSystem1",
        "sys1",
        "SubSystem2",
        "sys2",
        "sys1",
        "sys1",
        "sys2",
        "sys2",
        "output",
        "sys1",
        "Task1",
        "output",
        "sys2",
        "Task2",
        "output",
        "sys1",
        "TaskA",
        "output",
        "sys2",
        "TaskB",
        "output",
        "SubSystem1",
        "SubSystem2",
        "Facade",
        "sys1",
        "sys2",
        "Write",
        "facade"
    ],
    "literals": [
        "\"SubSystem1->Task1\\r\\n\"",
        "\"SubSystem1->TaskA\\r\\n\"",
        "\"SubSystem2->Task2\\r\\n\"",
        "\"SubSystem2->TaskB\\r\\n\"",
        "\"\""
    ],
    "variables": [
        "SubSystem1",
        "sys1",
        "SubSystem2",
        "sys2",
        "output",
        "SubSystem1",
        "sys1",
        "SubSystem2",
        "sys2",
        "Facade",
        "facade"
    ],
    "comments": [
        "Facade is a structural design pattern that provides a simplified (but limited) interface to a complex system of classes, library or framework.",
        "While Facade decreases the overall complexity of the application, it also helps to move unwanted dependencies to one place."
    ],
    "docstrings": [],
    "functions": [
        "Task1",
        "TaskA",
        "Task2",
        "TaskB",
        "Facade",
        "Test"
    ],
    "classes": [
        "SubSystem1",
        "SubSystem2",
        "Facade",
        "Example1Client"
    ]
}