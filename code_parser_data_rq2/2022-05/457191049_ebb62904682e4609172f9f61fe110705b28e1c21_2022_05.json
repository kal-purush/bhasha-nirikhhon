{
    "identifiers": [
        "Service",
        "Inject",
        "winston",
        "config",
        "Subscription",
        "SubscriptionModel",
        "SubscriptionStatus",
        "exec",
        "execSync",
        "spawn",
        "fs",
        "cron_parser",
        "getFileContentByName",
        "concurrentRun",
        "fileExist",
        "promises",
        "existsSync",
        "promisify",
        "Op",
        "path",
        "Service",
        "Inject",
        "logger",
        "winston",
        "payload",
        "Subscription",
        "payload",
        "tab",
        "doc",
        "payload",
        "SubscriptionModel",
        "payload",
        "payload",
        "payload",
        "newDoc",
        "payload",
        "SubscriptionModel",
        "payload",
        "payload",
        "payload",
        "last_running_time",
        "options",
        "last_running_time",
        "SubscriptionModel",
        "options",
        "ids",
        "ids",
        "SubscriptionModel",
        "ids",
        "query",
        "SubscriptionModel",
        "query",
        "doc",
        "doc",
        "ids",
        "SubscriptionModel",
        "SubscriptionStatus",
        "ids",
        "concurrentRun",
        "ids",
        "id",
        "id",
        "ids",
        "SubscriptionModel",
        "ids",
        "doc",
        "docs",
        "doc",
        "process",
        "doc",
        "error",
        "error",
        "doc",
        "path",
        "config",
        "doc",
        "doc",
        "fileExist",
        "absolutePath",
        "logFileExist",
        "err",
        "err",
        "fs",
        "absolutePath",
        "SubscriptionModel",
        "SubscriptionStatus",
        "ids",
        "name",
        "name",
        "promisify",
        "exec",
        "execAsync",
        "taskCommand",
        "pid",
        "pid",
        "execAsync",
        "pid",
        "pid",
        "pids",
        "pids",
        "id",
        "pids",
        "id",
        "execAsync",
        "c",
        "stderr",
        "killLogs",
        "stderr",
        "stdout",
        "killLogs",
        "stdout",
        "error",
        "killLogs",
        "error",
        "killLogs",
        "killLogs",
        "e",
        "e",
        "cronId",
        "resolve",
        "cronId",
        "cron",
        "SubscriptionStatus",
        "resolve",
        "path",
        "config",
        "log_path",
        "log_path",
        "fileExist",
        "absolutePath",
        "id",
        "spawn",
        "cmdStr",
        "SubscriptionModel",
        "SubscriptionStatus",
        "cp",
        "cp",
        "data",
        "logFileExist",
        "fs",
        "absolutePath",
        "data",
        "cp",
        "err",
        "logFileExist",
        "fs",
        "absolutePath",
        "err",
        "cp",
        "code",
        "signal",
        "cp",
        "code",
        "signal",
        "SubscriptionModel",
        "SubscriptionStatus",
        "resolve",
        "cp",
        "code",
        "cp",
        "code",
        "SubscriptionModel",
        "SubscriptionStatus",
        "resolve",
        "ids",
        "SubscriptionModel",
        "ids",
        "ids",
        "SubscriptionModel",
        "ids",
        "id",
        "doc",
        "path",
        "config",
        "doc",
        "doc",
        "fileExist",
        "absolutePath",
        "logFileExist",
        "getFileContentByName",
        "absolutePath",
        "id",
        "doc",
        "doc",
        "path",
        "doc",
        "path",
        "config",
        "relativeDir",
        "existsSync",
        "dir",
        "promises",
        "dir",
        "files",
        "x",
        "x",
        "relativeDir",
        "config",
        "fs",
        "dir",
        "x",
        "a",
        "b",
        "b",
        "a"
    ],
    "literals": [
        "'typedi'",
        "'winston'",
        "'../config'",
        "'../data/subscription'",
        "'child_process'",
        "'fs'",
        "'cron-parser'",
        "'../config/util'",
        "'fs'",
        "'util'",
        "'sequelize'",
        "'path'",
        "'logger'",
        "string",
        "${doc.log_path}",
        "\\n${err}",
        "''",
        "${absolutePath}",
        "${str}\\n## 执行结束...  ${new Date()\n            .toLocaleString('zh', { hour12: false })\n            .replace(' 24:', ' 00:')}",
        "'zh'",
        "' 24:'",
        "' 00:'",
        "string",
        "ps -ef | grep \"${name}\" | grep -v grep | awk '{print $1}'",
        "pstree -p ${pid}",
        "kill -9 ${id.slice(1)}",
        "''",
        "${log_path}",
        "'Running job'",
        "'ID: '",
        "'Original command: '",
        "''",
        "'/bin/bash'",
        "'data'",
        "${absolutePath}",
        "${data}",
        "'error'",
        "${absolutePath}",
        "${JSON.stringify(err)}",
        "'exit'",
        "${''} pid: ${cp.pid} exit ${code} signal ${signal}",
        "''",
        "'close'",
        "${''} pid: ${cp.pid} closed ${code}",
        "''",
        "''",
        "${doc.log_path}",
        "${absolutePath}",
        "${doc.log_path}",
        "''",
        "${dir}/${x}"
    ],
    "variables": [
        "tab",
        "doc",
        "newDoc",
        "options",
        "doc",
        "docs",
        "err",
        "absolutePath",
        "logFileExist",
        "taskCommand",
        "execAsync",
        "pid",
        "pids",
        "killLogs",
        "c",
        "cron",
        "cron",
        "absolutePath",
        "logFileExist",
        "cmdStr",
        "cp",
        "doc",
        "absolutePath",
        "logFileExist",
        "doc",
        "relativeDir",
        "dir",
        "files"
    ],
    "comments": [
        "node 执行脚本时还会有10个子进程，但是ps -ef中不存在，所以截取前三个"
    ],
    "docstrings": [],
    "functions": [
        "create",
        "insert",
        "update",
        "updateDb",
        "status",
        "remove",
        "getDb",
        "run",
        "stop",
        "killTask",
        "runSingle",
        "disabled",
        "enabled",
        "log",
        "logs"
    ],
    "classes": [
        "SubscriptionService"
    ]
}