{
    "identifiers": [
        "Text",
        "Mesh",
        "",
        "anchorX",
        "anchorY",
        "curveRadius",
        "arg",
        "curveRadius",
        "direction",
        "font",
        "fontSize",
        "letterSpacing",
        "lineHeight",
        "maxWidth",
        "overflowWrap",
        "textAlign",
        "textIndent",
        "whiteSpace",
        "material",
        "arg",
        "material",
        "color",
        "colorRanges",
        "outlineWidth",
        "outlineColor",
        "outlineOpacity",
        "outlineBlur",
        "outlineOffsetX",
        "outlineOffsetY",
        "strokeWidth",
        "strokeColor",
        "strokeOpacity",
        "fillOpacity",
        "depthOffset",
        "clipRect",
        "orientation",
        "glyphGeometryDetail",
        "arg",
        "glyphGeometryDetail",
        "sdfGlyphSize",
        "gpuAccelerateSDF",
        "debugSDF",
        "sync",
        "callback",
        "_needsSync",
        "_queuedSyncs",
        "_isSyncing",
        "_textRenderInfo",
        "onBeforeRender",
        "renderer",
        "scene",
        "camera",
        "geometry",
        "material",
        "group",
        "onAfterRender",
        "renderer",
        "scene",
        "camera",
        "geometry",
        "material",
        "group",
        "dispose",
        "get",
        "textRenderInfo",
        "_defaultMaterial",
        "MeshBasicMaterial",
        "_derivedMaterial",
        "_baseMaterial",
        "customDepthMaterial",
        "customDistanceMaterial",
        "_prepareForRender",
        "material",
        "_parsePercent",
        "value",
        "localPositionToTextCoords",
        "position",
        "target",
        "Vector2",
        "Vector2",
        "worldPositionToTextCoords",
        "position",
        "target",
        "Vector2",
        "Vector2",
        "raycast",
        "raycaster",
        "intersects",
        "copy",
        "source",
        "Text",
        "geometry",
        "clone",
        "Mesh"
    ],
    "literals": [
        "\"troika-three-text\"",
        "\"three\"",
        "\"three\"",
        "\"three\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"three/src/objects/Mesh.js\"",
        "\"three/src/materials/MeshBasicMaterial.js\"",
        "\"three/src/math/Vector2.js\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* @class Text\n     *\n     * A ThreeJS Mesh that renders a string of text on a plane in 3D space using signed distance\n     * fields (SDF).",
        "* @member {string} text\n         * The string of text to be rendered.",
        "* @member {number|string} anchorX\n         * Defines the horizontal position in the text block that should line up with the local origin.\n         * Can be specified as a numeric x position in local units, a string percentage of the total\n         * text block width e.g. `'25%'`, or one of the following keyword strings: 'left', 'center',\n         * or 'right'.",
        "* @member {number|string} anchorX\n         * Defines the vertical position in the text block that should line up with the local origin.\n         * Can be specified as a numeric y position in local units (note: down is negative y), a string\n         * percentage of the total text block height e.g. `'25%'`, or one of the following keyword strings:\n         * 'top', 'top-baseline', 'top-cap', 'top-ex', 'middle', 'bottom-baseline', or 'bottom'.",
        "* @member {string} direction\n         * Sets the base direction for the text. The default value of \"auto\" will choose a direction based\n         * on the text's content according to the bidi spec. A value of \"ltr\" or \"rtl\" will force the direction.",
        "* @member {string} font\n         * URL of a custom font to be used. Font files can be in .ttf, .otf, or .woff (not .woff2) formats.\n         * Defaults to the Roboto font loaded from Google Fonts.",
        "* @member {number} fontSize\n         * The size at which to render the font in local units; corresponds to the em-box height\n         * of the chosen `font`.",
        "* @member {number} letterSpacing\n         * Sets a uniform adjustment to spacing between letters after kerning is applied. Positive\n         * numbers increase spacing and negative numbers decrease it.",
        "* @member {number|string} lineHeight\n         * Sets the height of each line of text, as a multiple of the `fontSize`. Defaults to 'normal'\n         * which chooses a reasonable height based on the chosen font's ascender/descender metrics.",
        "* @member {number} maxWidth\n         * The maximum width of the text block, above which text may start wrapping according to the\n         * `whiteSpace` and `overflowWrap` properties.",
        "* @member {string} overflowWrap\n         * Defines how text wraps if the `whiteSpace` property is `normal`. Can be either `'normal'`\n         * to break at whitespace characters, or `'break-word'` to allow breaking within words.\n         * Defaults to `'normal'`.",
        "* @member {string} textAlign\n         * The horizontal alignment of each line of text within the overall text bounding box.",
        "* @member {number} textIndent\n         * Indentation for the first character of a line; see CSS `text-indent`.",
        "* @member {string} whiteSpace\n         * Defines whether text should wrap when a line reaches the `maxWidth`. Can\n         * be either `'normal'` (the default), to allow wrapping according to the `overflowWrap` property,\n         * or `'nowrap'` to prevent wrapping. Note that `'normal'` here honors newline characters to\n         * manually break lines, making it behave more like `'pre-wrap'` does in CSS.",
        "* @member {string|number|THREE.Color} color\n         * This is a shortcut for setting the `color` of the text's material. You can use this\n         * if you don't want to specify a whole custom `material`. Also, if you do use a custom\n         * `material`, this color will only be used for this particuar Text instance, even if\n         * that same material instance is shared across multiple Text objects.",
        "* @member {object|null} colorRanges\n         * WARNING: This API is experimental and may change.\n         * This allows more fine-grained control of colors for individual or ranges of characters,\n         * taking precedence over the material's `color`. Its format is an Object whose keys each\n         * define a starting character index for a range, and whose values are the color for each\n         * range. The color value can be a numeric hex color value, a `THREE.Color` object, or\n         * any of the strings accepted by `THREE.Color`.",
        "* @member {number|string} outlineWidth\n         * WARNING: This API is experimental and may change.\n         * The width of an outline/halo to be drawn around each text glyph using the `outlineColor` and `outlineOpacity`.\n         * Can be specified as either an absolute number in local units, or as a percentage string e.g.\n         * `\"12%\"` which is treated as a percentage of the `fontSize`. Defaults to `0`, which means\n         * no outline will be drawn unless an `outlineOffsetX/Y` or `outlineBlur` is set.",
        "* @member {string|number|THREE.Color} outlineColor\n         * WARNING: This API is experimental and may change.\n         * The color of the text outline, if `outlineWidth`/`outlineBlur`/`outlineOffsetX/Y` are set.\n         * Defaults to black.",
        "* @member {number} outlineOpacity\n         * WARNING: This API is experimental and may change.\n         * The opacity of the outline, if `outlineWidth`/`outlineBlur`/`outlineOffsetX/Y` are set.\n         * Defaults to `1`.",
        "* @member {number|string} outlineBlur\n         * WARNING: This API is experimental and may change.\n         * A blur radius applied to the outer edge of the text's outline. If the `outlineWidth` is\n         * zero, the blur will be applied at the glyph edge, like CSS's `text-shadow` blur radius.\n         * Can be specified as either an absolute number in local units, or as a percentage string e.g.\n         * `\"12%\"` which is treated as a percentage of the `fontSize`. Defaults to `0`.",
        "* @member {number|string} outlineOffsetX\n         * WARNING: This API is experimental and may change.\n         * A horizontal offset for the text outline.\n         * Can be specified as either an absolute number in local units, or as a percentage string e.g. `\"12%\"`\n         * which is treated as a percentage of the `fontSize`. Defaults to `0`.",
        "* @member {number|string} outlineOffsetY\n         * WARNING: This API is experimental and may change.\n         * A vertical offset for the text outline.\n         * Can be specified as either an absolute number in local units, or as a percentage string e.g. `\"12%\"`\n         * which is treated as a percentage of the `fontSize`. Defaults to `0`.",
        "* @member {number|string} strokeWidth\n         * WARNING: This API is experimental and may change.\n         * The width of an inner stroke drawn inside each text glyph using the `strokeColor` and `strokeOpacity`.\n         * Can be specified as either an absolute number in local units, or as a percentage string e.g. `\"12%\"`\n         * which is treated as a percentage of the `fontSize`. Defaults to `0`.",
        "* @member {string|number|THREE.Color} strokeColor\n         * WARNING: This API is experimental and may change.\n         * The color of the text stroke, if `strokeWidth` is greater than zero. Defaults to gray.",
        "* @member {number} strokeOpacity\n         * WARNING: This API is experimental and may change.\n         * The opacity of the stroke, if `strokeWidth` is greater than zero. Defaults to `1`.",
        "* @member {number} fillOpacity\n         * WARNING: This API is experimental and may change.\n         * The opacity of the glyph's fill from 0 to 1. This behaves like the material's `opacity` but allows\n         * giving the fill a different opacity than the `strokeOpacity`. A fillOpacity of `0` makes the\n         * interior of the glyph invisible, leaving just the `strokeWidth`. Defaults to `1`.",
        "* @member {number} depthOffset\n         * This is a shortcut for setting the material's `polygonOffset` and related properties,\n         * which can be useful in preventing z-fighting when this text is laid on top of another\n         * plane in the scene. Positive numbers are further from the camera, negatives closer.",
        "* @member {Array<number>} clipRect\n         * If specified, defines a `[minX, minY, maxX, maxY]` of a rectangle outside of which all\n         * pixels will be discarded. This can be used for example to clip overflowing text when\n         * `whiteSpace='nowrap'`.",
        "* @member {string} orientation\n         * Defines the axis plane on which the text should be laid out when the mesh has no extra\n         * rotation transform. It is specified as a string with two axes: the horizontal axis with\n         * positive pointing right, and the vertical axis with positive pointing up. By default this\n         * is '+x+y', meaning the text sits on the xy plane with the text's top toward positive y\n         * and facing positive z. A value of '+x-z' would place it on the xz plane with the text's\n         * top toward negative z and facing positive y.",
        "* @member {number|null} sdfGlyphSize\n         * The size of each glyph's SDF (signed distance field) used for rendering. This must be a\n         * power-of-two number. Defaults to 64 which is generally a good balance of size and quality\n         * for most fonts. Larger sizes can improve the quality of glyph rendering by increasing\n         * the sharpness of corners and preventing loss of very thin lines, at the expense of\n         * increased memory footprint and longer SDF generation time.",
        "* @member {boolean} gpuAccelerateSDF\n         * When `true`, the SDF generation process will be GPU-accelerated with WebGL when possible,\n         * making it much faster especially for complex glyphs, and falling back to a JavaScript version\n         * executed in web workers when support isn't available. It should automatically detect support,\n         * but it's still somewhat experimental, so you can set it to `false` to force it to use the JS\n         * version if you encounter issues with it.",
        "* Updates the text rendering according to the current text-related configuration properties.\n         * This is an async process, so you can pass in a callback function to be executed when it\n         * finishes.\n         * @param {function} [callback]",
        "* Initiate a sync if needed - note it won't complete until next frame at the\n         * earliest so if possible it's a good idea to call sync() manually as soon as\n         * all the properties have been set.\n         * @override",
        "* Shortcut to dispose the geometry specific to this instance.\n         * Note: we don't also dispose the derived material here because if anything else is\n         * sharing the same base material it will result in a pause next frame as the program\n         * is recompiled. Instead users can dispose the base material manually, like normal,\n         * and we'll also dispose the derived material at that time.",
        "* @property {TroikaTextRenderInfo|null} textRenderInfo\n         * @readonly\n         * The current processed rendering data for this TextMesh, returned by the TextBuilder after\n         * a `sync()` call. This will be `null` initially, and may be stale for a short period until\n         * the asynchrous `sync()` process completes.",
        "* Translate a point in local space to an x/y in the text plane.",
        "* Translate a point in world space to an x/y in the text plane.",
        "* @override Custom raycasting to test against the whole text block's max rectangular bounds\n         * TODO is there any reason to make this more granular, like within individual line or glyph rects?"
    ],
    "functions": [],
    "classes": []
}