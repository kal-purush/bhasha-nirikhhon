{
    "identifiers": [
        "pytest",
        "collections",
        "defaultdict",
        "dataclasses",
        "dataclass",
        "typing",
        "DefaultDict",
        "starkware",
        "crypto",
        "signature",
        "fast_pedersen_hash",
        "pedersen_hash",
        "dataclass",
        "frozen",
        "eq",
        "DefaultDict",
        "MerkleNodeKey",
        "height",
        "height",
        "_initailize_zeros",
        "EMPTY_LEAF_VAL",
        "_",
        "height",
        "zeros",
        "append",
        "current_empty_value",
        "pedersen_hash",
        "current_empty_value",
        "current_empty_value",
        "zeros",
        "reverse",
        "current_empty_value",
        "height",
        "leaves",
        "MerkleTree",
        "height",
        "leaf",
        "leaves",
        "tree",
        "insert",
        "leaf",
        "tree",
        "root",
        "value",
        "next_leaf",
        "height",
        "_insert_impl",
        "value",
        "next_leaf",
        "height",
        "new_root",
        "next_leaf",
        "new_root",
        "value",
        "index",
        "height",
        "height",
        "value",
        "merkle_entries",
        "MerkleNodeKey",
        "height",
        "index",
        "value",
        "index",
        "index",
        "index",
        "merkle_entries",
        "get",
        "MerkleNodeKey",
        "height",
        "neighbor_index",
        "zeros",
        "height",
        "pedersen_hash",
        "value",
        "neighbor",
        "index",
        "pedersen_hash",
        "neighbor",
        "value",
        "index",
        "_insert_impl",
        "next_value",
        "parent_index",
        "height"
    ],
    "literals": [
        "\"tree full\""
    ],
    "variables": [
        "EMPTY_LEAF_VAL",
        "height",
        "index",
        "height",
        "merkle_entries",
        "next_leaf",
        "root",
        "zeros",
        "height",
        "next_leaf",
        "zeros",
        "merkle_entries",
        "root",
        "current_empty_value",
        "current_empty_value",
        "tree",
        "new_root",
        "root",
        "neighbor_index",
        "neighbor",
        "next_value",
        "parent_index"
    ],
    "comments": [
        "",
        "Constants #",
        "",
        "The value on an empty leaf in the Merkle tree, defined to be keccak256('renegade')",
        "taken modulo the Cairo field",
        "",
        "Merkle Tree #",
        "",
        "The height in the Merkle tree that this node occurs at",
        "height 0 is the root",
        "The index of the node in the list of nodes at the given height",
        "the leftmost node is at index 0",
        "The height of the tree",
        "A sparse representation of the entires in the tree",
        "The next leaf index that is unoccupied",
        "The current root of the tree",
        "The zero value of each tree",
        "Append and hash with self to get the empty value for the next level in the tree",
        "Reverse the zeros list so that index 0 is the root",
        "Compute a new root and update the index",
        "Insert the value into the sparse storage",
        "Select the index of the neighbor to hash with, if the current insertion",
        "index is 0 (mod 2) then it is a left hand node, otherwise it is a right",
        "hand node",
        "Compute the index of the parent node in the tree"
    ],
    "docstrings": [
        "\"\"\"\nAn implementation of a merkle tree for testing\n\"\"\"",
        "\"\"\"\n    A key into the default dict\n    \"\"\"",
        "\"\"\"\n    A simple implementation of a Merkle tree for testing using the\n    StarkNet pedersen hash. Implemented sparsely\n    \"\"\"",
        "\"\"\"\n        Initializes the Merkle tree\n        \"\"\"",
        "\"\"\"\n        Setup the zero values at each level of the tree\n\n        :return: The root of the empty tree\n        \"\"\"",
        "\"\"\"\n        Construct a Merkle tree with a given set of leaves to begin\n        \"\"\"",
        "\"\"\"\n        Returns the current root of the Merkle tree\n        \"\"\"",
        "\"\"\"\n        Insert a value into the tree, returns the root\n        \"\"\"",
        "\"\"\"\n        Insert a value into the tree recursively\n\n        :param value: The value to insert into the tree\n        :param index: The index in the current height to insert at\n        :param height: The current height of the recursion in the tree\n\n        :return: The new root after insertion\n        \"\"\""
    ],
    "functions": [
        "_initailize_zeros",
        "from_leaf_data",
        "get_root",
        "insert",
        "_insert_impl"
    ],
    "classes": [
        "MerkleNodeKey",
        "MerkleTree"
    ]
}