{
    "identifiers": [
        "json",
        "logging",
        "math",
        "pi",
        "tan",
        "numpy",
        "np",
        "pyg4ometry",
        "pg4",
        "jsonfile",
        "reg",
        "materials",
        "reg",
        "pg4",
        "geant4",
        "Registry",
        "pg4",
        "gdml",
        "Defines",
        "Auxiliary",
        "reg",
        "_read_from_file",
        "jsonfile",
        "jsondict",
        "_build_crystal",
        "jsondict",
        "reg",
        "materials",
        "crystalLV",
        "addAuxiliaryInfo",
        "aux",
        "s",
        "crystalLV",
        "detname",
        "jsonfile",
        "open",
        "jsonfile",
        "jfile",
        "json",
        "load",
        "jfile",
        "data",
        "logging",
        "getLogger",
        "logger",
        "warning",
        "data",
        "datadict",
        "datadict",
        "datadict",
        "datadict",
        "welldata",
        "welldata",
        "rlist",
        "append",
        "wrad",
        "zlist",
        "append",
        "det_h",
        "wgap",
        "datadict",
        "groovedata",
        "groovedata",
        "groovedata",
        "datadict",
        "tapertopdata",
        "tinner",
        "tinner",
        "tinheight",
        "tan",
        "np",
        "deg2rad",
        "alpha",
        "tinheight",
        "rlist",
        "append",
        "wrad",
        "zlist",
        "append",
        "det_h",
        "tinheight",
        "rlist",
        "append",
        "wrad",
        "tstepinner",
        "zlist",
        "append",
        "rlist",
        "append",
        "wrad",
        "zlist",
        "append",
        "tapertopdata",
        "touter",
        "touter",
        "toutheight",
        "tan",
        "np",
        "deg2rad",
        "alpha",
        "toutheight",
        "rlist",
        "append",
        "det_r",
        "tstepouter",
        "zlist",
        "append",
        "rlist",
        "append",
        "det_r",
        "zlist",
        "append",
        "toutheight",
        "rlist",
        "append",
        "det_r",
        "zlist",
        "append",
        "datadict",
        "taperbotdata",
        "touter",
        "touter",
        "toutheight",
        "tan",
        "np",
        "deg2rad",
        "alpha",
        "toutheight",
        "rlist",
        "append",
        "det_r",
        "zlist",
        "append",
        "det_h",
        "toutheight",
        "rlist",
        "append",
        "det_r",
        "tstepouter",
        "zlist",
        "append",
        "det_h",
        "rlist",
        "append",
        "det_r",
        "zlist",
        "append",
        "det_h",
        "rlist",
        "append",
        "grad",
        "zlist",
        "append",
        "det_h",
        "rlist",
        "append",
        "grad",
        "zlist",
        "append",
        "det_h",
        "gdepth",
        "rlist",
        "append",
        "grad",
        "gwidth",
        "zlist",
        "append",
        "det_h",
        "gdepth",
        "rlist",
        "append",
        "grad",
        "gwidth",
        "zlist",
        "append",
        "det_h",
        "rlist",
        "append",
        "zlist",
        "append",
        "det_h",
        "rlist",
        "append",
        "zlist",
        "append",
        "det_h",
        "wgap",
        "rlist",
        "zlist",
        "data_dict",
        "reg",
        "material",
        "_decode_polycone",
        "data_dict",
        "pg4",
        "geant4",
        "solid",
        "GenericPolycone",
        "pi",
        "rlist",
        "zlist",
        "reg",
        "pg4",
        "geant4",
        "LogicalVolume",
        "ge_solid",
        "material",
        "reg",
        "ge_lv",
        "pg4",
        "visualisation",
        "VtkViewerColoured",
        "defaultColour",
        "v",
        "addLogicalVolume",
        "crystalLV",
        "v",
        "addAxes",
        "length",
        "v",
        "setSurface",
        "v",
        "setOpacity",
        "v",
        "view"
    ],
    "literals": [
        "\"\"",
        "\"SensDet\"",
        "\"GeDet\"",
        "\"ICPC detector: build a given ICPC from JSON input file.\\n\"",
        "\"det_name\"",
        "\"Error parsing JSON file.\"",
        "\"geometry\"",
        "\"height_in_mm\"",
        "\"radius_in_mm\"",
        "\"well\"",
        "\"gap_in_mm\"",
        "\"radius_in_mm\"",
        "\"groove\"",
        "\"outer_radius_in_mm\"",
        "\"depth_in_mm\"",
        "\"width_in_mm\"",
        "\"taper\"",
        "\"top\"",
        "\"inner\"",
        "\"angle_in_deg\"",
        "\"height_in_mm\"",
        "\"outer\"",
        "\"angle_in_deg\"",
        "\"height_in_mm\"",
        "\"taper\"",
        "\"bottom\"",
        "\"outer\"",
        "\"angle_in_deg\"",
        "\"height_in_mm\"",
        "\"Ge\"",
        "\"GeLV\"",
        "\"random\""
    ],
    "variables": [
        "reg",
        "crystalLV",
        "detname",
        "aux",
        "jsondict",
        "crystalLV",
        "s",
        "data",
        "detname",
        "logger",
        "rlist",
        "zlist",
        "det_h",
        "det_r",
        "welldata",
        "wgap",
        "wrad",
        "groovedata",
        "grad",
        "gdepth",
        "gwidth",
        "tapertopdata",
        "tinner",
        "alpha",
        "tinheight",
        "tstepinner",
        "touter",
        "alpha",
        "toutheight",
        "tstepouter",
        "taperbotdata",
        "touter",
        "alpha",
        "toutheight",
        "tstepouter",
        "rlist",
        "zlist",
        "ge_solid",
        "ge_lv",
        "v"
    ],
    "comments": [
        "Third-party imports",
        "registry to store gdml data",
        "allow for independent construction",
        "BUT dependence on materials dictionary remains",
        "read, then build the geometry",
        "add auxiliary info: type, value",
        "build crystal, declare as detector",
        "get name first",
        "only geometry data is of interest here",
        "extract values",
        "well",
        "first point",
        "groove",
        "taper top",
        "inner taper exists",
        "outer taper exists",
        "bottom taper exists",
        "walk rest of shape",
        "return ordered r,z lists, default unit [mm]",
        "build generic polycone, and logical volume, default [mm]",
        "20 cm axes",
        "v.exportScreenShot('trialpic.png')"
    ],
    "docstrings": [
        "\"\"\"Build the inverted coaxial point contact crystal template.\"\"\"",
        "\"\"\"Define ICPC Germanium template.\"\"\"",
        "\"\"\"\n        Create ICPC detector logical volume (LV).\n\n        Parameters\n        ----------\n        jsonfile : str\n            JSON input file name describing crystal shape.\n        reg : pg4.geant4.Registry, optional\n            if None, (almost, see next) standalone construction\n        materials : dict\n            predefined materials dictionary, required input.\n\n        Returns\n        -------\n        None.\n\n        \"\"\"",
        "\"\"\"Print the object purpose.\"\"\"",
        "\"\"\"\n        Access to logical volume as constructed here.\n\n        Returns\n        -------\n        pg4.geant4.LogicalVolume\n            Fully constructed LV of ICPC detector.\n\n        \"\"\"",
        "\"\"\"\n        Access to detector name from JSON file.\n\n        Returns\n        -------\n        name : str\n            Detector name string.\n\n        \"\"\"",
        "\"\"\"\n        Create crystal from description in JSON file.\n\n        Parameters\n        ----------\n        jsonfile : str\n            JSON input file name describing crystal shape.\n\n        Returns\n        -------\n        data : dict\n            Decoded JSON file content as dictionary.\n\n        \"\"\"",
        "\"\"\"\n        Decode shape information from JSON file as points.\n\n        constructing a G4GenericPolycone.\n\n        Parameters\n        ----------\n        datadict : dictionary\n            Dictionary extracted from JSON file,\n            containing crystal shape information.\n\n        Returns\n        -------\n        2 lists of r and z coordinates, respectively.\n\n        \"\"\"",
        "\"\"\"\n        Build the crystal from JSON.\n\n        Parameters\n        ----------\n        data_dict : dict\n                dictionary data describing crystal shape.\n\n        Returns\n        -------\n        ge_lv : pg4.geant4.LogicalVolume\n            the crystal logical volume; placement in main code.\n\n        \"\"\"",
        "\"\"\"\n        Draw the geometry held in the World volume.\n\n        Improve/standardize colour scheme\n        \"\"\""
    ],
    "functions": [
        "__repr__",
        "get_crystal_lv",
        "get_name",
        "_read_from_file",
        "_decode_polycone",
        "_build_crystal",
        "draw_geometry"
    ],
    "classes": [
        "icpc"
    ]
}