{
    "identifiers": [
        "sys",
        "traceback",
        "weakref",
        "attrgetter",
        "attrgetter",
        "target",
        "on_delete",
        "get_self",
        "target",
        "AttributeError",
        "callable",
        "on_delete",
        "weakref",
        "target",
        "on_delete",
        "weakref",
        "target",
        "im_self",
        "hasattr",
        "target",
        "hasattr",
        "target",
        "target",
        "BoundMethodWeakref",
        "target",
        "target",
        "on_delete",
        "on_delete",
        "reference",
        "weakref",
        "WeakValueDictionary",
        "cls",
        "target",
        "on_delete",
        "arguments",
        "named",
        "cls",
        "calculate_key",
        "target",
        "cls",
        "_all_instances",
        "get",
        "key",
        "current",
        "current",
        "deletion_methods",
        "append",
        "on_delete",
        "current",
        "__new__",
        "cls",
        "cls",
        "_all_instances",
        "target",
        "on_delete",
        "arguments",
        "named",
        "target",
        "on_delete",
        "weak",
        "deletion_methods",
        "deletion_methods",
        "__class__",
        "_all_instances",
        "key",
        "KeyError",
        "methods",
        "callable",
        "traceback",
        "print_exc",
        "AttributeError",
        "sys",
        "exc_info",
        "e",
        "on_delete",
        "calculate_key",
        "target",
        "get_self",
        "target",
        "get_func",
        "target",
        "weakref",
        "im_self",
        "remove",
        "weakref",
        "im_func",
        "remove",
        "im_self",
        "im_func",
        "classmethod",
        "cls",
        "target",
        "id",
        "get_self",
        "target",
        "id",
        "get_func",
        "target",
        "format",
        "__class__",
        "self_name",
        "func_name",
        "__str__",
        "hash",
        "self_name",
        "key",
        "other",
        "isinstance",
        "other",
        "__class__",
        "eq",
        "__class__",
        "other",
        "eq",
        "key",
        "other",
        "key",
        "weak_self",
        "target",
        "weak_func",
        "__get__",
        "target"
    ],
    "literals": [
        "\"__self__\"",
        "\"__func__\"",
        "\"im_func\"",
        "\"__func__\"",
        "f\"safe_ref target {target!r} has im_self, but no im_func, \"",
        "\"don't know how to create reference\"",
        "f\"Exception during saferef {self} \"",
        "f\"cleanup function {function}: {e}\"",
        "\"{}({}.{})\""
    ],
    "variables": [
        "get_self",
        "get_func",
        "im_self",
        "reference",
        "_all_instances",
        "key",
        "current",
        "key",
        "methods",
        "e",
        "deletion_methods",
        "key",
        "im_self",
        "im_func",
        "weak_self",
        "weak_func",
        "self_name",
        "func_name",
        "__repr__",
        "target"
    ],
    "comments": [
        "extracted from Louie, http://pylouie.org/",
        "updated for Python 3",
        "",
        "Copyright (c) 2006 Patrick K. O'Brien, Mike C. Fletcher,",
        "Matthew R. Scott",
        "",
        "Redistribution and use in source and binary forms, with or without",
        "modification, are permitted provided that the following conditions are",
        "met:",
        "",
        "notice, this list of conditions and the following disclaimer.",
        "",
        "copyright notice, this list of conditions and the following",
        "disclaimer in the documentation and/or other materials provided",
        "with the distribution.",
        "",
        "contributors may be used to endorse or promote products derived",
        "from this software without specific prior written permission.",
        "",
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
        "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
        "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
        "A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
        "OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
        "SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
        "LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",
        "DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY",
        "THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
        "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
        "OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "",
        "Turn a bound method into a BoundMethodWeakref instance.",
        "Keep track of these instances for lookup by disconnect().",
        "type: ignore[var-annotated]"
    ],
    "docstrings": [
        "* Redistributions of source code must retain the above copyright",
        "* Redistributions in binary form must reproduce the above",
        "* Neither the name of the <ORGANIZATION> nor the names of its",
        "\"\"\"Refactored 'safe reference from dispatcher.py\"\"\"",
        "\"\"\"Return a *safe* weak reference to a callable target.\n\n    - ``target``: The object to be weakly referenced, if it's a bound\n      method reference, will create a BoundMethodWeakref, otherwise\n      creates a simple weakref.\n\n    - ``on_delete``: If provided, will have a hard reference stored to\n      the callable to be called after the safe reference goes out of\n      scope with the reference object, (either a weakref or a\n      BoundMethodWeakref) as argument.\n    \"\"\"",
        "\"\"\"'Safe' and reusable weak references to instance methods.\n\n    BoundMethodWeakref objects provide a mechanism for referencing a\n    bound method without requiring that the method object itself\n    (which is normally a transient object) is kept alive.  Instead,\n    the BoundMethodWeakref object keeps weak references to both the\n    object and the function which together define the instance method.\n\n    Attributes:\n\n    - ``key``: The identity key for the reference, calculated by the\n      class's calculate_key method applied to the target instance method.\n\n    - ``deletion_methods``: Sequence of callable objects taking single\n      argument, a reference to this object which will be called when\n      *either* the target object or target function is garbage\n      collected (i.e. when this object becomes invalid).  These are\n      specified as the on_delete parameters of safe_ref calls.\n\n    - ``weak_self``: Weak reference to the target object.\n\n    - ``weak_func``: Weak reference to the target function.\n\n    Class Attributes:\n\n    - ``_all_instances``: Class attribute pointing to all live\n      BoundMethodWeakref objects indexed by the class's\n      calculate_key(target) method applied to the target objects.\n      This weak value dictionary is used to short-circuit creation so\n      that multiple references to the same (object, function) pair\n      produce the same BoundMethodWeakref instance.\n    \"\"\"",
        "\"\"\"Create new instance or return current instance.\n\n        Basically this method of construction allows us to\n        short-circuit creation of references to already-referenced\n        instance methods.  The key corresponding to the target is\n        calculated, and if there is already an existing reference,\n        that is returned, with its deletion_methods attribute updated.\n        Otherwise the new instance is created and registered in the\n        table of already-referenced methods.\n        \"\"\"",
        "\"\"\"Return a weak-reference-like instance for a bound method.\n\n        - ``target``: The instance-method target for the weak reference,\n          must have im_self and im_func attributes and be\n          reconstructable via the following, which is true of built-in\n          instance methods::\n\n            target.im_func.__get__( target.im_self )\n\n        - ``on_delete``: Optional callback which will be called when\n          this weak reference ceases to be valid (i.e. either the\n          object or the function is garbage collected).  Should take a\n          single argument, which will be passed a pointer to this\n          object.\n        \"\"\"",
        "\"\"\"Set self.isDead to True when method or instance is destroyed.\"\"\"",
        "\"\"\"Calculate the reference key for this reference.\n\n        Currently this is a two-tuple of the id()'s of the target\n        object and the target function respectively.\n        \"\"\"",
        "\"\"\"Give a friendly representation of the object.\"\"\"",
        "\"\"\"Whether we are still a valid reference.\"\"\"",
        "\"\"\"Compare with another reference.\"\"\"",
        "\"\"\"Return a strong reference to the bound method.\n\n        If the target cannot be retrieved, then will return None,\n        otherwise returns a bound instance method for our object and\n        function.\n\n        Note: You may call this method any number of times, as it does\n        not invalidate the reference.\n        \"\"\""
    ],
    "functions": [
        "safe_ref",
        "__new__",
        "remove",
        "calculate_key",
        "__str__",
        "__hash__",
        "__nonzero__",
        "__eq__",
        "__call__"
    ],
    "classes": [
        "BoundMethodWeakref"
    ]
}