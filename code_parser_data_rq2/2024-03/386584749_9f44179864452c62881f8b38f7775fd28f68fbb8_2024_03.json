{
    "identifiers": [
        "CheckResourceRequest",
        "CheckResourcesRequest",
        "CheckResourcesResponse",
        "CheckResourcesResult",
        "ClientWithPrincipal",
        "IsAllowedRequest",
        "RequestOptions",
        "useCallback",
        "useEffect",
        "useState",
        "useDeepCompareMemoize",
        "useCerbos",
        "method",
        "request",
        "options",
        "useState",
        "useState",
        "useState",
        "useCerbos",
        "useDeepCompareMemoize",
        "request",
        "useDeepCompareMemoize",
        "options",
        "useCallback",
        "signal",
        "signal",
        "client",
        "method",
        "requestMemo",
        "optionsMemo",
        "client",
        "method",
        "optionsMemo",
        "requestMemo",
        "useEffect",
        "setIsLoading",
        "setData",
        "setError",
        "AbortController",
        "load",
        "abortController",
        "data",
        "abortController",
        "setIsLoading",
        "setData",
        "data",
        "setError",
        "error",
        "abortController",
        "setIsLoading",
        "setData",
        "setError",
        "error",
        "error",
        "error",
        "abortController",
        "load",
        "request",
        "options",
        "useCerbosRequest",
        "request",
        "options",
        "request",
        "options",
        "useCerbosRequest",
        "request",
        "options",
        "request",
        "options",
        "useCerbosRequest",
        "request",
        "options"
    ],
    "literals": [
        "\"@cerbos/core\"",
        "\"react\"",
        "\"use-deep-compare-effect\"",
        "\"./use-cerbos\"",
        "\"checkResource\"",
        "\"checkResources\"",
        "\"isAllowed\"",
        "\"signal\"",
        "\"An unexpected error occurred\"",
        "\"principal\"",
        "\"signal\"",
        "\"checkResource\"",
        "\"principal\"",
        "\"signal\"",
        "\"checkResources\"",
        "\"principal\"",
        "\"signal\"",
        "\"isAllowed\""
    ],
    "variables": [
        "isLoading",
        "setIsLoading",
        "data",
        "setData",
        "error",
        "setError",
        "client",
        "requestMemo",
        "optionsMemo",
        "load",
        "abortController"
    ],
    "comments": [
        "@ts-expect-error -- https://github.com/microsoft/TypeScript/issues/30581"
    ],
    "docstrings": [
        "* The result of calling an async method on a client.\n *\n * @public",
        "* Check the principal's permissions on a resource.\n *\n * @example\n * ```typescript\n * import { useCheckResource } from \"@cerbos/react\";\n *\n * function SomeComponent() {\n *   const check = useCheckResource({\n *     resource: {\n *       kind: \"document\",\n *       id: \"1\",\n *       attr: { owner: \"user@example.com\" },\n *     },\n *     actions: [\"view\", \"edit\"],\n *   });\n *\n *   if (check.isLoading) {\n *     // show spinner\n *     return \"Loading...\";\n *   }\n *\n *   if (check.error) {\n *     // handle error\n *     return \"Error...\";\n *   }\n *\n *   return (\n *     <div>\n *       {check.data.allAllowed() && <button>a button</button>}\n *       {check.data.isAllowed(\"view\") && <button>another button</button>}\n *     </div>\n *   );\n * }\n * ```\n * @public",
        "* Check the principal's permissions on a set of resources.\n *\n * @example\n * ```typescript\n * import { useCheckResources } from \"@cerbos/react\";\n *\n * function SomeComponent() {\n *   const check = useCheckResources({\n *     resources: [\n *       {\n *         resource: {\n *           kind: \"document\",\n *           id: \"1\",\n *           attr: { owner: \"user@example.com\" },\n *         },\n *         actions: [\"view\", \"edit\"],\n *       },\n *       {\n *         resource: {\n *           kind: \"document\",\n *           id: \"2\",\n *           attr: { owner: \"another-user@example.com\" },\n *         },\n *         actions: [\"view\", \"edit\"],\n *       },\n *     ],\n *   });\n *\n *   if (check.isLoading) {\n *     // show spinner\n *     return \"Loading...\";\n *   }\n *\n *   if (check.error) {\n *     // handle error\n *     return \"Error...\";\n *   }\n *\n *   return (\n *     <div>\n *       {check.data.allAllowed({\n *         kind: \"document\",\n *         id: \"1\",\n *       }) && <button>a button document 1</button>}\n *       {check.data.allAllowed({\n *         kind: \"document\",\n *         id: \"2\",\n *       }) && <button>a button document 2</button>}\n *       {check.data.isAllowed({\n *         resource: { kind: \"document\", id: \"1\" },\n *         action: \"edit\",\n *       }) && <button>another button for document 1</button>}\n *       {check.data.isAllowed({\n *         resource: { kind: \"document\", id: \"2\" },\n *         action: \"edit\",\n *       }) && <button>another button for document 2</button>}\n *     </div>\n *   );\n * }\n * ```\n * @public",
        "* Check if the principal is allowed to perform an action on a resource.\n *\n * @example\n * ```typescript\n * import { useIsAllowed } from \"@cerbos/react\";\n *\n * function SomeComponent() {\n *   const check = useIsAllowed({\n *     resource: {\n *       kind: \"document\",\n *       id: \"1\",\n *       attr: { owner: \"user@example.com\" },\n *     },\n *     action: \"view\",\n *   });\n *\n *   if (check.isLoading) {\n *     // show spinner\n *     return \"Loading...\";\n *   }\n *\n *   if (check.error) {\n *     // handle error\n *     return \"Error...\";\n *   }\n *\n *   return <div>{check.data && <button>a button document 1</button>}</div>;\n * }\n * ```\n * @public"
    ],
    "functions": [
        "useCerbosRequest",
        "useCheckResource",
        "useCheckResources",
        "useIsAllowed"
    ],
    "classes": []
}