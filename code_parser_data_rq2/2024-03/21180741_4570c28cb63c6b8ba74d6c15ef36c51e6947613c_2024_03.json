{
    "identifiers": [
        "ca",
        "uhn",
        "fhir",
        "jpa",
        "provider",
        "r4",
        "ca",
        "uhn",
        "fhir",
        "jpa",
        "provider",
        "BaseResourceProviderR4Test",
        "ca",
        "uhn",
        "fhir",
        "jpa",
        "searchparam",
        "SearchParameterMap",
        "ca",
        "uhn",
        "fhir",
        "rest",
        "api",
        "server",
        "IBundleProvider",
        "ca",
        "uhn",
        "fhir",
        "rest",
        "param",
        "HasParam",
        "org",
        "hl7",
        "fhir",
        "instance",
        "model",
        "api",
        "IIdType",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Bundle",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "CarePlan",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Coverage",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Encounter",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Enumerations",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "ExplanationOfBenefit",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Group",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "ListResource",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Observation",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Organization",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Patient",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Practitioner",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "Reference",
        "org",
        "hl7",
        "fhir",
        "r4",
        "model",
        "SearchParameter",
        "org",
        "junit",
        "jupiter",
        "api",
        "BeforeEach",
        "org",
        "junit",
        "jupiter",
        "api",
        "Nested",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "org",
        "junit",
        "jupiter",
        "ParameterizedTest",
        "org",
        "junit",
        "jupiter",
        "provider",
        "ValueSource",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "assertFalse",
        "ourLog",
        "org",
        "slf4j",
        "LoggerFactory",
        "getLogger",
        "Nested",
        "PAT_ID",
        "OBSERVATION_ID",
        "ENCOUNTER_ID",
        "CARE_PLAN_ID",
        "BeforeEach",
        "patient",
        "patient",
        "setId",
        "PAT_ID",
        "patientId",
        "myPatientDao",
        "update",
        "patient",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "observation",
        "observation",
        "setId",
        "OBSERVATION_ID",
        "observation",
        "setSubject",
        "patientId",
        "getValue",
        "observationId",
        "myObservationDao",
        "update",
        "observation",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "encounter",
        "encounter",
        "setId",
        "ENCOUNTER_ID",
        "encounter",
        "addReasonReference",
        "observationId",
        "getValue",
        "encounterId",
        "myEncounterDao",
        "update",
        "encounter",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "carePlan",
        "carePlan",
        "setId",
        "CARE_PLAN_ID",
        "carePlan",
        "setEncounter",
        "encounterId",
        "getValue",
        "myCarePlanDao",
        "update",
        "carePlan",
        "mySrd",
        "ParameterizedTest",
        "ValueSource",
        "strings",
        "ENCOUNTER_ID",
        "theQueryString",
        "runAndAssert",
        "theQueryString",
        "ParameterizedTest",
        "ValueSource",
        "strings",
        "CARE_PLAN_ID",
        "theQueryString",
        "runAndAssert",
        "theQueryString",
        "Nested",
        "PAT_ID",
        "ORG_ID",
        "ORG_NAME",
        "PRACTITIONER_ID",
        "COVERAGE_ID",
        "LIST_ID",
        "EOB_ID",
        "BeforeEach",
        "myStorageSettings",
        "setIndexOnContainedResources",
        "patient",
        "patient",
        "setId",
        "PAT_ID",
        "patientId",
        "myPatientDao",
        "update",
        "patient",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "organization",
        "organization",
        "setId",
        "ORG_ID",
        "organization",
        "setName",
        "ORG_NAME",
        "orgId",
        "myOrganizationDao",
        "update",
        "organization",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "practitioner",
        "practitioner",
        "setId",
        "PRACTITIONER_ID",
        "practitionerId",
        "myPractitionerDao",
        "update",
        "practitioner",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "coverage",
        "coverage",
        "setId",
        "COVERAGE_ID",
        "coverage",
        "addPayor",
        "setReference",
        "orgId",
        "getValue",
        "coverageId",
        "myCoverageDao",
        "update",
        "coverage",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "setId",
        "LIST_ID",
        "addEntry",
        "setItem",
        "orgId",
        "getValue",
        "myListDao",
        "update",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "explanationOfBenefit",
        "explanationOfBenefit",
        "setId",
        "EOB_ID",
        "explanationOfBenefit",
        "setPatient",
        "patientId",
        "getValue",
        "explanationOfBenefit",
        "setInsurer",
        "orgId",
        "getValue",
        "explanationOfBenefit",
        "setProvider",
        "orgId",
        "getValue",
        "explanationOfBenefit",
        "addCareTeam",
        "setProvider",
        "practitionerId",
        "getValue",
        "explanationOfBenefit",
        "addInsurance",
        "setCoverage",
        "coverageId",
        "getValue",
        "myExplanationOfBenefitDao",
        "update",
        "explanationOfBenefit",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "ParameterizedTest",
        "ValueSource",
        "strings",
        "ORG_NAME",
        "theQueryString",
        "runAndAssert",
        "theQueryString",
        "ParameterizedTest",
        "ValueSource",
        "strings",
        "ORG_ID",
        "theQueryString",
        "runAndAssert",
        "theQueryString",
        "ParameterizedTest",
        "ValueSource",
        "strings",
        "LIST_ID",
        "theQueryString",
        "runAndAssert",
        "theQueryString",
        "ParameterizedTest",
        "ValueSource",
        "strings",
        "LIST_ID",
        "ORG_NAME",
        "ORG_ID",
        "COVERAGE_ID",
        "ORG_NAME",
        "ORG_ID",
        "LIST_ID",
        "LIST_ID",
        "LIST_ID",
        "theQueryString",
        "runAndAssert",
        "theQueryString",
        "ParameterizedTest",
        "ValueSource",
        "strings",
        "EOB_ID",
        "ORG_ID",
        "EOB_ID",
        "COVERAGE_ID",
        "ORG_ID",
        "theQueryString",
        "runAndAssert",
        "theQueryString",
        "ParameterizedTest",
        "ValueSource",
        "strings",
        "LIST_ID",
        "LIST_ID",
        "theQueryString",
        "runAndAssert",
        "theQueryString",
        "Test",
        "searchParameterMap",
        "hasParam",
        "LIST_ID",
        "searchParameterMap",
        "add",
        "hasParam",
        "search",
        "myPractitionerDao",
        "search",
        "searchParameterMap",
        "mySrd",
        "assertFalse",
        "search",
        "isEmpty",
        "Test",
        "searchParameterMap",
        "hasParam",
        "ORG_ID",
        "searchParameterMap",
        "add",
        "hasParam",
        "search",
        "myPractitionerDao",
        "search",
        "searchParameterMap",
        "mySrd",
        "assertFalse",
        "search",
        "isEmpty",
        "Test",
        "searchParameterMap",
        "hasParam",
        "LIST_ID",
        "searchParameterMap",
        "add",
        "hasParam",
        "search",
        "myOrganizationDao",
        "search",
        "searchParameterMap",
        "mySrd",
        "assertFalse",
        "search",
        "isEmpty",
        "Nested",
        "PAT_ID",
        "ORG_ID",
        "ORG_NAME",
        "PRACTITIONER_ID",
        "COVERAGE_ID",
        "GROUP_ID",
        "EOB_ID",
        "BeforeEach",
        "myStorageSettings",
        "setMarkResourcesForReindexingUponSearchParameterChange",
        "myStorageSettings",
        "setIndexOnContainedResources",
        "searchParameterGroupValueReference",
        "searchParameterGroupValueReference",
        "setId",
        "searchParameterGroupValueReference",
        "setName",
        "searchParameterGroupValueReference",
        "addBase",
        "searchParameterGroupValueReference",
        "setStatus",
        "Enumerations",
        "PublicationStatus",
        "ACTIVE",
        "searchParameterGroupValueReference",
        "setCode",
        "searchParameterGroupValueReference",
        "setType",
        "Enumerations",
        "SearchParamType",
        "REFERENCE",
        "searchParameterGroupValueReference",
        "setExpression",
        "searchParameterGroupValueReference",
        "addTarget",
        "searchParameterGroupValueReference",
        "setXpathUsage",
        "SearchParameter",
        "XPathUsageType",
        "NORMAL",
        "mySearchParameterDao",
        "update",
        "searchParameterGroupValueReference",
        "mySrd",
        "patient",
        "patient",
        "setId",
        "PAT_ID",
        "patientId",
        "myPatientDao",
        "update",
        "patient",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "organization",
        "organization",
        "setId",
        "ORG_ID",
        "organization",
        "setName",
        "ORG_NAME",
        "orgId",
        "myOrganizationDao",
        "update",
        "organization",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "practitioner",
        "practitioner",
        "setId",
        "PRACTITIONER_ID",
        "practitionerId",
        "myPractitionerDao",
        "update",
        "practitioner",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "coverage",
        "coverage",
        "setId",
        "COVERAGE_ID",
        "coverage",
        "addPayor",
        "setReference",
        "orgId",
        "getValue",
        "coverageId",
        "myCoverageDao",
        "update",
        "coverage",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "group",
        "group",
        "setId",
        "GROUP_ID",
        "group",
        "addCharacteristic",
        "getValueReference",
        "setReference",
        "orgId",
        "getValue",
        "myGroupDao",
        "update",
        "group",
        "mySrd",
        "explanationOfBenefit",
        "explanationOfBenefit",
        "setId",
        "EOB_ID",
        "explanationOfBenefit",
        "setPatient",
        "patientId",
        "getValue",
        "explanationOfBenefit",
        "setInsurer",
        "orgId",
        "getValue",
        "explanationOfBenefit",
        "setProvider",
        "orgId",
        "getValue",
        "explanationOfBenefit",
        "addCareTeam",
        "setProvider",
        "practitionerId",
        "getValue",
        "explanationOfBenefit",
        "addInsurance",
        "setCoverage",
        "coverageId",
        "getValue",
        "myExplanationOfBenefitDao",
        "update",
        "explanationOfBenefit",
        "mySrd",
        "getId",
        "toUnqualifiedVersionless",
        "ParameterizedTest",
        "ValueSource",
        "strings",
        "ORG_NAME",
        "ORG_ID",
        "ORG_NAME",
        "ORG_ID",
        "PRACTITIONER_ID",
        "COVERAGE_ID",
        "ORG_ID",
        "theQueryString",
        "runAndAssert",
        "theQueryString",
        "ParameterizedTest",
        "ValueSource",
        "strings",
        "ORG_ID",
        "GROUP_ID",
        "theQueryString",
        "runAndAssert",
        "theQueryString",
        "ParameterizedTest",
        "ValueSource",
        "strings",
        "GROUP_ID",
        "theQueryString",
        "runAndAssert",
        "theQueryString",
        "ParameterizedTest",
        "ValueSource",
        "strings",
        "EOB_ID",
        "COVERAGE_ID",
        "ORG_ID",
        "ORG_ID",
        "theQueryString",
        "runAndAssert",
        "theQueryString",
        "theQueryString",
        "ourLog",
        "info",
        "theQueryString",
        "outcome",
        "myClient",
        "search",
        "byUrl",
        "theQueryString",
        "returnBundle",
        "execute",
        "assertFalse",
        "outcome",
        "getEntry",
        "isEmpty",
        "ourLog",
        "info",
        "theQueryString"
    ],
    "literals": [
        "\"pat1\"",
        "\"obs1\"",
        "\"enc1\"",
        "\"cp1\"",
        "\"Patient?_has:Observation:subject:_has:Encounter:reason-reference:_id=\"",
        "\"Patient?_has:Observation:subject:_has:Encounter:reason-reference:_has:CarePlan:encounter:_id=\"",
        "\"pat1\"",
        "\"org1\"",
        "\"myOrg\"",
        "\"pra1\"",
        "\"cov1\"",
        "\"list1\"",
        "\"eob1\"",
        "\"ExplanationOfBenefit?coverage.payor.name=\"",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor=\"",
        "\"ExplanationOfBenefit?coverage.payor:Organization._has:List:item:_id=\"",
        "\"Coverage?payor._has:List:item:_id=\"",
        "\"Coverage?payor.name=\"",
        "\"Coverage?payor=\"",
        "\"ExplanationOfBenefit?coverage=\"",
        "\"ExplanationOfBenefit?coverage.payor.name=\"",
        "\"ExplanationOfBenefit?coverage.payor=\"",
        "\"ExplanationOfBenefit?coverage.payor._has:List:item:_id=\"",
        "\"ExplanationOfBenefit?coverage.payor:Organization._has:List:item:_id=\"",
        "\"Organization?_has:List:item:_id=\"",
        "\"Organization?_has:Coverage:payor:_has:ExplanationOfBenefit:coverage:_id=\"",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor=\"",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:_id=\"",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage=\"",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor=\"",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor._has:List:item:_id=\"",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor:Organization._has:List:item:_id=\"",
        "\"ExplanationOfBenefit\"",
        "\"care-team\"",
        "\"coverage.payor:Organization._has:List:item:_id\"",
        "\"_has\"",
        "\"ExplanationOfBenefit\"",
        "\"care-team\"",
        "\"coverage.payor\"",
        "\"_has\"",
        "\"List\"",
        "\"item\"",
        "\"_id\"",
        "\"_has\"",
        "\"pat1\"",
        "\"org1\"",
        "\"myOrg\"",
        "\"pra1\"",
        "\"cov1\"",
        "\"grp1\"",
        "\"eob1\"",
        "\"group-value-reference\"",
        "\"group-value-reference\"",
        "\"Group\"",
        "\"value-reference\"",
        "\"Group.characteristic.value.as(Reference)\"",
        "\"Organization\"",
        "\"Coverage?payor.name=\"",
        "\"Coverage?payor=\"",
        "\"ExplanationOfBenefit?coverage.payor.name=\"",
        "\"ExplanationOfBenefit?coverage.payor=\"",
        "\"ExplanationOfBenefit?care-team=\"",
        "\"ExplanationOfBenefit?coverage=\"",
        "\"ExplanationOfBenefit?provider=\"",
        "\"Group?value-reference=\"",
        "\"Organization?_has:Group:value-reference:_id=\"",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor:Organization._has:Group:value-reference:_id=\"",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:_id=\"",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage=\"",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor=\"",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor:Organization=\"",
        "\"queryString:\\n{}\"",
        "\"result:\\n{}\""
    ],
    "variables": [],
    "comments": [
        "This is the first half",
        "dot _has",
        "This the second half of the buggy query",
        "THIS WORKS!!!!!!!",
        "this works",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor.name=\"+ORG_NAME, // this does not work",
        "This is the first half",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor._has:List:item:_id=\"+LIST_ID, // this doesn't work ... reomoves Organzation",
        "same thing",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor:Organization=\"+ORG_ID  // This the first half of the buggy query",
        "\"Organization?_has:List:item:_id=\"+LIST_ID, // This the second half of the buggy query",
        "This is not exactly lik the  production scenario but create SearchParameter first to create the RES_LINK",
        "and avoid a call to reindex",
        "This the second half of the buggy query",
        "This the first half of the buggy query",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor._has:Group:value-reference:_id=\"+GROUP_ID, // this doesn't work",
        "\"Practitioner?_has:ExplanationOfBenefit:care-team:coverage.payor:Organization.name=\"+ORG_NAME // This doesn't work"
    ],
    "docstrings": [],
    "functions": [
        "beforeEach",
        "doubleHas",
        "tripleHas",
        "beforeEach",
        "chainSimple",
        "hasThenChainSimple",
        "chainThenHasSimple",
        "complexQueryFromList",
        "complexQueryFromPractitioner",
        "hasThenChainThenHas",
        "searchWithSearchParameterHasThenChainThenChain",
        "searchWithSearchParameterFirstHalf",
        "searchWithSearchParameterSecondHalf",
        "beforeEach",
        "complexQueryFromGroup",
        "useCustomSearchParam",
        "hasThenChainThenHas",
        "complexQueryFromPractitioner",
        "runAndAssert"
    ],
    "classes": [
        "ResourceProviderR4SearchVariousScenariosTest",
        "HasMultipleNoChains",
        "PractitionerEobCoveragePractitionerListNoCustomSearchParam",
        "PractitionerEobCoveragePractitionerGroupYesCustomSearchParam"
    ]
}