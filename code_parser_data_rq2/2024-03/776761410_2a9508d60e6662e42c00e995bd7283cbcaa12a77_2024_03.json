{
    "identifiers": [
        "factory",
        "exports",
        "factory",
        "exports",
        "define",
        "define",
        "define",
        "factory",
        "factory",
        "exports",
        "value",
        "value",
        "value",
        "value",
        "Instruction",
        "INUMBER",
        "IOP1",
        "IOP2",
        "IOP3",
        "IVAR",
        "IVARNAME",
        "IENDSTATEMENT",
        "IFUNCALL",
        "IFUNDEF",
        "IARRAY",
        "IMEMBER",
        "value",
        "Instruction",
        "IOP1",
        "value",
        "value",
        "Instruction",
        "IOP2",
        "value",
        "value",
        "Instruction",
        "IOP3",
        "value",
        "tokens",
        "unaryOps",
        "binaryOps",
        "ternaryOps",
        "values",
        "i",
        "tokens",
        "i",
        "tokens",
        "i",
        "item",
        "INUMBER",
        "IVARNAME",
        "item",
        "nstack",
        "nstack",
        "simplify",
        "item",
        "x",
        "Instruction",
        "INUMBER",
        "x",
        "Instruction",
        "IARRAY",
        "item",
        "unaryOps",
        "binaryOps",
        "ternaryOps",
        "values",
        "nstack",
        "item",
        "IVAR",
        "values",
        "item",
        "item",
        "Instruction",
        "INUMBER",
        "values",
        "item",
        "nstack",
        "item",
        "IOP2",
        "nstack",
        "n2",
        "nstack",
        "n1",
        "nstack",
        "f",
        "binaryOps",
        "item",
        "item",
        "Instruction",
        "INUMBER",
        "f",
        "n1",
        "n2",
        "nstack",
        "item",
        "IOP3",
        "nstack",
        "n3",
        "nstack",
        "n2",
        "nstack",
        "n1",
        "nstack",
        "item",
        "nstack",
        "n1",
        "n2",
        "n3",
        "f",
        "ternaryOps",
        "item",
        "item",
        "Instruction",
        "INUMBER",
        "f",
        "n1",
        "n2",
        "n3",
        "nstack",
        "item",
        "IOP1",
        "nstack",
        "n1",
        "nstack",
        "f",
        "unaryOps",
        "item",
        "item",
        "Instruction",
        "INUMBER",
        "f",
        "n1",
        "nstack",
        "item",
        "IEXPR",
        "nstack",
        "newexpression",
        "nstack",
        "newexpression",
        "Instruction",
        "IEXPR",
        "simplify",
        "item",
        "unaryOps",
        "binaryOps",
        "ternaryOps",
        "values",
        "IMEMBER",
        "nstack",
        "n1",
        "nstack",
        "nstack",
        "Instruction",
        "INUMBER",
        "n1",
        "item",
        "nstack",
        "newexpression",
        "nstack",
        "newexpression",
        "item",
        "nstack",
        "newexpression",
        "nstack",
        "newexpression",
        "tokens",
        "variable",
        "expr",
        "i",
        "tokens",
        "i",
        "tokens",
        "i",
        "item",
        "IVAR",
        "item",
        "variable",
        "j",
        "expr",
        "j",
        "expr",
        "j",
        "expritem",
        "IOP1",
        "replitem",
        "unaryInstruction",
        "expritem",
        "expritem",
        "IOP2",
        "replitem",
        "binaryInstruction",
        "expritem",
        "expritem",
        "IOP3",
        "replitem",
        "ternaryInstruction",
        "expritem",
        "replitem",
        "Instruction",
        "expritem",
        "expritem",
        "newexpression",
        "replitem",
        "IEXPR",
        "newexpression",
        "Instruction",
        "IEXPR",
        "substitute",
        "item",
        "variable",
        "expr",
        "newexpression",
        "item",
        "newexpression",
        "tokens",
        "expr",
        "values",
        "isExpressionEvaluator",
        "tokens",
        "resolveExpression",
        "tokens",
        "values",
        "tokens",
        "i",
        "numTokens",
        "i",
        "tokens",
        "i",
        "item",
        "INUMBER",
        "IVARNAME",
        "nstack",
        "item",
        "IOP2",
        "n2",
        "nstack",
        "n1",
        "nstack",
        "item",
        "nstack",
        "n1",
        "evaluate",
        "n2",
        "expr",
        "values",
        "item",
        "nstack",
        "n1",
        "evaluate",
        "n2",
        "expr",
        "values",
        "item",
        "f",
        "expr",
        "item",
        "nstack",
        "f",
        "n1",
        "evaluate",
        "n2",
        "expr",
        "values",
        "values",
        "f",
        "expr",
        "item",
        "nstack",
        "f",
        "resolveExpression",
        "n1",
        "values",
        "resolveExpression",
        "n2",
        "values",
        "IOP3",
        "n3",
        "nstack",
        "n2",
        "nstack",
        "n1",
        "nstack",
        "item",
        "nstack",
        "evaluate",
        "n1",
        "n2",
        "n3",
        "expr",
        "values",
        "f",
        "expr",
        "item",
        "nstack",
        "f",
        "resolveExpression",
        "n1",
        "values",
        "resolveExpression",
        "n2",
        "values",
        "resolveExpression",
        "n3",
        "values",
        "IVAR",
        "item",
        "expr",
        "nstack",
        "expr",
        "item",
        "item",
        "expr",
        "expr",
        "item",
        "nstack",
        "expr",
        "item",
        "values",
        "item",
        "v",
        "nstack",
        "v",
        "item",
        "IOP1",
        "n1",
        "nstack",
        "f",
        "expr",
        "item",
        "nstack",
        "f",
        "resolveExpression",
        "n1",
        "values",
        "IFUNCALL",
        "argCount",
        "item",
        "args",
        "argCount",
        "args",
        "resolveExpression",
        "nstack",
        "values",
        "f",
        "nstack",
        "f",
        "f",
        "nstack",
        "f",
        "args",
        "f",
        "IFUNDEF",
        "nstack",
        "nstack",
        "item",
        "argCount",
        "args",
        "nstack",
        "nstack",
        "values",
        "args",
        "i",
        "len",
        "i",
        "scope",
        "args",
        "i",
        "arguments",
        "i",
        "evaluate",
        "n2",
        "expr",
        "scope",
        "f",
        "n1",
        "values",
        "n1",
        "f",
        "f",
        "IEXPR",
        "nstack",
        "createExpressionEvaluator",
        "item",
        "expr",
        "IEXPREVAL",
        "nstack",
        "item",
        "IMEMBER",
        "n1",
        "nstack",
        "nstack",
        "n1",
        "item",
        "IENDSTATEMENT",
        "nstack",
        "IARRAY",
        "argCount",
        "item",
        "args",
        "argCount",
        "args",
        "nstack",
        "nstack",
        "args",
        "nstack",
        "nstack",
        "resolveExpression",
        "nstack",
        "values",
        "token",
        "expr",
        "values",
        "isExpressionEvaluator",
        "token",
        "token",
        "IEXPREVAL",
        "scope",
        "evaluate",
        "token",
        "expr",
        "scope",
        "n",
        "n",
        "n",
        "IEXPREVAL",
        "n",
        "values",
        "isExpressionEvaluator",
        "n",
        "n",
        "values",
        "n",
        "tokens",
        "toJS",
        "i",
        "tokens",
        "i",
        "tokens",
        "i",
        "item",
        "INUMBER",
        "item",
        "item",
        "nstack",
        "item",
        "item",
        "nstack",
        "item",
        "escapeValue",
        "nstack",
        "escapeValue",
        "item",
        "IOP2",
        "n2",
        "nstack",
        "n1",
        "nstack",
        "f",
        "item",
        "toJS",
        "f",
        "nstack",
        "n1",
        "n2",
        "f",
        "nstack",
        "n1",
        "n2",
        "f",
        "nstack",
        "n1",
        "n2",
        "f",
        "nstack",
        "n1",
        "n2",
        "f",
        "nstack",
        "n1",
        "n2",
        "f",
        "nstack",
        "n1",
        "n2",
        "f",
        "nstack",
        "n1",
        "n2",
        "nstack",
        "n1",
        "f",
        "n2",
        "f",
        "nstack",
        "n1",
        "n2",
        "nstack",
        "n1",
        "f",
        "n2",
        "IOP3",
        "n3",
        "nstack",
        "n2",
        "nstack",
        "n1",
        "nstack",
        "f",
        "item",
        "f",
        "nstack",
        "n1",
        "n2",
        "n3",
        "IVAR",
        "IVARNAME",
        "nstack",
        "item",
        "IOP1",
        "n1",
        "nstack",
        "f",
        "item",
        "f",
        "f",
        "nstack",
        "f",
        "n1",
        "toJS",
        "f",
        "nstack",
        "n1",
        "f",
        "nstack",
        "n1",
        "nstack",
        "f",
        "n1",
        "f",
        "nstack",
        "n1",
        "nstack",
        "f",
        "n1",
        "IFUNCALL",
        "argCount",
        "item",
        "args",
        "argCount",
        "args",
        "nstack",
        "f",
        "nstack",
        "nstack",
        "f",
        "args",
        "IFUNDEF",
        "n2",
        "nstack",
        "argCount",
        "item",
        "args",
        "argCount",
        "args",
        "nstack",
        "n1",
        "nstack",
        "toJS",
        "nstack",
        "n1",
        "args",
        "n2",
        "nstack",
        "n1",
        "args",
        "n2",
        "IMEMBER",
        "n1",
        "nstack",
        "nstack",
        "n1",
        "item",
        "IARRAY",
        "argCount",
        "item",
        "args",
        "argCount",
        "args",
        "nstack",
        "nstack",
        "args",
        "IEXPR",
        "nstack",
        "expressionToString",
        "item",
        "toJS",
        "IENDSTATEMENT",
        "nstack",
        "toJS",
        "nstack",
        "nstack",
        "nstack",
        "nstack",
        "nstack",
        "v",
        "v",
        "v",
        "v",
        "array",
        "obj",
        "i",
        "array",
        "i",
        "array",
        "i",
        "obj",
        "tokens",
        "symbols",
        "options",
        "options",
        "options",
        "options",
        "i",
        "tokens",
        "i",
        "tokens",
        "i",
        "item",
        "IVAR",
        "item",
        "IVARNAME",
        "withMembers",
        "contains",
        "symbols",
        "item",
        "symbols",
        "item",
        "prevVar",
        "contains",
        "symbols",
        "prevVar",
        "symbols",
        "prevVar",
        "prevVar",
        "item",
        "prevVar",
        "item",
        "item",
        "IMEMBER",
        "withMembers",
        "prevVar",
        "prevVar",
        "item",
        "item",
        "IEXPR",
        "getSymbols",
        "item",
        "symbols",
        "options",
        "prevVar",
        "contains",
        "symbols",
        "prevVar",
        "symbols",
        "prevVar",
        "prevVar",
        "prevVar",
        "contains",
        "symbols",
        "prevVar",
        "symbols",
        "prevVar",
        "tokens",
        "parser",
        "tokens",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "Expression",
        "values",
        "values",
        "values",
        "Expression",
        "simplify",
        "values",
        "Expression",
        "variable",
        "expr",
        "expr",
        "Expression",
        "expr",
        "expr",
        "Expression",
        "substitute",
        "variable",
        "expr",
        "Expression",
        "values",
        "values",
        "values",
        "evaluate",
        "values",
        "Expression",
        "expressionToString",
        "Expression",
        "options",
        "options",
        "options",
        "getSymbols",
        "vars",
        "options",
        "vars",
        "Expression",
        "options",
        "options",
        "options",
        "getSymbols",
        "vars",
        "options",
        "vars",
        "name",
        "name",
        "functions",
        "Expression",
        "param",
        "variables",
        "param",
        "expressionToString",
        "variables",
        "f",
        "expr",
        "arguments",
        "value",
        "index",
        "value",
        "index",
        "Token",
        "parser",
        "expression",
        "parser",
        "parser",
        "parser",
        "parser",
        "expression",
        "parser",
        "parser",
        "TokenStream",
        "value",
        "pos",
        "Token",
        "value",
        "pos",
        "pos",
        "TokenStream",
        "TokenStream",
        "TokenStream",
        "TEOF",
        "TokenStream",
        "startPos",
        "quote",
        "quote",
        "quote",
        "startPos",
        "index",
        "index",
        "index",
        "startPos",
        "index",
        "TSTRING",
        "rawString",
        "startPos",
        "r",
        "index",
        "quote",
        "index",
        "r",
        "TokenStream",
        "c",
        "c",
        "TPAREN",
        "c",
        "TokenStream",
        "c",
        "c",
        "TBRACKET",
        "c",
        "TokenStream",
        "c",
        "TCOMMA",
        "TokenStream",
        "c",
        "TSEMICOLON",
        "TokenStream",
        "i",
        "i",
        "i",
        "c",
        "c",
        "i",
        "c",
        "c",
        "c",
        "c",
        "i",
        "startPos",
        "startPos",
        "i",
        "TNUMBER",
        "TokenStream",
        "i",
        "i",
        "i",
        "c",
        "c",
        "i",
        "c",
        "c",
        "c",
        "i",
        "startPos",
        "startPos",
        "i",
        "TOP",
        "TokenStream",
        "i",
        "i",
        "i",
        "c",
        "c",
        "i",
        "c",
        "c",
        "c",
        "hasLetter",
        "i",
        "hasLetter",
        "c",
        "c",
        "c",
        "hasLetter",
        "hasLetter",
        "startPos",
        "i",
        "TNAME",
        "TokenStream",
        "c",
        "c",
        "c",
        "c",
        "r",
        "c",
        "r",
        "TokenStream",
        "v",
        "v",
        "index",
        "v",
        "v",
        "index",
        "index",
        "v",
        "index",
        "c",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "v",
        "index",
        "index",
        "codePointPattern",
        "codePoint",
        "codePoint",
        "buffer",
        "parseInt",
        "codePoint",
        "index",
        "c",
        "index",
        "v",
        "index",
        "buffer",
        "v",
        "index",
        "backslash",
        "v",
        "backslash",
        "index",
        "backslash",
        "buffer",
        "TokenStream",
        "c",
        "TokenStream",
        "pos",
        "pos",
        "pos",
        "pos",
        "radix",
        "validDigit",
        "pos",
        "pos",
        "radix",
        "validDigit",
        "pos",
        "pos",
        "pos",
        "validDigit",
        "c",
        "pos",
        "valid",
        "valid",
        "TNUMBER",
        "parseInt",
        "startPos",
        "pos",
        "radix",
        "pos",
        "valid",
        "TokenStream",
        "pos",
        "c",
        "pos",
        "c",
        "c",
        "foundDot",
        "c",
        "c",
        "foundDot",
        "foundDigits",
        "pos",
        "valid",
        "foundDigits",
        "valid",
        "resetPos",
        "pos",
        "c",
        "c",
        "pos",
        "pos",
        "c",
        "pos",
        "acceptSign",
        "c",
        "c",
        "acceptSign",
        "c",
        "c",
        "validExponent",
        "acceptSign",
        "pos",
        "validExponent",
        "pos",
        "resetPos",
        "valid",
        "TNUMBER",
        "parseFloat",
        "startPos",
        "pos",
        "pos",
        "resetPos",
        "valid",
        "TokenStream",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "TOP",
        "c",
        "c",
        "c",
        "TOP",
        "c",
        "TOP",
        "TOP",
        "c",
        "TOP",
        "TOP",
        "c",
        "TOP",
        "c",
        "TOP",
        "TOP",
        "c",
        "c",
        "TOP",
        "TOP",
        "c",
        "startPos",
        "TokenStream",
        "op",
        "op",
        "TokenStream",
        "line",
        "column",
        "newline",
        "newline",
        "newline",
        "newline",
        "newline",
        "line",
        "column",
        "TokenStream",
        "msg",
        "coords",
        "coords",
        "msg",
        "parser",
        "tokenStream",
        "options",
        "parser",
        "tokenStream",
        "options",
        "ParserState",
        "ParserState",
        "token",
        "value",
        "value",
        "value",
        "contains",
        "value",
        "token",
        "value",
        "value",
        "token",
        "token",
        "value",
        "ParserState",
        "ParserState",
        "ParserState",
        "value",
        "TSTRING",
        "value",
        "ParserState",
        "value",
        "value",
        "coords",
        "coords",
        "value",
        "ParserState",
        "instr",
        "token",
        "token",
        "unaryOps",
        "TNAME",
        "TOP",
        "isPrefixOperator",
        "instr",
        "Instruction",
        "IVAR",
        "TNUMBER",
        "instr",
        "Instruction",
        "INUMBER",
        "TSTRING",
        "instr",
        "Instruction",
        "INUMBER",
        "TPAREN",
        "instr",
        "TPAREN",
        "TBRACKET",
        "TBRACKET",
        "instr",
        "Instruction",
        "IARRAY",
        "instr",
        "instr",
        "Instruction",
        "IARRAY",
        "argCount",
        "ParserState",
        "instr",
        "instr",
        "exprInstr",
        "exprInstr",
        "instr",
        "exprInstr",
        "instr",
        "exprInstr",
        "ParserState",
        "instr",
        "exprInstr",
        "exprInstr",
        "i",
        "len",
        "i",
        "instr",
        "exprInstr",
        "i",
        "ParserState",
        "instr",
        "exprInstr",
        "TSEMICOLON",
        "TEOF",
        "TPAREN",
        "exprInstr",
        "Instruction",
        "IENDSTATEMENT",
        "TEOF",
        "exprInstr",
        "instr",
        "Instruction",
        "IEXPR",
        "exprInstr",
        "ParserState",
        "instr",
        "TBRACKET",
        "instr",
        "argCount",
        "TCOMMA",
        "instr",
        "argCount",
        "argCount",
        "ParserState",
        "instr",
        "instr",
        "TOP",
        "instr",
        "instr",
        "varName",
        "IFUNCALL",
        "varName",
        "i",
        "len",
        "i",
        "lastInstrIndex",
        "i",
        "instr",
        "index",
        "IVAR",
        "instr",
        "index",
        "Instruction",
        "IVARNAME",
        "instr",
        "index",
        "varValue",
        "instr",
        "Instruction",
        "IEXPR",
        "varValue",
        "instr",
        "Instruction",
        "IFUNDEF",
        "varName",
        "varName",
        "IVAR",
        "varName",
        "IMEMBER",
        "varValue",
        "instr",
        "Instruction",
        "IVARNAME",
        "varName",
        "instr",
        "Instruction",
        "IEXPR",
        "varValue",
        "instr",
        "binaryInstruction",
        "ParserState",
        "instr",
        "instr",
        "TOP",
        "trueBranch",
        "TOP",
        "falseBranch",
        "instr",
        "Instruction",
        "IEXPR",
        "trueBranch",
        "instr",
        "Instruction",
        "IEXPR",
        "falseBranch",
        "instr",
        "ternaryInstruction",
        "ParserState",
        "instr",
        "instr",
        "TOP",
        "falseBranch",
        "instr",
        "Instruction",
        "IEXPR",
        "falseBranch",
        "instr",
        "binaryInstruction",
        "ParserState",
        "instr",
        "instr",
        "TOP",
        "trueBranch",
        "instr",
        "Instruction",
        "IEXPR",
        "trueBranch",
        "instr",
        "binaryInstruction",
        "ParserState",
        "instr",
        "instr",
        "TOP",
        "COMPARISON_OPERATORS",
        "instr",
        "instr",
        "binaryInstruction",
        "op",
        "ParserState",
        "instr",
        "instr",
        "TOP",
        "ADD_SUB_OPERATORS",
        "instr",
        "instr",
        "binaryInstruction",
        "op",
        "ParserState",
        "instr",
        "instr",
        "TOP",
        "TERM_OPERATORS",
        "instr",
        "instr",
        "binaryInstruction",
        "op",
        "ParserState",
        "instr",
        "token",
        "token",
        "unaryOps",
        "TOP",
        "isPrefixOperator",
        "TPAREN",
        "instr",
        "TSEMICOLON",
        "TCOMMA",
        "TEOF",
        "TPAREN",
        "instr",
        "instr",
        "instr",
        "unaryInstruction",
        "op",
        "instr",
        "ParserState",
        "instr",
        "instr",
        "TOP",
        "instr",
        "instr",
        "binaryInstruction",
        "ParserState",
        "instr",
        "instr",
        "TOP",
        "instr",
        "unaryInstruction",
        "ParserState",
        "instr",
        "token",
        "token",
        "unaryOps",
        "TOP",
        "isPrefixOperator",
        "instr",
        "instr",
        "unaryInstruction",
        "op",
        "instr",
        "TPAREN",
        "TPAREN",
        "instr",
        "Instruction",
        "IFUNCALL",
        "instr",
        "instr",
        "Instruction",
        "IFUNCALL",
        "argCount",
        "ParserState",
        "instr",
        "TPAREN",
        "instr",
        "argCount",
        "TCOMMA",
        "instr",
        "argCount",
        "argCount",
        "ParserState",
        "instr",
        "instr",
        "TOP",
        "TBRACKET",
        "op",
        "TNAME",
        "instr",
        "Instruction",
        "IMEMBER",
        "op",
        "instr",
        "TBRACKET",
        "instr",
        "binaryInstruction",
        "op",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "contains",
        "b",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "Infinity",
        "a",
        "Infinity",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "Infinity",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "gamma",
        "a",
        "value",
        "isFinite",
        "value",
        "value",
        "value",
        "n",
        "isInteger",
        "n",
        "n",
        "isFinite",
        "n",
        "Infinity",
        "NaN",
        "n",
        "Infinity",
        "n",
        "n",
        "value",
        "res",
        "value",
        "value",
        "res",
        "res",
        "res",
        "n",
        "n",
        "gamma",
        "n",
        "n",
        "Infinity",
        "n",
        "n",
        "n",
        "twoN",
        "n",
        "threeN",
        "n",
        "fourN",
        "n",
        "n",
        "n",
        "n",
        "n",
        "twoN",
        "threeN",
        "fourN",
        "fiveN",
        "fiveN",
        "n",
        "n",
        "x",
        "GAMMA_P",
        "i",
        "GAMMA_P",
        "i",
        "x",
        "GAMMA_P",
        "i",
        "n",
        "i",
        "t",
        "n",
        "GAMMA_G",
        "t",
        "n",
        "t",
        "x",
        "s",
        "s",
        "s",
        "s",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "larg",
        "arg",
        "div",
        "larg",
        "arg",
        "sum",
        "sum",
        "div",
        "div",
        "larg",
        "arg",
        "arg",
        "div",
        "arg",
        "larg",
        "sum",
        "div",
        "div",
        "sum",
        "arg",
        "larg",
        "Infinity",
        "Infinity",
        "larg",
        "sum",
        "cond",
        "yep",
        "nope",
        "cond",
        "yep",
        "nope",
        "value",
        "exp",
        "exp",
        "exp",
        "value",
        "value",
        "value",
        "exp",
        "exp",
        "isNaN",
        "value",
        "exp",
        "exp",
        "NaN",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "exp",
        "exp",
        "value",
        "value",
        "value",
        "value",
        "value",
        "exp",
        "exp",
        "name",
        "value",
        "variables",
        "variables",
        "variables",
        "name",
        "value",
        "value",
        "array",
        "index",
        "array",
        "index",
        "array",
        "arguments",
        "array",
        "array",
        "arguments",
        "array",
        "arguments",
        "array",
        "array",
        "arguments",
        "f",
        "a",
        "f",
        "a",
        "a",
        "x",
        "i",
        "f",
        "x",
        "i",
        "f",
        "init",
        "a",
        "f",
        "a",
        "a",
        "acc",
        "x",
        "i",
        "f",
        "acc",
        "x",
        "i",
        "init",
        "f",
        "a",
        "f",
        "a",
        "a",
        "x",
        "i",
        "f",
        "x",
        "i",
        "target",
        "s",
        "s",
        "s",
        "s",
        "target",
        "sep",
        "a",
        "a",
        "a",
        "sep",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "ONE_THIRD",
        "x",
        "ONE_THIRD",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "options",
        "options",
        "sinh",
        "cosh",
        "tanh",
        "asinh",
        "acosh",
        "atanh",
        "cbrt",
        "log2",
        "log10",
        "log10",
        "expm1",
        "log1p",
        "trunc",
        "neg",
        "stringOrArrayLength",
        "factorial",
        "sign",
        "add",
        "sub",
        "mul",
        "div",
        "mod",
        "concat",
        "equal",
        "notEqual",
        "greaterThan",
        "lessThan",
        "greaterThanEqual",
        "lessThanEqual",
        "andOperator",
        "orOperator",
        "inOperator",
        "setVar",
        "arrayIndex",
        "condition",
        "random",
        "factorial",
        "min",
        "max",
        "hypot",
        "hypot",
        "condition",
        "gamma",
        "roundTo",
        "arrayMap",
        "arrayFold",
        "arrayFilter",
        "stringOrArrayIndexOf",
        "arrayJoin",
        "Parser",
        "expr",
        "ParserState",
        "TokenStream",
        "expr",
        "parserState",
        "instr",
        "parserState",
        "TEOF",
        "Expression",
        "instr",
        "Parser",
        "expr",
        "variables",
        "expr",
        "variables",
        "Parser",
        "Parser",
        "expr",
        "sharedParser",
        "expr",
        "Parser",
        "expr",
        "variables",
        "sharedParser",
        "expr",
        "variables",
        "op",
        "optionNameMap",
        "op",
        "optionNameMap",
        "op",
        "op",
        "Parser",
        "op",
        "getOptionName",
        "op",
        "optionName",
        "operators",
        "operators",
        "optionName",
        "Parser",
        "Expression",
        "exports",
        "Expression",
        "exports",
        "Parser",
        "exports",
        "index",
        "exports"
    ],
    "literals": [
        "'object'",
        "'undefined'",
        "'function'",
        "'exports'",
        "'use strict'",
        "'INUMBER'",
        "'IOP1'",
        "'IOP2'",
        "'IOP3'",
        "'IVAR'",
        "'IVARNAME'",
        "'IFUNCALL'",
        "'IFUNDEF'",
        "'IEXPR'",
        "'IEXPREVAL'",
        "'IMEMBER'",
        "'IENDSTATEMENT'",
        "'IARRAY'",
        "'CALL '",
        "'DEF '",
        "'ARRAY '",
        "'.'",
        "'Invalid Instruction'",
        "'?'",
        "'and'",
        "'or'",
        "'='",
        "'?'",
        "'undefined variable: '",
        "' is not a function'",
        "'name'",
        "'invalid Expression'",
        "'invalid Expression (parity)'",
        "'number'",
        "'('",
        "')'",
        "'['",
        "', '",
        "']'",
        "'^'",
        "'Math.pow('",
        "', '",
        "')'",
        "'and'",
        "'(!!'",
        "' && !!'",
        "')'",
        "'or'",
        "'(!!'",
        "' || !!'",
        "')'",
        "'||'",
        "'(function(a,b){ return Array.isArray(a) && Array.isArray(b) ? a.concat(b) : String(a) + String(b); }(('",
        "'),('",
        "')))'",
        "'=='",
        "'('",
        "' === '",
        "')'",
        "'!='",
        "'('",
        "' !== '",
        "')'",
        "'['",
        "'[('",
        "') | 0]'",
        "'('",
        "' '",
        "' '",
        "')'",
        "'['",
        "'['",
        "']'",
        "'('",
        "' '",
        "' '",
        "')'",
        "'?'",
        "'('",
        "' ? '",
        "' : '",
        "')'",
        "'invalid Expression'",
        "'-'",
        "'+'",
        "'('",
        "')'",
        "'not'",
        "'('",
        "'!'",
        "')'",
        "'!'",
        "'fac('",
        "')'",
        "'('",
        "')'",
        "'!'",
        "'('",
        "'!)'",
        "'('",
        "' '",
        "')'",
        "'('",
        "', '",
        "')'",
        "'('",
        "' = function('",
        "', '",
        "') { return '",
        "' })'",
        "'('",
        "'('",
        "', '",
        "') = '",
        "')'",
        "'.'",
        "'['",
        "', '",
        "']'",
        "'('",
        "')'",
        "'invalid Expression'",
        "','",
        "';'",
        "'string'",
        "'\\\\u2028'",
        "'\\\\u2029'",
        "'.'",
        "'with(this.functions) with (this.ternaryOps) with (this.binaryOps) with (this.unaryOps) { return '",
        "'; }'",
        "'TEOF'",
        "'TOP'",
        "'TNUMBER'",
        "'TSTRING'",
        "'TPAREN'",
        "'TBRACKET'",
        "'TCOMMA'",
        "'TNAME'",
        "'TSEMICOLON'",
        "': '",
        "'EOF'",
        "'Unknown character \"'",
        "'\"'",
        "'\\''",
        "'\"'",
        "'\\\\'",
        "'('",
        "')'",
        "'['",
        "']'",
        "'['",
        "','",
        "','",
        "';'",
        "';'",
        "'_'",
        "'.'",
        "'0'",
        "'9'",
        "'_'",
        "'0'",
        "'9'",
        "'$'",
        "'_'",
        "'_'",
        "'_'",
        "'0'",
        "'9'",
        "' '",
        "'\\t'",
        "'\\n'",
        "'\\r'",
        "'\\\\'",
        "'\\''",
        "'\\''",
        "'\"'",
        "'\"'",
        "'\\\\'",
        "'\\\\'",
        "'/'",
        "'/'",
        "'b'",
        "'\\b'",
        "'f'",
        "'\\f'",
        "'n'",
        "'\\n'",
        "'r'",
        "'\\r'",
        "'t'",
        "'\\t'",
        "'u'",
        "'Illegal escape sequence: \\\\u'",
        "'Illegal escape sequence: \"\\\\'",
        "'\"'",
        "'\\\\'",
        "'/'",
        "'*'",
        "'*/'",
        "'0'",
        "'x'",
        "'b'",
        "'0'",
        "'9'",
        "'.'",
        "'.'",
        "'e'",
        "'E'",
        "'+'",
        "'-'",
        "'0'",
        "'9'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'^'",
        "'?'",
        "':'",
        "'.'",
        "'∙'",
        "'•'",
        "'*'",
        "'>'",
        "'='",
        "'>='",
        "'>'",
        "'<'",
        "'='",
        "'<='",
        "'<'",
        "'|'",
        "'|'",
        "'||'",
        "'='",
        "'='",
        "'=='",
        "'!'",
        "'='",
        "'!='",
        "'\\n'",
        "'parse error ['",
        "':'",
        "']: '",
        "'undefined'",
        "'function'",
        "'parse error ['",
        "':'",
        "']: Expected '",
        "'('",
        "')'",
        "'['",
        "']'",
        "'unexpected '",
        "')'",
        "']'",
        "'='",
        "'()='",
        "'function definition is not permitted'",
        "'expected variable for assignment'",
        "'='",
        "'?'",
        "':'",
        "'?'",
        "'or'",
        "'or'",
        "'and'",
        "'and'",
        "'=='",
        "'!='",
        "'<'",
        "'<='",
        "'>='",
        "'>'",
        "'in'",
        "'+'",
        "'-'",
        "'||'",
        "'*'",
        "'/'",
        "'%'",
        "'-'",
        "'+'",
        "'('",
        "')'",
        "'^'",
        "'^'",
        "'!'",
        "'!'",
        "'('",
        "')'",
        "')'",
        "'.'",
        "'['",
        "'.'",
        "'unexpected \".\", member access is not permitted'",
        "'['",
        "'['",
        "'unexpected \"[]\", arrays are disabled'",
        "']'",
        "'['",
        "'unexpected symbol: '",
        "''",
        "'undefined'",
        "'number'",
        "'e'",
        "'e'",
        "'e'",
        "'e'",
        "'function'",
        "'First argument to map is not a function'",
        "'Second argument to map is not an array'",
        "'function'",
        "'First argument to fold is not a function'",
        "'Second argument to fold is not an array'",
        "'function'",
        "'First argument to filter is not a function'",
        "'Second argument to filter is not an array'",
        "'string'",
        "'Second argument to indexOf is not a string or array'",
        "'Second argument to join is not an array'",
        "'-'",
        "'+'",
        "'!'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'^'",
        "'||'",
        "'=='",
        "'!='",
        "'>'",
        "'<'",
        "'>='",
        "'<='",
        "'in'",
        "'='",
        "'['",
        "'?'",
        "'if'",
        "'true'",
        "'false'",
        "'EOF'",
        "'+'",
        "'add'",
        "'-'",
        "'subtract'",
        "'*'",
        "'multiply'",
        "'/'",
        "'divide'",
        "'%'",
        "'remainder'",
        "'^'",
        "'power'",
        "'!'",
        "'factorial'",
        "'<'",
        "'comparison'",
        "'>'",
        "'comparison'",
        "'<='",
        "'comparison'",
        "'>='",
        "'comparison'",
        "'=='",
        "'comparison'",
        "'!='",
        "'comparison'",
        "'||'",
        "'concatenate'",
        "'and'",
        "'logical'",
        "'or'",
        "'logical'",
        "'not'",
        "'logical'",
        "'?'",
        "'conditional'",
        "':'",
        "'conditional'",
        "'='",
        "'assignment'",
        "'['",
        "'array'",
        "'()='",
        "'fndef'",
        "'__esModule'"
    ],
    "variables": [
        "INUMBER",
        "IOP1",
        "IOP2",
        "IOP3",
        "IVAR",
        "IVARNAME",
        "IFUNCALL",
        "IFUNDEF",
        "IEXPR",
        "IEXPREVAL",
        "IMEMBER",
        "IENDSTATEMENT",
        "IARRAY",
        "nstack",
        "newexpression",
        "n1",
        "n2",
        "n3",
        "f",
        "i",
        "item",
        "newexpression",
        "i",
        "item",
        "j",
        "expritem",
        "replitem",
        "nstack",
        "n1",
        "n2",
        "n3",
        "f",
        "args",
        "argCount",
        "numTokens",
        "i",
        "item",
        "v",
        "n2",
        "args",
        "argCount",
        "n1",
        "f",
        "scope",
        "i",
        "len",
        "nstack",
        "n1",
        "n2",
        "n3",
        "f",
        "args",
        "argCount",
        "i",
        "item",
        "i",
        "withMembers",
        "prevVar",
        "i",
        "item",
        "vars",
        "vars",
        "functions",
        "expr",
        "f",
        "TEOF",
        "TOP",
        "TNUMBER",
        "TSTRING",
        "TPAREN",
        "TBRACKET",
        "TCOMMA",
        "TNAME",
        "TSEMICOLON",
        "r",
        "startPos",
        "quote",
        "index",
        "rawString",
        "c",
        "c",
        "c",
        "c",
        "startPos",
        "i",
        "startPos",
        "c",
        "startPos",
        "i",
        "startPos",
        "c",
        "startPos",
        "i",
        "startPos",
        "hasLetter",
        "c",
        "r",
        "c",
        "codePointPattern",
        "index",
        "buffer",
        "c",
        "codePoint",
        "backslash",
        "c",
        "pos",
        "radix",
        "validDigit",
        "valid",
        "startPos",
        "pos",
        "c",
        "valid",
        "pos",
        "startPos",
        "pos",
        "resetPos",
        "pos",
        "foundDot",
        "foundDigits",
        "c",
        "acceptSign",
        "validExponent",
        "startPos",
        "c",
        "line",
        "column",
        "newline",
        "coords",
        "coords",
        "unaryOps",
        "argCount",
        "exprInstr",
        "i",
        "len",
        "argCount",
        "varName",
        "varValue",
        "lastInstrIndex",
        "i",
        "len",
        "index",
        "trueBranch",
        "falseBranch",
        "falseBranch",
        "trueBranch",
        "COMPARISON_OPERATORS",
        "op",
        "ADD_SUB_OPERATORS",
        "op",
        "TERM_OPERATORS",
        "op",
        "unaryOps",
        "op",
        "unaryOps",
        "op",
        "argCount",
        "argCount",
        "op",
        "GAMMA_G",
        "GAMMA_P",
        "t",
        "x",
        "value",
        "res",
        "twoN",
        "threeN",
        "fourN",
        "fiveN",
        "i",
        "sum",
        "larg",
        "i",
        "arg",
        "div",
        "ONE_THIRD",
        "instr",
        "parserState",
        "sharedParser",
        "optionNameMap",
        "optionName",
        "operators",
        "index"
    ],
    "comments": [
        "else if (type === IARRAY && nstack.length >= item.value) {\n                   var length = item.value;\n                   while (length-- > 0) {\n                     newexpression.push(nstack.pop());\n                   }\n                   newexpression.push(new Instruction(IARRAY, item.value));\n                 }",
        "Create closure to keep references to arguments and expression",
        "f.name = n1",
        "Explicitly return zero to avoid test issues caused by -0",
        "eslint-disable-line no-new-func",
        "interpret the following 4 characters as the hex of the unicode code point",
        "a!",
        "Gamma function from math.js",
        "Will overflow",
        "0! is per definition 1",
        "will overflow",
        "Extended Stirling Approx",
        "If the exp is undefined or zero...",
        "If the value is not a number or the exp is not an integer...",
        "Shift",
        "Shift back",
        "backward compat",
        "!\n     Based on ndef.parser, by Raphael Graf(r@undefined.ch)\n     http://www.undefined.ch/mparser/index.html\n\n     Ported to JavaScript and modified by Matthew Crumley (email@matthewcrumley.com, http://silentmatt.com/)\n\n     You are free to use and modify this code in anyway you find useful. Please leave this comment in the code\n     to acknowledge its original source. If you feel like it, I enjoy hearing about projects that use my code,\n     but don't feel like you have to let me know or ask permission.",
        "Backwards compatibility"
    ],
    "docstrings": [
        "* Decimal adjustment of a number.\n     * From @escopecz.\n     *\n     * @param {Number} value The number.\n     * @param {Integer} exp  The exponent (the 10 logarithm of the adjustment base).\n     * @return {Number} The adjusted value."
    ],
    "functions": [
        "Instruction",
        "unaryInstruction",
        "binaryInstruction",
        "ternaryInstruction",
        "simplify",
        "substitute",
        "evaluate",
        "createExpressionEvaluator",
        "isExpressionEvaluator",
        "resolveExpression",
        "expressionToString",
        "escapeValue",
        "contains",
        "getSymbols",
        "Expression",
        "Token",
        "TokenStream",
        "ParserState",
        "isPrefixOperator",
        "isPrefixOperator",
        "isPrefixOperator",
        "add",
        "sub",
        "mul",
        "div",
        "mod",
        "concat",
        "equal",
        "notEqual",
        "greaterThan",
        "lessThan",
        "greaterThanEqual",
        "lessThanEqual",
        "andOperator",
        "orOperator",
        "inOperator",
        "sinh",
        "cosh",
        "tanh",
        "asinh",
        "acosh",
        "atanh",
        "log10",
        "neg",
        "trunc",
        "random",
        "factorial",
        "isInteger",
        "gamma",
        "stringOrArrayLength",
        "hypot",
        "condition",
        "roundTo",
        "setVar",
        "arrayIndex",
        "max",
        "min",
        "arrayMap",
        "arrayFold",
        "arrayFilter",
        "stringOrArrayIndexOf",
        "arrayJoin",
        "sign",
        "cbrt",
        "expm1",
        "log1p",
        "log2",
        "Parser",
        "getOptionName"
    ],
    "classes": []
}