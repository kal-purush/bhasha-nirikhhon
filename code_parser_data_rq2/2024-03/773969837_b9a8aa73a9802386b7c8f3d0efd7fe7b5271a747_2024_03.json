{
    "identifiers": [
        "print_function",
        "platform",
        "sys",
        "os",
        "itertools",
        "pyperf",
        "perf_util",
        "ImportError",
        "fn",
        "open",
        "fn",
        "read",
        "strip",
        "fn",
        "file_word",
        "fn",
        "fn",
        "file_word",
        "fn",
        "replace",
        "s",
        "find",
        "s",
        "u",
        "s",
        "s",
        "u",
        "n",
        "unit",
        "u",
        "unit",
        "u",
        "n",
        "u",
        "n",
        "u",
        "u",
        "n",
        "x",
        "n",
        "x",
        "m",
        "n",
        "m",
        "n",
        "p",
        "p",
        "d",
        "bin",
        "n",
        "d",
        "s",
        "r",
        "s",
        "split",
        "r",
        "r",
        "split",
        "m",
        "hi",
        "lo",
        "m",
        "r",
        "m",
        "m",
        "intmask_list",
        "m",
        "implementer",
        "implementer_code",
        "model",
        "model_code",
        "sku",
        "stepping",
        "features",
        "implementer",
        "implementer_code",
        "model",
        "model_code",
        "isinstance",
        "model_code",
        "model_code",
        "sku",
        "stepping",
        "features",
        "features",
        "implementer",
        "arch",
        "s",
        "model_code",
        "s",
        "model_code",
        "arch",
        "s",
        "str_stepping",
        "s",
        "arch",
        "stepping",
        "stepping",
        "features",
        "implementer",
        "model_name",
        "model_sku",
        "s",
        "model_sku",
        "stepping",
        "s",
        "str_stepping",
        "features",
        "features",
        "s",
        "join",
        "features",
        "s",
        "feature",
        "feature",
        "features",
        "str_full",
        "other",
        "__repr__",
        "other",
        "__repr__",
        "hash",
        "implementer",
        "a",
        "append",
        "implementer",
        "implementer_code",
        "a",
        "append",
        "implementer_code",
        "model_name",
        "a",
        "append",
        "model_name",
        "model_code",
        "a",
        "append",
        "model_code",
        "stepping",
        "a",
        "append",
        "str_stepping",
        "features",
        "a",
        "append",
        "join",
        "features",
        "join",
        "a",
        "open",
        "r",
        "f",
        "r",
        "find",
        "cix",
        "c",
        "cpus",
        "c",
        "keys",
        "r",
        "startswith",
        "r",
        "cix",
        "last_cpu_number",
        "cpuno",
        "last_cpu_number",
        "cpuno",
        "last_cpu_number",
        "last_cpu_number",
        "cpuno",
        "file",
        "sys",
        "stderr",
        "cpuno",
        "cpus",
        "append",
        "cpuno",
        "cpus",
        "r",
        "cix",
        "strip",
        "r",
        "cix",
        "f",
        "close",
        "c",
        "cpus",
        "c",
        "keys",
        "ts",
        "ts",
        "ts",
        "path",
        "os",
        "path",
        "isdir",
        "path",
        "file_hex",
        "path",
        "file_int",
        "path",
        "file_word",
        "path",
        "cpumask",
        "level",
        "cache_type_letter",
        "ts",
        "path",
        "system",
        "system",
        "path",
        "discover",
        "path",
        "cpus",
        "intlist_mask",
        "cpus",
        "c",
        "min",
        "cpus",
        "min",
        "c",
        "cpus",
        "min",
        "cpus",
        "min",
        "c",
        "cpus",
        "level",
        "c",
        "level",
        "level",
        "c",
        "level",
        "c",
        "cpuno",
        "cpuno",
        "cpus",
        "is_unified",
        "path",
        "os",
        "path",
        "isdir",
        "path",
        "os",
        "path",
        "isfile",
        "path",
        "str_memsize",
        "file_word",
        "path",
        "os",
        "path",
        "isfile",
        "path",
        "file_int",
        "path",
        "os",
        "path",
        "isfile",
        "path",
        "file_int",
        "path",
        "os",
        "path",
        "isfile",
        "path",
        "file_int",
        "path",
        "file_word",
        "path",
        "cache_type_letter",
        "ts",
        "os",
        "path",
        "isfile",
        "path",
        "file_word",
        "path",
        "file_int",
        "path",
        "file_hex",
        "path",
        "intmask_list",
        "cpumap",
        "file_word",
        "path",
        "cpumap",
        "cpusetstr_mask",
        "cpuliststr",
        "cpumap",
        "cpuliststr",
        "check_cpusetstr",
        "cpuliststr",
        "mask_cpusetstr",
        "cpumap",
        "cpuliststr",
        "cpumap",
        "len",
        "cpus",
        "parent",
        "system",
        "cpu",
        "cpus",
        "package_id",
        "system",
        "package_cpulist",
        "p",
        "cpus",
        "is_all_package",
        "is_LLC",
        "is_all_package",
        "parent",
        "list_cpusetstr",
        "CPUlist_to_cpulist",
        "system",
        "cpus_by_package",
        "p",
        "list_cpusetstr",
        "cpus",
        "is_all_package",
        "level",
        "size",
        "memsize_str",
        "size",
        "ways",
        "geom",
        "ways",
        "line_size",
        "geom",
        "line_size",
        "geom",
        "type_str",
        "geometry_str",
        "s",
        "is_private",
        "s",
        "mask_cpusetstr",
        "cpu_mask",
        "s",
        "os",
        "path",
        "exists",
        "devdir",
        "os",
        "path",
        "exists",
        "devdir",
        "d",
        "os",
        "listdir",
        "devdir",
        "d",
        "startswith",
        "len",
        "d",
        "d",
        "isdigit",
        "d",
        "devdir",
        "d",
        "cpuno",
        "cd",
        "ARM_experimental_cpuid_map",
        "ARM_ARM_cpuid_map",
        "n",
        "system",
        "system",
        "n",
        "cpuno",
        "cpuno",
        "cpuno",
        "os",
        "path",
        "isdir",
        "s",
        "s",
        "found_in_cpuinfo",
        "level",
        "c",
        "caches",
        "c",
        "level",
        "level",
        "c",
        "contains",
        "res",
        "res",
        "c",
        "c",
        "res",
        "cache_type",
        "i",
        "cache",
        "i",
        "cache_type",
        "i",
        "c",
        "i",
        "cache_type",
        "c",
        "c",
        "c",
        "caches",
        "c",
        "is_LLC",
        "c",
        "c",
        "system",
        "caches",
        "c",
        "for_cpu",
        "cpuno",
        "c",
        "x",
        "n",
        "n",
        "freq",
        "x",
        "freq_min",
        "x",
        "freq_min",
        "x",
        "freq_max",
        "s",
        "freq",
        "x",
        "freq_max",
        "s",
        "cl",
        "c",
        "cpuno",
        "c",
        "cl",
        "os",
        "sysconf",
        "os",
        "sysconf",
        "open",
        "f",
        "ln",
        "f",
        "ln",
        "startswith",
        "ln",
        "split",
        "x",
        "x",
        "m2",
        "m1",
        "m2",
        "m1",
        "m2",
        "m1",
        "mask",
        "system",
        "mask",
        "system",
        "cpumask",
        "discover",
        "o_verbose",
        "file",
        "sys",
        "stderr",
        "platform",
        "machine",
        "physical_memory",
        "cpuno",
        "keys",
        "read_proc_cpuinfo",
        "o_verbose",
        "cpuno",
        "keys",
        "file",
        "sys",
        "stderr",
        "allcpu_mask",
        "cpuno",
        "max_cpuno",
        "cpuno",
        "cpuno",
        "CPU",
        "cpuno",
        "system",
        "cpus_by_number",
        "cpu",
        "n_cpus_online",
        "spec_from_keys",
        "keys",
        "spec",
        "keys",
        "spec",
        "spec",
        "spec_to_cpulist",
        "spec_to_cpulist",
        "spec_to_cpulist",
        "spec",
        "append",
        "cpuno",
        "cpuno",
        "cd",
        "read_sys_cpus",
        "allcpu_mask",
        "cpuno",
        "max_cpuno",
        "cpuno",
        "cpuno",
        "cpuno",
        "cpus_by_number",
        "cpus_by_number",
        "cpuno",
        "CPU",
        "cpuno",
        "system",
        "cpus_by_number",
        "cpu",
        "os",
        "path",
        "isdir",
        "cd",
        "file_int",
        "cd",
        "cpu",
        "core_id",
        "cpus_by_core",
        "cpus_by_core",
        "cpu",
        "core_id",
        "cpus_by_core",
        "cpu",
        "core_id",
        "append",
        "cpu",
        "file_int",
        "cd",
        "cpu",
        "package_id",
        "cpus_by_package",
        "cpus_by_package",
        "cpu",
        "package_id",
        "cpus_by_package",
        "cpu",
        "package_id",
        "append",
        "cpu",
        "os",
        "path",
        "isdir",
        "cd",
        "file_int",
        "cd",
        "file_int",
        "cd",
        "cd",
        "os",
        "path",
        "exists",
        "caches",
        "c",
        "os",
        "listdir",
        "caches",
        "c",
        "startswith",
        "caches",
        "c",
        "cache_key",
        "cpath",
        "ckey",
        "caches_by_key",
        "Cache",
        "cpath",
        "system",
        "caches_by_key",
        "cache",
        "group",
        "cache",
        "cpu_mask",
        "cache_group",
        "caches",
        "append",
        "cache",
        "caches_by_key",
        "ckey",
        "cache",
        "level",
        "cache",
        "contains",
        "cache",
        "cache",
        "contains",
        "cache",
        "caches_for_this_cpu",
        "append",
        "cache",
        "c",
        "caches_for_this_cpu",
        "cp",
        "caches_for_this_cpu",
        "cp",
        "level",
        "c",
        "level",
        "c",
        "cp",
        "contains",
        "c",
        "c",
        "parent",
        "c",
        "parent",
        "cp",
        "cp",
        "cpus_by_number",
        "spec_to_cpulist",
        "n",
        "itertools",
        "count",
        "n",
        "os",
        "path",
        "exists",
        "node",
        "intmask_list",
        "cpusetstr_mask",
        "file_word",
        "node",
        "cpus_by_node",
        "node_cpus",
        "i",
        "node_cpus",
        "cpus_by_number",
        "i",
        "n",
        "group",
        "allcpu_mask",
        "a",
        "b",
        "a",
        "b",
        "a",
        "gk",
        "g",
        "groups_by_cpumask",
        "items",
        "gk",
        "allcpu_mask",
        "top",
        "gpk",
        "gp",
        "groups_by_cpumask",
        "items",
        "gpk",
        "gk",
        "is_subset",
        "g",
        "cpu_mask",
        "gp",
        "cpu_mask",
        "is_subset",
        "gp",
        "cpu_mask",
        "best_parent",
        "cpu_mask",
        "gp",
        "best_parent",
        "best_parent",
        "subgroups",
        "append",
        "g",
        "g",
        "groups_by_cpumask",
        "values",
        "gs",
        "g",
        "subgroups",
        "gs",
        "parent",
        "g",
        "mask",
        "mask",
        "groups_by_cpumask",
        "groups_by_cpumask",
        "Group",
        "mask",
        "system",
        "groups_by_cpumask",
        "mask",
        "n",
        "cpus_by_number",
        "n",
        "top",
        "cpu_mask",
        "online_only",
        "i",
        "n_cpus",
        "cpu",
        "i",
        "online_only",
        "cpu",
        "is_online",
        "cpu",
        "keys",
        "arch",
        "arch",
        "keys",
        "keys",
        "keys",
        "family",
        "model",
        "family",
        "model",
        "keys",
        "imp",
        "family",
        "model",
        "imp",
        "keys",
        "keys",
        "split",
        "CPUspec",
        "implementer",
        "imp",
        "model",
        "model_name",
        "model_code",
        "model_code",
        "sku",
        "model_sku",
        "stepping",
        "stepping",
        "features",
        "features",
        "arch",
        "arch",
        "keys",
        "keys",
        "part",
        "impcode",
        "ARM_implementer",
        "ARM_implementer",
        "impcode",
        "imp",
        "part",
        "imp",
        "imp",
        "part",
        "impcode",
        "keys",
        "keys",
        "cpu_variant",
        "cpu_revision",
        "keys",
        "split",
        "CPUspec",
        "implementer",
        "imp_name",
        "implementer_code",
        "impcode",
        "model",
        "part_name",
        "model_code",
        "part",
        "stepping",
        "stepping",
        "features",
        "features",
        "arch",
        "spec",
        "arch",
        "spec",
        "online_only",
        "online_only",
        "len",
        "cpus_by_number",
        "n_cpus_online",
        "len",
        "spec_to_cpulist",
        "len",
        "cpus_by_node",
        "len",
        "cpus_by_package",
        "p",
        "sorted",
        "CPUlist_to_cpulist",
        "cpus_by_package",
        "p",
        "spec_to_cpulist",
        "keys",
        "feature",
        "cs",
        "cpu_specs",
        "cs",
        "has_feature",
        "feature",
        "spec_to_cpulist",
        "len",
        "spec_to_cpulist",
        "len",
        "spec_to_cpulist",
        "is_missing_cpus",
        "n_cpus",
        "max_cpuno",
        "sorted",
        "caches_by_key",
        "values",
        "max",
        "c",
        "level",
        "c",
        "caches_by_key",
        "values",
        "show_features",
        "arch",
        "n_cpus",
        "n_nodes",
        "n_packages",
        "spec",
        "cpus",
        "spec_to_cpulist",
        "items",
        "spec",
        "arch",
        "arch",
        "spec",
        "str_full",
        "show_features",
        "join",
        "spec",
        "features",
        "mask_cpusetstr",
        "intlist_mask",
        "cpus",
        "cpu",
        "cpus",
        "cpurep",
        "freq_min",
        "freq_range",
        "cpurep",
        "is_heterogeneous",
        "is_missing_cpus",
        "memsize_str",
        "phys_mem",
        "cache_level_max",
        "cache",
        "caches",
        "mc",
        "cache",
        "level",
        "cache",
        "cpu",
        "cpus",
        "cpu",
        "end",
        "is_heterogeneous",
        "cpu",
        "spec",
        "end",
        "n_nodes",
        "cpu",
        "numa_node",
        "end",
        "cache",
        "cpu",
        "caches",
        "cache",
        "g_system",
        "g_system",
        "g_system",
        "s",
        "memsize_str",
        "s",
        "phys_mem",
        "c",
        "c",
        "level",
        "c",
        "is_unified",
        "s",
        "c",
        "lower",
        "c",
        "size",
        "s",
        "memsize_str",
        "c",
        "size",
        "s",
        "g",
        "level",
        "s",
        "groups_by_cpumask",
        "g",
        "cpu_mask",
        "g",
        "level",
        "end",
        "o_verbose",
        "level",
        "end",
        "c",
        "g",
        "caches",
        "cache_short",
        "c",
        "end",
        "g",
        "subgroups",
        "cpuno",
        "intmask_list",
        "g",
        "cpu_mask",
        "level",
        "cpuno",
        "sg",
        "g",
        "subgroups",
        "sg",
        "cpu_mask",
        "g",
        "cpu_mask",
        "sg",
        "cpu_mask",
        "g",
        "cpu_mask",
        "list_group",
        "sg",
        "level",
        "list_group",
        "s",
        "top",
        "cp",
        "join",
        "c",
        "c",
        "cp",
        "c",
        "s",
        "cpus",
        "c",
        "cache_path_str",
        "c",
        "cache_path",
        "cache_path_str",
        "c",
        "cache_path",
        "os",
        "system",
        "lstopo",
        "system",
        "S",
        "S",
        "n_packages",
        "S",
        "n_cpus",
        "memsize_str",
        "physical_memory",
        "unit",
        "sp",
        "S",
        "spec_to_cpulist",
        "S",
        "spec_to_cpulist",
        "sp",
        "s",
        "sp",
        "str_compact",
        "len",
        "cpus",
        "s",
        "argparse",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "parse_args",
        "opts",
        "compact",
        "opts",
        "features",
        "opts",
        "cpus",
        "opts",
        "cache",
        "opts",
        "check",
        "opts",
        "verbose",
        "system",
        "o_compact",
        "system_summary",
        "S",
        "c",
        "S",
        "caches",
        "c",
        "is_package",
        "memsize_str",
        "c",
        "size",
        "mask_cpusetstr",
        "c",
        "cpu_mask",
        "S",
        "show",
        "show_features",
        "o_show_features",
        "o_list_cpus",
        "S",
        "show_cpus",
        "o_list_cache",
        "S",
        "show_caches",
        "o_check",
        "lstopo_check"
    ],
    "literals": [
        "','",
        "''",
        "\"BKMGT\"",
        "\"BKMGT\"",
        "\"%.3g%s\"",
        "\"BKMGT\"",
        "'0'",
        "','",
        "'-'",
        "'-'",
        "\"%s \"",
        "\"x86_64\"",
        "\"%u\"",
        "\"0x%x\"",
        "\"aarch64\"",
        "\" %s\"",
        "\"aarch64\"",
        "\"r%up%u\"",
        "\"stepping %s\"",
        "\"%s %s\"",
        "\" (%s)\"",
        "\" %s\"",
        "\" features [%s]\"",
        "' '",
        "\"imp:%s\"",
        "\"impcode:0x%x\"",
        "\"model:%s\"",
        "\"code:0x%x\"",
        "\"stepping:%s\"",
        "\"features:[%s]\"",
        "' '",
        "' '",
        "\"/proc/cpuinfo\"",
        "':'",
        "\"processor\"",
        "\"** /proc/cpuinfo is missing CPU(s) %u..%u\"",
        "\"Instruction\"",
        "\"Data\"",
        "\"Unified\"",
        "\"/shared_cpu_map\"",
        "\"/level\"",
        "\"/type\"",
        "\"U\"",
        "\"ID\"",
        "\"/size\"",
        "\"/size\"",
        "\"/ways_of_associativity\"",
        "\"/ways_of_associativity\"",
        "\"/number_of_sets\"",
        "\"/number_of_sets\"",
        "\"/coherency_line_size\"",
        "\"/coherency_line_size\"",
        "\"/type\"",
        "\"I\"",
        "\"/write_policy\"",
        "\"/write_policy\"",
        "\"/level\"",
        "\"/shared_cpu_map\"",
        "\"/shared_cpu_list\"",
        "\"mismatch: 0x%x %s\"",
        "\"mismatch: %s 0x%x\"",
        "\"unexpected: %s, is_package=%s, parent=%s\"",
        "\"  package:   %s\"",
        "\"  self.cpus: %s\"",
        "\"L%u%s\"",
        "\" %u-way\"",
        "\"unknown geometry\"",
        "\" %ub-line\"",
        "\"%s %s\"",
        "\" \"",
        "\"shared\"",
        "\"private\"",
        "\" for CPU %s\"",
        "\"/sys/bus/cpu/devices\"",
        "\"/sys/devices/system/cpu\"",
        "\"cpu\"",
        "\"/\"",
        "\"Cortex-A7\"",
        "\"Cortex-A15\"",
        "\"Cortex-A53\"",
        "\"Cortex-A57\"",
        "\"Cortex-A72\"",
        "\"Neoverse N1\"",
        "\"Neoverse V1\"",
        "\"Neoverse N2\"",
        "\"Neoverse V2\"",
        "\"Rainier\"",
        "\"Arm-int\"",
        "\"Arm\"",
        "\"Broadcom\"",
        "\"Cavium\"",
        "\"ThunderX\"",
        "\"DEC\"",
        "\"Fujitsu\"",
        "\"Huawei\"",
        "\"Infineon\"",
        "\"Motorola/Freescale\"",
        "\"NVIDIA\"",
        "\"Denver\"",
        "\"APM\"",
        "\"Qualcomm\"",
        "\"Marvell\"",
        "\"Intel\"",
        "\"CPU#%u\"",
        "\"/sys/devices/system/cpu/cpu\"",
        "\"IDU\"",
        "\"cache overlap: %s vs. %s\"",
        "\"missing cache L%u%s for %s\"",
        "\"%.1fGHz\"",
        "\"-\"",
        "\"SC_PAGE_SIZE\"",
        "\"SC_PHYS_PAGES\"",
        "\"/proc/meminfo\"",
        "\"MemTotal:\"",
        "\"kB\"",
        "\"physical memory mismatch: %u vs. %u \"",
        "\"discovering system topology...\"",
        "\"CPU %u: %s\"",
        "\"could not get spec: %s\"",
        "\"/topology\"",
        "\"/topology/core_id\"",
        "\"/topology/physical_package_id\"",
        "\"/cpufreq\"",
        "\"/cpufreq/cpuinfo_min_freq\"",
        "\"/cpufreq/cpuinfo_max_freq\"",
        "\"/cache\"",
        "\"index\"",
        "\"/\"",
        "\"I\"",
        "\"D\"",
        "\"U\"",
        "\"/sys/devices/system/node/node%u\"",
        "\"/cpulist\"",
        "\"x86_64\"",
        "\"cpu family\"",
        "\"model\"",
        "\"model name\"",
        "\"Family %u model %u\"",
        "\"vendor_id\"",
        "\"GenuineIntel\"",
        "\"Intel\"",
        "\"Model %u\"",
        "\"AuthenticAMD\"",
        "\"AMD\"",
        "\"stepping\"",
        "\"flags\"",
        "\"aarch64\"",
        "\"armv7l\"",
        "\"armv8l\"",
        "\"CPU implementer\"",
        "\"CPU part\"",
        "\"Part 0x%03x\"",
        "\"Implementer 0x%02x\"",
        "\"CPU variant\"",
        "\"CPU revision\"",
        "\"Features\"",
        "\"** could not get CPU specification (arch=%s)\"",
        "\"System specification:\"",
        "\"  Architecture: %s\"",
        "\"  Total cores: %u\"",
        "\"  NUMA nodes: %u\"",
        "\"  Packages: %u\"",
        "\"  CPU specifications:\"",
        "\"    Specification:\"",
        "\"    Features:\"",
        "' '",
        "\"      CPUs:\"",
        "\"      Frequency: %s\"",
        "\"  System is heterogeneous\"",
        "\"  Some CPUs missing information\"",
        "\"  System is homogeneous\"",
        "\"  Physical memory: %s\"",
        "\"  Caches:\"",
        "\"    %s%s\"",
        "\"  \"",
        "\"  CPUs:\"",
        "\"    %s\"",
        "\"\"",
        "\": %s\"",
        "\"\"",
        "\" (NUMA node %s)\"",
        "\"\"",
        "\"      %s\"",
        "\"Machine (%s)\"",
        "\"B\"",
        "\"L%u\"",
        "\" (%s)\"",
        "\"B\"",
        "\"  %sGroup\"",
        "\"  \"",
        "\" \"",
        "\"[group level %u]\"",
        "\" \"",
        "\" \"",
        "\"    %sPU P#%u\"",
        "\"  \"",
        "\" -> \"",
        "\"CPUs:\"",
        "\"  %s: %s; %s\"",
        "'I'",
        "'D'",
        "\"lstopo:\"",
        "\"lstopo --no-io -p --of console\"",
        "\"our discovery:\"",
        "\"Sockets: %u  CPUs: %4u  Memory: %10s\"",
        "\"G\"",
        "\"  %s x %u\"",
        "\"__main__\"",
        "\"CPU discovery\"",
        "\"--compact\"",
        "\"store_true\"",
        "\"compact output\"",
        "\"--cache\"",
        "\"store_true\"",
        "\"show cache details\"",
        "\"--cpus\"",
        "\"store_true\"",
        "\"list CPUs\"",
        "\"--features\"",
        "\"store_true\"",
        "\"show features\"",
        "\"--check\"",
        "\"store_true\"",
        "\"-v\"",
        "\"--verbose\"",
        "\"count\"",
        "\"increase verbosity\"",
        "\"  LLC: %10s  %s\""
    ],
    "variables": [
        "o_verbose",
        "check_cpusetstr",
        "u",
        "s",
        "m",
        "m",
        "lo",
        "hi",
        "check_cpusetstr",
        "implementer",
        "implementer_code",
        "model_name",
        "model_code",
        "model_sku",
        "stepping",
        "features",
        "s",
        "s",
        "a",
        "f",
        "cpus",
        "keys",
        "last_cpu_number",
        "cix",
        "cpus",
        "keys",
        "cpuno",
        "last_cpu_number",
        "key",
        "keys",
        "key",
        "cpumask",
        "level",
        "ts",
        "system",
        "size",
        "line_size",
        "ways",
        "sets",
        "write_policy",
        "level",
        "cpus",
        "parent",
        "size",
        "ways",
        "sets",
        "line_size",
        "ts",
        "write_policy",
        "level",
        "cpumap",
        "cpus",
        "cpuliststr",
        "p",
        "is_all_package",
        "geom",
        "geom",
        "s",
        "devdir",
        "devdir",
        "cpuno",
        "cd",
        "ARM_ARM_cpuid_map",
        "ARM_experimental_cpuid_map",
        "ARM_implementer",
        "system",
        "cpuno",
        "found_in_cpuinfo",
        "spec",
        "L1I",
        "L1D",
        "core_id",
        "numa_node",
        "freq_min",
        "freq_max",
        "s",
        "res",
        "res",
        "c",
        "s",
        "m1",
        "x",
        "m2",
        "cpumask",
        "system",
        "parent",
        "subgroups",
        "caches",
        "arch",
        "phys_mem",
        "cpus_by_number",
        "caches_by_key",
        "spec_to_cpulist",
        "max_cpuno",
        "n_cpus_online",
        "cpus_by_core",
        "cpus_by_node",
        "cpus_by_package",
        "groups_by_cpumask",
        "allcpu_mask",
        "max_cpuno",
        "cpu",
        "cpuno",
        "cpu",
        "found_in_cpuinfo",
        "spec",
        "cpu",
        "spec",
        "spec",
        "max_cpuno",
        "cpu",
        "cpu",
        "cpuno",
        "cpu",
        "core_id",
        "cpu",
        "package_id",
        "cpu",
        "freq_min",
        "cpu",
        "freq_max",
        "caches",
        "caches_for_this_cpu",
        "cpath",
        "ckey",
        "cache",
        "ckey",
        "cache_group",
        "cache",
        "cpu",
        "L1I",
        "cpu",
        "L1D",
        "c",
        "parent",
        "node",
        "node_cpus",
        "n",
        "c",
        "c",
        "numa_node",
        "top",
        "best_parent",
        "best_parent",
        "g",
        "parent",
        "mask",
        "cpu",
        "spec",
        "arch",
        "family",
        "model",
        "model_sku",
        "model_code",
        "model_name",
        "imp",
        "imp",
        "model_name",
        "imp",
        "stepping",
        "features",
        "spec",
        "impcode",
        "part",
        "part_name",
        "imp",
        "imp_name",
        "part_name",
        "imp_name",
        "cpu_variant",
        "cpu_revision",
        "stepping",
        "features",
        "spec",
        "spec",
        "arch",
        "cpurep",
        "mc",
        "g_system",
        "g_system",
        "s",
        "s",
        "cpus",
        "parser",
        "opts",
        "o_compact",
        "o_show_features",
        "o_list_cpus",
        "o_list_cache",
        "o_check",
        "o_verbose",
        "S"
    ],
    "comments": [
        "!/usr/bin/env python",
        "",
        "SPDX-FileCopyrightText: Copyright (C) 2024 Arm Limited and/or its affiliates",
        "SPDX-FileCopyrightText: <open-source-office@arm.com>",
        "SPDX-License-Identifier: Apache-2.0",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\"); you may not",
        "use this file except in compliance with the License. You may obtain a copy",
        "of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
        "WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
        "License for the specific language governing permissions and limitations",
        "under the License.",
        "TBD: doesn't compact ranges: 0xF should be \"0-3\" not \"0,1,2,3\"",
        "implementer company name e.g. \"Intel\", \"Arm\"",
        "e.g. ARM 8-bit implementer code, 0x41 for Arm",
        "e.g. \"Model 94\"",
        "for Intel this is e.g. 94 for Skylake",
        "e.g. \"Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz\"",
        "for Intel it's a number, for Arm it's a (rx, px) tuple",
        "self.arch is added by whoever creates this",
        "the CPU number on this system, as seen by Linux",
        "only start collecting keys when we've got at least one CPU",
        "Set of CPUs using (upstream of) this cache",
        "We don't yet know the downstream cache, and won't until",
        "we sort out the cache topology after discovery.",
        "We assume there is one downstream cache - i.e. we don't",
        "have a unified L2 with split L3 downstream of it.",
        "Return True if the specified CPU uses this cache",
        "size might report as zero if CPU offline?",
        "if we have one out of number_of_sets or coherency_line_size we could find out the other,",
        "but sometimes we have neither",
        "is level really an inherent property of a cache?",
        "possibly a cache could be L3 for some cores and L4 for others.",
        "there's also physical_line_partition, power and uevent",
        "check the other representation is equivalent",
        "(and that our utils stringify the set in the canonical way)",
        "Test if the cache is exclusive to a processing element.",
        "On a multithreaded core with L1 shared between threads, there are",
        "no private caches.",
        "Return true if the cache is a last-level cache. Note that a LLC",
        "is not necessarily shared between all CPUs.",
        "Check if this is a package-level cache.",
        "This will be a last-level cache unless there is an off-chip cache shared",
        "between packages.",
        "Small systems might have higher levels of cache shared between all CPUs;",
        "in a single-CPU system, even the L1 is shared between \"all CPUs\".",
        "In that case we only return the outermost cache. That is, there is",
        "at most one package cache per CPU.",
        "/sys/bus/cpu/devices contains just the CPU nodes",
        "/sys/devices/system/cpu contains the CPU nodes plus other stuff",
        "TBD this doesn't really belong here",
        "",
        "Arm architecture implementer codes.",
        "",
        "Generally these are ASCII characters inspired by the",
        "manufacturer name.",
        "",
        "These are tabulated in the ARM ARM under the specification",
        "the Main ID Register (MIDR).",
        "",
        "back pointer to the complete (possibly multi-socket) system",
        "CPU number as understood by the OS",
        "will be a CPUspec",
        "first-level I-cache - may be shared if SMT",
        "first-level D-cache - may be shared if SMT",
        "core id in sysfs topology - not necessarily unique",
        "NUMA node number",
        "package number (not NUMA node number)",
        "Caches at this level (no deeper)",
        "map CPU number to CPUspec",
        "map CPU spec to list of CPUs",
        "map 'core_id' -> CPU",
        "map NUMA node number -> CPU",
        "First, gather information from /proc/cpuinfo.",
        "This can be problematic given the looseness of the format.",
        "But it does tell us things like CPU identifier and features.",
        "Now iterate through the CPU nodes in the device graph",
        "This wasn't listed in /proc/cpuinfo. Maybe offline?",
        "The topology ids are quite arbitrary and probably not useful.",
        "They might be a component of the MPIDR (and hence not system-wide unique)",
        "or they might be the offset of the CPU or other level's entry in the ACPI PPTT.",
        "The CPU node should have had a link to the relevant package",
        "We are assuming \"physical package id\" and \"node id\" are the same (TBD)",
        "not populated on Arm",
        "assert os.path.isdir(cd + (\"/node%u\" % cpu.package))",
        "No cache information available",
        "List all caches for this CPU",
        "We scan the 'index*' subdirectories of the cpu<n>/cache/ directory.",
        "listdir yields them in random order. Typically 'index0' and 'index1'",
        "are L1D and L1I while 'index2' is L2.",
        "shared cache - already seen",
        "Fix up cache parent pointers",
        "add NUMA structure",
        "Maybe built with CONFIG_NUMA=n",
        "all the groups have been created, but the parent/subgroup links need to be be fixed up",
        "Return a CPU object, by number",
        "Yield a list of CPU objects",
        "platform.machine()",
        "always 6, on any modern Intel system; e.g. 25 for AMD",
        "/proc/cpuinfo doesn't give the product name, but we might be able to look it up",
        "if some CPUs are missing, we can't really tell",
        "0 indicates CONFIG_NUMA=n",
        "for each CPU, print its information",
        "CPUs must be homogeneous in architecture at least"
    ],
    "docstrings": [
        "\"\"\"\nGet the system topology on the host.\n\nThe system topology includes the list of CPUs and their vendor and model.\n\nThis module is designed to deal with heterogeneous systems such as Arm's\nbig.LITTLE, where CPUs will be of different types and may even be from\ndifferent vendors, although all conforming to a common architecture,\nwith threads able to migrate between cores. Much of the apparent\ncomplexity of this module is due to the need to track more than one\nCPU type.\n\nThe CPU vendor (implementer) is needed by clients who wish to look up\nimplementation-defined behavior such as hardware performance events.\n\nThis module works by building an object representing the CPU list,\ntogether with the list of CPU types.\nClients can then query the object.\n\nIt assumes that the instruction-set architecture (x86_64, armv8 etc.)\nis a system-wide property.\n\nPossible sources for this information:\n  /proc/cpuinfo\n    As the format of /proc/cpuinfo is not standardized\n    this module has to do its best.\n  /sys/bus/cpu/devices\n  /sys/devices/system/cpu\n    may be more complete than /proc/cpuinfo\n    shows CPU topology\n    'online' shows CPUs online (others are not reported by /proc/cpuinfo)\n  Python stdlib\n    no module specifically for topology\n    multiprocessing: cpu_count() reports the number of CPUs\n    platform: knows the architecture type\n\nYou can use this to discover the specification of a remote system:\n\n  ssh me@system 'python -s' < cpulist.py\n\n\"\"\"",
        "\"\"\"\n    Specification of a CPU type (any architecture).\n    Heterogeneous systems might have multiple CPU types.\n    When we read /proc/cpuinfo we discover one or more\n    CPU types (usually one) and we also discover the\n    mapping of CPU number to CPU type (usually trivial).\n    \"\"\"",
        "\"\"\"\n        Generate a string that fully describes the CPU specification.\n        This is used to detect whether CPUs are the same or different,\n        and build a set of distinct CPU specifications for the whole system\n        (normally 1, except for heterogeneous systems like Arm big.LITTLE).\n        See the __eq__ and __hash__ methods below. So it's essential\n        this string fully describes the CPU implementation.\n        \"\"\"",
        "\"\"\"\n    Read /proc/cpuinfo, returning a series of (CPU number, description) pairs.\n    We cope with two basic styles of /proc/cpuinfo:\n\n      style A:\n         processor : 0\n         key1      : ...\n         key2      : ...\n\n         processor : 1\n         key1      : ...\n         key2      : ...\n\n      style B:\n         processor : 0\n         processor : 1\n         key1      : ...\n         key2      : ...\n\n    This routine is architecture-neutral. See System.spec_from_keys for how\n    this is translated into a processor code for Intel or Arm.\n    \"\"\"",
        "\"\"\"\nCache information. Some caches may be shared, and in our system\nrepresentation we have one node per cache. So we aim for a\nunique identifier per cache.\nsysfs appears to create one instance\npf each cache level per CPU, with no sharing of inodes.\nSo we can't use inode as a unique identifier.\nInstead, we use (cpumask, level, type) as identifier.\n\"\"\"",
        "\"\"\"\n    Information about a cache, at any level.\n    This object corresponds to a specific cache, e.g. there will be one for each L1.\n    \"\"\"",
        "\"\"\"\n        Retrieve cache information from sysfs. Suitable paths:\n          /sys/bus/cpu/devices/cpu0/cache/index0\n          /sys/devices/system/cpu/cpu0/cache/index0\n        \"\"\"",
        "\"\"\"\n    Read /sys/devices, returning a list of CPUs.\n    \"\"\"",
        "\"\"\"\n    Describe a single architectural CPU - i.e. a CPU as seen by the OS.\n    In Arm terminology a CPU is a Processing Element (PE).\n    On normal SMT systems (e.g. Intel and Arm) where threads have their\n    own architectural and MMU context, a thread is regarded as a CPU.\n    Thus, on SMT systems, CPUs may share first-level caches.\n    \"\"\"",
        "\"\"\"\n        The singleton mask for this CPU.\n        \"\"\"",
        "\"\"\"\n        Return the CPU's affiliated cache for a given type at the given level.\n        The cache may be unified, e.g. if we ask for I$ at level 3 we will likely\n        get a unified L3 cache rather than an instruction-only cache.\n        The result will be a Cache object, or None.\n        \"\"\"",
        "\"\"\"\n        Return the last-level cache for this CPU. The LLC is not necessarily shared\n        between all CPUs (e.g. on multi-socket), and is not necessarily the\n        same size or at the same level as other CPUs' LLC.\n        \"\"\"",
        "\"\"\"\n        Return all caches seen by this CPU, in arbitrary order\n        \"\"\"",
        "\"\"\"\n    Return physical memory size in bytes\n    \"\"\"",
        "\"\"\"\n    A group of system components, e.g. a node, cluster, core etc.\n    Within a group are:\n      - subgroups\n      - system components (e.g. caches) that don't belong to a subgroup\n    A group is uniquely keyed by its CPU mask.\n    There will be one top-level group.\n    The top-level group need not contain any components,\n    but other groups will.\n    \"\"\"",
        "\"\"\"\n    Description of a system.\n    Briefly, a system consists of\n      - a set of CPUs\n      - a set of CPU descriptions (usually 1)\n      - a set of Caches\n      - topological relationship between all the above\n    \"\"\"",
        "\"\"\"\n        Create a group for a given mask. This isn't yet inserted into the hierarchy.\n        \"\"\"",
        "\"\"\"\n        Given a set of keys from /proc/cpuinfo, return a CPU type specification.\n        \"\"\"",
        "\"\"\"\n        This returns the number of CPUs we know about.\n        Depending on how we discovered the CPUs there may be\n        gaps in the CPU numbering.\n        This number should match multiprocessing.cpu_count().\n        \"\"\"",
        "\"\"\"\n        Number of distinct CPU types. This will generally be 1, except on\n        heterogeneous (e.g. Arm big.LITTLE) systems.\n        \"\"\"",
        "\"\"\"\n        Number of NUMA nodes. Sometimes corresponds to packages, but not always.\n        If the kernel has been built with CONFIG_NUMA=n, this will return 0.\n        \"\"\"",
        "\"\"\"\n        Number of physical packages (loosely: sockets).\n        \"\"\"",
        "\"\"\"\n    Return the system configuration for this system,\n    discovering it if not already discovered.\n    \"\"\"",
        "\"\"\"\n    Emulate lstopo from the hwloc package\n    To check we're discovering the same things\n    \"\"\"",
        "\"\"\"\n    Generate a one-line summary of the system\n    \"\"\""
    ],
    "functions": [
        "file_word",
        "file_int",
        "file_hex",
        "str_memsize",
        "memsize_str",
        "intlist_mask",
        "intmask_list",
        "cpusetstr_mask",
        "mask_cpusetstr",
        "str_compact",
        "str_stepping",
        "str_full",
        "has_feature",
        "__str__",
        "__eq__",
        "__hash__",
        "__repr__",
        "read_proc_cpuinfo",
        "cache_type_letter",
        "cache_key",
        "cpu_list",
        "cpu_mask",
        "__lt__",
        "for_cpu",
        "is_unified",
        "contains",
        "discover",
        "is_private",
        "is_LLC",
        "is_package",
        "type_str",
        "geometry_str",
        "__str__",
        "read_sys_cpus",
        "__str__",
        "cpu_mask",
        "sysfs",
        "is_online",
        "cache",
        "cache_path",
        "LLC",
        "caches",
        "freq_range",
        "freq",
        "CPUlist_to_cpulist",
        "physical_memory",
        "cpu_mask",
        "discover",
        "is_subset",
        "group",
        "cpu",
        "cpu_mask",
        "cpus",
        "spec_from_keys",
        "n_cpus",
        "n_specs",
        "n_nodes",
        "n_packages",
        "package_cpulist",
        "cpu_specs",
        "has_cpu_feature",
        "is_heterogeneous",
        "is_missing_cpus",
        "caches",
        "cache_level_max",
        "show",
        "show_caches",
        "show_cpus",
        "system",
        "lstopo",
        "cache_short",
        "list_group",
        "cache_path_str",
        "lstopo_check",
        "system_summary"
    ],
    "classes": [
        "CPUspec",
        "Cache",
        "CPU",
        "Group"
    ]
}