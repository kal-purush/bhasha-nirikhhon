{
    "identifiers": [
        "resolve",
        "relative",
        "readFileSync",
        "statSync",
        "EOL",
        "ts",
        "extend",
        "parseQuery",
        "getProjectSync",
        "flag",
        "fileName",
        "warning",
        "error",
        "err",
        "err",
        "contents",
        "sourceMap",
        "ts",
        "ts",
        "key",
        "content",
        "getLoaderInstance",
        "files",
        "fileName",
        "file",
        "file",
        "files",
        "fileName",
        "file",
        "content",
        "file",
        "currentLoader",
        "loader",
        "service",
        "fileName",
        "currentLoader",
        "service",
        "fileName",
        "diagnostic",
        "loader",
        "formatDiagnostic",
        "diagnostic",
        "output",
        "loader",
        "fileName",
        "output",
        "loader",
        "loader",
        "sourceMap",
        "output",
        "sourceMap",
        "fileName",
        "sourceMap",
        "fileName",
        "sourceMap",
        "content",
        "loader",
        "result",
        "sourceMap",
        "files",
        "loader",
        "loader",
        "getProjectSync",
        "context",
        "loader",
        "tsconfig",
        "tsconfig",
        "file",
        "resolve",
        "tsconfig",
        "file",
        "file",
        "file",
        "loader",
        "defaultFiles",
        "defaultFiles",
        "files",
        "compilerOptions",
        "extend",
        "compilerOptions",
        "tsconfig",
        "compilerOptions",
        "extend",
        "compilerOptions",
        "parseQuery",
        "loader",
        "compilerOptions",
        "loader",
        "ts",
        "defaultFiles",
        "config",
        "config",
        "error",
        "loader",
        "formatDiagnostic",
        "error",
        "ts",
        "config",
        "config",
        "defaultLibFileName",
        "ts",
        "config",
        "fileName",
        "files",
        "fileName",
        "files",
        "fileName",
        "fileName",
        "ts",
        "files",
        "fileName",
        "fileExists",
        "fileName",
        "exists",
        "file",
        "file",
        "files",
        "fileName",
        "readFileSync",
        "fileName",
        "e",
        "currentLoader",
        "isDefinition",
        "fileName",
        "currentLoader",
        "fileName",
        "ts",
        "file",
        "files",
        "fileName",
        "context",
        "EOL",
        "config",
        "options",
        "ts",
        "defaultLibFileName",
        "ts",
        "serviceHost",
        "ts",
        "fileName",
        "statSync",
        "fileName",
        "e",
        "diagnostic",
        "ts",
        "ts",
        "diagnostic",
        "diagnostic",
        "diagnostic",
        "diagnostic",
        "line",
        "character",
        "message",
        "message",
        "diagnostic",
        "ts",
        "context",
        "formatDiagnostic",
        "relative",
        "context",
        "loader",
        "loader",
        "loaderInstances",
        "index",
        "loaderInstances",
        "index",
        "createService",
        "files",
        "loader",
        "loaderInstances",
        "index",
        "instance",
        "loader",
        "watching",
        "cb",
        "watching",
        "mtimes",
        "fileName",
        "files",
        "fileName",
        "file",
        "isDefinition",
        "fileName",
        "file",
        "readFileSync",
        "fileName",
        "file",
        "cb",
        "loader",
        "compilation",
        "cb",
        "service",
        "program",
        "diagnostic",
        "compilation",
        "DiagosticError",
        "diagnostic",
        "loader",
        "program",
        "diagnostic",
        "compilation",
        "DiagosticError",
        "diagnostic",
        "loader",
        "cb",
        "instance",
        "fileName",
        "fileName",
        "loader"
    ],
    "literals": [
        "'path'",
        "'fs'",
        "'os'",
        "'typescript'",
        "'xtend'",
        "'loader-utils'",
        "'tsconfig'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "''",
        "${fileName}: File not found",
        "string",
        "'es5'",
        "'commonjs'",
        "string",
        "string",
        "'utf-8'",
        "string",
        "string",
        "'\\n'",
        "(${line + 1},${character + 1}): ${message}",
        "'DiagnosticError'",
        "string",
        "string",
        "string",
        "./${relative(context, this.diagnostic.file.fileName)}",
        "'watch-run'",
        "'utf8'",
        "'emit'",
        "string"
    ],
    "variables": [
        "currentLoader",
        "loaderInstances",
        "loader",
        "fileName",
        "file",
        "output",
        "result",
        "sourceMap",
        "context",
        "tsconfig",
        "defaultFiles",
        "compilerOptions",
        "files",
        "config",
        "defaultLibFileName",
        "serviceHost",
        "file",
        "exists",
        "message",
        "index",
        "files",
        "service",
        "instance",
        "mtimes",
        "file",
        "program"
    ],
    "comments": [
        "Only set content on the first load. The watch task maintains reloads and",
        "the version doesn't need to change when every dependency is re-run.",
        "Include `tsconfig.json` files in default files to load.",
        "Extend default compiler options with `tsconfig.json`.",
        "Extend compiler options with the webpack options.",
        "Add the default library to default files.",
        "Load all files from the filesystem when they don't exist yet. This",
        "is required for definition files and nested type information.",
        "Reload the loader to refresh when any files change.",
        "Hook into the watch plugin to update file dependencies in TypeScript",
        "before the files are reloaded. This is required because we need type",
        "information to propagate upward and Webpack reloads from the top down.",
        "Push all semantic and outstanding compilation errors on emit. This allows",
        "us to notify of all errors, including files outside webpacks knowledge."
    ],
    "docstrings": [
        "* Support TypeScript in Webpack.\n *\n * @param {string} content",
        "* Create a TypeScript language service from the first instance.\n *\n * @param {FilesMap}      files\n * @param {WebPackLoader} loader",
        "* Check a file exists in the file system.\n *\n * @param  {string}  fileName\n * @return {boolean}",
        "* Format a diagnostic object into a string.\n *\n * @param  {ts.Diagnostic} diagnostic\n * @return {string}",
        "* Create a Webpack-compatible diagnostic error.",
        "* Get the current TypeScript instance for the loader.\n *\n * @param  {WebPackLoader}  loader\n * @return {LoaderInstance}",
        "* Check if a file is a defintion.\n *\n * @param  {string}  fileName\n * @return {boolean}"
    ],
    "functions": [
        "loader",
        "createService",
        "getScriptFileNames",
        "getScriptVersion",
        "getScriptSnapshot",
        "fileExists",
        "formatDiagnostic",
        "getLoaderInstance",
        "isDefinition"
    ],
    "classes": [
        "DiagosticError"
    ]
}