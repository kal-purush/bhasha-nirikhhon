{
    "identifiers": [
        "NNode",
        "text",
        "NNode",
        "cond",
        "node",
        "node",
        "node",
        "NRange",
        "a",
        "b",
        "a",
        "a",
        "b",
        "NRange",
        "a",
        "b",
        "NRange",
        "b",
        "a",
        "low",
        "high",
        "NRange",
        "NRange",
        "node",
        "node",
        "node",
        "node",
        "node",
        "callback",
        "node",
        "node",
        "node",
        "node",
        "callback",
        "node",
        "node",
        "node",
        "node",
        "refnode",
        "refnode",
        "count",
        "node",
        "NJumpNode",
        "node",
        "count",
        "count",
        "node",
        "node",
        "refnode",
        "refnode",
        "count",
        "node",
        "NJumpNode",
        "node",
        "count",
        "count",
        "node",
        "node",
        "NBlock",
        "nodes",
        "nodes",
        "node",
        "node",
        "NBlock",
        "node",
        "node",
        "node",
        "node",
        "node",
        "low",
        "high",
        "low",
        "node",
        "node",
        "a",
        "b",
        "a",
        "b",
        "ai",
        "bi",
        "ai",
        "bi",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "NRange",
        "NNode",
        "insideBlock",
        "cond",
        "NNode",
        "insideBlock",
        "cond",
        "NNode",
        "insideBlock",
        "node",
        "indent",
        "node",
        "NBlock",
        "dump",
        "node",
        "indent",
        "node",
        "NRange",
        "node",
        "n2",
        "dump",
        "n2",
        "indent",
        "node",
        "NNode",
        "node",
        "NSimpleNode",
        "indent",
        "node",
        "node",
        "NJumpNode",
        "indent",
        "node",
        "node",
        "NDoWhileNode",
        "indent",
        "node",
        "n2",
        "dump",
        "n2",
        "indent",
        "indent",
        "node",
        "node",
        "NDoIfNode",
        "indent",
        "node",
        "node",
        "n2",
        "dump",
        "n2",
        "indent",
        "indent",
        "block",
        "external",
        "block",
        "node",
        "node",
        "NJumpNode",
        "node",
        "jumpRange",
        "count",
        "node",
        "jumpRange",
        "createNormalFlow",
        "block1",
        "block",
        "jumpRange",
        "NDoIfNode",
        "block1",
        "node",
        "jumpRange",
        "createNormalFlow",
        "block1",
        "block",
        "jumpRange",
        "NDoWhileNode",
        "block1",
        "node",
        "external",
        "count",
        "external",
        "block",
        "block",
        "NStateMachineNode",
        "block",
        "NBlock",
        "NSimpleNode",
        "NSimpleNode",
        "NSimpleNode",
        "NSimpleNode",
        "NJumpNode",
        "NJumpNode",
        "NSimpleNode",
        "NSimpleNode",
        "NJumpNode",
        "n3",
        "n2",
        "n4",
        "n6",
        "n7",
        "n2",
        "createNormalFlow"
    ],
    "literals": [
        "'node'",
        "'simple'",
        "string",
        "'jump'",
        "string",
        "'range'",
        "Range(${this.low}, ${this.high})",
        "'block'",
        "'while'",
        "string",
        "'if'",
        "string",
        "'stateMachine'",
        "string",
        "''",
        "';'",
        "'jump_if:'",
        "'do {'",
        "'  '",
        "} while (${node.cond});",
        "if (!(${node.cond})) {",
        "'  '",
        "}",
        "'?'",
        "'??'",
        "'b = 0'",
        "'a = 0'",
        "'a++'",
        "''",
        "'a < 10'",
        "'a != 10'",
        "'print(a)'",
        "''",
        "'true'"
    ],
    "variables": [
        "node",
        "count",
        "count",
        "low",
        "high",
        "ai",
        "bi",
        "external",
        "count",
        "jumpRange",
        "block1",
        "block1",
        "n0",
        "n1",
        "n2",
        "n3",
        "n4",
        "n5",
        "n6",
        "n7"
    ],
    "comments": [
        "private static lastId = 0;",
        "public id:int = NNode.lastId++;",
        "public index:int;",
        "public prev:NNode;",
        "public next:NNode;",
        "get index() { return this.block.nodes.indexOf(this); }",
        "toString() { return `NNode(${this.id},${this.index})`; }",
        "class NSimpleBlockNode {\n    public nodes:NNode[] = [];\n}",
        "assert(low.index <= high.index);",
        "get length() { return this.high.index - this.low.index + 1; }",
        "console.log('' + node);",
        "console.log('jump:' + jumpRange);",
        "console.log('jump:' + node + '. External references!');",
        "console.log('external references!');",
        "console.log(block);",
        "range.each(node => {\n   console.log('' + node);\n});\nconsole.log(range.length);",
        "console.log(range.internalReferencesCount());\nconsole.log(range.externalReferencesCount());\n\nconsole.log('' + range);\nconsole.log('' + n3.createRange() + ',' + n3.jumpType);",
        "console.log('-------------');\nconsole.log(list);\ndump(list);"
    ],
    "docstrings": [],
    "functions": [
        "prev",
        "next",
        "jumpNode",
        "jumpNode",
        "createRange",
        "isForwardReference",
        "create",
        "removeHead",
        "removeTail",
        "contains",
        "each",
        "internalReferencesCount",
        "externalReferencesCount",
        "createBlock",
        "toString",
        "clone",
        "add",
        "replaceRange",
        "compareIndex",
        "getIndex",
        "getPrev",
        "getNext",
        "allRange",
        "dump",
        "createNormalFlow"
    ],
    "classes": [
        "BreakException",
        "NNode",
        "NSimpleNode",
        "NJumpNode",
        "NRange",
        "NBlock",
        "NDoWhileNode",
        "NDoIfNode",
        "NStateMachineNode"
    ]
}