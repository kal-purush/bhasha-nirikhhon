{
    "identifiers": [
        "require",
        "require",
        "evt",
        "handler",
        "capture",
        "evt",
        "documentEventHandlers",
        "e",
        "documentEventHandlers",
        "e",
        "handler",
        "m_document_addEventListener",
        "evt",
        "handler",
        "capture",
        "evt",
        "handler",
        "capture",
        "evt",
        "windowEventHandlers",
        "e",
        "windowEventHandlers",
        "e",
        "handler",
        "m_window_addEventListener",
        "evt",
        "handler",
        "capture",
        "evt",
        "handler",
        "capture",
        "evt",
        "documentEventHandlers",
        "e",
        "documentEventHandlers",
        "e",
        "handler",
        "m_document_removeEventListener",
        "evt",
        "handler",
        "capture",
        "evt",
        "handler",
        "capture",
        "evt",
        "windowEventHandlers",
        "e",
        "windowEventHandlers",
        "e",
        "handler",
        "m_window_removeEventListener",
        "evt",
        "handler",
        "capture",
        "data",
        "data",
        "i",
        "data",
        "data",
        "i",
        "i",
        "data",
        "i",
        "define",
        "require",
        "PLATFORM_VERSION_BUILD_LABEL",
        "PLATFORM_VERSION_BUILD_LABEL",
        "platform",
        "windowEventHandlers",
        "channel",
        "documentEventHandlers",
        "channel",
        "documentEventHandlers",
        "channel",
        "windowEventHandlers",
        "documentEventHandlers",
        "m_document_addEventListener",
        "m_document_removeEventListener",
        "m_window_addEventListener",
        "m_window_removeEventListener",
        "data",
        "bNoDetach",
        "createEvent",
        "data",
        "documentEventHandlers",
        "bNoDetach",
        "documentEventHandlers",
        "evt",
        "setTimeout",
        "evt",
        "documentEventHandlers",
        "evt",
        "evt",
        "data",
        "createEvent",
        "data",
        "windowEventHandlers",
        "setTimeout",
        "windowEventHandlers",
        "evt",
        "evt",
        "callbackId",
        "args",
        "cordova",
        "callbackId",
        "args",
        "args",
        "args",
        "callbackId",
        "args",
        "cordova",
        "callbackId",
        "args",
        "args",
        "args",
        "callbackId",
        "isSuccess",
        "status",
        "args",
        "keepCallback",
        "cordova",
        "callbackId",
        "callback",
        "isSuccess",
        "status",
        "cordova",
        "callback",
        "callback",
        "args",
        "isSuccess",
        "callback",
        "callback",
        "args",
        "keepCallback",
        "cordova",
        "callbackId",
        "err",
        "isSuccess",
        "callbackId",
        "err",
        "msg",
        "cordova",
        "msg",
        "err",
        "func",
        "channel",
        "func",
        "e",
        "e",
        "cordova"
    ],
    "literals": [
        "'cordova/channel'",
        "'cordova/platform'",
        "'undefined'",
        "'undefined'",
        "\"undefined\"",
        "\"undefined\"",
        "'Events'",
        "'document'",
        "'addEventListener'",
        "'removeEventListener'",
        "'window'",
        "'addEventListener'",
        "'removeEventListener'",
        "'undefined'",
        "'deviceready'",
        "'undefined'",
        "\"Error in \"",
        "\"Success\"",
        "\"Error\"",
        "\" callbackId: \"",
        "\" : \"",
        "\"cordovacallbackerror\"",
        "'message'",
        "\"Failed to run constructor: \""
    ],
    "variables": [
        "channel",
        "platform",
        "m_document_addEventListener",
        "m_document_removeEventListener",
        "m_window_addEventListener",
        "m_window_removeEventListener",
        "documentEventHandlers",
        "windowEventHandlers",
        "e",
        "e",
        "e",
        "e",
        "cordova",
        "evt",
        "evt",
        "callback",
        "msg"
    ],
    "comments": [
        "If unsubscribing from an event that is handled by a plugin",
        "If unsubscribing from an event that is handled by a plugin",
        "Fire deviceready on listeners that were registered before cordova.js was loaded.",
        "Randomize the starting callbackId to avoid collisions after refreshing or navigating.",
        "This way, it's very unlikely that any new callback would get the same callbackId as an old callback.",
        "TODO: Deprecate callbackSuccess and callbackError in favour of callbackFromNative.",
        "Derive success from status.",
        "else\n                    Note, this case is intentionally not caught.\n                    this can happen if isSuccess is true, but callbackStatus is NO_RESULT\n                    which is used to remove a callback from the list without calling the callbacks\n                    typically keepCallback is false in this case",
        "Clear callback if not expecting any more results"
    ],
    "docstrings": [
        "*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *",
        "* Intercept calls to addEventListener + removeEventListener and handle deviceready,\n * resume, and pause events.",
        "* Houses custom event handlers to intercept on document + window event listeners.",
        "* Methods to add/remove your own addEventListener hijacking on document + window.",
        "* Retrieve original event handlers that were replaced by Cordova\n     *\n     * @return object",
        "* Method to fire event from native code\n     * bNoDetach is required for events which cause an exception which needs to be caught in native code",
        "* Plugin callback mechanism.",
        "* Called by native code when returning successful result from an action.",
        "* Called by native code when returning error result from an action.",
        "* Called by native code when returning the result from an action."
    ],
    "functions": [
        "createEvent"
    ],
    "classes": []
}