{
    "identifiers": [
        "factory",
        "exports",
        "factory",
        "define",
        "define",
        "define",
        "factory",
        "factory",
        "USE_MAP",
        "m",
        "POINTERS_FN",
        "m",
        "PointerMap",
        "inId",
        "inEvent",
        "inId",
        "i",
        "i",
        "inEvent",
        "inId",
        "inEvent",
        "inId",
        "inId",
        "inId",
        "inId",
        "i",
        "i",
        "i",
        "inId",
        "inId",
        "i",
        "callback",
        "thisArg",
        "v",
        "i",
        "callback",
        "thisArg",
        "v",
        "i",
        "SVGElementInstance",
        "_pointermap",
        "name",
        "source",
        "s",
        "newEvents",
        "newEvents",
        "e",
        "s",
        "e",
        "e",
        "s",
        "e",
        "s",
        "name",
        "s",
        "s",
        "element",
        "i",
        "l",
        "es",
        "i",
        "i",
        "es",
        "es",
        "element",
        "element",
        "i",
        "l",
        "es",
        "i",
        "i",
        "es",
        "es",
        "element",
        "container",
        "contained",
        "container",
        "contained",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "fn",
        "fn",
        "inEvent",
        "inEvent",
        "target",
        "events",
        "events",
        "e",
        "target",
        "e",
        "target",
        "events",
        "events",
        "e",
        "target",
        "e",
        "target",
        "eventName",
        "target",
        "eventName",
        "target",
        "eventName",
        "target",
        "eventName",
        "inType",
        "inEvent",
        "inEvent",
        "inEvent",
        "PointerEvent",
        "inType",
        "inEvent",
        "inEvent",
        "e",
        "inEvent",
        "e",
        "e",
        "inEvent",
        "e",
        "inType",
        "inEvent",
        "inType",
        "inEvent",
        "e",
        "inEvent",
        "i",
        "CLONE_PROPS",
        "i",
        "p",
        "CLONE_PROPS",
        "i",
        "eventCopy",
        "p",
        "inEvent",
        "p",
        "CLONE_DEFAULTS",
        "i",
        "HAS_SVG_INSTANCE",
        "p",
        "p",
        "eventCopy",
        "p",
        "SVGElementInstance",
        "eventCopy",
        "p",
        "eventCopy",
        "p",
        "inEvent",
        "eventCopy",
        "inEvent",
        "eventCopy",
        "inEvent",
        "inEvent",
        "inEvent",
        "inPointerId",
        "inTarget",
        "inPointerId",
        "inPointerId",
        "inPointerId",
        "inTarget",
        "e",
        "e",
        "inPointerId",
        "inPointerId",
        "e",
        "inTarget",
        "e",
        "inPointerId",
        "inPointerId",
        "t",
        "e",
        "e",
        "inPointerId",
        "inPointerId",
        "e",
        "t",
        "e",
        "inEvent",
        "inEvent",
        "t",
        "t",
        "inEvent",
        "inEvent",
        "requestAnimationFrame",
        "inEvent",
        "dispatcher",
        "dispatcher",
        "dispatcher",
        "inEl",
        "inEl",
        "inEl",
        "inEl",
        "shadow",
        "shadow",
        "shadow",
        "inEl",
        "inEl",
        "s",
        "s",
        "shadow",
        "shadow",
        "os",
        "shadow",
        "se",
        "os",
        "se",
        "os",
        "element",
        "element",
        "s",
        "shadows",
        "s",
        "s",
        "s",
        "shadows",
        "inRoot",
        "x",
        "y",
        "inRoot",
        "inRoot",
        "x",
        "y",
        "sr",
        "t",
        "sr",
        "st",
        "sr",
        "x",
        "y",
        "st",
        "sr",
        "sr",
        "st",
        "ssr",
        "x",
        "y",
        "st",
        "t",
        "element",
        "s",
        "s",
        "s",
        "s",
        "Node",
        "s",
        "Node",
        "s",
        "s",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "s",
        "x",
        "y",
        "s",
        "s",
        "x",
        "y",
        "add",
        "remove",
        "changed",
        "binder",
        "add",
        "binder",
        "remove",
        "binder",
        "changed",
        "binder",
        "MO",
        "MO",
        "Installer",
        "target",
        "targeting",
        "target",
        "target",
        "OBSERVER_INIT",
        "target",
        "target",
        "target",
        "target",
        "target",
        "forEach",
        "target",
        "target",
        "target",
        "target",
        "SELECTOR",
        "el",
        "el",
        "el",
        "el",
        "el",
        "oldValue",
        "el",
        "oldValue",
        "accum",
        "accum",
        "toArray",
        "n",
        "n",
        "Node",
        "inNodes",
        "inNodes",
        "tree",
        "inNodes",
        "tree",
        "mutations",
        "mutations",
        "m",
        "m",
        "m",
        "added",
        "m",
        "removed",
        "m",
        "m",
        "m",
        "MO",
        "Installer",
        "inType",
        "inDict",
        "inDict",
        "inDict",
        "e",
        "inType",
        "inDict",
        "inDict",
        "i",
        "MOUSE_PROPS",
        "i",
        "p",
        "MOUSE_PROPS",
        "i",
        "e",
        "p",
        "inDict",
        "p",
        "MOUSE_DEFAULTS",
        "i",
        "e",
        "inDict",
        "inDict",
        "pressure",
        "inDict",
        "pressure",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "inDict",
        "e",
        "inDict",
        "e",
        "inDict",
        "e",
        "pressure",
        "e",
        "inDict",
        "e",
        "inDict",
        "e",
        "inDict",
        "e",
        "inDict",
        "e",
        "inDict",
        "e",
        "v",
        "selector",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "hasNativePE",
        "attrib2css",
        "r",
        "r",
        "r",
        "styles",
        "selector",
        "r",
        "rule",
        "r",
        "hasShadowRoot",
        "styles",
        "shadowSelector",
        "r",
        "rule",
        "r",
        "styles",
        "r",
        "selector",
        "rule",
        "r",
        "hasShadowRoot",
        "styles",
        "r",
        "shadowSelector",
        "rule",
        "r",
        "el",
        "styles",
        "el",
        "_dispatcher",
        "HAS_BUTTONS",
        "MouseEvent",
        "e",
        "target",
        "_dispatcher",
        "target",
        "target",
        "_dispatcher",
        "target",
        "inEvent",
        "inEvent",
        "inEvent",
        "lts",
        "i",
        "l",
        "t",
        "lts",
        "i",
        "i",
        "x",
        "t",
        "y",
        "t",
        "dx",
        "DEDUP_DIST",
        "dy",
        "DEDUP_DIST",
        "inEvent",
        "_dispatcher",
        "inEvent",
        "e",
        "e",
        "inEvent",
        "pd",
        "e",
        "e",
        "e",
        "HAS_BUTTONS",
        "e",
        "WHICH_TO_BUTTONS",
        "e",
        "e",
        "inEvent",
        "inEvent",
        "mouse__pointermap",
        "p",
        "inEvent",
        "inEvent",
        "mouse__pointermap",
        "inEvent",
        "_dispatcher",
        "e",
        "inEvent",
        "inEvent",
        "inEvent",
        "_dispatcher",
        "e",
        "inEvent",
        "inEvent",
        "mouse__pointermap",
        "p",
        "p",
        "inEvent",
        "inEvent",
        "_dispatcher",
        "e",
        "inEvent",
        "inEvent",
        "inEvent",
        "_dispatcher",
        "e",
        "inEvent",
        "inEvent",
        "inEvent",
        "_dispatcher",
        "e",
        "inEvent",
        "inEvent",
        "_dispatcher",
        "e",
        "mouse__pointermap",
        "_dispatcher",
        "targeting",
        "targeting",
        "targeting",
        "targeting",
        "_dispatcher",
        "target",
        "HAS_TOUCH_ACTION_DELAY",
        "_dispatcher",
        "target",
        "INSTALLER",
        "target",
        "target",
        "HAS_TOUCH_ACTION_DELAY",
        "_dispatcher",
        "target",
        "el",
        "el",
        "ATTRIB",
        "a",
        "st",
        "el",
        "st",
        "_dispatcher",
        "el",
        "allShadows",
        "el",
        "s",
        "s",
        "st",
        "_dispatcher",
        "s",
        "el",
        "el",
        "_dispatcher",
        "el",
        "allShadows",
        "el",
        "s",
        "s",
        "_dispatcher",
        "s",
        "el",
        "oldValue",
        "el",
        "ATTRIB",
        "a",
        "oldValue",
        "st",
        "oldSt",
        "el",
        "st",
        "allShadows",
        "el",
        "s",
        "s",
        "st",
        "oldSt",
        "el",
        "st",
        "el",
        "touchAction",
        "t",
        "t",
        "st",
        "t",
        "st",
        "st",
        "t",
        "inTouch",
        "inTouch",
        "inTouch",
        "touch__pointermap",
        "touch__pointermap",
        "touch__pointermap",
        "inTouch",
        "inTouch",
        "inTouch",
        "inPointer",
        "inPointer",
        "setTimeout",
        "fn",
        "CLICK_COUNT_TIMEOUT",
        "clearTimeout",
        "ret",
        "ret",
        "inTouch",
        "_dispatcher",
        "inTouch",
        "e",
        "inTouch",
        "e",
        "captureInfo",
        "id",
        "findTarget",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "cte",
        "e",
        "inTouch",
        "inTouch",
        "e",
        "inTouch",
        "inTouch",
        "e",
        "inTouch",
        "inTouch",
        "e",
        "inTouch",
        "e",
        "e",
        "cte",
        "e",
        "inEvent",
        "inFunction",
        "inEvent",
        "inEvent",
        "i",
        "tl",
        "i",
        "t",
        "tl",
        "i",
        "inFunction",
        "t",
        "inEvent",
        "inEvent",
        "scrollAxis",
        "ret",
        "scrollAxis",
        "ret",
        "inEvent",
        "scrollAxis",
        "t",
        "a",
        "a",
        "t",
        "oa",
        "oa",
        "ret",
        "da",
        "doa",
        "ret",
        "inTL",
        "inId",
        "inTL",
        "i",
        "l",
        "t",
        "inTL",
        "i",
        "i",
        "t",
        "inId",
        "inEvent",
        "inEvent",
        "touch__pointermap",
        "tl",
        "touch__pointermap",
        "value",
        "key",
        "key",
        "tl",
        "key",
        "value",
        "d",
        "p",
        "d",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inPointer",
        "touch__pointermap",
        "inPointer",
        "inPointer",
        "inPointer",
        "inPointer",
        "_dispatcher",
        "inPointer",
        "_dispatcher",
        "inPointer",
        "_dispatcher",
        "inPointer",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inEvent",
        "inPointer",
        "touch__pointermap",
        "pointer",
        "pointer",
        "pointer",
        "_dispatcher",
        "outEvent",
        "outTarget",
        "outEvent",
        "outTarget",
        "outEvent",
        "outTarget",
        "_dispatcher",
        "outEvent",
        "_dispatcher",
        "outTarget",
        "pointer",
        "pointer",
        "inEvent",
        "inEvent",
        "inEvent",
        "inPointer",
        "_dispatcher",
        "inPointer",
        "_dispatcher",
        "inPointer",
        "_dispatcher",
        "inPointer",
        "inPointer",
        "inEvent",
        "inEvent",
        "inPointer",
        "_dispatcher",
        "inPointer",
        "_dispatcher",
        "inPointer",
        "_dispatcher",
        "inPointer",
        "inPointer",
        "inPointer",
        "touch__pointermap",
        "inPointer",
        "inPointer",
        "inEvent",
        "mouse",
        "inEvent",
        "t",
        "t",
        "t",
        "lts",
        "lt",
        "lts",
        "lt",
        "lts",
        "lt",
        "i",
        "lts",
        "i",
        "lts",
        "lt",
        "setTimeout",
        "fn",
        "DEDUP_TIMEOUT",
        "HAS_TOUCH_ACTION_DELAY",
        "INSTALLER",
        "installer",
        "touchEvents",
        "touchEvents",
        "touchEvents",
        "touchEvents",
        "_dispatcher",
        "target",
        "_dispatcher",
        "target",
        "target",
        "_dispatcher",
        "target",
        "inEvent",
        "HAS_BITMAP_TYPE",
        "e",
        "_dispatcher",
        "inEvent",
        "e",
        "inEvent",
        "e",
        "id",
        "ms__pointermap",
        "id",
        "inEvent",
        "ms__pointermap",
        "inEvent",
        "inEvent",
        "inEvent",
        "_dispatcher",
        "e",
        "inEvent",
        "inEvent",
        "_dispatcher",
        "e",
        "inEvent",
        "inEvent",
        "_dispatcher",
        "e",
        "inEvent",
        "inEvent",
        "inEvent",
        "_dispatcher",
        "e",
        "inEvent",
        "inEvent",
        "_dispatcher",
        "e",
        "inEvent",
        "inEvent",
        "_dispatcher",
        "e",
        "inEvent",
        "inEvent",
        "_dispatcher",
        "inEvent",
        "_dispatcher",
        "e",
        "inEvent",
        "_dispatcher",
        "inEvent",
        "_dispatcher",
        "e",
        "_PointerEvent",
        "tp",
        "_dispatcher",
        "ms",
        "_dispatcher",
        "mouse",
        "_dispatcher",
        "touch",
        "_dispatcher",
        "id",
        "_dispatcher",
        "id",
        "n",
        "s",
        "pointerId",
        "assertDown",
        "pointerId",
        "pointerId",
        "r",
        "pointerId",
        "assertDown",
        "pointerId",
        "pointerId",
        "s",
        "setPointerCapture",
        "pointerId",
        "assertDown",
        "pointerId",
        "_dispatcher",
        "pointerId",
        "r",
        "releasePointerCapture",
        "pointerId",
        "assertDown",
        "pointerId",
        "_dispatcher",
        "pointerId",
        "Element",
        "Element",
        "s",
        "r",
        "applyAttributeStyles",
        "platform_events__applyPolyfill",
        "capture__applyPolyfill",
        "_dispatcher",
        "installer",
        "_PointerEvent",
        "_pointermap",
        "targeting",
        "pointerevents"
    ],
    "literals": [
        "'object'",
        "'undefined'",
        "'function'",
        "'use strict'",
        "'delete'",
        "'bubbles'",
        "'cancelable'",
        "'view'",
        "'detail'",
        "'screenX'",
        "'screenY'",
        "'clientX'",
        "'clientY'",
        "'ctrlKey'",
        "'altKey'",
        "'shiftKey'",
        "'metaKey'",
        "'button'",
        "'relatedTarget'",
        "'buttons'",
        "'pointerId'",
        "'width'",
        "'height'",
        "'pressure'",
        "'tiltX'",
        "'tiltY'",
        "'pointerType'",
        "'hwTimestamp'",
        "'isPrimary'",
        "'type'",
        "'target'",
        "'currentTarget'",
        "'which'",
        "'pageX'",
        "'pageY'",
        "'timeStamp'",
        "''",
        "''",
        "'undefined'",
        "'pointerdown'",
        "'pointermove'",
        "'pointerup'",
        "'pointerenter'",
        "'pointerleave'",
        "'pointerover'",
        "'pointerout'",
        "'pointercancel'",
        "'target'",
        "'relatedTarget'",
        "'Event'",
        "'gotpointercapture'",
        "'pointerup'",
        "'pointercancel'",
        "'Event'",
        "'lostpointercapture'",
        "'pointerup'",
        "'pointercancel'",
        "'shadow'",
        "'[touch-action]'",
        "'touch-action'",
        "'complete'",
        "'readystatechange'",
        "'complete'",
        "'childList'",
        "'attributes'",
        "'PointerEventsPolyfill: MutationObservers not found, touch-action will not be dynamically detected'",
        "'bubbles'",
        "'cancelable'",
        "'view'",
        "'detail'",
        "'screenX'",
        "'screenY'",
        "'clientX'",
        "'clientY'",
        "'ctrlKey'",
        "'altKey'",
        "'shiftKey'",
        "'metaKey'",
        "'button'",
        "'relatedTarget'",
        "'pageX'",
        "'pageY'",
        "'Event'",
        "''",
        "'body /shadow-deep/ '",
        "'[touch-action=\"'",
        "'\"]'",
        "'{ -ms-touch-action: '",
        "'; touch-action: '",
        "'; touch-action-delay: none; }'",
        "'none'",
        "'auto'",
        "'pan-x'",
        "'pan-y'",
        "'pan-x pan-y'",
        "'pan-x pan-y'",
        "'pan-y pan-x'",
        "''",
        "'\\n'",
        "'\\n'",
        "'\\n'",
        "'\\n'",
        "'style'",
        "'test'",
        "'mouse'",
        "'mousedown'",
        "'mousemove'",
        "'mouseup'",
        "'mouseover'",
        "'mouseout'",
        "'delete'",
        "'touch-action'",
        "'touchstart'",
        "'touchmove'",
        "'touchend'",
        "'touchcancel'",
        "'none'",
        "'pan-x'",
        "'pan-y'",
        "'none'",
        "'none'",
        "'X'",
        "'Y'",
        "'XY'",
        "'touch'",
        "'touchstart'",
        "'touchmove'",
        "'none'",
        "'XY'",
        "'Y'",
        "'X'",
        "'Y'",
        "'client'",
        "'client'",
        "'delete'",
        "'number'",
        "'MSPointerDown'",
        "'MSPointerMove'",
        "'MSPointerUp'",
        "'MSPointerOut'",
        "'MSPointerOver'",
        "'MSPointerCancel'",
        "'MSGotPointerCapture'",
        "'MSLostPointerCapture'",
        "''",
        "'unavailable'",
        "'touch'",
        "'pen'",
        "'mouse'",
        "'delete'",
        "'lostpointercapture'",
        "'gotpointercapture'",
        "'maxTouchPoints'",
        "'ms'",
        "'mouse'",
        "'touch'",
        "'InvalidPointerId'",
        "'setPointerCapture'",
        "'releasePointerCapture'"
    ],
    "variables": [
        "USE_MAP",
        "POINTERS_FN",
        "m",
        "i",
        "i",
        "i",
        "_pointermap",
        "PointerMap",
        "CLONE_PROPS",
        "CLONE_DEFAULTS",
        "HAS_SVG_INSTANCE",
        "dispatcher",
        "s",
        "source",
        "newEvents",
        "l",
        "i",
        "es",
        "l",
        "i",
        "es",
        "fn",
        "e",
        "e",
        "eventCopy",
        "p",
        "i",
        "e",
        "t",
        "e",
        "t",
        "_dispatcher",
        "dispatcher",
        "targeting",
        "s",
        "os",
        "se",
        "shadows",
        "s",
        "t",
        "st",
        "sr",
        "os",
        "ssr",
        "s",
        "element",
        "x",
        "y",
        "s",
        "forEach",
        "toArray",
        "MO",
        "SELECTOR",
        "OBSERVER_INIT",
        "tree",
        "added",
        "removed",
        "installer",
        "Installer",
        "MOUSE_PROPS",
        "MOUSE_DEFAULTS",
        "e",
        "i",
        "p",
        "pressure",
        "_PointerEvent",
        "_PointerEvent__PointerEvent",
        "attrib2css",
        "styles",
        "head",
        "hasNativePE",
        "hasShadowRoot",
        "el",
        "mouse__pointermap",
        "DEDUP_DIST",
        "WHICH_TO_BUTTONS",
        "HAS_BUTTONS",
        "mouseEvents",
        "lts",
        "x",
        "y",
        "i",
        "l",
        "t",
        "dx",
        "dy",
        "e",
        "pd",
        "p",
        "e",
        "e",
        "p",
        "e",
        "e",
        "e",
        "e",
        "mouse",
        "mouseEvents",
        "captureInfo",
        "findTarget",
        "allShadows",
        "touch__pointermap",
        "touchMap",
        "DEDUP_TIMEOUT",
        "CLICK_COUNT_TIMEOUT",
        "ATTRIB",
        "INSTALLER",
        "HAS_TOUCH_ACTION_DELAY",
        "touchEvents",
        "a",
        "st",
        "a",
        "st",
        "oldSt",
        "t",
        "touchAction",
        "st",
        "fn",
        "ret",
        "cte",
        "e",
        "id",
        "tl",
        "i",
        "t",
        "ret",
        "scrollAxis",
        "t",
        "a",
        "scrollAxis",
        "oa",
        "da",
        "doa",
        "i",
        "l",
        "t",
        "tl",
        "d",
        "p",
        "p",
        "inPointer",
        "pointer",
        "outEvent",
        "outTarget",
        "lts",
        "t",
        "lt",
        "fn",
        "i",
        "touch",
        "touchEvents",
        "ms__pointermap",
        "HAS_BITMAP_TYPE",
        "msEvents",
        "e",
        "inEvent",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "ms",
        "msEvents",
        "tp",
        "n",
        "s",
        "r",
        "pointerevents"
    ],
    "comments": [
        "!\n * PEP v0.3.0 | https://github.com/jquery/PEP\n * Copyright jQuery Foundation and other contributors | http://jquery.org/license",
        "return value, key, map",
        "MouseEvent",
        "DOM Level 3",
        "PointerEvent",
        "event instance",
        "MouseEvent",
        "DOM Level 3",
        "PointerEvent",
        "event instance",
        "Scope objects for native events.",
        "This exists for ease of testing.",
        "call eventsource register",
        "call eventsource register",
        "scope.external.contains ||",
        "EVENTS",
        "LISTENER LOGIC",
        "This is used to prevent multiple dispatch of pointerevents from",
        "platform events. This can happen when two elements in different scopes",
        "are set up to create pointer events, which is relevant to Shadow DOM.",
        "set up event listeners",
        "remove event listeners",
        "scope.external.addEvent ||",
        "scope.external.removeEvent ||",
        "EVENT CREATION AND TRACKING",
        "relatedTarget must be null if pointer is captured",
        "make and dispatch an event in one call",
        "Work around SVGInstanceElement shadow tree",
        "Return the <use> element that is represented by the instance for Safari, Chrome, IE.",
        "This is the behavior implemented by Firefox.",
        "keep the semantics of preventDefault",
        "if pointer capture is set, route all events for the specified pointerId",
        "to the capture target",
        "scope.external.dispatchEvent ||",
        "is element a shadow host?",
        "find the the element inside the shadow root",
        "check for older shadows",
        "shadowed element may contain a shadow root",
        "light dom element is the target",
        "walk up until you hit the shadow root or document",
        "the owner element is expected to be a Document or ShadowRoot",
        "if the listener is in the shadow root, it is much faster to start there",
        "if x, y is not in this root, fall back to document search",
        "Only watch scopes that can target find, as these are top-level.",
        "Otherwise we can see duplicate additions and removals that add noise.",
        "",
        "TODO(dfreedman): For some instances with ShadowDOMPolyfill, we can see",
        "a removal without an insertion when a node is redistributed among",
        "shadows. Since it all ends up correct in the document, watching only",
        "the document will yield the correct mutations to watch.",
        "register all touch-action = none nodes on document load",
        "find children with touch-action",
        "make sure the added nodes are accounted for",
        "flatten the list",
        "define inherited MouseEvent properties",
        "skip bubbles and cancelable since they're set above in initEvent()",
        "Spec requires that pointers without pressure specified use 0.5 for down",
        "state and 0 for up state.",
        "add x/y properties aliased to clientX/Y",
        "define the properties of the PointerEvent interface",
        "only install stylesheet if the browser has touch action support",
        "only add shadow selectors if shadowdom is supported",
        "radius around touchend that swallows mouse events",
        "handler block for native mouse events",
        "collide with the global mouse listener",
        "simulated mouse events will be swallowed near a primary touchend",
        "forward mouse preventDefault",
        "TODO(dfreedman) workaround for some elements not sending mouseup",
        "http://crbug/149091",
        "This should be long enough to ignore compat mouse events made by touch",
        "The presence of touch event handlers blocks scrolling, and so we must be careful to",
        "avoid adding handlers unnecessarily.  Chrome plans to add a touch-action-delay property",
        "(crbug.com/329559) to address this, and once we have that we can opt-in to a simpler",
        "handler registration mechanism.  Rather than try to predict how exactly to opt-in to",
        "that we'll just leave this disabled until there is a build of Chrome to test.",
        "handler block for native touch events",
        "TODO(dfreedman): is it worth it to disconnect the MO?",
        "set touch-action on shadows as well",
        "remove touch-action from shadow",
        "simply update scrollType if listeners are already established",
        "set primary touch if there no pointers, or the only pointer is the mouse",
        "Spec specifies that pointerId 1 is reserved for Mouse.",
        "Touch identifiers can start at 0.",
        "Add 2 to the touch identifier for compatibility.",
        "forward touch preventDefaults",
        "For single axis scrollers, determines whether the element should emit",
        "pointer events or behave as a scroller",
        "this element is a touch-action: none, should never scroll",
        "this element should always scroll",
        "check the intended scroll axis, and other axis",
        "if delta in the scroll axis > delta other axis, scroll instead of",
        "making events",
        "In some instances, a touchstart can happen without a touchend. This",
        "leaves the pointermap in a broken state.",
        "Therefore, on every touchstart, we remove the touches that did not fire a",
        "touchend event.",
        "To keep state globally consistent, we fire a",
        "pointercancel for this \"abandoned\" touch",
        "pointermap.pointers() should be < tl.length here, as the touchstart has not",
        "been processed yet.",
        "Never remove pointerId == 1, which is mouse.",
        "Touch identifiers are 2 smaller than their pointerId, which is the",
        "index in pointermap.",
        "a finger drifted off the screen, ignore it",
        "recover from retargeting by shadow",
        "clean up case when finger leaves the screen",
        "prevent synth mouse events from creating pointer events",
        "only the primary finger will synth mouse events",
        "remember x/y of last touch",
        "only activate if this platform does not have pointer events"
    ],
    "docstrings": [
        "* This module implements an map of pointer states",
        "* This module is for normalizing events. Mouse and Touch events will be\n   * collected here, and fire PointerEvents that have the same semantics, no\n   * matter the source.\n   * Events fired:\n   *   - pointerdown: a pointing is added\n   *   - pointerup: a pointer is removed\n   *   - pointermove: a pointer is moved\n   *   - pointerover: a pointer crosses into an element\n   *   - pointerout: a pointer leaves an element\n   *   - pointercancel: a pointer will no longer generate events",
        "* Add a new event source that will generate pointer events.\n     *\n     * `inSource` must contain an array of event names named `events`, and\n     * functions with the names specified in the `events` array.\n     * @param {string} name A name for the event source\n     * @param {Object} source A new source of platform events.",
        "* Creates a new Event of type `inType`, based on the information in\n     * `inEvent`.\n     *\n     * @param {string} inType A string representing the type of event to create\n     * @param {Event} inEvent A platform event with a target\n     * @return {Event} A PointerEvent of type `inType`",
        "* Returns a snapshot of inEvent, with writable properties.\n     *\n     * @param {Event} inEvent An event that contains properties to copy.\n     * @return {Object} An object containing shallow copies of `inEvent`'s\n     *    properties.",
        "* Dispatches the event to its target.\n     *\n     * @param {Event} inEvent The event to be dispatched.\n     * @return {Boolean} True if an event handler returns true, false otherwise.",
        "* This module uses Mutation Observers to dynamically adjust which nodes will\n   * generate Pointer Events.\n   *\n   * All nodes that wish to generate Pointer Events must have the attribute\n   * `touch-action` set to `none`.",
        "* This is the constructor for new PointerEvents.\n   *\n   * New Pointer Events must be given a type, and an optional dictionary of\n   * initialization properties.\n   *\n   * Due to certain platform requirements, events returned from the constructor\n   * identify as MouseEvents.\n   *\n   * @constructor\n   * @param {String} inType The type of the event to create.\n   * @param {Object} [inDict] An optional dictionary of initial event properties.\n   * @return {Event} A new PointerEvent of type `inType` and initialized with properties from `inDict`."
    ],
    "functions": [
        "PointerMap",
        "Installer",
        "_PointerEvent__PointerEvent",
        "shadowSelector",
        "selector",
        "rule",
        "applyAttributeStyles",
        "platform_events__applyPolyfill",
        "assertDown",
        "capture__applyPolyfill"
    ],
    "classes": []
}