{
    "identifiers": [
        "Collections",
        "Concurrent",
        "Collections",
        "Generic",
        "Linq",
        "Threading",
        "Threading",
        "Tasks",
        "Helios",
        "Concurrency",
        "ThreadType",
        "Foreground",
        "Background",
        "ThreadType",
        "Background",
        "numThreads",
        "TimeSpan",
        "deadlockTimeout",
        "numThreads",
        "DefaultThreadType",
        "deadlockTimeout",
        "numThreads",
        "ThreadType",
        "threadType",
        "TimeSpan",
        "deadlockTimeout",
        "ThreadType",
        "threadType",
        "NumThreads",
        "numThreads",
        "DeadlockTimeout",
        "deadlockTimeout",
        "deadlockTimeout",
        "HasValue",
        "deadlockTimeout",
        "Value",
        "TotalMilliseconds",
        "ArgumentOutOfRangeException",
        "Format",
        "deadlockTimeout",
        "numThreads",
        "ArgumentOutOfRangeException",
        "Format",
        "numThreads",
        "TimeSpan",
        "NET35",
        "TaskScheduler",
        "ThreadStatic",
        "DedicatedThreadPool",
        "pool",
        "_pool",
        "pool",
        "task",
        "_tasks",
        "_tasks",
        "AddLast",
        "task",
        "EnsureWorkerRequested",
        "task",
        "taskWasPreviouslyQueued",
        "_currentThreadIsRunningTasks",
        "taskWasPreviouslyQueued",
        "TryDequeue",
        "task",
        "TryExecuteTask",
        "task",
        "TryExecuteTask",
        "task",
        "task",
        "_tasks",
        "_tasks",
        "Remove",
        "task",
        "_pool",
        "Settings",
        "NumThreads",
        "Monitor",
        "TryEnter",
        "_tasks",
        "lockTaken",
        "lockTaken",
        "_tasks",
        "NotSupportedException",
        "lockTaken",
        "Monitor",
        "Exit",
        "_tasks",
        "count",
        "_pool",
        "Settings",
        "NumThreads",
        "Interlocked",
        "CompareExchange",
        "_parallelWorkers",
        "count",
        "count",
        "prev",
        "count",
        "RequestWorker",
        "count",
        "prev",
        "count",
        "Interlocked",
        "CompareExchange",
        "_parallelWorkers",
        "count",
        "count",
        "prev",
        "count",
        "count",
        "prev",
        "_pool",
        "QueueUserWorkItem",
        "_currentThreadIsRunningTasks",
        "_tasks",
        "_tasks",
        "Count",
        "ReleaseWorker",
        "item",
        "_tasks",
        "First",
        "Value",
        "_tasks",
        "RemoveFirst",
        "TryExecuteTask",
        "item",
        "_currentThreadIsRunningTasks",
        "DedicatedThreadPool",
        "pool",
        "pool",
        "Settings",
        "DeadlockTimeout",
        "_timer",
        "Timer",
        "pool",
        "ShutdownRequested",
        "worker",
        "pool",
        "Workers",
        "Interlocked",
        "Exchange",
        "w",
        "Status",
        "pool",
        "RequestThread",
        "w",
        "worker",
        "AddWork",
        "Interlocked",
        "Increment",
        "w",
        "Status",
        "pool",
        "Settings",
        "DeadlockTimeout",
        "Value",
        "pool",
        "Settings",
        "DeadlockTimeout",
        "Value",
        "_timer",
        "_timer",
        "Dispose",
        "DedicatedThreadPoolSettings",
        "settings",
        "Settings",
        "settings",
        "Workers",
        "Repeat",
        "settings",
        "NumThreads",
        "Select",
        "WorkerQueue",
        "ToArray",
        "worker",
        "Workers",
        "PoolWorker",
        "worker",
        "_supervisor",
        "DedicatedThreadPoolSupervisor",
        "WorkerQueue",
        "ThreadStatic",
        "ShutdownRequested",
        "WorkerQueue",
        "unclaimedQueue",
        "errorRecovery",
        "PoolWorker",
        "unclaimedQueue",
        "errorRecovery",
        "worker",
        "Action",
        "work",
        "WasDisposed",
        "work",
        "_index",
        "_index",
        "Workers",
        "_index",
        "Settings",
        "NumThreads",
        "AddWork",
        "work",
        "ArgumentNullException",
        "success",
        "Dispose",
        "GC",
        "SuppressFinalize",
        "isDisposing",
        "WasDisposed",
        "isDisposing",
        "_supervisor",
        "Dispose",
        "Shutdown",
        "WasDisposed",
        "BlockingCollection",
        "Action",
        "BlockingCollection",
        "Action",
        "Action",
        "work",
        "WorkQueue",
        "Add",
        "work",
        "PoolWorker",
        "poolWorker",
        "errorRecovery",
        "_poolWorker",
        "errorRecovery",
        "_poolWorker",
        "ForceTermination",
        "_poolWorker",
        "poolWorker",
        "BlockingCollection",
        "Action",
        "WorkerQueue",
        "work",
        "DedicatedThreadPool",
        "pool",
        "errorRecovery",
        "_work",
        "work",
        "_pool",
        "pool",
        "_workQueue",
        "_work",
        "WorkQueue",
        "_work",
        "ReplacePoolWorker",
        "errorRecovery",
        "_thread",
        "CurrentWorker",
        "action",
        "_workQueue",
        "GetConsumingEnumerable",
        "_pool",
        "ShutdownRequested",
        "action",
        "ex",
        "Failover",
        "IsBackground",
        "_pool",
        "Settings",
        "ThreadType",
        "ThreadType",
        "Background",
        "_thread",
        "Start",
        "errorRecovery",
        "_pool",
        "RequestThread",
        "_work",
        "errorRecovery",
        "CurrentWorker",
        "_work",
        "_workQueue",
        "_pool",
        "_thread",
        "Abort"
    ],
    "literals": [
        "\"deadlockTimeout\"",
        "\"deadlockTimeout must be null or at least 1ms. Was {0}.\"",
        "\"numThreads\"",
        "\"numThreads must be at least 1. Was {0}\"",
        "\"work\""
    ],
    "variables": [
        "ThreadType",
        "DefaultThreadType",
        "NumThreads",
        "ThreadType",
        "ThreadType",
        "DeadlockTimeout",
        "_currentThreadIsRunningTasks",
        "_parallelWorkers",
        "_tasks",
        "DedicatedThreadPool",
        "_pool",
        "MaximumConcurrencyLevel",
        "lockTaken",
        "count",
        "_parallelWorkers",
        "prev",
        "count",
        "_parallelWorkers",
        "prev",
        "item",
        "Timer",
        "_timer",
        "w",
        "worker",
        "newWorker",
        "DedicatedThreadPoolSettings",
        "Settings",
        "ShutdownRequested",
        "Workers",
        "PoolWorker",
        "CurrentWorker",
        "_index",
        "DedicatedThreadPoolSupervisor",
        "_supervisor",
        "WasDisposed",
        "worker",
        "success",
        "WorkQueue",
        "Status",
        "PoolWorker",
        "_poolWorker",
        "WorkerQueue",
        "_work",
        "DedicatedThreadPool",
        "_pool",
        "_workQueue",
        "_thread"
    ],
    "comments": [
        "The type of threads to use - either foreground or background threads.",
        "</summary>",
        "Provides settings for a dedicated thread pool",
        "</summary>",
        "Background threads are the default thread type",
        "</summary>",
        "The total number of threads to run in this thread pool.",
        "</summary>",
        "The type of threads to run in this thread pool.",
        "</summary>",
        "Interval to check for thread deadlocks.",
        "",
        "If a thread takes longer than <see cref=\"DeadlockTimeout\"/> it will be aborted",
        "and replaced.",
        "</summary>",
        "TaskScheduler for working with a <see cref=\"DedicatedThreadPool\"/> instance",
        "</summary>",
        "Indicates whether the current thread is processing work items.",
        "Number of tasks currently running",
        "</summary>",
        "current thread isn't running any tasks, can't execute inline",
        "remove the task from the queue if it was previously added",
        "Level of concurrency is directly equal to the number of threads",
        "in the <see cref=\"DedicatedThreadPool\"/>.",
        "</summary>",
        "should this be immutable?",
        "this thread is now available for inlining",
        "Process all available items in the queue.",
        "done processing",
        "Get the next item from the queue",
        "Execute the task we pulled out of the queue",
        "We're done processing items on the current thread",
        "An instanced, dedicated thread pool.",
        "</summary>",
        "don't set up a timer if a timeout wasn't specified",
        "bail in the event of a shutdown",
        "this requests a new new worker and calls ForceTermination on the old worker",
        "Potential problem here: if the thread is not dead for real, we might abort real work.. there is no way to tell the difference between",
        "deadlocked or just very long running tasks",
        "schedule heartbeat action to worker",
        "index for round-robin load-balancing across worker threads",
        "</summary>",
        "don't queue work if we've been disposed",
        "no local queue, write to a round-robin queue",
        "if (null == CurrentWorker)",
        "{",
        "using volatile instead of interlocked, no need to be exact, gaining 20% perf",
        "need to wrap bitwise operations in parens to preserve order, otherwise this won't round-robin",
        "to some actors if Settings.NumThreads is an odd number",
        "}",
        "else //recursive task queue, write directly",
        "{",
        "// send work directly to PoolWorker",
        "// CurrentWorker.AddWork(work);",
        "}",
        "bail if shutdown has been requested",
        "request a new thread then shut down",
        "TODO: abort is no guarantee for thread abortion"
    ],
    "docstrings": [
        "* Copyright 2015 Roger Alsing, Aaron Stannard\n * Helios.DedicatedThreadPool - https://github.com/helios-io/DedicatedThreadPool",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "* Timer can be null if no deadlock interval was defined in\n                 * DedicatedThreadPoolSettings.",
        "<summary>"
    ],
    "functions": [
        "DedicatedThreadPoolSettings",
        "DedicatedThreadPoolSettings",
        "DedicatedThreadPoolTaskScheduler",
        "QueueTask",
        "TryExecuteTaskInline",
        "TryDequeue",
        "GetScheduledTasks",
        "EnsureWorkerRequested",
        "ReleaseWorker",
        "RequestWorker",
        "DedicatedThreadPoolSupervisor",
        "Dispose",
        "DedicatedThreadPool",
        "Shutdown",
        "PoolWorker",
        "RequestThread",
        "QueueUserWorkItem",
        "Dispose",
        "Dispose",
        "AddWork",
        "ReplacePoolWorker",
        "PoolWorker",
        "Failover",
        "ForceTermination"
    ],
    "classes": [
        "DedicatedThreadPoolSettings",
        "DedicatedThreadPoolTaskScheduler",
        "DedicatedThreadPool",
        "DedicatedThreadPoolSupervisor",
        "WorkerQueue",
        "PoolWorker"
    ]
}