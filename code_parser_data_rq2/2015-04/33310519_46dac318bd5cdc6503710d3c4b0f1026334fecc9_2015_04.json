{
    "identifiers": [
        "collections",
        "a",
        "b",
        "a",
        "b",
        "a",
        "defaultCompare",
        "a",
        "b",
        "defaultEquals",
        "a",
        "b",
        "defaultToString",
        "item",
        "makeString",
        "item",
        "join",
        "isFunction",
        "func",
        "isUndefined",
        "obj",
        "isString",
        "obj",
        "reverseCompareFunction",
        "compareFunction",
        "compareToEquals",
        "compareFunction",
        "arrays",
        "indexOf",
        "array",
        "item",
        "equalsFunction",
        "lastIndexOf",
        "array",
        "item",
        "equalsFunction",
        "contains",
        "array",
        "item",
        "equalsFunction",
        "remove",
        "array",
        "item",
        "equalsFunction",
        "frequency",
        "array",
        "item",
        "equalsFunction",
        "equals",
        "array1",
        "array2",
        "equalsFunction",
        "copy",
        "array",
        "swap",
        "array",
        "i",
        "j",
        "toString",
        "array",
        "forEach",
        "array",
        "callback",
        "item",
        "item",
        "index",
        "index",
        "item",
        "equalsFunction",
        "item",
        "equalsFunction",
        "item",
        "equalsFunction",
        "other",
        "equalsFunction",
        "n1",
        "n2",
        "eqF",
        "index",
        "callback",
        "item",
        "index",
        "item",
        "toStrFunction",
        "key",
        "key",
        "key",
        "value",
        "key",
        "callback",
        "key",
        "value",
        "key",
        "toStrFunction",
        "key",
        "valuesEqualsFunction",
        "allowDuplicateValues",
        "key",
        "key",
        "value",
        "key",
        "value",
        "key",
        "compareFunction",
        "nodeIndex",
        "nodeIndex",
        "nodeIndex",
        "leftChild",
        "rightChild",
        "index",
        "nodeIndex",
        "element",
        "element",
        "callback",
        "item",
        "elem",
        "elem",
        "elem",
        "equalsFunction",
        "callback",
        "elem",
        "elem",
        "elem",
        "equalsFunction",
        "callback",
        "compareFunction",
        "element",
        "element",
        "element",
        "callback",
        "toStringFunction",
        "item",
        "element",
        "element",
        "otherSet",
        "otherSet",
        "otherSet",
        "otherSet",
        "element",
        "callback",
        "toStrFunction",
        "item",
        "element",
        "nCopies",
        "element",
        "element",
        "element",
        "nCopies",
        "callback",
        "compareFunction",
        "element",
        "element",
        "element",
        "callback",
        "callback",
        "callback",
        "callback",
        "callback",
        "node",
        "element",
        "n1",
        "n2",
        "node",
        "node",
        "callback",
        "signal",
        "node",
        "callback",
        "node",
        "callback",
        "signal",
        "node",
        "callback",
        "signal",
        "node",
        "node",
        "node",
        "node",
        "element"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* @namespace Top level namespace for collections, a TypeScript data structure library.",
        "* Function signature for comparing\n    * <0 means a is smaller\n    * = 0 means they are equal\n    * >0 means a is larger",
        "* Function signature for checking equality",
        "* Function signature for Iterations. Return false to break from loop",
        "* Default function to compare element order.\n     * @function",
        "* Default function to test equality.\n     * @function",
        "* Default function to convert an object to a string.\n     * @function",
        "* Joins all the properies of the object using the provided join string",
        "* Checks if the given argument is a function.\n     * @function",
        "* Checks if the given argument is undefined.\n     * @function",
        "* Checks if the given argument is a string.\n     * @function",
        "* Reverses a compare function.\n     * @function",
        "* Returns an equal function given a compare function.\n     * @function",
        "* @namespace Contains various functions for manipulating arrays.",
        "* Returns the position of the first occurrence of the specified item\n         * within the specified array.\n         * @param {*} array the array in which to search the element.\n         * @param {Object} item the element to search.\n         * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n         * check equality between 2 elements.\n         * @return {number} the position of the first occurrence of the specified element\n         * within the specified array, or -1 if not found.",
        "* Returns the position of the last occurrence of the specified element\n         * within the specified array.\n         * @param {*} array the array in which to search the element.\n         * @param {Object} item the element to search.\n         * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n         * check equality between 2 elements.\n         * @return {number} the position of the last occurrence of the specified element\n         * within the specified array or -1 if not found.",
        "* Returns true if the specified array contains the specified element.\n         * @param {*} array the array in which to search the element.\n         * @param {Object} item the element to search.\n         * @param {function(Object,Object):boolean=} equalsFunction optional function to\n         * check equality between 2 elements.\n         * @return {boolean} true if the specified array contains the specified element.",
        "* Removes the first ocurrence of the specified element from the specified array.\n         * @param {*} array the array in which to search element.\n         * @param {Object} item the element to search.\n         * @param {function(Object,Object):boolean=} equalsFunction optional function to\n         * check equality between 2 elements.\n         * @return {boolean} true if the array changed after this call.",
        "* Returns the number of elements in the specified array equal\n         * to the specified object.\n         * @param {Array} array the array in which to determine the frequency of the element.\n         * @param {Object} item the element whose frequency is to be determined.\n         * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n         * check equality between 2 elements.\n         * @return {number} the number of elements in the specified array\n         * equal to the specified object.",
        "* Returns true if the two specified arrays are equal to one another.\n         * Two arrays are considered equal if both arrays contain the same number\n         * of elements, and all corresponding pairs of elements in the two\n         * arrays are equal and are in the same order.\n         * @param {Array} array1 one array to be tested for equality.\n         * @param {Array} array2 the other array to be tested for equality.\n         * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n         * check equality between elemements in the arrays.\n         * @return {boolean} true if the two arrays are equal",
        "* Returns shallow a copy of the specified array.\n         * @param {*} array the array to copy.\n         * @return {Array} a copy of the specified array",
        "* Swaps the elements at the specified positions in the specified array.\n         * @param {Array} array The array in which to swap elements.\n         * @param {number} i the index of one element to be swapped.\n         * @param {number} j the index of the other element to be swapped.\n         * @return {boolean} true if the array is defined and the indexes are valid.",
        "* Executes the provided function once for each element present in this array\n         * starting from index 0 to length - 1.\n         * @param {Array} array The array in which to iterate.\n         * @param {function(Object):*} callback function to execute, it is\n         * invoked with one argument: the element value, to break the iteration you can\n         * optionally return false.",
        "* First node in the list\n        * @type {Object}\n        * @private",
        "* Last node in the list\n        * @type {Object}\n        * @private",
        "* Number of elements in the list\n        * @type {number}\n        * @private",
        "* Creates an empty Linked List.\n        * @class A linked list is a data structure consisting of a group of nodes\n        * which together represent a sequence.\n        * @constructor",
        "* Adds an element to this list.\n        * @param {Object} item element to be added.\n        * @param {number=} index optional index to add the element. If no index is specified\n        * the element is added to the end of this list.\n        * @return {boolean} true if the element was added or false if the index is invalid\n        * or if the element is undefined.",
        "* Returns the first element in this list.\n        * @return {*} the first element of the list or undefined if the list is\n        * empty.",
        "* Returns the last element in this list.\n        * @return {*} the last element in the list or undefined if the list is\n        * empty.",
        "* Returns the element at the specified position in this list.\n         * @param {number} index desired index.\n         * @return {*} the element at the given index or undefined if the index is\n         * out of bounds.",
        "* Returns the index in this list of the first occurrence of the\n         * specified element, or -1 if the List does not contain this element.\n         * <p>If the elements inside this list are\n         * not comparable with the === operator a custom equals function should be\n         * provided to perform searches, the function must receive two arguments and\n         * return true if they are equal, false otherwise. Example:</p>\n         *\n         * <pre>\n         * var petsAreEqualByName = function(pet1, pet2) {\n         *  return pet1.name === pet2.name;\n         * }\n         * </pre>\n         * @param {Object} item element to search for.\n         * @param {function(Object,Object):boolean=} equalsFunction Optional\n         * function used to check if two elements are equal.\n         * @return {number} the index in this list of the first occurrence\n         * of the specified element, or -1 if this list does not contain the\n         * element.",
        "* Returns true if this list contains the specified element.\n           * <p>If the elements inside the list are\n           * not comparable with the === operator a custom equals function should be\n           * provided to perform searches, the function must receive two arguments and\n           * return true if they are equal, false otherwise. Example:</p>\n           *\n           * <pre>\n           * var petsAreEqualByName = function(pet1, pet2) {\n           *  return pet1.name === pet2.name;\n           * }\n           * </pre>\n           * @param {Object} item element to search for.\n           * @param {function(Object,Object):boolean=} equalsFunction Optional\n           * function used to check if two elements are equal.\n           * @return {boolean} true if this list contains the specified element, false\n           * otherwise.",
        "* Removes the first occurrence of the specified element in this list.\n         * <p>If the elements inside the list are\n         * not comparable with the === operator a custom equals function should be\n         * provided to perform searches, the function must receive two arguments and\n         * return true if they are equal, false otherwise. Example:</p>\n         *\n         * <pre>\n         * var petsAreEqualByName = function(pet1, pet2) {\n         *  return pet1.name === pet2.name;\n         * }\n         * </pre>\n         * @param {Object} item element to be removed from this list, if present.\n         * @return {boolean} true if the list contained the specified element.",
        "* Removes all of the elements from this list.",
        "* Returns true if this list is equal to the given list.\n         * Two lists are equal if they have the same elements in the same order.\n         * @param {LinkedList} other the other list.\n         * @param {function(Object,Object):boolean=} equalsFunction optional\n         * function used to check if two elements are equal. If the elements in the lists\n         * are custom objects you should provide a function, otherwise\n         * the === operator is used to check equality between elements.\n         * @return {boolean} true if this list is equal to the given list.",
        "* @private",
        "* Removes the element at the specified position in this list.\n         * @param {number} index given index.\n         * @return {*} removed element or undefined if the index is out of bounds.",
        "* Executes the provided function once for each element present in this list in order.\n         * @param {function(Object):*} callback function to execute, it is\n         * invoked with one argument: the element value, to break the iteration you can\n         * optionally return false.",
        "* Reverses the order of the elements in this linked list (makes the last\n         * element first, and the first element last).",
        "* Returns an array containing all of the elements in this list in proper\n         * sequence.\n         * @return {Array.<*>} an array containing all of the elements in this list,\n         * in proper sequence.",
        "* Returns the number of elements in this list.\n         * @return {number} the number of elements in this list.",
        "* Returns true if this list contains no elements.\n         * @return {boolean} true if this list contains no elements.",
        "* @private",
        "* @private",
        "* Object holding the key-value pairs.\n         * @type {Object}\n         * @private",
        "* Number of elements in the list.\n         * @type {number}\n         * @private",
        "* Function used to convert keys to strings.\n         * @type {function(Object):string}\n         * @private",
        "* Creates an empty dictionary.\n         * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n         * This implementation accepts any kind of objects as keys.</p>\n         *\n         * <p>If the keys are custom objects a function which converts keys to unique\n         * strings must be provided. Example:</p>\n         * <pre>\n         * function petToString(pet) {\n         *  return pet.name;\n         * }\n         * </pre>\n         * @constructor\n         * @param {function(Object):string=} toStrFunction optional function used\n         * to convert keys to strings. If the keys aren't strings or if toString()\n         * is not appropriate, a custom function which receives a key and returns a\n         * unique string must be provided.",
        "* Returns the value to which this dictionary maps the specified key.\n         * Returns undefined if this dictionary contains no mapping for this key.\n         * @param {Object} key key whose associated value is to be returned.\n         * @return {*} the value to which this dictionary maps the specified key or\n         * undefined if the map contains no mapping for this key.",
        "* Associates the specified value with the specified key in this dictionary.\n         * If the dictionary previously contained a mapping for this key, the old\n         * value is replaced by the specified value.\n         * @param {Object} key key with which the specified value is to be\n         * associated.\n         * @param {Object} value value to be associated with the specified key.\n         * @return {*} previous value associated with the specified key, or undefined if\n         * there was no mapping for the key or if the key/value are undefined.",
        "* Removes the mapping for this key from this dictionary if it is present.\n         * @param {Object} key key whose mapping is to be removed from the\n         * dictionary.\n         * @return {*} previous value associated with specified key, or undefined if\n         * there was no mapping for key.",
        "* Returns an array containing all of the keys in this dictionary.\n         * @return {Array} an array containing all of the keys in this dictionary.",
        "* Returns an array containing all of the values in this dictionary.\n         * @return {Array} an array containing all of the values in this dictionary.",
        "* Executes the provided function once for each key-value pair\n        * present in this dictionary.\n        * @param {function(Object,Object):*} callback function to execute, it is\n        * invoked with two arguments: key and value. To break the iteration you can\n        * optionally return false.",
        "* Returns true if this dictionary contains a mapping for the specified key.\n         * @param {Object} key key whose presence in this dictionary is to be\n         * tested.\n         * @return {boolean} true if this dictionary contains a mapping for the\n         * specified key.",
        "* Removes all mappings from this dictionary.\n        * @this {collections.Dictionary}",
        "* Returns the number of keys in this dictionary.\n         * @return {number} the number of key-value mappings in this dictionary.",
        "* Returns true if this dictionary contains no mappings.\n         * @return {boolean} true if this dictionary contains no mappings.",
        "* Creates an empty multi dictionary.\n         * @class <p>A multi dictionary is a special kind of dictionary that holds\n         * multiple values against each key. Setting a value into the dictionary will\n         * add the value to an array at that key. Getting a key will return an array,\n         * holding all the values set to that key.\n         * You can configure to allow duplicates in the values.\n         * This implementation accepts any kind of objects as keys.</p>\n         *\n         * <p>If the keys are custom objects a function which converts keys to strings must be\n         * provided. Example:</p>\n         *\n         * <pre>\n         * function petToString(pet) {\n           *  return pet.name;\n           * }\n         * </pre>\n         * <p>If the values are custom objects a function to check equality between values\n         * must be provided. Example:</p>\n         *\n         * <pre>\n         * function petsAreEqualByAge(pet1,pet2) {\n           *  return pet1.age===pet2.age;\n           * }\n         * </pre>\n         * @constructor\n         * @param {function(Object):string=} toStrFunction optional function\n         * to convert keys to strings. If the keys aren't strings or if toString()\n         * is not appropriate, a custom function which receives a key and returns a\n         * unique string must be provided.\n         * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n         * function to check if two values are equal.\n         *\n         * @param allowDuplicateValues",
        "* Returns an array holding the values to which this dictionary maps\n        * the specified key.\n        * Returns an empty array if this dictionary contains no mappings for this key.\n        * @param {Object} key key whose associated values are to be returned.\n        * @return {Array} an array holding the values to which this dictionary maps\n        * the specified key.",
        "* Adds the value to the array associated with the specified key, if\n         * it is not already present.\n         * @param {Object} key key with which the specified value is to be\n         * associated.\n         * @param {Object} value the value to add to the array at the key\n         * @return {boolean} true if the value was not already associated with that key.",
        "* Removes the specified values from the array of values associated with the\n         * specified key. If a value isn't given, all values associated with the specified\n         * key are removed.\n         * @param {Object} key key whose mapping is to be removed from the\n         * dictionary.\n         * @param {Object=} value optional argument to specify the value to remove\n         * from the array associated with the specified key.\n         * @return {*} true if the dictionary changed, false if the key doesn't exist or\n         * if the specified value isn't associated with the specified key.",
        "* Returns an array containing all of the keys in this dictionary.\n         * @return {Array} an array containing all of the keys in this dictionary.",
        "* Returns an array containing all of the values in this dictionary.\n         * @return {Array} an array containing all of the values in this dictionary.",
        "* Returns true if this dictionary at least one value associatted the specified key.\n         * @param {Object} key key whose presence in this dictionary is to be\n         * tested.\n         * @return {boolean} true if this dictionary at least one value associatted\n         * the specified key.",
        "* Removes all mappings from this dictionary.",
        "* Returns the number of keys in this dictionary.\n         * @return {number} the number of key-value mappings in this dictionary.",
        "* Returns true if this dictionary contains no mappings.\n         * @return {boolean} true if this dictionary contains no mappings.",
        "* Array used to store the elements od the heap.\n         * @type {Array.<Object>}\n         * @private",
        "* Function used to compare elements.\n         * @type {function(Object,Object):number}\n         * @private",
        "* Creates an empty Heap.\n         * @class\n         * <p>A heap is a binary tree, where the nodes maintain the heap property:\n         * each node is smaller than each of its children and therefore a MinHeap\n         * This implementation uses an array to store elements.</p>\n         * <p>If the inserted elements are custom objects a compare function must be provided,\n         *  at construction time, otherwise the <=, === and >= operators are\n         * used to compare elements. Example:</p>\n         *\n         * <pre>\n         * function compare(a, b) {\n         *  if (a is less than b by some ordering criterion) {\n         *     return -1;\n         *  } if (a is greater than b by the ordering criterion) {\n         *     return 1;\n         *  }\n         *  // a must be equal to b\n         *  return 0;\n         * }\n         * </pre>\n         *\n         * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n         * reverse compare function to accomplish that behavior. Example:</p>\n         *\n         * <pre>\n         * function reverseCompare(a, b) {\n         *  if (a is less than b by some ordering criterion) {\n         *     return 1;\n         *  } if (a is greater than b by the ordering criterion) {\n         *     return -1;\n         *  }\n         *  // a must be equal to b\n         *  return 0;\n         * }\n         * </pre>\n         *\n         * @constructor\n         * @param {function(Object,Object):number=} compareFunction optional\n         * function used to compare two elements. Must return a negative integer,\n         * zero, or a positive integer as the first argument is less than, equal to,\n         * or greater than the second.",
        "* Returns the index of the left child of the node at the given index.\n         * @param {number} nodeIndex The index of the node to get the left child\n         * for.\n         * @return {number} The index of the left child.\n         * @private",
        "* Returns the index of the right child of the node at the given index.\n         * @param {number} nodeIndex The index of the node to get the right child\n         * for.\n         * @return {number} The index of the right child.\n         * @private",
        "* Returns the index of the parent of the node at the given index.\n         * @param {number} nodeIndex The index of the node to get the parent for.\n         * @return {number} The index of the parent.\n         * @private",
        "* Returns the index of the smaller child node (if it exists).\n         * @param {number} leftChild left child index.\n         * @param {number} rightChild right child index.\n         * @return {number} the index with the minimum value or -1 if it doesn't\n         * exists.\n         * @private",
        "* Moves the node at the given index up to its proper place in the heap.\n         * @param {number} index The index of the node to move up.\n         * @private",
        "* Moves the node at the given index down to its proper place in the heap.\n         * @param {number} nodeIndex The index of the node to move down.\n         * @private",
        "* Retrieves but does not remove the root element of this heap.\n         * @return {*} The value at the root of the heap. Returns undefined if the\n         * heap is empty.",
        "* Adds the given element into the heap.\n         * @param {*} element the element.\n         * @return true if the element was added or fals if it is undefined.",
        "* Retrieves and removes the root element of this heap.\n         * @return {*} The value removed from the root of the heap. Returns\n         * undefined if the heap is empty.",
        "* Returns true if this heap contains the specified element.\n         * @param {Object} element element to search for.\n         * @return {boolean} true if this Heap contains the specified element, false\n         * otherwise.",
        "* Returns the number of elements in this heap.\n         * @return {number} the number of elements in this heap.",
        "* Checks if this heap is empty.\n         * @return {boolean} true if and only if this heap contains no items; false\n         * otherwise.",
        "* Removes all of the elements from this heap.",
        "* Executes the provided function once for each element present in this heap in\n         * no particular order.\n         * @param {function(Object):*} callback function to execute, it is\n         * invoked with one argument: the element value, to break the iteration you can\n         * optionally return false.",
        "* List containing the elements.\n         * @type collections.LinkedList\n         * @private",
        "* Creates an empty Stack.\n         * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n         * element added to the stack will be the first one to be removed. This\n         * implementation uses a linked list as a container.\n         * @constructor",
        "* Pushes an item onto the top of this stack.\n         * @param {Object} elem the element to be pushed onto this stack.\n         * @return {boolean} true if the element was pushed or false if it is undefined.",
        "* Pushes an item onto the top of this stack.\n         * @param {Object} elem the element to be pushed onto this stack.\n         * @return {boolean} true if the element was pushed or false if it is undefined.",
        "* Removes the object at the top of this stack and returns that object.\n         * @return {*} the object at the top of this stack or undefined if the\n         * stack is empty.",
        "* Looks at the object at the top of this stack without removing it from the\n         * stack.\n         * @return {*} the object at the top of this stack or undefined if the\n         * stack is empty.",
        "* Returns the number of elements in this stack.\n         * @return {number} the number of elements in this stack.",
        "* Returns true if this stack contains the specified element.\n         * <p>If the elements inside this stack are\n         * not comparable with the === operator, a custom equals function should be\n         * provided to perform searches, the function must receive two arguments and\n         * return true if they are equal, false otherwise. Example:</p>\n         *\n         * <pre>\n         * var petsAreEqualByName (pet1, pet2) {\n         *  return pet1.name === pet2.name;\n         * }\n         * </pre>\n         * @param {Object} elem element to search for.\n         * @param {function(Object,Object):boolean=} equalsFunction optional\n         * function to check if two elements are equal.\n         * @return {boolean} true if this stack contains the specified element,\n         * false otherwise.",
        "* Checks if this stack is empty.\n         * @return {boolean} true if and only if this stack contains no items; false\n         * otherwise.",
        "* Removes all of the elements from this stack.",
        "* Executes the provided function once for each element present in this stack in\n         * LIFO order.\n         * @param {function(Object):*} callback function to execute, it is\n         * invoked with one argument: the element value, to break the iteration you can\n         * optionally return false.",
        "* List containing the elements.\n         * @type collections.LinkedList\n         * @private",
        "* Creates an empty queue.\n         * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n         * element added to the queue will be the first one to be removed. This\n         * implementation uses a linked list as a container.\n         * @constructor",
        "* Inserts the specified element into the end of this queue.\n         * @param {Object} elem the element to insert.\n         * @return {boolean} true if the element was inserted, or false if it is undefined.",
        "* Inserts the specified element into the end of this queue.\n         * @param {Object} elem the element to insert.\n         * @return {boolean} true if the element was inserted, or false if it is undefined.",
        "* Retrieves and removes the head of this queue.\n         * @return {*} the head of this queue, or undefined if this queue is empty.",
        "* Retrieves, but does not remove, the head of this queue.\n         * @return {*} the head of this queue, or undefined if this queue is empty.",
        "* Returns the number of elements in this queue.\n         * @return {number} the number of elements in this queue.",
        "* Returns true if this queue contains the specified element.\n         * <p>If the elements inside this stack are\n         * not comparable with the === operator, a custom equals function should be\n         * provided to perform searches, the function must receive two arguments and\n         * return true if they are equal, false otherwise. Example:</p>\n         *\n         * <pre>\n         * var petsAreEqualByName (pet1, pet2) {\n         *  return pet1.name === pet2.name;\n         * }\n         * </pre>\n         * @param {Object} elem element to search for.\n         * @param {function(Object,Object):boolean=} equalsFunction optional\n         * function to check if two elements are equal.\n         * @return {boolean} true if this queue contains the specified element,\n         * false otherwise.",
        "* Checks if this queue is empty.\n         * @return {boolean} true if and only if this queue contains no items; false\n         * otherwise.",
        "* Removes all of the elements from this queue.",
        "* Executes the provided function once for each element present in this queue in\n         * FIFO order.\n         * @param {function(Object):*} callback function to execute, it is\n         * invoked with one argument: the element value, to break the iteration you can\n         * optionally return false.",
        "* Creates an empty priority queue.\n         * @class <p>In a priority queue each element is associated with a \"priority\",\n         * elements are dequeued in highest-priority-first order (the elements with the\n         * highest priority are dequeued first). Priority Queues are implemented as heaps.\n         * If the inserted elements are custom objects a compare function must be provided,\n         * otherwise the <=, === and >= operators are used to compare object priority.</p>\n         * <pre>\n         * function compare(a, b) {\n         *  if (a is less than b by some ordering criterion) {\n         *     return -1;\n         *  } if (a is greater than b by the ordering criterion) {\n         *     return 1;\n         *  }\n         *  // a must be equal to b\n         *  return 0;\n         * }\n         * </pre>\n         * @constructor\n         * @param {function(Object,Object):number=} compareFunction optional\n         * function used to compare two element priorities. Must return a negative integer,\n         * zero, or a positive integer as the first argument is less than, equal to,\n         * or greater than the second.",
        "* Inserts the specified element into this priority queue.\n         * @param {Object} element the element to insert.\n         * @return {boolean} true if the element was inserted, or false if it is undefined.",
        "* Inserts the specified element into this priority queue.\n         * @param {Object} element the element to insert.\n         * @return {boolean} true if the element was inserted, or false if it is undefined.",
        "* Retrieves and removes the highest priority element of this queue.\n         * @return {*} the the highest priority element of this queue,\n         *  or undefined if this queue is empty.",
        "* Retrieves, but does not remove, the highest priority element of this queue.\n         * @return {*} the highest priority element of this queue, or undefined if this queue is empty.",
        "* Returns true if this priority queue contains the specified element.\n         * @param {Object} element element to search for.\n         * @return {boolean} true if this priority queue contains the specified element,\n         * false otherwise.",
        "* Checks if this priority queue is empty.\n         * @return {boolean} true if and only if this priority queue contains no items; false\n         * otherwise.",
        "* Returns the number of elements in this priority queue.\n         * @return {number} the number of elements in this priority queue.",
        "* Removes all of the elements from this priority queue.",
        "* Executes the provided function once for each element present in this queue in\n         * no particular order.\n         * @param {function(Object):*} callback function to execute, it is\n         * invoked with one argument: the element value, to break the iteration you can\n         * optionally return false.",
        "* Creates an empty set.\n         * @class <p>A set is a data structure that contains no duplicate items.</p>\n         * <p>If the inserted elements are custom objects a function\n         * which converts elements to strings must be provided. Example:</p>\n         *\n         * <pre>\n         * function petToString(pet) {\n         *  return pet.name;\n         * }\n         * </pre>\n         *\n         * @constructor\n         * @param {function(Object):string=} toStringFunction optional function used\n         * to convert elements to strings. If the elements aren't strings or if toString()\n         * is not appropriate, a custom function which receives a onject and returns a\n         * unique string must be provided.",
        "* Returns true if this set contains the specified element.\n         * @param {Object} element element to search for.\n         * @return {boolean} true if this set contains the specified element,\n         * false otherwise.",
        "* Adds the specified element to this set if it is not already present.\n         * @param {Object} element the element to insert.\n         * @return {boolean} true if this set did not already contain the specified element.",
        "* Performs an intersecion between this an another set.\n         * Removes all values that are not present this set and the given set.\n         * @param {collections.Set} otherSet other set.",
        "* Performs a union between this an another set.\n         * Adds all values from the given set to this set.\n         * @param {collections.Set} otherSet other set.",
        "* Performs a difference between this an another set.\n         * Removes from this set all the values that are present in the given set.\n         * @param {collections.Set} otherSet other set.",
        "* Checks whether the given set contains all the elements in this set.\n         * @param {collections.Set} otherSet other set.\n         * @return {boolean} true if this set is a subset of the given set.",
        "* Removes the specified element from this set if it is present.\n         * @return {boolean} true if this set contained the specified element.",
        "* Executes the provided function once for each element\n         * present in this set.\n         * @param {function(Object):*} callback function to execute, it is\n         * invoked with one arguments: the element. To break the iteration you can\n         * optionally return false.",
        "* Returns an array containing all of the elements in this set in arbitrary order.\n         * @return {Array} an array containing all of the elements in this set.",
        "* Returns true if this set contains no elements.\n         * @return {boolean} true if this set contains no elements.",
        "* Returns the number of elements in this set.\n         * @return {number} the number of elements in this set.",
        "* Removes all of the elements from this set.",
        "* Creates an empty bag.\n         * @class <p>A bag is a special kind of set in which members are\n         * allowed to appear more than once.</p>\n         * <p>If the inserted elements are custom objects a function\n         * which converts elements to unique strings must be provided. Example:</p>\n         *\n         * <pre>\n         * function petToString(pet) {\n         *  return pet.name;\n         * }\n         * </pre>\n         *\n         * @constructor\n         * @param {function(Object):string=} toStrFunction optional function used\n         * to convert elements to strings. If the elements aren't strings or if toString()\n         * is not appropriate, a custom function which receives an object and returns a\n         * unique string must be provided.",
        "* Adds nCopies of the specified object to this bag.\n        * @param {Object} element element to add.\n        * @param {number=} nCopies the number of copies to add, if this argument is\n        * undefined 1 copy is added.\n        * @return {boolean} true unless element is undefined.",
        "* Counts the number of copies of the specified object in this bag.\n        * @param {Object} element the object to search for..\n        * @return {number} the number of copies of the object, 0 if not found",
        "* Returns true if this bag contains the specified element.\n         * @param {Object} element element to search for.\n         * @return {boolean} true if this bag contains the specified element,\n         * false otherwise.",
        "* Removes nCopies of the specified object to this bag.\n        * If the number of copies to remove is greater than the actual number\n        * of copies in the Bag, all copies are removed.\n        * @param {Object} element element to remove.\n        * @param {number=} nCopies the number of copies to remove, if this argument is\n        * undefined 1 copy is removed.\n        * @return {boolean} true if at least 1 element was removed.",
        "* Returns an array containing all of the elements in this big in arbitrary order,\n         * including multiple copies.\n         * @return {Array} an array containing all of the elements in this bag.",
        "* Returns a set of unique elements in this bag.\n         * @return {collections.Set<T>} a set of unique elements in this bag.",
        "* Executes the provided function once for each element\n         * present in this bag, including multiple copies.\n         * @param {function(Object):*} callback function to execute, it is\n         * invoked with one argument: the element. To break the iteration you can\n         * optionally return false.",
        "* Returns the number of elements in this bag.\n         * @return {number} the number of elements in this bag.",
        "* Returns true if this bag contains no elements.\n         * @return {boolean} true if this bag contains no elements.",
        "* Removes all of the elements from this bag.",
        "* Creates an empty binary search tree.\n         * @class <p>A binary search tree is a binary tree in which each\n         * internal node stores an element such that the elements stored in the\n         * left subtree are less than it and the elements\n         * stored in the right subtree are greater.</p>\n         * <p>Formally, a binary search tree is a node-based binary tree data structure which\n         * has the following properties:</p>\n         * <ul>\n         * <li>The left subtree of a node contains only nodes with elements less\n         * than the node's element</li>\n         * <li>The right subtree of a node contains only nodes with elements greater\n         * than the node's element</li>\n         * <li>Both the left and right subtrees must also be binary search trees.</li>\n         * </ul>\n         * <p>If the inserted elements are custom objects a compare function must\n         * be provided at construction time, otherwise the <=, === and >= operators are\n         * used to compare elements. Example:</p>\n         * <pre>\n         * function compare(a, b) {\n         *  if (a is less than b by some ordering criterion) {\n         *     return -1;\n         *  } if (a is greater than b by the ordering criterion) {\n         *     return 1;\n         *  }\n         *  // a must be equal to b\n         *  return 0;\n         * }\n         * </pre>\n         * @constructor\n         * @param {function(Object,Object):number=} compareFunction optional\n         * function used to compare two elements. Must return a negative integer,\n         * zero, or a positive integer as the first argument is less than, equal to,\n         * or greater than the second.",
        "* Adds the specified element to this tree if it is not already present.\n         * @param {Object} element the element to insert.\n         * @return {boolean} true if this tree did not already contain the specified element.",
        "* Removes all of the elements from this tree.",
        "* Returns true if this tree contains no elements.\n         * @return {boolean} true if this tree contains no elements.",
        "* Returns the number of elements in this tree.\n         * @return {number} the number of elements in this tree.",
        "* Returns true if this tree contains the specified element.\n         * @param {Object} element element to search for.\n         * @return {boolean} true if this tree contains the specified element,\n         * false otherwise.",
        "* Removes the specified element from this tree if it is present.\n         * @return {boolean} true if this tree contained the specified element.",
        "* Executes the provided function once for each element present in this tree in\n         * in-order.\n         * @param {function(Object):*} callback function to execute, it is invoked with one\n         * argument: the element value, to break the iteration you can optionally return false.",
        "* Executes the provided function once for each element present in this tree in pre-order.\n         * @param {function(Object):*} callback function to execute, it is invoked with one\n         * argument: the element value, to break the iteration you can optionally return false.",
        "* Executes the provided function once for each element present in this tree in post-order.\n         * @param {function(Object):*} callback function to execute, it is invoked with one\n         * argument: the element value, to break the iteration you can optionally return false.",
        "* Executes the provided function once for each element present in this tree in\n         * level-order.\n         * @param {function(Object):*} callback function to execute, it is invoked with one\n         * argument: the element value, to break the iteration you can optionally return false.",
        "* Returns the minimum element of this tree.\n         * @return {*} the minimum element of this tree or undefined if this tree is\n         * is empty.",
        "* Returns the maximum element of this tree.\n         * @return {*} the maximum element of this tree or undefined if this tree is\n         * is empty.",
        "* Executes the provided function once for each element present in this tree in inorder.\n         * Equivalent to inorderTraversal.\n         * @param {function(Object):*} callback function to execute, it is\n         * invoked with one argument: the element value, to break the iteration you can\n         * optionally return false.",
        "* Returns an array containing all of the elements in this tree in in-order.\n         * @return {Array} an array containing all of the elements in this tree in in-order.",
        "* Returns the height of this tree.\n         * @return {number} the height of this tree or -1 if is empty.",
        "* @private",
        "* @private",
        "* @private",
        "* @private",
        "* @private",
        "* @private",
        "* @private",
        "* @private",
        "* @private",
        "* @private",
        "* @private"
    ],
    "functions": [],
    "classes": [
        "MultiDictionary",
        "Heap",
        "PriorityQueue",
        "Bag",
        "BSTree"
    ]
}