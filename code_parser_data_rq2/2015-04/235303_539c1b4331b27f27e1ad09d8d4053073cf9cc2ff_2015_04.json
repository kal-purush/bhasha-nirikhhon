{
    "identifiers": [
        "Collections",
        "Generic",
        "MathNet",
        "Numerics",
        "Properties",
        "MathNet",
        "Numerics",
        "Statistics",
        "NegativeInfinity",
        "PositiveInfinity",
        "windowSize",
        "windowSize",
        "ArgumentException",
        "Format",
        "Resources",
        "ArgumentMustBePositive",
        "_windowSize",
        "windowSize",
        "_oldValues",
        "_windowSize",
        "windowSize",
        "values",
        "windowSize",
        "PushRange",
        "values",
        "_windowSize",
        "Count",
        "_min",
        "NaN",
        "Count",
        "_max",
        "NaN",
        "Count",
        "_m1",
        "NaN",
        "Count",
        "NaN",
        "_m2",
        "Count",
        "Count",
        "NaN",
        "_m2",
        "Count",
        "Count",
        "NaN",
        "Sqrt",
        "_m2",
        "Count",
        "Count",
        "NaN",
        "Sqrt",
        "_m2",
        "Count",
        "value",
        "Count",
        "_windowSize",
        "_oldValues",
        "Count",
        "value",
        "Count",
        "value",
        "_m1",
        "d",
        "Count",
        "d",
        "s",
        "Count",
        "_m1",
        "s",
        "_m2",
        "t",
        "value",
        "_min",
        "IsNaN",
        "value",
        "_min",
        "value",
        "value",
        "_max",
        "IsNaN",
        "value",
        "_max",
        "value",
        "_oldValues",
        "_lastIndex",
        "value",
        "oldValue",
        "d",
        "Count",
        "_m1",
        "s",
        "value",
        "_m1",
        "oldValue",
        "oldM1",
        "d",
        "x",
        "_m2",
        "t",
        "_oldValues",
        "_lastIndex",
        "value",
        "_lastIndex",
        "_lastIndex",
        "WindowSize",
        "_lastIndex",
        "_max",
        "value",
        "_max",
        "IsNaN",
        "value",
        "value",
        "_oldValues",
        "Maximum",
        "_min",
        "value",
        "_min",
        "IsNaN",
        "value",
        "value",
        "_oldValues",
        "Minimum",
        "values",
        "value",
        "values",
        "Push",
        "value"
    ],
    "literals": [
        "\"windowSize\""
    ],
    "variables": [
        "_oldValues",
        "_windowSize",
        "_lastIndex",
        "_m1",
        "_m2",
        "_m3",
        "_m4",
        "_max",
        "_min",
        "WindowSize",
        "Count",
        "Minimum",
        "Maximum",
        "Mean",
        "Variance",
        "PopulationVariance",
        "StandardDeviation",
        "PopulationStandardDeviation",
        "d",
        "s",
        "t",
        "oldValue",
        "d",
        "s",
        "oldM1",
        "_m1",
        "x",
        "t"
    ],
    "comments": [
        "<copyright file=\"MovingStatistics.cs\" company=\"Math.NET\">",
        "Math.NET Numerics, part of the Math.NET Project",
        "http://numerics.mathdotnet.com",
        "http://github.com/mathnet/mathnet-numerics",
        "http://mathnetnumerics.codeplex.com",
        "",
        "Copyright (c) 2009-2015 Math.NET",
        "",
        "Permission is hereby granted, free of charge, to any person",
        "obtaining a copy of this software and associated documentation",
        "files (the \"Software\"), to deal in the Software without",
        "restriction, including without limitation the rights to use,",
        "copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the",
        "Software is furnished to do so, subject to the following",
        "conditions:",
        "",
        "The above copyright notice and this permission notice shall be",
        "included in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,",
        "EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES",
        "OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND",
        "NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT",
        "HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,",
        "WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",
        "FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR",
        "OTHER DEALINGS IN THE SOFTWARE.",
        "</copyright>",
        "Running statistics over a window of data, allows updating by adding values.",
        "</summary>",
        "Gets the total number of samples.",
        "</summary>",
        "Returns the minimum value in the sample data.",
        "Returns NaN if data is empty or if any entry is NaN.",
        "</summary>",
        "Returns the maximum value in the sample data.",
        "Returns NaN if data is empty or if any entry is NaN.",
        "</summary>",
        "Evaluates the sample mean, an estimate of the population mean.",
        "Returns NaN if data is empty or if any entry is NaN.",
        "</summary>",
        "Estimates the unbiased population variance from the provided samples.",
        "On a dataset of size N will use an N-1 normalizer (Bessel's correction).",
        "Returns NaN if data has less than two entries or if any entry is NaN.",
        "</summary>",
        "Evaluates the variance from the provided full population.",
        "On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.",
        "Returns NaN if data is empty or if any entry is NaN.",
        "</summary>",
        "Estimates the unbiased population standard deviation from the provided samples.",
        "On a dataset of size N will use an N-1 normalizer (Bessel's correction).",
        "Returns NaN if data has less than two entries or if any entry is NaN.",
        "</summary>",
        "Evaluates the standard deviation from the provided full population.",
        "On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.",
        "Returns NaN if data is empty or if any entry is NaN.",
        "</summary>",
        "/// <summary>\n        /// Estimates the unbiased population skewness from the provided samples.\n        /// Uses a normalizer (Bessel's correction; type 2).\n        /// Returns NaN if data has less than three entries or if any entry is NaN.\n        /// </summary>\n        public double Skewness\n        {\n            get { return Count < 3 ? double.NaN : (Count*_m3*Math.Sqrt(_m2/(Count - 1))/(_m2*_m2*(Count - 2)))*(Count - 1); }\n        }\n\n        /// <summary>\n        /// Evaluates the population skewness from the full population.\n        /// Does not use a normalizer and would thus be biased if applied to a subset (type 1).\n        /// Returns NaN if data has less than two entries or if any entry is NaN.\n        /// </summary>\n        public double PopulationSkewness\n        {\n            get { return Count < 2 ? double.NaN : Math.Sqrt(Count)*_m3/Math.Pow(_m2, 1.5); }\n        }\n\n        /// <summary>\n        /// Estimates the unbiased population kurtosis from the provided samples.\n        /// Uses a normalizer (Bessel's correction; type 2).\n        /// Returns NaN if data has less than four entries or if any entry is NaN.\n        /// </summary>\n        public double Kurtosis\n        {\n            get { return Count < 4 ? double.NaN : ((double) Count*Count - 1)/((Count - 2)*(Count - 3))*(Count*_m4/(_m2*_m2) - 3 + 6.0/(Count + 1)); }\n        }\n\n        /// <summary>\n        /// Evaluates the population kurtosis from the full population.\n        /// Does not use a normalizer and would thus be biased if applied to a subset (type 1).\n        /// Returns NaN if data has less than three entries or if any entry is NaN.\n        /// </summary>\n        public double PopulationKurtosis\n        {\n            get { return Count < 3 ? double.NaN : Count*_m4/(_m2*_m2) - 3.0; }\n        }",
        "Update the running statistics by adding another observed sample (in-place).",
        "</summary>",
        "var s2 = s * s;",
        "_m4 += t * s2 * (Count * Count - 3 * Count + 3) + 6 * s2 * _m2 - 4 * s * _m3;",
        "_m3 += t * s * (Count - 2) - 3 * s * _m2;",
        "var s2 = s * s;",
        "_m4 += t * s2 * (Count * Count - 3 * Count + 3) + 6 * s2 * _m2 - 4 * s * _m3;",
        "_m3 += t * (x /(Count-1) - 3 * s * _m2;",
        "Update the running statistics by adding a sequence of observed sample (in-place).",
        "</summary>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "MovingStatistics",
        "MovingStatistics",
        "Push",
        "PushRange"
    ],
    "classes": [
        "MovingStatistics"
    ]
}