{
    "identifiers": [
        "deg",
        "deg",
        "rad",
        "rad",
        "lat1",
        "lon1",
        "lat2",
        "lon2",
        "lat1",
        "lon1",
        "lat2",
        "lon2",
        "ret",
        "lat1",
        "lat2",
        "lon2",
        "lon1",
        "ret",
        "radLat1",
        "radLat2",
        "radLat1",
        "radLat2",
        "radDeltaLon",
        "greatCircleRadius",
        "ret",
        "radDeltaLon",
        "radLat2",
        "radLat1",
        "radLat2",
        "radLat1",
        "radLat2",
        "radDeltaLon",
        "ret",
        "lat",
        "lon",
        "lat",
        "lon",
        "i",
        "i",
        "lat",
        "lon",
        "calcul",
        "calcul",
        "calcul",
        "mutual",
        "calcul",
        "mutual",
        "outputData",
        "calcul",
        "outputData",
        "lat",
        "lon",
        "lat",
        "lon",
        "distance",
        "distance",
        "distance",
        "parseInt",
        "distance",
        "distance",
        "distance",
        "distance",
        "azimuth",
        "azimuth",
        "outputData",
        "outputEl",
        "outputEl",
        "i",
        "outputData",
        "_tdCoord",
        "outputData",
        "i",
        "outputData",
        "i",
        "_tr",
        "_tdCoord",
        "_tdDist",
        "outputData",
        "i",
        "_tr",
        "_tdDist",
        "_tdAzimuth",
        "outputData",
        "i",
        "_tr",
        "_tdAzimuth",
        "_tdDesc",
        "outputData",
        "i",
        "_tr",
        "_tdDesc",
        "outputEl",
        "_tr",
        "lat",
        "lon"
    ],
    "literals": [
        "'data_out'",
        "'coord_in'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Prague'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Kiev'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Amsterdam'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Stockholm'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Tirana'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Dublin'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Buenos Aires'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Sydney'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Ottawa'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Vladivostok'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Nanyuki'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Lavrentiya'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Pontianak'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Middleearth'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'North Pole'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Azimuth point 1'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Azimuth point 2'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Azimuth point 3'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Azimuth point 4'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'South Pole'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'South Magnetic Pole'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Control checksum'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'North Magnetic Pole'",
        "'lat'",
        "'lon'",
        "'desc'",
        "'Plesivec (test start point)'",
        "'distance'",
        "'azimuth'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'distance'",
        "'azimuth'",
        "','",
        "' km'",
        "' Â°'",
        "''",
        "'tr'",
        "'td'",
        "'td'",
        "'td'",
        "'td'"
    ],
    "variables": [
        "NearestCoordinates",
        "ret",
        "greatCircleRadius",
        "radLat1",
        "radLat2",
        "radDeltaLon",
        "outputData",
        "calcul",
        "mutual",
        "outputEl",
        "_tr",
        "_tdCoord",
        "_tdDist",
        "_tdAzimuth",
        "_tdDesc",
        "lat",
        "lon"
    ],
    "comments": [
        "Usefull functions --------",
        "--------------------------",
        "distance will be in km",
        "averidge radius of Earth",
        "convert coordinates do radians",
        "alghorithms based on:",
        "http://cs.wikipedia.org/wiki/Loxodroma",
        "http://cs.wikipedia.org/wiki/Ortodroma",
        "TODO: sort data by distance",
        "roud values to integers",
        "round values to last two digits",
        "emtpty workspace",
        "fill output with formatted output",
        "and finally append it to output element",
        "TODO: better handling input",
        "this.coordIn = document.getElementById(this.config.idElInputCoord).value;",
        "TODO: read lat and lon from input",
        "TODO: return false is not quite correct...will use preventDefault instead in future"
    ],
    "docstrings": [
        "* Extend JS Math object with degrees to radian converter\n* @param float deg input degree\n* @return float radians",
        "* Extend JS Math object with radian to degrees converter\n* @param float rad input radians\n* @return float degrees",
        "* Main object of Nearest Coordintes",
        "* Calculate mutual position data of two points on sphere\n  * I know this alghorithm based on sphere isn't accurate for Earth,\n  * but this should be only hint where to look for interesting places near\n  * selected point, and for this it is good enough.\n  * @param float lat1 latitude of start point\n  * @param float lon1 longitude of start point\n  * @param float lat2 latitude of end point\n  * @param float lon2 longitude of end point\n  * @return object mutual position data of those two points",
        "* Process nearest search\n  * @param float lat latitude coordinate for searching start point\n  * @param float lon longitude coordinate for searching start point\n  * @return object sorted output data with nearest points",
        "* Format output coordinates\n  * @param float lat latitude coordinate\n  * @param float lon longitude coordinate\n  * @return string formatted coordinates",
        "* Format output distance\n  * @param float distance\n  * @return string formatted distance with units",
        "* Format output azimuth in degrees\n  * @param int azimuth degrees\n  * @return string formatted azimuth with units",
        "* Output data to table\n  * @param object outputData data for output to table\n  * @return bool true if success, false elsewhere",
        "* Read data from form and find nearest objects"
    ],
    "functions": [],
    "classes": []
}