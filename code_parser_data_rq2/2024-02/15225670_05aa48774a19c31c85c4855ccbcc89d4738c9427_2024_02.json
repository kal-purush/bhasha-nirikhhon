{
    "identifiers": [
        "batch",
        "IStore",
        "JitsiRecordingConstants",
        "StateListenerRegistry",
        "playSound",
        "showNotification",
        "NOTIFICATION_TIMEOUT_TYPE",
        "RECORDING_OFF_SOUND_ID",
        "RECORDING_ON_SOUND_ID",
        "isRecorderTranscriptionsRunning",
        "StateListenerRegistry",
        "isRecorderTranscriptionsRunning",
        "isRecorderTranscriptionsRunningValue",
        "isRecorderTranscriptionsRunningValue",
        "notifyTranscribingStatusChanged",
        "maybeEmitRecordingNotification",
        "dispatch",
        "getState",
        "notifyTranscribingStatusChanged",
        "maybeEmitRecordingNotification",
        "dispatch",
        "getState",
        "dispatch",
        "getState",
        "on",
        "getState",
        "state",
        "sessionDatas",
        "sd",
        "sd",
        "modeConstants",
        "sd",
        "statusConstants",
        "batch",
        "dispatch",
        "showNotification",
        "on",
        "NOTIFICATION_TIMEOUT_TYPE",
        "dispatch",
        "playSound",
        "on",
        "RECORDING_ON_SOUND_ID",
        "RECORDING_OFF_SOUND_ID",
        "on",
        "APP",
        "APP",
        "on"
    ],
    "literals": [
        "'react-redux'",
        "'../app/types'",
        "'../base/lib-jitsi-meet'",
        "'../base/redux/StateListenerRegistry'",
        "'../base/sounds/actions'",
        "'../notifications/actions'",
        "'../notifications/constants'",
        "'../recording/constants'",
        "'./functions'",
        "'dispatch'",
        "'getState'",
        "'features/recording'",
        "'recording.on'",
        "'recording.off'",
        "'dialog.recording'",
        "'undefined'"
    ],
    "variables": [
        "state",
        "modeConstants",
        "statusConstants",
        "JitsiRecordingConstants"
    ],
    "comments": [
        "selector",
        "listener",
        "If a recording is still ongoing, don't send any notification."
    ],
    "docstrings": [
        "* Listens for large video participant ID changes.",
        "* Emit a recording started / stopped notification if the transcription started / stopped. Only\n * if there is no recording in progress.\n *\n * @param {Dispatch} dispatch - The Redux dispatch function.\n * @param {Function} getState - The Redux state.\n * @param {boolean} on - Whether the transcription is on or not.\n *\n * @returns {void}",
        "* Notify external application (if API is enabled) that transcribing has started or stopped.\n *\n * @param {boolean} on - True if transcribing is on, false otherwise.\n * @returns {void}"
    ],
    "functions": [
        "maybeEmitRecordingNotification",
        "notifyTranscribingStatusChanged"
    ],
    "classes": []
}