{
    "identifiers": [
        "CommandLine",
        "Runtime",
        "InteropServices",
        "Microsoft",
        "Win32",
        "SafeHandles",
        "Windows",
        "Win32",
        "Windows",
        "Win32",
        "Devices",
        "DeviceAndDriverInstallation",
        "Windows",
        "Win32",
        "Foundation",
        "Windows",
        "Win32",
        "Security",
        "Windows",
        "Win32",
        "Services",
        "Usbipd",
        "ICommandHandlers",
        "SafeHandleZeroOrMinusOneIsInvalid",
        "SC_HANDLE",
        "handle",
        "SetHandle",
        "handle",
        "SC_HANDLE",
        "SafeScHandle",
        "scHandle",
        "scHandle",
        "IsClosed",
        "scHandle",
        "IsInvalid",
        "SC_HANDLE",
        "SC_HANDLE",
        "scHandle",
        "handle",
        "PInvoke",
        "CloseServiceHandle",
        "SC_HANDLE",
        "handle",
        "ExitCode",
        "ICommandHandlers",
        "IConsole",
        "CancellationToken",
        "cancellationToken",
        "ConsoleTools",
        "ReportInfo",
        "Path",
        "GetDirectoryName",
        "Environment",
        "ProcessPath",
        "ConsoleTools",
        "ReportInfo",
        "path",
        "ConsoleTools",
        "ReportInfo",
        "Path",
        "Combine",
        "path",
        "PInvoke",
        "SetupCopyOEMInf",
        "inf",
        "OEM_SOURCE_MEDIA_TYPE",
        "SPOST_PATH",
        "ReportError",
        "Marshal",
        "GetLastWin32Error",
        "FromResult",
        "ExitCode",
        "Failure",
        "ConsoleTools",
        "ReportInfo",
        "SafeScHandle",
        "PInvoke",
        "OpenSCManager",
        "Empty",
        "PInvoke",
        "SERVICES_ACTIVE_DATABASE",
        "PInvoke",
        "SC_MANAGER_ALL_ACCESS",
        "manager",
        "IsInvalid",
        "ReportError",
        "Marshal",
        "GetLastWin32Error",
        "FromResult",
        "ExitCode",
        "Failure",
        "SafeScHandle",
        "PInvoke",
        "CreateService",
        "manager",
        "GENERIC_ACCESS_RIGHTS",
        "GENERIC_ALL",
        "ENUM_SERVICE_TYPE",
        "SERVICE_KERNEL_DRIVER",
        "SERVICE_START_TYPE",
        "SERVICE_DEMAND_START",
        "SERVICE_ERROR",
        "SERVICE_ERROR_NORMAL",
        "Path",
        "Combine",
        "path",
        "service",
        "IsInvalid",
        "ReportError",
        "Marshal",
        "GetLastWin32Error",
        "FromResult",
        "ExitCode",
        "Failure",
        "FromResult",
        "ExitCode",
        "Success",
        "ExitCode",
        "ICommandHandlers",
        "IConsole",
        "CancellationToken",
        "cancellationToken",
        "ConsoleTools",
        "ReportInfo",
        "Path",
        "GetDirectoryName",
        "Environment",
        "ProcessPath",
        "ConsoleTools",
        "ReportInfo",
        "path",
        "ConsoleTools",
        "ReportInfo",
        "PInvoke",
        "DiUninstallDriver",
        "HWND",
        "Null",
        "Path",
        "Combine",
        "path",
        "needReboot",
        "ReportError",
        "Marshal",
        "GetLastWin32Error",
        "success",
        "FromResult",
        "success",
        "ExitCode",
        "Success",
        "ExitCode",
        "Failure"
    ],
    "literals": [
        "\"install helper\"",
        "\"Drivers\"",
        "\"VBoxUSB.inf\"",
        "\"VBoxUSBMon\"",
        "\"VirtualBox USB Monitor Service\"",
        "\"Drivers\"",
        "\"VBoxUSBMon.sys\"",
        "\"Drivers\"",
        "\"VBoxUSB.inf\""
    ],
    "variables": [
        "path",
        "inf",
        "manager",
        "service",
        "path",
        "success",
        "BOOL",
        "needReboot"
    ],
    "comments": [
        "SPDX-FileCopyrightText: 2024 Frans van Dorsselaer",
        "",
        "SPDX-License-Identifier: GPL-3.0-only",
        "See: https://learn.microsoft.com/en-us/windows-hardware/drivers/install/preinstalling-driver-packages",
        "NOTE: This cannot be done from WiX, since WiX cannot create SERVICE_KERNEL_DRIVER; removal from WiX works though.",
        "continue",
        "ignore needReboot"
    ],
    "docstrings": [],
    "functions": [
        "SafeScHandle",
        "ReleaseHandle",
        "Install",
        "Uninstall"
    ],
    "classes": [
        "CommandHandlers",
        "SafeScHandle"
    ]
}