{
    "identifiers": [
        "math",
        "torch",
        "argparse",
        "torchaudio",
        "torch",
        "nn",
        "functional",
        "F",
        "torch",
        "nn",
        "torch",
        "Tensor",
        "typing",
        "Tuple",
        "df",
        "init_df",
        "functools",
        "partial",
        "typing",
        "Tuple",
        "torch",
        "torch",
        "Tensor",
        "nn",
        "torch",
        "nn",
        "functional",
        "F",
        "loguru",
        "logger",
        "df",
        "config",
        "Csv",
        "DfParams",
        "config",
        "df",
        "modules",
        "Conv2dNormAct",
        "SqueezedGRU_S",
        "typing_extensions",
        "Final",
        "torch",
        "nn",
        "parameter",
        "Parameter",
        "torch",
        "nn",
        "init",
        "nn",
        "Module",
        "Final",
        "Final",
        "Final",
        "input_size",
        "hidden_size",
        "groups",
        "input_size",
        "hidden_size",
        "groups",
        "input_size",
        "groups",
        "input_size",
        "groups",
        "hidden_size",
        "groups",
        "hidden_size",
        "groups",
        "input_size",
        "groups",
        "register_parameter",
        "Parameter",
        "torch",
        "zeros",
        "groups",
        "input_size",
        "groups",
        "hidden_size",
        "groups",
        "requires_grad",
        "reset_parameters",
        "init",
        "kaiming_uniform_",
        "weight",
        "a",
        "math",
        "sqrt",
        "x",
        "Tensor",
        "Tensor",
        "x",
        "reshape",
        "groups",
        "ws",
        "torch",
        "matmul",
        "x",
        "weight",
        "x",
        "view",
        "__class__",
        "cls",
        "input_size",
        "hidden_size",
        "groups",
        "DfParams",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "cast",
        "Csv",
        "section",
        "section",
        "config",
        "cast",
        "Csv",
        "section",
        "section",
        "config",
        "cast",
        "Csv",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "section",
        "section",
        "config",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "config",
        "cast",
        "section",
        "section",
        "nn",
        "Module",
        "a",
        "b",
        "a",
        "b",
        "nn",
        "Module",
        "a",
        "b",
        "torch",
        "cat",
        "a",
        "b",
        "dim",
        "nn",
        "Module",
        "ModelParams",
        "p",
        "nb_erb",
        "Conv2dNormAct",
        "p",
        "conv_ch",
        "kernel_size",
        "p",
        "conv_kernel_inp",
        "bias",
        "separable",
        "p",
        "conv_kernel_inp",
        "p",
        "conv_ch",
        "partial",
        "Conv2dNormAct",
        "in_ch",
        "p",
        "conv_ch",
        "out_ch",
        "p",
        "conv_ch",
        "kernel_size",
        "p",
        "conv_kernel",
        "bias",
        "separable",
        "conv_layer",
        "fstride",
        "conv_layer",
        "fstride",
        "conv_layer",
        "fstride",
        "p",
        "conv_ch",
        "Conv2dNormAct",
        "df_conv0_ch",
        "kernel_size",
        "p",
        "conv_kernel_inp",
        "bias",
        "separable",
        "conv_layer",
        "fstride",
        "p",
        "nb_erb",
        "p",
        "conv_ch",
        "p",
        "nb_erb",
        "p",
        "emb_hidden_dim",
        "p",
        "conv_ch",
        "p",
        "nb_erb",
        "GroupedLinearEinsum",
        "p",
        "conv_ch",
        "p",
        "nb_df",
        "emb_in_dim",
        "groups",
        "p",
        "enc_lin_groups",
        "nn",
        "Sequential",
        "df_fc_emb",
        "nn",
        "ReLU",
        "inplace",
        "p",
        "enc_concat",
        "emb_in_dim",
        "Concat",
        "Add",
        "p",
        "emb_num_layers",
        "p",
        "emb_gru_skip_enc",
        "p",
        "emb_gru_skip_enc",
        "emb_in_dim",
        "emb_out_dim",
        "partial",
        "nn",
        "Identity",
        "p",
        "emb_gru_skip_enc",
        "partial",
        "GroupedLinearEinsum",
        "input_size",
        "emb_out_dim",
        "hidden_size",
        "emb_out_dim",
        "groups",
        "p",
        "lin_groups",
        "NotImplementedError",
        "SqueezedGRU_S",
        "emb_in_dim",
        "emb_dim",
        "output_size",
        "emb_out_dim",
        "num_layers",
        "batch_first",
        "gru_skip_op",
        "skip_op",
        "linear_groups",
        "p",
        "lin_groups",
        "linear_act_layer",
        "partial",
        "nn",
        "ReLU",
        "inplace",
        "nn",
        "Sequential",
        "nn",
        "Linear",
        "emb_out_dim",
        "nn",
        "Sigmoid",
        "p",
        "lsnr_max",
        "p",
        "lsnr_min",
        "p",
        "lsnr_min",
        "feat_erb",
        "Tensor",
        "feat_spec",
        "Tensor",
        "hidden",
        "Tensor",
        "Tuple",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "erb_conv0",
        "feat_erb",
        "erb_conv1",
        "e0",
        "erb_conv2",
        "e1",
        "erb_conv3",
        "e2",
        "df_conv0",
        "feat_spec",
        "df_conv1",
        "c0",
        "c1",
        "permute",
        "flatten",
        "df_fc_emb",
        "cemb",
        "e3",
        "permute",
        "flatten",
        "combine",
        "emb",
        "cemb",
        "emb_gru",
        "emb",
        "hidden",
        "lsnr_fc",
        "emb",
        "lsnr_scale",
        "lsnr_offset",
        "e0",
        "e1",
        "e2",
        "e3",
        "emb",
        "c0",
        "lsnr",
        "hidden",
        "nn",
        "Module",
        "fft_size",
        "hop_size",
        "nb_bands",
        "enc",
        "df_dec",
        "erb_dec",
        "df_order",
        "lookahead",
        "conv_lookahead",
        "nb_df",
        "alpha",
        "min_db_thresh",
        "max_db_erb_thresh",
        "max_db_df_thresh",
        "normalize_atten_lim",
        "silence_thresh",
        "sr",
        "torch",
        "tensor",
        "fft_size",
        "dtype",
        "torch",
        "float32",
        "hop_size",
        "fft_size",
        "fft_size",
        "fft_size",
        "window_size",
        "frame_size",
        "df_order",
        "lookahead",
        "sr",
        "torch",
        "sin",
        "torch",
        "pi",
        "torch",
        "arange",
        "fft_size",
        "window_size_h",
        "torch",
        "sin",
        "torch",
        "pi",
        "register_buffer",
        "nb_df",
        "torch",
        "tensor",
        "nb_bands",
        "register_buffer",
        "erb_fb",
        "erb_indices",
        "normalized",
        "inverse",
        "register_buffer",
        "erb_fb",
        "erb_indices",
        "normalized",
        "inverse",
        "Encoder",
        "enc",
        "load_state_dict",
        "enc",
        "state_dict",
        "enc",
        "eval",
        "enc",
        "remove_conv_block_padding",
        "enc",
        "erb_conv0",
        "enc",
        "remove_conv_block_padding",
        "enc",
        "df_conv0",
        "df_dec",
        "df_dec",
        "remove_conv_block_padding",
        "df_dec",
        "df_convp",
        "erb_dec",
        "alpha",
        "register_buffer",
        "torch",
        "view_as_real",
        "torch",
        "fft",
        "rfft",
        "torch",
        "eye",
        "window_size",
        "transpose",
        "register_buffer",
        "torch",
        "linalg",
        "pinv",
        "rfft_matrix",
        "register_buffer",
        "torch",
        "tensor",
        "min_db_thresh",
        "register_buffer",
        "torch",
        "tensor",
        "max_db_erb_thresh",
        "register_buffer",
        "torch",
        "tensor",
        "max_db_df_thresh",
        "torch",
        "tensor",
        "normalize_atten_lim",
        "torch",
        "tensor",
        "silence_thresh",
        "nb_bands",
        "nb_df",
        "frame_size",
        "frame_size",
        "conv_lookahead",
        "nb_bands",
        "conv_lookahead",
        "nb_df",
        "enc",
        "df_conv0_ch",
        "df_order",
        "nb_df",
        "max",
        "df_order",
        "conv_lookahead",
        "freq_size",
        "df_order",
        "conv_lookahead",
        "freq_size",
        "enc",
        "emb_dim",
        "erb_dec",
        "emb_dim",
        "df_dec",
        "emb_dim",
        "erb_norm_state_shape",
        "band_unit_norm_state_shape",
        "analysis_mem_shape",
        "synthesis_mem_shape",
        "rolling_erb_buf_shape",
        "rolling_feat_spec_buf_shape",
        "rolling_c0_buf_shape",
        "rolling_spec_buf_x_shape",
        "rolling_spec_buf_y_shape",
        "enc_hidden_shape",
        "erb_dec_hidden_shape",
        "df_dec_hidden_shape",
        "math",
        "prod",
        "x",
        "x",
        "state_shapes",
        "sum",
        "state_lens",
        "register_buffer",
        "torch",
        "zeros",
        "nb_bands",
        "register_buffer",
        "torch",
        "zeros",
        "rolling_c0_buf_shape",
        "nb_df",
        "staticmethod",
        "original_conv",
        "nn",
        "Module",
        "nn",
        "Module",
        "original_conv",
        "isinstance",
        "nn",
        "ConstantPad2d",
        "new_modules",
        "append",
        "nn",
        "Sequential",
        "new_modules",
        "widths",
        "Tensor",
        "normalized",
        "inverse",
        "Tensor",
        "torch",
        "sum",
        "widths",
        "torch",
        "linspace",
        "sr",
        "n_freqs",
        "torch",
        "cumsum",
        "torch",
        "cat",
        "torch",
        "tensor",
        "widths",
        "dtype",
        "torch",
        "int32",
        "dim",
        "torch",
        "zeros",
        "all_freqs",
        "shape",
        "b_pts",
        "shape",
        "i",
        "b",
        "w",
        "b_pts",
        "tolist",
        "widths",
        "tolist",
        "b",
        "b",
        "w",
        "inverse",
        "fb",
        "t",
        "normalized",
        "fb",
        "fb",
        "sum",
        "dim",
        "keepdim",
        "normalized",
        "fb",
        "fb",
        "sum",
        "dim",
        "fb",
        "staticmethod",
        "t1",
        "t2",
        "t1",
        "t1",
        "t2",
        "t2",
        "torch",
        "stack",
        "t1_real",
        "t2_real",
        "t1_imag",
        "t2_imag",
        "t1_real",
        "t2_imag",
        "t1_imag",
        "t2_real",
        "dim",
        "input_data",
        "Tensor",
        "erb_eps",
        "Tensor",
        "torch",
        "sum",
        "input_data",
        "dim",
        "magnitude_squared",
        "matmul",
        "forward_erb_matrix",
        "torch",
        "log10",
        "erb_features",
        "erb_eps",
        "erb_features_db",
        "staticmethod",
        "xs",
        "Tensor",
        "erb_norm_state",
        "Tensor",
        "alpha",
        "denominator",
        "Tuple",
        "Tensor",
        "Tensor",
        "torch",
        "lerp",
        "xs",
        "erb_norm_state",
        "alpha",
        "xs",
        "new_erb_norm_state",
        "denominator",
        "output",
        "new_erb_norm_state",
        "staticmethod",
        "xs",
        "Tensor",
        "band_unit_norm_state",
        "alpha",
        "Tuple",
        "Tensor",
        "Tensor",
        "torch",
        "linalg",
        "norm",
        "xs",
        "dim",
        "keepdim",
        "torch",
        "lerp",
        "xs_abs",
        "band_unit_norm_state",
        "alpha",
        "xs",
        "new_band_unit_norm_state",
        "sqrt",
        "output",
        "new_band_unit_norm_state",
        "input_frame",
        "Tensor",
        "analysis_mem",
        "Tensor",
        "Tuple",
        "Tensor",
        "Tensor",
        "torch",
        "cat",
        "analysis_mem",
        "input_frame",
        "torch",
        "view_as_real",
        "torch",
        "fft",
        "rfft",
        "buf",
        "wnorm",
        "rfft_buf",
        "input_frame",
        "x",
        "Tensor",
        "synthesis_mem",
        "Tensor",
        "Tuple",
        "Tensor",
        "Tensor",
        "torch",
        "einsum",
        "x",
        "irfft_matrix",
        "fft_size",
        "torch",
        "split",
        "x",
        "frame_size",
        "window_size",
        "frame_size",
        "x_first",
        "synthesis_mem",
        "output",
        "x_second",
        "view",
        "window_size",
        "frame_size",
        "spec",
        "Tensor",
        "gains",
        "Tensor",
        "Tensor",
        "gains",
        "matmul",
        "inverse_erb_matrix",
        "spec",
        "gains",
        "unsqueeze",
        "spec",
        "gain_spec",
        "Tensor",
        "coefs",
        "Tensor",
        "rolling_spec_buf_x",
        "Tensor",
        "Tensor",
        "rolling_spec_buf_x",
        "nb_df",
        "mul_complex",
        "stacked_input_specs",
        "coefs",
        "nb_df",
        "torch",
        "sum",
        "mult",
        "dim",
        "gain_spec",
        "states",
        "Tensor",
        "Tuple",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "Tensor",
        "torch",
        "split",
        "states",
        "state_lens",
        "splitted_states",
        "view",
        "erb_norm_state_shape",
        "splitted_states",
        "view",
        "band_unit_norm_state_shape",
        "splitted_states",
        "view",
        "analysis_mem_shape",
        "splitted_states",
        "view",
        "synthesis_mem_shape",
        "splitted_states",
        "view",
        "rolling_erb_buf_shape",
        "splitted_states",
        "view",
        "rolling_feat_spec_buf_shape",
        "splitted_states",
        "view",
        "rolling_c0_buf_shape",
        "splitted_states",
        "view",
        "rolling_spec_buf_x_shape",
        "splitted_states",
        "view",
        "rolling_spec_buf_y_shape",
        "splitted_states",
        "view",
        "enc_hidden_shape",
        "splitted_states",
        "view",
        "erb_dec_hidden_shape",
        "splitted_states",
        "view",
        "df_dec_hidden_shape",
        "torch",
        "linspace",
        "linspace_erb",
        "linspace_erb",
        "nb_bands",
        "device",
        "erb_norm_state",
        "device",
        "view",
        "erb_norm_state_shape",
        "to",
        "torch",
        "float32",
        "torch",
        "linspace",
        "linspace_df",
        "linspace_df",
        "nb_df",
        "device",
        "band_unit_norm_state",
        "device",
        "view",
        "band_unit_norm_state_shape",
        "to",
        "torch",
        "float32",
        "torch",
        "where",
        "torch",
        "tensor",
        "torch",
        "nonzero",
        "erb_norm_state",
        "shape",
        "new_erb_norm_state",
        "erb_norm_state",
        "torch",
        "where",
        "torch",
        "tensor",
        "torch",
        "nonzero",
        "band_unit_norm_state",
        "shape",
        "new_band_unit_norm_state",
        "band_unit_norm_state",
        "erb_norm_state",
        "band_unit_norm_state",
        "analysis_mem",
        "synthesis_mem",
        "rolling_erb_buf",
        "rolling_feat_spec_buf",
        "rolling_c0_buf",
        "rolling_spec_buf_x",
        "rolling_spec_buf_y",
        "enc_hidden",
        "erb_dec_hidden",
        "df_dec_hidden",
        "input_frame",
        "Tensor",
        "states",
        "Tensor",
        "Tuple",
        "Tensor",
        "Tensor",
        "Tensor",
        "input_frame",
        "ndim",
        "input_frame",
        "shape",
        "frame_size",
        "unpack_states",
        "states",
        "frame_analysis",
        "input_frame",
        "analysis_mem",
        "spectrogram",
        "unsqueeze",
        "torch",
        "cat",
        "rolling_spec_buf_x",
        "spectrogram",
        "torch",
        "cat",
        "rolling_spec_buf_y",
        "spectrogram",
        "band_mean_norm_erb",
        "erb",
        "spectrogram",
        "squeeze",
        "erb_norm_state",
        "alpha",
        "alpha",
        "band_unit_norm",
        "spectrogram",
        "nb_df",
        "band_unit_norm_state",
        "alpha",
        "alpha",
        "erb_feat",
        "spec_feat",
        "permute",
        "torch",
        "cat",
        "rolling_erb_buf",
        "erb_feat",
        "dim",
        "torch",
        "cat",
        "rolling_feat_spec_buf",
        "spec_feat",
        "dim",
        "enc",
        "new_rolling_erb_buf",
        "new_rolling_feat_spec_buf",
        "enc_hidden",
        "lsnr",
        "flatten",
        "erb_dec",
        "emb",
        "e3",
        "e2",
        "e1",
        "e0",
        "erb_dec_hidden",
        "new_gains",
        "view",
        "nb_bands",
        "torch",
        "cat",
        "rolling_c0_buf",
        "c0",
        "dim",
        "df_dec",
        "emb",
        "new_rolling_c0_buf",
        "df_dec_hidden",
        "new_coefs",
        "view",
        "nb_df",
        "permute",
        "new_rolling_spec_buf_y",
        "df_order",
        "apply_mask",
        "current_spec",
        "clone",
        "gains",
        "deep_filter",
        "current_spec",
        "clone",
        "coefs",
        "new_rolling_spec_buf_x",
        "frame_synthesis",
        "current_spec",
        "synthesis_mem",
        "new_erb_norm_state",
        "new_band_unit_norm_state",
        "new_analysis_mem",
        "new_synthesis_mem",
        "new_rolling_erb_buf",
        "new_rolling_feat_spec_buf",
        "new_rolling_c0_buf",
        "new_rolling_spec_buf_x",
        "new_rolling_spec_buf_y",
        "new_enc_hidden",
        "new_erb_dec_hidden",
        "new_df_dec_hidden",
        "torch",
        "cat",
        "x",
        "flatten",
        "x",
        "new_states",
        "enhanced_audio_frame",
        "new_states",
        "lsnr",
        "nn",
        "Module",
        "nb_bands",
        "hop_size",
        "fft_size",
        "df_order",
        "conv_lookahead",
        "nb_df",
        "model_base_dir",
        "device",
        "hop_size",
        "fft_size",
        "init_df",
        "config_allow_defaults",
        "model_base_dir",
        "model_base_dir",
        "model",
        "eval",
        "state",
        "sr",
        "ExportableStreamingMinimalTorchDF",
        "nb_bands",
        "nb_bands",
        "hop_size",
        "hop_size",
        "fft_size",
        "fft_size",
        "enc",
        "model",
        "enc",
        "df_dec",
        "model",
        "df_dec",
        "erb_dec",
        "model",
        "erb_dec",
        "df_order",
        "df_order",
        "conv_lookahead",
        "conv_lookahead",
        "nb_df",
        "nb_df",
        "sr",
        "sample_rate",
        "torch_streaming_model",
        "to",
        "device",
        "torch",
        "zeros",
        "torch_streaming_model",
        "states_full_len",
        "device",
        "device",
        "input_audio",
        "Tensor",
        "sample_rate",
        "Tensor",
        "input_audio",
        "shape",
        "input_audio",
        "shape",
        "sample_rate",
        "sample_rate",
        "sample_rate",
        "sample_rate",
        "input_audio",
        "squeeze",
        "input_audio",
        "shape",
        "hop_size",
        "orig_len",
        "hop_size",
        "hop_size",
        "orig_len",
        "hop_size_divisible_padding_size",
        "F",
        "pad",
        "input_audio",
        "fft_size",
        "hop_size_divisible_padding_size",
        "torch",
        "split",
        "input_audio",
        "hop_size",
        "input_frame",
        "chunked_audio",
        "states",
        "torch_streaming_model",
        "input_frame",
        "states",
        "output_frames",
        "append",
        "enhanced_audio_frame",
        "torch",
        "cat",
        "output_frames",
        "unsqueeze",
        "fft_size",
        "hop_size",
        "enhanced_audio",
        "d",
        "orig_len",
        "d",
        "enhanced_audio",
        "args",
        "torch",
        "set_num_threads",
        "torch",
        "set_num_interop_threads",
        "TorchDFMinimalPipeline",
        "device",
        "args",
        "device",
        "torchaudio",
        "load",
        "args",
        "audio_path",
        "channels_first",
        "noisy_audio",
        "mean",
        "dim",
        "unsqueeze",
        "to",
        "args",
        "device",
        "torch_df",
        "noisy_audio",
        "sr",
        "detach",
        "cpu",
        "torchaudio",
        "save",
        "args",
        "output_path",
        "enhanced_audio",
        "sr",
        "encoding",
        "bits_per_sample",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "choices",
        "help",
        "main",
        "parser",
        "parse_args"
    ],
    "literals": [
        "f\"Input size {input_size} not divisible by {groups}\"",
        "f\"Hidden size {hidden_size} not divisible by {groups}\"",
        "\"weight\"",
        "f\"{cls}(input_size: {self.input_size}, hidden_size: {self.hidden_size}, groups: {self.groups})\"",
        "\"deepfilternet\"",
        "\"CONV_LOOKAHEAD\"",
        "\"CONV_CH\"",
        "\"CONV_DEPTHWISE\"",
        "\"CONVT_DEPTHWISE\"",
        "\"CONV_KERNEL\"",
        "\"CONVT_KERNEL\"",
        "\"CONV_KERNEL_INP\"",
        "\"EMB_HIDDEN_DIM\"",
        "\"EMB_NUM_LAYERS\"",
        "\"EMB_GRU_SKIP_ENC\"",
        "\"none\"",
        "\"EMB_GRU_SKIP\"",
        "\"none\"",
        "\"DF_HIDDEN_DIM\"",
        "\"DF_GRU_SKIP\"",
        "\"none\"",
        "\"DF_PATHWAY_KERNEL_SIZE_T\"",
        "\"ENC_CONCAT\"",
        "\"DF_NUM_LAYERS\"",
        "\"DF_N_ITER\"",
        "\"LINEAR_GROUPS\"",
        "\"ENC_LINEAR_GROUPS\"",
        "\"MASK_PF\"",
        "\"LSNR_DROPOUT\"",
        "\"erb_bins should be divisible by 4\"",
        "\"none\"",
        "\"identity\"",
        "\"Dimensions do not match\"",
        "\"groupedlinear\"",
        "\"window\"",
        "\"forward_erb_matrix\"",
        "\"inverse_erb_matrix\"",
        "\"rfft_matrix\"",
        "\"irfft_matrix\"",
        "\"min_db_thresh\"",
        "\"max_db_erb_thresh\"",
        "\"max_db_df_thresh\"",
        "\"zero_gains\"",
        "\"zero_coefs\"",
        "\"fi,fij->j\"",
        "\"only bs=1 and t=frame_size supported\"",
        "\"input_frame must be bs=1 and t=frame_size\"",
        "\"DeepFilterNet3\"",
        "\"cpu\"",
        "f\"Only mono supported! Got wrong shape! {input_audio.shape}\"",
        "f\"Only {self.sample_rate} supported! Got wrong sample rate! {sample_rate}\"",
        "\"PCM_S\"",
        "\"__main__\"",
        "\"Denoising one audio with DF3 model using torch only\"",
        "\"--audio-path\"",
        "\"Path to audio file\"",
        "\"--output-path\"",
        "\"Path to output file\"",
        "\"--device\"",
        "\"cpu\"",
        "\"cuda\"",
        "\"cpu\"",
        "\"Device to run on\""
    ],
    "variables": [
        "input_size",
        "hidden_size",
        "groups",
        "input_size",
        "hidden_size",
        "groups",
        "ws",
        "x",
        "x",
        "cls",
        "section",
        "conv_lookahead",
        "conv_ch",
        "conv_depthwise",
        "convt_depthwise",
        "conv_kernel",
        "convt_kernel",
        "conv_kernel_inp",
        "emb_hidden_dim",
        "emb_num_layers",
        "emb_gru_skip_enc",
        "emb_gru_skip",
        "df_hidden_dim",
        "df_gru_skip",
        "df_pathway_kernel_size_t",
        "enc_concat",
        "df_num_layers",
        "df_n_iter",
        "lin_groups",
        "enc_lin_groups",
        "mask_pf",
        "lsnr_dropout",
        "p",
        "erb_conv0",
        "conv_buffer_size",
        "conv_ch",
        "conv_layer",
        "erb_conv1",
        "erb_conv2",
        "erb_conv3",
        "df_conv0_ch",
        "df_conv0",
        "df_conv1",
        "erb_bins",
        "emb_in_dim",
        "emb_dim",
        "emb_out_dim",
        "df_fc_emb",
        "df_fc_emb",
        "combine",
        "combine",
        "emb_n_layers",
        "skip_op",
        "skip_op",
        "skip_op",
        "emb_gru",
        "lsnr_fc",
        "lsnr_scale",
        "lsnr_offset",
        "e0",
        "e1",
        "e2",
        "e3",
        "c0",
        "c1",
        "cemb",
        "cemb",
        "emb",
        "emb",
        "emb",
        "hidden",
        "lsnr",
        "fft_size",
        "frame_size",
        "window_size",
        "window_size_h",
        "freq_size",
        "wnorm",
        "df_order",
        "lookahead",
        "sr",
        "nb_df",
        "erb_indices",
        "nb_bands",
        "enc",
        "erb_conv0",
        "df_conv0",
        "df_dec",
        "df_convp",
        "erb_dec",
        "alpha",
        "normalize_atten_lim",
        "silence_thresh",
        "linspace_erb",
        "linspace_df",
        "erb_norm_state_shape",
        "band_unit_norm_state_shape",
        "analysis_mem_shape",
        "synthesis_mem_shape",
        "rolling_erb_buf_shape",
        "rolling_feat_spec_buf_shape",
        "rolling_c0_buf_shape",
        "rolling_spec_buf_x_shape",
        "rolling_spec_buf_y_shape",
        "enc_hidden_shape",
        "erb_dec_hidden_shape",
        "df_dec_hidden_shape",
        "state_shapes",
        "state_lens",
        "states_full_len",
        "new_modules",
        "n_freqs",
        "all_freqs",
        "b_pts",
        "fb",
        "fb",
        "i",
        "fb",
        "t1_real",
        "t1_imag",
        "t2_real",
        "t2_imag",
        "magnitude_squared",
        "erb_features",
        "erb_features_db",
        "new_erb_norm_state",
        "output",
        "xs_abs",
        "new_band_unit_norm_state",
        "output",
        "buf",
        "rfft_buf",
        "x",
        "x_first",
        "x_second",
        "output",
        "gains",
        "spec",
        "stacked_input_specs",
        "mult",
        "gain_spec",
        "splitted_states",
        "erb_norm_state",
        "band_unit_norm_state",
        "analysis_mem",
        "synthesis_mem",
        "rolling_erb_buf",
        "rolling_feat_spec_buf",
        "rolling_c0_buf",
        "rolling_spec_buf_x",
        "rolling_spec_buf_y",
        "enc_hidden",
        "erb_dec_hidden",
        "df_dec_hidden",
        "new_erb_norm_state",
        "new_band_unit_norm_state",
        "erb_norm_state",
        "band_unit_norm_state",
        "erb_norm_state",
        "band_unit_norm_state",
        "analysis_mem",
        "synthesis_mem",
        "rolling_erb_buf",
        "rolling_feat_spec_buf",
        "rolling_c0_buf",
        "rolling_spec_buf_x",
        "rolling_spec_buf_y",
        "enc_hidden",
        "erb_dec_hidden",
        "df_dec_hidden",
        "spectrogram",
        "new_analysis_mem",
        "spectrogram",
        "new_rolling_spec_buf_x",
        "new_rolling_spec_buf_y",
        "erb_feat",
        "new_erb_norm_state",
        "spec_feat",
        "new_band_unit_norm_state",
        "erb_feat",
        "spec_feat",
        "new_rolling_erb_buf",
        "new_rolling_feat_spec_buf",
        "e0",
        "e1",
        "e2",
        "e3",
        "emb",
        "c0",
        "lsnr",
        "new_enc_hidden",
        "lsnr",
        "new_gains",
        "new_erb_dec_hidden",
        "gains",
        "new_rolling_c0_buf",
        "new_coefs",
        "new_df_dec_hidden",
        "coefs",
        "current_spec",
        "current_spec",
        "current_spec",
        "enhanced_audio_frame",
        "new_synthesis_mem",
        "new_states",
        "new_states",
        "hop_size",
        "fft_size",
        "model",
        "state",
        "_",
        "sample_rate",
        "torch_streaming_model",
        "torch_streaming_model",
        "states",
        "input_audio",
        "orig_len",
        "hop_size_divisible_padding_size",
        "input_audio",
        "chunked_audio",
        "output_frames",
        "enhanced_audio_frame",
        "lsnr",
        "enhanced_audio",
        "d",
        "enhanced_audio",
        "torch_df",
        "noisy_audio",
        "sr",
        "noisy_audio",
        "enhanced_audio",
        "parser"
    ],
    "comments": [
        "self.weight: Tensor",
        "type: ignore",
        "type: ignore",
        "type: ignore",
        "type: ignore",
        "Encodes erb; erb should be in dB scale + normalized; Fe are number of erb bands.",
        "erb: [B, 1, T, Fe]",
        "spec: [B, 2, T, Fc]",
        "b, _, t, _ = feat_erb.shape",
        "[B, C, T, F]",
        "[B, C*2, T, F/2]",
        "[B, C*4, T, F/4]",
        "[B, C*4, T, F/4]",
        "[B, C, T, Fc]",
        "[B, C*2, T, Fc/2]",
        "[B, T, -1]",
        "[T, B, C * F/4]",
        "[B, T, C * F]",
        "[B, T, -1]",
        "All complex numbers are stored as floats for ONNX compatibility",
        "dimension \"f\" in Float[f]",
        "dimension \"F\" in Float[F]",
        "Initialize the vorbis window: sin(pi/2*sin^2(pi*n/N))",
        "Initializing erb features",
        "Model",
        "Instead of padding we put tensor with buffers into encoder",
        "I didn't checked receptived fields of convolution, but equallity tests are working",
        "Instead of padding we put tensor with buffers into df_decoder",
        "End Model",
        "RFFT",
        "FFT operations are performed as matmuls for ONNX compatability",
        "Thresholds",
        "[bs=1, nb_df, mean of complex value = 1]",
        "[B, 1, conv kernel size, nb_bands]",
        "[B, 2 - complex, conv kernel size, nb_df]",
        "[B, conv hidden, df_order, nb_df]",
        "[number of specs to save, ...]",
        "[number of specs to save, ...]",
        "[n_layers=1, batch_size=1, emb_dim]",
        "[n_layers=2, batch_size=1, emb_dim]",
        "[n_layers=2, batch_size=1, emb_dim]",
        "States",
        "Zero buffers",
        "Normalize to constant energy per resulting band",
        "xs.abs() from complex",
        "First part of the window on the previous frame",
        "Second part of the window on the new input frame",
        "rfft_buf = torch.matmul(buf, self.rfft_matrix) * self.wnorm",
        "Copy input to analysis_mem for next iteration",
        "x - [F=481, 2]",
        "self.irfft_matrix - [fft_size=481, 2, f=960]",
        "[f=960]",
        "x = torch.fft.irfft(torch.view_as_complex(x)) * self.fft_size * self.window",
        "float() to fix export issue",
        "float() to fix export issue",
        "[1, freq_size, 2] reshape needed for easier stacking buffers",
        "[n_frames=5, 481, 2]",
        "rolling_spec_buf_y - [n_frames=7, 481, 2] n_frames=7 for compatability with original code, but in code we use only one frame",
        "[ERB]",
        "[1, DF, 2]",
        "[b=1, conv_input_dim=1, t=1, n_erb=32]",
        "[bs=1, conv_input_dim=2, t=1, df_order=96]",
        "(1, 1, T, self.nb_bands)",
        "(1, 2, T, self.nb_df)",
        "[b=1, t=1, 1] -> 1",
        "erb_dec",
        "[BS=1, 1, T=1, ERB]",
        "df_dec",
        "new_coefs - [BS=1, T=1, F, O*2]",
        "Applying features",
        "padding taken from",
        "https://github.com/Rikorose/DeepFilterNet/blob/fa926662facea33657c255fd1f3a083ddc696220/DeepFilterNet/df/enhance.py#L229",
        "[t] -> [1, t] typical mono format",
        "taken from",
        "https://github.com/Rikorose/DeepFilterNet/blob/fa926662facea33657c255fd1f3a083ddc696220/DeepFilterNet/df/enhance.py#L248",
        "torchaudio normalize=True, fp32 return",
        "stereo to mono"
    ],
    "docstrings": [
        "\"\"\"\nONNX exportable classes\n\"\"\"",
        "\"\"\"\n        Remove paddings for convolutions in the original model\n\n        Parameters:\n            original_conv:  nn.Module - original convolution module\n\n        Returns:\n            output:         nn.Module - new convolution module without paddings\n        \"\"\"",
        "\"\"\"\n        Generate the erb filterbank\n        Taken from https://github.com/Rikorose/DeepFilterNet/blob/fa926662facea33657c255fd1f3a083ddc696220/DeepFilterNet/df/modules.py#L206\n        Numpy removed from original code\n\n        Parameters:\n            widths:     Tensor - widths of the erb bands\n            normalized: bool - normalize to constant energy per band\n            inverse:    bool - inverse erb filterbank\n\n        Returns:\n            fb:         Tensor - erb filterbank\n        \"\"\"",
        "\"\"\"\n        Compute multiplication of two complex numbers in view_as_real format.\n\n        Parameters:\n            t1:         Float[F, 2] - First number\n            t2:         Float[F, 2] - Second number\n\n        Returns:\n            output:     Float[F, 2] - final multiplication of two complex numbers\n        \"\"\"",
        "\"\"\"\n        Original code - pyDF/src/lib.rs - erb()\n        Calculating ERB features for each frame.\n\n        Parameters:\n            input_data:     Float[T, F] or Float[F] - audio spectrogram\n\n        Returns:\n            erb_features:   Float[T, ERB] or Float[ERB] - erb features for given spectrogram\n        \"\"\"",
        "\"\"\"\n        Original code - libDF/src/lib.rs - band_mean_norm()\n        Normalizing ERB features. And updates the normalization state.\n\n        Parameters:\n            xs:             Float[ERB] - erb features\n            erb_norm_state: Float[ERB] - normalization state from previous step\n            alpha:          float - alpha value which is needed for adaptation of the normalization state for given scale.\n            denominator:    float - denominator for normalization\n\n        Returns:\n            output:         Float[ERB] - normalized erb features\n            erb_norm_state: Float[ERB] - updated normalization state\n        \"\"\"",
        "\"\"\"\n        Original code - libDF/src/lib.rs - band_unit_norm()\n        Normalizing Deep Filtering features. And updates the normalization state.\n\n        Parameters:\n            xs:                     Float[1, DF, 2] - deep filtering features\n            band_unit_norm_state:   Float[1, DF, 1] - normalization state from previous step\n            alpha:                  float - alpha value which is needed for adaptation of the normalization state for given scale.\n\n        Returns:\n            output:                 Float[1, DF] - normalized deep filtering features\n            band_unit_norm_state:   Float[1, DF, 1] - updated normalization state\n        \"\"\"",
        "\"\"\"\n        Original code - libDF/src/lib.rs - frame_analysis()\n        Calculating spectrograme for one frame. Every frame is concated with buffer from previous frame.\n\n        Parameters:\n            input_frame:    Float[f] - Input raw audio frame\n            analysis_mem:   Float[f] - Previous frame\n\n        Returns:\n            output:         Float[F, 2] - Spectrogram\n            analysis_mem:   Float[f] - Saving current frame for next iteration\n        \"\"\"",
        "\"\"\"\n        Original code - libDF/src/lib.rs - frame_synthesis()\n        Inverse rfft for one frame. Every frame is summarized with buffer from previous frame.\n        And saving buffer for next frame.\n\n        Parameters:\n            x:     Float[F, 2] - Enhanced audio spectrogram\n            synthesis_mem:  Float[f] - Previous synthesis frame\n\n        Returns:\n            output:         Float[f] - Enhanced audio\n            synthesis_mem:  Float[f] - Saving current frame\n        \"\"\"",
        "\"\"\"\n        Original code - libDF/src/lib.rs - apply_interp_band_gain()\n\n        Applying ERB Gains for input spectrogram\n\n        Parameters:\n            spec:   Float[F, 2] - Input frame spectrogram\n            gains:  Float[ERB] - ERB gains from erb decoder\n\n        Returns:\n            spec:   Float[F] - Spectrogram with applyed ERB gains\n        \"\"\"",
        "\"\"\"\n        Original code - libDF/src/tract.rs - df()\n\n        Applying Deep Filtering to gained spectrogram by multiplying coefs to rolling_buffer_x (spectrograms from past / future).\n        Deep Filtering replacing lower self.nb_df spec bands.\n\n        Parameters:\n            gain_spec:              Float[F, 2] - spectrogram after ERB gains applied\n            coefs:                  Float[DF, BUF, 2] - coefficients for deep filtering from df decoder\n            rolling_spec_buf_x:     Float[buffer_size, F, 2] - spectrograms from past / future\n\n        Returns:\n            gain_spec:              Float[F, 2] - spectrogram after deep filtering\n        \"\"\"",
        "\"\"\"\n        Enhancing input audio frame\n\n        Parameters:\n            input_frame:        Float[t] - Input raw audio frame\n            states:             Float[state_len] - Flattened and concated states\n            atten_lim_db:       Float[1] - Attenuation lim\n\n        Returns:\n            enhanced_frame:     Float[t] - Enhanced audio frame\n            new_states:         Float[state_len] - Flattened and concated updated states\n            lsnr:               Float[1] - Estimated lsnr of input frame\n\n        \"\"\"",
        "\"\"\"\n        Denoising audio frame using exportable fully torch model.\n\n        Parameters:\n            input_audio:      Float[1, t] - Input audio\n            sample_rate:      Int - Sample rate\n\n        Returns:\n            enhanced_audio:   Float[1, t] - Enhanced input audio\n        \"\"\""
    ],
    "functions": [
        "reset_parameters",
        "forward",
        "__repr__",
        "forward",
        "forward",
        "forward",
        "remove_conv_block_padding",
        "erb_fb",
        "mul_complex",
        "erb",
        "band_mean_norm_erb",
        "band_unit_norm",
        "frame_analysis",
        "frame_synthesis",
        "apply_mask",
        "deep_filter",
        "unpack_states",
        "forward",
        "forward",
        "main"
    ],
    "classes": [
        "GroupedLinearEinsum",
        "ModelParams",
        "Add",
        "Concat",
        "Encoder",
        "ExportableStreamingMinimalTorchDF",
        "TorchDFMinimalPipeline"
    ]
}