{
    "identifiers": [
        "com",
        "lcj",
        "socket",
        "nio",
        "first",
        "java",
        "io",
        "java",
        "net",
        "InetSocketAddress",
        "java",
        "nio",
        "ByteBuffer",
        "java",
        "nio",
        "channels",
        "SelectionKey",
        "java",
        "nio",
        "channels",
        "Selector",
        "java",
        "nio",
        "channels",
        "SocketChannel",
        "java",
        "util",
        "Iterator",
        "selector",
        "ip",
        "port",
        "channel",
        "SocketChannel",
        "open",
        "channel",
        "configureBlocking",
        "selector",
        "Selector",
        "open",
        "channel",
        "connect",
        "ip",
        "port",
        "channel",
        "register",
        "selector",
        "SelectionKey",
        "OP_CONNECT",
        "SuppressWarnings",
        "selector",
        "select",
        "ite",
        "selector",
        "selectedKeys",
        "iterator",
        "ite",
        "hasNext",
        "key",
        "ite",
        "next",
        "ite",
        "remove",
        "key",
        "isConnectable",
        "channel",
        "key",
        "channel",
        "channel",
        "isConnectionPending",
        "channel",
        "finishConnect",
        "channel",
        "configureBlocking",
        "channel",
        "write",
        "ByteBuffer",
        "wrap",
        "getBytes",
        "channel",
        "register",
        "selector",
        "SelectionKey",
        "OP_READ",
        "key",
        "isReadable",
        "read",
        "key",
        "key",
        "channel",
        "key",
        "channel",
        "buffer",
        "ByteBuffer",
        "allocate",
        "channel",
        "read",
        "buffer",
        "data",
        "buffer",
        "array",
        "msg",
        "data",
        "trim",
        "msg",
        "outBuffer",
        "ByteBuffer",
        "wrap",
        "msg",
        "getBytes",
        "channel",
        "write",
        "outBuffer",
        "args",
        "client",
        "client",
        "initClient",
        "client",
        "listen"
    ],
    "literals": [
        "\"unchecked\"",
        "\"向服务端发送了一条信息\"",
        "\"客户端收到信息：\"",
        "\"localhost\""
    ],
    "variables": [
        "selector"
    ],
    "comments": [
        "通道管理器",
        "获得一个Socket通道",
        "设置通道为非阻塞",
        "获得一个通道管理器",
        "客户端连接服务器,其实方法执行并没有实现连接，需要在listen（）方法中调",
        "用channel.finishConnect();才能完成连接",
        "将通道管理器和该通道绑定，并为该通道注册SelectionKey.OP_CONNECT事件。",
        "轮询访问selector",
        "选择一组可以进行I/O操作的事件，放在selector中,客户端的该方法不会阻塞，",
        "这里和服务端的方法不一样，查看api注释可以知道，当至少一个通道被选中时，",
        "selector的wakeup方法被调用，方法返回，而对于客户端来说，通道一直是被选中的",
        "获得selector中选中的项的迭代器",
        "删除已选的key,以防重复处理",
        "连接事件发生",
        "如果正在连接，则完成连接",
        "设置成非阻塞",
        "在这里可以给服务端发送信息哦",
        "在和服务端连接成功之后，为了可以接收到服务端的信息，需要给通道设置读的权限。",
        "获得了可读的事件",
        "客户端可读取消息:得到事件发生的Socket通道",
        "创建读取的缓冲区",
        "将消息回送给服务端"
    ],
    "docstrings": [
        "* 获得一个Socket通道，并对该通道做一些初始化的工作  \n     * @param ip 连接的服务器的ip  \n     * @param port  连接的服务器的端口号           \n     * @throws IOException",
        "* 采用轮询的方式监听selector上是否有需要处理的事件，如果有，则进行处理  \n     * @throws IOException",
        "* 处理读取服务端发来的信息 的事件  \n     * @param key  \n     * @throws IOException",
        "* 启动客户端测试  \n     * @throws IOException"
    ],
    "functions": [
        "initClient",
        "listen",
        "read",
        "main"
    ],
    "classes": [
        "NIOClient"
    ]
}