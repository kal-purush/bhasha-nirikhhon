{
    "identifiers": [
        "re",
        "itertools",
        "hostlist",
        "allow_duplicates",
        "sort",
        "c",
        "hostlist",
        "c",
        "bracket_level",
        "part",
        "results",
        "extend",
        "expand_part",
        "part",
        "part",
        "c",
        "c",
        "bracket_level",
        "c",
        "bracket_level",
        "bracket_level",
        "BadHostlist",
        "bracket_level",
        "BadHostlist",
        "bracket_level",
        "BadHostlist",
        "allow_duplicates",
        "remove_duplicates",
        "results",
        "sort",
        "numerically_sorted",
        "results",
        "results",
        "hostlists",
        "allow_duplicates",
        "sort",
        "expand_hostlist",
        "hostlist",
        "allow_duplicates",
        "sort",
        "hostlist",
        "hostlists",
        "s",
        "s",
        "re",
        "match",
        "s",
        "m",
        "group",
        "expand_part",
        "rest",
        "rangelist",
        "prefix",
        "expand_rangelist",
        "prefix",
        "rangelist",
        "len",
        "us_expanded",
        "len",
        "rest_expanded",
        "MAX_SIZE",
        "BadHostlist",
        "us_part",
        "rest_part",
        "us_part",
        "us_expanded",
        "rest_part",
        "rest_expanded",
        "prefix",
        "rangelist",
        "range_",
        "rangelist",
        "split",
        "results",
        "extend",
        "expand_range",
        "prefix",
        "range_",
        "results",
        "prefix",
        "range_",
        "re",
        "match",
        "range_",
        "m",
        "prefix",
        "range_",
        "re",
        "match",
        "range_",
        "m",
        "BadHostlist",
        "m",
        "group",
        "s_low",
        "s_high",
        "len",
        "s_low",
        "high",
        "low",
        "BadHostlist",
        "high",
        "low",
        "MAX_SIZE",
        "BadHostlist",
        "i",
        "low",
        "high",
        "results",
        "append",
        "prefix",
        "width",
        "i",
        "results",
        "l",
        "e",
        "l",
        "e",
        "seen",
        "results",
        "append",
        "e",
        "seen",
        "add",
        "e",
        "results",
        "hosts",
        "silently_discard_bad",
        "host",
        "hosts",
        "host",
        "strip",
        "host",
        "re",
        "search",
        "host",
        "silently_discard_bad",
        "BadHostlist",
        "left_right",
        "append",
        "host",
        "looping",
        "collect_hostlist_1",
        "left_right",
        "join",
        "left",
        "right",
        "left",
        "right",
        "left_right",
        "left_right",
        "left",
        "right",
        "left_right",
        "left",
        "right",
        "remaining",
        "add",
        "host",
        "re",
        "match",
        "left",
        "m",
        "group",
        "suffix",
        "right",
        "num_str",
        "prefix",
        "sortlist",
        "append",
        "host",
        "host",
        "num_str",
        "len",
        "num_str",
        "sortlist",
        "append",
        "prefix",
        "suffix",
        "num_int",
        "num_width",
        "host",
        "sortlist",
        "sort",
        "prefix",
        "suffix",
        "group",
        "itertools",
        "groupby",
        "sortlist",
        "key",
        "x",
        "x",
        "suffix",
        "results",
        "append",
        "prefix",
        "remaining",
        "remove",
        "prefix",
        "_",
        "_",
        "num_int",
        "num_width",
        "host",
        "group",
        "host",
        "remaining",
        "num_int",
        "num_int",
        "prefix",
        "num_width",
        "num_int",
        "suffix",
        "host",
        "remaining",
        "remaining",
        "remove",
        "host",
        "num_int",
        "num_int",
        "high",
        "low",
        "range_list",
        "append",
        "low",
        "high",
        "num_width",
        "len",
        "range_list",
        "range_list",
        "range_list",
        "results",
        "append",
        "prefix",
        "range_list",
        "range_list",
        "suffix",
        "results",
        "append",
        "prefix",
        "join",
        "format_range",
        "l",
        "h",
        "w",
        "l",
        "h",
        "w",
        "range_list",
        "suffix",
        "remaining",
        "results",
        "needs_another_loop",
        "low",
        "high",
        "width",
        "low",
        "high",
        "width",
        "low",
        "width",
        "low",
        "width",
        "high",
        "l",
        "sorted",
        "l",
        "key",
        "numeric_sort_key",
        "re",
        "compile",
        "x",
        "handle_int_nonint",
        "i_ni",
        "i_ni",
        "nsk_re",
        "findall",
        "x",
        "int_nonint_tuple",
        "int_nonint_tuple",
        "int_nonint_tuple",
        "int_nonint_tuple",
        "s",
        "part",
        "s",
        "split",
        "re",
        "match",
        "part",
        "m",
        "m",
        "group",
        "m",
        "group",
        "repetitions",
        "repetitions",
        "repetitions",
        "MAX_SIZE",
        "BadHostlist",
        "_",
        "repetitions",
        "res",
        "append",
        "tasks",
        "BadHostlist",
        "res"
    ],
    "literals": [
        "\"1.16\"",
        "\"\"",
        "\",\"",
        "\",\"",
        "\"\"",
        "\"[\"",
        "\"]\"",
        "\"nested brackets\"",
        "\"unbalanced brackets\"",
        "\"unbalanced brackets\"",
        "\"\"",
        "\"\"",
        "r'([^,\\[]*)(\\[[^\\]]*\\])?(.*)'",
        "\"results too large\"",
        "\",\"",
        "r'^[0-9]+$'",
        "\"%s%s\"",
        "r'^([0-9]+)-([0-9]+)$'",
        "\"bad range\"",
        "\"start > stop\"",
        "\"range too large\"",
        "\"%s%0*d\"",
        "\"\"",
        "r'[][,]'",
        "\"forbidden character\"",
        "\"\"",
        "\",\"",
        "r'^(.*?)([0-9]+)?([^0-9]*)$'",
        "\"\"",
        "\"\"",
        "\"%s%0*d%s\"",
        "\"%0*d%s\"",
        "\"[\"",
        "\",\"",
        "\"]\"",
        "\"%0*d\"",
        "\"%0*d-%0*d\"",
        "\"([0-9]+)|([^0-9]+)\"",
        "\",\"",
        "r'^([0-9]+)(\\(x([0-9]+)\\))?$'",
        "\"task list repetitions too large\"",
        "\"bad task list syntax\""
    ],
    "variables": [
        "__version__",
        "MAX_SIZE",
        "results",
        "bracket_level",
        "part",
        "part",
        "results",
        "results",
        "m",
        "prefix",
        "rangelist",
        "rest",
        "rest_expanded",
        "us_expanded",
        "us_expanded",
        "results",
        "m",
        "m",
        "s_low",
        "s_high",
        "low",
        "high",
        "width",
        "results",
        "seen",
        "results",
        "left_right",
        "host",
        "looping",
        "left_right",
        "looping",
        "sortlist",
        "remaining",
        "host",
        "m",
        "prefix",
        "num_str",
        "suffix",
        "suffix",
        "num_int",
        "num_width",
        "results",
        "needs_another_loop",
        "range_list",
        "low",
        "host",
        "high",
        "needs_another_loop",
        "nsk_re",
        "res",
        "m",
        "tasks",
        "repetitions",
        "repetitions",
        "repetitions"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "",
        "Hostlist library",
        "",
        "Copyright (C) 2008 Kent Engström <kent@nsc.liu.se>,",
        "Thomas Bellman <bellman@nsc.liu.se> and",
        "Pär Andersson <paran@nsc.liu.se>,",
        "National Supercomputer Centre",
        "",
        "This program is free software; you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation; either version 2 of the License, or",
        "(at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful, but",
        "WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
        "General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with this program; if not, write to the Free Software",
        "Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA",
        "02110-1301, USA.",
        "Exception used for error reporting to the caller",
        "Configuration to guard against ridiculously long expanded lists",
        "Hostlist expansion",
        "Comma at top level, split!",
        "bad_part = False",
        "Base case: the empty part expand to the singleton list of \"\"",
        "Split into:",
        "1) prefix string (may be empty)",
        "2) rangelist in brackets (may be missing)",
        "3) the rest",
        "Expand the rest first (here is where we recurse!)",
        "Expand our own part",
        "If there is no rangelist, our own contribution is the prefix only",
        "Otherwise expand the rangelist (adding the prefix before)",
        "Combine our list with the list from the expansion of the rest",
        "(but guard against too large results first)",
        "Split at commas and expand each range separately",
        "Check for a single number first",
        "Otherwise split low-high",
        "Hostlist collection",
        "Split hostlist into a list of (host, \"\") for the iterative part.",
        "(Also check for bad node names now)",
        "The idea is to move already collected numerical parts from the",
        "left side (seen by each loop) to the right side (just copied).",
        "We remove leading and trailing whitespace first, and skip empty lines",
        "We cannot accept a host containing any of the three special",
        "characters in the hostlist syntax (comma and flat brackets)",
        "Call the iterative function until it says it's done",
        "Scan the list of hosts (left+right) and build two things:",
        "Match the left part into parts",
        "Add the right part unprocessed to the suffix.",
        "This ensures than an already computed range expression",
        "in the right part is not analyzed again.",
        "A left part with no numeric part at all gets special treatment!",
        "The regexp matches with the whole string as the suffix,",
        "with nothing in the prefix or numeric parts.",
        "We do not want that, so we move it to the prefix and put",
        "None as a special marker where the suffix should be.",
        "A left part with at least an numeric part",
        "(we care about the rightmost numeric part)",
        "This width includes leading zeroes",
        "Sort lexicographically, first on prefix, then on suffix, then on",
        "num_int (numerically), then...",
        "This determines the order of the final result.",
        "We are ready to collect the result parts as a list of new (left,",
        "right) tuples.",
        "Now group entries with the same prefix+suffix combination (the",
        "key is the first element in the sortlist) to loop over them and",
        "then to loop over the list of hosts sharing the same",
        "prefix+suffix combination.",
        "Special case: a host with no numeric part",
        "Move everything to the right part",
        "The general case. We prepare to collect a list of",
        "ranges expressed as (low, high, width) for later",
        "formatting.",
        "Below, we will loop internally to enumate a whole range",
        "at a time. We then remove the covered hosts from the set.",
        "Therefore, skip the host here if it is gone from the set.",
        "Scan for a range starting at the current host",
        "We have a list of ranges to format. We make sure",
        "we move our handled numerical part to the right to",
        "stop it from being processed again.",
        "Special case to make sure that n1 is not shown as n[1] etc",
        "General case where high > low",
        "At this point, the set of remaining hosts should be empty and we",
        "are ready to return the result, together with the flag that says",
        "if we need to loop again (we do if we have added something to a",
        "left part).",
        "Sort a list of hosts numerically",
        "Parse SLURM_TASKS_PER_NODE into a list of task numbers",
        "",
        "Description from the SLURM sbatch man page:",
        "Number of tasks to be initiated on each node. Values",
        "are comma separated and in the same order as",
        "SLURM_NODELIST.  If two or more consecutive nodes are",
        "to have the same task count, that count is followed by",
        "\"(x#)\" where \"#\" is the repetition count. For example,",
        "\"SLURM_TASKS_PER_NODE=2(x3),1\" indicates that the first",
        "three nodes will each execute three tasks and the",
        "fourth node will execute one task.",
        "",
        "Keep this part to tell users where the command line interface went",
        "",
        "if __name__ == '__main__':",
        "import os, sys",
        "sys.stderr.write(\"The command line utility has been moved to a separate 'hostlist' program.\\n\")",
        "sys.exit(os.EX_USAGE)"
    ],
    "docstrings": [
        "\"\"\"Handle hostlist expressions.\n\nThis module provides operations to expand and collect hostlist\nexpressions.\n\nThe hostlist expression syntax is the same as in several programs\ndeveloped at LLNL (https://computing.llnl.gov/linux/). However in\ncorner cases the behaviour of this module have not been compared for\ncompatibility with pdsh/dshbak/SLURM et al.\n\"\"\"",
        "\"\"\"Expand a hostlist expression string to a Python list.\n\n    Example: expand_hostlist(\"n[9-11],d[01-02]\") ==> \n             ['n9', 'n10', 'n11', 'd01', 'd02']\n\n    Unless allow_duplicates is true, duplicates will be purged\n    from the results. If sort is true, the output will be sorted.\n    \"\"\"",
        "\"\"\"Expand a part (e.g. \"x[1-2]y[1-3][1-3]\") (no outer level commas).\"\"\"",
        "\"\"\" Expand a rangelist (e.g. \"1-10,14\"), putting a prefix before.\"\"\"",
        "\"\"\" Expand a range (e.g. 1-10 or 14), putting a prefix before.\"\"\"",
        "\"\"\"Remove duplicates from a list (but keep the order).\"\"\"",
        "\"\"\"Collect a hostlist string from a Python list of hosts.\n\n    We start grouping from the rightmost numerical part.\n    Duplicates are removed.\n\n    A bad hostname raises an exception (unless silently_discard_bad\n    is true causing the bad hostname to be silently discarded instead).\n    \"\"\"",
        "\"\"\"Collect a hostlist string from a list of hosts (left+right).\n\n    The input is a list of tuples (left, right). The left part\n    is analyzed, while the right part is just passed along\n    (it can contain already collected range expressions).\n    \"\"\"",
        "*) a set of all hosts seen (used later)",
        "*) a list where each host entry is preprocessed for correct sorting",
        "\"\"\"Format a range from low to high inclusively, with a certain width.\"\"\"",
        "\"\"\"Sort a list of hosts numerically.\n\n    E.g. sorted order should be n1, n2, n10; not n1, n10, n2.\n    \"\"\""
    ],
    "functions": [
        "expand_hostlist",
        "expand_hostlists_to_list",
        "expand_part",
        "expand_rangelist",
        "expand_range",
        "remove_duplicates",
        "collect_hostlist",
        "collect_hostlist_1",
        "format_range",
        "numerically_sorted",
        "numeric_sort_key",
        "handle_int_nonint",
        "parse_slurm_tasks_per_node"
    ],
    "classes": [
        "BadHostlist"
    ]
}