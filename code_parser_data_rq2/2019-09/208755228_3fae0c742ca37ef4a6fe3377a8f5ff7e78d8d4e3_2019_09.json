{
    "identifiers": [
        "sys",
        "time",
        "os",
        "progressbar",
        "sys",
        "argv",
        "sys",
        "argv",
        "sys",
        "argv",
        "dir_mRNA",
        "join",
        "y",
        "dir_mRNA",
        "keys",
        "dir_mRNA",
        "y",
        "strip",
        "split",
        "y_split",
        "eval",
        "y_split",
        "z",
        "dir_needmRNA",
        "keys",
        "dir_needmRNA",
        "z",
        "strip",
        "split",
        "z_split",
        "eval",
        "z_split",
        "len",
        "y_start",
        "y_end",
        "z_start",
        "z_end",
        "judge_add",
        "y_score",
        "z_score",
        "dir_needmRNA",
        "pop",
        "z",
        "dir_mRNA",
        "y",
        "judge_add",
        "dir_mRNA",
        "y",
        "dir_needmRNA",
        "pop",
        "open",
        "outfile",
        "fw",
        "fw_key",
        "dir_needmRNA",
        "keys",
        "dir_needmRNA",
        "fw_key",
        "split",
        "fw_key_score",
        "filter_num",
        "number",
        "fw",
        "write",
        "join",
        "dir_allgene",
        "fw_key",
        "sys",
        "stderr",
        "write",
        "time",
        "strftime",
        "time",
        "localtime",
        "time",
        "time",
        "sys",
        "stderr",
        "write",
        "x",
        "open",
        "inputfile",
        "x",
        "split",
        "x",
        "split",
        "split",
        "x",
        "split",
        "dir_allgene",
        "setdefault",
        "q_geneid",
        "append",
        "x",
        "x",
        "dir_chr_mRNA",
        "setdefault",
        "chr_name",
        "append",
        "dir_tmp",
        "x",
        "split",
        "x",
        "split",
        "split",
        "dir_allgene",
        "setdefault",
        "q_geneid",
        "append",
        "x",
        "x",
        "os",
        "path",
        "exists",
        "outfile",
        "sys",
        "stderr",
        "write",
        "outfile",
        "os",
        "remove",
        "outfile",
        "progressbar",
        "ProgressBar",
        "p",
        "start",
        "len",
        "dir_chr_mRNA",
        "key",
        "value",
        "dir_chr_mRNA",
        "items",
        "p_number",
        "p",
        "update",
        "p_number",
        "key",
        "x",
        "value",
        "x",
        "keys",
        "x",
        "values",
        "new_value",
        "filter_write",
        "dir_chrx_mRNA_arrange",
        "p",
        "finish"
    ],
    "literals": [
        "'int'",
        "'\\t'",
        "'1'",
        "'int'",
        "'a+'",
        "''",
        "'%Y-%m-%d %H:%M:%S'",
        "'\\n'",
        "'Reading Data...\\n'",
        "'mRNA'",
        "'='",
        "';'",
        "'CDS'",
        "'='",
        "';'",
        "'%s is exist! cleaning it...\\n'"
    ],
    "variables": [
        "inputfile",
        "filter_num",
        "outfile",
        "dir_needmRNA",
        "y_split",
        "y_chr_name",
        "y_start",
        "y_end",
        "y_score",
        "judge_add",
        "z_split",
        "z_chr_name",
        "z_start",
        "z_end",
        "z_score",
        "dir_needmRNA",
        "y",
        "dir_needmRNA",
        "y",
        "number",
        "fw_key_score",
        "dir_allgene",
        "dir_chr_mRNA",
        "q_geneid",
        "chr_name",
        "dir_tmp",
        "dir_tmp",
        "q_geneid",
        "q_geneid",
        "p",
        "p_number",
        "dir_chrx_mRNA_arrange",
        "chr_name",
        "new_key",
        "new_value",
        "dir_chrx_mRNA_arrange",
        "new_key"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "初始化dir_needmRNA，目的是进入双重循环的第二重循环",
        "该字典后续用于记录需要的mRNA条目信息。geneid为键，mRNA信息为值。",
        "sys.stderr.write('Filter Data...\\n')",
        "遍历dir_mRNA字典，以向dir_needmRNA字典输入数据，执行判断",
        "遍历dir_needmRNA字典，若y存在下述的三种情况，则记录入dir_needmRNA",
        "判断染色体名字是否相同。若相同，进行后续判断；若不同，则说明没有该项，记录进dir_needmRNA",
        "因为输入的数据集就是以染色体名称分组的，因此不需要进行该步判断",
        "if z_chr_name == y_chr_name:",
        "判断mRNA区间是否有overlap。若有大于100bp的overlap，进行后续判断；若没有，则说明没有该项，记录进dir_needmRNA",
        "判断该条目分值是否比已经记录的有overlap的条目高。若高，则替换；若低，则过滤掉该条目",
        "如果该条目和dir_needmRNA所有项都没有overlap，则需要在加入dir_needmRNA",
        "else:",
        "dir_needmRNA[y] = dir_mRNA[y]",
        "过滤低于要求最低数值的mRNA的项",
        "根据geneid从dir_allgene字典内调取mRNA和CDS信息，写入新文件内",
        "sys.stderr.write(time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))+'\\n')",
        "sys.stderr.write('Total Lines After Filter:\\t' + y_chr_name + '\\t' + str(number) + '\\n')",
        "准备两个数据字典。",
        "dir_allgene以geneid为键，mRNA信息和CDS信息为值。",
        "dir_chr_mRNA以contig/scaffold为键，对应的mRNA信息为值，值为列表，列表内为字典",
        "设置字典值为列表",
        "dir_chr_mRNA以每条染色体的名字为键，对应的所有mRNA信息为值。",
        "值是一个集合，集合里嵌套多个字典，键为geneid，值为对应的mRNA信息",
        "设置字典值为列表，列表的值为新的字典",
        "设置字典值为列表",
        "整理dir_chr_mRNA内的信息，将集合内的多个字典转变为一个字典dir_chrx_mRNA_arrange",
        "显示进度条开始",
        "调用过滤函数，过滤后的结果写入新文件内，该文件为追加写入",
        "显示进度条结束"
    ],
    "docstrings": [
        "'''\nUsage:\npython filter_genewise_gff_redundancy.py inputfile filter_num outfile\npython /share/home/baishenglong/programs/my_script/gene_ann_majianchao/filter_genewise_gff_redundancy.py result/Oryza_sativa.pep.all.fa.genblast.genewise.filter.gff 50 filter_genewise_gff.py ./Oryza_sativa.pep.all.fa.genblast.genewise.gff.new\n\n对genewise产生的gff文件进行去冗余。\n冗余标准为若两个mRNA有100bp以上的overlap，则保留分值较高的，删除分值较低的。\n\n脚本有以下几个步骤：\n1. 读入gff文件，将信息记录入 dir_allgene，dir_chr_mRNA 两个字典内。\ndir_allgene以geneid为键，gene对应的mRNA和CDS信息为值\ndir_chr_mRNA 以contig/Scaffold信息为键，mRNA信息为值\n\n2. 整理dir_chr_mRNA 格式，整理后每个contig/scaffold信息写入 dir_chrx_mRNA_arrange 新字典内，以进行下一步过滤\n键为geneid，值为对应的mRNA信息\n\n3. 调用filter_write函数对每一个dir_chrx_mRNA_arrange内mRNA进行过滤\n\n'''"
    ],
    "functions": [
        "filter_write"
    ],
    "classes": []
}