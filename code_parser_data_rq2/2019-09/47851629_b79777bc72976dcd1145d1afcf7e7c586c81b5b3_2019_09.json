{
    "identifiers": [
        "Activity",
        "AutoSaveStateMiddleware",
        "ConversationState",
        "MemoryStorage",
        "Middleware",
        "TestAdapter",
        "TurnContext",
        "Dialog",
        "DialogSet",
        "DialogTurnResult",
        "DialogTurnStatus",
        "Botkit",
        "turnContext",
        "channelOrAdapter",
        "bot",
        "dialogToTest",
        "initialDialogOptions",
        "middlewares",
        "conversationState",
        "conversationState",
        "ConversationState",
        "MemoryStorage",
        "bot",
        "dialogToTest",
        "bot",
        "dialogToTest",
        "bot",
        "dialogToTest",
        "targetDialogs",
        "initialDialogOptions",
        "dialogState",
        "channelOrAdapter",
        "TestAdapter",
        "channelOrAdapter",
        "AutoSaveStateMiddleware",
        "channelOrAdapter",
        "middlewares",
        "activity",
        "activity",
        "targetDialogs",
        "initialDialogOptions",
        "dialogState",
        "turnContext",
        "turnContext",
        "DialogSet",
        "dialogState",
        "targetDialogs",
        "targetDialog",
        "dialogSet",
        "targetDialog",
        "dialogSet",
        "turnContext",
        "dialogContext",
        "DialogTurnStatus",
        "dialogContext",
        "targetDialogs",
        "initialDialogOptions",
        "middlewares",
        "middlewares",
        "middlewares",
        "middleware",
        "middleware"
    ],
    "literals": [
        "'botbuilder-core'",
        "'botbuilder-dialogs'",
        "\"./core\"",
        "string",
        "string",
        "'DialogState'",
        "'_default_prompt'",
        "':botkit-wrapper'",
        "'string'",
        "string"
    ],
    "variables": [
        "dialogState",
        "targetDialogs",
        "dialogSet",
        "dialogContext"
    ],
    "comments": [],
    "docstrings": [
        "* @module botkit",
        "* Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.",
        "* A client for testing dialogs in isolation.",
        "* Create a BotkitTestClient to test a dialog without having to create a full-fledged adapter.\n     *\n     * ```javascript\n     * let client = new BotkitTestClient('test', bot, MY_DIALOG, MY_OPTIONS);\n     * let reply = await client.sendActivity('first message');\n     * assert.strictEqual(reply.text, 'first reply', 'reply failed');\n     * ```\n     *\n     * @param channelOrAdapter The channelId to be used for the test or custom adapter. By default the test client will use a default TestAdapter\n     * Use 'emulator' or 'test' if you are uncertain of the channel you are targeting.\n     * Otherwise, it is recommended that you use the id for the channel(s) your bot will be using and write a test case for each channel.\n     * @param bot (Required) The Botkit bot that has the skill to test.\n     * @param dialogToTest (Required) The identifier of the skill to test in the bot.\n     * @param initialDialogOptions (Optional) additional argument(s) to pass to the dialog being started.\n     * @param middlewares (Optional) a stack of middleware to be run when testing\n     * @param conversationState (Optional) A ConversationState instance to use in the test client",
        "* Send an activity into the dialog.\n     * @returns a TestFlow that can be used to assert replies etc\n     * @param activity an activity potentially with text\n     *\n     * ```javascript\n     * DialogTest.send('hello').assertReply('hello yourself').then(done);\n     * ```",
        "* Get the next reply waiting to be delivered (if one exists)"
    ],
    "functions": [
        "sendActivity",
        "getNextReply",
        "getDefaultCallback",
        "addUserMiddlewares"
    ],
    "classes": [
        "BotkitTestClient"
    ]
}