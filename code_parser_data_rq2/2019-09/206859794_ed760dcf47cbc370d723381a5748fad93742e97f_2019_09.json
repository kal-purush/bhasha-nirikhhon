{
    "identifiers": [
        "f",
        "exports",
        "f",
        "define",
        "define",
        "define",
        "f",
        "g",
        "g",
        "g",
        "g",
        "g",
        "f",
        "e",
        "t",
        "n",
        "r",
        "o",
        "u",
        "n",
        "o",
        "t",
        "o",
        "require",
        "require",
        "u",
        "a",
        "a",
        "o",
        "i",
        "i",
        "o",
        "o",
        "f",
        "f",
        "n",
        "o",
        "t",
        "o",
        "l",
        "e",
        "t",
        "o",
        "e",
        "s",
        "n",
        "n",
        "e",
        "l",
        "l",
        "e",
        "t",
        "n",
        "r",
        "n",
        "o",
        "require",
        "require",
        "o",
        "r",
        "o",
        "s",
        "r",
        "o",
        "s",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "source",
        "options",
        "options",
        "options",
        "options",
        "options",
        "supportsAccessors",
        "ReactTools",
        "source",
        "options",
        "source",
        "options",
        "eval",
        "transformReact",
        "source",
        "options",
        "code",
        "e",
        "code",
        "e",
        "e",
        "sourceLines",
        "sourceLines",
        "e",
        "erroneousLine",
        "erroneousLine",
        "leadingSpaces",
        "indentation",
        "leadingSpaces",
        "e",
        "indentation",
        "errorColumn",
        "LIMIT",
        "erroneousLine",
        "erroneousLine",
        "errorColumn",
        "LIMIT",
        "errorColumn",
        "LIMIT",
        "erroneousLine",
        "errorColumn",
        "LIMIT",
        "erroneousLine",
        "erroneousLine",
        "errorColumn",
        "LIMIT",
        "erroneousLine",
        "message",
        "errorColumn",
        "message",
        "code",
        "url",
        "options",
        "transformReact",
        "code",
        "options",
        "e",
        "e",
        "url",
        "e",
        "e",
        "url",
        "e",
        "url",
        "e",
        "e",
        "e",
        "location",
        "e",
        "createSourceCodeErrorMessage",
        "code",
        "e",
        "e",
        "transformed",
        "transformed",
        "url",
        "source",
        "inlineScriptCount",
        "inlineScriptCount",
        "source",
        "inlineScriptCount",
        "dummyAnchor",
        "dummyAnchor",
        "url",
        "source",
        "dummyAnchor",
        "transformed",
        "inlineSourceMap",
        "transformed",
        "code",
        "source",
        "code",
        "url",
        "options",
        "scriptEl",
        "transformCode",
        "code",
        "url",
        "options",
        "headEl",
        "scriptEl",
        "url",
        "successCallback",
        "errorCallback",
        "xhr",
        "XMLHttpRequest",
        "xhr",
        "url",
        "xhr",
        "xhr",
        "xhr",
        "xhr",
        "xhr",
        "xhr",
        "successCallback",
        "xhr",
        "errorCallback",
        "url",
        "xhr",
        "scripts",
        "scripts",
        "i",
        "i",
        "count",
        "i",
        "script",
        "result",
        "i",
        "script",
        "script",
        "script",
        "run",
        "script",
        "script",
        "script",
        "script",
        "script",
        "script",
        "scripts",
        "script",
        "i",
        "script",
        "options",
        "script",
        "options",
        "script",
        "script",
        "result",
        "i",
        "async",
        "script",
        "options",
        "load",
        "script",
        "content",
        "result",
        "i",
        "result",
        "i",
        "content",
        "check",
        "result",
        "i",
        "check",
        "result",
        "i",
        "async",
        "script",
        "options",
        "check",
        "i",
        "scripts",
        "i",
        "scripts",
        "i",
        "jsxScripts",
        "scripts",
        "i",
        "jsxScripts",
        "loadScripts",
        "jsxScripts",
        "headEl",
        "dummyAnchor",
        "runScripts",
        "runScripts",
        "transformReact",
        "exec",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "input",
        "options",
        "options",
        "processOptions",
        "options",
        "innerTransform",
        "input",
        "options",
        "output",
        "options",
        "inlineSourceMap",
        "output",
        "input",
        "options",
        "result",
        "result",
        "input",
        "options",
        "options",
        "processOptions",
        "options",
        "innerTransform",
        "input",
        "options",
        "result",
        "output",
        "options",
        "result",
        "output",
        "options",
        "result",
        "options",
        "result",
        "opts",
        "opts",
        "opts",
        "options",
        "opts",
        "options",
        "opts",
        "options",
        "opts",
        "options",
        "opts",
        "opts",
        "options",
        "opts",
        "options",
        "options",
        "opts",
        "options",
        "options",
        "options",
        "input",
        "options",
        "options",
        "visitorSets",
        "options",
        "visitorSets",
        "options",
        "input",
        "transform",
        "typesSyntax",
        "input",
        "options",
        "visitors",
        "visitorSets",
        "transform",
        "visitorList",
        "input",
        "options",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "exports",
        "Buffer",
        "exports",
        "SlowBuffer",
        "exports",
        "Buffer",
        "Buffer",
        "ArrayBuffer",
        "Uint8Array",
        "buf",
        "arr",
        "arr",
        "arr",
        "Uint8Array",
        "e",
        "subject",
        "encoding",
        "Buffer",
        "Buffer",
        "subject",
        "encoding",
        "subject",
        "length",
        "subject",
        "length",
        "Buffer",
        "subject",
        "encoding",
        "subject",
        "subject",
        "isArray",
        "subject",
        "subject",
        "subject",
        "length",
        "subject",
        "length",
        "kMaxLength",
        "RangeError",
        "kMaxLength",
        "length",
        "length",
        "length",
        "Buffer",
        "Buffer",
        "Uint8Array",
        "length",
        "length",
        "Buffer",
        "subject",
        "subject",
        "isArrayish",
        "subject",
        "Buffer",
        "subject",
        "i",
        "i",
        "length",
        "i",
        "i",
        "subject",
        "i",
        "i",
        "i",
        "length",
        "i",
        "i",
        "subject",
        "i",
        "subject",
        "encoding",
        "Buffer",
        "i",
        "i",
        "length",
        "i",
        "i",
        "length",
        "length",
        "Buffer",
        "rootParent",
        "subject",
        "encoding",
        "SlowBuffer",
        "SlowBuffer",
        "subject",
        "encoding",
        "Buffer",
        "subject",
        "encoding",
        "buf",
        "buf",
        "Buffer",
        "isBuffer",
        "b",
        "b",
        "b",
        "Buffer",
        "compare",
        "a",
        "b",
        "Buffer",
        "a",
        "Buffer",
        "b",
        "a",
        "b",
        "a",
        "b",
        "x",
        "y",
        "i",
        "len",
        "a",
        "i",
        "b",
        "i",
        "i",
        "i",
        "len",
        "x",
        "a",
        "i",
        "y",
        "b",
        "i",
        "x",
        "y",
        "y",
        "x",
        "Buffer",
        "isEncoding",
        "encoding",
        "encoding",
        "Buffer",
        "concat",
        "totalLength",
        "isArray",
        "Buffer",
        "totalLength",
        "totalLength",
        "i",
        "i",
        "i",
        "totalLength",
        "i",
        "Buffer",
        "totalLength",
        "i",
        "i",
        "i",
        "i",
        "item",
        "buf",
        "pos",
        "pos",
        "item",
        "buf",
        "Buffer",
        "byteLength",
        "encoding",
        "encoding",
        "ret",
        "ret",
        "ret",
        "ret",
        "utf8ToBytes",
        "ret",
        "base64ToBytes",
        "ret",
        "ret",
        "Buffer",
        "Buffer",
        "Buffer",
        "toString",
        "encoding",
        "start",
        "end",
        "start",
        "start",
        "end",
        "end",
        "end",
        "Infinity",
        "end",
        "encoding",
        "encoding",
        "start",
        "start",
        "end",
        "end",
        "end",
        "start",
        "encoding",
        "hexSlice",
        "start",
        "end",
        "utf8Slice",
        "start",
        "end",
        "asciiSlice",
        "start",
        "end",
        "binarySlice",
        "start",
        "end",
        "base64Slice",
        "start",
        "end",
        "utf16leSlice",
        "start",
        "end",
        "loweredCase",
        "encoding",
        "encoding",
        "encoding",
        "loweredCase",
        "Buffer",
        "equals",
        "b",
        "Buffer",
        "b",
        "b",
        "Buffer",
        "b",
        "Buffer",
        "inspect",
        "exports",
        "max",
        "max",
        "Buffer",
        "compare",
        "b",
        "Buffer",
        "b",
        "b",
        "Buffer",
        "b",
        "Buffer",
        "indexOf",
        "val",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "val",
        "val",
        "val",
        "byteOffset",
        "Buffer",
        "val",
        "arrayIndexOf",
        "val",
        "byteOffset",
        "val",
        "Buffer",
        "Uint8Array",
        "Uint8Array",
        "val",
        "byteOffset",
        "arrayIndexOf",
        "val",
        "byteOffset",
        "arr",
        "val",
        "byteOffset",
        "byteOffset",
        "i",
        "arr",
        "i",
        "arr",
        "byteOffset",
        "i",
        "val",
        "foundIndex",
        "i",
        "foundIndex",
        "foundIndex",
        "foundIndex",
        "i",
        "i",
        "foundIndex",
        "val",
        "byteOffset",
        "foundIndex",
        "foundIndex",
        "Buffer",
        "get",
        "offset",
        "offset",
        "Buffer",
        "v",
        "offset",
        "v",
        "offset",
        "buf",
        "offset",
        "length",
        "offset",
        "offset",
        "buf",
        "offset",
        "length",
        "length",
        "remaining",
        "length",
        "length",
        "length",
        "remaining",
        "length",
        "remaining",
        "strLen",
        "length",
        "strLen",
        "length",
        "strLen",
        "i",
        "length",
        "i",
        "parseInt",
        "i",
        "isNaN",
        "parsed",
        "buf",
        "offset",
        "i",
        "parsed",
        "i",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "utf8ToBytes",
        "buf",
        "offset",
        "buf",
        "offset",
        "length",
        "charsWritten",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "asciiToBytes",
        "buf",
        "offset",
        "length",
        "charsWritten",
        "buf",
        "offset",
        "length",
        "asciiWrite",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "base64ToBytes",
        "buf",
        "offset",
        "length",
        "charsWritten",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "utf16leToBytes",
        "buf",
        "offset",
        "buf",
        "offset",
        "length",
        "charsWritten",
        "Buffer",
        "write",
        "offset",
        "length",
        "encoding",
        "isFinite",
        "offset",
        "isFinite",
        "length",
        "encoding",
        "length",
        "length",
        "encoding",
        "offset",
        "offset",
        "length",
        "length",
        "swap",
        "offset",
        "offset",
        "length",
        "offset",
        "offset",
        "RangeError",
        "offset",
        "length",
        "length",
        "remaining",
        "length",
        "length",
        "length",
        "remaining",
        "length",
        "remaining",
        "encoding",
        "encoding",
        "encoding",
        "ret",
        "hexWrite",
        "offset",
        "length",
        "ret",
        "utf8Write",
        "offset",
        "length",
        "ret",
        "asciiWrite",
        "offset",
        "length",
        "ret",
        "binaryWrite",
        "offset",
        "length",
        "ret",
        "base64Write",
        "offset",
        "length",
        "ret",
        "utf16leWrite",
        "offset",
        "length",
        "encoding",
        "ret",
        "Buffer",
        "toJSON",
        "buf",
        "start",
        "end",
        "start",
        "end",
        "buf",
        "base64",
        "buf",
        "base64",
        "buf",
        "start",
        "end",
        "buf",
        "start",
        "end",
        "end",
        "buf",
        "end",
        "i",
        "end",
        "i",
        "buf",
        "i",
        "res",
        "decodeUtf8Char",
        "tmp",
        "buf",
        "i",
        "tmp",
        "tmp",
        "buf",
        "i",
        "res",
        "decodeUtf8Char",
        "tmp",
        "buf",
        "start",
        "end",
        "end",
        "buf",
        "end",
        "i",
        "end",
        "i",
        "ret",
        "buf",
        "i",
        "ret",
        "buf",
        "start",
        "end",
        "end",
        "buf",
        "end",
        "i",
        "end",
        "i",
        "ret",
        "buf",
        "i",
        "ret",
        "buf",
        "start",
        "end",
        "buf",
        "start",
        "start",
        "start",
        "end",
        "end",
        "end",
        "len",
        "end",
        "len",
        "i",
        "end",
        "i",
        "toHex",
        "buf",
        "i",
        "buf",
        "start",
        "end",
        "buf",
        "start",
        "end",
        "i",
        "i",
        "res",
        "i",
        "i",
        "res",
        "Buffer",
        "start",
        "end",
        "start",
        "start",
        "end",
        "end",
        "len",
        "end",
        "start",
        "start",
        "len",
        "start",
        "start",
        "start",
        "len",
        "start",
        "len",
        "end",
        "end",
        "len",
        "end",
        "end",
        "end",
        "len",
        "end",
        "len",
        "end",
        "start",
        "end",
        "start",
        "Buffer",
        "newBuf",
        "Buffer",
        "start",
        "end",
        "end",
        "start",
        "newBuf",
        "Buffer",
        "sliceLen",
        "i",
        "sliceLen",
        "i",
        "newBuf",
        "i",
        "i",
        "start",
        "newBuf",
        "newBuf",
        "newBuf",
        "offset",
        "ext",
        "length",
        "offset",
        "offset",
        "RangeError",
        "offset",
        "ext",
        "length",
        "RangeError",
        "Buffer",
        "readUIntLE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "i",
        "byteLength",
        "mul",
        "val",
        "offset",
        "i",
        "mul",
        "val",
        "Buffer",
        "readUIntBE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "byteLength",
        "byteLength",
        "mul",
        "val",
        "offset",
        "byteLength",
        "mul",
        "val",
        "Buffer",
        "readUInt8",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "Buffer",
        "readUInt16LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readUInt16BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readUInt32LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readUInt32BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readIntLE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "i",
        "byteLength",
        "mul",
        "val",
        "offset",
        "i",
        "mul",
        "mul",
        "val",
        "mul",
        "val",
        "byteLength",
        "val",
        "Buffer",
        "readIntBE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "i",
        "i",
        "mul",
        "val",
        "offset",
        "i",
        "mul",
        "mul",
        "val",
        "mul",
        "val",
        "byteLength",
        "val",
        "Buffer",
        "readInt8",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readInt16LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "val",
        "val",
        "val",
        "Buffer",
        "readInt16BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "val",
        "val",
        "val",
        "Buffer",
        "readInt32LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readInt32BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readFloatLE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "Buffer",
        "readFloatBE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "Buffer",
        "readDoubleLE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "Buffer",
        "readDoubleBE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "buf",
        "value",
        "offset",
        "ext",
        "max",
        "min",
        "Buffer",
        "buf",
        "value",
        "max",
        "value",
        "min",
        "RangeError",
        "offset",
        "ext",
        "buf",
        "RangeError",
        "Buffer",
        "writeUIntLE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "byteLength",
        "offset",
        "value",
        "i",
        "byteLength",
        "mul",
        "offset",
        "i",
        "value",
        "mul",
        "offset",
        "byteLength",
        "Buffer",
        "writeUIntBE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "byteLength",
        "byteLength",
        "offset",
        "i",
        "value",
        "i",
        "mul",
        "offset",
        "i",
        "value",
        "mul",
        "offset",
        "byteLength",
        "Buffer",
        "writeUInt8",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "value",
        "value",
        "offset",
        "value",
        "offset",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "value",
        "value",
        "value",
        "buf",
        "offset",
        "i",
        "j",
        "i",
        "buf",
        "offset",
        "i",
        "value",
        "littleEndian",
        "i",
        "i",
        "littleEndian",
        "i",
        "i",
        "Buffer",
        "writeUInt16LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeUInt16BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "value",
        "value",
        "value",
        "buf",
        "offset",
        "i",
        "j",
        "i",
        "buf",
        "offset",
        "i",
        "value",
        "littleEndian",
        "i",
        "i",
        "Buffer",
        "writeUInt32LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeUInt32BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeIntLE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "byteLength",
        "byteLength",
        "value",
        "offset",
        "value",
        "i",
        "byteLength",
        "mul",
        "offset",
        "i",
        "value",
        "mul",
        "sub",
        "offset",
        "byteLength",
        "Buffer",
        "writeIntBE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "byteLength",
        "byteLength",
        "byteLength",
        "value",
        "offset",
        "i",
        "value",
        "i",
        "mul",
        "offset",
        "i",
        "value",
        "mul",
        "sub",
        "offset",
        "byteLength",
        "Buffer",
        "writeInt8",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "value",
        "value",
        "value",
        "value",
        "value",
        "offset",
        "value",
        "offset",
        "Buffer",
        "writeInt16LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeInt16BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeInt32LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeInt32BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "value",
        "value",
        "value",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "buf",
        "value",
        "offset",
        "ext",
        "max",
        "min",
        "value",
        "max",
        "value",
        "min",
        "RangeError",
        "offset",
        "ext",
        "buf",
        "RangeError",
        "offset",
        "RangeError",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "noAssert",
        "noAssert",
        "checkIEEE754",
        "buf",
        "value",
        "offset",
        "ieee754",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "offset",
        "Buffer",
        "writeFloatLE",
        "value",
        "offset",
        "noAssert",
        "writeFloat",
        "value",
        "offset",
        "noAssert",
        "Buffer",
        "writeFloatBE",
        "value",
        "offset",
        "noAssert",
        "writeFloat",
        "value",
        "offset",
        "noAssert",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "noAssert",
        "noAssert",
        "checkIEEE754",
        "buf",
        "value",
        "offset",
        "ieee754",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "offset",
        "Buffer",
        "writeDoubleLE",
        "value",
        "offset",
        "noAssert",
        "writeDouble",
        "value",
        "offset",
        "noAssert",
        "Buffer",
        "writeDoubleBE",
        "value",
        "offset",
        "noAssert",
        "writeDouble",
        "value",
        "offset",
        "noAssert",
        "Buffer",
        "copy",
        "target",
        "target_start",
        "start",
        "end",
        "start",
        "start",
        "end",
        "end",
        "end",
        "target_start",
        "target",
        "target_start",
        "target",
        "target_start",
        "target_start",
        "end",
        "end",
        "start",
        "end",
        "start",
        "end",
        "start",
        "target",
        "target_start",
        "RangeError",
        "start",
        "start",
        "RangeError",
        "end",
        "RangeError",
        "end",
        "end",
        "target",
        "target_start",
        "end",
        "start",
        "end",
        "target",
        "target_start",
        "start",
        "end",
        "start",
        "len",
        "Buffer",
        "i",
        "len",
        "i",
        "target",
        "i",
        "target_start",
        "i",
        "start",
        "target",
        "start",
        "start",
        "len",
        "target_start",
        "len",
        "Buffer",
        "fill",
        "value",
        "start",
        "end",
        "value",
        "value",
        "start",
        "start",
        "end",
        "end",
        "end",
        "start",
        "RangeError",
        "end",
        "start",
        "start",
        "start",
        "RangeError",
        "end",
        "end",
        "RangeError",
        "value",
        "i",
        "start",
        "i",
        "end",
        "i",
        "i",
        "value",
        "utf8ToBytes",
        "value",
        "i",
        "start",
        "i",
        "end",
        "i",
        "i",
        "i",
        "len",
        "Buffer",
        "toArrayBuffer",
        "Uint8Array",
        "Buffer",
        "Buffer",
        "Uint8Array",
        "buf",
        "i",
        "len",
        "i",
        "buf",
        "i",
        "i",
        "buf",
        "Buffer",
        "Buffer",
        "_augment",
        "arr",
        "arr",
        "Buffer",
        "arr",
        "arr",
        "arr",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "BP",
        "arr",
        "stringtrim",
        "INVALID_BASE64_RE",
        "subject",
        "isArray",
        "subject",
        "Buffer",
        "subject",
        "subject",
        "subject",
        "subject",
        "n",
        "n",
        "n",
        "n",
        "units",
        "units",
        "units",
        "Infinity",
        "i",
        "length",
        "i",
        "codePoint",
        "i",
        "codePoint",
        "codePoint",
        "leadSurrogate",
        "codePoint",
        "units",
        "leadSurrogate",
        "codePoint",
        "codePoint",
        "leadSurrogate",
        "codePoint",
        "leadSurrogate",
        "codePoint",
        "units",
        "i",
        "length",
        "units",
        "leadSurrogate",
        "codePoint",
        "leadSurrogate",
        "units",
        "leadSurrogate",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "i",
        "i",
        "byteArray",
        "i",
        "byteArray",
        "units",
        "i",
        "i",
        "units",
        "c",
        "i",
        "hi",
        "c",
        "lo",
        "c",
        "byteArray",
        "lo",
        "byteArray",
        "hi",
        "byteArray",
        "base64",
        "base64clean",
        "src",
        "dst",
        "offset",
        "length",
        "i",
        "length",
        "i",
        "i",
        "offset",
        "dst",
        "i",
        "src",
        "dst",
        "i",
        "offset",
        "src",
        "i",
        "i",
        "decodeURIComponent",
        "err",
        "_dereq_",
        "exports",
        "exports",
        "Uint8Array",
        "Uint8Array",
        "elt",
        "elt",
        "code",
        "PLUS",
        "code",
        "PLUS_URL_SAFE",
        "code",
        "SLASH",
        "code",
        "SLASH_URL_SAFE",
        "code",
        "NUMBER",
        "code",
        "NUMBER",
        "code",
        "NUMBER",
        "code",
        "UPPER",
        "code",
        "UPPER",
        "code",
        "LOWER",
        "code",
        "LOWER",
        "b64",
        "b64",
        "b64",
        "placeHolders",
        "b64",
        "len",
        "b64",
        "len",
        "arr",
        "Arr",
        "b64",
        "placeHolders",
        "l",
        "placeHolders",
        "b64",
        "b64",
        "v",
        "arr",
        "L",
        "v",
        "i",
        "j",
        "i",
        "l",
        "i",
        "j",
        "tmp",
        "decode",
        "b64",
        "i",
        "decode",
        "b64",
        "i",
        "decode",
        "b64",
        "i",
        "decode",
        "b64",
        "i",
        "push",
        "tmp",
        "push",
        "tmp",
        "push",
        "tmp",
        "placeHolders",
        "tmp",
        "decode",
        "b64",
        "i",
        "decode",
        "b64",
        "i",
        "push",
        "tmp",
        "placeHolders",
        "tmp",
        "decode",
        "b64",
        "i",
        "decode",
        "b64",
        "i",
        "decode",
        "b64",
        "i",
        "push",
        "tmp",
        "push",
        "tmp",
        "arr",
        "uint8",
        "uint8",
        "num",
        "lookup",
        "num",
        "num",
        "encode",
        "num",
        "encode",
        "num",
        "encode",
        "num",
        "encode",
        "num",
        "i",
        "length",
        "uint8",
        "extraBytes",
        "i",
        "length",
        "i",
        "temp",
        "uint8",
        "i",
        "uint8",
        "i",
        "uint8",
        "i",
        "output",
        "tripletToBase64",
        "temp",
        "extraBytes",
        "temp",
        "uint8",
        "uint8",
        "output",
        "encode",
        "temp",
        "output",
        "encode",
        "temp",
        "output",
        "temp",
        "uint8",
        "uint8",
        "uint8",
        "uint8",
        "output",
        "encode",
        "temp",
        "output",
        "encode",
        "temp",
        "output",
        "encode",
        "temp",
        "output",
        "output",
        "exports",
        "b64ToByteArray",
        "exports",
        "uint8ToBase64",
        "exports",
        "exports",
        "_dereq_",
        "exports",
        "exports",
        "buffer",
        "offset",
        "isLE",
        "mLen",
        "nBytes",
        "nBytes",
        "mLen",
        "eLen",
        "eMax",
        "isLE",
        "nBytes",
        "isLE",
        "buffer",
        "offset",
        "i",
        "i",
        "d",
        "e",
        "s",
        "nBits",
        "s",
        "nBits",
        "nBits",
        "eLen",
        "nBits",
        "e",
        "e",
        "buffer",
        "offset",
        "i",
        "i",
        "d",
        "nBits",
        "m",
        "e",
        "nBits",
        "e",
        "nBits",
        "nBits",
        "mLen",
        "nBits",
        "m",
        "m",
        "buffer",
        "offset",
        "i",
        "i",
        "d",
        "nBits",
        "e",
        "e",
        "eBias",
        "e",
        "eMax",
        "m",
        "NaN",
        "s",
        "Infinity",
        "m",
        "m",
        "mLen",
        "e",
        "e",
        "eBias",
        "s",
        "m",
        "e",
        "mLen",
        "exports",
        "buffer",
        "value",
        "offset",
        "isLE",
        "mLen",
        "nBytes",
        "nBytes",
        "mLen",
        "eLen",
        "eMax",
        "mLen",
        "isLE",
        "nBytes",
        "isLE",
        "value",
        "value",
        "value",
        "value",
        "value",
        "isNaN",
        "value",
        "value",
        "Infinity",
        "m",
        "isNaN",
        "value",
        "e",
        "eMax",
        "e",
        "value",
        "value",
        "c",
        "e",
        "e",
        "c",
        "e",
        "eBias",
        "value",
        "rt",
        "c",
        "value",
        "rt",
        "eBias",
        "value",
        "c",
        "e",
        "c",
        "e",
        "eBias",
        "eMax",
        "m",
        "e",
        "eMax",
        "e",
        "eBias",
        "m",
        "value",
        "c",
        "mLen",
        "e",
        "e",
        "eBias",
        "m",
        "value",
        "eBias",
        "mLen",
        "e",
        "mLen",
        "buffer",
        "offset",
        "i",
        "m",
        "i",
        "d",
        "m",
        "mLen",
        "e",
        "e",
        "mLen",
        "m",
        "eLen",
        "mLen",
        "eLen",
        "buffer",
        "offset",
        "i",
        "e",
        "i",
        "d",
        "e",
        "eLen",
        "buffer",
        "offset",
        "i",
        "d",
        "s",
        "_dereq_",
        "exports",
        "isArray",
        "val",
        "val",
        "val",
        "_dereq_",
        "exports",
        "process",
        "parts",
        "allowAboveRoot",
        "parts",
        "i",
        "i",
        "parts",
        "i",
        "last",
        "parts",
        "i",
        "last",
        "parts",
        "i",
        "up",
        "up",
        "parts",
        "i",
        "up",
        "allowAboveRoot",
        "up",
        "up",
        "parts",
        "parts",
        "filename",
        "splitPathRe",
        "filename",
        "exports",
        "arguments",
        "i",
        "resolvedAbsolute",
        "i",
        "i",
        "arguments",
        "i",
        "process",
        "path",
        "path",
        "resolvedPath",
        "path",
        "resolvedPath",
        "resolvedAbsolute",
        "path",
        "resolvedPath",
        "normalizeArray",
        "resolvedPath",
        "p",
        "p",
        "resolvedAbsolute",
        "resolvedAbsolute",
        "resolvedPath",
        "exports",
        "path",
        "exports",
        "path",
        "substr",
        "path",
        "path",
        "normalizeArray",
        "path",
        "p",
        "p",
        "isAbsolute",
        "path",
        "isAbsolute",
        "path",
        "path",
        "trailingSlash",
        "path",
        "isAbsolute",
        "path",
        "exports",
        "path",
        "path",
        "exports",
        "arguments",
        "exports",
        "paths",
        "p",
        "index",
        "p",
        "p",
        "exports",
        "to",
        "exports",
        "to",
        "exports",
        "to",
        "arr",
        "start",
        "arr",
        "start",
        "arr",
        "start",
        "arr",
        "end",
        "end",
        "arr",
        "end",
        "start",
        "end",
        "arr",
        "start",
        "end",
        "start",
        "trim",
        "trim",
        "to",
        "fromParts",
        "toParts",
        "i",
        "length",
        "i",
        "fromParts",
        "i",
        "toParts",
        "i",
        "samePartsLength",
        "i",
        "i",
        "fromParts",
        "i",
        "outputParts",
        "outputParts",
        "outputParts",
        "toParts",
        "samePartsLength",
        "outputParts",
        "exports",
        "exports",
        "exports",
        "path",
        "splitPath",
        "path",
        "result",
        "result",
        "root",
        "dir",
        "dir",
        "dir",
        "dir",
        "dir",
        "root",
        "dir",
        "exports",
        "path",
        "ext",
        "splitPath",
        "path",
        "ext",
        "f",
        "ext",
        "ext",
        "f",
        "f",
        "f",
        "ext",
        "f",
        "exports",
        "path",
        "splitPath",
        "path",
        "xs",
        "f",
        "xs",
        "xs",
        "f",
        "i",
        "xs",
        "i",
        "f",
        "xs",
        "i",
        "i",
        "xs",
        "res",
        "xs",
        "i",
        "res",
        "start",
        "len",
        "start",
        "len",
        "start",
        "len",
        "start",
        "start",
        "start",
        "start",
        "len",
        "_dereq_",
        "_dereq_",
        "exports",
        "draining",
        "draining",
        "queue",
        "len",
        "currentQueue",
        "queue",
        "queue",
        "i",
        "len",
        "currentQueue",
        "i",
        "len",
        "queue",
        "draining",
        "process",
        "fun",
        "queue",
        "fun",
        "draining",
        "setTimeout",
        "drainQueue",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "name",
        "process",
        "process",
        "dir",
        "process",
        "_dereq_",
        "exports",
        "root",
        "factory",
        "define",
        "define",
        "define",
        "factory",
        "exports",
        "factory",
        "exports",
        "factory",
        "root",
        "exports",
        "Token",
        "TokenName",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "FnExprTokens",
        "Syntax",
        "PropertyKind",
        "ClassPropertyType",
        "Messages",
        "Regex",
        "condition",
        "message",
        "condition",
        "message",
        "StringMap",
        "key",
        "key",
        "key",
        "key",
        "StringMap",
        "key",
        "value",
        "key",
        "key",
        "key",
        "value",
        "StringMap",
        "key",
        "key",
        "key",
        "key",
        "StringMap",
        "key",
        "key",
        "key",
        "key",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "Regex",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "Regex",
        "ch",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "strict",
        "isStrictModeReservedWord",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "value",
        "start",
        "end",
        "loc",
        "start",
        "state",
        "start",
        "state",
        "start",
        "comment",
        "value",
        "extra",
        "comment",
        "start",
        "end",
        "extra",
        "comment",
        "loc",
        "extra",
        "comment",
        "extra",
        "extra",
        "comment",
        "extra",
        "comment",
        "start",
        "index",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "index",
        "isLineTerminator",
        "ch",
        "extra",
        "comment",
        "source",
        "start",
        "index",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "addComment",
        "comment",
        "start",
        "index",
        "loc",
        "ch",
        "source",
        "index",
        "index",
        "lineNumber",
        "lineStart",
        "index",
        "extra",
        "comment",
        "source",
        "start",
        "index",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "addComment",
        "comment",
        "start",
        "index",
        "loc",
        "extra",
        "start",
        "index",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isLineTerminator",
        "ch",
        "ch",
        "source",
        "index",
        "index",
        "lineNumber",
        "index",
        "lineStart",
        "index",
        "index",
        "length",
        "throwError",
        "Messages",
        "ch",
        "source",
        "index",
        "index",
        "index",
        "extra",
        "comment",
        "source",
        "start",
        "index",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "addComment",
        "comment",
        "start",
        "index",
        "loc",
        "index",
        "index",
        "throwError",
        "Messages",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isWhiteSpace",
        "ch",
        "index",
        "isLineTerminator",
        "ch",
        "index",
        "ch",
        "source",
        "index",
        "index",
        "lineNumber",
        "lineStart",
        "index",
        "ch",
        "ch",
        "source",
        "index",
        "ch",
        "index",
        "index",
        "skipSingleLineComment",
        "ch",
        "index",
        "index",
        "skipMultiLineComment",
        "prefix",
        "len",
        "prefix",
        "i",
        "i",
        "len",
        "i",
        "index",
        "length",
        "isHexDigit",
        "source",
        "index",
        "ch",
        "source",
        "index",
        "code",
        "code",
        "ch",
        "code",
        "ch",
        "source",
        "index",
        "code",
        "ch",
        "throwError",
        "Messages",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isHexDigit",
        "ch",
        "code",
        "code",
        "ch",
        "code",
        "ch",
        "throwError",
        "Messages",
        "code",
        "code",
        "cu1",
        "code",
        "cu2",
        "code",
        "cu1",
        "cu2",
        "ch",
        "source",
        "index",
        "id",
        "ch",
        "ch",
        "source",
        "index",
        "throwError",
        "Messages",
        "index",
        "ch",
        "scanHexEscape",
        "ch",
        "ch",
        "isIdentifierStart",
        "ch",
        "throwError",
        "Messages",
        "id",
        "ch",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isIdentifierPart",
        "ch",
        "index",
        "id",
        "ch",
        "ch",
        "id",
        "id",
        "id",
        "source",
        "index",
        "throwError",
        "Messages",
        "index",
        "ch",
        "scanHexEscape",
        "ch",
        "ch",
        "isIdentifierPart",
        "ch",
        "throwError",
        "Messages",
        "id",
        "ch",
        "id",
        "start",
        "index",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "ch",
        "index",
        "start",
        "getEscapedIdentifier",
        "isIdentifierPart",
        "ch",
        "index",
        "source",
        "start",
        "index",
        "start",
        "index",
        "id",
        "source",
        "index",
        "getEscapedIdentifier",
        "getIdentifier",
        "id",
        "Token",
        "isKeyword",
        "id",
        "Token",
        "id",
        "Token",
        "id",
        "id",
        "Token",
        "Token",
        "id",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "source",
        "index",
        "source",
        "index",
        "state",
        "state",
        "code",
        "index",
        "Token",
        "code",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "code",
        "index",
        "extra",
        "code",
        "extra",
        "extra",
        "code",
        "extra",
        "extra",
        "Token",
        "code",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "code2",
        "source",
        "index",
        "code2",
        "code",
        "index",
        "Token",
        "code",
        "code2",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "index",
        "source",
        "index",
        "index",
        "Token",
        "source",
        "start",
        "index",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "ch2",
        "source",
        "index",
        "ch3",
        "source",
        "index",
        "ch4",
        "source",
        "index",
        "ch1",
        "ch2",
        "ch3",
        "ch4",
        "index",
        "Token",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "ch1",
        "ch2",
        "ch3",
        "state",
        "index",
        "Token",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "ch1",
        "ch2",
        "ch3",
        "index",
        "Token",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "ch1",
        "ch2",
        "ch3",
        "index",
        "Token",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "ch1",
        "ch2",
        "ch3",
        "index",
        "Token",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "ch1",
        "ch2",
        "ch1",
        "state",
        "index",
        "Token",
        "ch1",
        "ch2",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "ch1",
        "ch2",
        "index",
        "Token",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "ch1",
        "index",
        "Token",
        "ch1",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "ch1",
        "index",
        "Token",
        "ch1",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "throwError",
        "Messages",
        "start",
        "index",
        "length",
        "isHexDigit",
        "source",
        "index",
        "number",
        "source",
        "index",
        "number",
        "throwError",
        "Messages",
        "isIdentifierStart",
        "source",
        "index",
        "throwError",
        "Messages",
        "Token",
        "parseInt",
        "number",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "start",
        "number",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "ch",
        "ch",
        "number",
        "source",
        "index",
        "number",
        "throwError",
        "Messages",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isIdentifierStart",
        "ch",
        "isDecimalDigit",
        "ch",
        "throwError",
        "Messages",
        "Token",
        "parseInt",
        "number",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "prefix",
        "start",
        "isOctalDigit",
        "prefix",
        "octal",
        "number",
        "source",
        "index",
        "octal",
        "index",
        "number",
        "index",
        "length",
        "isOctalDigit",
        "source",
        "index",
        "number",
        "source",
        "index",
        "octal",
        "number",
        "throwError",
        "Messages",
        "isIdentifierStart",
        "source",
        "index",
        "isDecimalDigit",
        "source",
        "index",
        "throwError",
        "Messages",
        "Token",
        "parseInt",
        "number",
        "octal",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "ch",
        "source",
        "index",
        "isDecimalDigit",
        "ch",
        "ch",
        "start",
        "index",
        "number",
        "ch",
        "number",
        "source",
        "index",
        "ch",
        "source",
        "index",
        "number",
        "ch",
        "ch",
        "index",
        "scanHexLiteral",
        "start",
        "ch",
        "ch",
        "index",
        "scanBinaryLiteral",
        "start",
        "ch",
        "ch",
        "isOctalDigit",
        "ch",
        "scanOctalLiteral",
        "ch",
        "start",
        "ch",
        "isDecimalDigit",
        "ch",
        "throwError",
        "Messages",
        "isDecimalDigit",
        "source",
        "index",
        "number",
        "source",
        "index",
        "ch",
        "source",
        "index",
        "ch",
        "number",
        "source",
        "index",
        "isDecimalDigit",
        "source",
        "index",
        "number",
        "source",
        "index",
        "ch",
        "source",
        "index",
        "ch",
        "ch",
        "number",
        "source",
        "index",
        "ch",
        "source",
        "index",
        "ch",
        "ch",
        "number",
        "source",
        "index",
        "isDecimalDigit",
        "source",
        "index",
        "isDecimalDigit",
        "source",
        "index",
        "number",
        "source",
        "index",
        "throwError",
        "Messages",
        "isIdentifierStart",
        "source",
        "index",
        "throwError",
        "Messages",
        "Token",
        "parseFloat",
        "number",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "quote",
        "source",
        "index",
        "quote",
        "quote",
        "start",
        "index",
        "index",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "ch",
        "quote",
        "quote",
        "ch",
        "ch",
        "source",
        "index",
        "ch",
        "isLineTerminator",
        "ch",
        "ch",
        "source",
        "index",
        "index",
        "scanUnicodeCodePointEscape",
        "restore",
        "index",
        "unescaped",
        "scanHexEscape",
        "ch",
        "unescaped",
        "unescaped",
        "index",
        "restore",
        "ch",
        "isOctalDigit",
        "ch",
        "code",
        "ch",
        "code",
        "octal",
        "index",
        "length",
        "isOctalDigit",
        "source",
        "index",
        "octal",
        "code",
        "code",
        "source",
        "index",
        "ch",
        "index",
        "length",
        "isOctalDigit",
        "source",
        "index",
        "code",
        "code",
        "source",
        "index",
        "code",
        "ch",
        "lineNumber",
        "ch",
        "source",
        "index",
        "index",
        "lineStart",
        "index",
        "isLineTerminator",
        "ch",
        "ch",
        "quote",
        "throwError",
        "Messages",
        "Token",
        "octal",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "terminated",
        "tail",
        "start",
        "index",
        "index",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "ch",
        "tail",
        "terminated",
        "ch",
        "source",
        "index",
        "index",
        "terminated",
        "cooked",
        "ch",
        "ch",
        "ch",
        "source",
        "index",
        "isLineTerminator",
        "ch",
        "ch",
        "cooked",
        "cooked",
        "cooked",
        "source",
        "index",
        "index",
        "cooked",
        "scanUnicodeCodePointEscape",
        "restore",
        "index",
        "unescaped",
        "scanHexEscape",
        "ch",
        "unescaped",
        "cooked",
        "unescaped",
        "index",
        "restore",
        "cooked",
        "ch",
        "cooked",
        "cooked",
        "cooked",
        "isOctalDigit",
        "ch",
        "code",
        "ch",
        "code",
        "octal",
        "index",
        "length",
        "isOctalDigit",
        "source",
        "index",
        "octal",
        "code",
        "code",
        "source",
        "index",
        "ch",
        "index",
        "length",
        "isOctalDigit",
        "source",
        "index",
        "code",
        "code",
        "source",
        "index",
        "cooked",
        "code",
        "cooked",
        "ch",
        "lineNumber",
        "ch",
        "source",
        "index",
        "index",
        "lineStart",
        "index",
        "isLineTerminator",
        "ch",
        "lineNumber",
        "ch",
        "source",
        "index",
        "index",
        "lineStart",
        "index",
        "cooked",
        "cooked",
        "ch",
        "terminated",
        "throwError",
        "Messages",
        "Token",
        "cooked",
        "source",
        "start",
        "index",
        "tail",
        "tail",
        "octal",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "option",
        "lookahead",
        "skipComment",
        "startsWith",
        "option",
        "source",
        "index",
        "startsWith",
        "throwError",
        "Messages",
        "template",
        "scanTemplate",
        "peek",
        "template",
        "pattern",
        "flags",
        "flags",
        "tmp",
        "tmp",
        "$0",
        "$1",
        "parseInt",
        "$1",
        "throwError",
        "Messages",
        "value",
        "tmp",
        "e",
        "throwError",
        "Messages",
        "pattern",
        "flags",
        "exception",
        "ch",
        "source",
        "index",
        "ch",
        "source",
        "index",
        "classMarker",
        "terminated",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "ch",
        "ch",
        "ch",
        "source",
        "index",
        "isLineTerminator",
        "ch",
        "throwError",
        "Messages",
        "ch",
        "isLineTerminator",
        "ch",
        "throwError",
        "Messages",
        "classMarker",
        "ch",
        "classMarker",
        "ch",
        "terminated",
        "ch",
        "classMarker",
        "terminated",
        "throwError",
        "Messages",
        "body",
        "body",
        "flags",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isIdentifierPart",
        "ch",
        "index",
        "ch",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "ch",
        "index",
        "restore",
        "index",
        "ch",
        "scanHexEscape",
        "ch",
        "flags",
        "ch",
        "restore",
        "index",
        "restore",
        "source",
        "restore",
        "index",
        "restore",
        "flags",
        "throwErrorTolerant",
        "Messages",
        "throwErrorTolerant",
        "Messages",
        "flags",
        "ch",
        "ch",
        "flags",
        "lookahead",
        "skipComment",
        "start",
        "index",
        "body",
        "scanRegExpBody",
        "flags",
        "scanRegExpFlags",
        "value",
        "testRegExp",
        "body",
        "flags",
        "extra",
        "Token",
        "value",
        "body",
        "flags",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "body",
        "flags",
        "value",
        "body",
        "flags",
        "start",
        "index",
        "token",
        "token",
        "Token",
        "token",
        "Token",
        "token",
        "Token",
        "token",
        "Token",
        "prevToken",
        "extra",
        "extra",
        "prevToken",
        "scanRegExp",
        "prevToken",
        "prevToken",
        "checkToken",
        "extra",
        "extra",
        "checkToken",
        "checkToken",
        "checkToken",
        "checkToken",
        "checkToken",
        "checkToken",
        "scanRegExp",
        "scanPunctuator",
        "prevToken",
        "extra",
        "extra",
        "extra",
        "extra",
        "checkToken",
        "extra",
        "extra",
        "checkToken",
        "scanPunctuator",
        "extra",
        "extra",
        "extra",
        "extra",
        "checkToken",
        "extra",
        "extra",
        "checkToken",
        "scanRegExp",
        "scanPunctuator",
        "FnExprTokens",
        "checkToken",
        "scanPunctuator",
        "scanRegExp",
        "scanRegExp",
        "prevToken",
        "prevToken",
        "scanRegExp",
        "scanPunctuator",
        "state",
        "skipComment",
        "index",
        "length",
        "Token",
        "lineNumber",
        "lineStart",
        "index",
        "index",
        "state",
        "advanceJSXChild",
        "ch",
        "source",
        "index",
        "ch",
        "ch",
        "ch",
        "scanPunctuator",
        "ch",
        "ch",
        "state",
        "scanJSXStringLiteral",
        "scanStringLiteral",
        "state",
        "isJSXIdentifierStart",
        "ch",
        "scanJSXIdentifier",
        "ch",
        "scanTemplate",
        "isIdentifierStart",
        "ch",
        "scanIdentifier",
        "ch",
        "isDecimalDigit",
        "source",
        "index",
        "scanNumericLiteral",
        "scanPunctuator",
        "isDecimalDigit",
        "ch",
        "scanNumericLiteral",
        "extra",
        "ch",
        "advanceSlash",
        "scanPunctuator",
        "token",
        "lookahead",
        "index",
        "token",
        "lineNumber",
        "token",
        "lineStart",
        "token",
        "lookahead",
        "advance",
        "index",
        "token",
        "lineNumber",
        "token",
        "lineStart",
        "token",
        "token",
        "pos",
        "index",
        "line",
        "lineNumber",
        "start",
        "lineStart",
        "lookahead",
        "advance",
        "index",
        "pos",
        "lineNumber",
        "line",
        "lineStart",
        "start",
        "adv",
        "extra",
        "extra",
        "advance",
        "pos",
        "index",
        "line",
        "lineNumber",
        "start",
        "lineStart",
        "lookahead",
        "lookahead",
        "adv",
        "index",
        "lookahead",
        "lineNumber",
        "lookahead",
        "lineStart",
        "lookahead",
        "result",
        "adv",
        "index",
        "pos",
        "lineNumber",
        "line",
        "lineStart",
        "start",
        "result",
        "token",
        "index",
        "token",
        "lineNumber",
        "token",
        "lineStart",
        "token",
        "lookahead",
        "token",
        "extra",
        "extra",
        "skipComment",
        "index",
        "lineNumber",
        "index",
        "lineStart",
        "extra",
        "extra",
        "index",
        "lineNumber",
        "index",
        "lineStart",
        "node",
        "extra",
        "bottomRight",
        "bottomRight",
        "node",
        "Syntax",
        "node",
        "extra",
        "extra",
        "node",
        "trailingComments",
        "extra",
        "extra",
        "extra",
        "last",
        "last",
        "last",
        "node",
        "trailingComments",
        "last",
        "last",
        "last",
        "last",
        "last",
        "node",
        "lastChild",
        "last",
        "last",
        "bottomRight",
        "lastChild",
        "lastChild",
        "lastChild",
        "lastChild",
        "node",
        "node",
        "lastChild",
        "lastChild",
        "extra",
        "extra",
        "extra",
        "node",
        "node",
        "extra",
        "extra",
        "trailingComments",
        "node",
        "trailingComments",
        "bottomRight",
        "node",
        "marker",
        "node",
        "extra",
        "node",
        "marker",
        "index",
        "extra",
        "node",
        "marker",
        "marker",
        "lineNumber",
        "index",
        "lineStart",
        "node",
        "node",
        "extra",
        "processComment",
        "node",
        "node",
        "SyntaxTreeDelegate",
        "node",
        "node",
        "elements",
        "Syntax",
        "elements",
        "left",
        "right",
        "Syntax",
        "left",
        "right",
        "left",
        "right",
        "Syntax",
        "Syntax",
        "left",
        "right",
        "body",
        "Syntax",
        "body",
        "label",
        "Syntax",
        "label",
        "callee",
        "args",
        "Syntax",
        "callee",
        "args",
        "param",
        "body",
        "Syntax",
        "param",
        "body",
        "test",
        "consequent",
        "alternate",
        "Syntax",
        "test",
        "consequent",
        "alternate",
        "label",
        "Syntax",
        "label",
        "Syntax",
        "body",
        "test",
        "Syntax",
        "body",
        "test",
        "Syntax",
        "expression",
        "Syntax",
        "expression",
        "init",
        "test",
        "update",
        "body",
        "Syntax",
        "init",
        "test",
        "update",
        "body",
        "left",
        "right",
        "body",
        "Syntax",
        "left",
        "right",
        "body",
        "left",
        "right",
        "body",
        "Syntax",
        "left",
        "right",
        "body",
        "id",
        "defaults",
        "body",
        "rest",
        "generator",
        "expression",
        "isAsync",
        "returnType",
        "typeParameters",
        "Syntax",
        "id",
        "defaults",
        "body",
        "rest",
        "generator",
        "expression",
        "returnType",
        "typeParameters",
        "isAsync",
        "funDecl",
        "funDecl",
        "id",
        "defaults",
        "body",
        "rest",
        "generator",
        "expression",
        "isAsync",
        "returnType",
        "typeParameters",
        "Syntax",
        "id",
        "defaults",
        "body",
        "rest",
        "generator",
        "expression",
        "returnType",
        "typeParameters",
        "isAsync",
        "funExpr",
        "funExpr",
        "name",
        "Syntax",
        "name",
        "typeAnnotation",
        "Syntax",
        "typeAnnotation",
        "expression",
        "typeAnnotation",
        "Syntax",
        "expression",
        "typeAnnotation",
        "returnType",
        "rest",
        "typeParameters",
        "Syntax",
        "returnType",
        "rest",
        "typeParameters",
        "name",
        "typeAnnotation",
        "optional",
        "Syntax",
        "name",
        "typeAnnotation",
        "optional",
        "typeAnnotation",
        "Syntax",
        "typeAnnotation",
        "elementType",
        "Syntax",
        "elementType",
        "id",
        "typeParameters",
        "Syntax",
        "id",
        "typeParameters",
        "qualification",
        "id",
        "Syntax",
        "qualification",
        "id",
        "Syntax",
        "Syntax",
        "Syntax",
        "Syntax",
        "Syntax",
        "Syntax",
        "token",
        "Syntax",
        "token",
        "source",
        "token",
        "token",
        "Syntax",
        "argument",
        "Syntax",
        "argument",
        "types",
        "Syntax",
        "types",
        "properties",
        "indexers",
        "callProperties",
        "Syntax",
        "properties",
        "indexers",
        "callProperties",
        "id",
        "key",
        "value",
        "isStatic",
        "Syntax",
        "id",
        "key",
        "value",
        "isStatic",
        "value",
        "isStatic",
        "Syntax",
        "value",
        "isStatic",
        "key",
        "value",
        "optional",
        "isStatic",
        "Syntax",
        "key",
        "value",
        "optional",
        "isStatic",
        "types",
        "Syntax",
        "types",
        "types",
        "Syntax",
        "types",
        "id",
        "typeParameters",
        "right",
        "Syntax",
        "id",
        "typeParameters",
        "right",
        "id",
        "typeParameters",
        "body",
        "extended",
        "Syntax",
        "id",
        "typeParameters",
        "body",
        "extended",
        "id",
        "typeParameters",
        "Syntax",
        "id",
        "typeParameters",
        "id",
        "Syntax",
        "id",
        "id",
        "Syntax",
        "id",
        "id",
        "body",
        "Syntax",
        "id",
        "body",
        "name",
        "value",
        "Syntax",
        "name",
        "value",
        "argument",
        "Syntax",
        "argument",
        "name",
        "Syntax",
        "name",
        "name",
        "Syntax",
        "name",
        "property",
        "Syntax",
        "property",
        "openingElement",
        "closingElement",
        "children",
        "Syntax",
        "openingElement",
        "closingElement",
        "children",
        "Syntax",
        "expression",
        "Syntax",
        "expression",
        "name",
        "attributes",
        "selfClosing",
        "Syntax",
        "name",
        "selfClosing",
        "attributes",
        "name",
        "Syntax",
        "name",
        "test",
        "consequent",
        "alternate",
        "Syntax",
        "test",
        "consequent",
        "alternate",
        "label",
        "body",
        "Syntax",
        "label",
        "body",
        "token",
        "Syntax",
        "token",
        "source",
        "token",
        "token",
        "token",
        "token",
        "accessor",
        "property",
        "Syntax",
        "accessor",
        "property",
        "callee",
        "args",
        "Syntax",
        "callee",
        "args",
        "properties",
        "Syntax",
        "properties",
        "argument",
        "Syntax",
        "argument",
        "body",
        "Syntax",
        "body",
        "kind",
        "key",
        "value",
        "method",
        "shorthand",
        "computed",
        "Syntax",
        "key",
        "value",
        "kind",
        "method",
        "shorthand",
        "computed",
        "argument",
        "Syntax",
        "argument",
        "expressions",
        "Syntax",
        "expressions",
        "test",
        "consequent",
        "Syntax",
        "test",
        "consequent",
        "discriminant",
        "cases",
        "Syntax",
        "discriminant",
        "cases",
        "Syntax",
        "argument",
        "Syntax",
        "argument",
        "block",
        "guardedHandlers",
        "handlers",
        "finalizer",
        "Syntax",
        "block",
        "guardedHandlers",
        "handlers",
        "finalizer",
        "argument",
        "Syntax",
        "argument",
        "Syntax",
        "argument",
        "declarations",
        "kind",
        "Syntax",
        "declarations",
        "kind",
        "id",
        "init",
        "Syntax",
        "id",
        "init",
        "test",
        "body",
        "Syntax",
        "test",
        "body",
        "body",
        "Syntax",
        "body",
        "value",
        "tail",
        "Syntax",
        "value",
        "tail",
        "quasis",
        "expressions",
        "Syntax",
        "quasis",
        "expressions",
        "argument",
        "Syntax",
        "argument",
        "argument",
        "Syntax",
        "argument",
        "tag",
        "quasi",
        "Syntax",
        "tag",
        "quasi",
        "defaults",
        "body",
        "rest",
        "expression",
        "isAsync",
        "Syntax",
        "defaults",
        "body",
        "rest",
        "expression",
        "isAsync",
        "arrowExpr",
        "arrowExpr",
        "propertyType",
        "kind",
        "key",
        "value",
        "computed",
        "Syntax",
        "key",
        "value",
        "kind",
        "propertyType",
        "ClassPropertyType",
        "computed",
        "key",
        "typeAnnotation",
        "computed",
        "isStatic",
        "Syntax",
        "key",
        "typeAnnotation",
        "computed",
        "isStatic",
        "body",
        "Syntax",
        "body",
        "id",
        "typeParameters",
        "Syntax",
        "id",
        "typeParameters",
        "id",
        "superClass",
        "body",
        "typeParameters",
        "superTypeParameters",
        "implemented",
        "Syntax",
        "id",
        "superClass",
        "body",
        "typeParameters",
        "superTypeParameters",
        "implemented",
        "id",
        "superClass",
        "body",
        "typeParameters",
        "superTypeParameters",
        "implemented",
        "Syntax",
        "id",
        "superClass",
        "body",
        "typeParameters",
        "superTypeParameters",
        "implemented",
        "token",
        "Syntax",
        "token",
        "source",
        "token",
        "token",
        "id",
        "name",
        "Syntax",
        "id",
        "name",
        "Syntax",
        "id",
        "Syntax",
        "id",
        "id",
        "Syntax",
        "id",
        "isDefault",
        "declaration",
        "specifiers",
        "src",
        "Syntax",
        "isDefault",
        "declaration",
        "specifiers",
        "src",
        "id",
        "name",
        "Syntax",
        "id",
        "name",
        "specifiers",
        "src",
        "isType",
        "Syntax",
        "specifiers",
        "src",
        "isType",
        "argument",
        "dlg",
        "Syntax",
        "argument",
        "dlg",
        "argument",
        "Syntax",
        "argument",
        "blocks",
        "body",
        "Syntax",
        "blocks",
        "body",
        "pos",
        "index",
        "line",
        "lineNumber",
        "start",
        "lineStart",
        "skipComment",
        "found",
        "lineNumber",
        "line",
        "index",
        "pos",
        "lineNumber",
        "line",
        "lineStart",
        "start",
        "found",
        "token",
        "messageFormat",
        "arguments",
        "messageFormat",
        "whole",
        "idx",
        "idx",
        "args",
        "args",
        "idx",
        "token",
        "error",
        "token",
        "msg",
        "error",
        "token",
        "error",
        "token",
        "error",
        "token",
        "lineStart",
        "error",
        "lineNumber",
        "msg",
        "error",
        "index",
        "error",
        "lineNumber",
        "error",
        "index",
        "lineStart",
        "error",
        "msg",
        "error",
        "throwError",
        "arguments",
        "e",
        "extra",
        "extra",
        "e",
        "e",
        "token",
        "token",
        "Token",
        "throwError",
        "token",
        "Messages",
        "token",
        "Token",
        "throwError",
        "token",
        "Messages",
        "token",
        "Token",
        "token",
        "Token",
        "throwError",
        "token",
        "Messages",
        "token",
        "Token",
        "throwError",
        "token",
        "Messages",
        "token",
        "Token",
        "isFutureReservedWord",
        "token",
        "throwError",
        "token",
        "Messages",
        "strict",
        "isStrictModeReservedWord",
        "token",
        "throwErrorTolerant",
        "token",
        "Messages",
        "throwError",
        "token",
        "Messages",
        "token",
        "token",
        "Token",
        "throwError",
        "token",
        "Messages",
        "token",
        "throwError",
        "token",
        "Messages",
        "token",
        "value",
        "lex",
        "token",
        "Token",
        "token",
        "value",
        "throwUnexpected",
        "token",
        "keyword",
        "contextual",
        "lex",
        "token",
        "contextual",
        "Token",
        "Token",
        "token",
        "keyword",
        "throwUnexpected",
        "token",
        "keyword",
        "expectKeyword",
        "keyword",
        "value",
        "lookahead",
        "Token",
        "lookahead",
        "value",
        "keyword",
        "contextual",
        "contextual",
        "Token",
        "Token",
        "lookahead",
        "expectedType",
        "lookahead",
        "keyword",
        "keyword",
        "matchKeyword",
        "keyword",
        "lookahead",
        "Token",
        "op",
        "lookahead",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "state",
        "matchKeyword",
        "strict",
        "matchContextualKeyword",
        "lex",
        "matches",
        "peekLineTerminator",
        "rewind",
        "backtrackToken",
        "matches",
        "state",
        "matchContextualKeyword",
        "source",
        "index",
        "lex",
        "line",
        "lineNumber",
        "skipComment",
        "lineNumber",
        "line",
        "index",
        "oldIndex",
        "lineNumber",
        "oldLineNumber",
        "lineStart",
        "oldLineStart",
        "lookahead",
        "oldLookahead",
        "match",
        "lex",
        "lookahead",
        "Token",
        "match",
        "throwUnexpected",
        "lookahead",
        "expr",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "expr",
        "isLeftHandSide",
        "expr",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "markerCreate",
        "expect",
        "match",
        "lookahead",
        "lookahead",
        "Token",
        "possiblecomprehension",
        "throwError",
        "Messages",
        "matchKeyword",
        "tmp",
        "parseForStatement",
        "tmp",
        "tmp",
        "Syntax",
        "tmp",
        "Syntax",
        "tmp",
        "throwError",
        "Messages",
        "blocks",
        "tmp",
        "lookahead",
        "lookahead",
        "Token",
        "possiblecomprehension",
        "throwError",
        "Messages",
        "expectKeyword",
        "expect",
        "parseExpression",
        "expect",
        "lookahead",
        "lookahead",
        "Token",
        "possiblecomprehension",
        "lex",
        "elements",
        "tmp",
        "parseSpreadOrAssignmentExpression",
        "elements",
        "tmp",
        "tmp",
        "tmp",
        "Syntax",
        "match",
        "throwError",
        "Messages",
        "match",
        "matchKeyword",
        "matchKeyword",
        "expect",
        "possiblecomprehension",
        "expect",
        "blocks",
        "throwError",
        "Messages",
        "blocks",
        "elements",
        "throwError",
        "Messages",
        "markerApply",
        "marker",
        "blocks",
        "elements",
        "markerApply",
        "marker",
        "elements",
        "options",
        "markerCreate",
        "previousStrict",
        "strict",
        "previousYieldAllowed",
        "state",
        "state",
        "options",
        "previousAwaitAllowed",
        "state",
        "state",
        "options",
        "options",
        "defaults",
        "options",
        "body",
        "parseConciseBody",
        "options",
        "strict",
        "isRestrictedWord",
        "throwErrorTolerant",
        "options",
        "Messages",
        "strict",
        "previousStrict",
        "state",
        "previousYieldAllowed",
        "state",
        "previousAwaitAllowed",
        "markerApply",
        "marker",
        "defaults",
        "body",
        "options",
        "options",
        "body",
        "Syntax",
        "options",
        "options",
        "options",
        "options",
        "previousStrict",
        "strict",
        "strict",
        "tmp",
        "parseParams",
        "tmp",
        "throwErrorTolerant",
        "tmp",
        "tmp",
        "method",
        "parsePropertyFunction",
        "tmp",
        "tmp",
        "tmp",
        "options",
        "options",
        "tmp",
        "options",
        "strict",
        "previousStrict",
        "method",
        "markerCreate",
        "lex",
        "token",
        "Token",
        "token",
        "Token",
        "strict",
        "token",
        "throwErrorTolerant",
        "token",
        "Messages",
        "markerApply",
        "marker",
        "token",
        "token",
        "Token",
        "token",
        "marker",
        "markerCreate",
        "propertyKey",
        "parseAssignmentExpression",
        "result",
        "markerApply",
        "marker",
        "propertyKey",
        "expect",
        "result",
        "markerApply",
        "marker",
        "token",
        "markerCreate",
        "token",
        "lookahead",
        "computed",
        "token",
        "token",
        "Token",
        "token",
        "Token",
        "computed",
        "matchAsync",
        "id",
        "parseObjectPropertyKey",
        "match",
        "lex",
        "markerApply",
        "marker",
        "id",
        "parseAssignmentExpression",
        "computed",
        "match",
        "match",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "markerApply",
        "marker",
        "id",
        "parsePropertyMethodFunction",
        "typeParameters",
        "computed",
        "token",
        "computed",
        "lookahead",
        "key",
        "parseObjectPropertyKey",
        "expect",
        "expect",
        "match",
        "returnType",
        "parseTypeAnnotation",
        "markerApply",
        "marker",
        "key",
        "parsePropertyFunction",
        "returnType",
        "computed",
        "token",
        "computed",
        "lookahead",
        "key",
        "parseObjectPropertyKey",
        "expect",
        "token",
        "lookahead",
        "param",
        "parseTypeAnnotatableIdentifier",
        "expect",
        "match",
        "returnType",
        "parseTypeAnnotation",
        "markerApply",
        "marker",
        "key",
        "parsePropertyFunction",
        "param",
        "token",
        "returnType",
        "computed",
        "token",
        "computed",
        "lookahead",
        "key",
        "parseObjectPropertyKey",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "markerApply",
        "marker",
        "key",
        "parsePropertyMethodFunction",
        "typeParameters",
        "computed",
        "computed",
        "throwUnexpected",
        "lookahead",
        "markerApply",
        "marker",
        "id",
        "id",
        "token",
        "Token",
        "token",
        "Token",
        "match",
        "throwUnexpected",
        "token",
        "lex",
        "computed",
        "lookahead",
        "Token",
        "lookahead",
        "id",
        "parseObjectPropertyKey",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "match",
        "throwUnexpected",
        "lex",
        "markerApply",
        "marker",
        "id",
        "parsePropertyMethodFunction",
        "typeParameters",
        "computed",
        "key",
        "parseObjectPropertyKey",
        "match",
        "lex",
        "markerApply",
        "marker",
        "key",
        "parseAssignmentExpression",
        "match",
        "match",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "markerApply",
        "marker",
        "key",
        "parsePropertyMethodFunction",
        "typeParameters",
        "throwUnexpected",
        "lex",
        "markerCreate",
        "expect",
        "markerApply",
        "marker",
        "parseAssignmentExpression",
        "key",
        "key",
        "Syntax",
        "key",
        "toString",
        "key",
        "StringMap",
        "markerCreate",
        "expect",
        "match",
        "match",
        "property",
        "parseObjectSpreadProperty",
        "property",
        "parseObjectProperty",
        "property",
        "Syntax",
        "name",
        "property",
        "name",
        "toString",
        "property",
        "kind",
        "property",
        "PropertyKind",
        "property",
        "PropertyKind",
        "PropertyKind",
        "name",
        "storedKind",
        "name",
        "storedKind",
        "PropertyKind",
        "strict",
        "kind",
        "PropertyKind",
        "throwErrorTolerant",
        "Messages",
        "kind",
        "PropertyKind",
        "throwErrorTolerant",
        "Messages",
        "kind",
        "PropertyKind",
        "throwErrorTolerant",
        "Messages",
        "storedKind",
        "kind",
        "throwErrorTolerant",
        "Messages",
        "name",
        "storedKind",
        "kind",
        "name",
        "kind",
        "properties",
        "property",
        "match",
        "expect",
        "expect",
        "markerApply",
        "marker",
        "properties",
        "option",
        "markerCreate",
        "scanTemplateElement",
        "option",
        "strict",
        "token",
        "throwError",
        "token",
        "Messages",
        "markerApply",
        "marker",
        "token",
        "token",
        "token",
        "markerCreate",
        "quasi",
        "parseTemplateElement",
        "quasis",
        "quasi",
        "expressions",
        "quasi",
        "expressions",
        "parseExpression",
        "quasi",
        "parseTemplateElement",
        "quasis",
        "quasi",
        "markerApply",
        "marker",
        "quasis",
        "expressions",
        "expect",
        "state",
        "marker",
        "markerCreate",
        "expr",
        "parseExpression",
        "match",
        "typeAnnotation",
        "parseTypeAnnotation",
        "expr",
        "markerApply",
        "marker",
        "expr",
        "typeAnnotation",
        "expect",
        "expr",
        "matchAsync",
        "token",
        "lookahead2",
        "token",
        "Token",
        "token",
        "lookahead",
        "Token",
        "marker",
        "markerCreate",
        "markerApply",
        "marker",
        "lex",
        "Token",
        "Token",
        "strict",
        "lookahead",
        "throwErrorTolerant",
        "lookahead",
        "Messages",
        "marker",
        "markerCreate",
        "markerApply",
        "marker",
        "lex",
        "Token",
        "matchKeyword",
        "marker",
        "markerCreate",
        "lex",
        "markerApply",
        "marker",
        "matchKeyword",
        "parseFunctionExpression",
        "matchKeyword",
        "parseClassExpression",
        "matchKeyword",
        "marker",
        "markerCreate",
        "lex",
        "markerApply",
        "marker",
        "Token",
        "marker",
        "markerCreate",
        "token",
        "lex",
        "token",
        "token",
        "markerApply",
        "marker",
        "token",
        "Token",
        "marker",
        "markerCreate",
        "token",
        "lex",
        "token",
        "markerApply",
        "marker",
        "token",
        "match",
        "parseArrayInitialiser",
        "match",
        "parseObjectInitialiser",
        "match",
        "parseGroupExpression",
        "match",
        "match",
        "marker",
        "markerCreate",
        "expr",
        "scanRegExp",
        "peek",
        "markerApply",
        "marker",
        "expr",
        "Token",
        "parseTemplateLiteral",
        "match",
        "parseJSXElement",
        "throwUnexpected",
        "lex",
        "expect",
        "match",
        "index",
        "length",
        "arg",
        "parseSpreadOrAssignmentExpression",
        "args",
        "arg",
        "match",
        "arg",
        "Syntax",
        "throwError",
        "Messages",
        "expect",
        "expect",
        "args",
        "match",
        "markerCreate",
        "lex",
        "markerApply",
        "marker",
        "parseAssignmentExpression",
        "parseAssignmentExpression",
        "markerCreate",
        "lex",
        "isIdentifierName",
        "token",
        "throwUnexpected",
        "token",
        "markerApply",
        "marker",
        "token",
        "expect",
        "parseNonComputedProperty",
        "expect",
        "expr",
        "parseExpression",
        "expect",
        "expr",
        "markerCreate",
        "expectKeyword",
        "callee",
        "parseLeftHandSideExpression",
        "args",
        "match",
        "parseArguments",
        "markerApply",
        "marker",
        "callee",
        "args",
        "markerCreate",
        "expr",
        "matchKeyword",
        "parseNewExpression",
        "parsePrimaryExpression",
        "match",
        "match",
        "match",
        "lookahead",
        "Token",
        "match",
        "args",
        "parseArguments",
        "expr",
        "markerApply",
        "marker",
        "expr",
        "args",
        "match",
        "expr",
        "markerApply",
        "marker",
        "expr",
        "parseComputedMember",
        "match",
        "expr",
        "markerApply",
        "marker",
        "expr",
        "parseNonComputedMember",
        "expr",
        "markerApply",
        "marker",
        "expr",
        "parseTemplateLiteral",
        "expr",
        "markerCreate",
        "expr",
        "matchKeyword",
        "parseNewExpression",
        "parsePrimaryExpression",
        "match",
        "match",
        "lookahead",
        "Token",
        "match",
        "expr",
        "markerApply",
        "marker",
        "expr",
        "parseComputedMember",
        "match",
        "expr",
        "markerApply",
        "marker",
        "expr",
        "parseNonComputedMember",
        "expr",
        "markerApply",
        "marker",
        "expr",
        "parseTemplateLiteral",
        "expr",
        "markerCreate",
        "parseLeftHandSideExpressionAllowCall",
        "lookahead",
        "Token",
        "expr",
        "match",
        "match",
        "peekLineTerminator",
        "strict",
        "expr",
        "Syntax",
        "isRestrictedWord",
        "expr",
        "throwErrorTolerant",
        "Messages",
        "isLeftHandSide",
        "expr",
        "throwError",
        "Messages",
        "token",
        "lex",
        "expr",
        "markerApply",
        "marker",
        "token",
        "expr",
        "expr",
        "lookahead",
        "Token",
        "lookahead",
        "Token",
        "parsePostfixExpression",
        "match",
        "match",
        "marker",
        "markerCreate",
        "token",
        "lex",
        "expr",
        "parseUnaryExpression",
        "strict",
        "expr",
        "Syntax",
        "isRestrictedWord",
        "expr",
        "throwErrorTolerant",
        "Messages",
        "isLeftHandSide",
        "expr",
        "throwError",
        "Messages",
        "markerApply",
        "marker",
        "token",
        "expr",
        "match",
        "match",
        "match",
        "match",
        "marker",
        "markerCreate",
        "token",
        "lex",
        "expr",
        "parseUnaryExpression",
        "markerApply",
        "marker",
        "token",
        "expr",
        "matchKeyword",
        "matchKeyword",
        "matchKeyword",
        "marker",
        "markerCreate",
        "token",
        "lex",
        "expr",
        "parseUnaryExpression",
        "expr",
        "markerApply",
        "marker",
        "token",
        "expr",
        "strict",
        "expr",
        "expr",
        "Syntax",
        "throwErrorTolerant",
        "Messages",
        "expr",
        "parsePostfixExpression",
        "token",
        "allowIn",
        "token",
        "Token",
        "token",
        "Token",
        "token",
        "prec",
        "prec",
        "prec",
        "prec",
        "prec",
        "prec",
        "prec",
        "prec",
        "allowIn",
        "prec",
        "prec",
        "prec",
        "prec",
        "previousAllowIn",
        "state",
        "state",
        "marker",
        "markerCreate",
        "left",
        "parseUnaryExpression",
        "token",
        "lookahead",
        "prec",
        "binaryPrecedence",
        "token",
        "previousAllowIn",
        "prec",
        "left",
        "token",
        "prec",
        "lex",
        "markers",
        "marker",
        "markerCreate",
        "right",
        "parseUnaryExpression",
        "stack",
        "left",
        "token",
        "right",
        "prec",
        "binaryPrecedence",
        "lookahead",
        "previousAllowIn",
        "stack",
        "prec",
        "stack",
        "stack",
        "right",
        "stack",
        "stack",
        "left",
        "stack",
        "expr",
        "left",
        "right",
        "markers",
        "marker",
        "markers",
        "markerApply",
        "marker",
        "expr",
        "stack",
        "expr",
        "markers",
        "marker",
        "token",
        "lex",
        "token",
        "prec",
        "stack",
        "token",
        "markers",
        "markerCreate",
        "expr",
        "parseUnaryExpression",
        "stack",
        "expr",
        "state",
        "previousAllowIn",
        "i",
        "stack",
        "expr",
        "stack",
        "i",
        "markers",
        "i",
        "expr",
        "stack",
        "i",
        "stack",
        "i",
        "expr",
        "i",
        "marker",
        "markers",
        "markerApply",
        "marker",
        "expr",
        "expr",
        "markerCreate",
        "expr",
        "parseBinaryExpression",
        "match",
        "lex",
        "previousAllowIn",
        "state",
        "state",
        "consequent",
        "parseAssignmentExpression",
        "state",
        "previousAllowIn",
        "expect",
        "alternate",
        "parseAssignmentExpression",
        "expr",
        "markerApply",
        "marker",
        "expr",
        "consequent",
        "alternate",
        "expr",
        "expr",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "i",
        "len",
        "expr",
        "i",
        "len",
        "i",
        "property",
        "expr",
        "i",
        "property",
        "Syntax",
        "i",
        "len",
        "throwError",
        "Messages",
        "reinterpretAsAssignmentBindingPattern",
        "property",
        "property",
        "throwError",
        "Messages",
        "reinterpretAsAssignmentBindingPattern",
        "property",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "i",
        "len",
        "expr",
        "i",
        "len",
        "i",
        "element",
        "expr",
        "i",
        "element",
        "reinterpretAsAssignmentBindingPattern",
        "element",
        "expr",
        "Syntax",
        "isRestrictedWord",
        "expr",
        "throwError",
        "Messages",
        "expr",
        "Syntax",
        "reinterpretAsAssignmentBindingPattern",
        "expr",
        "expr",
        "Syntax",
        "throwError",
        "Messages",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "throwError",
        "Messages",
        "options",
        "expr",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "i",
        "len",
        "expr",
        "i",
        "len",
        "i",
        "property",
        "expr",
        "i",
        "property",
        "Syntax",
        "i",
        "len",
        "throwError",
        "Messages",
        "reinterpretAsDestructuredParameter",
        "options",
        "property",
        "property",
        "throwError",
        "Messages",
        "reinterpretAsDestructuredParameter",
        "options",
        "property",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "i",
        "len",
        "expr",
        "i",
        "len",
        "i",
        "element",
        "expr",
        "i",
        "element",
        "reinterpretAsDestructuredParameter",
        "options",
        "element",
        "expr",
        "Syntax",
        "validateParam",
        "options",
        "expr",
        "expr",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "throwError",
        "Messages",
        "validateParam",
        "options",
        "expr",
        "expr",
        "throwError",
        "Messages",
        "expressions",
        "defaults",
        "defaultCount",
        "rest",
        "options",
        "StringMap",
        "i",
        "len",
        "expressions",
        "i",
        "len",
        "i",
        "param",
        "expressions",
        "i",
        "param",
        "Syntax",
        "param",
        "defaults",
        "validateParam",
        "options",
        "param",
        "param",
        "param",
        "Syntax",
        "param",
        "Syntax",
        "reinterpretAsDestructuredParameter",
        "options",
        "param",
        "param",
        "defaults",
        "param",
        "Syntax",
        "i",
        "len",
        "param",
        "Syntax",
        "throwError",
        "Messages",
        "reinterpretAsDestructuredParameter",
        "options",
        "param",
        "rest",
        "param",
        "param",
        "Syntax",
        "param",
        "defaults",
        "param",
        "defaultCount",
        "validateParam",
        "options",
        "param",
        "param",
        "options",
        "Messages",
        "throwError",
        "strict",
        "options",
        "options",
        "options",
        "defaultCount",
        "defaults",
        "defaults",
        "rest",
        "options",
        "options",
        "options",
        "options",
        "marker",
        "expect",
        "previousStrict",
        "strict",
        "previousYieldAllowed",
        "state",
        "state",
        "previousAwaitAllowed",
        "state",
        "state",
        "options",
        "body",
        "parseConciseBody",
        "strict",
        "options",
        "throwError",
        "options",
        "options",
        "strict",
        "options",
        "throwErrorTolerant",
        "options",
        "options",
        "strict",
        "previousStrict",
        "state",
        "previousYieldAllowed",
        "state",
        "previousAwaitAllowed",
        "markerApply",
        "marker",
        "options",
        "options",
        "body",
        "options",
        "body",
        "Syntax",
        "options",
        "matchYield",
        "parseYieldExpression",
        "matchAwait",
        "parseAwaitExpression",
        "oldParenthesizedCount",
        "state",
        "marker",
        "markerCreate",
        "matchAsyncFuncExprOrDecl",
        "parseFunctionExpression",
        "matchAsync",
        "possiblyAsync",
        "lex",
        "match",
        "token",
        "lookahead2",
        "token",
        "Token",
        "token",
        "token",
        "parseParams",
        "match",
        "throwUnexpected",
        "lex",
        "possiblyAsync",
        "parseArrowFunctionExpression",
        "marker",
        "startsWithParen",
        "token",
        "lookahead",
        "possiblyAsync",
        "match",
        "token",
        "Token",
        "possiblyAsync",
        "rewind",
        "backtrackToken",
        "expr",
        "parseConditionalExpression",
        "match",
        "state",
        "oldParenthesizedCount",
        "state",
        "oldParenthesizedCount",
        "expr",
        "Syntax",
        "reinterpretAsCoverFormalsList",
        "expr",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "startsWithParen",
        "throwUnexpected",
        "lex",
        "reinterpretAsCoverFormalsList",
        "expr",
        "expr",
        "Syntax",
        "reinterpretAsCoverFormalsList",
        "expr",
        "possiblyAsync",
        "parseArrowFunctionExpression",
        "marker",
        "possiblyAsync",
        "possiblyAsync",
        "rewind",
        "backtrackToken",
        "expr",
        "parseConditionalExpression",
        "matchAssign",
        "strict",
        "expr",
        "Syntax",
        "isRestrictedWord",
        "expr",
        "throwErrorTolerant",
        "token",
        "Messages",
        "match",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "reinterpretAsAssignmentBindingPattern",
        "expr",
        "isLeftHandSide",
        "expr",
        "throwError",
        "Messages",
        "expr",
        "markerApply",
        "marker",
        "lex",
        "expr",
        "parseAssignmentExpression",
        "expr",
        "marker",
        "markerCreate",
        "expr",
        "parseAssignmentExpression",
        "expressions",
        "expr",
        "match",
        "index",
        "length",
        "match",
        "lex",
        "expr",
        "parseSpreadOrAssignmentExpression",
        "expressions",
        "expr",
        "expr",
        "Syntax",
        "spreadFound",
        "match",
        "throwError",
        "Messages",
        "sequence",
        "markerApply",
        "marker",
        "expressions",
        "spreadFound",
        "lookahead2",
        "throwError",
        "Messages",
        "sequence",
        "expr",
        "index",
        "length",
        "match",
        "statement",
        "parseSourceElement",
        "statement",
        "statement",
        "markerCreate",
        "expect",
        "block",
        "parseStatementList",
        "expect",
        "markerApply",
        "marker",
        "block",
        "markerCreate",
        "expect",
        "match",
        "paramTypes",
        "parseTypeAnnotatableIdentifier",
        "match",
        "expect",
        "expect",
        "markerApply",
        "marker",
        "paramTypes",
        "markerCreate",
        "state",
        "state",
        "expect",
        "match",
        "paramTypes",
        "parseType",
        "match",
        "expect",
        "expect",
        "state",
        "oldInType",
        "markerApply",
        "marker",
        "paramTypes",
        "marker",
        "isStatic",
        "expect",
        "id",
        "parseObjectPropertyKey",
        "expect",
        "key",
        "parseType",
        "expect",
        "expect",
        "value",
        "parseType",
        "markerApply",
        "marker",
        "id",
        "key",
        "value",
        "isStatic",
        "marker",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "expect",
        "lookahead",
        "Token",
        "parseFunctionTypeParam",
        "match",
        "expect",
        "match",
        "lex",
        "rest",
        "parseFunctionTypeParam",
        "expect",
        "expect",
        "returnType",
        "parseType",
        "markerApply",
        "marker",
        "returnType",
        "rest",
        "typeParameters",
        "marker",
        "isStatic",
        "key",
        "value",
        "parseObjectTypeMethodish",
        "marker",
        "markerApply",
        "marker",
        "key",
        "value",
        "optional",
        "isStatic",
        "marker",
        "isStatic",
        "markerCreate",
        "markerApply",
        "marker",
        "parseObjectTypeMethodish",
        "valueMarker",
        "isStatic",
        "allowStatic",
        "expect",
        "match",
        "marker",
        "markerCreate",
        "matchStatic",
        "strict",
        "matchKeyword",
        "matchContextualKeyword",
        "allowStatic",
        "matchStatic",
        "token",
        "lex",
        "isStatic",
        "match",
        "indexers",
        "parseObjectTypeIndexer",
        "marker",
        "isStatic",
        "match",
        "match",
        "callProperties",
        "parseObjectTypeCallProperty",
        "marker",
        "allowStatic",
        "isStatic",
        "match",
        "propertyKey",
        "markerApply",
        "marker",
        "token",
        "throwErrorTolerant",
        "token",
        "Messages",
        "propertyKey",
        "parseObjectPropertyKey",
        "match",
        "match",
        "properties",
        "parseObjectTypeMethod",
        "marker",
        "isStatic",
        "propertyKey",
        "match",
        "lex",
        "optional",
        "expect",
        "propertyTypeAnnotation",
        "parseType",
        "properties",
        "markerApply",
        "marker",
        "propertyKey",
        "propertyTypeAnnotation",
        "optional",
        "isStatic",
        "match",
        "lex",
        "match",
        "throwUnexpected",
        "lookahead",
        "expect",
        "properties",
        "indexers",
        "callProperties",
        "markerCreate",
        "typeIdentifier",
        "parseVariableIdentifier",
        "match",
        "expect",
        "typeIdentifier",
        "markerApply",
        "marker",
        "typeIdentifier",
        "parseVariableIdentifier",
        "match",
        "typeParameters",
        "parseTypeParameterInstantiation",
        "markerApply",
        "marker",
        "typeIdentifier",
        "typeParameters",
        "markerCreate",
        "expectKeyword",
        "markerApply",
        "marker",
        "markerCreate",
        "expectKeyword",
        "argument",
        "parsePrimaryType",
        "markerApply",
        "marker",
        "argument",
        "markerCreate",
        "expect",
        "index",
        "length",
        "match",
        "types",
        "parseType",
        "match",
        "expect",
        "expect",
        "markerApply",
        "marker",
        "types",
        "markerCreate",
        "name",
        "parseVariableIdentifier",
        "match",
        "lex",
        "optional",
        "expect",
        "typeAnnotation",
        "parseType",
        "markerApply",
        "marker",
        "name",
        "typeAnnotation",
        "optional",
        "lookahead",
        "Token",
        "ret",
        "parseFunctionTypeParam",
        "match",
        "expect",
        "match",
        "lex",
        "ret",
        "parseFunctionTypeParam",
        "ret",
        "markerCreate",
        "lookahead",
        "Token",
        "lookahead",
        "lex",
        "markerApply",
        "marker",
        "lex",
        "markerApply",
        "marker",
        "lex",
        "markerApply",
        "marker",
        "lex",
        "markerApply",
        "marker",
        "markerApply",
        "marker",
        "parseGenericType",
        "Token",
        "lookahead",
        "markerApply",
        "marker",
        "parseObjectType",
        "parseTupleType",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "expect",
        "tmp",
        "parseFunctionTypeParams",
        "tmp",
        "rest",
        "tmp",
        "expect",
        "expect",
        "returnType",
        "parseType",
        "markerApply",
        "marker",
        "returnType",
        "rest",
        "typeParameters",
        "lex",
        "match",
        "match",
        "lookahead",
        "Token",
        "token",
        "lookahead2",
        "isGroupedType",
        "token",
        "token",
        "isGroupedType",
        "isGroupedType",
        "parseType",
        "expect",
        "match",
        "throwError",
        "Messages",
        "tmp",
        "parseFunctionTypeParams",
        "tmp",
        "rest",
        "tmp",
        "expect",
        "expect",
        "returnType",
        "parseType",
        "markerApply",
        "marker",
        "returnType",
        "rest",
        "Token",
        "lookahead",
        "markerApply",
        "marker",
        "parseVoidType",
        "markerApply",
        "marker",
        "parseTypeofType",
        "Token",
        "token",
        "lex",
        "token",
        "throwError",
        "token",
        "Messages",
        "markerApply",
        "marker",
        "token",
        "throwUnexpected",
        "lookahead",
        "markerCreate",
        "parsePrimaryType",
        "match",
        "expect",
        "expect",
        "markerApply",
        "marker",
        "t",
        "t",
        "markerCreate",
        "match",
        "lex",
        "markerApply",
        "marker",
        "parsePrefixType",
        "parsePostfixType",
        "markerCreate",
        "parsePrefixType",
        "types",
        "match",
        "lex",
        "types",
        "parsePrefixType",
        "types",
        "markerApply",
        "marker",
        "types",
        "markerCreate",
        "parseIntersectionType",
        "types",
        "match",
        "lex",
        "types",
        "parseIntersectionType",
        "types",
        "markerApply",
        "marker",
        "types",
        "state",
        "state",
        "parseUnionType",
        "state",
        "oldInType",
        "markerCreate",
        "expect",
        "parseType",
        "markerApply",
        "marker",
        "markerCreate",
        "lex",
        "token",
        "Token",
        "throwUnexpected",
        "token",
        "markerApply",
        "marker",
        "token",
        "requireTypeAnnotation",
        "canBeOptionalParam",
        "markerCreate",
        "parseVariableIdentifier",
        "canBeOptionalParam",
        "match",
        "expect",
        "isOptionalParam",
        "requireTypeAnnotation",
        "match",
        "ident",
        "parseTypeAnnotation",
        "ident",
        "markerApply",
        "marker",
        "ident",
        "isOptionalParam",
        "ident",
        "ident",
        "markerApply",
        "marker",
        "ident",
        "ident",
        "kind",
        "markerCreate",
        "markerCreate",
        "match",
        "id",
        "parseObjectInitialiser",
        "reinterpretAsAssignmentBindingPattern",
        "id",
        "match",
        "id",
        "parseTypeAnnotation",
        "markerApply",
        "typeAnnotationMarker",
        "id",
        "match",
        "id",
        "parseArrayInitialiser",
        "reinterpretAsAssignmentBindingPattern",
        "id",
        "match",
        "id",
        "parseTypeAnnotation",
        "markerApply",
        "typeAnnotationMarker",
        "id",
        "id",
        "state",
        "parseNonComputedProperty",
        "parseTypeAnnotatableIdentifier",
        "strict",
        "isRestrictedWord",
        "id",
        "throwErrorTolerant",
        "Messages",
        "kind",
        "match",
        "throwError",
        "Messages",
        "expect",
        "init",
        "parseAssignmentExpression",
        "match",
        "lex",
        "init",
        "parseAssignmentExpression",
        "markerApply",
        "marker",
        "id",
        "init",
        "kind",
        "parseVariableDeclaration",
        "kind",
        "match",
        "lex",
        "index",
        "length",
        "markerCreate",
        "expectKeyword",
        "declarations",
        "parseVariableDeclarationList",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "declarations",
        "kind",
        "markerCreate",
        "expectKeyword",
        "kind",
        "declarations",
        "parseVariableDeclarationList",
        "kind",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "declarations",
        "kind",
        "markerCreate",
        "lookahead",
        "Token",
        "throwError",
        "Messages",
        "specifier",
        "lookahead",
        "lex",
        "markerApply",
        "marker",
        "specifier",
        "markerCreate",
        "expect",
        "markerApply",
        "marker",
        "markerCreate",
        "matchKeyword",
        "lex",
        "id",
        "markerApply",
        "marker",
        "id",
        "parseVariableIdentifier",
        "matchContextualKeyword",
        "lex",
        "name",
        "parseNonComputedProperty",
        "markerApply",
        "marker",
        "id",
        "name",
        "markerCreate",
        "expectKeyword",
        "matchKeyword",
        "lex",
        "matchKeyword",
        "matchKeyword",
        "possibleIdentifierToken",
        "lookahead2",
        "isIdentifierName",
        "possibleIdentifierToken",
        "sourceElement",
        "parseSourceElement",
        "markerApply",
        "marker",
        "sourceElement",
        "sourceElement",
        "lookahead",
        "markerApply",
        "marker",
        "parseClassExpression",
        "markerApply",
        "marker",
        "parseFunctionExpression",
        "matchContextualKeyword",
        "throwError",
        "Messages",
        "lookahead",
        "match",
        "declaration",
        "parseObjectInitialiser",
        "match",
        "declaration",
        "parseArrayInitialiser",
        "declaration",
        "parseAssignmentExpression",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "declaration",
        "lookahead",
        "Token",
        "matchContextualKeyword",
        "lookahead",
        "markerApply",
        "marker",
        "parseSourceElement",
        "specifiers",
        "match",
        "specifiers",
        "parseExportBatchSpecifier",
        "matchContextualKeyword",
        "throwError",
        "lookahead",
        "Messages",
        "Messages",
        "lookahead",
        "lex",
        "src",
        "parseModuleSpecifier",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "specifiers",
        "src",
        "expect",
        "match",
        "isExportFromIdentifier",
        "isExportFromIdentifier",
        "matchKeyword",
        "specifiers",
        "parseExportSpecifier",
        "match",
        "lex",
        "expect",
        "matchContextualKeyword",
        "lex",
        "src",
        "parseModuleSpecifier",
        "consumeSemicolon",
        "isExportFromIdentifier",
        "throwError",
        "lookahead",
        "Messages",
        "Messages",
        "lookahead",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "declaration",
        "specifiers",
        "src",
        "markerCreate",
        "id",
        "parseNonComputedProperty",
        "matchContextualKeyword",
        "lex",
        "name",
        "parseVariableIdentifier",
        "markerApply",
        "marker",
        "id",
        "name",
        "expect",
        "match",
        "specifiers",
        "parseImportSpecifier",
        "match",
        "lex",
        "expect",
        "specifiers",
        "markerCreate",
        "id",
        "parseNonComputedProperty",
        "markerApply",
        "marker",
        "id",
        "markerCreate",
        "expect",
        "matchContextualKeyword",
        "throwError",
        "Messages",
        "lex",
        "id",
        "parseNonComputedProperty",
        "markerApply",
        "marker",
        "id",
        "markerCreate",
        "expectKeyword",
        "matchContextualKeyword",
        "token2",
        "lookahead2",
        "token2",
        "Token",
        "token2",
        "token2",
        "Token",
        "token2",
        "token2",
        "isType",
        "lex",
        "specifiers",
        "lookahead",
        "Token",
        "src",
        "parseModuleSpecifier",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "specifiers",
        "src",
        "isType",
        "matchKeyword",
        "isIdentifierName",
        "lookahead",
        "specifiers",
        "parseImportDefaultSpecifier",
        "match",
        "lex",
        "match",
        "specifiers",
        "parseImportNamespaceSpecifier",
        "match",
        "specifiers",
        "specifiers",
        "parseNamedImports",
        "matchContextualKeyword",
        "throwError",
        "lookahead",
        "Messages",
        "Messages",
        "lookahead",
        "lex",
        "src",
        "parseModuleSpecifier",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "specifiers",
        "src",
        "isType",
        "markerCreate",
        "expect",
        "markerApply",
        "marker",
        "markerCreate",
        "parseExpression",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "expr",
        "markerCreate",
        "expectKeyword",
        "expect",
        "test",
        "parseExpression",
        "expect",
        "consequent",
        "parseStatement",
        "matchKeyword",
        "lex",
        "alternate",
        "parseStatement",
        "alternate",
        "markerApply",
        "marker",
        "test",
        "consequent",
        "alternate",
        "markerCreate",
        "expectKeyword",
        "oldInIteration",
        "state",
        "state",
        "body",
        "parseStatement",
        "state",
        "oldInIteration",
        "expectKeyword",
        "expect",
        "test",
        "parseExpression",
        "expect",
        "match",
        "lex",
        "markerApply",
        "marker",
        "body",
        "test",
        "markerCreate",
        "expectKeyword",
        "expect",
        "test",
        "parseExpression",
        "expect",
        "oldInIteration",
        "state",
        "state",
        "body",
        "parseStatement",
        "state",
        "oldInIteration",
        "markerApply",
        "marker",
        "test",
        "body",
        "markerCreate",
        "lex",
        "parseVariableDeclarationList",
        "markerApply",
        "marker",
        "declarations",
        "token",
        "opts",
        "markerCreate",
        "init",
        "test",
        "update",
        "expectKeyword",
        "matchContextualKeyword",
        "throwError",
        "Messages",
        "expect",
        "match",
        "lex",
        "matchKeyword",
        "matchKeyword",
        "matchKeyword",
        "state",
        "init",
        "parseForVariableDeclaration",
        "state",
        "init",
        "matchKeyword",
        "matchContextualKeyword",
        "lookahead",
        "init",
        "init",
        "lex",
        "left",
        "init",
        "right",
        "parseExpression",
        "init",
        "state",
        "init",
        "parseExpression",
        "state",
        "matchContextualKeyword",
        "lex",
        "left",
        "init",
        "right",
        "parseExpression",
        "init",
        "matchKeyword",
        "isAssignableLeftHandSide",
        "init",
        "throwError",
        "Messages",
        "lex",
        "left",
        "init",
        "right",
        "parseExpression",
        "init",
        "left",
        "expect",
        "left",
        "match",
        "test",
        "parseExpression",
        "expect",
        "match",
        "update",
        "parseExpression",
        "expect",
        "oldInIteration",
        "state",
        "state",
        "opts",
        "opts",
        "body",
        "parseStatement",
        "state",
        "oldInIteration",
        "left",
        "markerApply",
        "marker",
        "init",
        "test",
        "update",
        "body",
        "markerApply",
        "marker",
        "left",
        "right",
        "body",
        "markerApply",
        "marker",
        "left",
        "right",
        "body",
        "markerCreate",
        "expectKeyword",
        "source",
        "index",
        "lex",
        "state",
        "throwError",
        "Messages",
        "markerApply",
        "marker",
        "peekLineTerminator",
        "state",
        "throwError",
        "Messages",
        "markerApply",
        "marker",
        "lookahead",
        "Token",
        "label",
        "parseVariableIdentifier",
        "state",
        "label",
        "throwError",
        "Messages",
        "label",
        "consumeSemicolon",
        "label",
        "state",
        "throwError",
        "Messages",
        "markerApply",
        "marker",
        "label",
        "markerCreate",
        "expectKeyword",
        "source",
        "index",
        "lex",
        "state",
        "state",
        "throwError",
        "Messages",
        "markerApply",
        "marker",
        "peekLineTerminator",
        "state",
        "state",
        "throwError",
        "Messages",
        "markerApply",
        "marker",
        "lookahead",
        "Token",
        "label",
        "parseVariableIdentifier",
        "state",
        "label",
        "throwError",
        "Messages",
        "label",
        "consumeSemicolon",
        "label",
        "state",
        "state",
        "throwError",
        "Messages",
        "markerApply",
        "marker",
        "label",
        "markerCreate",
        "expectKeyword",
        "state",
        "throwErrorTolerant",
        "Messages",
        "source",
        "index",
        "isIdentifierStart",
        "source",
        "index",
        "argument",
        "parseExpression",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "argument",
        "peekLineTerminator",
        "markerApply",
        "marker",
        "match",
        "match",
        "lookahead",
        "Token",
        "argument",
        "parseExpression",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "argument",
        "markerCreate",
        "strict",
        "throwErrorTolerant",
        "Messages",
        "expectKeyword",
        "expect",
        "parseExpression",
        "expect",
        "body",
        "parseStatement",
        "markerApply",
        "marker",
        "body",
        "markerCreate",
        "matchKeyword",
        "lex",
        "test",
        "expectKeyword",
        "test",
        "parseExpression",
        "expect",
        "index",
        "length",
        "match",
        "matchKeyword",
        "matchKeyword",
        "sourceElement",
        "parseSourceElement",
        "sourceElement",
        "consequent",
        "sourceElement",
        "markerApply",
        "marker",
        "test",
        "consequent",
        "markerCreate",
        "expectKeyword",
        "expect",
        "discriminant",
        "parseExpression",
        "expect",
        "expect",
        "cases",
        "match",
        "lex",
        "markerApply",
        "marker",
        "discriminant",
        "cases",
        "oldInSwitch",
        "state",
        "state",
        "defaultFound",
        "index",
        "length",
        "match",
        "clause",
        "parseSwitchCase",
        "clause",
        "defaultFound",
        "throwError",
        "Messages",
        "defaultFound",
        "cases",
        "clause",
        "state",
        "oldInSwitch",
        "expect",
        "markerApply",
        "marker",
        "discriminant",
        "cases",
        "markerCreate",
        "expectKeyword",
        "peekLineTerminator",
        "throwError",
        "Messages",
        "argument",
        "parseExpression",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "argument",
        "markerCreate",
        "expectKeyword",
        "expect",
        "match",
        "throwUnexpected",
        "lookahead",
        "param",
        "parseExpression",
        "strict",
        "param",
        "Syntax",
        "isRestrictedWord",
        "param",
        "throwErrorTolerant",
        "Messages",
        "expect",
        "body",
        "parseBlock",
        "markerApply",
        "marker",
        "param",
        "body",
        "markerCreate",
        "expectKeyword",
        "block",
        "parseBlock",
        "matchKeyword",
        "handlers",
        "parseCatchClause",
        "matchKeyword",
        "lex",
        "finalizer",
        "parseBlock",
        "handlers",
        "finalizer",
        "throwError",
        "Messages",
        "markerApply",
        "marker",
        "block",
        "handlers",
        "finalizer",
        "markerCreate",
        "expectKeyword",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "lookahead",
        "Token",
        "throwUnexpected",
        "lookahead",
        "Token",
        "lookahead",
        "parseEmptyStatement",
        "parseBlock",
        "parseExpressionStatement",
        "Token",
        "lookahead",
        "parseBreakStatement",
        "parseContinueStatement",
        "parseDebuggerStatement",
        "parseDoWhileStatement",
        "parseForStatement",
        "parseFunctionDeclaration",
        "parseClassDeclaration",
        "parseIfStatement",
        "parseReturnStatement",
        "parseSwitchStatement",
        "parseThrowStatement",
        "parseTryStatement",
        "parseVariableStatement",
        "parseWhileStatement",
        "parseWithStatement",
        "matchAsyncFuncExprOrDecl",
        "parseFunctionDeclaration",
        "marker",
        "markerCreate",
        "expr",
        "parseExpression",
        "expr",
        "Syntax",
        "match",
        "lex",
        "state",
        "expr",
        "throwError",
        "Messages",
        "expr",
        "state",
        "expr",
        "labeledBody",
        "parseStatement",
        "state",
        "expr",
        "markerApply",
        "marker",
        "expr",
        "labeledBody",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "expr",
        "match",
        "parseFunctionSourceElements",
        "parseAssignmentExpression",
        "markerCreate",
        "expect",
        "index",
        "length",
        "lookahead",
        "Token",
        "token",
        "lookahead",
        "sourceElement",
        "parseSourceElement",
        "sourceElements",
        "sourceElement",
        "sourceElement",
        "Syntax",
        "directive",
        "source",
        "token",
        "token",
        "directive",
        "strict",
        "firstRestricted",
        "throwErrorTolerant",
        "firstRestricted",
        "Messages",
        "firstRestricted",
        "token",
        "firstRestricted",
        "token",
        "oldLabelSet",
        "state",
        "oldInIteration",
        "state",
        "oldInSwitch",
        "state",
        "oldInFunctionBody",
        "state",
        "oldParenthesizedCount",
        "state",
        "state",
        "StringMap",
        "state",
        "state",
        "state",
        "state",
        "index",
        "length",
        "match",
        "sourceElement",
        "parseSourceElement",
        "sourceElement",
        "sourceElements",
        "sourceElement",
        "expect",
        "state",
        "oldLabelSet",
        "state",
        "oldInIteration",
        "state",
        "oldInSwitch",
        "state",
        "oldInFunctionBody",
        "state",
        "oldParenthesizedCount",
        "markerApply",
        "marker",
        "sourceElements",
        "options",
        "param",
        "name",
        "strict",
        "isRestrictedWord",
        "name",
        "options",
        "param",
        "options",
        "Messages",
        "options",
        "name",
        "options",
        "param",
        "options",
        "Messages",
        "options",
        "isRestrictedWord",
        "name",
        "options",
        "param",
        "options",
        "Messages",
        "isStrictModeReservedWord",
        "name",
        "options",
        "param",
        "options",
        "Messages",
        "options",
        "name",
        "options",
        "param",
        "options",
        "Messages",
        "options",
        "name",
        "options",
        "token",
        "lookahead",
        "token",
        "token",
        "lex",
        "rest",
        "match",
        "marker",
        "markerCreate",
        "param",
        "parseArrayInitialiser",
        "reinterpretAsDestructuredParameter",
        "options",
        "param",
        "match",
        "param",
        "parseTypeAnnotation",
        "markerApply",
        "marker",
        "param",
        "match",
        "marker",
        "markerCreate",
        "rest",
        "throwError",
        "Messages",
        "param",
        "parseObjectInitialiser",
        "reinterpretAsDestructuredParameter",
        "options",
        "param",
        "match",
        "param",
        "parseTypeAnnotation",
        "markerApply",
        "marker",
        "param",
        "param",
        "rest",
        "parseTypeAnnotatableIdentifier",
        "parseTypeAnnotatableIdentifier",
        "validateParam",
        "options",
        "token",
        "token",
        "match",
        "rest",
        "throwErrorTolerant",
        "lookahead",
        "Messages",
        "lex",
        "parseAssignmentExpression",
        "options",
        "rest",
        "match",
        "throwError",
        "Messages",
        "options",
        "param",
        "options",
        "param",
        "options",
        "match",
        "firstRestricted",
        "markerCreate",
        "options",
        "firstRestricted",
        "expect",
        "match",
        "options",
        "StringMap",
        "index",
        "length",
        "parseParam",
        "options",
        "expect",
        "expect",
        "options",
        "options",
        "match",
        "options",
        "parseTypeAnnotation",
        "markerApply",
        "marker",
        "options",
        "markerCreate",
        "isAsync",
        "matchAsync",
        "lex",
        "isAsync",
        "expectKeyword",
        "generator",
        "match",
        "lex",
        "generator",
        "token",
        "lookahead",
        "id",
        "parseVariableIdentifier",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "strict",
        "isRestrictedWord",
        "token",
        "throwErrorTolerant",
        "token",
        "Messages",
        "isRestrictedWord",
        "token",
        "firstRestricted",
        "token",
        "message",
        "Messages",
        "isStrictModeReservedWord",
        "token",
        "firstRestricted",
        "token",
        "message",
        "Messages",
        "tmp",
        "parseParams",
        "firstRestricted",
        "firstRestricted",
        "tmp",
        "tmp",
        "message",
        "tmp",
        "previousStrict",
        "strict",
        "previousYieldAllowed",
        "state",
        "state",
        "generator",
        "previousAwaitAllowed",
        "state",
        "state",
        "isAsync",
        "body",
        "parseFunctionSourceElements",
        "strict",
        "firstRestricted",
        "throwError",
        "firstRestricted",
        "message",
        "strict",
        "tmp",
        "throwErrorTolerant",
        "tmp",
        "message",
        "strict",
        "previousStrict",
        "state",
        "previousYieldAllowed",
        "state",
        "previousAwaitAllowed",
        "markerApply",
        "marker",
        "id",
        "tmp",
        "tmp",
        "body",
        "tmp",
        "generator",
        "isAsync",
        "tmp",
        "typeParameters",
        "markerCreate",
        "isAsync",
        "matchAsync",
        "lex",
        "isAsync",
        "expectKeyword",
        "generator",
        "match",
        "lex",
        "generator",
        "match",
        "match",
        "token",
        "lookahead",
        "id",
        "parseVariableIdentifier",
        "strict",
        "isRestrictedWord",
        "token",
        "throwErrorTolerant",
        "token",
        "Messages",
        "isRestrictedWord",
        "token",
        "firstRestricted",
        "token",
        "message",
        "Messages",
        "isStrictModeReservedWord",
        "token",
        "firstRestricted",
        "token",
        "message",
        "Messages",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "tmp",
        "parseParams",
        "firstRestricted",
        "firstRestricted",
        "tmp",
        "tmp",
        "message",
        "tmp",
        "previousStrict",
        "strict",
        "previousYieldAllowed",
        "state",
        "state",
        "generator",
        "previousAwaitAllowed",
        "state",
        "state",
        "isAsync",
        "body",
        "parseFunctionSourceElements",
        "strict",
        "firstRestricted",
        "throwError",
        "firstRestricted",
        "message",
        "strict",
        "tmp",
        "throwErrorTolerant",
        "tmp",
        "message",
        "strict",
        "previousStrict",
        "state",
        "previousYieldAllowed",
        "state",
        "previousAwaitAllowed",
        "markerApply",
        "marker",
        "id",
        "tmp",
        "tmp",
        "body",
        "tmp",
        "generator",
        "isAsync",
        "tmp",
        "typeParameters",
        "markerCreate",
        "expectKeyword",
        "strict",
        "delegateFlag",
        "match",
        "lex",
        "delegateFlag",
        "expr",
        "parseAssignmentExpression",
        "markerApply",
        "marker",
        "expr",
        "delegateFlag",
        "markerCreate",
        "expectContextualKeyword",
        "expr",
        "parseAssignmentExpression",
        "markerApply",
        "marker",
        "expr",
        "methodDefinition",
        "methodDefinition",
        "methodDefinition",
        "methodDefinition",
        "key",
        "isStatic",
        "generator",
        "computed",
        "propType",
        "isStatic",
        "ClassPropertyType",
        "ClassPropertyType",
        "generator",
        "propType",
        "key",
        "parsePropertyMethodFunction",
        "computed",
        "tokenValue",
        "key",
        "key",
        "tokenValue",
        "match",
        "key",
        "parseObjectPropertyKey",
        "expect",
        "expect",
        "match",
        "returnType",
        "parseTypeAnnotation",
        "propType",
        "key",
        "parsePropertyFunction",
        "returnType",
        "computed",
        "tokenValue",
        "match",
        "key",
        "parseObjectPropertyKey",
        "expect",
        "token",
        "lookahead",
        "param",
        "parseTypeAnnotatableIdentifier",
        "expect",
        "match",
        "returnType",
        "parseTypeAnnotation",
        "propType",
        "key",
        "parsePropertyFunction",
        "param",
        "token",
        "returnType",
        "computed",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "isAsync",
        "tokenValue",
        "match",
        "isAsync",
        "key",
        "parseObjectPropertyKey",
        "propType",
        "key",
        "parsePropertyMethodFunction",
        "isAsync",
        "typeParameters",
        "computed",
        "key",
        "computed",
        "isStatic",
        "typeAnnotation",
        "parseTypeAnnotation",
        "expect",
        "key",
        "typeAnnotation",
        "computed",
        "isStatic",
        "markerCreate",
        "match",
        "lex",
        "lookahead",
        "lex",
        "isStatic",
        "match",
        "lex",
        "generator",
        "possiblyOpenBracketToken",
        "lookahead",
        "matchContextualKeyword",
        "matchContextualKeyword",
        "possiblyOpenBracketToken",
        "lookahead2",
        "possiblyOpenBracketToken",
        "Token",
        "possiblyOpenBracketToken",
        "computed",
        "key",
        "parseObjectPropertyKey",
        "generator",
        "lookahead",
        "markerApply",
        "marker",
        "parseClassProperty",
        "key",
        "computed",
        "isStatic",
        "markerApply",
        "marker",
        "parseMethodDefinition",
        "key",
        "isStatic",
        "generator",
        "computed",
        "markerCreate",
        "existingProps",
        "ClassPropertyType",
        "StringMap",
        "existingProps",
        "ClassPropertyType",
        "StringMap",
        "expect",
        "index",
        "length",
        "match",
        "classElement",
        "parseClassElement",
        "existingProps",
        "classElement",
        "classElements",
        "classElement",
        "propName",
        "classElement",
        "getFieldName",
        "classElement",
        "propName",
        "propType",
        "classElement",
        "ClassPropertyType",
        "ClassPropertyType",
        "classElement",
        "Syntax",
        "propName",
        "classElement",
        "specialMethod",
        "classElement",
        "throwError",
        "classElement",
        "Messages",
        "existingProps",
        "ClassPropertyType",
        "throwError",
        "classElement",
        "Messages",
        "existingProps",
        "propType",
        "propName",
        "expect",
        "markerApply",
        "marker",
        "classElements",
        "strict",
        "expectKeyword",
        "expectContextualKeyword",
        "index",
        "length",
        "marker",
        "markerCreate",
        "id",
        "parseVariableIdentifier",
        "match",
        "typeParameters",
        "parseTypeParameterInstantiation",
        "typeParameters",
        "implemented",
        "markerApply",
        "marker",
        "id",
        "typeParameters",
        "match",
        "expect",
        "implemented",
        "markerCreate",
        "expectKeyword",
        "matchImplements",
        "strict",
        "matchKeyword",
        "matchContextualKeyword",
        "matchKeyword",
        "matchImplements",
        "match",
        "id",
        "parseVariableIdentifier",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "matchKeyword",
        "expectKeyword",
        "previousYieldAllowed",
        "state",
        "state",
        "superClass",
        "parseLeftHandSideExpressionAllowCall",
        "match",
        "superTypeParameters",
        "parseTypeParameterInstantiation",
        "state",
        "previousYieldAllowed",
        "strict",
        "matchKeyword",
        "matchContextualKeyword",
        "implemented",
        "parseClassImplements",
        "markerApply",
        "marker",
        "id",
        "superClass",
        "parseClassBody",
        "typeParameters",
        "superTypeParameters",
        "implemented",
        "markerCreate",
        "expectKeyword",
        "id",
        "parseVariableIdentifier",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "matchKeyword",
        "expectKeyword",
        "previousYieldAllowed",
        "state",
        "state",
        "superClass",
        "parseLeftHandSideExpressionAllowCall",
        "match",
        "superTypeParameters",
        "parseTypeParameterInstantiation",
        "state",
        "previousYieldAllowed",
        "strict",
        "matchKeyword",
        "matchContextualKeyword",
        "implemented",
        "parseClassImplements",
        "markerApply",
        "marker",
        "id",
        "superClass",
        "parseClassBody",
        "typeParameters",
        "superTypeParameters",
        "implemented",
        "lookahead",
        "Token",
        "lookahead",
        "parseConstLetDeclaration",
        "lookahead",
        "parseFunctionDeclaration",
        "throwErrorTolerant",
        "Messages",
        "parseExportDeclaration",
        "throwErrorTolerant",
        "Messages",
        "parseImportDeclaration",
        "lookahead2",
        "Token",
        "parseInterface",
        "parseStatement",
        "parseStatement",
        "matchContextualKeyword",
        "lookahead2",
        "Token",
        "parseTypeAlias",
        "matchContextualKeyword",
        "lookahead2",
        "Token",
        "parseInterface",
        "matchContextualKeyword",
        "token",
        "lookahead2",
        "token",
        "Token",
        "token",
        "parseDeclareClass",
        "parseDeclareFunction",
        "parseDeclareVariable",
        "token",
        "Token",
        "token",
        "parseDeclareModule",
        "lookahead",
        "Token",
        "parseStatement",
        "extra",
        "extra",
        "isModule",
        "lookahead",
        "Token",
        "lookahead",
        "parseExportDeclaration",
        "parseImportDeclaration",
        "parseSourceElement",
        "index",
        "length",
        "token",
        "lookahead",
        "token",
        "Token",
        "sourceElement",
        "parseProgramElement",
        "sourceElements",
        "sourceElement",
        "sourceElement",
        "Syntax",
        "directive",
        "source",
        "token",
        "token",
        "directive",
        "strict",
        "firstRestricted",
        "throwErrorTolerant",
        "firstRestricted",
        "Messages",
        "firstRestricted",
        "token",
        "firstRestricted",
        "token",
        "index",
        "length",
        "sourceElement",
        "parseProgramElement",
        "sourceElement",
        "sourceElements",
        "sourceElement",
        "sourceElements",
        "markerCreate",
        "strict",
        "extra",
        "peek",
        "body",
        "parseProgramElements",
        "markerApply",
        "marker",
        "body",
        "XHTMLEntities",
        "Syntax",
        "Syntax",
        "Syntax",
        "getQualifiedJSXName",
        "getQualifiedJSXName",
        "throwUnexpected",
        "ch",
        "ch",
        "isIdentifierStart",
        "ch",
        "ch",
        "ch",
        "ch",
        "isIdentifierPart",
        "ch",
        "start",
        "index",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isJSXIdentifierPart",
        "ch",
        "value",
        "source",
        "index",
        "Token",
        "value",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "ch",
        "source",
        "index",
        "ch",
        "index",
        "index",
        "length",
        "count",
        "ch",
        "source",
        "index",
        "ch",
        "ch",
        "ch",
        "code",
        "code",
        "Regex",
        "isNaN",
        "code",
        "code",
        "XHTMLEntities",
        "XHTMLEntities",
        "index",
        "start",
        "stopChars",
        "start",
        "index",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "stopChars",
        "ch",
        "ch",
        "scanJSXEntity",
        "index",
        "ch",
        "source",
        "index",
        "ch",
        "ch",
        "source",
        "index",
        "index",
        "isLineTerminator",
        "ch",
        "lineNumber",
        "lineStart",
        "index",
        "ch",
        "Token",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "quote",
        "source",
        "index",
        "quote",
        "quote",
        "start",
        "index",
        "index",
        "innerToken",
        "scanJSXText",
        "quote",
        "quote",
        "source",
        "index",
        "throwError",
        "Messages",
        "index",
        "innerToken",
        "start",
        "index",
        "innerToken",
        "source",
        "index",
        "ch",
        "ch",
        "ch",
        "ch",
        "scanJSXText",
        "scanPunctuator",
        "markerCreate",
        "lookahead",
        "Token",
        "throwUnexpected",
        "lookahead",
        "token",
        "lex",
        "markerApply",
        "marker",
        "token",
        "markerCreate",
        "parseJSXIdentifier",
        "expect",
        "name",
        "parseJSXIdentifier",
        "markerApply",
        "marker",
        "name",
        "markerCreate",
        "parseJSXIdentifier",
        "match",
        "lex",
        "expr",
        "markerApply",
        "marker",
        "expr",
        "parseJSXIdentifier",
        "expr",
        "lookahead2",
        "parseJSXNamespacedName",
        "lookahead2",
        "parseJSXMemberExpression",
        "parseJSXIdentifier",
        "lookahead2",
        "parseJSXNamespacedName",
        "parseJSXIdentifier",
        "match",
        "value",
        "parseJSXExpressionContainer",
        "value",
        "Syntax",
        "throwError",
        "value",
        "match",
        "value",
        "parseJSXElement",
        "lookahead",
        "Token",
        "marker",
        "markerCreate",
        "value",
        "markerApply",
        "marker",
        "lex",
        "throwError",
        "Messages",
        "value",
        "markerCreatePreserveWhitespace",
        "source",
        "index",
        "index",
        "markerApply",
        "marker",
        "markerCreate",
        "origInJSXChild",
        "state",
        "origInJSXTag",
        "state",
        "state",
        "state",
        "expect",
        "match",
        "expression",
        "parseJSXEmptyExpression",
        "expression",
        "parseExpression",
        "state",
        "origInJSXChild",
        "state",
        "origInJSXTag",
        "expect",
        "markerApply",
        "marker",
        "expression",
        "markerCreate",
        "origInJSXChild",
        "state",
        "origInJSXTag",
        "state",
        "state",
        "state",
        "expect",
        "expect",
        "expression",
        "parseAssignmentExpression",
        "state",
        "origInJSXChild",
        "state",
        "origInJSXTag",
        "expect",
        "markerApply",
        "marker",
        "expression",
        "match",
        "parseJSXSpreadAttribute",
        "marker",
        "markerCreate",
        "name",
        "parseJSXAttributeName",
        "match",
        "lex",
        "markerApply",
        "marker",
        "name",
        "parseJSXAttributeValue",
        "markerApply",
        "marker",
        "name",
        "match",
        "token",
        "parseJSXExpressionContainer",
        "lookahead",
        "Token",
        "marker",
        "markerCreatePreserveWhitespace",
        "token",
        "markerApply",
        "marker",
        "lex",
        "match",
        "token",
        "parseJSXElement",
        "throwUnexpected",
        "lookahead",
        "token",
        "markerCreate",
        "origInJSXChild",
        "state",
        "origInJSXTag",
        "state",
        "state",
        "state",
        "expect",
        "expect",
        "name",
        "parseJSXElementName",
        "state",
        "origInJSXChild",
        "state",
        "origInJSXTag",
        "expect",
        "markerApply",
        "marker",
        "name",
        "markerCreate",
        "origInJSXChild",
        "state",
        "origInJSXTag",
        "state",
        "state",
        "state",
        "expect",
        "name",
        "parseJSXElementName",
        "index",
        "length",
        "lookahead",
        "lookahead",
        "attributes",
        "parseJSXAttribute",
        "state",
        "origInJSXTag",
        "lookahead",
        "expect",
        "state",
        "origInJSXChild",
        "expect",
        "selfClosing",
        "state",
        "expect",
        "markerApply",
        "marker",
        "name",
        "attributes",
        "selfClosing",
        "markerCreate",
        "origInJSXChild",
        "state",
        "origInJSXTag",
        "state",
        "openingElement",
        "parseJSXOpeningElement",
        "openingElement",
        "index",
        "length",
        "state",
        "lookahead",
        "lookahead2",
        "state",
        "children",
        "parseJSXChild",
        "state",
        "origInJSXChild",
        "state",
        "origInJSXTag",
        "closingElement",
        "parseJSXClosingElement",
        "getQualifiedJSXName",
        "closingElement",
        "getQualifiedJSXName",
        "openingElement",
        "throwError",
        "Messages",
        "getQualifiedJSXName",
        "openingElement",
        "origInJSXChild",
        "match",
        "throwError",
        "lookahead",
        "Messages",
        "markerApply",
        "marker",
        "openingElement",
        "closingElement",
        "children",
        "markerCreate",
        "expectContextualKeyword",
        "id",
        "parseVariableIdentifier",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "expect",
        "right",
        "parseType",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "id",
        "typeParameters",
        "right",
        "markerCreate",
        "id",
        "parseVariableIdentifier",
        "match",
        "typeParameters",
        "parseTypeParameterInstantiation",
        "markerApply",
        "marker",
        "id",
        "typeParameters",
        "marker",
        "allowStatic",
        "id",
        "parseVariableIdentifier",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "matchKeyword",
        "expectKeyword",
        "index",
        "length",
        "extended",
        "parseInterfaceExtends",
        "match",
        "expect",
        "bodyMarker",
        "markerCreate",
        "body",
        "markerApply",
        "bodyMarker",
        "parseObjectType",
        "allowStatic",
        "markerApply",
        "marker",
        "id",
        "typeParameters",
        "body",
        "extended",
        "markerCreate",
        "strict",
        "expectKeyword",
        "expectContextualKeyword",
        "parseInterfaceish",
        "marker",
        "markerCreate",
        "expectContextualKeyword",
        "expectKeyword",
        "ret",
        "parseInterfaceish",
        "marker",
        "ret",
        "Syntax",
        "ret",
        "markerCreate",
        "expectContextualKeyword",
        "expectKeyword",
        "idMarker",
        "markerCreate",
        "id",
        "parseVariableIdentifier",
        "valueMarker",
        "markerCreate",
        "match",
        "typeParameters",
        "parseTypeParameterDeclaration",
        "expect",
        "tmp",
        "parseFunctionTypeParams",
        "tmp",
        "rest",
        "tmp",
        "expect",
        "expect",
        "returnType",
        "parseType",
        "value",
        "markerApply",
        "valueMarker",
        "returnType",
        "rest",
        "typeParameters",
        "id",
        "markerApply",
        "valueMarker",
        "value",
        "markerApply",
        "idMarker",
        "id",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "id",
        "markerCreate",
        "expectContextualKeyword",
        "expectKeyword",
        "id",
        "parseTypeAnnotatableIdentifier",
        "consumeSemicolon",
        "markerApply",
        "marker",
        "id",
        "markerCreate",
        "expectContextualKeyword",
        "expectContextualKeyword",
        "lookahead",
        "Token",
        "strict",
        "lookahead",
        "throwErrorTolerant",
        "lookahead",
        "Messages",
        "idMarker",
        "markerCreate",
        "id",
        "markerApply",
        "idMarker",
        "lex",
        "id",
        "parseVariableIdentifier",
        "bodyMarker",
        "markerCreate",
        "expect",
        "index",
        "length",
        "match",
        "token",
        "lookahead2",
        "token",
        "body",
        "parseDeclareClass",
        "body",
        "parseDeclareFunction",
        "body",
        "parseDeclareVariable",
        "throwUnexpected",
        "lookahead",
        "expect",
        "markerApply",
        "marker",
        "id",
        "markerApply",
        "bodyMarker",
        "body",
        "state",
        "skipComment",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "token",
        "extra",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "token",
        "Token",
        "token",
        "token",
        "value",
        "source",
        "token",
        "token",
        "entry",
        "TokenName",
        "token",
        "value",
        "loc",
        "token",
        "entry",
        "token",
        "token",
        "extra",
        "entry",
        "token",
        "skipComment",
        "pos",
        "index",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "regex",
        "extra",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "extra",
        "extra",
        "token",
        "extra",
        "extra",
        "token",
        "pos",
        "token",
        "token",
        "token",
        "extra",
        "extra",
        "regex",
        "regex",
        "pos",
        "index",
        "loc",
        "regex",
        "i",
        "i",
        "extra",
        "i",
        "entry",
        "extra",
        "i",
        "token",
        "entry",
        "entry",
        "entry",
        "token",
        "entry",
        "entry",
        "extra",
        "token",
        "entry",
        "extra",
        "token",
        "entry",
        "tokens",
        "token",
        "extra",
        "tokens",
        "extra",
        "extra",
        "advance",
        "extra",
        "scanRegExp",
        "advance",
        "collectToken",
        "scanRegExp",
        "collectRegex",
        "extra",
        "advance",
        "extra",
        "scanRegExp",
        "extra",
        "properties",
        "entry",
        "entry",
        "result",
        "entry",
        "entry",
        "entry",
        "properties",
        "properties",
        "entry",
        "result",
        "entry",
        "properties",
        "entry",
        "result",
        "code",
        "options",
        "toString",
        "code",
        "code",
        "code",
        "toString",
        "code",
        "SyntaxTreeDelegate",
        "source",
        "code",
        "index",
        "lineNumber",
        "source",
        "lineStart",
        "length",
        "source",
        "lookahead",
        "state",
        "StringMap",
        "extra",
        "options",
        "options",
        "options",
        "extra",
        "extra",
        "extra",
        "extra",
        "extra",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "patch",
        "peek",
        "lookahead",
        "Token",
        "extra",
        "token",
        "lex",
        "lookahead",
        "Token",
        "token",
        "lex",
        "lexError",
        "token",
        "lookahead",
        "extra",
        "extra",
        "lexError",
        "lexError",
        "filterTokenLocation",
        "tokens",
        "extra",
        "extra",
        "tokens",
        "extra",
        "extra",
        "tokens",
        "extra",
        "e",
        "e",
        "unpatch",
        "extra",
        "tokens",
        "code",
        "options",
        "toString",
        "code",
        "code",
        "code",
        "toString",
        "code",
        "SyntaxTreeDelegate",
        "source",
        "code",
        "index",
        "lineNumber",
        "source",
        "lineStart",
        "length",
        "source",
        "lookahead",
        "state",
        "StringMap",
        "extra",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "extend",
        "node",
        "node",
        "toString",
        "options",
        "node",
        "extra",
        "options",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "extra",
        "extra",
        "extra",
        "extra",
        "extra",
        "extra",
        "patch",
        "program",
        "parseProgram",
        "extra",
        "program",
        "extra",
        "extra",
        "filterTokenLocation",
        "program",
        "extra",
        "extra",
        "program",
        "extra",
        "e",
        "e",
        "unpatch",
        "extra",
        "program",
        "exports",
        "exports",
        "tokenize",
        "exports",
        "parse",
        "exports",
        "types",
        "name",
        "Syntax",
        "Syntax",
        "name",
        "types",
        "name",
        "Syntax",
        "name",
        "types",
        "types",
        "_dereq_",
        "exports",
        "my",
        "my",
        "my",
        "i",
        "i",
        "i",
        "s",
        "i",
        "s",
        "i",
        "i",
        "s",
        "my",
        "a",
        "b",
        "c",
        "d",
        "b",
        "c",
        "a",
        "a",
        "a",
        "d",
        "a",
        "c",
        "b",
        "b",
        "d",
        "d",
        "b",
        "my",
        "Base62",
        "_dereq_",
        "exports",
        "exports",
        "_dereq_",
        "exports",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "exports",
        "define",
        "_dereq_",
        "_dereq_",
        "define",
        "_dereq_",
        "exports",
        "_dereq_",
        "ArraySet",
        "ArraySet_fromArray",
        "aArray",
        "aAllowDuplicates",
        "ArraySet",
        "aArray",
        "i",
        "len",
        "i",
        "aArray",
        "i",
        "aAllowDuplicates",
        "ArraySet",
        "ArraySet_add",
        "aStr",
        "aAllowDuplicates",
        "aStr",
        "isDuplicate",
        "aAllowDuplicates",
        "aStr",
        "isDuplicate",
        "util",
        "aStr",
        "idx",
        "ArraySet",
        "ArraySet_has",
        "aStr",
        "util",
        "aStr",
        "ArraySet",
        "ArraySet_indexOf",
        "aStr",
        "aStr",
        "util",
        "aStr",
        "aStr",
        "ArraySet",
        "ArraySet_at",
        "aIdx",
        "aIdx",
        "aIdx",
        "aIdx",
        "aIdx",
        "ArraySet",
        "ArraySet_toArray",
        "exports",
        "ArraySet",
        "_dereq_",
        "exports",
        "define",
        "_dereq_",
        "_dereq_",
        "define",
        "_dereq_",
        "exports",
        "_dereq_",
        "VLQ_BASE_SHIFT",
        "VLQ_BASE",
        "aValue",
        "aValue",
        "aValue",
        "aValue",
        "aValue",
        "aValue",
        "aValue",
        "isNegative",
        "shifted",
        "shifted",
        "exports",
        "base64VLQ_encode",
        "aValue",
        "toVLQSigned",
        "aValue",
        "digit",
        "vlq",
        "VLQ_BASE_MASK",
        "vlq",
        "VLQ_BASE_SHIFT",
        "vlq",
        "digit",
        "VLQ_CONTINUATION_BIT",
        "encoded",
        "base64",
        "digit",
        "vlq",
        "encoded",
        "exports",
        "base64VLQ_decode",
        "aStr",
        "aStr",
        "i",
        "strLen",
        "digit",
        "base64",
        "aStr",
        "i",
        "continuation",
        "digit",
        "VLQ_CONTINUATION_BIT",
        "digit",
        "VLQ_BASE_MASK",
        "result",
        "result",
        "digit",
        "shift",
        "shift",
        "VLQ_BASE_SHIFT",
        "continuation",
        "fromVLQSigned",
        "result",
        "aStr",
        "i",
        "_dereq_",
        "exports",
        "define",
        "_dereq_",
        "_dereq_",
        "define",
        "_dereq_",
        "exports",
        "ch",
        "index",
        "charToIntMap",
        "ch",
        "index",
        "intToCharMap",
        "index",
        "ch",
        "exports",
        "base64_encode",
        "aNumber",
        "aNumber",
        "intToCharMap",
        "intToCharMap",
        "aNumber",
        "aNumber",
        "exports",
        "base64_decode",
        "aChar",
        "aChar",
        "charToIntMap",
        "charToIntMap",
        "aChar",
        "aChar",
        "_dereq_",
        "exports",
        "define",
        "_dereq_",
        "_dereq_",
        "define",
        "_dereq_",
        "exports",
        "aLow",
        "aHigh",
        "aNeedle",
        "aHaystack",
        "aCompare",
        "aHigh",
        "aLow",
        "aLow",
        "aCompare",
        "aNeedle",
        "aHaystack",
        "mid",
        "cmp",
        "aHaystack",
        "mid",
        "cmp",
        "aHigh",
        "mid",
        "recursiveSearch",
        "mid",
        "aHigh",
        "aNeedle",
        "aHaystack",
        "aCompare",
        "aHaystack",
        "mid",
        "mid",
        "aLow",
        "recursiveSearch",
        "aLow",
        "mid",
        "aNeedle",
        "aHaystack",
        "aCompare",
        "aLow",
        "aHaystack",
        "aLow",
        "exports",
        "search",
        "aNeedle",
        "aHaystack",
        "aCompare",
        "aHaystack",
        "recursiveSearch",
        "aHaystack",
        "aNeedle",
        "aHaystack",
        "aCompare",
        "_dereq_",
        "exports",
        "define",
        "_dereq_",
        "_dereq_",
        "define",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "aSourceMap",
        "aSourceMap",
        "sourceMap",
        "aSourceMap",
        "util",
        "sourceMap",
        "util",
        "sourceMap",
        "util",
        "sourceMap",
        "util",
        "sourceMap",
        "util",
        "sourceMap",
        "util",
        "sourceMap",
        "util",
        "sourceMap",
        "version",
        "version",
        "ArraySet",
        "names",
        "ArraySet",
        "sources",
        "sourceRoot",
        "sourcesContent",
        "mappings",
        "file",
        "SourceMapConsumer",
        "SourceMapConsumer_fromSourceMap",
        "aSourceMap",
        "SourceMapConsumer",
        "smc",
        "ArraySet",
        "aSourceMap",
        "smc",
        "ArraySet",
        "aSourceMap",
        "smc",
        "aSourceMap",
        "smc",
        "aSourceMap",
        "smc",
        "smc",
        "smc",
        "aSourceMap",
        "smc",
        "aSourceMap",
        "util",
        "smc",
        "aSourceMap",
        "util",
        "smc",
        "SourceMapConsumer",
        "SourceMapConsumer",
        "s",
        "util",
        "s",
        "s",
        "SourceMapConsumer",
        "SourceMapConsumer",
        "SourceMapConsumer",
        "SourceMapConsumer",
        "SourceMapConsumer",
        "SourceMapConsumer_parseMappings",
        "aStr",
        "aSourceRoot",
        "generatedLine",
        "previousGeneratedColumn",
        "mapping",
        "mapping",
        "generatedLine",
        "temp",
        "base64VLQ",
        "mapping",
        "previousGeneratedColumn",
        "temp",
        "previousGeneratedColumn",
        "mapping",
        "temp",
        "mappingSeparator",
        "temp",
        "base64VLQ",
        "mapping",
        "previousSource",
        "temp",
        "previousSource",
        "temp",
        "temp",
        "mappingSeparator",
        "temp",
        "base64VLQ",
        "mapping",
        "previousOriginalLine",
        "temp",
        "previousOriginalLine",
        "mapping",
        "mapping",
        "temp",
        "mappingSeparator",
        "temp",
        "base64VLQ",
        "mapping",
        "previousOriginalColumn",
        "temp",
        "previousOriginalColumn",
        "mapping",
        "temp",
        "mappingSeparator",
        "temp",
        "base64VLQ",
        "mapping",
        "previousName",
        "temp",
        "previousName",
        "temp",
        "temp",
        "mapping",
        "mapping",
        "mapping",
        "util",
        "SourceMapConsumer",
        "SourceMapConsumer_findMapping",
        "aNeedle",
        "aMappings",
        "aLineName",
        "aColumnName",
        "aComparator",
        "aNeedle",
        "aLineName",
        "aNeedle",
        "aLineName",
        "aNeedle",
        "aColumnName",
        "aNeedle",
        "aColumnName",
        "binarySearch",
        "aNeedle",
        "aMappings",
        "aComparator",
        "SourceMapConsumer",
        "SourceMapConsumer_originalPositionFor",
        "aArgs",
        "util",
        "aArgs",
        "util",
        "aArgs",
        "needle",
        "util",
        "mapping",
        "util",
        "mapping",
        "source",
        "source",
        "util",
        "source",
        "source",
        "util",
        "mapping",
        "util",
        "mapping",
        "util",
        "mapping",
        "SourceMapConsumer",
        "SourceMapConsumer_sourceContentFor",
        "aSource",
        "aSource",
        "util",
        "aSource",
        "aSource",
        "aSource",
        "url",
        "util",
        "aSource",
        "url",
        "fileUriAbsPath",
        "fileUriAbsPath",
        "url",
        "url",
        "aSource",
        "aSource",
        "aSource",
        "SourceMapConsumer",
        "SourceMapConsumer_generatedPositionFor",
        "aArgs",
        "util",
        "aArgs",
        "util",
        "aArgs",
        "util",
        "aArgs",
        "needle",
        "util",
        "needle",
        "needle",
        "util",
        "mapping",
        "util",
        "mapping",
        "util",
        "mapping",
        "SourceMapConsumer",
        "SourceMapConsumer",
        "SourceMapConsumer",
        "SourceMapConsumer_eachMapping",
        "aCallback",
        "aContext",
        "aOrder",
        "aContext",
        "aOrder",
        "SourceMapConsumer",
        "order",
        "SourceMapConsumer",
        "mappings",
        "SourceMapConsumer",
        "mappings",
        "mappings",
        "mapping",
        "mapping",
        "source",
        "sourceRoot",
        "source",
        "util",
        "sourceRoot",
        "source",
        "source",
        "mapping",
        "mapping",
        "mapping",
        "mapping",
        "mapping",
        "aCallback",
        "context",
        "exports",
        "SourceMapConsumer",
        "_dereq_",
        "exports",
        "define",
        "_dereq_",
        "_dereq_",
        "define",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "aArgs",
        "util",
        "aArgs",
        "util",
        "aArgs",
        "ArraySet",
        "ArraySet",
        "SourceMapGenerator",
        "SourceMapGenerator",
        "SourceMapGenerator_fromSourceMap",
        "aSourceMapConsumer",
        "aSourceMapConsumer",
        "SourceMapGenerator",
        "aSourceMapConsumer",
        "sourceRoot",
        "aSourceMapConsumer",
        "mapping",
        "mapping",
        "mapping",
        "mapping",
        "newMapping",
        "mapping",
        "sourceRoot",
        "newMapping",
        "util",
        "sourceRoot",
        "newMapping",
        "newMapping",
        "mapping",
        "mapping",
        "mapping",
        "newMapping",
        "mapping",
        "generator",
        "newMapping",
        "aSourceMapConsumer",
        "sourceFile",
        "aSourceMapConsumer",
        "sourceFile",
        "content",
        "generator",
        "sourceFile",
        "content",
        "generator",
        "SourceMapGenerator",
        "SourceMapGenerator_addMapping",
        "aArgs",
        "util",
        "aArgs",
        "util",
        "aArgs",
        "util",
        "aArgs",
        "util",
        "aArgs",
        "generated",
        "original",
        "source",
        "name",
        "source",
        "source",
        "source",
        "name",
        "name",
        "name",
        "generated",
        "generated",
        "original",
        "original",
        "original",
        "original",
        "source",
        "name",
        "SourceMapGenerator",
        "SourceMapGenerator_setSourceContent",
        "aSourceFile",
        "aSourceContent",
        "source",
        "util",
        "source",
        "aSourceContent",
        "util",
        "source",
        "aSourceContent",
        "util",
        "source",
        "SourceMapGenerator",
        "SourceMapGenerator_applySourceMap",
        "aSourceMapConsumer",
        "aSourceFile",
        "aSourceFile",
        "aSourceFile",
        "aSourceMapConsumer",
        "sourceRoot",
        "aSourceFile",
        "util",
        "sourceRoot",
        "aSourceFile",
        "ArraySet",
        "ArraySet",
        "mapping",
        "mapping",
        "aSourceFile",
        "mapping",
        "aSourceMapConsumer",
        "mapping",
        "mapping",
        "original",
        "sourceRoot",
        "mapping",
        "util",
        "sourceRoot",
        "original",
        "mapping",
        "original",
        "mapping",
        "original",
        "mapping",
        "original",
        "original",
        "mapping",
        "mapping",
        "original",
        "mapping",
        "source",
        "newSources",
        "source",
        "newSources",
        "source",
        "mapping",
        "name",
        "newNames",
        "name",
        "newNames",
        "name",
        "newSources",
        "newNames",
        "aSourceMapConsumer",
        "sourceFile",
        "aSourceMapConsumer",
        "sourceFile",
        "content",
        "sourceRoot",
        "sourceFile",
        "util",
        "sourceRoot",
        "sourceFile",
        "sourceFile",
        "content",
        "SourceMapGenerator",
        "SourceMapGenerator_validateMapping",
        "aGenerated",
        "aOriginal",
        "aSource",
        "aName",
        "aGenerated",
        "aGenerated",
        "aGenerated",
        "aGenerated",
        "aGenerated",
        "aOriginal",
        "aSource",
        "aName",
        "aGenerated",
        "aGenerated",
        "aGenerated",
        "aOriginal",
        "aOriginal",
        "aOriginal",
        "aGenerated",
        "aGenerated",
        "aOriginal",
        "aOriginal",
        "aSource",
        "aGenerated",
        "aSource",
        "aOriginal",
        "aName",
        "SourceMapGenerator",
        "SourceMapGenerator_serializeMappings",
        "util",
        "i",
        "len",
        "i",
        "mapping",
        "i",
        "mapping",
        "previousGeneratedLine",
        "previousGeneratedColumn",
        "mapping",
        "previousGeneratedLine",
        "result",
        "previousGeneratedLine",
        "i",
        "util",
        "mapping",
        "i",
        "result",
        "result",
        "base64VLQ",
        "mapping",
        "previousGeneratedColumn",
        "previousGeneratedColumn",
        "mapping",
        "mapping",
        "result",
        "base64VLQ",
        "mapping",
        "previousSource",
        "previousSource",
        "mapping",
        "result",
        "base64VLQ",
        "mapping",
        "previousOriginalLine",
        "previousOriginalLine",
        "mapping",
        "result",
        "base64VLQ",
        "mapping",
        "previousOriginalColumn",
        "previousOriginalColumn",
        "mapping",
        "mapping",
        "result",
        "base64VLQ",
        "mapping",
        "previousName",
        "previousName",
        "mapping",
        "result",
        "SourceMapGenerator",
        "SourceMapGenerator_generateSourcesContent",
        "aSources",
        "aSourceRoot",
        "aSources",
        "source",
        "aSourceRoot",
        "source",
        "util",
        "aSourceRoot",
        "source",
        "util",
        "source",
        "key",
        "key",
        "SourceMapGenerator",
        "SourceMapGenerator_toJSON",
        "SourceMapGenerator",
        "SourceMapGenerator_toString",
        "exports",
        "SourceMapGenerator",
        "_dereq_",
        "exports",
        "define",
        "_dereq_",
        "_dereq_",
        "define",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "aLine",
        "aColumn",
        "aSource",
        "aChunks",
        "aName",
        "aLine",
        "aLine",
        "aColumn",
        "aColumn",
        "aSource",
        "aSource",
        "aName",
        "aName",
        "aChunks",
        "aChunks",
        "SourceNode",
        "SourceNode_fromStringWithSourceMap",
        "aGeneratedCode",
        "aSourceMapConsumer",
        "SourceNode",
        "aGeneratedCode",
        "aSourceMapConsumer",
        "mapping",
        "lastMapping",
        "lastGeneratedLine",
        "mapping",
        "node",
        "remainingLines",
        "lastGeneratedLine",
        "lastGeneratedColumn",
        "mapping",
        "remainingLines",
        "node",
        "nextLine",
        "mapping",
        "remainingLines",
        "nextLine",
        "mapping",
        "lastGeneratedColumn",
        "mapping",
        "lastGeneratedLine",
        "mapping",
        "code",
        "remainingLines",
        "lastGeneratedLine",
        "lastGeneratedColumn",
        "lastGeneratedLine",
        "mapping",
        "lastGeneratedColumn",
        "mapping",
        "remainingLines",
        "code",
        "nextLine",
        "mapping",
        "remainingLines",
        "nextLine",
        "mapping",
        "lastGeneratedColumn",
        "mapping",
        "addMappingWithCode",
        "lastMapping",
        "code",
        "remainingLines",
        "nextLine",
        "mapping",
        "lastGeneratedColumn",
        "remainingLines",
        "nextLine",
        "mapping",
        "lastGeneratedColumn",
        "lastGeneratedColumn",
        "mapping",
        "addMappingWithCode",
        "lastMapping",
        "code",
        "lastMapping",
        "mapping",
        "addMappingWithCode",
        "lastMapping",
        "remainingLines",
        "aSourceMapConsumer",
        "sourceFile",
        "aSourceMapConsumer",
        "sourceFile",
        "content",
        "node",
        "sourceFile",
        "content",
        "node",
        "mapping",
        "code",
        "mapping",
        "mapping",
        "node",
        "code",
        "node",
        "SourceNode",
        "mapping",
        "mapping",
        "mapping",
        "code",
        "mapping",
        "SourceNode",
        "SourceNode_add",
        "aChunk",
        "aChunk",
        "aChunk",
        "chunk",
        "chunk",
        "aChunk",
        "SourceNode",
        "aChunk",
        "aChunk",
        "aChunk",
        "aChunk",
        "SourceNode",
        "SourceNode_prepend",
        "aChunk",
        "aChunk",
        "aChunk",
        "i",
        "i",
        "aChunk",
        "i",
        "aChunk",
        "SourceNode",
        "aChunk",
        "aChunk",
        "aChunk",
        "SourceNode",
        "SourceNode_walk",
        "aFn",
        "i",
        "len",
        "i",
        "chunk",
        "i",
        "chunk",
        "SourceNode",
        "chunk",
        "aFn",
        "chunk",
        "aFn",
        "chunk",
        "SourceNode",
        "SourceNode_join",
        "aSep",
        "len",
        "newChildren",
        "i",
        "i",
        "len",
        "i",
        "newChildren",
        "i",
        "newChildren",
        "aSep",
        "newChildren",
        "i",
        "newChildren",
        "SourceNode",
        "SourceNode_replaceRight",
        "aPattern",
        "aReplacement",
        "lastChild",
        "SourceNode",
        "lastChild",
        "aPattern",
        "aReplacement",
        "lastChild",
        "lastChild",
        "aPattern",
        "aReplacement",
        "aPattern",
        "aReplacement",
        "SourceNode",
        "SourceNode_setSourceContent",
        "aSourceFile",
        "aSourceContent",
        "util",
        "aSourceFile",
        "aSourceContent",
        "SourceNode",
        "SourceNode_walkSourceContents",
        "aFn",
        "i",
        "len",
        "i",
        "i",
        "SourceNode",
        "i",
        "aFn",
        "sources",
        "i",
        "len",
        "i",
        "aFn",
        "util",
        "sources",
        "i",
        "sources",
        "i",
        "SourceNode",
        "SourceNode_toString",
        "chunk",
        "chunk",
        "SourceNode",
        "SourceNode_toStringWithSourceMap",
        "aArgs",
        "SourceMapGenerator",
        "aArgs",
        "chunk",
        "original",
        "generated",
        "chunk",
        "original",
        "original",
        "original",
        "lastOriginalSource",
        "original",
        "lastOriginalLine",
        "original",
        "lastOriginalColumn",
        "original",
        "lastOriginalName",
        "original",
        "original",
        "original",
        "original",
        "generated",
        "generated",
        "original",
        "lastOriginalSource",
        "original",
        "lastOriginalLine",
        "original",
        "lastOriginalColumn",
        "original",
        "lastOriginalName",
        "original",
        "sourceMappingActive",
        "sourceMappingActive",
        "generated",
        "generated",
        "lastOriginalSource",
        "sourceMappingActive",
        "chunk",
        "ch",
        "ch",
        "generated",
        "generated",
        "generated",
        "sourceFile",
        "sourceContent",
        "sourceFile",
        "sourceContent",
        "generated",
        "exports",
        "SourceNode",
        "_dereq_",
        "exports",
        "define",
        "_dereq_",
        "_dereq_",
        "define",
        "_dereq_",
        "exports",
        "aArgs",
        "aName",
        "aDefaultValue",
        "aName",
        "aArgs",
        "aArgs",
        "aName",
        "arguments",
        "aDefaultValue",
        "aName",
        "exports",
        "getArg",
        "aUrl",
        "aUrl",
        "urlRegexp",
        "match",
        "match",
        "match",
        "match",
        "match",
        "match",
        "exports",
        "urlParse",
        "aParsedUrl",
        "aParsedUrl",
        "aParsedUrl",
        "url",
        "aParsedUrl",
        "aParsedUrl",
        "url",
        "aParsedUrl",
        "aParsedUrl",
        "url",
        "aParsedUrl",
        "aParsedUrl",
        "url",
        "aParsedUrl",
        "url",
        "exports",
        "urlGenerate",
        "aRoot",
        "aPath",
        "aPath",
        "urlRegexp",
        "aPath",
        "dataUrlRegexp",
        "aPath",
        "aPath",
        "url",
        "urlParse",
        "aRoot",
        "url",
        "aPath",
        "urlGenerate",
        "url",
        "aRoot",
        "aPath",
        "exports",
        "join",
        "aStr",
        "aStr",
        "exports",
        "toSetString",
        "aStr",
        "aStr",
        "exports",
        "fromSetString",
        "aRoot",
        "aPath",
        "aRoot",
        "aRoot",
        "urlParse",
        "aRoot",
        "aPath",
        "url",
        "url",
        "aPath",
        "aPath",
        "aRoot",
        "aPath",
        "aRoot",
        "aPath",
        "exports",
        "relative",
        "aStr1",
        "aStr2",
        "aStr1",
        "aStr2",
        "s1",
        "s2",
        "s1",
        "s2",
        "mappingA",
        "mappingB",
        "onlyCompareOriginal",
        "cmp",
        "strcmp",
        "mappingA",
        "mappingB",
        "cmp",
        "cmp",
        "cmp",
        "mappingA",
        "mappingB",
        "cmp",
        "cmp",
        "cmp",
        "mappingA",
        "mappingB",
        "cmp",
        "onlyCompareOriginal",
        "cmp",
        "cmp",
        "strcmp",
        "mappingA",
        "mappingB",
        "cmp",
        "cmp",
        "cmp",
        "mappingA",
        "mappingB",
        "cmp",
        "cmp",
        "mappingA",
        "mappingB",
        "exports",
        "compareByOriginalPositions",
        "mappingA",
        "mappingB",
        "onlyCompareGenerated",
        "cmp",
        "mappingA",
        "mappingB",
        "cmp",
        "cmp",
        "cmp",
        "mappingA",
        "mappingB",
        "cmp",
        "onlyCompareGenerated",
        "cmp",
        "cmp",
        "strcmp",
        "mappingA",
        "mappingB",
        "cmp",
        "cmp",
        "cmp",
        "mappingA",
        "mappingB",
        "cmp",
        "cmp",
        "cmp",
        "mappingA",
        "mappingB",
        "cmp",
        "cmp",
        "strcmp",
        "mappingA",
        "mappingB",
        "exports",
        "compareByGeneratedPositions",
        "_dereq_",
        "exports",
        "process",
        "__filename",
        "requireFn",
        "_dereq_",
        "ary",
        "i",
        "ary",
        "i",
        "i",
        "part",
        "ary",
        "i",
        "part",
        "ary",
        "i",
        "i",
        "part",
        "i",
        "ary",
        "ary",
        "i",
        "ary",
        "i",
        "i",
        "name",
        "baseName",
        "name",
        "name",
        "baseName",
        "baseParts",
        "baseName",
        "baseParts",
        "baseParts",
        "baseParts",
        "baseParts",
        "baseParts",
        "name",
        "trimDots",
        "baseParts",
        "name",
        "baseParts",
        "name",
        "relName",
        "name",
        "normalize",
        "name",
        "relName",
        "id",
        "value",
        "loaderCache",
        "id",
        "value",
        "load",
        "id",
        "text",
        "load",
        "makeRequire",
        "systemRequire",
        "exports",
        "relId",
        "deps",
        "callback",
        "deps",
        "stringRequire",
        "systemRequire",
        "exports",
        "deps",
        "relId",
        "deps",
        "deps",
        "depName",
        "stringRequire",
        "systemRequire",
        "exports",
        "depName",
        "relId",
        "process",
        "callback",
        "deps",
        "amdRequire",
        "filePath",
        "filePath",
        "normalize",
        "filePath",
        "path",
        "filePath",
        "amdRequire",
        "requireFn",
        "requireFn",
        "req",
        "arguments",
        "id",
        "deps",
        "factory",
        "id",
        "e",
        "loaderCache",
        "id",
        "m",
        "id",
        "__filename",
        "e",
        "r",
        "makeRequire",
        "requireFn",
        "e",
        "m",
        "id",
        "alreadyCalled",
        "alreadyCalled",
        "e",
        "m",
        "r",
        "makeRequire",
        "requireFn",
        "e",
        "m",
        "deps",
        "deps",
        "deps",
        "depName",
        "r",
        "depName",
        "factory",
        "result",
        "factory",
        "m",
        "deps",
        "result",
        "factory",
        "result",
        "m",
        "result",
        "id",
        "loaderCache",
        "id",
        "m",
        "stringRequire",
        "systemRequire",
        "exports",
        "id",
        "relId",
        "id",
        "index",
        "id",
        "normalize",
        "id",
        "relId",
        "id",
        "makeRequire",
        "systemRequire",
        "exports",
        "relId",
        "id",
        "exports",
        "id",
        "loaderCache",
        "id",
        "loaderCache",
        "id",
        "defineCache",
        "id",
        "runFactory",
        "defineCache",
        "id",
        "loaderCache",
        "id",
        "systemRequire",
        "systemRequire",
        "originalId",
        "id",
        "prefix",
        "id",
        "index",
        "id",
        "id",
        "index",
        "id",
        "plugin",
        "stringRequire",
        "systemRequire",
        "exports",
        "prefix",
        "relId",
        "plugin",
        "id",
        "plugin",
        "id",
        "makeNormalize",
        "relId",
        "id",
        "normalize",
        "id",
        "relId",
        "loaderCache",
        "id",
        "loaderCache",
        "id",
        "plugin",
        "id",
        "makeRequire",
        "systemRequire",
        "exports",
        "relId",
        "makeLoad",
        "id",
        "loaderCache",
        "id",
        "id",
        "deps",
        "factory",
        "id",
        "factory",
        "deps",
        "deps",
        "id",
        "id",
        "id",
        "factory",
        "id",
        "id",
        "deps",
        "deps",
        "deps",
        "factory",
        "deps",
        "deps",
        "deps",
        "deps",
        "id",
        "defineCache",
        "id",
        "id",
        "deps",
        "factory",
        "runFactory",
        "id",
        "deps",
        "factory",
        "define",
        "id",
        "loaderCache",
        "id",
        "loaderCache",
        "id",
        "defineCache",
        "id",
        "runFactory",
        "defineCache",
        "id",
        "loaderCache",
        "id",
        "define",
        "define",
        "amdefine",
        "_dereq_",
        "_dereq_",
        "exports",
        "contents",
        "contents",
        "docblockRe",
        "match",
        "match",
        "ltrimRe",
        "docblock",
        "docblock",
        "docblock",
        "commentStartRe",
        "commentEndRe",
        "wsRe",
        "stringStartRe",
        "prev",
        "docblock",
        "prev",
        "docblock",
        "docblock",
        "docblock",
        "multilineRe",
        "docblock",
        "docblock",
        "match",
        "propertyRe",
        "docblock",
        "result",
        "match",
        "match",
        "result",
        "docblock",
        "parse",
        "docblock",
        "i",
        "pairs",
        "i",
        "result",
        "pairs",
        "i",
        "pairs",
        "i",
        "result",
        "exports",
        "extract",
        "exports",
        "parse",
        "exports",
        "parseAsObject",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "utils",
        "utils",
        "utils",
        "esprima",
        "node",
        "parentNode",
        "node",
        "Syntax",
        "parentNode",
        "Syntax",
        "parentNode",
        "Syntax",
        "parentNode",
        "Syntax",
        "parentNode",
        "Syntax",
        "node",
        "parentNode",
        "parentIsFunction",
        "node",
        "Syntax",
        "parentIsCurlylessArrowFunc",
        "node",
        "parentNode",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "parentNode",
        "Syntax",
        "node",
        "path",
        "state",
        "path",
        "node",
        "state",
        "parentNode",
        "_nodeIsClosureScopeBoundary",
        "node",
        "parentNode",
        "state",
        "scopeIsStrict",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "scopeIsStrict",
        "node",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "node",
        "node",
        "Syntax",
        "startIndex",
        "state",
        "state",
        "utils",
        "state",
        "scopeIsStrict",
        "startIndex",
        "state",
        "state",
        "utils",
        "state",
        "parentNode",
        "state",
        "scopeIsStrict",
        "declareIdentInScope",
        "initScopeMetadata",
        "node",
        "state",
        "parentNode",
        "initScopeMetadata",
        "parentNode",
        "path",
        "path",
        "i",
        "parentNode",
        "i",
        "param",
        "parentNode",
        "i",
        "param",
        "Syntax",
        "declareIdentInScope",
        "param",
        "metadata",
        "state",
        "parentNode",
        "initScopeMetadata",
        "parentNode",
        "path",
        "path",
        "declareIdentInScope",
        "parentNode",
        "metadata",
        "state",
        "parentNode",
        "Syntax",
        "parentNode",
        "initScopeMetadata",
        "parentNode",
        "path",
        "parentNode",
        "declareIdentInScope",
        "parentNode",
        "metaData",
        "state",
        "collectClosureIdentsAndTraverse",
        "node",
        "path",
        "state",
        "_nodeIsBlockScopeBoundary",
        "node",
        "parentNode",
        "startIndex",
        "state",
        "state",
        "utils",
        "state",
        "parentNode",
        "state",
        "parentNode",
        "Syntax",
        "initScopeMetadata",
        "parentNode",
        "path",
        "parentNode",
        "declareIdentInScope",
        "parentNode",
        "metadata",
        "state",
        "collectBlockIdentsAndTraverse",
        "node",
        "path",
        "state",
        "node",
        "path",
        "state",
        "node",
        "utils",
        "node",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "node",
        "utils",
        "node",
        "state",
        "utils",
        "walker",
        "traverser",
        "node",
        "path",
        "state",
        "startIndex",
        "utils",
        "state",
        "startIndex",
        "node",
        "path",
        "state",
        "utils",
        "visitLocalClosureIdentifiers",
        "collectClosureIdentsAndTraverse",
        "node",
        "path",
        "state",
        "node",
        "path",
        "state",
        "utils",
        "visitLocalBlockIdentifiers",
        "collectBlockIdentsAndTraverse",
        "node",
        "path",
        "state",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "Syntax",
        "Syntax",
        "Syntax",
        "Syntax",
        "node",
        "metaData",
        "initScopeMetadata",
        "getBoundaryNode",
        "path",
        "path",
        "node",
        "declareIdentInScope",
        "node",
        "metaData",
        "state",
        "Syntax",
        "path",
        "metaData",
        "initScopeMetadata",
        "getBoundaryNode",
        "path",
        "path",
        "node",
        "declareIdentInScope",
        "node",
        "metaData",
        "state",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "node",
        "path",
        "state",
        "state",
        "i",
        "visitors",
        "i",
        "visitors",
        "i",
        "node",
        "path",
        "state",
        "visitors",
        "i",
        "traverse",
        "node",
        "path",
        "state",
        "source",
        "options",
        "_astCache",
        "source",
        "options",
        "_astCache",
        "source",
        "esprima",
        "source",
        "options",
        "options",
        "_astCache",
        "source",
        "ast",
        "ast",
        "visitors",
        "source",
        "options",
        "options",
        "options",
        "ast",
        "getAstForSource",
        "source",
        "options",
        "e",
        "e",
        "e",
        "e",
        "utils",
        "source",
        "ast",
        "options",
        "state",
        "visitors",
        "options",
        "_dereq_",
        "state",
        "SourceMapGenerator",
        "options",
        "traverse",
        "ast",
        "state",
        "utils",
        "source",
        "state",
        "state",
        "state",
        "options",
        "ret",
        "state",
        "ret",
        "options",
        "ret",
        "exports",
        "transform",
        "exports",
        "Syntax",
        "_dereq_",
        "exports",
        "_dereq_",
        "source",
        "rootNode",
        "transformOptions",
        "rootNode",
        "transformOptions",
        "source",
        "state",
        "update",
        "state",
        "update",
        "updatedKey",
        "ret",
        "updatedKey",
        "update",
        "updatedKey",
        "ret",
        "end",
        "state",
        "contentTransformer",
        "end",
        "state",
        "state",
        "state",
        "end",
        "updateIndent",
        "source",
        "state",
        "state",
        "transformed",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "source",
        "transformed",
        "i",
        "sourceLines",
        "i",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "sourceLines",
        "state",
        "state",
        "state",
        "state",
        "state",
        "sourceLines",
        "sourceLines",
        "state",
        "transformedLines",
        "transformedLines",
        "state",
        "contentTransformer",
        "contentTransformer",
        "transformed",
        "transformed",
        "state",
        "end",
        "node",
        "state",
        "state",
        "node",
        "node",
        "value",
        "value",
        "nonWhiteRegexp",
        "value",
        "value",
        "nonWhiteRegexp",
        "state",
        "state",
        "state",
        "pendingSource",
        "line",
        "pendingSourceLines",
        "charOffset",
        "line",
        "charOffset",
        "lineEndPos",
        "charOffset",
        "pendingSource",
        "charOffset",
        "currChar",
        "currChar",
        "withinString",
        "withinString",
        "withinString",
        "charOffset",
        "lineEndPos",
        "currChar",
        "line",
        "charOffset",
        "nextTwoChars",
        "charOffset",
        "lineEndPos",
        "nextTwoChars",
        "withinBlockComment",
        "charOffset",
        "nextTwoChars",
        "withinBlockComment",
        "charOffset",
        "withinBlockComment",
        "currChar",
        "charOffset",
        "state",
        "charOffset",
        "withinString",
        "end",
        "state",
        "catchup",
        "end",
        "state",
        "_replaceNonWhite",
        "end",
        "state",
        "catchup",
        "end",
        "state",
        "_stripNonWhite",
        "value",
        "value",
        "reNonNewline",
        "end",
        "state",
        "catchup",
        "end",
        "state",
        "stripNonNewline",
        "end",
        "state",
        "state",
        "end",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "end",
        "source",
        "sourceLines",
        "state",
        "sourceLines",
        "state",
        "state",
        "sourceLines",
        "sourceLines",
        "state",
        "end",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "transformedLines",
        "state",
        "transformedLines",
        "state",
        "state",
        "transformedLines",
        "transformedLines",
        "state",
        "state",
        "state",
        "indentBy",
        "i",
        "indentBy",
        "i",
        "leadingIndentRegexp",
        "i",
        "indentBy",
        "i",
        "leadingIndentRegexp",
        "start",
        "state",
        "start",
        "start",
        "start",
        "state",
        "start",
        "state",
        "start",
        "end",
        "start",
        "start",
        "state",
        "start",
        "end",
        "state",
        "state",
        "_dereq_",
        "state",
        "docblock",
        "docblock",
        "state",
        "state",
        "identName",
        "state",
        "stopBeforeNode",
        "state",
        "currScope",
        "currScope",
        "identName",
        "stopBeforeNode",
        "currScope",
        "stopBeforeNode",
        "currScope",
        "currScope",
        "identName",
        "state",
        "state",
        "identName",
        "boundaryNode",
        "path",
        "node",
        "boundaryNode",
        "path",
        "node",
        "identName",
        "metaData",
        "state",
        "state",
        "identName",
        "metaData",
        "metaData",
        "metaData",
        "state",
        "identName",
        "state",
        "state",
        "currScope",
        "currScope",
        "identName",
        "currScope",
        "identName",
        "currScope",
        "currScope",
        "identName",
        "state",
        "state",
        "identName",
        "analyzer",
        "traverser",
        "node",
        "path",
        "state",
        "node",
        "analyzer",
        "node",
        "path",
        "state",
        "path",
        "node",
        "getOrderedChildren",
        "node",
        "child",
        "traverser",
        "child",
        "path",
        "state",
        "node",
        "path",
        "node",
        "key",
        "node",
        "node",
        "key",
        "enqueueNodeWithStartIndex",
        "queue",
        "node",
        "key",
        "queue",
        "a",
        "b",
        "a",
        "b",
        "queue",
        "pair",
        "pair",
        "queue",
        "node",
        "node",
        "node",
        "node",
        "queue",
        "node",
        "node",
        "node",
        "ii",
        "node",
        "ii",
        "enqueueNodeWithStartIndex",
        "queue",
        "node",
        "ii",
        "node",
        "containsChildMatching",
        "node",
        "node",
        "node",
        "node",
        "matcher",
        "node",
        "matcher",
        "node",
        "foundMatchingChild",
        "child",
        "path",
        "state",
        "foundMatchingChild",
        "foundMatchingChild",
        "containsChildMatching",
        "child",
        "matcher",
        "analyzeAndTraverse",
        "nodeTypeAnalyzer",
        "nodeTypeTraverser",
        "node",
        "foundMatchingChild",
        "scopeTypes",
        "Syntax",
        "scopeTypes",
        "Syntax",
        "scopeTypes",
        "Syntax",
        "scopeTypes",
        "Syntax",
        "path",
        "ii",
        "path",
        "ii",
        "scopeTypes",
        "path",
        "ii",
        "path",
        "ii",
        "scopeTypes",
        "tempVarIndex",
        "tempVarIndex",
        "state",
        "state",
        "state",
        "tempVar",
        "tempVar",
        "state",
        "index",
        "state",
        "state",
        "state",
        "index",
        "state",
        "state",
        "index",
        "state",
        "exports",
        "analyzeAndTraverse",
        "exports",
        "append",
        "exports",
        "catchup",
        "exports",
        "catchupNewlines",
        "exports",
        "catchupWhiteOut",
        "exports",
        "catchupWhiteSpace",
        "exports",
        "containsChildMatching",
        "exports",
        "containsChildOfType",
        "exports",
        "createState",
        "exports",
        "declareIdentInLocalScope",
        "exports",
        "getBoundaryNode",
        "exports",
        "getDocblock",
        "exports",
        "getLexicalBindingMetadata",
        "exports",
        "getLocalBindingMetadata",
        "exports",
        "getNextSyntacticCharOffset",
        "exports",
        "getNodeSourceText",
        "exports",
        "getOrderedChildren",
        "exports",
        "getTempVar",
        "exports",
        "identInLocalScope",
        "exports",
        "identWithinLexicalScope",
        "exports",
        "indentBefore",
        "exports",
        "initScopeMetadata",
        "exports",
        "injectTempVar",
        "exports",
        "injectTempVarDeclarations",
        "exports",
        "move",
        "exports",
        "scopeTypes",
        "exports",
        "updateIndent",
        "exports",
        "updateState",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "Syntax",
        "notInExpression",
        "utils",
        "state",
        "utils",
        "state",
        "renderParams",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "node",
        "Syntax",
        "renderStatementBody",
        "renderExpressionBody",
        "path",
        "node",
        "renderBody",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "utils",
        "node",
        "node",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "node",
        "containsBindingSyntax",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "notInExpression",
        "utils",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "isParensFreeSingleParam",
        "node",
        "state",
        "node",
        "utils",
        "state",
        "node",
        "path",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "utils",
        "state",
        "node",
        "state",
        "node",
        "state",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "state",
        "node",
        "utils",
        "restParamVisitors",
        "node",
        "state",
        "state",
        "destructuringVisitors",
        "node",
        "utils",
        "state",
        "state",
        "state",
        "state",
        "utils",
        "state",
        "renderStatementBody",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "visitArrowFunction",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "exports",
        "visitArrowFunction",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "node",
        "Syntax",
        "utils",
        "state",
        "process",
        "traverse",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "utils",
        "state",
        "utils",
        "tempVar",
        "state",
        "process",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "state",
        "node",
        "Syntax",
        "utils",
        "state",
        "process",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "state",
        "process",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "state",
        "utils",
        "tempVar",
        "state",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "needsToBeWrappedInParenthesis",
        "utils",
        "state",
        "process",
        "traverse",
        "node",
        "path",
        "state",
        "needsToBeWrappedInParenthesis",
        "utils",
        "state",
        "utils",
        "state",
        "utils",
        "state",
        "node",
        "args",
        "args",
        "node",
        "Syntax",
        "utils",
        "state",
        "node",
        "Syntax",
        "utils",
        "args",
        "state",
        "args",
        "args",
        "utils",
        "arg",
        "state",
        "traverse",
        "arg",
        "path",
        "state",
        "args",
        "utils",
        "args",
        "state",
        "utils",
        "arg",
        "state",
        "utils",
        "state",
        "process",
        "traverse",
        "spread",
        "path",
        "state",
        "utils",
        "state",
        "process",
        "traverse",
        "spread",
        "path",
        "state",
        "utils",
        "node",
        "Syntax",
        "state",
        "utils",
        "node",
        "state",
        "visitCallSpread",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "node",
        "node",
        "node",
        "Syntax",
        "exports",
        "visitCallSpread",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "utils",
        "utils",
        "_anonClassUUIDCounter",
        "_mungedSymbolMaps",
        "state",
        "state",
        "mungeNamespace",
        "base62",
        "_anonClassUUIDCounter",
        "identName",
        "state",
        "state",
        "state",
        "shouldMinify",
        "_mungedSymbolMaps",
        "mungeNamespace",
        "_mungedSymbolMaps",
        "mungeNamespace",
        "_mungedSymbolMaps",
        "mungeNamespace",
        "symbolMap",
        "identName",
        "symbolMap",
        "identName",
        "base62",
        "_mungedSymbolMaps",
        "mungeNamespace",
        "identName",
        "symbolMap",
        "identName",
        "mungeNamespace",
        "identName",
        "node",
        "state",
        "node",
        "node",
        "Syntax",
        "ret",
        "node",
        "ret",
        "_generateAnonymousClassName",
        "state",
        "ret",
        "state",
        "node",
        "node",
        "ret",
        "classElement",
        "classElement",
        "Syntax",
        "classElement",
        "Syntax",
        "classElement",
        "node",
        "state",
        "state",
        "utils",
        "state",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "state",
        "node",
        "node",
        "node",
        "node",
        "node",
        "state",
        "utils",
        "state",
        "node",
        "utils",
        "node",
        "state",
        "path",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "visitClassMethod",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "methodNode",
        "methodNode",
        "state",
        "utils",
        "state",
        "node",
        "methodNode",
        "utils",
        "state",
        "state",
        "methodNode",
        "state",
        "prototypeOrStatic",
        "methodNode",
        "Syntax",
        "methodAccessor",
        "methodNode",
        "_shouldMungeIdentifier",
        "methodNode",
        "state",
        "methodAccessor",
        "_getMungedName",
        "methodAccessor",
        "state",
        "isGetter",
        "isSetter",
        "methodAccessor",
        "methodAccessor",
        "reservedWordsHelper",
        "methodAccessor",
        "methodAccessorComputed",
        "methodAccessor",
        "methodAccessor",
        "methodNode",
        "Syntax",
        "methodAccessor",
        "methodNode",
        "methodAccessorComputed",
        "isSetter",
        "isGetter",
        "utils",
        "objectAccessor",
        "methodAccessor",
        "methodNode",
        "state",
        "state",
        "methodAccessorComputed",
        "methodAccessor",
        "methodAccessor",
        "methodAccessor",
        "methodAccessor",
        "utils",
        "objectAccessor",
        "methodAccessor",
        "node",
        "state",
        "methodAccessorComputed",
        "methodAccessor",
        "methodAccessor",
        "utils",
        "objectAccessor",
        "methodAccessor",
        "node",
        "state",
        "utils",
        "methodNode",
        "state",
        "utils",
        "state",
        "node",
        "utils",
        "state",
        "i",
        "i",
        "utils",
        "node",
        "i",
        "state",
        "path",
        "node",
        "traverse",
        "i",
        "path",
        "state",
        "path",
        "utils",
        "state",
        "utils",
        "closingParenPosition",
        "state",
        "utils",
        "state",
        "utils",
        "openingBracketPosition",
        "state",
        "state",
        "utils",
        "state",
        "state",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "path",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "utils",
        "node",
        "state",
        "methodNode",
        "isGetter",
        "isSetter",
        "state",
        "utils",
        "state",
        "utils",
        "state",
        "visitClassFunctionExpression",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "path",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "node",
        "_shouldMungeIdentifier",
        "node",
        "state",
        "paramName",
        "_getMungedName",
        "node",
        "state",
        "utils",
        "paramName",
        "state",
        "utils",
        "node",
        "state",
        "visitClassMethodParam",
        "node",
        "path",
        "state",
        "path",
        "path",
        "path",
        "path",
        "parentFuncExpr",
        "Syntax",
        "parentClassMethod",
        "Syntax",
        "node",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "state",
        "state",
        "superClass",
        "superClass",
        "utils",
        "superClass",
        "superClass",
        "state",
        "superClass",
        "utils",
        "keyName",
        "state",
        "keyNameDeclarator",
        "declareIdentInLocalScope",
        "keyName",
        "initScopeMetadata",
        "node",
        "state",
        "utils",
        "keyNameDeclarator",
        "keyName",
        "superClass",
        "superClass",
        "keyName",
        "className",
        "keyName",
        "superClass",
        "keyName",
        "state",
        "SUPER_PROTO_IDENT_PREFIX",
        "superClass",
        "utils",
        "superProtoIdentStr",
        "state",
        "utils",
        "superProtoIdentStr",
        "superClass",
        "superClass",
        "state",
        "declareIdentInLocalScope",
        "superProtoIdentStr",
        "initScopeMetadata",
        "node",
        "state",
        "utils",
        "className",
        "superProtoIdentStr",
        "state",
        "utils",
        "className",
        "className",
        "state",
        "utils",
        "className",
        "superClass",
        "state",
        "node",
        "_isConstructorMethod",
        "utils",
        "className",
        "state",
        "state",
        "utils",
        "state",
        "superClass",
        "utils",
        "superClass",
        "superClass",
        "state",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "node",
        "_getSuperClassInfo",
        "node",
        "state",
        "state",
        "utils",
        "state",
        "className",
        "className",
        "superClass",
        "_renderClassBody",
        "traverse",
        "node",
        "path",
        "state",
        "visitClassDeclaration",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "node",
        "node",
        "_generateAnonymousClassName",
        "state",
        "_getSuperClassInfo",
        "node",
        "state",
        "utils",
        "state",
        "state",
        "utils",
        "state",
        "className",
        "className",
        "superClass",
        "_renderClassBody",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "className",
        "state",
        "visitClassExpression",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "_getMungedName",
        "node",
        "state",
        "state",
        "utils",
        "node",
        "state",
        "visitPrivateIdentifier",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "_shouldMungeIdentifier",
        "node",
        "state",
        "path",
        "Syntax",
        "path",
        "node",
        "path",
        "utils",
        "node",
        "state",
        "state",
        "path",
        "Syntax",
        "path",
        "Syntax",
        "path",
        "Syntax",
        "path",
        "Syntax",
        "path",
        "Syntax",
        "i",
        "path",
        "i",
        "path",
        "i",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "state",
        "node",
        "Syntax",
        "_isConstructorMethod",
        "state",
        "utils",
        "superClassName",
        "state",
        "SUPER_PROTO_IDENT_PREFIX",
        "superClassName",
        "state",
        "Syntax",
        "protoProp",
        "state",
        "state",
        "Syntax",
        "protoProp",
        "state",
        "utils",
        "protoProp",
        "state",
        "utils",
        "node",
        "state",
        "node",
        "Syntax",
        "utils",
        "SUPER_PROTO_IDENT_PREFIX",
        "superClassName",
        "state",
        "utils",
        "node",
        "state",
        "node",
        "utils",
        "node",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "node",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "visitSuperCallExpression",
        "node",
        "path",
        "state",
        "state",
        "node",
        "Syntax",
        "node",
        "callee",
        "Syntax",
        "callee",
        "callee",
        "Syntax",
        "callee",
        "traverse",
        "node",
        "path",
        "state",
        "state",
        "utils",
        "SUPER_PROTO_IDENT_PREFIX",
        "superClassName",
        "state",
        "utils",
        "node",
        "state",
        "visitSuperMemberExpression",
        "node",
        "path",
        "state",
        "state",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "node",
        "exports",
        "resetSymbols",
        "exports",
        "visitClassDeclaration",
        "visitClassExpression",
        "visitClassFunctionExpression",
        "visitClassMethod",
        "visitClassMethodParam",
        "visitPrivateIdentifier",
        "visitSuperCallExpression",
        "visitSuperMemberExpression",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "utils",
        "state",
        "state",
        "utils",
        "node",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "getDestructuredComponents",
        "node",
        "state",
        "state",
        "state",
        "visitStructuredVariable",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "isStructuredPattern",
        "node",
        "node",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "node",
        "state",
        "state",
        "getPatternItems",
        "node",
        "idx",
        "patternItems",
        "idx",
        "patternItems",
        "idx",
        "item",
        "item",
        "Syntax",
        "components",
        "item",
        "utils",
        "tmpIndex",
        "idx",
        "item",
        "Syntax",
        "restPropertyHelpers",
        "utils",
        "tmpIndex",
        "patternItems",
        "components",
        "item",
        "restExpression",
        "getPatternItemAccessor",
        "node",
        "item",
        "tmpIndex",
        "idx",
        "getPatternItemValue",
        "node",
        "item",
        "value",
        "Syntax",
        "components",
        "value",
        "accessor",
        "components",
        "utils",
        "state",
        "accessor",
        "getDestructuredComponents",
        "value",
        "state",
        "components",
        "node",
        "node",
        "node",
        "node",
        "patternItem",
        "tmpIndex",
        "idx",
        "utils",
        "tmpIndex",
        "node",
        "Syntax",
        "reservedWordsHelper",
        "patternItem",
        "tmpName",
        "patternItem",
        "patternItem",
        "Syntax",
        "tmpName",
        "patternItem",
        "patternItem",
        "Syntax",
        "tmpName",
        "patternItem",
        "node",
        "Syntax",
        "tmpName",
        "idx",
        "node",
        "patternItem",
        "node",
        "Syntax",
        "patternItem",
        "patternItem",
        "traverse",
        "node",
        "path",
        "state",
        "node",
        "utils",
        "utils",
        "state",
        "state",
        "utils",
        "exprNode",
        "state",
        "traverse",
        "exprNode",
        "path",
        "state",
        "utils",
        "exprNode",
        "state",
        "utils",
        "getDestructuredComponents",
        "exprNode",
        "state",
        "state",
        "utils",
        "node",
        "state",
        "state",
        "visitStructuredAssignment",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "isStructuredPattern",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "utils",
        "getParamIndex",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "paramNode",
        "path",
        "path",
        "k",
        "funcNode",
        "k",
        "funcNode",
        "k",
        "param",
        "paramNode",
        "isStructuredPattern",
        "param",
        "tmpIndex",
        "tmpIndex",
        "visitStructuredParameter",
        "node",
        "path",
        "state",
        "isStructuredPattern",
        "node",
        "isFunctionNode",
        "path",
        "node",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "utils",
        "funcNode",
        "state",
        "renderDestructuredComponents",
        "funcNode",
        "state",
        "funcNode",
        "utils",
        "restParamVisitors",
        "funcNode",
        "state",
        "state",
        "funcNode",
        "state",
        "k",
        "funcNode",
        "k",
        "funcNode",
        "k",
        "isStructuredPattern",
        "param",
        "destructuredComponents",
        "getDestructuredComponents",
        "param",
        "state",
        "state",
        "destructuredComponents",
        "utils",
        "destructuredComponents",
        "state",
        "visitFunctionBodyForStructuredParameter",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "isFunctionNode",
        "path",
        "exports",
        "visitStructuredVariable",
        "visitStructuredAssignment",
        "visitStructuredParameter",
        "visitFunctionBodyForStructuredParameter",
        "exports",
        "renderDestructuredComponents",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "traverse",
        "node",
        "path",
        "state",
        "node",
        "isGenerator",
        "utils",
        "node",
        "state",
        "node",
        "utils",
        "node",
        "state",
        "reservedWordsHelper",
        "node",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "isGenerator",
        "state",
        "path",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "visitObjectConciseMethod",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "node",
        "exports",
        "visitObjectConciseMethod",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "node",
        "state",
        "visitObjectLiteralShortNotation",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "node",
        "node",
        "path",
        "Syntax",
        "exports",
        "visitObjectLiteralShortNotation",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "node",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "node",
        "utils",
        "node",
        "state",
        "path",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "node",
        "path",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "utils",
        "node",
        "state",
        "utils",
        "node",
        "state",
        "path",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "visitFunctionParamsWithRestParam",
        "node",
        "path",
        "state",
        "_nodeIsFunctionWithRestParam",
        "node",
        "functionNode",
        "state",
        "state",
        "state",
        "functionNode",
        "utils",
        "idx",
        "functionNode",
        "utils",
        "len",
        "utils",
        "idx",
        "utils",
        "len",
        "utils",
        "idx",
        "functionNode",
        "utils",
        "idx",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "path",
        "utils",
        "renderRestParamSetup",
        "parentNode",
        "state",
        "state",
        "visitFunctionBodyWithRestParam",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "_nodeIsFunctionWithRestParam",
        "path",
        "exports",
        "renderRestParamSetup",
        "exports",
        "visitFunctionParamsWithRestParam",
        "visitFunctionBodyWithRestParam",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "traverse",
        "node",
        "path",
        "state",
        "node",
        "utils",
        "state",
        "ii",
        "templateElements",
        "ii",
        "templateElements",
        "ii",
        "templateElement",
        "utils",
        "getCookedValue",
        "templateElement",
        "state",
        "templateElement",
        "utils",
        "state",
        "utils",
        "templateElement",
        "state",
        "utils",
        "templateElement",
        "state",
        "ii",
        "templateElement",
        "utils",
        "state",
        "utils",
        "templateElement",
        "state",
        "templateElement",
        "node",
        "ii",
        "substitution",
        "Syntax",
        "substitution",
        "Syntax",
        "substitution",
        "Syntax",
        "utils",
        "substitution",
        "state",
        "utils",
        "state",
        "traverse",
        "substitution",
        "path",
        "state",
        "utils",
        "substitution",
        "state",
        "utils",
        "state",
        "templateElements",
        "ii",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "visitTemplateLiteral",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "node",
        "template",
        "utils",
        "node",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "ii",
        "numQuasis",
        "ii",
        "utils",
        "getCookedValue",
        "template",
        "ii",
        "state",
        "ii",
        "numQuasis",
        "utils",
        "state",
        "utils",
        "state",
        "ii",
        "ii",
        "numQuasis",
        "ii",
        "utils",
        "getRawValue",
        "template",
        "ii",
        "state",
        "ii",
        "numQuasis",
        "utils",
        "state",
        "utils",
        "state",
        "numQuasis",
        "ii",
        "ii",
        "template",
        "ii",
        "template",
        "ii",
        "utils",
        "state",
        "utils",
        "template",
        "ii",
        "state",
        "utils",
        "template",
        "ii",
        "state",
        "utils",
        "expression",
        "state",
        "traverse",
        "expression",
        "path",
        "state",
        "utils",
        "expression",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "visitTaggedTemplateExpression",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "templateElement",
        "templateElement",
        "templateElement",
        "templateElement",
        "exports",
        "visitTemplateLiteral",
        "visitTaggedTemplateExpression",
        "_dereq_",
        "exports",
        "_dereq_",
        "properties",
        "i",
        "properties",
        "i",
        "properties",
        "i",
        "property",
        "Syntax",
        "property",
        "Syntax",
        "names",
        "property",
        "names",
        "property",
        "names",
        "source",
        "exclusion",
        "restFunction",
        "source",
        "exclusion",
        "accessorExpression",
        "getRestFunctionCall",
        "accessorExpression",
        "accessorExpression",
        "excludedProperties",
        "getPropertyNames",
        "excludedProperties",
        "excludedNames",
        "getSimpleShallowCopy",
        "accessorExpression",
        "getRestFunctionCall",
        "accessorExpression",
        "excludedNames",
        "exports",
        "renderRestExpression",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "i",
        "node",
        "i",
        "node",
        "i",
        "property",
        "Syntax",
        "previousWasSpread",
        "utils",
        "state",
        "i",
        "utils",
        "state",
        "utils",
        "property",
        "state",
        "utils",
        "property",
        "state",
        "traverse",
        "property",
        "path",
        "state",
        "utils",
        "property",
        "state",
        "previousWasSpread",
        "utils",
        "property",
        "state",
        "previousWasSpread",
        "utils",
        "state",
        "traverse",
        "property",
        "path",
        "state",
        "utils",
        "property",
        "state",
        "previousWasSpread",
        "utils",
        "node",
        "state",
        "utils",
        "node",
        "state",
        "previousWasSpread",
        "utils",
        "state",
        "utils",
        "state",
        "visitObjectLiteralSpread",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "i",
        "node",
        "i",
        "node",
        "i",
        "property",
        "Syntax",
        "hasAtLeastOneSpreadProperty",
        "property",
        "hasAtLeastOneSpreadProperty",
        "exports",
        "visitObjectLiteralSpread",
        "_dereq_",
        "exports",
        "KEYWORDS",
        "FUTURE_RESERVED_WORDS",
        "LITERALS",
        "RESERVED_WORDS",
        "k",
        "reservedWordsMap",
        "k",
        "KEYWORDS",
        "ES3_FUTURE_RESERVED_WORDS",
        "LITERALS",
        "ES3_RESERVED_WORDS",
        "k",
        "es3ReservedWordsMap",
        "k",
        "exports",
        "word",
        "reservedWordsMap",
        "word",
        "exports",
        "word",
        "es3ReservedWordsMap",
        "word",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "visitProperty",
        "node",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "node",
        "node",
        "node",
        "reserverdWordsHelper",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "state",
        "visitMemberExpression",
        "node",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "reserverdWordsHelper",
        "node",
        "exports",
        "visitProperty",
        "visitMemberExpression",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "esprima",
        "node",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "node",
        "state",
        "visitClassProperty",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "visitTypeAlias",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "utils",
        "node",
        "state",
        "utils",
        "node",
        "state",
        "visitTypeCast",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "visitInterfaceDeclaration",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "visitDeclare",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "Syntax",
        "Syntax",
        "Syntax",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "node",
        "state",
        "visitFunctionParametricAnnotation",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "path",
        "_isFunctionNode",
        "path",
        "node",
        "path",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "node",
        "state",
        "visitFunctionReturnAnnotation",
        "node",
        "path",
        "state",
        "path",
        "_isFunctionNode",
        "path",
        "node",
        "path",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "node",
        "state",
        "utils",
        "node",
        "state",
        "visitOptionalFunctionParameterAnnotation",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "node",
        "path",
        "_isFunctionNode",
        "path",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "node",
        "state",
        "visitTypeAnnotatedIdentifier",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "utils",
        "node",
        "state",
        "visitTypeAnnotatedObjectOrArrayPattern",
        "node",
        "path",
        "state",
        "node",
        "Syntax",
        "node",
        "Syntax",
        "rightType",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "traverse",
        "node",
        "path",
        "state",
        "path",
        "path",
        "visitMethod",
        "node",
        "path",
        "state",
        "node",
        "node",
        "node",
        "node",
        "node",
        "traverse",
        "node",
        "path",
        "state",
        "utils",
        "node",
        "state",
        "visitImportType",
        "node",
        "path",
        "state",
        "node",
        "node",
        "exports",
        "visitClassProperty",
        "visitDeclare",
        "visitImportType",
        "visitInterfaceDeclaration",
        "visitFunctionParametricAnnotation",
        "visitFunctionReturnAnnotation",
        "visitMethod",
        "visitOptionalFunctionParameterAnnotation",
        "visitTypeAlias",
        "visitTypeCast",
        "visitTypeAnnotatedIdentifier",
        "visitTypeAnnotatedObjectOrArrayPattern",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "isLast",
        "state",
        "start",
        "end",
        "start",
        "utils",
        "start",
        "state",
        "lines",
        "line",
        "index",
        "line",
        "lastNonEmptyLine",
        "index",
        "lines",
        "line",
        "index",
        "index",
        "index",
        "lines",
        "index",
        "lastNonEmptyLine",
        "line",
        "isFirstLine",
        "trimmedLine",
        "trimmedLine",
        "isLastLine",
        "trimmedLine",
        "trimmedLine",
        "isFirstLine",
        "utils",
        "line",
        "state",
        "trimmedLine",
        "isLastNonEmptyLine",
        "utils",
        "trimmedLine",
        "isLastNonEmptyLine",
        "state",
        "isLastNonEmptyLine",
        "end",
        "utils",
        "end",
        "state",
        "isLast",
        "utils",
        "state",
        "trimmedLine",
        "isLastLine",
        "utils",
        "line",
        "state",
        "isLastLine",
        "utils",
        "state",
        "utils",
        "state",
        "traverse",
        "isLast",
        "path",
        "state",
        "utils",
        "state",
        "utils",
        "state",
        "traverse",
        "path",
        "state",
        "isLast",
        "Syntax",
        "utils",
        "state",
        "trimLeft",
        "utils",
        "state",
        "utils",
        "state",
        "trimLeft",
        "utils",
        "state",
        "attr",
        "attr",
        "attr",
        "attr",
        "value",
        "value",
        "exports",
        "renderJSXExpressionContainer",
        "exports",
        "renderJSXLiteral",
        "exports",
        "quoteAttrName",
        "exports",
        "trimLeft",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "value",
        "value",
        "reNonWhiteParen",
        "name",
        "tagConvention",
        "name",
        "traverse",
        "path",
        "state",
        "openingElement",
        "openingElement",
        "utils",
        "openingElement",
        "state",
        "trimLeft",
        "nameObject",
        "Syntax",
        "nameObject",
        "utils",
        "state",
        "nameObject",
        "Syntax",
        "isTagName",
        "nameObject",
        "utils",
        "nameObject",
        "state",
        "utils",
        "nameObject",
        "state",
        "utils",
        "nameObject",
        "state",
        "utils",
        "nameObject",
        "state",
        "utils",
        "state",
        "attributesObject",
        "attributesObject",
        "attr",
        "attr",
        "Syntax",
        "hasAtLeastOneSpreadProperty",
        "utils",
        "state",
        "hasAttributes",
        "utils",
        "state",
        "utils",
        "state",
        "attributesObject",
        "attr",
        "index",
        "index",
        "attributesObject",
        "attr",
        "Syntax",
        "previousWasSpread",
        "utils",
        "state",
        "utils",
        "attr",
        "state",
        "stripNonWhiteParen",
        "utils",
        "attr",
        "state",
        "utils",
        "attr",
        "state",
        "stripNonWhiteParen",
        "traverse",
        "attr",
        "path",
        "state",
        "utils",
        "attr",
        "state",
        "utils",
        "attr",
        "state",
        "stripNonWhiteParen",
        "isLast",
        "utils",
        "state",
        "utils",
        "attr",
        "state",
        "previousWasSpread",
        "isLast",
        "isLast",
        "attributesObject",
        "index",
        "Syntax",
        "attr",
        "attr",
        "utils",
        "attr",
        "state",
        "trimLeft",
        "previousWasSpread",
        "utils",
        "state",
        "utils",
        "quoteAttrName",
        "name",
        "state",
        "utils",
        "state",
        "attr",
        "state",
        "state",
        "attr",
        "isLast",
        "utils",
        "state",
        "utils",
        "attr",
        "state",
        "utils",
        "attr",
        "state",
        "attr",
        "Syntax",
        "renderJSXLiteral",
        "attr",
        "isLast",
        "state",
        "renderJSXExpressionContainer",
        "traverse",
        "attr",
        "isLast",
        "path",
        "state",
        "utils",
        "attr",
        "state",
        "trimLeft",
        "previousWasSpread",
        "openingElement",
        "utils",
        "openingElement",
        "state",
        "trimLeft",
        "utils",
        "openingElement",
        "state",
        "hasAttributes",
        "previousWasSpread",
        "utils",
        "state",
        "hasAtLeastOneSpreadProperty",
        "utils",
        "state",
        "child",
        "child",
        "Syntax",
        "child",
        "child",
        "childrenToRender",
        "childrenToRender",
        "child",
        "index",
        "child",
        "Syntax",
        "child",
        "Syntax",
        "lastRenderableIndex",
        "index",
        "lastRenderableIndex",
        "utils",
        "state",
        "childrenToRender",
        "child",
        "index",
        "utils",
        "child",
        "state",
        "trimLeft",
        "index",
        "lastRenderableIndex",
        "child",
        "Syntax",
        "renderJSXLiteral",
        "child",
        "isLast",
        "state",
        "child",
        "Syntax",
        "renderJSXExpressionContainer",
        "traverse",
        "child",
        "isLast",
        "path",
        "state",
        "traverse",
        "child",
        "path",
        "state",
        "isLast",
        "utils",
        "state",
        "utils",
        "child",
        "state",
        "trimLeft",
        "openingElement",
        "utils",
        "openingElement",
        "state",
        "trimLeft",
        "utils",
        "openingElement",
        "state",
        "utils",
        "state",
        "trimLeft",
        "utils",
        "state",
        "utils",
        "state",
        "visitReactTag",
        "path",
        "state",
        "Syntax",
        "exports",
        "visitReactTag",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "displayName",
        "state",
        "Syntax",
        "Syntax",
        "Syntax",
        "Syntax",
        "Syntax",
        "properties",
        "property",
        "property",
        "Syntax",
        "property",
        "property",
        "value",
        "safe",
        "utils",
        "state",
        "utils",
        "displayName",
        "state",
        "traverse",
        "path",
        "state",
        "Syntax",
        "left",
        "right",
        "Syntax",
        "left",
        "right",
        "Syntax",
        "left",
        "right",
        "left",
        "left",
        "Syntax",
        "left",
        "left",
        "left",
        "left",
        "Syntax",
        "addDisplayName",
        "left",
        "right",
        "state",
        "visitReactDisplayName",
        "path",
        "state",
        "Syntax",
        "Syntax",
        "Syntax",
        "exports",
        "visitReactDisplayName",
        "_dereq_",
        "exports",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "_dereq_",
        "es6ArrowFunctions",
        "es6Classes",
        "es6Destructuring",
        "es6ObjectConciseMethod",
        "es6ObjectShortNotation",
        "es6RestParameters",
        "es6Templates",
        "es6CallSpread",
        "es7SpreadProperty",
        "react",
        "reactDisplayName",
        "reservedWords",
        "excludes",
        "transformRunOrder",
        "i",
        "il",
        "i",
        "excludes",
        "excludes",
        "transformRunOrder",
        "i",
        "ret",
        "ret",
        "transformVisitors",
        "transformRunOrder",
        "i",
        "ret",
        "sets",
        "sets",
        "visitors",
        "transformSets",
        "transformSets",
        "visitor",
        "visitors",
        "visitor",
        "visitors",
        "i",
        "transformRunOrder",
        "i",
        "visitorsToInclude",
        "transformRunOrder",
        "i",
        "visitorList",
        "visitorList",
        "transformVisitors",
        "transformRunOrder",
        "i",
        "visitorList",
        "exports",
        "getVisitorsBySet",
        "exports",
        "getAllVisitors",
        "exports",
        "transformVisitors",
        "_dereq_",
        "exports",
        "_dereq_",
        "sourceMap",
        "sourceCode",
        "sourceFilename",
        "sourceMap",
        "json",
        "sourceMap",
        "json",
        "sourceFilename",
        "json",
        "sourceCode",
        "Buffer",
        "json",
        "base64",
        "inlineSourceMap"
    ],
    "literals": [
        "\"object\"",
        "\"undefined\"",
        "\"function\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"function\"",
        "\"Cannot find module '\"",
        "\"'\"",
        "\"MODULE_NOT_FOUND\"",
        "\"function\"",
        "'use strict'",
        "'../main'",
        "'./inline-source-map'",
        "'__defineGetter__'",
        "'\\n'",
        "''",
        "''",
        "'... '",
        "' ...'",
        "'\\n\\n'",
        "'\\n'",
        "' '",
        "'^'",
        "'\\n    at '",
        "'fileName'",
        "':'",
        "':'",
        "'Inline JSX script'",
        "' ('",
        "')'",
        "'\\n'",
        "'script'",
        "'Microsoft.XMLHTTP'",
        "'GET'",
        "'overrideMimeType'",
        "'text/plain'",
        "'Could not load '",
        "'async'",
        "'script'",
        "'You are using the in-browser JSX transformer. Be sure to precompile '",
        "'your JSX for production - '",
        "'http://facebook.github.io/react/docs/tooling-integration.html#jsx'",
        "'undefined'",
        "'head'",
        "'a'",
        "'DOMContentLoaded'",
        "'onload'",
        "\"../main\"",
        "\"./inline-source-map\"",
        "'use strict'",
        "'./vendor/fbtransform/visitors'",
        "'jstransform'",
        "'jstransform/visitors/type-syntax'",
        "'./vendor/inline-source-map'",
        "'\\n'",
        "'module'",
        "'nonStrictModule'",
        "'es3'",
        "'react'",
        "'harmony'",
        "'es3'",
        "\"./vendor/fbtransform/visitors\"",
        "\"./vendor/inline-source-map\"",
        "\"jstransform\"",
        "\"jstransform/visitors/type-syntax\"",
        "'base64-js'",
        "'ieee754'",
        "'is-array'",
        "'function'",
        "'number'",
        "'string'",
        "'object'",
        "'Buffer'",
        "'must start with number, buffer, array or string'",
        "'Attempt to allocate Buffer larger than maximum size: 0x'",
        "' bytes'",
        "'number'",
        "'string'",
        "'number'",
        "'Arguments must be Buffers'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'binary'",
        "'base64'",
        "'raw'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'list argument must be an Array of Buffers.'",
        "''",
        "'utf8'",
        "'ascii'",
        "'binary'",
        "'raw'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'base64'",
        "'utf8'",
        "''",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'Unknown encoding: '",
        "''",
        "'Argument must be a Buffer'",
        "''",
        "'hex'",
        "' '",
        "' ... '",
        "'<Buffer '",
        "'>'",
        "'Argument must be a Buffer'",
        "'string'",
        "'number'",
        "'function'",
        "'val must be string, number or Buffer'",
        "'.get() is deprecated. Access using array indexes instead.'",
        "'.set() is deprecated. Access using array indexes instead.'",
        "'Invalid hex string'",
        "'Invalid hex string'",
        "'attempt to write outside buffer bounds'",
        "'utf8'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'Unknown encoding: '",
        "'Buffer'",
        "''",
        "''",
        "''",
        "'%'",
        "''",
        "''",
        "''",
        "''",
        "'offset is not uint'",
        "'Trying to access beyond buffer length'",
        "'buffer must be a Buffer instance'",
        "'value is out of bounds'",
        "'index out of range'",
        "'value is out of bounds'",
        "'index out of range'",
        "'index out of range'",
        "'targetStart out of bounds'",
        "'sourceStart out of bounds'",
        "'sourceEnd out of bounds'",
        "'end < start'",
        "'start out of bounds'",
        "'end out of bounds'",
        "'number'",
        "'undefined'",
        "'Buffer.toArrayBuffer not supported in this browser'",
        "''",
        "''",
        "'='",
        "''",
        "'object'",
        "'number'",
        "'0'",
        "'Invalid code point'",
        "\"base64-js\"",
        "\"ieee754\"",
        "\"is-array\"",
        "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'",
        "'use strict'",
        "'undefined'",
        "'+'",
        "'/'",
        "'0'",
        "'a'",
        "'A'",
        "'-'",
        "'_'",
        "'Invalid string. Length must be a multiple of 4'",
        "'='",
        "'='",
        "\"\"",
        "'=='",
        "'='",
        "'undefined'",
        "'[object Array]'",
        "'.'",
        "'..'",
        "'..'",
        "''",
        "'string'",
        "'Arguments to path.resolve must be strings'",
        "'/'",
        "'/'",
        "'/'",
        "'/'",
        "'/'",
        "''",
        "'.'",
        "'/'",
        "'/'",
        "'/'",
        "'.'",
        "'/'",
        "'/'",
        "''",
        "'/'",
        "'string'",
        "'Arguments to path.join must be strings'",
        "'/'",
        "''",
        "''",
        "'/'",
        "'/'",
        "'..'",
        "'/'",
        "'/'",
        "':'",
        "'.'",
        "'ab'",
        "'b'",
        "'_process'",
        "\"_process\"",
        "'browser'",
        "''",
        "'process.binding is not supported'",
        "'/'",
        "'process.chdir is not supported'",
        "'use strict'",
        "'function'",
        "'exports'",
        "'undefined'",
        "'use strict'",
        "'Boolean'",
        "'<end>'",
        "'Identifier'",
        "'Keyword'",
        "'Null'",
        "'Numeric'",
        "'Punctuator'",
        "'String'",
        "'JSXIdentifier'",
        "'JSXText'",
        "'RegularExpression'",
        "'('",
        "'{'",
        "'['",
        "'in'",
        "'typeof'",
        "'instanceof'",
        "'new'",
        "'return'",
        "'case'",
        "'delete'",
        "'throw'",
        "'void'",
        "'='",
        "'+='",
        "'-='",
        "'*='",
        "'/='",
        "'%='",
        "'<<='",
        "'>>='",
        "'>>>='",
        "'&='",
        "'|='",
        "'^='",
        "','",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'++'",
        "'--'",
        "'<<'",
        "'>>'",
        "'>>>'",
        "'&'",
        "'|'",
        "'^'",
        "'!'",
        "'~'",
        "'&&'",
        "'||'",
        "'?'",
        "':'",
        "'==='",
        "'=='",
        "'>='",
        "'<='",
        "'<'",
        "'>'",
        "'!='",
        "'!=='",
        "'AnyTypeAnnotation'",
        "'ArrayExpression'",
        "'ArrayPattern'",
        "'ArrayTypeAnnotation'",
        "'ArrowFunctionExpression'",
        "'AssignmentExpression'",
        "'BinaryExpression'",
        "'BlockStatement'",
        "'BooleanTypeAnnotation'",
        "'BreakStatement'",
        "'CallExpression'",
        "'CatchClause'",
        "'ClassBody'",
        "'ClassDeclaration'",
        "'ClassExpression'",
        "'ClassImplements'",
        "'ClassProperty'",
        "'ComprehensionBlock'",
        "'ComprehensionExpression'",
        "'ConditionalExpression'",
        "'ContinueStatement'",
        "'DebuggerStatement'",
        "'DeclareClass'",
        "'DeclareFunction'",
        "'DeclareModule'",
        "'DeclareVariable'",
        "'DoWhileStatement'",
        "'EmptyStatement'",
        "'ExportDeclaration'",
        "'ExportBatchSpecifier'",
        "'ExportSpecifier'",
        "'ExpressionStatement'",
        "'ForInStatement'",
        "'ForOfStatement'",
        "'ForStatement'",
        "'FunctionDeclaration'",
        "'FunctionExpression'",
        "'FunctionTypeAnnotation'",
        "'FunctionTypeParam'",
        "'GenericTypeAnnotation'",
        "'Identifier'",
        "'IfStatement'",
        "'ImportDeclaration'",
        "'ImportDefaultSpecifier'",
        "'ImportNamespaceSpecifier'",
        "'ImportSpecifier'",
        "'InterfaceDeclaration'",
        "'InterfaceExtends'",
        "'IntersectionTypeAnnotation'",
        "'LabeledStatement'",
        "'Literal'",
        "'LogicalExpression'",
        "'MemberExpression'",
        "'MethodDefinition'",
        "'ModuleSpecifier'",
        "'NewExpression'",
        "'NullableTypeAnnotation'",
        "'NumberTypeAnnotation'",
        "'ObjectExpression'",
        "'ObjectPattern'",
        "'ObjectTypeAnnotation'",
        "'ObjectTypeCallProperty'",
        "'ObjectTypeIndexer'",
        "'ObjectTypeProperty'",
        "'Program'",
        "'Property'",
        "'QualifiedTypeIdentifier'",
        "'ReturnStatement'",
        "'SequenceExpression'",
        "'SpreadElement'",
        "'SpreadProperty'",
        "'StringLiteralTypeAnnotation'",
        "'StringTypeAnnotation'",
        "'SwitchCase'",
        "'SwitchStatement'",
        "'TaggedTemplateExpression'",
        "'TemplateElement'",
        "'TemplateLiteral'",
        "'ThisExpression'",
        "'ThrowStatement'",
        "'TupleTypeAnnotation'",
        "'TryStatement'",
        "'TypeAlias'",
        "'TypeAnnotation'",
        "'TypeCastExpression'",
        "'TypeofTypeAnnotation'",
        "'TypeParameterDeclaration'",
        "'TypeParameterInstantiation'",
        "'UnaryExpression'",
        "'UnionTypeAnnotation'",
        "'UpdateExpression'",
        "'VariableDeclaration'",
        "'VariableDeclarator'",
        "'VoidTypeAnnotation'",
        "'WhileStatement'",
        "'WithStatement'",
        "'JSXIdentifier'",
        "'JSXNamespacedName'",
        "'JSXMemberExpression'",
        "'JSXEmptyExpression'",
        "'JSXExpressionContainer'",
        "'JSXElement'",
        "'JSXClosingElement'",
        "'JSXOpeningElement'",
        "'JSXAttribute'",
        "'JSXSpreadAttribute'",
        "'JSXText'",
        "'YieldExpression'",
        "'AwaitExpression'",
        "'static'",
        "'static'",
        "'prototype'",
        "'Unexpected token %0'",
        "'Unexpected number'",
        "'Unexpected string'",
        "'Unexpected identifier'",
        "'Unexpected reserved word'",
        "'Unexpected quasi %0'",
        "'Unexpected end of input'",
        "'Illegal newline after throw'",
        "'Invalid regular expression'",
        "'Invalid regular expression: missing /'",
        "'Invalid left-hand side in assignment'",
        "'Invalid left-hand side in formals list'",
        "'Invalid left-hand side in for-in'",
        "'More than one default clause in switch statement'",
        "'Missing catch or finally after try'",
        "'Undefined label \\'%0\\''",
        "'%0 \\'%1\\' has already been declared'",
        "'Illegal continue statement'",
        "'Illegal break statement'",
        "'Illegal duplicate property in class definition'",
        "'Illegal constructor property in class definition'",
        "'Illegal return statement'",
        "'Illegal spread element'",
        "'Strict mode code may not include a with statement'",
        "'Catch variable may not be eval or arguments in strict mode'",
        "'Variable name may not be eval or arguments in strict mode'",
        "'Parameter name eval or arguments is not allowed in strict mode'",
        "'Strict mode function may not have duplicate parameter names'",
        "'Rest parameter must be final parameter of an argument list'",
        "'Rest parameter can not have a default value'",
        "'Spread must be the final element of an element list'",
        "'A rest property must be the final property of an object literal'",
        "'Invalid rest parameter'",
        "'Invalid spread argument'",
        "'Function name may not be eval or arguments in strict mode'",
        "'Octal literals are not allowed in strict mode.'",
        "'Delete of an unqualified identifier in strict mode.'",
        "'Duplicate data property in object literal not allowed in strict mode'",
        "'Object literal may not have data and accessor property with the same name'",
        "'Object literal may not have multiple get/set accessors with the same name'",
        "'Assignment to eval or arguments is not allowed in strict mode'",
        "'Postfix increment/decrement may not have eval or arguments operand in strict mode'",
        "'Prefix increment/decrement may not have eval or arguments operand in strict mode'",
        "'Use of future reserved word in strict mode'",
        "'Missing from clause'",
        "'Missing as after import *'",
        "'Invalid module specifier'",
        "'Illegal import declaration'",
        "'Illegal export declaration'",
        "'Const must be initialized'",
        "'Comprehension must have at least one block'",
        "'Comprehension Error'",
        "'Each is not supported'",
        "'JSX value should be either an expression or a quoted JSX text'",
        "'Expected corresponding JSX closing tag for %0'",
        "'Adjacent JSX elements must be wrapped in an enclosing tag'",
        "'Unexpected token =>. It looks like '",
        "'you are trying to write a function type, but you ended up '",
        "'writing a grouped type followed by an =>, which is a syntax '",
        "'error. Remember, function type parameters are named so function '",
        "'types look like (name1: type1, name2: type2) => returnType. You '",
        "'probably wrote (type1) => returnType'",
        "'[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]'",
        "'[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]'",
        "'^0+(?!$)'",
        "'ASSERT: '",
        "'$'",
        "'$'",
        "'$'",
        "\"delete\"",
        "'$'",
        "'0123456789abcdefABCDEF'",
        "'01234567'",
        "'\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF'",
        "'class'",
        "'enum'",
        "'export'",
        "'extends'",
        "'import'",
        "'super'",
        "'implements'",
        "'interface'",
        "'package'",
        "'private'",
        "'protected'",
        "'public'",
        "'static'",
        "'yield'",
        "'let'",
        "'eval'",
        "'arguments'",
        "'if'",
        "'in'",
        "'do'",
        "'var'",
        "'for'",
        "'new'",
        "'try'",
        "'let'",
        "'this'",
        "'else'",
        "'case'",
        "'void'",
        "'with'",
        "'enum'",
        "'while'",
        "'break'",
        "'catch'",
        "'throw'",
        "'const'",
        "'class'",
        "'super'",
        "'return'",
        "'typeof'",
        "'delete'",
        "'switch'",
        "'export'",
        "'import'",
        "'default'",
        "'finally'",
        "'extends'",
        "'function'",
        "'continue'",
        "'debugger'",
        "'instanceof'",
        "'number'",
        "'Comment must have valid position'",
        "'Line'",
        "'Line'",
        "'ILLEGAL'",
        "'Block'",
        "'ILLEGAL'",
        "'u'",
        "'0123456789abcdef'",
        "''",
        "'}'",
        "'ILLEGAL'",
        "'0123456789abcdef'",
        "'}'",
        "'ILLEGAL'",
        "'ILLEGAL'",
        "'u'",
        "'\\\\'",
        "'ILLEGAL'",
        "'ILLEGAL'",
        "'u'",
        "'\\\\'",
        "'ILLEGAL'",
        "'null'",
        "'true'",
        "'false'",
        "'>'",
        "'>'",
        "'>'",
        "'='",
        "'>>>='",
        "'>'",
        "'>'",
        "'>'",
        "'>>>'",
        "'<'",
        "'<'",
        "'='",
        "'<<='",
        "'>'",
        "'>'",
        "'='",
        "'>>='",
        "'.'",
        "'.'",
        "'.'",
        "'...'",
        "'+-<>&|'",
        "'='",
        "'>'",
        "'=>'",
        "'<>=!+-*%&|^/'",
        "'.'",
        "'ILLEGAL'",
        "''",
        "'ILLEGAL'",
        "'ILLEGAL'",
        "'0x'",
        "''",
        "'0'",
        "'1'",
        "'ILLEGAL'",
        "'ILLEGAL'",
        "'0'",
        "''",
        "'ILLEGAL'",
        "'ILLEGAL'",
        "'.'",
        "'Numeric literal must start with a decimal digit or a decimal point'",
        "''",
        "'.'",
        "'0'",
        "'x'",
        "'X'",
        "'b'",
        "'B'",
        "'o'",
        "'O'",
        "'ILLEGAL'",
        "'.'",
        "'e'",
        "'E'",
        "'+'",
        "'-'",
        "'ILLEGAL'",
        "'ILLEGAL'",
        "''",
        "'\\''",
        "'\"'",
        "'String literal must starts with a quote'",
        "''",
        "'\\\\'",
        "'n'",
        "'\\n'",
        "'r'",
        "'\\r'",
        "'t'",
        "'\\t'",
        "'u'",
        "'x'",
        "'{'",
        "'b'",
        "'\\b'",
        "'f'",
        "'\\f'",
        "'v'",
        "'\\x0B'",
        "'01234567'",
        "'01234567'",
        "'0123'",
        "'01234567'",
        "'\\r'",
        "'\\n'",
        "''",
        "'ILLEGAL'",
        "''",
        "'`'",
        "'$'",
        "'{'",
        "'\\\\'",
        "'n'",
        "'\\n'",
        "'r'",
        "'\\r'",
        "'t'",
        "'\\t'",
        "'u'",
        "'x'",
        "'{'",
        "'b'",
        "'\\b'",
        "'f'",
        "'\\f'",
        "'v'",
        "'\\v'",
        "'01234567'",
        "'01234567'",
        "'0123'",
        "'01234567'",
        "'\\r'",
        "'\\n'",
        "'\\r'",
        "'\\n'",
        "'\\n'",
        "'ILLEGAL'",
        "'`'",
        "'}'",
        "'ILLEGAL'",
        "'u'",
        "'x'",
        "'x'",
        "'/'",
        "'Regular expression literal must start with a slash'",
        "'\\\\'",
        "']'",
        "'/'",
        "'['",
        "''",
        "''",
        "'\\\\'",
        "'u'",
        "'u'",
        "'\\\\u'",
        "'u'",
        "'\\\\u'",
        "'ILLEGAL'",
        "'\\\\'",
        "'ILLEGAL'",
        "'Punctuator'",
        "')'",
        "'Keyword'",
        "'if'",
        "'while'",
        "'for'",
        "'with'",
        "'}'",
        "'Keyword'",
        "'Keyword'",
        "'Keyword'",
        "'this'",
        "'function'",
        "'SyntaxTree'",
        "'||'",
        "'&&'",
        "'arguments'",
        "\"static\"",
        "\"static\"",
        "\"static\"",
        "\"extends\"",
        "'['",
        "'arguments'",
        "'++'",
        "'--'",
        "'static'",
        "\"static\"",
        "\"static\"",
        "\"implements\"",
        "\"implements\"",
        "'default'",
        "'Message reference must be in range'",
        "'number'",
        "'Line '",
        "': '",
        "'Line '",
        "': '",
        "'='",
        "'*='",
        "'/='",
        "'%='",
        "'+='",
        "'-='",
        "'<<='",
        "'>>='",
        "'>>>='",
        "'&='",
        "'^='",
        "'|='",
        "'yield'",
        "'async'",
        "'await'",
        "';'",
        "'}'",
        "'['",
        "']'",
        "'for'",
        "'for'",
        "'if'",
        "'if'",
        "'('",
        "')'",
        "','",
        "']'",
        "']'",
        "'for'",
        "'if'",
        "','",
        "']'",
        "'['",
        "']'",
        "'['",
        "':'",
        "'init'",
        "'('",
        "'<'",
        "'<'",
        "'init'",
        "'get'",
        "'['",
        "'('",
        "')'",
        "':'",
        "'get'",
        "'set'",
        "'['",
        "'('",
        "')'",
        "':'",
        "'set'",
        "'async'",
        "'['",
        "'<'",
        "'init'",
        "'init'",
        "'*'",
        "'['",
        "'<'",
        "'('",
        "'init'",
        "':'",
        "'init'",
        "'('",
        "'<'",
        "'<'",
        "'init'",
        "'...'",
        "'{'",
        "'}'",
        "'...'",
        "'init'",
        "'get'",
        "'}'",
        "','",
        "'}'",
        "'('",
        "':'",
        "')'",
        "'function'",
        "'this'",
        "'function'",
        "'class'",
        "'super'",
        "'super'",
        "'true'",
        "'['",
        "'{'",
        "'('",
        "'/'",
        "'/='",
        "'<'",
        "'('",
        "')'",
        "')'",
        "','",
        "')'",
        "'...'",
        "'.'",
        "'['",
        "']'",
        "'new'",
        "'('",
        "'new'",
        "'.'",
        "'['",
        "'('",
        "'('",
        "'['",
        "'['",
        "'.'",
        "'.'",
        "'new'",
        "'.'",
        "'['",
        "'['",
        "'['",
        "'.'",
        "'.'",
        "'++'",
        "'--'",
        "'++'",
        "'--'",
        "'+'",
        "'-'",
        "'~'",
        "'!'",
        "'delete'",
        "'void'",
        "'typeof'",
        "'delete'",
        "'||'",
        "'&&'",
        "'|'",
        "'^'",
        "'&'",
        "'=='",
        "'!='",
        "'==='",
        "'!=='",
        "'<'",
        "'>'",
        "'<='",
        "'>='",
        "'instanceof'",
        "'in'",
        "'<<'",
        "'>>'",
        "'>>>'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'?'",
        "':'",
        "'init'",
        "'init'",
        "'It is guaranteed that SpreadElement is last element by parseExpression'",
        "'=>'",
        "'('",
        "')'",
        "'...'",
        "'=>'",
        "'('",
        "'=>'",
        "'='",
        "','",
        "','",
        "')'",
        "'=>'",
        "'}'",
        "'undefined'",
        "'{'",
        "'}'",
        "'<'",
        "'>'",
        "'>'",
        "','",
        "'>'",
        "'<'",
        "'>'",
        "'>'",
        "','",
        "'>'",
        "'['",
        "':'",
        "']'",
        "':'",
        "'<'",
        "'('",
        "')'",
        "','",
        "'...'",
        "')'",
        "':'",
        "'{'",
        "'}'",
        "'static'",
        "'static'",
        "'['",
        "'('",
        "'<'",
        "':'",
        "'<'",
        "'('",
        "'?'",
        "':'",
        "';'",
        "'}'",
        "'}'",
        "'.'",
        "'.'",
        "'<'",
        "'void'",
        "'typeof'",
        "'['",
        "']'",
        "']'",
        "','",
        "']'",
        "'?'",
        "':'",
        "')'",
        "','",
        "'...'",
        "'any'",
        "'bool'",
        "'boolean'",
        "'number'",
        "'string'",
        "'{'",
        "'['",
        "'<'",
        "'('",
        "')'",
        "'=>'",
        "'('",
        "')'",
        "'...'",
        "'?'",
        "':'",
        "')'",
        "'=>'",
        "')'",
        "'=>'",
        "'void'",
        "'typeof'",
        "'['",
        "'['",
        "']'",
        "'?'",
        "'&'",
        "'|'",
        "':'",
        "'?'",
        "'?'",
        "':'",
        "'{'",
        "':'",
        "'['",
        "':'",
        "'const'",
        "'='",
        "'='",
        "'='",
        "','",
        "'var'",
        "'var'",
        "'*'",
        "'default'",
        "'default'",
        "'as'",
        "'export'",
        "'default'",
        "'function'",
        "'class'",
        "'class'",
        "'function'",
        "'from'",
        "'{'",
        "'['",
        "'type'",
        "'type'",
        "'let'",
        "'const'",
        "'var'",
        "'class'",
        "'function'",
        "'*'",
        "'from'",
        "'{'",
        "'}'",
        "'default'",
        "','",
        "'}'",
        "'from'",
        "'as'",
        "'{'",
        "'}'",
        "','",
        "'}'",
        "'*'",
        "'as'",
        "'import'",
        "'type'",
        "'from'",
        "'{'",
        "'*'",
        "'default'",
        "','",
        "'*'",
        "'{'",
        "'from'",
        "';'",
        "'if'",
        "'('",
        "')'",
        "'else'",
        "'do'",
        "'while'",
        "'('",
        "')'",
        "';'",
        "'while'",
        "'('",
        "')'",
        "'for'",
        "'each'",
        "'('",
        "';'",
        "'var'",
        "'let'",
        "'const'",
        "'in'",
        "'of'",
        "'in'",
        "'var'",
        "'of'",
        "'in'",
        "'undefined'",
        "';'",
        "'undefined'",
        "';'",
        "';'",
        "')'",
        "')'",
        "'undefined'",
        "'in'",
        "'continue'",
        "'break'",
        "'return'",
        "';'",
        "'}'",
        "'with'",
        "'('",
        "')'",
        "'default'",
        "'case'",
        "':'",
        "'}'",
        "'default'",
        "'case'",
        "'undefined'",
        "'switch'",
        "'('",
        "')'",
        "'{'",
        "'}'",
        "'}'",
        "'}'",
        "'throw'",
        "'catch'",
        "'('",
        "')'",
        "')'",
        "'try'",
        "'catch'",
        "'finally'",
        "'debugger'",
        "';'",
        "'{'",
        "'('",
        "'break'",
        "'continue'",
        "'debugger'",
        "'do'",
        "'for'",
        "'function'",
        "'class'",
        "'if'",
        "'return'",
        "'switch'",
        "'throw'",
        "'try'",
        "'var'",
        "'while'",
        "'with'",
        "':'",
        "'Label'",
        "\"delete\"",
        "'{'",
        "'{'",
        "'use strict'",
        "'}'",
        "'undefined'",
        "'}'",
        "'...'",
        "'['",
        "':'",
        "'{'",
        "':'",
        "'='",
        "')'",
        "')'",
        "'('",
        "')'",
        "','",
        "')'",
        "':'",
        "'function'",
        "'*'",
        "'<'",
        "'function'",
        "'*'",
        "'('",
        "'<'",
        "'<'",
        "'yield'",
        "'*'",
        "'await'",
        "'get'",
        "'set'",
        "\"static\"",
        "''",
        "'Identifier'",
        "'get'",
        "'('",
        "'('",
        "')'",
        "':'",
        "'get'",
        "'set'",
        "'('",
        "'('",
        "')'",
        "':'",
        "'set'",
        "'<'",
        "'async'",
        "'('",
        "''",
        "';'",
        "';'",
        "'static'",
        "'*'",
        "'get'",
        "'set'",
        "'['",
        "':'",
        "\"static\"",
        "'{'",
        "'}'",
        "'undefined'",
        "\"static\"",
        "\"static\"",
        "'constructor'",
        "\"static\"",
        "'constructor'",
        "'}'",
        "'implements'",
        "'implements'",
        "'<'",
        "','",
        "','",
        "'class'",
        "'implements'",
        "'implements'",
        "'extends'",
        "'{'",
        "'<'",
        "'extends'",
        "'extends'",
        "'<'",
        "'implements'",
        "'implements'",
        "'class'",
        "'<'",
        "'extends'",
        "'extends'",
        "'<'",
        "'implements'",
        "'implements'",
        "'const'",
        "'let'",
        "'function'",
        "'export'",
        "'import'",
        "'interface'",
        "'type'",
        "'interface'",
        "'declare'",
        "'class'",
        "'function'",
        "'var'",
        "'module'",
        "'module'",
        "'nonStrictModule'",
        "'export'",
        "'import'",
        "'use strict'",
        "'undefined'",
        "'module'",
        "'\\u0022'",
        "'&'",
        "'\\u0027'",
        "'<'",
        "'>'",
        "'\\u00A0'",
        "'\\u00A1'",
        "'\\u00A2'",
        "'\\u00A3'",
        "'\\u00A4'",
        "'\\u00A5'",
        "'\\u00A6'",
        "'\\u00A7'",
        "'\\u00A8'",
        "'\\u00A9'",
        "'\\u00AA'",
        "'\\u00AB'",
        "'\\u00AC'",
        "'\\u00AD'",
        "'\\u00AE'",
        "'\\u00AF'",
        "'\\u00B0'",
        "'\\u00B1'",
        "'\\u00B2'",
        "'\\u00B3'",
        "'\\u00B4'",
        "'\\u00B5'",
        "'\\u00B6'",
        "'\\u00B7'",
        "'\\u00B8'",
        "'\\u00B9'",
        "'\\u00BA'",
        "'\\u00BB'",
        "'\\u00BC'",
        "'\\u00BD'",
        "'\\u00BE'",
        "'\\u00BF'",
        "'\\u00C0'",
        "'\\u00C1'",
        "'\\u00C2'",
        "'\\u00C3'",
        "'\\u00C4'",
        "'\\u00C5'",
        "'\\u00C6'",
        "'\\u00C7'",
        "'\\u00C8'",
        "'\\u00C9'",
        "'\\u00CA'",
        "'\\u00CB'",
        "'\\u00CC'",
        "'\\u00CD'",
        "'\\u00CE'",
        "'\\u00CF'",
        "'\\u00D0'",
        "'\\u00D1'",
        "'\\u00D2'",
        "'\\u00D3'",
        "'\\u00D4'",
        "'\\u00D5'",
        "'\\u00D6'",
        "'\\u00D7'",
        "'\\u00D8'",
        "'\\u00D9'",
        "'\\u00DA'",
        "'\\u00DB'",
        "'\\u00DC'",
        "'\\u00DD'",
        "'\\u00DE'",
        "'\\u00DF'",
        "'\\u00E0'",
        "'\\u00E1'",
        "'\\u00E2'",
        "'\\u00E3'",
        "'\\u00E4'",
        "'\\u00E5'",
        "'\\u00E6'",
        "'\\u00E7'",
        "'\\u00E8'",
        "'\\u00E9'",
        "'\\u00EA'",
        "'\\u00EB'",
        "'\\u00EC'",
        "'\\u00ED'",
        "'\\u00EE'",
        "'\\u00EF'",
        "'\\u00F0'",
        "'\\u00F1'",
        "'\\u00F2'",
        "'\\u00F3'",
        "'\\u00F4'",
        "'\\u00F5'",
        "'\\u00F6'",
        "'\\u00F7'",
        "'\\u00F8'",
        "'\\u00F9'",
        "'\\u00FA'",
        "'\\u00FB'",
        "'\\u00FC'",
        "'\\u00FD'",
        "'\\u00FE'",
        "'\\u00FF'",
        "'\\u0152'",
        "'\\u0153'",
        "'\\u0160'",
        "'\\u0161'",
        "'\\u0178'",
        "'\\u0192'",
        "'\\u02C6'",
        "'\\u02DC'",
        "'\\u0391'",
        "'\\u0392'",
        "'\\u0393'",
        "'\\u0394'",
        "'\\u0395'",
        "'\\u0396'",
        "'\\u0397'",
        "'\\u0398'",
        "'\\u0399'",
        "'\\u039A'",
        "'\\u039B'",
        "'\\u039C'",
        "'\\u039D'",
        "'\\u039E'",
        "'\\u039F'",
        "'\\u03A0'",
        "'\\u03A1'",
        "'\\u03A3'",
        "'\\u03A4'",
        "'\\u03A5'",
        "'\\u03A6'",
        "'\\u03A7'",
        "'\\u03A8'",
        "'\\u03A9'",
        "'\\u03B1'",
        "'\\u03B2'",
        "'\\u03B3'",
        "'\\u03B4'",
        "'\\u03B5'",
        "'\\u03B6'",
        "'\\u03B7'",
        "'\\u03B8'",
        "'\\u03B9'",
        "'\\u03BA'",
        "'\\u03BB'",
        "'\\u03BC'",
        "'\\u03BD'",
        "'\\u03BE'",
        "'\\u03BF'",
        "'\\u03C0'",
        "'\\u03C1'",
        "'\\u03C2'",
        "'\\u03C3'",
        "'\\u03C4'",
        "'\\u03C5'",
        "'\\u03C6'",
        "'\\u03C7'",
        "'\\u03C8'",
        "'\\u03C9'",
        "'\\u03D1'",
        "'\\u03D2'",
        "'\\u03D6'",
        "'\\u2002'",
        "'\\u2003'",
        "'\\u2009'",
        "'\\u200C'",
        "'\\u200D'",
        "'\\u200E'",
        "'\\u200F'",
        "'\\u2013'",
        "'\\u2014'",
        "'\\u2018'",
        "'\\u2019'",
        "'\\u201A'",
        "'\\u201C'",
        "'\\u201D'",
        "'\\u201E'",
        "'\\u2020'",
        "'\\u2021'",
        "'\\u2022'",
        "'\\u2026'",
        "'\\u2030'",
        "'\\u2032'",
        "'\\u2033'",
        "'\\u2039'",
        "'\\u203A'",
        "'\\u203E'",
        "'\\u2044'",
        "'\\u20AC'",
        "'\\u2111'",
        "'\\u2118'",
        "'\\u211C'",
        "'\\u2122'",
        "'\\u2135'",
        "'\\u2190'",
        "'\\u2191'",
        "'\\u2192'",
        "'\\u2193'",
        "'\\u2194'",
        "'\\u21B5'",
        "'\\u21D0'",
        "'\\u21D1'",
        "'\\u21D2'",
        "'\\u21D3'",
        "'\\u21D4'",
        "'\\u2200'",
        "'\\u2202'",
        "'\\u2203'",
        "'\\u2205'",
        "'\\u2207'",
        "'\\u2208'",
        "'\\u2209'",
        "'\\u220B'",
        "'\\u220F'",
        "'\\u2211'",
        "'\\u2212'",
        "'\\u2217'",
        "'\\u221A'",
        "'\\u221D'",
        "'\\u221E'",
        "'\\u2220'",
        "'\\u2227'",
        "'\\u2228'",
        "'\\u2229'",
        "'\\u222A'",
        "'int'",
        "'\\u222B'",
        "'\\u2234'",
        "'\\u223C'",
        "'\\u2245'",
        "'\\u2248'",
        "'\\u2260'",
        "'\\u2261'",
        "'\\u2264'",
        "'\\u2265'",
        "'\\u2282'",
        "'\\u2283'",
        "'\\u2284'",
        "'\\u2286'",
        "'\\u2287'",
        "'\\u2295'",
        "'\\u2297'",
        "'\\u22A5'",
        "'\\u22C5'",
        "'\\u2308'",
        "'\\u2309'",
        "'\\u230A'",
        "'\\u230B'",
        "'\\u2329'",
        "'\\u232A'",
        "'\\u25CA'",
        "'\\u2660'",
        "'\\u2663'",
        "'\\u2665'",
        "'\\u2666'",
        "':'",
        "'.'",
        "''",
        "''",
        "'&'",
        "'Entity must start with an ampersand'",
        "';'",
        "';'",
        "'#'",
        "'x'",
        "'0'",
        "''",
        "'&'",
        "''",
        "'&'",
        "'\\r'",
        "'\\n'",
        "'\\''",
        "'\"'",
        "'String literal must starts with a quote'",
        "'ILLEGAL'",
        "'<'",
        "'>'",
        "'{'",
        "'}'",
        "':'",
        "'.'",
        "':'",
        "'.'",
        "':'",
        "'{'",
        "'JSX attributes must only be assigned a non-empty '",
        "'expression'",
        "'<'",
        "'}'",
        "'{'",
        "'}'",
        "'}'",
        "'{'",
        "'...'",
        "'}'",
        "'{'",
        "'='",
        "'{'",
        "'<'",
        "'<'",
        "'/'",
        "'>'",
        "'<'",
        "'/'",
        "'>'",
        "'/'",
        "'/'",
        "'>'",
        "'>'",
        "'<'",
        "'/'",
        "'<'",
        "'type'",
        "'<'",
        "'='",
        "'<'",
        "'<'",
        "'extends'",
        "'extends'",
        "','",
        "','",
        "'interface'",
        "'interface'",
        "'declare'",
        "'class'",
        "'declare'",
        "'function'",
        "'<'",
        "'('",
        "')'",
        "':'",
        "'declare'",
        "'var'",
        "'declare'",
        "'module'",
        "'{'",
        "'}'",
        "'class'",
        "'function'",
        "'var'",
        "'}'",
        "'Punctuator'",
        "'/'",
        "'/='",
        "'RegularExpression'",
        "'undefined'",
        "'function'",
        "'string'",
        "'boolean'",
        "'boolean'",
        "'boolean'",
        "'boolean'",
        "'undefined'",
        "'undefined'",
        "'string'",
        "'undefined'",
        "'boolean'",
        "'boolean'",
        "'boolean'",
        "'postProcess'",
        "'boolean'",
        "'boolean'",
        "'boolean'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'13001.1001.0-dev-harmony-fb'",
        "'function'",
        "'function'",
        "\"0\"",
        "\"1\"",
        "\"2\"",
        "\"3\"",
        "\"4\"",
        "\"5\"",
        "\"6\"",
        "\"7\"",
        "\"8\"",
        "\"9\"",
        "\"a\"",
        "\"b\"",
        "\"c\"",
        "\"d\"",
        "\"e\"",
        "\"f\"",
        "\"g\"",
        "\"h\"",
        "\"i\"",
        "\"j\"",
        "\"k\"",
        "\"l\"",
        "\"m\"",
        "\"n\"",
        "\"o\"",
        "\"p\"",
        "\"q\"",
        "\"r\"",
        "\"s\"",
        "\"t\"",
        "\"u\"",
        "\"v\"",
        "\"w\"",
        "\"x\"",
        "\"y\"",
        "\"z\"",
        "\"A\"",
        "\"B\"",
        "\"C\"",
        "\"D\"",
        "\"E\"",
        "\"F\"",
        "\"G\"",
        "\"H\"",
        "\"I\"",
        "\"J\"",
        "\"K\"",
        "\"L\"",
        "\"M\"",
        "\"N\"",
        "\"O\"",
        "\"P\"",
        "\"Q\"",
        "\"R\"",
        "\"S\"",
        "\"T\"",
        "\"U\"",
        "\"V\"",
        "\"W\"",
        "\"X\"",
        "\"Y\"",
        "\"Z\"",
        "'0'",
        "''",
        "\"\"",
        "'./source-map/source-map-generator'",
        "'./source-map/source-map-consumer'",
        "'./source-map/source-node'",
        "\"./source-map/source-map-consumer\"",
        "\"./source-map/source-map-generator\"",
        "\"./source-map/source-node\"",
        "'function'",
        "'amdefine'",
        "'./util'",
        "'\"'",
        "'\" is not in the set.'",
        "'No element indexed by '",
        "\"./util\"",
        "\"amdefine\"",
        "'function'",
        "'amdefine'",
        "'./base64'",
        "\"\"",
        "\"Expected more digits in base 64 VLQ value.\"",
        "\"./base64\"",
        "\"amdefine\"",
        "'function'",
        "'amdefine'",
        "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'",
        "''",
        "\"Must be between 0 and 63: \"",
        "\"Not a valid base 64 digit: \"",
        "\"amdefine\"",
        "'function'",
        "'amdefine'",
        "\"amdefine\"",
        "'function'",
        "'amdefine'",
        "'./util'",
        "'./binary-search'",
        "'./array-set'",
        "'./base64-vlq'",
        "'string'",
        "''",
        "'version'",
        "'sources'",
        "'names'",
        "'sourceRoot'",
        "'sourcesContent'",
        "'mappings'",
        "'file'",
        "'Unsupported version: '",
        "'sources'",
        "'_generatedMappings'",
        "'_originalMappings'",
        "';'",
        "','",
        "'Found a source, but no line and column'",
        "'Found a source and line, but no column'",
        "'number'",
        "'Line must be greater than or equal to 1, got '",
        "'Column must be greater than or equal to 0, got '",
        "'line'",
        "'column'",
        "\"generatedLine\"",
        "\"generatedColumn\"",
        "'source'",
        "'originalLine'",
        "'originalColumn'",
        "'name'",
        "\"\"",
        "\"file\"",
        "\"/\"",
        "\"/\"",
        "\"/\"",
        "'\"'",
        "'\" is not in the SourceMap.'",
        "'source'",
        "'line'",
        "'column'",
        "\"originalLine\"",
        "\"originalColumn\"",
        "'generatedLine'",
        "'generatedColumn'",
        "\"Unknown order of iteration.\"",
        "\"./array-set\"",
        "\"./base64-vlq\"",
        "\"./binary-search\"",
        "\"./util\"",
        "\"amdefine\"",
        "'function'",
        "'amdefine'",
        "'./base64-vlq'",
        "'./util'",
        "'./array-set'",
        "'file'",
        "'sourceRoot'",
        "'generated'",
        "'original'",
        "'source'",
        "'name'",
        "'line'",
        "'column'",
        "'line'",
        "'column'",
        "'line'",
        "'column'",
        "'Invalid mapping: '",
        "''",
        "';'",
        "','",
        "\"./array-set\"",
        "\"./base64-vlq\"",
        "\"./util\"",
        "\"amdefine\"",
        "'function'",
        "'amdefine'",
        "'./source-map-generator'",
        "'./util'",
        "'\\n'",
        "\"\\n\"",
        "\"\"",
        "\"\\n\"",
        "\"\\n\"",
        "\"string\"",
        "\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \"",
        "\"string\"",
        "\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \"",
        "''",
        "'string'",
        "''",
        "\"\"",
        "\"\"",
        "''",
        "'\\n'",
        "\"./source-map-generator\"",
        "\"./util\"",
        "\"amdefine\"",
        "'function'",
        "'amdefine'",
        "'\"'",
        "'\" is a required argument.'",
        "\"://\"",
        "\"@\"",
        "\":\"",
        "'/'",
        "''",
        "'/'",
        "'$'",
        "''",
        "\"/\"",
        "\"/\"",
        "'/'",
        "\"\"",
        "\"\"",
        "\"amdefine\"",
        "'use strict'",
        "'use strict'",
        "'path'",
        "'.'",
        "'..'",
        "'..'",
        "'..'",
        "'.'",
        "'/'",
        "'/'",
        "'/'",
        "'amdefine does not implement load.fromText'",
        "'string'",
        "'.'",
        "'amdefine with no module ID cannot be called more than once per file.'",
        "'function'",
        "'!'",
        "'require'",
        "'exports'",
        "'module'",
        "'No module with ID: '",
        "'string'",
        "'require'",
        "'exports'",
        "'module'",
        "'_process'",
        "\"/node_modules/jstransform/node_modules/source-map/node_modules/amdefine/amdefine.js\"",
        "\"_process\"",
        "\"path\"",
        "''",
        "''",
        "''",
        "''",
        "''",
        "' '",
        "'$1'",
        "''",
        "\"\\n$1 $2\\n\"",
        "\"use strict\"",
        "'esprima-fb'",
        "'./utils'",
        "'use strict'",
        "'arguments'",
        "'var'",
        "'Parse Error: '",
        "'source-map'",
        "'transformed.js'",
        "'source.js'",
        "\"./utils\"",
        "\"esprima-fb\"",
        "\"source-map\"",
        "'esprima-fb'",
        "''",
        "''",
        "'source.js'",
        "'\\n'",
        "'\\n'",
        "' '",
        "''",
        "'\\n'",
        "'\"'",
        "'\\''",
        "'//'",
        "'/*'",
        "'*/'",
        "'`'",
        "'` not found!'",
        "''",
        "'\\n'",
        "'\\n'",
        "'$1'",
        "'$1$2$2'",
        "'\\n'",
        "'./docblock'",
        "'object'",
        "'Expected to find a node with one of the following types in path:\\n'",
        "'$__'",
        "'$__'",
        "'var '",
        "', '",
        "';'",
        "\"./docblock\"",
        "\"esprima-fb\"",
        "'./es6-rest-param-visitors'",
        "'./es6-destructuring-visitors'",
        "'esprima-fb'",
        "'../src/utils'",
        "'('",
        "'function'",
        "\"super\"",
        "'.bind(this)'",
        "')'",
        "'('",
        "')'",
        "'('",
        "'{'",
        "'return '",
        "';}'",
        "\"../src/utils\"",
        "\"./es6-destructuring-visitors\"",
        "\"./es6-rest-param-visitors\"",
        "\"esprima-fb\"",
        "'esprima-fb'",
        "'../src/utils'",
        "'new (Function.prototype.bind.apply('",
        "'('",
        "' = '",
        "')'",
        "'.'",
        "'['",
        "']'",
        "'.apply('",
        "'('",
        "')'",
        "'.apply(null'",
        "', '",
        "'['",
        "'null'",
        "', '",
        "''",
        "'].concat('",
        "')'",
        "'))'",
        "')'",
        "\"../src/utils\"",
        "\"esprima-fb\"",
        "'use strict'",
        "'base62'",
        "'esprima-fb'",
        "'../src/utils'",
        "'./reserved-words-helper'",
        "'____SuperProtoOf'",
        "''",
        "'____Class'",
        "'$'",
        "'constructor'",
        "'preventMunge'",
        "'get'",
        "'set'",
        "'This transform does not support '",
        "'ter methods for ES6 '",
        "'classes. (line: '",
        "', col: '",
        "')'",
        "'get'",
        "'set'",
        "'constructor'",
        "'function '",
        "\"static\"",
        "''",
        "'.prototype'",
        "'Object.defineProperty('",
        "','",
        "','",
        "'{configurable:true,'",
        "':function'",
        "'['",
        "']'",
        "'.'",
        "'=function'",
        "'*'",
        "''",
        "'Object.defineProperty('",
        "','",
        "','",
        "'{writable:true,configurable:true,'",
        "'value:function'",
        "'*'",
        "''",
        "'('",
        "')'",
        "'{'",
        "'\"use strict\";'",
        "'{'",
        "'constructor'",
        "'})'",
        "';'",
        "'var '",
        "'='",
        "';'",
        "'____Key'",
        "''",
        "'var '",
        "'for('",
        "' in '",
        "'){'",
        "'if('",
        "'.hasOwnProperty('",
        "')){'",
        "'['",
        "']='",
        "'['",
        "'];'",
        "'}'",
        "'}'",
        "'var '",
        "'='",
        "'===null?'",
        "'null:'",
        "'.prototype;'",
        "'.prototype=Object.create('",
        "');'",
        "'.prototype.constructor='",
        "';'",
        "'.__superConstructor__='",
        "';'",
        "'function '",
        "'(){'",
        "'\"use strict\";'",
        "'if('",
        "'!==null){'",
        "'.apply(this,arguments);}'",
        "'}'",
        "'{'",
        "'(function(){'",
        "'return '",
        "';})()'",
        "'.call('",
        "'.'",
        "'['",
        "']'",
        "\".call(\"",
        "']'",
        "'.'",
        "'.call('",
        "'this'",
        "','",
        "')'",
        "'super'",
        "'super'",
        "'super'",
        "\"../src/utils\"",
        "\"./reserved-words-helper\"",
        "\"base62\"",
        "\"esprima-fb\"",
        "'esprima-fb'",
        "'../src/utils'",
        "'./reserved-words-helper'",
        "'./es6-rest-param-visitors'",
        "'./es7-rest-property-helpers'",
        "'='",
        "','",
        "'=Array.prototype.slice.call('",
        "','",
        "')'",
        "'='",
        "'='",
        "'='",
        "','",
        "','",
        "'[\"'",
        "'\"]'",
        "'['",
        "']'",
        "'.'",
        "'['",
        "']'",
        "'var '",
        "'='",
        "';'",
        "';'",
        "'var '",
        "','",
        "';'",
        "\"../src/utils\"",
        "\"./es6-rest-param-visitors\"",
        "\"./es7-rest-property-helpers\"",
        "\"./reserved-words-helper\"",
        "\"esprima-fb\"",
        "'esprima-fb'",
        "'../src/utils'",
        "'./reserved-words-helper'",
        "'\"'",
        "'\"'",
        "':function'",
        "'*'",
        "''",
        "\"../src/utils\"",
        "\"./reserved-words-helper\"",
        "\"esprima-fb\"",
        "'esprima-fb'",
        "'../src/utils'",
        "':'",
        "'init'",
        "\"../src/utils\"",
        "\"esprima-fb\"",
        "'esprima-fb'",
        "'../src/utils'",
        "'for (var '",
        "'=[],'",
        "'='",
        "','",
        "'=arguments.length;'",
        "'<'",
        "';'",
        "'++) '",
        "'.push(arguments['",
        "']);'",
        "\"../src/utils\"",
        "\"esprima-fb\"",
        "'use strict'",
        "'esprima-fb'",
        "'../src/utils'",
        "'('",
        "''",
        "' + '",
        "' + '",
        "'('",
        "')'",
        "''",
        "' + '",
        "')'",
        "'(function() { var siteObj = ['",
        "', '",
        "']; siteObj.raw = ['",
        "', '",
        "']; Object.freeze(siteObj.raw); Object.freeze(siteObj); return siteObj; }()'",
        "', '",
        "')'",
        "\"../src/utils\"",
        "\"esprima-fb\"",
        "'esprima-fb'",
        "'(function(source, exclusion) {'",
        "'var rest = {};'",
        "'var hasOwn = Object.prototype.hasOwnProperty;'",
        "'if (source == null) {'",
        "'throw new TypeError();'",
        "'}'",
        "'for (var key in source) {'",
        "'if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {'",
        "'rest[key] = source[key];'",
        "'}'",
        "'}'",
        "'return rest;'",
        "'})'",
        "'('",
        "','",
        "')'",
        "'{}'",
        "'{'",
        "':1,'",
        "':1}'",
        "\"esprima-fb\"",
        "'esprima-fb'",
        "'../src/utils'",
        "'Object.assign({'",
        "'}'",
        "','",
        "'{'",
        "'}'",
        "')'",
        "'init'",
        "\"../src/utils\"",
        "\"esprima-fb\"",
        "'break'",
        "'do'",
        "'in'",
        "'typeof'",
        "'case'",
        "'else'",
        "'instanceof'",
        "'var'",
        "'catch'",
        "'export'",
        "'new'",
        "'void'",
        "'class'",
        "'extends'",
        "'return'",
        "'while'",
        "'const'",
        "'finally'",
        "'super'",
        "'with'",
        "'continue'",
        "'for'",
        "'switch'",
        "'yield'",
        "'debugger'",
        "'function'",
        "'this'",
        "'default'",
        "'if'",
        "'throw'",
        "'delete'",
        "'import'",
        "'try'",
        "'enum'",
        "'await'",
        "'implements'",
        "'package'",
        "'protected'",
        "'static'",
        "'interface'",
        "'private'",
        "'public'",
        "'null'",
        "'true'",
        "'false'",
        "'enum'",
        "'implements'",
        "'package'",
        "'protected'",
        "'static'",
        "'interface'",
        "'private'",
        "'public'",
        "'esprima-fb'",
        "'../src/utils'",
        "'./reserved-words-helper'",
        "'\"'",
        "'\"'",
        "'['",
        "'\"'",
        "'\"]'",
        "\"../src/utils\"",
        "\"./reserved-words-helper\"",
        "\"esprima-fb\"",
        "'esprima-fb'",
        "'../src/utils'",
        "\"Property\"",
        "\"set\"",
        "\"get\"",
        "\"MethodDefinition\"",
        "'ImportDeclaration'",
        "\"../src/utils\"",
        "\"esprima-fb\"",
        "'use strict'",
        "'jstransform'",
        "'jstransform/src/utils'",
        "' '",
        "''",
        "''",
        "' + \\' \\' +'",
        "''",
        "', '",
        "'\\n'",
        "', '",
        "'\"'",
        "'\"'",
        "''",
        "\"jstransform\"",
        "\"jstransform/src/utils\"",
        "'use strict'",
        "'jstransform'",
        "'jstransform/src/utils'",
        "'./jsx'",
        "'./jsx'",
        "'./jsx'",
        "'./jsx'",
        "''",
        "'Namespace tags are not supported. ReactJSX is not XML.'",
        "'React.createElement('",
        "'\"'",
        "'\"'",
        "', '",
        "'React.__spread({'",
        "'{'",
        "'null'",
        "'}, '",
        "', '",
        "'Namespace attributes are not supported. ReactJSX is not XML.'",
        "'{'",
        "': '",
        "'true'",
        "', '",
        "'}'",
        "')'",
        "'string'",
        "', '",
        "', '",
        "')'",
        "\"./jsx\"",
        "\"jstransform\"",
        "\"jstransform/src/utils\"",
        "'use strict'",
        "'jstransform'",
        "'jstransform/src/utils'",
        "'React'",
        "'createClass'",
        "'displayName'",
        "'displayName: \"'",
        "'\",'",
        "\"jstransform\"",
        "\"jstransform/src/utils\"",
        "'use strict'",
        "'jstransform/visitors/es6-arrow-function-visitors'",
        "'jstransform/visitors/es6-class-visitors'",
        "'jstransform/visitors/es6-destructuring-visitors'",
        "'jstransform/visitors/es6-object-concise-method-visitors'",
        "'jstransform/visitors/es6-object-short-notation-visitors'",
        "'jstransform/visitors/es6-rest-param-visitors'",
        "'jstransform/visitors/es6-template-visitors'",
        "'jstransform/visitors/es6-call-spread-visitors'",
        "'jstransform/visitors/es7-spread-property-visitors'",
        "'./transforms/react'",
        "'./transforms/reactDisplayName'",
        "'jstransform/visitors/reserved-words-visitors'",
        "'es6-arrow-functions'",
        "'es6-classes'",
        "'es6-destructuring'",
        "'es6-object-concise-method'",
        "'es6-object-short-notation'",
        "'es6-rest-params'",
        "'es6-templates'",
        "'es6-call-spread'",
        "'es7-spread-property'",
        "'react'",
        "'reserved-words'",
        "'harmony'",
        "'es6-arrow-functions'",
        "'es6-object-concise-method'",
        "'es6-object-short-notation'",
        "'es6-classes'",
        "'es6-rest-params'",
        "'es6-templates'",
        "'es6-destructuring'",
        "'es6-call-spread'",
        "'es7-spread-property'",
        "'es3'",
        "'reserved-words'",
        "'react'",
        "'react'",
        "'reserved-words'",
        "'es6-arrow-functions'",
        "'es6-object-concise-method'",
        "'es6-object-short-notation'",
        "'es6-classes'",
        "'es6-rest-params'",
        "'es6-templates'",
        "'es6-destructuring'",
        "'es6-call-spread'",
        "'es7-spread-property'",
        "'react'",
        "'Unknown visitor set: '",
        "\"./transforms/react\"",
        "\"./transforms/reactDisplayName\"",
        "\"jstransform/visitors/es6-arrow-function-visitors\"",
        "\"jstransform/visitors/es6-call-spread-visitors\"",
        "\"jstransform/visitors/es6-class-visitors\"",
        "\"jstransform/visitors/es6-destructuring-visitors\"",
        "\"jstransform/visitors/es6-object-concise-method-visitors\"",
        "\"jstransform/visitors/es6-object-short-notation-visitors\"",
        "\"jstransform/visitors/es6-rest-param-visitors\"",
        "\"jstransform/visitors/es6-template-visitors\"",
        "\"jstransform/visitors/es7-spread-property-visitors\"",
        "\"jstransform/visitors/reserved-words-visitors\"",
        "'use strict'",
        "'buffer'",
        "'function'",
        "'base64'",
        "'//# sourceMappingURL=data:application/json;base64,'",
        "\"buffer\""
    ],
    "variables": [
        "g",
        "define",
        "exports",
        "a",
        "f",
        "l",
        "n",
        "i",
        "o",
        "ReactTools",
        "inlineSourceMap",
        "headEl",
        "dummyAnchor",
        "inlineScriptCount",
        "supportsAccessors",
        "sourceLines",
        "erroneousLine",
        "indentation",
        "LIMIT",
        "errorColumn",
        "message",
        "transformed",
        "source",
        "scriptEl",
        "xhr",
        "result",
        "count",
        "script",
        "i",
        "options",
        "async",
        "scripts",
        "jsxScripts",
        "i",
        "visitors",
        "transform",
        "typesSyntax",
        "inlineSourceMap",
        "output",
        "result",
        "output",
        "result",
        "options",
        "visitorSets",
        "visitorList",
        "base64",
        "ieee754",
        "isArray",
        "kMaxLength",
        "rootParent",
        "buf",
        "arr",
        "length",
        "i",
        "buf",
        "x",
        "y",
        "i",
        "len",
        "i",
        "buf",
        "pos",
        "item",
        "ret",
        "loweredCase",
        "max",
        "foundIndex",
        "i",
        "remaining",
        "strLen",
        "i",
        "parsed",
        "charsWritten",
        "charsWritten",
        "charsWritten",
        "charsWritten",
        "swap",
        "encoding",
        "remaining",
        "ret",
        "res",
        "tmp",
        "i",
        "start",
        "ret",
        "i",
        "start",
        "ret",
        "i",
        "start",
        "len",
        "i",
        "start",
        "res",
        "i",
        "len",
        "newBuf",
        "sliceLen",
        "i",
        "val",
        "mul",
        "i",
        "val",
        "mul",
        "val",
        "mul",
        "i",
        "i",
        "byteLength",
        "mul",
        "val",
        "val",
        "val",
        "mul",
        "i",
        "i",
        "mul",
        "i",
        "j",
        "i",
        "j",
        "i",
        "mul",
        "sub",
        "i",
        "mul",
        "sub",
        "len",
        "i",
        "i",
        "len",
        "buf",
        "i",
        "len",
        "BP",
        "INVALID_BASE64_RE",
        "codePoint",
        "length",
        "leadSurrogate",
        "i",
        "byteArray",
        "i",
        "c",
        "hi",
        "lo",
        "byteArray",
        "i",
        "i",
        "lookup",
        "Arr",
        "PLUS",
        "SLASH",
        "NUMBER",
        "LOWER",
        "UPPER",
        "PLUS_URL_SAFE",
        "SLASH_URL_SAFE",
        "code",
        "i",
        "j",
        "l",
        "tmp",
        "placeHolders",
        "arr",
        "len",
        "L",
        "i",
        "extraBytes",
        "output",
        "temp",
        "length",
        "e",
        "m",
        "eLen",
        "eMax",
        "eBias",
        "nBits",
        "i",
        "d",
        "s",
        "e",
        "m",
        "c",
        "eLen",
        "eMax",
        "eBias",
        "rt",
        "i",
        "d",
        "s",
        "isArray",
        "up",
        "i",
        "last",
        "splitPathRe",
        "splitPath",
        "resolvedPath",
        "resolvedAbsolute",
        "i",
        "path",
        "isAbsolute",
        "trailingSlash",
        "paths",
        "start",
        "end",
        "fromParts",
        "toParts",
        "length",
        "samePartsLength",
        "length",
        "i",
        "outputParts",
        "i",
        "samePartsLength",
        "result",
        "root",
        "dir",
        "f",
        "res",
        "i",
        "substr",
        "process",
        "queue",
        "draining",
        "currentQueue",
        "len",
        "i",
        "Token",
        "TokenName",
        "FnExprTokens",
        "Syntax",
        "PropertyKind",
        "Messages",
        "Regex",
        "SyntaxTreeDelegate",
        "XHTMLEntities",
        "ClassPropertyType",
        "source",
        "strict",
        "index",
        "lineNumber",
        "lineStart",
        "length",
        "lookahead",
        "state",
        "extra",
        "comment",
        "start",
        "loc",
        "ch",
        "comment",
        "start",
        "loc",
        "ch",
        "comment",
        "ch",
        "i",
        "len",
        "ch",
        "code",
        "ch",
        "code",
        "cu1",
        "cu2",
        "ch",
        "id",
        "start",
        "ch",
        "start",
        "id",
        "start",
        "index",
        "code",
        "code2",
        "ch1",
        "ch2",
        "ch3",
        "ch4",
        "number",
        "ch",
        "number",
        "number",
        "octal",
        "number",
        "start",
        "ch",
        "quote",
        "start",
        "ch",
        "code",
        "unescaped",
        "restore",
        "octal",
        "cooked",
        "ch",
        "start",
        "terminated",
        "tail",
        "restore",
        "unescaped",
        "code",
        "octal",
        "startsWith",
        "template",
        "tmp",
        "pattern",
        "value",
        "ch",
        "classMarker",
        "terminated",
        "body",
        "ch",
        "flags",
        "restore",
        "start",
        "body",
        "flags",
        "value",
        "prevToken",
        "checkToken",
        "ch",
        "token",
        "pos",
        "line",
        "start",
        "adv",
        "pos",
        "line",
        "start",
        "result",
        "lastChild",
        "trailingComments",
        "bottomRight",
        "last",
        "funDecl",
        "funExpr",
        "arrowExpr",
        "pos",
        "line",
        "start",
        "found",
        "error",
        "args",
        "msg",
        "token",
        "token",
        "expectedType",
        "op",
        "backtrackToken",
        "lookahead",
        "matches",
        "line",
        "oldIndex",
        "index",
        "oldLineNumber",
        "lineNumber",
        "oldLineStart",
        "lineStart",
        "oldLookahead",
        "lookahead",
        "elements",
        "blocks",
        "tmp",
        "possiblecomprehension",
        "marker",
        "previousStrict",
        "previousYieldAllowed",
        "previousAwaitAllowed",
        "defaults",
        "body",
        "marker",
        "previousStrict",
        "tmp",
        "method",
        "marker",
        "token",
        "propertyKey",
        "result",
        "token",
        "key",
        "id",
        "param",
        "computed",
        "marker",
        "returnType",
        "typeParameters",
        "marker",
        "toString",
        "properties",
        "property",
        "name",
        "kind",
        "storedKind",
        "marker",
        "toString",
        "marker",
        "token",
        "quasi",
        "quasis",
        "expressions",
        "marker",
        "expr",
        "marker",
        "typeAnnotation",
        "token",
        "marker",
        "token",
        "expr",
        "args",
        "arg",
        "marker",
        "marker",
        "token",
        "expr",
        "callee",
        "args",
        "marker",
        "expr",
        "args",
        "marker",
        "expr",
        "marker",
        "marker",
        "expr",
        "token",
        "marker",
        "token",
        "expr",
        "prec",
        "expr",
        "token",
        "prec",
        "previousAllowIn",
        "stack",
        "right",
        "left",
        "i",
        "marker",
        "markers",
        "expr",
        "previousAllowIn",
        "consequent",
        "alternate",
        "marker",
        "i",
        "len",
        "property",
        "element",
        "i",
        "len",
        "property",
        "element",
        "i",
        "len",
        "param",
        "defaults",
        "defaultCount",
        "options",
        "rest",
        "previousStrict",
        "previousYieldAllowed",
        "previousAwaitAllowed",
        "body",
        "marker",
        "expr",
        "token",
        "oldParenthesizedCount",
        "startsWithParen",
        "backtrackToken",
        "lookahead",
        "possiblyAsync",
        "marker",
        "expr",
        "expressions",
        "sequence",
        "spreadFound",
        "statement",
        "block",
        "marker",
        "marker",
        "paramTypes",
        "marker",
        "oldInType",
        "paramTypes",
        "id",
        "key",
        "value",
        "rest",
        "returnType",
        "typeParameters",
        "optional",
        "value",
        "valueMarker",
        "callProperties",
        "indexers",
        "marker",
        "optional",
        "properties",
        "propertyKey",
        "propertyTypeAnnotation",
        "token",
        "isStatic",
        "matchStatic",
        "marker",
        "typeParameters",
        "typeIdentifier",
        "marker",
        "argument",
        "marker",
        "marker",
        "types",
        "marker",
        "name",
        "optional",
        "typeAnnotation",
        "ret",
        "returnType",
        "marker",
        "rest",
        "tmp",
        "typeParameters",
        "token",
        "isGroupedType",
        "marker",
        "t",
        "marker",
        "marker",
        "types",
        "marker",
        "types",
        "oldInType",
        "marker",
        "marker",
        "token",
        "marker",
        "ident",
        "isOptionalParam",
        "id",
        "marker",
        "init",
        "typeAnnotationMarker",
        "declarations",
        "marker",
        "declarations",
        "marker",
        "marker",
        "specifier",
        "marker",
        "id",
        "name",
        "marker",
        "declaration",
        "possibleIdentifierToken",
        "sourceElement",
        "isExportFromIdentifier",
        "src",
        "specifiers",
        "marker",
        "id",
        "name",
        "marker",
        "specifiers",
        "id",
        "marker",
        "id",
        "marker",
        "specifiers",
        "src",
        "marker",
        "isType",
        "token2",
        "marker",
        "marker",
        "expr",
        "test",
        "consequent",
        "alternate",
        "marker",
        "body",
        "test",
        "oldInIteration",
        "marker",
        "test",
        "body",
        "oldInIteration",
        "marker",
        "marker",
        "token",
        "declarations",
        "init",
        "test",
        "update",
        "left",
        "right",
        "body",
        "oldInIteration",
        "marker",
        "label",
        "marker",
        "label",
        "marker",
        "argument",
        "marker",
        "body",
        "marker",
        "test",
        "consequent",
        "sourceElement",
        "marker",
        "discriminant",
        "cases",
        "clause",
        "oldInSwitch",
        "defaultFound",
        "marker",
        "argument",
        "marker",
        "param",
        "body",
        "marker",
        "block",
        "handlers",
        "finalizer",
        "marker",
        "marker",
        "marker",
        "expr",
        "labeledBody",
        "sourceElement",
        "sourceElements",
        "token",
        "directive",
        "firstRestricted",
        "oldLabelSet",
        "oldInIteration",
        "oldInSwitch",
        "oldInFunctionBody",
        "oldParenthesizedCount",
        "marker",
        "marker",
        "token",
        "rest",
        "param",
        "options",
        "marker",
        "id",
        "body",
        "token",
        "tmp",
        "firstRestricted",
        "message",
        "generator",
        "isAsync",
        "previousStrict",
        "previousYieldAllowed",
        "previousAwaitAllowed",
        "marker",
        "typeParameters",
        "token",
        "id",
        "firstRestricted",
        "message",
        "tmp",
        "body",
        "generator",
        "isAsync",
        "previousStrict",
        "previousYieldAllowed",
        "previousAwaitAllowed",
        "marker",
        "typeParameters",
        "delegateFlag",
        "expr",
        "marker",
        "expr",
        "marker",
        "token",
        "param",
        "propType",
        "isAsync",
        "typeParameters",
        "tokenValue",
        "returnType",
        "typeAnnotation",
        "computed",
        "generator",
        "key",
        "marker",
        "isStatic",
        "possiblyOpenBracketToken",
        "classElement",
        "classElements",
        "existingProps",
        "marker",
        "propName",
        "propType",
        "id",
        "implemented",
        "marker",
        "typeParameters",
        "id",
        "implemented",
        "previousYieldAllowed",
        "superClass",
        "superTypeParameters",
        "marker",
        "typeParameters",
        "matchImplements",
        "id",
        "implemented",
        "previousYieldAllowed",
        "superClass",
        "superTypeParameters",
        "marker",
        "typeParameters",
        "token",
        "isModule",
        "sourceElement",
        "sourceElements",
        "token",
        "directive",
        "firstRestricted",
        "body",
        "marker",
        "ch",
        "start",
        "value",
        "ch",
        "start",
        "index",
        "count",
        "code",
        "ch",
        "start",
        "innerToken",
        "quote",
        "start",
        "ch",
        "token",
        "marker",
        "name",
        "marker",
        "marker",
        "expr",
        "value",
        "marker",
        "marker",
        "expression",
        "origInJSXChild",
        "origInJSXTag",
        "marker",
        "expression",
        "origInJSXChild",
        "origInJSXTag",
        "marker",
        "name",
        "marker",
        "token",
        "marker",
        "name",
        "origInJSXChild",
        "origInJSXTag",
        "marker",
        "name",
        "attributes",
        "selfClosing",
        "origInJSXChild",
        "origInJSXTag",
        "marker",
        "openingElement",
        "closingElement",
        "children",
        "origInJSXChild",
        "origInJSXTag",
        "marker",
        "id",
        "marker",
        "typeParameters",
        "right",
        "marker",
        "id",
        "typeParameters",
        "body",
        "bodyMarker",
        "extended",
        "id",
        "typeParameters",
        "marker",
        "marker",
        "ret",
        "id",
        "idMarker",
        "marker",
        "returnType",
        "rest",
        "tmp",
        "typeParameters",
        "value",
        "valueMarker",
        "id",
        "marker",
        "body",
        "bodyMarker",
        "id",
        "idMarker",
        "marker",
        "token",
        "loc",
        "token",
        "value",
        "entry",
        "pos",
        "loc",
        "regex",
        "token",
        "i",
        "entry",
        "token",
        "tokens",
        "entry",
        "result",
        "toString",
        "token",
        "tokens",
        "program",
        "toString",
        "name",
        "types",
        "Base62",
        "s",
        "define",
        "util",
        "i",
        "len",
        "isDuplicate",
        "idx",
        "define",
        "base64",
        "VLQ_BASE_SHIFT",
        "VLQ_BASE",
        "VLQ_BASE_MASK",
        "VLQ_CONTINUATION_BIT",
        "VLQ_BASE",
        "isNegative",
        "shifted",
        "encoded",
        "digit",
        "vlq",
        "i",
        "strLen",
        "result",
        "shift",
        "continuation",
        "digit",
        "define",
        "charToIntMap",
        "intToCharMap",
        "define",
        "mid",
        "cmp",
        "define",
        "util",
        "binarySearch",
        "ArraySet",
        "base64VLQ",
        "sourceMap",
        "aSourceMap",
        "version",
        "sources",
        "names",
        "sourceRoot",
        "sourcesContent",
        "mappings",
        "file",
        "smc",
        "generatedLine",
        "previousGeneratedColumn",
        "previousOriginalLine",
        "previousOriginalColumn",
        "previousSource",
        "previousName",
        "mappingSeparator",
        "aStr",
        "mapping",
        "temp",
        "needle",
        "mapping",
        "source",
        "url",
        "fileUriAbsPath",
        "needle",
        "mapping",
        "context",
        "order",
        "mappings",
        "sourceRoot",
        "source",
        "define",
        "base64VLQ",
        "util",
        "ArraySet",
        "sourceRoot",
        "generator",
        "newMapping",
        "content",
        "generated",
        "original",
        "source",
        "name",
        "source",
        "aSourceFile",
        "sourceRoot",
        "newSources",
        "newNames",
        "original",
        "source",
        "name",
        "content",
        "previousGeneratedColumn",
        "previousGeneratedLine",
        "previousOriginalColumn",
        "previousOriginalLine",
        "previousName",
        "previousSource",
        "result",
        "mapping",
        "i",
        "len",
        "key",
        "define",
        "SourceMapGenerator",
        "util",
        "node",
        "remainingLines",
        "lastGeneratedLine",
        "lastGeneratedColumn",
        "lastMapping",
        "nextLine",
        "code",
        "nextLine",
        "nextLine",
        "code",
        "content",
        "i",
        "chunk",
        "i",
        "len",
        "newChildren",
        "i",
        "len",
        "lastChild",
        "i",
        "len",
        "sources",
        "i",
        "len",
        "generated",
        "sourceMappingActive",
        "lastOriginalSource",
        "lastOriginalLine",
        "lastOriginalColumn",
        "lastOriginalName",
        "define",
        "urlRegexp",
        "dataUrlRegexp",
        "match",
        "url",
        "url",
        "url",
        "s1",
        "s2",
        "cmp",
        "cmp",
        "defineCache",
        "loaderCache",
        "alreadyCalled",
        "path",
        "makeRequire",
        "stringRequire",
        "i",
        "part",
        "baseParts",
        "r",
        "e",
        "m",
        "result",
        "index",
        "originalId",
        "id",
        "prefix",
        "plugin",
        "docblockRe",
        "ltrimRe",
        "match",
        "commentStartRe",
        "commentEndRe",
        "wsRe",
        "stringStartRe",
        "multilineRe",
        "propertyRe",
        "prev",
        "result",
        "match",
        "pairs",
        "result",
        "i",
        "esprima",
        "utils",
        "getBoundaryNode",
        "declareIdentInScope",
        "initScopeMetadata",
        "Syntax",
        "parentIsFunction",
        "parentIsCurlylessArrowFunc",
        "startIndex",
        "parentNode",
        "scopeIsStrict",
        "param",
        "metadata",
        "i",
        "metadata",
        "metaData",
        "metadata",
        "metaData",
        "visitors",
        "i",
        "_astCache",
        "ast",
        "ast",
        "state",
        "SourceMapGenerator",
        "ret",
        "Syntax",
        "leadingIndentRegexp",
        "nonWhiteRegexp",
        "ret",
        "source",
        "transformed",
        "sourceLines",
        "transformedLines",
        "i",
        "pendingSource",
        "pendingSourceLines",
        "charOffset",
        "line",
        "withinBlockComment",
        "withinString",
        "lineEndPos",
        "currChar",
        "nextTwoChars",
        "reNonNewline",
        "source",
        "sourceLines",
        "transformedLines",
        "indentBy",
        "i",
        "i",
        "end",
        "start",
        "docblock",
        "currScope",
        "currScope",
        "queue",
        "ii",
        "foundMatchingChild",
        "scopeTypes",
        "ii",
        "tempVar",
        "restParamVisitors",
        "destructuringVisitors",
        "Syntax",
        "utils",
        "notInExpression",
        "renderBody",
        "containsBindingSyntax",
        "Syntax",
        "utils",
        "tempVar",
        "needsToBeWrappedInParenthesis",
        "args",
        "spread",
        "arg",
        "base62",
        "Syntax",
        "utils",
        "reservedWordsHelper",
        "declareIdentInLocalScope",
        "initScopeMetadata",
        "SUPER_PROTO_IDENT_PREFIX",
        "_anonClassUUIDCounter",
        "_mungedSymbolMaps",
        "mungeNamespace",
        "mungeNamespace",
        "shouldMinify",
        "symbolMap",
        "ret",
        "methodNode",
        "isGetter",
        "isSetter",
        "methodAccessorComputed",
        "methodAccessor",
        "prototypeOrStatic",
        "objectAccessor",
        "i",
        "closingParenPosition",
        "openingBracketPosition",
        "paramName",
        "parentFuncExpr",
        "parentClassMethod",
        "className",
        "superClass",
        "keyName",
        "keyNameDeclarator",
        "superProtoIdentStr",
        "className",
        "superClass",
        "className",
        "superClass",
        "i",
        "superClassName",
        "protoProp",
        "callee",
        "superClassName",
        "Syntax",
        "utils",
        "reservedWordsHelper",
        "restParamVisitors",
        "restPropertyHelpers",
        "tmpIndex",
        "components",
        "patternItems",
        "idx",
        "item",
        "restExpression",
        "accessor",
        "value",
        "tmpName",
        "exprNode",
        "funcNode",
        "tmpIndex",
        "k",
        "param",
        "funcNode",
        "destructuredComponents",
        "k",
        "param",
        "Syntax",
        "utils",
        "reservedWordsHelper",
        "isGenerator",
        "Syntax",
        "utils",
        "Syntax",
        "utils",
        "idx",
        "len",
        "parentNode",
        "Syntax",
        "utils",
        "templateElements",
        "ii",
        "templateElement",
        "substitution",
        "template",
        "numQuasis",
        "ii",
        "expression",
        "Syntax",
        "restFunction",
        "names",
        "i",
        "property",
        "excludedNames",
        "Syntax",
        "utils",
        "previousWasSpread",
        "i",
        "property",
        "hasAtLeastOneSpreadProperty",
        "i",
        "property",
        "KEYWORDS",
        "FUTURE_RESERVED_WORDS",
        "LITERALS",
        "RESERVED_WORDS",
        "reservedWordsMap",
        "ES3_FUTURE_RESERVED_WORDS",
        "ES3_RESERVED_WORDS",
        "es3ReservedWordsMap",
        "Syntax",
        "utils",
        "reserverdWordsHelper",
        "esprima",
        "utils",
        "Syntax",
        "rightType",
        "Syntax",
        "utils",
        "lines",
        "lastNonEmptyLine",
        "isFirstLine",
        "isLastLine",
        "isLastNonEmptyLine",
        "trimmedLine",
        "Syntax",
        "utils",
        "renderJSXExpressionContainer",
        "renderJSXLiteral",
        "quoteAttrName",
        "trimLeft",
        "reNonWhiteParen",
        "tagConvention",
        "openingElement",
        "nameObject",
        "attributesObject",
        "hasAttributes",
        "hasAtLeastOneSpreadProperty",
        "previousWasSpread",
        "isLast",
        "name",
        "childrenToRender",
        "lastRenderableIndex",
        "isLast",
        "Syntax",
        "utils",
        "properties",
        "safe",
        "value",
        "left",
        "right",
        "es6ArrowFunctions",
        "es6Classes",
        "es6Destructuring",
        "es6ObjectConciseMethod",
        "es6ObjectShortNotation",
        "es6RestParameters",
        "es6Templates",
        "es6CallSpread",
        "es7SpreadProperty",
        "react",
        "reactDisplayName",
        "reservedWords",
        "transformVisitors",
        "transformSets",
        "transformRunOrder",
        "ret",
        "i",
        "il",
        "visitorsToInclude",
        "visitorList",
        "i",
        "Buffer",
        "json",
        "sourceMap",
        "base64"
    ],
    "comments": [
        "jshint browser: true",
        "jslint evil: true",
        "eslint-disable no-eval",
        "eslint-disable block-scoped-var",
        "The source-map library relies on Object.defineProperty, but IE8 doesn't",
        "support it fully even with es5-sham. Indeed, es5-sham's defineProperty",
        "throws when Object.prototype.__defineGetter__ is missing, so we skip building",
        "the source map in that case.",
        "Force the sourcemaps option manually. We don't want to use it if it will",
        "break (see above note about supportsAccessors). We'll only override the",
        "value here if sourceMap was specified and is truthy. This guarantees that",
        "we won't override any user intent (since this method is exposed publicly).",
        "Otherwise just pass all options straight through to react-tools.",
        "e.lineNumber is non-standard so we can't depend on its availability. If",
        "we're in a browser where it isn't supported, don't even bother trying to",
        "format anything. We may also hit a case where the line number is reported",
        "incorrectly and is outside the bounds of the actual code. Handle that too.",
        "Removes any leading indenting spaces and gets the number of",
        "chars indenting the `erroneousLine`",
        "Defines the number of characters that are going to show",
        "before and after the erroneous code",
        "We set `fileName` if it's supported by this error object and",
        "a `url` was provided.",
        "The error will correctly point to `url` in Firefox.",
        "Firefox has problems when the sourcemap source is a proper URL with a",
        "protocol and hostname, so use the pathname. We could use just the",
        "filename, but hopefully using the full path will prevent potential",
        "issues where the same filename exists in multiple directories.",
        "async, however scripts will be executed in the order they are in the",
        "DOM to mirror normal script loading.",
        "script.async is always true for non-javascript script tags",
        "Array.prototype.slice cannot be used on NodeList on IE8",
        "Listen for load event if we're in a browser and then kick off finding and",
        "running of scripts.",
        "eslint-disable no-undef",
        "Instead of doing any fancy validation, only look for 'es3'. If we have",
        "that, then use it. Otherwise use 'es5'.",
        "Stripping types needs to happen before the other transforms",
        "unfortunately, due to bad interactions. For example,",
        "es6-rest-param-visitors conflict with stripping rest param type",
        "annotation",
        "!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT",
        "not used by this implementation",
        "typed array instances can be augmented",
        "chrome 9-10 lack `subarray`",
        "ie10 has broken `subarray`",
        "assume object is array-like",
        "coerce to uint32",
        "Preferred: Return an augmented `Uint8Array` instance for best performance",
        "eslint-disable-line consistent-this",
        "Fallback: Return THIS instance of Buffer (created by `new`)",
        "Speed optimization -- use set if we're copying from a typed array",
        "Treat array-ish objects as a byte array",
        "pre-set for values that may exist in the future",
        "toString(encoding, start=0, end=buffer.length)",
        "Negative offsets start from the end of the buffer",
        "special case: looking for empty string always fails",
        "`get` will be removed in Node 0.13+",
        "`set` will be removed in Node 0.13+",
        "must be an even number of digits",
        "Support both (string, offset, length, encoding)",
        "and the legacy (string, encoding, offset, length)",
        "legacy",
        "copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)",
        "Copy 0 bytes; we're done",
        "Fatal error conditions",
        "Are we oob?",
        "fill(value, start=0, end=buffer.length)",
        "Fill 0 bytes; we're done",
        "HELPER FUNCTIONS",
        "================",
        "save reference to original Uint8Array set method before overwriting",
        "deprecated, will be removed in node 0.13+",
        "Node strips out invalid characters like \\n and \\t from the string, base64-js does not",
        "Node converts strings with length < 2 to ''",
        "Node allows for non-padded base64 strings (missing trailing ===), base64-js does not",
        "is surrogate component",
        "last char was a lead",
        "2 leads in a row",
        "valid surrogate pair",
        "no lead yet",
        "unexpected trail",
        "unpaired lead",
        "valid lead",
        "valid bmp char, but last char was a lead",
        "encode utf8",
        "Node's code seems to be doing this and not & 0x7F..",
        "UTF 8 invalid char",
        "'+'",
        "'/'",
        "no match",
        "the number of equal signs (place holders)",
        "if there are two placeholders, than the two characters before it",
        "represent one byte",
        "if there is only one, then the three characters before it represent 2 bytes",
        "this is just a cheap hack to not do indexOf twice",
        "base64 is 4/3 + up to two characters of the original data",
        "if there are placeholders, only get up to the last complete 4 chars",
        "if we have 1 byte left, pad 2 bytes",
        "go through the array every three bytes, we'll deal with trailing stuff later",
        "pad the end with zeros, but make sure to not forget the extra bytes",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "resolves . and .. elements in a path array with directory names there",
        "must be no slashes, empty elements, or device names (c:\\) in the array",
        "(so also no leading and trailing slashes - it does not distinguish",
        "relative and absolute paths)",
        "if the path tries to go above the root, `up` ends up > 0",
        "if the path is allowed to go above the root, restore leading ..s",
        "Split a filename into [root, dir, basename, ext], unix version",
        "'root' is just a slash, or nothing.",
        "path.resolve([from ...], to)",
        "posix version",
        "Skip empty and invalid entries",
        "At this point the path should be resolved to a full absolute path, but",
        "handle relative paths to be safe (might happen when process.cwd() fails)",
        "Normalize the path",
        "path.normalize(path)",
        "posix version",
        "Normalize the path",
        "posix version",
        "posix version",
        "path.relative(from, to)",
        "posix version",
        "No dirname whatsoever",
        "It has a dirname, strip trailing slash",
        "TODO: make this comparison case-insensitive on windows?",
        "String.prototype.substr - negative index don't work in IE8",
        "shim for using process in browser",
        "empty string to avoid regexp issues",
        "TODO(shtylman)",
        "Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,",
        "Rhino, and plain browser loading.",
        "istanbul ignore next",
        "A function following one of those tokens is an expression.",
        "assignment operators",
        "binary/unary operators",
        "Error messages should be identical to V8.",
        "See also tools/generate-unicode-regex.py.",
        "Ensure the condition is true, otherwise throw an error.",
        "This is only to have a better contract semantic, i.e. another safety net",
        "to catch a logic error. The condition shall be fulfilled in normal case.",
        "Do NOT use this to enforce a certain condition on any user input.",
        "istanbul ignore if",
        "0..9",
        "7.2 White Space",
        "space",
        "tab",
        "7.3 Line Terminators",
        "7.6 Identifier Names and Identifiers",
        "$ (dollar) and _ (underscore)",
        "A..Z",
        "a..z",
        "\\ (backslash)",
        "$ (dollar) and _ (underscore)",
        "A..Z",
        "a..z",
        "0..9",
        "\\ (backslash)",
        "7.6.1.2 Future Reserved Words",
        "7.6.1.1 Keywords",
        "'const' is specialized as Keyword in V8.",
        "'yield' is only treated as a keyword in strict mode.",
        "'let' is for compatiblity with SpiderMonkey and ES.next.",
        "Some others are from future reserved words.",
        "7.4 Comments",
        "Because the way the actual token is scanned, often the comments",
        "(if any) are skipped twice during the lexical analysis.",
        "Thus, we need to skip adding a comment if the comment array already",
        "handled it.",
        "Block comment ends with '*/' (char #42, char #47).",
        "47 is '/'",
        "42 is '*'",
        "At least, one hex digit is required.",
        "UTF-16 Encoding",
        "'\\u' (char #92, char #117) denotes an escaped character.",
        "'\\u' (char #92, char #117) denotes an escaped character.",
        "Blackslash (char #92) marks Unicode escape sequence.",
        "Backslash (char #92) starts an escaped character.",
        "There is no keyword or literal with only one character.",
        "Thus, it must be an identifier.",
        "7.7 Punctuators",
        "Don't need to check for '{' and '}' as it's already handled",
        "correctly by default.",
        "<",
        ">",
        "Check for most common single-character punctuators.",
        "( open bracket",
        ") close bracket",
        "; semicolon",
        ", comma",
        "{ open curly brace",
        "} close curly brace",
        "[",
        "]",
        ":",
        "?",
        "~",
        "'=' (char #61) marks an assignment or comparison operator.",
        "%",
        "&",
        "+",
        "-",
        "/",
        "<",
        ">",
        "^",
        "|",
        "!",
        "=",
        "!== and ===",
        "Peek more characters.",
        "4-character punctuator: >>>=",
        "3-character punctuators: === !== >>> <<= >>=",
        "Other 2-character punctuators: ++ -- << >> && ||",
        "Don't match these tokens if we're in a type, since they never can",
        "occur and can mess up types like Map<string, Array<string>>",
        "7.8.3 Numeric Literals",
        "only 0b or 0B",
        "istanbul ignore else",
        "only 0o or 0O",
        "Hex number starts with '0x'.",
        "Octal number starts with '0'.",
        "Octal number in ES6 starts with '0o'.",
        "Binary number in ES6 starts with '0b'.",
        "decimal number starts with '0' such as '09' is illegal.",
        "7.8.4 String Literals",
        "\\0 is not octal escape sequence",
        "istanbul ignore else",
        "3 digits are only allowed when string starts",
        "with 0, 1, 2, 3",
        "\\0 is not octal escape sequence",
        "istanbul ignore else",
        "3 digits are only allowed when string starts",
        "with 0, 1, 2, 3",
        "Replace each astral symbol and every Unicode code point",
        "escape sequence with a single ASCII symbol to avoid throwing on",
        "regular expressions that are only valid in combination with the",
        "`/u` flag.",
        "Note: replacing with the ASCII symbol `x` might cause false",
        "negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a",
        "perfectly valid pattern that is equivalent to `[a-b]`, but it",
        "would be replaced by `[x-b]` which throws an error.",
        "First, detect invalid regular expressions.",
        "Return a regular expression object for this pattern-flag pair, or",
        "`null` in case the current environment doesn't support the flags it",
        "uses.",
        "ECMA-262 7.8.5",
        "Exclude leading and trailing slash.",
        "Using the following algorithm:",
        "https://github.com/mozilla/sweet.js/wiki/design",
        "Nothing before that: it cannot be a division.",
        "Dividing a function by anything makes little sense,",
        "but we have to check for that.",
        "Anonymous function.",
        "Named function.",
        "checkToken determines whether the function is",
        "a declaration or an expression.",
        "It is an expression.",
        "It is a declaration.",
        "Very common: ( and ) and ;",
        "String literal starts with single quote (#39) or double quote (#34).",
        "Dot (.) char #46 can also start a floating-point number, hence the need",
        "to check the next character.",
        "Slash (/) char #47 can also start a regex.",
        "If we are collecting the tokens, don't grab the next one yet.",
        "istanbul ignore next",
        "Scan for the next immediate token.",
        "istanbul ignore if",
        "Grab the token right after.",
        "istanbul ignore else",
        "Eating the stack.",
        "Only here to initialize the shape of the object to ensure",
        "that the 'typeAnnotation' key is ordered before others that",
        "are added later (like 'loc' and 'range'). This just helps",
        "keep the shape of Identifier nodes consistent with everything",
        "else.",
        "Return true if there is a line terminator before the next token.",
        "Throw an exception",
        "Throw an exception because of the token.",
        "BooleanLiteral, NullLiteral, or Punctuator.",
        "Expect the next token to match the specified punctuator.",
        "If not, an exception will be thrown.",
        "Expect the next token to match the specified keyword.",
        "If not, an exception will be thrown.",
        "Expect the next token to match the specified contextual keyword.",
        "If not, an exception will be thrown.",
        "Return true if the next token matches the specified punctuator.",
        "Return true if the next token matches the specified keyword",
        "Return true if the next token matches the specified contextual keyword",
        "Return true if the next token is an assignment operator",
        "Note that 'yield' is treated as a keyword in strict mode, but a",
        "contextual keyword (identifier) in non-strict mode, so we need to",
        "use matchKeyword('yield', false) and matchKeyword('yield', true)",
        "(i.e. matchContextualKeyword) appropriately.",
        "Make sure peekLineTerminator() starts after 'async'.",
        "Revert the lex().",
        "Catch the very common case first: immediately a semicolon (char #59).",
        "Return true if provided expression is LeftHandSideExpression",
        "11.1.4 Array Initialiser",
        "can't be let or const",
        "no longer allowed.",
        "this lexes.",
        "11.1.5 Object Initialiser",
        "Note: This function is called only from parseObjectProperty(), where",
        "EOF and Punctuator tokens are already filtered out.",
        "For computed properties we should skip the [ and ], and",
        "capture in marker only the assignment expression itself.",
        "Property Assignment: Getter and Setter.",
        "Computed properties can only be used with full notation.",
        "11.1.6 The Grouping Operator",
        "11.1 Primary Expressions",
        "11.2 Left-Hand-Side Expressions",
        "11.3 Postfix Expressions",
        "11.3.1, 11.3.2",
        "11.4 Unary Operators",
        "11.4.4, 11.4.5",
        "11.5 Multiplicative Operators",
        "11.6 Additive Operators",
        "11.7 Bitwise Shift Operators",
        "11.8 Relational Operators",
        "11.9 Equality Operators",
        "11.10 Binary Bitwise Operators",
        "11.11 Binary Logical Operators",
        "Reduce: make a binary expression from the three topmost entries.",
        "Shift.",
        "Final reduce to clean-up the stack.",
        "11.12 Conditional Operator",
        "11.13 Assignment Operators",
        "12.14.5 AssignmentPattern",
        "istanbul ignore else",
        "istanbul ignore else",
        "13.2.3 BindingPattern",
        "BindingRestElement only allows BindingIdentifier",
        "We can't be completely sure that this 'async' token is",
        "actually a contextual keyword modifying a function",
        "expression, so we might have to un-lex() it later by",
        "calling rewind(backtrackToken).",
        "If the 'async' keyword is not followed by a '(' character or an",
        "identifier, then it can't be an arrow function modifier, and we",
        "should interpret it as a normal identifer.",
        "If we haven't returned by now, then the 'async' keyword was not",
        "a function modifier, and we should rewind and interpret it as a",
        "normal identifier.",
        "11.13.1",
        "ES.next draf 11.13 Runtime Semantics step 1",
        "11.14 Comma Operator",
        "12.1 Block",
        "12.2 Variable Statement",
        "This is a method property",
        "We allow trailing commas",
        "The parsing of types roughly parallels the parsing of expressions, and",
        "primary types are kind of like primary expressions...they're the",
        "primitives with which other types are constructed.",
        "fallthrough",
        "Check to see if this is actually a grouped type",
        "If we see a => next then someone was probably confused about",
        "function types, so we can provide a better error message",
        "typeParameters",
        "istanbul ignore next",
        "12.2.1",
        "kind may be `const` or `let`",
        "Both are experimental and not in the specification yet.",
        "see http://wiki.ecmascript.org/doku.php?id=harmony:const",
        "and http://wiki.ecmascript.org/doku.php?id=harmony:let",
        "people.mozilla.org/~jorendorff/es6-draft.html",
        "export {default} from \"something\";",
        "covers:",
        "export default ...",
        "covers:",
        "export default function foo () {}",
        "export default class foo {}",
        "covers:",
        "export default function () {}",
        "export default class {}",
        "covers:",
        "export default {};",
        "export default [];",
        "non-default export",
        "covers:",
        "export var f = 1;",
        "covers:",
        "export * from \"foo\";",
        "covering:",
        "export {default} from \"foo\";",
        "export {foo} from \"foo\";",
        "covering:",
        "export {default}; // missing fromClause",
        "cover",
        "export {foo};",
        "import {<foo as bar>} ...;",
        "{foo, bar as bas}",
        "import <foo> ...;",
        "import <* as foo> ...;",
        "covers:",
        "import \"foo\";",
        "covers:",
        "import foo",
        "import foo, ...",
        "covers:",
        "import foo, * as foo",
        "import * as foo",
        "covers:",
        "import foo, {bar}",
        "import {bar}",
        "12.3 Empty Statement",
        "12.4 Expression Statement",
        "12.5 If statement",
        "12.6 Iteration Statements",
        "http://wiki.ecmascript.org/doku.php?id=proposals:iterators_and_generators&s=each",
        "LeftHandSideExpression",
        "12.7 The continue statement",
        "Optimize the most common form: 'continue;'.",
        "12.8 The break statement",
        "Catch the very common case first: immediately a semicolon (char #59).",
        "12.9 The return statement",
        "'return' followed by a space and an identifier is very common.",
        "12.10 The with statement",
        "12.10 The swith statement",
        "12.13 The throw statement",
        "12.14 The try statement",
        "12.14.1",
        "12.15 The debugger statement",
        "12 Statements",
        "12.12 Labelled Statements",
        "13 Function Definition",
        "this is not directive",
        "requireTypeAnnotation",
        "canBeOptionalParam",
        "requireTypeAnnotation",
        "canBeOptionalParam",
        "14 Functions and classes",
        "14.1 Functions is defined above (13 in ES5)",
        "14.2 Arrow Functions Definitions is defined in (7.3 assignments)",
        "14.3 Method Definitions",
        "14.3.7",
        "15 Program",
        "this is not directive",
        "16 JSX",
        "istanbul ignore else",
        "istanbul ignore next",
        "exclude backslash (\\)",
        "exclude backslash (\\) and add hyphen (-)",
        "Well-formed entity (ending was found).",
        "Numeric entity.",
        "Removing leading zeros in order to avoid treating as octal in old browsers.",
        "istanbul ignore else",
        "Treat non-entity sequences as regular text.",
        "'<' 60, '>' 62, '{' 123, '}' 125",
        "HTML empty attribute",
        "Because advance() (called by lex() called by expect()) expects there",
        "to be a valid token after >, it needs to know whether to look for a",
        "standard JS token or an JSX text node",
        "Because advance() (called by lex() called by expect()) expects",
        "there to be a valid token after >, it needs to know whether to",
        "look for a standard JS token or an JSX text node",
        "Call lookahead2() with inJSXChild = false because </ should not be considered in the child",
        "When (erroneously) writing two adjacent tags like",
        "",
        "var x = <div>one</div><div>two</div>;",
        "",
        "the default error message is a bit incomprehensible. Since it's",
        "rarely (never?) useful to write a less-than sign after an JSX",
        "element, we disallow it here in the parser in order to provide a",
        "better error message. (In the rare case that the less-than operator",
        "was intended, the left tag can be wrapped in parentheses.)",
        "allowStatic",
        "allowStatic",
        "istanbul ignore else",
        "istanbul ignore next",
        "Pop the previous token, which is likely '/' or '/='",
        "This is used to modify the delegate.",
        "istanbul ignore else",
        "istanbul ignore else",
        "Options matching.",
        "Of course we collect tokens here.",
        "The following two fields are necessary to compute the Regex tokens.",
        "We have to break on the first error",
        "to avoid infinite loops.",
        "Sync with *.json manifests.",
        "Deep copy.",
        "istanbul ignore next",
        "vim: set sw=4 ts=4 et tw=80 :",
        "-*- Mode: js; js-indent-level: 2; -*-",
        "-*- Mode: js; js-indent-level: 2; -*-",
        "A single base 64 digit can contain 6 bits of data. For the base 64 variable",
        "length quantities we use in the source map spec, the first bit is the sign,",
        "the next four bits are the actual value, and the 6th bit is the",
        "continuation bit. The continuation bit tells us whether there are more",
        "digits in this value following this digit.",
        "",
        "Continuation",
        "|    Sign",
        "|    |",
        "V    V",
        "101011",
        "binary: 100000",
        "binary: 011111",
        "binary: 100000",
        "There are still more digits in this value, so we must make sure the",
        "continuation bit is marked.",
        "-*- Mode: js; js-indent-level: 2; -*-",
        "-*- Mode: js; js-indent-level: 2; -*-",
        "This function terminates when one of the following is true:",
        "",
        "1. We find the exact element we are looking for.",
        "",
        "2. We did not find the exact element, but we can return the next",
        "closest element that is less than that element.",
        "",
        "3. We did not find the exact element, and there is no next-closest",
        "element which is less than the one we are searching for, so we",
        "return null.",
        "Found the element we are looking for.",
        "aHaystack[mid] is greater than our needle.",
        "The element is in the upper half.",
        "We did not find an exact match, return the next closest one",
        "(termination case 2).",
        "aHaystack[mid] is less than our needle.",
        "The element is in the lower half.",
        "The exact needle element was not found in this haystack. Determine if",
        "we are in termination case (2) or (3) and return the appropriate thing.",
        "-*- Mode: js; js-indent-level: 2; -*-",
        "Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which",
        "requires the array) to play nice here.",
        "Once again, Sass deviates from the spec and supplies the version as a",
        "string rather than a number, so we use loose equality checking here.",
        "Pass `true` below to allow duplicate names and sources. While source maps",
        "are intended to be compressed and deduplicated, the TypeScript compiler",
        "sometimes generates source maps with duplicates in them. See Github issue",
        "#72 and bugzil.la/889492.",
        "`__generatedMappings` and `__originalMappings` are arrays that hold the",
        "parsed mapping coordinates from the source map's \"mappings\" attribute. They",
        "are lazily instantiated, accessed via the `_generatedMappings` and",
        "`_originalMappings` getters respectively, and we only parse the mappings",
        "and create these arrays once queried for a source location. We jump through",
        "these hoops because there can be many thousands of mappings, and parsing",
        "them is expensive, so we only want to do it if we must.",
        "",
        "Each object in the arrays is of the form:",
        "",
        "{",
        "generatedLine: The line number in the generated code,",
        "generatedColumn: The column number in the generated code,",
        "source: The path to the original source file that generated this",
        "chunk of code,",
        "originalLine: The line number in the original source that",
        "corresponds to this chunk of generated code,",
        "originalColumn: The column number in the original source that",
        "corresponds to this chunk of generated code,",
        "name: The name of the original symbol which generated this chunk of",
        "code.",
        "}",
        "",
        "All properties except for `generatedLine` and `generatedColumn` can be",
        "`null`.",
        "",
        "`_generatedMappings` is ordered by the generated positions.",
        "",
        "`_originalMappings` is ordered by the original positions.",
        "Generated column.",
        "Original source.",
        "Original line.",
        "Lines are stored 0-based",
        "Original column.",
        "Original name.",
        "To return the position we are searching for, we must first find the",
        "mapping for the given position and then return the opposite position it",
        "points to. Because the mappings are sorted, we can use binary search to",
        "find the best mapping.",
        "XXX: file:// URIs and absolute paths lead to unexpected behavior for",
        "many users. We can help them out when they expect file:// URIs to",
        "behave like it would if they were running a local HTTP server. See",
        "https://bugzilla.mozilla.org/show_bug.cgi?id=885597.",
        "-*- Mode: js; js-indent-level: 2; -*-",
        "Add the source content to the _sourcesContents map.",
        "Create a new _sourcesContents map if the property is null.",
        "Remove the source file from the _sourcesContents map.",
        "If the _sourcesContents map is empty, set the property to null.",
        "If aSourceFile is omitted, we will use the file property of the SourceMap",
        "Make \"aSourceFile\" relative if an absolute Url is passed.",
        "Applying the SourceMap can add and remove items from the sources and",
        "the names array.",
        "Find mappings for the \"aSourceFile\"",
        "Check if it can be mapped by the source map, then update the mapping.",
        "Copy mapping",
        "Only use the identifier name if it's an identifier",
        "in both SourceMaps",
        "Copy sourcesContents of applied map.",
        "Case 1.",
        "Cases 2 and 3.",
        "The mappings must be guaranteed to be in sorted order before we start",
        "serializing them or else the generated line numbers (which are defined",
        "via the ';' separators) will be all messed up. Note: it might be more",
        "performant to maintain the sorting as we insert them, rather than as we",
        "serialize them, but the big O is the same either way.",
        "lines are stored 0-based in SourceMap spec version 3",
        "-*- Mode: js; js-indent-level: 2; -*-",
        "The SourceNode we want to fill with the generated code",
        "and the SourceMap",
        "The generated code",
        "Processed fragments are removed from this array.",
        "We need to remember the position of \"remainingLines\"",
        "The generate SourceNodes we need a code range.",
        "To extract it current and last mapping is used.",
        "Here we store the last mapping.",
        "We add the generated code until the first mapping",
        "to the SourceNode without any mapping.",
        "Each line is added as separate string.",
        "We add the code from \"lastMapping\" to \"mapping\":",
        "First check if there is a new line in between.",
        "Associate full lines with \"lastMapping\"",
        "When we reached the correct line, we add code until we",
        "reach the correct column too.",
        "Create the SourceNode.",
        "There is no new line in between.",
        "Associate the code between \"lastGeneratedColumn\" and",
        "\"mapping.generatedColumn\" with \"lastMapping\"",
        "We have processed all mappings.",
        "Associate the remaining code in the current line with \"lastMapping\"",
        "and add the remaining lines without any mapping",
        "Copy sourcesContent into SourceNode",
        "-*- Mode: js; js-indent-level: 2; -*-",
        "vim: et:ts=4:sw=4:sts=4\n * @license amdefine 0.1.0 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/amdefine for details",
        "jslint node: true",
        "global module, process",
        "End of the line. Keep at least one non-dot",
        "path segment at the front so it can be mapped",
        "correctly to disk. Otherwise, there is likely",
        "no path mapping for a path starting with '..'.",
        "This can still fail, but catches the most reasonable",
        "uses of ..",
        "Adjust any relative paths.",
        "If have a base name, try to normalize against it,",
        "otherwise, assume it is a top-level require that will",
        "be relative to baseUrl in the end.",
        "This one is difficult because the text can/probably uses",
        "define, and any relative paths and requires should be relative",
        "to that id was it would be found on disk. But this would require",
        "bootstrapping a module/require fairly deeply from node core.",
        "Not sure how best to go about that yet.",
        "Synchronous, single module require('')",
        "Array of dependencies with a callback.",
        "Convert the dependencies to modules.",
        "Wait for next tick to call back the require call.",
        "Favor explicit value, passed in if the module wants to support Node 0.4.",
        "Only support one define call per file",
        "Use the real variables from node",
        "Use module.exports for exports, since",
        "the exports in here is amdefine exports.",
        "If there are dependencies, they are strings, so need",
        "to convert them to dependency values.",
        "Call the factory with the right dependencies.",
        "Split the ID by a ! so that",
        "Straight module lookup. If it is one of the special dependencies,",
        "deal with it, otherwise, delegate to node.",
        "There is a plugin in play.",
        "Normalize the ID normally.",
        "Create a define function specific to the module asking for amdefine.",
        "Set up properties for this module. If an ID, then use",
        "internal cache. If no ID, then use the external variables",
        "for this node module.",
        "Put the module in deep freeze until there is a",
        "require call for it.",
        "define.require, which has access to all the values in the",
        "cache. Useful for AMD modules that all have IDs in the file,",
        "but need to finally export a value to node based on one of those",
        "IDs.",
        "Normalize multi-line directives",
        "jslint node: true",
        "jshint -W004",
        "Create a scope stack entry if this is the first node we've encountered in",
        "its local scope",
        "All functions have an implicit 'arguments' object in scope",
        "Include function arg identifiers in the scope boundaries of the",
        "function",
        "Include rest arg identifiers in the scope boundaries of their",
        "functions",
        "Named FunctionExpressions scope their name within the body block of",
        "themselves only",
        "Traverse and find all local identifiers in this closure first to",
        "account for function/variable declaration hoisting",
        "Only catchup() before and after traversing a child node",
        "Inject temp variables into the scope.",
        "Function expressions don't get their names (if there is one) added to",
        "the closure scope they're defined in",
        "Variables have function-local scope",
        "TODO: Support 'let' here...maybe...one day...or something...",
        "jslint node: true",
        "cannot move backwards",
        "record where we are",
        "record line breaks in transformed source",
        "Add line break mappings between last known mapping and the end of the",
        "added piece. So for the code piece",
        "(foo, bar);",
        "> var x = 2;",
        "> var b = 3;",
        "var c =",
        "only add lines marked with \">\": 2, 3.",
        "offset for the last piece",
        "Account for '\\n'",
        "move the internal cursors",
        "jshint -W004",
        "global exports:true",
        "Wrap a function into a grouping operator, if it's not",
        "in the expression position.",
        "Skip arrow.",
        "Bind the function only if `this` value is used",
        "inside it or inside any sub-expression.",
        "Close wrapper if not in the expression.",
        "To preserve inline typechecking directives, we",
        "distinguish between parens-free and paranthesized single param.",
        "Wrap simple expression bodies into a block",
        "with explicit return statement.",
        "Special handling of rest param.",
        "Special handling of destructured params.",
        "global exports:true",
        "Input  = new Set(1, 2, ...list)",
        "Output = new (Function.prototype.bind.apply(Set, [null, 1, 2].concat(list)))",
        "Input  = get().fn(1, 2, ...more)",
        "Output = (_ = get()).fn.apply(_, [1, 2].apply(more))",
        "Input  = max(1, 2, ...list)",
        "Output = max.apply(null, [1, 2].concat(list))",
        "jslint node:true",
        "Extension from an expression",
        "foo() {}",
        "'foo bar'() {}  | get 'foo bar'() {} | set 'foo bar'() {}",
        "Set up prototype of constructor on same line as `extends` for line-number",
        "preservation. This relies on function-hoisting if a constructor function is",
        "defined in the class body.",
        "If the super class is an expression, we need to memoize the output of the",
        "expression into the generated class name variable and use that to refer",
        "to the super class going forward. Example:",
        "",
        "class Foo extends mixin(Bar, Baz) {}",
        "--transforms to--",
        "function Foo() {} var ____Class0Blah = mixin(Bar, Baz);",
        "If there's no constructor method specified in the class body, create an",
        "empty constructor function at the top (same line as the class keyword)",
        "Always munge non-computed properties of MemberExpressions",
        "(a la preventing access of properties of unowned objects)",
        "Always munge identifiers that were declared within the method function",
        "scope",
        "Always munge private keys on object literals defined within a method's",
        "scope.",
        "Always munge function parameters",
        "[\"a\" + \"b\"]",
        ".ab",
        "global exports:true",
        "-------------------------------------------------------",
        "1. Structured variable declarations.",
        "",
        "var [a, b] = [b, a];",
        "var {x, y} = {y, x};",
        "-------------------------------------------------------",
        "Allocate new temp for the pattern.",
        "Skip the pattern and assign the init to the temp.",
        "Render the destructured data.",
        "Main function which does actual recursive destructuring",
        "of nested complex structures.",
        "Spread/rest of an array.",
        "TODO(dmitrys): support spread in the middle of a pattern",
        "and also for function param patterns: [x, ...xs, y]",
        "Depending on pattern type (Array or Object), we get",
        "corresponding pattern item parts.",
        "TODO(dmitrys): implement default values: {x, y=5}",
        "Simple pattern item.",
        "Complex sub-structure.",
        "-------------------------------------------------------",
        "2. Assignment expression.",
        "",
        "[a, b] = [b, a];",
        "({x, y} = {y, x});",
        "-------------------------------------------------------",
        "We consider the expression statement rather than just assignment",
        "expression to cover case with object patters which should be",
        "wrapped in grouping operator: ({x, y} = {y, x});",
        "-------------------------------------------------------",
        "3. Structured parameter.",
        "",
        "function foo({x, y}) { ... }",
        "-------------------------------------------------------",
        "-------------------------------------------------------",
        "4. Function body for structured parameters.",
        "",
        "function foo({x, y}) { x; y; }",
        "-------------------------------------------------------",
        "jslint node:true",
        "[<expr>]() { ...}",
        "jslint node: true",
        "jslint node:true",
        "Render params.",
        "-3 is for ... of the rest.",
        "jslint node:true",
        "+ between element and substitution",
        "maintain line numbers",
        "templateElement.value.raw === ''",
        "Concatenat adjacent substitutions, e.g. `${x}${y}`. Empty templates",
        "appear before the first and after the last element - nothing to add in",
        "those cases.",
        "+ between substitution and substitution",
        "if next templateElement isn't empty...",
        "print the tag",
        "print array of template elements",
        "print substitutions",
        "maintain line numbers by calling catchupWhiteSpace over the whole",
        "previous TemplateElement",
        "print blank lines to push the closing ) down to account for the final",
        "TemplateElement.",
        "jslint node:true",
        "TODO: This is a pretty massive helper, it should only be defined once, in the",
        "transform's runtime environment. We don't currently have a runtime though.",
        "This could be faster with 'Object.assign({}, ' + accessorExpression + ')'",
        "but to unify code paths and avoid a ES6 dependency we use the same",
        "helper as for the exclusion case.",
        "global exports:true",
        "Skip the original {",
        "Close the previous object or initial object",
        "Normally there will be a comma when we catch up, but not before",
        "the first property.",
        "skip ...",
        "Strip any non-whitespace between the last item and the end.",
        "We only catch up on whitespace so that we ignore any trailing commas which",
        "are stripped out for IE8 support. Unfortunately, this also strips out any",
        "trailing comments.",
        "Skip the trailing }",
        "Tight loop optimization",
        "https://people.mozilla.org/~jorendorff/es6-draft.html#sec-reserved-words",
        "global exports:true",
        "global exports:true",
        "replace rendered whitespace tabs with spaces",
        "trim whitespace touching a newline",
        "only restore tail whitespace if line had literals",
        "Plus 1 to skip `{`.",
        "If we need to append a comma, make sure to do so after the expression.",
        "Minus 1 to skip `}`.",
        "Quote invalid JS identifiers.",
        "global exports:true",
        "We assume that the React runtime is already in scope",
        "Use utils.catchup in this case so we can easily handle",
        "JSXMemberExpressions which look like Foo.Bar.Baz. This also handles",
        "JSXIdentifiers that aren't fallback tags.",
        "if we don't have any attributes, pass in null",
        "keep track of if the previous attribute was a spread attribute",
        "write attributes",
        "Close the previous object or initial object",
        "Move to the expression start, ignoring everything except parenthesis",
        "and whitespace.",
        "Plus 1 to skip `{`.",
        "Move to the end, ignoring parenthesis and the closing `}`",
        "If the next attribute is a spread, we're effective last in this object",
        "Use catchupNewlines to skip over the '=' in the attribute",
        "filter out whitespace",
        "everything up to />",
        "everything up to </ sdflksjfd>",
        "global exports:true",
        "Verify that the displayName property isn't already set",
        "global exports:true",
        "eslint-disable no-undef",
        "This can be used with a sourcemap that has already has toJSON called on it.",
        "Check first."
    ],
    "docstrings": [
        "* JSXTransformer v0.13.3",
        "* Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.",
        "* Run provided code through jstransform.\n *\n * @param {string} source Original source code\n * @param {object?} options Options to pass to jstransform\n * @return {object} object as returned from jstransform",
        "* Eval provided source after transforming it.\n *\n * @param {string} source Original source code\n * @param {object?} options Options to pass to jstransform",
        "* This method returns a nicely formated line of code pointing to the exact\n * location of the error `e`. The line is limited in size so big lines of code\n * are also shown in a readable way.\n *\n * Example:\n * ... x', overflow:'scroll'}} id={} onScroll={this.scroll} class=\" ...\n * ^\n *\n * @param {string} code The full string of code\n * @param {Error} e The error being thrown\n * @return {string} formatted message\n * @internal",
        "* Actually transform the code.\n *\n * @param {string} code\n * @param {string?} url\n * @param {object?} options\n * @return {string} The transformed code.\n * @internal",
        "* Appends a script element at the end of the <head> with the content of code,\n * after transforming it.\n *\n * @param {string} code The original source code\n * @param {string?} url Where the code came from. null if inline\n * @param {object?} options Options to pass to jstransform\n * @internal",
        "* Load script from the provided url and pass the content to the callback.\n *\n * @param {string} url The location of the script src\n * @param {function} callback Function to call with the content of url\n * @internal",
        "* Loop over provided script tags and get the content, via innerHTML if an\n * inline script, or by using XHR. Transforms are applied if needed. The scripts\n * are executed in the order they are found on the page.\n *\n * @param {array} scripts The <script> elements to load and run.\n * @internal",
        "* Find and run all script tags with type=\"text/jsx\".\n *\n * @internal",
        "* Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.",
        "* Only copy the values that we need. We'll do some preprocessing to account for\n * converting command line flags to options that jstransform can actually use.",
        "* If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Note:\n *\n * - Implementation must support adding new properties to `Uint8Array` instances.\n *   Firefox 4-29 lacked support, fixed in Firefox 30+.\n *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *    incorrect length in some situations.\n *\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will\n * get the Object implementation, which is slower but will work correctly.",
        "* Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.",
        "* Need to make sure that buffer isn't trying to write out of bounds.",
        "* Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.",
        "* Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods",
        "* isArray",
        "* toString",
        "* Whether or not the given `val`\n * is an array.\n *\n * example:\n *\n *        isArray([]);\n *        // > true\n *        isArray(arguments);\n *        // > false\n *        isArray('');\n *        // > false\n *\n * @param {mixed} val\n * @return {bool}",
        "*:",
        "* Between JSX opening and closing tags (e.g. <foo>HERE</foo>), anything that\n     * is not another JSX tag and is not an expression wrapped by {} is text.",
        "* Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause",
        "* Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause",
        "* A data structure which is a combination of an array and a set. Adding a new\n   * member is O(1), testing for membership is O(1), and finding the index of an\n   * element is O(1). Removing elements from the set is not supported. Only\n   * strings are supported for membership.",
        "* Static method for creating ArraySet instances from an existing array.",
        "* Add the given string to this set.\n   *\n   * @param String aStr",
        "* Is the given string a member of this set?\n   *\n   * @param String aStr",
        "* What is the index of the given string in the array?\n   *\n   * @param String aStr",
        "* What is the element at the given index?\n   *\n   * @param Number aIdx",
        "* Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.",
        "* Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "* Converts from a two-complement value to a value where the sign bit is\n   * is placed in the least significant bit.  For example, as decimals:\n   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)",
        "* Converts to a two-complement value from a value where the sign bit is\n   * is placed in the least significant bit.  For example, as decimals:\n   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2",
        "* Returns the base 64 VLQ encoded value.",
        "* Decodes the next base 64 VLQ value from the given string and returns the\n   * value and the rest of the string.",
        "* Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause",
        "* Encode an integer in the range of 0 to 63 to a single base 64 digit.",
        "* Decode a single base 64 digit to an integer.",
        "* Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause",
        "* Recursive implementation of binary search.\n   *\n   * @param aLow Indices here and lower do not contain the needle.\n   * @param aHigh Indices here and higher do not contain the needle.\n   * @param aNeedle The element being searched for.\n   * @param aHaystack The non-empty array being searched.\n   * @param aCompare Function which takes two elements and returns -1, 0, or 1.",
        "* This is an implementation of binary search which will always try and return\n   * the next lowest value checked if there is no exact hit. This is because\n   * mappings between original and generated line/col pairs are single points,\n   * and there is an implicit region between each of them, so a miss just means\n   * that you aren't on the very start of a region.\n   *\n   * @param aNeedle The element you are looking for.\n   * @param aHaystack The array that is being searched.\n   * @param aCompare A function which takes the needle and an element in the\n   *     array and returns -1, 0, or 1 depending on whether the needle is less\n   *     than, equal to, or greater than the element, respectively.",
        "* Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause",
        "* A SourceMapConsumer instance represents a parsed source map which we can\n   * query for information about the original file positions by giving it a file\n   * position in the generated source.\n   *\n   * The only parameter is the raw source map (either as a JSON string, or\n   * already parsed to an object). According to the spec, source maps have the\n   * following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - sources: An array of URLs to the original source files.\n   *   - names: An array of identifiers which can be referrenced by individual mappings.\n   *   - sourceRoot: Optional. The URL root from which all sources are relative.\n   *   - sourcesContent: Optional. An array of contents of the original source files.\n   *   - mappings: A string of base64 VLQs which contain the actual mappings.\n   *   - file: The generated file this source map is associated with.\n   *\n   * Here is an example source map, taken from the source map spec[0]:\n   *\n   *     {\n   *       version : 3,\n   *       file: \"out.js\",\n   *       sourceRoot : \"\",\n   *       sources: [\"foo.js\", \"bar.js\"],\n   *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *       mappings: \"AA,AB;;ABCDE;\"\n   *     }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#",
        "* Create a SourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @returns SourceMapConsumer",
        "* The version of the source mapping spec that we are consuming.",
        "* The list of original sources.",
        "* Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).",
        "* Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.",
        "* Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.",
        "* Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * availible.",
        "* Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.",
        "* Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.",
        "* Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause",
        "* An instance of the SourceMapGenerator represents a source map which is\n   * being built incrementally. To create a new one, you must pass an object\n   * with the following properties:\n   *\n   *   - file: The filename of the generated source.\n   *   - sourceRoot: An optional root for all URLs in this source map.",
        "* Creates a new SourceMapGenerator based on a SourceMapConsumer\n   *\n   * @param aSourceMapConsumer The SourceMap.",
        "* Add a single mapping from original source line and column to the generated\n   * source's line and column for this source map being created. The mapping\n   * object should have the following properties:\n   *\n   *   - generated: An object with the generated line and column positions.\n   *   - original: An object with the original line and column positions.\n   *   - source: The original source file (relative to the sourceRoot).\n   *   - name: An optional original token name for this mapping.",
        "* Set the source content for a source file.",
        "* Applies the mappings of a sub-source-map for a specific source file to the\n   * source map being generated. Each mapping to the supplied source file is\n   * rewritten using the supplied source map. Note: The resolution for the\n   * resulting mappings is the minimium of this map and the supplied map.\n   *\n   * @param aSourceMapConsumer The source map to be applied.\n   * @param aSourceFile Optional. The filename of the source file.\n   *        If omitted, SourceMapConsumer's file property will be used.",
        "* A mapping can have one of the three levels of data:\n   *\n   *   1. Just the generated position.\n   *   2. The Generated position, original position, and original source.\n   *   3. Generated and original position, original source, as well as a name\n   *      token.\n   *\n   * To maintain consistency, we validate that any new mapping being added falls\n   * in to one of these categories.",
        "* Serialize the accumulated mappings in to the stream of base 64 VLQs\n   * specified by the source map format.",
        "* Externalize the source map.",
        "* Render the source map being generated to a string.",
        "* Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause",
        "* SourceNodes provide a way to abstract over interpolating/concatenating\n   * snippets of generated JavaScript source code while maintaining the line and\n   * column information associated with the original source code.\n   *\n   * @param aLine The original line number.\n   * @param aColumn The original column number.\n   * @param aSource The original source's filename.\n   * @param aChunks Optional. An array of strings which are snippets of\n   *        generated JS, or other SourceNodes.\n   * @param aName The original identifier.",
        "* Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code",
        "* Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.",
        "* Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.",
        "* Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.",
        "* Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.",
        "* Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.",
        "* Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file",
        "* Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.",
        "* Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.",
        "* Returns the string representation of this source node along with a source\n   * map.",
        "* Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause",
        "* This is a helper function for getting values from parameter/options\n   * objects.\n   *\n   * @param args The object we are extracting values from\n   * @param name The name of the property we are getting.\n   * @param defaultValue An optional value to return if the property is missing\n   * from the object. If this is not specified and the property is missing, an\n   * error will be thrown.",
        "* Because behavior goes wacky when you set `__proto__` on objects, we\n   * have to prefix all the strings in our set with an arbitrary character.\n   *\n   * See https://github.com/mozilla/source-map/pull/31 and\n   * https://github.com/mozilla/source-map/issues/30\n   *\n   * @param String aStr",
        "* Comparator between two mappings where the original positions are compared.\n   *\n   * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n   * mappings with the same original source/line/column, but different generated\n   * line and column the same. Useful when searching for a mapping with a\n   * stubbed out mapping.",
        "* Comparator between two mappings where the generated positions are\n   * compared.\n   *\n   * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n   * mappings with the same generated line and column, but different\n   * source/name/original line and column the same. Useful when searching for a\n   * mapping with a stubbed out mapping.",
        "* Creates a define for node.\n * @param {Object} module the \"module\" object that is defined by Node for the\n * current module.\n * @param {Function} [requireFn]. Node's require function for the current module.\n * It only needs to be passed in Node versions before 0.5, when module.require\n * did not exist.\n * @returns {Function} a define function that is usable for the current node\n * module.",
        "* Trims the . and .. from an array of path segments.\n     * It will keep a leading path segment if a .. will become\n     * the first path segment, to help with module name lookups,\n     * which act like paths, but can be remapped. But the end result,\n     * all paths that use this function should look normalized.\n     * NOTE: this method MODIFIES the input array.\n     * @param {Array} ary the array of path segments.",
        "* Create the normalize() function passed to a loader plugin's\n     * normalize method.",
        "* Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @param {String} contents\n * @return {String}",
        "* @param {String} contents\n * @return {Array}",
        "* Same as parse but returns an object of prop: value instead of array of paris\n * If a property appers more than once the last one will be returned\n *\n * @param {String} contents\n * @return {Object}",
        "* Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @param {object} node\n * @param {object} parentNode\n * @return {boolean}",
        "* @param {object} node\n * @param {array} path\n * @param {object} state",
        "* Applies all available transformations to the source\n * @param {array} visitors\n * @param {string} source\n * @param {?object} options\n * @return {object}",
        "* Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* A `state` object represents the state of the parser. It has \"local\" and\n * \"global\" parts. Global contains parser position, source, etc. Local contains\n * scope based properties like current class name. State should contain all the\n * info required for transformation. It's the only mandatory object that is\n * being passed to every function in transform chain.\n *\n * @param  {string} source\n * @param  {object} transformOptions\n * @return {object}",
        "* A tree representing the current local scope (and its lexical scope chain)\n     * Useful for tracking identifiers from parent scopes, etc.\n     * @type {Object}",
        "* The name (and, if applicable, expression) of the super class\n     * @type {Object}",
        "* The namespace to use when munging identifiers\n     * @type {String}",
        "* Ref to the node for the current MethodDefinition\n     * @type {Object}",
        "* Ref to the node for the FunctionExpression of the enclosing\n     * MethodDefinition\n     * @type {Object}",
        "* Name of the enclosing class\n     * @type {String}",
        "* Whether we're currently within a `strict` scope\n     * @type {Bool}",
        "* Indentation offset\n     * @type {Number}",
        "* Global state (not affected by updateState)\n     * @type {Object}",
        "* A set of general options that transformations can consider while doing\n       * a transformation:\n       *\n       * - minify\n       *   Specifies that transformation steps should do their best to minify\n       *   the output source when possible. This is useful for places where\n       *   minification optimizations are possible with higher-level context\n       *   info than what jsxmin can provide.\n       *\n       *   For example, the ES6 class transform will minify munged private\n       *   variables if this flag is set.",
        "* Current position in the source code\n       * @type {Number}",
        "* Auxiliary data to be returned by transforms\n       * @type {Object}",
        "* Buffer containing the result\n       * @type {String}",
        "* Source that is being transformed\n       * @type {String}",
        "* Cached parsed docblock (see getDocblock)\n       * @type {object}",
        "* Whether the thing was used\n       * @type {Boolean}",
        "* If using bolt xjs transformation\n       * @type {Boolean}",
        "* Whether to record source map (expensive) or not\n       * @type {SourceMapGenerator|null}",
        "* Filename of the file being processed. Will be returned as a source\n       * attribute in the source map",
        "* Only when source map is used: last line in the source for which\n       * source map was generated\n       * @type {Number}",
        "* Only when source map is used: last line in the buffer for which\n       * source map was generated\n       * @type {Number}",
        "* The top-level Program AST for the original file.",
        "* Updates a copy of a given state with \"update\" and returns an updated state.\n *\n * @param  {object} state\n * @param  {object} update\n * @return {object}",
        "* Given a state fill the resulting buffer from the original source up to\n * the end\n *\n * @param {number} end\n * @param {object} state\n * @param {?function} contentTransformer Optional callback to transform newly\n *                                       added content.",
        "* Returns original source for an AST node.\n * @param {object} node\n * @param {object} state\n * @return {string}",
        "* Removes all non-whitespace characters",
        "* Finds the position of the next instance of the specified syntactic char in\n * the pending source.\n *\n * NOTE: This will skip instances of the specified char if they sit inside a\n *       comment body.\n *\n * NOTE: This function also assumes that the buffer's current position is not\n *       already within a comment or a string. This is rarely the case since all\n *       of the buffer-advancement utility methods tend to be used on syntactic\n *       nodes' range values -- but it's a small gotcha that's worth mentioning.",
        "* Catches up as `catchup` but replaces non-whitespace chars with spaces.",
        "* Catches up as `catchup` but removes all non-whitespace characters.",
        "* Removes all non-newline characters",
        "* Catches up as `catchup` but removes all non-newline characters.\n *\n * Equivalent to appending as many newlines as there are in the original source\n * between the current position and `end`.",
        "* Same as catchup but does not touch the buffer\n *\n * @param  {number} end\n * @param  {object} state",
        "* Appends a string of text to the buffer\n *\n * @param {string} str\n * @param {object} state",
        "* Update indent using state.indentBy property. Indent is measured in\n * double spaces. Updates a single line only.\n *\n * @param {string} str\n * @param {object} state\n * @return {string}",
        "* Calculates indent from the beginning of the line until \"start\" or the first\n * character before start.\n * @example\n *   \"  foo.bar()\"\n *         ^\n *       start\n *   indent will be \"  \"\n *\n * @param  {number} start\n * @param  {object} state\n * @return {string}",
        "* @param {object} boundaryNode\n * @param {?array} path\n * @return {?object} node",
        "* Apply the given analyzer function to the current node. If the analyzer\n * doesn't return false, traverse each child of the current node using the given\n * traverser function.\n *\n * @param {function} analyzer\n * @param {function} traverser\n * @param {object} node\n * @param {array} path\n * @param {object} state",
        "* It is crucial that we traverse in order, or else catchup() on a later\n * node that is processed out of order can move the buffer past a node\n * that we haven't handled yet, preventing us from modifying that node.\n *\n * This can happen when a node has multiple properties containing children.\n * For example, XJSElement nodes have `openingElement`, `closingElement` and\n * `children`. If we traverse `openingElement`, then `closingElement`, then\n * when we get to `children`, the buffer has already caught up to the end of\n * the closing element, after the children.\n *\n * This is basically a Schwartzian transform. Collects an array of children,\n * each one represented as [child, startIndex]; sorts the array by start\n * index; then traverses the children in that order.",
        "* Helper function for analyzeAndTraverse which queues up all of the children\n * of the given node.\n *\n * Children can also be found in arrays, so we basically want to merge all of\n * those arrays together so we can sort them and then traverse the children\n * in order.\n *\n * One example is the Program node. It contains `body` and `comments`, both\n * arrays. Lexographically, comments are interspersed throughout the body\n * nodes, but esprima's AST groups them together.",
        "* Checks whether a node or any of its sub-nodes contains\n * a syntactic construct of the passed type.\n * @param {object} node - AST node to test.\n * @param {string} type - node type to lookup.",
        "* Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Desugars ES6 Arrow functions to ES3 function expressions.\n * If the function contains `this` expression -- automatically\n * binds the function to current value of `this`.\n *\n * Single parameter, simple expression:\n *\n * [1, 2, 3].map(x => x * x);\n *\n * [1, 2, 3].map(function(x) { return x * x; });\n *\n * Several parameters, complex block:\n *\n * this.users.forEach((user, idx) => {\n *   return this.isActive(idx) && this.send(user);\n * });\n *\n * this.users.forEach(function(user, idx) {\n *   return this.isActive(idx) && this.send(user);\n * }.bind(this));\n *",
        "* @public",
        "* Copyright 2004-present Facebook. All Rights Reserved.",
        "* Implements ES6 call spread.\n *\n * instance.method(a, b, c, ...d)\n *\n * instance.method.apply(instance, [a, b, c].concat(d))\n *",
        "* Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @typechecks",
        "* Used to generate a unique class for use with code-gens for anonymous class\n * expressions.\n *\n * @param {object} state\n * @return {string}",
        "* Given an identifier name, munge it using the current state's mungeNamespace.\n *\n * @param {string} identName\n * @param {object} state\n * @return {string}",
        "* Extracts super class information from a class node.\n *\n * Information includes name of the super class and/or the expression string\n * (if extending from an expression)\n *\n * @param {object} node\n * @param {object} state\n * @return {object}",
        "* Used with .filter() to find the constructor method in a list of\n * MethodDefinition nodes.\n *\n * @param {object} classElement\n * @return {boolean}",
        "* @param {object} node\n * @param {object} state\n * @return {boolean}",
        "* @param {function} traverse\n * @param {object} node\n * @param {array} path\n * @param {object} state",
        "* @param {function} traverse\n * @param {object} node\n * @param {array} path\n * @param {object} state",
        "* @param {function} traverse\n * @param {object} node\n * @param {array} path\n * @param {object} state",
        "* @param {function} traverse\n * @param {object} node\n * @param {array} path\n * @param {object} state",
        "* @param {function} traverse\n * @param {object} node\n * @param {array} path\n * @param {object} state",
        "* @param {function} traverse\n * @param {object} node\n * @param {array} path\n * @param {object} state",
        "* @param {function} traverse\n * @param {object} node\n * @param {array} path\n * @param {object} state",
        "* @param {function} traverse\n * @param {object} node\n * @param {array} path\n * @param {object} state",
        "* Copyright 2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Implements ES6 destructuring assignment and pattern matchng.\n *\n * function init({port, ip, coords: [x, y]}) {\n *   return (x && y) ? {id, port} : {ip};\n * };\n *\n * function init($__0) {\n *   var\n *    port = $__0.port,\n *    ip = $__0.ip,\n *    $__1 = $__0.coords,\n *    x = $__1[0],\n *    y = $__1[1];\n *   return (x && y) ? {id, port} : {ip};\n * }\n *\n * var x, {ip, port} = init({ip, port});\n *\n * var x, $__0 = init({ip, port}), ip = $__0.ip, port = $__0.port;\n *",
        "* Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Desugars concise methods of objects to function expressions.\n *\n * var foo = {\n *   method(x, y) { ... }\n * };\n *\n * var foo = {\n *   method: function(x, y) { ... }\n * };\n *",
        "* Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Desugars ES6 Object Literal short notations into ES3 full notation.\n *\n * // Easier return values.\n * function foo(x, y) {\n *   return {x, y}; // {x: x, y: y}\n * };\n *\n * // Destructuring.\n * function init({port, ip, coords: {x, y}}) { ... }\n *",
        "* @public",
        "* Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Desugars ES6 rest parameters into an ES3 arguments array.\n *\n * function printf(template, ...args) {\n *   args.forEach(...);\n * }\n *\n * We could use `Array.prototype.slice.call`, but that usage of arguments causes\n * functions to be deoptimized in V8, so instead we use a for-loop.\n *\n * function printf(template) {\n *   for (var args = [], $__0 = 1, $__1 = arguments.length; $__0 < $__1; $__0++)\n *     args.push(arguments[$__0]);\n *   args.forEach(...);\n * }\n *",
        "* Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @typechecks",
        "* http://people.mozilla.org/~jorendorff/es6-draft.html#sec-12.1.9",
        "* http://people.mozilla.org/~jorendorff/es6-draft.html#sec-12.2.6",
        "* Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Desugars ES7 rest properties into ES5 object iteration.",
        "* Copyright 2004-present Facebook. All Rights Reserved.",
        "* Implements ES7 object spread property.\n * https://gist.github.com/sebmarkbage/aa849c7973cb4452c547\n *\n * { ...a, x: 1 }\n *\n * Object.assign({}, a, {x: 1 })\n *",
        "* Copyright 2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* This list should not grow as new reserved words are introdued. This list is\n * of words that need to be quoted because ES3-ish browsers do not allow their\n * use as identifier names.",
        "* Copyright 2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *",
        "* Code adapted from https://github.com/spicyj/es3ify\n * The MIT License (MIT)\n * Copyright (c) 2014 Ben Alpert",
        "* Methods cause trouble, since esprima parses them as a key/value pair, where\n * the location of the value starts at the method body. For example\n * { bar(x:number,...y:Array<number>):number {} }\n * is parsed as\n * { bar: function(x: number, ...y:Array<number>): number {} }\n * except that the location of the FunctionExpression value is 40-something,\n * which is the location of the function body. This means that by the time we\n * visit the params, rest param, and return type organically, we've already\n * catchup()'d passed them.",
        "* Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.",
        "* Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.",
        "* Customized desugar processor for React JSX. Currently:\n *\n * <X> </X> => React.createElement(X, null)\n * <X prop=\"1\" /> => React.createElement(X, {prop: '1'}, null)\n * <X prop=\"2\"><Y /></X> => React.createElement(X, {prop:'2'},\n *   React.createElement(Y, null)\n * )\n * <div /> => React.createElement(\"div\", null)",
        "* Removes all non-whitespace/parenthesis characters",
        "* Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.",
        "* Transforms the following:\n *\n * var MyComponent = React.createClass({\n *    render: ...\n * });\n *\n * into:\n *\n * var MyComponent = React.createClass({\n *    displayName: 'MyComponent',\n *    render: ...\n * });\n *\n * Also catches:\n *\n * MyComponent = React.createClass(...);\n * exports.MyComponent = React.createClass(...);\n * module.exports = {MyComponent: React.createClass(...)};",
        "* Map from transformName => orderedListOfVisitors.",
        "* Specifies the order in which each transform should run.",
        "* Given a list of transform names, return the ordered list of visitors to be\n * passed to the transform() function.\n *\n * @param {array?} excludes\n * @return {array}",
        "* Given a list of visitor set names, return the ordered list of visitors to be\n * passed to jstransform.\n *\n * @param {array}\n * @return {array}",
        "* Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory."
    ],
    "functions": [
        "s",
        "transformReact",
        "exec",
        "createSourceCodeErrorMessage",
        "transformCode",
        "run",
        "load",
        "loadScripts",
        "check",
        "runScripts",
        "processOptions",
        "innerTransform",
        "Buffer",
        "SlowBuffer",
        "arrayIndexOf",
        "hexWrite",
        "utf8Write",
        "asciiWrite",
        "binaryWrite",
        "base64Write",
        "utf16leWrite",
        "base64Slice",
        "utf8Slice",
        "asciiSlice",
        "binarySlice",
        "hexSlice",
        "utf16leSlice",
        "checkOffset",
        "checkInt",
        "objectWriteUInt16",
        "objectWriteUInt32",
        "checkIEEE754",
        "writeFloat",
        "writeDouble",
        "base64clean",
        "stringtrim",
        "isArrayish",
        "toHex",
        "utf8ToBytes",
        "asciiToBytes",
        "utf16leToBytes",
        "base64ToBytes",
        "blitBuffer",
        "decodeUtf8Char",
        "decode",
        "b64ToByteArray",
        "push",
        "uint8ToBase64",
        "encode",
        "tripletToBase64",
        "normalizeArray",
        "trim",
        "drainQueue",
        "noop",
        "StringMap",
        "isDecimalDigit",
        "isHexDigit",
        "isOctalDigit",
        "isWhiteSpace",
        "isLineTerminator",
        "isIdentifierStart",
        "isIdentifierPart",
        "isFutureReservedWord",
        "isStrictModeReservedWord",
        "isRestrictedWord",
        "isKeyword",
        "addComment",
        "skipSingleLineComment",
        "skipMultiLineComment",
        "skipComment",
        "scanHexEscape",
        "scanUnicodeCodePointEscape",
        "getEscapedIdentifier",
        "getIdentifier",
        "scanIdentifier",
        "scanPunctuator",
        "scanHexLiteral",
        "scanBinaryLiteral",
        "scanOctalLiteral",
        "scanNumericLiteral",
        "scanStringLiteral",
        "scanTemplate",
        "scanTemplateElement",
        "testRegExp",
        "scanRegExpBody",
        "scanRegExpFlags",
        "scanRegExp",
        "isIdentifierName",
        "advanceSlash",
        "advance",
        "lex",
        "peek",
        "lookahead2",
        "rewind",
        "markerCreate",
        "markerCreatePreserveWhitespace",
        "processComment",
        "markerApply",
        "peekLineTerminator",
        "throwError",
        "throwErrorTolerant",
        "throwUnexpected",
        "expect",
        "expectKeyword",
        "expectContextualKeyword",
        "match",
        "matchKeyword",
        "matchContextualKeyword",
        "matchAssign",
        "matchYield",
        "matchAsync",
        "matchAwait",
        "consumeSemicolon",
        "isLeftHandSide",
        "isAssignableLeftHandSide",
        "parseArrayInitialiser",
        "parsePropertyFunction",
        "parsePropertyMethodFunction",
        "parseObjectPropertyKey",
        "parseObjectProperty",
        "parseObjectSpreadProperty",
        "getFieldName",
        "parseObjectInitialiser",
        "parseTemplateElement",
        "parseTemplateLiteral",
        "parseGroupExpression",
        "matchAsyncFuncExprOrDecl",
        "parsePrimaryExpression",
        "parseArguments",
        "parseSpreadOrAssignmentExpression",
        "parseNonComputedProperty",
        "parseNonComputedMember",
        "parseComputedMember",
        "parseNewExpression",
        "parseLeftHandSideExpressionAllowCall",
        "parseLeftHandSideExpression",
        "parsePostfixExpression",
        "parseUnaryExpression",
        "binaryPrecedence",
        "parseBinaryExpression",
        "parseConditionalExpression",
        "reinterpretAsAssignmentBindingPattern",
        "reinterpretAsDestructuredParameter",
        "reinterpretAsCoverFormalsList",
        "parseArrowFunctionExpression",
        "parseAssignmentExpression",
        "parseExpression",
        "parseStatementList",
        "parseBlock",
        "parseTypeParameterDeclaration",
        "parseTypeParameterInstantiation",
        "parseObjectTypeIndexer",
        "parseObjectTypeMethodish",
        "parseObjectTypeMethod",
        "parseObjectTypeCallProperty",
        "parseObjectType",
        "parseGenericType",
        "parseVoidType",
        "parseTypeofType",
        "parseTupleType",
        "parseFunctionTypeParam",
        "parseFunctionTypeParams",
        "parsePrimaryType",
        "parsePostfixType",
        "parsePrefixType",
        "parseIntersectionType",
        "parseUnionType",
        "parseType",
        "parseTypeAnnotation",
        "parseVariableIdentifier",
        "parseTypeAnnotatableIdentifier",
        "parseVariableDeclaration",
        "parseVariableDeclarationList",
        "parseVariableStatement",
        "parseConstLetDeclaration",
        "parseModuleSpecifier",
        "parseExportBatchSpecifier",
        "parseExportSpecifier",
        "parseExportDeclaration",
        "parseImportSpecifier",
        "parseNamedImports",
        "parseImportDefaultSpecifier",
        "parseImportNamespaceSpecifier",
        "parseImportDeclaration",
        "parseEmptyStatement",
        "parseExpressionStatement",
        "parseIfStatement",
        "parseDoWhileStatement",
        "parseWhileStatement",
        "parseForVariableDeclaration",
        "parseForStatement",
        "parseContinueStatement",
        "parseBreakStatement",
        "parseReturnStatement",
        "parseWithStatement",
        "parseSwitchCase",
        "parseSwitchStatement",
        "parseThrowStatement",
        "parseCatchClause",
        "parseTryStatement",
        "parseDebuggerStatement",
        "parseStatement",
        "parseConciseBody",
        "parseFunctionSourceElements",
        "validateParam",
        "parseParam",
        "parseParams",
        "parseFunctionDeclaration",
        "parseFunctionExpression",
        "parseYieldExpression",
        "parseAwaitExpression",
        "specialMethod",
        "parseMethodDefinition",
        "parseClassProperty",
        "parseClassElement",
        "parseClassBody",
        "parseClassImplements",
        "parseClassExpression",
        "parseClassDeclaration",
        "parseSourceElement",
        "parseProgramElement",
        "parseProgramElements",
        "parseProgram",
        "getQualifiedJSXName",
        "isJSXIdentifierStart",
        "isJSXIdentifierPart",
        "scanJSXIdentifier",
        "scanJSXEntity",
        "scanJSXText",
        "scanJSXStringLiteral",
        "advanceJSXChild",
        "parseJSXIdentifier",
        "parseJSXNamespacedName",
        "parseJSXMemberExpression",
        "parseJSXElementName",
        "parseJSXAttributeName",
        "parseJSXAttributeValue",
        "parseJSXEmptyExpression",
        "parseJSXExpressionContainer",
        "parseJSXSpreadAttribute",
        "parseJSXAttribute",
        "parseJSXChild",
        "parseJSXClosingElement",
        "parseJSXOpeningElement",
        "parseJSXElement",
        "parseTypeAlias",
        "parseInterfaceExtends",
        "parseInterfaceish",
        "parseInterface",
        "parseDeclareClass",
        "parseDeclareFunction",
        "parseDeclareVariable",
        "parseDeclareModule",
        "collectToken",
        "collectRegex",
        "filterTokenLocation",
        "patch",
        "unpatch",
        "extend",
        "tokenize",
        "parse",
        "ArraySet",
        "toVLQSigned",
        "fromVLQSigned",
        "recursiveSearch",
        "SourceMapConsumer",
        "SourceMapGenerator",
        "SourceNode",
        "addMappingWithCode",
        "getArg",
        "urlParse",
        "urlGenerate",
        "join",
        "toSetString",
        "fromSetString",
        "relative",
        "strcmp",
        "compareByOriginalPositions",
        "compareByGeneratedPositions",
        "amdefine",
        "trimDots",
        "normalize",
        "makeNormalize",
        "makeLoad",
        "load",
        "amdRequire",
        "runFactory",
        "define",
        "extract",
        "parse",
        "parseAsObject",
        "_nodeIsClosureScopeBoundary",
        "_nodeIsBlockScopeBoundary",
        "traverse",
        "traverser",
        "collectClosureIdentsAndTraverse",
        "collectBlockIdentsAndTraverse",
        "visitLocalClosureIdentifiers",
        "visitLocalBlockIdentifiers",
        "walker",
        "getAstForSource",
        "transform",
        "createState",
        "updateState",
        "catchup",
        "getNodeSourceText",
        "_replaceNonWhite",
        "_stripNonWhite",
        "getNextSyntacticCharOffset",
        "catchupWhiteOut",
        "catchupWhiteSpace",
        "stripNonNewline",
        "catchupNewlines",
        "move",
        "append",
        "updateIndent",
        "indentBefore",
        "getDocblock",
        "identWithinLexicalScope",
        "identInLocalScope",
        "initScopeMetadata",
        "declareIdentInLocalScope",
        "getLexicalBindingMetadata",
        "getLocalBindingMetadata",
        "analyzeAndTraverse",
        "getOrderedChildren",
        "enqueueNodeWithStartIndex",
        "containsChildOfType",
        "containsChildMatching",
        "nodeTypeAnalyzer",
        "nodeTypeTraverser",
        "getBoundaryNode",
        "getTempVar",
        "injectTempVar",
        "injectTempVarDeclarations",
        "visitArrowFunction",
        "renderParams",
        "isParensFreeSingleParam",
        "renderExpressionBody",
        "renderStatementBody",
        "process",
        "visitCallSpread",
        "resetSymbols",
        "_generateAnonymousClassName",
        "_getMungedName",
        "_getSuperClassInfo",
        "_isConstructorMethod",
        "_shouldMungeIdentifier",
        "visitClassMethod",
        "visitClassFunctionExpression",
        "visitClassMethodParam",
        "_renderClassBody",
        "visitClassDeclaration",
        "visitClassExpression",
        "visitPrivateIdentifier",
        "visitSuperCallExpression",
        "visitSuperMemberExpression",
        "visitStructuredVariable",
        "isStructuredPattern",
        "getDestructuredComponents",
        "getPatternItems",
        "getPatternItemAccessor",
        "getPatternItemValue",
        "visitStructuredAssignment",
        "visitStructuredParameter",
        "getParamIndex",
        "isFunctionNode",
        "visitFunctionBodyForStructuredParameter",
        "renderDestructuredComponents",
        "visitObjectConciseMethod",
        "visitObjectLiteralShortNotation",
        "_nodeIsFunctionWithRestParam",
        "visitFunctionParamsWithRestParam",
        "renderRestParamSetup",
        "visitFunctionBodyWithRestParam",
        "visitTemplateLiteral",
        "visitTaggedTemplateExpression",
        "getCookedValue",
        "getRawValue",
        "getPropertyNames",
        "getRestFunctionCall",
        "getSimpleShallowCopy",
        "renderRestExpression",
        "visitObjectLiteralSpread",
        "visitProperty",
        "visitMemberExpression",
        "_isFunctionNode",
        "visitClassProperty",
        "visitTypeAlias",
        "visitTypeCast",
        "visitInterfaceDeclaration",
        "visitDeclare",
        "visitFunctionParametricAnnotation",
        "visitFunctionReturnAnnotation",
        "visitOptionalFunctionParameterAnnotation",
        "visitTypeAnnotatedIdentifier",
        "visitTypeAnnotatedObjectOrArrayPattern",
        "visitMethod",
        "visitImportType",
        "renderJSXLiteral",
        "renderJSXExpressionContainer",
        "quoteAttrName",
        "trimLeft",
        "stripNonWhiteParen",
        "isTagName",
        "visitReactTag",
        "addDisplayName",
        "visitReactDisplayName",
        "getAllVisitors",
        "getVisitorsBySet",
        "inlineSourceMap"
    ],
    "classes": []
}