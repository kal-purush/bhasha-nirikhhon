{
    "identifiers": [
        "IVpc",
        "AwsLogDriver",
        "BaseService",
        "Cluster",
        "ContainerImage",
        "ICluster",
        "LogDriver",
        "Secret",
        "NetworkListener",
        "NetworkLoadBalancer",
        "NetworkTargetGroup",
        "IRole",
        "AddressRecordTarget",
        "ARecord",
        "IHostedZone",
        "LoadBalancerTarget",
        "cdk",
        "key",
        "key",
        "cdk",
        "cdk",
        "scope",
        "cdk",
        "id",
        "props",
        "scope",
        "id",
        "props",
        "props",
        "props",
        "props",
        "props",
        "props",
        "props",
        "props",
        "enableLogging",
        "props",
        "props",
        "props",
        "NetworkLoadBalancer",
        "lbProps",
        "targetProps",
        "props",
        "props",
        "ARecord",
        "props",
        "props",
        "AddressRecordTarget",
        "LoadBalancerTarget",
        "cdk",
        "scope",
        "cdk",
        "vpc",
        "vpc",
        "vpc",
        "cdk",
        "scope",
        "stack",
        "DEFAULT_CLUSTER_ID",
        "Cluster",
        "stack",
        "DEFAULT_CLUSTER_ID",
        "service",
        "service",
        "prefix",
        "AwsLogDriver",
        "prefix"
    ],
    "literals": [
        "'@aws-cdk/aws-ec2'",
        "'@aws-cdk/aws-ecs'",
        "'@aws-cdk/aws-elasticloadbalancingv2'",
        "'@aws-cdk/aws-iam'",
        "'@aws-cdk/aws-route53'",
        "'@aws-cdk/aws-route53-targets'",
        "'@aws-cdk/core'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "You can only specify either vpc or cluster. Alternatively, you can leave both blank",
        "'LB'",
        "'PublicListener'",
        "'ECS'",
        "'undefined'",
        "'undefined'",
        "'A Route53 hosted domain zone name is required to configure the specified domain name'",
        "\"DNS\"",
        "'LoadBalancerDNS'",
        "EcsDefaultClusterMnL3mNNYN${vpc ? vpc.node.id : ''}",
        "''",
        "string"
    ],
    "variables": [
        "enableLogging",
        "internetFacing",
        "lbProps",
        "targetProps",
        "DEFAULT_CLUSTER_ID",
        "stack"
    ],
    "comments": [
        "Create log driver if logging is enabled",
        "magic string to avoid collision with user-defined constructs"
    ],
    "docstrings": [
        "* The properties for the base NetworkLoadBalancedEc2Service or NetworkLoadBalancedFargateService service.",
        "* The name of the cluster that hosts the service.\n   *\n   * If a cluster is specified, the vpc construct should be omitted. Alternatively, you can omit both cluster and vpc.\n   * @default - create a new cluster; if both cluster and vpc are omitted, a new VPC will be created for you.",
        "* The VPC where the container instances will be launched or the elastic network interfaces (ENIs) will be deployed.\n   *\n   * If a vpc is specified, the cluster construct should be omitted. Alternatively, you can omit both vpc and cluster.\n   * @default - uses the VPC defined in the cluster or creates a new VPC.",
        "* The image used to start a container.",
        "* The port number on the container that is bound to the user-specified or automatically assigned host port.\n   *\n   * If you are using containers in a task with the awsvpc or host network mode, exposed ports should be specified using containerPort.\n   * If you are using containers in a task with the bridge network mode and you specify a container port and not a host port,\n   * your container automatically receives a host port in the ephemeral port range.\n   *\n   * For more information, see hostPort.\n   * Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.\n   *\n   * @default 80",
        "* Determines whether the Load Balancer will be internet-facing.\n   *\n   * @default true",
        "* The desired number of instantiations of the task definition to keep running on the service.\n   *\n   * @default 1",
        "* The environment variables to pass to the container.\n   *\n   * @default - No environment variables.",
        "* The secret to expose to the container as an environment variable.\n   *\n   * @default - No secret environment variables.",
        "* Flag to indicate whether to enable logging.\n   *\n   * @default true",
        "* The domain name for the service, e.g. \"api.example.com.\"\n   *\n   * @default - No domain name.",
        "* The Route53 hosted zone for the domain, e.g. \"example.com.\"\n   *\n   * @default - No Route53 hosted domain zone.",
        "* The name of the task execution IAM role that grants the Amazon ECS container agent permission to call AWS APIs on your behalf.\n   *\n   * @default - No value",
        "* The name of the IAM role that grants containers in the task permission to call AWS APIs on your behalf.\n   *\n   * @default - A task role is automatically created for you.",
        "* The container name value to be specified in the task definition.\n   *\n   * @default - none",
        "* The name of the service.\n   *\n   * @default - CloudFormation-generated name.",
        "* The log driver to use.\n   *\n   * @default - AwsLogDriver if enableLogging is true",
        "* The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy\n   * Elastic Load Balancing target health checks after a task has first started.\n   *\n   * @default - defaults to 60 seconds if at least one load balancer is in-use and it is not already set",
        "* The base class for NetworkLoadBalancedEc2Service and NetworkLoadBalancedFargateService services.",
        "* The desired number of instantiations of the task definition to keep running on the service.",
        "* The cluster that hosts the service.",
        "* Constructs a new instance of the NetworkLoadBalancedServiceBase class."
    ],
    "functions": [
        "getDefaultCluster",
        "addServiceAsTarget",
        "createAWSLogDriver"
    ],
    "classes": []
}