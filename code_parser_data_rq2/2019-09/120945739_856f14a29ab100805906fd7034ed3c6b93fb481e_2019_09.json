{
    "identifiers": [
        "SwapClientManager",
        "SwapDealInstance",
        "Logger",
        "SwapPhase",
        "SwapState",
        "SwapFailureReason",
        "SwapRole",
        "SwapClientType",
        "SwapClient",
        "PaymentState",
        "NodeJS",
        "swapClientManager",
        "logger",
        "setInterval",
        "SwapRecovery",
        "pendingSwap",
        "pendingSwap",
        "clearInterval",
        "deal",
        "receivingSwapClient",
        "receivingSwapClient",
        "receivingSwapClient",
        "deal",
        "err",
        "deal",
        "err",
        "deal",
        "SwapState",
        "deal",
        "SwapFailureReason",
        "deal",
        "deal",
        "deal",
        "deal",
        "deal",
        "makerSwapClient",
        "makerSwapClient",
        "deal",
        "deal",
        "deal",
        "takerSwapClient",
        "takerSwapClient",
        "deal",
        "deal",
        "deal",
        "deal",
        "deal",
        "SwapPhase",
        "deal",
        "makerSwapClient",
        "SwapPhase",
        "deal",
        "SwapRole",
        "takerSwapClient",
        "deal",
        "paymentStatus",
        "PaymentState",
        "deal",
        "paymentStatus",
        "makerSwapClient",
        "SwapClientType",
        "deal",
        "deal",
        "makerSwapClient",
        "deal",
        "deal",
        "deal",
        "deal",
        "deal",
        "deal",
        "SwapState",
        "deal",
        "deal",
        "err",
        "deal",
        "deal",
        "deal",
        "err",
        "deal",
        "paymentStatus",
        "PaymentState",
        "deal",
        "makerSwapClient",
        "deal",
        "deal",
        "deal",
        "SwapRole",
        "deal",
        "takerSwapClient",
        "SwapPhase",
        "deal",
        "SwapState",
        "deal",
        "SwapRecovery"
    ],
    "literals": [
        "'./SwapClientManager'",
        "'../db/types'",
        "'../Logger'",
        "'../constants/enums'",
        "'./SwapClient'",
        "could not remove invoice for ${deal.rHash}",
        "could not recover deal ${deal.rHash} because ${deal.makerCurrency} swap client is offline",
        "could not recover deal ${deal.rHash} because ${deal.takerCurrency} swap client is offline",
        "recovering swap deal ${deal.rHash}",
        "cannot claim payment on Raiden for swap ${deal.rHash} using preimage ${deal.rPreimage}, this should be investigated manually",
        "recovered ${deal.makerCurrency} swap payment of ${deal.makerAmount} using preimage ${deal.rPreimage}",
        "could not settle ${deal.makerCurrency} invoice for payment ${deal.rHash} and preimage ${deal.rPreimage}, this should be investigated manually",
        "recovered swap for ${deal.rHash} still has pending payments and will be monitored"
    ],
    "variables": [
        "makerSwapClient",
        "takerSwapClient",
        "paymentStatus"
    ],
    "comments": [
        "A set of swaps where we have a pending outgoing payment for swaps where we don't know the preimage.",
        "The time in milliseconds between checks on the status of pending swaps.",
        "we accepted the deal but stopped before sending payment",
        "cancel the open invoice if we have one",
        "we started sending payment but didn't claim our payment",
        "we should check to see if our payment went through",
        "if it did, we can claim payment with the preimage for our side of the swap",
        "tslint:disable-next-line: max-line-length",
        "TODO: update order and trade in database to indicate they were executed",
        "tslint:disable-next-line: max-line-length",
        "the payment failed, so cancel the open invoice if we have one",
        "the payment is pending, we will need to follow up on this",
        "we are not at risk of losing funds, but we should cancel any open invoices",
        "we've claimed our payment",
        "TODO: send a swap completed packet? it may be too late to do so"
    ],
    "docstrings": [
        "* A class that's responsible for recovering swap deals that were interrupted due to a system or xud crash,\n * ensuring that we do not lose funds on a partially completed swap."
    ],
    "functions": [],
    "classes": [
        "SwapRecovery"
    ]
}