{
    "identifiers": [
        "unittest",
        "music21",
        "common",
        "music21",
        "exceptions21",
        "exceptions21",
        "Music21Exception",
        "_enclosure",
        "value",
        "value",
        "value",
        "value",
        "value",
        "lower",
        "value",
        "lower",
        "TextFormatException",
        "value",
        "property",
        "_getEnclosure",
        "_setEnclosure",
        "doc",
        "_absoluteY",
        "value",
        "value",
        "value",
        "value",
        "common",
        "numToIntOrFloat",
        "value",
        "ValueError",
        "TextFormatException",
        "value",
        "value",
        "property",
        "_getAbsoluteY",
        "_setAbsoluteY",
        "doc",
        "Style",
        "TextStyle",
        "_alignVertical",
        "value",
        "value",
        "value",
        "TextFormatException",
        "value",
        "property",
        "_getAlignVertical",
        "_setAlignVertical",
        "doc",
        "_alignHorizontal",
        "value",
        "value",
        "value",
        "TextFormatException",
        "value",
        "property",
        "_getAlignHorizontal",
        "_setAlignHorizontal",
        "doc",
        "_justify",
        "value",
        "value",
        "value",
        "lower",
        "TextFormatException",
        "value",
        "value",
        "lower",
        "property",
        "_getJustify",
        "_setJustify",
        "doc",
        "_fontStyle",
        "value",
        "value",
        "value",
        "lower",
        "TextFormatException",
        "value",
        "value",
        "lower",
        "property",
        "_getStyle",
        "_setStyle",
        "doc",
        "_fontWeight",
        "value",
        "value",
        "value",
        "lower",
        "TextFormatException",
        "value",
        "value",
        "lower",
        "property",
        "_getWeight",
        "_setWeight",
        "doc",
        "_fontSize",
        "value",
        "value",
        "common",
        "numToIntOrFloat",
        "value",
        "ValueError",
        "value",
        "property",
        "_getSize",
        "_setSize",
        "doc",
        "_letterSpacing",
        "value",
        "value",
        "value",
        "value",
        "ValueError",
        "TextFormatException",
        "value",
        "value",
        "property",
        "_getLetterSpacing",
        "_setLetterSpacing",
        "doc",
        "property",
        "_fontFamily",
        "_fontFamily",
        "fontFamily",
        "setter",
        "newFamily",
        "common",
        "isIterable",
        "newFamily",
        "newFamily",
        "newFamily",
        "Style",
        "BezierStyle",
        "unittest",
        "TestCase",
        "music21",
        "music21",
        "mainTest",
        "Test"
    ],
    "literals": [
        "'tenths'",
        "'none'",
        "'rectangle'",
        "'square'",
        "'oval'",
        "'circle'",
        "'bracket'",
        "'triangle'",
        "'diamond'",
        "'Not a supported enclosure: %s'",
        "'above'",
        "'below'",
        "'Not a supported absoluteY position: %s'",
        "'left'",
        "'top'",
        "'top'",
        "'middle'",
        "'bottom'",
        "'baseline'",
        "'invalid vertical align: %s'",
        "'left'",
        "'right'",
        "'center'",
        "'invalid horizontal align: %s'",
        "'left'",
        "'center'",
        "'right'",
        "'full'",
        "'Not a supported justification: %s'",
        "'italic'",
        "'normal'",
        "'bold'",
        "'bolditalic'",
        "'Not a supported fontStyle: %s'",
        "'normal'",
        "'bold'",
        "'Not a supported fontWeight: %s'",
        "'normal'",
        "'Not a supported letterSpacing: %s'",
        "\"__main__\""
    ],
    "variables": [
        "size",
        "relativeX",
        "relativeY",
        "absoluteX",
        "_absoluteY",
        "_enclosure",
        "fontRepresentation",
        "units",
        "_enclosure",
        "_enclosure",
        "_enclosure",
        "enclosure",
        "_absoluteY",
        "value",
        "value",
        "value",
        "_absoluteY",
        "absoluteY",
        "_fontFamily",
        "_fontSize",
        "_fontStyle",
        "_fontWeight",
        "_letterSpacing",
        "textDecoration",
        "_justify",
        "_alignHorizontal",
        "_alignVertical",
        "_alignVertical",
        "alignVertical",
        "_alignHorizontal",
        "alignHorizontal",
        "_justify",
        "_justify",
        "justify",
        "_fontStyle",
        "_fontStyle",
        "fontStyle",
        "_fontWeight",
        "_fontWeight",
        "fontWeight",
        "value",
        "_fontSize",
        "fontSize",
        "value",
        "_letterSpacing",
        "letterSpacing",
        "_fontFamily",
        "_fontFamily",
        "_fontFamily",
        "bezierOffset",
        "bezierOffset2",
        "bezierX",
        "bezierY",
        "bezierX2",
        "bezierY2"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "------------------------------------------------------------------------------",
        "Name:         style.py",
        "Purpose:      Music21 classes for non-analytic display properties",
        "",
        "Authors:      Michael Scott Cuthbert",
        "",
        "Copyright:    Copyright Â© 2016 Michael Scott Cuthbert and the music21",
        "Project",
        "License:      LGPL or BSD, see license.txt",
        "------------------------------------------------------------------------------",
        "managed by property below.",
        "how should this symbol be represented in the font?",
        "SMuFL characters are allowed.",
        "TODO: migrate from elsewhere",
        "self.color = None",
        "this might be a complex device -- underline, overline, line-through etc.",
        "MusicXML font sizes can be CSS strings...",
        "raise TextFormatException('Not a supported size: %s' % value)",
        "convert to number",
        ", runTest='')",
        "------------------------------------------------------------------------------",
        "eof"
    ],
    "docstrings": [
        "'''\nThe style module represents information about the style of a Note, Accidental,\netc. such that precise positioning information, layout, size, etc. can be specified.\n'''",
        "'''\n    A style object is a lightweight object that\n    keeps track of information about the look of an object.\n    \n    >>> st = style.Style()\n    >>> st.units\n    'tenths'\n    >>> st.absoluteX is None\n    True\n    \n    >>> st.absoluteX = 20.4\n    >>> st.absoluteX\n    20.4\n    \n    '''",
        "'''Get or set the enclosure.  Valid names are\n        rectangle, square, oval, circle, bracket, triangle, diamond, or None.\n\n        \n        >>> tst = style.TextStyle()\n        >>> tst.enclosure = None\n        >>> tst.enclosure = 'rectangle'\n        >>> tst.enclosure\n        'rectangle'\n        \n        '''",
        "'''\n        Get or set the vertical position, where 0 \n        is the top line of the staff and units \n        are in 10ths of a staff space.\n\n        Other legal positions are 'above' and 'below' which\n        are synonyms for 10 and -70 respectively (for 5-line\n        staves; other staves are not yet implemented)\n        \n        >>> te = style.Style()\n        >>> te.absoluteY = 10\n        >>> te.absoluteY\n        10\n        \n        \n        >>> te.absoluteY = 'below'\n        >>> te.absoluteY\n        -70\n        '''",
        "'''\n    A Style object that also includes text formatting.\n    '''",
        "'''\n        Get or set the vertical align. Valid values are top, middle, bottom, and baseline\n        \n        >>> te = style.TextStyle()\n        >>> te.alignVertical = 'top'\n        >>> te.alignVertical\n        'top'\n        '''",
        "'''\n        Get or set the horizontal alignment.  Valid values are left, right, center\n\n        \n        >>> te = style.TextStyle()\n        >>> te.alignHorizontal = 'right'\n        >>> te.alignHorizontal\n        'right'\n        '''",
        "'''Get or set the justification.  Valid values are left,\n        center, right, and full (the last not supported by MusicXML)\n\n        >>> tst = style.TextStyle()\n        >>> tst.justify = 'center'\n        >>> tst.justify\n        'center'\n        '''",
        "'''Get or set the style, as normal, italic, bold, and bolditalic.\n        \n        >>> tst = style.TextStyle()\n        >>> tst.fontStyle = 'bold'\n        >>> tst.fontStyle\n        'bold'\n        '''",
        "'''Get or set the weight, as normal, or bold.\n\n        >>> tst = style.TextStyle()\n        >>> tst.fontWeight = 'bold'\n        >>> tst.fontWeight\n        'bold'\n        '''",
        "'''Get or set the size.  Best, an int or float, but also a css font size\n\n        >>> tst = style.TextStyle()\n        >>> tst.fontSize = 20\n        >>> tst.fontSize\n        20\n        '''",
        "'''Get or set the letter spacing.\n\n        >>> tst = style.TextStyle()\n        >>> tst.letterSpacing = 20\n        >>> tst.letterSpacing\n        20.0\n        >>> tst.letterSpacing = 'normal'\n        '''",
        "'''\n        Returns a list of font family names associated with\n        the style, or sets the font family name list.\n        \n        If a single string is passed then it is converted to\n        a list.\n        \n        >>> ts = style.TextStyle()\n        >>> ff = ts.fontFamily\n        >>> ff\n        []\n        >>> ff.append('Times')\n        >>> ts.fontFamily\n        ['Times']\n        >>> ts.fontFamily.append('Garamond')\n        >>> ts.fontFamily\n        ['Times', 'Garamond']\n        >>> ts.fontFamily = 'Helvetica'\n        >>> ts.fontFamily\n        ['Helvetica']\n        '''",
        "'''\n    From the MusicXML Definition.\n    '''"
    ],
    "functions": [
        "_getEnclosure",
        "_setEnclosure",
        "_getAbsoluteY",
        "_setAbsoluteY",
        "_getAlignVertical",
        "_setAlignVertical",
        "_getAlignHorizontal",
        "_setAlignHorizontal",
        "_getJustify",
        "_setJustify",
        "_getStyle",
        "_setStyle",
        "_getWeight",
        "_setWeight",
        "_getSize",
        "_setSize",
        "_getLetterSpacing",
        "_setLetterSpacing",
        "fontFamily",
        "fontFamily"
    ],
    "classes": [
        "TextFormatException",
        "Style",
        "TextStyle",
        "BezierStyle",
        "Test"
    ]
}