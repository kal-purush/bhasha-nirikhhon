{
    "identifiers": [
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "FileOutputStream",
        "java",
        "io",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "security",
        "InvalidKeyException",
        "java",
        "security",
        "Key",
        "java",
        "security",
        "KeyFactory",
        "java",
        "security",
        "KeyPair",
        "java",
        "security",
        "KeyPairGenerator",
        "java",
        "security",
        "NoSuchAlgorithmException",
        "java",
        "security",
        "NoSuchProviderException",
        "java",
        "security",
        "PrivateKey",
        "java",
        "security",
        "PublicKey",
        "java",
        "security",
        "SecureRandom",
        "java",
        "security",
        "spec",
        "PKCS8EncodedKeySpec",
        "java",
        "security",
        "spec",
        "X509EncodedKeySpec",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "Base64",
        "javax",
        "crypto",
        "Cipher",
        "javax",
        "crypto",
        "CipherInputStream",
        "javax",
        "crypto",
        "Mac",
        "javax",
        "crypto",
        "SecretKey",
        "javax",
        "crypto",
        "spec",
        "SecretKeySpec",
        "args",
        "filePrivateKey",
        "fis",
        "filePrivateKey",
        "encodedPrivateKey",
        "fis",
        "available",
        "fis",
        "read",
        "encodedPrivateKey",
        "fis",
        "close",
        "keyFactory",
        "KeyFactory",
        "getInstance",
        "privateKeySpec",
        "encodedPrivateKey",
        "privateKey",
        "keyFactory",
        "generatePrivate",
        "privateKeySpec",
        "privateKey",
        "keyGen",
        "KeyPairGenerator",
        "getInstance",
        "random",
        "SecureRandom",
        "getInstance",
        "keyGen",
        "initialize",
        "random",
        "key",
        "keyGen",
        "generateKeyPair",
        "privateKey",
        "key",
        "getPrivate",
        "publicKey",
        "key",
        "getPublic",
        "file",
        "fop",
        "file",
        "file",
        "exists",
        "file",
        "createNewFile",
        "x509EncodedKeySpec",
        "publicKey",
        "getEncoded",
        "fop",
        "write",
        "x509EncodedKeySpec",
        "getEncoded",
        "fop",
        "close",
        "file2",
        "fos",
        "file2",
        "file2",
        "exists",
        "file2",
        "createNewFile",
        "pkcs8EncodedKeySpec",
        "privateKey",
        "getEncoded",
        "fos",
        "write",
        "pkcs8EncodedKeySpec",
        "getEncoded",
        "fos",
        "close",
        "RSAKey",
        "key",
        "cipher",
        "eobj",
        "cipher",
        "Cipher",
        "getInstance",
        "cipher",
        "init",
        "Cipher",
        "DECRYPT_MODE",
        "loadPrivateKey",
        "key",
        "cipher",
        "doFinal",
        "RSAKey",
        "e",
        "e",
        "getMessage",
        "decryptedKey",
        "Base64",
        "getEncoder",
        "encodeToString",
        "key",
        "getEncoded",
        "bobsprivatekey",
        "Base64",
        "getEncoder",
        "encodeToString",
        "loadPrivateKey",
        "getEncoded",
        "bobsprivatekey",
        "decryptedKey",
        "raw",
        "key",
        "getEncoded",
        "fos3",
        "fos3",
        "write",
        "raw",
        "fos3",
        "close",
        "eobj",
        "decrypt",
        "key",
        "key",
        "fname",
        "key",
        "fis",
        "fname",
        "keyused",
        "Base64",
        "getEncoder",
        "encodeToString",
        "key",
        "getEncoded",
        "fname",
        "keyused",
        "aesCipher",
        "Cipher",
        "getInstance",
        "aesCipher",
        "init",
        "Cipher",
        "DECRYPT_MODE",
        "key",
        "fos",
        "fname",
        "cis",
        "fis",
        "aesCipher",
        "read",
        "buf",
        "read",
        "cis",
        "read",
        "buf",
        "fos",
        "write",
        "buf",
        "read",
        "cis",
        "close",
        "fis",
        "close",
        "macdata",
        "hmackey",
        "alicesmac",
        "thiskey",
        "Files",
        "readAllBytes",
        "toPath",
        "thiskey",
        "length",
        "data",
        "Files",
        "readAllBytes",
        "toPath",
        "mac",
        "Mac",
        "getInstance",
        "mac",
        "init",
        "hmackey",
        "dataaftermac",
        "mac",
        "doFinal",
        "data",
        "dataAfterMac",
        "Base64",
        "getEncoder",
        "encodeToString",
        "dataaftermac",
        "dataAfterMac",
        "Arrays",
        "equals",
        "dataaftermac",
        "alicesmac",
        "exit"
    ],
    "literals": [
        "\"privatekey.txt\"",
        "\"RSA\"",
        "\"RSA\"",
        "\"SHA1PRNG\"",
        "\"SUN\"",
        "\"F:\\\\Users\\\\Garett\\\\workspace\\\\CS460\\\\publickey.txt\"",
        "\"supposedly file doesnt exists\"",
        "\"F:\\\\Users\\\\Garett\\\\workspace\\\\CS460\\\\privatekey.txt\"",
        "\"supposedly file doesnt exists\"",
        "\"RSA/ECB/PKCS1Padding\"",
        "\"AES\"",
        "\"exception decrypting the aes key: \"",
        "\"Bob: decrypting the key that alice encrypted using my private rsa key: \"",
        "\"Bob: decrypted aes key that should match alices original aes key is \"",
        "\"backtoAES.txt\"",
        "\"clear.txt.aes\"",
        "\"decrypting \"",
        "\" using \"",
        "\"AES\"",
        "\".dec\"",
        "\"decryption complete look in file clear.txt.dec to see if the data inside matches the original clear.txt file\"",
        "\"mackey.txt\"",
        "\"Bob: reading the mackey from mackey.txt was successful\"",
        "\"Bob: bob could not read the mackey from alice\"",
        "\"clear.txt.aes\"",
        "\"HmacSHA1\"",
        "\"Bob: this data should be equal to alice's data if verification is correct\"",
        "\"Bob: \"",
        "\"Bob: Mac was successfully verified!! Encryption can now continue\"",
        "\"Mac was not verified ending all communication\""
    ],
    "variables": [
        "read"
    ],
    "comments": [
        "TODO Auto-generated method stub",
        "Store Public Key.\\",
        "if file doesnt exists, then create it",
        "ASN1 encoding for public keys",
        "Store Private Key.",
        "if file doesnt exists, then create it",
        "ASN1 encoding for private keys",
        "initialize the cipher...",
        "generate the aes key!",
        "wrote the aes key to a file",
        "now that bob decrypted alices encrpted rsa public key he should now be able to decrypt the data.",
        "send the ENCRYPTED DATA file that was encrypted by alice along with the key bob just discovered with his rsa private",
        "key is the decrypted RSA key that alice originally encrypted with bobs rsa public",
        "creating file input stream to read from file",
        "creating object input stream to read objects from file",
        "getting cipher for AES",
        "initializing cipher for decryption with decrypted aes key",
        "creating file output stream to write back original contents",
        "creating cipher input stream to read encrypted contents",
        "reading from file",
        "decrypting and writing to file",
        "bob must first get the key used to generate the mac from alice"
    ],
    "docstrings": [
        "* this method just returns the private rsa key that only\n\t * bob can get and use..it converts the private key in bytes from the file \n\t * into a useful privatekey.\n\t * \n\t * @return privatekey that only bob knows\n\t * @throws Exception",
        "* This method creates a rsa public and private keypair and then saves it to a file\n\t * the keys themselves are generated with rsa using a secure random number with SHA1 pairing\n\t * and are then encoded with ASN1 (public key and private key) before being written to the file\n\t * \n\t * @throws NoSuchAlgorithmException\n\t * @throws IOException\n\t * @throws NoSuchProviderException",
        "* this method is responsible for decrypting the encrypted key that alice sent him\n\t * BOB needs to first decrypt the key before he can decrypt the data\n\t * once BOB gets the original aes key he now can decrypt the data...this key \n\t * is then sent to the decrypt(algorithm, key) method\n\t * @param RSAKey sent from Alice\n\t * @return the original AES key that alice originally encrypted her data with\n\t * @throws Exception",
        "* This method is used in the very beginning when running the Encryption Class \n\t * Bob must first verify the mac sent by alice before being able to continue\n\t * with any decryption of data.\n\t * Bob uses the symettric key provided by Alice to Apply a mac to the same \n\t * ciphertext as alice did...if the mac in the end (dataaftermac) is \n\t * equal to the mac alice sent(alicesmac) then the verification was successful\n\t * \n\t * @param macdata data to apply the mac to\n\t * @param hmackey symmetric key used to generate the mac\n\t * @param alicesmac the mac generated by alice\n\t * @throws IOException\n\t * @throws NoSuchAlgorithmException\n\t * @throws InvalidKeyException"
    ],
    "functions": [
        "main",
        "PrivateKey",
        "loadPrivateKey",
        "generateRSA",
        "SecretKey",
        "decryptAESKey",
        "decrypt",
        "verifyMAC"
    ],
    "classes": [
        "Decryption"
    ]
}