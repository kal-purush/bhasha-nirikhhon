{
    "identifiers": [
        "angular",
        "angular",
        "editableDirectiveFactory",
        "editableDirectiveFactory",
        "angular",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "angular",
        "showCalendarButton",
        "angular",
        "angular",
        "buttonDatePicker",
        "buttonWrapper",
        "buttonDatePicker",
        "buttonWrapper",
        "inputDatePicker",
        "inputDatePicker",
        "inputDatePicker",
        "angular",
        "editableDirectiveFactory",
        "editableDirectiveFactory",
        "angular",
        "div",
        "div",
        "div",
        "angular",
        "editableDirectiveFactory",
        "editableDirectiveFactory",
        "setTimeout",
        "angular",
        "editableDirectiveFactory",
        "editableNgOptionsParser",
        "editableDirectiveFactory",
        "editableNgOptionsParser",
        "ngChangeHtml",
        "ngChecklistComparatorHtml",
        "parsed",
        "parsed",
        "ngChangeHtml",
        "ngChecklistComparatorHtml",
        "parsed",
        "html",
        "angular",
        "editableDirectiveFactory",
        "editableCombodate",
        "editableDirectiveFactory",
        "angular",
        "name",
        "name",
        "name",
        "attrName",
        "options",
        "name",
        "attrName",
        "editableCombodate",
        "options",
        "combodate",
        "e",
        "combodate",
        "dashDelimitedString",
        "dashDelimitedString",
        "match",
        "word",
        "word",
        "angular",
        "types",
        "camelCase",
        "angular",
        "directiveName",
        "editableDirectiveFactory",
        "editableDirectiveFactory",
        "directiveName",
        "angular",
        "inputGroupLeft",
        "angular",
        "inputGroupRight",
        "angular",
        "label",
        "label",
        "angular",
        "editableDirectiveFactory",
        "$interpolate",
        "editableDirectiveFactory",
        "$interpolate",
        "$interpolate",
        "angular",
        "editableDirectiveFactory",
        "editableUtils",
        "editableDirectiveFactory",
        "editableUtils",
        "dir",
        "dir",
        "scope",
        "el",
        "attrs",
        "ctrl",
        "el",
        "attrs",
        "autoCompleteEl",
        "autoCompleteEl",
        "linkOrg",
        "scope",
        "el",
        "attrs",
        "ctrl",
        "dir",
        "angular",
        "editableDirectiveFactory",
        "editableNgOptionsParser",
        "$interpolate",
        "editableDirectiveFactory",
        "editableNgOptionsParser",
        "ngChangeHtml",
        "parsed",
        "$interpolate",
        "parsed",
        "$interpolate",
        "ngChangeHtml",
        "parsed",
        "html",
        "setTimeout",
        "angular",
        "editableDirectiveFactory",
        "editableDirectiveFactory",
        "angular",
        "placeholder",
        "angular",
        "editableDirectiveFactory",
        "editableDirectiveFactory",
        "e",
        "e",
        "e",
        "e",
        "angular",
        "editableDirectiveFactory",
        "editableUtils",
        "editableDirectiveFactory",
        "editableUtils",
        "editableUtils",
        "dir",
        "dir",
        "scope",
        "el",
        "attrs",
        "ctrl",
        "el",
        "el",
        "attrs",
        "matchEl",
        "attrs",
        "choicesEl",
        "matchEl",
        "choicesEl",
        "linkOrg",
        "scope",
        "el",
        "attrs",
        "ctrl",
        "dir",
        "angular",
        "$q",
        "editableUtils",
        "EditableController",
        "$scope",
        "$attrs",
        "$element",
        "$parse",
        "editableThemes",
        "editableIcons",
        "editableOptions",
        "$rootScope",
        "$compile",
        "$q",
        "$scope",
        "$element",
        "$attrs",
        "editableThemes",
        "$attrs",
        "editableThemes",
        "editableOptions",
        "editableThemes",
        "editableOptions",
        "editableIcons",
        "editableOptions",
        "editableIcons",
        "editableOptions",
        "single",
        "single",
        "$attrs",
        "$attrs",
        "$attrs",
        "valueGetter",
        "$parse",
        "$attrs",
        "editableOptions",
        "$attrs",
        "newVal",
        "$attrs",
        "newVal",
        "$attrs",
        "$parse",
        "$attrs",
        "$scope",
        "$attrs",
        "$parse",
        "$attrs",
        "$scope",
        "$attrs",
        "$parse",
        "$attrs",
        "$scope",
        "$attrs",
        "$parse",
        "$attrs",
        "$scope",
        "$attrs",
        "$parse",
        "$attrs",
        "$scope",
        "$scope",
        "$attrs",
        "newVal",
        "oldVal",
        "angular",
        "angular",
        "theme",
        "angular",
        "theme",
        "angular",
        "theme",
        "angular",
        "theme",
        "angular",
        "theme",
        "editableOptions",
        "editableOptions",
        "editableOptions",
        "editableOptions",
        "editableOptions",
        "editableOptions",
        "editableOptions",
        "angular",
        "theme",
        "angular",
        "theme",
        "theme",
        "k",
        "$attrs",
        "k",
        "k",
        "k",
        "nextLetter",
        "nextLetter",
        "transferAttr",
        "k",
        "transferAttr",
        "transferAttr",
        "transferAttr",
        "transferAttr",
        "secondLetter",
        "secondLetter",
        "firstLetter",
        "firstLetter",
        "transferAttr",
        "firstLetter",
        "editableUtils",
        "transferAttr",
        "transferAttr",
        "firstLetter",
        "editableUtils",
        "transferAttr",
        "transferAttr",
        "$attrs",
        "k",
        "transferAttr",
        "$attrs",
        "k",
        "transferAttr",
        "attrValue",
        "editableUtils",
        "editableOptions",
        "angular",
        "theme",
        "theme",
        "angular",
        "valueGetter",
        "$scope",
        "valueGetter",
        "$scope",
        "$element",
        "newScope",
        "$scope",
        "$compile",
        "newScope",
        "$element",
        "newScope",
        "$element",
        "e",
        "e",
        "e",
        "e",
        "e",
        "value",
        "value",
        "inWaiting",
        "inWaiting",
        "inWaiting",
        "start",
        "end",
        "setTimeout",
        "editableOptions",
        "el",
        "start",
        "end",
        "end",
        "start",
        "el",
        "setTimeout",
        "that",
        "start",
        "end",
        "el",
        "el",
        "editableOptions",
        "el",
        "el",
        "el",
        "el",
        "msg",
        "angular",
        "msg",
        "$scope",
        "msg",
        "msg",
        "result",
        "noPromise",
        "angular",
        "result",
        "noPromise",
        "$q",
        "result",
        "angular",
        "r",
        "r",
        "angular",
        "r",
        "r",
        "noPromise",
        "angular",
        "result",
        "result",
        "result",
        "result",
        "angular",
        "result",
        "result",
        "result",
        "result",
        "angular",
        "result",
        "result",
        "result",
        "valueGetter",
        "$scope",
        "angular",
        "valueGetter",
        "$scope",
        "val",
        "val",
        "val",
        "angular",
        "val",
        "val",
        "$element",
        "isEmpty",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "EditableController",
        "angular",
        "$parse",
        "$compile",
        "editableThemes",
        "$rootScope",
        "$document",
        "editableController",
        "editableFormController",
        "editableOptions",
        "overwrites",
        "overwrites",
        "editableController",
        "scope",
        "elem",
        "attrs",
        "ctrl",
        "ctrl",
        "ctrl",
        "eFormCtrl",
        "ctrl",
        "hasForm",
        "attrs",
        "attrs",
        "$parse",
        "attrs",
        "scope",
        "getter",
        "eFormCtrl",
        "getter",
        "hasForm",
        "elem",
        "elem",
        "elem",
        "attrs",
        "eFormCtrl",
        "hasForm",
        "i",
        "$document",
        "i",
        "$document",
        "i",
        "attrs",
        "eFormCtrl",
        "hasForm",
        "angular",
        "overwrites",
        "v",
        "k",
        "eCtrl",
        "k",
        "eCtrl",
        "k",
        "eCtrl",
        "k",
        "angular",
        "eCtrl",
        "overwrites",
        "angular",
        "attrs",
        "scope",
        "attrs",
        "editableOptions",
        "eCtrl",
        "hasForm",
        "scope",
        "eCtrl",
        "elem",
        "hasForm",
        "eFormCtrl",
        "scope",
        "eFormCtrl",
        "scope",
        "scope",
        "eCtrl",
        "$rootScope",
        "$rootScope",
        "$rootScope",
        "attrs",
        "$rootScope",
        "attrs",
        "$rootScope",
        "attrs",
        "eCtrl",
        "scope",
        "scope",
        "editableFormController",
        "scope",
        "eCtrl",
        "attrs",
        "$parse",
        "attrs",
        "angular",
        "scope",
        "scope",
        "attrs",
        "attrs",
        "elem",
        "elem",
        "editableOptions",
        "e",
        "e",
        "e",
        "eCtrl",
        "is_disabled",
        "scope",
        "scope",
        "angular",
        "$parse",
        "$document",
        "$rootScope",
        "editablePromiseCollection",
        "editableUtils",
        "parent",
        "child",
        "child",
        "parent",
        "child",
        "node",
        "node",
        "parent",
        "node",
        "node",
        "shown",
        "shown",
        "angular",
        "editables",
        "v",
        "v",
        "isSelfOrDescendant",
        "element",
        "isBlur",
        "isBlur",
        "$document",
        "e",
        "e",
        "e",
        "i",
        "shown",
        "i",
        "shown",
        "i",
        "shown",
        "i",
        "shown",
        "i",
        "shown",
        "i",
        "isBlur",
        "shown",
        "i",
        "e",
        "toCancel",
        "shown",
        "i",
        "shown",
        "i",
        "isBlur",
        "shown",
        "i",
        "e",
        "toSubmit",
        "shown",
        "i",
        "toCancel",
        "toSubmit",
        "$rootScope",
        "angular",
        "toCancel",
        "v",
        "v",
        "angular",
        "toSubmit",
        "v",
        "v",
        "$rootScope",
        "i",
        "shown",
        "i",
        "shown",
        "i",
        "editable",
        "editable",
        "editable",
        "angular",
        "editable",
        "editable",
        "editable",
        "editable",
        "editable",
        "editable",
        "editable",
        "editable",
        "i",
        "i",
        "i",
        "editable",
        "i",
        "editablePromiseCollection",
        "pc",
        "angular",
        "editable",
        "pc",
        "editable",
        "pc",
        "angular",
        "angular",
        "angular",
        "angular",
        "setTimeout",
        "angular",
        "editableUtils",
        "shown",
        "shown",
        "name",
        "angular",
        "name",
        "i",
        "i",
        "i",
        "i",
        "name",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "angular",
        "editable",
        "editable",
        "editableUtils",
        "shown",
        "angular",
        "editable",
        "editable",
        "value",
        "value",
        "angular",
        "editable",
        "editable",
        "value",
        "name",
        "msg",
        "angular",
        "editable",
        "name",
        "editable",
        "name",
        "editable",
        "msg",
        "editablePromiseCollection",
        "angular",
        "editable",
        "pc",
        "editable",
        "pc",
        "angular",
        "angular",
        "checkSelf",
        "angular",
        "checkSelf",
        "angular",
        "childrenTrue",
        "editablePromiseCollection",
        "pc",
        "pc",
        "angular",
        "childrenTrue",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "editable",
        "editable",
        "editablePromiseCollection",
        "pc",
        "angular",
        "editable",
        "pc",
        "editable",
        "pc",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "angular",
        "$rootScope",
        "$parse",
        "editableFormController",
        "editableOptions",
        "scope",
        "elem",
        "attrs",
        "ctrl",
        "ctrl",
        "attrs",
        "scope",
        "attrs",
        "scope",
        "attrs",
        "eForm",
        "scope",
        "attrs",
        "angular",
        "form",
        "eForm",
        "eForm",
        "editableFormController",
        "scope",
        "attrs",
        "eForm",
        "angular",
        "eForm",
        "form",
        "eForm",
        "editableFormController",
        "angular",
        "form",
        "eForm",
        "$rootScope",
        "form",
        "name",
        "buf",
        "buf",
        "name",
        "angular",
        "buf",
        "name",
        "editable",
        "eForm",
        "editable",
        "buf",
        "name",
        "scope",
        "elem",
        "attrs",
        "ctrl",
        "attrs",
        "scope",
        "attrs",
        "scope",
        "attrs",
        "eForm",
        "scope",
        "attrs",
        "eForm",
        "ctrl",
        "attrs",
        "eForm",
        "angular",
        "eForm",
        "$parse",
        "attrs",
        "scope",
        "attrs",
        "eForm",
        "angular",
        "eForm",
        "$parse",
        "attrs",
        "scope",
        "attrs",
        "eForm",
        "angular",
        "eForm",
        "$parse",
        "attrs",
        "scope",
        "attrs",
        "$parse",
        "attrs",
        "scope",
        "eForm",
        "eForm",
        "attrs",
        "editableOptions",
        "attrs",
        "attrs",
        "attrs",
        "eForm",
        "$parse",
        "attrs",
        "scope",
        "eForm",
        "attrs",
        "eForm",
        "$parse",
        "attrs",
        "scope",
        "eForm",
        "elem",
        "scope",
        "eForm",
        "elem",
        "e",
        "e",
        "e",
        "eForm",
        "eForm",
        "angular",
        "$q",
        "result",
        "noPromise",
        "result",
        "noPromise",
        "angular",
        "result",
        "$q",
        "result",
        "angular",
        "result",
        "callbacks",
        "callbacks",
        "callbacks",
        "callbacks",
        "angular",
        "callbacks",
        "angular",
        "callbacks",
        "angular",
        "callbacks",
        "angular",
        "onWait",
        "$q",
        "results",
        "onWait",
        "angular",
        "results",
        "result",
        "result",
        "applyCallback",
        "error",
        "onWait",
        "onString",
        "applyCallback",
        "onTrue",
        "onFalse",
        "onString",
        "promiseCollection",
        "angular",
        "array",
        "obj",
        "array",
        "array",
        "obj",
        "i",
        "array",
        "i",
        "obj",
        "array",
        "i",
        "i",
        "array",
        "value",
        "array",
        "value",
        "index",
        "array",
        "index",
        "value",
        "SNAKE_CASE_REGEXP",
        "letter",
        "pos",
        "pos",
        "letter",
        "SPECIAL_CHARS_REGEXP",
        "_",
        "separator",
        "letter",
        "offset",
        "offset",
        "letter",
        "letter",
        "MOZ_HACK_REGEXP",
        "tag",
        "el",
        "el",
        "el",
        "angular",
        "tag",
        "newEl",
        "el",
        "el",
        "i",
        "attrs",
        "i",
        "newEl",
        "attrs",
        "i",
        "attrs",
        "i",
        "newEl",
        "angular",
        "optionsExp",
        "match",
        "optionsExp",
        "NG_OPTIONS_REGEXP",
        "match",
        "match",
        "match",
        "match",
        "match",
        "match",
        "match",
        "match",
        "valueName",
        "match",
        "match",
        "track",
        "match",
        "keyName",
        "ngRepeat",
        "valueName",
        "valuesFn",
        "track",
        "ngRepeat",
        "trackFn",
        "ngRepeat",
        "keyName",
        "valueName",
        "valuesFn",
        "ngRepeat",
        "valueName",
        "keyName",
        "valueFn",
        "displayFn",
        "parser",
        "angular",
        "element",
        "options",
        "angular",
        "element",
        "currentYear",
        "angular",
        "options",
        "Combodate",
        "Combodate",
        "angular",
        "e",
        "angular",
        "e",
        "angular",
        "e",
        "combo",
        "angular",
        "v",
        "k",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "tpl",
        "tpl",
        "r",
        "token",
        "tpl",
        "tpl",
        "angular",
        "v",
        "k",
        "v",
        "v",
        "v",
        "v",
        "v",
        "tpl",
        "tpl",
        "token",
        "k",
        "customClass",
        "tpl",
        "k",
        "k",
        "k",
        "c",
        "angular",
        "c",
        "k",
        "k",
        "k",
        "$combo",
        "k",
        "k",
        "f",
        "$combo",
        "$combo",
        "i",
        "items",
        "i",
        "$combo",
        "items",
        "i",
        "items",
        "i",
        "$combo",
        "value",
        "key",
        "relTime",
        "moment",
        "moment",
        "relTime",
        "key",
        "relTime",
        "key",
        "key",
        "relTime",
        "key",
        "header",
        "header",
        "values",
        "header",
        "values",
        "values",
        "parseInt",
        "parseInt",
        "isNaN",
        "month",
        "isNaN",
        "year",
        "daysCount",
        "moment",
        "year",
        "month",
        "i",
        "i",
        "daysCount",
        "i",
        "name",
        "twoDigit",
        "i",
        "i",
        "items",
        "i",
        "name",
        "items",
        "i",
        "i",
        "i",
        "longNames",
        "name",
        "moment",
        "i",
        "shortNames",
        "name",
        "moment",
        "i",
        "twoDigit",
        "name",
        "i",
        "name",
        "i",
        "items",
        "i",
        "name",
        "items",
        "i",
        "i",
        "i",
        "name",
        "longNames",
        "i",
        "i",
        "items",
        "i",
        "name",
        "items",
        "items",
        "items",
        "h12",
        "h12",
        "i",
        "min",
        "i",
        "max",
        "i",
        "name",
        "twoDigit",
        "i",
        "i",
        "items",
        "i",
        "name",
        "items",
        "i",
        "i",
        "i",
        "name",
        "twoDigit",
        "i",
        "i",
        "items",
        "i",
        "name",
        "items",
        "i",
        "i",
        "i",
        "name",
        "twoDigit",
        "i",
        "i",
        "items",
        "i",
        "name",
        "items",
        "ampmL",
        "ampmL",
        "items",
        "format",
        "angular",
        "v",
        "k",
        "k",
        "k",
        "values",
        "k",
        "that",
        "k",
        "parseInt",
        "that",
        "k",
        "isNaN",
        "values",
        "k",
        "notSelected",
        "notSelected",
        "values",
        "values",
        "values",
        "values",
        "values",
        "dt",
        "moment",
        "values",
        "values",
        "values",
        "values",
        "values",
        "values",
        "dt",
        "format",
        "format",
        "format",
        "format",
        "dt",
        "dt",
        "dt",
        "dt",
        "format",
        "value",
        "value",
        "value",
        "moment",
        "value",
        "moment",
        "value",
        "$select",
        "value",
        "angular",
        "$select",
        "opt",
        "i",
        "angular",
        "opt",
        "optValue",
        "optValue",
        "value",
        "delta",
        "distance",
        "delta",
        "delta",
        "optValue",
        "distance",
        "delta",
        "dt",
        "angular",
        "v",
        "k",
        "k",
        "values",
        "k",
        "dt",
        "v",
        "values",
        "values",
        "values",
        "values",
        "values",
        "values",
        "values",
        "angular",
        "values",
        "v",
        "k",
        "that",
        "k",
        "k",
        "that",
        "that",
        "v",
        "getNearest",
        "that",
        "k",
        "v",
        "k",
        "that",
        "that",
        "v",
        "getNearest",
        "that",
        "k",
        "v",
        "that",
        "k",
        "v",
        "dt",
        "dt",
        "dt",
        "v",
        "v",
        "v",
        "v",
        "element",
        "options",
        "Combodate",
        "element",
        "options",
        "angular",
        "icons",
        "angular",
        "themes"
    ],
    "literals": [
        "'xeditable'",
        "'editableOptions'",
        "'default'",
        "'default'",
        "'right'",
        "'cancel'",
        "'ignore'",
        "'focus'",
        "'click'",
        "'Submit'",
        "'Submit'",
        "'Cancel'",
        "'Cancel'",
        "'Clear'",
        "'Clear'",
        "'xeditable'",
        "'editableBsdate'",
        "'editableDirectiveFactory'",
        "'editableBsdate'",
        "'<div></div>'",
        "'<input type=\"text\" class=\"form-control\" data-ng-model=\"$parent.$data\"/>'",
        "'uib-datepicker-popup'",
        "'yyyy/MM/dd'",
        "'is-open'",
        "'date-disabled'",
        "'uib-datepicker-popup'",
        "'year-range'",
        "'show-button-bar'",
        "'current-text'",
        "'Today'",
        "'clear-text'",
        "'Clear'",
        "'close-text'",
        "'Done'",
        "'close-on-date-selection'",
        "'datepicker-append-to-body'",
        "'date-disabled'",
        "'name'",
        "'on-open-focus'",
        "'ng-readonly'",
        "'ng-change'",
        "'ng-change'",
        "'style'",
        "'style'",
        "'dd'",
        "'MMMM'",
        "'yyyy'",
        "'EEE'",
        "'MMMM yyyy'",
        "'yyyy'",
        "'true'",
        "'day'",
        "'year'",
        "'day'",
        "\"true\"",
        "\"true\"",
        "'<button type=\"button\" class=\"btn btn-default\"><i class=\"glyphicon glyphicon-calendar\"></i></button>'",
        "'<span class=\"input-group-btn\"></span>'",
        "'ng-click'",
        "'ng-click'",
        "'datepicker-options'",
        "\"dateOptions\"",
        "'class'",
        "'ng-click'",
        "'is-open'",
        "'init-date'",
        "'datepicker-popup'",
        "'required'",
        "'ng-model'",
        "'date-picker-append-to-body'",
        "'name'",
        "'class'",
        "'input-group'",
        "'xeditable'",
        "'editableBstime'",
        "'editableDirectiveFactory'",
        "'editableBstime'",
        "'<uib-timepicker></uib-timepicker>'",
        "'<div class=\"well well-small\" style=\"display:inline-block;\"></div>'",
        "'ng-model'",
        "'ng-model'",
        "'ng-model'",
        "'ng-change'",
        "'ng-change'",
        "'ng-change'",
        "'xeditable'",
        "'editableCheckbox'",
        "'editableDirectiveFactory'",
        "'editableCheckbox'",
        "'<input type=\"checkbox\">'",
        "'<label></label>'",
        "'<span>'",
        "'</span>'",
        "'change'",
        "'xeditable'",
        "'editableChecklist'",
        "'editableDirectiveFactory'",
        "'editableNgOptionsParser'",
        "'editableChecklist'",
        "'<span></span>'",
        "''",
        "''",
        "' ng-change=\"'",
        "'\"'",
        "' checklist-comparator=\"'",
        "'\"'",
        "'<label ng-repeat=\"'",
        "'\">'",
        "'<input type=\"checkbox\" checklist-model=\"$parent.$parent.$data\" checklist-value=\"'",
        "'\"'",
        "'>'",
        "'<span ng-bind=\"'",
        "'\"></span></label>'",
        "'ng-model'",
        "'ng-options'",
        "'ng-change'",
        "'checklist-comparator'",
        "'xeditable'",
        "'editableCombodate'",
        "'editableDirectiveFactory'",
        "'editableCombodate'",
        "'editableCombodate'",
        "'<input type=\"text\">'",
        "\"format\"",
        "\"template\"",
        "\"minYear\"",
        "\"maxYear\"",
        "\"yearDescending\"",
        "\"minuteStep\"",
        "\"secondStep\"",
        "\"firstItem\"",
        "\"errorClass\"",
        "\"customClass\"",
        "\"roundTime\"",
        "\"smartDays\"",
        "\"e\"",
        "'select'",
        "'change'",
        "'text|password|email|tel|number|url|search|color|date|datetime|datetime-local|time|month|week|file'",
        "'|'",
        "'editable'",
        "'-'",
        "'xeditable'",
        "'editableDirectiveFactory'",
        "'<input type=\"'",
        "'\">'",
        "'<div class=\"input-group\"></div>'",
        "'<span class=\"input-group-addon\">'",
        "'</span>'",
        "'<span class=\"input-group-addon\">'",
        "'</span>'",
        "'<label>'",
        "'</label>'",
        "'xeditable'",
        "'editableRange'",
        "'editableDirectiveFactory'",
        "'$interpolate'",
        "'editableRange'",
        "'<input type=\"range\" id=\"range\" name=\"range\">'",
        "'<output>'",
        "'$data'",
        "'</output>'",
        "'xeditable'",
        "'editableTagsInput'",
        "'editableDirectiveFactory'",
        "'editableUtils'",
        "'editableTagsInput'",
        "'<tags-input></tags-input>'",
        "'auto-complete'",
        "'ng-model'",
        "'ng-model'",
        "'$parent.$data'",
        "'editable-tags-input-auto-complete'",
        "'xeditable'",
        "'editableRadiolist'",
        "'editableDirectiveFactory'",
        "'editableNgOptionsParser'",
        "'$interpolate'",
        "'editableRadiolist'",
        "'<span></span>'",
        "''",
        "'ng-change=\"'",
        "'\"'",
        "'<label data-ng-repeat=\"'",
        "'\">'",
        "'<input type=\"radio\" data-ng-disabled=\"::'",
        "'\" data-ng-model=\"$parent.$parent.$data\" data-ng-value=\"'",
        "'::'",
        "'\"'",
        "'>'",
        "'<span data-ng-bind=\"::'",
        "'\"></span></label>'",
        "'ng-model'",
        "'ng-options'",
        "'ng-change'",
        "'change'",
        "'xeditable'",
        "'editableSelect'",
        "'editableDirectiveFactory'",
        "'editableSelect'",
        "'<select></select>'",
        "'<option value=\"\">'",
        "'</option>'",
        "'change'",
        "'xeditable'",
        "'editableTextarea'",
        "'editableDirectiveFactory'",
        "'editableTextarea'",
        "'<textarea></textarea>'",
        "'no'",
        "'keydown'",
        "'xeditable'",
        "'editableUiSelect'",
        "'editableDirectiveFactory'",
        "'editableUtils'",
        "'editableUiSelect'",
        "'<ui-select></ui-select>'",
        "'ui-select-match'",
        "'ui-select-choices'",
        "'ng-model'",
        "'ng-model'",
        "'$parent.$parent.$data'",
        "'editable-ui-select-match'",
        "'editable-ui-select-choices'",
        "'xeditable'",
        "'editableController'",
        "'$q'",
        "'editableUtils'",
        "'$scope'",
        "'$attrs'",
        "'$element'",
        "'$parse'",
        "'editableThemes'",
        "'editableIcons'",
        "'editableOptions'",
        "'$rootScope'",
        "'$compile'",
        "'$q'",
        "''",
        "'default'",
        "'default'",
        "''",
        "''",
        "'right'",
        "'You should provide value for `'",
        "'` in editable element!'",
        "'no'",
        "'$data'",
        "'no'",
        "'title'",
        "'aria-label'",
        "'title'",
        "'aria-label'",
        "'title'",
        "'aria-label'",
        "'span'",
        "'span'",
        "'span'",
        "'editable-has-buttons'",
        "'e'",
        "'Form'",
        "'NgSubmit'",
        "'-'",
        "'value'",
        "''",
        "'editable-input'",
        "'ng-model'",
        "'$parent.$data'",
        "'editable-form'",
        "'$form'",
        "'blur'",
        "'no'",
        "'cancel'",
        "'editable-hide'",
        "'editable-hide'",
        "'keyup'",
        "'no'",
        "'click'",
        "'disabled'",
        "'ng-disabled'",
        "'ng-enabled'",
        "'disabled'",
        "'disabled'",
        "'button'",
        "'disabled'",
        "'disabled'",
        "'disabled'",
        "'button'",
        "'disabled'",
        "'focus'",
        "'editableRadiolist'",
        "'editableChecklist'",
        "'editableBsdate'",
        "'editableTagsInput'",
        "'.ng-pristine'",
        "'select'",
        "\"\"",
        "'editable-empty'",
        "'xeditable'",
        "'editableDirectiveFactory'",
        "'$parse'",
        "'$compile'",
        "'editableThemes'",
        "'$rootScope'",
        "'$document'",
        "'editableController'",
        "'editableFormController'",
        "'editableOptions'",
        "'A'",
        "'?^form'",
        "\"function\"",
        "'form[name='",
        "']'",
        "'editable'",
        "'Form with editable elements should have `editable-form` attribute.'",
        "'editable-click'",
        "'xeditable'",
        "'editableFormController'",
        "'$parse'",
        "'$document'",
        "'$rootScope'",
        "'editablePromiseCollection'",
        "'editableUtils'",
        "'click'",
        "'cancel'",
        "'submit'",
        "'closeEdit'",
        "'$destroy'",
        "''",
        "''",
        "'xeditable'",
        "'editableForm'",
        "'$rootScope'",
        "'$parse'",
        "'editableFormController'",
        "'editableOptions'",
        "'A'",
        "'form'",
        "'submit'",
        "'click'",
        "'xeditable'",
        "'editablePromiseCollection'",
        "'$q'",
        "'xeditable'",
        "'editableUtils'",
        "'-'",
        "''",
        "'Moz$1'",
        "'<'",
        "'/>'",
        "'xeditable'",
        "'editableNgOptionsParser'",
        "'ng-options parse error'",
        "''",
        "' in '",
        "' track by '",
        "'('",
        "', '",
        "') in '",
        "'xeditable'",
        "'editableCombodate'",
        "'INPUT'",
        "'Combodate should be applied to INPUT element'",
        "'YYYY-MM-DD HH:mm'",
        "'D / MMM / YYYY   H : mm'",
        "'empty'",
        "''",
        "'D'",
        "'date'",
        "'M'",
        "'month'",
        "'Y'",
        "'year'",
        "'[Hh]'",
        "'hours'",
        "'m'",
        "'minutes'",
        "'s'",
        "'seconds'",
        "'[Aa]'",
        "''",
        "'<span class=\"combodate\"></span>'",
        "'select'",
        "'change'",
        "'month'",
        "'year'",
        "'day'",
        "'select'",
        "'width'",
        "'auto'",
        "'display'",
        "'none'",
        "'+'",
        "'{'",
        "'}'",
        "'&nbsp;'",
        "'{'",
        "'}'",
        "'<select class=\"'",
        "' '",
        "'\"></select>'",
        "'.'",
        "'$'",
        "'$'",
        "'fill'",
        "''",
        "'<option value=\"'",
        "'\">'",
        "'</option>'",
        "'name'",
        "'function'",
        "' '",
        "''",
        "'empty'",
        "''",
        "''",
        "'d'",
        "'DD'",
        "'M'",
        "'MMMM'",
        "'MMM'",
        "'MM'",
        "'MMMM'",
        "'MMM'",
        "'YYYY'",
        "''",
        "'push'",
        "'unshift'",
        "'y'",
        "'h'",
        "'h'",
        "'H'",
        "'hh'",
        "'m'",
        "'mm'",
        "'s'",
        "'ss'",
        "'a'",
        "'A'",
        "'am'",
        "'am'",
        "'AM'",
        "'pm'",
        "'pm'",
        "'PM'",
        "'ampm'",
        "'day'",
        "'$'",
        "'$'",
        "''",
        "'am'",
        "'am'",
        "''",
        "'string'",
        "'option'",
        "'value'",
        "''",
        "'undefined'",
        "'ampm'",
        "'pm'",
        "'am'",
        "'$'",
        "'minute'",
        "'$'",
        "'second'",
        "'$'",
        "'$'",
        "'day'",
        "'change'",
        "'select'",
        "'border-color'",
        "'select'",
        "'border-color'",
        "'red'",
        "'select'",
        "'border-color'",
        "'0'",
        "'combodate'",
        "'xeditable'",
        "'editableIcons'",
        "'bs2'",
        "'icon-ok icon-white'",
        "'icon-remove'",
        "'icon-trash'",
        "'bs3'",
        "'glyphicon glyphicon-ok'",
        "'glyphicon glyphicon-remove'",
        "'glyphicon glyphicon-trash'",
        "'font-awesome'",
        "'fa fa-check'",
        "'fa fa-times'",
        "'fa fa-trash'",
        "'xeditable'",
        "'editableThemes'",
        "'default'",
        "'<form class=\"editable-wrap\"></form>'",
        "'<span class=\"editable-wrap\"></span>'",
        "'<span class=\"editable-controls\"></span>'",
        "''",
        "'<div class=\"editable-error\" data-ng-if=\"$error\" data-ng-bind=\"$error\"></div>'",
        "'<span class=\"editable-buttons\"></span>'",
        "'<button type=\"submit\">save</button>'",
        "'<button type=\"button\" ng-click=\"$form.$cancel()\">cancel</button>'",
        "'<button type=\"reset\">clear</button>'",
        "'bs2'",
        "'<form class=\"form-inline editable-wrap\" role=\"form\"></form>'",
        "'<span class=\"editable-wrap\"></span>'",
        "'<div class=\"editable-controls controls control-group\" ng-class=\"{\\'error\\': $error}\"></div>'",
        "''",
        "'<div class=\"editable-error help-block\" data-ng-if=\"$error\" data-ng-bind=\"$error\"></div>'",
        "'<span class=\"editable-buttons\"></span>'",
        "'<button type=\"submit\" class=\"btn btn-primary\"><span></span></button>'",
        "'<button type=\"button\" class=\"btn\" ng-click=\"$form.$cancel()\">'",
        "'<span></span>'",
        "'</button>'",
        "'<button type=\"reset\" class=\"btn btn-danger\">clear</button>'",
        "'bs3'",
        "'<form class=\"form-inline editable-wrap\" role=\"form\"></form>'",
        "'<span class=\"editable-wrap\"></span>'",
        "'<div class=\"editable-controls form-group\" ng-class=\"{\\'has-error\\': $error}\"></div>'",
        "''",
        "'<div class=\"editable-error help-block\" data-ng-if=\"$error\" data-ng-bind=\"$error\"></div>'",
        "'<span class=\"editable-buttons\"></span>'",
        "'<button type=\"submit\" class=\"btn btn-primary\"><span></span></button>'",
        "'<button type=\"button\" class=\"btn btn-default\" ng-click=\"$form.$cancel()\">'",
        "'<span></span>'",
        "'</button>'",
        "'<button type=\"reset\" class=\"btn btn-danger\">clear</button>'",
        "''",
        "''",
        "'editableText'",
        "'editableSelect'",
        "'editableTextarea'",
        "'editableEmail'",
        "'editableTel'",
        "'editableNumber'",
        "'editableUrl'",
        "'editableSearch'",
        "'editableDate'",
        "'editableDatetime'",
        "'editableBsdate'",
        "'editableTime'",
        "'editableMonth'",
        "'editableWeek'",
        "'editablePassword'",
        "'editableDatetimeLocal'",
        "'form-control'",
        "'multiple'",
        "'input-sm'",
        "'input-lg'",
        "'editableCheckbox'",
        "'checkbox'",
        "'button'",
        "'semantic'",
        "'<form class=\"editable-wrap ui form\" ng-class=\"{\\'error\\': $error}\" role=\"form\"></form>'",
        "'<span class=\"editable-wrap\"></span>'",
        "'<div class=\"editable-controls ui fluid input\" ng-class=\"{\\'error\\': $error}\"></div>'",
        "''",
        "'<div class=\"editable-error ui error message\" data-ng-if=\"$error\" data-ng-bind=\"$error\"></div>'",
        "'<span class=\"mini ui buttons\"></span>'",
        "'<button type=\"submit\" class=\"ui primary button\"><i class=\"ui check icon\"></i></button>'",
        "'<button type=\"button\" class=\"ui button\" ng-click=\"$form.$cancel()\">'",
        "'<i class=\"ui cancel icon\"></i>'",
        "'</button>'",
        "'<button type=\"reset\" class=\"ui button\">clear</button>'"
    ],
    "variables": [
        "inputDatePicker",
        "showCalendarButton",
        "buttonDatePicker",
        "buttonWrapper",
        "div",
        "parsed",
        "ngChangeHtml",
        "ngChecklistComparatorHtml",
        "html",
        "options",
        "attrName",
        "combodate",
        "camelCase",
        "types",
        "directiveName",
        "inputGroupLeft",
        "inputGroupRight",
        "label",
        "dir",
        "linkOrg",
        "autoCompleteEl",
        "parsed",
        "ngChangeHtml",
        "html",
        "placeholder",
        "dir",
        "linkOrg",
        "matchEl",
        "choicesEl",
        "valueGetter",
        "inWaiting",
        "theme",
        "transferAttr",
        "nextLetter",
        "firstLetter",
        "secondLetter",
        "attrValue",
        "newScope",
        "el",
        "that",
        "val",
        "isEmpty",
        "eCtrl",
        "eFormCtrl",
        "hasForm",
        "getter",
        "i",
        "is_disabled",
        "shown",
        "isSelfOrDescendant",
        "node",
        "isBlur",
        "isBlur",
        "editables",
        "element",
        "toCancel",
        "toSubmit",
        "i",
        "i",
        "i",
        "pc",
        "i",
        "pc",
        "pc",
        "pc",
        "form",
        "eForm",
        "buf",
        "name",
        "eForm",
        "onTrue",
        "onFalse",
        "onString",
        "onWait",
        "i",
        "index",
        "SNAKE_CASE_REGEXP",
        "SPECIAL_CHARS_REGEXP",
        "MOZ_HACK_REGEXP",
        "newEl",
        "attrs",
        "i",
        "NG_OPTIONS_REGEXP",
        "match",
        "displayFn",
        "valueName",
        "keyName",
        "groupByFn",
        "valueFn",
        "valuesFn",
        "track",
        "trackFn",
        "ngRepeat",
        "currentYear",
        "combo",
        "tpl",
        "customClass",
        "r",
        "token",
        "token",
        "c",
        "$combo",
        "f",
        "items",
        "value",
        "i",
        "values",
        "relTime",
        "header",
        "items",
        "name",
        "i",
        "twoDigit",
        "daysCount",
        "month",
        "year",
        "items",
        "name",
        "i",
        "longNames",
        "shortNames",
        "twoDigit",
        "items",
        "name",
        "i",
        "longNames",
        "items",
        "name",
        "i",
        "h12",
        "h24",
        "twoDigit",
        "min",
        "max",
        "items",
        "name",
        "i",
        "twoDigit",
        "items",
        "name",
        "i",
        "twoDigit",
        "ampmL",
        "ampmU",
        "items",
        "dt",
        "values",
        "that",
        "notSelected",
        "dt",
        "that",
        "values",
        "delta",
        "optValue",
        "distance",
        "icons",
        "themes"
    ],
    "comments": [
        "!\nangular-xeditable - 0.5.0\nEdit-in-place for angular.js\nBuild date: 2016-10-27",
        "todo: maybe better have editableDefaults, not options...",
        "Angular-ui bootstrap datepicker\n http://angular-ui.github.io/bootstrap/#/datepicker",
        "This basically renders a datepicker as in the example shown in\n                 **  http://angular-ui.github.io/bootstrap/#/datepicker\n                 **  The attributes are all the same as in the bootstrap-ui datepicker with e- as prefix\n                 *",
        "See if calendar button should be displayed",
        "If no calendar button, display calendar popup on click of input field",
        "Angular-ui bootstrap editable timepicker\nhttp://angular-ui.github.io/bootstrap/#/timepicker",
        "timepicker can't update model when ng-model set directly to it",
        "see: https://github.com/angular-ui/bootstrap/issues/1141",
        "so we wrap it into DIV",
        "move ng-model to wrapping div",
        "move ng-change to wrapping div",
        "wrap",
        "checkbox",
        "checklist",
        "Input types: text|password|email|tel|number|url|search|color|date|datetime|datetime-local|time|month|week|file",
        "todo: datalist",
        "generate directives",
        "Add bootstrap simple input groups",
        "Add label to the input",
        "Add classes to the form",
        "`range` is bit specific",
        "Tags input directive for AngularJS\n https://github.com/mbenford/ngTagsInput",
        "radiolist",
        "select",
        "textarea",
        "submit textarea by ctrl+enter even with buttons",
        "AngularJS-native version of Select2 and Selectize\n https://github.com/angular-ui/ui-select",
        "TODO: this file should be refactored to work more clear without closures!",
        "EditableController function",
        "if control is disabled - it does not participate in waiting process",
        "will be undefined if icon_set is default and theme is default",
        "to be overwritten by directive",
        "with majority of controls copy is not needed, but..",
        "copy MUST NOT be used for `select-multiple` with objects as items",
        "copy MUST be used for `checklist`",
        "runtime (defaults)",
        "no real `blur` property as it is transferred to editable form",
        "init",
        "if(!$attrs[directiveName] && !$attrs.eNgModel && ($attrs.eValue === undefined)) {\n        throw 'You should provide value for `'+directiveName+'` or `e-value` in editable element!';\n      }",
        "settings for single and non-single",
        "hide buttons for non-single",
        "if name defined --> watch changes and update $data in form",
        "watch change of model to update editable element",
        "now only add/remove `editable-empty` class.",
        "Initially this method called with newVal = undefined, oldVal = undefined",
        "so no need initially call handleEmpty() explicitly",
        "build input",
        "build controls",
        "build buttons",
        "build error",
        "build editor",
        "transfer `e-*|data-e-*|x-e-*` attributes",
        "if starts with `e` + uppercase letter",
        "cut `e`",
        "exclude `form` and `ng-submit`,",
        "convert back to lowercase style",
        "workaround for attributes without value (e.g. `multiple = \"multiple\"`)",
        "except for 'e-value'",
        "set attributes to input",
        "add directiveName class to editor, e.g. `editable-text`",
        "transfer `blur` to form",
        "apply `postrender` method of theme",
        "with majority of controls copy is not needed, but..",
        "copy MUST NOT be used for `select-multiple` with objects as items",
        "copy MUST be used for `checklist`",
        "reference of the scope to use for $compile",
        "show",
        "set value of scope.$data",
        "Originally render() was inside init() method, but some directives polluting editorEl,\n      so it is broken on second openning.\n      Cloning is not a solution as jqLite can not clone with event handler's.",
        "insert into DOM",
        "compile (needed to attach ng-* events from markup)",
        "attach listeners (`escape`, autosubmit, etc)",
        "hide element",
        "onshow",
        "hide",
        "destroy the scope to prevent memory leak",
        "onhide",
        "cancel",
        "oncancel",
        "don't call hide() here as it called in form's code",
        "Called after show to attach listeners",
        "bind keyup for `escape`",
        "todo: move this to editable-form!",
        "hide on `escape` press",
        "autosubmit when `no buttons`",
        "click - mark element as clicked to exclude in document click handler",
        "ignore right/middle button click",
        "setWaiting",
        "participate in waiting only if not disabled",
        "Set focus to first pristine element in the list",
        "Checks that result is string or promise returned string and shows it as error message\n    Applied to onshow, onbeforesave, onaftersave",
        "success and fail handlers are equal",
        "check $http error",
        "set result to string: to let form know that there was error",
        "no need to call handleEmpty here as we are watching change of model value",
        "self.handleEmpty();",
        "attach/detach `editable-empty` class to element",
        "Called when `buttons = \"no\"` to submit automatically",
        "editableFactory is used to generate editable directives (see `/directives` folder)\nInside it does several things:\n- detect form for editable element. Form may be one of three types:\n  1. autogenerated form (for single editable elements)\n  2. wrapper form (element wrapped by <form> tag)\n  3. linked form (element has `e-form` attribute pointing to existing form)\n\n- attach editableController to element\n\nDepends on: editableController, editableFormFactory",
        "directive object",
        "editable controller",
        "form controller",
        "this variable indicates is element is bound to some existing form,",
        "or it's single element who's form will be generated automatically",
        "By default consider single element without any linked form.ß",
        "element wrapped by form",
        "element not wrapped by <form>, but we have `e-form` attr",
        "form exists in scope (above), e.g. editable column",
        "form exists below or not exist at all: check document.forms",
        "form is below and not processed yet",
        "form exists below or not exist at all: check document.forms",
        "form is below and not processed yet",
        "if(hasForm && !attrs.eName) {\n          throw 'You should provide `e-name` for editable element inside form!';\n        }",
        "check for `editable-form` attr in form",
        "if(eFormCtrl && ) {\n          throw 'You should provide `e-name` for editable element inside form!';\n        }",
        "store original props to `parent` before merge",
        "merge overwrites to base editable controller",
        "x-editable can be disabled using editableOption or edit-disabled attribute",
        "init editable ctrl",
        "publich editable controller as `$editable` to be referenced in html",
        "add `editable` class to element",
        "hasForm",
        "future form (below): add editable controller to buffer and add to form later",
        "will be re-assigned later",
        "!hasForm",
        "create editableform controller",
        "add self to editable controller",
        "if `e-form` provided, publish local $form in scope",
        "bind click - if no external form defined",
        "Returns editableForm controller",
        "array of opened editable forms",
        "Check if the child element correspond or is a descendant of the parent element",
        "Check if it is a real blur : if the click event appear on a shown editable elem, this is not a blur.",
        "bind click to body: cancel|submit|ignore forms",
        "ignore right/middle button click",
        "exclude clicked",
        "exclude waiting",
        "console.log('add editable', editable.elem, editable.elem.bind);",
        "'on' is not supported in angular 1.0.8",
        "bind editable's local $form to self (if not bound yet, below form)",
        "if form already shown - call show() of new editable",
        "arrayRemove",
        "own show",
        "clear errors",
        "children show",
        "wait promises and activate",
        "add to internal list of shown forms",
        "setTimeout needed to prevent closing right after opening (e.g. when trigger by button)",
        "clear `clicked` to get ready for clicks on visible form",
        "activate by name",
        "try activate error field",
        "by default activate first field",
        "self hide",
        "children's hide",
        "remove from internal list of shown forms",
        "self cancel",
        "children's cancel",
        "self hide",
        "we can't just set $waiting variable and use it via ng-disabled in children",
        "because in editable-row form is not accessible",
        "clear errors",
        "children onbeforesave",
        "onbeforesave result:\n      - true/undefined: save data and close form\n      - false: close form without saving\n      - string: keep form open and show error",
        "save",
        "write model for each editable",
        "call onaftersave of self and children",
        "onaftersave result:\n      - true/undefined/false: just close form\n      - string: keep form open and show error",
        "require: ['form', 'editableForm'],",
        "controller: EditableFormController,",
        "if `editableForm` has value - publish smartly under this value",
        "this is required only for single editor form that is created and removed",
        "just merge to form and publish if form has name",
        "read editables from buffer (that appeared before FORM tag)",
        "onbeforesave, onaftersave",
        "click - mark form as clicked to exclude in document click handler",
        "ignore right/middle button click",
        "result === true || result === undefined || result === null",
        "callbacks: onTrue, onFalse, onString",
        "all resolved",
        "check all results via same `when` method (without checking promises)",
        "some rejected",
        "copy from https://github.com/angular/angular.js/blob/master/src/Angular.js",
        "0000111110000000000022220000000000000000000000333300000000000000444444444444444000000000555555555555555000000066666666666666600000000000000007777000000000000000000088888",
        "array",
        "object",
        "group not supported yet",
        "in this format value stored in original input",
        "in this format items in dropdowns are displayed",
        "initial value, can be `new Date()`",
        "'name', 'empty', 'none'",
        "whether to round minutes and seconds if step > 1",
        "whether days in combo depend on selected month: 31, 30, 28",
        "key   regexp    moment.method",
        "update days count if month or year changes",
        "hide original input and insert widget",
        "set initial value",
        "Replace tokens in template with <select> elements",
        "first pass",
        "replace spaces with &nbsp;",
        "second pass",
        "Initialize combos that presents in template",
        "set properties like this.$day, this.$month etc.",
        "fill with items",
        "Fill combo with items",
        "define method name to fill items, e.g `fillDays`",
        "Initialize items of combos. Handles `firstItem` option",
        "need both to support moment ver < 2 and  >= 2",
        "take last entry (see momentjs lang files structure)",
        "fill day",
        "detect days count (depends on month and year)",
        "originally https://github.com/vitalets/combodate/pull/7",
        "fill month",
        "see https://github.com/timrwood/momentjs.com/pull/36",
        "fill year",
        "fill hour",
        "fill minute",
        "fill second",
        "fill ampm",
        "Returns current date value from combos. \n     If format not specified - `options.format` used.\n     If format = `null` - Moment object returned.",
        "getting selected values",
        "if at least one visible combo not selected - return empty string",
        "convert hours 12h --> 24h",
        "12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)",
        "highlight invalid date",
        "parse in strict mode (third param `true`)",
        "function to find nearest value in select options",
        "read values from date object",
        "12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)",
        "call val() for each existing combo, e.g. this.$hour.val()",
        "update days count",
        "highlight combos if date is invalid",
        "store original border color",
        "Editable icons:\n- default\n- font-awesome",
        "Icon-set to use, defaults to bootstrap icons",
        "jshint -W086",
        "Editable themes:\n- default\n- bootstrap 2\n- bootstrap 3\n- semantic-ui\n\nNote: in postrender() `this` is instance of editableController",
        "default",
        "bs2",
        "bs3",
        "bs3 specific prop to change buttons class: btn-sm, btn-lg",
        "bs3 specific prop to change standard inputs class: input-sm, input-lg",
        "apply `form-control` class to std inputs",
        "don`t apply `input-sm` and `input-lg` to select multiple",
        "should be fixed in bs itself!",
        "apply buttonsClass (bs3 specific!)",
        "semantic-ui"
    ],
    "docstrings": [
        "* Angular-xeditable module \n *",
        "* Default options. \n *\n * @namespace editable-options",
        "* Theme. Possible values `bs3`, `bs2`, `default`.  \n   * Default is `default`\n   * \n   * @var {string} theme\n   * @memberOf editable-options",
        "* Icon Set. Possible values `font-awesome`, `default`.  \n   * Default is `default`\n   * \n   * @var {string} icon set\n   * @memberOf editable-options",
        "* Whether to show buttons for single editable element.  \n   * Possible values `right`, `no`.  \n   * Default is `right`\n   * \n   * @var {string} buttons\n   * @memberOf editable-options",
        "* Default value for `blur` attribute of single editable element.  \n   * Can be `cancel|submit|ignore`.  \n   * Default is `cancel`\n   * \n   * @var {string} blurElem\n   * @memberOf editable-options",
        "* Default value for `blur` attribute of editable form.  \n   * Can be `cancel|submit|ignore`.  \n   * Default is `ignore`.\n   * \n   * @var {string} blurForm\n   * @memberOf editable-options",
        "* How input elements get activated. Possible values: `focus|select|none`.  \n   * Default is `focus`\n   *\n   * @var {string} activate\n   * @memberOf editable-options",
        "* Whether to disable x-editable. Can be overloaded on each element.  \n   * Default is `false`\n   *\n   * @var {boolean} isDisabled\n   * @memberOf editable-options",
        "* Event, on which the edit mode gets activated. \n   * Can be any event.  \n   * Default is `click`\n   *\n   * @var {string} activationEvent\n   * @memberOf editable-options",
        "* The default title of the submit button.  \n   * Default is `Submit`\n   *\n   * @var {string} submitButtonTitle\n   * @memberOf editable-options",
        "* The default aria label of the submit button.  \n   * Default is `Submit`\n   *\n   * @var {string} submitButtonAriaLabel\n   * @memberOf editable-options",
        "* The default title of the cancel button.  \n   * Default is `Cancel`\n   *\n   * @var {string} cancelButtonTitle\n   * @memberOf editable-options",
        "* The default aria label of the cancel button.  \n   * Default is `Cancel`\n   *\n   * @var {string} cancelButtonAriaLabel\n   * @memberOf editable-options",
        "* The default title of the clear button.  \n   * Default is `Clear`\n   *\n   * @var {string} clearButtonTitle\n   * @memberOf editable-options",
        "* The default aria label of the clear button.  \n   * Default is `Clear`\n   *\n   * @var {string} clearButtonAriaLabel\n   * @memberOf editable-options",
        "* Whether to display the clear button.  \n   * Default is `false`\n   *\n   * @var {boolean} displayClearButton\n   * @memberOf editable-options",
        "* EditableController class. \n * Attached to element with `editable-xxx` directive.\n *\n * @namespace editable-element",
        "* Attributes defined with `e-*` prefix automatically transferred from original element to\n     * control.  \n     * For example, if you set `<span editable-text=\"user.name\" e-style=\"width: 100px\"`>\n     * then input will appear as `<input style=\"width: 100px\">`.  \n     * See [demo](#text-customize).\n     * \n     * @var {any|attribute} e-*\n     * @memberOf editable-element",
        "* Whether to show ok/cancel buttons. Values: `right|no`.\n     * If set to `no` control automatically submitted when value changed.  \n     * If control is part of form buttons will never be shown. \n     * \n     * @var {string|attribute} buttons\n     * @memberOf editable-element",
        "* Action when control losses focus. Values: `cancel|submit|ignore`.\n     * Has sense only for single editable element.\n     * Otherwise, if control is part of form - you should set `blur` of form, not of individual element.\n     * \n     * @var {string|attribute} blur\n     * @memberOf editable-element",
        "* Called when control is shown.  \n       * See [demo](#select-remote).\n       * \n       * @var {method|attribute} onshow\n       * @memberOf editable-element",
        "* Called when control is hidden after both save or cancel.  \n       * \n       * @var {method|attribute} onhide\n       * @memberOf editable-element",
        "* Called when control is cancelled.  \n       * \n       * @var {method|attribute} oncancel\n       * @memberOf editable-element",
        "* Called during submit before value is saved to model.  \n       * See [demo](#onbeforesave).\n       * \n       * @var {method|attribute} onbeforesave\n       * @memberOf editable-element",
        "* Called during submit after value is saved to model.  \n       * See [demo](#onaftersave).\n       * \n       * @var {method|attribute} onaftersave\n       * @memberOf editable-element",
        "* Shows form with editable controls.\n     * \n     * @method $show()\n     * @memberOf editable-form",
        "* Sets focus on form field specified by `name`.<br/>\n     * When trying to set the focus on a form field of a new row in the editable table, the `$activate` call needs to be wrapped in a `$timeout` call so that the form is rendered before the `$activate` function is called.\n     * \n     * @method $activate(name)\n     * @param {string} name name of field\n     * @memberOf editable-form",
        "* Hides form with editable controls without saving.\n     * \n     * @method $hide()\n     * @memberOf editable-form",
        "* Triggers `oncancel` event and calls `$hide()`.\n     * \n     * @method $cancel()\n     * @memberOf editable-form",
        "* Shows error message for particular field.\n     * \n     * @method $setError(name, msg)\n     * @param {string} name name of field\n     * @param {string} msg error message\n     * @memberOf editable-form",
        "* Form visibility flag.\n       * \n       * @var {bool} $visible\n       * @memberOf editable-form",
        "* Form waiting flag. It becomes `true` when form is loading or saving data.\n       * \n       * @var {bool} $waiting\n       * @memberOf editable-form",
        "* EditableForm directive. Should be defined in <form> containing editable controls.  \n * It add some usefull methods to form variable exposed to scope by `name=\"myform\"` attribute.\n *\n * @namespace editable-form",
        "* Called when form is shown.\n             * \n             * @var {method|attribute} onshow \n             * @memberOf editable-form",
        "* Called when form hides after both save or cancel.\n             * \n             * @var {method|attribute} onhide \n             * @memberOf editable-form",
        "* Called when form is cancelled.\n             * \n             * @var {method|attribute} oncancel\n             * @memberOf editable-form",
        "* Whether form initially rendered in shown state.\n             *\n             * @var {bool|attribute} shown\n             * @memberOf editable-form",
        "* Action when form losses focus. Values: `cancel|submit|ignore`.\n             * Default is `ignore`.\n             * \n             * @var {string|attribute} blur\n             * @memberOf editable-form",
        "* Called after all children `onbeforesave` callbacks but before saving form values\n               * to model.  \n               * If at least one children callback returns `non-string` - it will not not be called.  \n               * See [editable-form demo](#editable-form) for details.\n               * \n               * @var {method|attribute} onbeforesave\n               * @memberOf editable-form\n               *",
        "* Called when form values are saved to model.  \n               * See [editable-form demo](#editable-form) for details.\n               * \n               * @var {method|attribute} onaftersave \n               * @memberOf editable-form\n               *",
        "* editablePromiseCollection\n *  \n * Collect results of function calls. Shows waiting if there are promises. \n * Finally, applies callbacks if:\n * - onTrue(): all results are true and all promises resolved to true\n * - onFalse(): at least one result is false or promise resolved to false\n * - onString(): at least one result is string or promise rejected or promise resolved to string",
        "* editableUtils",
        "* editableNgOptionsParser\n *\n * see: https://github.com/angular/angular.js/blob/master/src/ng/directive/select.js#L131",
        "* editableCombodate\n *\n * angular version of https://github.com/vitalets/combodate"
    ],
    "functions": [
        "EditableController",
        "checkSelf",
        "promiseCollection",
        "applyCallback",
        "parser",
        "Combodate",
        "getNearest"
    ],
    "classes": []
}