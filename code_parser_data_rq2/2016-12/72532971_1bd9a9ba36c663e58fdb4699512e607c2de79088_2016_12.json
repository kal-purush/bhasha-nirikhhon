{
    "identifiers": [
        "obj",
        "obj",
        "graph",
        "source",
        "key",
        "graph",
        "bfsInfo",
        "key",
        "bfsInfo",
        "source",
        "queue",
        "source",
        "queue",
        "queue",
        "link",
        "graph",
        "u",
        "graph",
        "u",
        "link",
        "bfsInfo",
        "temp",
        "bfsInfo",
        "temp",
        "bfsInfo",
        "u",
        "bfsInfo",
        "temp",
        "u",
        "queue",
        "temp",
        "bfsInfo",
        "nodesAdjList",
        "source",
        "source",
        "source",
        "nodesAdjList",
        "doBFS",
        "nodesAdjList",
        "source",
        "node",
        "bfsInfo",
        "bfsInfo",
        "node",
        "maxDistance",
        "maxDistance",
        "node",
        "maxDistance",
        "bfsInfo",
        "node",
        "diameter",
        "maxDistance",
        "doBFS",
        "nodesAdjList",
        "maxDistance",
        "node",
        "bfsInfo2",
        "bfsInfo2",
        "node",
        "maxDistance2",
        "maxDistance2",
        "node",
        "maxDistance2",
        "bfsInfo2",
        "node",
        "diameter",
        "maxDistance2",
        "diameter",
        "getGraphDiameter"
    ],
    "literals": [
        "''",
        "''",
        "''",
        "''"
    ],
    "variables": [
        "bfsInfo",
        "queue",
        "u",
        "temp",
        "bfsInfo",
        "diameter",
        "maxDistance",
        "bfsInfo2",
        "maxDistance2"
    ],
    "comments": [
        "A Queue object for queue-like functionality over JavaScript arrays.",
        "console.log(JSON.stringify(bfsInfo,null,2));",
        "var adjList = [",
        "[1],",
        "[0, 4, 5],",
        "[3, 4, 5],",
        "[2, 6],",
        "[1, 2],",
        "[1, 2, 6],",
        "[3, 5],",
        "[]",
        "];",
        "var bfsInfo = doBFS(adjList, 3);",
        "for (var i = 0; i < adjList.length; i++) {",
        "println(\"vertex \" + i + \": distance = \" + bfsInfo[i].distance + \", predecessor = \" + bfsInfo[i].predecessor);",
        "}"
    ],
    "docstrings": [
        "* Performs a breadth-first search on a graph\n * @param {array} graph - Graph, represented as adjacency lists.\n * @param {number} source - The index of the source vertex.\n * @returns {array} Array of objects describing each vertex, like\n *     [{distance: _, predecessor: _ }]"
    ],
    "functions": [
        "doBFS",
        "getGraphDiameter"
    ],
    "classes": []
}