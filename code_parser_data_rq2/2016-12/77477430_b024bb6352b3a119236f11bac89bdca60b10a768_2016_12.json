{
    "identifiers": [
        "require",
        "require",
        "require",
        "Botkit",
        "controller",
        "controller",
        "bot",
        "message",
        "bot",
        "message",
        "err",
        "convo",
        "convo",
        "bot",
        "response",
        "convo",
        "convo",
        "convo",
        "response",
        "convo",
        "convo",
        "convo",
        "bot",
        "response",
        "convo",
        "convo",
        "convo",
        "response",
        "convo",
        "convo",
        "convo",
        "response",
        "convo",
        "convo",
        "response",
        "convo",
        "submitFeedback",
        "response",
        "response",
        "convo",
        "convo",
        "bot",
        "message",
        "controller",
        "bot",
        "message",
        "bot",
        "message",
        "err",
        "convo",
        "convo",
        "response",
        "convo",
        "convo",
        "response",
        "convo",
        "bot",
        "controller",
        "bot",
        "message",
        "os",
        "formatUptime",
        "process",
        "bot",
        "message",
        "bot",
        "uptime",
        "hostname",
        "controller",
        "bot",
        "message",
        "bot",
        "message",
        "err",
        "convo",
        "convo",
        "bot",
        "response",
        "convo",
        "convo",
        "convo",
        "setTimeout",
        "process",
        "bot",
        "response",
        "convo",
        "convo",
        "convo",
        "score",
        "messageuser",
        "messagetext",
        "pg",
        "config",
        "pool",
        "err",
        "client",
        "done",
        "err",
        "err",
        "client",
        "messageuser",
        "score",
        "messagetext",
        "err",
        "result",
        "done",
        "err",
        "err",
        "pool",
        "err",
        "client",
        "err",
        "err",
        "uptime",
        "uptime",
        "uptime",
        "uptime",
        "unit",
        "uptime",
        "uptime",
        "uptime",
        "unit",
        "uptime",
        "unit",
        "unit",
        "uptime",
        "uptime",
        "unit",
        "uptime"
    ],
    "literals": [
        "'botkit'",
        "'os'",
        "'pg'",
        "'postgres'",
        "'AptitivePG'",
        "'aptitive'",
        "'192.168.2.169'",
        "'xoxb-75882476483-6Pm84qnzplVWFmvhdRvKPZ2W'",
        "'hello'",
        "'hi'",
        "'start'",
        "'wakeup'",
        "'direct_message, direct_mention, mention'",
        "'Are you ready to give some feedback?'",
        "'Perhaps later.'",
        "'Great! Let\\'s do this. You can tell me you are \\'Done\\' at anytime.'",
        "'Choose one of the following feedback types: >, <, ++, +, -, --'",
        "'done'",
        "'Done'",
        "'>'",
        "'>'",
        "'Noted'",
        "'yo'",
        "'direct_mention'",
        "'mention'",
        "'direct_message'",
        "'What\\'s up dog? You ready to give some feedback?'",
        "'Cool, you said: '",
        "'Party people - someone is using your bot in another channel...'",
        "'G272A357T'",
        "'uptime'",
        "'identify yourself'",
        "'who are you'",
        "'what is your name'",
        "'direct_message,direct_mention,mention'",
        "':robot_face: I am a bot named <@'",
        "'>. I have been running for '",
        "' on '",
        "'.'",
        "'shutdown'",
        "'direct_message,direct_mention,mention'",
        "'Are you sure you want me to shutdown?'",
        "'Ok... See you later I guess.'",
        "'*Phew!*'",
        "'error fetching client from pool'",
        "'INSERT INTO slack.feedbacklog (providername, score, recorddate, feedbacktext) VALUES(\\''",
        "'\\', \\''",
        "'\\', CURRENT_TIMESTAMP,\\''",
        "'\\');'",
        "'error running query'",
        "'error'",
        "'idle client error'",
        "'second'",
        "'minute'",
        "'hour'",
        "'s'",
        "' '"
    ],
    "variables": [
        "Botkit",
        "os",
        "pg",
        "config",
        "controller",
        "hostname",
        "uptime",
        "pool",
        "unit"
    ],
    "comments": [
        "create a config to configure both pooling behavior",
        "and client options",
        "note: all config is optional and the environment variables",
        "will be read if the config is not present",
        "env var: PGUSER",
        "env var: PGDATABASE",
        "env var: PGPASSWORD",
        "Server hosting the postgres database",
        "env var: PGPORT",
        "max number of clients in the pool",
        "how long a client is allowed to remain idle before being closed",
        "include \"log: false\" to disable logging",
        "or a \"logLevel\" integer from 0 to 7 to adjust logging verbosity",
        "connect the bot to a stream of messages",
        "just repeat the question",
        "just repeat the question",
        "bot.api.reactions.add({",
        "timestamp: message.ts,",
        "channel: message.channel,",
        "name: 'robot_face',",
        "}, function (err, res) {",
        "if (err) {",
        "bot.botkit.log('Failed to add emoji reaction :(', err);",
        "}",
        "});",
        "start a conversation to handle this response.",
        "a valid slack channel, group, mpim, or im ID",
        "this initializes a connection pool",
        "it will keep idle connections open for 5 minutes",
        "and set a limit of maximum 10 idle clients",
        "to run a query we can acquire a client from the pool,",
        "run a query on the client, and then return the client to the pool",
        "call `done()` to release the client back to the pool",
        "if an error is encountered by a client while it sits idle in the pool",
        "the pool itself will emit an error event with both the error and",
        "the client which emitted the original error",
        "this is a rare occurrence but can happen if there is a network partition",
        "between your application and the database, the database restarts, etc.",
        "and so you might want to handle it and at least log it out"
    ],
    "docstrings": [],
    "functions": [
        "submitFeedback",
        "formatUptime"
    ],
    "classes": []
}