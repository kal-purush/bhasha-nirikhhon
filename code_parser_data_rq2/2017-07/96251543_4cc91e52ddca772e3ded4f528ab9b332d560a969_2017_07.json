{
    "identifiers": [
        "addParamToUrl",
        "parseQueryString",
        "closest",
        "openWindowDialog",
        "dev",
        "urls",
        "urls",
        "win",
        "win",
        "handleClick",
        "win",
        "warmupDynamic",
        "e",
        "opt_viewerNavigate",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "getLinkInfo",
        "e",
        "link",
        "link",
        "e",
        "encodeURIComponent",
        "addParamToUrl",
        "link",
        "link",
        "link",
        "destination",
        "fragment",
        "destination",
        "fragment",
        "link",
        "win",
        "ancestors",
        "ancestors",
        "ancestors",
        "destination",
        "destination",
        "urls",
        "e",
        "opt_viewerNavigate",
        "opt_viewerNavigate",
        "destination",
        "navigateTo",
        "win",
        "link",
        "destination",
        "e",
        "closest",
        "dev",
        "e",
        "element",
        "element",
        "element",
        "a",
        "getEventualUrl",
        "a",
        "a",
        "a",
        "parseQueryString",
        "a",
        "urlParamName",
        "eventualUrl",
        "eventualUrl",
        "urls",
        "eventualUrl",
        "win",
        "a",
        "url",
        "a",
        "getA2AAncestor",
        "win",
        "a2aAncestor",
        "a2aAncestor",
        "a2aAncestor",
        "openWindowDialog",
        "win",
        "url",
        "target",
        "win",
        "win",
        "urls",
        "linkRel",
        "linkRel",
        "linkRel",
        "urls",
        "getHeadOrFallback",
        "win",
        "linkRel",
        "e",
        "getLinkInfo",
        "e",
        "link",
        "link",
        "linkRel",
        "linkRel",
        "linkRel",
        "link",
        "getHeadOrFallback",
        "e",
        "linkRel",
        "doc",
        "doc",
        "doc",
        "win",
        "win",
        "win",
        "origins",
        "origins",
        "origins",
        "top",
        "origins",
        "origins",
        "ampOrigins",
        "amp",
        "ampOrigins",
        "amp",
        "getNthParentWindow",
        "win",
        "origins",
        "amp",
        "win",
        "distance",
        "i",
        "distance",
        "i",
        "parent",
        "parent",
        "parent"
    ],
    "literals": [
        "'../../src/url'",
        "'../../src/dom'",
        "'../../src/log'",
        "'../../src/config'",
        "'http://localhost:8000'",
        "'click'",
        "'touchstart'",
        "'click='",
        "'amp'",
        "'1'",
        "'#'",
        "'#'",
        "'&'",
        "'http://localhost:8000'",
        "${urls.cdn}/c/",
        "'http://localhost:8000/max/'",
        "'A'",
        "'data-url-param-name'",
        "'adurl'",
        "${urls.cdn}/c/",
        "'_top'",
        "'a2a;'",
        "${urls.cdn}/preconnect.gif",
        "'link'",
        "'preload'",
        "'as'",
        "'script'",
        "${urls.cdn}/rtv/01$internalRuntimeVersion$/v0.js",
        "'link'",
        "'preload'",
        "'as'",
        "'document'",
        "'.google.'"
    ],
    "variables": [
        "ampOrigins",
        "link",
        "fragment",
        "destination",
        "win",
        "ancestors",
        "a",
        "urlParamName",
        "eventualUrl",
        "target",
        "a2aAncestor",
        "linkRel",
        "link",
        "linkRel",
        "origins",
        "top",
        "amp",
        "parent",
        "win",
        "i"
    ],
    "comments": [
        "Start loading destination doc when finger is down.",
        "Needs experiment whether this is a good idea.",
        "Only handle simple clicks with the left mouse button/touch and without",
        "modifier keys.",
        "Tag the original href with &amp=1 and make it a fragment param with",
        "name click.",
        "opt_addToFront",
        "TODO: viewer navigate only support navigating top level window to",
        "destination. should we try to open a new window here with target=_blank",
        "here instead of using viewer navigation.",
        "OK",
        "Preconnect using an image, because that works on all browsers.",
        "The image has a 1 minute cache time to avoid duplicate",
        "preconnects.",
        "Preload the primary AMP JS that is render blocking.",
        "OK",
        "OK",
        "We expect top, amp cache, ad (can be nested).",
        "Not a security property. We just check whether the",
        "viewer might support A2A. More domains can be added to whitelist",
        "as needed."
    ],
    "docstrings": [
        "* Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Origins that are trusted to serve valid AMP documents.\n * @const {Object}",
        "* Install a click listener that transforms navigation to the AMP cache\n * to a form that directly navigates to the doc and transmits the original\n * URL as a click logging info passed via a fragment param.\n * Expects to find a URL starting with \"https://cdn.ampproject.org/c/\"\n * to be available via a param call \"adurl\" (or defined by the\n * `data-url-param-name` attribute on the a tag.\n * @param {!Window} win",
        "* Filter click event and then transform URL for direct AMP navigation\n * with impression logging.\n * @param {!Event} e\n * @param {function(string)=} opt_viewerNavigate\n * @visibleForTesting",
        "* For an event, see if there is an anchor tag in the target\n * ancestor chain and if yes, check whether we can figure\n * out an AMP target URL.\n * @param {!Event} e\n * @return {{\n *   eventualUrl: (string|undefined),\n *   a: !Element\n * }|undefined} A URL on the AMP Cache.",
        "* Given an anchor tag, figure out whether this goes to an AMP destination\n * via a redirect.\n * @param {!Element} a An anchor tag.\n * @return {string|undefined} A URL on the AMP Cache.",
        "* Navigate to the given URL. Infers the target from the given anchor\n * tag.\n * @param {!Window} win\n * @param {!Element} a Anchor element\n * @param {string} url",
        "* Establishes a connection to the AMP Cache and makes sure\n * the AMP JS is cached.\n * @param {!Window} win",
        "* For events (such as touch events) that point to an eligible URL, preload\n * that URL.\n * @param {!Event} e\n * @visibleForTesting",
        "* Return <head> if present or just the document element.\n * @param {!Document} doc\n * @return {!Element}",
        "* Returns info about an ancestor that can perform A2A navigations\n * or null if none is present.\n * @param {!Window} win\n * @return {?{\n *   win: !Window,\n *   origin: string,\n * }}",
        "* Returns the Nth parent of the given window.\n * @param {!Window} win\n * @param {number} distance frames above us."
    ],
    "functions": [
        "installAlpClickHandler",
        "handleClick",
        "getLinkInfo",
        "getEventualUrl",
        "navigateTo",
        "warmupStatic",
        "warmupDynamic",
        "getHeadOrFallback",
        "getA2AAncestor",
        "getNthParentWindow"
    ],
    "classes": []
}