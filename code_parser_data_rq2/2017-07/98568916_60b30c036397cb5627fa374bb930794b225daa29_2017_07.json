{
    "identifiers": [
        "sys",
        "pywinusb",
        "hid",
        "intelhex",
        "IntelHex",
        "hid",
        "HidDeviceFilter",
        "vendor_id",
        "product_id",
        "hid_device_filter",
        "get_devices",
        "len",
        "valid_hid_devices",
        "valid_hid_devices",
        "hid_device",
        "address",
        "data",
        "output_report_data",
        "extend",
        "address",
        "address",
        "output_report_data",
        "extend",
        "data",
        "hid_device",
        "send_output_report",
        "output_report_data",
        "hex_data",
        "device_info",
        "get_hid_device_handle",
        "hid_device",
        "sys",
        "exit",
        "hid_device",
        "open",
        "addr",
        "hex_data",
        "maxaddr",
        "device_info",
        "addr",
        "addr",
        "device_info",
        "hex_data",
        "i",
        "i",
        "current_page_range",
        "current_page_range",
        "current_page_range",
        "device_info",
        "send_page_data",
        "hid_device",
        "addr",
        "page_data",
        "send_page_data",
        "hid_device",
        "addr",
        "page_data",
        "send_page_data",
        "hid_device",
        "device_info",
        "hid_device",
        "close",
        "IntelHex",
        "sys",
        "argv",
        "sys",
        "exit",
        "device_info_map",
        "sys",
        "argv",
        "sys",
        "exit",
        "program_device",
        "hex_data",
        "device_info"
    ],
    "literals": [
        "'at90usb1287'",
        "'page_size'",
        "'flash_kb'",
        "'at90usb1286'",
        "'page_size'",
        "'flash_kb'",
        "'at90usb647'",
        "'page_size'",
        "'flash_kb'",
        "'at90usb646'",
        "'page_size'",
        "'flash_kb'",
        "'atmega32u4'",
        "'page_size'",
        "'flash_kb'",
        "'atmega32u2'",
        "'page_size'",
        "'flash_kb'",
        "'atmega16u4'",
        "'page_size'",
        "'flash_kb'",
        "'atmega16u2'",
        "'page_size'",
        "'flash_kb'",
        "'at90usb162'",
        "'page_size'",
        "'flash_kb'",
        "'atmega8u2'",
        "'page_size'",
        "'flash_kb'",
        "'at90usb82'",
        "'page_size'",
        "'flash_kb'",
        "\"No valid HID device found.\"",
        "\"Connected to bootloader.\"",
        "'page_size'",
        "'page_size'",
        "\"Writing address 0x%04X-0x%04X\"",
        "'flash_kb'",
        "\"Programming complete, starting application.\"",
        "'page_size'",
        "'__main__'",
        "\"Could not open the specified HEX file.\"",
        "\"Unknown device name specified.\""
    ],
    "variables": [
        "device_info_map",
        "device_info_map",
        "device_info_map",
        "device_info_map",
        "device_info_map",
        "device_info_map",
        "device_info_map",
        "device_info_map",
        "device_info_map",
        "device_info_map",
        "device_info_map",
        "device_info_map",
        "hid_device_filter",
        "valid_hid_devices",
        "output_report_data",
        "hid_device",
        "current_page_range",
        "page_data",
        "hex_data",
        "device_info"
    ],
    "comments": [
        "Device information table",
        "Bootloader page data should be the HID Report ID (always zero) followed",
        "by the starting address to program, then one device's flash page worth",
        "of data",
        "Program in all data from the loaded HEX file, in a number of device",
        "page sized chunks",
        "Compute the address range of the current page in the device",
        "Extract the data from the hex file at the specified start page",
        "address and convert it to a regular list of bytes",
        "Devices with more than 64KB of flash should shift down the page",
        "address so that it is 16-bit (page size is guaranteed to be",
        ">= 256 bytes so no non-zero address bits are discarded)",
        "Once programming is complete, start the application via a dummy page",
        "program to the page address 0xFFFF",
        "Load the specified HEX file",
        "Retrieve the device information entry for the specified device"
    ],
    "docstrings": [
        "\"\"\"\n             LUFA Library\n     Copyright (C) Dean Camera, 2017.\n\n  dean [at] fourwalledcubicle [dot] com\n           www.lufa-lib.org\n\"\"\"",
        "\"\"\"\n    Front-end programmer for the LUFA HID class bootloader.\n\n    Usage:\n        python hid_bootloader_loader.py <Device> <Input>.hex\n\n    Example:\n        python hid_bootloader_loader.py at90usb1287 Mouse.hex\n\n    Requires the pywinusb (https://pypi.python.org/pypi/pywinusb/) and\n    IntelHex (https://pypi.python.org/pypi/IntelHex/) libraries.\n\"\"\""
    ],
    "functions": [
        "get_hid_device_handle",
        "send_page_data",
        "program_device"
    ],
    "classes": []
}