{
    "identifiers": [
        "vscode",
        "cp",
        "path",
        "os",
        "fs",
        "getNimExecPath",
        "getProjectFile",
        "execNimSuggest",
        "INimSuggestResult",
        "NimSuggestType",
        "command",
        "args",
        "useStdErr",
        "printToOutput",
        "callback",
        "resolve",
        "reject",
        "vscode",
        "cp",
        "getNimExecPath",
        "command",
        "args",
        "cwd",
        "err",
        "stdout",
        "stderr",
        "err",
        "err",
        "vscode",
        "process",
        "resolve",
        "useStdErr",
        "stderr",
        "stdout",
        "callback",
        "os",
        "err",
        "printToOutput",
        "vscode",
        "outputWindow",
        "stderr",
        "outputWindow",
        "stdout",
        "outputWindow",
        "resolve",
        "ret",
        "e",
        "reject",
        "e",
        "lines",
        "i",
        "lines",
        "i",
        "lines",
        "i",
        "ret",
        "ret",
        "ret",
        "lines",
        "i",
        "lines",
        "i",
        "match",
        "ret",
        "path",
        "vscode",
        "file",
        "parseInt",
        "lineStr",
        "parseInt",
        "charStr",
        "ret",
        "filename",
        "nimConfig",
        "vscode",
        "path",
        "filename",
        "nimConfig",
        "getProjectFile",
        "filename",
        "runningToolsPromises",
        "nimExec",
        "projectFile",
        "parseErrors",
        "nimConfig",
        "path",
        "path",
        "os",
        "tmppath",
        "getProjectFile",
        "filename",
        "runningToolsPromises",
        "nimExec",
        "args",
        "parseErrors",
        "runningToolsPromises",
        "resultSets",
        "resultSets",
        "filename",
        "vscode",
        "filename",
        "vscode",
        "cp",
        "getNimExecPath",
        "args",
        "cwd",
        "err",
        "stdout",
        "stderr",
        "err",
        "err",
        "vscode",
        "process",
        "vscode",
        "outputWindow",
        "stderr",
        "outputWindow",
        "stdout",
        "outputWindow"
    ],
    "literals": [
        "'use strict'",
        "'vscode'",
        "'child_process'",
        "'path'",
        "'os'",
        "'fs'",
        "'./nimUtils'",
        "'./nimSuggestExec'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"ENOENT\"",
        "\"No 'nim' binary could be found in PATH: '\"",
        "\"PATH\"",
        "\"'\"",
        "\"Nim Output\"",
        "string",
        "'\\t'",
        "\"\\n\"",
        "string",
        "'buildOnSave'",
        "\"compile\"",
        "'lintOnSave'",
        "\"nim-code-check\"",
        "\"--out:\"",
        "\"check\"",
        "string",
        "'nim'",
        "'compile'",
        "'-r'",
        "'--listFullPaths'",
        "\"ENOENT\"",
        "\"No 'nim' binary could be found in PATH: '\"",
        "\"PATH\"",
        "\"'\"",
        "\"Nim Run Output\""
    ],
    "variables": [
        "cwd",
        "ret",
        "outputWindow",
        "ret",
        "i",
        "match",
        "_",
        "file",
        "lineStr",
        "_",
        "charStr",
        "severity",
        "msg",
        "match",
        "runningToolsPromises",
        "cwd",
        "projectFile",
        "tmppath",
        "args",
        "config",
        "args",
        "cwd",
        "outputWindow"
    ],
    "comments": [
        "---------------------------------------------------------\n * Copyright (C) Xored Software Inc. All rights reserved.\n * Licensed under the MIT License. See LICENSE in the project root for license information.\n *--------------------------------------------------------",
        "display window in the second position (side or bottom)"
    ],
    "docstrings": [],
    "functions": [
        "nimExec",
        "parseErrors",
        "check",
        "buildAndRun"
    ],
    "classes": []
}