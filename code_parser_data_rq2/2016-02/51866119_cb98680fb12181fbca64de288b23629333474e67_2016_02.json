{
    "identifiers": [
        "monet",
        "apply2",
        "a1",
        "a2",
        "f",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "m",
        "m",
        "val",
        "val",
        "fn",
        "val1",
        "val2",
        "m1",
        "m2",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "val",
        "m",
        "m",
        "value",
        "value",
        "isValue",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "m",
        "m",
        "none",
        "some",
        "val",
        "val",
        "val",
        "maybe",
        "maybeFn",
        "val",
        "fail",
        "fail",
        "val",
        "fn",
        "val",
        "value",
        "value",
        "value",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "m",
        "m",
        "eitherFn",
        "val",
        "leftFn",
        "err",
        "rightFn",
        "val",
        "leftFn",
        "err",
        "rightFn",
        "val",
        "val",
        "val",
        "val",
        "val",
        "val",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "eitherFn",
        "val",
        "failFn",
        "err",
        "successFn",
        "val",
        "m",
        "m",
        "val",
        "err",
        "acc",
        "element",
        "element",
        "acc",
        "a",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "initial",
        "fn",
        "initial",
        "fn",
        "val",
        "tail",
        "val",
        "tail",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "fn",
        "val",
        "m",
        "m",
        "fn",
        "fn",
        "monet"
    ],
    "literals": [
        "\"monet\""
    ],
    "variables": [
        "Identity",
        "Some",
        "Just",
        "Nothing",
        "Maybe",
        "Right",
        "Left",
        "Either",
        "Validation",
        "IO"
    ],
    "comments": [
        "Type definitions for monet.js v0.8.7",
        "Project: https://github.com/cwmyers/monet.js",
        "Definitions by: Jakub Strojewski <https://github.com/ulfryk>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "if T is Monad<V>",
        "of()",
        "if T is Identity<V>",
        "if T is Identity<V>",
        "if T is Either<V>",
        "if T is Validation<E, V>",
        "if T extends Monad<V>",
        "sequence<V>(m: IMonadStatic): Monad<List<V>>;",
        "sequence<E, V>(m: IMaybeStatic): Maybe<List<V>>;",
        "sequence<E, V>(m: IEitherStatic): Either<E, List<V>>;",
        "sequence<E, V>(m: IValidationStatic): Validation<List<E>, List<V>>;",
        "",
        "sequence<U extends IMonadStatic, R extends Monad<List<any>>>(m: U): R;",
        "sequenceMaybe<V, T extends Maybe<V>>(): Maybe<List<V>>;",
        "sequenceEither<E, V, T extends Either<E, V>>(): Either<E, List<V>>;",
        "sequenceValidation<E, V, T extends Validation<E, V>>(): Validation<List<E>, List<V>>;",
        "sequenceIO<V, T extends IO<V>>(): IO<List<V>>;",
        "sequenceReader<V, T extends Reader<V>>(): Reader<List<V>>;",
        "if T is IO<V>",
        "declare var Identity: monet.IIdentityStatic;",
        "declare var Maybe: monet.IMaybeStatic;",
        "declare var Just: monet.ISomeStatic;",
        "declare var Some: monet.ISomeStatic;",
        "declare var None: monet.INoneStatic;",
        "declare var Nothing: monet.INoneStatic;",
        "",
        "declare var Either: monet.IEitherStatic;",
        "",
        "declare var Validation: monet.IValidationStatic;",
        "",
        "declare var List: monet.IListStatic;",
        "",
        "declare var IO: monet.IIOStatic;"
    ],
    "docstrings": [
        "* Identity",
        "* Maybe",
        "* Either",
        "* Validation",
        "* List",
        "* IO"
    ],
    "functions": [],
    "classes": []
}