{
    "identifiers": [
        "THREE",
        "THREE",
        "THREE",
        "THREE",
        "THREE",
        "InputState",
        "THREE",
        "options",
        "options",
        "options",
        "THREE",
        "THREE",
        "THREE",
        "geometry",
        "material",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "GMath",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "deltaTime",
        "cs",
        "sn",
        "cs",
        "sn",
        "cfg",
        "cfg",
        "cfg",
        "cfg",
        "cfg",
        "cfg",
        "cfg",
        "cfg",
        "cfg",
        "cfg",
        "yawSpeedFront",
        "GMath",
        "yawSpeedRear",
        "cfg",
        "cfg",
        "cfg",
        "GMath",
        "cfg",
        "slipAngleFront",
        "tireGripFront",
        "tireGripFront",
        "axleWeightFront",
        "GMath",
        "cfg",
        "slipAngleRear",
        "tireGripRear",
        "tireGripRear",
        "axleWeightRear",
        "cfg",
        "cfg",
        "cfg",
        "cfg",
        "throttle",
        "brake",
        "GMath",
        "cfg",
        "cfg",
        "cfg",
        "cfg",
        "dragForce_cx",
        "tractionForce_cx",
        "dragForce_cy",
        "tractionForce_cy",
        "frictionForceFront_cy",
        "frictionForceRear_cy",
        "totalForce_cx",
        "cfg",
        "totalForce_cy",
        "cfg",
        "cs",
        "sn",
        "sn",
        "cs",
        "deltaTime",
        "deltaTime",
        "frictionForceFront_cy",
        "tractionForce_cy",
        "cfg",
        "frictionForceRear_cy",
        "cfg",
        "throttle",
        "angularTorque",
        "angularTorque",
        "angularAccel",
        "deltaTime",
        "deltaTime",
        "deltaTime",
        "deltaTime",
        "steerInput",
        "deltaTime",
        "steerInput",
        "steer",
        "GMath",
        "steerInput",
        "deltaTime",
        "steer",
        "deltaTime",
        "steer",
        "deltaTime",
        "steer",
        "steerInput",
        "steerInput",
        "avel",
        "steer",
        "deltaTime",
        "deltaTime",
        "steerInput",
        "dt",
        "steerInput",
        "dt"
    ],
    "literals": [
        "'use strict'",
        "'number'",
        "'number'",
        "'number'",
        "'number'"
    ],
    "variables": [
        "geometry",
        "material",
        "cfg",
        "sn",
        "cs",
        "axleWeightFront",
        "axleWeightRear",
        "yawSpeedFront",
        "yawSpeedRear",
        "slipAngleFront",
        "slipAngleRear",
        "tireGripFront",
        "tireGripRear",
        "frictionForceFront_cy",
        "frictionForceRear_cy",
        "brake",
        "throttle",
        "tractionForce_cx",
        "tractionForce_cy",
        "dragForce_cx",
        "dragForce_cy",
        "totalForce_cx",
        "totalForce_cy",
        "angularTorque",
        "angularAccel",
        "steer",
        "avel",
        "steer",
        "dt",
        "steerInput"
    ],
    "comments": [
        "Car state variables",
        "angle car is pointed at (radians)",
        "metres in world coords",
        "m/s in world coords",
        "m/s in local car coords (x is forward y is sideways)",
        "acceleration in world coords",
        "accleration in local car coords",
        "absolute velocity m/s",
        "angular velocity in radians",
        "amount of steering input (-1.0..1.0)",
        "actual front wheel steer angle (-maxSteer..maxSteer)",
        "state of user inputs",
        "will be = mass",
        "set from axle to CG lengths",
        "% car weight on the front axle",
        "% car weight on the rear axle",
        "m/s^2",
        "kg",
        "Multiply by mass for inertia",
        "Centre to side of chassis (metres)",
        "Centre of gravity to front of chassis (metres)",
        "Centre of gravity to rear of chassis",
        "Centre gravity to front axle",
        "Centre gravity to rear axle",
        "Centre gravity height",
        "Includes tire (also represents height of axle)",
        "Used for render only",
        "How much grip tires have",
        "% of grip available when wheel is locked",
        "How much weight is transferred during acceleration/braking",
        "Maximum steering angle in radians",
        "air resistance (* vel)",
        "rolling resistance force (* vel)",
        "% car weight on the front axle",
        "% car weight on the rear axle",
        "Shorthand",
        "Pre-calc heading vector",
        "Get velocity in local car coordinates",
        "Weight on axles based on centre of gravity and weight shift due to forward/reverse acceleration",
        "Resulting velocity of the wheels as result of the yaw rate of the car body.",
        "v = yawrate * r where r is distance from axle to CG and yawRate (angular velocity) in rad/s.",
        "Calculate slip angles for front and rear wheels (a.k.a. alpha)",
        "reduce rear grip when ebrake is on",
        "Get amount of brake/throttle from our inputs",
        "Resulting force in local car coordinates.",
        "This is implemented as a RWD car only.",
        "total force in car coordinates",
        "acceleration along car axes",
        "forward/reverse accel",
        "sideways accel",
        "acceleration in world coordinates",
        "update velocity",
        "calculate rotational forces",
        "Sim gets unstable at very slow speeds, so just stop the car",
        "finally we can update position",
        "Display some data",
        "this.stats.clear();  // clear this every tick otherwise it'll fill up fast\n        this.stats.add('speed', this.velocity_c.x * 3600 / 1000);  // km/h\n        this.stats.add('accleration', this.accel_c.x);\n        this.stats.add('yawRate', this.yawRate);\n        this.stats.add('weightFront', axleWeightFront);\n        this.stats.add('weightRear', axleWeightRear);\n        this.stats.add('slipAngleFront', slipAngleFront);\n        this.stats.add('slipAngleRear', slipAngleRear);\n        this.stats.add('frictionFront', frictionForceFront_cy);\n        this.stats.add('frictionRear', frictionForceRear_cy);",
        "Move toward steering input",
        "-inp.right, inp.left);",
        "No steer input - move toward centre (0)",
        "m/s",
        "delta T in seconds",
        "Perform filtering on steering...",
        "Now set the actual steering angle",
        "",
        "Now that the inputs have been filtered and we have our throttle,",
        "brake and steering values, perform the car physics update...",
        ""
    ],
    "docstrings": [
        "* Car class\n * This is a HTML/Javascript adaptation of Marco Monster's 2D car physics demo.\n * Physics Paper here:\n * http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games.html\n * Windows demo written in C here:\n * http://www.gamedev.net/topic/394292-demosource-of-marco-monsters-car-physics-tutorial/\n * Additional ideas from here:\n * https://github.com/Siorki/js13kgames/tree/master/2013%20-%20staccato\n *\n * Adapted by Mike Linkovich\n * http://www.spacejack.ca/projects/carphysics2d/\n * https://github.com/spacejack/carphysics2d\n *\n * License: MIT\n * http://opensource.org/licenses/MIT",
        "*  Car setup params and magic constants.",
        "* Smooth Steering\n     * Apply maximum steering angle change velocity.",
        "* Safe Steering\n     * Limit the steering angle by the speed of the car.\n     * Prevents oversteer at expense of more understeer.",
        "* @param deltaTime Delta Time in milliseconds"
    ],
    "functions": [
        "setConfig",
        "doPhysics",
        "applySmoothSteer",
        "applySafeSteer",
        "update"
    ],
    "classes": [
        "Car"
    ]
}