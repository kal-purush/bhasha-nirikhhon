{
    "identifiers": [
        "java",
        "util",
        "ALPHABET",
        "args",
        "explainer",
        "aa",
        "prompt",
        "a",
        "verifies",
        "parseInt",
        "aa",
        "bb",
        "prompt",
        "b",
        "verifies",
        "parseInt",
        "bb",
        "nextLine",
        "phrase",
        "prompt",
        "results",
        "affineC",
        "a",
        "b",
        "phrase",
        "decryptAffine",
        "a",
        "b",
        "affineC",
        "a",
        "b",
        "phrase",
        "phrase",
        "results",
        "rot13",
        "phrase",
        "rot13",
        "rot13",
        "phrase",
        "phrase",
        "input",
        "question",
        "intOrLetter",
        "question",
        "userInput",
        "intOrLetter",
        "equals",
        "input",
        "nextLine",
        "toString",
        "input",
        "nextInt",
        "userInput",
        "input",
        "test",
        "aOrB",
        "aOrB",
        "test",
        "test",
        "ALPHABET",
        "test",
        "exit",
        "test",
        "test",
        "test",
        "ALPHABET",
        "exit",
        "test",
        "encoded",
        "decoded",
        "initial",
        "ciphertype",
        "ciphertype",
        "encoded",
        "ciphertype",
        "decoded",
        "succesTest",
        "initial",
        "decoded",
        "originalPhrase",
        "decryptedPhrase",
        "test",
        "originalPhrase",
        "equals",
        "decryptedPhrase",
        "test",
        "character",
        "character",
        "character",
        "letter",
        "letter",
        "character",
        "character",
        "letter",
        "letter",
        "letter",
        "character",
        "letter",
        "phrase",
        "shiftFactor",
        "encryptedPhrase",
        "ii",
        "ii",
        "phrase",
        "length",
        "ii",
        "character",
        "phrase",
        "charAt",
        "ii",
        "letterCase",
        "caseCheck",
        "character",
        "letterCase",
        "letterCase",
        "index",
        "character",
        "letterCase",
        "shiftFactor",
        "ALPHABET",
        "letterCase",
        "encryptedPhrase",
        "index",
        "encryptedPhrase",
        "character",
        "encryptedPhrase",
        "a",
        "b",
        "phrase",
        "encryptedPhrase",
        "ii",
        "ii",
        "phrase",
        "length",
        "ii",
        "character",
        "phrase",
        "charAt",
        "ii",
        "letterCase",
        "caseCheck",
        "character",
        "letterCase",
        "letterCase",
        "index",
        "a",
        "character",
        "letterCase",
        "b",
        "ALPHABET",
        "letterCase",
        "encryptedPhrase",
        "index",
        "encryptedPhrase",
        "character",
        "encryptedPhrase",
        "a",
        "aPrime",
        "ii",
        "ii",
        "ALPHABET",
        "ii",
        "ii",
        "a",
        "ALPHABET",
        "aPrime",
        "ii",
        "aPrime",
        "a",
        "b",
        "phrase",
        "decryptedPhrase",
        "ii",
        "ii",
        "phrase",
        "length",
        "ii",
        "character",
        "phrase",
        "charAt",
        "ii",
        "letterCase",
        "caseCheck",
        "character",
        "letterCase",
        "letterCase",
        "index",
        "aPrime",
        "a",
        "character",
        "letterCase",
        "b",
        "index",
        "index",
        "ALPHABET",
        "index",
        "ALPHABET",
        "letterCase",
        "index",
        "ALPHABET",
        "letterCase",
        "decryptedPhrase",
        "index",
        "decryptedPhrase",
        "character",
        "decryptedPhrase"
    ],
    "literals": [
        "\"Please enter an odd numeric value for a (1-25, not 13): \"",
        "\"int\"",
        "\"Please enter a numeric value for b: \"",
        "\"int\"",
        "\"Enter the phrase you'd like to convert: \"",
        "\"string\"",
        "\"Affine\"",
        "\"ROT13\"",
        "\"This program will encode and then decode\"",
        "\"a phrase using the ROT13 and Affine Ciphers.\"",
        "\"An Affine Cipher encodes character with an equation\"",
        "\"(ax + b) mod 26\"",
        "\"where x is the ASCII value of the character.\"",
        "\"ROT13 is a special case of the Affine Cipher,\"",
        "\"where a is 1 and b is 13.\"",
        "\"string\"",
        "\"The value for 'a' must be an odd number \"",
        "\"between 1 and 25 not including 13\"",
        "\"The value for 'b' must be a number between 0 and 26\"",
        "\"The \"",
        "\" encoded phrase is: \"",
        "\"The \"",
        "\" decoded phrase is: \"",
        "\"The conversion worked correctly.\"",
        "\"The conversion did not work\"",
        "\"\"",
        "\"\"",
        "\"\""
    ],
    "variables": [],
    "comments": [
        "Eli F.",
        "Section: B",
        "Assignment 3",
        "Description: Uses the affine cipher and ROT13 to encrypt and then decrypt an inputed string",
        "Class name: Cipher",
        "Version 1.0",
        "10/2/15",
        "creates new scanner object",
        "gathers input values for 'a', 'b' and the phrase that will be encoded and decoded",
        "coverts aa to int to be used for encoding and checks to make suer it is valid",
        "converts bb to int to be used for encoding and checks to make sure it is valid",
        "prints results of encrypting and decrypting with ROT13 and affine cipher",
        "this is to have only one method to prompt for both strings and ints",
        "if intOrLetter = \"string\" then scanner will accept string if not then it will accept int",
        "returns strings which will be converted into int if need be in main",
        "if were checking 'a'",
        "if an invalid 'a' was entered displays and error message and terminates the program",
        "extra re-prompt feature",
        "while(test%2 == 0 || test > ALPHABET || test == 13) {",
        "System.out.println(\"The value for 'a' must be an odd number\");",
        "System.out.print(\"Please enter a new value of a: \");",
        "test = input.nextInt();",
        "}",
        "doesn't actually do anything unless re-prompt used",
        "if invalid 'b' was entered displays error message and terminates program",
        "extra re-prompt feature",
        "while(b < 1 || b >= ALPHABET) {",
        "System.out.println(\"The value for 'b' must be a number between 0 and 26\");",
        "System.out.print(\"Please enter a new value for b: \");",
        "test = input.nextInt();",
        "}",
        "doesn't actually do anything unless re-prompt used",
        "sorry for weird line break trying have lines under 100char",
        "if special character ignore",
        "rot13 means rotate/shift 13 spaces",
        "grab characters from entered string to encrypt",
        "if the character is a special symbol ignore",
        "grab characters from entered string to encrypt",
        "equation to encrypt",
        "if the character is a special symbol ignore",
        "decryption equation",
        "if the character is a special symbol ignore"
    ],
    "docstrings": [
        "* Length of alphabet the user will be using",
        "* Encrypts and then decrypts an inputed string using ROT13 and affine cipher\n   * will only encrypt letters, special symbols will be ignored\n   *\n   * @param args user input from the console",
        "* Prints an explanation of what the program will do",
        "* Prompts the user for an integer\n   *\n   * @param input scanner object used to get input from user\n   * @param question the question that will prompt the user\n   * @param intOrLetter indicates if int or string is to be collected from user\n   * @return userInput the int or string the user inputed in a String",
        "* Verifies if user inputed valid value for 'a'\n   * if value was invalid will re-prompt for a new value for 'a'\n   *\n   * @param input scanner object used to collect user input\n   * @param test the value that will be tested\n   * @param aOrB indicated if 'a' or 'b' is to be tested\n   * @return test new 'a' or 'b' or the original value of 'a' or 'b' if it was valid",
        "* Prints the encoded and decoded phrase using affine cipher\n   * also prints the result of a test which compares the decode phrase with the original\n   *\n   * @param result result of applying the affine cipher to the original phrase\n   * @param decryptedPhrase result of applying decryption equation to the decrypted phrase\n   * @param originalphrase the original phrase that will be compared to the decrypted phrase\n   * @param ciphertype the name of the cipher that will be used to encrypt",
        "* Tests to see if phrases were correctly encrypted and decrypted\n   *\n   * @param originalPhrase the original phrase the user inputed\n   * @param decryptedPhrase the phrase which has been encrypted and then decrypted",
        "* Check to see if a character is upper case or lower case\n   *\n   * @param character the character that will be tested\n   * @return letter first letter of the alphabet depending on the case of the character\n   * if character is not a letter then returns character",
        "* Encrypts inputed phrase using ROT13, and also decrypts inputed phrase encrypted using ROT13\n   * this is possible because ROT13 is its own inverse since the our alphabet is 26 character long\n   *\n   * @param phrase the phrase that will be encrypted or decrypted using ROT13\n   * @return encryptedPhrase the encrypted phrase or decrypted phrase depending on the input",
        "* Encrypts inputed phrase using a affine cipher\n   *\n   * @param a the multiplicative factor used for encrypting\n   * @param b the shift factor used for encrypting\n   * @param phrase the phrase that will be encrypted using affine cipher\n   * @return encryptedPhrase the phrase encrypted using affine cipher",
        "* Finds modular multiplicative inverse of 'a'.  it must satisfy the equation a*a^-1 mod m = 1\n   * also first factor of a^-1 will be within range 1-25 so we can search for a^-1\n   *\n   * @param a the multiplicative factor used to find the modular multiplicative inverse\n   * @return aPrime modular multiplicative inverse of 'a'",
        "* Decrypts inputed phrase encrypted by a affine cipher\n   *\n   * @param a the multiplicative factor used for encrypting\n   * @param b the shift factor used for encrypting\n   * @param phrase the phrase that will be decrypted\n   * @return decryptedPhrase the result of applying the decryption algorithm to an encrypted phrase"
    ],
    "functions": [
        "main",
        "explainer",
        "prompt",
        "verifies",
        "results",
        "succesTest",
        "caseCheck",
        "rot13",
        "affineC",
        "aPrime",
        "decryptAffine"
    ],
    "classes": [
        "Cipher"
    ]
}