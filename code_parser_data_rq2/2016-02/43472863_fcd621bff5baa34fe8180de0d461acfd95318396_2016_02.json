{
    "identifiers": [
        "describe",
        "description",
        "specDefinitions",
        "fdescribe",
        "description",
        "specDefinitions",
        "xdescribe",
        "description",
        "specDefinitions",
        "it",
        "expectation",
        "assertion",
        "timeout",
        "it",
        "expectation",
        "assertion",
        "done",
        "timeout",
        "fit",
        "expectation",
        "assertion",
        "timeout",
        "fit",
        "expectation",
        "assertion",
        "done",
        "timeout",
        "xit",
        "expectation",
        "assertion",
        "timeout",
        "xit",
        "expectation",
        "assertion",
        "done",
        "timeout",
        "pending",
        "reason",
        "beforeEach",
        "action",
        "timeout",
        "beforeEach",
        "action",
        "done",
        "timeout",
        "afterEach",
        "action",
        "timeout",
        "afterEach",
        "action",
        "done",
        "timeout",
        "beforeAll",
        "action",
        "timeout",
        "beforeAll",
        "action",
        "done",
        "timeout",
        "afterAll",
        "action",
        "timeout",
        "afterAll",
        "action",
        "done",
        "timeout",
        "expect",
        "spy",
        "jasmine",
        "expect",
        "actual",
        "jasmine",
        "fail",
        "e",
        "spyOn",
        "method",
        "jasmine",
        "runs",
        "asyncMethod",
        "waitsFor",
        "latchMethod",
        "failureMessage",
        "timeout",
        "waits",
        "timeout",
        "jasmine",
        "aclass",
        "anything",
        "arrayContaining",
        "sample",
        "objectContaining",
        "sample",
        "createSpy",
        "name",
        "originalFn",
        "createSpyObj",
        "baseName",
        "methodNames",
        "createSpyObj",
        "baseName",
        "methodNames",
        "pp",
        "value",
        "getEnv",
        "addCustomEqualityTester",
        "equalityTester",
        "addMatchers",
        "matchers",
        "stringMatching",
        "stringMatching",
        "expectedClass",
        "other",
        "n",
        "sample",
        "other",
        "sample",
        "other",
        "mismatchKeys",
        "mismatchValues",
        "env",
        "func",
        "spec",
        "onComplete",
        "env",
        "timeout",
        "spec",
        "env",
        "timeout",
        "latchFunction",
        "message",
        "spec",
        "ms",
        "date",
        "first",
        "second",
        "actual",
        "expected",
        "actual",
        "expected",
        "util",
        "customEqualityTesters",
        "index",
        "a",
        "b",
        "customTesters",
        "haystack",
        "needle",
        "customTesters",
        "matcherName",
        "isNot",
        "actual",
        "expected",
        "reporter",
        "description",
        "specDefinitions",
        "beforeEachFunction",
        "beforeAllFunction",
        "afterEachFunction",
        "afterAllFunction",
        "desc",
        "specDefinitions",
        "description",
        "func",
        "desc",
        "func",
        "a",
        "b",
        "mismatchKeys",
        "mismatchValues",
        "a",
        "b",
        "mismatchKeys",
        "mismatchValues",
        "a",
        "b",
        "mismatchKeys",
        "mismatchValues",
        "haystack",
        "needle",
        "equalityTester",
        "matchers",
        "spec",
        "millis",
        "oldMillis",
        "nowMillis",
        "timeoutKey",
        "funcToCall",
        "millis",
        "recurring",
        "result",
        "values",
        "result",
        "value",
        "obj",
        "fn",
        "property",
        "isGetter",
        "value",
        "value",
        "array",
        "obj",
        "value",
        "env",
        "block",
        "ensure",
        "block",
        "ensure",
        "block",
        "ensure",
        "onComplete",
        "env",
        "actual",
        "spec",
        "isNot",
        "expected",
        "expectationFailOutput",
        "expected",
        "expectationFailOutput",
        "expected",
        "expectationFailOutput",
        "expectationFailOutput",
        "expectationFailOutput",
        "expectationFailOutput",
        "expectationFailOutput",
        "expectationFailOutput",
        "expected",
        "expected",
        "expectationFailOutput",
        "expected",
        "expectationFailOutput",
        "expected",
        "expectationFailOutput",
        "expected",
        "precision",
        "expectationFailOutput",
        "expected",
        "message",
        "expected",
        "message",
        "runner",
        "runner",
        "suite",
        "spec",
        "spec",
        "reporter",
        "env",
        "beforeEachFunction",
        "afterEachFunction",
        "beforeAllFunction",
        "afterAllFunction",
        "suite",
        "block",
        "spec",
        "env",
        "suite",
        "description",
        "arguments",
        "func",
        "block",
        "result",
        "actual",
        "timeout",
        "latchFunction",
        "timeoutMessage",
        "timeout",
        "e",
        "matchersPrototype",
        "onComplete",
        "doAfter",
        "onComplete",
        "obj",
        "methodName",
        "ignoreMethodDoesntExist",
        "env",
        "description",
        "specDefinitions",
        "parentSuite",
        "onComplete",
        "beforeEachFunction",
        "afterEachFunction",
        "beforeAllFunction",
        "afterAllFunction",
        "suiteOrSpec",
        "onComplete",
        "val",
        "fn",
        "msg",
        "index",
        "childClass",
        "parentClass",
        "e",
        "args",
        "destination",
        "source",
        "suiteOrSpec",
        "specId",
        "specIds",
        "result"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "clock",
        "HtmlReporter",
        "HtmlSpecFilter",
        "DEFAULT_TIMEOUT_INTERVAL"
    ],
    "comments": [
        "Compiled using typings@0.6.3",
        "Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/26c98c8a9530c44f8c801ccc3b2057e2101187ee/jasmine/jasmine.d.ts",
        "Type definitions for Jasmine 2.2",
        "Project: http://jasmine.github.io/",
        "Definitions by: Boris Yankov <https://github.com/borisyankov/>, Theodore Brown <https://github.com/theodorejb>, David PÃ¤rsson <https://github.com/davidparsson/>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "For ddescribe / iit use : https://github.com/borisyankov/DefinitelyTyped/blob/master/karma-jasmine/karma-jasmine.d.ts",
        "If you call the function pending anywhere in the spec body, no matter the expectations, the spec will be marked pending.",
        "taken from TypeScript lib.core.es6.d.ts, applicable to CustomMatchers.contains()",
        "Calls to any registered callback are triggered when the clock is ticked forward via the jasmine.clock().tick function, which takes a number of milliseconds.",
        "ddescribe(description: string, specDefinitions: () => void): Suite; Not a part of jasmine. Angular team adds these",
        "iit(description: string, func: () => void): Spec; Not a part of jasmine. Angular team adds these",
        "By chaining the spy with and.callThrough, the spy will still track all calls to it but in addition it will delegate to the actual implementation.",
        "By chaining the spy with and.returnValue, all calls to the function will return a specific value.",
        "By chaining the spy with and.callFake, all calls to the spy will delegate to the supplied function.",
        "By chaining the spy with and.throwError, all calls to the spy will throw the specified value.",
        "When a calling strategy is used for a spy, the original stubbing behavior can be returned at any time with and.stub.",
        "By chaining the spy with calls.any(), will return false if the spy has not been called at all, and then true once at least one call happens. *",
        "By chaining the spy with calls.count(), will return the number of times the spy was called *",
        "By chaining the spy with calls.argsFor(), will return the arguments passed to call number index *",
        "By chaining the spy with calls.allArgs(), will return the arguments to all calls *",
        "By chaining the spy with calls.all(), will return the context (the this) and arguments passed all calls *",
        "By chaining the spy with calls.mostRecent(), will return the context (the this) and arguments for the most recent call *",
        "By chaining the spy with calls.first(), will return the context (the this) and arguments for the first call *",
        "By chaining the spy with calls.reset(), will clears all tracking for a spy *",
        "The context (the this) for the call",
        "All arguments passed to the call"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}