{
    "identifiers": [
        "qx",
        "qx",
        "arguments",
        "qx",
        "qx",
        "qx",
        "qx",
        "qx",
        "qx",
        "nameContainer",
        "qx",
        "nameContainer",
        "qx",
        "nameContainer",
        "nameLabel",
        "nameContainer",
        "nameContainer",
        "qx",
        "nameContainer",
        "skel",
        "layerType",
        "skel",
        "alphaMode",
        "alphaMode",
        "skel",
        "colorMode",
        "colorMode",
        "layerType",
        "skel",
        "groupMode",
        "groupMode",
        "settingsIndex",
        "groupMode",
        "skel",
        "groupName",
        "skel",
        "alphaMode",
        "skel",
        "id",
        "id",
        "name",
        "name",
        "settings",
        "settings"
    ],
    "literals": [
        "\"skel.widgets.Image.Stack.LayerSettings\"",
        "\"\"",
        "\"Name:\""
    ],
    "variables": [
        "nameLabel",
        "nameContainer",
        "alphaMode",
        "layerType",
        "colorMode",
        "groupMode",
        "layerType",
        "settingsIndex",
        "groupMode",
        "groupName",
        "alphaMode"
    ],
    "comments": [
        "global mImport",
        "Everything will have a user settable name.",
        "this.m_layerSettings.setControls( this.m_mask );",
        "this.m_layerSettings.setControls( this.m_mask );"
    ],
    "docstrings": [
        "* Controls for a layer in a stack.",
        "*****************************************************************************\n * @ignore( mImport)\n *****************************************************************************",
        "* Constructor.",
        "* Initializes the UI.",
        "* Returns whether or not the settings support transparency.\n         * @return {boolean} - true if the settings support transparency; false, otherwise.",
        "* Returns whether or not the settings support RGB.\n         * @return {boolean} - true if the settings support RGB; false, otherwise.",
        "* Returns whether or not the settings are for a group of layers.\n         * @return {boolean} - true if the settings are for a group of layers; false, otherwise.",
        "* Remove mode specific settings.",
        "* Display settings appropriate to a group of layers.",
        "* Display settings apppropriate for setting RGB.",
        "* Display settings appropriate for setting transparency.",
        "* Set the server-side id of the object that handles layer settings.\n         * @param id {String} - server-side id for layer settings.",
        "* Update the UI with a user set name for the layer.\n         * @param name {String} - a user set name for the layer.",
        "* Update the UI with server specific setting information.\n         * @param settings {Object} - server specific setting information."
    ],
    "functions": [],
    "classes": []
}