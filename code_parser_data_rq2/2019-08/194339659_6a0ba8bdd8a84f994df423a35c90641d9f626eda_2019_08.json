{
    "identifiers": [
        "glob",
        "os",
        "sys",
        "logging",
        "apath",
        "encodingValue",
        "open",
        "apath",
        "fobj",
        "fobj",
        "read",
        "decode",
        "encodingValue",
        "exp",
        "logging",
        "critical",
        "format",
        "apath",
        "encodingValue",
        "logging",
        "error",
        "format",
        "exp",
        "apath",
        "apath",
        "Windows",
        "open",
        "apath",
        "fobj",
        "fobj",
        "read",
        "Windows",
        "WIN_EOL",
        "content_uni",
        "logging",
        "critical",
        "format",
        "apath",
        "content_uni",
        "replace",
        "WIN_EOL",
        "UNIX_EOL",
        "content_no_nl",
        "logging",
        "critical",
        "format",
        "apath",
        "apath",
        "apath",
        "apath",
        "lower",
        "logging",
        "critical",
        "apath",
        "logging",
        "error",
        "apath",
        "lower",
        "apath",
        "apath",
        "apath",
        "logging",
        "critical",
        "apath",
        "apath",
        "open",
        "apath",
        "fobj",
        "fobj",
        "read",
        "decode",
        "l",
        "lic",
        "l",
        "contents",
        "found",
        "logging",
        "critical",
        "apath",
        "exp",
        "logging",
        "critical",
        "apath",
        "logging",
        "error",
        "format",
        "exp",
        "apath",
        "os",
        "path",
        "join",
        "os",
        "getcwd",
        "glob",
        "glob",
        "os",
        "path",
        "join",
        "p",
        "recursive",
        "a",
        "pyfiles",
        "os",
        "path",
        "relpath",
        "a",
        "os",
        "getcwd",
        "TestEncodingOk",
        "a",
        "error",
        "TestFilenameLowercase",
        "aRelativePath",
        "error",
        "TestNoSpaces",
        "aRelativePath",
        "error",
        "TestRequiredLicense",
        "a",
        "error",
        "logging",
        "critical",
        "error",
        "len",
        "pyfiles",
        "sys",
        "exit",
        "error"
    ],
    "literals": [
        "\"rb\"",
        "\"Encoding failure: file: {0} type: {1}\"",
        "\"EXCEPTION: while processing {1} - {0}\"",
        "b'\\r\\n'",
        "b'\\n'",
        "\"rb\"",
        "\"Windows EOL in use file: {0}\"",
        "b\"  \"",
        "\"UNIX EOL in use file: {0}\"",
        "f\"Lowercase failure: file {apath} not lower case path\"",
        "f\"\\n\\tLOWERCASE: {apath.lower()}\\n\\tINPUTPATH: {apath}\"",
        "\" \"",
        "f\"NoSpaces failure: file {apath} has spaces in path\"",
        "\"SPDX-License-Identifier: BSD-2-Clause-Patent\"",
        "\"rb\"",
        "f\"License failure: file {apath} has incorrect, invalid, or unsupported license\"",
        "f\"License failure: Exception trying to read file: {apath}\"",
        "\"EXCEPTION: while processing {1} - {0}\"",
        "\"edk2toolext\"",
        "\"**\"",
        "\"*.py\"",
        "\"ascii\"",
        "f\"Found {error} error(s) in {len(pyfiles)} file(s)\""
    ],
    "variables": [
        "WIN_EOL",
        "UNIX_EOL",
        "content_uni",
        "content_no_nl",
        "lic",
        "contents",
        "found",
        "found",
        "p",
        "pyfiles",
        "error",
        "aRelativePath"
    ],
    "comments": [
        "",
        "Quick script to check that python code in the package",
        "aligns with pep8 and file encoding.  I have not found",
        "a way to enforce that with tools like flake8",
        "",
        "There must be a better way.  :)",
        "",
        "Copyright (c) Microsoft Corporation",
        "",
        "SPDX-License-Identifier: BSD-2-Clause-Patent",
        "",
        "windows",
        "since UNIX EOL is substring of WIN EOL replace WIN with something",
        "else and then look for UNIX",
        "Don't check EOL.  Use .gitattributes",
        "if(not TestLineEndingsOk(a, True)):",
        "error += 1"
    ],
    "docstrings": [],
    "functions": [
        "TestEncodingOk",
        "TestLineEndingsOk",
        "TestFilenameLowercase",
        "TestNoSpaces",
        "TestRequiredLicense"
    ],
    "classes": []
}