{
    "identifiers": [
        "s",
        "rstr2hex",
        "rstr_md5",
        "str2rstr_utf8",
        "s",
        "s",
        "rstr2b64",
        "rstr_md5",
        "str2rstr_utf8",
        "s",
        "s",
        "e",
        "rstr2any",
        "rstr_md5",
        "str2rstr_utf8",
        "s",
        "e",
        "k",
        "d",
        "rstr2hex",
        "rstr_hmac_md5",
        "str2rstr_utf8",
        "k",
        "str2rstr_utf8",
        "d",
        "k",
        "d",
        "rstr2b64",
        "rstr_hmac_md5",
        "str2rstr_utf8",
        "k",
        "str2rstr_utf8",
        "d",
        "k",
        "d",
        "e",
        "rstr2any",
        "rstr_hmac_md5",
        "str2rstr_utf8",
        "k",
        "str2rstr_utf8",
        "d",
        "e",
        "hex_md5",
        "s",
        "binl2rstr",
        "binl_md5",
        "rstr2binl",
        "s",
        "s",
        "key",
        "data",
        "rstr2binl",
        "key",
        "bkey",
        "bkey",
        "binl_md5",
        "bkey",
        "key",
        "i",
        "i",
        "ipad",
        "i",
        "bkey",
        "i",
        "opad",
        "i",
        "bkey",
        "i",
        "binl_md5",
        "ipad",
        "rstr2binl",
        "data",
        "data",
        "binl2rstr",
        "binl_md5",
        "opad",
        "hash",
        "input",
        "hexcase",
        "e",
        "hexcase",
        "hexcase",
        "i",
        "input",
        "i",
        "x",
        "input",
        "i",
        "output",
        "hex_tab",
        "x",
        "hex_tab",
        "x",
        "output",
        "input",
        "b64pad",
        "e",
        "b64pad",
        "input",
        "i",
        "len",
        "i",
        "input",
        "i",
        "i",
        "len",
        "input",
        "i",
        "i",
        "len",
        "input",
        "i",
        "j",
        "j",
        "i",
        "j",
        "input",
        "output",
        "b64pad",
        "output",
        "tab",
        "triplet",
        "j",
        "output",
        "input",
        "encoding",
        "encoding",
        "input",
        "i",
        "i",
        "dividend",
        "i",
        "dividend",
        "i",
        "input",
        "i",
        "input",
        "i",
        "input",
        "encoding",
        "full_length",
        "j",
        "j",
        "full_length",
        "j",
        "quotient",
        "x",
        "i",
        "i",
        "dividend",
        "i",
        "x",
        "x",
        "dividend",
        "i",
        "q",
        "x",
        "divisor",
        "x",
        "q",
        "divisor",
        "quotient",
        "q",
        "quotient",
        "quotient",
        "q",
        "remainders",
        "j",
        "x",
        "dividend",
        "quotient",
        "i",
        "remainders",
        "i",
        "i",
        "output",
        "encoding",
        "remainders",
        "i",
        "output",
        "input",
        "i",
        "input",
        "x",
        "input",
        "i",
        "y",
        "i",
        "input",
        "input",
        "i",
        "x",
        "x",
        "y",
        "y",
        "x",
        "x",
        "y",
        "i",
        "x",
        "output",
        "x",
        "x",
        "output",
        "x",
        "x",
        "x",
        "output",
        "x",
        "x",
        "x",
        "x",
        "output",
        "x",
        "x",
        "x",
        "x",
        "output",
        "input",
        "i",
        "input",
        "i",
        "output",
        "input",
        "i",
        "input",
        "i",
        "output",
        "input",
        "i",
        "input",
        "i",
        "output",
        "input",
        "i",
        "input",
        "i",
        "output",
        "input",
        "input",
        "i",
        "output",
        "i",
        "output",
        "i",
        "i",
        "input",
        "i",
        "output",
        "i",
        "input",
        "i",
        "i",
        "output",
        "input",
        "i",
        "input",
        "i",
        "output",
        "input",
        "i",
        "i",
        "output",
        "x",
        "len",
        "x",
        "len",
        "len",
        "x",
        "len",
        "len",
        "i",
        "x",
        "i",
        "a",
        "md5_ff",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_ff",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_ff",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_ff",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_ff",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_ff",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_ff",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_ff",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_ff",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_ff",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_ff",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_ff",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_ff",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_ff",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_ff",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_ff",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_gg",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_gg",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_gg",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_gg",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_gg",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_gg",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_gg",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_gg",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_gg",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_gg",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_gg",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_gg",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_gg",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_gg",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_gg",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_gg",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_hh",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_hh",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_hh",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_hh",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_hh",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_hh",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_hh",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_hh",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_hh",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_hh",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_hh",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_hh",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_hh",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_hh",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_hh",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_hh",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_ii",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_ii",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_ii",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_ii",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_ii",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_ii",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_ii",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_ii",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_ii",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_ii",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_ii",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_ii",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "md5_ii",
        "a",
        "b",
        "c",
        "d",
        "x",
        "i",
        "d",
        "md5_ii",
        "d",
        "a",
        "b",
        "c",
        "x",
        "i",
        "c",
        "md5_ii",
        "c",
        "d",
        "a",
        "b",
        "x",
        "i",
        "b",
        "md5_ii",
        "b",
        "c",
        "d",
        "a",
        "x",
        "i",
        "a",
        "safe_add",
        "a",
        "olda",
        "b",
        "safe_add",
        "b",
        "oldb",
        "c",
        "safe_add",
        "c",
        "oldc",
        "d",
        "safe_add",
        "d",
        "oldd",
        "a",
        "b",
        "c",
        "d",
        "q",
        "a",
        "b",
        "x",
        "s",
        "t",
        "safe_add",
        "bit_rol",
        "safe_add",
        "safe_add",
        "a",
        "q",
        "safe_add",
        "x",
        "t",
        "s",
        "b",
        "a",
        "b",
        "c",
        "d",
        "x",
        "s",
        "t",
        "md5_cmn",
        "b",
        "c",
        "b",
        "d",
        "a",
        "b",
        "x",
        "s",
        "t",
        "a",
        "b",
        "c",
        "d",
        "x",
        "s",
        "t",
        "md5_cmn",
        "b",
        "d",
        "c",
        "d",
        "a",
        "b",
        "x",
        "s",
        "t",
        "a",
        "b",
        "c",
        "d",
        "x",
        "s",
        "t",
        "md5_cmn",
        "b",
        "c",
        "d",
        "a",
        "b",
        "x",
        "s",
        "t",
        "a",
        "b",
        "c",
        "d",
        "x",
        "s",
        "t",
        "md5_cmn",
        "c",
        "b",
        "d",
        "a",
        "b",
        "x",
        "s",
        "t",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "lsw",
        "msw",
        "lsw",
        "num",
        "cnt",
        "num",
        "cnt",
        "num",
        "cnt"
    ],
    "literals": [
        "\"\"",
        "\"abc\"",
        "\"900150983cd24fb0d6963f7d28e17f72\"",
        "\"0123456789ABCDEF\"",
        "\"0123456789abcdef\"",
        "\"\"",
        "''",
        "\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\""
    ],
    "variables": [
        "hexcase",
        "b64pad",
        "bkey",
        "ipad",
        "opad",
        "i",
        "hash",
        "hex_tab",
        "output",
        "x",
        "i",
        "tab",
        "output",
        "len",
        "i",
        "triplet",
        "j",
        "divisor",
        "i",
        "j",
        "q",
        "x",
        "quotient",
        "dividend",
        "full_length",
        "remainders",
        "output",
        "output",
        "i",
        "x",
        "y",
        "output",
        "i",
        "output",
        "i",
        "output",
        "i",
        "i",
        "output",
        "i",
        "a",
        "b",
        "c",
        "d",
        "i",
        "olda",
        "a",
        "oldb",
        "b",
        "oldc",
        "c",
        "oldd",
        "d",
        "lsw",
        "msw"
    ],
    "comments": [
        "hex output format. 0 - lowercase; 1 - uppercase",
        "base-64 pad character. \"=\" for strict RFC compliance",
        "Convert to an array of 16-bit big-endian values, forming the dividend",
        "Convert the remainders to the output string",
        "Decode utf-16 surrogate pairs",
        "Encode output as utf-8",
        "append padding"
    ],
    "docstrings": [
        "* A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.",
        "* Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.",
        "* These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings",
        "* Perform a simple self-test to see if the VM is working",
        "* Calculate the MD5 of a raw string",
        "* Calculate the HMAC-MD5, of a key and some data (raw strings)",
        "* Convert a raw string to a hex string",
        "* Convert a raw string to a base-64 string",
        "* Convert a raw string to an arbitrary string encoding",
        "* Repeatedly perform a long division. The binary array forms the dividend,\n   * the length of the encoding is the divisor. Once computed, the quotient\n   * forms the dividend for the next step. All remainders are stored for later\n   * use.",
        "* Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.",
        "* Encode a string as utf-16",
        "* Convert a raw string to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.",
        "* Convert an array of little-endian words to a string",
        "* Calculate the MD5 of an array of little-endian words, and a bit length.",
        "* These functions implement the four basic operations the algorithm uses.",
        "* Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.",
        "* Bitwise rotate a 32-bit number to the left."
    ],
    "functions": [
        "hex_md5",
        "b64_md5",
        "any_md5",
        "hex_hmac_md5",
        "b64_hmac_md5",
        "any_hmac_md5",
        "md5_vm_test",
        "rstr_md5",
        "rstr_hmac_md5",
        "rstr2hex",
        "rstr2b64",
        "rstr2any",
        "str2rstr_utf8",
        "str2rstr_utf16le",
        "str2rstr_utf16be",
        "rstr2binl",
        "binl2rstr",
        "binl_md5",
        "md5_cmn",
        "md5_ff",
        "md5_gg",
        "md5_hh",
        "md5_ii",
        "safe_add",
        "bit_rol"
    ],
    "classes": []
}