{
    "identifiers": [
        "item",
        "Phaser",
        "camera",
        "Phaser",
        "progress",
        "camera",
        "Phaser",
        "progress",
        "camera",
        "Phaser",
        "progress",
        "x",
        "y",
        "camera",
        "Phaser",
        "progress",
        "camera",
        "Phaser",
        "progress",
        "zoom",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "game",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "time",
        "average",
        "interpolation",
        "canvas",
        "context",
        "parent",
        "key",
        "value",
        "args",
        "init",
        "Phaser",
        "display",
        "key",
        "key",
        "bob",
        "Phaser",
        "index",
        "item",
        "args",
        "item",
        "Phaser",
        "items",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "light",
        "Phaser",
        "particle",
        "Phaser",
        "key",
        "value",
        "particle",
        "Phaser",
        "key",
        "t",
        "value",
        "particle",
        "Phaser",
        "emitter",
        "Phaser",
        "particle",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "quantity",
        "stepRate",
        "point",
        "Phaser",
        "text",
        "textObject",
        "Phaser",
        "triangle",
        "Phaser",
        "hitArea",
        "x",
        "y",
        "gameObject",
        "Phaser",
        "Phaser",
        "Actions",
        "Angle",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "Call",
        "Phaser",
        "items",
        "callback",
        "context",
        "GetFirst",
        "Phaser",
        "items",
        "compare",
        "index",
        "Phaser",
        "GetLast",
        "Phaser",
        "items",
        "compare",
        "index",
        "Phaser",
        "GridAlign",
        "Phaser",
        "items",
        "options",
        "IncAlpha",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "IncX",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "IncXY",
        "Phaser",
        "items",
        "x",
        "y",
        "stepX",
        "stepY",
        "index",
        "direction",
        "IncY",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "PlaceOnCircle",
        "Phaser",
        "items",
        "circle",
        "Phaser",
        "startAngle",
        "endAngle",
        "PlaceOnEllipse",
        "Phaser",
        "items",
        "ellipse",
        "Phaser",
        "startAngle",
        "endAngle",
        "PlaceOnLine",
        "Phaser",
        "items",
        "line",
        "Phaser",
        "PlaceOnRectangle",
        "Phaser",
        "items",
        "rect",
        "Phaser",
        "shift",
        "PlaceOnTriangle",
        "Phaser",
        "items",
        "triangle",
        "Phaser",
        "stepRate",
        "PlayAnimation",
        "Phaser",
        "items",
        "key",
        "startFrame",
        "PropertyValueInc",
        "Phaser",
        "items",
        "key",
        "value",
        "step",
        "index",
        "direction",
        "PropertyValueSet",
        "Phaser",
        "items",
        "key",
        "value",
        "step",
        "index",
        "direction",
        "RandomCircle",
        "Phaser",
        "items",
        "circle",
        "Phaser",
        "RandomEllipse",
        "Phaser",
        "items",
        "ellipse",
        "Phaser",
        "RandomLine",
        "Phaser",
        "items",
        "line",
        "Phaser",
        "RandomRectangle",
        "Phaser",
        "items",
        "rect",
        "Phaser",
        "RandomTriangle",
        "Phaser",
        "items",
        "triangle",
        "Phaser",
        "Rotate",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "RotateAround",
        "Phaser",
        "items",
        "point",
        "angle",
        "RotateAroundDistance",
        "Phaser",
        "items",
        "point",
        "angle",
        "distance",
        "ScaleX",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "ScaleXY",
        "Phaser",
        "items",
        "scaleX",
        "scaleY",
        "stepX",
        "stepY",
        "index",
        "direction",
        "ScaleY",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "SetAlpha",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "SetBlendMode",
        "Phaser",
        "items",
        "value",
        "index",
        "direction",
        "SetDepth",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "SetHitArea",
        "Phaser",
        "items",
        "hitArea",
        "hitAreaCallback",
        "SetOrigin",
        "Phaser",
        "items",
        "originX",
        "originY",
        "stepX",
        "stepY",
        "index",
        "direction",
        "SetRotation",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "SetScale",
        "Phaser",
        "items",
        "scaleX",
        "scaleY",
        "stepX",
        "stepY",
        "index",
        "direction",
        "SetScaleX",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "SetScaleY",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "SetTint",
        "Phaser",
        "items",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "SetVisible",
        "Phaser",
        "items",
        "value",
        "index",
        "direction",
        "SetX",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "SetXY",
        "Phaser",
        "items",
        "x",
        "y",
        "stepX",
        "stepY",
        "index",
        "direction",
        "SetY",
        "Phaser",
        "items",
        "value",
        "step",
        "index",
        "direction",
        "ShiftPosition",
        "Phaser",
        "Phaser",
        "items",
        "x",
        "y",
        "direction",
        "output",
        "Shuffle",
        "Phaser",
        "items",
        "SmootherStep",
        "Phaser",
        "items",
        "property",
        "min",
        "max",
        "inc",
        "SmoothStep",
        "Phaser",
        "items",
        "property",
        "min",
        "max",
        "inc",
        "Spread",
        "Phaser",
        "items",
        "property",
        "min",
        "max",
        "inc",
        "ToggleVisible",
        "Phaser",
        "items",
        "WrapInRectangle",
        "Phaser",
        "items",
        "rect",
        "Phaser",
        "padding",
        "Animations",
        "Phaser",
        "manager",
        "Phaser",
        "key",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "config",
        "Phaser",
        "Phaser",
        "index",
        "config",
        "Phaser",
        "Phaser",
        "index",
        "component",
        "Phaser",
        "component",
        "Phaser",
        "includeDelay",
        "index",
        "Phaser",
        "textureManager",
        "Phaser",
        "frames",
        "Phaser",
        "defaultTextureKey",
        "Phaser",
        "component",
        "Phaser",
        "value",
        "Phaser",
        "component",
        "Phaser",
        "Phaser",
        "component",
        "Phaser",
        "frame",
        "Phaser",
        "Phaser",
        "index",
        "Phaser",
        "component",
        "Phaser",
        "component",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "textureKey",
        "textureFrame",
        "index",
        "frame",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "game",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "animation",
        "Phaser",
        "Phaser",
        "key",
        "config",
        "Phaser",
        "Phaser",
        "data",
        "Phaser",
        "Phaser",
        "clearCurrentAnimations",
        "Phaser",
        "key",
        "config",
        "Phaser",
        "Phaser",
        "key",
        "config",
        "Phaser",
        "Phaser",
        "key",
        "Phaser",
        "child",
        "Phaser",
        "key",
        "startFrame",
        "Phaser",
        "Phaser",
        "key",
        "child",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "children",
        "Phaser",
        "Phaser",
        "stagger",
        "key",
        "Phaser",
        "Events",
        "Types",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Cache",
        "Phaser",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "key",
        "key",
        "key",
        "key",
        "Phaser",
        "game",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "Phaser",
        "key",
        "Phaser",
        "Events",
        "Cameras",
        "Scene2D",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "renderableObjects",
        "Phaser",
        "x",
        "y",
        "output",
        "entries",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "resolution",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "color",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "centerOn",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "width",
        "height",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "time",
        "delta",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "pipeline",
        "Phaser",
        "Phaser",
        "pipeline",
        "Phaser",
        "Phaser",
        "Phaser",
        "width",
        "height",
        "Phaser",
        "duration",
        "red",
        "green",
        "blue",
        "callback",
        "context",
        "Phaser",
        "duration",
        "red",
        "green",
        "blue",
        "callback",
        "context",
        "Phaser",
        "duration",
        "red",
        "green",
        "blue",
        "force",
        "callback",
        "context",
        "Phaser",
        "duration",
        "red",
        "green",
        "blue",
        "force",
        "callback",
        "context",
        "Phaser",
        "duration",
        "red",
        "green",
        "blue",
        "force",
        "callback",
        "context",
        "Phaser",
        "duration",
        "intensity",
        "force",
        "callback",
        "context",
        "Phaser",
        "x",
        "y",
        "duration",
        "ease",
        "force",
        "callback",
        "context",
        "Phaser",
        "zoom",
        "duration",
        "ease",
        "force",
        "callback",
        "context",
        "Phaser",
        "resolution",
        "x",
        "y",
        "x",
        "y",
        "target",
        "Phaser",
        "roundPixels",
        "lerpX",
        "lerpY",
        "offsetX",
        "offsetY",
        "Phaser",
        "Phaser",
        "time",
        "delta",
        "value",
        "value",
        "x",
        "y",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "makeMain",
        "name",
        "Phaser",
        "camera",
        "Phaser",
        "makeMain",
        "Phaser",
        "isVisible",
        "config",
        "Phaser",
        "name",
        "Phaser",
        "pointer",
        "Phaser",
        "Phaser",
        "camera",
        "Phaser",
        "Phaser",
        "runDestroy",
        "renderer",
        "Phaser",
        "Phaser",
        "children",
        "Phaser",
        "interpolation",
        "Phaser",
        "time",
        "delta",
        "width",
        "height",
        "Effects",
        "camera",
        "Phaser",
        "Phaser",
        "direction",
        "duration",
        "red",
        "green",
        "blue",
        "force",
        "callback",
        "context",
        "Phaser",
        "time",
        "delta",
        "ctx",
        "pipeline",
        "Phaser",
        "getTintFunction",
        "camera",
        "Phaser",
        "Phaser",
        "duration",
        "red",
        "green",
        "blue",
        "force",
        "callback",
        "context",
        "Phaser",
        "time",
        "delta",
        "ctx",
        "pipeline",
        "Phaser",
        "getTintFunction",
        "camera",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "duration",
        "ease",
        "force",
        "callback",
        "context",
        "Phaser",
        "time",
        "delta",
        "camera",
        "Phaser",
        "Phaser",
        "Phaser",
        "duration",
        "intensity",
        "force",
        "callback",
        "context",
        "Phaser",
        "time",
        "delta",
        "camera",
        "Phaser",
        "Phaser",
        "zoom",
        "duration",
        "ease",
        "force",
        "callback",
        "context",
        "Phaser",
        "time",
        "delta",
        "Events",
        "Controls",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "camera",
        "Phaser",
        "Phaser",
        "delta",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "camera",
        "Phaser",
        "Phaser",
        "delta",
        "GameConfig",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "time",
        "delta",
        "time",
        "delta",
        "removeCanvas",
        "noReturn",
        "Core",
        "GameConfig",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "CreateRenderer",
        "game",
        "Phaser",
        "DebugHeader",
        "game",
        "Phaser",
        "Events",
        "game",
        "Phaser",
        "config",
        "Phaser",
        "Phaser",
        "callback",
        "time",
        "seamless",
        "Phaser",
        "VisibilityHandler",
        "game",
        "Phaser",
        "Create",
        "GenerateTexture",
        "config",
        "Palettes",
        "Curves",
        "Phaser",
        "p0",
        "Phaser",
        "Phaser",
        "p1",
        "Phaser",
        "p2",
        "Phaser",
        "p3",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "divisions",
        "Phaser",
        "t",
        "Phaser",
        "graphics",
        "pointsTotal",
        "data",
        "Phaser",
        "Phaser",
        "graphics",
        "pointsTotal",
        "Phaser",
        "accuracy",
        "Phaser",
        "distance",
        "Phaser",
        "Phaser",
        "Phaser",
        "divisions",
        "Phaser",
        "u",
        "divisions",
        "Phaser",
        "Phaser",
        "divisions",
        "Phaser",
        "Phaser",
        "Phaser",
        "t",
        "Phaser",
        "u",
        "distance",
        "divisions",
        "u",
        "distance",
        "divisions",
        "Phaser",
        "x",
        "y",
        "xRadius",
        "yRadius",
        "startAngle",
        "endAngle",
        "clockwise",
        "rotation",
        "Phaser",
        "Phaser",
        "divisions",
        "Phaser",
        "t",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "data",
        "Phaser",
        "Phaser",
        "p0",
        "Phaser",
        "p1",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "divisions",
        "Phaser",
        "t",
        "Phaser",
        "u",
        "Phaser",
        "Phaser",
        "graphics",
        "data",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "t",
        "Phaser",
        "u",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "curve",
        "Phaser",
        "Phaser",
        "radius",
        "clockwise",
        "rotation",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "Phaser",
        "control1X",
        "Phaser",
        "control1Y",
        "control2X",
        "control2Y",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "controlX",
        "controlY",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "pointsTotal",
        "xRadius",
        "yRadius",
        "startAngle",
        "endAngle",
        "clockwise",
        "rotation",
        "Phaser",
        "data",
        "Phaser",
        "Phaser",
        "accuracy",
        "Phaser",
        "Phaser",
        "t",
        "divisions",
        "Phaser",
        "Phaser",
        "divisions",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "Phaser",
        "points",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "p0",
        "Phaser",
        "p1",
        "Phaser",
        "p2",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "divisions",
        "Phaser",
        "t",
        "Phaser",
        "graphics",
        "pointsTotal",
        "data",
        "Phaser",
        "Phaser",
        "points",
        "Phaser",
        "Phaser",
        "points",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "divisions",
        "Phaser",
        "t",
        "data",
        "Phaser",
        "Data",
        "parent",
        "eventEmitter",
        "Phaser",
        "Phaser",
        "key",
        "key",
        "key",
        "key",
        "search",
        "key",
        "key",
        "data",
        "Phaser",
        "callback",
        "context",
        "args",
        "Phaser",
        "data",
        "key",
        "overwrite",
        "Phaser",
        "key",
        "Phaser",
        "key",
        "key",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "Events",
        "Device",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Display",
        "Align",
        "In",
        "BottomCenter",
        "Phaser",
        "gameObject",
        "alignIn",
        "Phaser",
        "offsetX",
        "offsetY",
        "BottomLeft",
        "Phaser",
        "gameObject",
        "alignIn",
        "Phaser",
        "offsetX",
        "offsetY",
        "BottomRight",
        "Phaser",
        "gameObject",
        "alignIn",
        "Phaser",
        "offsetX",
        "offsetY",
        "Center",
        "Phaser",
        "gameObject",
        "alignIn",
        "Phaser",
        "offsetX",
        "offsetY",
        "LeftCenter",
        "Phaser",
        "gameObject",
        "alignIn",
        "Phaser",
        "offsetX",
        "offsetY",
        "QuickSet",
        "Phaser",
        "child",
        "alignIn",
        "Phaser",
        "position",
        "offsetX",
        "offsetY",
        "RightCenter",
        "Phaser",
        "gameObject",
        "alignIn",
        "Phaser",
        "offsetX",
        "offsetY",
        "TopCenter",
        "Phaser",
        "gameObject",
        "alignIn",
        "Phaser",
        "offsetX",
        "offsetY",
        "TopLeft",
        "Phaser",
        "gameObject",
        "alignIn",
        "Phaser",
        "offsetX",
        "offsetY",
        "TopRight",
        "Phaser",
        "gameObject",
        "alignIn",
        "Phaser",
        "offsetX",
        "offsetY",
        "To",
        "BottomCenter",
        "Phaser",
        "gameObject",
        "alignTo",
        "Phaser",
        "offsetX",
        "offsetY",
        "BottomLeft",
        "Phaser",
        "gameObject",
        "alignTo",
        "Phaser",
        "offsetX",
        "offsetY",
        "BottomRight",
        "Phaser",
        "gameObject",
        "alignTo",
        "Phaser",
        "offsetX",
        "offsetY",
        "LeftBottom",
        "Phaser",
        "gameObject",
        "alignTo",
        "Phaser",
        "offsetX",
        "offsetY",
        "LeftCenter",
        "Phaser",
        "gameObject",
        "alignTo",
        "Phaser",
        "offsetX",
        "offsetY",
        "LeftTop",
        "Phaser",
        "gameObject",
        "alignTo",
        "Phaser",
        "offsetX",
        "offsetY",
        "RightBottom",
        "Phaser",
        "gameObject",
        "alignTo",
        "Phaser",
        "offsetX",
        "offsetY",
        "RightCenter",
        "Phaser",
        "gameObject",
        "alignTo",
        "Phaser",
        "offsetX",
        "offsetY",
        "RightTop",
        "Phaser",
        "gameObject",
        "alignTo",
        "Phaser",
        "offsetX",
        "offsetY",
        "TopCenter",
        "Phaser",
        "gameObject",
        "alignTo",
        "Phaser",
        "offsetX",
        "offsetY",
        "TopLeft",
        "Phaser",
        "gameObject",
        "alignTo",
        "Phaser",
        "offsetX",
        "offsetY",
        "TopRight",
        "Phaser",
        "gameObject",
        "alignTo",
        "Phaser",
        "offsetX",
        "offsetY",
        "Bounds",
        "CenterOn",
        "Phaser",
        "gameObject",
        "x",
        "y",
        "GetBottom",
        "gameObject",
        "Phaser",
        "GetCenterX",
        "gameObject",
        "Phaser",
        "GetCenterY",
        "gameObject",
        "Phaser",
        "GetLeft",
        "gameObject",
        "Phaser",
        "GetOffsetX",
        "gameObject",
        "Phaser",
        "GetOffsetY",
        "gameObject",
        "Phaser",
        "GetRight",
        "gameObject",
        "Phaser",
        "GetTop",
        "gameObject",
        "Phaser",
        "SetBottom",
        "Phaser",
        "gameObject",
        "value",
        "SetCenterX",
        "Phaser",
        "gameObject",
        "x",
        "SetCenterY",
        "Phaser",
        "gameObject",
        "y",
        "SetLeft",
        "Phaser",
        "gameObject",
        "value",
        "SetRight",
        "Phaser",
        "gameObject",
        "value",
        "SetTop",
        "Phaser",
        "gameObject",
        "value",
        "Canvas",
        "CanvasInterpolation",
        "setCrisp",
        "canvas",
        "setBicubic",
        "canvas",
        "CanvasPool",
        "create",
        "parent",
        "width",
        "height",
        "canvasType",
        "selfParent",
        "create2D",
        "parent",
        "width",
        "height",
        "createWebGL",
        "parent",
        "width",
        "height",
        "first",
        "canvasType",
        "remove",
        "parent",
        "total",
        "free",
        "disableSmoothing",
        "enableSmoothing",
        "Smoothing",
        "getPrefix",
        "context",
        "enable",
        "context",
        "disable",
        "context",
        "isEnabled",
        "context",
        "TouchAction",
        "canvas",
        "value",
        "UserSelect",
        "canvas",
        "value",
        "Color",
        "Interpolate",
        "RGBWithRGB",
        "r1",
        "g1",
        "b1",
        "r2",
        "g2",
        "b2",
        "length",
        "index",
        "ColorWithColor",
        "color1",
        "Phaser",
        "color2",
        "Phaser",
        "length",
        "index",
        "ColorWithRGB",
        "color1",
        "Phaser",
        "r",
        "g",
        "b",
        "length",
        "index",
        "red",
        "green",
        "blue",
        "alpha",
        "Phaser",
        "red",
        "green",
        "blue",
        "alpha",
        "updateHSV",
        "Phaser",
        "red",
        "green",
        "blue",
        "alpha",
        "Phaser",
        "color",
        "Phaser",
        "h",
        "s",
        "v",
        "Phaser",
        "Phaser",
        "shade",
        "Phaser",
        "min",
        "max",
        "Phaser",
        "min",
        "max",
        "Phaser",
        "amount",
        "Phaser",
        "amount",
        "Phaser",
        "amount",
        "Phaser",
        "amount",
        "Phaser",
        "amount",
        "Phaser",
        "color",
        "color",
        "red",
        "green",
        "blue",
        "red",
        "green",
        "blue",
        "alpha",
        "hex",
        "Phaser",
        "h",
        "s",
        "l",
        "Phaser",
        "s",
        "v",
        "h",
        "s",
        "v",
        "Phaser",
        "Phaser",
        "p",
        "q",
        "t",
        "input",
        "Phaser",
        "input",
        "input",
        "Phaser",
        "min",
        "max",
        "Phaser",
        "rgb",
        "Phaser",
        "r",
        "g",
        "b",
        "Phaser",
        "Phaser",
        "r",
        "g",
        "b",
        "a",
        "prefix",
        "input",
        "Phaser",
        "Masks",
        "scene",
        "Phaser",
        "renderable",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "renderable",
        "Phaser",
        "renderer",
        "Phaser",
        "Phaser",
        "maskedObject",
        "Phaser",
        "camera",
        "Phaser",
        "renderer",
        "Phaser",
        "Phaser",
        "renderer",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "camera",
        "Phaser",
        "renderer",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "graphicsGeometry",
        "Phaser",
        "Phaser",
        "graphicsGeometry",
        "Phaser",
        "renderer",
        "Phaser",
        "mask",
        "Phaser",
        "camera",
        "Phaser",
        "renderer",
        "Phaser",
        "renderer",
        "Phaser",
        "mask",
        "Phaser",
        "camera",
        "Phaser",
        "renderer",
        "Phaser",
        "DOM",
        "AddToDOM",
        "element",
        "parent",
        "DOMContentLoaded",
        "callback",
        "GetTarget",
        "element",
        "ParseXML",
        "data",
        "RemoveFromDOM",
        "element",
        "callback",
        "forceSetTimeOut",
        "Events",
        "args",
        "fn",
        "context",
        "Phaser",
        "fn",
        "context",
        "Phaser",
        "fn",
        "context",
        "Phaser",
        "fn",
        "context",
        "once",
        "Phaser",
        "fn",
        "context",
        "once",
        "Phaser",
        "Phaser",
        "GameObjects",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "font",
        "text",
        "size",
        "align",
        "width",
        "height",
        "Phaser",
        "callback",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "RetroFont",
        "Parse",
        "scene",
        "Phaser",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "font",
        "text",
        "size",
        "align",
        "size",
        "spacing",
        "value",
        "round",
        "font",
        "size",
        "align",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "visible",
        "index",
        "Phaser",
        "callback",
        "quantity",
        "frame",
        "Phaser",
        "Phaser",
        "visible",
        "Phaser",
        "quantity",
        "frame",
        "Phaser",
        "Phaser",
        "visible",
        "Phaser",
        "child",
        "Phaser",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "blitter",
        "Phaser",
        "x",
        "y",
        "frame",
        "visible",
        "Phaser",
        "Phaser",
        "frame",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "BuildGameObject",
        "scene",
        "Phaser",
        "gameObject",
        "Phaser",
        "config",
        "Phaser",
        "BuildGameObjectAnimation",
        "sprite",
        "Phaser",
        "config",
        "Phaser",
        "Components",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "delay",
        "key",
        "startFrame",
        "Phaser",
        "key",
        "startFrame",
        "Phaser",
        "atFrame",
        "Phaser",
        "Phaser",
        "fromFrame",
        "Phaser",
        "Phaser",
        "key",
        "Phaser",
        "ignoreIfPlaying",
        "startFrame",
        "Phaser",
        "key",
        "Phaser",
        "ignoreIfPlaying",
        "startFrame",
        "Phaser",
        "key",
        "startFrame",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "key",
        "animation",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "includeDelay",
        "Phaser",
        "Phaser",
        "delay",
        "Phaser",
        "Phaser",
        "frame",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "time",
        "delta",
        "animationFrame",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "a",
        "b",
        "c",
        "d",
        "tx",
        "ty",
        "x",
        "y",
        "x",
        "y",
        "angle",
        "rhs",
        "Phaser",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "offsetX",
        "offsetY",
        "a",
        "b",
        "c",
        "d",
        "tx",
        "ty",
        "x",
        "y",
        "point",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "src",
        "ctx",
        "ctx",
        "a",
        "b",
        "c",
        "d",
        "tx",
        "ty",
        "x",
        "y",
        "rotation",
        "scaleX",
        "scaleY",
        "x",
        "y",
        "output",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "children",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "source",
        "Phaser",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "child",
        "Phaser",
        "Phaser",
        "Phaser",
        "child",
        "Phaser",
        "Phaser",
        "index",
        "Phaser",
        "index",
        "Phaser",
        "child",
        "Phaser",
        "property",
        "handler",
        "Phaser",
        "name",
        "Phaser",
        "startIndex",
        "length",
        "Phaser",
        "property",
        "value",
        "startIndex",
        "endIndex",
        "Phaser",
        "property",
        "value",
        "startIndex",
        "endIndex",
        "Phaser",
        "property",
        "value",
        "startIndex",
        "endIndex",
        "child1",
        "Phaser",
        "child2",
        "Phaser",
        "Phaser",
        "child",
        "Phaser",
        "index",
        "Phaser",
        "child",
        "Phaser",
        "Phaser",
        "destroyChild",
        "Phaser",
        "index",
        "destroyChild",
        "Phaser",
        "startIndex",
        "endIndex",
        "destroyChild",
        "Phaser",
        "destroyChild",
        "Phaser",
        "child",
        "Phaser",
        "Phaser",
        "child",
        "Phaser",
        "Phaser",
        "child",
        "Phaser",
        "Phaser",
        "child",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "oldChild",
        "Phaser",
        "newChild",
        "Phaser",
        "destroyChild",
        "Phaser",
        "child",
        "Phaser",
        "property",
        "value",
        "startIndex",
        "endIndex",
        "Phaser",
        "callback",
        "context",
        "args",
        "Phaser",
        "callback",
        "context",
        "args",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "childA",
        "Phaser",
        "childB",
        "Phaser",
        "Phaser",
        "Events",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "value",
        "value",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "value",
        "value",
        "key",
        "data",
        "key",
        "shape",
        "Phaser",
        "callback",
        "dropZone",
        "args",
        "camera",
        "Phaser",
        "fromScene",
        "scene",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "config",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "config",
        "addToScene",
        "Phaser",
        "config",
        "Phaser",
        "config",
        "Phaser",
        "config",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "font",
        "text",
        "size",
        "Phaser",
        "x",
        "y",
        "font",
        "text",
        "size",
        "align",
        "Phaser",
        "x",
        "y",
        "key",
        "frame",
        "Phaser",
        "x",
        "y",
        "children",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "child",
        "Phaser",
        "Phaser",
        "config",
        "Phaser",
        "children",
        "Phaser",
        "config",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "x",
        "y",
        "vertices",
        "uv",
        "colors",
        "alphas",
        "texture",
        "frame",
        "Phaser",
        "texture",
        "frame",
        "emitters",
        "Phaser",
        "path",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "x",
        "y",
        "radius",
        "startAngle",
        "endAngle",
        "anticlockwise",
        "fillColor",
        "fillAlpha",
        "Phaser",
        "x",
        "y",
        "radius",
        "fillColor",
        "fillAlpha",
        "Phaser",
        "x",
        "y",
        "curve",
        "Phaser",
        "fillColor",
        "fillAlpha",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "fillColor",
        "fillAlpha",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "cellWidth",
        "cellHeight",
        "fillColor",
        "fillAlpha",
        "outlineFillColor",
        "outlineFillAlpha",
        "Phaser",
        "x",
        "y",
        "size",
        "height",
        "fillTop",
        "fillLeft",
        "fillRight",
        "Phaser",
        "x",
        "y",
        "size",
        "height",
        "reversed",
        "fillTop",
        "fillLeft",
        "fillRight",
        "Phaser",
        "x",
        "y",
        "x1",
        "y1",
        "x2",
        "y2",
        "strokeColor",
        "strokeAlpha",
        "Phaser",
        "x",
        "y",
        "points",
        "fillColor",
        "fillAlpha",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "fillColor",
        "fillAlpha",
        "Phaser",
        "x",
        "y",
        "points",
        "innerRadius",
        "outerRadius",
        "fillColor",
        "fillAlpha",
        "Phaser",
        "x",
        "y",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "fillColor",
        "fillAlpha",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "x",
        "y",
        "text",
        "style",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "texture",
        "frame",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "key",
        "tileWidth",
        "tileHeight",
        "width",
        "height",
        "data",
        "insertNull",
        "Phaser",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "options",
        "options",
        "Phaser",
        "lineWidth",
        "color",
        "alpha",
        "Phaser",
        "color",
        "alpha",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "alpha",
        "Phaser",
        "lineWidth",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "alpha",
        "Phaser",
        "key",
        "frame",
        "mode",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "circle",
        "Phaser",
        "Phaser",
        "circle",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "radius",
        "Phaser",
        "x",
        "y",
        "radius",
        "Phaser",
        "rect",
        "Phaser",
        "Phaser",
        "rect",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "radius",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "radius",
        "Phaser",
        "point",
        "Phaser",
        "Phaser",
        "size",
        "Phaser",
        "x",
        "y",
        "size",
        "Phaser",
        "triangle",
        "Phaser",
        "Phaser",
        "triangle",
        "Phaser",
        "Phaser",
        "x0",
        "y0",
        "x1",
        "y1",
        "x2",
        "y2",
        "Phaser",
        "x0",
        "y0",
        "x1",
        "y1",
        "x2",
        "y2",
        "Phaser",
        "line",
        "Phaser",
        "Phaser",
        "x1",
        "y1",
        "x2",
        "y2",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "width",
        "rgb",
        "Phaser",
        "x",
        "y",
        "width",
        "rgb",
        "Phaser",
        "points",
        "Phaser",
        "autoClose",
        "endIndex",
        "Phaser",
        "points",
        "Phaser",
        "autoClose",
        "endIndex",
        "Phaser",
        "ellipse",
        "Phaser",
        "smoothness",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "smoothness",
        "Phaser",
        "ellipse",
        "Phaser",
        "smoothness",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "smoothness",
        "Phaser",
        "x",
        "y",
        "radius",
        "startAngle",
        "endAngle",
        "anticlockwise",
        "overshoot",
        "Phaser",
        "x",
        "y",
        "radius",
        "startAngle",
        "endAngle",
        "anticlockwise",
        "overshoot",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "radians",
        "Phaser",
        "Phaser",
        "key",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "x",
        "y",
        "scene",
        "Phaser",
        "children",
        "Phaser",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "key",
        "frame",
        "visible",
        "active",
        "config",
        "options",
        "time",
        "delta",
        "child",
        "Phaser",
        "addToScene",
        "Phaser",
        "children",
        "Phaser",
        "addToScene",
        "Phaser",
        "child",
        "Phaser",
        "removeFromScene",
        "destroyChild",
        "Phaser",
        "removeFromScene",
        "destroyChild",
        "Phaser",
        "child",
        "Phaser",
        "Phaser",
        "state",
        "createIfNull",
        "x",
        "y",
        "key",
        "frame",
        "visible",
        "nth",
        "state",
        "createIfNull",
        "x",
        "y",
        "key",
        "frame",
        "visible",
        "state",
        "createIfNull",
        "x",
        "y",
        "key",
        "frame",
        "visible",
        "nth",
        "state",
        "createIfNull",
        "x",
        "y",
        "key",
        "frame",
        "visible",
        "x",
        "y",
        "key",
        "frame",
        "visible",
        "createIfNull",
        "x",
        "y",
        "key",
        "frame",
        "visible",
        "createIfNull",
        "x",
        "y",
        "key",
        "frame",
        "visible",
        "key",
        "startFrame",
        "Phaser",
        "value",
        "value",
        "step",
        "Phaser",
        "gameObject",
        "Phaser",
        "gameObject",
        "Phaser",
        "Phaser",
        "destroyChildren",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "x",
        "y",
        "radius",
        "r",
        "g",
        "b",
        "intensity",
        "x",
        "y",
        "radius",
        "r",
        "g",
        "b",
        "intensity",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "rgb",
        "Phaser",
        "intensity",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "radius",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "camera",
        "Phaser",
        "Phaser",
        "callback",
        "Phaser",
        "rgb",
        "Phaser",
        "x",
        "y",
        "radius",
        "rgb",
        "intensity",
        "Phaser",
        "light",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "vertices",
        "uv",
        "colors",
        "alphas",
        "texture",
        "frame",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "x",
        "y",
        "Particles",
        "config",
        "key",
        "defaultValue",
        "emitOnly",
        "config",
        "newKey",
        "value",
        "Phaser",
        "Phaser",
        "key",
        "key1",
        "key2",
        "key1",
        "key2",
        "particle",
        "Phaser",
        "key",
        "value",
        "particle",
        "Phaser",
        "key",
        "t",
        "value",
        "particle",
        "Phaser",
        "key",
        "particle",
        "Phaser",
        "key",
        "particle",
        "Phaser",
        "key",
        "t",
        "x",
        "y",
        "power",
        "epsilon",
        "gravity",
        "particle",
        "Phaser",
        "delta",
        "step",
        "emitter",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "emitter",
        "Phaser",
        "delta",
        "step",
        "processors",
        "emitter",
        "Phaser",
        "delta",
        "step",
        "processors",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "manager",
        "Phaser",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "config",
        "Phaser",
        "output",
        "target",
        "Phaser",
        "offsetX",
        "offsetY",
        "trackVisible",
        "Phaser",
        "Phaser",
        "Phaser",
        "frames",
        "pickRandom",
        "quantity",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "quantity",
        "Phaser",
        "frequency",
        "quantity",
        "Phaser",
        "zoneConfig",
        "Phaser",
        "zoneConfig",
        "Phaser",
        "particleCount",
        "Phaser",
        "callback",
        "context",
        "Phaser",
        "callback",
        "context",
        "Phaser",
        "Phaser",
        "callback",
        "context",
        "Phaser",
        "callback",
        "context",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "frequency",
        "count",
        "Phaser",
        "count",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "count",
        "Phaser",
        "count",
        "x",
        "y",
        "Phaser",
        "time",
        "delta",
        "a",
        "b",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "texture",
        "frame",
        "emitters",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "frame",
        "Phaser",
        "frame",
        "Phaser",
        "frames",
        "Phaser",
        "Phaser",
        "emitter",
        "Phaser",
        "Phaser",
        "emitter",
        "Phaser",
        "Phaser",
        "config",
        "Phaser",
        "well",
        "Phaser",
        "Phaser",
        "config",
        "Phaser",
        "count",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "count",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "time",
        "delta",
        "value",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Zones",
        "source",
        "killOnEnter",
        "particle",
        "Phaser",
        "source",
        "quantity",
        "stepRate",
        "yoyo",
        "seamless",
        "Phaser",
        "Phaser",
        "source",
        "Phaser",
        "particle",
        "Phaser",
        "source",
        "particle",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "path",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "path",
        "Phaser",
        "config",
        "Phaser",
        "value",
        "offset",
        "Phaser",
        "config",
        "startAt",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "time",
        "delta",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "frame",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "frame",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "tint",
        "alpha",
        "key",
        "Phaser",
        "rgb",
        "alpha",
        "entries",
        "x",
        "y",
        "entries",
        "x",
        "y",
        "alpha",
        "tint",
        "key",
        "frame",
        "x",
        "y",
        "alpha",
        "tint",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "radius",
        "startAngle",
        "endAngle",
        "anticlockwise",
        "fillColor",
        "fillAlpha",
        "value",
        "value",
        "value",
        "value",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "curve",
        "Phaser",
        "fillColor",
        "fillAlpha",
        "value",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "fillColor",
        "fillAlpha",
        "width",
        "height",
        "value",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "cellWidth",
        "cellHeight",
        "fillColor",
        "fillAlpha",
        "outlineFillColor",
        "outlineFillAlpha",
        "fillColor",
        "fillAlpha",
        "fillColor",
        "fillAlpha",
        "fillColor",
        "fillAlpha",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "size",
        "height",
        "fillTop",
        "fillLeft",
        "fillRight",
        "value",
        "showTop",
        "showLeft",
        "showRight",
        "fillTop",
        "fillLeft",
        "fillRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "size",
        "height",
        "reversed",
        "fillTop",
        "fillLeft",
        "fillRight",
        "value",
        "reversed",
        "showTop",
        "showLeft",
        "showRight",
        "fillTop",
        "fillLeft",
        "fillRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "x1",
        "y1",
        "x2",
        "y2",
        "strokeColor",
        "strokeAlpha",
        "startWidth",
        "endWidth",
        "x1",
        "y1",
        "x2",
        "y2",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "points",
        "fillColor",
        "fillAlpha",
        "iterations",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "fillColor",
        "fillAlpha",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "data",
        "color",
        "alpha",
        "lineWidth",
        "color",
        "alpha",
        "value",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "points",
        "innerRadius",
        "outerRadius",
        "fillColor",
        "fillAlpha",
        "value",
        "value",
        "value",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "fillColor",
        "fillAlpha",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "time",
        "delta",
        "key",
        "ignoreIfPlaying",
        "startFrame",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "text",
        "style",
        "text",
        "Phaser",
        "size",
        "lines",
        "textStyle",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "text",
        "text",
        "context",
        "wordWrapWidth",
        "text",
        "context",
        "wordWrapWidth",
        "text",
        "value",
        "Phaser",
        "style",
        "Phaser",
        "font",
        "Phaser",
        "family",
        "Phaser",
        "size",
        "Phaser",
        "style",
        "Phaser",
        "width",
        "height",
        "Phaser",
        "color",
        "Phaser",
        "color",
        "Phaser",
        "color",
        "Phaser",
        "color",
        "thickness",
        "Phaser",
        "x",
        "y",
        "color",
        "blur",
        "shadowStroke",
        "shadowFill",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "color",
        "Phaser",
        "blur",
        "Phaser",
        "enabled",
        "Phaser",
        "enabled",
        "Phaser",
        "width",
        "useAdvancedWrap",
        "Phaser",
        "callback",
        "scope",
        "Phaser",
        "align",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "left",
        "top",
        "right",
        "bottom",
        "Phaser",
        "max",
        "Phaser",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "text",
        "Phaser",
        "style",
        "Phaser",
        "style",
        "updateText",
        "setDefaults",
        "Phaser",
        "canvas",
        "context",
        "canvas",
        "context",
        "context",
        "enabled",
        "recalculateMetrics",
        "Phaser",
        "font",
        "updateText",
        "Phaser",
        "family",
        "Phaser",
        "style",
        "Phaser",
        "size",
        "Phaser",
        "Phaser",
        "width",
        "height",
        "Phaser",
        "color",
        "Phaser",
        "color",
        "Phaser",
        "color",
        "Phaser",
        "value",
        "Phaser",
        "color",
        "thickness",
        "Phaser",
        "x",
        "y",
        "color",
        "blur",
        "shadowStroke",
        "shadowFill",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "color",
        "Phaser",
        "blur",
        "Phaser",
        "enabled",
        "Phaser",
        "enabled",
        "Phaser",
        "width",
        "useAdvancedWrap",
        "Phaser",
        "callback",
        "scope",
        "Phaser",
        "align",
        "Phaser",
        "max",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "textureKey",
        "frameKey",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "frame",
        "frame",
        "x",
        "y",
        "x",
        "y",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "child",
        "Phaser",
        "Phaser",
        "time",
        "delta",
        "child",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "width",
        "height",
        "resizeInput",
        "Phaser",
        "width",
        "height",
        "Phaser",
        "radius",
        "Phaser",
        "width",
        "height",
        "Phaser",
        "shape",
        "callback",
        "Phaser",
        "value",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "value",
        "Geom",
        "x",
        "y",
        "radius",
        "circle",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "position",
        "Phaser",
        "quantity",
        "stepRate",
        "output",
        "Phaser",
        "point",
        "x",
        "y",
        "radius",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "circle",
        "Phaser",
        "Phaser",
        "circle",
        "Phaser",
        "angle",
        "source",
        "Phaser",
        "Phaser",
        "circle",
        "Phaser",
        "x",
        "y",
        "circle",
        "Phaser",
        "point",
        "Phaser",
        "circle",
        "Phaser",
        "rect",
        "Phaser",
        "Phaser",
        "source",
        "Phaser",
        "dest",
        "circle",
        "Phaser",
        "toCompare",
        "Phaser",
        "Phaser",
        "circle",
        "Phaser",
        "Phaser",
        "circle",
        "Phaser",
        "position",
        "circle",
        "Phaser",
        "quantity",
        "stepRate",
        "output",
        "Phaser",
        "Phaser",
        "circle",
        "x",
        "y",
        "Phaser",
        "circle",
        "point",
        "Phaser",
        "Phaser",
        "circle",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "ellipse",
        "Phaser",
        "ellipse",
        "Phaser",
        "Phaser",
        "ellipse",
        "Phaser",
        "angle",
        "source",
        "Phaser",
        "Phaser",
        "ellipse",
        "Phaser",
        "x",
        "y",
        "ellipse",
        "Phaser",
        "point",
        "Phaser",
        "ellipse",
        "Phaser",
        "rect",
        "Phaser",
        "Phaser",
        "source",
        "Phaser",
        "dest",
        "x",
        "y",
        "Phaser",
        "position",
        "quantity",
        "stepRate",
        "output",
        "Phaser",
        "Phaser",
        "point",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "width",
        "height",
        "Phaser",
        "ellipse",
        "Phaser",
        "toCompare",
        "Phaser",
        "Phaser",
        "ellipse",
        "Phaser",
        "Phaser",
        "ellipse",
        "Phaser",
        "position",
        "Phaser",
        "ellipse",
        "Phaser",
        "quantity",
        "stepRate",
        "Phaser",
        "ellipse",
        "x",
        "y",
        "Phaser",
        "ellipse",
        "point",
        "Phaser",
        "Phaser",
        "ellipse",
        "Phaser",
        "Intersects",
        "CircleToCircle",
        "circleA",
        "Phaser",
        "circleB",
        "Phaser",
        "CircleToRectangle",
        "circle",
        "Phaser",
        "rect",
        "Phaser",
        "GetRectangleIntersection",
        "Phaser",
        "rectA",
        "Phaser",
        "rectB",
        "Phaser",
        "output",
        "LineToCircle",
        "line",
        "Phaser",
        "circle",
        "Phaser",
        "nearest",
        "Phaser",
        "LineToLine",
        "line1",
        "Phaser",
        "line2",
        "Phaser",
        "Phaser",
        "LineToRectangle",
        "line",
        "Phaser",
        "rect",
        "Phaser",
        "PointToLine",
        "point",
        "Phaser",
        "line",
        "Phaser",
        "lineThickness",
        "PointToLineSegment",
        "point",
        "Phaser",
        "line",
        "Phaser",
        "RectangleToRectangle",
        "rectA",
        "Phaser",
        "rectB",
        "Phaser",
        "RectangleToTriangle",
        "rect",
        "Phaser",
        "triangle",
        "Phaser",
        "RectangleToValues",
        "rect",
        "Phaser",
        "left",
        "right",
        "top",
        "bottom",
        "tolerance",
        "TriangleToCircle",
        "triangle",
        "Phaser",
        "circle",
        "Phaser",
        "TriangleToLine",
        "triangle",
        "Phaser",
        "line",
        "Phaser",
        "TriangleToTriangle",
        "triangleA",
        "Phaser",
        "triangleB",
        "Phaser",
        "x1",
        "y1",
        "x2",
        "y2",
        "line",
        "Phaser",
        "line",
        "Phaser",
        "stepRate",
        "results",
        "line",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "source",
        "Phaser",
        "Phaser",
        "Phaser",
        "source",
        "Phaser",
        "dest",
        "line",
        "Phaser",
        "toCompare",
        "Phaser",
        "line",
        "Phaser",
        "left",
        "right",
        "Phaser",
        "Phaser",
        "line",
        "Phaser",
        "Phaser",
        "line",
        "Phaser",
        "point",
        "Phaser",
        "Phaser",
        "line",
        "Phaser",
        "Phaser",
        "line",
        "Phaser",
        "position",
        "Phaser",
        "line",
        "Phaser",
        "quantity",
        "stepRate",
        "Phaser",
        "line",
        "Phaser",
        "point",
        "Phaser",
        "line",
        "Phaser",
        "line",
        "Phaser",
        "Phaser",
        "position",
        "output",
        "Phaser",
        "quantity",
        "stepRate",
        "output",
        "Phaser",
        "point",
        "x1",
        "y1",
        "x2",
        "y2",
        "Phaser",
        "Phaser",
        "vec2",
        "Phaser",
        "vec2",
        "line",
        "Phaser",
        "line",
        "Phaser",
        "line",
        "Phaser",
        "Phaser",
        "line",
        "x",
        "y",
        "line",
        "Phaser",
        "Phaser",
        "line",
        "Phaser",
        "lineA",
        "Phaser",
        "lineB",
        "Phaser",
        "Phaser",
        "line",
        "angle",
        "Phaser",
        "line",
        "point",
        "Phaser",
        "angle",
        "Phaser",
        "line",
        "x",
        "y",
        "angle",
        "Phaser",
        "line",
        "x",
        "y",
        "angle",
        "length",
        "line",
        "Phaser",
        "line",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "point",
        "source",
        "Phaser",
        "Phaser",
        "Phaser",
        "source",
        "Phaser",
        "dest",
        "point",
        "Phaser",
        "toCompare",
        "Phaser",
        "Phaser",
        "point",
        "Phaser",
        "points",
        "Phaser",
        "point",
        "Phaser",
        "point",
        "Phaser",
        "Phaser",
        "points",
        "Phaser",
        "Phaser",
        "pointA",
        "Phaser",
        "pointB",
        "Phaser",
        "t",
        "Phaser",
        "point",
        "Phaser",
        "point",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pointA",
        "Phaser",
        "pointB",
        "Phaser",
        "Phaser",
        "pointA",
        "Phaser",
        "pointB",
        "Phaser",
        "Phaser",
        "point",
        "magnitude",
        "points",
        "Phaser",
        "polygon",
        "Phaser",
        "Phaser",
        "polygon",
        "Phaser",
        "x",
        "y",
        "polygon",
        "Phaser",
        "point",
        "Phaser",
        "Phaser",
        "polygon",
        "Phaser",
        "polygon",
        "Phaser",
        "output",
        "polygon",
        "Phaser",
        "quantity",
        "stepRate",
        "output",
        "Phaser",
        "polygon",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "points",
        "Phaser",
        "quantity",
        "stepRate",
        "output",
        "Phaser",
        "Phaser",
        "polygon",
        "Phaser",
        "polygon",
        "x",
        "y",
        "width",
        "height",
        "rect",
        "Phaser",
        "Phaser",
        "rect",
        "Phaser",
        "rect",
        "Phaser",
        "rect",
        "x",
        "y",
        "source",
        "Phaser",
        "Phaser",
        "rect",
        "Phaser",
        "x",
        "y",
        "rect",
        "Phaser",
        "point",
        "Phaser",
        "rectA",
        "Phaser",
        "rectB",
        "Phaser",
        "Phaser",
        "source",
        "Phaser",
        "dest",
        "rect",
        "Phaser",
        "rect",
        "Phaser",
        "toCompare",
        "Phaser",
        "Phaser",
        "target",
        "source",
        "Phaser",
        "Phaser",
        "target",
        "source",
        "Phaser",
        "Phaser",
        "rect",
        "Phaser",
        "rect",
        "Phaser",
        "points",
        "rect",
        "Phaser",
        "Phaser",
        "rect",
        "Phaser",
        "Phaser",
        "rectangle",
        "Phaser",
        "position",
        "Phaser",
        "rectangle",
        "Phaser",
        "step",
        "quantity",
        "Phaser",
        "rect",
        "Phaser",
        "Phaser",
        "rect",
        "x",
        "y",
        "Phaser",
        "rectA",
        "Phaser",
        "rectB",
        "Phaser",
        "Phaser",
        "Phaser",
        "rect",
        "Phaser",
        "step",
        "quantity",
        "Phaser",
        "target",
        "points",
        "Phaser",
        "Phaser",
        "target",
        "source",
        "Phaser",
        "Phaser",
        "target",
        "x",
        "y",
        "Phaser",
        "rect",
        "x",
        "y",
        "Phaser",
        "rect",
        "point",
        "Phaser",
        "Phaser",
        "rectA",
        "Phaser",
        "rectB",
        "Phaser",
        "rect",
        "Phaser",
        "Phaser",
        "rectangle",
        "Phaser",
        "angle",
        "Phaser",
        "rect",
        "Phaser",
        "Phaser",
        "outer",
        "Phaser",
        "inner",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "position",
        "output",
        "Phaser",
        "quantity",
        "stepRate",
        "output",
        "Phaser",
        "point",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "line",
        "Phaser",
        "line",
        "Phaser",
        "line",
        "Phaser",
        "line",
        "rect",
        "Phaser",
        "toCompare",
        "Phaser",
        "Phaser",
        "rect",
        "x",
        "y",
        "Phaser",
        "rectA",
        "Phaser",
        "rectB",
        "Phaser",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "triangle",
        "Phaser",
        "x",
        "y",
        "length",
        "Phaser",
        "Phaser",
        "data",
        "holes",
        "scaleX",
        "scaleY",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "triangle",
        "x",
        "y",
        "centerFunc",
        "Phaser",
        "triangle",
        "Phaser",
        "Phaser",
        "triangle",
        "Phaser",
        "Phaser",
        "triangle",
        "Phaser",
        "source",
        "Phaser",
        "Phaser",
        "triangle",
        "Phaser",
        "x",
        "y",
        "triangle",
        "Phaser",
        "points",
        "Phaser",
        "returnFirst",
        "Phaser",
        "triangle",
        "Phaser",
        "point",
        "Phaser",
        "Phaser",
        "Phaser",
        "source",
        "Phaser",
        "dest",
        "triangle",
        "Phaser",
        "triangle",
        "Phaser",
        "toCompare",
        "Phaser",
        "Phaser",
        "triangle",
        "Phaser",
        "position",
        "Phaser",
        "triangle",
        "Phaser",
        "quantity",
        "stepRate",
        "Phaser",
        "triangle",
        "Phaser",
        "Phaser",
        "triangle",
        "x",
        "y",
        "triangle",
        "Phaser",
        "Phaser",
        "triangle",
        "Phaser",
        "Phaser",
        "triangle",
        "angle",
        "Phaser",
        "triangle",
        "point",
        "Phaser",
        "angle",
        "Phaser",
        "triangle",
        "x",
        "y",
        "angle",
        "x",
        "y",
        "Phaser",
        "position",
        "output",
        "Phaser",
        "quantity",
        "stepRate",
        "output",
        "Phaser",
        "point",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "Phaser",
        "Phaser",
        "line",
        "Phaser",
        "line",
        "Phaser",
        "line",
        "Input",
        "Phaser",
        "Phaser",
        "Phaser",
        "CreateInteractiveObject",
        "gameObject",
        "Phaser",
        "hitArea",
        "hitAreaCallback",
        "Phaser",
        "CreatePixelPerfectHandler",
        "textureManager",
        "Phaser",
        "alphaTolerance",
        "Events",
        "Gamepad",
        "pad",
        "Phaser",
        "index",
        "Phaser",
        "Phaser",
        "pad",
        "Phaser",
        "index",
        "Phaser",
        "Phaser",
        "Configs",
        "Events",
        "Phaser",
        "manager",
        "Phaser",
        "pad",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "index",
        "value",
        "index",
        "index",
        "Phaser",
        "sceneInputPlugin",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "index",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "game",
        "Phaser",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "cursor",
        "quantity",
        "Phaser",
        "time",
        "delta",
        "callback",
        "isOnce",
        "callback",
        "isOnce",
        "callback",
        "isOnce",
        "pointer",
        "Phaser",
        "gameObjects",
        "camera",
        "Phaser",
        "output",
        "gameObject",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "pointer",
        "Phaser",
        "pageX",
        "pageY",
        "wasMove",
        "Phaser",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "gameObject",
        "Phaser",
        "Phaser",
        "gameObject",
        "Phaser",
        "gameObject",
        "Phaser",
        "shape",
        "Phaser",
        "callback",
        "dropZone",
        "Phaser",
        "pointer",
        "Phaser",
        "Phaser",
        "pointer",
        "Phaser",
        "pointer",
        "Phaser",
        "state",
        "gameObjects",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "alphaTolerance",
        "gameObjects",
        "Phaser",
        "Phaser",
        "shape",
        "Phaser",
        "callback",
        "Phaser",
        "gameObjects",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "radius",
        "callback",
        "Phaser",
        "gameObjects",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "callback",
        "Phaser",
        "gameObjects",
        "Phaser",
        "Phaser",
        "callback",
        "Phaser",
        "gameObjects",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "callback",
        "Phaser",
        "gameObjects",
        "Phaser",
        "Phaser",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "callback",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "gameObjects",
        "Phaser",
        "Phaser",
        "Phaser",
        "callback",
        "isOnce",
        "callback",
        "isOnce",
        "callback",
        "isOnce",
        "quantity",
        "Phaser",
        "cursor",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "InputPluginCache",
        "Keyboard",
        "keyboardPlugin",
        "Phaser",
        "keys",
        "config",
        "Phaser",
        "Events",
        "inputManager",
        "Phaser",
        "Phaser",
        "keycode",
        "keycode",
        "Phaser",
        "sceneInputPlugin",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "keycode",
        "Phaser",
        "keycode",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "keys",
        "enableCapture",
        "emitOnRepeat",
        "key",
        "Phaser",
        "enableCapture",
        "emitOnRepeat",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "keys",
        "config",
        "Phaser",
        "key",
        "Phaser",
        "duration",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "DownDuration",
        "key",
        "Phaser",
        "duration",
        "JustDown",
        "key",
        "Phaser",
        "JustUp",
        "key",
        "Phaser",
        "Phaser",
        "keyCode",
        "value",
        "Phaser",
        "Phaser",
        "KeyCodes",
        "UpDuration",
        "key",
        "Phaser",
        "duration",
        "Mouse",
        "inputManager",
        "Phaser",
        "Phaser",
        "Phaser",
        "manager",
        "Phaser",
        "id",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "camera",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "steps",
        "Touch",
        "inputManager",
        "Phaser",
        "Phaser",
        "Loader",
        "Events",
        "loader",
        "Phaser",
        "fileConfig",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "fileB",
        "Phaser",
        "xhr",
        "xhr",
        "image",
        "blob",
        "defaultType",
        "image",
        "FileTypes",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "dataKey",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "textureURL",
        "atlasURL",
        "textureXhrSettings",
        "atlasXhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "textureURL",
        "atlasURL",
        "textureXhrSettings",
        "atlasXhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "urlConfig",
        "xhrSettings",
        "audioContext",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "jsonURL",
        "audioURL",
        "audioConfig",
        "audioXhrSettings",
        "jsonXhrSettings",
        "file",
        "Phaser",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "dataType",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "textureURL",
        "fontDataURL",
        "textureXhrSettings",
        "fontDataXhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "urlConfig",
        "xhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "width",
        "height",
        "xhrSettings",
        "Phaser",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "frameConfig",
        "Phaser",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "dataKey",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "atlasURL",
        "path",
        "baseURL",
        "atlasXhrSettings",
        "textureXhrSettings",
        "file",
        "Phaser",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "dataKey",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "start",
        "mapping",
        "xhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "systemKey",
        "sceneKey",
        "xhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "frameConfig",
        "Phaser",
        "xhrSettings",
        "Phaser",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "svgConfig",
        "Phaser",
        "xhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "textureURL",
        "atlasURL",
        "textureXhrSettings",
        "atlasXhrSettings",
        "Phaser",
        "loader",
        "Phaser",
        "key",
        "Phaser",
        "url",
        "xhrSettings",
        "FileTypesManager",
        "install",
        "loader",
        "Phaser",
        "register",
        "key",
        "factoryFunction",
        "destroy",
        "GetURL",
        "file",
        "Phaser",
        "baseURL",
        "Phaser",
        "scene",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "dataKey",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "textureURL",
        "atlasURL",
        "textureXhrSettings",
        "atlasXhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "textureURL",
        "atlasURL",
        "textureXhrSettings",
        "atlasXhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "urls",
        "config",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "jsonURL",
        "audioURL",
        "audioConfig",
        "audioXhrSettings",
        "jsonXhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "dataType",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "textureURL",
        "fontDataURL",
        "textureXhrSettings",
        "fontDataXhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "width",
        "height",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "dataKey",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "atlasURL",
        "path",
        "baseURL",
        "atlasXhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "dataKey",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "start",
        "mapping",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "systemKey",
        "sceneKey",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "frameConfig",
        "Phaser",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "svgConfig",
        "Phaser",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "textureURL",
        "atlasURL",
        "textureXhrSettings",
        "atlasXhrSettings",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "url",
        "xhrSettings",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "url",
        "Phaser",
        "path",
        "Phaser",
        "prefix",
        "Phaser",
        "crossOrigin",
        "Phaser",
        "file",
        "Phaser",
        "Phaser",
        "file",
        "Phaser",
        "data",
        "packKey",
        "file",
        "Phaser",
        "success",
        "file",
        "Phaser",
        "file",
        "Phaser",
        "data",
        "filename",
        "Phaser",
        "data",
        "filename",
        "filetype",
        "Phaser",
        "MergeXHRSettings",
        "local",
        "loader",
        "Phaser",
        "key",
        "files",
        "Phaser",
        "Phaser",
        "Phaser",
        "files",
        "Phaser",
        "Phaser",
        "file",
        "Phaser",
        "file",
        "Phaser",
        "XHRLoader",
        "file",
        "Phaser",
        "globalXHRSettings",
        "XHRSettings",
        "responseType",
        "async",
        "user",
        "password",
        "timeout",
        "Angle",
        "Between",
        "x1",
        "y1",
        "x2",
        "y2",
        "BetweenPoints",
        "point1",
        "Phaser",
        "point2",
        "Phaser",
        "BetweenPointsY",
        "point1",
        "Phaser",
        "point2",
        "Phaser",
        "BetweenY",
        "x1",
        "y1",
        "x2",
        "y2",
        "CounterClockwise",
        "angle",
        "Normalize",
        "angle",
        "Reverse",
        "angle",
        "RotateTo",
        "currentAngle",
        "targetAngle",
        "lerp",
        "ShortestBetween",
        "angle1",
        "angle2",
        "Wrap",
        "angle",
        "WrapDegrees",
        "angle",
        "Average",
        "values",
        "Bernstein",
        "n",
        "i",
        "Between",
        "min",
        "max",
        "CatmullRom",
        "t",
        "p0",
        "p1",
        "p2",
        "p3",
        "CeilTo",
        "value",
        "place",
        "Clamp",
        "value",
        "min",
        "max",
        "Phaser",
        "DegToRad",
        "degrees",
        "Difference",
        "a",
        "b",
        "Distance",
        "Between",
        "x1",
        "y1",
        "x2",
        "y2",
        "Power",
        "x1",
        "y1",
        "x2",
        "y2",
        "pow",
        "Squared",
        "x1",
        "y1",
        "x2",
        "y2",
        "Easing",
        "Back",
        "In",
        "v",
        "overshoot",
        "InOut",
        "v",
        "overshoot",
        "Out",
        "v",
        "overshoot",
        "Bounce",
        "In",
        "v",
        "InOut",
        "v",
        "Out",
        "v",
        "Circular",
        "In",
        "v",
        "InOut",
        "v",
        "Out",
        "v",
        "Cubic",
        "In",
        "v",
        "InOut",
        "v",
        "Out",
        "v",
        "Elastic",
        "In",
        "v",
        "amplitude",
        "period",
        "InOut",
        "v",
        "amplitude",
        "period",
        "Out",
        "v",
        "amplitude",
        "period",
        "Expo",
        "In",
        "v",
        "InOut",
        "v",
        "Out",
        "v",
        "Linear",
        "Linear",
        "v",
        "Quadratic",
        "In",
        "v",
        "InOut",
        "v",
        "Out",
        "v",
        "Quartic",
        "In",
        "v",
        "InOut",
        "v",
        "Out",
        "v",
        "Quintic",
        "In",
        "v",
        "InOut",
        "v",
        "Out",
        "v",
        "Sine",
        "In",
        "v",
        "InOut",
        "v",
        "Out",
        "v",
        "Stepped",
        "Stepped",
        "v",
        "steps",
        "Factorial",
        "value",
        "FloatBetween",
        "min",
        "max",
        "FloorTo",
        "value",
        "place",
        "FromPercent",
        "percent",
        "min",
        "max",
        "Fuzzy",
        "Ceil",
        "value",
        "epsilon",
        "Equal",
        "a",
        "b",
        "epsilon",
        "Floor",
        "value",
        "epsilon",
        "GreaterThan",
        "a",
        "b",
        "epsilon",
        "LessThan",
        "a",
        "b",
        "epsilon",
        "GetSpeed",
        "distance",
        "time",
        "Interpolation",
        "Bezier",
        "v",
        "k",
        "CatmullRom",
        "v",
        "k",
        "CubicBezier",
        "t",
        "p0",
        "p1",
        "p2",
        "p3",
        "Linear",
        "v",
        "k",
        "QuadraticBezier",
        "t",
        "p0",
        "p1",
        "p2",
        "SmootherStep",
        "t",
        "min",
        "max",
        "SmoothStep",
        "t",
        "min",
        "max",
        "IsEven",
        "value",
        "IsEvenStrict",
        "value",
        "Linear",
        "p0",
        "p1",
        "t",
        "m",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "m",
        "Phaser",
        "Phaser",
        "a",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "rad",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "q",
        "Phaser",
        "Phaser",
        "m",
        "Phaser",
        "Phaser",
        "m",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "a",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "z",
        "Phaser",
        "x",
        "y",
        "z",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "z",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "z",
        "Phaser",
        "axis",
        "Phaser",
        "Phaser",
        "angle",
        "Phaser",
        "rad",
        "axis",
        "Phaser",
        "Phaser",
        "rad",
        "Phaser",
        "rad",
        "Phaser",
        "rad",
        "Phaser",
        "q",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "q",
        "Phaser",
        "Phaser",
        "left",
        "right",
        "bottom",
        "top",
        "near",
        "far",
        "Phaser",
        "fovy",
        "aspect",
        "near",
        "far",
        "Phaser",
        "width",
        "height",
        "near",
        "far",
        "Phaser",
        "left",
        "right",
        "bottom",
        "top",
        "near",
        "far",
        "Phaser",
        "eye",
        "Phaser",
        "center",
        "Phaser",
        "up",
        "Phaser",
        "Phaser",
        "yaw",
        "pitch",
        "roll",
        "Phaser",
        "rotation",
        "Phaser",
        "position",
        "Phaser",
        "scale",
        "Phaser",
        "viewMatrix",
        "Phaser",
        "projectionMatrix",
        "Phaser",
        "Phaser",
        "MaxAdd",
        "value",
        "amount",
        "max",
        "MinSub",
        "value",
        "amount",
        "min",
        "Percent",
        "value",
        "min",
        "max",
        "upperMax",
        "Pow2",
        "GetPowerOfTwo",
        "value",
        "IsSizePowerOfTwo",
        "width",
        "height",
        "IsValuePowerOfTwo",
        "value",
        "x",
        "y",
        "z",
        "w",
        "src",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "z",
        "w",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "scale",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "t",
        "Phaser",
        "a",
        "Phaser",
        "b",
        "Phaser",
        "Phaser",
        "view",
        "Phaser",
        "right",
        "Phaser",
        "up",
        "Phaser",
        "Phaser",
        "Phaser",
        "axis",
        "Phaser",
        "rad",
        "Phaser",
        "b",
        "Phaser",
        "Phaser",
        "Phaser",
        "b",
        "Phaser",
        "Phaser",
        "t",
        "Phaser",
        "Phaser",
        "Phaser",
        "rad",
        "Phaser",
        "rad",
        "Phaser",
        "rad",
        "Phaser",
        "Phaser",
        "mat",
        "Phaser",
        "Phaser",
        "RadToDeg",
        "radians",
        "seeds",
        "seeds",
        "seeds",
        "min",
        "max",
        "min",
        "max",
        "min",
        "max",
        "array",
        "array",
        "min",
        "max",
        "state",
        "array",
        "RandomXY",
        "vector",
        "Phaser",
        "scale",
        "Phaser",
        "RandomXYZ",
        "vec3",
        "Phaser",
        "radius",
        "Phaser",
        "RandomXYZW",
        "vec4",
        "Phaser",
        "scale",
        "Phaser",
        "Rotate",
        "point",
        "Phaser",
        "angle",
        "Phaser",
        "RotateAround",
        "point",
        "Phaser",
        "x",
        "y",
        "angle",
        "Phaser",
        "RotateAroundDistance",
        "point",
        "Phaser",
        "x",
        "y",
        "angle",
        "distance",
        "Phaser",
        "RotateVec3",
        "vec",
        "Phaser",
        "axis",
        "Phaser",
        "radians",
        "Phaser",
        "RoundAwayFromZero",
        "value",
        "RoundTo",
        "value",
        "place",
        "SinCosTableGenerator",
        "length",
        "sinAmp",
        "cosAmp",
        "frequency",
        "SmootherStep",
        "x",
        "min",
        "max",
        "SmoothStep",
        "x",
        "min",
        "max",
        "Snap",
        "Ceil",
        "value",
        "gap",
        "start",
        "divide",
        "Floor",
        "value",
        "gap",
        "start",
        "divide",
        "To",
        "value",
        "gap",
        "start",
        "divide",
        "TransformXY",
        "x",
        "y",
        "positionX",
        "positionY",
        "rotation",
        "scaleX",
        "scaleY",
        "output",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "obj",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "azimuth",
        "radius",
        "Phaser",
        "v",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "Phaser",
        "src",
        "Phaser",
        "src",
        "Phaser",
        "src",
        "Phaser",
        "t",
        "Phaser",
        "mat",
        "Phaser",
        "Phaser",
        "mat",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "z",
        "Phaser",
        "Phaser",
        "a",
        "Phaser",
        "b",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "z",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "scale",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "t",
        "Phaser",
        "mat",
        "Phaser",
        "Phaser",
        "mat",
        "Phaser",
        "Phaser",
        "mat",
        "Phaser",
        "Phaser",
        "q",
        "Phaser",
        "Phaser",
        "mat",
        "Phaser",
        "Phaser",
        "viewport",
        "Phaser",
        "invProjectionView",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "z",
        "w",
        "Phaser",
        "src",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "x",
        "y",
        "z",
        "w",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scale",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "v",
        "Phaser",
        "t",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "v",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "mat",
        "Phaser",
        "Phaser",
        "q",
        "Phaser",
        "Phaser",
        "Phaser",
        "Within",
        "a",
        "b",
        "tolerance",
        "Wrap",
        "value",
        "min",
        "max",
        "Physics",
        "Arcade",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "value",
        "x",
        "y",
        "value",
        "value",
        "value",
        "showBody",
        "showVelocity",
        "bodyColor",
        "value",
        "x",
        "y",
        "value",
        "value",
        "value",
        "reset",
        "x",
        "y",
        "enableGameObject",
        "showGameObject",
        "disableGameObject",
        "hideGameObject",
        "x",
        "y",
        "x",
        "x",
        "x",
        "y",
        "x",
        "y",
        "value",
        "value",
        "x",
        "y",
        "radius",
        "offsetX",
        "offsetY",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "object1",
        "object2",
        "collideCallback",
        "processCallback",
        "callbackContext",
        "object1",
        "object2",
        "collideCallback",
        "processCallback",
        "callbackContext",
        "Phaser",
        "Phaser",
        "gameObject",
        "Phaser",
        "x",
        "y",
        "speed",
        "xSpeedMax",
        "ySpeedMax",
        "gameObject",
        "Phaser",
        "destination",
        "Phaser",
        "speed",
        "xSpeedMax",
        "ySpeedMax",
        "source",
        "Phaser",
        "source",
        "Phaser",
        "gameObject",
        "Phaser",
        "x",
        "y",
        "speed",
        "maxTime",
        "gameObject",
        "Phaser",
        "destination",
        "speed",
        "maxTime",
        "angle",
        "speed",
        "vec2",
        "Phaser",
        "Phaser",
        "rotation",
        "speed",
        "vec2",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "value",
        "x",
        "y",
        "value",
        "value",
        "value",
        "showBody",
        "showVelocity",
        "bodyColor",
        "value",
        "x",
        "y",
        "value",
        "value",
        "value",
        "reset",
        "x",
        "y",
        "enableGameObject",
        "showGameObject",
        "disableGameObject",
        "hideGameObject",
        "x",
        "y",
        "x",
        "x",
        "x",
        "y",
        "x",
        "y",
        "value",
        "value",
        "x",
        "y",
        "radius",
        "offsetX",
        "offsetY",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "world",
        "Phaser",
        "gameObject",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "delta",
        "resetDelta",
        "x",
        "y",
        "Phaser",
        "width",
        "height",
        "center",
        "Phaser",
        "radius",
        "offsetX",
        "offsetY",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "obj",
        "x",
        "y",
        "graphic",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "world",
        "Phaser",
        "overlapOnly",
        "object1",
        "object2",
        "collideCallback",
        "processCallback",
        "callbackContext",
        "Phaser",
        "name",
        "Phaser",
        "Components",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "value",
        "x",
        "y",
        "value",
        "value",
        "value",
        "showBody",
        "showVelocity",
        "bodyColor",
        "value",
        "x",
        "y",
        "value",
        "value",
        "value",
        "reset",
        "x",
        "y",
        "enableGameObject",
        "showGameObject",
        "disableGameObject",
        "hideGameObject",
        "x",
        "y",
        "x",
        "x",
        "x",
        "y",
        "x",
        "y",
        "value",
        "value",
        "x",
        "y",
        "width",
        "height",
        "center",
        "radius",
        "offsetX",
        "offsetY",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "Events",
        "world",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "object1",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "object2",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "collideCallback",
        "processCallback",
        "callbackContext",
        "Phaser",
        "object1",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "object2",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "collideCallback",
        "processCallback",
        "callbackContext",
        "Phaser",
        "gameObject",
        "Phaser",
        "isStatic",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "x",
        "y",
        "key",
        "frame",
        "Phaser",
        "children",
        "Phaser",
        "config",
        "Phaser",
        "children",
        "Phaser",
        "config",
        "Phaser",
        "GetOverlapX",
        "body1",
        "Phaser",
        "body2",
        "Phaser",
        "overlapOnly",
        "bias",
        "GetOverlapY",
        "body1",
        "Phaser",
        "body2",
        "Phaser",
        "overlapOnly",
        "bias",
        "Phaser",
        "world",
        "Phaser",
        "scene",
        "Phaser",
        "children",
        "Phaser",
        "config",
        "Phaser",
        "child",
        "Phaser",
        "child",
        "Phaser",
        "x",
        "y",
        "step",
        "Phaser",
        "value",
        "step",
        "Phaser",
        "value",
        "step",
        "Phaser",
        "SeparateX",
        "body1",
        "Phaser",
        "body2",
        "Phaser",
        "overlapOnly",
        "bias",
        "SeparateY",
        "body1",
        "Phaser",
        "body2",
        "Phaser",
        "overlapOnly",
        "bias",
        "world",
        "Phaser",
        "gameObject",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "gameObject",
        "Phaser",
        "update",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "width",
        "height",
        "offsetX",
        "offsetY",
        "Phaser",
        "radius",
        "offsetX",
        "offsetY",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "obj",
        "x",
        "y",
        "graphic",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "world",
        "Phaser",
        "scene",
        "Phaser",
        "children",
        "Phaser",
        "config",
        "Phaser",
        "child",
        "Phaser",
        "child",
        "Phaser",
        "entries",
        "Phaser",
        "Phaser",
        "Tilemap",
        "ProcessTileCallbacks",
        "tile",
        "Phaser",
        "sprite",
        "Phaser",
        "ProcessTileSeparationX",
        "body",
        "Phaser",
        "x",
        "ProcessTileSeparationY",
        "body",
        "Phaser",
        "y",
        "SeparateTile",
        "i",
        "body",
        "Phaser",
        "tile",
        "Phaser",
        "tileWorldRect",
        "Phaser",
        "tilemapLayer",
        "Phaser",
        "Phaser",
        "tileBias",
        "TileCheckX",
        "body",
        "Phaser",
        "tile",
        "Phaser",
        "tileLeft",
        "tileRight",
        "tileBias",
        "TileCheckY",
        "body",
        "Phaser",
        "tile",
        "Phaser",
        "tileTop",
        "tileBottom",
        "tileBias",
        "TileIntersectsBody",
        "tileWorldRect",
        "body",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "bodyType",
        "Phaser",
        "bodyType",
        "Phaser",
        "body",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "body",
        "Phaser",
        "Phaser",
        "body",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "checkLeft",
        "checkRight",
        "checkUp",
        "checkDown",
        "Phaser",
        "left",
        "right",
        "up",
        "down",
        "Phaser",
        "Phaser",
        "Phaser",
        "object1",
        "object2",
        "collideCallback",
        "processCallback",
        "callbackContext",
        "Phaser",
        "object1",
        "object2",
        "collideCallback",
        "processCallback",
        "callbackContext",
        "Phaser",
        "collider",
        "Phaser",
        "Phaser",
        "framerate",
        "time",
        "delta",
        "delta",
        "body",
        "Phaser",
        "delta",
        "body",
        "Phaser",
        "delta",
        "body",
        "Phaser",
        "delta",
        "body1",
        "Phaser",
        "body2",
        "Phaser",
        "processCallback",
        "callbackContext",
        "overlapOnly",
        "body1",
        "Phaser",
        "body2",
        "Phaser",
        "overlapOnly",
        "bias",
        "body1",
        "Phaser",
        "body2",
        "Phaser",
        "circle",
        "Phaser",
        "body",
        "Phaser",
        "object1",
        "object2",
        "overlapCallback",
        "processCallback",
        "callbackContext",
        "object1",
        "object2",
        "collideCallback",
        "processCallback",
        "callbackContext",
        "sprite",
        "Phaser",
        "tilemapLayer",
        "Phaser",
        "Phaser",
        "collideCallback",
        "processCallback",
        "callbackContext",
        "overlapOnly",
        "padding",
        "objects",
        "padding",
        "padding",
        "Impact",
        "world",
        "Phaser",
        "x",
        "y",
        "sx",
        "sy",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "delta",
        "graphic",
        "Phaser",
        "other",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "config",
        "other",
        "Phaser",
        "other",
        "Phaser",
        "axis",
        "res",
        "COLLIDES",
        "tilesize",
        "data",
        "x",
        "y",
        "vx",
        "vy",
        "objectWidth",
        "objectHeight",
        "res",
        "x",
        "y",
        "vx",
        "vy",
        "width",
        "height",
        "rvx",
        "rvy",
        "step",
        "res",
        "t",
        "x",
        "y",
        "vx",
        "vy",
        "width",
        "height",
        "tileX",
        "tileY",
        "Components",
        "x",
        "y",
        "x",
        "y",
        "width",
        "height",
        "scaleX",
        "scaleY",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "callback",
        "scope",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "showBody",
        "showVelocity",
        "bodyColor",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "gameObject",
        "Phaser",
        "sync",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "Events",
        "world",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "gameObject",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "key",
        "frame",
        "Phaser",
        "x",
        "y",
        "key",
        "frame",
        "Phaser",
        "GetVelocity",
        "delta",
        "vel",
        "accel",
        "friction",
        "max",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "world",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "width",
        "height",
        "scaleX",
        "scaleY",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "callback",
        "scope",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "showBody",
        "showVelocity",
        "bodyColor",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "gameObject",
        "Phaser",
        "sync",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "world",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "x",
        "y",
        "x",
        "y",
        "width",
        "height",
        "scaleX",
        "scaleY",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "callback",
        "scope",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "showBody",
        "showVelocity",
        "bodyColor",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "gameObject",
        "Phaser",
        "sync",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "world",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "x",
        "y",
        "x",
        "y",
        "width",
        "height",
        "scaleX",
        "scaleY",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "callback",
        "scope",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "showBody",
        "showVelocity",
        "bodyColor",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "gameObject",
        "Phaser",
        "sync",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "SeparateX",
        "world",
        "Phaser",
        "left",
        "Phaser",
        "right",
        "Phaser",
        "weak",
        "Phaser",
        "SeparateY",
        "world",
        "Phaser",
        "top",
        "Phaser",
        "bottom",
        "Phaser",
        "weak",
        "Phaser",
        "Solver",
        "world",
        "Phaser",
        "bodyA",
        "Phaser",
        "bodyB",
        "Phaser",
        "TYPE",
        "UpdateMotion",
        "body",
        "Phaser",
        "res",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "tileSize",
        "Phaser",
        "tilemapLayer",
        "Phaser",
        "Phaser",
        "options",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "thickness",
        "left",
        "right",
        "top",
        "bottom",
        "Phaser",
        "add",
        "position",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "x",
        "y",
        "sizeX",
        "sizeY",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "time",
        "delta",
        "body",
        "Phaser",
        "hash",
        "size",
        "bodyA",
        "Phaser",
        "bodyB",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "bodies",
        "Phaser",
        "Phaser",
        "Matter",
        "Components",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "categories",
        "Phaser",
        "force",
        "Phaser",
        "Phaser",
        "position",
        "Phaser",
        "force",
        "Phaser",
        "Phaser",
        "speed",
        "Phaser",
        "speed",
        "Phaser",
        "speed",
        "Phaser",
        "speed",
        "Phaser",
        "value",
        "air",
        "fstatic",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "options",
        "Phaser",
        "radius",
        "options",
        "Phaser",
        "radius",
        "sides",
        "options",
        "Phaser",
        "width",
        "height",
        "slope",
        "options",
        "Phaser",
        "body",
        "MatterJS",
        "addToWorld",
        "Phaser",
        "config",
        "options",
        "Phaser",
        "value",
        "Phaser",
        "start",
        "end",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "radians",
        "degrees",
        "x",
        "y",
        "point",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "Events",
        "world",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "options",
        "MatterJS",
        "x",
        "y",
        "width",
        "height",
        "slope",
        "options",
        "MatterJS",
        "x",
        "y",
        "radius",
        "options",
        "maxSides",
        "MatterJS",
        "x",
        "y",
        "sides",
        "radius",
        "options",
        "MatterJS",
        "x",
        "y",
        "vertexSets",
        "options",
        "flagInternal",
        "removeCollinear",
        "minimumArea",
        "MatterJS",
        "key",
        "frame",
        "x",
        "y",
        "columns",
        "rows",
        "columnGap",
        "rowGap",
        "options",
        "MatterJS",
        "x",
        "y",
        "columns",
        "rows",
        "columnGap",
        "rowGap",
        "callback",
        "MatterJS",
        "x",
        "y",
        "columns",
        "rows",
        "columnGap",
        "rowGap",
        "callback",
        "MatterJS",
        "composite",
        "MatterJS",
        "xOffsetA",
        "yOffsetA",
        "xOffsetB",
        "yOffsetB",
        "options",
        "MatterJS",
        "composite",
        "MatterJS",
        "columns",
        "rows",
        "crossBrace",
        "options",
        "MatterJS",
        "x",
        "y",
        "number",
        "size",
        "length",
        "MatterJS",
        "x",
        "y",
        "width",
        "height",
        "wheelSize",
        "MatterJS",
        "x",
        "y",
        "columns",
        "rows",
        "columnGap",
        "rowGap",
        "crossBrace",
        "particleRadius",
        "particleOptions",
        "constraintOptions",
        "MatterJS",
        "bodyA",
        "MatterJS",
        "bodyB",
        "MatterJS",
        "length",
        "stiffness",
        "options",
        "MatterJS",
        "bodyA",
        "MatterJS",
        "bodyB",
        "MatterJS",
        "length",
        "stiffness",
        "options",
        "MatterJS",
        "bodyA",
        "MatterJS",
        "bodyB",
        "MatterJS",
        "length",
        "stiffness",
        "options",
        "MatterJS",
        "bodyB",
        "MatterJS",
        "length",
        "stiffness",
        "options",
        "MatterJS",
        "options",
        "MatterJS",
        "options",
        "MatterJS",
        "x",
        "y",
        "key",
        "frame",
        "options",
        "Phaser",
        "tile",
        "Phaser",
        "options",
        "Phaser",
        "x",
        "y",
        "key",
        "frame",
        "options",
        "Phaser",
        "gameObject",
        "Phaser",
        "options",
        "Phaser",
        "MatterGameObject",
        "world",
        "Phaser",
        "gameObject",
        "Phaser",
        "options",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "world",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "options",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "categories",
        "Phaser",
        "force",
        "Phaser",
        "Phaser",
        "position",
        "Phaser",
        "force",
        "Phaser",
        "Phaser",
        "speed",
        "Phaser",
        "speed",
        "Phaser",
        "speed",
        "Phaser",
        "speed",
        "Phaser",
        "value",
        "air",
        "fstatic",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "options",
        "Phaser",
        "radius",
        "options",
        "Phaser",
        "radius",
        "sides",
        "options",
        "Phaser",
        "width",
        "height",
        "slope",
        "options",
        "Phaser",
        "body",
        "MatterJS",
        "addToWorld",
        "Phaser",
        "config",
        "options",
        "Phaser",
        "value",
        "Phaser",
        "start",
        "end",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "MatterJS",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "delta",
        "correction",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "world",
        "Phaser",
        "x",
        "y",
        "texture",
        "frame",
        "options",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "Phaser",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "destroyMask",
        "renderable",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "frame",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "width",
        "height",
        "key",
        "frame",
        "frame",
        "updateSize",
        "updateOrigin",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "categories",
        "Phaser",
        "force",
        "Phaser",
        "Phaser",
        "position",
        "Phaser",
        "force",
        "Phaser",
        "Phaser",
        "speed",
        "Phaser",
        "speed",
        "Phaser",
        "speed",
        "Phaser",
        "speed",
        "Phaser",
        "value",
        "air",
        "fstatic",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "options",
        "Phaser",
        "radius",
        "options",
        "Phaser",
        "radius",
        "sides",
        "options",
        "Phaser",
        "width",
        "height",
        "slope",
        "options",
        "Phaser",
        "body",
        "MatterJS",
        "addToWorld",
        "Phaser",
        "config",
        "options",
        "Phaser",
        "value",
        "Phaser",
        "start",
        "end",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "Phaser",
        "y",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "world",
        "Phaser",
        "tile",
        "Phaser",
        "options",
        "Phaser",
        "Phaser",
        "options",
        "Phaser",
        "options",
        "Phaser",
        "body",
        "MatterJS",
        "addToWorld",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "categories",
        "Phaser",
        "value",
        "air",
        "fstatic",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "start",
        "end",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "PhysicsEditorParser",
        "parseBody",
        "x",
        "y",
        "w",
        "h",
        "config",
        "parseFixture",
        "fixtureConfig",
        "parseVertices",
        "vertexSets",
        "options",
        "scene",
        "Phaser",
        "world",
        "Phaser",
        "options",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "MatterJS",
        "MatterJS",
        "pointer",
        "Phaser",
        "body",
        "MatterJS",
        "position",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "config",
        "Phaser",
        "MatterJS",
        "MatterJS",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "thickness",
        "left",
        "right",
        "top",
        "bottom",
        "Phaser",
        "add",
        "position",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "scale",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "options",
        "MatterJS",
        "Phaser",
        "deep",
        "Phaser",
        "constraint",
        "MatterJS",
        "deep",
        "Phaser",
        "tilemapLayer",
        "Phaser",
        "Phaser",
        "options",
        "Phaser",
        "tiles",
        "Phaser",
        "options",
        "Phaser",
        "isNonColliding",
        "Phaser",
        "Phaser",
        "time",
        "delta",
        "delta",
        "correction",
        "path",
        "points",
        "Plugins",
        "pluginManager",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "data",
        "PluginCache",
        "register",
        "key",
        "plugin",
        "mapping",
        "custom",
        "registerCustom",
        "key",
        "plugin",
        "mapping",
        "data",
        "hasCore",
        "key",
        "hasCustom",
        "key",
        "getCore",
        "key",
        "getCustom",
        "key",
        "getCustomClass",
        "key",
        "remove",
        "key",
        "removeCustom",
        "key",
        "destroyCorePlugins",
        "destroyCustomPlugins",
        "game",
        "Phaser",
        "Phaser",
        "sys",
        "Phaser",
        "globalPlugins",
        "scenePlugins",
        "key",
        "plugin",
        "mapping",
        "addToScene",
        "Phaser",
        "key",
        "plugin",
        "start",
        "mapping",
        "data",
        "Phaser",
        "key",
        "key",
        "key",
        "key",
        "runAs",
        "Phaser",
        "key",
        "Phaser",
        "key",
        "autoStart",
        "Phaser",
        "key",
        "Phaser",
        "key",
        "key",
        "key",
        "factoryCallback",
        "creatorCallback",
        "key",
        "callback",
        "addToScene",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "pluginManager",
        "Phaser",
        "BlendModes",
        "Renderer",
        "Canvas",
        "game",
        "Phaser",
        "Phaser",
        "gameSize",
        "Phaser",
        "baseSize",
        "Phaser",
        "displaySize",
        "Phaser",
        "resolution",
        "width",
        "height",
        "callback",
        "callback",
        "blendMode",
        "ctx",
        "alpha",
        "scene",
        "Phaser",
        "children",
        "Phaser",
        "interpolationPercentage",
        "camera",
        "Phaser",
        "callback",
        "encoderOptions",
        "x",
        "y",
        "width",
        "height",
        "callback",
        "encoderOptions",
        "x",
        "y",
        "callback",
        "sprite",
        "Phaser",
        "frame",
        "Phaser",
        "camera",
        "Phaser",
        "parentTransformMatrix",
        "Phaser",
        "GetBlendModes",
        "SetTransform",
        "renderer",
        "Phaser",
        "ctx",
        "src",
        "Phaser",
        "camera",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Snapshot",
        "Canvas",
        "sourceCanvas",
        "config",
        "WebGL",
        "sourceCanvas",
        "config",
        "WebGL",
        "Pipelines",
        "Phaser",
        "config",
        "width",
        "height",
        "resolution",
        "mask",
        "Phaser",
        "maskedObject",
        "Phaser",
        "camera",
        "Phaser",
        "mask",
        "Phaser",
        "Phaser",
        "config",
        "scene",
        "Phaser",
        "camera",
        "Phaser",
        "gameObject",
        "Phaser",
        "texture",
        "textureWidth",
        "textureHeight",
        "srcX",
        "srcY",
        "srcWidth",
        "srcHeight",
        "scaleX",
        "scaleY",
        "rotation",
        "flipX",
        "flipY",
        "scrollFactorX",
        "scrollFactorY",
        "displayOriginX",
        "displayOriginY",
        "frameX",
        "frameY",
        "frameWidth",
        "frameHeight",
        "tintTL",
        "tintTR",
        "tintBL",
        "tintBR",
        "tintEffect",
        "uOffset",
        "vOffset",
        "camera",
        "Phaser",
        "parentTransformMatrix",
        "Phaser",
        "gameObject",
        "Phaser",
        "rotation",
        "sprite",
        "Phaser",
        "camera",
        "Phaser",
        "parentTransformMatrix",
        "Phaser",
        "Phaser",
        "config",
        "width",
        "height",
        "resolution",
        "texture",
        "unit",
        "Phaser",
        "texture",
        "unit",
        "texture",
        "unit",
        "sprite",
        "Phaser",
        "Phaser",
        "camera",
        "Phaser",
        "parentTransformMatrix",
        "Phaser",
        "x0",
        "y0",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "u0",
        "v0",
        "u1",
        "v1",
        "tintTL",
        "tintTR",
        "tintBL",
        "tintBR",
        "tintEffect",
        "texture",
        "unit",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "u0",
        "v0",
        "u1",
        "v1",
        "tintTL",
        "tintTR",
        "tintBL",
        "tintEffect",
        "texture",
        "unit",
        "gameObject",
        "Phaser",
        "texture",
        "textureWidth",
        "textureHeight",
        "srcX",
        "srcY",
        "srcWidth",
        "srcHeight",
        "scaleX",
        "scaleY",
        "rotation",
        "flipX",
        "flipY",
        "scrollFactorX",
        "scrollFactorY",
        "displayOriginX",
        "displayOriginY",
        "frameX",
        "frameY",
        "frameWidth",
        "frameHeight",
        "tintTL",
        "tintTR",
        "tintBL",
        "tintBR",
        "tintEffect",
        "uOffset",
        "vOffset",
        "camera",
        "Phaser",
        "parentTransformMatrix",
        "Phaser",
        "skipFlip",
        "frame",
        "Phaser",
        "x",
        "y",
        "tint",
        "alpha",
        "transformMatrix",
        "Phaser",
        "parentTransformMatrix",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "color",
        "alpha",
        "x",
        "y",
        "width",
        "height",
        "currentMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "x0",
        "y0",
        "x1",
        "y1",
        "x2",
        "y2",
        "currentMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "x0",
        "y0",
        "x1",
        "y1",
        "x2",
        "y2",
        "lineWidth",
        "currentMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "path",
        "currentMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "path",
        "lineWidth",
        "pathOpen",
        "currentMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "ax",
        "ay",
        "bx",
        "by",
        "aLineWidth",
        "bLineWidth",
        "currentMatrix",
        "Utils",
        "getTintFromFloats",
        "r",
        "g",
        "b",
        "a",
        "getTintAppendFloatAlpha",
        "rgb",
        "a",
        "getTintAppendFloatAlphaAndSwap",
        "rgb",
        "a",
        "getFloatsFromUintRGB",
        "rgb",
        "getComponentCount",
        "attributes",
        "glContext",
        "config",
        "Phaser",
        "Phaser",
        "name",
        "size",
        "normalized",
        "offset",
        "width",
        "height",
        "resolution",
        "scene",
        "Phaser",
        "camera",
        "Phaser",
        "name",
        "x",
        "name",
        "x",
        "y",
        "name",
        "x",
        "y",
        "z",
        "name",
        "x",
        "y",
        "z",
        "w",
        "name",
        "arr",
        "name",
        "arr",
        "name",
        "arr",
        "name",
        "arr",
        "name",
        "x",
        "name",
        "x",
        "y",
        "name",
        "x",
        "y",
        "z",
        "name",
        "x",
        "y",
        "z",
        "w",
        "name",
        "transpose",
        "matrix",
        "name",
        "transpose",
        "matrix",
        "name",
        "transpose",
        "matrix",
        "game",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "config",
        "gameSize",
        "Phaser",
        "baseSize",
        "Phaser",
        "displaySize",
        "Phaser",
        "resolution",
        "width",
        "height",
        "resolution",
        "callback",
        "target",
        "callback",
        "target",
        "extensionName",
        "extensionName",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "pipelineInstance",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "drawingBufferHeight",
        "x",
        "y",
        "width",
        "height",
        "drawingBufferHeight",
        "pipelineInstance",
        "Phaser",
        "gameObject",
        "Phaser",
        "Phaser",
        "pipelineInstance",
        "Phaser",
        "blendModeId",
        "force",
        "func",
        "equation",
        "index",
        "func",
        "equation",
        "index",
        "texture",
        "textureUnit",
        "flush",
        "framebuffer",
        "updateScissor",
        "program",
        "vertexBuffer",
        "indexBuffer",
        "source",
        "width",
        "height",
        "scaleMode",
        "mipLevel",
        "minFilter",
        "magFilter",
        "wrapT",
        "wrapS",
        "format",
        "pixels",
        "width",
        "height",
        "pma",
        "width",
        "height",
        "renderTexture",
        "addDepthStencilBuffer",
        "vertexShader",
        "fragmentShader",
        "initialDataOrSize",
        "bufferUsage",
        "initialDataOrSize",
        "bufferUsage",
        "texture",
        "framebuffer",
        "program",
        "vertexBuffer",
        "camera",
        "Phaser",
        "camera",
        "Phaser",
        "scene",
        "Phaser",
        "children",
        "Phaser",
        "interpolationPercentage",
        "camera",
        "Phaser",
        "callback",
        "encoderOptions",
        "x",
        "y",
        "width",
        "height",
        "callback",
        "encoderOptions",
        "x",
        "y",
        "callback",
        "srcCanvas",
        "dstTexture",
        "noRepeat",
        "texture",
        "program",
        "name",
        "x",
        "program",
        "name",
        "x",
        "y",
        "program",
        "name",
        "x",
        "y",
        "z",
        "program",
        "name",
        "x",
        "y",
        "z",
        "w",
        "program",
        "name",
        "arr",
        "program",
        "name",
        "arr",
        "program",
        "name",
        "arr",
        "program",
        "name",
        "arr",
        "program",
        "name",
        "x",
        "program",
        "name",
        "x",
        "y",
        "program",
        "name",
        "x",
        "y",
        "z",
        "program",
        "name",
        "x",
        "y",
        "z",
        "w",
        "program",
        "name",
        "transpose",
        "matrix",
        "program",
        "name",
        "transpose",
        "matrix",
        "program",
        "name",
        "transpose",
        "matrix",
        "ScaleModes",
        "Scale",
        "Center",
        "Orientation",
        "ScaleModes",
        "Zoom",
        "Events",
        "Phaser",
        "game",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "config",
        "config",
        "orientation",
        "width",
        "height",
        "width",
        "height",
        "width",
        "height",
        "value",
        "pageX",
        "pageY",
        "fullscreenOptions",
        "fullscreenOptions",
        "time",
        "delta",
        "Scenes",
        "Events",
        "GetPhysicsPlugins",
        "sys",
        "Phaser",
        "GetScenePlugins",
        "sys",
        "Phaser",
        "game",
        "Phaser",
        "sceneConfig",
        "Phaser",
        "key",
        "sceneConfig",
        "Phaser",
        "Phaser",
        "autoStart",
        "data",
        "Phaser",
        "scene",
        "Phaser",
        "Phaser",
        "time",
        "delta",
        "renderer",
        "Phaser",
        "Phaser",
        "isActive",
        "inReverse",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "key",
        "key",
        "key",
        "key",
        "data",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "key",
        "Phaser",
        "to",
        "Phaser",
        "index",
        "Phaser",
        "key",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "keyA",
        "Phaser",
        "keyB",
        "Phaser",
        "Phaser",
        "keyA",
        "Phaser",
        "keyB",
        "Phaser",
        "Phaser",
        "keyA",
        "Phaser",
        "keyB",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "data",
        "Phaser",
        "config",
        "key",
        "sceneConfig",
        "Phaser",
        "Phaser",
        "autoStart",
        "data",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "key",
        "data",
        "Phaser",
        "key",
        "Phaser",
        "key",
        "Phaser",
        "value",
        "key",
        "data",
        "Phaser",
        "value",
        "key",
        "Phaser",
        "key",
        "key",
        "key",
        "keyA",
        "keyB",
        "Phaser",
        "keyA",
        "keyB",
        "Phaser",
        "keyA",
        "keyB",
        "Phaser",
        "key",
        "Phaser",
        "Phaser",
        "key",
        "Phaser",
        "key",
        "Phaser",
        "key",
        "Phaser",
        "key",
        "Phaser",
        "key",
        "Phaser",
        "key",
        "Phaser",
        "Settings",
        "Phaser",
        "key",
        "key",
        "Phaser",
        "Phaser",
        "key",
        "create",
        "config",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "game",
        "Phaser",
        "time",
        "delta",
        "renderer",
        "Phaser",
        "Phaser",
        "data",
        "Phaser",
        "data",
        "Phaser",
        "data",
        "Phaser",
        "data",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "data",
        "Phaser",
        "data",
        "data",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "time",
        "delta",
        "Sound",
        "Phaser",
        "manager",
        "Phaser",
        "key",
        "config",
        "key",
        "marker",
        "marker",
        "markerName",
        "markerName",
        "config",
        "time",
        "delta",
        "Phaser",
        "game",
        "Phaser",
        "Phaser",
        "Phaser",
        "key",
        "config",
        "Phaser",
        "key",
        "config",
        "key",
        "extra",
        "key",
        "spriteName",
        "config",
        "sound",
        "Phaser",
        "key",
        "time",
        "delta",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Events",
        "Phaser",
        "manager",
        "Phaser",
        "key",
        "config",
        "markerName",
        "config",
        "time",
        "delta",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "game",
        "Phaser",
        "key",
        "config",
        "Phaser",
        "sound",
        "Phaser",
        "prop",
        "value",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "manager",
        "Phaser",
        "key",
        "config",
        "Phaser",
        "game",
        "Phaser",
        "SoundManagerCreator",
        "game",
        "Phaser",
        "Phaser",
        "manager",
        "Phaser",
        "key",
        "config",
        "markerName",
        "config",
        "time",
        "delta",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "game",
        "Phaser",
        "key",
        "config",
        "Phaser",
        "value",
        "Phaser",
        "value",
        "Phaser",
        "Structs",
        "parent",
        "child",
        "skipCallback",
        "child",
        "index",
        "skipCallback",
        "index",
        "child",
        "property",
        "handler",
        "name",
        "startIndex",
        "length",
        "property",
        "value",
        "startIndex",
        "endIndex",
        "property",
        "value",
        "startIndex",
        "endIndex",
        "property",
        "value",
        "child1",
        "child2",
        "child",
        "index",
        "child",
        "skipCallback",
        "index",
        "skipCallback",
        "startIndex",
        "endIndex",
        "skipCallback",
        "skipCallback",
        "Phaser",
        "child",
        "child",
        "child",
        "child",
        "Phaser",
        "Phaser",
        "oldChild",
        "newChild",
        "child",
        "property",
        "value",
        "startIndex",
        "endIndex",
        "callback",
        "context",
        "args",
        "elements",
        "key",
        "key",
        "value",
        "Phaser",
        "key",
        "key",
        "key",
        "Phaser",
        "Phaser",
        "callback",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "item",
        "Phaser",
        "item",
        "Phaser",
        "elements",
        "value",
        "Phaser",
        "property",
        "value",
        "value",
        "Phaser",
        "callback",
        "callbackScope",
        "Phaser",
        "callback",
        "callbackScope",
        "Phaser",
        "callbackKey",
        "args",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "width",
        "height",
        "aspectMode",
        "parent",
        "Phaser",
        "value",
        "snapWidth",
        "snapHeight",
        "parent",
        "width",
        "height",
        "width",
        "height",
        "width",
        "height",
        "ratio",
        "width",
        "height",
        "value",
        "checkParent",
        "value",
        "checkParent",
        "width",
        "height",
        "fit",
        "width",
        "height",
        "width",
        "height",
        "width",
        "height",
        "destination",
        "Phaser",
        "Phaser",
        "Textures",
        "Phaser",
        "manager",
        "Phaser",
        "key",
        "source",
        "width",
        "height",
        "Phaser",
        "x",
        "y",
        "source",
        "Phaser",
        "key",
        "frame",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "red",
        "green",
        "blue",
        "alpha",
        "imageData",
        "x",
        "y",
        "dirtyX",
        "dirtyY",
        "dirtyWidth",
        "dirtyHeight",
        "x",
        "y",
        "width",
        "height",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "x",
        "y",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "width",
        "height",
        "Phaser",
        "FilterMode",
        "Events",
        "texture",
        "Phaser",
        "name",
        "sourceIndex",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "width",
        "height",
        "x",
        "y",
        "Phaser",
        "actualWidth",
        "actualHeight",
        "destX",
        "destY",
        "destWidth",
        "destHeight",
        "Phaser",
        "crop",
        "x",
        "y",
        "width",
        "height",
        "flipX",
        "flipY",
        "crop",
        "flipX",
        "flipY",
        "Phaser",
        "Phaser",
        "Phaser",
        "Parsers",
        "manager",
        "Phaser",
        "key",
        "source",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "name",
        "sourceIndex",
        "x",
        "y",
        "width",
        "height",
        "Phaser",
        "name",
        "name",
        "Phaser",
        "source",
        "Phaser",
        "sourceIndex",
        "includeBase",
        "Phaser",
        "includeBase",
        "name",
        "Phaser",
        "name",
        "data",
        "filterMode",
        "Phaser",
        "Phaser",
        "game",
        "Phaser",
        "Phaser",
        "key",
        "key",
        "Phaser",
        "Phaser",
        "key",
        "data",
        "key",
        "frame",
        "encoderOptions",
        "key",
        "source",
        "dataSource",
        "Phaser",
        "key",
        "renderTexture",
        "Phaser",
        "Phaser",
        "key",
        "config",
        "Phaser",
        "key",
        "width",
        "height",
        "Phaser",
        "key",
        "source",
        "skipCache",
        "Phaser",
        "key",
        "source",
        "data",
        "dataSource",
        "Phaser",
        "key",
        "source",
        "data",
        "dataSource",
        "Phaser",
        "key",
        "source",
        "data",
        "dataSource",
        "Phaser",
        "key",
        "source",
        "data",
        "dataSource",
        "Phaser",
        "key",
        "source",
        "data",
        "dataSource",
        "Phaser",
        "key",
        "source",
        "config",
        "Phaser",
        "key",
        "config",
        "Phaser",
        "key",
        "source",
        "width",
        "height",
        "Phaser",
        "key",
        "key",
        "Phaser",
        "key",
        "frame",
        "Phaser",
        "key",
        "frame",
        "Phaser",
        "x",
        "y",
        "key",
        "frame",
        "Phaser",
        "x",
        "y",
        "key",
        "frame",
        "gameObject",
        "Phaser",
        "key",
        "frame",
        "Phaser",
        "currentKey",
        "newKey",
        "callback",
        "scope",
        "args",
        "texture",
        "Phaser",
        "source",
        "width",
        "height",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "game",
        "Phaser",
        "filterMode",
        "Phaser",
        "Tilemaps",
        "Components",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "tilemap",
        "Phaser",
        "layerIndex",
        "tileset",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "renderOrder",
        "tileX",
        "tileY",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "Phaser",
        "indexes",
        "replacements",
        "spriteConfig",
        "scene",
        "Phaser",
        "camera",
        "Phaser",
        "Phaser",
        "camera",
        "Phaser",
        "Phaser",
        "srcTileX",
        "srcTileY",
        "width",
        "height",
        "destTileX",
        "destTileY",
        "recalculateFaces",
        "Phaser",
        "index",
        "tileX",
        "tileY",
        "width",
        "height",
        "recalculateFaces",
        "Phaser",
        "callback",
        "context",
        "tileX",
        "tileY",
        "width",
        "height",
        "FilteringOptions",
        "Phaser",
        "index",
        "skip",
        "reverse",
        "Phaser",
        "callback",
        "context",
        "tileX",
        "tileY",
        "width",
        "height",
        "FilteringOptions",
        "Phaser",
        "callback",
        "context",
        "tileX",
        "tileY",
        "width",
        "height",
        "FilteringOptions",
        "Phaser",
        "tileX",
        "tileY",
        "nonNull",
        "Phaser",
        "worldX",
        "worldY",
        "nonNull",
        "camera",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "FilteringOptions",
        "Phaser",
        "shape",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "FilteringOptions",
        "camera",
        "Phaser",
        "Phaser",
        "worldX",
        "worldY",
        "width",
        "height",
        "FilteringOptions",
        "camera",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "worldX",
        "worldY",
        "camera",
        "Phaser",
        "tile",
        "Phaser",
        "tileX",
        "tileY",
        "recalculateFaces",
        "Phaser",
        "tile",
        "Phaser",
        "worldX",
        "worldY",
        "recalculateFaces",
        "camera",
        "Phaser",
        "Phaser",
        "tile",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "recalculateFaces",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "indexes",
        "Phaser",
        "tileX",
        "tileY",
        "replaceWithNull",
        "recalculateFaces",
        "Phaser",
        "worldX",
        "worldY",
        "replaceWithNull",
        "recalculateFaces",
        "camera",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "styleConfig",
        "Phaser",
        "findIndex",
        "newIndex",
        "tileX",
        "tileY",
        "width",
        "height",
        "Phaser",
        "value",
        "paddingX",
        "paddingY",
        "indexes",
        "collides",
        "recalculateFaces",
        "Phaser",
        "start",
        "stop",
        "collides",
        "recalculateFaces",
        "Phaser",
        "properties",
        "collides",
        "recalculateFaces",
        "Phaser",
        "indexes",
        "collides",
        "recalculateFaces",
        "Phaser",
        "collides",
        "recalculateFaces",
        "Phaser",
        "indexes",
        "callback",
        "callbackContext",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "callback",
        "callbackContext",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "Phaser",
        "tileA",
        "tileB",
        "tileX",
        "tileY",
        "width",
        "height",
        "Phaser",
        "tileX",
        "camera",
        "Phaser",
        "tileY",
        "camera",
        "Phaser",
        "tileX",
        "tileY",
        "point",
        "Phaser",
        "camera",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "weightedIndexes",
        "Phaser",
        "worldX",
        "snapToFloor",
        "camera",
        "Phaser",
        "worldY",
        "snapToFloor",
        "camera",
        "Phaser",
        "worldX",
        "worldY",
        "snapToFloor",
        "point",
        "Phaser",
        "camera",
        "Phaser",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "Formats",
        "name",
        "firstgid",
        "width",
        "height",
        "margin",
        "spacing",
        "properties",
        "imageIndex",
        "gid",
        "image",
        "Phaser",
        "config",
        "Phaser",
        "Phaser",
        "config",
        "Phaser",
        "Phaser",
        "Phaser",
        "config",
        "Phaser",
        "Parsers",
        "Impact",
        "ParseTileLayers",
        "json",
        "insertNull",
        "ParseTilesets",
        "json",
        "ParseWeltmeister",
        "name",
        "json",
        "insertNull",
        "Parse",
        "name",
        "mapFormat",
        "data",
        "tileWidth",
        "tileHeight",
        "insertNull",
        "Phaser",
        "Parse2DArray",
        "name",
        "data",
        "tileWidth",
        "tileHeight",
        "insertNull",
        "Phaser",
        "ParseCSV",
        "name",
        "data",
        "tileWidth",
        "tileHeight",
        "insertNull",
        "Phaser",
        "Tiled",
        "AssignTileProperties",
        "mapData",
        "Phaser",
        "Base64Decode",
        "data",
        "BuildTilesetIndex",
        "mapData",
        "Phaser",
        "ParseGID",
        "gid",
        "ParseImageLayers",
        "json",
        "ParseJSONTiled",
        "name",
        "json",
        "insertNull",
        "Phaser",
        "ParseObject",
        "tiledObject",
        "offsetX",
        "offsetY",
        "ParseObjectLayers",
        "json",
        "ParseTileLayers",
        "json",
        "insertNull",
        "ParseTilesets",
        "json",
        "keys",
        "ParseToTilemap",
        "scene",
        "Phaser",
        "key",
        "tileWidth",
        "tileHeight",
        "width",
        "height",
        "data",
        "insertNull",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "tilemap",
        "Phaser",
        "layerIndex",
        "tileset",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "camera",
        "Phaser",
        "tilesetIndex",
        "Phaser",
        "renderOrder",
        "tileX",
        "tileY",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "Phaser",
        "indexes",
        "replacements",
        "spriteConfig",
        "scene",
        "Phaser",
        "camera",
        "Phaser",
        "Phaser",
        "camera",
        "Phaser",
        "Phaser",
        "value",
        "paddingX",
        "paddingY",
        "index",
        "skip",
        "reverse",
        "Phaser",
        "callback",
        "context",
        "tileX",
        "tileY",
        "width",
        "height",
        "filteringOptions",
        "Phaser",
        "callback",
        "context",
        "tileX",
        "tileY",
        "width",
        "height",
        "filteringOptions",
        "Phaser",
        "callback",
        "context",
        "tileX",
        "tileY",
        "width",
        "height",
        "filteringOptions",
        "Phaser",
        "tileX",
        "tileY",
        "nonNull",
        "Phaser",
        "worldX",
        "worldY",
        "nonNull",
        "camera",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "filteringOptions",
        "Phaser",
        "worldX",
        "worldY",
        "width",
        "height",
        "filteringOptions",
        "camera",
        "Phaser",
        "Phaser",
        "shape",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "filteringOptions",
        "camera",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "worldX",
        "worldY",
        "camera",
        "Phaser",
        "graphics",
        "Phaser",
        "styleConfig",
        "Phaser",
        "indexes",
        "collides",
        "recalculateFaces",
        "Phaser",
        "start",
        "stop",
        "collides",
        "recalculateFaces",
        "Phaser",
        "properties",
        "collides",
        "recalculateFaces",
        "Phaser",
        "indexes",
        "collides",
        "recalculateFaces",
        "Phaser",
        "indexes",
        "callback",
        "callbackContext",
        "Phaser",
        "collides",
        "recalculateFaces",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "callback",
        "callbackContext",
        "Phaser",
        "tileX",
        "camera",
        "Phaser",
        "tileY",
        "camera",
        "Phaser",
        "tileX",
        "tileY",
        "point",
        "Phaser",
        "camera",
        "Phaser",
        "Phaser",
        "worldX",
        "snapToFloor",
        "camera",
        "Phaser",
        "worldY",
        "snapToFloor",
        "camera",
        "Phaser",
        "worldX",
        "worldY",
        "snapToFloor",
        "point",
        "Phaser",
        "camera",
        "Phaser",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "Phaser",
        "value",
        "Phaser",
        "width",
        "height",
        "width",
        "height",
        "value",
        "value",
        "value",
        "x",
        "y",
        "Phaser",
        "output",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "includeParent",
        "Phaser",
        "output",
        "x",
        "y",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "pipelineName",
        "pipelineName",
        "Phaser",
        "value",
        "Phaser",
        "x",
        "y",
        "z",
        "w",
        "x",
        "y",
        "width",
        "height",
        "radians",
        "degrees",
        "x",
        "y",
        "value",
        "value",
        "value",
        "value",
        "tempMatrix",
        "Phaser",
        "Phaser",
        "tempMatrix",
        "Phaser",
        "parentMatrix",
        "Phaser",
        "Phaser",
        "value",
        "x",
        "y",
        "Phaser",
        "Phaser",
        "Phaser",
        "layer",
        "Phaser",
        "index",
        "x",
        "y",
        "width",
        "height",
        "baseWidth",
        "baseHeight",
        "Phaser",
        "x",
        "y",
        "tile",
        "Phaser",
        "Phaser",
        "camera",
        "Phaser",
        "camera",
        "Phaser",
        "camera",
        "Phaser",
        "camera",
        "Phaser",
        "camera",
        "Phaser",
        "output",
        "Phaser",
        "camera",
        "Phaser",
        "camera",
        "Phaser",
        "x",
        "y",
        "right",
        "bottom",
        "collides",
        "faces",
        "recalculateFaces",
        "Phaser",
        "Phaser",
        "left",
        "right",
        "up",
        "down",
        "recalculateFaces",
        "Phaser",
        "callback",
        "context",
        "Phaser",
        "tileWidth",
        "tileHeight",
        "baseWidth",
        "baseHeight",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight",
        "value",
        "value",
        "x",
        "y",
        "value",
        "scene",
        "Phaser",
        "mapData",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "renderOrder",
        "tilesetName",
        "key",
        "tileWidth",
        "tileHeight",
        "tileMargin",
        "tileSpacing",
        "gid",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "srcTileX",
        "srcTileY",
        "width",
        "height",
        "destTileX",
        "destTileY",
        "recalculateFaces",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "name",
        "tileset",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "width",
        "height",
        "tileWidth",
        "tileHeight",
        "Phaser",
        "layerID",
        "tileset",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "name",
        "id",
        "spriteConfig",
        "scene",
        "Phaser",
        "Phaser",
        "indexes",
        "replacements",
        "spriteConfig",
        "scene",
        "Phaser",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "layerID",
        "tileset",
        "Phaser",
        "Phaser",
        "x",
        "y",
        "Phaser",
        "index",
        "tileX",
        "tileY",
        "width",
        "height",
        "recalculateFaces",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "objectLayer",
        "Phaser",
        "callback",
        "context",
        "Phaser",
        "callback",
        "context",
        "tileX",
        "tileY",
        "width",
        "height",
        "filteringOptions",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "index",
        "skip",
        "reverse",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "objectLayer",
        "Phaser",
        "callback",
        "context",
        "Phaser",
        "callback",
        "context",
        "tileX",
        "tileY",
        "width",
        "height",
        "filteringOptions",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "callback",
        "context",
        "tileX",
        "tileY",
        "width",
        "height",
        "filteringOptions",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "name",
        "location",
        "name",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "name",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "name",
        "tileX",
        "tileY",
        "nonNull",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "worldX",
        "worldY",
        "nonNull",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "filteringOptions",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "shape",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "filteringOptions",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "worldX",
        "worldY",
        "width",
        "height",
        "filteringOptions",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "name",
        "Phaser",
        "name",
        "tileX",
        "tileY",
        "layer",
        "Phaser",
        "Phaser",
        "worldX",
        "worldY",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tile",
        "Phaser",
        "tileX",
        "tileY",
        "recalculateFaces",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tile",
        "Phaser",
        "worldX",
        "worldY",
        "recalculateFaces",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tile",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "recalculateFaces",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "indexes",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "replaceWithNull",
        "recalculateFaces",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "worldX",
        "worldY",
        "replaceWithNull",
        "recalculateFaces",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "graphics",
        "Phaser",
        "styleConfig",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "findIndex",
        "newIndex",
        "tileX",
        "tileY",
        "width",
        "height",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "indexes",
        "collides",
        "recalculateFaces",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "start",
        "stop",
        "collides",
        "recalculateFaces",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "properties",
        "collides",
        "recalculateFaces",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "indexes",
        "collides",
        "recalculateFaces",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "collides",
        "recalculateFaces",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "indexes",
        "callback",
        "callbackContext",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "callback",
        "callbackContext",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tileWidth",
        "tileHeight",
        "Phaser",
        "tileWidth",
        "tileHeight",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tileA",
        "tileB",
        "tileX",
        "tileY",
        "width",
        "height",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tileX",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "tileY",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "point",
        "Phaser",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "tileX",
        "tileY",
        "width",
        "height",
        "weightedIndexes",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "worldX",
        "snapToFloor",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "worldY",
        "snapToFloor",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "worldX",
        "worldY",
        "snapToFloor",
        "point",
        "Phaser",
        "camera",
        "Phaser",
        "layer",
        "Phaser",
        "Phaser",
        "Phaser",
        "name",
        "firstgid",
        "tileWidth",
        "tileHeight",
        "tileMargin",
        "tileSpacing",
        "tileProperties",
        "tileData",
        "Phaser",
        "tileIndex",
        "tileIndex",
        "tileIndex",
        "tileIndex",
        "tileIndex",
        "texture",
        "Phaser",
        "Phaser",
        "tileWidth",
        "tileHeight",
        "Phaser",
        "margin",
        "spacing",
        "Phaser",
        "imageWidth",
        "imageHeight",
        "Phaser",
        "Time",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "config",
        "Phaser",
        "delay",
        "callback",
        "args",
        "callbackScope",
        "Phaser",
        "Phaser",
        "Phaser",
        "time",
        "delta",
        "time",
        "delta",
        "config",
        "config",
        "Phaser",
        "dispatchCallback",
        "Tweens",
        "Builders",
        "GetBoolean",
        "source",
        "key",
        "defaultValue",
        "GetEaseFunction",
        "ease",
        "easeParams",
        "GetNewValue",
        "source",
        "key",
        "defaultValue",
        "GetProps",
        "config",
        "GetTargets",
        "config",
        "GetTweens",
        "config",
        "GetValueOp",
        "key",
        "propertyValue",
        "NumberTweenBuilder",
        "parent",
        "Phaser",
        "Phaser",
        "config",
        "defaults",
        "Phaser",
        "Phaser",
        "TimelineBuilder",
        "manager",
        "Phaser",
        "config",
        "Phaser",
        "TweenBuilder",
        "parent",
        "Phaser",
        "Phaser",
        "config",
        "defaults",
        "Phaser",
        "Phaser",
        "Events",
        "Phaser",
        "manager",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "config",
        "Phaser",
        "tween",
        "Phaser",
        "Phaser",
        "tween",
        "Phaser",
        "value",
        "value",
        "value",
        "resetFromLoop",
        "callback",
        "scope",
        "Phaser",
        "tween",
        "Phaser",
        "Phaser",
        "timestamp",
        "delta",
        "Phaser",
        "Phaser",
        "target",
        "parent",
        "Phaser",
        "Phaser",
        "data",
        "Phaser",
        "targets",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "target",
        "key",
        "value",
        "startToCurrent",
        "resetFromTimeline",
        "resetFromLoop",
        "toPosition",
        "callback",
        "scope",
        "delay",
        "resetTo",
        "timestamp",
        "delta",
        "tween",
        "Phaser",
        "tweenData",
        "Phaser",
        "diff",
        "tween",
        "Phaser",
        "tweenData",
        "Phaser",
        "diff",
        "tween",
        "Phaser",
        "tweenData",
        "Phaser",
        "delta",
        "TweenData",
        "target",
        "key",
        "getEnd",
        "getStart",
        "ease",
        "delay",
        "duration",
        "yoyo",
        "hold",
        "repeat",
        "repeatDelay",
        "flipX",
        "flipY",
        "scene",
        "Phaser",
        "Phaser",
        "Phaser",
        "config",
        "Phaser",
        "config",
        "Phaser",
        "config",
        "Phaser",
        "config",
        "Phaser",
        "tween",
        "Phaser",
        "Phaser",
        "config",
        "Phaser",
        "timestamp",
        "delta",
        "tween",
        "Phaser",
        "Phaser",
        "callback",
        "scope",
        "args",
        "Phaser",
        "target",
        "Phaser",
        "target",
        "Phaser",
        "target",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "Utils",
        "Add",
        "array",
        "item",
        "limit",
        "callback",
        "context",
        "AddAt",
        "array",
        "item",
        "index",
        "limit",
        "callback",
        "context",
        "BringToTop",
        "array",
        "item",
        "CountAllMatching",
        "array",
        "property",
        "value",
        "startIndex",
        "endIndex",
        "Each",
        "array",
        "callback",
        "context",
        "args",
        "EachInRange",
        "array",
        "callback",
        "context",
        "startIndex",
        "endIndex",
        "args",
        "FindClosestInSorted",
        "value",
        "array",
        "key",
        "GetAll",
        "array",
        "property",
        "value",
        "startIndex",
        "endIndex",
        "GetFirst",
        "array",
        "property",
        "value",
        "startIndex",
        "endIndex",
        "GetRandom",
        "array",
        "startIndex",
        "length",
        "Matrix",
        "CheckMatrix",
        "matrix",
        "MatrixToString",
        "matrix",
        "ReverseColumns",
        "matrix",
        "ReverseRows",
        "matrix",
        "Rotate180",
        "matrix",
        "RotateLeft",
        "matrix",
        "RotateMatrix",
        "matrix",
        "direction",
        "RotateRight",
        "matrix",
        "TransposeMatrix",
        "array",
        "MoveDown",
        "array",
        "item",
        "MoveTo",
        "array",
        "item",
        "index",
        "MoveUp",
        "array",
        "item",
        "NumberArray",
        "start",
        "end",
        "prefix",
        "suffix",
        "NumberArrayStep",
        "start",
        "end",
        "step",
        "QuickSelect",
        "arr",
        "k",
        "left",
        "right",
        "compare",
        "Range",
        "a",
        "b",
        "options",
        "Remove",
        "array",
        "item",
        "callback",
        "context",
        "RemoveAt",
        "array",
        "index",
        "callback",
        "context",
        "RemoveBetween",
        "array",
        "startIndex",
        "endIndex",
        "callback",
        "context",
        "RemoveRandomElement",
        "array",
        "start",
        "length",
        "Replace",
        "oldChild",
        "newChild",
        "RotateLeft",
        "array",
        "total",
        "RotateRight",
        "array",
        "total",
        "SafeRange",
        "array",
        "startIndex",
        "endIndex",
        "throwError",
        "SendToBack",
        "array",
        "item",
        "SetAll",
        "array",
        "property",
        "value",
        "startIndex",
        "endIndex",
        "Shuffle",
        "array",
        "SpliceOne",
        "array",
        "index",
        "StableSortFunctions",
        "inplace",
        "arr",
        "comp",
        "StableSort",
        "arr",
        "comp",
        "Swap",
        "array",
        "item1",
        "item2",
        "NOOP",
        "Objects",
        "Clone",
        "obj",
        "Extend",
        "GetAdvancedValue",
        "source",
        "key",
        "defaultValue",
        "GetFastValue",
        "source",
        "key",
        "defaultValue",
        "GetMinMaxValue",
        "source",
        "key",
        "min",
        "max",
        "defaultValue",
        "GetValue",
        "source",
        "key",
        "defaultValue",
        "HasAll",
        "source",
        "keys",
        "HasAny",
        "source",
        "keys",
        "HasValue",
        "source",
        "key",
        "IsPlainObject",
        "obj",
        "Merge",
        "obj1",
        "obj2",
        "MergeRight",
        "obj1",
        "obj2",
        "Format",
        "values",
        "Pad",
        "len",
        "pad",
        "dir",
        "Reverse",
        "UppercaseFirst",
        "UUID",
        "Phaser",
        "game",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "scene",
        "Phaser",
        "api",
        "scene",
        "Phaser",
        "key",
        "keys",
        "data",
        "keys",
        "data",
        "data",
        "data",
        "text",
        "key",
        "frame",
        "sessionData",
        "text",
        "key",
        "frame",
        "sessionData",
        "text",
        "key",
        "frame",
        "sessionData",
        "text",
        "key",
        "frame",
        "sessionData",
        "min",
        "max",
        "contextID",
        "contextID",
        "playerID",
        "productID",
        "developerPayload",
        "purchaseToken",
        "cta",
        "text",
        "key",
        "frame",
        "template",
        "updateData",
        "cta",
        "text",
        "key",
        "frame",
        "template",
        "updateData",
        "appID",
        "data",
        "name",
        "value",
        "placementID",
        "placementID",
        "placementID",
        "placementID",
        "matchTag",
        "switchImmediately",
        "name",
        "object1",
        "Phaser",
        "object2",
        "Phaser",
        "body",
        "Phaser",
        "Phaser",
        "Phaser",
        "Phaser",
        "body",
        "Phaser",
        "other",
        "Phaser",
        "axis",
        "MatterJS",
        "MatterJS",
        "MatterJS",
        "snapshot",
        "Phaser",
        "renderer",
        "Phaser",
        "manager",
        "Phaser",
        "sound",
        "Phaser",
        "index",
        "sounds",
        "Phaser",
        "item",
        "args",
        "key",
        "entry",
        "entry",
        "index",
        "texture",
        "Phaser",
        "args",
        "value",
        "Phaser",
        "index",
        "array",
        "Phaser",
        "value",
        "Phaser",
        "index",
        "array",
        "Phaser",
        "Phaser",
        "Phaser",
        "value",
        "Phaser",
        "index",
        "array",
        "Phaser",
        "value",
        "Phaser",
        "index",
        "array",
        "Phaser",
        "definition",
        "Phaser",
        "plugin",
        "Phaser",
        "data",
        "Phaser",
        "score",
        "data",
        "count",
        "offset",
        "count",
        "offset",
        "Phaser"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "\"bounds.x\"",
        "\"bounds.y\"",
        "\"bounds.width\"",
        "\"bounds.height\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"0\"",
        "string",
        "\"1\"",
        "string",
        "\"2\"",
        "string",
        "\"3\"",
        "string",
        "\"4\"",
        "string",
        "\"5\"",
        "string",
        "\"6\"",
        "string",
        "\"7\"",
        "string",
        "\"8\"",
        "string",
        "\"9\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"scale.x\"",
        "\"scale.y\"",
        "\"origin.x\"",
        "\"origin.y\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"setXY.x\"",
        "\"setXY.y\"",
        "\"setXY.stepX\"",
        "\"setXY.stepY\"",
        "\"setRotation.value\"",
        "\"setRotation.step\"",
        "\"setScale.x\"",
        "\"setScale.y\"",
        "\"setScale.stepX\"",
        "\"setScale.stepY\"",
        "\"setAlpha.value\"",
        "\"setAlpha.step\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"followOffset.x\"",
        "\"followOffset.y\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"offset.x\"",
        "\"offset.y\"",
        "string",
        "\"spacing.x\"",
        "\"spacing.y\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"updateList;\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"updateList;\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"setBounds.x\"",
        "\"setBounds.y\"",
        "\"setBounds.width\"",
        "\"setBounds.height\"",
        "\"setBounds.thickness\"",
        "\"setBounds.left\"",
        "\"setBounds.right\"",
        "\"setBounds.top\"",
        "\"setBounds.bottom\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"gravity.x\"",
        "\"gravity.y\"",
        "\"checkCollision.up\"",
        "\"checkCollision.down\"",
        "\"checkCollision.left\"",
        "\"checkCollision.right\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'phaser'"
    ],
    "variables": [
        "ADD_ANIMATION",
        "ANIMATION_COMPLETE",
        "ANIMATION_REPEAT",
        "ANIMATION_RESTART",
        "ANIMATION_START",
        "PAUSE_ALL",
        "REMOVE_ANIMATION",
        "RESUME_ALL",
        "SPRITE_ANIMATION_COMPLETE",
        "SPRITE_ANIMATION_KEY_COMPLETE",
        "SPRITE_ANIMATION_KEY_REPEAT",
        "SPRITE_ANIMATION_KEY_RESTART",
        "SPRITE_ANIMATION_KEY_START",
        "SPRITE_ANIMATION_KEY_UPDATE",
        "SPRITE_ANIMATION_REPEAT",
        "SPRITE_ANIMATION_RESTART",
        "SPRITE_ANIMATION_START",
        "SPRITE_ANIMATION_UPDATE",
        "ADD",
        "REMOVE",
        "DESTROY",
        "FADE_IN_COMPLETE",
        "FADE_IN_START",
        "FADE_OUT_COMPLETE",
        "FADE_OUT_START",
        "FLASH_COMPLETE",
        "FLASH_START",
        "PAN_COMPLETE",
        "PAN_START",
        "POST_RENDER",
        "PRE_RENDER",
        "SHAKE_COMPLETE",
        "SHAKE_START",
        "ZOOM_COMPLETE",
        "ZOOM_START",
        "VERSION",
        "AUTO",
        "CANVAS",
        "WEBGL",
        "HEADLESS",
        "FOREVER",
        "NONE",
        "UP",
        "DOWN",
        "LEFT",
        "RIGHT",
        "BLUR",
        "BOOT",
        "DESTROY",
        "FOCUS",
        "HIDDEN",
        "PAUSE",
        "POST_RENDER",
        "POST_STEP",
        "PRE_RENDER",
        "PRE_STEP",
        "READY",
        "RESUME",
        "STEP",
        "VISIBLE",
        "ARNE16",
        "C64",
        "CGA",
        "JMP",
        "MSX",
        "CHANGE_DATA",
        "CHANGE_DATA_KEY",
        "REMOVE_DATA",
        "SET_DATA",
        "TOP_LEFT",
        "TOP_CENTER",
        "TOP_RIGHT",
        "LEFT_TOP",
        "LEFT_CENTER",
        "LEFT_BOTTOM",
        "CENTER",
        "RIGHT_TOP",
        "RIGHT_CENTER",
        "RIGHT_BOTTOM",
        "BOTTOM_LEFT",
        "BOTTOM_CENTER",
        "BOTTOM_RIGHT",
        "TEXT_SET1",
        "TEXT_SET2",
        "TEXT_SET3",
        "TEXT_SET4",
        "TEXT_SET5",
        "TEXT_SET6",
        "TEXT_SET7",
        "TEXT_SET8",
        "TEXT_SET9",
        "TEXT_SET10",
        "TEXT_SET11",
        "DESTROY",
        "MOUSE_DOWN",
        "MOUSE_MOVE",
        "MOUSE_UP",
        "TOUCH_START",
        "TOUCH_MOVE",
        "TOUCH_END",
        "TOUCH_CANCEL",
        "POINTER_LOCK_CHANGE",
        "BOOT",
        "DESTROY",
        "DRAG_END",
        "DRAG_ENTER",
        "DRAG",
        "DRAG_LEAVE",
        "DRAG_OVER",
        "DRAG_START",
        "DROP",
        "GAMEOBJECT_DOWN",
        "GAMEOBJECT_DRAG_END",
        "GAMEOBJECT_DRAG_ENTER",
        "GAMEOBJECT_DRAG",
        "GAMEOBJECT_DRAG_LEAVE",
        "GAMEOBJECT_DRAG_OVER",
        "GAMEOBJECT_DRAG_START",
        "GAMEOBJECT_DROP",
        "GAMEOBJECT_MOVE",
        "GAMEOBJECT_OUT",
        "GAMEOBJECT_OVER",
        "GAMEOBJECT_POINTER_DOWN",
        "GAMEOBJECT_POINTER_MOVE",
        "GAMEOBJECT_POINTER_OUT",
        "GAMEOBJECT_POINTER_OVER",
        "GAMEOBJECT_POINTER_UP",
        "GAMEOBJECT_UP",
        "GAME_OUT",
        "GAME_OVER",
        "MANAGER_BOOT",
        "MANAGER_PROCESS",
        "MANAGER_UPDATE",
        "POINTERLOCK_CHANGE",
        "POINTER_DOWN",
        "POINTER_DOWN_OUTSIDE",
        "POINTER_MOVE",
        "POINTER_OUT",
        "POINTER_OVER",
        "POINTER_UP",
        "POINTER_UP_OUTSIDE",
        "PRE_UPDATE",
        "SHUTDOWN",
        "START",
        "UPDATE",
        "SNES_USB",
        "DUALSHOCK_4",
        "XBOX_360",
        "BUTTON_DOWN",
        "BUTTON_UP",
        "CONNECTED",
        "DISCONNECTED",
        "GAMEPAD_BUTTON_DOWN",
        "GAMEPAD_BUTTON_UP",
        "register",
        "getCore",
        "install",
        "remove",
        "ANY_KEY_DOWN",
        "ANY_KEY_UP",
        "COMBO_MATCH",
        "DOWN",
        "KEY_DOWN",
        "KEY_UP",
        "UP",
        "LOADER_IDLE",
        "LOADER_LOADING",
        "LOADER_PROCESSING",
        "LOADER_COMPLETE",
        "LOADER_SHUTDOWN",
        "LOADER_DESTROYED",
        "FILE_PENDING",
        "FILE_LOADING",
        "FILE_LOADED",
        "FILE_FAILED",
        "FILE_PROCESSING",
        "FILE_ERRORED",
        "FILE_COMPLETE",
        "FILE_DESTROYED",
        "FILE_POPULATED",
        "ADD",
        "COMPLETE",
        "FILE_COMPLETE",
        "FILE_KEY_COMPLETE",
        "FILE_LOAD_ERROR",
        "FILE_LOAD",
        "FILE_PROGRESS",
        "POST_PROCESS",
        "PROGRESS",
        "START",
        "PI2",
        "TAU",
        "EPSILON",
        "DEG_TO_RAD",
        "RAD_TO_DEG",
        "RND",
        "DYNAMIC_BODY",
        "STATIC_BODY",
        "GROUP",
        "TILEMAPLAYER",
        "FACING_NONE",
        "FACING_UP",
        "FACING_DOWN",
        "FACING_LEFT",
        "FACING_RIGHT",
        "COLLIDE",
        "OVERLAP",
        "PAUSE",
        "RESUME",
        "TILE_COLLIDE",
        "TILE_OVERLAP",
        "WORLD_BOUNDS",
        "COLLIDE",
        "PAUSE",
        "RESUME",
        "AFTER_UPDATE",
        "BEFORE_UPDATE",
        "COLLISION_ACTIVE",
        "COLLISION_END",
        "COLLISION_START",
        "DRAG_END",
        "DRAG",
        "DRAG_START",
        "PAUSE",
        "RESUME",
        "SLEEP_END",
        "SLEEP_START",
        "Global",
        "CoreScene",
        "DefaultScene",
        "NO_CENTER",
        "CENTER_BOTH",
        "CENTER_HORIZONTALLY",
        "CENTER_VERTICALLY",
        "LANDSCAPE",
        "PORTRAIT",
        "NONE",
        "WIDTH_CONTROLS_HEIGHT",
        "HEIGHT_CONTROLS_WIDTH",
        "FIT",
        "ENVELOP",
        "RESIZE",
        "NO_ZOOM",
        "ZOOM_2X",
        "ZOOM_4X",
        "MAX_ZOOM",
        "ENTER_FULLSCREEN",
        "FULLSCREEN_UNSUPPORTED",
        "LEAVE_FULLSCREEN",
        "ORIENTATION_CHANGE",
        "RESIZE",
        "NO_CENTER",
        "CENTER_BOTH",
        "CENTER_HORIZONTALLY",
        "CENTER_VERTICALLY",
        "LANDSCAPE",
        "PORTRAIT",
        "NONE",
        "WIDTH_CONTROLS_HEIGHT",
        "HEIGHT_CONTROLS_WIDTH",
        "FIT",
        "ENVELOP",
        "RESIZE",
        "NO_ZOOM",
        "ZOOM_2X",
        "ZOOM_4X",
        "MAX_ZOOM",
        "PENDING",
        "INIT",
        "START",
        "LOADING",
        "CREATING",
        "RUNNING",
        "PAUSED",
        "SLEEPING",
        "SHUTDOWN",
        "DESTROYED",
        "BOOT",
        "DESTROY",
        "PAUSE",
        "POST_UPDATE",
        "PRE_UPDATE",
        "READY",
        "RENDER",
        "RESUME",
        "SHUTDOWN",
        "SLEEP",
        "START",
        "TRANSITION_COMPLETE",
        "TRANSITION_INIT",
        "TRANSITION_OUT",
        "TRANSITION_START",
        "TRANSITION_WAKE",
        "UPDATE",
        "WAKE",
        "COMPLETE",
        "DESTROY",
        "DETUNE",
        "GLOBAL_DETUNE",
        "GLOBAL_MUTE",
        "GLOBAL_RATE",
        "GLOBAL_VOLUME",
        "LOOPED",
        "LOOP",
        "MUTE",
        "PAUSE_ALL",
        "PAUSE",
        "PLAY",
        "RATE",
        "RESUME_ALL",
        "RESUME",
        "SEEK",
        "STOP_ALL",
        "STOP",
        "UNLOCKED",
        "VOLUME",
        "ADD",
        "ERROR",
        "LOAD",
        "READY",
        "REMOVE",
        "LINEAR",
        "NEAREST",
        "CSV",
        "TILED_JSON",
        "ARRAY_2D",
        "WELTMEISTER",
        "TIMELINE_COMPLETE",
        "TIMELINE_LOOP",
        "TIMELINE_PAUSE",
        "TIMELINE_RESUME",
        "TIMELINE_START",
        "TIMELINE_UPDATE",
        "CREATED",
        "INIT",
        "DELAY",
        "OFFSET_DELAY",
        "PENDING_RENDER",
        "PLAYING_FORWARD",
        "PLAYING_BACKWARD",
        "HOLD_DELAY",
        "REPEAT_DELAY",
        "COMPLETE",
        "PENDING_ADD",
        "PAUSED",
        "LOOP_DELAY",
        "ACTIVE",
        "COMPLETE_DELAY",
        "PENDING_REMOVE",
        "REMOVED"
    ],
    "comments": [],
    "docstrings": [
        "* The width of the grid in items (not pixels). -1 means lay all items out horizontally, regardless of quantity.\n     *                                  If both this value and height are set to -1 then this value overrides it and the `height` value is ignored.",
        "* The height of the grid in items (not pixels). -1 means lay all items out vertically, regardless of quantity.\n     *                                   If both this value and `width` are set to -1 then `width` overrides it and this value is ignored.",
        "* The width of the cell, in pixels, in which the item is positioned.",
        "* The height of the cell, in pixels, in which the item is positioned.",
        "* The alignment position. One of the Phaser.Display.Align consts such as `TOP_LEFT` or `RIGHT_CENTER`.",
        "* Optionally place the top-left of the final grid at this coordinate.",
        "* Optionally place the top-left of the final grid at this coordinate.",
        "* The horizontal position of camera",
        "* The vertical position of camera",
        "* The width size of camera",
        "* The height size of camera",
        "* The name of the camera",
        "* The horizontal position of camera",
        "* The vertical position of camera",
        "* The width size of camera",
        "* The height size of camera",
        "* The zoom of camera",
        "* The rotation of camera",
        "* The round pixels st status of camera",
        "* The horizontal scroll of camera",
        "* The vertical scroll of camera",
        "* The background color of camera",
        "* The bounds of camera",
        "* The name of the Camera.",
        "* The horizontal position of the Camera viewport.",
        "* The vertical position of the Camera viewport.",
        "* The width of the Camera viewport.",
        "* The height of the Camera viewport.",
        "* The default zoom level of the Camera.",
        "* The rotation of the Camera, in radians.",
        "* Should the Camera round pixels before rendering?",
        "* The horizontal scroll position of the Camera.",
        "* The vertical scroll position of the Camera.",
        "* A CSS color string controlling the Camera background color.",
        "* Defines the Camera bounds.",
        "* The top-left extent of the Camera bounds.",
        "* The top-left extent of the Camera bounds.",
        "* The width of the Camera bounds.",
        "* The height of the Camera bounds.",
        "* The Camera that this Control will update.",
        "* The Key to be pressed that will move the Camera left.",
        "* The Key to be pressed that will move the Camera right.",
        "* The Key to be pressed that will move the Camera up.",
        "* The Key to be pressed that will move the Camera down.",
        "* The Key to be pressed that will zoom the Camera in.",
        "* The Key to be pressed that will zoom the Camera out.",
        "* The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.",
        "* The horizontal and vertical speed the camera will move.",
        "* The Camera that this Control will update.",
        "* The Key to be pressed that will move the Camera left.",
        "* The Key to be pressed that will move the Camera right.",
        "* The Key to be pressed that will move the Camera up.",
        "* The Key to be pressed that will zoom the Camera in.",
        "* The Key to be pressed that will zoom the Camera out.",
        "* The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.",
        "* The horizontal and vertical acceleration the camera will move.",
        "* The horizontal and vertical drag applied to the camera when it is moving.",
        "* The maximum horizontal and vertical speed the camera will move.",
        "* This callback type is completely empty, a no-operation.",
        "* Config object containing various sound settings.",
        "* Use HTML5 Audio instead of Web Audio.",
        "* An existing Web Audio context.",
        "* Disable all audio output.",
        "* Keyboard input configuration. `true` uses the default configuration and `false` disables keyboard input.",
        "* Mouse input configuration. `true` uses the default configuration and `false` disables mouse input.",
        "* Touch input configuration. `true` uses the default configuration and `false` disables touch input.",
        "* Gamepad input configuration. `true` enables gamepad input.",
        "* The maximum number of touch pointers. See {@link Phaser.Input.InputManager#pointers}.",
        "* The smoothing factor to apply during Pointer movement. See {@link Phaser.Input.Pointer#smoothFactor}.",
        "* Should Phaser use a queued input system for native DOM Events or not?",
        "* Where the Mouse Manager listens for mouse input events. The default is the game canvas.",
        "* Whether mouse input events have `preventDefault` called on them.",
        "* Where the Keyboard Manager listens for keyboard input events.",
        "* `preventDefault` will be called on every non-modified key which has a key code in this array. By default it is empty.",
        "* Where the Touch Manager listens for touch input events. The default is the game canvas.",
        "* Whether touch input events have preventDefault() called on them.",
        "* Where the Gamepad Manager listens for gamepad input events.",
        "* Omit Phaser's name and version from the banner.",
        "* The color of the banner text.",
        "* The background colors of the banner.",
        "* The minimum acceptable rendering rate, in frames per second.",
        "* The optimum rendering rate, in frames per second.",
        "* Use setTimeout instead of requestAnimationFrame to run the game loop.",
        "* Calculate the average frame delta from this many consecutive frame intervals.",
        "* The amount of frames the time step counts before we trust the delta values again.",
        "* When set to `true`, WebGL uses linear interpolation to draw scaled or rotated textures, giving a smooth appearance. When set to `false`, WebGL uses nearest-neighbor interpolation, giving a crisper appearance. `false` also disables antialiasing of the game canvas itself, if the browser supports it, when the game canvas is scaled.",
        "* Sets `antialias` and `roundPixels` to true. This is the best setting for pixel-art games.",
        "* Draw texture-based Game Objects at only whole-integer positions. Game Objects without textures, like Graphics, ignore this property.",
        "* Whether the game canvas will be transparent.",
        "* Whether the game canvas will be cleared between each rendering frame.",
        "* In WebGL mode, the drawing buffer contains colors with pre-multiplied alpha.",
        "* Let the browser abort creating a WebGL context if it judges performance would be unacceptable.",
        "* \"high-performance\", \"low-power\" or \"default\". A hint to the browser on how much device power the game might use.",
        "* The default WebGL batch size.",
        "* The maximum number of lights allowed to be visible within range of a single Camera in the LightManager.",
        "* The width.",
        "* The height.",
        "* The base width of your game. Can be an integer or a string: '100%'. If a string it will only work if you have set a parent element that has a size.",
        "* The base height of your game. Can be an integer or a string: '100%'. If a string it will only work if you have set a parent element that has a size.",
        "* The zoom value of the game canvas.",
        "* The rendering resolution of the canvas. This is reserved for future use and is currently ignored.",
        "* The DOM element that will contain the game canvas, or its `id`. If undefined, or if the named element doesn't exist, the game canvas is inserted directly into the document body. If `null` no parent will be used and you are responsible for adding the canvas to your environment.",
        "* Is the Scale Manager allowed to adjust the CSS height property of the parent and/or document body to be 100%?",
        "* The scale mode.",
        "* The minimum width and height the canvas can be scaled down to.",
        "* The maximum width the canvas can be scaled up to.",
        "* Automatically round the display and style sizes of the canvas. This can help with performance in lower-powered devices.",
        "* Automatically center the canvas within the parent?",
        "* How many ms should elapse before checking if the browser size has changed?",
        "* The DOM element that will be sent into full screen mode, or its `id`. If undefined Phaser will create its own div and insert the canvas into it when entering fullscreen mode.",
        "* A function to run at the start of the boot sequence.",
        "* A function to run at the end of the boot sequence. At this point, all the game systems have started and plugins have been loaded.",
        "* A URL used to resolve paths given to the loader. Example: 'http://labs.phaser.io/assets/'.",
        "* A URL path used to resolve relative paths given to the loader. Example: 'images/sprites/'.",
        "* The maximum number of resources the loader will start loading at once.",
        "* 'anonymous', 'use-credentials', or `undefined`. If you're not making cross-origin requests, leave this as `undefined`. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes}.",
        "* The response type of the XHR request, e.g. `blob`, `text`, etc.",
        "* Should the XHR request use async or not?",
        "* Optional username for all XHR requests.",
        "* Optional password for all XHR requests.",
        "* Optional XHR timeout value, in ms.",
        "* Create a div element in which DOM Elements will be contained. You must also provide a parent.",
        "* Place the DOM Container behind the Phaser Canvas. The default is to place it over the Canvas.",
        "* URL to use for the 'default' texture.",
        "* URL to use for the 'missing' texture.",
        "* The default physics system. It will be started for each scene. Phaser provides 'arcade', 'impact', and 'matter'.",
        "* Arcade Physics configuration.",
        "* Impact Physics configuration.",
        "* Matter Physics configuration.",
        "* A key to identify the plugin in the Plugin Manager.",
        "* The plugin itself. Usually a class/constructor.",
        "* Whether the plugin should be started automatically.",
        "* For a scene plugin, add the plugin to the scene's systems object under this key (`this.sys.KEY`, from the scene).",
        "* For a scene plugin, add the plugin to the scene object under this key (`this.KEY`, from the scene).",
        "* If this plugin is to be injected into the Scene Systems, this is the property key map used.",
        "* Arbitrary data passed to the plugin's init() method.",
        "* Global plugins to install.",
        "* Scene plugins to install.",
        "* The default set of scene plugins (names).",
        "* Plugins to *add* to the default set of scene plugins.",
        "* The width of the game, in game pixels.",
        "* The height of the game, in game pixels.",
        "* Simple scale applied to the game canvas. 2 is double size, 0.5 is half size, etc.",
        "* The size of each game pixel, in canvas pixels. Values larger than 1 are \"high\" resolution.",
        "* Which renderer to use. Phaser.AUTO, Phaser.CANVAS, Phaser.HEADLESS, or Phaser.WEBGL. AUTO picks WEBGL if available, otherwise CANVAS.",
        "* The DOM element that will contain the game canvas, or its `id`. If undefined or if the named element doesn't exist, the game canvas is inserted directly into the document body. If `null` no parent will be used and you are responsible for adding the canvas to your environment.",
        "* Provide your own Canvas element for Phaser to use instead of creating one.",
        "* CSS styles to apply to the game canvas instead of Phaser's default styles.",
        "* Provide your own Canvas Context for Phaser to use, instead of creating one.",
        "* A scene or scenes to add to the game. If several are given, the first is started; the remainder are started only if they have { active: true }.",
        "* Seed for the random number generator.",
        "* The title of the game. Shown in the browser console.",
        "* The URL of the game. Shown in the browser console.",
        "* The version of the game. Shown in the browser console.",
        "* Automatically call window.focus() when the game boots. Usually necessary to capture input events if the game is in a separate frame.",
        "* Input configuration, or `false` to disable all game input.",
        "* Disable the browser's default 'contextmenu' event (usually triggered by a right-button mouse click).",
        "* Configuration for the banner printed in the browser console when the game starts.",
        "* The DOM Container configuration object.",
        "* Game loop configuration.",
        "* Game renderer configuration.",
        "* The background color of the game canvas. The default is black.",
        "* Optional callbacks to run before or after game boot.",
        "* Loader configuration.",
        "* Images configuration.",
        "* Physics configuration.",
        "* Plugins to install.",
        "* The Scale Manager configuration.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* The width of each 'pixel' in the generated texture.",
        "* The height of each 'pixel' in the generated texture.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* Color value 1.",
        "* Color value 2.",
        "* Color value 3.",
        "* Color value 4.",
        "* Color value 5.",
        "* Color value 6.",
        "* Color value 7.",
        "* Color value 8.",
        "* Color value 9.",
        "* Color value 10.",
        "* Color value 11.",
        "* Color value 12.",
        "* Color value 13.",
        "* Color value 14.",
        "* Color value 15.",
        "* Color value 16.",
        "* The of the curve.",
        "* The x coordinate of the ellipse.",
        "* The y coordinate of the ellipse.",
        "* The horizontal radius of ellipse.",
        "* The vertical radius of ellipse.",
        "* The start angle of the ellipse, in degrees.",
        "* The end angle of the ellipse, in degrees.",
        "* Sets if the the ellipse rotation is clockwise (true) or anti-clockwise (false)",
        "* The rotation of ellipse, in degrees.",
        "* The x coordinate of the ellipse.",
        "* The y coordinate of the ellipse.",
        "* The horizontal radius of the ellipse.",
        "* The vertical radius of the ellipse.",
        "* The start angle of the ellipse, in degrees.",
        "* The end angle of the ellipse, in degrees.",
        "* Sets if the the ellipse rotation is clockwise (true) or anti-clockwise (false)",
        "* The rotation of the ellipse, in degrees.",
        "* The of the curve",
        "* The arrays of points like `[x1, y1, x2, y2]`",
        "* The of the curve.",
        "* The X coordinate of the curve's starting point.",
        "* The Y coordinate of the path's starting point.",
        "* The path is auto closed.",
        "* The list of the curves",
        "* Checks for support of the Full Screen API.",
        "* The red color value in the range 0 to 255.",
        "* The green color value in the range 0 to 255.",
        "* The blue color value in the range 0 to 255.",
        "* The alpha color value in the range 0 to 255.",
        "* The red color value in the range 0 to 255.",
        "* The green color value in the range 0 to 255.",
        "* The blue color value in the range 0 to 255.",
        "* The alpha color value in the range 0 to 255.",
        "* The hue color value. A number between 0 and 1",
        "* The saturation color value. A number between 0 and 1",
        "* The lightness color value. A number between 0 and 1",
        "* The Dynamic Bitmap Text object that owns this character being rendered.",
        "* The tint of the character being rendered. Always zero in Canvas.",
        "* The index of the character being rendered.",
        "* The character code of the character being rendered.",
        "* The x position of the character being rendered.",
        "* The y position of the character being rendered.",
        "* The scale of the character being rendered.",
        "* The rotation of the character being rendered.",
        "* Custom data stored with the character being rendered.",
        "* The key of the font to use from the BitmapFont cache.",
        "* The string, or array of strings, to be set as the content of this Bitmap Text.",
        "* The font size to set.",
        "* The position and size of the BitmapText, taking into account the position and scale of the Game Object.",
        "* The position and size of the BitmapText, taking just the font size into account.",
        "* The position and size of the Bitmap Text in global space, taking into account the Game Object's scale and world position.",
        "* The x position of the BitmapText, taking into account the x position and scale of the Game Object.",
        "* The y position of the BitmapText, taking into account the y position and scale of the Game Object.",
        "* The width of the BitmapText, taking into account the x scale of the Game Object.",
        "* The height of the BitmapText, taking into account the y scale of the Game Object.",
        "* The position and size of the Bitmap Text in local space, taking just the font size into account.",
        "* The x position of the BitmapText.",
        "* The y position of the BitmapText.",
        "* The width of the BitmapText.",
        "* The height of the BitmapText.",
        "* The font data for an individual character of a Bitmap Font.\n * \n * Describes the character's position, size, offset and kerning.",
        "* The x position of the character.",
        "* The y position of the character.",
        "* The width of the character.",
        "* The height of the character.",
        "* The center x position of the character.",
        "* The center y position of the character.",
        "* The x offset of the character.",
        "* The y offset of the character.",
        "* Extra data for the character.",
        "* Kerning values, keyed by character code.",
        "* Bitmap Font data that can be used by a BitmapText Game Object.",
        "* The name of the font.",
        "* The size of the font.",
        "* The line height of the font.",
        "* Whether this font is a retro font (monospace).",
        "* The character data of the font, keyed by character code. Each character datum includes a position, size, offset and more.",
        "* The name of the font.",
        "* The text that this Bitmap Text displays.",
        "* The size of the font.",
        "* Adds / Removes spacing between characters.",
        "* The alignment of the text in a multi-line BitmapText object.",
        "* The x position of the Game Object.",
        "* The y position of the Game Object.",
        "* The depth of the GameObject.",
        "* The horizontally flipped state of the Game Object.",
        "* The vertically flipped state of the Game Object.",
        "* The scale of the GameObject.",
        "* The scroll factor of the GameObject.",
        "* The rotation angle of the Game Object, in radians.",
        "* The rotation angle of the Game Object, in degrees.",
        "* The alpha (opacity) of the Game Object.",
        "* The origin of the Game Object.",
        "* The scale mode of the GameObject.",
        "* The blend mode of the GameObject.",
        "* The visible state of the Game Object.",
        "* Add the GameObject to the scene.",
        "* The name of this Game Object.",
        "* A textual representation of this Game Object, i.e. `sprite`.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The scale of this Game Object",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The origin of this Game Object.",
        "* The horizontal origin of this Game Object.",
        "* The vertical origin of this Game Object.",
        "* The horizontally flipped state of the Game Object.",
        "* The vertically flipped state of the Game Object.",
        "* The angle of this Game Object in radians.",
        "* The alpha value of the Game Object.",
        "* The visible state of the Game Object.",
        "* The Scale Mode being used by this Game Object.",
        "* Sets the Blend Mode being used by this Game Object.",
        "* The texture key of this Game Object.",
        "* The frame key of this Game Object.",
        "* The data of this Game Object.",
        "* Graphics line style (or stroke style) settings.",
        "* The stroke width.",
        "* The stroke color.",
        "* The stroke alpha.",
        "* Graphics fill style settings.",
        "* The fill color.",
        "* The fill alpha.",
        "* Graphics style settings.",
        "* The style applied to shape outlines.",
        "* The style applied to shape areas.",
        "* Options for the Graphics game Object.",
        "* The x coordinate of the Graphics.",
        "* The y coordinate of the Graphics.",
        "* Top left",
        "* Top right",
        "* Bottom right",
        "* Bottom left",
        "* Sets {@link Phaser.GameObjects.Group#classType}.",
        "* Sets {@link Phaser.GameObjects.Group#active}.",
        "* Sets {@link Phaser.GameObjects.Group#maxSize}.",
        "* Sets {@link Phaser.GameObjects.Group#defaultKey}.",
        "* Sets {@link Phaser.GameObjects.Group#defaultFrame}.",
        "* Sets {@link Phaser.GameObjects.Group#runChildUpdate}.",
        "* Sets {@link Phaser.GameObjects.Group#createCallback}.",
        "* Sets {@link Phaser.GameObjects.Group#removeCallback}.",
        "* Sets {@link Phaser.GameObjects.Group#createMultipleCallback}.",
        "* The total number of objects created will be\n * \n *     key.length * frame.length * frameQuantity * (yoyo ? 2 : 1) * (1 + repeat)\n * \n * In the simplest case, 1 + `repeat` objects will be created.\n * \n * If `max` is positive, then the total created will not exceed `max`.\n * \n * `key` is required. {@link Phaser.GameObjects.Group#defaultKey} is not used.",
        "* The class of each new Game Object.",
        "* The texture key of each new Game Object.",
        "* The texture frame of each new Game Object.",
        "* The visible state of each new Game Object.",
        "* The active state of each new Game Object.",
        "* The number of times each `key` × `frame` combination will be *repeated* (after the first combination).",
        "* Select a `key` at random.",
        "* Select a `frame` at random.",
        "* Select keys and frames by moving forward then backward through `key` and `frame`.",
        "* The number of times each `frame` should be combined with one `key`.",
        "* The maximum number of new Game Objects to create. 0 is no maximum.",
        "* The horizontal position of each new Game Object.",
        "* The vertical position of each new Game Object.",
        "* Increment each Game Object's horizontal position from the previous by this amount, starting from `setXY.x`.",
        "* Increment each Game Object's vertical position from the previous by this amount, starting from `setXY.y`.",
        "* Rotation of each new Game Object.",
        "* Increment each Game Object's rotation from the previous by this amount, starting at `setRotation.value`.",
        "* The horizontal scale of each new Game Object.",
        "* The vertical scale of each new Game Object.",
        "* Increment each Game Object's horizontal scale from the previous by this amount, starting from `setScale.x`.",
        "* Increment each Game object's vertical scale from the previous by this amount, starting from `setScale.y`.",
        "* The alpha value of each new Game Object.",
        "* Increment each Game Object's alpha from the previous by this amount, starting from `setAlpha.value`.",
        "* A geometric shape that defines the hit area for the Game Object.",
        "* A callback to be invoked when the Game Object is interacted with.",
        "* Align the new Game Objects in a grid using these settings.",
        "* A constructor function (class) that can be assigned to `classType`.",
        "* The returned value sets what the property will be at the START of the particle's life, on emit.",
        "* The returned value updates the property for the duration of the particle's life.",
        "* Defines an operation yielding a random value within a range.",
        "* The minimum and maximum values, as [min, max].",
        "* Defines an operation yielding a random value within a range.",
        "* The minimum value.",
        "* The maximum value.",
        "* Defines an operation yielding a random value within a range.",
        "* The starting value.",
        "* The ending value.",
        "* If false, this becomes {@link EmitterOpEaseConfig}.",
        "* Defines an operation yielding a value incremented continuously across a range.",
        "* The starting value.",
        "* The ending value.",
        "* The name of the easing function.",
        "* Defines an operation yielding a value incremented by steps across a range.",
        "* The starting value.",
        "* The ending value.",
        "* The number of steps between start and end.",
        "* A callback that is invoked each time the emitter emits a particle.",
        "* A callback that is invoked each time the emitter emits a particle.",
        "* A callback that is invoked each time the emitter updates.",
        "* The x coordinate of the Gravity Well, in world space.",
        "* The y coordinate of the Gravity Well, in world space.",
        "* The strength of the gravity force - larger numbers produce a stronger force.",
        "* The minimum distance for which the gravity force is calculated.",
        "* The gravitational force of this Gravity Well.",
        "* The left edge of the rectangle.",
        "* The top edge of the rectangle.",
        "* The width of the rectangle.",
        "* The height of the rectangle.",
        "* The left edge of the rectangle.",
        "* The top edge of the rectangle.",
        "* The width of the rectangle.",
        "* The height of the rectangle.",
        "* A shape representing the zone. See {@link Phaser.GameObjects.Particles.Zones.DeathZone#source}.",
        "* 'onEnter' or 'onLeave'.",
        "* A shape representing the zone. See {@link Phaser.GameObjects.Particles.Zones.EdgeZone#source}.",
        "* 'edge'.",
        "* The number of particles to place on the source edge. Set to 0 to use `stepRate` instead.",
        "* The distance between each particle. When set, `quantity` is implied and should be set to 0.",
        "* Whether particles are placed from start to end and then end to start.",
        "* Whether one endpoint will be removed if it's identical to the other.",
        "* A shape representing the zone. See {@link Phaser.GameObjects.Particles.Zones.RandomZone#source}.",
        "* 'random'.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#active}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#blendMode}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallbackScope} and {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallbackScope}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#collideBottom}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#collideLeft}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#collideRight}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#collideTop}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallback}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallbackScope}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallback}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallbackScope}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#follow}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#frequency}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#gravityX}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#gravityY}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#maxParticles}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#name}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#on}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#particleBringToTop}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#particleClass}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#radial}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#timeScale}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#trackVisible}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#visible}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#accelerationX} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#accelerationY} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#alpha}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#angle} (emit only)",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#bounce} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#delay} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#lifespan} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityX} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityY} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#moveToX} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#moveToY} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#rotate}.",
        "* As {@link Phaser.GameObjects.Particles.ParticleEmitter#setScale}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#scaleX}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#scaleY}.",
        "* As {@link Phaser.GameObjects.Particles.ParticleEmitter#setSpeed} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#speedX} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#speedY} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#tint}.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#x} (emit only).",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#y} (emit only).",
        "* As {@link Phaser.GameObjects.Particles.ParticleEmitter#setEmitZone}.",
        "* As {@link Phaser.GameObjects.Particles.ParticleEmitter#setBounds}.",
        "* Assigns to {@link Phaser.GameObjects.Particles.ParticleEmitter#followOffset}.",
        "* x-coordinate of the offset.",
        "* y-coordinate of the offset.",
        "* Sets {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.",
        "* One or more texture frames.",
        "* Whether texture frames will be assigned consecutively (true) or at random (false).",
        "* The number of consecutive particles receiving each texture frame, when `cycle` is true.",
        "* A function placing points on the source's edge or edges.",
        "* A function modifying its point argument.",
        "* Settings for a PathFollower.",
        "* The duration of the path follow.",
        "* The start position of the path follow, between 0 and 1.",
        "* The end position of the path follow, between 0 and 1.",
        "* Whether to position the PathFollower on the Path using its path offset.",
        "* Should the PathFollower automatically rotate to point in the direction of the Path?",
        "* If the PathFollower is rotating to match the Path, this value is added to the rotation value. This allows you to rotate objects to a path but control the angle of the rotation as well.",
        "* Current start position of the path follow, between 0 and 1.",
        "* The x coordinate of the RenderTexture's position.",
        "* The y coordinate of the RenderTexture's position.",
        "* The width of the RenderTexture.",
        "* The height of the RenderTexture.",
        "* The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.",
        "* An optional frame from the Texture this Game Object is rendering with.",
        "* A custom function that will be responsible for wrapping the text.",
        "* Font metrics for a Text Style object.",
        "* The ascent of the font.",
        "* The descent of the font.",
        "* The size of the font.",
        "* The x coordinate of the Tile Sprite.",
        "* The y coordinate of the Tile Sprite.",
        "* The width of the Tile Sprite. If zero it will use the size of the texture frame.",
        "* The height of the Tile Sprite. If zero it will use the size of the texture frame.",
        "* The key of the Texture this Tile Sprite will use to render with, as stored in the Texture Manager.",
        "* An optional frame from the Texture this Tile Sprite is rendering with.",
        "* The ID of the Gamepad.",
        "* The index of the Gamepad.",
        "* The unique name of this plugin in the input plugin cache.",
        "* The plugin to be stored. Should be the source object, not instantiated.",
        "* If this plugin is to be injected into the Input Plugin, this is the property key map used.",
        "* If they press the wrong key do we reset the combo?",
        "* The max delay in ms between each key press. Above this the combo is reset. 0 means disabled.",
        "* If previously matched and they press the first key of the combo again, will it reset?",
        "* If the combo matches, will it delete itself?",
        "* The file type string (image, json, etc) for sorting within the Loader.",
        "* Unique cache key (unique within its file type)",
        "* The URL of the file, not including baseURL.",
        "* The path of the file, not including the baseURL.",
        "* The default extension this file uses.",
        "* The responseType to be used by the XHR request.",
        "* Custom XHR Settings specific to this file and merged with the Loader defaults.",
        "* A config object that can be used by file types to store transitional data.",
        "* The response type of the XHR request, i.e. `blob`, `text`, etc.",
        "* Should the XHR request use async or not?",
        "* Optional username for the XHR request.",
        "* Optional password for the XHR request.",
        "* Optional XHR timeout value.",
        "* This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
        "* This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
        "* This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
        "* Provide a custom mime-type to use instead of the default.",
        "* The sine value.",
        "* The cosine value.",
        "* The length.",
        "* The x component.",
        "* The y component.",
        "* Takes an array of Game Objects, or any objects that have a public `angle` property,\n         * and then adds the given value to each of their `angle` properties.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `Angle(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to be added to the `angle` property.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of objects and passes each of them to the given callback.\n         * @param items The array of items to be updated by this action.\n         * @param callback The callback to be invoked. It will be passed just one argument: the item from the array.\n         * @param context The scope in which the callback will be invoked.",
        "* Takes an array of objects and returns the first element in the array that has properties which match\n         * all of those specified in the `compare` object. For example, if the compare object was: `{ scaleX: 0.5, alpha: 1 }`\n         * then it would return the first item which had the property `scaleX` set to 0.5 and `alpha` set to 1.\n         * \n         * To use this with a Group: `GetFirst(group.getChildren(), compare, index)`\n         * @param items The array of items to be searched by this action.\n         * @param compare The comparison object. Each property in this object will be checked against the items of the array.\n         * @param index An optional offset to start searching from within the items array. Default 0.",
        "* Takes an array of objects and returns the last element in the array that has properties which match\n         * all of those specified in the `compare` object. For example, if the compare object was: `{ scaleX: 0.5, alpha: 1 }`\n         * then it would return the last item which had the property `scaleX` set to 0.5 and `alpha` set to 1.\n         * \n         * To use this with a Group: `GetLast(group.getChildren(), compare, index)`\n         * @param items The array of items to be searched by this action.\n         * @param compare The comparison object. Each property in this object will be checked against the items of the array.\n         * @param index An optional offset to start searching from within the items array. Default 0.",
        "* Takes an array of Game Objects, or any objects that have public `x` and `y` properties,\n         * and then aligns them based on the grid configuration given to this action.\n         * @param items The array of items to be updated by this action.\n         * @param options The GridAlign Configuration object.",
        "* Takes an array of Game Objects, or any objects that have a public `alpha` property,\n         * and then adds the given value to each of their `alpha` properties.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `IncAlpha(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to be added to the `alpha` property.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have a public `x` property,\n         * and then adds the given value to each of their `x` properties.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `IncX(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to be added to the `x` property.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have public `x` and `y` properties,\n         * and then adds the given value to each of them.\n         * \n         * The optional `stepX` and `stepY` properties are applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `IncXY(group.getChildren(), x, y, stepX, stepY)`\n         * @param items The array of items to be updated by this action.\n         * @param x The amount to be added to the `x` property.\n         * @param y The amount to be added to the `y` property. If `undefined` or `null` it uses the `x` value. Default x.\n         * @param stepX This is added to the `x` amount, multiplied by the iteration counter. Default 0.\n         * @param stepY This is added to the `y` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have a public `y` property,\n         * and then adds the given value to each of their `y` properties.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `IncY(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to be added to the `y` property.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects and positions them on evenly spaced points around the perimeter of a Circle.\n         * \n         * If you wish to pass a `Phaser.GameObjects.Circle` Shape to this function, you should pass its `geom` property.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param circle The Circle to position the Game Objects on.\n         * @param startAngle Optional angle to start position from, in radians. Default 0.\n         * @param endAngle Optional angle to stop position at, in radians. Default 6.28.",
        "* Takes an array of Game Objects and positions them on evenly spaced points around the perimeter of an Ellipse.\n         * \n         * If you wish to pass a `Phaser.GameObjects.Ellipse` Shape to this function, you should pass its `geom` property.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param ellipse The Ellipse to position the Game Objects on.\n         * @param startAngle Optional angle to start position from, in radians. Default 0.\n         * @param endAngle Optional angle to stop position at, in radians. Default 6.28.",
        "* Positions an array of Game Objects on evenly spaced points of a Line.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param line The Line to position the Game Objects on.",
        "* Takes an array of Game Objects and positions them on evenly spaced points around the perimeter of a Rectangle.\n         * \n         * Placement starts from the top-left of the rectangle, and proceeds in a clockwise direction.\n         * If the `shift` parameter is given you can offset where placement begins.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param rect The Rectangle to position the Game Objects on.\n         * @param shift An optional positional offset. Default 1.",
        "* Takes an array of Game Objects and positions them on evenly spaced points around the edges of a Triangle.\n         * \n         * If you wish to pass a `Phaser.GameObjects.Triangle` Shape to this function, you should pass its `geom` property.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param triangle The Triangle to position the Game Objects on.\n         * @param stepRate An optional step rate, to increase or decrease the packing of the Game Objects on the lines. Default 1.",
        "* Play an animation with the given key, starting at the given startFrame on all Game Objects in items.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param key The name of the animation to play.\n         * @param startFrame The starting frame of the animation with the given key.",
        "* Takes an array of Game Objects, or any objects that have a public property as defined in `key`,\n         * and then adds the given value to it.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `PropertyValueInc(group.getChildren(), key, value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param key The property to be updated.\n         * @param value The amount to be added to the property.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have a public property as defined in `key`,\n         * and then sets it to the given value.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `PropertyValueSet(group.getChildren(), key, value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param key The property to be updated.\n         * @param value The amount to set the property to.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects and positions them at random locations within the Circle.\n         * \n         * If you wish to pass a `Phaser.GameObjects.Circle` Shape to this function, you should pass its `geom` property.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param circle The Circle to position the Game Objects within.",
        "* Takes an array of Game Objects and positions them at random locations within the Ellipse.\n         * \n         * If you wish to pass a `Phaser.GameObjects.Ellipse` Shape to this function, you should pass its `geom` property.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param ellipse The Ellipse to position the Game Objects within.",
        "* Takes an array of Game Objects and positions them at random locations on the Line.\n         * \n         * If you wish to pass a `Phaser.GameObjects.Line` Shape to this function, you should pass its `geom` property.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param line The Line to position the Game Objects randomly on.",
        "* Takes an array of Game Objects and positions them at random locations within the Ellipse.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param rect The Rectangle to position the Game Objects within.",
        "* Takes an array of Game Objects and positions them at random locations within the Triangle.\n         * \n         * If you wish to pass a `Phaser.GameObjects.Triangle` Shape to this function, you should pass its `geom` property.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param triangle The Triangle to position the Game Objects within.",
        "* Takes an array of Game Objects, or any objects that have a public `rotation` property,\n         * and then adds the given value to each of their `rotation` properties.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `Rotate(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to be added to the `rotation` property (in radians).\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Rotates each item around the given point by the given angle.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param point Any object with public `x` and `y` properties.\n         * @param angle The angle to rotate by, in radians.",
        "* Rotates an array of Game Objects around a point by the given angle and distance.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param point Any object with public `x` and `y` properties.\n         * @param angle The angle to rotate by, in radians.\n         * @param distance The distance from the point of rotation in pixels.",
        "* Takes an array of Game Objects, or any objects that have a public `scaleX` property,\n         * and then adds the given value to each of their `scaleX` properties.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `ScaleX(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to be added to the `scaleX` property.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have public `scaleX` and `scaleY` properties,\n         * and then adds the given value to each of them.\n         * \n         * The optional `stepX` and `stepY` properties are applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `ScaleXY(group.getChildren(), scaleX, scaleY, stepX, stepY)`\n         * @param items The array of items to be updated by this action.\n         * @param scaleX The amount to be added to the `scaleX` property.\n         * @param scaleY The amount to be added to the `scaleY` property. If `undefined` or `null` it uses the `scaleX` value.\n         * @param stepX This is added to the `scaleX` amount, multiplied by the iteration counter. Default 0.\n         * @param stepY This is added to the `y` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have a public `scaleY` property,\n         * and then adds the given value to each of their `scaleY` properties.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `ScaleY(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to be added to the `scaleY` property.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have the public property `alpha`\n         * and then sets it to the given value.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `SetAlpha(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to set the property to.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have the public property `blendMode`\n         * and then sets it to the given value.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `SetBlendMode(group.getChildren(), value)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to set the property to.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have the public property `depth`\n         * and then sets it to the given value.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `SetDepth(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to set the property to.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Passes all provided Game Objects to the Input Manager to enable them for input with identical areas and callbacks.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param hitArea Either an input configuration object, or a geometric shape that defines the hit area for the Game Object. If not specified a Rectangle will be used.\n         * @param hitAreaCallback A callback to be invoked when the Game Object is interacted with. If you provide a shape you must also provide a callback.",
        "* Takes an array of Game Objects, or any objects that have the public properties `originX` and `originY`\n         * and then sets them to the given values.\n         * \n         * The optional `stepX` and `stepY` properties are applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `SetOrigin(group.getChildren(), originX, originY, stepX, stepY)`\n         * @param items The array of items to be updated by this action.\n         * @param originX The amount to set the `originX` property to.\n         * @param originY The amount to set the `originY` property to. If `undefined` or `null` it uses the `originX` value.\n         * @param stepX This is added to the `originX` amount, multiplied by the iteration counter. Default 0.\n         * @param stepY This is added to the `originY` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have the public property `rotation`\n         * and then sets it to the given value.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `SetRotation(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to set the property to.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have the public properties `scaleX` and `scaleY`\n         * and then sets them to the given values.\n         * \n         * The optional `stepX` and `stepY` properties are applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `SetScale(group.getChildren(), scaleX, scaleY, stepX, stepY)`\n         * @param items The array of items to be updated by this action.\n         * @param scaleX The amount to set the `scaleX` property to.\n         * @param scaleY The amount to set the `scaleY` property to. If `undefined` or `null` it uses the `scaleX` value.\n         * @param stepX This is added to the `scaleX` amount, multiplied by the iteration counter. Default 0.\n         * @param stepY This is added to the `scaleY` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have the public property `scaleX`\n         * and then sets it to the given value.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `SetScaleX(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to set the property to.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have the public property `scaleY`\n         * and then sets it to the given value.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `SetScaleY(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to set the property to.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have the public method setTint() and then updates it to the given value(s). You can specify tint color per corner or provide only one color value for `topLeft` parameter, in which case whole item will be tinted with that color.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param topLeft The tint being applied to top-left corner of item. If other parameters are given no value, this tint will be applied to whole item.\n         * @param topRight The tint to be applied to top-right corner of item.\n         * @param bottomLeft The tint to be applied to the bottom-left corner of item.\n         * @param bottomRight The tint to be applied to the bottom-right corner of item.",
        "* Takes an array of Game Objects, or any objects that have the public property `visible`\n         * and then sets it to the given value.\n         * \n         * To use this with a Group: `SetVisible(group.getChildren(), value)`\n         * @param items The array of items to be updated by this action.\n         * @param value The value to set the property to.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have the public property `x`\n         * and then sets it to the given value.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `SetX(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to set the property to.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have the public properties `x` and `y`\n         * and then sets them to the given values.\n         * \n         * The optional `stepX` and `stepY` properties are applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `SetXY(group.getChildren(), x, y, stepX, stepY)`\n         * @param items The array of items to be updated by this action.\n         * @param x The amount to set the `x` property to.\n         * @param y The amount to set the `y` property to. If `undefined` or `null` it uses the `x` value. Default x.\n         * @param stepX This is added to the `x` amount, multiplied by the iteration counter. Default 0.\n         * @param stepY This is added to the `y` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Takes an array of Game Objects, or any objects that have the public property `y`\n         * and then sets it to the given value.\n         * \n         * The optional `step` property is applied incrementally, multiplied by each item in the array.\n         * \n         * To use this with a Group: `SetY(group.getChildren(), value, step)`\n         * @param items The array of items to be updated by this action.\n         * @param value The amount to set the property to.\n         * @param step This is added to the `value` amount, multiplied by the iteration counter. Default 0.\n         * @param index An optional offset to start searching from within the items array. Default 0.\n         * @param direction The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning. Default 1.",
        "* Iterate through the items array changing the position of each element to be that of the element that came before\n         * it in the array (or after it if direction = 1)\n         * \n         * The first items position is set to x/y.\n         * \n         * The final x/y coords are returned\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param x The x coordinate to place the first item in the array at.\n         * @param y The y coordinate to place the first item in the array at.\n         * @param direction The iteration direction. 0 = first to last and 1 = last to first. Default 0.\n         * @param output An optional objec to store the final objects position in.",
        "* Shuffles the array in place. The shuffled array is both modified and returned.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.",
        "* Smootherstep is a sigmoid-like interpolation and clamping function.\n         * \n         * The function depends on three parameters, the input x, the \"left edge\" and the \"right edge\", with the left edge being assumed smaller than the right edge. The function receives a real number x as an argument and returns 0 if x is less than or equal to the left edge, 1 if x is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial, between 0 and 1 otherwise. The slope of the smoothstep function is zero at both edges. This is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param property The property of the Game Object to interpolate.\n         * @param min The minimum interpolation value.\n         * @param max The maximum interpolation value.\n         * @param inc Should the values be incremented? `true` or set (`false`) Default false.",
        "* Smoothstep is a sigmoid-like interpolation and clamping function.\n         * \n         * The function depends on three parameters, the input x, the \"left edge\" and the \"right edge\", with the left edge being assumed smaller than the right edge. The function receives a real number x as an argument and returns 0 if x is less than or equal to the left edge, 1 if x is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial, between 0 and 1 otherwise. The slope of the smoothstep function is zero at both edges. This is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param property The property of the Game Object to interpolate.\n         * @param min The minimum interpolation value.\n         * @param max The maximum interpolation value.\n         * @param inc Should the values be incremented? `true` or set (`false`) Default false.",
        "* Takes an array of Game Objects and then modifies their `property` so the value equals, or is incremented, the\n         * calculated spread value.\n         * \n         * The spread value is derived from the given `min` and `max` values and the total number of items in the array.//#endregion\n         * \n         * For example, to cause an array of Sprites to change in alpha from 0 to 1 you could call:\n         * \n         * ```javascript\n         * Phaser.Actions.Spread(itemsArray, 'alpha', 0, 1);\n         * ```\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param property The property of the Game Object to spread.\n         * @param min The minimum value.\n         * @param max The maximum value.\n         * @param inc Should the values be incremented? `true` or set (`false`) Default false.",
        "* Takes an array of Game Objects and toggles the visibility of each one.\n         * Those previously `visible = false` will become `visible = true`, and vice versa.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.",
        "* Wrap each item's coordinates within a rectangle's area.\n         * @param items An array of Game Objects. The contents of this array are updated by this Action.\n         * @param rect The rectangle.\n         * @param padding An amount added to each side of the rectangle during the operation. Default 0.",
        "* A Frame based Animation.\n         * \n         * This consists of a key, some default values (like the frame rate) and a bunch of Frame objects.\n         * \n         * The Animation Manager creates these. Game Objects don't own an instance of these directly.\n         * Game Objects have the Animation Component, which are like playheads to global Animations (these objects)\n         * So multiple Game Objects can have playheads all pointing to this one Animation instance.",
        "* \n             * @param manager A reference to the global Animation Manager\n             * @param key The unique identifying string for this animation.\n             * @param config The Animation configuration.",
        "* A reference to the global Animation Manager.",
        "* The unique identifying string for this animation.",
        "* A frame based animation (as opposed to a bone based animation)",
        "* Extract all the frame data into the frames array.",
        "* The frame rate of playback in frames per second (default 24 if duration is null)",
        "* How long the animation should play for, in milliseconds.\n             * If the `frameRate` property has been set then it overrides this value,\n             * otherwise the `frameRate` is derived from `duration`.",
        "* How many ms per frame, not including frame specific modifiers.",
        "* Skip frames if the time lags, or always advanced anyway?",
        "* The delay in ms before the playback will begin.",
        "* Number of times to repeat the animation. Set to -1 to repeat forever.",
        "* The delay in ms before the a repeat play starts.",
        "* Should the animation yoyo (reverse back down to the start) before repeating?",
        "* Should the GameObject's `visible` property be set to `true` when the animation starts to play?",
        "* Should the GameObject's `visible` property be set to `false` when the animation finishes?",
        "* Global pause. All Game Objects using this Animation instance are impacted by this property.",
        "* Add frames to the end of the animation.\n             * @param config [description]",
        "* Add frame/s into the animation.\n             * @param index The index to insert the frame at within the animation.\n             * @param config [description]",
        "* Check if the given frame index is valid.\n             * @param index The index to be checked.",
        "* [description]\n             * @param component [description]",
        "* [description]\n             * @param component [description]\n             * @param includeDelay [description] Default true.",
        "* Returns the AnimationFrame at the provided index\n             * @param index The index in the AnimationFrame array",
        "* [description]\n             * @param textureManager [description]\n             * @param frames [description]\n             * @param defaultTextureKey [description]",
        "* [description]\n             * @param component [description]",
        "* Returns the frame closest to the given progress value between 0 and 1.\n             * @param value A value between 0 and 1.",
        "* Advance the animation frame.\n             * @param component The Animation Component to advance.",
        "* Returns the animation last frame.",
        "* [description]\n             * @param component [description]",
        "* [description]\n             * @param frame [description]",
        "* Removes a frame from the AnimationFrame array at the provided index\n             * and updates the animation accordingly.\n             * @param index The index in the AnimationFrame array",
        "* [description]\n             * @param component [description]",
        "* Sets the texture frame the animation uses for rendering.\n             * @param component [description]",
        "* Converts the animation data to JSON.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* A single frame in an Animation sequence.\n         * \n         * An AnimationFrame consists of a reference to the Texture it uses for rendering, references to other\n         * frames in the animation, and index data. It also has the ability to modify the animation timing.\n         * \n         * AnimationFrames are generated automatically by the Animation class.",
        "* \n             * @param textureKey The key of the Texture this AnimationFrame uses.\n             * @param textureFrame The key of the Frame within the Texture that this AnimationFrame uses.\n             * @param index The index of this AnimationFrame within the Animation sequence.\n             * @param frame A reference to the Texture Frame this AnimationFrame uses for rendering.",
        "* The key of the Texture this AnimationFrame uses.",
        "* The key of the Frame within the Texture that this AnimationFrame uses.",
        "* The index of this AnimationFrame within the Animation sequence.",
        "* A reference to the Texture Frame this AnimationFrame uses for rendering.",
        "* Is this the first frame in an animation sequence?",
        "* Is this the last frame in an animation sequence?",
        "* A reference to the AnimationFrame that comes before this one in the animation, if any.",
        "* A reference to the AnimationFrame that comes after this one in the animation, if any.",
        "* Additional time (in ms) that this frame should appear for during playback.\n             * The value is added onto the msPerFrame set by the animation.",
        "* What % through the animation does this frame come?\n             * This value is generated when the animation is created and cached here.",
        "* Generates a JavaScript object suitable for converting to JSON.",
        "* Destroys this object by removing references to external resources and callbacks.",
        "* The Animation Manager.\n         * \n         * Animations are managed by the global Animation Manager. This is a singleton class that is\n         * responsible for creating and delivering animations and their corresponding data to all Game Objects.\n         * Unlike plugins it is owned by the Game instance, not the Scene.\n         * \n         * Sprites and other Game Objects get the data they need from the AnimationManager.",
        "* \n             * @param game A reference to the Phaser.Game instance.",
        "* A reference to the Phaser.Game instance.",
        "* A reference to the Texture Manager.",
        "* The global time scale of the Animation Manager.\n             * \n             * This scales the time delta between two frames, thus influencing the speed of time for the Animation Manager.",
        "* The Animations registered in the Animation Manager.\n             * \n             * This map should be modified with the {@link #add} and {@link #create} methods of the Animation Manager.",
        "* Whether the Animation Manager is paused along with all of its Animations.",
        "* The name of this Animation Manager.",
        "* Registers event listeners after the Game boots.",
        "* Adds an existing Animation to the Animation Manager.\n             * @param key The key under which the Animation should be added. The Animation will be updated with it. Must be unique.\n             * @param animation The Animation which should be added to the Animation Manager.",
        "* Checks to see if the given key is already in use within the Animation Manager or not.\n             * \n             * Animations are global. Keys created in one scene can be used from any other Scene in your game. They are not Scene specific.\n             * @param key The key of the Animation to check.",
        "* Creates a new Animation and adds it to the Animation Manager.\n             * \n             * Animations are global. Once created, you can use them in any Scene in your game. They are not Scene specific.\n             * \n             * If an invalid key is given this method will return `false`.\n             * \n             * If you pass the key of an animation that already exists in the Animation Manager, that animation will be returned.\n             * \n             * A brand new animation is only created if the key is valid and not already in use.\n             * \n             * If you wish to re-use an existing key, call `AnimationManager.remove` first, then this method.\n             * @param config The configuration settings for the Animation.",
        "* Loads this Animation Manager's Animations and settings from a JSON object.\n             * @param data The JSON object to parse.\n             * @param clearCurrentAnimations If set to `true`, the current animations will be removed (`anims.clear()`). If set to `false` (default), the animations in `data` will be added. Default false.",
        "* [description]\n             * @param key The key for the texture containing the animation frames.\n             * @param config The configuration object for the animation frame names.",
        "* Generate an array of {@link Phaser.Animations.Types.AnimationFrame} objects from a texture key and configuration object.\n             * \n             * Generates objects with numbered frame names, as configured by the given {@link Phaser.Animations.Types.GenerateFrameNumbers}.\n             * @param key The key for the texture containing the animation frames.\n             * @param config The configuration object for the animation frames.",
        "* Get an Animation.\n             * @param key The key of the Animation to retrieve.",
        "* Load an Animation into a Game Object's Animation Component.\n             * @param child The Game Object to load the animation into.\n             * @param key The key of the animation to load.\n             * @param startFrame The name of a start frame to set on the loaded animation.",
        "* Pause all animations.",
        "* Play an animation on the given Game Objects that have an Animation Component.\n             * @param key The key of the animation to play on the Game Object.\n             * @param child The Game Objects to play the animation on.",
        "* Remove an animation.\n             * @param key The key of the animation to remove.",
        "* Resume all paused animations.",
        "* Takes an array of Game Objects that have an Animation Component and then\n             * starts the given animation playing on them, each one offset by the\n             * `stagger` amount given to this method.\n             * @param key The key of the animation to play on the Game Objects.\n             * @param children An array of Game Objects to play the animation on. They must have an Animation Component.\n             * @param stagger The amount of time, in milliseconds, to offset each play time by. Default 0.",
        "* Get the animation data as javascript object by giving key, or get the data of all animations as array of objects, if key wasn't provided.\n             * @param key [description]",
        "* Destroy this Animation Manager and clean up animation definitions and references to other objects.\n             * This method should not be called directly. It will be called automatically as a response to a `destroy` event from the Phaser.Game instance.",
        "* The Add Animation Event.\n             * \n             * This event is dispatched when a new animation is added to the global Animation Manager.\n             * \n             * This can happen either as a result of an animation instance being added to the Animation Manager,\n             * or the Animation Manager creating a new animation directly.",
        "* The Animation Complete Event.\n             * \n             * This event is dispatched by an Animation instance when it completes, i.e. finishes playing or is manually stopped.\n             * \n             * Be careful with the volume of events this could generate. If a group of Sprites all complete the same\n             * animation at the same time, this event will invoke its handler for each one of them.",
        "* The Animation Repeat Event.\n             * \n             * This event is dispatched when a currently playing animation repeats.\n             * \n             * The event is dispatched directly from the Animation object itself. Which means that listeners\n             * bound to this event will be invoked every time the Animation repeats, for every Game Object that may have it.",
        "* The Animation Restart Event.\n             * \n             * This event is dispatched by an Animation instance when it restarts.\n             * \n             * Be careful with the volume of events this could generate. If a group of Sprites all restart the same\n             * animation at the same time, this event will invoke its handler for each one of them.",
        "* The Animation Start Event.\n             * \n             * This event is dispatched by an Animation instance when it starts playing.\n             * \n             * Be careful with the volume of events this could generate. If a group of Sprites all play the same\n             * animation at the same time, this event will invoke its handler for each one of them.",
        "* The Pause All Animations Event.\n             * \n             * This event is dispatched when the global Animation Manager is told to pause.\n             * \n             * When this happens all current animations will stop updating, although it doesn't necessarily mean\n             * that the game has paused as well.",
        "* The Remove Animation Event.\n             * \n             * This event is dispatched when an animation is removed from the global Animation Manager.",
        "* The Resume All Animations Event.\n             * \n             * This event is dispatched when the global Animation Manager resumes, having been previously paused.\n             * \n             * When this happens all current animations will continue updating again.",
        "* The Sprite Animation Complete Event.\n             * \n             * This event is dispatched by a Sprite when an animation finishes playing on it.\n             * \n             * Listen for it on the Sprite using `sprite.on('animationcomplete', listener)`\n             * \n             * This same event is dispatched for all animations. To listen for a specific animation, use the `SPRITE_ANIMATION_KEY_COMPLETE` event.",
        "* The Sprite Animation Key Complete Event.\n             * \n             * This event is dispatched by a Sprite when a specific animation finishes playing on it.\n             * \n             * Listen for it on the Sprite using `sprite.on('animationcomplete-key', listener)` where `key` is the key of\n             * the animation. For example, if you had an animation with the key 'explode' you should listen for `animationcomplete-explode`.",
        "* The Sprite Animation Key Repeat Event.\n             * \n             * This event is dispatched by a Sprite when a specific animation repeats playing on it.\n             * \n             * Listen for it on the Sprite using `sprite.on('animationrepeat-key', listener)` where `key` is the key of\n             * the animation. For example, if you had an animation with the key 'explode' you should listen for `animationrepeat-explode`.",
        "* The Sprite Animation Key Restart Event.\n             * \n             * This event is dispatched by a Sprite when a specific animation restarts playing on it.\n             * \n             * Listen for it on the Sprite using `sprite.on('animationrestart-key', listener)` where `key` is the key of\n             * the animation. For example, if you had an animation with the key 'explode' you should listen for `animationrestart-explode`.",
        "* The Sprite Animation Key Start Event.\n             * \n             * This event is dispatched by a Sprite when a specific animation starts playing on it.\n             * \n             * Listen for it on the Sprite using `sprite.on('animationstart-key', listener)` where `key` is the key of\n             * the animation. For example, if you had an animation with the key 'explode' you should listen for `animationstart-explode`.",
        "* The Sprite Animation Key Update Event.\n             * \n             * This event is dispatched by a Sprite when a specific animation playing on it updates. This happens when the animation changes frame,\n             * based on the animation frame rate and other factors like `timeScale` and `delay`.\n             * \n             * Listen for it on the Sprite using `sprite.on('animationupdate-key', listener)` where `key` is the key of\n             * the animation. For example, if you had an animation with the key 'explode' you should listen for `animationupdate-explode`.",
        "* The Sprite Animation Repeat Event.\n             * \n             * This event is dispatched by a Sprite when an animation repeats playing on it.\n             * \n             * Listen for it on the Sprite using `sprite.on('animationrepeat', listener)`\n             * \n             * This same event is dispatched for all animations. To listen for a specific animation, use the `SPRITE_ANIMATION_KEY_REPEAT` event.",
        "* The Sprite Animation Restart Event.\n             * \n             * This event is dispatched by a Sprite when an animation restarts playing on it.\n             * \n             * Listen for it on the Sprite using `sprite.on('animationrestart', listener)`\n             * \n             * This same event is dispatched for all animations. To listen for a specific animation, use the `SPRITE_ANIMATION_KEY_RESTART` event.",
        "* The Sprite Animation Start Event.\n             * \n             * This event is dispatched by a Sprite when an animation starts playing on it.\n             * \n             * Listen for it on the Sprite using `sprite.on('animationstart', listener)`\n             * \n             * This same event is dispatched for all animations. To listen for a specific animation, use the `SPRITE_ANIMATION_KEY_START` event.",
        "* The Sprite Animation Update Event.\n             * \n             * This event is dispatched by a Sprite when an animation playing on it updates. This happens when the animation changes frame,\n             * based on the animation frame rate and other factors like `timeScale` and `delay`.\n             * \n             * Listen for it on the Sprite using `sprite.on('animationupdate', listener)`\n             * \n             * This same event is dispatched for all animations. To listen for a specific animation, use the `SPRITE_ANIMATION_KEY_UPDATE` event.",
        "* The key that the animation will be associated with. i.e. sprite.animations.play(key)",
        "* An object containing data used to generate the frames for the animation",
        "* The key of the texture all frames of the animation will use. Can be overridden on a per frame basis.",
        "* The frame rate of playback in frames per second (default 24 if duration is null)",
        "* How long the animation should play for in milliseconds. If not given its derived from frameRate.",
        "* Skip frames if the time lags, or always advanced anyway?",
        "* Delay before starting playback. Value given in milliseconds.",
        "* Number of times to repeat the animation (-1 for infinity)",
        "* Delay before the animation repeats. Value given in milliseconds.",
        "* Should the animation yoyo? (reverse back down to the start) before repeating?",
        "* Should sprite.visible = true when the animation starts to play?",
        "* Should sprite.visible = false when the animation finishes?",
        "* The key that the animation will be associated with. i.e. sprite.animations.play(key)",
        "* [description]",
        "* [description]",
        "* [description]",
        "* The string to append to every resulting frame name if using a range or an array of `frames`.",
        "* If `frames` is not provided, the number of the first frame to return.",
        "* If `frames` is not provided, the number of the last frame to return.",
        "* The string to append to every resulting frame name if using a range or an array of `frames`.",
        "* The minimum expected lengths of each resulting frame's number. Numbers will be left-padded with zeroes until they are this long, then prepended and appended to create the resulting frame name.",
        "* The array to append the created configuration objects to.",
        "* If provided as an array, the range defined by `start` and `end` will be ignored and these frame numbers will be used.",
        "* The starting frame of the animation.",
        "* The ending frame of the animation.",
        "* A frame to put at the beginning of the animation, before `start` or `outputArray` or `frames`.",
        "* An array to concatenate the output onto.",
        "* A custom sequence of frames.",
        "* The key that the animation will be associated with. i.e. sprite.animations.play(key)",
        "* A frame based animation (as opposed to a bone based animation)",
        "* [description]",
        "* The frame rate of playback in frames per second (default 24 if duration is null)",
        "* How long the animation should play for in milliseconds. If not given its derived from frameRate.",
        "* Skip frames if the time lags, or always advanced anyway?",
        "* Delay before starting playback. Value given in milliseconds.",
        "* Number of times to repeat the animation (-1 for infinity)",
        "* Delay before the animation repeats. Value given in milliseconds.",
        "* Should the animation yoyo? (reverse back down to the start) before repeating?",
        "* Should sprite.visible = true when the animation starts to play?",
        "* Should sprite.visible = false when the animation finishes?",
        "* The key of the Texture this AnimationFrame uses.",
        "* The key of the Frame within the Texture that this AnimationFrame uses.",
        "* Additional time (in ms) that this frame should appear for during playback.",
        "* An array of all Animations added to the Animation Manager.",
        "* The global time scale of the Animation Manager.",
        "* The BaseCache is a base Cache class that can be used for storing references to any kind of data.\n         * \n         * Data can be added, retrieved and removed based on the given keys.\n         * \n         * Keys are string-based.",
        "* The Map in which the cache objects are stored.\n             * \n             * You can query the Map directly or use the BaseCache methods.",
        "* An instance of EventEmitter used by the cache to emit related events.",
        "* Adds an item to this cache. The item is referenced by a unique string, which you are responsible\n             * for setting and keeping track of. The item can only be retrieved by using this string.\n             * @param key The unique key by which the data added to the cache will be referenced.\n             * @param data The data to be stored in the cache.",
        "* Checks if this cache contains an item matching the given key.\n             * This performs the same action as `BaseCache.exists`.\n             * @param key The unique key of the item to be checked in this cache.",
        "* Checks if this cache contains an item matching the given key.\n             * This performs the same action as `BaseCache.has` and is called directly by the Loader.\n             * @param key The unique key of the item to be checked in this cache.",
        "* Gets an item from this cache based on the given key.\n             * @param key The unique key of the item to be retrieved from this cache.",
        "* Removes and item from this cache based on the given key.\n             * \n             * If an entry matching the key is found it is removed from the cache and a `remove` event emitted.\n             * No additional checks are done on the item removed. If other systems or parts of your game code\n             * are relying on this item, it is up to you to sever those relationships prior to removing the item.\n             * @param key The unique key of the item to remove from the cache.",
        "* Destroys this cache and all items within it.",
        "* The Cache Manager is the global cache owned and maintained by the Game instance.\n         * \n         * Various systems, such as the file Loader, rely on this cache in order to store the files\n         * it has loaded. The manager itself doesn't store any files, but instead owns multiple BaseCache\n         * instances, one per type of file. You can also add your own custom caches.",
        "* \n             * @param game A reference to the Phaser.Game instance that owns this CacheManager.",
        "* A reference to the Phaser.Game instance that owns this CacheManager.",
        "* A Cache storing all binary files, typically added via the Loader.",
        "* A Cache storing all bitmap font data files, typically added via the Loader.\n             * Only the font data is stored in this cache, the textures are part of the Texture Manager.",
        "* A Cache storing all JSON data files, typically added via the Loader.",
        "* A Cache storing all physics data files, typically added via the Loader.",
        "* A Cache storing all shader source files, typically added via the Loader.",
        "* A Cache storing all non-streaming audio files, typically added via the Loader.",
        "* A Cache storing all text files, typically added via the Loader.",
        "* A Cache storing all html files, typically added via the Loader.",
        "* A Cache storing all WaveFront OBJ files, typically added via the Loader.",
        "* A Cache storing all tilemap data files, typically added via the Loader.\n             * Only the data is stored in this cache, the textures are part of the Texture Manager.",
        "* A Cache storing all xml data files, typically added via the Loader.",
        "* An object that contains your own custom BaseCache entries.\n             * Add to this via the `addCustom` method.",
        "* Add your own custom Cache for storing your own files.\n             * The cache will be available under `Cache.custom.key`.\n             * The cache will only be created if the key is not already in use.\n             * @param key The unique key of your custom cache.",
        "* Removes all entries from all BaseCaches and destroys all custom caches.",
        "* The Cache Add Event.\n             * \n             * This event is dispatched by any Cache that extends the BaseCache each time a new object is added to it.",
        "* The Cache Remove Event.\n             * \n             * This event is dispatched by any Cache that extends the BaseCache each time an object is removed from it.",
        "* A Base Camera class.\n             * \n             * The Camera is the way in which all games are rendered in Phaser. They provide a view into your game world,\n             * and can be positioned, rotated, zoomed and scrolled accordingly.\n             * \n             * A Camera consists of two elements: The viewport and the scroll values.\n             * \n             * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\n             * created the same size as your game, but their position and size can be set to anything. This means if you\n             * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\n             * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\n             * \n             * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\n             * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\n             * viewport, and changing the viewport has no impact on the scrolling.\n             * \n             * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\n             * allowing you to filter Game Objects out on a per-Camera basis.\n             * \n             * The Base Camera is extended by the Camera class, which adds in special effects including Fade,\n             * Flash and Camera Shake, as well as the ability to follow Game Objects.\n             * \n             * The Base Camera was introduced in Phaser 3.12. It was split off from the Camera class, to allow\n             * you to isolate special effects as needed. Therefore the 'since' values for properties of this class relate\n             * to when they were added to the Camera class.",
        "* \n                 * @param x The x position of the Camera, relative to the top-left of the game canvas.\n                 * @param y The y position of the Camera, relative to the top-left of the game canvas.\n                 * @param width The width of the Camera, in pixels.\n                 * @param height The height of the Camera, in pixels.",
        "* A reference to the Scene this camera belongs to.",
        "* A reference to the Game Scene Manager.",
        "* A reference to the Game Scale Manager.",
        "* The Camera ID. Assigned by the Camera Manager and used to handle camera exclusion.\n                 * This value is a bitmask.",
        "* The name of the Camera. This is left empty for your own use.",
        "* This property is un-used in v3.16.\n                 * \n                 * The resolution of the Game, used in most Camera calculations.",
        "* Should this camera round its pixel values to integers?",
        "* Is this Camera visible or not?\n                 * \n                 * A visible camera will render and perform input tests.\n                 * An invisible camera will not render anything and will skip input tests.",
        "* Is this Camera using a bounds to restrict scrolling movement?\n                 * \n                 * Set this property along with the bounds via `Camera.setBounds`.",
        "* The World View is a Rectangle that defines the area of the 'world' the Camera is currently looking at.\n                 * This factors in the Camera viewport size, zoom and scroll position and is updated in the Camera preRender step.\n                 * If you have enabled Camera bounds the worldview will be clamped to those bounds accordingly.\n                 * You can use it for culling or intersection checks.",
        "* Is this Camera dirty?\n                 * \n                 * A dirty Camera has had either its viewport size, bounds, scroll, rotation or zoom levels changed since the last frame.\n                 * \n                 * This flag is cleared during the `postRenderCamera` method of the renderer.",
        "* Does this Camera have a transparent background?",
        "* The background color of this Camera. Only used if `transparent` is `false`.",
        "* The Camera alpha value. Setting this property impacts every single object that this Camera\n                 * renders. You can either set the property directly, i.e. via a Tween, to fade a Camera in or out,\n                 * or via the chainable `setAlpha` method instead.",
        "* Should the camera cull Game Objects before checking them for input hit tests?\n                 * In some special cases it may be beneficial to disable this.",
        "* The mid-point of the Camera in 'world' coordinates.\n                 * \n                 * Use it to obtain exactly where in the world the center of the camera is currently looking.\n                 * \n                 * This value is updated in the preRender method, after the scroll values and follower\n                 * have been processed.",
        "* The horizontal origin of rotation for this Camera.\n                 * \n                 * By default the camera rotates around the center of the viewport.\n                 * \n                 * Changing the origin allows you to adjust the point in the viewport from which rotation happens.\n                 * A value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\n                 * \n                 * See `setOrigin` to set both origins in a single, chainable call.",
        "* The vertical origin of rotation for this Camera.\n                 * \n                 * By default the camera rotates around the center of the viewport.\n                 * \n                 * Changing the origin allows you to adjust the point in the viewport from which rotation happens.\n                 * A value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\n                 * \n                 * See `setOrigin` to set both origins in a single, chainable call.",
        "* Set the Alpha level of this Camera. The alpha controls the opacity of the Camera as it renders.\n                 * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n                 * @param value The Camera alpha value. Default 1.",
        "* Sets the rotation origin of this Camera.\n                 * \n                 * The values are given in the range 0 to 1 and are only used when calculating Camera rotation.\n                 * \n                 * By default the camera rotates around the center of the viewport.\n                 * \n                 * Changing the origin allows you to adjust the point in the viewport from which rotation happens.\n                 * A value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\n                 * @param x The horizontal origin value. Default 0.5.\n                 * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Calculates what the Camera.scrollX and scrollY values would need to be in order to move\n                 * the Camera so it is centered on the given x and y coordinates, without actually moving\n                 * the Camera there. The results are clamped based on the Camera bounds, if set.\n                 * @param x The horizontal coordinate to center on.\n                 * @param y The vertical coordinate to center on.\n                 * @param out A Vec2 to store the values in. If not given a new Vec2 is created.",
        "* Moves the Camera horizontally so that it is centered on the given x coordinate, bounds allowing.\n                 * Calling this does not change the scrollY value.\n                 * @param x The horizontal coordinate to center on.",
        "* Moves the Camera vertically so that it is centered on the given y coordinate, bounds allowing.\n                 * Calling this does not change the scrollX value.\n                 * @param y The vertical coordinate to center on.",
        "* Moves the Camera so that it is centered on the given coordinates, bounds allowing.\n                 * @param x The horizontal coordinate to center on.\n                 * @param y The vertical coordinate to center on.",
        "* Moves the Camera so that it is looking at the center of the Camera Bounds, if enabled.",
        "* Moves the Camera so that it is re-centered based on its viewport size.",
        "* Takes an array of Game Objects and returns a new array featuring only those objects\n                 * visible by this camera.\n                 * @param renderableObjects An array of Game Objects to cull.",
        "* Converts the given `x` and `y` coordinates into World space, based on this Cameras transform.\n                 * You can optionally provide a Vector2, or similar object, to store the results in.\n                 * @param x The x position to convert to world space.\n                 * @param y The y position to convert to world space.\n                 * @param output An optional object to store the results in. If not provided a new Vector2 will be created.",
        "* Given a Game Object, or an array of Game Objects, it will update all of their camera filter settings\n                 * so that they are ignored by this Camera. This means they will not be rendered by this Camera.\n                 * @param entries The Game Object, or array of Game Objects, to be ignored by this Camera.",
        "* Internal preRender step.\n                 * @param resolution The game resolution, as set in the Scale Manager.",
        "* Takes an x value and checks it's within the range of the Camera bounds, adjusting if required.\n                 * Do not call this method if you are not using camera bounds.\n                 * @param x The value to horizontally scroll clamp.",
        "* Takes a y value and checks it's within the range of the Camera bounds, adjusting if required.\n                 * Do not call this method if you are not using camera bounds.\n                 * @param y The value to vertically scroll clamp.",
        "* If this Camera has previously had movement bounds set on it, this will remove them.",
        "* Set the rotation of this Camera. This causes everything it renders to appear rotated.\n                 * \n                 * Rotating a camera does not rotate the viewport itself, it is applied during rendering.\n                 * @param value The cameras angle of rotation, given in degrees. Default 0.",
        "* Sets the background color for this Camera.\n                 * \n                 * By default a Camera has a transparent background but it can be given a solid color, with any level\n                 * of transparency, via this method.\n                 * \n                 * The color value can be specified using CSS color notation, hex or numbers.\n                 * @param color The color value. In CSS, hex or numeric color notation. Default 'rgba(0,0,0,0)'.",
        "* Set the bounds of the Camera. The bounds are an axis-aligned rectangle.\n                 * \n                 * The Camera bounds controls where the Camera can scroll to, stopping it from scrolling off the\n                 * edges and into blank space. It does not limit the placement of Game Objects, or where\n                 * the Camera viewport can be positioned.\n                 * \n                 * Temporarily disable the bounds by changing the boolean `Camera.useBounds`.\n                 * \n                 * Clear the bounds entirely by calling `Camera.removeBounds`.\n                 * \n                 * If you set bounds that are smaller than the viewport it will stop the Camera from being\n                 * able to scroll. The bounds can be positioned where-ever you wish. By default they are from\n                 * 0x0 to the canvas width x height. This means that the coordinate 0x0 is the top left of\n                 * the Camera bounds. However, you can position them anywhere. So if you wanted a game world\n                 * that was 2048x2048 in size, with 0x0 being the center of it, you can set the bounds x/y\n                 * to be -1024, -1024, with a width and height of 2048. Depending on your game you may find\n                 * it easier for 0x0 to be the top-left of the bounds, or you may wish 0x0 to be the middle.\n                 * @param x The top-left x coordinate of the bounds.\n                 * @param y The top-left y coordinate of the bounds.\n                 * @param width The width of the bounds, in pixels.\n                 * @param height The height of the bounds, in pixels.\n                 * @param centerOn If `true` the Camera will automatically be centered on the new bounds. Default false.",
        "* Returns a rectangle containing the bounds of the Camera.\n                 * \n                 * If the Camera does not have any bounds the rectangle will be empty.\n                 * \n                 * The rectangle is a copy of the bounds, so is safe to modify.\n                 * @param out An optional Rectangle to store the bounds in. If not given, a new Rectangle will be created.",
        "* Sets the name of this Camera.\n                 * This value is for your own use and isn't used internally.\n                 * @param value The name of the Camera. Default ''.",
        "* Set the position of the Camera viewport within the game.\n                 * \n                 * This does not change where the camera is 'looking'. See `setScroll` to control that.\n                 * @param x The top-left x coordinate of the Camera viewport.\n                 * @param y The top-left y coordinate of the Camera viewport. Default x.",
        "* Set the rotation of this Camera. This causes everything it renders to appear rotated.\n                 * \n                 * Rotating a camera does not rotate the viewport itself, it is applied during rendering.\n                 * @param value The rotation of the Camera, in radians. Default 0.",
        "* Should the Camera round pixel values to whole integers when rendering Game Objects?\n                 * \n                 * In some types of game, especially with pixel art, this is required to prevent sub-pixel aliasing.\n                 * @param value `true` to round Camera pixels, `false` to not.",
        "* Sets the Scene the Camera is bound to.\n                 * \n                 * Also populates the `resolution` property and updates the internal size values.\n                 * @param scene The Scene the camera is bound to.",
        "* Set the position of where the Camera is looking within the game.\n                 * You can also modify the properties `Camera.scrollX` and `Camera.scrollY` directly.\n                 * Use this method, or the scroll properties, to move your camera around the game world.\n                 * \n                 * This does not change where the camera viewport is placed. See `setPosition` to control that.\n                 * @param x The x coordinate of the Camera in the game world.\n                 * @param y The y coordinate of the Camera in the game world. Default x.",
        "* Set the size of the Camera viewport.\n                 * \n                 * By default a Camera is the same size as the game, but can be made smaller via this method,\n                 * allowing you to create mini-cam style effects by creating and positioning a smaller Camera\n                 * viewport within your game.\n                 * @param width The width of the Camera viewport.\n                 * @param height The height of the Camera viewport. Default width.",
        "* This method sets the position and size of the Camera viewport in a single call.\n                 * \n                 * If you're trying to change where the Camera is looking at in your game, then see\n                 * the method `Camera.setScroll` instead. This method is for changing the viewport\n                 * itself, not what the camera can see.\n                 * \n                 * By default a Camera is the same size as the game, but can be made smaller via this method,\n                 * allowing you to create mini-cam style effects by creating and positioning a smaller Camera\n                 * viewport within your game.\n                 * @param x The top-left x coordinate of the Camera viewport.\n                 * @param y The top-left y coordinate of the Camera viewport.\n                 * @param width The width of the Camera viewport.\n                 * @param height The height of the Camera viewport. Default width.",
        "* Set the zoom value of the Camera.\n                 * \n                 * Changing to a smaller value, such as 0.5, will cause the camera to 'zoom out'.\n                 * Changing to a larger value, such as 2, will cause the camera to 'zoom in'.\n                 * \n                 * A value of 1 means 'no zoom' and is the default.\n                 * \n                 * Changing the zoom does not impact the Camera viewport in any way, it is only applied during rendering.\n                 * @param value The zoom value of the Camera. The minimum it can be is 0.001. Default 1.",
        "* Sets the visibility of this Camera.\n                 * \n                 * An invisible Camera will skip rendering and input tests of everything it can see.\n                 * @param value The visible state of the Camera.",
        "* Returns an Object suitable for JSON storage containing all of the Camera viewport and rendering properties.",
        "* Internal method called automatically by the Camera Manager.\n                 * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n                 * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Destroys this Camera instance and its internal properties and references.\n                 * Once destroyed you cannot use this Camera again, even if re-added to a Camera Manager.\n                 * \n                 * This method is called automatically by `CameraManager.remove` if that methods `runDestroy` argument is `true`, which is the default.\n                 * \n                 * Unless you have a specific reason otherwise, always use `CameraManager.remove` and allow it to handle the camera destruction,\n                 * rather than calling this method directly.",
        "* The x position of the Camera viewport, relative to the top-left of the game canvas.\n                 * The viewport is the area into which the camera renders.\n                 * To adjust the position the camera is looking at in the game world, see the `scrollX` value.",
        "* The y position of the Camera viewport, relative to the top-left of the game canvas.\n                 * The viewport is the area into which the camera renders.\n                 * To adjust the position the camera is looking at in the game world, see the `scrollY` value.",
        "* The width of the Camera viewport, in pixels.\n                 * \n                 * The viewport is the area into which the Camera renders. Setting the viewport does\n                 * not restrict where the Camera can scroll to.",
        "* The height of the Camera viewport, in pixels.\n                 * \n                 * The viewport is the area into which the Camera renders. Setting the viewport does\n                 * not restrict where the Camera can scroll to.",
        "* The horizontal scroll position of this Camera.\n                 * \n                 * Change this value to cause the Camera to scroll around your Scene.\n                 * \n                 * Alternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\n                 * will automatically adjust the Camera scroll values accordingly.\n                 * \n                 * You can set the bounds within which the Camera can scroll via the `setBounds` method.",
        "* The vertical scroll position of this Camera.\n                 * \n                 * Change this value to cause the Camera to scroll around your Scene.\n                 * \n                 * Alternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\n                 * will automatically adjust the Camera scroll values accordingly.\n                 * \n                 * You can set the bounds within which the Camera can scroll via the `setBounds` method.",
        "* The Camera zoom value. Change this value to zoom in, or out of, a Scene.\n                 * \n                 * A value of 0.5 would zoom the Camera out, so you can now see twice as much\n                 * of the Scene as before. A value of 2 would zoom the Camera in, so every pixel\n                 * now takes up 2 pixels when rendered.\n                 * \n                 * Set to 1 to return to the default zoom level.\n                 * \n                 * Be careful to never set this value to zero.",
        "* The horizontal position of the center of the Camera's viewport, relative to the left of the game canvas.",
        "* The vertical position of the center of the Camera's viewport, relative to the top of the game canvas.",
        "* The displayed width of the camera viewport, factoring in the camera zoom level.\n                 * \n                 * If a camera has a viewport width of 800 and a zoom of 0.5 then its display width\n                 * would be 1600, as it's displaying twice as many pixels as zoom level 1.\n                 * \n                 * Equally, a camera with a width of 800 and zoom of 2 would have a display width\n                 * of 400 pixels.",
        "* The displayed height of the camera viewport, factoring in the camera zoom level.\n                 * \n                 * If a camera has a viewport height of 600 and a zoom of 0.5 then its display height\n                 * would be 1200, as it's displaying twice as many pixels as zoom level 1.\n                 * \n                 * Equally, a camera with a height of 600 and zoom of 2 would have a display height\n                 * of 300 pixels.",
        "* Clears all alpha values associated with this Game Object.\n                 * \n                 * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* The alpha value starting from the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* A Camera.\n             * \n             * The Camera is the way in which all games are rendered in Phaser. They provide a view into your game world,\n             * and can be positioned, rotated, zoomed and scrolled accordingly.\n             * \n             * A Camera consists of two elements: The viewport and the scroll values.\n             * \n             * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\n             * created the same size as your game, but their position and size can be set to anything. This means if you\n             * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\n             * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\n             * \n             * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\n             * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\n             * viewport, and changing the viewport has no impact on the scrolling.\n             * \n             * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\n             * allowing you to filter Game Objects out on a per-Camera basis.\n             * \n             * A Camera also has built-in special effects including Fade, Flash and Camera Shake.",
        "* \n                 * @param x The x position of the Camera, relative to the top-left of the game canvas.\n                 * @param y The y position of the Camera, relative to the top-left of the game canvas.\n                 * @param width The width of the Camera, in pixels.\n                 * @param height The height of the Camera, in pixels.",
        "* Does this Camera allow the Game Objects it renders to receive input events?",
        "* The Camera Fade effect handler.\n                 * To fade this camera see the `Camera.fade` methods.",
        "* The Camera Flash effect handler.\n                 * To flash this camera see the `Camera.flash` method.",
        "* The Camera Shake effect handler.\n                 * To shake this camera see the `Camera.shake` method.",
        "* The Camera Pan effect handler.\n                 * To pan this camera see the `Camera.pan` method.",
        "* The Camera Zoom effect handler.\n                 * To zoom this camera see the `Camera.zoom` method.",
        "* The linear interpolation value to use when following a target.\n                 * \n                 * Can also be set via `setLerp` or as part of the `startFollow` call.\n                 * \n                 * The default values of 1 means the camera will instantly snap to the target coordinates.\n                 * A lower value, such as 0.1 means the camera will more slowly track the target, giving\n                 * a smooth transition. You can set the horizontal and vertical values independently, and also\n                 * adjust this value in real-time during your game.\n                 * \n                 * Be sure to keep the value between 0 and 1. A value of zero will disable tracking on that axis.",
        "* The values stored in this property are subtracted from the Camera targets position, allowing you to\n                 * offset the camera from the actual target x/y coordinates by this amount.\n                 * Can also be set via `setFollowOffset` or as part of the `startFollow` call.",
        "* The Camera dead zone.\n                 * \n                 * The deadzone is only used when the camera is following a target.\n                 * \n                 * It defines a rectangular region within which if the target is present, the camera will not scroll.\n                 * If the target moves outside of this area, the camera will begin scrolling in order to follow it.\n                 * \n                 * The `lerp` values that you can set for a follower target also apply when using a deadzone.\n                 * \n                 * You can directly set this property to be an instance of a Rectangle. Or, you can use the\n                 * `setDeadzone` method for a chainable approach.\n                 * \n                 * The rectangle you provide can have its dimensions adjusted dynamically, however, please\n                 * note that its position is updated every frame, as it is constantly re-centered on the cameras mid point.\n                 * \n                 * Calling `setDeadzone` with no arguments will reset an active deadzone, as will setting this property\n                 * to `null`.",
        "* Is this Camera rendering directly to the canvas or to a texture?\n                 * \n                 * Enable rendering to texture with the method `setRenderToTexture` (just enabling this boolean won't be enough)\n                 * \n                 * Once enabled you can toggle it by switching this property.\n                 * \n                 * To properly remove a render texture you should call the `clearRenderToTexture()` method.",
        "* If this Camera has been set to render to a texture then this holds a reference\n                 * to the HTML Canvas Element that the Camera is drawing to.\n                 * \n                 * Enable texture rendering using the method `setRenderToTexture`.\n                 * \n                 * This is only populated if Phaser is running with the Canvas Renderer.",
        "* If this Camera has been set to render to a texture then this holds a reference\n                 * to the Rendering Context belonging to the Canvas element the Camera is drawing to.\n                 * \n                 * Enable texture rendering using the method `setRenderToTexture`.\n                 * \n                 * This is only populated if Phaser is running with the Canvas Renderer.",
        "* If this Camera has been set to render to a texture then this holds a reference\n                 * to the GL Texture belonging the Camera is drawing to.\n                 * \n                 * Enable texture rendering using the method `setRenderToTexture`.\n                 * \n                 * This is only set if Phaser is running with the WebGL Renderer.",
        "* If this Camera has been set to render to a texture then this holds a reference\n                 * to the GL Frame Buffer belonging the Camera is drawing to.\n                 * \n                 * Enable texture rendering using the method `setRenderToTexture`.\n                 * \n                 * This is only set if Phaser is running with the WebGL Renderer.",
        "* If this Camera has been set to render to a texture and to use a custom pipeline,\n                 * then this holds a reference to the pipeline the Camera is drawing with.\n                 * \n                 * Enable texture rendering using the method `setRenderToTexture`.\n                 * \n                 * This is only set if Phaser is running with the WebGL Renderer.",
        "* Sets the Camera to render to a texture instead of to the main canvas.\n                 * \n                 * The Camera will redirect all Game Objects it's asked to render to this texture.\n                 * \n                 * During the render sequence, the texture itself will then be rendered to the main canvas.\n                 * \n                 * Doing this gives you the ability to modify the texture before this happens,\n                 * allowing for special effects such as Camera specific shaders, or post-processing\n                 * on the texture.\n                 * \n                 * If running under Canvas the Camera will render to its `canvas` property.\n                 * \n                 * If running under WebGL the Camera will create a frame buffer, which is stored in its `framebuffer` and `glTexture` properties.\n                 * \n                 * If you set a camera to render to a texture then it will emit 2 events during the render loop:\n                 * \n                 * First, it will emit the event `prerender`. This happens right before any Game Object's are drawn to the Camera texture.\n                 * \n                 * Then, it will emit the event `postrender`. This happens after all Game Object's have been drawn, but right before the\n                 * Camera texture is rendered to the main game canvas. It's the final point at which you can manipulate the texture before\n                 * it appears in-game.\n                 * \n                 * You should not enable this unless you plan on actually using the texture it creates\n                 * somehow, otherwise you're just doubling the work required to render your game.\n                 * \n                 * To temporarily disable rendering to a texture, toggle the `renderToTexture` boolean.\n                 * \n                 * If you no longer require the Camera to render to a texture, call the `clearRenderToTexture` method,\n                 * which will delete the respective textures and free-up resources.\n                 * @param pipeline An optional WebGL Pipeline to render with, can be either a string which is the name of the pipeline, or a pipeline reference.",
        "* Sets the WebGL pipeline this Camera is using when rendering to a texture.\n                 * \n                 * You can pass either the string-based name of the pipeline, or a reference to the pipeline itself.\n                 * \n                 * Call this method with no arguments to clear any previously set pipeline.\n                 * @param pipeline The WebGL Pipeline to render with, can be either a string which is the name of the pipeline, or a pipeline reference. Or if left empty it will clear the pipeline.",
        "* If this Camera was set to render to a texture, this will clear the resources it was using and\n                 * redirect it to render back to the primary Canvas again.\n                 * \n                 * If you only wish to temporarily disable rendering to a texture then you can toggle the\n                 * property `renderToTexture` instead.",
        "* Sets the Camera dead zone.\n                 * \n                 * The deadzone is only used when the camera is following a target.\n                 * \n                 * It defines a rectangular region within which if the target is present, the camera will not scroll.\n                 * If the target moves outside of this area, the camera will begin scrolling in order to follow it.\n                 * \n                 * The deadzone rectangle is re-positioned every frame so that it is centered on the mid-point\n                 * of the camera. This allows you to use the object for additional game related checks, such as\n                 * testing if an object is within it or not via a Rectangle.contains call.\n                 * \n                 * The `lerp` values that you can set for a follower target also apply when using a deadzone.\n                 * \n                 * Calling this method with no arguments will reset an active deadzone.\n                 * @param width The width of the deadzone rectangle in pixels. If not specified the deadzone is removed.\n                 * @param height The height of the deadzone rectangle in pixels.",
        "* Fades the Camera in from the given color over the duration specified.\n                 * @param duration The duration of the effect in milliseconds. Default 1000.\n                 * @param red The amount to fade the red channel towards. A value between 0 and 255. Default 0.\n                 * @param green The amount to fade the green channel towards. A value between 0 and 255. Default 0.\n                 * @param blue The amount to fade the blue channel towards. A value between 0 and 255. Default 0.\n                 * @param callback This callback will be invoked every frame for the duration of the effect.\n                 * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\n                 * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* Fades the Camera out to the given color over the duration specified.\n                 * This is an alias for Camera.fade that forces the fade to start, regardless of existing fades.\n                 * @param duration The duration of the effect in milliseconds. Default 1000.\n                 * @param red The amount to fade the red channel towards. A value between 0 and 255. Default 0.\n                 * @param green The amount to fade the green channel towards. A value between 0 and 255. Default 0.\n                 * @param blue The amount to fade the blue channel towards. A value between 0 and 255. Default 0.\n                 * @param callback This callback will be invoked every frame for the duration of the effect.\n                 * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\n                 * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* Fades the Camera from the given color to transparent over the duration specified.\n                 * @param duration The duration of the effect in milliseconds. Default 1000.\n                 * @param red The amount to fade the red channel towards. A value between 0 and 255. Default 0.\n                 * @param green The amount to fade the green channel towards. A value between 0 and 255. Default 0.\n                 * @param blue The amount to fade the blue channel towards. A value between 0 and 255. Default 0.\n                 * @param force Force the effect to start immediately, even if already running. Default false.\n                 * @param callback This callback will be invoked every frame for the duration of the effect.\n                 * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\n                 * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* Fades the Camera from transparent to the given color over the duration specified.\n                 * @param duration The duration of the effect in milliseconds. Default 1000.\n                 * @param red The amount to fade the red channel towards. A value between 0 and 255. Default 0.\n                 * @param green The amount to fade the green channel towards. A value between 0 and 255. Default 0.\n                 * @param blue The amount to fade the blue channel towards. A value between 0 and 255. Default 0.\n                 * @param force Force the effect to start immediately, even if already running. Default false.\n                 * @param callback This callback will be invoked every frame for the duration of the effect.\n                 * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\n                 * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* Flashes the Camera by setting it to the given color immediately and then fading it away again quickly over the duration specified.\n                 * @param duration The duration of the effect in milliseconds. Default 250.\n                 * @param red The amount to fade the red channel towards. A value between 0 and 255. Default 255.\n                 * @param green The amount to fade the green channel towards. A value between 0 and 255. Default 255.\n                 * @param blue The amount to fade the blue channel towards. A value between 0 and 255. Default 255.\n                 * @param force Force the effect to start immediately, even if already running. Default false.\n                 * @param callback This callback will be invoked every frame for the duration of the effect.\n                 * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\n                 * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* Shakes the Camera by the given intensity over the duration specified.\n                 * @param duration The duration of the effect in milliseconds. Default 100.\n                 * @param intensity The intensity of the shake. Default 0.05.\n                 * @param force Force the shake effect to start immediately, even if already running. Default false.\n                 * @param callback This callback will be invoked every frame for the duration of the effect.\n                 * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\n                 * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\n                 * over the duration and with the ease specified.\n                 * @param x The destination x coordinate to scroll the center of the Camera viewport to.\n                 * @param y The destination y coordinate to scroll the center of the Camera viewport to.\n                 * @param duration The duration of the effect in milliseconds. Default 1000.\n                 * @param ease The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function. Default 'Linear'.\n                 * @param force Force the pan effect to start immediately, even if already running. Default false.\n                 * @param callback This callback will be invoked every frame for the duration of the effect.\n                 * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\n                 * the current camera scroll x coordinate and the current camera scroll y coordinate.\n                 * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\n                 * @param zoom The target Camera zoom value.\n                 * @param duration The duration of the effect in milliseconds. Default 1000.\n                 * @param ease The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function. Default 'Linear'.\n                 * @param force Force the pan effect to start immediately, even if already running. Default false.\n                 * @param callback This callback will be invoked every frame for the duration of the effect.\n                 * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\n                 * the current camera scroll x coordinate and the current camera scroll y coordinate.\n                 * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* Internal preRender step.\n                 * @param resolution The game resolution, as set in the Scale Manager.",
        "* Sets the linear interpolation value to use when following a target.\n                 * \n                 * The default values of 1 means the camera will instantly snap to the target coordinates.\n                 * A lower value, such as 0.1 means the camera will more slowly track the target, giving\n                 * a smooth transition. You can set the horizontal and vertical values independently, and also\n                 * adjust this value in real-time during your game.\n                 * \n                 * Be sure to keep the value between 0 and 1. A value of zero will disable tracking on that axis.\n                 * @param x The amount added to the horizontal linear interpolation of the follow target. Default 1.\n                 * @param y The amount added to the vertical linear interpolation of the follow target. Default 1.",
        "* Sets the horizontal and vertical offset of the camera from its follow target.\n                 * The values are subtracted from the targets position during the Cameras update step.\n                 * @param x The horizontal offset from the camera follow target.x position. Default 0.\n                 * @param y The vertical offset from the camera follow target.y position. Default 0.",
        "* Sets the Camera to follow a Game Object.\n                 * \n                 * When enabled the Camera will automatically adjust its scroll position to keep the target Game Object\n                 * in its center.\n                 * \n                 * You can set the linear interpolation value used in the follow code.\n                 * Use low lerp values (such as 0.1) to automatically smooth the camera motion.\n                 * \n                 * If you find you're getting a slight \"jitter\" effect when following an object it's probably to do with sub-pixel\n                 * rendering of the targets position. This can be rounded by setting the `roundPixels` argument to `true` to\n                 * force full pixel rounding rendering. Note that this can still be broken if you have specified a non-integer zoom\n                 * value on the camera. So be sure to keep the camera zoom to integers.\n                 * @param target The target for the Camera to follow.\n                 * @param roundPixels Round the camera position to whole integers to avoid sub-pixel rendering? Default false.\n                 * @param lerpX A value between 0 and 1. This value specifies the amount of linear interpolation to use when horizontally tracking the target. The closer the value to 1, the faster the camera will track. Default 1.\n                 * @param lerpY A value between 0 and 1. This value specifies the amount of linear interpolation to use when vertically tracking the target. The closer the value to 1, the faster the camera will track. Default 1.\n                 * @param offsetX The horizontal offset from the camera follow target.x position. Default 0.\n                 * @param offsetY The vertical offset from the camera follow target.y position. Default 0.",
        "* Stops a Camera from following a Game Object, if previously set via `Camera.startFollow`.",
        "* Resets any active FX, such as a fade, flash or shake. Useful to call after a fade in order to\n                 * remove the fade.",
        "* Internal method called automatically by the Camera Manager.\n                 * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n                 * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Destroys this Camera instance. You rarely need to call this directly.\n                 * \n                 * Called by the Camera Manager. If you wish to destroy a Camera please use `CameraManager.remove` as\n                 * cameras are stored in a pool, ready for recycling later, and calling this directly will prevent that.",
        "* Clears all alpha values associated with this Game Object.\n                 * \n                 * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* The alpha value starting from the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The horizontally flipped state of the Game Object.\n                 * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n                 * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n                 * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n                 * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n                 * \n                 * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n                 * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n                 * \n                 * The tint works by taking the pixel color values from the Game Objects texture, and then\n                 * multiplying it by the color value of the tint. You can provide either one color value,\n                 * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n                 * per corner. The colors are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n                 * \n                 * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n                 * with those in the tint. You can use this for effects such as making a player flash 'white'\n                 * if hit by something. You can provide either one color value, in which case the whole\n                 * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n                 * are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The Camera Manager is a plugin that belongs to a Scene and is responsible for managing all of the Scene Cameras.\n             * \n             * By default you can access the Camera Manager from within a Scene using `this.cameras`, although this can be changed\n             * in your game config.\n             * \n             * Create new Cameras using the `add` method. Or extend the Camera class with your own addition code and then add\n             * the new Camera in using the `addExisting` method.\n             * \n             * Cameras provide a view into your game world, and can be positioned, rotated, zoomed and scrolled accordingly.\n             * \n             * A Camera consists of two elements: The viewport and the scroll values.\n             * \n             * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\n             * created the same size as your game, but their position and size can be set to anything. This means if you\n             * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\n             * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\n             * \n             * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\n             * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\n             * viewport, and changing the viewport has no impact on the scrolling.\n             * \n             * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\n             * allowing you to filter Game Objects out on a per-Camera basis. The Camera Manager can manage up to 31 unique \n             * 'Game Object ignore capable' Cameras. Any Cameras beyond 31 that you create will all be given a Camera ID of\n             * zero, meaning that they cannot be used for Game Object exclusion. This means if you need your Camera to ignore\n             * Game Objects, make sure it's one of the first 31 created.\n             * \n             * A Camera also has built-in special effects including Fade, Flash, Camera Shake, Pan and Zoom.",
        "* \n                 * @param scene The Scene that owns the Camera Manager plugin.",
        "* The Scene that owns the Camera Manager plugin.",
        "* A reference to the Scene.Systems handler for the Scene that owns the Camera Manager.",
        "* All Cameras created by, or added to, this Camera Manager, will have their `roundPixels`\n                 * property set to match this value. By default it is set to match the value set in the\n                 * game configuration, but can be changed at any point. Equally, individual cameras can\n                 * also be changed as needed.",
        "* An Array of the Camera objects being managed by this Camera Manager.\n                 * The Cameras are updated and rendered in the same order in which they appear in this array.\n                 * Do not directly add or remove entries to this array. However, you can move the contents\n                 * around the array should you wish to adjust the display order.",
        "* A handy reference to the 'main' camera. By default this is the first Camera the\n                 * Camera Manager creates. You can also set it directly, or use the `makeMain` argument\n                 * in the `add` and `addExisting` methods. It allows you to access it from your game:\n                 * \n                 * ```javascript\n                 * var cam = this.cameras.main;\n                 * ```\n                 * \n                 * Also see the properties `camera1`, `camera2` and so on.",
        "* Adds a new Camera into the Camera Manager. The Camera Manager can support up to 31 different Cameras.\n                 * \n                 * Each Camera has its own viewport, which controls the size of the Camera and its position within the canvas.\n                 * \n                 * Use the `Camera.scrollX` and `Camera.scrollY` properties to change where the Camera is looking, or the\n                 * Camera methods such as `centerOn`. Cameras also have built in special effects, such as fade, flash, shake,\n                 * pan and zoom.\n                 * \n                 * By default Cameras are transparent and will render anything that they can see based on their `scrollX`\n                 * and `scrollY` values. Game Objects can be set to be ignored by a Camera by using the `Camera.ignore` method.\n                 * \n                 * The Camera will have its `roundPixels` property set to whatever `CameraManager.roundPixels` is. You can change\n                 * it after creation if required.\n                 * \n                 * See the Camera class documentation for more details.\n                 * @param x The horizontal position of the Camera viewport. Default 0.\n                 * @param y The vertical position of the Camera viewport. Default 0.\n                 * @param width The width of the Camera viewport. If not given it'll be the game config size.\n                 * @param height The height of the Camera viewport. If not given it'll be the game config size.\n                 * @param makeMain Set this Camera as being the 'main' camera. This just makes the property `main` a reference to it. Default false.\n                 * @param name The name of the Camera. Default ''.",
        "* Adds an existing Camera into the Camera Manager.\n                 * \n                 * The Camera should either be a `Phaser.Cameras.Scene2D.Camera` instance, or a class that extends from it.\n                 * \n                 * The Camera will have its `roundPixels` property set to whatever `CameraManager.roundPixels` is. You can change\n                 * it after addition if required.\n                 * \n                 * The Camera will be assigned an ID, which is used for Game Object exclusion and then added to the\n                 * manager. As long as it doesn't already exist in the manager it will be added then returned.\n                 * \n                 * If this method returns `null` then the Camera already exists in this Camera Manager.\n                 * @param camera The Camera to be added to the Camera Manager.\n                 * @param makeMain Set this Camera as being the 'main' camera. This just makes the property `main` a reference to it. Default false.",
        "* Gets the total number of Cameras in this Camera Manager.\n                 * \n                 * If the optional `isVisible` argument is set it will only count Cameras that are currently visible.\n                 * @param isVisible Set the `true` to only include visible Cameras in the total. Default false.",
        "* Populates this Camera Manager based on the given configuration object, or an array of config objects.\n                 * \n                 * See the `InputJSONCameraObject` documentation for details of the object structure.\n                 * @param config A Camera configuration object, or an array of them, to be added to this Camera Manager.",
        "* Gets a Camera based on its name.\n                 * \n                 * Camera names are optional and don't have to be set, so this method is only of any use if you\n                 * have given your Cameras unique names.\n                 * @param name The name of the Camera.",
        "* Returns an array of all cameras below the given Pointer.\n                 * \n                 * The first camera in the array is the top-most camera in the camera list.\n                 * @param pointer The Pointer to check against.",
        "* Removes the given Camera, or an array of Cameras, from this Camera Manager.\n                 * \n                 * If found in the Camera Manager it will be immediately removed from the local cameras array.\n                 * If also currently the 'main' camera, 'main' will be reset to be camera 0.\n                 * \n                 * The removed Cameras are automatically destroyed if the `runDestroy` argument is `true`, which is the default.\n                 * If you wish to re-use the cameras then set this to `false`, but know that they will retain their references\n                 * and internal data until destroyed or re-added to a Camera Manager.\n                 * @param camera The Camera, or an array of Cameras, to be removed from this Camera Manager.\n                 * @param runDestroy Automatically call `Camera.destroy` on each Camera removed from this Camera Manager. Default true.",
        "* The internal render method. This is called automatically by the Scene and should not be invoked directly.\n                 * \n                 * It will iterate through all local cameras and render them in turn, as long as they're visible and have\n                 * an alpha level > 0.\n                 * @param renderer The Renderer that will render the children to this camera.\n                 * @param children An array of renderable Game Objects.\n                 * @param interpolation Interpolation value. Reserved for future use.",
        "* Resets this Camera Manager.\n                 * \n                 * This will iterate through all current Cameras, destroying them all, then it will reset the\n                 * cameras array, reset the ID counter and create 1 new single camera using the default values.",
        "* The main update loop. Called automatically when the Scene steps.\n                 * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n                 * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Resizes all cameras to the given dimensions.\n                 * @param width The new width of the camera.\n                 * @param height The new height of the camera.",
        "* A Camera Fade effect.\n                 * \n                 * This effect will fade the camera viewport to the given color, over the duration specified.\n                 * \n                 * Only the camera viewport is faded. None of the objects it is displaying are impacted, i.e. their colors do\n                 * not change.\n                 * \n                 * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\n                 * which is invoked each frame for the duration of the effect, if required.",
        "* \n                     * @param camera The camera this effect is acting upon.",
        "* The Camera this effect belongs to.",
        "* Is this effect actively running?",
        "* Has this effect finished running?\n                     * \n                     * This is different from `isRunning` because it remains set to `true` when the effect is over,\n                     * until the effect is either reset or started again.",
        "* The direction of the fade.\n                     * `true` = fade out (transparent to color), `false` = fade in (color to transparent)",
        "* The duration of the effect, in milliseconds.",
        "* If this effect is running this holds the current percentage of the progress, a value between 0 and 1.",
        "* Fades the Camera to or from the given color over the duration specified.\n                     * @param direction The direction of the fade. `true` = fade out (transparent to color), `false` = fade in (color to transparent) Default true.\n                     * @param duration The duration of the effect in milliseconds. Default 1000.\n                     * @param red The amount to fade the red channel towards. A value between 0 and 255. Default 0.\n                     * @param green The amount to fade the green channel towards. A value between 0 and 255. Default 0.\n                     * @param blue The amount to fade the blue channel towards. A value between 0 and 255. Default 0.\n                     * @param force Force the effect to start immediately, even if already running. Default false.\n                     * @param callback This callback will be invoked every frame for the duration of the effect.\n                     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\n                     * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* The main update loop for this effect. Called automatically by the Camera.\n                     * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n                     * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Called internally by the Canvas Renderer.\n                     * @param ctx The Canvas context to render to.",
        "* Called internally by the WebGL Renderer.\n                     * @param pipeline The WebGL Pipeline to render to.\n                     * @param getTintFunction A function that will return the gl safe tint colors.",
        "* Called internally when the effect completes.",
        "* Resets this camera effect.\n                     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.",
        "* Destroys this effect, releasing it from the Camera.",
        "* A Camera Flash effect.\n                 * \n                 * This effect will flash the camera viewport to the given color, over the duration specified.\n                 * \n                 * Only the camera viewport is flashed. None of the objects it is displaying are impacted, i.e. their colors do\n                 * not change.\n                 * \n                 * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\n                 * which is invoked each frame for the duration of the effect, if required.",
        "* \n                     * @param camera The camera this effect is acting upon.",
        "* The Camera this effect belongs to.",
        "* Is this effect actively running?",
        "* The duration of the effect, in milliseconds.",
        "* If this effect is running this holds the current percentage of the progress, a value between 0 and 1.",
        "* Flashes the Camera to or from the given color over the duration specified.\n                     * @param duration The duration of the effect in milliseconds. Default 250.\n                     * @param red The amount to fade the red channel towards. A value between 0 and 255. Default 255.\n                     * @param green The amount to fade the green channel towards. A value between 0 and 255. Default 255.\n                     * @param blue The amount to fade the blue channel towards. A value between 0 and 255. Default 255.\n                     * @param force Force the effect to start immediately, even if already running. Default false.\n                     * @param callback This callback will be invoked every frame for the duration of the effect.\n                     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\n                     * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* The main update loop for this effect. Called automatically by the Camera.\n                     * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n                     * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Called internally by the Canvas Renderer.\n                     * @param ctx The Canvas context to render to.",
        "* Called internally by the WebGL Renderer.\n                     * @param pipeline The WebGL Pipeline to render to.\n                     * @param getTintFunction A function that will return the gl safe tint colors.",
        "* Called internally when the effect completes.",
        "* Resets this camera effect.\n                     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.",
        "* Destroys this effect, releasing it from the Camera.",
        "* A Camera Pan effect.\n                 * \n                 * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\n                 * over the duration and with the ease specified.\n                 * \n                 * Only the camera scroll is moved. None of the objects it is displaying are impacted, i.e. their positions do\n                 * not change.\n                 * \n                 * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\n                 * which is invoked each frame for the duration of the effect if required.",
        "* \n                     * @param camera The camera this effect is acting upon.",
        "* The Camera this effect belongs to.",
        "* Is this effect actively running?",
        "* The duration of the effect, in milliseconds.",
        "* The starting scroll coordinates to pan the camera from.",
        "* The constantly updated value based on zoom.",
        "* The destination scroll coordinates to pan the camera to.",
        "* The ease function to use during the pan.",
        "* If this effect is running this holds the current percentage of the progress, a value between 0 and 1.",
        "* This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\n                     * over the duration and with the ease specified.\n                     * @param x The destination x coordinate to scroll the center of the Camera viewport to.\n                     * @param y The destination y coordinate to scroll the center of the Camera viewport to.\n                     * @param duration The duration of the effect in milliseconds. Default 1000.\n                     * @param ease The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function. Default 'Linear'.\n                     * @param force Force the pan effect to start immediately, even if already running. Default false.\n                     * @param callback This callback will be invoked every frame for the duration of the effect.\n                     * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\n                     * the current camera scroll x coordinate and the current camera scroll y coordinate.\n                     * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* The main update loop for this effect. Called automatically by the Camera.\n                     * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n                     * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Called internally when the effect completes.",
        "* Resets this camera effect.\n                     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.",
        "* Destroys this effect, releasing it from the Camera.",
        "* A Camera Shake effect.\n                 * \n                 * This effect will shake the camera viewport by a random amount, bounded by the specified intensity, each frame.\n                 * \n                 * Only the camera viewport is moved. None of the objects it is displaying are impacted, i.e. their positions do\n                 * not change.\n                 * \n                 * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\n                 * which is invoked each frame for the duration of the effect if required.",
        "* \n                     * @param camera The camera this effect is acting upon.",
        "* The Camera this effect belongs to.",
        "* Is this effect actively running?",
        "* The duration of the effect, in milliseconds.",
        "* The intensity of the effect. Use small float values. The default when the effect starts is 0.05.\n                     * This is a Vector2 object, allowing you to control the shake intensity independently across x and y.\n                     * You can modify this value while the effect is active to create more varied shake effects.",
        "* If this effect is running this holds the current percentage of the progress, a value between 0 and 1.",
        "* Shakes the Camera by the given intensity over the duration specified.\n                     * @param duration The duration of the effect in milliseconds. Default 100.\n                     * @param intensity The intensity of the shake. Default 0.05.\n                     * @param force Force the shake effect to start immediately, even if already running. Default false.\n                     * @param callback This callback will be invoked every frame for the duration of the effect.\n                     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\n                     * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* The pre-render step for this effect. Called automatically by the Camera.",
        "* The main update loop for this effect. Called automatically by the Camera.\n                     * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n                     * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Called internally when the effect completes.",
        "* Resets this camera effect.\n                     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.",
        "* Destroys this effect, releasing it from the Camera.",
        "* A Camera Zoom effect.\n                 * \n                 * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\n                 * \n                 * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\n                 * which is invoked each frame for the duration of the effect if required.",
        "* \n                     * @param camera The camera this effect is acting upon.",
        "* The Camera this effect belongs to.",
        "* Is this effect actively running?",
        "* The duration of the effect, in milliseconds.",
        "* The starting zoom value;",
        "* The destination zoom value.",
        "* The ease function to use during the zoom.",
        "* If this effect is running this holds the current percentage of the progress, a value between 0 and 1.",
        "* This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\n                     * @param zoom The target Camera zoom value.\n                     * @param duration The duration of the effect in milliseconds. Default 1000.\n                     * @param ease The ease to use for the Zoom. Can be any of the Phaser Easing constants or a custom function. Default 'Linear'.\n                     * @param force Force the zoom effect to start immediately, even if already running. Default false.\n                     * @param callback This callback will be invoked every frame for the duration of the effect.\n                     * It is sent three arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\n                     * and the current camera zoom value.\n                     * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.",
        "* The main update loop for this effect. Called automatically by the Camera.\n                     * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n                     * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Called internally when the effect completes.",
        "* Resets this camera effect.\n                     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.",
        "* Destroys this effect, releasing it from the Camera.",
        "* The Destroy Camera Event.\n                 * \n                 * This event is dispatched by a Camera instance when it is destroyed by the Camera Manager.",
        "* The Camera Fade In Complete Event.\n                 * \n                 * This event is dispatched by a Camera instance when the Fade In Effect completes.\n                 * \n                 * Listen to it from a Camera instance using `Camera.on('camerafadeincomplete', listener)`.",
        "* The Camera Fade In Start Event.\n                 * \n                 * This event is dispatched by a Camera instance when the Fade In Effect starts.\n                 * \n                 * Listen to it from a Camera instance using `Camera.on('camerafadeinstart', listener)`.",
        "* The Camera Fade Out Complete Event.\n                 * \n                 * This event is dispatched by a Camera instance when the Fade Out Effect completes.\n                 * \n                 * Listen to it from a Camera instance using `Camera.on('camerafadeoutcomplete', listener)`.",
        "* The Camera Fade Out Start Event.\n                 * \n                 * This event is dispatched by a Camera instance when the Fade Out Effect starts.\n                 * \n                 * Listen to it from a Camera instance using `Camera.on('camerafadeoutstart', listener)`.",
        "* The Camera Flash Complete Event.\n                 * \n                 * This event is dispatched by a Camera instance when the Flash Effect completes.",
        "* The Camera Flash Start Event.\n                 * \n                 * This event is dispatched by a Camera instance when the Flash Effect starts.",
        "* The Camera Pan Complete Event.\n                 * \n                 * This event is dispatched by a Camera instance when the Pan Effect completes.",
        "* The Camera Pan Start Event.\n                 * \n                 * This event is dispatched by a Camera instance when the Pan Effect starts.",
        "* The Camera Post-Render Event.\n                 * \n                 * This event is dispatched by a Camera instance after is has finished rendering.\n                 * It is only dispatched if the Camera is rendering to a texture.\n                 * \n                 * Listen to it from a Camera instance using: `camera.on('postrender', listener)`.",
        "* The Camera Pre-Render Event.\n                 * \n                 * This event is dispatched by a Camera instance when it is about to render.\n                 * It is only dispatched if the Camera is rendering to a texture.\n                 * \n                 * Listen to it from a Camera instance using: `camera.on('prerender', listener)`.",
        "* The Camera Shake Complete Event.\n                 * \n                 * This event is dispatched by a Camera instance when the Shake Effect completes.",
        "* The Camera Shake Start Event.\n                 * \n                 * This event is dispatched by a Camera instance when the Shake Effect starts.",
        "* The Camera Zoom Complete Event.\n                 * \n                 * This event is dispatched by a Camera instance when the Zoom Effect completes.",
        "* The Camera Zoom Start Event.\n                 * \n                 * This event is dispatched by a Camera instance when the Zoom Effect starts.",
        "* A Fixed Key Camera Control.\n             * \n             * This allows you to control the movement and zoom of a camera using the defined keys.\n             * \n             * ```javascript\n             * var camControl = new FixedKeyControl({\n             *     camera: this.cameras.main,\n             *     left: cursors.left,\n             *     right: cursors.right,\n             *     speed: float OR { x: 0, y: 0 }\n             * });\n             * ```\n             * \n             * Movement is precise and has no 'smoothing' applied to it.\n             * \n             * You must call the `update` method of this controller every frame.",
        "* \n                 * @param config The Fixed Key Control configuration object.",
        "* The Camera that this Control will update.",
        "* The Key to be pressed that will move the Camera left.",
        "* The Key to be pressed that will move the Camera right.",
        "* The Key to be pressed that will move the Camera up.",
        "* The Key to be pressed that will move the Camera down.",
        "* The Key to be pressed that will zoom the Camera in.",
        "* The Key to be pressed that will zoom the Camera out.",
        "* The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.",
        "* The horizontal speed the camera will move.",
        "* The vertical speed the camera will move.",
        "* A flag controlling if the Controls will update the Camera or not.",
        "* Starts the Key Control running, providing it has been linked to a camera.",
        "* Stops this Key Control from running. Call `start` to start it again.",
        "* Binds this Key Control to a camera.\n                 * @param camera The camera to bind this Key Control to.",
        "* Applies the results of pressing the control keys to the Camera.\n                 * \n                 * You must call this every step, it is not called automatically.\n                 * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* Destroys this Key Control.",
        "* A Smoothed Key Camera Control.\n             * \n             * This allows you to control the movement and zoom of a camera using the defined keys.\n             * Unlike the Fixed Camera Control you can also provide physics values for acceleration, drag and maxSpeed for smoothing effects.\n             * \n             * ```javascript\n             * \n             * var controlConfig = {\n             *     camera: this.cameras.main,\n             *     left: cursors.left,\n             *     right: cursors.right,\n             *     up: cursors.up,\n             *     down: cursors.down,\n             *     zoomIn: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.Q),\n             *     zoomOut: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E),\n             *     zoomSpeed: 0.02,\n             *     acceleration: 0.06,\n             *     drag: 0.0005,\n             *     maxSpeed: 1.0\n             * };\n             * ```\n             * \n             * You must call the `update` method of this controller every frame.",
        "* \n                 * @param config The Smoothed Key Control configuration object.",
        "* The Camera that this Control will update.",
        "* The Key to be pressed that will move the Camera left.",
        "* The Key to be pressed that will move the Camera right.",
        "* The Key to be pressed that will move the Camera up.",
        "* The Key to be pressed that will move the Camera down.",
        "* The Key to be pressed that will zoom the Camera in.",
        "* The Key to be pressed that will zoom the Camera out.",
        "* The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.",
        "* The horizontal acceleration the camera will move.",
        "* The vertical acceleration the camera will move.",
        "* The horizontal drag applied to the camera when it is moving.",
        "* The vertical drag applied to the camera when it is moving.",
        "* The maximum horizontal speed the camera will move.",
        "* The maximum vertical speed the camera will move.",
        "* A flag controlling if the Controls will update the Camera or not.",
        "* Starts the Key Control running, providing it has been linked to a camera.",
        "* Stops this Key Control from running. Call `start` to start it again.",
        "* Binds this Key Control to a camera.\n                 * @param camera The camera to bind this Key Control to.",
        "* Applies the results of pressing the control keys to the Camera.\n                 * \n                 * You must call this every step, it is not called automatically.\n                 * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* Destroys this Key Control.",
        "* Phaser Release Version",
        "* AUTO Detect Renderer.",
        "* Canvas Renderer.",
        "* WebGL Renderer.",
        "* Headless Renderer.",
        "* In Phaser the value -1 means 'forever' in lots of cases, this const allows you to use it instead\n     * to help you remember what the value is doing in your code.",
        "* Direction constant.",
        "* Direction constant.",
        "* Direction constant.",
        "* Direction constant.",
        "* Direction constant.",
        "* The Phaser.Game instance is the main controller for the entire Phaser game. It is responsible\n     * for handling the boot process, parsing the configuration values, creating the renderer,\n     * and setting-up all of the global Phaser systems, such as sound and input.\n     * Once that is complete it will start the Scene Manager and then begin the main game loop.\n     * \n     * You should generally avoid accessing any of the systems created by Game, and instead use those\n     * made available to you via the Phaser.Scene Systems class instead.",
        "* \n         * @param GameConfig The configuration object for your Phaser Game instance.",
        "* The parsed Game Configuration object.\n         * \n         * The values stored within this object are read-only and should not be changed at run-time.",
        "* A reference to either the Canvas or WebGL Renderer that this Game is using.",
        "* A reference to an HTML Div Element used as a DOM Element Container.\n         * \n         * Only set if `createDOMContainer` is `true` in the game config (by default it is `false`) and\n         * if you provide a parent element to insert the Phaser Game inside.\n         * \n         * See the DOM Element Game Object for more details.",
        "* A reference to the HTML Canvas Element that Phaser uses to render the game.\n         * This is created automatically by Phaser unless you provide a `canvas` property\n         * in your Game Config.",
        "* A reference to the Rendering Context belonging to the Canvas Element this game is rendering to.\n         * If the game is running under Canvas it will be a 2d Canvas Rendering Context.\n         * If the game is running under WebGL it will be a WebGL Rendering Context.\n         * This context is created automatically by Phaser unless you provide a `context` property\n         * in your Game Config.",
        "* A flag indicating when this Game instance has finished its boot process.",
        "* A flag indicating if this Game is currently running its game step or not.",
        "* An Event Emitter which is used to broadcast game-level events from the global systems.",
        "* An instance of the Animation Manager.\n         * \n         * The Animation Manager is a global system responsible for managing all animations used within your game.",
        "* An instance of the Texture Manager.\n         * \n         * The Texture Manager is a global system responsible for managing all textures being used by your game.",
        "* An instance of the Cache Manager.\n         * \n         * The Cache Manager is a global system responsible for caching, accessing and releasing external game assets.",
        "* An instance of the Data Manager",
        "* An instance of the Input Manager.\n         * \n         * The Input Manager is a global system responsible for the capture of browser-level input events.",
        "* An instance of the Scene Manager.\n         * \n         * The Scene Manager is a global system responsible for creating, modifying and updating the Scenes in your game.",
        "* A reference to the Device inspector.\n         * \n         * Contains information about the device running this game, such as OS, browser vendor and feature support.\n         * Used by various systems to determine capabilities and code paths.",
        "* An instance of the Scale Manager.\n         * \n         * The Scale Manager is a global system responsible for handling scaling of the game canvas.",
        "* An instance of the base Sound Manager.\n         * \n         * The Sound Manager is a global system responsible for the playback and updating of all audio in your game.",
        "* An instance of the Time Step.\n         * \n         * The Time Step is a global system responsible for setting-up and responding to the browser frame events, processing\n         * them and calculating delta values. It then automatically calls the game step.",
        "* An instance of the Plugin Manager.\n         * \n         * The Plugin Manager is a global system that allows plugins to register themselves with it, and can then install\n         * those plugins into Scenes as required.",
        "* An instance of the Facebook Instant Games Plugin.\n         * \n         * This will only be available if the plugin has been built into Phaser,\n         * or you're using the special Facebook Instant Games custom build.",
        "* Does the window the game is running in currently have focus or not?\n         * This is modified by the VisibilityHandler.",
        "* This method is called automatically when the DOM is ready. It is responsible for creating the renderer,\n         * displaying the Debug Header, adding the game canvas to the DOM and emitting the 'boot' event.\n         * It listens for a 'ready' event from the base systems and once received it will call `Game.start`.",
        "* Called automatically by Game.boot once all of the global systems have finished setting themselves up.\n         * By this point the Game is now ready to start the main loop running.\n         * It will also enable the Visibility Handler.",
        "* The main Game Step. Called automatically by the Time Step, once per browser frame (typically as a result of\n         * Request Animation Frame, or Set Timeout on very old browsers.)\n         * \n         * The step will update the global managers first, then proceed to update each Scene in turn, via the Scene Manager.\n         * \n         * It will then render each Scene in turn, via the Renderer. This process emits `prerender` and `postrender` events.\n         * @param time The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\n         * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* A special version of the Game Step for the HEADLESS renderer only.\n         * \n         * The main Game Step. Called automatically by the Time Step, once per browser frame (typically as a result of\n         * Request Animation Frame, or Set Timeout on very old browsers.)\n         * \n         * The step will update the global managers first, then proceed to update each Scene in turn, via the Scene Manager.\n         * \n         * This process emits `prerender` and `postrender` events, even though nothing actually displays.\n         * @param time The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\n         * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* Called automatically by the Visibility Handler.\n         * This will pause the main loop and then emit a pause event.",
        "* Called automatically by the Visibility Handler.\n         * This will resume the main loop and then emit a resume event.",
        "* Called automatically by the Visibility Handler.\n         * This will set the main loop into a 'blurred' state, which pauses it.",
        "* Called automatically by the Visibility Handler.\n         * This will set the main loop into a 'focused' state, which resumes it.",
        "* Returns the current game frame.\n         * When the game starts running, the frame is incremented every time Request Animation Frame, or Set Timeout, fires.",
        "* Returns the current game timestamp.\n         * When the game starts running, the frame is incremented every time Request Animation Frame, or Set Timeout, fires.",
        "* Flags this Game instance as needing to be destroyed on the next frame.\n         * It will wait until the current frame has completed and then call `runDestroy` internally.\n         * \n         * If you **do not** need to run Phaser again on the same web page you can set the `noReturn` argument to `true` and it will free-up\n         * memory being held by the core Phaser plugins. If you do need to create another game instance on the same page, leave this as `false`.\n         * @param removeCanvas Set to `true` if you would like the parent canvas element removed from the DOM, or `false` to leave it in place.\n         * @param noReturn If `true` all the core Phaser plugins are destroyed. You cannot create another instance of Phaser on the same web page if you do this. Default false.",
        "* The active game configuration settings, parsed from a {@link GameConfig} object.",
        "* \n             * @param GameConfig The configuration object for your Phaser Game instance.",
        "* The width of the underlying canvas, in pixels.",
        "* The height of the underlying canvas, in pixels.",
        "* The zoom factor, as used by the Scale Manager.",
        "* The canvas device pixel resolution. Currently un-used.",
        "* A parent DOM element into which the canvas created by the renderer will be injected.",
        "* The scale mode as used by the Scale Manager. The default is zero, which is no scaling.",
        "* Is the Scale Manager allowed to adjust the CSS height property of the parent to be 100%?",
        "* Automatically round the display and style sizes of the canvas. This can help with performance in lower-powered devices.",
        "* Automatically center the canvas within the parent?",
        "* How many ms should elapse before checking if the browser size has changed?",
        "* The DOM element that will be sent into full screen mode, or its `id`. If undefined Phaser will create its own div and insert the canvas into it when entering fullscreen mode.",
        "* The minimum width, in pixels, the canvas will scale down to. A value of zero means no minimum.",
        "* The maximum width, in pixels, the canvas will scale up to. A value of zero means no maximum.",
        "* The minimum height, in pixels, the canvas will scale down to. A value of zero means no minimum.",
        "* The maximum height, in pixels, the canvas will scale up to. A value of zero means no maximum.",
        "* Force Phaser to use a specific renderer. Can be `CONST.CANVAS`, `CONST.WEBGL`, `CONST.HEADLESS` or `CONST.AUTO` (default)",
        "* Force Phaser to use your own Canvas element instead of creating one.",
        "* Force Phaser to use your own Canvas context instead of creating one.",
        "* Optional CSS attributes to be set on the canvas object created by the renderer.",
        "* Is Phaser running under a custom (non-native web) environment? If so, set this to `true` to skip internal Feature detection. If `true` the `renderType` cannot be left as `AUTO`.",
        "* The default Scene configuration object.",
        "* A seed which the Random Data Generator will use. If not given, a dynamic seed based on the time is used.",
        "* The title of the game.",
        "* The URL of the game.",
        "* The version of the game.",
        "* If `true` the window will automatically be given focus immediately and on any future mousedown event.",
        "* EXPERIMENTAL: Do not currently use.",
        "* EXPERIMENTAL: Do not currently use.",
        "* Enable the Keyboard Plugin. This can be disabled in games that don't need keyboard input.",
        "* The DOM Target to listen for keyboard events on. Defaults to `window` if not specified.",
        "* `preventDefault` will be called on every non-modified key which has a key code in this array. By default, it is empty.",
        "* Enable the Mouse Plugin. This can be disabled in games that don't need mouse input.",
        "* The DOM Target to listen for mouse events on. Defaults to the game canvas if not specified.",
        "* Should mouse events be captured? I.e. have prevent default called on them.",
        "* Enable the Touch Plugin. This can be disabled in games that don't need touch input.",
        "* The DOM Target to listen for touch events on. Defaults to the game canvas if not specified.",
        "* Should touch events be captured? I.e. have prevent default called on them.",
        "* The number of Pointer objects created by default. In a mouse-only, or non-multi touch game, you can leave this as 1.",
        "* The smoothing factor to apply during Pointer movement. See {@link Phaser.Input.Pointer#smoothFactor}.",
        "* Should Phaser use a queued input system for native DOM Events or not?",
        "* Enable the Gamepad Plugin. This can be disabled in games that don't need gamepad input.",
        "* The DOM Target to listen for gamepad events on. Defaults to `window` if not specified.",
        "* Set to `true` to disable the right-click context menu.",
        "* The Audio Configuration object.",
        "* Don't write the banner line to the console.log.",
        "* Omit Phaser's name and version from the banner.",
        "* The color of the banner text.",
        "* The background colors of the banner.",
        "* The Frame Rate Configuration object, as parsed by the Timestep class.",
        "* When set to `true`, WebGL uses linear interpolation to draw scaled or rotated textures, giving a smooth appearance. When set to `false`, WebGL uses nearest-neighbor interpolation, giving a crisper appearance. `false` also disables antialiasing of the game canvas itself, if the browser supports it, when the game canvas is scaled.",
        "* Draw texture-based Game Objects at only whole-integer positions. Game Objects without textures, like Graphics, ignore this property.",
        "* Prevent pixel art from becoming blurred when scaled. It will remain crisp (tells the WebGL renderer to automatically create textures using a linear filter mode).",
        "* Whether the game canvas will have a transparent background.",
        "* Whether the game canvas will be cleared between each rendering frame. You can disable this if you have a full-screen background image or game object.",
        "* In WebGL mode, sets the drawing buffer to contain colors with pre-multiplied alpha.",
        "* Let the browser abort creating a WebGL context if it judges performance would be unacceptable.",
        "* \"high-performance\", \"low-power\" or \"default\". A hint to the browser on how much device power the game might use.",
        "* The default WebGL Batch size.",
        "* The maximum number of lights allowed to be visible within range of a single Camera in the LightManager.",
        "* The background color of the game canvas. The default is black. This value is ignored if `transparent` is set to `true`.",
        "* Called before Phaser boots. Useful for initializing anything not related to Phaser that Phaser may require while booting.",
        "* A function to run at the end of the boot sequence. At this point, all the game systems have started and plugins have been loaded.",
        "* The Physics Configuration object.",
        "* The default physics system. It will be started for each scene. Either 'arcade', 'impact' or 'matter'.",
        "* A URL used to resolve paths given to the loader. Example: 'http://labs.phaser.io/assets/'.",
        "* A URL path used to resolve relative paths given to the loader. Example: 'images/sprites/'.",
        "* Maximum parallel downloads allowed for resources (Default to 32).",
        "* 'anonymous', 'use-credentials', or `undefined`. If you're not making cross-origin requests, leave this as `undefined`. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes}.",
        "* The response type of the XHR request, e.g. `blob`, `text`, etc.",
        "* Should the XHR request use async or not?",
        "* Optional username for all XHR requests.",
        "* Optional password for all XHR requests.",
        "* Optional XHR timeout value, in ms.",
        "* An array of global plugins to be installed.",
        "* An array of Scene level plugins to be installed.",
        "* The plugins installed into every Scene (in addition to CoreScene and Global).",
        "* A base64 encoded PNG that will be used as the default blank texture.",
        "* A base64 encoded PNG that will be used as the default texture when a texture is assigned that is missing or not loaded.",
        "* Called automatically by Phaser.Game and responsible for creating the renderer it will use.\n         * \n         * Relies upon two webpack global flags to be defined: `WEBGL_RENDERER` and `CANVAS_RENDERER` during build time, but not at run-time.\n         * @param game The Phaser.Game instance on which the renderer will be set.",
        "* Called automatically by Phaser.Game and responsible for creating the console.log debug header.\n         * \n         * You can customize or disable the header via the Game Config object.\n         * @param game The Phaser.Game instance which will output this debug header.",
        "* The Game Blur Event.\n             * \n             * This event is dispatched by the Game Visibility Handler when the window in which the Game instance is embedded\n             * enters a blurred state. The blur event is raised when the window loses focus. This can happen if a user swaps\n             * tab, or if they simply remove focus from the browser to another app.",
        "* The Game Boot Event.\n             * \n             * This event is dispatched when the Phaser Game instance has finished booting, but before it is ready to start running.\n             * The global systems use this event to know when to set themselves up, dispatching their own `ready` events as required.",
        "* The Game Destroy Event.\n             * \n             * This event is dispatched when the game instance has been told to destroy itself.\n             * Lots of internal systems listen to this event in order to clear themselves out.\n             * Custom plugins and game code should also do the same.",
        "* The Game Focus Event.\n             * \n             * This event is dispatched by the Game Visibility Handler when the window in which the Game instance is embedded\n             * enters a focused state. The focus event is raised when the window re-gains focus, having previously lost it.",
        "* The Game Hidden Event.\n             * \n             * This event is dispatched by the Game Visibility Handler when the document in which the Game instance is embedded\n             * enters a hidden state. Only browsers that support the Visibility API will cause this event to be emitted.\n             * \n             * In most modern browsers, when the document enters a hidden state, the Request Animation Frame and setTimeout, which\n             * control the main game loop, will automatically pause. There is no way to stop this from happening. It is something\n             * your game should account for in its own code, should the pause be an issue (i.e. for multiplayer games)",
        "* The Game Pause Event.\n             * \n             * This event is dispatched when the Game loop enters a paused state, usually as a result of the Visibility Handler.",
        "* The Game Post-Render Event.\n             * \n             * This event is dispatched right at the end of the render process.\n             * \n             * Every Scene will have rendered and been drawn to the canvas by the time this event is fired.\n             * Use it for any last minute post-processing before the next game step begins.",
        "* The Game Post-Step Event.\n             * \n             * This event is dispatched after the Scene Manager has updated.\n             * Hook into it from plugins or systems that need to do things before the render starts.",
        "* The Game Pre-Render Event.\n             * \n             * This event is dispatched immediately before any of the Scenes have started to render.\n             * \n             * The renderer will already have been initialized this frame, clearing itself and preparing to receive the Scenes for rendering, but it won't have actually drawn anything yet.",
        "* The Game Pre-Step Event.\n             * \n             * This event is dispatched before the main Game Step starts. By this point in the game cycle none of the Scene updates have yet happened.\n             * Hook into it from plugins or systems that need to update before the Scene Manager does.",
        "* The Game Ready Event.\n             * \n             * This event is dispatched when the Phaser Game instance has finished booting, the Texture Manager is fully ready,\n             * and all local systems are now able to start.",
        "* The Game Resume Event.\n             * \n             * This event is dispatched when the game loop leaves a paused state and resumes running.",
        "* The Game Step Event.\n             * \n             * This event is dispatched after the Game Pre-Step and before the Scene Manager steps.\n             * Hook into it from plugins or systems that need to update before the Scene Manager does, but after the core Systems have.",
        "* The Game Visible Event.\n             * \n             * This event is dispatched by the Game Visibility Handler when the document in which the Game instance is embedded\n             * enters a visible state, previously having been hidden.\n             * \n             * Only browsers that support the Visibility API will cause this event to be emitted.",
        "* [description]",
        "* \n             * @param game A reference to the Phaser.Game instance that owns this Time Step.",
        "* A reference to the Phaser.Game instance.",
        "* [description]",
        "* A flag that is set once the TimeStep has started running and toggled when it stops.",
        "* A flag that is set once the TimeStep has started running and toggled when it stops.\n             * The difference between this value and `started` is that `running` is toggled when\n             * the TimeStep is sent to sleep, where-as `started` remains `true`, only changing if\n             * the TimeStep is actually stopped, not just paused.",
        "* The minimum fps rate you want the Time Step to run at.",
        "* The target fps rate for the Time Step to run at.\n             * \n             * Setting this value will not actually change the speed at which the browser runs, that is beyond\n             * the control of Phaser. Instead, it allows you to determine performance issues and if the Time Step\n             * is spiraling out of control.",
        "* An exponential moving average of the frames per second.",
        "* [description]",
        "* The number of frames processed this second.",
        "* A callback to be invoked each time the Time Step steps.",
        "* You can force the Time Step to use Set Timeout instead of Request Animation Frame by setting\n             * the `forceSetTimeOut` property to `true` in the Game Configuration object. It cannot be changed at run-time.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* The actual elapsed time in ms between one update and the next.\n             * Unlike with `delta` no smoothing, capping, or averaging is applied to this value.\n             * So please be careful when using this value in calculations.",
        "* Called when the DOM window.onBlur event triggers.",
        "* Called when the DOM window.onFocus event triggers.",
        "* Called when the visibility API says the game is 'hidden' (tab switch out of view, etc)",
        "* Called when the visibility API says the game is 'visible' again (tab switch back into view, etc)",
        "* [description]",
        "* Starts the Time Step running, if it is not already doing so.\n             * Called automatically by the Game Boot process.\n             * @param callback The callback to be invoked each time the Time Step steps.",
        "* The main step method. This is called each time the browser updates, either by Request Animation Frame,\n             * or by Set Timeout. It is responsible for calculating the delta values, frame totals, cool down history and more.\n             * You generally should never call this method directly.\n             * @param time The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.",
        "* Manually calls TimeStep.step, passing in the performance.now value to it.",
        "* Sends the TimeStep to sleep, stopping Request Animation Frame (or SetTimeout) and toggling the `running` flag to false.",
        "* Wakes-up the TimeStep, restarting Request Animation Frame (or SetTimeout) and toggling the `running` flag to true.\n             * The `seamless` argument controls if the wake-up should adjust the start time or not.\n             * @param seamless Adjust the startTime based on the lastTime values. Default false.",
        "* Stops the TimeStep running.",
        "* Destroys the TimeStep. This will stop Request Animation Frame, stop the step, clear the callbacks and null\n             * any objects.",
        "* The Visibility Handler is responsible for listening out for document level visibility change events.\n         * This includes `visibilitychange` if the browser supports it, and blur and focus events. It then uses\n         * the provided Event Emitter and fires the related events.\n         * @param game The Game instance this Visibility Handler is working on.",
        "* [description]\n         * @param config [description]",
        "* A 16 color palette by [Arne](http://androidarts.com/palette/16pal.htm)",
        "* A 16 color palette inspired by the Commodore 64.",
        "* A 16 color CGA inspired palette by [Arne](http://androidarts.com/palette/16pal.htm)",
        "* A 16 color JMP palette by [Arne](http://androidarts.com/palette/16pal.htm)",
        "* A 16 color palette inspired by Japanese computers like the MSX.",
        "* A higher-order Bézier curve constructed of four points.",
        "* \n             * @param p0 Start point, or an array of point pairs.\n             * @param p1 Control Point 1.\n             * @param p2 Control Point 2.\n             * @param p3 End Point.",
        "* The start point of this curve.",
        "* The first control point of this curve.",
        "* The second control point of this curve.",
        "* The end point of this curve.",
        "* Gets the starting point on the curve.\n             * @param out A Vector2 object to store the result in. If not given will be created.",
        "* Returns the resolution of this curve.\n             * @param divisions The amount of divisions used by this curve.",
        "* Get point at relative position in curve according to length.\n             * @param t The position along the curve to return. Where 0 is the start and 1 is the end.\n             * @param out A Vector2 object to store the result in. If not given will be created.",
        "* Draws this curve to the specified graphics object.\n             * @param graphics The graphics object this curve should be drawn to.\n             * @param pointsTotal The number of intermediary points that make up this curve. A higher number of points will result in a smoother curve. Default 32.",
        "* Returns a JSON object that describes this curve.",
        "* Generates a curve from a JSON object.\n             * @param data The JSON object containing this curve data.",
        "* A Base Curve class, which all other curve types extend.\n         * \n         * Based on the three.js Curve classes created by [zz85](http://www.lab4games.net/zz85/blog)",
        "* \n             * @param type [description]",
        "* String based identifier for the type of curve.",
        "* The default number of divisions within the curve.",
        "* The quantity of arc length divisions within the curve.",
        "* An array of cached arc length values.",
        "* Does the data of this curve need updating?",
        "* [description]",
        "* Draws this curve on the given Graphics object.\n             * \n             * The curve is drawn using `Graphics.strokePoints` so will be drawn at whatever the present Graphics stroke color is.\n             * The Graphics object is not cleared before the draw, so the curve will appear on-top of anything else already rendered to it.\n             * @param graphics The Graphics instance onto which this curve will be drawn.\n             * @param pointsTotal The resolution of the curve. The higher the value the smoother it will render, at the cost of rendering performance. Default 32.",
        "* Returns a Rectangle where the position and dimensions match the bounds of this Curve.\n             * \n             * You can control the accuracy of the bounds. The value given is used to work out how many points\n             * to plot across the curve. Higher values are more accurate at the cost of calculation speed.\n             * @param out The Rectangle to store the bounds in. If falsey a new object will be created.\n             * @param accuracy The accuracy of the bounds calculations. Default 16.",
        "* Returns an array of points, spaced out X distance pixels apart.\n             * The smaller the distance, the larger the array will be.\n             * @param distance The distance, in pixels, between each point along the curve.",
        "* [description]\n             * @param out Optional Vector object to store the result in.",
        "* [description]",
        "* [description]\n             * @param divisions [description]",
        "* [description]\n             * @param u [description]\n             * @param out [description]",
        "* [description]\n             * @param divisions [description]",
        "* [description]\n             * @param out [description]",
        "* [description]\n             * @param divisions [description]",
        "* [description]\n             * @param out [description]",
        "* [description]\n             * @param t [description]\n             * @param out [description]",
        "* [description]\n             * @param u [description]\n             * @param out [description]",
        "* [description]\n             * @param distance [description]\n             * @param divisions [description]",
        "* [description]\n             * @param u [description]\n             * @param distance [description]\n             * @param divisions [description]",
        "* [description]",
        "* An Elliptical Curve derived from the Base Curve class.\n         * \n         * See https://en.wikipedia.org/wiki/Elliptic_curve for more details.",
        "* \n             * @param x The x coordinate of the ellipse, or an Ellipse Curve configuration object. Default 0.\n             * @param y The y coordinate of the ellipse. Default 0.\n             * @param xRadius The horizontal radius of ellipse. Default 0.\n             * @param yRadius The vertical radius of ellipse. Default 0.\n             * @param startAngle The start angle of the ellipse, in degrees. Default 0.\n             * @param endAngle The end angle of the ellipse, in degrees. Default 360.\n             * @param clockwise Sets if the the ellipse rotation is clockwise (true) or anti-clockwise (false) Default false.\n             * @param rotation The rotation of the ellipse, in degrees. Default 0.",
        "* The center point of the ellipse. Used for calculating rotation.",
        "* Gets the starting point on the curve.\n             * @param out A Vector2 object to store the result in. If not given will be created.",
        "* [description]\n             * @param divisions [description]",
        "* Get point at relative position in curve according to length.\n             * @param t The position along the curve to return. Where 0 is the start and 1 is the end.\n             * @param out A Vector2 object to store the result in. If not given will be created.",
        "* Sets the horizontal radius of this curve.\n             * @param value The horizontal radius of this curve.",
        "* Sets the vertical radius of this curve.\n             * @param value The vertical radius of this curve.",
        "* Sets the width of this curve.\n             * @param value The width of this curve.",
        "* Sets the height of this curve.\n             * @param value The height of this curve.",
        "* Sets the start angle of this curve.\n             * @param value The start angle of this curve, in radians.",
        "* Sets the end angle of this curve.\n             * @param value The end angle of this curve, in radians.",
        "* Sets if this curve extends clockwise or anti-clockwise.\n             * @param value The clockwise state of this curve.",
        "* Sets the rotation of this curve.\n             * @param value The rotation of this curve, in radians.",
        "* The x coordinate of the center of the ellipse.",
        "* The y coordinate of the center of the ellipse.",
        "* The horizontal radius of the ellipse.",
        "* The vertical radius of the ellipse.",
        "* The start angle of the ellipse in degrees.",
        "* The end angle of the ellipse in degrees.",
        "* `true` if the ellipse rotation is clockwise or `false` if anti-clockwise.",
        "* The rotation of the ellipse, relative to the center, in degrees.",
        "* The rotation of the ellipse, relative to the center, in radians.",
        "* JSON serialization of the curve.",
        "* Creates a curve from the provided Ellipse Curve Configuration object.\n             * @param data The JSON object containing this curve data.",
        "* A LineCurve is a \"curve\" comprising exactly two points (a line segment).",
        "* \n             * @param p0 The first endpoint.\n             * @param p1 The second endpoint.",
        "* The first endpoint.",
        "* The second endpoint.",
        "* Returns a Rectangle where the position and dimensions match the bounds of this Curve.\n             * @param out A Rectangle object to store the bounds in. If not given a new Rectangle will be created.",
        "* Gets the starting point on the curve.\n             * @param out A Vector2 object to store the result in. If not given will be created.",
        "* Gets the resolution of the line.\n             * @param divisions The number of divisions to consider. Default 1.",
        "* Get point at relative position in curve according to length.\n             * @param t The position along the curve to return. Where 0 is the start and 1 is the end.\n             * @param out A Vector2 object to store the result in. If not given will be created.",
        "* Gets a point at a given position on the line.\n             * @param u The position along the curve to return. Where 0 is the start and 1 is the end.\n             * @param out A Vector2 object to store the result in. If not given will be created.",
        "* Gets the slope of the line as a unit vector.",
        "* Draws this curve on the given Graphics object.\n             * \n             * The curve is drawn using `Graphics.lineBetween` so will be drawn at whatever the present Graphics line color is.\n             * The Graphics object is not cleared before the draw, so the curve will appear on-top of anything else already rendered to it.\n             * @param graphics The Graphics instance onto which this curve will be drawn.",
        "* Gets a JSON representation of the line.",
        "* Configures this line from a JSON representation.\n             * @param data The JSON object containing this curve data.",
        "* A MoveTo Curve is a very simple curve consisting of only a single point. Its intended use is to move the ending point in a Path.",
        "* \n             * @param x `x` pixel coordinate.\n             * @param y `y` pixel coordinate.",
        "* Denotes that this Curve does not influence the bounds, points, and drawing of its parent Path. Must be `false` or some methods in the parent Path will throw errors.",
        "* The lone point which this curve consists of.",
        "* Get point at relative position in curve according to length.\n             * @param t The position along the curve to return. Where 0 is the start and 1 is the end.\n             * @param out A Vector2 object to store the result in. If not given will be created.",
        "* Retrieves the point at given position in the curve. This will always return this curve's only point.\n             * @param u The position in the path to retrieve, between 0 and 1. Not used.\n             * @param out An optional vector in which to store the point.",
        "* Gets the resolution of this curve.",
        "* Gets the length of this curve.",
        "* Converts this curve into a JSON-serializable object.",
        "* A Path combines multiple Curves into one continuous compound curve. It does not matter how many Curves are in the Path or what type they are.\n         * \n         * A Curve in a Path does not have to start where the previous Curve ends - that is to say, a Path does not have to be an uninterrupted curve. Only the order of the Curves influences the actual points on the Path.",
        "* \n             * @param x The X coordinate of the Path's starting point or a {@link JSONPath}. Default 0.\n             * @param y The Y coordinate of the Path's starting point. Default 0.",
        "* The name of this Path.\n             * Empty by default and never populated by Phaser, this is left for developers to use.",
        "* The list of Curves which make up this Path.",
        "* The cached length of each Curve in the Path.\n             * \n             * Used internally by {@link #getCurveLengths}.",
        "* Automatically closes the path.",
        "* The starting point of the Path.\n             * \n             * This is not necessarily equivalent to the starting point of the first Curve in the Path. In an empty Path, it's also treated as the ending point.",
        "* Appends a Curve to the end of the Path.\n             * \n             * The Curve does not have to start where the Path ends or, for an empty Path, at its defined starting point.\n             * @param curve The Curve to append.",
        "* Creates a circular Ellipse Curve positioned at the end of the Path.\n             * @param radius The radius of the circle.\n             * @param clockwise `true` to create a clockwise circle as opposed to a counter-clockwise circle. Default false.\n             * @param rotation The rotation of the circle in degrees. Default 0.",
        "* Ensures that the Path is closed.\n             * \n             * A closed Path starts and ends at the same point. If the Path is not closed, a straight Line Curve will be created from the ending point directly to the starting point. During the check, the actual starting point of the Path, i.e. the starting point of the first Curve, will be used as opposed to the Path's defined {@link startPoint}, which could differ.\n             * \n             * Calling this method on an empty Path will result in an error.",
        "* Creates a cubic bezier curve starting at the previous end point and ending at p3, using p1 and p2 as control points.\n             * @param x The x coordinate of the end point. Or, if a Vec2, the p1 value.\n             * @param y The y coordinate of the end point. Or, if a Vec2, the p2 value.\n             * @param control1X The x coordinate of the first control point. Or, if a Vec2, the p3 value.\n             * @param control1Y The y coordinate of the first control point. Not used if vec2s are provided as the first 3 arguments.\n             * @param control2X The x coordinate of the second control point. Not used if vec2s are provided as the first 3 arguments.\n             * @param control2Y The y coordinate of the second control point. Not used if vec2s are provided as the first 3 arguments.",
        "* Creates a Quadratic Bezier Curve starting at the ending point of the Path.\n             * @param x The X coordinate of the second control point or, if it's a `Vector2`, the first control point.\n             * @param y The Y coordinate of the second control point or, if `x` is a `Vector2`, the second control point.\n             * @param controlX If `x` is not a `Vector2`, the X coordinate of the first control point.\n             * @param controlY If `x` is not a `Vector2`, the Y coordinate of the first control point.",
        "* Draws all Curves in the Path to a Graphics Game Object.\n             * @param graphics The Graphics Game Object to draw to.\n             * @param pointsTotal The number of points to draw for each Curve. Higher numbers result in a smoother curve but require more processing. Default 32.",
        "* Creates an ellipse curve positioned at the previous end point, using the given parameters.\n             * @param xRadius The horizontal radius of the ellipse.\n             * @param yRadius The vertical radius of the ellipse.\n             * @param startAngle The start angle of the ellipse, in degrees.\n             * @param endAngle The end angle of the ellipse, in degrees.\n             * @param clockwise Whether the ellipse should be rotated clockwise (`true`) or counter-clockwise (`false`).\n             * @param rotation The rotation of the ellipse, in degrees.",
        "* Creates a Path from a Path Configuration object.\n             * \n             * The provided object should be a {@link JSONPath}, as returned by {@link #toJSON}. Providing a malformed object may cause errors.\n             * @param data The JSON object containing the Path data.",
        "* Returns a Rectangle with a position and size matching the bounds of this Path.\n             * @param out The Rectangle to store the bounds in.\n             * @param accuracy The accuracy of the bounds calculations. Higher values are more accurate at the cost of calculation speed. Default 16.",
        "* Returns an array containing the length of the Path at the end of each Curve.\n             * \n             * The result of this method will be cached to avoid recalculating it in subsequent calls. The cache is only invalidated when the {@link #curves} array changes in length, leading to potential inaccuracies if a Curve in the Path is changed, or if a Curve is removed and another is added in its place.",
        "* Returns the ending point of the Path.\n             * \n             * A Path's ending point is equivalent to the ending point of the last Curve in the Path. For an empty Path, the ending point is at the Path's defined {@link #startPoint}.\n             * @param out The object to store the point in.",
        "* Returns the total length of the Path.",
        "* Calculates the coordinates of the point at the given normalized location (between 0 and 1) on the Path.\n             * \n             * The location is relative to the entire Path, not to an individual Curve. A location of 0.5 is always in the middle of the Path and is thus an equal distance away from both its starting and ending points. In a Path with one Curve, it would be in the middle of the Curve; in a Path with two Curves, it could be anywhere on either one of them depending on their lengths.\n             * @param t The location of the point to return, between 0 and 1.\n             * @param out The object in which to store the calculated point.",
        "* Returns the defined starting point of the Path.\n             * \n             * This is not necessarily equal to the starting point of the first Curve if it differs from {@link startPoint}.\n             * @param divisions The number of points to divide the path in to. Default 12.",
        "* [description]\n             * @param out `Vector2` instance that should be used for storing the result. If `undefined` a new `Vector2` will be created.",
        "* Creates a straight Line Curve from the ending point of the Path to the given coordinates.\n             * @param divisions The X coordinate of the line's ending point, or the line's ending point as a `Vector2`. Default 40.",
        "* [description]\n             * @param out [description]",
        "* [description]\n             * @param x [description]\n             * @param y [description]",
        "* [description]\n             * @param points [description]",
        "* [description]\n             * @param x [description]\n             * @param y [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* \n             * @param p0 Start point, or an array of point pairs.\n             * @param p1 Control Point 1.\n             * @param p2 Control Point 2.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* Gets the starting point on the curve.\n             * @param out A Vector2 object to store the result in. If not given will be created.",
        "* [description]\n             * @param divisions [description]",
        "* Get point at relative position in curve according to length.\n             * @param t The position along the curve to return. Where 0 is the start and 1 is the end.\n             * @param out A Vector2 object to store the result in. If not given will be created.",
        "* [description]\n             * @param graphics `Graphics` object to draw onto.\n             * @param pointsTotal Number of points to be used for drawing the curve. Higher numbers result in smoother curve but require more processing. Default 32.",
        "* Converts the curve into a JSON compatible object.",
        "* Creates a curve from a JSON object, e. g. created by `toJSON`.\n             * @param data The JSON object containing this curve data.",
        "* [description]",
        "* \n             * @param points [description]",
        "* [description]",
        "* [description]\n             * @param points [description]",
        "* [description]\n             * @param x [description]\n             * @param y [description]",
        "* Gets the starting point on the curve.\n             * @param out A Vector2 object to store the result in. If not given will be created.",
        "* [description]\n             * @param divisions [description]",
        "* Get point at relative position in curve according to length.\n             * @param t The position along the curve to return. Where 0 is the start and 1 is the end.\n             * @param out A Vector2 object to store the result in. If not given will be created.",
        "* [description]",
        "* [description]\n             * @param data The JSON object containing this curve data.",
        "* The Data Manager Component features a means to store pieces of data specific to a Game Object, System or Plugin.\n         * You can then search, query it, and retrieve the data. The parent must either extend EventEmitter,\n         * or have a property called `events` that is an instance of it.",
        "* \n             * @param parent The object that this DataManager belongs to.\n             * @param eventEmitter The DataManager's event emitter.",
        "* The object that this DataManager belongs to.",
        "* The DataManager's event emitter.",
        "* The data list.",
        "* The public values list. You can use this to access anything you have stored\n             * in this Data Manager. For example, if you set a value called `gold` you can\n             * access it via:\n             * \n             * ```javascript\n             * this.data.values.gold;\n             * ```\n             * \n             * You can also modify it directly:\n             * \n             * ```javascript\n             * this.data.values.gold += 1000;\n             * ```\n             * \n             * Doing so will emit a `setdata` event from the parent of this Data Manager.\n             * \n             * Do not modify this object directly. Adding properties directly to this object will not\n             * emit any events. Always use `DataManager.set` to create new items the first time around.",
        "* Retrieves the value for the given key, or undefined if it doesn't exist.\n             * \n             * You can also access values via the `values` object. For example, if you had a key called `gold` you can do either:\n             * \n             * ```javascript\n             * this.data.get('gold');\n             * ```\n             * \n             * Or access the value directly:\n             * \n             * ```javascript\n             * this.data.values.gold;\n             * ```\n             * \n             * You can also pass in an array of keys, in which case an array of values will be returned:\n             * \n             * ```javascript\n             * this.data.get([ 'gold', 'armor', 'health' ]);\n             * ```\n             * \n             * This approach is useful for destructuring arrays in ES6.\n             * @param key The key of the value to retrieve, or an array of keys.",
        "* Retrieves all data values in a new object.",
        "* Queries the DataManager for the values of keys matching the given regular expression.\n             * @param search A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).",
        "* Sets a value for the given key. If the key doesn't already exist in the Data Manager then it is created.\n             * \n             * ```javascript\n             * data.set('name', 'Red Gem Stone');\n             * ```\n             * \n             * You can also pass in an object of key value pairs as the first argument:\n             * \n             * ```javascript\n             * data.set({ name: 'Red Gem Stone', level: 2, owner: 'Link', gold: 50 });\n             * ```\n             * \n             * To get a value back again you can call `get`:\n             * \n             * ```javascript\n             * data.get('gold');\n             * ```\n             * \n             * Or you can access the value directly via the `values` property, where it works like any other variable:\n             * \n             * ```javascript\n             * data.values.gold += 50;\n             * ```\n             * \n             * When the value is first set, a `setdata` event is emitted.\n             * \n             * If the key already exists, a `changedata` event is emitted instead, along an event named after the key.\n             * For example, if you updated an existing key called `PlayerLives` then it would emit the event `changedata-PlayerLives`.\n             * These events will be emitted regardless if you use this method to set the value, or the direct `values` setter.\n             * \n             * Please note that the data keys are case-sensitive and must be valid JavaScript Object property strings.\n             * This means the keys `gold` and `Gold` are treated as two unique values within the Data Manager.\n             * @param key The key to set the value for. Or an object or key value pairs. If an object the `data` argument is ignored.\n             * @param data The value to set for the given key. If an object is provided as the key this argument is ignored.",
        "* Passes all data entries to the given callback.\n             * @param callback The function to call.\n             * @param context Value to use as `this` when executing callback.\n             * @param args Additional arguments that will be passed to the callback, after the game object, key, and data.",
        "* Merge the given object of key value pairs into this DataManager.\n             * \n             * Any newly created values will emit a `setdata` event. Any updated values (see the `overwrite` argument)\n             * will emit a `changedata` event.\n             * @param data The data to merge.\n             * @param overwrite Whether to overwrite existing data. Defaults to true. Default true.",
        "* Remove the value for the given key.\n             * \n             * If the key is found in this Data Manager it is removed from the internal lists and a\n             * `removedata` event is emitted.\n             * \n             * You can also pass in an array of keys, in which case all keys in the array will be removed:\n             * \n             * ```javascript\n             * this.data.remove([ 'gold', 'armor', 'health' ]);\n             * ```\n             * @param key The key to remove, or an array of keys to remove.",
        "* Retrieves the data associated with the given 'key', deletes it from this Data Manager, then returns it.\n             * @param key The key of the value to retrieve and delete.",
        "* Determines whether the given key is set in this Data Manager.\n             * \n             * Please note that the keys are case-sensitive and must be valid JavaScript Object property strings.\n             * This means the keys `gold` and `Gold` are treated as two unique values within the Data Manager.\n             * @param key The key to check.",
        "* Freeze or unfreeze this Data Manager. A frozen Data Manager will block all attempts\n             * to create new values or update existing ones.\n             * @param value Whether to freeze or unfreeze the Data Manager.",
        "* Delete all data in this Data Manager and unfreeze it.",
        "* Destroy this data manager.",
        "* Gets or sets the frozen state of this Data Manager.\n             * A frozen Data Manager will block all attempts to create new values or update existing ones.",
        "* Return the total number of entries in this Data Manager.",
        "* The Data Component features a means to store pieces of data specific to a Game Object, System or Plugin.\n         * You can then search, query it, and retrieve the data. The parent must either extend EventEmitter,\n         * or have a property called `events` that is an instance of it.",
        "* \n             * @param scene A reference to the Scene that this DataManager belongs to.",
        "* A reference to the Scene that this DataManager belongs to.",
        "* A reference to the Scene's Systems.",
        "* The Scene that owns this plugin is being destroyed.\n             * We need to shutdown and then kill off all external references.",
        "* The Change Data Event.\n             * \n             * This event is dispatched by a Data Manager when an item in the data store is changed.\n             * \n             * Game Objects with data enabled have an instance of a Data Manager under the `data` property. So, to listen for\n             * a change data event from a Game Object you would use: `sprite.data.on('changedata', listener)`.\n             * \n             * This event is dispatched for all items that change in the Data Manager.\n             * To listen for the change of a specific item, use the `CHANGE_DATA_KEY_EVENT` event.",
        "* The Change Data Key Event.\n             * \n             * This event is dispatched by a Data Manager when an item in the data store is changed.\n             * \n             * Game Objects with data enabled have an instance of a Data Manager under the `data` property. So, to listen for\n             * the change of a specific data item from a Game Object you would use: `sprite.data.on('changedata-key', listener)`,\n             * where `key` is the unique string key of the data item. For example, if you have a data item stored called `gold`\n             * then you can listen for `sprite.data.on('changedata-gold')`.",
        "* The Remove Data Event.\n             * \n             * This event is dispatched by a Data Manager when an item is removed from it.\n             * \n             * Game Objects with data enabled have an instance of a Data Manager under the `data` property. So, to listen for\n             * the removal of a data item on a Game Object you would use: `sprite.data.on('removedata', listener)`.",
        "* The Set Data Event.\n             * \n             * This event is dispatched by a Data Manager when a new item is added to the data store.\n             * \n             * Game Objects with data enabled have an instance of a Data Manager under the `data` property. So, to listen for\n             * the addition of a new data item on a Game Object you would use: `sprite.data.on('setdata', listener)`.",
        "* Determines the audio playback capabilities of the device running this Phaser Game instance.\n         * These values are read-only and populated during the boot sequence of the game.\n         * They are then referenced by internal game systems and are available for you to access\n         * via `this.sys.game.device.audio` from within any Scene.",
        "* Can this device play HTML Audio tags?",
        "* Can this device play EC-3 Dolby Digital Plus files?",
        "* Can this device can play m4a files.",
        "* Can this device play mp3 files?",
        "* Can this device play ogg files?",
        "* Can this device play opus files?",
        "* Can this device play wav files?",
        "* Does this device have the Web Audio API?",
        "* Can this device play webm files?",
        "* Determines the browser type and version running this Phaser Game instance.\n         * These values are read-only and populated during the boot sequence of the game.\n         * They are then referenced by internal game systems and are available for you to access\n         * via `this.sys.game.device.browser` from within any Scene.",
        "* Set to true if running in Chrome.",
        "* Set to true if running in Microsoft Edge browser.",
        "* Set to true if running in Firefox.",
        "* Set to true if running in Internet Explorer 11 or less (not Edge).",
        "* Set to true if running in Mobile Safari.",
        "* Set to true if running in Opera.",
        "* Set to true if running in Safari.",
        "* Set to true if running in the Silk browser (as used on the Amazon Kindle)",
        "* Set to true if running a Trident version of Internet Explorer (IE11+)",
        "* If running in Chrome this will contain the major version number.",
        "* If running in Firefox this will contain the major version number.",
        "* If running in Internet Explorer this will contain the major version number. Beyond IE10 you should use Browser.trident and Browser.tridentVersion.",
        "* If running in Safari this will contain the major version number.",
        "* If running in Internet Explorer 11 this will contain the major version number. See {@link http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx}",
        "* Determines the canvas features of the browser running this Phaser Game instance.\n         * These values are read-only and populated during the boot sequence of the game.\n         * They are then referenced by internal game systems and are available for you to access\n         * via `this.sys.game.device.canvasFeatures` from within any Scene.",
        "* Set to true if the browser supports inversed alpha.",
        "* Set to true if the browser supports new canvas blend modes.",
        "* Determines the features of the browser running this Phaser Game instance.\n         * These values are read-only and populated during the boot sequence of the game.\n         * They are then referenced by internal game systems and are available for you to access\n         * via `this.sys.game.device.features` from within any Scene.",
        "* True if canvas supports a 'copy' bitblt onto itself when the source and destination regions overlap.",
        "* Is canvas available?",
        "* Is file available?",
        "* Is fileSystem available?",
        "* Does the device support the getUserMedia API?",
        "* Is the device big or little endian? (only detected if the browser supports TypedArrays)",
        "* Is localStorage available?",
        "* Is Pointer Lock available?",
        "* Does the device context support 32bit pixel manipulation using array buffer views?",
        "* Does the device support the Vibration API?",
        "* Is webGL available?",
        "* Is worker available?",
        "* Determines the full screen support of the browser running this Phaser Game instance.\n         * These values are read-only and populated during the boot sequence of the game.\n         * They are then referenced by internal game systems and are available for you to access\n         * via `this.sys.game.device.fullscreen` from within any Scene.",
        "* Does the browser support the Full Screen API?",
        "* Does the browser support access to the Keyboard during Full Screen mode?",
        "* If the browser supports the Full Screen API this holds the call you need to use to cancel it.",
        "* If the browser supports the Full Screen API this holds the call you need to use to activate it.",
        "* Determines the input support of the browser running this Phaser Game instance.\n         * These values are read-only and populated during the boot sequence of the game.\n         * They are then referenced by internal game systems and are available for you to access\n         * via `this.sys.game.device.input` from within any Scene.",
        "* The newest type of Wheel/Scroll event supported: 'wheel', 'mousewheel', 'DOMMouseScroll'",
        "* Is navigator.getGamepads available?",
        "* Is mspointer available?",
        "* Is touch available?",
        "* Determines the operating system of the device running this Phaser Game instance.\n         * These values are read-only and populated during the boot sequence of the game.\n         * They are then referenced by internal game systems and are available for you to access\n         * via `this.sys.game.device.os` from within any Scene.",
        "* Is running on android?",
        "* Is running on chromeOS?",
        "* Is the game running under CocoonJS?",
        "* Is this game running with CocoonJS.App?",
        "* Is the game running under Apache Cordova?",
        "* Is the game running under the Intel Crosswalk XDK?",
        "* Is running on a desktop?",
        "* Is the game running under Ejecta?",
        "* Is the game running under GitHub Electron?",
        "* Is running on iOS?",
        "* Is running on iPad?",
        "* Is running on iPhone?",
        "* Is running on an Amazon Kindle?",
        "* Is running on linux?",
        "* Is running on macOS?",
        "* Is the game running under Node.js?",
        "* Is the game running under Node-Webkit?",
        "* Set to true if running as a WebApp, i.e. within a WebView",
        "* Is running on windows?",
        "* Is running on a Windows Phone?",
        "* If running in iOS this will contain the major version number.",
        "* PixelRatio of the host device?",
        "* Determines the video support of the browser running this Phaser Game instance.\n         * These values are read-only and populated during the boot sequence of the game.\n         * They are then referenced by internal game systems and are available for you to access\n         * via `this.sys.game.device.video` from within any Scene.",
        "* Can this device play h264 mp4 video files?",
        "* Can this device play hls video files?",
        "* Can this device play h264 mp4 video files?",
        "* Can this device play ogg video files?",
        "* Can this device play vp9 video files?",
        "* Can this device play webm video files?",
        "* The OS Device functions.",
        "* The Browser Device functions.",
        "* The Features Device functions.",
        "* The Input Device functions.",
        "* The Audio Device functions.",
        "* The Video Device functions.",
        "* The Fullscreen Device functions.",
        "* The Canvas Device functions.",
        "* A constant representing a top-left alignment or position.",
        "* A constant representing a top-center alignment or position.",
        "* A constant representing a top-right alignment or position.",
        "* A constant representing a left-top alignment or position.",
        "* A constant representing a left-center alignment or position.",
        "* A constant representing a left-bottom alignment or position.",
        "* A constant representing a center alignment or position.",
        "* A constant representing a right-top alignment or position.",
        "* A constant representing a right-center alignment or position.",
        "* A constant representing a right-bottom alignment or position.",
        "* A constant representing a bottom-left alignment or position.",
        "* A constant representing a bottom-center alignment or position.",
        "* A constant representing a bottom-right alignment or position.",
        "* Takes given Game Object and aligns it so that it is positioned in the bottom center of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignIn The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned in the bottom left of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignIn The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned in the bottom right of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignIn The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned in the center of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignIn The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned in the left center of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignIn The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned relative to the other.\n                 * The alignment used is based on the `position` argument, which is an `ALIGN_CONST` value, such as `LEFT_CENTER` or `TOP_RIGHT`.\n                 * @param child The Game Object that will be positioned.\n                 * @param alignIn The Game Object to base the alignment position on.\n                 * @param position The position to align the Game Object with. This is an align constant, such as `ALIGN_CONST.LEFT_CENTER`.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned in the right center of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignIn The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned in the top center of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignIn The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned in the top left of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignIn The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned in the top right of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignIn The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned next to the bottom center position of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignTo The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned next to the bottom left position of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignTo The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned next to the bottom right position of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignTo The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned next to the left bottom position of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignTo The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned next to the left center position of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignTo The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned next to the left top position of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignTo The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned next to the right bottom position of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignTo The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned next to the right center position of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignTo The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned next to the right top position of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignTo The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned next to the top center position of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignTo The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned next to the top left position of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignTo The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Takes given Game Object and aligns it so that it is positioned next to the top right position of the other.\n                 * @param gameObject The Game Object that will be positioned.\n                 * @param alignTo The Game Object to base the alignment position on.\n                 * @param offsetX Optional horizontal offset from the position. Default 0.\n                 * @param offsetY Optional vertical offset from the position. Default 0.",
        "* Positions the Game Object so that it is centered on the given coordinates.\n             * @param gameObject The Game Object that will be re-positioned.\n             * @param x The horizontal coordinate to position the Game Object on.\n             * @param y The vertical coordinate to position the Game Object on.",
        "* Returns the bottom coordinate from the bounds of the Game Object.\n             * @param gameObject The Game Object to get the bounds value from.",
        "* Returns the center x coordinate from the bounds of the Game Object.\n             * @param gameObject The Game Object to get the bounds value from.",
        "* Returns the center y coordinate from the bounds of the Game Object.\n             * @param gameObject The Game Object to get the bounds value from.",
        "* Returns the left coordinate from the bounds of the Game Object.\n             * @param gameObject The Game Object to get the bounds value from.",
        "* Returns the amount the Game Object is visually offset from its x coordinate.\n             * This is the same as `width * origin.x`.\n             * This value will only be > 0 if `origin.x` is not equal to zero.\n             * @param gameObject The Game Object to get the bounds value from.",
        "* Returns the amount the Game Object is visually offset from its y coordinate.\n             * This is the same as `width * origin.y`.\n             * This value will only be > 0 if `origin.y` is not equal to zero.\n             * @param gameObject The Game Object to get the bounds value from.",
        "* Returns the right coordinate from the bounds of the Game Object.\n             * @param gameObject The Game Object to get the bounds value from.",
        "* Returns the top coordinate from the bounds of the Game Object.\n             * @param gameObject The Game Object to get the bounds value from.",
        "* Positions the Game Object so that the bottom of its bounds aligns with the given coordinate.\n             * @param gameObject The Game Object that will be re-positioned.\n             * @param value The coordinate to position the Game Object bounds on.",
        "* Positions the Game Object so that the center top of its bounds aligns with the given coordinate.\n             * @param gameObject The Game Object that will be re-positioned.\n             * @param x The coordinate to position the Game Object bounds on.",
        "* Positions the Game Object so that the center top of its bounds aligns with the given coordinate.\n             * @param gameObject The Game Object that will be re-positioned.\n             * @param y The coordinate to position the Game Object bounds on.",
        "* Positions the Game Object so that the left of its bounds aligns with the given coordinate.\n             * @param gameObject The Game Object that will be re-positioned.\n             * @param value The coordinate to position the Game Object bounds on.",
        "* Positions the Game Object so that the left of its bounds aligns with the given coordinate.\n             * @param gameObject The Game Object that will be re-positioned.\n             * @param value The coordinate to position the Game Object bounds on.",
        "* Positions the Game Object so that the top of its bounds aligns with the given coordinate.\n             * @param gameObject The Game Object that will be re-positioned.\n             * @param value The coordinate to position the Game Object bounds on.",
        "* Sets the CSS image-rendering property on the given canvas to be 'crisp' (aka 'optimize contrast' on webkit).\n                 * @param canvas The canvas object to have the style set on.",
        "* Sets the CSS image-rendering property on the given canvas to be 'bicubic' (aka 'auto').\n                 * @param canvas The canvas object to have the style set on.",
        "* The CanvasPool is a global static object, that allows Phaser to recycle and pool 2D Context Canvas DOM elements.\n             * It does not pool WebGL Contexts, because once the context options are set they cannot be modified again, \n             * which is useless for some of the Phaser pipelines / renderer.\n             * \n             * This singleton is instantiated as soon as Phaser loads, before a Phaser.Game instance has even been created.\n             * Which means all instances of Phaser Games on the same page can share the one single pool.",
        "* Creates a new Canvas DOM element, or pulls one from the pool if free.\n                 * @param parent The parent of the Canvas object.\n                 * @param width The width of the Canvas. Default 1.\n                 * @param height The height of the Canvas. Default 1.\n                 * @param canvasType The type of the Canvas. Either `Phaser.CANVAS` or `Phaser.WEBGL`. Default Phaser.CANVAS.\n                 * @param selfParent Use the generated Canvas element as the parent? Default false.",
        "* Creates a new Canvas DOM element, or pulls one from the pool if free.\n                 * @param parent The parent of the Canvas object.\n                 * @param width The width of the Canvas. Default 1.\n                 * @param height The height of the Canvas. Default 1.",
        "* Creates a new Canvas DOM element, or pulls one from the pool if free.\n                 * @param parent The parent of the Canvas object.\n                 * @param width The width of the Canvas. Default 1.\n                 * @param height The height of the Canvas. Default 1.",
        "* Gets the first free canvas index from the pool.\n                 * @param canvasType The type of the Canvas. Either `Phaser.CANVAS` or `Phaser.WEBGL`. Default Phaser.CANVAS.",
        "* Looks up a canvas based on its parent, and if found puts it back in the pool, freeing it up for re-use.\n                 * The canvas has its width and height set to 1, and its parent attribute nulled.\n                 * @param parent The canvas or the parent of the canvas to free.",
        "* Gets the total number of used canvas elements in the pool.",
        "* Gets the total number of free canvas elements in the pool.",
        "* Disable context smoothing on any new Canvas element created.",
        "* Enable context smoothing on any new Canvas element created.",
        "* Gets the Smoothing Enabled vendor prefix being used on the given context, or null if not set.\n                 * @param context The canvas context to check.",
        "* Sets the Image Smoothing property on the given context. Set to false to disable image smoothing.\n                 * By default browsers have image smoothing enabled, which isn't always what you visually want, especially\n                 * when using pixel art in a game. Note that this sets the property on the context itself, so that any image\n                 * drawn to the context will be affected. This sets the property across all current browsers but support is\n                 * patchy on earlier browsers, especially on mobile.\n                 * @param context The context on which to enable smoothing.",
        "* Sets the Image Smoothing property on the given context. Set to false to disable image smoothing.\n                 * By default browsers have image smoothing enabled, which isn't always what you visually want, especially\n                 * when using pixel art in a game. Note that this sets the property on the context itself, so that any image\n                 * drawn to the context will be affected. This sets the property across all current browsers but support is\n                 * patchy on earlier browsers, especially on mobile.\n                 * @param context The context on which to disable smoothing.",
        "* Returns `true` if the given context has image smoothing enabled, otherwise returns `false`.\n                 * Returns null if no smoothing prefix is available.\n                 * @param context The context to check.",
        "* Sets the touch-action property on the canvas style. Can be used to disable default browser touch actions.\n             * @param canvas The canvas element to have the style applied to.\n             * @param value The touch action value to set on the canvas. Set to `none` to disable touch actions. Default 'none'.",
        "* Sets the user-select property on the canvas style. Can be used to disable default browser selection actions.\n             * @param canvas The canvas element to have the style applied to.\n             * @param value The touch callout value to set on the canvas. Set to `none` to disable touch callouts. Default 'none'.",
        "* Interpolates between the two given color ranges over the length supplied.\n                 * @param r1 Red value.\n                 * @param g1 Blue value.\n                 * @param b1 Green value.\n                 * @param r2 Red value.\n                 * @param g2 Blue value.\n                 * @param b2 Green value.\n                 * @param length Distance to interpolate over. Default 100.\n                 * @param index Index to start from. Default 0.",
        "* Interpolates between the two given color objects over the length supplied.\n                 * @param color1 The first Color object.\n                 * @param color2 The second Color object.\n                 * @param length Distance to interpolate over. Default 100.\n                 * @param index Index to start from. Default 0.",
        "* Interpolates between the Color object and color values over the length supplied.\n                 * @param color1 The first Color object.\n                 * @param r Red value.\n                 * @param g Blue value.\n                 * @param b Green value.\n                 * @param length Distance to interpolate over. Default 100.\n                 * @param index Index to start from. Default 0.",
        "* The Color class holds a single color value and allows for easy modification and reading of it.",
        "* \n             * @param red The red color value. A number between 0 and 255. Default 0.\n             * @param green The green color value. A number between 0 and 255. Default 0.\n             * @param blue The blue color value. A number between 0 and 255. Default 0.\n             * @param alpha The alpha value. A number between 0 and 255. Default 255.",
        "* An array containing the calculated color values for WebGL use.",
        "* Sets this color to be transparent. Sets all values to zero.",
        "* Sets the color of this Color component.\n             * @param red The red color value. A number between 0 and 255.\n             * @param green The green color value. A number between 0 and 255.\n             * @param blue The blue color value. A number between 0 and 255.\n             * @param alpha The alpha value. A number between 0 and 255. Default 255.\n             * @param updateHSV Update the HSV values after setting the RGB values? Default true.",
        "* Sets the red, green, blue and alpha GL values of this Color component.\n             * @param red The red color value. A number between 0 and 1.\n             * @param green The green color value. A number between 0 and 1.\n             * @param blue The blue color value. A number between 0 and 1.\n             * @param alpha The alpha value. A number between 0 and 1. Default 1.",
        "* Sets the color based on the color object given.\n             * @param color An object containing `r`, `g`, `b` and optionally `a` values in the range 0 to 255.",
        "* Sets the color based on the hue, saturation and lightness values given.\n             * @param h The hue, in the range 0 - 1. This is the base color.\n             * @param s The saturation, in the range 0 - 1. This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\n             * @param v The value, in the range 0 - 1. This controls how dark the color is. Where 1 is as bright as possible and 0 is black.",
        "* Returns a new Color component using the values from this one.",
        "* Sets this Color object to be grayscaled based on the shade value given.\n             * @param shade A value between 0 and 255.",
        "* Sets this Color object to be a random color between the `min` and `max` values given.\n             * @param min The minimum random color value. Between 0 and 255. Default 0.\n             * @param max The maximum random color value. Between 0 and 255. Default 255.",
        "* Sets this Color object to be a random grayscale color between the `min` and `max` values given.\n             * @param min The minimum random color value. Between 0 and 255. Default 0.\n             * @param max The maximum random color value. Between 0 and 255. Default 255.",
        "* Increase the saturation of this Color by the percentage amount given.\n             * The saturation is the amount of the base color in the hue.\n             * @param amount The percentage amount to change this color by. A value between 0 and 100.",
        "* Decrease the saturation of this Color by the percentage amount given.\n             * The saturation is the amount of the base color in the hue.\n             * @param amount The percentage amount to change this color by. A value between 0 and 100.",
        "* Increase the lightness of this Color by the percentage amount given.\n             * @param amount The percentage amount to change this color by. A value between 0 and 100.",
        "* Decrease the lightness of this Color by the percentage amount given.\n             * @param amount The percentage amount to change this color by. A value between 0 and 100.",
        "* Brighten this Color by the percentage amount given.\n             * @param amount The percentage amount to change this color by. A value between 0 and 100.",
        "* The color of this Color component, not including the alpha channel.",
        "* The color of this Color component, including the alpha channel.",
        "* The color of this Color component as a string which can be used in CSS color values.",
        "* The red color value, normalized to the range 0 to 1.",
        "* The green color value, normalized to the range 0 to 1.",
        "* The blue color value, normalized to the range 0 to 1.",
        "* The alpha color value, normalized to the range 0 to 1.",
        "* The red color value, normalized to the range 0 to 255.",
        "* The green color value, normalized to the range 0 to 255.",
        "* The blue color value, normalized to the range 0 to 255.",
        "* The alpha color value, normalized to the range 0 to 255.",
        "* The hue color value. A number between 0 and 1.\n             * This is the base color.",
        "* The saturation color value. A number between 0 and 1.\n             * This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.",
        "* The lightness color value. A number between 0 and 1.\n             * This controls how dark the color is. Where 1 is as bright as possible and 0 is black.",
        "* Converts the given color value into an Object containing r,g,b and a properties.\n             * @param color A color value, optionally including the alpha value.",
        "* Returns a string containing a hex representation of the given color component.\n             * @param color The color channel to get the hex value for, must be a value between 0 and 255.",
        "* Given 3 separate color values this will return an integer representation of it.\n             * @param red The red color value. A number between 0 and 255.\n             * @param green The green color value. A number between 0 and 255.\n             * @param blue The blue color value. A number between 0 and 255.",
        "* Given an alpha and 3 color values this will return an integer representation of it.\n             * @param red The red color value. A number between 0 and 255.\n             * @param green The green color value. A number between 0 and 255.\n             * @param blue The blue color value. A number between 0 and 255.\n             * @param alpha The alpha color value. A number between 0 and 255.",
        "* Converts a hex string into a Phaser Color object.\n             * \n             * The hex string can supplied as `'#0033ff'` or the short-hand format of `'#03f'`; it can begin with an optional \"#\" or \"0x\", or be unprefixed.\n             * \n             * An alpha channel is _not_ supported.\n             * @param hex The hex color value to convert, such as `#0033ff` or the short-hand format: `#03f`.",
        "* Converts HSL (hue, saturation and lightness) values to a Phaser Color object.\n             * @param h The hue value in the range 0 to 1.\n             * @param s The saturation value in the range 0 to 1.\n             * @param l The lightness value in the range 0 to 1.",
        "* Get HSV color wheel values in an array which will be 360 elements in size.\n             * @param s The saturation, in the range 0 - 1. Default 1.\n             * @param v The value, in the range 0 - 1. Default 1.",
        "* Converts an HSV (hue, saturation and value) color value to RGB.\n             * Conversion formula from http://en.wikipedia.org/wiki/HSL_color_space.\n             * Assumes HSV values are contained in the set [0, 1].\n             * Based on code by Michael Jackson (https://github.com/mjijackson)\n             * @param h The hue, in the range 0 - 1. This is the base color.\n             * @param s The saturation, in the range 0 - 1. This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\n             * @param v The value, in the range 0 - 1. This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\n             * @param out A Color object to store the results in. If not given a new ColorObject will be created.",
        "* Converts a hue to an RGB color.\n             * Based on code by Michael Jackson (https://github.com/mjijackson)",
        "* Converts the given color value into an instance of a Color object.\n             * @param input The color value to convert into a Color object.",
        "* Return the component parts of a color as an Object with the properties alpha, red, green, blue.\n             * \n             * Alpha will only be set if it exists in the given color (0xAARRGGBB)\n             * @param input The color value to convert into a Color object.",
        "* Converts an object containing `r`, `g`, `b` and `a` properties into a Color class instance.\n             * @param input An object containing `r`, `g`, `b` and `a` properties in the range 0 to 255.",
        "* Creates a new Color object where the r, g, and b values have been set to random values\n             * based on the given min max values.\n             * @param min The minimum value to set the random range from (between 0 and 255) Default 0.\n             * @param max The maximum value to set the random range from (between 0 and 255) Default 255.",
        "* Converts a CSS 'web' string into a Phaser Color object.\n             * \n             * The web string can be in the format `'rgb(r,g,b)'` or `'rgba(r,g,b,a)'` where r/g/b are in the range [0..255] and a is in the range [0..1].\n             * @param rgb The CSS format color string, using the `rgb` or `rgba` format.",
        "* Converts an RGB color value to HSV (hue, saturation and value).\n             * Conversion forumla from http://en.wikipedia.org/wiki/HSL_color_space.\n             * Assumes RGB values are contained in the set [0, 255] and returns h, s and v in the set [0, 1].\n             * Based on code by Michael Jackson (https://github.com/mjijackson)\n             * @param r The red color value. A number between 0 and 255.\n             * @param g The green color value. A number between 0 and 255.\n             * @param b The blue color value. A number between 0 and 255.\n             * @param out An object to store the color values in. If not given an HSV Color Object will be created.",
        "* Converts the color values into an HTML compatible color string, prefixed with either `#` or `0x`.\n             * @param r The red color value. A number between 0 and 255.\n             * @param g The green color value. A number between 0 and 255.\n             * @param b The blue color value. A number between 0 and 255.\n             * @param a The alpha value. A number between 0 and 255. Default 255.\n             * @param prefix The prefix of the string. Either `#` or `0x`. Default #.",
        "* Converts the given source color value into an instance of a Color class.\n             * The value can be either a string, prefixed with `rgb` or a hex string, a number or an Object.\n             * @param input The source color value to convert.",
        "* A Bitmap Mask combines the alpha (opacity) of a masked pixel with the alpha of another pixel.\n             * Unlike the Geometry Mask, which is a clipping path, a Bitmap Mask behaves like an alpha mask,\n             * not a clipping path. It is only available when using the WebGL Renderer.\n             * \n             * A Bitmap Mask can use any Game Object to determine the alpha of each pixel of the masked Game Object(s).\n             * For any given point of a masked Game Object's texture, the pixel's alpha will be multiplied by the alpha\n             * of the pixel at the same position in the Bitmap Mask's Game Object. The color of the pixel from the\n             * Bitmap Mask doesn't matter.\n             * \n             * For example, if a pure blue pixel with an alpha of 0.95 is masked with a pure red pixel with an\n             * alpha of 0.5, the resulting pixel will be pure blue with an alpha of 0.475. Naturally, this means\n             * that a pixel in the mask with an alpha of 0 will hide the corresponding pixel in all masked Game Objects\n             *  A pixel with an alpha of 1 in the masked Game Object will receive the same alpha as the\n             * corresponding pixel in the mask.\n             * \n             * The Bitmap Mask's location matches the location of its Game Object, not the location of the\n             * masked objects. Moving or transforming the underlying Game Object will change the mask\n             * (and affect the visibility of any masked objects), whereas moving or transforming a masked object\n             * will not affect the mask.\n             * \n             * The Bitmap Mask will not render its Game Object by itself. If the Game Object is not in a\n             * Scene's display list, it will only be used for the mask and its full texture will not be directly\n             * visible. Adding the underlying Game Object to a Scene will not cause any problems - it will\n             * render as a normal Game Object and will also serve as a mask.",
        "* \n                 * @param scene The Scene which this Bitmap Mask will be used in.\n                 * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* A reference to either the Canvas or WebGL Renderer that this Mask is using.",
        "* A renderable Game Object that uses a texture, such as a Sprite.",
        "* The texture used for the mask's framebuffer.",
        "* The texture used for the main framebuffer.",
        "* Whether the Bitmap Mask is dirty and needs to be updated.",
        "* The framebuffer to which a masked Game Object is rendered.",
        "* The framebuffer to which the Bitmap Mask's masking Game Object is rendered.",
        "* Whether to invert the mask's alpha.\n                 * \n                 * If `true`, the alpha of the masking pixel will be inverted before it's multiplied with the masked pixel. Essentially, this means that a masked area will be visible only if the corresponding area in the mask is invisible.",
        "* Sets a new masking Game Object for the Bitmap Mask.\n                 * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Prepares the WebGL Renderer to render a Game Object with this mask applied.\n                 * \n                 * This renders the masking Game Object to the mask framebuffer and switches to the main framebuffer so that the masked Game Object will be rendered to it instead of being rendered directly to the frame.\n                 * @param renderer The WebGL Renderer to prepare.\n                 * @param maskedObject The masked Game Object which will be drawn.\n                 * @param camera The Camera to render to.",
        "* Finalizes rendering of a masked Game Object.\n                 * \n                 * This resets the previously bound framebuffer and switches the WebGL Renderer to the Bitmap Mask Pipeline, which uses a special fragment shader to apply the masking effect.\n                 * @param renderer The WebGL Renderer to clean up.",
        "* This is a NOOP method. Bitmap Masks are not supported by the Canvas Renderer.\n                 * @param renderer The Canvas Renderer which would be rendered to.\n                 * @param mask The masked Game Object which would be rendered.\n                 * @param camera The Camera to render to.",
        "* This is a NOOP method. Bitmap Masks are not supported by the Canvas Renderer.\n                 * @param renderer The Canvas Renderer which would be rendered to.",
        "* Destroys this BitmapMask and nulls any references it holds.\n                 * \n                 * Note that if a Game Object is currently using this mask it will _not_ automatically detect you have destroyed it,\n                 * so be sure to call `clearMask` on any Game Object using it, before destroying it.",
        "* A Geometry Mask can be applied to a Game Object to hide any pixels of it which don't intersect\n             * a visible pixel from the geometry mask. The mask is essentially a clipping path which can only\n             * make a masked pixel fully visible or fully invisible without changing its alpha (opacity).\n             * \n             * A Geometry Mask uses a Graphics Game Object to determine which pixels of the masked Game Object(s)\n             * should be clipped. For any given point of a masked Game Object's texture, the pixel will only be displayed\n             * if the Graphics Game Object of the Geometry Mask has a visible pixel at the same position. The color and\n             * alpha of the pixel from the Geometry Mask do not matter.\n             * \n             * The Geometry Mask's location matches the location of its Graphics object, not the location of the masked objects.\n             * Moving or transforming the underlying Graphics object will change the mask (and affect the visibility\n             * of any masked objects), whereas moving or transforming a masked object will not affect the mask.\n             * You can think of the Geometry Mask (or rather, of the its Graphics object) as an invisible curtain placed\n             * in front of all masked objects which has its own visual properties and, naturally, respects the camera's\n             * visual properties, but isn't affected by and doesn't follow the masked objects by itself.",
        "* \n                 * @param scene This parameter is not used.\n                 * @param graphicsGeometry The Graphics Game Object to use for the Geometry Mask. Doesn't have to be in the Display List.",
        "* The Graphics object which describes the Geometry Mask.",
        "* Similar to the BitmapMasks invertAlpha setting this to true will then hide all pixels\n                 * drawn to the Geometry Mask.",
        "* Sets a new Graphics object for the Geometry Mask.\n                 * @param graphicsGeometry The Graphics object which will be used for the Geometry Mask.",
        "* Renders the Geometry Mask's underlying Graphics object to the OpenGL stencil buffer and enables the stencil test, which clips rendered pixels according to the mask.\n                 * @param renderer The WebGL Renderer instance to draw to.\n                 * @param mask The Game Object being rendered.\n                 * @param camera The camera the Game Object is being rendered through.",
        "* Flushes all rendered pixels and disables the stencil test of a WebGL context, thus disabling the mask for it.\n                 * @param renderer The WebGL Renderer instance to draw flush.",
        "* Sets the clipping path of a 2D canvas context to the Geometry Mask's underlying Graphics object.\n                 * @param renderer The Canvas Renderer instance to set the clipping path on.\n                 * @param mask The Game Object being rendered.\n                 * @param camera The camera the Game Object is being rendered through.",
        "* Restore the canvas context's previous clipping path, thus turning off the mask for it.\n                 * @param renderer The Canvas Renderer instance being restored.",
        "* Destroys this GeometryMask and nulls any references it holds.\n                 * \n                 * Note that if a Game Object is currently using this mask it will _not_ automatically detect you have destroyed it,\n                 * so be sure to call `clearMask` on any Game Object using it, before destroying it.",
        "* Adds the given element to the DOM. If a parent is provided the element is added as a child of the parent, providing it was able to access it.\n         * If no parent was given it falls back to using `document.body`.\n         * @param element The element to be added to the DOM. Usually a Canvas object.\n         * @param parent The parent in which to add the element. Can be a string which is passed to `getElementById` or an actual DOM object.",
        "* Inspects the readyState of the document. If the document is already complete then it invokes the given callback.\n         * If not complete it sets up several event listeners such as `deviceready`, and once those fire, it invokes the callback.\n         * Called automatically by the Phaser.Game instance. Should not usually be accessed directly.\n         * @param callback The callback to be invoked when the device is ready and the DOM content is loaded.",
        "* Attempts to get the target DOM element based on the given value, which can be either\n         * a string, in which case it will be looked-up by ID, or an element node. If nothing\n         * can be found it will return a reference to the document.body.\n         * @param element The DOM element to look-up.",
        "* Takes the given data string and parses it as XML.\n         * First tries to use the window.DOMParser and reverts to the Microsoft.XMLDOM if that fails.\n         * The parsed XML object is returned, or `null` if there was an error while parsing the data.\n         * @param data The XML source stored in a string.",
        "* Attempts to remove the element from its parentNode in the DOM.\n         * @param element The DOM element to remove from its parent node.",
        "* Abstracts away the use of RAF or setTimeOut for the core game update loop.\n         * This is invoked automatically by the Phaser.Game instance.",
        "* True if RequestAnimationFrame is running, otherwise false.",
        "* The callback to be invoked each step.",
        "* The most recent timestamp. Either a DOMHighResTimeStamp under RAF or `Date.now` under SetTimeout.",
        "* True if the step is using setTimeout instead of RAF.",
        "* The setTimeout or RAF callback ID used when canceling them.",
        "* The previous time the step was called.",
        "* The RAF step function.\n             * Updates the local tick value, invokes the callback and schedules another call to requestAnimationFrame.",
        "* The SetTimeout step function.\n             * Updates the local tick value, invokes the callback and schedules another call to setTimeout.",
        "* Starts the requestAnimationFrame or setTimeout process running.\n             * @param callback The callback to invoke each step.\n             * @param forceSetTimeOut Should it use SetTimeout, even if RAF is available?",
        "* Stops the requestAnimationFrame or setTimeout from running.",
        "* Stops the step from running and clears the callback reference.",
        "* EventEmitter is a Scene Systems plugin compatible version of eventemitter3.",
        "* Removes all listeners.",
        "* Removes all listeners.",
        "* Return an array listing the events for which the emitter has registered listeners.",
        "* Return the listeners registered for a given event.\n             * @param event The event name.",
        "* Return the number of listeners listening to a given event.\n             * @param event The event name.",
        "* Calls each of the listeners registered for a given event.\n             * @param event The event name.\n             * @param args Additional arguments that will be passed to the event handler.",
        "* Add a listener for a given event.\n             * @param event The event name.\n             * @param fn The listener function.\n             * @param context The context to invoke the listener with. Default this.",
        "* Add a listener for a given event.\n             * @param event The event name.\n             * @param fn The listener function.\n             * @param context The context to invoke the listener with. Default this.",
        "* Add a one-time listener for a given event.\n             * @param event The event name.\n             * @param fn The listener function.\n             * @param context The context to invoke the listener with. Default this.",
        "* Remove the listeners of a given event.\n             * @param event The event name.\n             * @param fn Only remove the listeners that match this function.\n             * @param context Only remove the listeners that have this context.\n             * @param once Only remove one-time listeners.",
        "* Remove the listeners of a given event.\n             * @param event The event name.\n             * @param fn Only remove the listeners that match this function.\n             * @param context Only remove the listeners that have this context.\n             * @param once Only remove one-time listeners.",
        "* Remove all listeners, or those of the specified event.\n             * @param event The event name.",
        "* BitmapText objects work by taking a texture file and an XML or JSON file that describes the font structure.\n         * \n         * During rendering for each letter of the text is rendered to the display, proportionally spaced out and aligned to\n         * match the font structure.\n         * \n         * Dynamic Bitmap Text objects are different from Static Bitmap Text in that they invoke a callback for each\n         * letter being rendered during the render pass. This callback allows you to manipulate the properties of\n         * each letter being rendered, such as its position, scale or tint, allowing you to create interesting effects\n         * like jiggling text, which can't be done with Static text. This means that Dynamic Text takes more processing\n         * time, so only use them if you require the callback ability they have.\n         * \n         * BitmapText objects are less flexible than Text objects, in that they have less features such as shadows, fills and the ability\n         * to use Web Fonts, however you trade this flexibility for rendering speed. You can also create visually compelling BitmapTexts by\n         * processing the font texture in an image editor, applying fills and any other effects required.\n         * \n         * To create multi-line text insert \\r, \\n or \\r\\n escape codes into the text string.\n         * \n         * To create a BitmapText data files you need a 3rd party app such as:\n         * \n         * BMFont (Windows, free): http://www.angelcode.com/products/bmfont/\n         * Glyph Designer (OS X, commercial): http://www.71squared.com/en/glyphdesigner\n         * Littera (Web-based, free): http://kvazars.com/littera/\n         * \n         * For most use cases it is recommended to use XML. If you wish to use JSON, the formatting should be equal to the result of\n         * converting a valid XML file through the popular X2JS library. An online tool for conversion can be found here: http://codebeautify.org/xmltojson",
        "* \n             * @param scene The Scene to which this Game Object belongs. It can only belong to one Scene at any given time.\n             * @param x The x coordinate of this Game Object in world space.\n             * @param y The y coordinate of this Game Object in world space.\n             * @param font The key of the font to use from the Bitmap Font cache.\n             * @param text The string, or array of strings, to be set as the content of this Bitmap Text.\n             * @param size The font size of this Bitmap Text.\n             * @param align The alignment of the text in a multi-line BitmapText object. Default 0.",
        "* The horizontal scroll position of the Bitmap Text.",
        "* The vertical scroll position of the Bitmap Text.",
        "* The crop width of the Bitmap Text.",
        "* The crop height of the Bitmap Text.",
        "* A callback that alters how each character of the Bitmap Text is rendered.",
        "* The data object that is populated during rendering, then passed to the displayCallback.\n             * You should modify this object then return it back from the callback. It's updated values\n             * will be used to render the specific glyph.\n             * \n             * Please note that if you need a reference to this object locally in your game code then you\n             * should shallow copy it, as it's updated and re-used for every glyph in the text.",
        "* Set the crop size of this Bitmap Text.\n             * @param width The width of the crop.\n             * @param height The height of the crop.",
        "* Set a callback that alters how each character of the Bitmap Text is rendered.\n             * \n             * The callback receives a {@link DisplayCallbackConfig} object that contains information about the character that's\n             * about to be rendered.\n             * \n             * It should return an object with `x`, `y`, `scale` and `rotation` properties that will be used instead of the\n             * usual values when rendering.\n             * @param callback The display callback to set.",
        "* Set the horizontal scroll position of this Bitmap Text.\n             * @param value The horizontal scroll position to set.",
        "* Set the vertical scroll position of this Bitmap Text.\n             * @param value The vertical scroll position to set.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* Sets the texture and frame this Game Object will use to render with.\n             * \n             * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n             * @param key The key of the texture to be used, as stored in the Texture Manager.\n             * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n             * \n             * The Frame has to belong to the current Texture being used.\n             * \n             * It can be either a string or an index.\n             * \n             * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n             * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n             * @param frame The name or index of the frame within the Texture.\n             * @param updateSize Should this call adjust the size of the Game Object? Default true.\n             * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n             * \n             * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n             * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n             * \n             * The tint works by taking the pixel color values from the Game Objects texture, and then\n             * multiplying it by the color value of the tint. You can provide either one color value,\n             * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n             * per corner. The colors are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n             * \n             * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n             * with those in the tint. You can use this for effects such as making a player flash 'white'\n             * if hit by something. You can provide either one color value, in which case the whole\n             * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n             * are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* Text Set 1 =  !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",
        "* Text Set 2 =  !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "* Text Set 3 = ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
        "* Text Set 4 = ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789",
        "* Text Set 5 = ABCDEFGHIJKLMNOPQRSTUVWXYZ.,/() '!?-*:0123456789",
        "* Text Set 6 = ABCDEFGHIJKLMNOPQRSTUVWXYZ!?:;0123456789\"(),-.'",
        "* Text Set 7 = AGMSY+:4BHNTZ!;5CIOU.?06DJPV,(17EKQW\")28FLRX-'39",
        "* Text Set 8 = 0123456789 .ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "* Text Set 9 = ABCDEFGHIJKLMNOPQRSTUVWXYZ()-0123456789.:,'\"?!",
        "* Text Set 10 = ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "* Text Set 11 = ABCDEFGHIJKLMNOPQRSTUVWXYZ.,\"-+!?()':;0123456789",
        "* Parses a Retro Font configuration object so you can pass it to the BitmapText constructor\n             * and create a BitmapText object using a fixed-width retro font.\n             * @param scene A reference to the Phaser Scene.\n             * @param config The font configuration object.",
        "* The key of the image containing the font.",
        "* If the font set doesn't start at the top left of the given image, specify the X coordinate offset here.",
        "* If the font set doesn't start at the top left of the given image, specify the Y coordinate offset here.",
        "* The width of each character in the font set.",
        "* The height of each character in the font set.",
        "* The characters used in the font set, in display order. You can use the TEXT_SET consts for common font set arrangements.",
        "* The number of characters per row in the font set. If not given charsPerRow will be the image width / characterWidth.",
        "* If the characters in the font set have horizontal spacing between them set the required amount here.",
        "* If the characters in the font set have vertical spacing between them set the required amount here.",
        "* The amount of vertical space to add to the line height of the font.",
        "* BitmapText objects work by taking a texture file and an XML or JSON file that describes the font structure.\n         * \n         * During rendering for each letter of the text is rendered to the display, proportionally spaced out and aligned to\n         * match the font structure.\n         * \n         * BitmapText objects are less flexible than Text objects, in that they have less features such as shadows, fills and the ability\n         * to use Web Fonts, however you trade this flexibility for rendering speed. You can also create visually compelling BitmapTexts by\n         * processing the font texture in an image editor, applying fills and any other effects required.\n         * \n         * To create multi-line text insert \\r, \\n or \\r\\n escape codes into the text string.\n         * \n         * To create a BitmapText data files you need a 3rd party app such as:\n         * \n         * BMFont (Windows, free): {@link http://www.angelcode.com/products/bmfont/|http://www.angelcode.com/products/bmfont/}\n         * Glyph Designer (OS X, commercial): {@link http://www.71squared.com/en/glyphdesigner|http://www.71squared.com/en/glyphdesigner}\n         * Littera (Web-based, free): {@link http://kvazars.com/littera/|http://kvazars.com/littera/}\n         * \n         * For most use cases it is recommended to use XML. If you wish to use JSON, the formatting should be equal to the result of\n         * converting a valid XML file through the popular X2JS library. An online tool for conversion can be found here: {@link http://codebeautify.org/xmltojson|http://codebeautify.org/xmltojson}",
        "* \n             * @param scene The Scene to which this Game Object belongs. It can only belong to one Scene at any given time.\n             * @param x The x coordinate of this Game Object in world space.\n             * @param y The y coordinate of this Game Object in world space.\n             * @param font The key of the font to use from the Bitmap Font cache.\n             * @param text The string, or array of strings, to be set as the content of this Bitmap Text.\n             * @param size The font size of this Bitmap Text.\n             * @param align The alignment of the text in a multi-line BitmapText object. Default 0.",
        "* The key of the Bitmap Font used by this Bitmap Text.\n             * To change the font after creation please use `setFont`.",
        "* The data of the Bitmap Font used by this Bitmap Text.",
        "* Set the lines of text in this BitmapText to be left-aligned.\n             * This only has any effect if this BitmapText contains more than one line of text.",
        "* Set the lines of text in this BitmapText to be center-aligned.\n             * This only has any effect if this BitmapText contains more than one line of text.",
        "* Set the lines of text in this BitmapText to be right-aligned.\n             * This only has any effect if this BitmapText contains more than one line of text.",
        "* Set the font size of this Bitmap Text.\n             * @param size The font size to set.",
        "* Sets the letter spacing between each character of this Bitmap Text.\n             * Can be a positive value to increase the space, or negative to reduce it.\n             * Spacing is applied after the kerning values have been set.\n             * @param spacing The amount of horizontal space to add between each character. Default 0.",
        "* Set the textual content of this BitmapText.\n             * \n             * An array of strings will be converted into multi-line text. Use the align methods to change multi-line alignment.\n             * @param value The string, or array of strings, to be set as the content of this BitmapText.",
        "* Calculate the bounds of this Bitmap Text.\n             * \n             * An object is returned that contains the position, width and height of the Bitmap Text in local and global\n             * contexts.\n             * \n             * Local size is based on just the font size and a [0, 0] position.\n             * \n             * Global size takes into account the Game Object's scale, world position and display origin.\n             * \n             * Also in the object is data regarding the length of each line, should this be a multi-line BitmapText.\n             * @param round Whether to round the results to the nearest integer.",
        "* Changes the font this BitmapText is using to render.\n             * \n             * The new texture is loaded and applied to the BitmapText. The existing test, size and alignment are preserved,\n             * unless overridden via the arguments.\n             * @param font The key of the font to use from the Bitmap Font cache.\n             * @param size The font size of this Bitmap Text. If not specified the current size will be used.\n             * @param align The alignment of the text in a multi-line BitmapText object. If not specified the current alignment will be used. Default 0.",
        "* Controls the alignment of each line of text in this BitmapText object.\n             * \n             * Only has any effect when this BitmapText contains multiple lines of text, split with carriage-returns.\n             * Has no effect with single-lines of text.\n             * \n             * See the methods `setLeftAlign`, `setCenterAlign` and `setRightAlign`.\n             * \n             * 0 = Left aligned (default)\n             * 1 = Middle aligned\n             * 2 = Right aligned\n             * \n             * The alignment position is based on the longest line of text.",
        "* The text that this Bitmap Text object displays.\n             * \n             * You can also use the method `setText` if you want a chainable way to change the text content.",
        "* The font size of this Bitmap Text.\n             * \n             * You can also use the method `setFontSize` if you want a chainable way to change the font size.",
        "* Adds / Removes spacing between characters.\n             * \n             * Can be a negative or positive number.\n             * \n             * You can also use the method `setLetterSpacing` if you want a chainable way to change the letter spacing.",
        "* The width of this Bitmap Text.",
        "* The height of this bitmap text.",
        "* Build a JSON representation of this Bitmap Text.",
        "* Left align the text characters in a multi-line BitmapText object.",
        "* Center align the text characters in a multi-line BitmapText object.",
        "* Right align the text characters in a multi-line BitmapText object.",
        "* Parse an XML Bitmap Font from an Atlas.\n             * \n             * Adds the parsed Bitmap Font data to the cache with the `fontName` key.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* Sets the texture and frame this Game Object will use to render with.\n             * \n             * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n             * @param key The key of the texture to be used, as stored in the Texture Manager.\n             * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n             * \n             * The Frame has to belong to the current Texture being used.\n             * \n             * It can be either a string or an index.\n             * \n             * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n             * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n             * @param frame The name or index of the frame within the Texture.\n             * @param updateSize Should this call adjust the size of the Game Object? Default true.\n             * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n             * \n             * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n             * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n             * \n             * The tint works by taking the pixel color values from the Game Objects texture, and then\n             * multiplying it by the color value of the tint. You can provide either one color value,\n             * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n             * per corner. The colors are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n             * \n             * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n             * with those in the tint. You can use this for effects such as making a player flash 'white'\n             * if hit by something. You can provide either one color value, in which case the whole\n             * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n             * are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* A Blitter Game Object.\n         * \n         * The Blitter Game Object is a special kind of container that creates, updates and manages Bob objects.\n         * Bobs are designed for rendering speed rather than flexibility. They consist of a texture, or frame from a texture,\n         * a position and an alpha value. You cannot scale or rotate them. They use a batched drawing method for speed\n         * during rendering.\n         * \n         * A Blitter Game Object has one texture bound to it. Bobs created by the Blitter can use any Frame from this\n         * Texture to render with, but they cannot use any other Texture. It is this single texture-bind that allows\n         * them their speed.\n         * \n         * If you have a need to blast a large volume of frames around the screen then Blitter objects are well worth\n         * investigating. They are especially useful for using as a base for your own special effects systems.",
        "* \n             * @param scene The Scene to which this Game Object belongs. It can only belong to one Scene at any given time.\n             * @param x The x coordinate of this Game Object in world space. Default 0.\n             * @param y The y coordinate of this Game Object in world space. Default 0.\n             * @param texture The key of the texture this Game Object will use for rendering. The Texture must already exist in the Texture Manager. Default '__DEFAULT'.\n             * @param frame The Frame of the Texture that this Game Object will use. Only set if the Texture has multiple frames, such as a Texture Atlas or Sprite Sheet. Default 0.",
        "* The children of this Blitter.\n             * This List contains all of the Bob objects created by the Blitter.",
        "* Is the Blitter considered dirty?\n             * A 'dirty' Blitter has had its child count changed since the last frame.",
        "* Creates a new Bob in this Blitter.\n             * \n             * The Bob is created at the given coordinates, relative to the Blitter and uses the given frame.\n             * A Bob can use any frame belonging to the texture bound to the Blitter.\n             * @param x The x position of the Bob. Bob coordinate are relative to the position of the Blitter object.\n             * @param y The y position of the Bob. Bob coordinate are relative to the position of the Blitter object.\n             * @param frame The Frame the Bob will use. It _must_ be part of the Texture the parent Blitter object is using.\n             * @param visible Should the created Bob render or not? Default true.\n             * @param index The position in the Blitters Display List to add the new Bob at. Defaults to the top of the list.",
        "* Creates multiple Bob objects within this Blitter and then passes each of them to the specified callback.\n             * @param callback The callback to invoke after creating a bob. It will be sent two arguments: The Bob and the index of the Bob.\n             * @param quantity The quantity of Bob objects to create.\n             * @param frame The Frame the Bobs will use. It must be part of the Blitter Texture.\n             * @param visible Should the created Bob render or not? Default true.",
        "* Creates multiple Bobs in one call.\n             * \n             * The amount created is controlled by a combination of the `quantity` argument and the number of frames provided.\n             * \n             * If the quantity is set to 10 and you provide 2 frames, then 20 Bobs will be created. 10 with the first\n             * frame and 10 with the second.\n             * @param quantity The quantity of Bob objects to create.\n             * @param frame The Frame the Bobs will use. It must be part of the Blitter Texture.\n             * @param visible Should the created Bob render or not? Default true.",
        "* Checks if the given child can render or not, by checking its `visible` and `alpha` values.\n             * @param child The Bob to check for rendering.",
        "* Returns an array of Bobs to be rendered.\n             * If the Blitter is dirty then a new list is generated and stored in `renderList`.",
        "* Removes all Bobs from the children List and clears the dirty flag.",
        "* Internal destroy handler, called as part of the destroy process.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* Sets the texture and frame this Game Object will use to render with.\n             * \n             * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n             * @param key The key of the texture to be used, as stored in the Texture Manager.\n             * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n             * \n             * The Frame has to belong to the current Texture being used.\n             * \n             * It can be either a string or an index.\n             * \n             * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n             * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n             * @param frame The name or index of the frame within the Texture.\n             * @param updateSize Should this call adjust the size of the Game Object? Default true.\n             * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* A Bob Game Object.\n         * \n         * A Bob belongs to a Blitter Game Object. The Blitter is responsible for managing and rendering this object.\n         * \n         * A Bob has a position, alpha value and a frame from a texture that it uses to render with. You can also toggle\n         * the flipped and visible state of the Bob. The Frame the Bob uses to render can be changed dynamically, but it\n         * must be a Frame within the Texture used by the parent Blitter.\n         * \n         * Bob positions are relative to the Blitter parent. So if you move the Blitter parent, all Bob children will\n         * have their positions impacted by this change as well.\n         * \n         * You can manipulate Bob objects directly from your game code, but the creation and destruction of them should be\n         * handled via the Blitter parent.",
        "* \n             * @param blitter The parent Blitter object is responsible for updating this Bob.\n             * @param x The horizontal position of this Game Object in the world, relative to the parent Blitter position.\n             * @param y The vertical position of this Game Object in the world, relative to the parent Blitter position.\n             * @param frame The Frame this Bob will render with, as defined in the Texture the parent Blitter is using.\n             * @param visible Should the Bob render visible or not to start with?",
        "* The Blitter object that this Bob belongs to.",
        "* The x position of this Bob, relative to the x position of the Blitter.",
        "* The y position of this Bob, relative to the y position of the Blitter.",
        "* The frame that the Bob uses to render with.\n             * To change the frame use the `Bob.setFrame` method.",
        "* A blank object which can be used to store data related to this Bob in.",
        "* The horizontally flipped state of the Bob.\n             * A Bob that is flipped horizontally will render inversed on the horizontal axis.\n             * Flipping always takes place from the middle of the texture.",
        "* The vertically flipped state of the Bob.\n             * A Bob that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n             * Flipping always takes place from the middle of the texture.",
        "* Changes the Texture Frame being used by this Bob.\n             * The frame must be part of the Texture the parent Blitter is using.\n             * If no value is given it will use the default frame of the Blitter parent.\n             * @param frame The frame to be used during rendering.",
        "* Resets the horizontal and vertical flipped state of this Bob back to their default un-flipped state.",
        "* Resets this Bob.\n             * \n             * Changes the position to the values given, and optionally changes the frame.\n             * \n             * Also resets the flipX and flipY values, sets alpha back to 1 and visible to true.\n             * @param x The x position of the Bob. Bob coordinate are relative to the position of the Blitter object.\n             * @param y The y position of the Bob. Bob coordinate are relative to the position of the Blitter object.\n             * @param frame The Frame the Bob will use. It _must_ be part of the Texture the parent Blitter object is using.",
        "* Sets the horizontal flipped state of this Bob.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Bob.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Bob.\n             * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n             * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the visibility of this Bob.\n             * \n             * An invisible Bob will skip rendering.\n             * @param value The visible state of the Game Object.",
        "* Set the Alpha level of this Bob. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * A Bob with alpha 0 will skip rendering.\n             * @param value The alpha value used for this Bob. Between 0 and 1.",
        "* Destroys this Bob instance.\n             * Removes itself from the Blitter and clears the parent, frame and data properties.",
        "* The visible state of the Bob.\n             * \n             * An invisible Bob will skip rendering.",
        "* The alpha value of the Bob, between 0 and 1.\n             * \n             * A Bob with alpha 0 will skip rendering.",
        "* Builds a Game Object using the provided configuration object.\n         * @param scene A reference to the Scene.\n         * @param gameObject The initial GameObject.\n         * @param config The config to build the GameObject with.",
        "* Adds an Animation component to a Sprite and populates it based on the given config.\n         * @param sprite The sprite to add an Animation component to.\n         * @param config The animation config.",
        "* Provides methods used for setting the alpha properties of a Game Object.\n             * Should be applied as a mixin and not used directly.",
        "* Clears all alpha values associated with this Game Object.\n                 * \n                 * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n                 * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n                 * \n                 * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n                 * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n                 * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n                 * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n                 * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n                 * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n                 * \n                 * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The Game Object to which this animation controller belongs.",
        "* A reference to the global Animation Manager.",
        "* Is an animation currently playing or not?",
        "* The current Animation loaded into this Animation Controller.",
        "* The current AnimationFrame being displayed by this Animation Controller.",
        "* The key of the next Animation to be loaded into this Animation Controller when the current animation completes.",
        "* The frame rate of playback in frames per second.\n                 * The default is 24 if the `duration` property is `null`.",
        "* How long the animation should play for, in milliseconds.\n                 * If the `frameRate` property has been set then it overrides this value,\n                 * otherwise the `frameRate` is derived from `duration`.",
        "* ms per frame, not including frame specific modifiers that may be present in the Animation data.",
        "* Skip frames if the time lags, or always advanced anyway?",
        "* Will the playhead move forwards (`true`) or in reverse (`false`).",
        "* Internal time overflow accumulator.",
        "* The time point at which the next animation frame will change.",
        "* An internal counter keeping track of how many repeats are left to play.",
        "* An internal flag keeping track of pending repeats.",
        "* Sets an animation to be played immediately after the current one completes.\n                 * \n                 * The current animation must enter a 'completed' state for this to happen, i.e. finish all of its repeats, delays, etc, or have the `stop` method called directly on it.\n                 * \n                 * An animation set to repeat forever will never enter a completed state.\n                 * \n                 * You can chain a new animation at any point, including before the current one starts playing, during it, or when it ends (via its `animationcomplete` callback).\n                 * Chained animations are specific to a Game Object, meaning different Game Objects can have different chained animations without impacting the global animation they're playing.\n                 * \n                 * Call this method with no arguments to reset the chained animation.\n                 * @param key The string-based key of the animation to play next, as defined previously in the Animation Manager. Or an Animation instance.",
        "* Sets the amount of time, in milliseconds, that the animation will be delayed before starting playback.\n                 * @param value The amount of time, in milliseconds, to wait before starting playback. Default 0.",
        "* Gets the amount of time, in milliseconds that the animation will be delayed before starting playback.",
        "* Waits for the specified delay, in milliseconds, then starts playback of the requested animation.\n                 * @param delay The delay, in milliseconds, to wait before starting the animation playing.\n                 * @param key The key of the animation to play.\n                 * @param startFrame The frame of the animation to start from. Default 0.",
        "* Returns the key of the animation currently loaded into this component.",
        "* Internal method used to load an animation into this component.\n                 * @param key The key of the animation to load.\n                 * @param startFrame The start frame of the animation to load. Default 0.",
        "* Pause the current animation and set the `isPlaying` property to `false`.\n                 * You can optionally pause it at a specific frame.\n                 * @param atFrame An optional frame to set after pausing the animation.",
        "* Resumes playback of a paused animation and sets the `isPlaying` property to `true`.\n                 * You can optionally tell it to start playback from a specific frame.\n                 * @param fromFrame An optional frame to set before restarting playback.",
        "* `true` if the current animation is paused, otherwise `false`.",
        "* Plays an Animation on a Game Object that has the Animation component, such as a Sprite.\n                 * \n                 * Animations are stored in the global Animation Manager and are referenced by a unique string-based key.\n                 * @param key The string-based key of the animation to play, as defined previously in the Animation Manager. Or an Animation instance.\n                 * @param ignoreIfPlaying If an animation is already playing then ignore this call. Default false.\n                 * @param startFrame Optionally start the animation playing from this frame index. Default 0.",
        "* Plays an Animation (in reverse mode) on the Game Object that owns this Animation Component.\n                 * @param key The string-based key of the animation to play, as defined previously in the Animation Manager. Or an Animation instance.\n                 * @param ignoreIfPlaying If an animation is already playing then ignore this call. Default false.\n                 * @param startFrame Optionally start the animation playing from this frame index. Default 0.",
        "* Load an Animation and fires 'onStartEvent' event, extracted from 'play' method.\n                 * @param key The string-based key of the animation to play, as defined previously in the Animation Manager.\n                 * @param startFrame Optionally start the animation playing from this frame index. Default 0.",
        "* Reverse the Animation that is already playing on the Game Object.",
        "* Returns a value between 0 and 1 indicating how far this animation is through, ignoring repeats and yoyos.\n                 * If the animation has a non-zero repeat defined, `getProgress` and `getTotalProgress` will be different\n                 * because `getProgress` doesn't include any repeats or repeat delays, whereas `getTotalProgress` does.",
        "* Takes a value between 0 and 1 and uses it to set how far this animation is through playback.\n                 * Does not factor in repeats or yoyos, but does handle playing forwards or backwards.\n                 * @param value The progress value, between 0 and 1. Default 0.",
        "* Handle the removal of an animation from the Animation Manager.\n                 * @param key The key of the removed Animation.\n                 * @param animation The removed Animation.",
        "* Gets the number of times that the animation will repeat\n                 * after its first iteration. For example, if returns 1, the animation will\n                 * play a total of twice (the initial play plus 1 repeat).\n                 * A value of -1 means the animation will repeat indefinitely.",
        "* Sets the number of times that the animation should repeat\n                 * after its first iteration. For example, if repeat is 1, the animation will\n                 * play a total of twice (the initial play plus 1 repeat).\n                 * To repeat indefinitely, use -1. repeat should always be an integer.\n                 * @param value The number of times that the animation should repeat.",
        "* Gets the amount of delay between repeats, if any.",
        "* Sets the amount of time in seconds between repeats.\n                 * For example, if `repeat` is 2 and `repeatDelay` is 10, the animation will play initially,\n                 * then wait for 10 seconds before repeating, then play again, then wait another 10 seconds\n                 * before doing its final repeat.\n                 * @param value The delay to wait between repeats, in seconds.",
        "* Restarts the current animation from its beginning, optionally including its delay value.\n                 * @param includeDelay Whether to include the delay value of the animation when restarting. Default false.",
        "* Immediately stops the current animation from playing and dispatches the `animationcomplete` event.\n                 * \n                 * If no animation is set, no event will be dispatched.\n                 * \n                 * If there is another animation queued (via the `chain` method) then it will start playing immediately.",
        "* Stops the current animation from playing after the specified time delay, given in milliseconds.\n                 * @param delay The number of milliseconds to wait before stopping this animation.",
        "* Stops the current animation from playing when it next repeats.",
        "* Stops the current animation from playing when it next sets the given frame.\n                 * If this frame doesn't exist within the animation it will not stop it from playing.\n                 * @param frame The frame to check before stopping this animation.",
        "* Sets the Time Scale factor, allowing you to make the animation go go faster or slower than default.\n                 * Where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc.\n                 * @param value The time scale factor, where 1 is no change, 0.5 is half speed, etc. Default 1.",
        "* Gets the Time Scale factor.",
        "* Returns the total number of frames in this animation.",
        "* The internal update loop for the Animation Component.\n                 * @param time The current timestamp.\n                 * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Sets the given Animation Frame as being the current frame\n                 * and applies it to the parent Game Object, adjusting its size and origin as needed.\n                 * @param animationFrame The Animation Frame to set as being current.",
        "* Advances the animation to the next frame, regardless of the time or animation state.\n                 * If the animation is set to repeat, or yoyo, this will still take effect.\n                 * \n                 * Calling this does not change the direction of the animation. I.e. if it was currently\n                 * playing in reverse, calling this method doesn't then change the direction to forwards.",
        "* Advances the animation to the previous frame, regardless of the time or animation state.\n                 * If the animation is set to repeat, or yoyo, this will still take effect.\n                 * \n                 * Calling this does not change the direction of the animation. I.e. if it was currently\n                 * playing in forwards, calling this method doesn't then change the direction to backwards.",
        "* Sets if the current Animation will yoyo when it reaches the end.\n                 * A yoyo'ing animation will play through consecutively, and then reverse-play back to the start again.\n                 * @param value `true` if the animation should yoyo, `false` to not. Default false.",
        "* Gets if the current Animation will yoyo when it reaches the end.\n                 * A yoyo'ing animation will play through consecutively, and then reverse-play back to the start again.",
        "* Destroy this Animation component.\n                 * \n                 * Unregisters event listeners and cleans up its references.",
        "* Provides methods used for setting the blend mode of a Game Object.\n             * Should be applied as a mixin and not used directly.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n                 * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n                 * are used.\n                 * @param value The BlendMode value. Either a string or a CONST.",
        "* Provides methods used for calculating and setting the size of a non-Frame based Game Object.\n             * Should be applied as a mixin and not used directly.",
        "* The native (un-scaled) width of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n                 * \n                 * Calling this will adjust the scale.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* Provides methods used for getting and setting the texture of a Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n                 * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n                 * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n                 * \n                 * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n                 * \n                 * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n                 * changes what is shown when rendered.\n                 * \n                 * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n                 * \n                 * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n                 * half of it, you could call `setCrop(0, 0, 400, 600)`.\n                 * \n                 * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n                 * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n                 * \n                 * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n                 * \n                 * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n                 * \n                 * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n                 * the renderer to skip several internal calculations.\n                 * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n                 * @param y The y coordinate to start the crop from.\n                 * @param width The width of the crop rectangle in pixels.\n                 * @param height The height of the crop rectangle in pixels.",
        "* Provides methods used for setting the depth of a Game Object.\n             * Should be applied as a mixin and not used directly.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.\n                 * @param value The depth of this Game Object.",
        "* Provides methods used for visually flipping a Game Object.\n             * Should be applied as a mixin and not used directly.",
        "* The horizontally flipped state of the Game Object.\n                 * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n                 * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n                 * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n                 * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Provides methods used for obtaining the bounds of a Game Object.\n             * Should be applied as a mixin and not used directly.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n                 * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n                 * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* Provides methods used for getting and setting the mask of a Game Object.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n                 * \n                 * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n                 * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n                 * \n                 * If a mask is already set on this Game Object it will be immediately replaced.\n                 * \n                 * Masks are positioned in global space and are not relative to the Game Object to which they\n                 * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n                 * \n                 * Masks have no impact on physics or input detection. They are purely a rendering component\n                 * that allows you to limit what is visible during the render pass.\n                 * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n                 * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a renderable Game Object.\n                 * A renderable Game Object is one that uses a texture to render with, such as an\n                 * Image, Sprite, Render Texture or BitmapText.\n                 * \n                 * If you do not provide a renderable object, and this Game Object has a texture,\n                 * it will use itself as the object. This means you can call this method to create\n                 * a Bitmap Mask from any renderable Game Object.\n                 * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a Graphics Game Object.\n                 * \n                 * If you do not provide a graphics object, and this Game Object is an instance\n                 * of a Graphics object, then it will use itself to create the mask.\n                 * \n                 * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n                 * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* Provides methods used for getting and setting the origin of a Game Object.\n             * Values are normalized, given in the range 0 to 1.\n             * Display values contain the calculated pixel values.\n             * Should be applied as a mixin and not used directly.",
        "* The horizontal origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n                 * \n                 * The values are given in the range 0 to 1.\n                 * @param x The horizontal origin value. Default 0.5.\n                 * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n                 * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n                 * @param x The horizontal display origin value. Default 0.\n                 * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n                 * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* Provides methods used for setting the WebGL rendering pipeline of a Game Object.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n                 * This should only be called during the instantiation of the Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* Provides methods used for getting and setting the scale of a Game Object.",
        "* The Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n                 * @param value The Scale Mode to be used by this Game Object.",
        "* Provides methods used for getting and setting the Scroll Factor of a Game Object.",
        "* The horizontal scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.\n                 * @param x The horizontal scroll factor of this Game Object.\n                 * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* Provides methods used for getting and setting the size of a Game Object.",
        "* The native (un-scaled) width of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n                 * \n                 * Calling this will adjust the scale.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* Provides methods used for getting and setting the texture of a Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* Sets the texture and frame this Game Object will use to render with.\n                 * \n                 * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n                 * @param key The key of the texture to be used, as stored in the Texture Manager.\n                 * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n                 * \n                 * The Frame has to belong to the current Texture being used.\n                 * \n                 * It can be either a string or an index.\n                 * \n                 * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n                 * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n                 * @param frame The name or index of the frame within the Texture.\n                 * @param updateSize Should this call adjust the size of the Game Object? Default true.\n                 * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Provides methods used for getting and setting the texture of a Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n                 * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n                 * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n                 * \n                 * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n                 * \n                 * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n                 * changes what is shown when rendered.\n                 * \n                 * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n                 * \n                 * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n                 * half of it, you could call `setCrop(0, 0, 400, 600)`.\n                 * \n                 * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n                 * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n                 * \n                 * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n                 * \n                 * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n                 * \n                 * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n                 * the renderer to skip several internal calculations.\n                 * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n                 * @param y The y coordinate to start the crop from.\n                 * @param width The width of the crop rectangle in pixels.\n                 * @param height The height of the crop rectangle in pixels.",
        "* Sets the texture and frame this Game Object will use to render with.\n                 * \n                 * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n                 * @param key The key of the texture to be used, as stored in the Texture Manager.\n                 * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n                 * \n                 * The Frame has to belong to the current Texture being used.\n                 * \n                 * It can be either a string or an index.\n                 * \n                 * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n                 * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n                 * @param frame The name or index of the frame within the Texture.\n                 * @param updateSize Should this call adjust the size of the Game Object? Default true.\n                 * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Provides methods used for setting the tint of a Game Object.\n             * Should be applied as a mixin and not used directly.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n                 * \n                 * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n                 * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n                 * \n                 * The tint works by taking the pixel color values from the Game Objects texture, and then\n                 * multiplying it by the color value of the tint. You can provide either one color value,\n                 * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n                 * per corner. The colors are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n                 * \n                 * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n                 * with those in the tint. You can use this for effects such as making a player flash 'white'\n                 * if hit by something. You can provide either one color value, in which case the whole\n                 * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n                 * are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* Build a JSON representation of the given Game Object.\n             * \n             * This is typically extended further by Game Object specific implementations.",
        "* Provides methods used for getting and setting the position, scale and rotation of a Game Object.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n                 * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n                 * \n                 * Where 0 is to the right, 90 is down, 180 is left.\n                 * \n                 * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n                 * \n                 * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n                 * @param x The x position of this Game Object. Default 0.\n                 * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n                 * @param z The z position of this Game Object. Default 0.\n                 * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n                 * the given area.\n                 * \n                 * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n                 * \n                 * The position does not factor in the size of this Game Object, meaning that only the origin is\n                 * guaranteed to be within the area.\n                 * @param x The x position of the top-left of the random area. Default 0.\n                 * @param y The y position of the top-left of the random area. Default 0.\n                 * @param width The width of the random area.\n                 * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n                 * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n                 * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n                 * @param x The horizontal scale of this Game Object.\n                 * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n                 * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n                 * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n                 * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n                 * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.\n                 * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* A Matrix used for display transformations for rendering.\n             * \n             * It is represented like so:\n             * \n             * ```\n             * | a | c | tx |\n             * | b | d | ty |\n             * | 0 | 0 | 1  |\n             * ```",
        "* \n                 * @param a The Scale X value. Default 1.\n                 * @param b The Shear Y value. Default 0.\n                 * @param c The Shear X value. Default 0.\n                 * @param d The Scale Y value. Default 1.\n                 * @param tx The Translate X value. Default 0.\n                 * @param ty The Translate Y value. Default 0.",
        "* The matrix values.",
        "* The decomposed matrix.",
        "* The Scale X value.",
        "* The Shear Y value.",
        "* The Shear X value.",
        "* The Scale Y value.",
        "* The Translate X value.",
        "* The Translate Y value.",
        "* The Translate X value.",
        "* The Translate Y value.",
        "* The rotation of the Matrix.",
        "* The horizontal scale of the Matrix.",
        "* The vertical scale of the Matrix.",
        "* Reset the Matrix to an identity matrix.",
        "* Translate the Matrix.\n                 * @param x The horizontal translation value.\n                 * @param y The vertical translation value.",
        "* Scale the Matrix.\n                 * @param x The horizontal scale value.\n                 * @param y The vertical scale value.",
        "* Rotate the Matrix.\n                 * @param angle The angle of rotation in radians.",
        "* Multiply this Matrix by the given Matrix.\n                 * \n                 * If an `out` Matrix is given then the results will be stored in it.\n                 * If it is not given, this matrix will be updated in place instead.\n                 * Use an `out` Matrix if you do not wish to mutate this matrix.\n                 * @param rhs The Matrix to multiply by.\n                 * @param out An optional Matrix to store the results in.",
        "* Multiply this Matrix by the matrix given, including the offset.\n                 * \n                 * The offsetX is added to the tx value: `offsetX * a + offsetY * c + tx`.\n                 * The offsetY is added to the ty value: `offsetY * b + offsetY * d + ty`.\n                 * @param src The source Matrix to copy from.\n                 * @param offsetX Horizontal offset to factor in to the multiplication.\n                 * @param offsetY Vertical offset to factor in to the multiplication.",
        "* Transform the Matrix.\n                 * @param a The Scale X value.\n                 * @param b The Shear Y value.\n                 * @param c The Shear X value.\n                 * @param d The Scale Y value.\n                 * @param tx The Translate X value.\n                 * @param ty The Translate Y value.",
        "* Transform a point using this Matrix.\n                 * @param x The x coordinate of the point to transform.\n                 * @param y The y coordinate of the point to transform.\n                 * @param point The Point object to store the transformed coordinates.",
        "* Invert the Matrix.",
        "* Set the values of this Matrix to copy those of the matrix given.\n                 * @param src The source Matrix to copy from.",
        "* Set the values of this Matrix to copy those of the array given.\n                 * Where array indexes 0, 1, 2, 3, 4 and 5 are mapped to a, b, c, d, e and f.\n                 * @param src The array of values to set into this matrix.",
        "* Copy the values from this Matrix to the given Canvas Rendering Context.\n                 * This will use the Context.transform method.\n                 * @param ctx The Canvas Rendering Context to copy the matrix values to.",
        "* Copy the values from this Matrix to the given Canvas Rendering Context.\n                 * This will use the Context.setTransform method.\n                 * @param ctx The Canvas Rendering Context to copy the matrix values to.",
        "* Copy the values in this Matrix to the array given.\n                 * \n                 * Where array indexes 0, 1, 2, 3, 4 and 5 are mapped to a, b, c, d, e and f.\n                 * @param out The array to copy the matrix values in to.",
        "* Set the values of this Matrix.\n                 * @param a The Scale X value.\n                 * @param b The Shear Y value.\n                 * @param c The Shear X value.\n                 * @param d The Scale Y value.\n                 * @param tx The Translate X value.\n                 * @param ty The Translate Y value.",
        "* Decompose this Matrix into its translation, scale and rotation values using QR decomposition.\n                 * \n                 * The result must be applied in the following order to reproduce the current matrix:\n                 * \n                 * translate -> rotate -> scale",
        "* Apply the identity, translate, rotate and scale operations on the Matrix.\n                 * @param x The horizontal translation.\n                 * @param y The vertical translation.\n                 * @param rotation The angle of rotation in radians.\n                 * @param scaleX The horizontal scale.\n                 * @param scaleY The vertical scale.",
        "* Takes the `x` and `y` values and returns a new position in the `output` vector that is the inverse of\n                 * the current matrix with its transformation applied.\n                 * \n                 * Can be used to translate points from world to local space.\n                 * @param x The x position to translate.\n                 * @param y The y position to translate.\n                 * @param output A Vector2, or point-like object, to store the results in.",
        "* Returns the X component of this matrix multiplied by the given values.\n                 * This is the same as `x * a + y * c + e`.\n                 * @param x The x value.\n                 * @param y The y value.",
        "* Returns the Y component of this matrix multiplied by the given values.\n                 * This is the same as `x * b + y * d + f`.\n                 * @param x The x value.\n                 * @param y The y value.",
        "* Returns a string that can be used in a CSS Transform call as a `matrix` property.",
        "* Destroys this Transform Matrix.",
        "* Provides methods used for setting the visibility of a Game Object.\n             * Should be applied as a mixin and not used directly.",
        "* The visible state of the Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.\n                 * @param value The visible state of the Game Object.",
        "* A Container Game Object.\n         * \n         * A Container, as the name implies, can 'contain' other types of Game Object.\n         * When a Game Object is added to a Container, the Container becomes responsible for the rendering of it.\n         * By default it will be removed from the Display List and instead added to the Containers own internal list.\n         * \n         * The position of the Game Object automatically becomes relative to the position of the Container.\n         * \n         * When the Container is rendered, all of its children are rendered as well, in the order in which they exist\n         * within the Container. Container children can be repositioned using methods such as `MoveUp`, `MoveDown` and `SendToBack`.\n         * \n         * If you modify a transform property of the Container, such as `Container.x` or `Container.rotation` then it will\n         * automatically influence all children as well.\n         * \n         * Containers can include other Containers for deeply nested transforms.\n         * \n         * Containers can have masks set on them and can be used as a mask too. However, Container children cannot be masked.\n         * The masks do not 'stack up'. Only a Container on the root of the display list will use its mask.\n         * \n         * Containers can be enabled for input. Because they do not have a texture you need to provide a shape for them\n         * to use as their hit area. Container children can also be enabled for input, independent of the Container.\n         * \n         * Containers can be given a physics body for either Arcade Physics, Impact Physics or Matter Physics. However,\n         * if Container _children_ are enabled for physics you may get unexpected results, such as offset bodies,\n         * if the Container itself, or any of its ancestors, is positioned anywhere other than at 0 x 0. Container children\n         * with physics do not factor in the Container due to the excessive extra calculations needed. Please structure\n         * your game to work around this.\n         * \n         * It's important to understand the impact of using Containers. They add additional processing overhead into\n         * every one of their children. The deeper you nest them, the more the cost escalates. This is especially true\n         * for input events. You also loose the ability to set the display depth of Container children in the same\n         * flexible manner as those not within them. In short, don't use them for the sake of it. You pay a small cost\n         * every time you create one, try to structure your game around avoiding that where possible.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param children An optional array of Game Objects to add to this Container.",
        "* An array holding the children of this Container.",
        "* Does this Container exclusively manage its children?\n             * \n             * The default is `true` which means a child added to this Container cannot\n             * belong in another Container, which includes the Scene display list.\n             * \n             * If you disable this then this Container will no longer exclusively manage its children.\n             * This allows you to create all kinds of interesting graphical effects, such as replicating\n             * Game Objects without reparenting them all over the Scene.\n             * However, doing so will prevent children from receiving any kind of input event or have\n             * their physics bodies work by default, as they're no longer a single entity on the\n             * display list, but are being replicated where-ever this Container is.",
        "* Containers can have an optional maximum size. If set to anything above 0 it\n             * will constrict the addition of new Game Objects into the Container, capping off\n             * the maximum limit the Container can grow in size to.",
        "* The cursor position.",
        "* Internal Transform Matrix used for local space conversion.",
        "* Internal value to allow Containers to be used for input and physics.\n             * Do not change this value. It has no effect other than to break things.",
        "* Internal value to allow Containers to be used for input and physics.\n             * Do not change this value. It has no effect other than to break things.",
        "* Internal value to allow Containers to be used for input and physics.\n             * Do not change this value. It has no effect other than to break things.",
        "* Internal value to allow Containers to be used for input and physics.\n             * Do not change this value. It has no effect other than to break things.",
        "* Does this Container exclusively manage its children?\n             * \n             * The default is `true` which means a child added to this Container cannot\n             * belong in another Container, which includes the Scene display list.\n             * \n             * If you disable this then this Container will no longer exclusively manage its children.\n             * This allows you to create all kinds of interesting graphical effects, such as replicating\n             * Game Objects without reparenting them all over the Scene.\n             * However, doing so will prevent children from receiving any kind of input event or have\n             * their physics bodies work by default, as they're no longer a single entity on the\n             * display list, but are being replicated where-ever this Container is.\n             * @param value The exclusive state of this Container. Default true.",
        "* Gets the bounds of this Container. It works by iterating all children of the Container,\n             * getting their respective bounds, and then working out a min-max rectangle from that.\n             * It does not factor in if the children render or not, all are included.\n             * \n             * Some children are unable to return their bounds, such as Graphics objects, in which case\n             * they are skipped.\n             * \n             * Depending on the quantity of children in this Container it could be a really expensive call,\n             * so cache it and only poll it as needed.\n             * \n             * The values are stored and returned in a Rectangle object.\n             * @param output A Geom.Rectangle object to store the values in. If not provided a new Rectangle will be created.",
        "* Takes a Point-like object, such as a Vector2, Geom.Point or object with public x and y properties,\n             * and transforms it into the space of this Container, then returns it in the output object.\n             * @param source The Source Point to be transformed.\n             * @param output A destination object to store the transformed point in. If none given a Vector2 will be created and returned.",
        "* Returns the world transform matrix as used for Bounds checks.\n             * \n             * The returned matrix is temporal and shouldn't be stored.",
        "* Adds the given Game Object, or array of Game Objects, to this Container.\n             * \n             * Each Game Object must be unique within the Container.\n             * @param child The Game Object, or array of Game Objects, to add to the Container.",
        "* Adds the given Game Object, or array of Game Objects, to this Container at the specified position.\n             * \n             * Existing Game Objects in the Container are shifted up.\n             * \n             * Each Game Object must be unique within the Container.\n             * @param child The Game Object, or array of Game Objects, to add to the Container.\n             * @param index The position to insert the Game Object/s at. Default 0.",
        "* Returns the Game Object at the given position in this Container.\n             * @param index The position to get the Game Object from.",
        "* Returns the index of the given Game Object in this Container.\n             * @param child The Game Object to search for in this Container.",
        "* Sort the contents of this Container so the items are in order based on the given property.\n             * For example: `sort('alpha')` would sort the elements based on the value of their `alpha` property.\n             * @param property The property to lexically sort by.\n             * @param handler Provide your own custom handler function. Will receive 2 children which it should compare and return a boolean.",
        "* Searches for the first instance of a child with its `name` property matching the given argument.\n             * Should more than one child have the same name only the first is returned.\n             * @param name The name to search for.",
        "* Returns a random Game Object from this Container.\n             * @param startIndex An optional start index. Default 0.\n             * @param length An optional length, the total number of elements (from the startIndex) to choose from.",
        "* Gets the first Game Object in this Container.\n             * \n             * You can also specify a property and value to search for, in which case it will return the first\n             * Game Object in this Container with a matching property and / or value.\n             * \n             * For example: `getFirst('visible', true)` would return the first Game Object that had its `visible` property set.\n             * \n             * You can limit the search to the `startIndex` - `endIndex` range.\n             * @param property The property to test on each Game Object in the Container.\n             * @param value The value to test the property against. Must pass a strict (`===`) comparison check.\n             * @param startIndex An optional start index to search from. Default 0.\n             * @param endIndex An optional end index to search up to (but not included) Default Container.length.",
        "* Returns all Game Objects in this Container.\n             * \n             * You can optionally specify a matching criteria using the `property` and `value` arguments.\n             * \n             * For example: `getAll('body')` would return only Game Objects that have a body property.\n             * \n             * You can also specify a value to compare the property to:\n             * \n             * `getAll('visible', true)` would return only Game Objects that have their visible property set to `true`.\n             * \n             * Optionally you can specify a start and end index. For example if this Container had 100 Game Objects,\n             * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\n             * the first 50 Game Objects.\n             * @param property The property to test on each Game Object in the Container.\n             * @param value If property is set then the `property` must strictly equal this value to be included in the results.\n             * @param startIndex An optional start index to search from. Default 0.\n             * @param endIndex An optional end index to search up to (but not included) Default Container.length.",
        "* Returns the total number of Game Objects in this Container that have a property\n             * matching the given value.\n             * \n             * For example: `count('visible', true)` would count all the elements that have their visible property set.\n             * \n             * You can optionally limit the operation to the `startIndex` - `endIndex` range.\n             * @param property The property to check.\n             * @param value The value to check.\n             * @param startIndex An optional start index to search from. Default 0.\n             * @param endIndex An optional end index to search up to (but not included) Default Container.length.",
        "* Swaps the position of two Game Objects in this Container.\n             * Both Game Objects must belong to this Container.\n             * @param child1 The first Game Object to swap.\n             * @param child2 The second Game Object to swap.",
        "* Moves a Game Object to a new position within this Container.\n             * \n             * The Game Object must already be a child of this Container.\n             * \n             * The Game Object is removed from its old position and inserted into the new one.\n             * Therefore the Container size does not change. Other children will change position accordingly.\n             * @param child The Game Object to move.\n             * @param index The new position of the Game Object in this Container.",
        "* Removes the given Game Object, or array of Game Objects, from this Container.\n             * \n             * The Game Objects must already be children of this Container.\n             * \n             * You can also optionally call `destroy` on each Game Object that is removed from the Container.\n             * @param child The Game Object, or array of Game Objects, to be removed from the Container.\n             * @param destroyChild Optionally call `destroy` on each child successfully removed from this Container. Default false.",
        "* Removes the Game Object at the given position in this Container.\n             * \n             * You can also optionally call `destroy` on the Game Object, if one is found.\n             * @param index The index of the Game Object to be removed.\n             * @param destroyChild Optionally call `destroy` on the Game Object if successfully removed from this Container. Default false.",
        "* Removes the Game Objects between the given positions in this Container.\n             * \n             * You can also optionally call `destroy` on each Game Object that is removed from the Container.\n             * @param startIndex An optional start index to search from. Default 0.\n             * @param endIndex An optional end index to search up to (but not included) Default Container.length.\n             * @param destroyChild Optionally call `destroy` on each Game Object successfully removed from this Container. Default false.",
        "* Removes all Game Objects from this Container.\n             * \n             * You can also optionally call `destroy` on each Game Object that is removed from the Container.\n             * @param destroyChild Optionally call `destroy` on each Game Object successfully removed from this Container. Default false.",
        "* Brings the given Game Object to the top of this Container.\n             * This will cause it to render on-top of any other objects in the Container.\n             * @param child The Game Object to bring to the top of the Container.",
        "* Sends the given Game Object to the bottom of this Container.\n             * This will cause it to render below any other objects in the Container.\n             * @param child The Game Object to send to the bottom of the Container.",
        "* Moves the given Game Object up one place in this Container, unless it's already at the top.\n             * @param child The Game Object to be moved in the Container.",
        "* Moves the given Game Object down one place in this Container, unless it's already at the bottom.\n             * @param child The Game Object to be moved in the Container.",
        "* Reverses the order of all Game Objects in this Container.",
        "* Shuffles the all Game Objects in this Container using the Fisher-Yates implementation.",
        "* Replaces a Game Object in this Container with the new Game Object.\n             * The new Game Object cannot already be a child of this Container.\n             * @param oldChild The Game Object in this Container that will be replaced.\n             * @param newChild The Game Object to be added to this Container.\n             * @param destroyChild Optionally call `destroy` on the Game Object if successfully removed from this Container. Default false.",
        "* Returns `true` if the given Game Object is a direct child of this Container.\n             * \n             * This check does not scan nested Containers.\n             * @param child The Game Object to check for within this Container.",
        "* Sets the property to the given value on all Game Objects in this Container.\n             * \n             * Optionally you can specify a start and end index. For example if this Container had 100 Game Objects,\n             * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\n             * the first 50 Game Objects.\n             * @param property The property that must exist on the Game Object.\n             * @param value The value to get the property to.\n             * @param startIndex An optional start index to search from. Default 0.\n             * @param endIndex An optional end index to search up to (but not included) Default Container.length.",
        "* Passes all Game Objects in this Container to the given callback.\n             * \n             * A copy of the Container is made before passing each entry to your callback.\n             * This protects against the callback itself modifying the Container.\n             * \n             * If you know for sure that the callback will not change the size of this Container\n             * then you can use the more performant `Container.iterate` method instead.\n             * @param callback The function to call.\n             * @param context Value to use as `this` when executing callback.\n             * @param args Additional arguments that will be passed to the callback, after the child.",
        "* Passes all Game Objects in this Container to the given callback.\n             * \n             * Only use this method when you absolutely know that the Container will not be modified during\n             * the iteration, i.e. by removing or adding to its contents.\n             * @param callback The function to call.\n             * @param context Value to use as `this` when executing callback.\n             * @param args Additional arguments that will be passed to the callback, after the child.",
        "* The number of Game Objects inside this Container.",
        "* Returns the first Game Object within the Container, or `null` if it is empty.\n             * \n             * You can move the cursor by calling `Container.next` and `Container.previous`.",
        "* Returns the last Game Object within the Container, or `null` if it is empty.\n             * \n             * You can move the cursor by calling `Container.next` and `Container.previous`.",
        "* Returns the next Game Object within the Container, or `null` if it is empty.\n             * \n             * You can move the cursor by calling `Container.next` and `Container.previous`.",
        "* Returns the previous Game Object within the Container, or `null` if it is empty.\n             * \n             * You can move the cursor by calling `Container.next` and `Container.previous`.",
        "* Internal destroy handler, called as part of the destroy process.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The Display List plugin.\n         * \n         * Display Lists belong to a Scene and maintain the list of Game Objects to render every frame.\n         * \n         * Some of these Game Objects may also be part of the Scene's [Update List]{@link Phaser.GameObjects.UpdateList}, for updating.",
        "* \n             * @param scene The Scene that this Display List belongs to.",
        "* The flag the determines whether Game Objects should be sorted when `depthSort()` is called.",
        "* The Scene that this Display List belongs to.",
        "* The Scene's Systems.",
        "* Force a sort of the display list on the next call to depthSort.",
        "* Immediately sorts the display list if the flag is set.",
        "* Compare the depth of two Game Objects.\n             * @param childA The first Game Object.\n             * @param childB The second Game Object.",
        "* Returns an array which contains all objects currently on the Display List.\n             * This is a reference to the main list array, not a copy of it, so be careful not to modify it.",
        "* The Game Object Destroy Event.\n             * \n             * This event is dispatched when a Game Object instance is being destroyed.\n             * \n             * Listen for it on a Game Object instance using `GameObject.on('destroy', listener)`.",
        "* An Extern Game Object is a special type of Game Object that allows you to pass\n         * rendering off to a 3rd party.\n         * \n         * When you create an Extern and place it in the display list of a Scene, the renderer will\n         * process the list as usual. When it finds an Extern it will flush the current batch,\n         * clear down the pipeline and prepare a transform matrix which your render function can\n         * take advantage of, if required.\n         * \n         * The WebGL context is then left is a 'clean' state, ready for you to bind your own shaders,\n         * or draw to it, whatever you wish to do. Once you've finished, you should free-up any\n         * of your resources. The Extern will then rebind the Phaser pipeline and carry on \n         * rendering the display list.\n         * \n         * Although this object has lots of properties such as Alpha, Blend Mode and Tint, none of\n         * them are used during rendering unless you take advantage of them in your own render code.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n             * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n             * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n             * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n             * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* Sets the texture and frame this Game Object will use to render with.\n             * \n             * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n             * @param key The key of the texture to be used, as stored in the Texture Manager.\n             * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n             * \n             * The Frame has to belong to the current Texture being used.\n             * \n             * It can be either a string or an index.\n             * \n             * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n             * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n             * @param frame The name or index of the frame within the Texture.\n             * @param updateSize Should this call adjust the size of the Game Object? Default true.\n             * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n             * \n             * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n             * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n             * \n             * The tint works by taking the pixel color values from the Game Objects texture, and then\n             * multiplying it by the color value of the tint. You can provide either one color value,\n             * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n             * per corner. The colors are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n             * \n             * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n             * with those in the tint. You can use this for effects such as making a player flash 'white'\n             * if hit by something. You can provide either one color value, in which case the whole\n             * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n             * are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The base class that all Game Objects extend.\n         * You don't create GameObjects directly and they cannot be added to the display list.\n         * Instead, use them as the base for your own custom classes.",
        "* \n             * @param scene The Scene to which this Game Object belongs.\n             * @param type A textual representation of the type of Game Object, i.e. `sprite`.",
        "* The Scene to which this Game Object belongs.\n             * Game Objects can only belong to one Scene.",
        "* A textual representation of this Game Object, i.e. `sprite`.\n             * Used internally by Phaser but is available for your own custom classes to populate.",
        "* The current state of this Game Object.\n             * \n             * Phaser itself will never modify this value, although plugins may do so.\n             * \n             * Use this property to track the state of a Game Object during its lifetime. For example, it could move from\n             * a state of 'moving', to 'attacking', to 'dead'. The state value should be an integer (ideally mapped to a constant\n             * in your game code), or a string. These are recommended to keep it light and simple, with fast comparisons.\n             * If you need to store complex data about your Game Object, look at using the Data Component instead.",
        "* The parent Container of this Game Object, if it has one.",
        "* The name of this Game Object.\n             * Empty by default and never populated by Phaser, this is left for developers to use.",
        "* The active state of this Game Object.\n             * A Game Object with an active state of `true` is processed by the Scenes UpdateList, if added to it.\n             * An active object is one which is having its logic and internal systems updated.",
        "* The Tab Index of the Game Object.\n             * Reserved for future use by plugins and the Input Manager.",
        "* A Data Manager.\n             * It allows you to store, query and get key/value paired information specific to this Game Object.\n             * `null` by default. Automatically created if you use `getData` or `setData` or `setDataEnabled`.",
        "* The flags that are compared against `RENDER_MASK` to determine if this Game Object will render or not.\n             * The bits are 0001 | 0010 | 0100 | 1000 set by the components Visible, Alpha, Transform and Texture respectively.\n             * If those components are not used by your custom class then you can use this bitmask as you wish.",
        "* A bitmask that controls if this Game Object is drawn by a Camera or not.\n             * Not usually set directly, instead call `Camera.ignore`, however you can\n             * set this property directly using the Camera.id property:",
        "* If this Game Object is enabled for input then this property will contain an InteractiveObject instance.\n             * Not usually set directly. Instead call `GameObject.setInteractive()`.",
        "* If this Game Object is enabled for physics then this property will contain a reference to a Physics Body.",
        "* This Game Object will ignore all calls made to its destroy method if this flag is set to `true`.\n             * This includes calls that may come from a Group, Container or the Scene itself.\n             * While it allows you to persist a Game Object across Scenes, please understand you are entirely\n             * responsible for managing references to and from this Game Object.",
        "* Sets the `active` property of this Game Object and returns this Game Object for further chaining.\n             * A Game Object with its `active` property set to `true` will be updated by the Scenes UpdateList.\n             * @param value True if this Game Object should be set as active, false if not.",
        "* Sets the `name` property of this Game Object and returns this Game Object for further chaining.\n             * The `name` property is not populated by Phaser and is presented for your own use.\n             * @param value The name to be given to this Game Object.",
        "* Sets the current state of this Game Object.\n             * \n             * Phaser itself will never modify the State of a Game Object, although plugins may do so.\n             * \n             * For example, a Game Object could change from a state of 'moving', to 'attacking', to 'dead'.\n             * The state value should typically be an integer (ideally mapped to a constant\n             * in your game code), but could also be a string. It is recommended to keep it light and simple.\n             * If you need to store complex data about your Game Object, look at using the Data Component instead.\n             * @param value The state of the Game Object.",
        "* Adds a Data Manager component to this Game Object.",
        "* Allows you to store a key value pair within this Game Objects Data Manager.\n             * \n             * If the Game Object has not been enabled for data (via `setDataEnabled`) then it will be enabled\n             * before setting the value.\n             * \n             * If the key doesn't already exist in the Data Manager then it is created.\n             * \n             * ```javascript\n             * sprite.setData('name', 'Red Gem Stone');\n             * ```\n             * \n             * You can also pass in an object of key value pairs as the first argument:\n             * \n             * ```javascript\n             * sprite.setData({ name: 'Red Gem Stone', level: 2, owner: 'Link', gold: 50 });\n             * ```\n             * \n             * To get a value back again you can call `getData`:\n             * \n             * ```javascript\n             * sprite.getData('gold');\n             * ```\n             * \n             * Or you can access the value directly via the `values` property, where it works like any other variable:\n             * \n             * ```javascript\n             * sprite.data.values.gold += 50;\n             * ```\n             * \n             * When the value is first set, a `setdata` event is emitted from this Game Object.\n             * \n             * If the key already exists, a `changedata` event is emitted instead, along an event named after the key.\n             * For example, if you updated an existing key called `PlayerLives` then it would emit the event `changedata-PlayerLives`.\n             * These events will be emitted regardless if you use this method to set the value, or the direct `values` setter.\n             * \n             * Please note that the data keys are case-sensitive and must be valid JavaScript Object property strings.\n             * This means the keys `gold` and `Gold` are treated as two unique values within the Data Manager.\n             * @param key The key to set the value for. Or an object or key value pairs. If an object the `data` argument is ignored.\n             * @param data The value to set for the given key. If an object is provided as the key this argument is ignored.",
        "* Retrieves the value for the given key in this Game Objects Data Manager, or undefined if it doesn't exist.\n             * \n             * You can also access values via the `values` object. For example, if you had a key called `gold` you can do either:\n             * \n             * ```javascript\n             * sprite.getData('gold');\n             * ```\n             * \n             * Or access the value directly:\n             * \n             * ```javascript\n             * sprite.data.values.gold;\n             * ```\n             * \n             * You can also pass in an array of keys, in which case an array of values will be returned:\n             * \n             * ```javascript\n             * sprite.getData([ 'gold', 'armor', 'health' ]);\n             * ```\n             * \n             * This approach is useful for destructuring arrays in ES6.\n             * @param key The key of the value to retrieve, or an array of keys.",
        "* Pass this Game Object to the Input Manager to enable it for Input.\n             * \n             * Input works by using hit areas, these are nearly always geometric shapes, such as rectangles or circles, that act as the hit area\n             * for the Game Object. However, you can provide your own hit area shape and callback, should you wish to handle some more advanced\n             * input detection.\n             * \n             * If no arguments are provided it will try and create a rectangle hit area based on the texture frame the Game Object is using. If\n             * this isn't a texture-bound object, such as a Graphics or BitmapText object, this will fail, and you'll need to provide a specific\n             * shape for it to use.\n             * \n             * You can also provide an Input Configuration Object as the only argument to this method.\n             * @param shape Either an input configuration object, or a geometric shape that defines the hit area for the Game Object. If not specified a Rectangle will be used.\n             * @param callback A callback to be invoked when the Game Object is interacted with. If you provide a shape you must also provide a callback.\n             * @param dropZone Should this Game Object be treated as a drop zone target? Default false.",
        "* If this Game Object has previously been enabled for input, this will disable it.\n             * \n             * An object that is disabled for input stops processing or being considered for\n             * input events, but can be turned back on again at any time by simply calling\n             * `setInteractive()` with no arguments provided.\n             * \n             * If want to completely remove interaction from this Game Object then use `removeInteractive` instead.",
        "* If this Game Object has previously been enabled for input, this will queue it\n             * for removal, causing it to no longer be interactive. The removal happens on\n             * the next game step, it is not immediate.\n             * \n             * The Interactive Object that was assigned to this Game Object will be destroyed,\n             * removed from the Input Manager and cleared from this Game Object.\n             * \n             * If you wish to re-enable this Game Object at a later date you will need to\n             * re-create its InteractiveObject by calling `setInteractive` again.\n             * \n             * If you wish to only temporarily stop an object from receiving input then use\n             * `disableInteractive` instead, as that toggles the interactive state, where-as\n             * this erases it completely.\n             * \n             * If you wish to resize a hit area, don't remove and then set it as being\n             * interactive. Instead, access the hitarea object directly and resize the shape\n             * being used. I.e.: `sprite.input.hitArea.setSize(width, height)` (assuming the\n             * shape is a Rectangle, which it is by default.)",
        "* To be overridden by custom GameObjects. Allows base objects to be used in a Pool.\n             * @param args args",
        "* Returns a JSON representation of the Game Object.",
        "* Compares the renderMask with the renderFlags to see if this Game Object will render or not.\n             * Also checks the Game Object against the given Cameras exclusion list.\n             * @param camera The Camera to check against this Game Object.",
        "* Returns an array containing the display list index of either this Game Object, or if it has one,\n             * its parent Container. It then iterates up through all of the parent containers until it hits the\n             * root of the display list (which is index 0 in the returned array).\n             * \n             * Used internally by the InputPlugin but also useful if you wish to find out the display depth of\n             * this Game Object and all of its ancestors.",
        "* Destroys this Game Object removing it from the Display List and Update List and\n             * severing all ties to parent resources.\n             * \n             * Also removes itself from the Input Manager and Physics Manager if previously enabled.\n             * \n             * Use this to remove a Game Object from your game if you don't ever plan to use it again.\n             * As long as no reference to it exists within your own code it should become free for\n             * garbage collection by the browser.\n             * \n             * If you just want to temporarily disable an object then look at using the\n             * Game Object Pool instead of destroying it, as destroyed objects cannot be resurrected.\n             * @param fromScene Is this Game Object being destroyed as the result of a Scene shutdown? Default false.",
        "* The bitmask that `GameObject.renderFlags` is compared against to determine if the Game Object will render or not.",
        "* The Game Object Creator is a Scene plugin that allows you to quickly create many common\n         * types of Game Objects and return them. Unlike the Game Object Factory, they are not automatically\n         * added to the Scene.\n         * \n         * Game Objects directly register themselves with the Creator and inject their own creation\n         * methods into the class.",
        "* \n             * @param scene The Scene to which this Game Object Factory belongs.",
        "* Creates a new Dynamic Bitmap Text Game Object and returns it.\n             * \n             * Note: This method will only be available if the Dynamic Bitmap Text Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* Creates a new Bitmap Text Game Object and returns it.\n             * \n             * Note: This method will only be available if the Bitmap Text Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* Creates a new Blitter Game Object and returns it.\n             * \n             * Note: This method will only be available if the Blitter Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* Creates a new Container Game Object and returns it.\n             * \n             * Note: This method will only be available if the Container Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* The Scene to which this Game Object Creator belongs.",
        "* A reference to the Scene.Systems.",
        "* A reference to the Scene Display List.",
        "* A reference to the Scene Update List.",
        "* Creates a new Graphics Game Object and returns it.\n             * \n             * Note: This method will only be available if the Graphics Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* Creates a new Group Game Object and returns it.\n             * \n             * Note: This method will only be available if the Group Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.",
        "* Creates a new Image Game Object and returns it.\n             * \n             * Note: This method will only be available if the Image Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* Creates a new Mesh Game Object and returns it.\n             * \n             * Note: This method will only be available if the Mesh Game Object and WebGL support have been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* Creates a new Particle Emitter Manager Game Object and returns it.\n             * \n             * Note: This method will only be available if the Particles Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* Creates a new Quad Game Object and returns it.\n             * \n             * Note: This method will only be available if the Quad Game Object and WebGL support have been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* Creates a new Render Texture Game Object and returns it.\n             * \n             * Note: This method will only be available if the Render Texture Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* Creates a new Sprite Game Object and returns it.\n             * \n             * Note: This method will only be available if the Sprite Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* Creates a new Text Game Object and returns it.\n             * \n             * Note: This method will only be available if the Text Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* Creates a new TileSprite Game Object and returns it.\n             * \n             * Note: This method will only be available if the TileSprite Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.\n             * @param addToScene Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.",
        "* Creates a new Zone Game Object and returns it.\n             * \n             * Note: This method will only be available if the Zone Game Object has been built into Phaser.\n             * @param config The configuration object this Game Object will use to create itself.",
        "* Creates a Tilemap from the given key or data, or creates a blank Tilemap if no key/data provided.\n             * When loading from CSV or a 2D array, you should specify the tileWidth & tileHeight. When parsing\n             * from a map from Tiled, the tileWidth, tileHeight, width & height will be pulled from the map\n             * data. For an empty map, you should specify tileWidth, tileHeight, width & height.\n             * @param config The config options for the Tilemap.",
        "* Creates a new Tween object and returns it.\n             * \n             * Note: This method will only be available if Tweens have been built into Phaser.\n             * @param config The Tween configuration.",
        "* The Game Object Factory is a Scene plugin that allows you to quickly create many common\n         * types of Game Objects and have them automatically registered with the Scene.\n         * \n         * Game Objects directly register themselves with the Factory and inject their own creation\n         * methods into the class.",
        "* \n             * @param scene The Scene to which this Game Object Factory belongs.",
        "* Creates a new Path Object.\n             * @param x The horizontal position of this Path.\n             * @param y The vertical position of this Path.",
        "* Creates a new Dynamic Bitmap Text Game Object and adds it to the Scene.\n             * \n             * BitmapText objects work by taking a texture file and an XML or JSON file that describes the font structure.\n             * \n             * During rendering for each letter of the text is rendered to the display, proportionally spaced out and aligned to\n             * match the font structure.\n             * \n             * Dynamic Bitmap Text objects are different from Static Bitmap Text in that they invoke a callback for each\n             * letter being rendered during the render pass. This callback allows you to manipulate the properties of\n             * each letter being rendered, such as its position, scale or tint, allowing you to create interesting effects\n             * like jiggling text, which can't be done with Static text. This means that Dynamic Text takes more processing\n             * time, so only use them if you require the callback ability they have.\n             * \n             * BitmapText objects are less flexible than Text objects, in that they have less features such as shadows, fills and the ability\n             * to use Web Fonts, however you trade this flexibility for rendering speed. You can also create visually compelling BitmapTexts by\n             * processing the font texture in an image editor, applying fills and any other effects required.\n             * \n             * To create multi-line text insert \\r, \\n or \\r\\n escape codes into the text string.\n             * \n             * To create a BitmapText data files you need a 3rd party app such as:\n             * \n             * BMFont (Windows, free): http://www.angelcode.com/products/bmfont/\n             * Glyph Designer (OS X, commercial): http://www.71squared.com/en/glyphdesigner\n             * Littera (Web-based, free): http://kvazars.com/littera/\n             * \n             * For most use cases it is recommended to use XML. If you wish to use JSON, the formatting should be equal to the result of\n             * converting a valid XML file through the popular X2JS library. An online tool for conversion can be found here: http://codebeautify.org/xmltojson\n             * \n             * Note: This method will only be available if the Dynamic Bitmap Text Game Object has been built into Phaser.\n             * @param x The x position of the Game Object.\n             * @param y The y position of the Game Object.\n             * @param font The key of the font to use from the BitmapFont cache.\n             * @param text The string, or array of strings, to be set as the content of this Bitmap Text.\n             * @param size The font size to set.",
        "* Creates a new Bitmap Text Game Object and adds it to the Scene.\n             * \n             * BitmapText objects work by taking a texture file and an XML or JSON file that describes the font structure.\n             * \n             * During rendering for each letter of the text is rendered to the display, proportionally spaced out and aligned to\n             * match the font structure.\n             * \n             * BitmapText objects are less flexible than Text objects, in that they have less features such as shadows, fills and the ability\n             * to use Web Fonts, however you trade this flexibility for rendering speed. You can also create visually compelling BitmapTexts by\n             * processing the font texture in an image editor, applying fills and any other effects required.\n             * \n             * To create multi-line text insert \\r, \\n or \\r\\n escape codes into the text string.\n             * \n             * To create a BitmapText data files you need a 3rd party app such as:\n             * \n             * BMFont (Windows, free): http://www.angelcode.com/products/bmfont/\n             * Glyph Designer (OS X, commercial): http://www.71squared.com/en/glyphdesigner\n             * Littera (Web-based, free): http://kvazars.com/littera/\n             * \n             * For most use cases it is recommended to use XML. If you wish to use JSON, the formatting should be equal to the result of\n             * converting a valid XML file through the popular X2JS library. An online tool for conversion can be found here: http://codebeautify.org/xmltojson\n             * \n             * Note: This method will only be available if the Bitmap Text Game Object has been built into Phaser.\n             * @param x The x position of the Game Object.\n             * @param y The y position of the Game Object.\n             * @param font The key of the font to use from the BitmapFont cache.\n             * @param text The string, or array of strings, to be set as the content of this Bitmap Text.\n             * @param size The font size to set.\n             * @param align The alignment of the text in a multi-line BitmapText object. Default 0.",
        "* Creates a new Blitter Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Blitter Game Object has been built into Phaser.\n             * @param x The x position of the Game Object.\n             * @param y The y position of the Game Object.\n             * @param key The key of the Texture the Blitter object will use.\n             * @param frame The default Frame children of the Blitter will use.",
        "* Creates a new Container Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Container Game Object has been built into Phaser.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param children An optional array of Game Objects to add to this Container.",
        "* Creates a new Extern Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Extern Game Object has been built into Phaser.",
        "* The Scene to which this Game Object Factory belongs.",
        "* A reference to the Scene.Systems.",
        "* A reference to the Scene Display List.",
        "* A reference to the Scene Update List.",
        "* Adds an existing Game Object to this Scene.\n             * \n             * If the Game Object renders, it will be added to the Display List.\n             * If it has a `preUpdate` method, it will be added to the Update List.\n             * @param child The child to be added to this Scene.",
        "* Creates a new Graphics Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Graphics Game Object has been built into Phaser.\n             * @param config The Graphics configuration.",
        "* Creates a new Group Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Group Game Object has been built into Phaser.\n             * @param children Game Objects to add to this Group; or the `config` argument.\n             * @param config A Group Configuration object.",
        "* Creates a new Image Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Image Game Object has been built into Phaser.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Creates a new Mesh Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Mesh Game Object and WebGL support have been built into Phaser.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param vertices An array containing the vertices data for this Mesh.\n             * @param uv An array containing the uv data for this Mesh.\n             * @param colors An array containing the color data for this Mesh.\n             * @param alphas An array containing the alpha data for this Mesh.\n             * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Creates a new Particle Emitter Manager Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Particles Game Object has been built into Phaser.\n             * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frame An optional frame from the Texture this Game Object is rendering with.\n             * @param emitters Configuration settings for one or more emitters to create.",
        "* Creates a new PathFollower Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the PathFollower Game Object has been built into Phaser.\n             * @param path The Path this PathFollower is connected to.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Creates a new Quad Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Quad Game Object and WebGL support have been built into Phaser.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Creates a new Render Texture Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Render Texture Game Object has been built into Phaser.\n             * \n             * A Render Texture is a special texture that allows any number of Game Objects to be drawn to it. You can take many complex objects and\n             * draw them all to this one texture, which can they be used as the texture for other Game Object's. It's a way to generate dynamic\n             * textures at run-time that are WebGL friendly and don't invoke expensive GPU uploads.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param width The width of the Render Texture. Default 32.\n             * @param height The height of the Render Texture. Default 32.",
        "* Creates a new Arc Shape Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Arc Game Object has been built into Phaser.\n             * \n             * The Arc Shape is a Game Object that can be added to a Scene, Group or Container. You can\n             * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n             * it for input or physics. It provides a quick and easy way for you to render this shape in your\n             * game without using a texture, while still taking advantage of being fully batched in WebGL.\n             * \n             * This shape supports both fill and stroke colors.\n             * \n             * When it renders it displays an arc shape. You can control the start and end angles of the arc,\n             * as well as if the angles are winding clockwise or anti-clockwise. With the default settings\n             * it renders as a complete circle. By changing the angles you can create other arc shapes,\n             * such as half-circles.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param radius The radius of the arc. Default 128.\n             * @param startAngle The start angle of the arc, in degrees. Default 0.\n             * @param endAngle The end angle of the arc, in degrees. Default 360.\n             * @param anticlockwise The winding order of the start and end angles. Default false.\n             * @param fillColor The color the arc will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the arc will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Creates a new Circle Shape Game Object and adds it to the Scene.\n             * \n             * A Circle is an Arc with no defined start and end angle, making it render as a complete circle.\n             * \n             * Note: This method will only be available if the Arc Game Object has been built into Phaser.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param radius The radius of the circle. Default 128.\n             * @param fillColor The color the circle will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the circle will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Creates a new Curve Shape Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Curve Game Object has been built into Phaser.\n             * \n             * The Curve Shape is a Game Object that can be added to a Scene, Group or Container. You can\n             * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n             * it for input or physics. It provides a quick and easy way for you to render this shape in your\n             * game without using a texture, while still taking advantage of being fully batched in WebGL.\n             * \n             * This shape supports both fill and stroke colors.\n             * \n             * To render a Curve Shape you must first create a `Phaser.Curves.Curve` object, then pass it to\n             * the Curve Shape in the constructor.\n             * \n             * The Curve shape also has a `smoothness` property and corresponding `setSmoothness` method.\n             * This allows you to control how smooth the shape renders in WebGL, by controlling the number of iterations\n             * that take place during construction. Increase and decrease the default value for smoother, or more\n             * jagged, shapes.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param curve The Curve object to use to create the Shape.\n             * @param fillColor The color the curve will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the curve will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Creates a new Ellipse Shape Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Ellipse Game Object has been built into Phaser.\n             * \n             * The Ellipse Shape is a Game Object that can be added to a Scene, Group or Container. You can\n             * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n             * it for input or physics. It provides a quick and easy way for you to render this shape in your\n             * game without using a texture, while still taking advantage of being fully batched in WebGL.\n             * \n             * This shape supports both fill and stroke colors.\n             * \n             * When it renders it displays an ellipse shape. You can control the width and height of the ellipse.\n             * If the width and height match it will render as a circle. If the width is less than the height,\n             * it will look more like an egg shape.\n             * \n             * The Ellipse shape also has a `smoothness` property and corresponding `setSmoothness` method.\n             * This allows you to control how smooth the shape renders in WebGL, by controlling the number of iterations\n             * that take place during construction. Increase and decrease the default value for smoother, or more\n             * jagged, shapes.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param width The width of the ellipse. An ellipse with equal width and height renders as a circle. Default 128.\n             * @param height The height of the ellipse. An ellipse with equal width and height renders as a circle. Default 128.\n             * @param fillColor The color the ellipse will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the ellipse will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Creates a new Grid Shape Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Grid Game Object has been built into Phaser.\n             * \n             * The Grid Shape is a Game Object that can be added to a Scene, Group or Container. You can\n             * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n             * it for input or physics. It provides a quick and easy way for you to render this shape in your\n             * game without using a texture, while still taking advantage of being fully batched in WebGL.\n             * \n             * This shape supports only fill colors and cannot be stroked.\n             * \n             * A Grid Shape allows you to display a grid in your game, where you can control the size of the\n             * grid as well as the width and height of the grid cells. You can set a fill color for each grid\n             * cell as well as an alternate fill color. When the alternate fill color is set then the grid\n             * cells will alternate the fill colors as they render, creating a chess-board effect. You can\n             * also optionally have an outline fill color. If set, this draws lines between the grid cells\n             * in the given color. If you specify an outline color with an alpha of zero, then it will draw\n             * the cells spaced out, but without the lines between them.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param width The width of the grid. Default 128.\n             * @param height The height of the grid. Default 128.\n             * @param cellWidth The width of one cell in the grid. Default 32.\n             * @param cellHeight The height of one cell in the grid. Default 32.\n             * @param fillColor The color the grid cells will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\n             * @param outlineFillColor The color of the lines between the grid cells.\n             * @param outlineFillAlpha The alpha of the lines between the grid cells.",
        "* Creates a new IsoBox Shape Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the IsoBox Game Object has been built into Phaser.\n             * \n             * The IsoBox Shape is a Game Object that can be added to a Scene, Group or Container. You can\n             * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n             * it for input or physics. It provides a quick and easy way for you to render this shape in your\n             * game without using a texture, while still taking advantage of being fully batched in WebGL.\n             * \n             * This shape supports only fill colors and cannot be stroked.\n             * \n             * An IsoBox is an 'isometric' rectangle. Each face of it has a different fill color. You can set\n             * the color of the top, left and right faces of the rectangle respectively. You can also choose\n             * which of the faces are rendered via the `showTop`, `showLeft` and `showRight` properties.\n             * \n             * You cannot view an IsoBox from under-neath, however you can change the 'angle' by setting\n             * the `projection` property.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param size The width of the iso box in pixels. The left and right faces will be exactly half this value. Default 48.\n             * @param height The height of the iso box. The left and right faces will be this tall. The overall height of the isobox will be this value plus half the `size` value. Default 32.\n             * @param fillTop The fill color of the top face of the iso box. Default 0xeeeeee.\n             * @param fillLeft The fill color of the left face of the iso box. Default 0x999999.\n             * @param fillRight The fill color of the right face of the iso box. Default 0xcccccc.",
        "* Creates a new IsoTriangle Shape Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the IsoTriangle Game Object has been built into Phaser.\n             * \n             * The IsoTriangle Shape is a Game Object that can be added to a Scene, Group or Container. You can\n             * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n             * it for input or physics. It provides a quick and easy way for you to render this shape in your\n             * game without using a texture, while still taking advantage of being fully batched in WebGL.\n             * \n             * This shape supports only fill colors and cannot be stroked.\n             * \n             * An IsoTriangle is an 'isometric' triangle. Think of it like a pyramid. Each face has a different\n             * fill color. You can set the color of the top, left and right faces of the triangle respectively\n             * You can also choose which of the faces are rendered via the `showTop`, `showLeft` and `showRight` properties.\n             * \n             * You cannot view an IsoTriangle from under-neath, however you can change the 'angle' by setting\n             * the `projection` property. The `reversed` property controls if the IsoTriangle is rendered upside\n             * down or not.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param size The width of the iso triangle in pixels. The left and right faces will be exactly half this value. Default 48.\n             * @param height The height of the iso triangle. The left and right faces will be this tall. The overall height of the iso triangle will be this value plus half the `size` value. Default 32.\n             * @param reversed Is the iso triangle upside down? Default false.\n             * @param fillTop The fill color of the top face of the iso triangle. Default 0xeeeeee.\n             * @param fillLeft The fill color of the left face of the iso triangle. Default 0x999999.\n             * @param fillRight The fill color of the right face of the iso triangle. Default 0xcccccc.",
        "* Creates a new Line Shape Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Line Game Object has been built into Phaser.\n             * \n             * The Line Shape is a Game Object that can be added to a Scene, Group or Container. You can\n             * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n             * it for input or physics. It provides a quick and easy way for you to render this shape in your\n             * game without using a texture, while still taking advantage of being fully batched in WebGL.\n             * \n             * This shape supports only stroke colors and cannot be filled.\n             * \n             * A Line Shape allows you to draw a line between two points in your game. You can control the\n             * stroke color and thickness of the line. In WebGL only you can also specify a different\n             * thickness for the start and end of the line, allowing you to render lines that taper-off.\n             * \n             * If you need to draw multiple lines in a sequence you may wish to use the Polygon Shape instead.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param x1 The horizontal position of the start of the line. Default 0.\n             * @param y1 The vertical position of the start of the line. Default 0.\n             * @param x2 The horizontal position of the end of the line. Default 128.\n             * @param y2 The vertical position of the end of the line. Default 0.\n             * @param strokeColor The color the line will be drawn in, i.e. 0xff0000 for red.\n             * @param strokeAlpha The alpha the line will be drawn in. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Creates a new Polygon Shape Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Polygon Game Object has been built into Phaser.\n             * \n             * The Polygon Shape is a Game Object that can be added to a Scene, Group or Container. You can\n             * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n             * it for input or physics. It provides a quick and easy way for you to render this shape in your\n             * game without using a texture, while still taking advantage of being fully batched in WebGL.\n             * \n             * This shape supports both fill and stroke colors.\n             * \n             * The Polygon Shape is created by providing a list of points, which are then used to create an\n             * internal Polygon geometry object. The points can be set from a variety of formats:\n             * \n             * - An array of Point or Vector2 objects: `[new Phaser.Math.Vec2(x1, y1), ...]`\n             * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n             * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\n             * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\n             * \n             * By default the `x` and `y` coordinates of this Shape refer to the center of it. However, depending\n             * on the coordinates of the points provided, the final shape may be rendered offset from its origin.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param points The points that make up the polygon.\n             * @param fillColor The color the polygon will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the polygon will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Creates a new Rectangle Shape Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Rectangle Game Object has been built into Phaser.\n             * \n             * The Rectangle Shape is a Game Object that can be added to a Scene, Group or Container. You can\n             * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n             * it for input or physics. It provides a quick and easy way for you to render this shape in your\n             * game without using a texture, while still taking advantage of being fully batched in WebGL.\n             * \n             * This shape supports both fill and stroke colors.\n             * \n             * You can change the size of the rectangle by changing the `width` and `height` properties.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param width The width of the rectangle. Default 128.\n             * @param height The height of the rectangle. Default 128.\n             * @param fillColor The color the rectangle will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the rectangle will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Creates a new Star Shape Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Star Game Object has been built into Phaser.\n             * \n             * The Star Shape is a Game Object that can be added to a Scene, Group or Container. You can\n             * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n             * it for input or physics. It provides a quick and easy way for you to render this shape in your\n             * game without using a texture, while still taking advantage of being fully batched in WebGL.\n             * \n             * This shape supports both fill and stroke colors.\n             * \n             * As the name implies, the Star shape will display a star in your game. You can control several\n             * aspects of it including the number of points that constitute the star. The default is 5. If\n             * you change it to 4 it will render as a diamond. If you increase them, you'll get a more spiky\n             * star shape.\n             * \n             * You can also control the inner and outer radius, which is how 'long' each point of the star is.\n             * Modify these values to create more interesting shapes.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param points The number of points on the star. Default 5.\n             * @param innerRadius The inner radius of the star. Default 32.\n             * @param outerRadius The outer radius of the star. Default 64.\n             * @param fillColor The color the star will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the star will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Creates a new Triangle Shape Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Triangle Game Object has been built into Phaser.\n             * \n             * The Triangle Shape is a Game Object that can be added to a Scene, Group or Container. You can\n             * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n             * it for input or physics. It provides a quick and easy way for you to render this shape in your\n             * game without using a texture, while still taking advantage of being fully batched in WebGL.\n             * \n             * This shape supports both fill and stroke colors.\n             * \n             * The Triangle consists of 3 lines, joining up to form a triangular shape. You can control the\n             * position of each point of these lines. The triangle is always closed and cannot have an open\n             * face. If you require that, consider using a Polygon instead.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param x1 The horizontal position of the first point in the triangle. Default 0.\n             * @param y1 The vertical position of the first point in the triangle. Default 128.\n             * @param x2 The horizontal position of the second point in the triangle. Default 64.\n             * @param y2 The vertical position of the second point in the triangle. Default 0.\n             * @param x3 The horizontal position of the third point in the triangle. Default 128.\n             * @param y3 The vertical position of the third point in the triangle. Default 128.\n             * @param fillColor The color the triangle will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the triangle will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Creates a new Sprite Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Sprite Game Object has been built into Phaser.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Creates a new Text Game Object and adds it to the Scene.\n             * \n             * A Text Game Object.\n             * \n             * Text objects work by creating their own internal hidden Canvas and then renders text to it using\n             * the standard Canvas `fillText` API. It then creates a texture from this canvas which is rendered\n             * to your game during the render pass.\n             * \n             * Because it uses the Canvas API you can take advantage of all the features this offers, such as\n             * applying gradient fills to the text, or strokes, shadows and more. You can also use custom fonts\n             * loaded externally, such as Google or TypeKit Web fonts.\n             * \n             * You can only display fonts that are currently loaded and available to the browser: therefore fonts must\n             * be pre-loaded. Phaser does not do ths for you, so you will require the use of a 3rd party font loader,\n             * or have the fonts ready available in the CSS on the page in which your Phaser game resides.\n             * \n             * See {@link http://www.jordanm.co.uk/tinytype this compatibility table} for the available default fonts\n             * across mobile browsers.\n             * \n             * A note on performance: Every time the contents of a Text object changes, i.e. changing the text being\n             * displayed, or the style of the text, it needs to remake the Text canvas, and if on WebGL, re-upload the\n             * new texture to the GPU. This can be an expensive operation if used often, or with large quantities of\n             * Text objects in your game. If you run into performance issues you would be better off using Bitmap Text\n             * instead, as it benefits from batching and avoids expensive Canvas API calls.\n             * \n             * Note: This method will only be available if the Text Game Object has been built into Phaser.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param text The text this Text object will display.\n             * @param style The Text style configuration object.",
        "* Creates a new TileSprite Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the TileSprite Game Object has been built into Phaser.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param width The width of the Game Object. If zero it will use the size of the texture frame.\n             * @param height The height of the Game Object. If zero it will use the size of the texture frame.\n             * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Creates a new Zone Game Object and adds it to the Scene.\n             * \n             * Note: This method will only be available if the Zone Game Object has been built into Phaser.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param width The width of the Game Object.\n             * @param height The height of the Game Object.",
        "* Creates a Tilemap from the given key or data, or creates a blank Tilemap if no key/data provided.\n             * When loading from CSV or a 2D array, you should specify the tileWidth & tileHeight. When parsing\n             * from a map from Tiled, the tileWidth, tileHeight, width & height will be pulled from the map\n             * data. For an empty map, you should specify tileWidth, tileHeight, width & height.\n             * @param key The key in the Phaser cache that corresponds to the loaded tilemap data.\n             * @param tileWidth The width of a tile in pixels. Pass in `null` to leave as the\n             * default. Default 32.\n             * @param tileHeight The height of a tile in pixels. Pass in `null` to leave as the\n             * default. Default 32.\n             * @param width The width of the map in tiles. Pass in `null` to leave as the\n             * default. Default 10.\n             * @param height The height of the map in tiles. Pass in `null` to leave as the\n             * default. Default 10.\n             * @param data Instead of loading from the cache, you can also load directly from\n             * a 2D array of tile indexes. Pass in `null` for no data.\n             * @param insertNull Controls how empty tiles, tiles with an index of -1, in the\n             * map data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\n             * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\n             * the tile data doesn't need to change then setting this value to `true` will help with memory\n             * consumption. However if your map is small or you need to update the tiles dynamically, then leave\n             * the default value set. Default false.",
        "* Creates a new Tween object.\n             * \n             * Note: This method will only be available Tweens have been built into Phaser.\n             * @param config The Tween configuration.",
        "* A Graphics object is a way to draw primitive shapes to your game. Primitives include forms of geometry, such as\n         * Rectangles, Circles, and Polygons. They also include lines, arcs and curves. When you initially create a Graphics\n         * object it will be empty.\n         * \n         * To draw to it you must first specify a line style or fill style (or both), draw shapes using paths, and finally\n         * fill or stroke them. For example:\n         * \n         * ```javascript\n         * graphics.lineStyle(5, 0xFF00FF, 1.0);\n         * graphics.beginPath();\n         * graphics.moveTo(100, 100);\n         * graphics.lineTo(200, 200);\n         * graphics.closePath();\n         * graphics.strokePath();\n         * ```\n         * \n         * There are also many helpful methods that draw and fill/stroke common shapes for you.\n         * \n         * ```javascript\n         * graphics.lineStyle(5, 0xFF00FF, 1.0);\n         * graphics.fillStyle(0xFFFFFF, 1.0);\n         * graphics.fillRect(50, 50, 400, 200);\n         * graphics.strokeRect(50, 50, 400, 200);\n         * ```\n         * \n         * When a Graphics object is rendered it will render differently based on if the game is running under Canvas or WebGL.\n         * Under Canvas it will use the HTML Canvas context drawing operations to draw the path.\n         * Under WebGL the graphics data is decomposed into polygons. Both of these are expensive processes, especially with\n         * complex shapes.\n         * \n         * If your Graphics object doesn't change much (or at all) once you've drawn your shape to it, then you will help\n         * performance by calling {@link Phaser.GameObjects.Graphics#generateTexture}. This will 'bake' the Graphics object into\n         * a Texture, and return it. You can then use this Texture for Sprites or other display objects. If your Graphics object\n         * updates frequently then you should avoid doing this, as it will constantly generate new textures, which will consume\n         * memory.\n         * \n         * As you can tell, Graphics objects are a bit of a trade-off. While they are extremely useful, you need to be careful\n         * in their complexity and quantity of them in your game.",
        "* \n             * @param scene The Scene to which this Graphics object belongs.\n             * @param options Options that set the position and default style of this Graphics object.",
        "* The horizontal display origin of the Graphics.",
        "* The vertical display origin of the Graphics.",
        "* The array of commands used to render the Graphics.",
        "* The default fill color for shapes rendered by this Graphics object.",
        "* The default fill alpha for shapes rendered by this Graphics object.",
        "* The default stroke width for shapes rendered by this Graphics object.",
        "* The default stroke color for shapes rendered by this Graphics object.",
        "* The default stroke alpha for shapes rendered by this Graphics object.",
        "* Set the default style settings for this Graphics object.\n             * @param options The styles to set as defaults.",
        "* Set the current line style.\n             * @param lineWidth The stroke width.\n             * @param color The stroke color.\n             * @param alpha The stroke alpha. Default 1.",
        "* Set the current fill style.\n             * @param color The fill color.\n             * @param alpha The fill alpha. Default 1.",
        "* Sets a gradient fill style. This is a WebGL only feature.\n             * \n             * The gradient color values represent the 4 corners of an untransformed rectangle.\n             * The gradient is used to color all filled shapes and paths drawn after calling this method.\n             * If you wish to turn a gradient off, call `fillStyle` and provide a new single fill color.\n             * \n             * When filling a triangle only the first 3 color values provided are used for the 3 points of a triangle.\n             * \n             * This feature is best used only on rectangles and triangles. All other shapes will give strange results.\n             * \n             * Note that for objects such as arcs or ellipses, or anything which is made out of triangles, each triangle used\n             * will be filled with a gradient on its own. There is no ability to gradient fill a shape or path as a single\n             * entity at this time.\n             * @param topLeft The tint being applied to the top-left of the Game Object.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.\n             * @param alpha The fill alpha. Default 1.",
        "* Sets a gradient line style. This is a WebGL only feature.\n             * \n             * The gradient color values represent the 4 corners of an untransformed rectangle.\n             * The gradient is used to color all stroked shapes and paths drawn after calling this method.\n             * If you wish to turn a gradient off, call `lineStyle` and provide a new single line color.\n             * \n             * This feature is best used only on single lines. All other shapes will give strange results.\n             * \n             * Note that for objects such as arcs or ellipses, or anything which is made out of triangles, each triangle used\n             * will be filled with a gradient on its own. There is no ability to gradient stroke a shape or path as a single\n             * entity at this time.\n             * @param lineWidth The stroke width.\n             * @param topLeft The tint being applied to the top-left of the Game Object.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.\n             * @param alpha The fill alpha. Default 1.",
        "* Sets the texture frame this Graphics Object will use when drawing all shapes defined after calling this.\n             * \n             * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n             * \n             * Once set, all shapes will use this texture. Call this method with no arguments to clear it.\n             * \n             * The textures are not tiled. They are stretched to the dimensions of the shapes being rendered. For this reason,\n             * it works best with seamless / tileable textures.\n             * \n             * The mode argument controls how the textures are combined with the fill colors. The default value (0) will\n             * multiply the texture by the fill color. A value of 1 will use just the fill color, but the alpha data from the texture,\n             * and a value of 2 will use just the texture and no fill color at all.\n             * @param key The key of the texture to be used, as stored in the Texture Manager. Leave blank to clear a previously set texture.\n             * @param frame The name or index of the frame within the Texture.\n             * @param mode The texture tint mode. 0 is multiply, 1 is alpha only and 2 is texture only. Default 0.",
        "* Start a new shape path.",
        "* Close the current path.",
        "* Fill the current path.",
        "* Fill the current path.\n             * \n             * This is an alias for `Graphics.fillPath` and does the same thing.\n             * It was added to match the CanvasRenderingContext 2D API.",
        "* Stroke the current path.",
        "* Stroke the current path.\n             * \n             * This is an alias for `Graphics.strokePath` and does the same thing.\n             * It was added to match the CanvasRenderingContext 2D API.",
        "* Fill the given circle.\n             * @param circle The circle to fill.",
        "* Stroke the given circle.\n             * @param circle The circle to stroke.",
        "* Fill a circle with the given position and radius.\n             * @param x The x coordinate of the center of the circle.\n             * @param y The y coordinate of the center of the circle.\n             * @param radius The radius of the circle.",
        "* Stroke a circle with the given position and radius.\n             * @param x The x coordinate of the center of the circle.\n             * @param y The y coordinate of the center of the circle.\n             * @param radius The radius of the circle.",
        "* Fill the given rectangle.\n             * @param rect The rectangle to fill.",
        "* Stroke the given rectangle.\n             * @param rect The rectangle to stroke.",
        "* Fill a rectangle with the given position and size.\n             * @param x The x coordinate of the top-left of the rectangle.\n             * @param y The y coordinate of the top-left of the rectangle.\n             * @param width The width of the rectangle.\n             * @param height The height of the rectangle.",
        "* Stroke a rectangle with the given position and size.\n             * @param x The x coordinate of the top-left of the rectangle.\n             * @param y The y coordinate of the top-left of the rectangle.\n             * @param width The width of the rectangle.\n             * @param height The height of the rectangle.",
        "* Fill a rounded rectangle with the given position, size and radius.\n             * @param x The x coordinate of the top-left of the rectangle.\n             * @param y The y coordinate of the top-left of the rectangle.\n             * @param width The width of the rectangle.\n             * @param height The height of the rectangle.\n             * @param radius The corner radius; It can also be an object to specify different radii for corners. Default 20.",
        "* Stroke a rounded rectangle with the given position, size and radius.\n             * @param x The x coordinate of the top-left of the rectangle.\n             * @param y The y coordinate of the top-left of the rectangle.\n             * @param width The width of the rectangle.\n             * @param height The height of the rectangle.\n             * @param radius The corner radius; It can also be an object to specify different radii for corners. Default 20.",
        "* Fill the given point.\n             * \n             * Draws a square at the given position, 1 pixel in size by default.\n             * @param point The point to fill.\n             * @param size The size of the square to draw. Default 1.",
        "* Fill a point at the given position.\n             * \n             * Draws a square at the given position, 1 pixel in size by default.\n             * @param x The x coordinate of the point.\n             * @param y The y coordinate of the point.\n             * @param size The size of the square to draw. Default 1.",
        "* Fill the given triangle.\n             * @param triangle The triangle to fill.",
        "* Stroke the given triangle.\n             * @param triangle The triangle to stroke.",
        "* Fill a triangle with the given points.\n             * @param x0 The x coordinate of the first point.\n             * @param y0 The y coordinate of the first point.\n             * @param x1 The x coordinate of the second point.\n             * @param y1 The y coordinate of the second point.\n             * @param x2 The x coordinate of the third point.\n             * @param y2 The y coordinate of the third point.",
        "* Stroke a triangle with the given points.\n             * @param x0 The x coordinate of the first point.\n             * @param y0 The y coordinate of the first point.\n             * @param x1 The x coordinate of the second point.\n             * @param y1 The y coordinate of the second point.\n             * @param x2 The x coordinate of the third point.\n             * @param y2 The y coordinate of the third point.",
        "* Draw the given line.\n             * @param line The line to stroke.",
        "* Draw a line between the given points.\n             * @param x1 The x coordinate of the start point of the line.\n             * @param y1 The y coordinate of the start point of the line.\n             * @param x2 The x coordinate of the end point of the line.\n             * @param y2 The y coordinate of the end point of the line.",
        "* Draw a line from the current drawing position to the given position.\n             * \n             * Moves the current drawing position to the given position.\n             * @param x The x coordinate to draw the line to.\n             * @param y The y coordinate to draw the line to.",
        "* Move the current drawing position to the given position.\n             * @param x The x coordinate to move to.\n             * @param y The y coordinate to move to.",
        "* Draw a line from the current drawing position to the given position with a specific width and color.\n             * @param x The x coordinate to draw the line to.\n             * @param y The y coordinate to draw the line to.\n             * @param width The width of the stroke.\n             * @param rgb The color of the stroke.",
        "* Move the current drawing position to the given position and change the pen width and color.\n             * @param x The x coordinate to move to.\n             * @param y The y coordinate to move to.\n             * @param width The new stroke width.\n             * @param rgb The new stroke color.",
        "* Stroke the shape represented by the given array of points.\n             * \n             * Pass `true` to `autoClose` to close the shape automatically.\n             * @param points The points to stroke.\n             * @param autoClose When `true`, the shape is closed by joining the last point to the first point. Default false.\n             * @param endIndex The index of `points` to stop drawing at. Defaults to `points.length`.",
        "* Fill the shape represented by the given array of points.\n             * \n             * Pass `true` to `autoClose` to close the shape automatically.\n             * @param points The points to fill.\n             * @param autoClose Whether to automatically close the polygon. Default false.\n             * @param endIndex The index of `points` to stop at. Defaults to `points.length`.",
        "* Stroke the given ellipse.\n             * @param ellipse The ellipse to stroke.\n             * @param smoothness The number of points to draw the ellipse with. Default 32.",
        "* Stroke an ellipse with the given position and size.\n             * @param x The x coordinate of the center of the ellipse.\n             * @param y The y coordinate of the center of the ellipse.\n             * @param width The width of the ellipse.\n             * @param height The height of the ellipse.\n             * @param smoothness The number of points to draw the ellipse with. Default 32.",
        "* Fill the given ellipse.\n             * @param ellipse The ellipse to fill.\n             * @param smoothness The number of points to draw the ellipse with. Default 32.",
        "* Fill an ellipse with the given position and size.\n             * @param x The x coordinate of the center of the ellipse.\n             * @param y The y coordinate of the center of the ellipse.\n             * @param width The width of the ellipse.\n             * @param height The height of the ellipse.\n             * @param smoothness The number of points to draw the ellipse with. Default 32.",
        "* Draw an arc.\n             * \n             * This method can be used to create circles, or parts of circles.\n             * \n             * Make sure you call `beginPath` before starting the arc unless you wish for the arc to automatically\n             * close when filled or stroked.\n             * \n             * Use the optional `overshoot` argument increase the number of iterations that take place when\n             * the arc is rendered in WebGL. This is useful if you're drawing an arc with an especially thick line,\n             * as it will allow the arc to fully join-up. Try small values at first, i.e. 0.01.\n             * \n             * Call {@link Phaser.GameObjects.Graphics#fillPath} or {@link Phaser.GameObjects.Graphics#strokePath} after calling\n             * this method to draw the arc.\n             * @param x The x coordinate of the center of the circle.\n             * @param y The y coordinate of the center of the circle.\n             * @param radius The radius of the circle.\n             * @param startAngle The starting angle, in radians.\n             * @param endAngle The ending angle, in radians.\n             * @param anticlockwise Whether the drawing should be anticlockwise or clockwise. Default false.\n             * @param overshoot This value allows you to increase the segment iterations in WebGL rendering. Useful if the arc has a thick stroke and needs to overshoot to join-up cleanly. Use small numbers such as 0.01 to start with and increase as needed. Default 0.",
        "* Creates a pie-chart slice shape centered at `x`, `y` with the given radius.\n             * You must define the start and end angle of the slice.\n             * \n             * Setting the `anticlockwise` argument to `true` creates a shape similar to Pacman.\n             * Setting it to `false` creates a shape like a slice of pie.\n             * \n             * This method will begin a new path and close the path at the end of it.\n             * To display the actual slice you need to call either `strokePath` or `fillPath` after it.\n             * @param x The horizontal center of the slice.\n             * @param y The vertical center of the slice.\n             * @param radius The radius of the slice.\n             * @param startAngle The start angle of the slice, given in radians.\n             * @param endAngle The end angle of the slice, given in radians.\n             * @param anticlockwise Whether the drawing should be anticlockwise or clockwise. Default false.\n             * @param overshoot This value allows you to overshoot the endAngle by this amount. Useful if the arc has a thick stroke and needs to overshoot to join-up cleanly. Default 0.",
        "* Saves the state of the Graphics by pushing the current state onto a stack.\n             * \n             * The most recently saved state can then be restored with {@link Phaser.GameObjects.Graphics#restore}.",
        "* Restores the most recently saved state of the Graphics by popping from the state stack.\n             * \n             * Use {@link Phaser.GameObjects.Graphics#save} to save the current state, and call this afterwards to restore that state.\n             * \n             * If there is no saved state, this command does nothing.",
        "* Translate the graphics.\n             * @param x The horizontal translation to apply.\n             * @param y The vertical translation to apply.",
        "* Scale the graphics.\n             * @param x The horizontal scale to apply.\n             * @param y The vertical scale to apply.",
        "* Rotate the graphics.\n             * @param radians The rotation angle, in radians.",
        "* Clear the command buffer and reset the fill style and line style to their defaults.",
        "* Generate a texture from this Graphics object.\n             * \n             * If `key` is a string it'll generate a new texture using it and add it into the\n             * Texture Manager (assuming no key conflict happens).\n             * \n             * If `key` is a Canvas it will draw the texture to that canvas context. Note that it will NOT\n             * automatically upload it to the GPU in WebGL mode.\n             * @param key The key to store the texture with in the Texture Manager, or a Canvas to draw to.\n             * @param width The width of the graphics to generate.\n             * @param height The height of the graphics to generate.",
        "* Internal destroy handler, called as part of the destroy process.",
        "* A Camera used specifically by the Graphics system for rendering to textures.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* A Group is a way for you to create, manipulate, or recycle similar Game Objects.\n         * \n         * Group membership is non-exclusive. A Game Object can belong to several groups, one group, or none.\n         * \n         * Groups themselves aren't displayable, and can't be positioned, rotated, scaled, or hidden.",
        "* \n             * @param scene The scene this group belongs to.\n             * @param children Game Objects to add to this group; or the `config` argument.\n             * @param config Settings for this group. If `key` is set, Phaser.GameObjects.Group#createMultiple is also called with these settings.",
        "* This scene this group belongs to.",
        "* Members of this group.",
        "* A flag identifying this object as a group.",
        "* The class to create new group members from.",
        "* Whether this group runs its {@link Phaser.GameObjects.Group#preUpdate} method\n             * (which may update any members).",
        "* The maximum size of this group, if used as a pool. -1 is no limit.",
        "* A default texture key to use when creating new group members.\n             * \n             * This is used in {@link Phaser.GameObjects.Group#create}\n             * but not in {@link Phaser.GameObjects.Group#createMultiple}.",
        "* A default texture frame to use when creating new group members.",
        "* Whether to call the update method of any members.",
        "* A function to be called when adding or creating group members.",
        "* A function to be called when removing group members.",
        "* A function to be called when creating several group members at once.",
        "* Creates a new Game Object and adds it to this group, unless the group {@link Phaser.GameObjects.Group#isFull is full}.\n             * \n             * Calls {@link Phaser.GameObjects.Group#createCallback}.\n             * @param x The horizontal position of the new Game Object in the world. Default 0.\n             * @param y The vertical position of the new Game Object in the world. Default 0.\n             * @param key The texture key of the new Game Object. Default defaultKey.\n             * @param frame The texture frame of the new Game Object. Default defaultFrame.\n             * @param visible The {@link Phaser.GameObjects.Components.Visible#visible} state of the new Game Object. Default true.\n             * @param active The {@link Phaser.GameObjects.GameObject#active} state of the new Game Object. Default true.",
        "* Creates several Game Objects and adds them to this group.\n             * \n             * If the group becomes {@link Phaser.GameObjects.Group#isFull}, no further Game Objects are created.\n             * \n             * Calls {@link Phaser.GameObjects.Group#createMultipleCallback} and {@link Phaser.GameObjects.Group#createCallback}.\n             * @param config Creation settings. This can be a single configuration object or an array of such objects, which will be applied in turn.",
        "* A helper for {@link Phaser.GameObjects.Group#createMultiple}.\n             * @param options Creation settings.",
        "* Updates any group members, if {@link Phaser.GameObjects.Group#runChildUpdate} is enabled.\n             * @param time The current timestamp.\n             * @param delta The delta time elapsed since the last frame.",
        "* Adds a Game Object to this group.\n             * \n             * Calls {@link Phaser.GameObjects.Group#createCallback}.\n             * @param child The Game Object to add.\n             * @param addToScene Also add the Game Object to the scene. Default false.",
        "* Adds several Game Objects to this group.\n             * \n             * Calls {@link Phaser.GameObjects.Group#createCallback}.\n             * @param children The Game Objects to add.\n             * @param addToScene Also add the Game Objects to the scene. Default false.",
        "* Removes a member of this Group and optionally removes it from the Scene and / or destroys it.\n             * \n             * Calls {@link Phaser.GameObjects.Group#removeCallback}.\n             * @param child The Game Object to remove.\n             * @param removeFromScene Optionally remove the Group member from the Scene it belongs to. Default false.\n             * @param destroyChild Optionally call destroy on the removed Group member. Default false.",
        "* Removes all members of this Group and optionally removes them from the Scene and / or destroys them.\n             * \n             * Does not call {@link Phaser.GameObjects.Group#removeCallback}.\n             * @param removeFromScene Optionally remove each Group member from the Scene. Default false.\n             * @param destroyChild Optionally call destroy on the removed Group members. Default false.",
        "* Tests if a Game Object is a member of this group.\n             * @param child A Game Object.",
        "* All members of the group.",
        "* The number of members of the group.",
        "* Scans the Group, from top to bottom, for the first member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\n             * assigns `x` and `y`, and returns the member.\n             * \n             * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\n             * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\n             * @param state The {@link Phaser.GameObjects.GameObject#active} value to match. Default false.\n             * @param createIfNull Create a new Game Object if no matching members are found, using the following arguments. Default false.\n             * @param x The horizontal position of the Game Object in the world.\n             * @param y The vertical position of the Game Object in the world.\n             * @param key The texture key assigned to a new Game Object (if one is created). Default defaultKey.\n             * @param frame A texture frame assigned to a new Game Object (if one is created). Default defaultFrame.\n             * @param visible The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created). Default true.",
        "* Scans the Group, from top to bottom, for the nth member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\n             * assigns `x` and `y`, and returns the member.\n             * \n             * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\n             * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\n             * @param nth The nth matching Group member to search for.\n             * @param state The {@link Phaser.GameObjects.GameObject#active} value to match. Default false.\n             * @param createIfNull Create a new Game Object if no matching members are found, using the following arguments. Default false.\n             * @param x The horizontal position of the Game Object in the world.\n             * @param y The vertical position of the Game Object in the world.\n             * @param key The texture key assigned to a new Game Object (if one is created). Default defaultKey.\n             * @param frame A texture frame assigned to a new Game Object (if one is created). Default defaultFrame.\n             * @param visible The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created). Default true.",
        "* Scans the Group for the last member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\n             * assigns `x` and `y`, and returns the member.\n             * \n             * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\n             * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\n             * @param state The {@link Phaser.GameObjects.GameObject#active} value to match. Default false.\n             * @param createIfNull Create a new Game Object if no matching members are found, using the following arguments. Default false.\n             * @param x The horizontal position of the Game Object in the world.\n             * @param y The vertical position of the Game Object in the world.\n             * @param key The texture key assigned to a new Game Object (if one is created). Default defaultKey.\n             * @param frame A texture frame assigned to a new Game Object (if one is created). Default defaultFrame.\n             * @param visible The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created). Default true.",
        "* Scans the Group for the last nth member that has an {@link Phaser.GameObjects.GameObject#active} state matching the argument,\n             * assigns `x` and `y`, and returns the member.\n             * \n             * If no matching member is found and `createIfNull` is true and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\n             * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\n             * @param nth The nth matching Group member to search for.\n             * @param state The {@link Phaser.GameObjects.GameObject#active} value to match. Default false.\n             * @param createIfNull Create a new Game Object if no matching members are found, using the following arguments. Default false.\n             * @param x The horizontal position of the Game Object in the world.\n             * @param y The vertical position of the Game Object in the world.\n             * @param key The texture key assigned to a new Game Object (if one is created). Default defaultKey.\n             * @param frame A texture frame assigned to a new Game Object (if one is created). Default defaultFrame.\n             * @param visible The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created). Default true.",
        "* Scans the group for the first member that has an {@link Phaser.GameObjects.GameObject#active} state set to `false`,\n             * assigns `x` and `y`, and returns the member.\n             * \n             * If no inactive member is found and the group isn't full then it will create a new Game Object using `x`, `y`, `key`, `frame`, and `visible`.\n             * The new Game Object will have its active state set to `true`.\n             * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\n             * @param x The horizontal position of the Game Object in the world.\n             * @param y The vertical position of the Game Object in the world.\n             * @param key The texture key assigned to a new Game Object (if one is created). Default defaultKey.\n             * @param frame A texture frame assigned to a new Game Object (if one is created). Default defaultFrame.\n             * @param visible The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created). Default true.",
        "* Scans the group for the first member that has an {@link Phaser.GameObjects.GameObject#active} state set to `true`,\n             * assigns `x` and `y`, and returns the member.\n             * \n             * If no active member is found and `createIfNull` is `true` and the group isn't full then it will create a new one using `x`, `y`, `key`, `frame`, and `visible`.\n             * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\n             * @param createIfNull Create a new Game Object if no matching members are found, using the following arguments. Default false.\n             * @param x The horizontal position of the Game Object in the world.\n             * @param y The vertical position of the Game Object in the world.\n             * @param key The texture key assigned to a new Game Object (if one is created). Default defaultKey.\n             * @param frame A texture frame assigned to a new Game Object (if one is created). Default defaultFrame.\n             * @param visible The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created). Default true.",
        "* Scans the group for the first member that has an {@link Phaser.GameObjects.GameObject#active} state set to `false`,\n             * assigns `x` and `y`, and returns the member.\n             * \n             * If no inactive member is found and `createIfNull` is `true` and the group isn't full then it will create a new one using `x`, `y`, `key`, `frame`, and `visible`.\n             * The new Game Object will have an active state set to `true`.\n             * Unless a new member is created, `key`, `frame`, and `visible` are ignored.\n             * @param createIfNull Create a new Game Object if no matching members are found, using the following arguments. Default false.\n             * @param x The horizontal position of the Game Object in the world.\n             * @param y The vertical position of the Game Object in the world.\n             * @param key The texture key assigned to a new Game Object (if one is created). Default defaultKey.\n             * @param frame A texture frame assigned to a new Game Object (if one is created). Default defaultFrame.\n             * @param visible The {@link Phaser.GameObjects.Components.Visible#visible} state of a new Game Object (if one is created). Default true.",
        "* {@link Phaser.GameObjects.Components.Animation#play Plays} an animation for all members of this group.\n             * @param key The string-based key of the animation to play.\n             * @param startFrame Optionally start the animation playing from this frame index. Default 0.",
        "* Whether this group's size at its {@link Phaser.GameObjects.Group#maxSize maximum}.",
        "* Counts the number of active (or inactive) group members.\n             * @param value Count active (true) or inactive (false) group members. Default true.",
        "* Counts the number of in-use (active) group members.",
        "* The difference of {@link Phaser.GameObjects.Group#maxSize} and the number of active group members.\n             * \n             * This represents the number of group members that could be created or reactivated before reaching the size limit.",
        "* Sets the depth of each group member.\n             * @param value The amount to set the property to.\n             * @param step This is added to the `value` amount, multiplied by the iteration counter.",
        "* Deactivates a member of this group.\n             * @param gameObject A member of this group.",
        "* Deactivates and hides a member of this group.\n             * @param gameObject A member of this group.",
        "* Toggles (flips) the visible state of each member of this group.",
        "* Empties this group and removes it from the Scene.\n             * \n             * Does not call {@link Phaser.GameObjects.Group#removeCallback}.\n             * @param destroyChildren Also {@link Phaser.GameObjects.GameObject#destroy} each group member. Default false.",
        "* An Image Game Object.\n         * \n         * An Image is a light-weight Game Object useful for the display of static images in your game,\n         * such as logos, backgrounds, scenery or other non-animated elements. Images can have input\n         * events and physics bodies, or be tweened, tinted or scrolled. The main difference between an\n         * Image and a Sprite is that you cannot animate an Image as they do not have the Animation component.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n             * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n             * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n             * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n             * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n             * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n             * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n             * \n             * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n             * \n             * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n             * changes what is shown when rendered.\n             * \n             * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n             * \n             * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n             * half of it, you could call `setCrop(0, 0, 400, 600)`.\n             * \n             * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n             * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n             * \n             * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n             * \n             * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n             * \n             * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n             * the renderer to skip several internal calculations.\n             * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n             * @param y The y coordinate to start the crop from.\n             * @param width The width of the crop rectangle in pixels.\n             * @param height The height of the crop rectangle in pixels.",
        "* Sets the texture and frame this Game Object will use to render with.\n             * \n             * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n             * @param key The key of the texture to be used, as stored in the Texture Manager.\n             * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n             * \n             * The Frame has to belong to the current Texture being used.\n             * \n             * It can be either a string or an index.\n             * \n             * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n             * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n             * @param frame The name or index of the frame within the Texture.\n             * @param updateSize Should this call adjust the size of the Game Object? Default true.\n             * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n             * \n             * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n             * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n             * \n             * The tint works by taking the pixel color values from the Game Objects texture, and then\n             * multiplying it by the color value of the tint. You can provide either one color value,\n             * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n             * per corner. The colors are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n             * \n             * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n             * with those in the tint. You can use this for effects such as making a player flash 'white'\n             * if hit by something. You can provide either one color value, in which case the whole\n             * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n             * are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* A 2D point light.\n         * \n         * These are typically created by a {@link Phaser.GameObjects.LightsManager}, available from within a scene via `this.lights`.\n         * \n         * Any Game Objects using the Light2D pipeline will then be affected by these Lights.\n         * \n         * They can also simply be used to represent a point light for your own purposes.",
        "* \n             * @param x The horizontal position of the light.\n             * @param y The vertical position of the light.\n             * @param radius The radius of the light.\n             * @param r The red color of the light. A value between 0 and 1.\n             * @param g The green color of the light. A value between 0 and 1.\n             * @param b The blue color of the light. A value between 0 and 1.\n             * @param intensity The intensity of the light.",
        "* The horizontal position of the light.",
        "* The vertical position of the light.",
        "* The radius of the light.",
        "* The red color of the light. A value between 0 and 1.",
        "* The green color of the light. A value between 0 and 1.",
        "* The blue color of the light. A value between 0 and 1.",
        "* The intensity of the light.",
        "* The horizontal scroll factor of the light.",
        "* The vertical scroll factor of the light.",
        "* Set the properties of the light.\n             * \n             * Sets both horizontal and vertical scroll factor to 1. Use {@link Phaser.GameObjects.Light#setScrollFactor} to set\n             * the scroll factor.\n             * @param x The horizontal position of the light.\n             * @param y The vertical position of the light.\n             * @param radius The radius of the light.\n             * @param r The red color. A value between 0 and 1.\n             * @param g The green color. A value between 0 and 1.\n             * @param b The blue color. A value between 0 and 1.\n             * @param intensity The intensity of the light.",
        "* Set the scroll factor of the light.\n             * @param x The horizontal scroll factor of the light.\n             * @param y The vertical scroll factor of the light.",
        "* Set the color of the light from a single integer RGB value.\n             * @param rgb The integer RGB color of the light.",
        "* Set the intensity of the light.\n             * @param intensity The intensity of the light.",
        "* Set the position of the light.\n             * @param x The horizontal position of the light.\n             * @param y The vertical position of the light.",
        "* Set the radius of the light.\n             * @param radius The radius of the light.",
        "* Manages Lights for a Scene.\n         * \n         * Affects the rendering of Game Objects using the `Light2D` pipeline.",
        "* The pool of Lights.\n             * \n             * Used to recycle removed Lights for a more efficient use of memory.",
        "* The Lights in the Scene.",
        "* Lights that have been culled from a Camera's viewport.\n             * \n             * Lights in this list will not be rendered.",
        "* The ambient color.",
        "* Whether the Lights Manager is enabled.",
        "* The maximum number of lights that a single Camera and the lights shader can process.\n             * Change this via the `maxLights` property in your game config, as it cannot be changed at runtime.",
        "* Enable the Lights Manager.",
        "* Disable the Lights Manager.",
        "* Cull any Lights that aren't visible to the given Camera.\n             * \n             * Culling Lights improves performance by ensuring that only Lights within a Camera's viewport are rendered.\n             * @param camera The Camera to cull Lights for.",
        "* Iterate over each Light with a callback.\n             * @param callback The callback that is called with each Light.",
        "* Set the ambient light color.\n             * @param rgb The integer RGB color of the ambient light.",
        "* Returns the maximum number of Lights allowed to appear at once.",
        "* Get the number of Lights managed by this Lights Manager.",
        "* Add a Light.\n             * @param x The horizontal position of the Light. Default 0.\n             * @param y The vertical position of the Light. Default 0.\n             * @param radius The radius of the Light. Default 100.\n             * @param rgb The integer RGB color of the light. Default 0xffffff.\n             * @param intensity The intensity of the Light. Default 1.",
        "* Remove a Light.\n             * @param light The Light to remove.",
        "* Shut down the Lights Manager.\n             * \n             * Recycles all active Lights into the Light pool, resets ambient light color and clears the lists of Lights and\n             * culled Lights.",
        "* Destroy the Lights Manager.\n             * \n             * Cleans up all references by calling {@link Phaser.GameObjects.LightsManager#shutdown}.",
        "* A Scene plugin that provides a {@link Phaser.GameObjects.LightsManager} for the Light2D pipeline.\n         * \n         * Available from within a Scene via `this.lights`.\n         * \n         * Add Lights using the {@link Phaser.GameObjects.LightsManager#addLight} method:\n         * \n         * ```javascript\n         * // Enable the Lights Manager because it is disabled by default\n         * this.lights.enable();\n         * \n         * // Create a Light at [400, 300] with a radius of 200\n         * this.lights.addLight(400, 300, 200);\n         * ```\n         * \n         * For Game Objects to be affected by the Lights when rendered, you will need to set them to use the `Light2D` pipeline like so:\n         * \n         * ```javascript\n         * sprite.setPipeline('Light2D');\n         * ```",
        "* \n             * @param scene The Scene that this Lights Plugin belongs to.",
        "* A reference to the Scene that this Lights Plugin belongs to.",
        "* A reference to the Scene's systems.",
        "* Boot the Lights Plugin.",
        "* Destroy the Lights Plugin.\n             * \n             * Cleans up all references.",
        "* A Mesh Game Object.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param vertices An array containing the vertices data for this Mesh.\n             * @param uv An array containing the uv data for this Mesh.\n             * @param colors An array containing the color data for this Mesh.\n             * @param alphas An array containing the alpha data for this Mesh.\n             * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* An array containing the vertices data for this Mesh.",
        "* An array containing the uv data for this Mesh.",
        "* An array containing the color data for this Mesh.",
        "* An array containing the alpha data for this Mesh.",
        "* Fill or additive mode used when blending the color values?",
        "* This method is left intentionally empty and does not do anything.\n             * It is retained to allow a Mesh or Quad to be added to a Container.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* Sets the texture and frame this Game Object will use to render with.\n             * \n             * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n             * @param key The key of the texture to be used, as stored in the Texture Manager.\n             * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n             * \n             * The Frame has to belong to the current Texture being used.\n             * \n             * It can be either a string or an index.\n             * \n             * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n             * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n             * @param frame The name or index of the frame within the Texture.\n             * @param updateSize Should this call adjust the size of the Game Object? Default true.\n             * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* A Particle Emitter property.\n             * \n             * Facilitates changing Particle properties as they are emitted and throughout their lifetime.",
        "* \n                 * @param config Settings for the Particle Emitter that owns this property.\n                 * @param key The name of the property.\n                 * @param defaultValue The default value of the property.\n                 * @param emitOnly Whether the property can only be modified when a Particle is emitted. Default false.",
        "* The name of this property.",
        "* The value of this property.",
        "* The default value of this property.",
        "* The number of steps for stepped easing between {@link Phaser.GameObjects.Particles.EmitterOp#start} and\n                 * {@link Phaser.GameObjects.Particles.EmitterOp#end} values, per emit.",
        "* The step counter for stepped easing, per emit.",
        "* The start value for this property to ease between.",
        "* The end value for this property to ease between.",
        "* The easing function to use for updating this property.",
        "* Whether this property can only be modified when a Particle is emitted.\n                 * \n                 * Set to `true` to allow only {@link Phaser.GameObjects.Particles.EmitterOp#onEmit} callbacks to be set and\n                 * affect this property.\n                 * \n                 * Set to `false` to allow both {@link Phaser.GameObjects.Particles.EmitterOp#onEmit} and\n                 * {@link Phaser.GameObjects.Particles.EmitterOp#onUpdate} callbacks to be set and affect this property.",
        "* The callback to run for Particles when they are emitted from the Particle Emitter.",
        "* The callback to run for Particles when they are updated.",
        "* Load the property from a Particle Emitter configuration object.\n                 * \n                 * Optionally accepts a new property key to use, replacing the current one.\n                 * @param config Settings for the Particle Emitter that owns this property.\n                 * @param newKey The new key to use for this property, if any.",
        "* Build a JSON representation of this Particle Emitter property.",
        "* Change the current value of the property and update its callback methods.\n                 * @param value The value of the property.",
        "* Update the {@link Phaser.GameObjects.Particles.EmitterOp#onEmit} and\n                 * {@link Phaser.GameObjects.Particles.EmitterOp#onUpdate} callbacks based on the type of the current\n                 * {@link Phaser.GameObjects.Particles.EmitterOp#propertyValue}.",
        "* Check whether an object has the given property.\n                 * @param object The object to check.\n                 * @param key The key of the property to look for in the object.",
        "* Check whether an object has both of the given properties.\n                 * @param object The object to check.\n                 * @param key1 The key of the first property to check the object for.\n                 * @param key2 The key of the second property to check the object for.",
        "* Check whether an object has at least one of the given properties.\n                 * @param object The object to check.\n                 * @param key1 The key of the first property to check the object for.\n                 * @param key2 The key of the second property to check the object for.",
        "* The returned value sets what the property will be at the START of the particles life, on emit.\n                 * @param particle The particle.\n                 * @param key The name of the property.\n                 * @param value The current value of the property.",
        "* The returned value updates the property for the duration of the particles life.\n                 * @param particle The particle.\n                 * @param key The name of the property.\n                 * @param t The T value (between 0 and 1)\n                 * @param value The current value of the property.",
        "* An `onEmit` callback that returns the current value of the property.",
        "* An `onUpdate` callback that returns the current value of the property.",
        "* An `onEmit` callback that returns a random value from the current value array.",
        "* An `onEmit` callback that returns a value between the {@link Phaser.GameObjects.Particles.EmitterOp#start} and\n                 * {@link Phaser.GameObjects.Particles.EmitterOp#end} range.\n                 * @param particle The particle.\n                 * @param key The key of the property.",
        "* An `onEmit` callback that returns a stepped value between the\n                 * {@link Phaser.GameObjects.Particles.EmitterOp#start} and {@link Phaser.GameObjects.Particles.EmitterOp#end}\n                 * range.",
        "* An `onEmit` callback that returns an eased value between the\n                 * {@link Phaser.GameObjects.Particles.EmitterOp#start} and {@link Phaser.GameObjects.Particles.EmitterOp#end}\n                 * range.\n                 * @param particle The particle.\n                 * @param key The name of the property.",
        "* An `onUpdate` callback that returns an eased value between the\n                 * {@link Phaser.GameObjects.Particles.EmitterOp#start} and {@link Phaser.GameObjects.Particles.EmitterOp#end}\n                 * range.\n                 * @param particle The particle.\n                 * @param key The name of the property.\n                 * @param t The T value (between 0 and 1)",
        "* The GravityWell action applies a force on the particle to draw it towards, or repel it from, a single point.\n             * \n             * The force applied is inversely proportional to the square of the distance from the particle to the point, in accordance with Newton's law of gravity.\n             * \n             * This simulates the effect of gravity over large distances (as between planets, for example).",
        "* \n                 * @param x The x coordinate of the Gravity Well, in world space. Default 0.\n                 * @param y The y coordinate of the Gravity Well, in world space. Default 0.\n                 * @param power The strength of the gravity force - larger numbers produce a stronger force. Default 0.\n                 * @param epsilon The minimum distance for which the gravity force is calculated. Default 100.\n                 * @param gravity The gravitational force of this Gravity Well. Default 50.",
        "* The x coordinate of the Gravity Well, in world space.",
        "* The y coordinate of the Gravity Well, in world space.",
        "* The active state of the Gravity Well. An inactive Gravity Well will not influence any particles.",
        "* The strength of the gravity force - larger numbers produce a stronger force.",
        "* The minimum distance for which the gravity force is calculated.",
        "* Takes a Particle and updates it based on the properties of this Gravity Well.\n                 * @param particle The Particle to update.\n                 * @param delta The delta time in ms.\n                 * @param step The delta value divided by 1000.",
        "* A Particle is a simple Game Object controlled by a Particle Emitter and Manager, and rendered by the Manager.\n             * It uses its own lightweight physics system, and can interact only with its Emitter's bounds and zones.",
        "* \n                 * @param emitter The Emitter to which this Particle belongs.",
        "* The Emitter to which this Particle belongs.\n                 * \n                 * A Particle can only belong to a single Emitter and is created, updated and destroyed via it.",
        "* The texture frame used to render this Particle.",
        "* The x coordinate of this Particle.",
        "* The y coordinate of this Particle.",
        "* The x velocity of this Particle.",
        "* The y velocity of this Particle.",
        "* The x acceleration of this Particle.",
        "* The y acceleration of this Particle.",
        "* The maximum horizontal velocity this Particle can travel at.",
        "* The maximum vertical velocity this Particle can travel at.",
        "* The bounciness, or restitution, of this Particle.",
        "* The horizontal scale of this Particle.",
        "* The vertical scale of this Particle.",
        "* The alpha value of this Particle.",
        "* The angle of this Particle in degrees.",
        "* The angle of this Particle in radians.",
        "* The tint applied to this Particle.",
        "* The lifespan of this Particle in ms.",
        "* The current life of this Particle in ms.",
        "* The delay applied to this Particle upon emission, in ms.",
        "* The normalized lifespan T value, where 0 is the start and 1 is the end.",
        "* The data used by the ease equation.",
        "* Checks to see if this Particle is alive and updating.",
        "* Resets the position of this particle back to zero.",
        "* Starts this Particle from the given coordinates.\n                 * @param x The x coordinate to launch this Particle from.\n                 * @param y The y coordinate to launch this Particle from.",
        "* An internal method that calculates the velocity of the Particle.\n                 * @param emitter The Emitter that is updating this Particle.\n                 * @param delta The delta time in ms.\n                 * @param step The delta value divided by 1000.\n                 * @param processors Particle processors (gravity wells).",
        "* Checks if this Particle is still within the bounds defined by the given Emitter.\n                 * \n                 * If not, and depending on the Emitter collision flags, the Particle may either stop or rebound.\n                 * @param emitter The Emitter to check the bounds against.",
        "* The main update method for this Particle.\n                 * \n                 * Updates its life values, computes the velocity and repositions the Particle.\n                 * @param delta The delta time in ms.\n                 * @param step The delta value divided by 1000.\n                 * @param processors An optional array of update processors.",
        "* A particle emitter represents a single particle stream.\n             * It controls a pool of {@link Phaser.GameObjects.Particles.Particle Particles} and is controlled by a {@link Phaser.GameObjects.Particles.ParticleEmitterManager Particle Emitter Manager}.",
        "* \n                 * @param manager The Emitter Manager this Emitter belongs to.\n                 * @param config Settings for this emitter.",
        "* The Emitter Manager this Emitter belongs to.",
        "* The texture assigned to particles.",
        "* The texture frames assigned to particles.",
        "* The default texture frame assigned to particles.",
        "* Names of simple configuration properties.",
        "* Names of complex configuration properties.",
        "* The name of this Particle Emitter.\n                 * \n                 * Empty by default and never populated by Phaser, this is left for developers to use.",
        "* The Particle Class which will be emitted by this Emitter.",
        "* The x-coordinate of the particle origin (where particles will be emitted).",
        "* The y-coordinate of the particle origin (where particles will be emitted).",
        "* A radial emitter will emit particles in all directions between angle min and max,\n                 * using {@link Phaser.GameObjects.Particles.ParticleEmitter#speed} as the value. If set to false then this acts as a point Emitter.\n                 * A point emitter will emit particles only in the direction derived from the speedX and speedY values.",
        "* Horizontal acceleration applied to emitted particles, in pixels per second squared.",
        "* Vertical acceleration applied to emitted particles, in pixels per second squared.",
        "* Whether accelerationX and accelerationY are non-zero. Set automatically during configuration.",
        "* Horizontal acceleration applied to emitted particles, in pixels per second squared.",
        "* Vertical acceleration applied to emitted particles, in pixels per second squared.",
        "* The maximum horizontal velocity of emitted particles, in pixels per second squared.",
        "* The maximum vertical velocity of emitted particles, in pixels per second squared.",
        "* The initial horizontal speed of emitted particles, in pixels per second.",
        "* The initial vertical speed of emitted particles, in pixels per second.",
        "* Whether moveToX and moveToY are nonzero. Set automatically during configuration.",
        "* The x-coordinate emitted particles move toward, when {@link Phaser.GameObjects.Particles.ParticleEmitter#moveTo} is true.",
        "* The y-coordinate emitted particles move toward, when {@link Phaser.GameObjects.Particles.ParticleEmitter#moveTo} is true.",
        "* Whether particles will rebound when they meet the emitter bounds.",
        "* The horizontal scale of emitted particles.",
        "* The vertical scale of emitted particles.",
        "* Color tint applied to emitted particles. Any alpha component (0xAA000000) is ignored.",
        "* The alpha (transparency) of emitted particles.",
        "* The lifespan of emitted particles, in ms.",
        "* The angle of the initial velocity of emitted particles, in degrees.",
        "* The rotation of emitted particles, in degrees.",
        "* A function to call when a particle is emitted.",
        "* The calling context for {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallback}.",
        "* A function to call when a particle dies.",
        "* The calling context for {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallback}.",
        "* Set to hard limit the amount of particle objects this emitter is allowed to create.\n                 * 0 means unlimited.",
        "* How many particles are emitted each time particles are emitted (one explosion or one flow cycle).",
        "* How many ms to wait after emission before the particles start updating.",
        "* For a flow emitter, the time interval (>= 0) between particle flow cycles in ms.\n                 * A value of 0 means there is one particle flow cycle for each logic update (the maximum flow frequency). This is the default setting.\n                 * For an exploding emitter, this value will be -1.\n                 * Calling {@link Phaser.GameObjects.Particles.ParticleEmitter#flow} also puts the emitter in flow mode (frequency >= 0).\n                 * Calling {@link Phaser.GameObjects.Particles.ParticleEmitter#explode} also puts the emitter in explode mode (frequency = -1).",
        "* Controls if the emitter is currently emitting a particle flow (when frequency >= 0).\n                 * Already alive particles will continue to update until they expire.\n                 * Controlled by {@link Phaser.GameObjects.Particles.ParticleEmitter#start} and {@link Phaser.GameObjects.Particles.ParticleEmitter#stop}.",
        "* Newly emitted particles are added to the top of the particle list, i.e. rendered above those already alive.\n                 * Set to false to send them to the back.",
        "* The time rate applied to active particles, affecting lifespan, movement, and tweens. Values larger than 1 are faster than normal.",
        "* An object describing a shape to emit particles from.",
        "* An object describing a shape that deactivates particles when they interact with it.",
        "* A rectangular boundary constraining particle movement.",
        "* Whether particles interact with the left edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.",
        "* Whether particles interact with the right edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.",
        "* Whether particles interact with the top edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.",
        "* Whether particles interact with the bottom edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.",
        "* Whether this emitter updates itself and its particles.\n                 * \n                 * Controlled by {@link Phaser.GameObjects.Particles.ParticleEmitter#pause}\n                 * and {@link Phaser.GameObjects.Particles.ParticleEmitter#resume}.",
        "* Set this to false to hide any active particles.",
        "* The blend mode of this emitter's particles.",
        "* A Game Object whose position is used as the particle origin.",
        "* The offset of the particle origin from the {@link Phaser.GameObjects.Particles.ParticleEmitter#follow} target.",
        "* Whether the emitter's {@link Phaser.GameObjects.Particles.ParticleEmitter#visible} state will track\n                 * the {@link Phaser.GameObjects.Particles.ParticleEmitter#follow} target's visibility state.",
        "* The current texture frame, as an index of {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.",
        "* Whether texture {@link Phaser.GameObjects.Particles.ParticleEmitter#frames} are selected at random.",
        "* The number of consecutive particles that receive a single texture frame (per frame cycle).",
        "* Merges configuration settings into the emitter's current settings.\n                 * @param config Settings for this emitter.",
        "* Creates a description of this emitter suitable for JSON serialization.\n                 * @param output An object to copy output into.",
        "* Continuously moves the particle origin to follow a Game Object's position.\n                 * @param target The Game Object to follow.\n                 * @param offsetX Horizontal offset of the particle origin from the Game Object. Default 0.\n                 * @param offsetY Vertical offset of the particle origin from the Game Object. Default 0.\n                 * @param trackVisible Whether the emitter's visible state will track the target's visible state. Default false.",
        "* Stops following a Game Object.",
        "* Chooses a texture frame from {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.",
        "* Sets a pattern for assigning texture frames to emitted particles.\n                 * @param frames One or more texture frames, or a configuration object.\n                 * @param pickRandom Whether frames should be assigned at random from `frames`. Default true.\n                 * @param quantity The number of consecutive particles that will receive each frame. Default 1.",
        "* Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle movement on or off.\n                 * @param value Radial mode (true) or point mode (true). Default true.",
        "* Sets the position of the emitter's particle origin.\n                 * New particles will be emitted here.\n                 * @param x The x-coordinate of the particle origin.\n                 * @param y The y-coordinate of the particle origin.",
        "* Sets or modifies a rectangular boundary constraining the particles.\n                 * \n                 * To remove the boundary, set {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds} to null.\n                 * @param x The x-coordinate of the left edge of the boundary, or an object representing a rectangle.\n                 * @param y The y-coordinate of the top edge of the boundary.\n                 * @param width The width of the boundary.\n                 * @param height The height of the boundary.",
        "* Sets the initial horizontal speed of emitted particles.\n                 * Changes the emitter to point mode.\n                 * @param value The speed, in pixels per second.",
        "* Sets the initial vertical speed of emitted particles.\n                 * Changes the emitter to point mode.\n                 * @param value The speed, in pixels per second.",
        "* Sets the initial radial speed of emitted particles.\n                 * Changes the emitter to radial mode.\n                 * @param value The speed, in pixels per second.",
        "* Sets the horizontal scale of emitted particles.\n                 * @param value The scale, relative to 1.",
        "* Sets the vertical scale of emitted particles.\n                 * @param value The scale, relative to 1.",
        "* Sets the scale of emitted particles.\n                 * @param value The scale, relative to 1.",
        "* Sets the horizontal gravity applied to emitted particles.\n                 * @param value Acceleration due to gravity, in pixels per second squared.",
        "* Sets the vertical gravity applied to emitted particles.\n                 * @param value Acceleration due to gravity, in pixels per second squared.",
        "* Sets the gravity applied to emitted particles.\n                 * @param x Horizontal acceleration due to gravity, in pixels per second squared.\n                 * @param y Vertical acceleration due to gravity, in pixels per second squared.",
        "* Sets the opacity of emitted particles.\n                 * @param value A value between 0 (transparent) and 1 (opaque).",
        "* Sets the angle of a {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle stream.\n                 * @param value The angle of the initial velocity of emitted particles.",
        "* Sets the angle of a {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle stream.\n                 * @param value The angle of the initial velocity of emitted particles.",
        "* Sets the lifespan of newly emitted particles.\n                 * @param value The particle lifespan, in ms.",
        "* Sets the number of particles released at each flow cycle or explosion.\n                 * @param quantity The number of particles to release at each flow cycle or explosion.",
        "* Sets the emitter's {@link Phaser.GameObjects.Particles.ParticleEmitter#frequency}\n                 * and {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\n                 * @param frequency The time interval (>= 0) of each flow cycle, in ms; or -1 to put the emitter in explosion mode.\n                 * @param quantity The number of particles to release at each flow cycle or explosion.",
        "* Sets or removes the {@link Phaser.GameObjects.Particles.ParticleEmitter#emitZone}.\n                 * \n                 * An {@link ParticleEmitterEdgeZoneConfig EdgeZone} places particles on its edges. Its {@link EdgeZoneSource source} can be a Curve, Path, Circle, Ellipse, Line, Polygon, Rectangle, or Triangle; or any object with a suitable {@link EdgeZoneSourceCallback getPoints} method.\n                 * \n                 * A {@link ParticleEmitterRandomZoneConfig RandomZone} places randomly within its interior. Its {@link RandomZoneSource source} can be a Circle, Ellipse, Line, Polygon, Rectangle, or Triangle; or any object with a suitable {@link RandomZoneSourceCallback getRandomPoint} method.\n                 * @param zoneConfig An object describing the zone, or `undefined` to remove any current emit zone.",
        "* Sets or removes the {@link Phaser.GameObjects.Particles.ParticleEmitter#deathZone}.\n                 * @param zoneConfig An object describing the zone, or `undefined` to remove any current death zone.",
        "* Creates inactive particles and adds them to this emitter's pool.\n                 * @param particleCount The number of particles to create.",
        "* Gets the number of active (in-use) particles in this emitter.",
        "* Gets the number of inactive (available) particles in this emitter.",
        "* Gets the total number of particles in this emitter.",
        "* Whether this emitter is at its limit (if set).",
        "* Sets a function to call for each newly emitted particle.\n                 * @param callback The function.\n                 * @param context The calling context.",
        "* Sets a function to call for each particle death.\n                 * @param callback The function.\n                 * @param context The function's calling context.",
        "* Deactivates every particle in this emitter.",
        "* Calls a function for each active particle in this emitter.\n                 * @param callback The function.\n                 * @param context The function's calling context.",
        "* Calls a function for each inactive particle in this emitter.\n                 * @param callback The function.\n                 * @param context The function's calling context.",
        "* Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#on} the emitter and resets the flow counter.\n                 * \n                 * If this emitter is in flow mode (frequency >= 0; the default), the particle flow will start (or restart).\n                 * \n                 * If this emitter is in explode mode (frequency = -1), nothing will happen.\n                 * Use {@link Phaser.GameObjects.Particles.ParticleEmitter#explode} or {@link Phaser.GameObjects.Particles.ParticleEmitter#flow} instead.",
        "* Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#on off} the emitter.",
        "* {@link Phaser.GameObjects.Particles.ParticleEmitter#active Deactivates} the emitter.",
        "* {@link Phaser.GameObjects.Particles.ParticleEmitter#active Activates} the emitter.",
        "* Sorts active particles with {@link Phaser.GameObjects.Particles.ParticleEmitter#depthSortCallback}.",
        "* Puts the emitter in flow mode (frequency >= 0) and starts (or restarts) a particle flow.\n                 * \n                 * To resume a flow at the current frequency and quantity, use {@link Phaser.GameObjects.Particles.ParticleEmitter#start} instead.\n                 * @param frequency The time interval (>= 0) of each flow cycle, in ms.\n                 * @param count The number of particles to emit at each flow cycle. Default 1.",
        "* Puts the emitter in explode mode (frequency = -1), stopping any current particle flow, and emits several particles all at once.\n                 * @param count The amount of Particles to emit.\n                 * @param x The x coordinate to emit the Particles from.\n                 * @param y The y coordinate to emit the Particles from.",
        "* Emits particles at a given position (or the emitter's current position).\n                 * @param x The x coordinate to emit the Particles from. Default this.x.\n                 * @param y The y coordinate to emit the Particles from. Default this.x.\n                 * @param count The number of Particles to emit. Default this.quantity.",
        "* Emits particles at a given position (or the emitter's current position).\n                 * @param count The number of Particles to emit. Default this.quantity.\n                 * @param x The x coordinate to emit the Particles from. Default this.x.\n                 * @param y The y coordinate to emit the Particles from. Default this.x.",
        "* Updates this emitter and its particles.\n                 * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n                 * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Calculates the difference of two particles, for sorting them by depth.\n                 * @param a The first particle.\n                 * @param b The second particle.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n                 * are used.\n                 * @param value The BlendMode value. Either a string or a CONST.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n                 * \n                 * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n                 * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n                 * \n                 * If a mask is already set on this Game Object it will be immediately replaced.\n                 * \n                 * Masks are positioned in global space and are not relative to the Game Object to which they\n                 * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n                 * \n                 * Masks have no impact on physics or input detection. They are purely a rendering component\n                 * that allows you to limit what is visible during the render pass.\n                 * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n                 * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a renderable Game Object.\n                 * A renderable Game Object is one that uses a texture to render with, such as an\n                 * Image, Sprite, Render Texture or BitmapText.\n                 * \n                 * If you do not provide a renderable object, and this Game Object has a texture,\n                 * it will use itself as the object. This means you can call this method to create\n                 * a Bitmap Mask from any renderable Game Object.\n                 * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a Graphics Game Object.\n                 * \n                 * If you do not provide a graphics object, and this Game Object is an instance\n                 * of a Graphics object, then it will use itself to create the mask.\n                 * \n                 * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n                 * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.\n                 * @param x The horizontal scroll factor of this Game Object.\n                 * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the visibility of this Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.\n                 * @param value The visible state of the Game Object.",
        "* A Particle Emitter Manager creates and controls {@link Phaser.GameObjects.Particles.ParticleEmitter Particle Emitters} and {@link Phaser.GameObjects.Particles.GravityWell Gravity Wells}.",
        "* \n                 * @param scene The Scene to which this Emitter Manager belongs.\n                 * @param texture The key of the Texture this Emitter Manager will use to render particles, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Emitter Manager will use to render particles.\n                 * @param emitters Configuration settings for one or more emitters to create.",
        "* The time scale applied to all emitters and particles, affecting flow rate, lifespan, and movement.\n                 * Values larger than 1 are faster than normal.\n                 * This is multiplied with any timeScale set on each individual emitter.",
        "* The texture used to render this Emitter Manager's particles.",
        "* The texture frame used to render this Emitter Manager's particles.",
        "* Names of this Emitter Manager's texture frames.",
        "* A list of Emitters being managed by this Emitter Manager.",
        "* A list of Gravity Wells being managed by this Emitter Manager.",
        "* Sets the texture and frame this Emitter Manager will use to render with.\n                 * \n                 * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n                 * @param key The key of the texture to be used, as stored in the Texture Manager.\n                 * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Emitter Manager will use to render with.\n                 * \n                 * The Frame has to belong to the current Texture being used.\n                 * \n                 * It can be either a string or an index.\n                 * @param frame The name or index of the frame within the Texture.",
        "* Assigns texture frames to an emitter.\n                 * @param frames The texture frames.\n                 * @param emitter The particle emitter to modify.",
        "* Adds an existing Particle Emitter to this Emitter Manager.\n                 * @param emitter The Particle Emitter to add to this Emitter Manager.",
        "* Creates a new Particle Emitter object, adds it to this Emitter Manager and returns a reference to it.\n                 * @param config Configuration settings for the Particle Emitter to create.",
        "* Adds an existing Gravity Well object to this Emitter Manager.\n                 * @param well The Gravity Well to add to this Emitter Manager.",
        "* Creates a new Gravity Well, adds it to this Emitter Manager and returns a reference to it.\n                 * @param config Configuration settings for the Gravity Well to create.",
        "* Emits particles from each active emitter.\n                 * @param count The number of particles to release from each emitter. The default is the emitter's own {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\n                 * @param x The x-coordinate to to emit particles from. The default is the x-coordinate of the emitter's current location.\n                 * @param y The y-coordinate to to emit particles from. The default is the y-coordinate of the emitter's current location.",
        "* Emits particles from each active emitter.\n                 * @param x The x-coordinate to to emit particles from. The default is the x-coordinate of the emitter's current location.\n                 * @param y The y-coordinate to to emit particles from. The default is the y-coordinate of the emitter's current location.\n                 * @param count The number of particles to release from each emitter. The default is the emitter's own {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.",
        "* Pauses this Emitter Manager.\n                 * \n                 * This has the effect of pausing all emitters, and all particles of those emitters, currently under its control.\n                 * \n                 * The particles will still render, but they will not have any of their logic updated.",
        "* Resumes this Emitter Manager, should it have been previously paused.",
        "* Gets all active particle processors (gravity wells).",
        "* Updates all active emitters.\n                 * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n                 * @param delta The delta time, in ms, elapsed since the last frame.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.\n                 * @param value The depth of this Game Object.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n                 * This should only be called during the instantiation of the Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n                 * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n                 * \n                 * Where 0 is to the right, 90 is down, 180 is left.\n                 * \n                 * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n                 * \n                 * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n                 * @param x The x position of this Game Object. Default 0.\n                 * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n                 * @param z The z position of this Game Object. Default 0.\n                 * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n                 * the given area.\n                 * \n                 * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n                 * \n                 * The position does not factor in the size of this Game Object, meaning that only the origin is\n                 * guaranteed to be within the area.\n                 * @param x The x position of the top-left of the random area. Default 0.\n                 * @param y The y position of the top-left of the random area. Default 0.\n                 * @param width The width of the random area.\n                 * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n                 * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n                 * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n                 * @param x The horizontal scale of this Game Object.\n                 * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n                 * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n                 * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n                 * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n                 * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.\n                 * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.\n                 * @param value The visible state of the Game Object.",
        "* A Death Zone.\n                 * \n                 * A Death Zone is a special type of zone that will kill a Particle as soon as it either enters, or leaves, the zone.\n                 * \n                 * The zone consists of a `source` which could be a Geometric shape, such as a Rectangle or Ellipse, or your own\n                 * object as long as it includes a `contains` method for which the Particles can be tested against.",
        "* \n                     * @param source An object instance that has a `contains` method that returns a boolean when given `x` and `y` arguments.\n                     * @param killOnEnter Should the Particle be killed when it enters the zone? `true` or leaves it? `false`",
        "* An object instance that has a `contains` method that returns a boolean when given `x` and `y` arguments.\n                     * This could be a Geometry shape, such as `Phaser.Geom.Circle`, or your own custom object.",
        "* Set to `true` if the Particle should be killed if it enters this zone.\n                     * Set to `false` to kill the Particle if it leaves this zone.",
        "* Checks if the given Particle will be killed or not by this zone.\n                     * @param particle The Particle to be checked against this zone.",
        "* A zone that places particles on a shape's edges.",
        "* \n                     * @param source An object instance with a `getPoints(quantity, stepRate)` method returning an array of points.\n                     * @param quantity The number of particles to place on the source edge. Set to 0 to use `stepRate` instead.\n                     * @param stepRate The distance between each particle. When set, `quantity` is implied and should be set to 0.\n                     * @param yoyo Whether particles are placed from start to end and then end to start. Default false.\n                     * @param seamless Whether one endpoint will be removed if it's identical to the other. Default true.",
        "* An object instance with a `getPoints(quantity, stepRate)` method returning an array of points.",
        "* The points placed on the source edge.",
        "* The number of particles to place on the source edge. Set to 0 to use `stepRate` instead.",
        "* The distance between each particle. When set, `quantity` is implied and should be set to 0.",
        "* Whether particles are placed from start to end and then end to start.",
        "* The counter used for iterating the EdgeZone's points.",
        "* Whether one endpoint will be removed if it's identical to the other.",
        "* Update the {@link Phaser.GameObjects.Particles.Zones.EdgeZone#points} from the EdgeZone's\n                     * {@link Phaser.GameObjects.Particles.Zones.EdgeZone#source}.\n                     * \n                     * Also updates internal properties.",
        "* Change the EdgeZone's source.\n                     * @param source An object instance with a `getPoints(quantity, stepRate)` method returning an array of points.",
        "* Get the next point in the Zone and set its coordinates on the given Particle.\n                     * @param particle The Particle.",
        "* A zone that places particles randomly within a shape's area.",
        "* \n                     * @param source An object instance with a `getRandomPoint(point)` method.",
        "* An object instance with a `getRandomPoint(point)` method.",
        "* Get the next point in the Zone and set its coordinates on the given Particle.\n                     * @param particle The Particle.",
        "* A PathFollower Game Object.\n         * \n         * A PathFollower is a Sprite Game Object with some extra helpers to allow it to follow a Path automatically.\n         * \n         * Anything you can do with a standard Sprite can be done with this PathFollower, such as animate it, tint it,\n         * scale it and so on.\n         * \n         * PathFollowers are bound to a single Path at any one time and can traverse the length of the Path, from start\n         * to finish, forwards or backwards, or from any given point on the Path to its end. They can optionally rotate\n         * to face the direction of the path, be offset from the path coordinates or rotate independently of the Path.",
        "* \n             * @param scene The Scene to which this PathFollower belongs.\n             * @param path The Path this PathFollower is following. It can only follow one Path at a time.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* The Path this PathFollower is following. It can only follow one Path at a time.",
        "* Should the PathFollower automatically rotate to point in the direction of the Path?",
        "* If the PathFollower is rotating to match the Path (@see Phaser.GameObjects.PathFollower#rotateToPath)\n             * this value is added to the rotation value. This allows you to rotate objects to a path but control\n             * the angle of the rotation as well.",
        "* An additional vector to add to the PathFollowers position, allowing you to offset it from the\n             * Path coordinates.",
        "* A Vector2 that stores the current point of the path the follower is on.",
        "* The Tween used for following the Path.",
        "* Settings for the PathFollower.",
        "* Set the Path that this PathFollower should follow.\n             * \n             * Optionally accepts {@link PathConfig} settings.\n             * @param path The Path this PathFollower is following. It can only follow one Path at a time.\n             * @param config Settings for the PathFollower.",
        "* Set whether the PathFollower should automatically rotate to point in the direction of the Path.\n             * @param value Whether the PathFollower should automatically rotate to point in the direction of the Path.\n             * @param offset Rotation offset in degrees. Default 0.",
        "* Is this PathFollower actively following a Path or not?\n             * \n             * To be considered as `isFollowing` it must be currently moving on a Path, and not paused.",
        "* Starts this PathFollower following its given Path.\n             * @param config The duration of the follow, or a PathFollower config object. Default {}.\n             * @param startAt Optional start position of the follow, between 0 and 1. Default 0.",
        "* Pauses this PathFollower. It will still continue to render, but it will remain motionless at the\n             * point on the Path at which you paused it.",
        "* Resumes a previously paused PathFollower.\n             * \n             * If the PathFollower was not paused this has no effect.",
        "* Stops this PathFollower from following the path any longer.\n             * \n             * This will invoke any 'stop' conditions that may exist on the Path, or for the follower.",
        "* Internal update handler that advances this PathFollower along the path.\n             * \n             * Called automatically by the Scene step, should not typically be called directly.\n             * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n             * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n             * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n             * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n             * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n             * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n             * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n             * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n             * \n             * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n             * \n             * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n             * changes what is shown when rendered.\n             * \n             * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n             * \n             * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n             * half of it, you could call `setCrop(0, 0, 400, 600)`.\n             * \n             * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n             * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n             * \n             * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n             * \n             * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n             * \n             * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n             * the renderer to skip several internal calculations.\n             * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n             * @param y The y coordinate to start the crop from.\n             * @param width The width of the crop rectangle in pixels.\n             * @param height The height of the crop rectangle in pixels.",
        "* Sets the texture and frame this Game Object will use to render with.\n             * \n             * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n             * @param key The key of the texture to be used, as stored in the Texture Manager.\n             * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n             * \n             * The Frame has to belong to the current Texture being used.\n             * \n             * It can be either a string or an index.\n             * \n             * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n             * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n             * @param frame The name or index of the frame within the Texture.\n             * @param updateSize Should this call adjust the size of the Game Object? Default true.\n             * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n             * \n             * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n             * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n             * \n             * The tint works by taking the pixel color values from the Game Objects texture, and then\n             * multiplying it by the color value of the tint. You can provide either one color value,\n             * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n             * per corner. The colors are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n             * \n             * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n             * with those in the tint. You can use this for effects such as making a player flash 'white'\n             * if hit by something. You can provide either one color value, in which case the whole\n             * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n             * are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* A Quad Game Object.\n         * \n         * A Quad is a Mesh Game Object pre-configured with two triangles arranged into a rectangle, with a single\n         * texture spread across them.\n         * \n         * You can manipulate the corner points of the quad via the getters and setters such as `topLeftX`, and also\n         * change their alpha and color values. The quad itself can be moved by adjusting the `x` and `y` properties.",
        "* \n             * @param scene The Scene to which this Quad belongs.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Sets the frame this Game Object will use to render with.\n             * \n             * The Frame has to belong to the current Texture being used.\n             * \n             * It can be either a string or an index.\n             * \n             * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n             * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n             * @param frame The name or index of the frame within the Texture.",
        "* The top-left x vertex of this Quad.",
        "* The top-left y vertex of this Quad.",
        "* The top-right x vertex of this Quad.",
        "* The top-right y vertex of this Quad.",
        "* The bottom-left x vertex of this Quad.",
        "* The bottom-left y vertex of this Quad.",
        "* The bottom-right x vertex of this Quad.",
        "* The bottom-right y vertex of this Quad.",
        "* The top-left alpha value of this Quad.",
        "* The top-right alpha value of this Quad.",
        "* The bottom-left alpha value of this Quad.",
        "* The bottom-right alpha value of this Quad.",
        "* The top-left color value of this Quad.",
        "* The top-right color value of this Quad.",
        "* The bottom-left color value of this Quad.",
        "* The bottom-right color value of this Quad.",
        "* Sets the top-left vertex position of this Quad.\n             * @param x The horizontal coordinate of the vertex.\n             * @param y The vertical coordinate of the vertex.",
        "* Sets the top-right vertex position of this Quad.\n             * @param x The horizontal coordinate of the vertex.\n             * @param y The vertical coordinate of the vertex.",
        "* Sets the bottom-left vertex position of this Quad.\n             * @param x The horizontal coordinate of the vertex.\n             * @param y The vertical coordinate of the vertex.",
        "* Sets the bottom-right vertex position of this Quad.\n             * @param x The horizontal coordinate of the vertex.\n             * @param y The vertical coordinate of the vertex.",
        "* Resets the positions of the four corner vertices of this Quad.",
        "* Resets the alpha values used by this Quad back to 1.",
        "* Resets the color values used by this Quad back to 0xffffff.",
        "* Resets the position, alpha and color values used by this Quad.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* Sets the texture and frame this Game Object will use to render with.\n             * \n             * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n             * @param key The key of the texture to be used, as stored in the Texture Manager.\n             * @param frame The name or index of the frame within the Texture.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* A Render Texture.\n         * \n         * A Render Texture is a special texture that allows any number of Game Objects to be drawn to it. You can take many complex objects and\n         * draw them all to this one texture, which can they be used as the texture for other Game Object's. It's a way to generate dynamic\n         * textures at run-time that are WebGL friendly and don't invoke expensive GPU uploads.\n         * \n         * Note that under WebGL a FrameBuffer, which is what the Render Texture uses internally, cannot be anti-aliased. This means\n         * that when drawing objects such as Shapes to a Render Texture they will appear to be drawn with no aliasing, however this\n         * is a technical limitation of WebGL. To get around it, create your shape as a texture in an art package, then draw that\n         * to the Render Texture.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param width The width of the Render Texture. Default 32.\n             * @param height The height of the Render Texture. Default 32.",
        "* A reference to either the Canvas or WebGL Renderer that the Game instance is using.",
        "* A reference to the Texture Manager.",
        "* The tint of the Render Texture when rendered.",
        "* The alpha of the Render Texture when rendered.",
        "* The HTML Canvas Element that the Render Texture is drawing to when using the Canvas Renderer.",
        "* A reference to the Rendering Context belonging to the Canvas Element this Render Texture is drawing to.",
        "* A reference to the GL Frame Buffer this Render Texture is drawing to.\n             * This is only set if Phaser is running with the WebGL Renderer.",
        "* The Texture corresponding to this Render Texture.",
        "* The Frame corresponding to this Render Texture.",
        "* An internal Camera that can be used to move around the Render Texture.\n             * Control it just like you would any Scene Camera. The difference is that it only impacts the placement of what\n             * is drawn to the Render Texture. You can scroll, zoom and rotate this Camera.",
        "* Is this Render Texture dirty or not? If not it won't spend time clearing or filling itself.",
        "* A reference to the WebGL Rendering Context.",
        "* Sets the size of this Game Object.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Resizes the Render Texture to the new dimensions given.\n             * \n             * In WebGL it will destroy and then re-create the frame buffer being used by the Render Texture.\n             * In Canvas it will resize the underlying canvas element.\n             * Both approaches will erase everything currently drawn to the Render Texture.\n             * \n             * If the dimensions given are the same as those already being used, calling this method will do nothing.\n             * @param width The new width of the Render Texture.\n             * @param height The new height of the Render Texture. If not specified, will be set the same as the `width`.",
        "* Set the tint to use when rendering this Render Texture.\n             * @param tint The tint value.",
        "* Set the alpha to use when rendering this Render Texture.\n             * @param alpha The alpha value.",
        "* Stores a copy of this Render Texture in the Texture Manager using the given key.\n             * \n             * After doing this, any texture based Game Object, such as a Sprite, can use the contents of this\n             * Render Texture by using the texture key:\n             * \n             * ```javascript\n             * var rt = this.add.renderTexture(0, 0, 128, 128);\n             * \n             * // Draw something to the Render Texture\n             * \n             * rt.saveTexture('doodle');\n             * \n             * this.add.image(400, 300, 'doodle');\n             * ```\n             * \n             * Updating the contents of this Render Texture will automatically update _any_ Game Object\n             * that is using it as a texture. Calling `saveTexture` again will not save another copy\n             * of the same texture, it will just rename the key of the existing copy.\n             * \n             * By default it will create a single base texture. You can add frames to the texture\n             * by using the `Texture.add` method. After doing this, you can then allow Game Objects\n             * to use a specific frame from a Render Texture.\n             * @param key The unique key to store the texture as within the global Texture Manager.",
        "* Fills the Render Texture with the given color.\n             * @param rgb The color to fill the Render Texture with.\n             * @param alpha The alpha value used by the fill. Default 1.",
        "* Clears the Render Texture.",
        "* Draws the given object, or an array of objects, to this Render Texture using a blend mode of ERASE.\n             * This has the effect of erasing any filled pixels in the objects from this Render Texture.\n             * \n             * It can accept any of the following:\n             * \n             * * Any renderable Game Object, such as a Sprite, Text, Graphics or TileSprite.\n             * * Dynamic and Static Tilemap Layers.\n             * * A Group. The contents of which will be iterated and drawn in turn.\n             * * A Container. The contents of which will be iterated fully, and drawn in turn.\n             * * A Scene's Display List. Pass in `Scene.children` to draw the whole list.\n             * * Another Render Texture.\n             * * A Texture Frame instance.\n             * * A string. This is used to look-up a texture from the Texture Manager.\n             * \n             * Note: You cannot erase a Render Texture from itself.\n             * \n             * If passing in a Group or Container it will only draw children that return `true`\n             * when their `willRender()` method is called. I.e. a Container with 10 children,\n             * 5 of which have `visible=false` will only draw the 5 visible ones.\n             * \n             * If passing in an array of Game Objects it will draw them all, regardless if\n             * they pass a `willRender` check or not.\n             * \n             * You can pass in a string in which case it will look for a texture in the Texture\n             * Manager matching that string, and draw the base frame.\n             * \n             * You can pass in the `x` and `y` coordinates to draw the objects at. The use of\n             * the coordinates differ based on what objects are being drawn. If the object is\n             * a Group, Container or Display List, the coordinates are _added_ to the positions\n             * of the children. For all other types of object, the coordinates are exact.\n             * \n             * Calling this method causes the WebGL batch to flush, so it can write the texture\n             * data to the framebuffer being used internally. The batch is flushed at the end,\n             * after the entries have been iterated. So if you've a bunch of objects to draw,\n             * try and pass them in an array in one single call, rather than making lots of\n             * separate calls.\n             * @param entries Any renderable Game Object, or Group, Container, Display List, other Render Texture, Texture Frame or an array of any of these.\n             * @param x The x position to draw the Frame at, or the offset applied to the object.\n             * @param y The y position to draw the Frame at, or the offset applied to the object.",
        "* Draws the given object, or an array of objects, to this Render Texture.\n             * \n             * It can accept any of the following:\n             * \n             * * Any renderable Game Object, such as a Sprite, Text, Graphics or TileSprite.\n             * * Dynamic and Static Tilemap Layers.\n             * * A Group. The contents of which will be iterated and drawn in turn.\n             * * A Container. The contents of which will be iterated fully, and drawn in turn.\n             * * A Scene's Display List. Pass in `Scene.children` to draw the whole list.\n             * * Another Render Texture.\n             * * A Texture Frame instance.\n             * * A string. This is used to look-up a texture from the Texture Manager.\n             * \n             * Note: You cannot draw a Render Texture to itself.\n             * \n             * If passing in a Group or Container it will only draw children that return `true`\n             * when their `willRender()` method is called. I.e. a Container with 10 children,\n             * 5 of which have `visible=false` will only draw the 5 visible ones.\n             * \n             * If passing in an array of Game Objects it will draw them all, regardless if\n             * they pass a `willRender` check or not.\n             * \n             * You can pass in a string in which case it will look for a texture in the Texture\n             * Manager matching that string, and draw the base frame. If you need to specify\n             * exactly which frame to draw then use the method `drawFrame` instead.\n             * \n             * You can pass in the `x` and `y` coordinates to draw the objects at. The use of\n             * the coordinates differ based on what objects are being drawn. If the object is\n             * a Group, Container or Display List, the coordinates are _added_ to the positions\n             * of the children. For all other types of object, the coordinates are exact.\n             * \n             * The `alpha` and `tint` values are only used by Texture Frames.\n             * Game Objects use their own alpha and tint values when being drawn.\n             * \n             * Calling this method causes the WebGL batch to flush, so it can write the texture\n             * data to the framebuffer being used internally. The batch is flushed at the end,\n             * after the entries have been iterated. So if you've a bunch of objects to draw,\n             * try and pass them in an array in one single call, rather than making lots of\n             * separate calls.\n             * @param entries Any renderable Game Object, or Group, Container, Display List, other Render Texture, Texture Frame or an array of any of these.\n             * @param x The x position to draw the Frame at, or the offset applied to the object.\n             * @param y The y position to draw the Frame at, or the offset applied to the object.\n             * @param alpha The alpha value. Only used for Texture Frames and if not specified defaults to the `globalAlpha` property. Game Objects use their own current alpha value.\n             * @param tint WebGL only. The tint color value. Only used for Texture Frames and if not specified defaults to the `globalTint` property. Game Objects use their own current tint value.",
        "* Draws the Texture Frame to the Render Texture at the given position.\n             * \n             * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n             * \n             * ```javascript\n             * var rt = this.add.renderTexture(0, 0, 800, 600);\n             * rt.drawFrame(key, frame);\n             * ```\n             * \n             * You can optionally provide a position, alpha and tint value to apply to the frame\n             * before it is drawn.\n             * \n             * Calling this method will cause a batch flush, so if you've got a stack of things to draw\n             * in a tight loop, try using the `draw` method instead.\n             * \n             * If you need to draw a Sprite to this Render Texture, use the `draw` method instead.\n             * @param key The key of the texture to be used, as stored in the Texture Manager.\n             * @param frame The name or index of the frame within the Texture.\n             * @param x The x position to draw the frame at. Default 0.\n             * @param y The y position to draw the frame at. Default 0.\n             * @param alpha The alpha to use. If not specified it uses the `globalAlpha` property.\n             * @param tint WebGL only. The tint color to use. If not specified it uses the `globalTint` property.",
        "* Internal destroy handler, called as part of the destroy process.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n             * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n             * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n             * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n             * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n             * \n             * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n             * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n             * \n             * The tint works by taking the pixel color values from the Game Objects texture, and then\n             * multiplying it by the color value of the tint. You can provide either one color value,\n             * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n             * per corner. The colors are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n             * \n             * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n             * with those in the tint. You can use this for effects such as making a player flash 'white'\n             * if hit by something. You can provide either one color value, in which case the whole\n             * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n             * are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The Arc Shape is a Game Object that can be added to a Scene, Group or Container. You can\n         * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n         * it for input or physics. It provides a quick and easy way for you to render this shape in your\n         * game without using a texture, while still taking advantage of being fully batched in WebGL.\n         * \n         * This shape supports both fill and stroke colors.\n         * \n         * When it renders it displays an arc shape. You can control the start and end angles of the arc,\n         * as well as if the angles are winding clockwise or anti-clockwise. With the default settings\n         * it renders as a complete circle. By changing the angles you can create other arc shapes,\n         * such as half-circles.\n         * \n         * Arcs also have an `iterations` property and corresponding `setIterations` method. This allows\n         * you to control how smooth the shape renders in WebGL, by controlling the number of iterations\n         * that take place during construction.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param radius The radius of the arc. Default 128.\n             * @param startAngle The start angle of the arc, in degrees. Default 0.\n             * @param endAngle The end angle of the arc, in degrees. Default 360.\n             * @param anticlockwise The winding order of the start and end angles. Default false.\n             * @param fillColor The color the arc will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the arc will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* The number of iterations used when drawing the arc.\n             * Increase this value for smoother arcs, at the cost of more polygons being rendered.\n             * Modify this value by small amounts, such as 0.01.",
        "* The radius of the arc.",
        "* The start angle of the arc, in degrees.",
        "* The end angle of the arc, in degrees.",
        "* The winding order of the start and end angles.",
        "* Sets the radius of the arc.\n             * This call can be chained.\n             * @param value The value to set the radius to.",
        "* Sets the number of iterations used when drawing the arc.\n             * Increase this value for smoother arcs, at the cost of more polygons being rendered.\n             * Modify this value by small amounts, such as 0.01.\n             * This call can be chained.\n             * @param value The value to set the iterations to.",
        "* Sets the starting angle of the arc, in degrees.\n             * This call can be chained.\n             * @param value The value to set the starting angle to.",
        "* Sets the ending angle of the arc, in degrees.\n             * This call can be chained.\n             * @param value The value to set the ending angle to.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The Curve Shape is a Game Object that can be added to a Scene, Group or Container. You can\n         * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n         * it for input or physics. It provides a quick and easy way for you to render this shape in your\n         * game without using a texture, while still taking advantage of being fully batched in WebGL.\n         * \n         * This shape supports both fill and stroke colors.\n         * \n         * To render a Curve Shape you must first create a `Phaser.Curves.Curve` object, then pass it to\n         * the Curve Shape in the constructor.\n         * \n         * The Curve shape also has a `smoothness` property and corresponding `setSmoothness` method.\n         * This allows you to control how smooth the shape renders in WebGL, by controlling the number of iterations\n         * that take place during construction. Increase and decrease the default value for smoother, or more\n         * jagged, shapes.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param curve The Curve object to use to create the Shape.\n             * @param fillColor The color the curve will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the curve will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* The smoothness of the curve. The number of points used when rendering it.\n             * Increase this value for smoother curves, at the cost of more polygons being rendered.",
        "* Sets the smoothness of the curve. The number of points used when rendering it.\n             * Increase this value for smoother curves, at the cost of more polygons being rendered.\n             * This call can be chained.\n             * @param value The value to set the smoothness to.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The Ellipse Shape is a Game Object that can be added to a Scene, Group or Container. You can\n         * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n         * it for input or physics. It provides a quick and easy way for you to render this shape in your\n         * game without using a texture, while still taking advantage of being fully batched in WebGL.\n         * \n         * This shape supports both fill and stroke colors.\n         * \n         * When it renders it displays an ellipse shape. You can control the width and height of the ellipse.\n         * If the width and height match it will render as a circle. If the width is less than the height,\n         * it will look more like an egg shape.\n         * \n         * The Ellipse shape also has a `smoothness` property and corresponding `setSmoothness` method.\n         * This allows you to control how smooth the shape renders in WebGL, by controlling the number of iterations\n         * that take place during construction. Increase and decrease the default value for smoother, or more\n         * jagged, shapes.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param width The width of the ellipse. An ellipse with equal width and height renders as a circle. Default 128.\n             * @param height The height of the ellipse. An ellipse with equal width and height renders as a circle. Default 128.\n             * @param fillColor The color the ellipse will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the ellipse will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* The smoothness of the ellipse. The number of points used when rendering it.\n             * Increase this value for a smoother ellipse, at the cost of more polygons being rendered.",
        "* Sets the size of the ellipse by changing the underlying geometry data, rather than scaling the object.\n             * This call can be chained.\n             * @param width The width of the ellipse.\n             * @param height The height of the ellipse.",
        "* Sets the smoothness of the ellipse. The number of points used when rendering it.\n             * Increase this value for a smoother ellipse, at the cost of more polygons being rendered.\n             * This call can be chained.\n             * @param value The value to set the smoothness to.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The Grid Shape is a Game Object that can be added to a Scene, Group or Container. You can\n         * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n         * it for input or physics. It provides a quick and easy way for you to render this shape in your\n         * game without using a texture, while still taking advantage of being fully batched in WebGL.\n         * \n         * This shape supports only fill colors and cannot be stroked.\n         * \n         * A Grid Shape allows you to display a grid in your game, where you can control the size of the\n         * grid as well as the width and height of the grid cells. You can set a fill color for each grid\n         * cell as well as an alternate fill color. When the alternate fill color is set then the grid\n         * cells will alternate the fill colors as they render, creating a chess-board effect. You can\n         * also optionally have an outline fill color. If set, this draws lines between the grid cells\n         * in the given color. If you specify an outline color with an alpha of zero, then it will draw\n         * the cells spaced out, but without the lines between them.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param width The width of the grid. Default 128.\n             * @param height The height of the grid. Default 128.\n             * @param cellWidth The width of one cell in the grid. Default 32.\n             * @param cellHeight The height of one cell in the grid. Default 32.\n             * @param fillColor The color the grid cells will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\n             * @param outlineFillColor The color of the lines between the grid cells. See the `setOutline` method.\n             * @param outlineFillAlpha The alpha of the lines between the grid cells.",
        "* The width of each grid cell.\n             * Must be a positive value.",
        "* The height of each grid cell.\n             * Must be a positive value.",
        "* Will the grid render its cells in the `fillColor`?",
        "* The color of the lines between each grid cell.",
        "* The alpha value for the color of the lines between each grid cell.",
        "* Will the grid display the lines between each cell when it renders?",
        "* Will the grid render the alternating cells in the `altFillColor`?",
        "* The color the alternating grid cells will be filled with, i.e. 0xff0000 for red.",
        "* The alpha the alternating grid cells will be filled with.\n             * You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Sets the fill color and alpha level the grid cells will use when rendering.\n             * \n             * If this method is called with no values then the grid cells will not be rendered, \n             * however the grid lines and alternating cells may still be.\n             * \n             * Also see the `setOutlineStyle` and `setAltFillStyle` methods.\n             * \n             * This call can be chained.\n             * @param fillColor The color the grid cells will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property. Default 1.",
        "* Sets the fill color and alpha level that the alternating grid cells will use.\n             * \n             * If this method is called with no values then alternating grid cells will not be rendered in a different color.\n             * \n             * Also see the `setOutlineStyle` and `setFillStyle` methods.\n             * \n             * This call can be chained.\n             * @param fillColor The color the alternating grid cells will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the alternating grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property. Default 1.",
        "* Sets the fill color and alpha level that the lines between each grid cell will use.\n             * \n             * If this method is called with no values then the grid lines will not be rendered at all, however\n             * the cells themselves may still be if they have colors set.\n             * \n             * Also see the `setFillStyle` and `setAltFillStyle` methods.\n             * \n             * This call can be chained.\n             * @param fillColor The color the lines between the grid cells will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the lines between the grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property. Default 1.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The IsoBox Shape is a Game Object that can be added to a Scene, Group or Container. You can\n         * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n         * it for input or physics. It provides a quick and easy way for you to render this shape in your\n         * game without using a texture, while still taking advantage of being fully batched in WebGL.\n         * \n         * This shape supports only fill colors and cannot be stroked.\n         * \n         * An IsoBox is an 'isometric' rectangle. Each face of it has a different fill color. You can set\n         * the color of the top, left and right faces of the rectangle respectively. You can also choose\n         * which of the faces are rendered via the `showTop`, `showLeft` and `showRight` properties.\n         * \n         * You cannot view an IsoBox from under-neath, however you can change the 'angle' by setting\n         * the `projection` property.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param size The width of the iso box in pixels. The left and right faces will be exactly half this value. Default 48.\n             * @param height The height of the iso box. The left and right faces will be this tall. The overall height of the isobox will be this value plus half the `size` value. Default 32.\n             * @param fillTop The fill color of the top face of the iso box. Default 0xeeeeee.\n             * @param fillLeft The fill color of the left face of the iso box. Default 0x999999.\n             * @param fillRight The fill color of the right face of the iso box. Default 0xcccccc.",
        "* The projection level of the iso box. Change this to change the 'angle' at which you are looking at the box.",
        "* The color used to fill in the top of the iso box.",
        "* The color used to fill in the left-facing side of the iso box.",
        "* The color used to fill in the right-facing side of the iso box.",
        "* Controls if the top-face of the iso box be rendered.",
        "* Controls if the left-face of the iso box be rendered.",
        "* Controls if the right-face of the iso box be rendered.",
        "* Sets the projection level of the iso box. Change this to change the 'angle' at which you are looking at the box.\n             * This call can be chained.\n             * @param value The value to set the projection to.",
        "* Sets which faces of the iso box will be rendered.\n             * This call can be chained.\n             * @param showTop Show the top-face of the iso box. Default true.\n             * @param showLeft Show the left-face of the iso box. Default true.\n             * @param showRight Show the right-face of the iso box. Default true.",
        "* Sets the fill colors for each face of the iso box.\n             * This call can be chained.\n             * @param fillTop The color used to fill the top of the iso box.\n             * @param fillLeft The color used to fill in the left-facing side of the iso box.\n             * @param fillRight The color used to fill in the right-facing side of the iso box.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The IsoTriangle Shape is a Game Object that can be added to a Scene, Group or Container. You can\n         * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n         * it for input or physics. It provides a quick and easy way for you to render this shape in your\n         * game without using a texture, while still taking advantage of being fully batched in WebGL.\n         * \n         * This shape supports only fill colors and cannot be stroked.\n         * \n         * An IsoTriangle is an 'isometric' triangle. Think of it like a pyramid. Each face has a different\n         * fill color. You can set the color of the top, left and right faces of the triangle respectively\n         * You can also choose which of the faces are rendered via the `showTop`, `showLeft` and `showRight` properties.\n         * \n         * You cannot view an IsoTriangle from under-neath, however you can change the 'angle' by setting\n         * the `projection` property. The `reversed` property controls if the IsoTriangle is rendered upside\n         * down or not.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param size The width of the iso triangle in pixels. The left and right faces will be exactly half this value. Default 48.\n             * @param height The height of the iso triangle. The left and right faces will be this tall. The overall height of the iso triangle will be this value plus half the `size` value. Default 32.\n             * @param reversed Is the iso triangle upside down? Default false.\n             * @param fillTop The fill color of the top face of the iso triangle. Default 0xeeeeee.\n             * @param fillLeft The fill color of the left face of the iso triangle. Default 0x999999.\n             * @param fillRight The fill color of the right face of the iso triangle. Default 0xcccccc.",
        "* The projection level of the iso box. Change this to change the 'angle' at which you are looking at the box.",
        "* The color used to fill in the top of the iso triangle. This is only used if the triangle is reversed.",
        "* The color used to fill in the left-facing side of the iso triangle.",
        "* The color used to fill in the right-facing side of the iso triangle.",
        "* Controls if the top-face of the iso triangle be rendered.",
        "* Controls if the left-face of the iso triangle be rendered.",
        "* Controls if the right-face of the iso triangle be rendered.",
        "* Sets if the iso triangle will be rendered upside down or not.",
        "* Sets the projection level of the iso triangle. Change this to change the 'angle' at which you are looking at the pyramid.\n             * This call can be chained.\n             * @param value The value to set the projection to.",
        "* Sets if the iso triangle will be rendered upside down or not.\n             * This call can be chained.\n             * @param reversed Sets if the iso triangle will be rendered upside down or not.",
        "* Sets which faces of the iso triangle will be rendered.\n             * This call can be chained.\n             * @param showTop Show the top-face of the iso triangle (only if `reversed` is true) Default true.\n             * @param showLeft Show the left-face of the iso triangle. Default true.\n             * @param showRight Show the right-face of the iso triangle. Default true.",
        "* Sets the fill colors for each face of the iso triangle.\n             * This call can be chained.\n             * @param fillTop The color used to fill the top of the iso triangle.\n             * @param fillLeft The color used to fill in the left-facing side of the iso triangle.\n             * @param fillRight The color used to fill in the right-facing side of the iso triangle.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The Line Shape is a Game Object that can be added to a Scene, Group or Container. You can\n         * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n         * it for input or physics. It provides a quick and easy way for you to render this shape in your\n         * game without using a texture, while still taking advantage of being fully batched in WebGL.\n         * \n         * This shape supports only stroke colors and cannot be filled.\n         * \n         * A Line Shape allows you to draw a line between two points in your game. You can control the\n         * stroke color and thickness of the line. In WebGL only you can also specify a different\n         * thickness for the start and end of the line, allowing you to render lines that taper-off.\n         * \n         * If you need to draw multiple lines in a sequence you may wish to use the Polygon Shape instead.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param x1 The horizontal position of the start of the line. Default 0.\n             * @param y1 The vertical position of the start of the line. Default 0.\n             * @param x2 The horizontal position of the end of the line. Default 128.\n             * @param y2 The vertical position of the end of the line. Default 0.\n             * @param strokeColor The color the line will be drawn in, i.e. 0xff0000 for red.\n             * @param strokeAlpha The alpha the line will be drawn in. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* The width (or thickness) of the line.\n             * See the setLineWidth method for extra details on changing this on WebGL.",
        "* Sets the width of the line.\n             * \n             * When using the WebGL renderer you can have different start and end widths.\n             * When using the Canvas renderer only the `startWidth` value is used. The `endWidth` is ignored.\n             * \n             * This call can be chained.\n             * @param startWidth The start width of the line.\n             * @param endWidth The end width of the line. Only used in WebGL.",
        "* Sets the start and end coordinates of this Line.\n             * @param x1 The horizontal position of the start of the line. Default 0.\n             * @param y1 The vertical position of the start of the line. Default 0.\n             * @param x2 The horizontal position of the end of the line. Default 0.\n             * @param y2 The vertical position of the end of the line. Default 0.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The Polygon Shape is a Game Object that can be added to a Scene, Group or Container. You can\n         * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n         * it for input or physics. It provides a quick and easy way for you to render this shape in your\n         * game without using a texture, while still taking advantage of being fully batched in WebGL.\n         * \n         * This shape supports both fill and stroke colors.\n         * \n         * The Polygon Shape is created by providing a list of points, which are then used to create an\n         * internal Polygon geometry object. The points can be set from a variety of formats:\n         * \n         * - A string containing paired values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\n         * - An array of Point or Vector2 objects: `[new Phaser.Math.Vec2(x1, y1), ...]`\n         * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n         * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\n         * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\n         * \n         * By default the `x` and `y` coordinates of this Shape refer to the center of it. However, depending\n         * on the coordinates of the points provided, the final shape may be rendered offset from its origin.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param points The points that make up the polygon.\n             * @param fillColor The color the polygon will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the polygon will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Smooths the polygon over the number of iterations specified.\n             * The base polygon data will be updated and replaced with the smoothed values.\n             * This call can be chained.\n             * @param iterations The number of times to apply the polygon smoothing. Default 1.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The Rectangle Shape is a Game Object that can be added to a Scene, Group or Container. You can\n         * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n         * it for input or physics. It provides a quick and easy way for you to render this shape in your\n         * game without using a texture, while still taking advantage of being fully batched in WebGL.\n         * \n         * This shape supports both fill and stroke colors.\n         * \n         * You can change the size of the rectangle by changing the `width` and `height` properties.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param width The width of the rectangle. Default 128.\n             * @param height The height of the rectangle. Default 128.\n             * @param fillColor The color the rectangle will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the rectangle will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The Shape Game Object is a base class for the various different shapes, such as the Arc, Star or Polygon.\n         * You cannot add a Shape directly to your Scene, it is meant as a base for your own custom Shape classes.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param type The internal type of the Shape.\n             * @param data The data of the source shape geometry, if any.",
        "* The source Shape data. Typically a geometry object.\n             * You should not manipulate this directly.",
        "* Holds the polygon path data for filled rendering.",
        "* Holds the earcut polygon path index data for filled rendering.",
        "* The fill color used by this Shape.",
        "* The fill alpha value used by this Shape.",
        "* The stroke color used by this Shape.",
        "* The stroke alpha value used by this Shape.",
        "* The stroke line width used by this Shape.",
        "* Controls if this Shape is filled or not.\n             * Note that some Shapes do not support being filled (such as Line shapes)",
        "* Controls if this Shape is stroked or not.\n             * Note that some Shapes do not support being stroked (such as Iso Box shapes)",
        "* Controls if this Shape path is closed during rendering when stroked.\n             * Note that some Shapes are always closed when stroked (such as Ellipse shapes)",
        "* Sets the fill color and alpha for this Shape.\n             * \n             * If you wish for the Shape to not be filled then call this method with no arguments, or just set `isFilled` to `false`.\n             * \n             * Note that some Shapes do not support fill colors, such as the Line shape.\n             * \n             * This call can be chained.\n             * @param color The color used to fill this shape. If not provided the Shape will not be filled.\n             * @param alpha The alpha value used when filling this shape, if a fill color is given. Default 1.",
        "* Sets the stroke color and alpha for this Shape.\n             * \n             * If you wish for the Shape to not be stroked then call this method with no arguments, or just set `isStroked` to `false`.\n             * \n             * Note that some Shapes do not support being stroked, such as the Iso Box shape.\n             * \n             * This call can be chained.\n             * @param lineWidth The width of line to stroke with. If not provided or undefined the Shape will not be stroked.\n             * @param color The color used to stroke this shape. If not provided the Shape will not be stroked.\n             * @param alpha The alpha value used when stroking this shape, if a stroke color is given. Default 1.",
        "* Sets if this Shape path is closed during rendering when stroked.\n             * Note that some Shapes are always closed when stroked (such as Ellipse shapes)\n             * \n             * This call can be chained.\n             * @param value Set to `true` if the Shape should be closed when stroked, otherwise `false`.",
        "* Internal destroy handler, called as part of the destroy process.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The Star Shape is a Game Object that can be added to a Scene, Group or Container. You can\n         * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n         * it for input or physics. It provides a quick and easy way for you to render this shape in your\n         * game without using a texture, while still taking advantage of being fully batched in WebGL.\n         * \n         * This shape supports both fill and stroke colors.\n         * \n         * As the name implies, the Star shape will display a star in your game. You can control several\n         * aspects of it including the number of points that constitute the star. The default is 5. If\n         * you change it to 4 it will render as a diamond. If you increase them, you'll get a more spiky\n         * star shape.\n         * \n         * You can also control the inner and outer radius, which is how 'long' each point of the star is.\n         * Modify these values to create more interesting shapes.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param points The number of points on the star. Default 5.\n             * @param innerRadius The inner radius of the star. Default 32.\n             * @param outerRadius The outer radius of the star. Default 64.\n             * @param fillColor The color the star will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the star will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Sets the number of points that make up the Star shape.\n             * This call can be chained.\n             * @param value The amount of points the Star will have.",
        "* Sets the inner radius of the Star shape.\n             * This call can be chained.\n             * @param value The amount to set the inner radius to.",
        "* Sets the outer radius of the Star shape.\n             * This call can be chained.\n             * @param value The amount to set the outer radius to.",
        "* The number of points that make up the Star shape.",
        "* The inner radius of the Star shape.",
        "* The outer radius of the Star shape.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The Triangle Shape is a Game Object that can be added to a Scene, Group or Container. You can\n         * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\n         * it for input or physics. It provides a quick and easy way for you to render this shape in your\n         * game without using a texture, while still taking advantage of being fully batched in WebGL.\n         * \n         * This shape supports both fill and stroke colors.\n         * \n         * The Triangle consists of 3 lines, joining up to form a triangular shape. You can control the\n         * position of each point of these lines. The triangle is always closed and cannot have an open\n         * face. If you require that, consider using a Polygon instead.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world. Default 0.\n             * @param y The vertical position of this Game Object in the world. Default 0.\n             * @param x1 The horizontal position of the first point in the triangle. Default 0.\n             * @param y1 The vertical position of the first point in the triangle. Default 128.\n             * @param x2 The horizontal position of the second point in the triangle. Default 64.\n             * @param y2 The vertical position of the second point in the triangle. Default 0.\n             * @param x3 The horizontal position of the third point in the triangle. Default 128.\n             * @param y3 The vertical position of the third point in the triangle. Default 128.\n             * @param fillColor The color the triangle will be filled with, i.e. 0xff0000 for red.\n             * @param fillAlpha The alpha the triangle will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.",
        "* Sets the data for the lines that make up this Triangle shape.\n             * @param x1 The horizontal position of the first point in the triangle. Default 0.\n             * @param y1 The vertical position of the first point in the triangle. Default 0.\n             * @param x2 The horizontal position of the second point in the triangle. Default 0.\n             * @param y2 The vertical position of the second point in the triangle. Default 0.\n             * @param x3 The horizontal position of the third point in the triangle. Default 0.\n             * @param y3 The vertical position of the third point in the triangle. Default 0.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* A Sprite Game Object.\n         * \n         * A Sprite Game Object is used for the display of both static and animated images in your game.\n         * Sprites can have input events and physics bodies. They can also be tweened, tinted, scrolled\n         * and animated.\n         * \n         * The main difference between a Sprite and an Image Game Object is that you cannot animate Images.\n         * As such, Sprites take a fraction longer to process and have a larger API footprint due to the Animation\n         * Component. If you do not require animation then you can safely use Images to replace Sprites in all cases.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* The Animation Controller of this Sprite.",
        "* Update this Sprite's animations.\n             * @param time The current timestamp.\n             * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Start playing the given animation.\n             * @param key The string-based key of the animation to play.\n             * @param ignoreIfPlaying If an animation is already playing then ignore this call. Default false.\n             * @param startFrame Optionally start the animation playing from this frame index. Default 0.",
        "* Build a JSON representation of this Sprite.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n             * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n             * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n             * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n             * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n             * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n             * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n             * \n             * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n             * \n             * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n             * changes what is shown when rendered.\n             * \n             * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n             * \n             * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n             * half of it, you could call `setCrop(0, 0, 400, 600)`.\n             * \n             * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n             * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n             * \n             * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n             * \n             * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n             * \n             * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n             * the renderer to skip several internal calculations.\n             * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n             * @param y The y coordinate to start the crop from.\n             * @param width The width of the crop rectangle in pixels.\n             * @param height The height of the crop rectangle in pixels.",
        "* Sets the texture and frame this Game Object will use to render with.\n             * \n             * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n             * @param key The key of the texture to be used, as stored in the Texture Manager.\n             * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n             * \n             * The Frame has to belong to the current Texture being used.\n             * \n             * It can be either a string or an index.\n             * \n             * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n             * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n             * @param frame The name or index of the frame within the Texture.\n             * @param updateSize Should this call adjust the size of the Game Object? Default true.\n             * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n             * \n             * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n             * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n             * \n             * The tint works by taking the pixel color values from the Game Objects texture, and then\n             * multiplying it by the color value of the tint. You can provide either one color value,\n             * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n             * per corner. The colors are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n             * \n             * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n             * with those in the tint. You can use this for effects such as making a player flash 'white'\n             * if hit by something. You can provide either one color value, in which case the whole\n             * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n             * are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* A Text Game Object.\n         * \n         * Text objects work by creating their own internal hidden Canvas and then renders text to it using\n         * the standard Canvas `fillText` API. It then creates a texture from this canvas which is rendered\n         * to your game during the render pass.\n         * \n         * Because it uses the Canvas API you can take advantage of all the features this offers, such as\n         * applying gradient fills to the text, or strokes, shadows and more. You can also use custom fonts\n         * loaded externally, such as Google or TypeKit Web fonts.\n         * \n         * **Important:** If the font you wish to use has a space or digit in its name, such as\n         * 'Press Start 2P' or 'Roboto Condensed', then you _must_ put the font name in quotes, either\n         * when creating the Text object, or when setting the font via `setFont` or `setFontFamily`. I.e.:\n         * \n         * ```javascript\n         * this.add.text(0, 0, 'Hello World', { fontFamily: '\"Roboto Condensed\"' });\n         * ```\n         * \n         * Equally, if you wish to provide a list of fallback fonts, then you should ensure they are all\n         * quoted properly, too:\n         * \n         * ```javascript\n         * this.add.text(0, 0, 'Hello World', { fontFamily: 'Verdana, \"Times New Roman\", Tahoma, serif' });\n         * ```\n         * \n         * You can only display fonts that are currently loaded and available to the browser: therefore fonts must\n         * be pre-loaded. Phaser does not do ths for you, so you will require the use of a 3rd party font loader,\n         * or have the fonts ready available in the CSS on the page in which your Phaser game resides.\n         * \n         * See {@link http://www.jordanm.co.uk/tinytype this compatibility table} for the available default fonts\n         * across mobile browsers.\n         * \n         * A note on performance: Every time the contents of a Text object changes, i.e. changing the text being\n         * displayed, or the style of the text, it needs to remake the Text canvas, and if on WebGL, re-upload the\n         * new texture to the GPU. This can be an expensive operation if used often, or with large quantities of\n         * Text objects in your game. If you run into performance issues you would be better off using Bitmap Text\n         * instead, as it benefits from batching and avoids expensive Canvas API calls.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param text The text this Text object will display.\n             * @param style The text style configuration object.",
        "* Returns an object containing dimensions of the Text object.\n             * @param text The Text object to calculate the size from.\n             * @param size The Text metrics to use when calculating the size.\n             * @param lines The lines of text to calculate the size from.",
        "* Calculates the ascent, descent and fontSize of a given font style.\n             * @param textStyle The TextStyle object to measure.",
        "* The renderer in use by this Text object.",
        "* The canvas element that the text is rendered to.",
        "* The context of the canvas element that the text is rendered to.",
        "* The Text Style object.\n             * \n             * Manages the style of this Text object.",
        "* Whether to automatically round line positions.",
        "* The Regular Expression that is used to split the text up into lines, in\n             * multi-line text. By default this is `/(?:\\r\\n|\\r|\\n)/`.\n             * You can change this RegExp to be anything else that you may need.",
        "* Specify a padding value which is added to the line width and height when calculating the Text size.\n             * Allows you to add extra spacing if the browser is unable to accurately determine the true font dimensions.",
        "* The width of this Text object.",
        "* The height of this Text object.",
        "* The line spacing value.\n             * This value is added to the font height to calculate the overall line height.\n             * Only has an effect if this Text object contains multiple lines of text.\n             * \n             * If you update this property directly, instead of using the `setLineSpacing` method, then\n             * be sure to call `updateText` after, or you won't see the change reflected in the Text object.",
        "* Whether the text or its settings have changed and need updating.",
        "* Initialize right to left text.",
        "* Greedy wrapping algorithm that will wrap words as the line grows longer than its horizontal\n             * bounds.\n             * @param text The text to perform word wrap detection against.",
        "* Advanced wrapping algorithm that will wrap words as the line grows longer than its horizontal\n             * bounds. Consecutive spaces will be collapsed and replaced with a single space. Lines will be\n             * trimmed of white space before processing. Throws an error if wordWrapWidth is less than a\n             * single character.\n             * @param text The text to perform word wrap detection against.\n             * @param context The Canvas Rendering Context.\n             * @param wordWrapWidth The word wrap width.",
        "* Greedy wrapping algorithm that will wrap words as the line grows longer than its horizontal\n             * bounds. Spaces are not collapsed and whitespace is not trimmed.\n             * @param text The text to perform word wrap detection against.\n             * @param context The Canvas Rendering Context.\n             * @param wordWrapWidth The word wrap width.",
        "* Runs the given text through this Text objects word wrapping and returns the results as an\n             * array, where each element of the array corresponds to a wrapped line of text.\n             * @param text The text for which the wrapping will be calculated. If unspecified, the Text objects current text will be used.",
        "* Set the text to display.\n             * \n             * An array of strings will be joined with `\\n` line breaks.\n             * @param value The string, or array of strings, to be set as the content of this Text object.",
        "* Set the text style.\n             * @param style The style settings to set.",
        "* Set the font.\n             * \n             * If a string is given, the font family is set.\n             * \n             * If an object is given, the `fontFamily`, `fontSize` and `fontStyle`\n             * properties of that object are set.\n             * \n             * **Important:** If the font you wish to use has a space or digit in its name, such as\n             * 'Press Start 2P' or 'Roboto Condensed', then you _must_ put the font name in quotes:\n             * \n             * ```javascript\n             * Text.setFont('\"Roboto Condensed\"');\n             * ```\n             * \n             * Equally, if you wish to provide a list of fallback fonts, then you should ensure they are all\n             * quoted properly, too:\n             * \n             * ```javascript\n             * Text.setFont('Verdana, \"Times New Roman\", Tahoma, serif');\n             * ```\n             * @param font The font family or font settings to set.",
        "* Set the font family.\n             * \n             * **Important:** If the font you wish to use has a space or digit in its name, such as\n             * 'Press Start 2P' or 'Roboto Condensed', then you _must_ put the font name in quotes:\n             * \n             * ```javascript\n             * Text.setFont('\"Roboto Condensed\"');\n             * ```\n             * \n             * Equally, if you wish to provide a list of fallback fonts, then you should ensure they are all\n             * quoted properly, too:\n             * \n             * ```javascript\n             * Text.setFont('Verdana, \"Times New Roman\", Tahoma, serif');\n             * ```\n             * @param family The font family.",
        "* Set the font size.\n             * @param size The font size.",
        "* Set the font style.\n             * @param style The font style.",
        "* Set a fixed width and height for the text.\n             * \n             * Pass in `0` for either of these parameters to disable fixed width or height respectively.\n             * @param width The fixed width to set. `0` disables fixed width.\n             * @param height The fixed height to set. `0` disables fixed height.",
        "* Set the background color.\n             * @param color The background color.",
        "* Set the fill style to be used by the Text object.\n             * \n             * This can be any valid CanvasRenderingContext2D fillStyle value, such as\n             * a color (in hex, rgb, rgba, hsl or named values), a gradient or a pattern.\n             * \n             * See the [MDN fillStyle docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle) for more details.\n             * @param color The text fill style. Can be any valid CanvasRenderingContext `fillStyle` value.",
        "* Set the text fill color.\n             * @param color The text fill color.",
        "* Set the stroke settings.\n             * @param color The stroke color.\n             * @param thickness The stroke thickness.",
        "* Set the shadow settings.\n             * @param x The horizontal shadow offset. Default 0.\n             * @param y The vertical shadow offset. Default 0.\n             * @param color The shadow color. Default '#000'.\n             * @param blur The shadow blur radius. Default 0.\n             * @param shadowStroke Whether to stroke the shadow. Default false.\n             * @param shadowFill Whether to fill the shadow. Default true.",
        "* Set the shadow offset.\n             * @param x The horizontal shadow offset.\n             * @param y The vertical shadow offset.",
        "* Set the shadow color.\n             * @param color The shadow color.",
        "* Set the shadow blur radius.\n             * @param blur The shadow blur radius.",
        "* Enable or disable shadow stroke.\n             * @param enabled Whether shadow stroke is enabled or not.",
        "* Enable or disable shadow fill.\n             * @param enabled Whether shadow fill is enabled or not.",
        "* Set the width (in pixels) to use for wrapping lines. Pass in null to remove wrapping by width.\n             * @param width The maximum width of a line in pixels. Set to null to remove wrapping.\n             * @param useAdvancedWrap Whether or not to use the advanced wrapping\n             * algorithm. If true, spaces are collapsed and whitespace is trimmed from lines. If false,\n             * spaces and whitespace are left as is. Default false.",
        "* Set a custom callback for wrapping lines. Pass in null to remove wrapping by callback.\n             * @param callback A custom function that will be responsible for wrapping the\n             * text. It will receive two arguments: text (the string to wrap), textObject (this Text\n             * instance). It should return the wrapped lines either as an array of lines or as a string with\n             * newline characters in place to indicate where breaks should happen.\n             * @param scope The scope that will be applied when the callback is invoked. Default null.",
        "* Set the text alignment.\n             * \n             * Expects values like `'left'`, `'right'`, `'center'` or `'justified'`.\n             * @param align The text alignment.",
        "* Set the resolution used by this Text object.\n             * \n             * By default it will be set to match the resolution set in the Game Config,\n             * but you can override it via this method, or by specifying it in the Text style configuration object.\n             * \n             * It allows for much clearer text on High DPI devices, at the cost of memory because it uses larger\n             * internal Canvas textures for the Text.\n             * \n             * Therefore, please use with caution, as the more high res Text you have, the more memory it uses.\n             * @param value The resolution for this Text object to use.",
        "* Sets the line spacing value.\n             * \n             * This value is _added_ to the height of the font when calculating the overall line height.\n             * This only has an effect if this Text object consists of multiple lines of text.\n             * @param value The amount to add to the font height to achieve the overall line height.",
        "* Set the text padding.\n             * \n             * 'left' can be an object.\n             * \n             * If only 'left' and 'top' are given they are treated as 'x' and 'y'.\n             * @param left The left padding value, or a padding config object.\n             * @param top The top padding value.\n             * @param right The right padding value.\n             * @param bottom The bottom padding value.",
        "* Set the maximum number of lines to draw.\n             * @param max The maximum number of lines to draw. Default 0.",
        "* Update the displayed text.",
        "* Get the current text metrics.",
        "* The text string being rendered by this Text Game Object.",
        "* Build a JSON representation of the Text object.",
        "* Internal destroy handler, called as part of the destroy process.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n             * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n             * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n             * \n             * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n             * \n             * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n             * changes what is shown when rendered.\n             * \n             * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n             * \n             * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n             * half of it, you could call `setCrop(0, 0, 400, 600)`.\n             * \n             * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n             * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n             * \n             * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n             * \n             * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n             * \n             * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n             * the renderer to skip several internal calculations.\n             * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n             * @param y The y coordinate to start the crop from.\n             * @param width The width of the crop rectangle in pixels.\n             * @param height The height of the crop rectangle in pixels.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n             * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n             * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n             * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n             * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n             * \n             * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n             * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n             * \n             * The tint works by taking the pixel color values from the Game Objects texture, and then\n             * multiplying it by the color value of the tint. You can provide either one color value,\n             * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n             * per corner. The colors are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n             * \n             * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n             * with those in the tint. You can use this for effects such as making a player flash 'white'\n             * if hit by something. You can provide either one color value, in which case the whole\n             * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n             * are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* A TextStyle class manages all of the style settings for a Text object.\n         * \n         * Text Game Objects create a TextStyle instance automatically, which is\n         * accessed via the `Text.style` property. You do not normally need to\n         * instantiate one yourself.",
        "* \n             * @param text The Text object that this TextStyle is styling.\n             * @param style The style settings to set.",
        "* The Text object that this TextStyle is styling.",
        "* The font family.",
        "* The font size.",
        "* The font style.",
        "* The background color.",
        "* The text fill color.",
        "* The text stroke color.",
        "* The text stroke thickness.",
        "* The horizontal shadow offset.",
        "* The vertical shadow offset.",
        "* The shadow color.",
        "* The shadow blur radius.",
        "* Whether shadow stroke is enabled or not.",
        "* Whether shadow fill is enabled or not.",
        "* The text alignment.",
        "* The maximum number of lines to draw.",
        "* The fixed width of the text.\n             * \n             * `0` means no fixed with.",
        "* The fixed height of the text.\n             * \n             * `0` means no fixed height.",
        "* The resolution the text is rendered to its internal canvas at.\n             * The default is 0, which means it will use the resolution set in the Game Config.",
        "* Whether the text should render right to left.",
        "* The test string to use when measuring the font.",
        "* The amount of horizontal padding adding to the width of the text when calculating the font metrics.",
        "* The amount of vertical padding adding to the width of the text when calculating the font metrics.",
        "* Set the text style.\n             * @param style The style settings to set.\n             * @param updateText Whether to update the text immediately. Default true.\n             * @param setDefaults Use the default values is not set, or the local values. Default false.",
        "* Synchronize the font settings to the given Canvas Rendering Context.\n             * @param canvas The Canvas Element.\n             * @param context The Canvas Rendering Context.",
        "* Synchronize the text style settings to the given Canvas Rendering Context.\n             * @param canvas The Canvas Element.\n             * @param context The Canvas Rendering Context.",
        "* Synchronize the shadow settings to the given Canvas Rendering Context.\n             * @param context The Canvas Rendering Context.\n             * @param enabled Whether shadows are enabled or not.",
        "* Update the style settings for the parent Text object.\n             * @param recalculateMetrics Whether to recalculate font and text metrics.",
        "* Set the font.\n             * \n             * If a string is given, the font family is set.\n             * \n             * If an object is given, the `fontFamily`, `fontSize` and `fontStyle`\n             * properties of that object are set.\n             * @param font The font family or font settings to set.\n             * @param updateText Whether to update the text immediately. Default true.",
        "* Set the font family.\n             * @param family The font family.",
        "* Set the font style.\n             * @param style The font style.",
        "* Set the font size.\n             * @param size The font size.",
        "* Set the test string to use when measuring the font.\n             * @param string The test string to use when measuring the font.",
        "* Set a fixed width and height for the text.\n             * \n             * Pass in `0` for either of these parameters to disable fixed width or height respectively.\n             * @param width The fixed width to set.\n             * @param height The fixed height to set.",
        "* Set the background color.\n             * @param color The background color.",
        "* Set the text fill color.\n             * @param color The text fill color.",
        "* Set the text fill color.\n             * @param color The text fill color.",
        "* Set the resolution used by the Text object.\n             * \n             * By default it will be set to match the resolution set in the Game Config,\n             * but you can override it via this method. It allows for much clearer text on High DPI devices,\n             * at the cost of memory because it uses larger internal Canvas textures for the Text.\n             * \n             * Please use with caution, as the more high res Text you have, the more memory it uses up.\n             * @param value The resolution for this Text object to use.",
        "* Set the stroke settings.\n             * @param color The stroke color.\n             * @param thickness The stroke thickness.",
        "* Set the shadow settings.\n             * \n             * Calling this method always re-measures the parent Text object,\n             * so only call it when you actually change the shadow settings.\n             * @param x The horizontal shadow offset. Default 0.\n             * @param y The vertical shadow offset. Default 0.\n             * @param color The shadow color. Default '#000'.\n             * @param blur The shadow blur radius. Default 0.\n             * @param shadowStroke Whether to stroke the shadow. Default false.\n             * @param shadowFill Whether to fill the shadow. Default true.",
        "* Set the shadow offset.\n             * @param x The horizontal shadow offset. Default 0.\n             * @param y The vertical shadow offset. Default 0.",
        "* Set the shadow color.\n             * @param color The shadow color. Default '#000'.",
        "* Set the shadow blur radius.\n             * @param blur The shadow blur radius. Default 0.",
        "* Enable or disable shadow stroke.\n             * @param enabled Whether shadow stroke is enabled or not.",
        "* Enable or disable shadow fill.\n             * @param enabled Whether shadow fill is enabled or not.",
        "* Set the width (in pixels) to use for wrapping lines.\n             * \n             * Pass in null to remove wrapping by width.\n             * @param width The maximum width of a line in pixels. Set to null to remove wrapping.\n             * @param useAdvancedWrap Whether or not to use the advanced wrapping\n             * algorithm. If true, spaces are collapsed and whitespace is trimmed from lines. If false,\n             * spaces and whitespace are left as is. Default false.",
        "* Set a custom callback for wrapping lines.\n             * \n             * Pass in null to remove wrapping by callback.\n             * @param callback A custom function that will be responsible for wrapping the\n             * text. It will receive two arguments: text (the string to wrap), textObject (this Text\n             * instance). It should return the wrapped lines either as an array of lines or as a string with\n             * newline characters in place to indicate where breaks should happen.\n             * @param scope The scope that will be applied when the callback is invoked. Default null.",
        "* Set the text alignment.\n             * \n             * Expects values like `'left'`, `'right'`, `'center'` or `'justified'`.\n             * @param align The text alignment.",
        "* Set the maximum number of lines to draw.\n             * @param max The maximum number of lines to draw. Default 0.",
        "* Get the current text metrics.",
        "* Build a JSON representation of this Text Style.",
        "* Destroy this Text Style.",
        "* A TileSprite is a Sprite that has a repeating texture.\n         * \n         * The texture can be scrolled and scaled independently of the TileSprite itself. Textures will automatically wrap and\n         * are designed so that you can create game backdrops using seamless textures as a source.\n         * \n         * You shouldn't ever create a TileSprite any larger than your actual canvas size. If you want to create a large repeating background\n         * that scrolls across the whole map of your game, then you create a TileSprite that fits the canvas size and then use the `tilePosition`\n         * property to scroll the texture as the player moves. If you create a TileSprite that is thousands of pixels in size then it will \n         * consume huge amounts of memory and cause performance issues. Remember: use `tilePosition` to scroll your texture and `tileScale` to\n         * adjust the scale of the texture - don't resize the sprite itself or make it larger than it needs.\n         * \n         * An important note about Tile Sprites and NPOT textures: Internally, TileSprite textures use GL_REPEAT to provide\n         * seamless repeating of the textures. This, combined with the way in which the textures are handled in WebGL, means\n         * they need to be POT (power-of-two) sizes in order to wrap. If you provide a NPOT (non power-of-two) texture to a\n         * TileSprite it will generate a POT sized canvas and draw your texture to it, scaled up to the POT size. It's then\n         * scaled back down again during rendering to the original dimensions. While this works, in that it allows you to use\n         * any size texture for a Tile Sprite, it does mean that NPOT textures are going to appear anti-aliased when rendered,\n         * due to the interpolation that took place when it was resized into a POT texture. This is especially visible in\n         * pixel art graphics. If you notice it and it becomes an issue, the only way to avoid it is to ensure that you\n         * provide POT textures for Tile Sprites.",
        "* \n             * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param width The width of the Game Object. If zero it will use the size of the texture frame.\n             * @param height The height of the Game Object. If zero it will use the size of the texture frame.\n             * @param textureKey The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n             * @param frameKey An optional frame from the Texture this Game Object is rendering with.",
        "* Whether the Tile Sprite has changed in some way, requiring an re-render of its tile texture.\n             * \n             * Such changes include the texture frame and scroll position of the Tile Sprite.",
        "* The renderer in use by this Tile Sprite.",
        "* The Canvas element that the TileSprite renders its fill pattern in to.\n             * Only used in Canvas mode.",
        "* The Context of the Canvas element that the TileSprite renders its fill pattern in to.\n             * Only used in Canvas mode.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* The next power of two value from the width of the Fill Pattern frame.",
        "* The next power of two value from the height of the Fill Pattern frame.",
        "* The Canvas that the TileSprites texture is rendered to.\n             * This is used to create a WebGL texture from.",
        "* The Canvas Context used to render the TileSprites texture.",
        "* The texture that the Tile Sprite is rendered to, which is then rendered to a Scene.\n             * In WebGL this is a WebGLTexture. In Canvas it's a Canvas Fill Pattern.",
        "* Sets the texture and frame this Game Object will use to render with.\n             * \n             * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n             * @param key The key of the texture to be used, as stored in the Texture Manager.\n             * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n             * \n             * The Frame has to belong to the current Texture being used.\n             * \n             * It can be either a string or an index.\n             * @param frame The name or index of the frame within the Texture.",
        "* Sets {@link Phaser.GameObjects.TileSprite#tilePositionX} and {@link Phaser.GameObjects.TileSprite#tilePositionY}.\n             * @param x The x position of this sprite's tiling texture.\n             * @param y The y position of this sprite's tiling texture.",
        "* Sets {@link Phaser.GameObjects.TileSprite#tileScaleX} and {@link Phaser.GameObjects.TileSprite#tileScaleY}.\n             * @param x The horizontal scale of the tiling texture. If not given it will use the current `tileScaleX` value.\n             * @param y The vertical scale of the tiling texture. If not given it will use the `x` value. Default x.",
        "* Internal destroy handler, called as part of the destroy process.",
        "* The horizontal scroll position of the Tile Sprite.",
        "* The vertical scroll position of the Tile Sprite.",
        "* The horizontal scale of the Tile Sprite texture.",
        "* The vertical scale of the Tile Sprite texture.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n             * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n             * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n             * \n             * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n             * \n             * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n             * changes what is shown when rendered.\n             * \n             * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n             * \n             * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n             * half of it, you could call `setCrop(0, 0, 400, 600)`.\n             * \n             * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n             * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n             * \n             * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n             * \n             * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n             * \n             * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n             * the renderer to skip several internal calculations.\n             * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n             * @param y The y coordinate to start the crop from.\n             * @param width The width of the crop rectangle in pixels.\n             * @param height The height of the crop rectangle in pixels.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n             * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n             * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n             * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n             * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n             * \n             * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n             * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n             * \n             * If a mask is already set on this Game Object it will be immediately replaced.\n             * \n             * Masks are positioned in global space and are not relative to the Game Object to which they\n             * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n             * \n             * Masks have no impact on physics or input detection. They are purely a rendering component\n             * that allows you to limit what is visible during the render pass.\n             * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n             * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a renderable Game Object.\n             * A renderable Game Object is one that uses a texture to render with, such as an\n             * Image, Sprite, Render Texture or BitmapText.\n             * \n             * If you do not provide a renderable object, and this Game Object has a texture,\n             * it will use itself as the object. This means you can call this method to create\n             * a Bitmap Mask from any renderable Game Object.\n             * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n             * including this one.\n             * \n             * To create the mask you need to pass in a reference to a Graphics Game Object.\n             * \n             * If you do not provide a graphics object, and this Game Object is an instance\n             * of a Graphics object, then it will use itself to create the mask.\n             * \n             * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n             * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n             * \n             * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n             * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n             * \n             * The tint works by taking the pixel color values from the Game Objects texture, and then\n             * multiplying it by the color value of the tint. You can provide either one color value,\n             * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n             * per corner. The colors are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n             * \n             * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n             * with those in the tint. You can use this for effects such as making a player flash 'white'\n             * if hit by something. You can provide either one color value, in which case the whole\n             * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n             * are blended together across the extent of the Game Object.\n             * \n             * To modify the tint color once set, either call this method again with new values or use the\n             * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n             * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n             * \n             * To remove a tint call `clearTint`.\n             * \n             * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n             * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n             * @param topRight The tint being applied to the top-right of the Game Object.\n             * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n             * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The Update List plugin.\n         * \n         * Update Lists belong to a Scene and maintain the list Game Objects to be updated every frame.\n         * \n         * Some or all of these Game Objects may also be part of the Scene's [Display List]{@link Phaser.GameObjects.DisplayList}, for Rendering.",
        "* \n             * @param scene The Scene that the Update List belongs to.",
        "* The Scene that the Update List belongs to.",
        "* The Scene's Systems.",
        "* Add a Game Object to the Update List.\n             * @param child The Game Object to add.",
        "* The pre-update step.\n             * \n             * Handles Game Objects that are pending insertion to and removal from the list.",
        "* The update step.\n             * \n             * Pre-updates every active Game Object in the list.\n             * @param time The current timestamp.\n             * @param delta The delta time elapsed since the last frame.",
        "* Remove a Game Object from the list.\n             * @param child The Game Object to remove from the list.",
        "* Remove all Game Objects from the list.",
        "* The Scene that owns this plugin is shutting down.\n             * We need to kill and reset all internal properties as well as stop listening to Scene events.",
        "* The Scene that owns this plugin is being destroyed.\n             * We need to shutdown and then kill off all external references.",
        "* The length of the list.",
        "* A Zone Game Object.\n         * \n         * A Zone is a non-rendering rectangular Game Object that has a position and size.\n         * It has no texture and never displays, but does live on the display list and\n         * can be moved, scaled and rotated like any other Game Object.\n         * \n         * Its primary use is for creating Drop Zones and Input Hit Areas and it has a couple of helper methods\n         * specifically for this. It is also useful for object overlap checks, or as a base for your own\n         * non-displaying Game Objects.\n         * The default origin is 0.5, the center of the Zone, the same as with Game Objects.",
        "* \n             * @param scene The Scene to which this Game Object belongs.\n             * @param x The horizontal position of this Game Object in the world.\n             * @param y The vertical position of this Game Object in the world.\n             * @param width The width of the Game Object. Default 1.\n             * @param height The height of the Game Object. Default 1.",
        "* The native (un-scaled) width of this Game Object.",
        "* The native (un-scaled) height of this Game Object.",
        "* The Blend Mode of the Game Object.\n             * Although a Zone never renders, it still has a blend mode to allow it to fit seamlessly into\n             * display lists without causing a batch flush.",
        "* The displayed width of this Game Object.\n             * This value takes into account the scale factor.",
        "* The displayed height of this Game Object.\n             * This value takes into account the scale factor.",
        "* Sets the size of this Game Object.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.\n             * @param resizeInput If this Zone has a Rectangle for a hit area this argument will resize the hit area as well. Default true.",
        "* Sets the display size of this Game Object.\n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets this Zone to be a Circular Drop Zone.\n             * The circle is centered on this Zones `x` and `y` coordinates.\n             * @param radius The radius of the Circle that will form the Drop Zone.",
        "* Sets this Zone to be a Rectangle Drop Zone.\n             * The rectangle is centered on this Zones `x` and `y` coordinates.\n             * @param width The width of the rectangle drop zone.\n             * @param height The height of the rectangle drop zone.",
        "* Allows you to define your own Geometry shape to be used as a Drop Zone.\n             * @param shape A Geometry shape instance, such as Phaser.Geom.Ellipse, or your own custom shape.\n             * @param callback A function that will return `true` if the given x/y coords it is sent are within the shape.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* A Circle object.\n         * \n         * This is a geometry object, containing numerical values and related methods to inspect and modify them.\n         * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\n         * To render a Circle you should look at the capabilities of the Graphics class.",
        "* \n             * @param x The x position of the center of the circle. Default 0.\n             * @param y The y position of the center of the circle. Default 0.\n             * @param radius The radius of the circle. Default 0.",
        "* Calculates the area of the circle.\n             * @param circle The Circle to get the area of.",
        "* The x position of the center of the circle.",
        "* The y position of the center of the circle.",
        "* Check to see if the Circle contains the given x / y coordinates.\n             * @param x The x coordinate to check within the circle.\n             * @param y The y coordinate to check within the circle.",
        "* Returns a Point object containing the coordinates of a point on the circumference of the Circle\n             * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\n             * at 180 degrees around the circle.\n             * @param position A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the circle.\n             * @param out An object to store the return values in. If not given a Point object will be created.",
        "* Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\n             * based on the given quantity or stepRate values.\n             * @param quantity The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\n             * @param stepRate Sets the quantity by getting the circumference of the circle and dividing it by the stepRate.\n             * @param output An array to insert the points in to. If not provided a new array will be created.",
        "* Returns a uniformly distributed random point from anywhere within the Circle.\n             * @param point A Point or point-like object to set the random `x` and `y` values in.",
        "* Sets the x, y and radius of this circle.\n             * @param x The x position of the center of the circle. Default 0.\n             * @param y The y position of the center of the circle. Default 0.\n             * @param radius The radius of the circle. Default 0.",
        "* Sets this Circle to be empty with a radius of zero.\n             * Does not change its position.",
        "* Sets the position of this Circle.\n             * @param x The x position of the center of the circle. Default 0.\n             * @param y The y position of the center of the circle. Default 0.",
        "* Checks to see if the Circle is empty: has a radius of zero.",
        "* The radius of the Circle.",
        "* The diameter of the Circle.",
        "* The left position of the Circle.",
        "* The right position of the Circle.",
        "* The top position of the Circle.",
        "* The bottom position of the Circle.",
        "* Returns the circumference of the given Circle.\n             * @param circle The Circle to get the circumference of.",
        "* Returns a Point object containing the coordinates of a point on the circumference of the Circle based on the given angle.\n             * @param circle The Circle to get the circumference point on.\n             * @param angle The angle from the center of the Circle to the circumference to return the point from. Given in radians.\n             * @param out A Point, or point-like object, to store the results in. If not given a Point will be created.",
        "* Creates a new Circle instance based on the values contained in the given source.\n             * @param source The Circle to be cloned. Can be an instance of a Circle or a circle-like object, with x, y and radius properties.",
        "* Check to see if the Circle contains the given x / y coordinates.\n             * @param circle The Circle to check.\n             * @param x The x coordinate to check within the circle.\n             * @param y The y coordinate to check within the circle.",
        "* Check to see if the Circle contains the given Point object.\n             * @param circle The Circle to check.\n             * @param point The Point object to check if it's within the Circle or not.",
        "* Check to see if the Circle contains all four points of the given Rectangle object.\n             * @param circle The Circle to check.\n             * @param rect The Rectangle object to check if it's within the Circle or not.",
        "* Copies the `x`, `y` and `radius` properties from the `source` Circle\n             * into the given `dest` Circle, then returns the `dest` Circle.\n             * @param source The source Circle to copy the values from.\n             * @param dest The destination Circle to copy the values to.",
        "* Compares the `x`, `y` and `radius` properties of the two given Circles.\n             * Returns `true` if they all match, otherwise returns `false`.\n             * @param circle The first Circle to compare.\n             * @param toCompare The second Circle to compare.",
        "* Returns the bounds of the Circle object.\n             * @param circle The Circle to get the bounds from.\n             * @param out A Rectangle, or rectangle-like object, to store the circle bounds in. If not given a new Rectangle will be created.",
        "* Returns a Point object containing the coordinates of a point on the circumference of the Circle\n             * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\n             * at 180 degrees around the circle.\n             * @param circle The Circle to get the circumference point on.\n             * @param position A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the circle.\n             * @param out An object to store the return values in. If not given a Point object will be created.",
        "* Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\n             * based on the given quantity or stepRate values.\n             * @param circle The Circle to get the points from.\n             * @param quantity The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\n             * @param stepRate Sets the quantity by getting the circumference of the circle and dividing it by the stepRate.\n             * @param output An array to insert the points in to. If not provided a new array will be created.",
        "* Offsets the Circle by the values given.\n             * @param circle The Circle to be offset (translated.)\n             * @param x The amount to horizontally offset the Circle by.\n             * @param y The amount to vertically offset the Circle by.",
        "* Offsets the Circle by the values given in the `x` and `y` properties of the Point object.\n             * @param circle The Circle to be offset (translated.)\n             * @param point The Point object containing the values to offset the Circle by.",
        "* Returns a uniformly distributed random point from anywhere within the given Circle.\n             * @param circle The Circle to get a random point from.\n             * @param out A Point or point-like object to set the random `x` and `y` values in.",
        "* An Ellipse object.\n         * \n         * This is a geometry object, containing numerical values and related methods to inspect and modify them.\n         * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\n         * To render an Ellipse you should look at the capabilities of the Graphics class.",
        "* \n             * @param x The x position of the center of the ellipse. Default 0.\n             * @param y The y position of the center of the ellipse. Default 0.\n             * @param width The width of the ellipse. Default 0.\n             * @param height The height of the ellipse. Default 0.",
        "* Calculates the area of the Ellipse.\n             * @param ellipse The Ellipse to get the area of.",
        "* Returns the circumference of the given Ellipse.\n             * @param ellipse The Ellipse to get the circumference of.",
        "* Returns a Point object containing the coordinates of a point on the circumference of the Ellipse based on the given angle.\n             * @param ellipse The Ellipse to get the circumference point on.\n             * @param angle The angle from the center of the Ellipse to the circumference to return the point from. Given in radians.\n             * @param out A Point, or point-like object, to store the results in. If not given a Point will be created.",
        "* Creates a new Ellipse instance based on the values contained in the given source.\n             * @param source The Ellipse to be cloned. Can be an instance of an Ellipse or a ellipse-like object, with x, y, width and height properties.",
        "* Check to see if the Ellipse contains the given x / y coordinates.\n             * @param ellipse The Ellipse to check.\n             * @param x The x coordinate to check within the ellipse.\n             * @param y The y coordinate to check within the ellipse.",
        "* Check to see if the Ellipse contains the given Point object.\n             * @param ellipse The Ellipse to check.\n             * @param point The Point object to check if it's within the Circle or not.",
        "* Check to see if the Ellipse contains all four points of the given Rectangle object.\n             * @param ellipse The Ellipse to check.\n             * @param rect The Rectangle object to check if it's within the Ellipse or not.",
        "* Copies the `x`, `y`, `width` and `height` properties from the `source` Ellipse\n             * into the given `dest` Ellipse, then returns the `dest` Ellipse.\n             * @param source The source Ellipse to copy the values from.\n             * @param dest The destination Ellipse to copy the values to.",
        "* The x position of the center of the ellipse.",
        "* The y position of the center of the ellipse.",
        "* The width of the ellipse.",
        "* The height of the ellipse.",
        "* Check to see if the Ellipse contains the given x / y coordinates.\n             * @param x The x coordinate to check within the ellipse.\n             * @param y The y coordinate to check within the ellipse.",
        "* Returns a Point object containing the coordinates of a point on the circumference of the Ellipse\n             * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\n             * at 180 degrees around the circle.\n             * @param position A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the ellipse.\n             * @param out An object to store the return values in. If not given a Point object will be created.",
        "* Returns an array of Point objects containing the coordinates of the points around the circumference of the Ellipse,\n             * based on the given quantity or stepRate values.\n             * @param quantity The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\n             * @param stepRate Sets the quantity by getting the circumference of the ellipse and dividing it by the stepRate.\n             * @param output An array to insert the points in to. If not provided a new array will be created.",
        "* Returns a uniformly distributed random point from anywhere within the given Ellipse.\n             * @param point A Point or point-like object to set the random `x` and `y` values in.",
        "* Sets the x, y, width and height of this ellipse.\n             * @param x The x position of the center of the ellipse.\n             * @param y The y position of the center of the ellipse.\n             * @param width The width of the ellipse.\n             * @param height The height of the ellipse.",
        "* Sets this Ellipse to be empty with a width and height of zero.\n             * Does not change its position.",
        "* Sets the position of this Ellipse.\n             * @param x The x position of the center of the ellipse.\n             * @param y The y position of the center of the ellipse.",
        "* Sets the size of this Ellipse.\n             * Does not change its position.\n             * @param width The width of the ellipse.\n             * @param height The height of the ellipse. Default width.",
        "* Checks to see if the Ellipse is empty: has a width or height equal to zero.",
        "* Returns the minor radius of the ellipse. Also known as the Semi Minor Axis.",
        "* Returns the major radius of the ellipse. Also known as the Semi Major Axis.",
        "* The left position of the Ellipse.",
        "* The right position of the Ellipse.",
        "* The top position of the Ellipse.",
        "* The bottom position of the Ellipse.",
        "* Compares the `x`, `y`, `width` and `height` properties of the two given Ellipses.\n             * Returns `true` if they all match, otherwise returns `false`.\n             * @param ellipse The first Ellipse to compare.\n             * @param toCompare The second Ellipse to compare.",
        "* Returns the bounds of the Ellipse object.\n             * @param ellipse The Ellipse to get the bounds from.\n             * @param out A Rectangle, or rectangle-like object, to store the ellipse bounds in. If not given a new Rectangle will be created.",
        "* Returns a Point object containing the coordinates of a point on the circumference of the Ellipse\n             * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\n             * at 180 degrees around the circle.\n             * @param ellipse The Ellipse to get the circumference point on.\n             * @param position A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the ellipse.\n             * @param out An object to store the return values in. If not given a Point object will be created.",
        "* Returns an array of Point objects containing the coordinates of the points around the circumference of the Ellipse,\n             * based on the given quantity or stepRate values.\n             * @param ellipse The Ellipse to get the points from.\n             * @param quantity The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\n             * @param stepRate Sets the quantity by getting the circumference of the ellipse and dividing it by the stepRate.\n             * @param out An array to insert the points in to. If not provided a new array will be created.",
        "* Offsets the Ellipse by the values given.\n             * @param ellipse The Ellipse to be offset (translated.)\n             * @param x The amount to horizontally offset the Ellipse by.\n             * @param y The amount to vertically offset the Ellipse by.",
        "* Offsets the Ellipse by the values given in the `x` and `y` properties of the Point object.\n             * @param ellipse The Ellipse to be offset (translated.)\n             * @param point The Point object containing the values to offset the Ellipse by.",
        "* Returns a uniformly distributed random point from anywhere within the given Ellipse.\n             * @param ellipse The Ellipse to get a random point from.\n             * @param out A Point or point-like object to set the random `x` and `y` values in.",
        "* Checks if two Circles intersect.\n             * @param circleA The first Circle to check for intersection.\n             * @param circleB The second Circle to check for intersection.",
        "* Checks for intersection between a circle and a rectangle.\n             * @param circle The circle to be checked.\n             * @param rect The rectangle to be checked.",
        "* Checks if two Rectangle shapes intersect and returns the area of this intersection as Rectangle object.\n             * \n             * If optional `output` parameter is omitted, new Rectangle object is created and returned. If there is intersection, it will contain intersection area. If there is no intersection, it wil be empty Rectangle (all values set to zero).\n             * \n             * If Rectangle object is passed as `output` and there is intersection, then intersection area data will be loaded into it and it will be returned. If there is no intersetion, it will be returned without any change.\n             * @param rectA The first Rectangle object.\n             * @param rectB The second Rectangle object.\n             * @param output Optional Rectangle object. If given, the intersection data will be loaded into it (in case of no intersection, it will be left unchanged). Otherwise, new Rectangle object will be created and returned with either intersection data or empty (all values set to zero), if there is no intersection.",
        "* Checks for intersection between the line segment and circle.\n             * \n             * Based on code by [Matt DesLauriers](https://github.com/mattdesl/line-circle-collision/blob/master/LICENSE.md).\n             * @param line The line segment to check.\n             * @param circle The circle to check against the line.\n             * @param nearest An optional Point-like object. If given the closest point on the Line where the circle intersects will be stored in this object.",
        "* Checks if two Lines intersect. If the Lines are identical, they will be treated as parallel and thus non-intersecting.\n             * @param line1 The first Line to check.\n             * @param line2 The second Line to check.\n             * @param out A Point in which to optionally store the point of intersection.",
        "* Checks for intersection between the Line and a Rectangle shape, or a rectangle-like\n             * object, with public `x`, `y`, `right` and `bottom` properties, such as a Sprite or Body.\n             * \n             * An intersection is considered valid if:\n             * \n             * The line starts within, or ends within, the Rectangle.\n             * The line segment intersects one of the 4 rectangle edges.\n             * \n             * The for the purposes of this function rectangles are considered 'solid'.\n             * @param line The Line to check for intersection.\n             * @param rect The Rectangle to check for intersection.",
        "* Checks if the a Point falls between the two end-points of a Line, based on the given line thickness.\n             * \n             * Assumes that the line end points are circular, not square.\n             * @param point The point, or point-like object to check.\n             * @param line The line segment to test for intersection on.\n             * @param lineThickness The line thickness. Assumes that the line end points are circular. Default 1.",
        "* Checks if a Point is located on the given line segment.\n             * @param point The Point to check for intersection.\n             * @param line The line segment to check for intersection.",
        "* Checks if two Rectangles intersect.\n             * \n             * A Rectangle intersects another Rectangle if any part of its bounds is within the other Rectangle's bounds. As such, the two Rectangles are considered \"solid\". A Rectangle with no width or no height will never intersect another Rectangle.\n             * @param rectA The first Rectangle to check for intersection.\n             * @param rectB The second Rectangle to check for intersection.",
        "* Checks for intersection between Rectangle shape and Triangle shape.\n             * @param rect Rectangle object to test.\n             * @param triangle Triangle object to test.",
        "* Check if rectangle intersects with values.\n             * @param rect The rectangle object\n             * @param left The x coordinate of the left of the Rectangle.\n             * @param right The x coordinate of the right of the Rectangle.\n             * @param top The y coordinate of the top of the Rectangle.\n             * @param bottom The y coordinate of the bottom of the Rectangle.\n             * @param tolerance Tolerance allowed in the calculation, expressed in pixels. Default 0.",
        "* Checks if a Triangle and a Circle intersect.\n             * \n             * A Circle intersects a Triangle if its center is located within it or if any of the Triangle's sides intersect the Circle. As such, the Triangle and the Circle are considered \"solid\" for the intersection.\n             * @param triangle The Triangle to check for intersection.\n             * @param circle The Circle to check for intersection.",
        "* Checks if a Triangle and a Line intersect.\n             * \n             * The Line intersects the Triangle if it starts inside of it, ends inside of it, or crosses any of the Triangle's sides. Thus, the Triangle is considered \"solid\".\n             * @param triangle The Triangle to check with.\n             * @param line The Line to check with.",
        "* Checks if two Triangles intersect.\n             * \n             * A Triangle intersects another Triangle if any pair of their lines intersects or if any point of one Triangle is within the other Triangle. Thus, the Triangles are considered \"solid\".\n             * @param triangleA The first Triangle to check for intersection.\n             * @param triangleB The second Triangle to check for intersection.",
        "* Defines a Line segment, a part of a line between two endpoints.",
        "* \n             * @param x1 The x coordinate of the lines starting point. Default 0.\n             * @param y1 The y coordinate of the lines starting point. Default 0.\n             * @param x2 The x coordinate of the lines ending point. Default 0.\n             * @param y2 The y coordinate of the lines ending point. Default 0.",
        "* Calculate the angle of the line in radians.\n             * @param line The line to calculate the angle of.",
        "* Using Bresenham's line algorithm this will return an array of all coordinates on this line.\n             * \n             * The `start` and `end` points are rounded before this runs as the algorithm works on integers.\n             * @param line The line.\n             * @param stepRate The optional step rate for the points on the line. Default 1.\n             * @param results An optional array to push the resulting coordinates into.",
        "* Center a line on the given coordinates.\n             * @param line The line to center.\n             * @param x The horizontal coordinate to center the line on.\n             * @param y The vertical coordinate to center the line on.",
        "* Clone the given line.\n             * @param source The source line to clone.",
        "* Copy the values of one line to a destination line.\n             * @param source The source line to copy the values from.\n             * @param dest The destination line to copy the values to.",
        "* Compare two lines for strict equality.\n             * @param line The first line to compare.\n             * @param toCompare The second line to compare.",
        "* Extends the start and end points of a Line by the given amounts.\n             * \n             * The amounts can be positive or negative. Positive points will increase the length of the line,\n             * while negative ones will decrease it.\n             * \n             * If no `right` value is provided it will extend the length of the line equally in both directions.\n             * \n             * Pass a value of zero to leave the start or end point unchanged.\n             * @param line The line instance to extend.\n             * @param left The amount to extend the start of the line by.\n             * @param right The amount to extend the end of the line by. If not given it will be set to the `left` value.",
        "* Get the midpoint of the given line.\n             * @param line The line to get the midpoint of.\n             * @param out An optional point object to store the midpoint in.",
        "* Get the nearest point on a line perpendicular to the given point.\n             * @param line The line to get the nearest point on.\n             * @param point The point to get the nearest point to.\n             * @param out An optional point, or point-like object, to store the coordinates of the nearest point on the line.",
        "* Calculate the normal of the given line.\n             * \n             * The normal of a line is a vector that points perpendicular from it.\n             * @param line The line to calculate the normal of.\n             * @param out An optional point object to store the normal in.",
        "* Get a point on a line that's a given percentage along its length.\n             * @param line The line.\n             * @param position A value between 0 and 1, where 0 is the start, 0.5 is the middle and 1 is the end of the line.\n             * @param out An optional point, or point-like object, to store the coordinates of the point on the line.",
        "* Get a number of points along a line's length.\n             * \n             * Provide a `quantity` to get an exact number of points along the line.\n             * \n             * Provide a `stepRate` to ensure a specific distance between each point on the line. Set `quantity` to `0` when\n             * providing a `stepRate`.\n             * @param line The line.\n             * @param quantity The number of points to place on the line. Set to `0` to use `stepRate` instead.\n             * @param stepRate The distance between each point on the line. When set, `quantity` is implied and should be set to `0`.\n             * @param out An optional array of Points, or point-like objects, to store the coordinates of the points on the line.",
        "* Get the shortest distance from a Line to the given Point.\n             * @param line The line to get the distance from.\n             * @param point The point to get the shortest distance to.",
        "* Calculate the height of the given line.\n             * @param line The line to calculate the height of.",
        "* Calculate the length of the given line.\n             * @param line The line to calculate the length of.",
        "* The x coordinate of the lines starting point.",
        "* The y coordinate of the lines starting point.",
        "* The x coordinate of the lines ending point.",
        "* The y coordinate of the lines ending point.",
        "* Get a point on a line that's a given percentage along its length.\n             * @param position A value between 0 and 1, where 0 is the start, 0.5 is the middle and 1 is the end of the line.\n             * @param output An optional point, or point-like object, to store the coordinates of the point on the line.",
        "* Get a number of points along a line's length.\n             * \n             * Provide a `quantity` to get an exact number of points along the line.\n             * \n             * Provide a `stepRate` to ensure a specific distance between each point on the line. Set `quantity` to `0` when\n             * providing a `stepRate`.\n             * @param quantity The number of points to place on the line. Set to `0` to use `stepRate` instead.\n             * @param stepRate The distance between each point on the line. When set, `quantity` is implied and should be set to `0`.\n             * @param output An optional array of Points, or point-like objects, to store the coordinates of the points on the line.",
        "* Get a random Point on the Line.\n             * @param point An instance of a Point to be modified.",
        "* Set new coordinates for the line endpoints.\n             * @param x1 The x coordinate of the lines starting point. Default 0.\n             * @param y1 The y coordinate of the lines starting point. Default 0.\n             * @param x2 The x coordinate of the lines ending point. Default 0.\n             * @param y2 The y coordinate of the lines ending point. Default 0.",
        "* Returns a Vector2 object that corresponds to the start of this Line.\n             * @param vec2 A Vector2 object to set the results in. If `undefined` a new Vector2 will be created.",
        "* Returns a Vector2 object that corresponds to the end of this Line.\n             * @param vec2 A Vector2 object to set the results in. If `undefined` a new Vector2 will be created.",
        "* The left position of the Line.",
        "* The right position of the Line.",
        "* The top position of the Line.",
        "* The bottom position of the Line.",
        "* Get the angle of the normal of the given line in radians.\n             * @param line The line to calculate the angle of the normal of.",
        "* [description]\n             * @param line The Line object to get the normal value from.",
        "* The Y value of the normal of the given line.\n             * The normal of a line is a vector that points perpendicular from it.\n             * @param line The line to calculate the normal of.",
        "* Offset a line by the given amount.\n             * @param line The line to offset.\n             * @param x The horizontal offset to add to the line.\n             * @param y The vertical offset to add to the line.",
        "* Calculate the perpendicular slope of the given line.\n             * @param line The line to calculate the perpendicular slope of.",
        "* Returns a random point on a given Line.\n             * @param line The Line to calculate the random Point on.\n             * @param out An instance of a Point to be modified.",
        "* Calculate the reflected angle between two lines.\n             * \n             * This is the outgoing angle based on the angle of Line 1 and the normalAngle of Line 2.\n             * @param lineA The first line.\n             * @param lineB The second line.",
        "* Rotate a line around its midpoint by the given angle in radians.\n             * @param line The line to rotate.\n             * @param angle The angle of rotation in radians.",
        "* Rotate a line around a point by the given angle in radians.\n             * @param line The line to rotate.\n             * @param point The point to rotate the line around.\n             * @param angle The angle of rotation in radians.",
        "* Rotate a line around the given coordinates by the given angle in radians.\n             * @param line The line to rotate.\n             * @param x The horizontal coordinate to rotate the line around.\n             * @param y The vertical coordinate to rotate the line around.\n             * @param angle The angle of rotation in radians.",
        "* Set a line to a given position, angle and length.\n             * @param line The line to set.\n             * @param x The horizontal start position of the line.\n             * @param y The vertical start position of the line.\n             * @param angle The angle of the line in radians.\n             * @param length The length of the line.",
        "* Calculate the slope of the given line.\n             * @param line The line to calculate the slope of.",
        "* Calculate the width of the given line.\n             * @param line The line to calculate the width of.",
        "* Defines a Point in 2D space, with an x and y component.",
        "* \n             * @param x The x coordinate of this Point. Default 0.\n             * @param y The y coordinate of this Point. Default x.",
        "* Apply `Math.ceil()` to each coordinate of the given Point.\n             * @param point The Point to ceil.",
        "* Clone the given Point.\n             * @param source The source Point to clone.",
        "* Copy the values of one Point to a destination Point.\n             * @param source The source Point to copy the values from.\n             * @param dest The destination Point to copy the values to.",
        "* A comparison of two `Point` objects to see if they are equal.\n             * @param point The original `Point` to compare against.\n             * @param toCompare The second `Point` to compare.",
        "* Apply `Math.ceil()` to each coordinate of the given Point.\n             * @param point The Point to floor.",
        "* Get the centroid or geometric center of a plane figure (the arithmetic mean position of all the points in the figure).\n             * Informally, it is the point at which a cutout of the shape could be perfectly balanced on the tip of a pin.\n             * @param points [description]\n             * @param out [description]",
        "* Calculate the magnitude of the point, which equivalent to the length of the line from the origin to this point.\n             * @param point The point to calculate the magnitude for",
        "* Calculates the square of magnitude of given point.(Can be used for fast magnitude calculation of point)\n             * @param point Returns square of the magnitude/length of given point.",
        "* Calculates the Axis Aligned Bounding Box (or aabb) from an array of points.\n             * @param points [description]\n             * @param out [description]",
        "* [description]\n             * @param pointA The starting `Point` for the interpolation.\n             * @param pointB The target `Point` for the interpolation.\n             * @param t The amount to interpolate between the two points. Generally, a value between 0 (returns the starting `Point`) and 1 (returns the target `Point`). If omitted, 0 is used. Default 0.\n             * @param out An optional `Point` object whose `x` and `y` values will be set to the result of the interpolation (can also be any object with `x` and `y` properties). If omitted, a new `Point` created and returned.",
        "* Swaps the X and the Y coordinate of a point.\n             * @param point The Point to modify.",
        "* Inverts a Point's coordinates.\n             * @param point The Point to invert.\n             * @param out The Point to return the inverted coordinates in.",
        "* The x coordinate of this Point.",
        "* The y coordinate of this Point.",
        "* Set the x and y coordinates of the point to the given values.\n             * @param x The x coordinate of this Point. Default 0.\n             * @param y The y coordinate of this Point. Default x.",
        "* [description]\n             * @param pointA [description]\n             * @param pointB [description]\n             * @param out [description]",
        "* [description]\n             * @param pointA [description]\n             * @param pointB [description]\n             * @param out [description]",
        "* Changes the magnitude (length) of a two-dimensional vector without changing its direction.\n             * @param point The Point to treat as the end point of the vector.\n             * @param magnitude The new magnitude of the vector.",
        "* A Polygon object\n         * \n         * The polygon is a closed shape consists of a series of connected straight lines defined by list of ordered points.\n         * Several formats are supported to define the list of points, check the setTo method for details. \n         * This is a geometry object allowing you to define and inspect the shape.\n         * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\n         * To render a Polygon you should look at the capabilities of the Graphics class.",
        "* \n             * @param points List of points defining the perimeter of this Polygon. Several formats are supported: \n             * - A string containing paired x y values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\n             * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\n             * - An array of objects with public x y properties: `[obj1, obj2, ...]`\n             * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\n             * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`",
        "* Create a new polygon which is a copy of the specified polygon\n             * @param polygon The polygon to create a clone of",
        "* Checks if a point is within the bounds of a Polygon.\n             * @param polygon The Polygon to check against.\n             * @param x The X coordinate of the point to check.\n             * @param y The Y coordinate of the point to check.",
        "* [description]\n             * @param polygon [description]\n             * @param point [description]",
        "* Calculates the bounding AABB rectangle of a polygon.\n             * @param polygon The polygon that should be calculated.\n             * @param out The rectangle or object that has x, y, width, and height properties to store the result. Optional.",
        "* Stores all of the points of a Polygon into a flat array of numbers following the sequence [ x,y, x,y, x,y ],\n             * i.e. each point of the Polygon, in the order it's defined, corresponds to two elements of the resultant\n             * array for the point's X and Y coordinate.\n             * @param polygon The Polygon whose points to export.\n             * @param output An array to which the points' coordinates should be appended.",
        "* Returns an array of Point objects containing the coordinates of the points around the perimeter of the Polygon,\n             * based on the given quantity or stepRate values.\n             * @param polygon The Polygon to get the points from.\n             * @param quantity The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\n             * @param stepRate Sets the quantity by getting the perimeter of the Polygon and dividing it by the stepRate.\n             * @param output An array to insert the points in to. If not provided a new array will be created.",
        "* Returns the perimeter of the given Polygon.\n             * @param polygon The Polygon to get the perimeter of.",
        "* The area of this Polygon.",
        "* An array of number pair objects that make up this polygon. I.e. [ {x,y}, {x,y}, {x,y} ]",
        "* Check to see if the Polygon contains the given x / y coordinates.\n             * @param x The x coordinate to check within the polygon.\n             * @param y The y coordinate to check within the polygon.",
        "* Sets this Polygon to the given points.\n             * \n             * The points can be set from a variety of formats:\n             * \n             * - A string containing paired values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\n             * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\n             * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n             * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\n             * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\n             * \n             * `setTo` may also be called without any arguments to remove all points.\n             * @param points Points defining the perimeter of this polygon. Please check function description above for the different supported formats.",
        "* Calculates the area of the Polygon. This is available in the property Polygon.area",
        "* Returns an array of Point objects containing the coordinates of the points around the perimeter of the Polygon,\n             * based on the given quantity or stepRate values.\n             * @param quantity The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\n             * @param stepRate Sets the quantity by getting the perimeter of the Polygon and dividing it by the stepRate.\n             * @param output An array to insert the points in to. If not provided a new array will be created.",
        "* Reverses the order of the points of a Polygon.\n             * @param polygon The Polygon to modify.",
        "* Takes a Polygon object and applies Chaikin's smoothing algorithm on its points.\n             * @param polygon The polygon to be smoothed. The polygon will be modified in-place and returned.",
        "* Encapsulates a 2D rectangle defined by its corner point in the top-left and its extends in x (width) and y (height)",
        "* \n             * @param x The X coordinate of the top left corner of the Rectangle. Default 0.\n             * @param y The Y coordinate of the top left corner of the Rectangle. Default 0.\n             * @param width The width of the Rectangle. Default 0.\n             * @param height The height of the Rectangle. Default 0.",
        "* Calculates the area of the given Rectangle object.\n             * @param rect The rectangle to calculate the area of.",
        "* Rounds a Rectangle's position up to the smallest integer greater than or equal to each current coordinate.\n             * @param rect The Rectangle to adjust.",
        "* Rounds a Rectangle's position and size up to the smallest integer greater than or equal to each respective value.\n             * @param rect The Rectangle to modify.",
        "* Moves the top-left corner of a Rectangle so that its center is at the given coordinates.\n             * @param rect The Rectangle to be centered.\n             * @param x The X coordinate of the Rectangle's center.\n             * @param y The Y coordinate of the Rectangle's center.",
        "* Creates a new Rectangle which is identical to the given one.\n             * @param source The Rectangle to clone.",
        "* Checks if a given point is inside a Rectangle's bounds.\n             * @param rect The Rectangle to check.\n             * @param x The X coordinate of the point to check.\n             * @param y The Y coordinate of the point to check.",
        "* Determines whether the specified point is contained within the rectangular region defined by this Rectangle object.\n             * @param rect The Rectangle object.\n             * @param point The point object to be checked. Can be a Phaser Point object or any object with x and y values.",
        "* Tests if one rectangle fully contains another.\n             * @param rectA The first rectangle.\n             * @param rectB The second rectangle.",
        "* Copy the values of one Rectangle to a destination Rectangle.\n             * @param source The source Rectangle to copy the values from.\n             * @param dest The destination Rectangle to copy the values to.",
        "* Create an array of points for each corner of a Rectangle\n             * If an array is specified, each point object will be added to the end of the array, otherwise a new array will be created.\n             * @param rect The Rectangle object to be decomposed.\n             * @param out If provided, each point will be added to this array.",
        "* Compares the `x`, `y`, `width` and `height` properties of two rectangles.\n             * @param rect Rectangle A\n             * @param toCompare Rectangle B",
        "* Adjusts the target rectangle, changing its width, height and position,\n             * so that it fits inside the area of the source rectangle, while maintaining its original\n             * aspect ratio.\n             * \n             * Unlike the `FitOutside` function, there may be some space inside the source area not covered.\n             * @param target The target rectangle to adjust.\n             * @param source The source rectangle to envlope the target in.",
        "* Adjusts the target rectangle, changing its width, height and position,\n             * so that it fully covers the area of the source rectangle, while maintaining its original\n             * aspect ratio.\n             * \n             * Unlike the `FitInside` function, the target rectangle may extend further out than the source.\n             * @param target The target rectangle to adjust.\n             * @param source The source rectangle to envlope the target in.",
        "* Rounds down (floors) the top left X and Y co-ordinates of the given Rectangle to the largest integer less than or equal to them\n             * @param rect The rectangle to floor the top left X and Y co-ordinates of",
        "* Rounds a Rectangle's position and size down to the largest integer less than or equal to each current coordinate or dimension.\n             * @param rect The Rectangle to adjust.",
        "* Constructs new Rectangle or repositions and resizes an existing Rectangle so that all of the given points are on or within its bounds.\n             * @param points An array of points (either arrays with two elements corresponding to the X and Y coordinate or an object with public `x` and `y` properties) which should be surrounded by the Rectangle.\n             * @param out Optional Rectangle to adjust.",
        "* Calculates the width/height ratio of a rectangle.\n             * @param rect The rectangle.",
        "* Returns the center of a Rectangle as a Point.\n             * @param rect The Rectangle to get the center of.\n             * @param out Optional point-like object to update with the center coordinates.",
        "* Position is a value between 0 and 1 where 0 = the top-left of the rectangle and 0.5 = the bottom right.\n             * @param rectangle [description]\n             * @param position [description]\n             * @param out [description]",
        "* Return an array of points from the perimeter of the rectangle, each spaced out based on the quantity or step required.\n             * @param rectangle The Rectangle object to get the points from.\n             * @param step Step between points. Used to calculate the number of points to return when quantity is falsy. Ignored if quantity is positive.\n             * @param quantity The number of evenly spaced points from the rectangles perimeter to return. If falsy, step param will be used to calculate the number of points.\n             * @param out An optional array to store the points in.",
        "* [description]\n             * @param rect [description]\n             * @param out [description]",
        "* Increases the size of a Rectangle by a specified amount.\n             * \n             * The center of the Rectangle stays the same. The amounts are added to each side, so the actual increase in width or height is two times bigger than the respective argument.\n             * @param rect The Rectangle to inflate.\n             * @param x How many pixels the left and the right side should be moved by horizontally.\n             * @param y How many pixels the top and the bottom side should be moved by vertically.",
        "* Takes two Rectangles and first checks to see if they intersect.\n             * If they intersect it will return the area of intersection in the `out` Rectangle.\n             * If they do not intersect, the `out` Rectangle will have a width and height of zero.\n             * @param rectA The first Rectangle to get the intersection from.\n             * @param rectB The second Rectangle to get the intersection from.\n             * @param out A Rectangle to store the intersection results in.",
        "* [description]\n             * @param rect [description]\n             * @param step [description]\n             * @param quantity [description]\n             * @param out [description]",
        "* Merges a Rectangle with a list of points by repositioning and/or resizing it such that all points are located on or within its bounds.\n             * @param target The Rectangle which should be merged.\n             * @param points An array of Points (or any object with public `x` and `y` properties) which should be merged with the Rectangle.",
        "* Merges the source rectangle into the target rectangle and returns the target.\n             * Neither rectangle should have a negative width or height.\n             * @param target Target rectangle. Will be modified to include source rectangle.\n             * @param source Rectangle that will be merged into target rectangle.",
        "* Merges a Rectangle with a point by repositioning and/or resizing it so that the point is on or within its bounds.\n             * @param target The Rectangle which should be merged and modified.\n             * @param x The X coordinate of the point which should be merged.\n             * @param y The Y coordinate of the point which should be merged.",
        "* Nudges (translates) the top left corner of a Rectangle by a given offset.\n             * @param rect The Rectangle to adjust.\n             * @param x The distance to move the Rectangle horizontally.\n             * @param y The distance to move the Rectangle vertically.",
        "* Nudges (translates) the top-left corner of a Rectangle by the coordinates of a point (translation vector).\n             * @param rect The Rectangle to adjust.\n             * @param point The point whose coordinates should be used as an offset.",
        "* Checks if two Rectangles overlap. If a Rectangle is within another Rectangle, the two will be considered overlapping. Thus, the Rectangles are treated as \"solid\".\n             * @param rectA The first Rectangle to check.\n             * @param rectB The second Rectangle to check.",
        "* Calculates the perimeter of a Rectangle.\n             * @param rect The Rectangle to use.",
        "* [description]\n             * @param rectangle [description]\n             * @param angle [description]\n             * @param out [description]",
        "* Returns a random point within a Rectangle.\n             * @param rect The Rectangle to return a point from.\n             * @param out The object to update with the point's coordinates.",
        "* Calculates a random point that lies within the `outer` Rectangle, but outside of the `inner` Rectangle.\n             * The inner Rectangle must be fully contained within the outer rectangle.\n             * @param outer The outer Rectangle to get the random point within.\n             * @param inner The inner Rectangle to exclude from the returned point.\n             * @param out A Point, or Point-like object to store the result in. If not specified, a new Point will be created.",
        "* The X coordinate of the top left corner of the Rectangle.",
        "* The Y coordinate of the top left corner of the Rectangle.",
        "* The width of the Rectangle, i.e. the distance between its left side (defined by `x`) and its right side.",
        "* The height of the Rectangle, i.e. the distance between its top side (defined by `y`) and its bottom side.",
        "* Checks if the given point is inside the Rectangle's bounds.\n             * @param x The X coordinate of the point to check.\n             * @param y The Y coordinate of the point to check.",
        "* Calculates the coordinates of a point at a certain `position` on the Rectangle's perimeter.\n             * \n             * The `position` is a fraction between 0 and 1 which defines how far into the perimeter the point is.\n             * \n             * A value of 0 or 1 returns the point at the top left corner of the rectangle, while a value of 0.5 returns the point at the bottom right corner of the rectangle. Values between 0 and 0.5 are on the top or the right side and values between 0.5 and 1 are on the bottom or the left side.\n             * @param position The normalized distance into the Rectangle's perimeter to return.\n             * @param output An object to update with the `x` and `y` coordinates of the point.",
        "* Returns an array of points from the perimeter of the Rectangle, each spaced out based on the quantity or step required.\n             * @param quantity The number of points to return. Set to `false` or 0 to return an arbitrary number of points (`perimeter / stepRate`) evenly spaced around the Rectangle based on the `stepRate`.\n             * @param stepRate If `quantity` is 0, determines the normalized distance between each returned point.\n             * @param output An array to which to append the points.",
        "* Returns a random point within the Rectangle's bounds.\n             * @param point The object in which to store the `x` and `y` coordinates of the point.",
        "* Sets the position, width, and height of the Rectangle.\n             * @param x The X coordinate of the top left corner of the Rectangle.\n             * @param y The Y coordinate of the top left corner of the Rectangle.\n             * @param width The width of the Rectangle.\n             * @param height The height of the Rectangle.",
        "* Resets the position, width, and height of the Rectangle to 0.",
        "* Sets the position of the Rectangle.\n             * @param x The X coordinate of the top left corner of the Rectangle.\n             * @param y The Y coordinate of the top left corner of the Rectangle. Default x.",
        "* Sets the width and height of the Rectangle.\n             * @param width The width to set the Rectangle to.\n             * @param height The height to set the Rectangle to. Default width.",
        "* Determines if the Rectangle is empty. A Rectangle is empty if its width or height is less than or equal to 0.",
        "* Returns a Line object that corresponds to the top of this Rectangle.\n             * @param line A Line object to set the results in. If `undefined` a new Line will be created.",
        "* Returns a Line object that corresponds to the right of this Rectangle.\n             * @param line A Line object to set the results in. If `undefined` a new Line will be created.",
        "* Returns a Line object that corresponds to the bottom of this Rectangle.\n             * @param line A Line object to set the results in. If `undefined` a new Line will be created.",
        "* Returns a Line object that corresponds to the left of this Rectangle.\n             * @param line A Line object to set the results in. If `undefined` a new Line will be created.",
        "* The x coordinate of the left of the Rectangle.\n             * Changing the left property of a Rectangle object has no effect on the y and height properties. However it does affect the width property, whereas changing the x value does not affect the width property.",
        "* The sum of the x and width properties.\n             * Changing the right property of a Rectangle object has no effect on the x, y and height properties, however it does affect the width property.",
        "* The y coordinate of the top of the Rectangle. Changing the top property of a Rectangle object has no effect on the x and width properties.\n             * However it does affect the height property, whereas changing the y value does not affect the height property.",
        "* The sum of the y and height properties.\n             * Changing the bottom property of a Rectangle object has no effect on the x, y and width properties, but does change the height property.",
        "* The x coordinate of the center of the Rectangle.",
        "* The y coordinate of the center of the Rectangle.",
        "* Determines if the two objects (either Rectangles or Rectangle-like) have the same width and height values under strict equality.\n             * @param rect The first Rectangle object.\n             * @param toCompare The second Rectangle object.",
        "* Scales the width and height of this Rectangle by the given amounts.\n             * @param rect The `Rectangle` object that will be scaled by the specified amount(s).\n             * @param x The factor by which to scale the rectangle horizontally.\n             * @param y The amount by which to scale the rectangle vertically. If this is not specified, the rectangle will be scaled by the factor `x` in both directions.",
        "* Creates a new Rectangle or repositions and/or resizes an existing Rectangle so that it encompasses the two given Rectangles, i.e. calculates their union.\n             * @param rectA The first Rectangle to use.\n             * @param rectB The second Rectangle to use.\n             * @param out The Rectangle to store the union in.",
        "* A triangle is a plane created by connecting three points.\n         * The first two arguments specify the first point, the middle two arguments\n         * specify the second point, and the last two arguments specify the third point.",
        "* \n             * @param x1 `x` coordinate of the first point. Default 0.\n             * @param y1 `y` coordinate of the first point. Default 0.\n             * @param x2 `x` coordinate of the second point. Default 0.\n             * @param y2 `y` coordinate of the second point. Default 0.\n             * @param x3 `x` coordinate of the third point. Default 0.\n             * @param y3 `y` coordinate of the third point. Default 0.",
        "* Returns the area of a Triangle.\n             * @param triangle The Triangle to use.",
        "* Builds an equilateral triangle. In the equilateral triangle, all the sides are the same length (congruent) and all the angles are the same size (congruent).\n             * The x/y specifies the top-middle of the triangle (x1/y1) and length is the length of each side.\n             * @param x x coordinate of the top point of the triangle.\n             * @param y y coordinate of the top point of the triangle.\n             * @param length Length of each side of the triangle.",
        "* [description]\n             * @param data A flat array of vertice coordinates like [x0,y0, x1,y1, x2,y2, ...]\n             * @param holes An array of hole indices if any (e.g. [5, 8] for a 12-vertice input would mean one hole with vertices 5–7 and another with 8–11). Default null.\n             * @param scaleX [description] Default 1.\n             * @param scaleY [description] Default 1.\n             * @param out [description]",
        "* Builds a right triangle, i.e. one which has a 90-degree angle and two acute angles.\n             * @param x The X coordinate of the right angle, which will also be the first X coordinate of the constructed Triangle.\n             * @param y The Y coordinate of the right angle, which will also be the first Y coordinate of the constructed Triangle.\n             * @param width The length of the side which is to the left or to the right of the right angle.\n             * @param height The length of the side which is above or below the right angle.",
        "* Positions the Triangle so that it is centered on the given coordinates.\n             * @param triangle The triangle to be positioned.\n             * @param x The horizontal coordinate to center on.\n             * @param y The vertical coordinate to center on.\n             * @param centerFunc The function used to center the triangle. Defaults to Centroid centering.",
        "* Calculates the position of a Triangle's centroid, which is also its center of mass (center of gravity).\n             * \n             * The centroid is the point in a Triangle at which its three medians (the lines drawn from the vertices to the bisectors of the opposite sides) meet. It divides each one in a 2:1 ratio.\n             * @param triangle The Triangle to use.\n             * @param out An object to store the coordinates in.",
        "* Computes the circumcentre of a triangle. The circumcentre is the centre of\n             * the circumcircle, the smallest circle which encloses the triangle. It is also\n             * the common intersection point of the perpendicular bisectors of the sides of\n             * the triangle, and is the only point which has equal distance to all three\n             * vertices of the triangle.\n             * @param triangle [description]\n             * @param out [description]",
        "* Finds the circumscribed circle (circumcircle) of a Triangle object. The circumcircle is the circle which touches all of the triangle's vertices.\n             * @param triangle The Triangle to use as input.\n             * @param out An optional Circle to store the result in.",
        "* Clones a Triangle object.\n             * @param source The Triangle to clone.",
        "* Checks if a point (as a pair of coordinates) is inside a Triangle's bounds.\n             * @param triangle The Triangle to check.\n             * @param x The X coordinate of the point to check.\n             * @param y The Y coordinate of the point to check.",
        "* Filters an array of point-like objects to only those contained within a triangle.\n             * If `returnFirst` is true, will return an array containing only the first point in the provided array that is within the triangle (or an empty array if there are no such points).\n             * @param triangle The triangle that the points are being checked in.\n             * @param points An array of point-like objects (objects that have an `x` and `y` property)\n             * @param returnFirst If `true`, return an array containing only the first point found that is within the triangle. Default false.\n             * @param out If provided, the points that are within the triangle will be appended to this array instead of being added to a new array. If `returnFirst` is true, only the first point found within the triangle will be appended. This array will also be returned by this function.",
        "* Tests if a triangle contains a point.\n             * @param triangle The triangle.\n             * @param point The point to test, or any point-like object with public `x` and `y` properties.",
        "* Copy the values of one Triangle to a destination Triangle.\n             * @param source The source Triangle to copy the values from.\n             * @param dest The destination Triangle to copy the values to.",
        "* Decomposes a Triangle into an array of its points.\n             * @param triangle The Triangle to decompose.\n             * @param out An array to store the points into.",
        "* Returns true if two triangles have the same coordinates.\n             * @param triangle The first triangle to check.\n             * @param toCompare The second triangle to check.",
        "* Returns a Point from around the perimeter of a Triangle.\n             * @param triangle The Triangle to get the point on its perimeter from.\n             * @param position The position along the perimeter of the triangle. A value between 0 and 1.\n             * @param out An option Point, or Point-like object to store the value in. If not given a new Point will be created.",
        "* Returns an array of evenly spaced points on the perimeter of a Triangle.\n             * @param triangle The Triangle to get the points from.\n             * @param quantity The number of evenly spaced points to return. Set to 0 to return an arbitrary number of points based on the `stepRate`.\n             * @param stepRate If `quantity` is 0, the distance between each returned point.\n             * @param out An array to which the points should be appended.",
        "* Calculates the position of the incenter of a Triangle object. This is the point where its three angle bisectors meet and it's also the center of the incircle, which is the circle inscribed in the triangle.\n             * @param triangle The Triangle to find the incenter of.\n             * @param out An optional Point in which to store the coordinates.",
        "* Moves each point (vertex) of a Triangle by a given offset, thus moving the entire Triangle by that offset.\n             * @param triangle The Triangle to move.\n             * @param x The horizontal offset (distance) by which to move each point. Can be positive or negative.\n             * @param y The vertical offset (distance) by which to move each point. Can be positive or negative.",
        "* Gets the length of the perimeter of the given triangle.\n             * @param triangle [description]",
        "* [description]\n             * @param triangle [description]\n             * @param out [description]",
        "* Rotates a Triangle about its incenter, which is the point at which its three angle bisectors meet.\n             * @param triangle The Triangle to rotate.\n             * @param angle The angle by which to rotate the Triangle, in radians.",
        "* Rotates a Triangle at a certain angle about a given Point or object with public `x` and `y` properties.\n             * @param triangle The Triangle to rotate.\n             * @param point The Point to rotate the Triangle about.\n             * @param angle The angle by which to rotate the Triangle, in radians.",
        "* Rotates an entire Triangle at a given angle about a specific point.\n             * @param triangle The Triangle to rotate.\n             * @param x The X coordinate of the point to rotate the Triangle about.\n             * @param y The Y coordinate of the point to rotate the Triangle about.\n             * @param angle The angle by which to rotate the Triangle, in radians.",
        "* `x` coordinate of the first point.",
        "* `y` coordinate of the first point.",
        "* `x` coordinate of the second point.",
        "* `y` coordinate of the second point.",
        "* `x` coordinate of the third point.",
        "* `y` coordinate of the third point.",
        "* Checks whether a given points lies within the triangle.\n             * @param x The x coordinate of the point to check.\n             * @param y The y coordinate of the point to check.",
        "* Returns a specific point  on the triangle.\n             * @param position Position as float within `0` and `1`. `0` equals the first point.\n             * @param output Optional Point, or point-like object, that the calculated point will be written to.",
        "* Calculates a list of evenly distributed points on the triangle. It is either possible to pass an amount of points to be generated (`quantity`) or the distance between two points (`stepRate`).\n             * @param quantity Number of points to be generated. Can be falsey when `stepRate` should be used. All points have the same distance along the triangle.\n             * @param stepRate Distance between two points. Will only be used when `quantity` is falsey.\n             * @param output Optional Array for writing the calculated points into. Otherwise a new array will be created.",
        "* Returns a random point along the triangle.\n             * @param point Optional `Point` that should be modified. Otherwise a new one will be created.",
        "* Sets all three points of the triangle. Leaving out any coordinate sets it to be `0`.\n             * @param x1 `x` coordinate of the first point. Default 0.\n             * @param y1 `y` coordinate of the first point. Default 0.\n             * @param x2 `x` coordinate of the second point. Default 0.\n             * @param y2 `y` coordinate of the second point. Default 0.\n             * @param x3 `x` coordinate of the third point. Default 0.\n             * @param y3 `y` coordinate of the third point. Default 0.",
        "* Returns a Line object that corresponds to Line A of this Triangle.\n             * @param line A Line object to set the results in. If `undefined` a new Line will be created.",
        "* Returns a Line object that corresponds to Line B of this Triangle.\n             * @param line A Line object to set the results in. If `undefined` a new Line will be created.",
        "* Returns a Line object that corresponds to Line C of this Triangle.\n             * @param line A Line object to set the results in. If `undefined` a new Line will be created.",
        "* Left most X coordinate of the triangle. Setting it moves the triangle on the X axis accordingly.",
        "* Right most X coordinate of the triangle. Setting it moves the triangle on the X axis accordingly.",
        "* Top most Y coordinate of the triangle. Setting it moves the triangle on the Y axis accordingly.",
        "* Bottom most Y coordinate of the triangle. Setting it moves the triangle on the Y axis accordingly.",
        "* The mouse pointer is being held down.",
        "* The mouse pointer is being moved.",
        "* The mouse pointer is released.",
        "* A touch pointer has been started.",
        "* A touch pointer has been started.",
        "* A touch pointer has been started.",
        "* A touch pointer has been been cancelled by the browser.",
        "* The pointer lock has changed.",
        "* The Game Object to which this Interactive Object is bound.",
        "* Is this Interactive Object currently enabled for input events?",
        "* Is this Interactive Object draggable? Enable with `InputPlugin.setDraggable`.",
        "* Is this Interactive Object a drag-targets drop zone? Set when the object is created.",
        "* Should this Interactive Object change the cursor (via css) when over? (desktop only)",
        "* An optional drop target for a draggable Interactive Object.",
        "* The most recent Camera to be tested against this Interactive Object.",
        "* The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.",
        "* The 'contains' check callback that the hit area shape will use for all hit tests.",
        "* The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
        "* The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
        "* The current drag state of this Interactive Object. 0 = Not being dragged, 1 = being checked for drag, or 2 = being actively dragged.",
        "* The x coordinate that the Pointer started dragging this Interactive Object from.",
        "* The y coordinate that the Pointer started dragging this Interactive Object from.",
        "* The x coordinate that this Interactive Object is currently being dragged to.",
        "* The y coordinate that this Interactive Object is currently being dragged to.",
        "* Creates a new Interactive Object.\n         * \n         * This is called automatically by the Input Manager when you enable a Game Object for input.\n         * \n         * The resulting Interactive Object is mapped to the Game Object's `input` property.\n         * @param gameObject The Game Object to which this Interactive Object is bound.\n         * @param hitArea The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.\n         * @param hitAreaCallback The 'contains' check callback that the hit area shape will use for all hit tests.",
        "* Creates a new Pixel Perfect Handler function.\n         * \n         * Access via `InputPlugin.makePixelPerfect` rather than calling it directly.\n         * @param textureManager A reference to the Texture Manager.\n         * @param alphaTolerance The alpha level that the pixel should be above to be included as a successful interaction.",
        "* A Phaser Input Event Data object.\n         * \n         * This object is passed to the registered event listeners and allows you to stop any further propagation.",
        "* The cancelled state of this Event.",
        "* Call this method to stop this event from passing any further down the event chain.",
        "* The Input Plugin Boot Event.\n             * \n             * This internal event is dispatched by the Input Plugin when it boots, signalling to all of its systems to create themselves.",
        "* The Input Plugin Destroy Event.\n             * \n             * This internal event is dispatched by the Input Plugin when it is destroyed, signalling to all of its systems to destroy themselves.",
        "* The Pointer Drag End Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer stops dragging a Game Object.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('dragend', listener)`.\n             * \n             * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DRAG_END]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DRAG_END} event instead.",
        "* The Pointer Drag Enter Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer drags a Game Object into a Drag Target.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('dragenter', listener)`.\n             * \n             * A Pointer can only drag a single Game Object at once.\n             * \n             * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DRAG_ENTER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DRAG_ENTER} event instead.",
        "* The Pointer Drag Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer moves while dragging a Game Object.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('drag', listener)`.\n             * \n             * A Pointer can only drag a single Game Object at once.\n             * \n             * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DRAG]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DRAG} event instead.",
        "* The Pointer Drag Leave Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer drags a Game Object out of a Drag Target.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('dragleave', listener)`.\n             * \n             * A Pointer can only drag a single Game Object at once.\n             * \n             * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DRAG_LEAVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DRAG_LEAVE} event instead.",
        "* The Pointer Drag Over Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer drags a Game Object over a Drag Target.\n             * \n             * When the Game Object first enters the drag target it will emit a `dragenter` event. If it then moves while within\n             * the drag target, it will emit this event instead.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('dragover', listener)`.\n             * \n             * A Pointer can only drag a single Game Object at once.\n             * \n             * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DRAG_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DRAG_OVER} event instead.",
        "* The Pointer Drag Start Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer starts to drag any Game Object.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('dragstart', listener)`.\n             * \n             * A Pointer can only drag a single Game Object at once.\n             * \n             * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DRAG_START]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DRAG_START} event instead.",
        "* The Pointer Drop Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer drops a Game Object on a Drag Target.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('drop', listener)`.\n             * \n             * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_DROP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DROP} event instead.",
        "* The Game Object Down Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is pressed down on _any_ interactive Game Object.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('gameobjectdown', listener)`.\n             * \n             * To receive this event, the Game Objects must have been set as interactive.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\n             * \n             * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_POINTER_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_DOWN} event instead.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_DOWN}\n             * 2. [GAMEOBJECT_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DOWN}\n             * 3. [POINTER_DOWN]{@linkcode Phaser.Input.Events#event:POINTER_DOWN} or [POINTER_DOWN_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_DOWN_OUTSIDE}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Game Object Drag End Event.\n             * \n             * This event is dispatched by an interactive Game Object if a pointer stops dragging it.\n             * \n             * Listen to this event from a Game Object using: `gameObject.on('dragend', listener)`.\n             * Note that the scope of the listener is automatically set to be the Game Object instance itself.\n             * \n             * To receive this event, the Game Object must have been set as interactive and enabled for drag.\n             * See [GameObject.setInteractive](Phaser.GameObjects.GameObject#setInteractive) for more details.",
        "* The Game Object Drag Enter Event.\n             * \n             * This event is dispatched by an interactive Game Object if a pointer drags it into a drag target.\n             * \n             * Listen to this event from a Game Object using: `gameObject.on('dragenter', listener)`.\n             * Note that the scope of the listener is automatically set to be the Game Object instance itself.\n             * \n             * To receive this event, the Game Object must have been set as interactive and enabled for drag.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.",
        "* The Game Object Drag Event.\n             * \n             * This event is dispatched by an interactive Game Object if a pointer moves while dragging it.\n             * \n             * Listen to this event from a Game Object using: `gameObject.on('drag', listener)`.\n             * Note that the scope of the listener is automatically set to be the Game Object instance itself.\n             * \n             * To receive this event, the Game Object must have been set as interactive and enabled for drag.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.",
        "* The Game Object Drag Leave Event.\n             * \n             * This event is dispatched by an interactive Game Object if a pointer drags it out of a drag target.\n             * \n             * Listen to this event from a Game Object using: `gameObject.on('dragleave', listener)`.\n             * Note that the scope of the listener is automatically set to be the Game Object instance itself.\n             * \n             * To receive this event, the Game Object must have been set as interactive and enabled for drag.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.",
        "* The Game Object Drag Over Event.\n             * \n             * This event is dispatched by an interactive Game Object if a pointer drags it over a drag target.\n             * \n             * When the Game Object first enters the drag target it will emit a `dragenter` event. If it then moves while within\n             * the drag target, it will emit this event instead.\n             * \n             * Listen to this event from a Game Object using: `gameObject.on('dragover', listener)`.\n             * Note that the scope of the listener is automatically set to be the Game Object instance itself.\n             * \n             * To receive this event, the Game Object must have been set as interactive and enabled for drag.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.",
        "* The Game Object Drag Start Event.\n             * \n             * This event is dispatched by an interactive Game Object if a pointer starts to drag it.\n             * \n             * Listen to this event from a Game Object using: `gameObject.on('dragstart', listener)`.\n             * Note that the scope of the listener is automatically set to be the Game Object instance itself.\n             * \n             * To receive this event, the Game Object must have been set as interactive and enabled for drag.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\n             * \n             * There are lots of useful drag related properties that are set within the Game Object when dragging occurs.\n             * For example, `gameObject.input.dragStartX`, `dragStartY` and so on.",
        "* The Game Object Drop Event.\n             * \n             * This event is dispatched by an interactive Game Object if a pointer drops it on a Drag Target.\n             * \n             * Listen to this event from a Game Object using: `gameObject.on('drop', listener)`.\n             * Note that the scope of the listener is automatically set to be the Game Object instance itself.\n             * \n             * To receive this event, the Game Object must have been set as interactive and enabled for drag.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.",
        "* The Game Object Move Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is moved across _any_ interactive Game Object.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('gameobjectmove', listener)`.\n             * \n             * To receive this event, the Game Objects must have been set as interactive.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\n             * \n             * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_POINTER_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_MOVE} event instead.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_MOVE}\n             * 2. [GAMEOBJECT_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_MOVE}\n             * 3. [POINTER_MOVE]{@linkcode Phaser.Input.Events#event:POINTER_MOVE}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Game Object Out Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer moves out of _any_ interactive Game Object.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('gameobjectout', listener)`.\n             * \n             * To receive this event, the Game Objects must have been set as interactive.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\n             * \n             * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_POINTER_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OUT} event instead.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OUT}\n             * 2. [GAMEOBJECT_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_OUT}\n             * 3. [POINTER_OUT]{@linkcode Phaser.Input.Events#event:POINTER_OUT}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Game Object Over Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer moves over _any_ interactive Game Object.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('gameobjectover', listener)`.\n             * \n             * To receive this event, the Game Objects must have been set as interactive.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\n             * \n             * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_POINTER_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OVER} event instead.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OVER}\n             * 2. [GAMEOBJECT_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_OVER}\n             * 3. [POINTER_OVER]{@linkcode Phaser.Input.Events#event:POINTER_OVER}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Game Object Pointer Down Event.\n             * \n             * This event is dispatched by an interactive Game Object if a pointer is pressed down on it.\n             * \n             * Listen to this event from a Game Object using: `gameObject.on('pointerdown', listener)`.\n             * Note that the scope of the listener is automatically set to be the Game Object instance itself.\n             * \n             * To receive this event, the Game Object must have been set as interactive.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_DOWN}\n             * 2. [GAMEOBJECT_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DOWN}\n             * 3. [POINTER_DOWN]{@linkcode Phaser.Input.Events#event:POINTER_DOWN} or [POINTER_DOWN_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_DOWN_OUTSIDE}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Game Object Pointer Move Event.\n             * \n             * This event is dispatched by an interactive Game Object if a pointer is moved while over it.\n             * \n             * Listen to this event from a Game Object using: `gameObject.on('pointermove', listener)`.\n             * Note that the scope of the listener is automatically set to be the Game Object instance itself.\n             * \n             * To receive this event, the Game Object must have been set as interactive.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_MOVE}\n             * 2. [GAMEOBJECT_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_MOVE}\n             * 3. [POINTER_MOVE]{@linkcode Phaser.Input.Events#event:POINTER_MOVE}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Game Object Pointer Out Event.\n             * \n             * This event is dispatched by an interactive Game Object if a pointer moves out of it.\n             * \n             * Listen to this event from a Game Object using: `gameObject.on('pointerout', listener)`.\n             * Note that the scope of the listener is automatically set to be the Game Object instance itself.\n             * \n             * To receive this event, the Game Object must have been set as interactive.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OUT}\n             * 2. [GAMEOBJECT_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_OUT}\n             * 3. [POINTER_OUT]{@linkcode Phaser.Input.Events#event:POINTER_OUT}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Game Object Pointer Over Event.\n             * \n             * This event is dispatched by an interactive Game Object if a pointer moves over it.\n             * \n             * Listen to this event from a Game Object using: `gameObject.on('pointerover', listener)`.\n             * Note that the scope of the listener is automatically set to be the Game Object instance itself.\n             * \n             * To receive this event, the Game Object must have been set as interactive.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OVER}\n             * 2. [GAMEOBJECT_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_OVER}\n             * 3. [POINTER_OVER]{@linkcode Phaser.Input.Events#event:POINTER_OVER}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Game Object Pointer Up Event.\n             * \n             * This event is dispatched by an interactive Game Object if a pointer is released while over it.\n             * \n             * Listen to this event from a Game Object using: `gameObject.on('pointerup', listener)`.\n             * Note that the scope of the listener is automatically set to be the Game Object instance itself.\n             * \n             * To receive this event, the Game Object must have been set as interactive.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_UP}\n             * 2. [GAMEOBJECT_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_UP}\n             * 3. [POINTER_UP]{@linkcode Phaser.Input.Events#event:POINTER_UP} or [POINTER_UP_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_UP_OUTSIDE}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Game Object Up Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is released while over _any_ interactive Game Object.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('gameobjectup', listener)`.\n             * \n             * To receive this event, the Game Objects must have been set as interactive.\n             * See [GameObject.setInteractive]{@link Phaser.GameObjects.GameObject#setInteractive} for more details.\n             * \n             * To listen for this event from a _specific_ Game Object, use the [GAMEOBJECT_POINTER_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_UP} event instead.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_UP}\n             * 2. [GAMEOBJECT_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_UP}\n             * 3. [POINTER_UP]{@linkcode Phaser.Input.Events#event:POINTER_UP} or [POINTER_UP_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_UP_OUTSIDE}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Input Plugin Game Out Event.\n             * \n             * This event is dispatched by the Input Plugin if the active pointer leaves the game canvas and is now\n             * outside of it, elsewhere on the web page.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('gameout', listener)`.",
        "* The Input Plugin Game Over Event.\n             * \n             * This event is dispatched by the Input Plugin if the active pointer enters the game canvas and is now\n             * over of it, having previously been elsewhere on the web page.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('gameover', listener)`.",
        "* The Input Manager Boot Event.\n             * \n             * This internal event is dispatched by the Input Manager when it boots.",
        "* The Input Manager Process Event.\n             * \n             * This internal event is dispatched by the Input Manager when not using the legacy queue system,\n             * and it wants the Input Plugins to update themselves.",
        "* The Input Manager Update Event.\n             * \n             * This internal event is dispatched by the Input Manager as part of its update step.",
        "* The Input Manager Pointer Lock Change Event.\n             * \n             * This event is dispatched by the Input Manager when it is processing a native Pointer Lock Change DOM Event.",
        "* The Pointer Down Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is pressed down anywhere.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('pointerdown', listener)`.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_DOWN}\n             * 2. [GAMEOBJECT_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DOWN}\n             * 3. [POINTER_DOWN]{@linkcode Phaser.Input.Events#event:POINTER_DOWN} or [POINTER_DOWN_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_DOWN_OUTSIDE}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Pointer Down Outside Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is pressed down anywhere outside of the game canvas.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('pointerdownoutside', listener)`.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_DOWN}\n             * 2. [GAMEOBJECT_DOWN]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_DOWN}\n             * 3. [POINTER_DOWN]{@linkcode Phaser.Input.Events#event:POINTER_DOWN} or [POINTER_DOWN_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_DOWN_OUTSIDE}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Pointer Move Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is moved anywhere.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('pointermove', listener)`.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_MOVE}\n             * 2. [GAMEOBJECT_MOVE]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_MOVE}\n             * 3. [POINTER_MOVE]{@linkcode Phaser.Input.Events#event:POINTER_MOVE}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Pointer Out Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer moves out of any interactive Game Object.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('pointerup', listener)`.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OUT}\n             * 2. [GAMEOBJECT_OUT]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_OUT}\n             * 3. [POINTER_OUT]{@linkcode Phaser.Input.Events#event:POINTER_OUT}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Pointer Over Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer moves over any interactive Game Object.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('pointerover', listener)`.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_OVER}\n             * 2. [GAMEOBJECT_OVER]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_OVER}\n             * 3. [POINTER_OVER]{@linkcode Phaser.Input.Events#event:POINTER_OVER}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Pointer Up Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is released anywhere.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('pointerup', listener)`.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_UP}\n             * 2. [GAMEOBJECT_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_UP}\n             * 3. [POINTER_UP]{@linkcode Phaser.Input.Events#event:POINTER_UP} or [POINTER_UP_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_UP_OUTSIDE}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Pointer Up Outside Input Event.\n             * \n             * This event is dispatched by the Input Plugin belonging to a Scene if a pointer is released anywhere outside of the game canvas.\n             * \n             * Listen to this event from within a Scene using: `this.input.on('pointerupoutside', listener)`.\n             * \n             * The event hierarchy is as follows:\n             * \n             * 1. [GAMEOBJECT_POINTER_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_POINTER_UP}\n             * 2. [GAMEOBJECT_UP]{@linkcode Phaser.Input.Events#event:GAMEOBJECT_UP}\n             * 3. [POINTER_UP]{@linkcode Phaser.Input.Events#event:POINTER_UP} or [POINTER_UP_OUTSIDE]{@linkcode Phaser.Input.Events#event:POINTER_UP_OUTSIDE}\n             * \n             * With the top event being dispatched first and then flowing down the list. Note that higher-up event handlers can stop\n             * the propagation of this event.",
        "* The Input Plugin Pre-Update Event.\n             * \n             * This internal event is dispatched by the Input Plugin at the start of its `preUpdate` method.\n             * This hook is designed specifically for input plugins, but can also be listened to from user-land code.",
        "* The Input Plugin Shutdown Event.\n             * \n             * This internal event is dispatched by the Input Plugin when it shuts down, signalling to all of its systems to shut themselves down.",
        "* The Input Plugin Start Event.\n             * \n             * This internal event is dispatched by the Input Plugin when it has finished setting-up,\n             * signalling to all of its internal systems to start.",
        "* The Input Plugin Update Event.\n             * \n             * This internal event is dispatched by the Input Plugin at the start of its `update` method.\n             * This hook is designed specifically for input plugins, but can also be listened to from user-land code.",
        "* Contains information about a specific Gamepad Axis.\n             * Axis objects are created automatically by the Gamepad as they are needed.",
        "* \n                 * @param pad A reference to the Gamepad that this Axis belongs to.\n                 * @param index The index of this Axis.",
        "* A reference to the Gamepad that this Axis belongs to.",
        "* An event emitter to use to emit the axis events.",
        "* The index of this Axis.",
        "* The raw axis value, between -1 and 1 with 0 being dead center.\n                 * Use the method `getValue` to get a normalized value with the threshold applied.",
        "* Movement tolerance threshold below which axis values are ignored in `getValue`.",
        "* Applies the `threshold` value to the axis and returns it.",
        "* Destroys this Axis instance and releases external references it holds.",
        "* Contains information about a specific button on a Gamepad.\n             * Button objects are created automatically by the Gamepad as they are needed.",
        "* \n                 * @param pad A reference to the Gamepad that this Button belongs to.\n                 * @param index The index of this Button.",
        "* A reference to the Gamepad that this Button belongs to.",
        "* An event emitter to use to emit the button events.",
        "* The index of this Button.",
        "* Between 0 and 1.",
        "* Can be set for analogue buttons to enable a 'pressure' threshold,\n                 * before a button is considered as being 'pressed'.",
        "* Is the Button being pressed down or not?",
        "* Destroys this Button instance and releases external references it holds.",
        "* Tatar SNES USB Controller Gamepad Configuration.\n                 * USB Gamepad  (STANDARD GAMEPAD Vendor: 0079 Product: 0011)",
        "* PlayStation DualShock 4 Gamepad Configuration.\n                 * Sony PlayStation DualShock 4 (v2) wireless controller",
        "* XBox 360 Gamepad Configuration.",
        "* The Gamepad Button Down Event.\n                 * \n                 * This event is dispatched by the Gamepad Plugin when a button has been pressed on any active Gamepad.\n                 * \n                 * Listen to this event from within a Scene using: `this.input.gamepad.on('down', listener)`.\n                 * \n                 * You can also listen for a DOWN event from a Gamepad instance. See the [GAMEPAD_BUTTON_DOWN]{@linkcode Phaser.Input.Gamepad.Events#event:GAMEPAD_BUTTON_DOWN} event for details.",
        "* The Gamepad Button Up Event.\n                 * \n                 * This event is dispatched by the Gamepad Plugin when a button has been released on any active Gamepad.\n                 * \n                 * Listen to this event from within a Scene using: `this.input.gamepad.on('up', listener)`.\n                 * \n                 * You can also listen for an UP event from a Gamepad instance. See the [GAMEPAD_BUTTON_UP]{@linkcode Phaser.Input.Gamepad.Events#event:GAMEPAD_BUTTON_UP} event for details.",
        "* The Gamepad Connected Event.\n                 * \n                 * This event is dispatched by the Gamepad Plugin when a Gamepad has been connected.\n                 * \n                 * Listen to this event from within a Scene using: `this.input.gamepad.once('connected', listener)`.\n                 * \n                 * Note that the browser may require you to press a button on a gamepad before it will allow you to access it,\n                 * this is for security reasons. However, it may also trust the page already, in which case you won't get the\n                 * 'connected' event and instead should check `GamepadPlugin.total` to see if it thinks there are any gamepads\n                 * already connected.",
        "* The Gamepad Disconnected Event.\n                 * \n                 * This event is dispatched by the Gamepad Plugin when a Gamepad has been disconnected.\n                 * \n                 * Listen to this event from within a Scene using: `this.input.gamepad.once('disconnected', listener)`.",
        "* The Gamepad Button Down Event.\n                 * \n                 * This event is dispatched by a Gamepad instance when a button has been pressed on it.\n                 * \n                 * Listen to this event from a Gamepad instance. Once way to get this is from the `pad1`, `pad2`, etc properties on the Gamepad Plugin:\n                 * `this.input.gamepad.pad1.on('down', listener)`.\n                 * \n                 * Note that you will not receive any Gamepad button events until the browser considers the Gamepad as being 'connected'.\n                 * \n                 * You can also listen for a DOWN event from the Gamepad Plugin. See the [BUTTON_DOWN]{@linkcode Phaser.Input.Gamepad.Events#event:BUTTON_DOWN} event for details.",
        "* The Gamepad Button Up Event.\n                 * \n                 * This event is dispatched by a Gamepad instance when a button has been released on it.\n                 * \n                 * Listen to this event from a Gamepad instance. Once way to get this is from the `pad1`, `pad2`, etc properties on the Gamepad Plugin:\n                 * `this.input.gamepad.pad1.on('up', listener)`.\n                 * \n                 * Note that you will not receive any Gamepad button events until the browser considers the Gamepad as being 'connected'.\n                 * \n                 * You can also listen for an UP event from the Gamepad Plugin. See the [BUTTON_UP]{@linkcode Phaser.Input.Gamepad.Events#event:BUTTON_UP} event for details.",
        "* A single Gamepad.\n             * \n             * These are created, updated and managed by the Gamepad Plugin.",
        "* \n                 * @param manager A reference to the Gamepad Plugin.\n                 * @param pad The Gamepad object, as extracted from GamepadEvent.",
        "* A reference to the Gamepad Plugin.",
        "* A reference to the native Gamepad object that is connected to the browser.",
        "* A string containing some information about the controller.\n                 * \n                 * This is not strictly specified, but in Firefox it will contain three pieces of information\n                 * separated by dashes (-): two 4-digit hexadecimal strings containing the USB vendor and\n                 * product id of the controller, and the name of the controller as provided by the driver.\n                 * In Chrome it will contain the name of the controller as provided by the driver,\n                 * followed by vendor and product 4-digit hexadecimal strings.",
        "* An integer that is unique for each Gamepad currently connected to the system.\n                 * This can be used to distinguish multiple controllers.\n                 * Note that disconnecting a device and then connecting a new device may reuse the previous index.",
        "* An array of Gamepad Button objects, corresponding to the different buttons available on the Gamepad.",
        "* An array of Gamepad Axis objects, corresponding to the different axes available on the Gamepad, if any.",
        "* The Gamepad's Haptic Actuator (Vibration / Rumble support).\n                 * This is highly experimental and only set if both present on the device,\n                 * and exposed by both the hardware and browser.",
        "* A Vector2 containing the most recent values from the Gamepad's left axis stick.\n                 * This is updated automatically as part of the Gamepad.update cycle.\n                 * The H Axis is mapped to the `Vector2.x` property, and the V Axis to the `Vector2.y` property.\n                 * The values are based on the Axis thresholds.\n                 * If the Gamepad does not have a left axis stick, the values will always be zero.",
        "* A Vector2 containing the most recent values from the Gamepad's right axis stick.\n                 * This is updated automatically as part of the Gamepad.update cycle.\n                 * The H Axis is mapped to the `Vector2.x` property, and the V Axis to the `Vector2.y` property.\n                 * The values are based on the Axis thresholds.\n                 * If the Gamepad does not have a right axis stick, the values will always be zero.",
        "* Gets the total number of axis this Gamepad claims to support.",
        "* Gets the value of an axis based on the given index.\n                 * The index must be valid within the range of axes supported by this Gamepad.\n                 * The return value will be a float between 0 and 1.\n                 * @param index The index of the axes to get the value for.",
        "* Sets the threshold value of all axis on this Gamepad.\n                 * The value is a float between 0 and 1 and is the amount below which the axis is considered as not having been moved.\n                 * @param value A value between 0 and 1.",
        "* Gets the total number of buttons this Gamepad claims to have.",
        "* Gets the value of a button based on the given index.\n                 * The index must be valid within the range of buttons supported by this Gamepad.\n                 * \n                 * The return value will be either 0 or 1 for an analogue button, or a float between 0 and 1\n                 * for a pressure-sensitive digital button, such as the shoulder buttons on a Dual Shock.\n                 * @param index The index of the button to get the value for.",
        "* Returns if the button is pressed down or not.\n                 * The index must be valid within the range of buttons supported by this Gamepad.\n                 * @param index The index of the button to get the value for.",
        "* Destroys this Gamepad instance, its buttons and axes, and releases external references it holds.",
        "* Is this Gamepad currently connected or not?",
        "* A timestamp containing the most recent time this Gamepad was updated.",
        "* Is the Gamepad's Left button being pressed?\n                 * If the Gamepad doesn't have this button it will always return false.\n                 * This is the d-pad left button under standard Gamepad mapping.",
        "* Is the Gamepad's Right button being pressed?\n                 * If the Gamepad doesn't have this button it will always return false.\n                 * This is the d-pad right button under standard Gamepad mapping.",
        "* Is the Gamepad's Up button being pressed?\n                 * If the Gamepad doesn't have this button it will always return false.\n                 * This is the d-pad up button under standard Gamepad mapping.",
        "* Is the Gamepad's Down button being pressed?\n                 * If the Gamepad doesn't have this button it will always return false.\n                 * This is the d-pad down button under standard Gamepad mapping.",
        "* Is the Gamepad's bottom button in the right button cluster being pressed?\n                 * If the Gamepad doesn't have this button it will always return false.\n                 * On a Dual Shock controller it's the X button.\n                 * On an XBox controller it's the A button.",
        "* Is the Gamepad's top button in the right button cluster being pressed?\n                 * If the Gamepad doesn't have this button it will always return false.\n                 * On a Dual Shock controller it's the Triangle button.\n                 * On an XBox controller it's the Y button.",
        "* Is the Gamepad's left button in the right button cluster being pressed?\n                 * If the Gamepad doesn't have this button it will always return false.\n                 * On a Dual Shock controller it's the Square button.\n                 * On an XBox controller it's the X button.",
        "* Is the Gamepad's right button in the right button cluster being pressed?\n                 * If the Gamepad doesn't have this button it will always return false.\n                 * On a Dual Shock controller it's the Circle button.\n                 * On an XBox controller it's the B button.",
        "* Returns the value of the Gamepad's top left shoulder button.\n                 * If the Gamepad doesn't have this button it will always return zero.\n                 * The value is a float between 0 and 1, corresponding to how depressed the button is.\n                 * On a Dual Shock controller it's the L1 button.\n                 * On an XBox controller it's the LB button.",
        "* Returns the value of the Gamepad's bottom left shoulder button.\n                 * If the Gamepad doesn't have this button it will always return zero.\n                 * The value is a float between 0 and 1, corresponding to how depressed the button is.\n                 * On a Dual Shock controller it's the L2 button.\n                 * On an XBox controller it's the LT button.",
        "* Returns the value of the Gamepad's top right shoulder button.\n                 * If the Gamepad doesn't have this button it will always return zero.\n                 * The value is a float between 0 and 1, corresponding to how depressed the button is.\n                 * On a Dual Shock controller it's the R1 button.\n                 * On an XBox controller it's the RB button.",
        "* Returns the value of the Gamepad's bottom right shoulder button.\n                 * If the Gamepad doesn't have this button it will always return zero.\n                 * The value is a float between 0 and 1, corresponding to how depressed the button is.\n                 * On a Dual Shock controller it's the R2 button.\n                 * On an XBox controller it's the RT button.",
        "* The Gamepad Plugin is an input plugin that belongs to the Scene-owned Input system.\n             * \n             * Its role is to listen for native DOM Gamepad Events and then process them.\n             * \n             * You do not need to create this class directly, the Input system will create an instance of it automatically.\n             * \n             * You can access it from within a Scene using `this.input.gamepad`.\n             * \n             * To listen for a gamepad being connected:\n             * \n             * ```javascript\n             * this.input.gamepad.once('connected', function (pad) {\n             *     //   'pad' is a reference to the gamepad that was just connected\n             * });\n             * ```\n             * \n             * Note that the browser may require you to press a button on a gamepad before it will allow you to access it,\n             * this is for security reasons. However, it may also trust the page already, in which case you won't get the\n             * 'connected' event and instead should check `GamepadPlugin.total` to see if it thinks there are any gamepads\n             * already connected.\n             * \n             * Once you have received the connected event, or polled the gamepads and found them enabled, you can access\n             * them via the built-in properties `GamepadPlugin.pad1` to `pad4`, for up to 4 game pads. With a reference\n             * to the gamepads you can poll its buttons and axis sticks. See the properties and methods available on\n             * the `Gamepad` class for more details.\n             * \n             * For more information about Gamepad support in browsers see the following resources:\n             * \n             * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API\n             * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\n             * https://www.smashingmagazine.com/2015/11/gamepad-api-in-web-games/\n             * http://html5gamepad.com/",
        "* \n                 * @param sceneInputPlugin A reference to the Scene Input Plugin that the KeyboardPlugin belongs to.",
        "* A reference to the Scene that this Input Plugin is responsible for.",
        "* A reference to the Scene Systems Settings.",
        "* A reference to the Scene Input Plugin that created this Keyboard Plugin.",
        "* A boolean that controls if the Gamepad Manager is enabled or not.\n                 * Can be toggled on the fly.",
        "* The Gamepad Event target, as defined in the Game Config.\n                 * Typically the browser window, but can be any interactive DOM element.",
        "* An array of the connected Gamepads.",
        "* Checks to see if both this plugin and the Scene to which it belongs is active.",
        "* Disconnects all current Gamepads.",
        "* Returns an array of all currently connected Gamepads.",
        "* Looks-up a single Gamepad based on the given index value.\n                 * @param index The index of the Gamepad to get.",
        "* The total number of connected game pads.",
        "* A reference to the first connected Gamepad.\n                 * \n                 * This will be undefined if either no pads are connected, or the browser\n                 * has not yet issued a gamepadconnect, which can happen even if a Gamepad\n                 * is plugged in, but hasn't yet had any buttons pressed on it.",
        "* A reference to the second connected Gamepad.\n                 * \n                 * This will be undefined if either no pads are connected, or the browser\n                 * has not yet issued a gamepadconnect, which can happen even if a Gamepad\n                 * is plugged in, but hasn't yet had any buttons pressed on it.",
        "* A reference to the third connected Gamepad.\n                 * \n                 * This will be undefined if either no pads are connected, or the browser\n                 * has not yet issued a gamepadconnect, which can happen even if a Gamepad\n                 * is plugged in, but hasn't yet had any buttons pressed on it.",
        "* A reference to the fourth connected Gamepad.\n                 * \n                 * This will be undefined if either no pads are connected, or the browser\n                 * has not yet issued a gamepadconnect, which can happen even if a Gamepad\n                 * is plugged in, but hasn't yet had any buttons pressed on it.",
        "* The Input Manager is responsible for handling the pointer related systems in a single Phaser Game instance.\n         * \n         * Based on the Game Config it will create handlers for mouse and touch support.\n         * \n         * Keyboard and Gamepad are plugins, handled directly by the InputPlugin class.\n         * \n         * It then manages the event queue, pointer creation and general hit test related operations.\n         * \n         * You rarely need to interact with the Input Manager directly, and as such, all of its properties and methods\n         * should be considered private. Instead, you should use the Input Plugin, which is a Scene level system, responsible\n         * for dealing with all input events for a Scene.",
        "* \n             * @param game The Game instance that owns the Input Manager.\n             * @param config The Input Configuration object, as set in the Game Config.",
        "* The Game instance that owns the Input Manager.\n             * A Game only maintains on instance of the Input Manager at any time.",
        "* A reference to the global Game Scale Manager.\n             * Used for all bounds checks and pointer scaling.",
        "* The Canvas that is used for all DOM event input listeners.",
        "* The Game Configuration object, as set during the game boot.",
        "* If set, the Input Manager will run its update loop every frame.",
        "* The Event Emitter instance that the Input Manager uses to emit events from.",
        "* A standard FIFO queue for the native DOM events waiting to be handled by the Input Manager.",
        "* Are any mouse or touch pointers currently over the game canvas?\n             * This is updated automatically by the canvas over and out handlers.",
        "* The default CSS cursor to be used when interacting with your game.\n             * \n             * See the `setDefaultCursor` method for more details.",
        "* A reference to the Keyboard Manager class, if enabled via the `input.keyboard` Game Config property.",
        "* A reference to the Mouse Manager class, if enabled via the `input.mouse` Game Config property.",
        "* A reference to the Touch Manager class, if enabled via the `input.touch` Game Config property.",
        "* An array of Pointers that have been added to the game.\n             * The first entry is reserved for the Mouse Pointer, the rest are Touch Pointers.\n             * \n             * By default there is 1 touch pointer enabled. If you need more use the `addPointer` method to start them,\n             * or set the `input.activePointers` property in the Game Config.",
        "* The number of touch objects activated and being processed each update.\n             * \n             * You can change this by either calling `addPointer` at run-time, or by\n             * setting the `input.activePointers` property in the Game Config.",
        "* The mouse has its own unique Pointer object, which you can reference directly if making a _desktop specific game_.\n             * If you are supporting both desktop and touch devices then do not use this property, instead use `activePointer`\n             * which will always map to the most recently interacted pointer.",
        "* The most recently active Pointer object.\n             * \n             * If you've only 1 Pointer in your game then this will accurately be either the first finger touched, or the mouse.\n             * \n             * If your game doesn't need to support multi-touch then you can safely use this property in all of your game\n             * code and it will adapt to be either the mouse or the touch, based on device.",
        "* Reset every frame. Set to `true` if any of the Pointers are dirty this frame.",
        "* If the top-most Scene in the Scene List receives an input it will stop input from\n             * propagating any lower down the scene list, i.e. if you have a UI Scene at the top\n             * and click something on it, that click will not then be passed down to any other\n             * Scene below. Disable this to have input events passed through all Scenes, all the time.",
        "* An internal flag that controls if the Input Manager will ignore or process native DOM events this frame.\n             * Set via the InputPlugin.stopPropagation method.",
        "* Use the internal event queue or not?\n             * \n             * Set this via the Game Config with the `inputQueue` property.\n             * \n             * Phaser 3.15.1 and earlier used a event queue by default.\n             * \n             * This was changed in version 3.16 to use an immediate-mode system.\n             * The previous queue based version remains and is left under this flag for backwards\n             * compatibility. This flag, along with the legacy system, will be removed in a future version.",
        "* The time this Input Manager was last updated.\n             * This value is populated by the Game Step each frame.",
        "* The Boot handler is called by Phaser.Game when it first starts up.\n             * The renderer is available by now.",
        "* Tells the Input system to set a custom cursor.\n             * \n             * This cursor will be the default cursor used when interacting with the game canvas.\n             * \n             * If an Interactive Object also sets a custom cursor, this is the cursor that is reset after its use.\n             * \n             * Any valid CSS cursor value is allowed, including paths to image files, i.e.:\n             * \n             * ```javascript\n             * this.input.setDefaultCursor('url(assets/cursors/sword.cur), pointer');\n             * ```\n             * \n             * Please read about the differences between browsers when it comes to the file formats and sizes they support:\n             * \n             * https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n             * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_User_Interface/Using_URL_values_for_the_cursor_property\n             * \n             * It's up to you to pick a suitable cursor format that works across the range of browsers you need to support.\n             * @param cursor The CSS to be used when setting the default cursor.",
        "* Adds new Pointer objects to the Input Manager.\n             * \n             * By default Phaser creates 2 pointer objects: `mousePointer` and `pointer1`.\n             * \n             * You can create more either by calling this method, or by setting the `input.activePointers` property\n             * in the Game Config, up to a maximum of 10 pointers.\n             * \n             * The first 10 pointers are available via the `InputPlugin.pointerX` properties, once they have been added\n             * via this method.\n             * @param quantity The number of new Pointers to create. A maximum of 10 is allowed in total. Default 1.",
        "* Internal method that gets a list of all the active Input Plugins in the game\n             * and updates each of them in turn, in reverse order (top to bottom), to allow\n             * for DOM top-level event handling simulation.\n             * @param time The time value from the most recent Game step. Typically a high-resolution timer value, or Date.now().\n             * @param delta The delta value since the last frame. This is smoothed to avoid delta spikes by the TimeStep class.",
        "* **Note:** As of Phaser 3.16 this method is no longer required _unless_ you have set `input.queue = true`\n             * in your game config, to force it to use the legacy event queue system. This method is deprecated and\n             * will be removed in a future version.\n             * \n             * Adds a callback to be invoked whenever the native DOM `mouseup` or `touchend` events are received.\n             * By setting the `isOnce` argument you can control if the callback is called once,\n             * or every time the DOM event occurs.\n             * \n             * Callbacks passed to this method are invoked _immediately_ when the DOM event happens,\n             * within the scope of the DOM event handler. Therefore, they are considered as 'native'\n             * from the perspective of the browser. This means they can be used for tasks such as\n             * opening new browser windows, or anything which explicitly requires user input to activate.\n             * However, as a result of this, they come with their own risks, and as such should not be used\n             * for general game input, but instead be reserved for special circumstances.\n             * \n             * If all you're trying to do is execute a callback when a pointer is released, then\n             * please use the internal Input event system instead.\n             * \n             * Please understand that these callbacks are invoked when the browser feels like doing so,\n             * which may be entirely out of the normal flow of the Phaser Game Loop. Therefore, you should absolutely keep\n             * Phaser related operations to a minimum in these callbacks. For example, don't destroy Game Objects,\n             * change Scenes or manipulate internal systems, otherwise you run a very real risk of creating\n             * heisenbugs (https://en.wikipedia.org/wiki/Heisenbug) that prove a challenge to reproduce, never mind\n             * solve.\n             * @param callback The callback to be invoked on this dom event.\n             * @param isOnce `true` if the callback will only be invoked once, `false` to call every time this event happens. Default true.",
        "* **Note:** As of Phaser 3.16 this method is no longer required _unless_ you have set `input.queue = true`\n             * in your game config, to force it to use the legacy event queue system. This method is deprecated and\n             * will be removed in a future version.\n             * \n             * Adds a callback to be invoked whenever the native DOM `mousedown` or `touchstart` events are received.\n             * By setting the `isOnce` argument you can control if the callback is called once,\n             * or every time the DOM event occurs.\n             * \n             * Callbacks passed to this method are invoked _immediately_ when the DOM event happens,\n             * within the scope of the DOM event handler. Therefore, they are considered as 'native'\n             * from the perspective of the browser. This means they can be used for tasks such as\n             * opening new browser windows, or anything which explicitly requires user input to activate.\n             * However, as a result of this, they come with their own risks, and as such should not be used\n             * for general game input, but instead be reserved for special circumstances.\n             * \n             * If all you're trying to do is execute a callback when a pointer is down, then\n             * please use the internal Input event system instead.\n             * \n             * Please understand that these callbacks are invoked when the browser feels like doing so,\n             * which may be entirely out of the normal flow of the Phaser Game Loop. Therefore, you should absolutely keep\n             * Phaser related operations to a minimum in these callbacks. For example, don't destroy Game Objects,\n             * change Scenes or manipulate internal systems, otherwise you run a very real risk of creating\n             * heisenbugs (https://en.wikipedia.org/wiki/Heisenbug) that prove a challenge to reproduce, never mind\n             * solve.\n             * @param callback The callback to be invoked on this dom event.\n             * @param isOnce `true` if the callback will only be invoked once, `false` to call every time this event happens. Default true.",
        "* **Note:** As of Phaser 3.16 this method is no longer required _unless_ you have set `input.queue = true`\n             * in your game config, to force it to use the legacy event queue system. This method is deprecated and\n             * will be removed in a future version.\n             * \n             * Adds a callback to be invoked whenever the native DOM `mousemove` or `touchmove` events are received.\n             * By setting the `isOnce` argument you can control if the callback is called once,\n             * or every time the DOM event occurs.\n             * \n             * Callbacks passed to this method are invoked _immediately_ when the DOM event happens,\n             * within the scope of the DOM event handler. Therefore, they are considered as 'native'\n             * from the perspective of the browser. This means they can be used for tasks such as\n             * opening new browser windows, or anything which explicitly requires user input to activate.\n             * However, as a result of this, they come with their own risks, and as such should not be used\n             * for general game input, but instead be reserved for special circumstances.\n             * \n             * If all you're trying to do is execute a callback when a pointer is moved, then\n             * please use the internal Input event system instead.\n             * \n             * Please understand that these callbacks are invoked when the browser feels like doing so,\n             * which may be entirely out of the normal flow of the Phaser Game Loop. Therefore, you should absolutely keep\n             * Phaser related operations to a minimum in these callbacks. For example, don't destroy Game Objects,\n             * change Scenes or manipulate internal systems, otherwise you run a very real risk of creating\n             * heisenbugs (https://en.wikipedia.org/wiki/Heisenbug) that prove a challenge to reproduce, never mind\n             * solve.\n             * @param callback The callback to be invoked on this dom event.\n             * @param isOnce `true` if the callback will only be invoked once, `false` to call every time this event happens. Default false.",
        "* Performs a hit test using the given Pointer and camera, against an array of interactive Game Objects.\n             * \n             * The Game Objects are culled against the camera, and then the coordinates are translated into the local camera space\n             * and used to determine if they fall within the remaining Game Objects hit areas or not.\n             * \n             * If nothing is matched an empty array is returned.\n             * \n             * This method is called automatically by InputPlugin.hitTestPointer and doesn't usually need to be invoked directly.\n             * @param pointer The Pointer to test against.\n             * @param gameObjects An array of interactive Game Objects to check.\n             * @param camera The Camera which is being tested against.\n             * @param output An array to store the results in. If not given, a new empty array is created.",
        "* Checks if the given x and y coordinate are within the hit area of the Game Object.\n             * \n             * This method assumes that the coordinate values have already been translated into the space of the Game Object.\n             * \n             * If the coordinates are within the hit area they are set into the Game Objects Input `localX` and `localY` properties.\n             * @param gameObject The interactive Game Object to check against.\n             * @param x The translated x coordinate for the hit test.\n             * @param y The translated y coordinate for the hit test.",
        "* Checks if the given x and y coordinate are within the hit area of the Interactive Object.\n             * \n             * This method assumes that the coordinate values have already been translated into the space of the Interactive Object.\n             * \n             * If the coordinates are within the hit area they are set into the Interactive Objects Input `localX` and `localY` properties.\n             * @param object The Interactive Object to check against.\n             * @param x The translated x coordinate for the hit test.\n             * @param y The translated y coordinate for the hit test.",
        "* Transforms the pageX and pageY values of a Pointer into the scaled coordinate space of the Input Manager.\n             * @param pointer The Pointer to transform the values for.\n             * @param pageX The Page X value.\n             * @param pageY The Page Y value.\n             * @param wasMove Are we transforming the Pointer from a move event, or an up / down event?",
        "* Destroys the Input Manager and all of its systems.\n             * \n             * There is no way to recover from doing this.",
        "* The Input Plugin belongs to a Scene and handles all input related events and operations for it.\n         * \n         * You can access it from within a Scene using `this.input`.\n         * \n         * It emits events directly. For example, you can do:\n         * \n         * ```javascript\n         * this.input.on('pointerdown', callback, context);\n         * ```\n         * \n         * To listen for a pointer down event anywhere on the game canvas.\n         * \n         * Game Objects can be enabled for input by calling their `setInteractive` method. After which they\n         * will directly emit input events:\n         * \n         * ```javascript\n         * var sprite = this.add.sprite(x, y, texture);\n         * sprite.setInteractive();\n         * sprite.on('pointerdown', callback, context);\n         * ```\n         * \n         * Please see the Input examples and tutorials for more information.",
        "* \n             * @param scene A reference to the Scene that this Input Plugin is responsible for.",
        "* An instance of the Gamepad Plugin class, if enabled via the `input.gamepad` Scene or Game Config property.\n             * Use this to create access Gamepads connected to the browser and respond to gamepad buttons.",
        "* A reference to the Scene that this Input Plugin is responsible for.",
        "* A reference to the Scene Systems class.",
        "* A reference to the Scene Systems Settings.",
        "* A reference to the Game Input Manager.",
        "* If set, the Input Plugin will run its update loop every frame.",
        "* A reference to the Scene Display List. This property is set during the `boot` method.",
        "* A reference to the Scene Cameras Manager. This property is set during the `boot` method.",
        "* A reference to the Mouse Manager.\n             * \n             * This property is only set if Mouse support has been enabled in your Game Configuration file.\n             * \n             * If you just wish to get access to the mouse pointer, use the `mousePointer` property instead.",
        "* When set to `true` (the default) the Input Plugin will emulate DOM behavior by only emitting events from\n             * the top-most Game Objects in the Display List.\n             * \n             * If set to `false` it will emit events from all Game Objects below a Pointer, not just the top one.",
        "* How often should the Pointers be checked?\n             * \n             * The value is a time, given in ms, and is the time that must have elapsed between game steps before\n             * the Pointers will be polled again. When a pointer is polled it runs a hit test to see which Game\n             * Objects are currently below it, or being interacted with it.\n             * \n             * Pointers will *always* be checked if they have been moved by the user, or press or released.\n             * \n             * This property only controls how often they will be polled if they have not been updated.\n             * You should set this if you want to have Game Objects constantly check against the pointers, even\n             * if the pointer didn't move itself.\n             * \n             * Set to 0 to poll constantly. Set to -1 to only poll on user movement.",
        "* The distance, in pixels, a pointer has to move while being held down, before it thinks it is being dragged.",
        "* The amount of time, in ms, a pointer has to be held down before it thinks it is dragging.",
        "* Checks to see if both this plugin and the Scene to which it belongs is active.",
        "* Clears a Game Object so it no longer has an Interactive Object associated with it.\n             * The Game Object is then queued for removal from the Input Plugin on the next update.\n             * @param gameObject The Game Object that will have its Interactive Object removed.",
        "* Disables Input on a single Game Object.\n             * \n             * An input disabled Game Object still retains its Interactive Object component and can be re-enabled\n             * at any time, by passing it to `InputPlugin.enable`.\n             * @param gameObject The Game Object to have its input system disabled.",
        "* Enable a Game Object for interaction.\n             * \n             * If the Game Object already has an Interactive Object component, it is enabled and returned.\n             * \n             * Otherwise, a new Interactive Object component is created and assigned to the Game Object's `input` property.\n             * \n             * Input works by using hit areas, these are nearly always geometric shapes, such as rectangles or circles, that act as the hit area\n             * for the Game Object. However, you can provide your own hit area shape and callback, should you wish to handle some more advanced\n             * input detection.\n             * \n             * If no arguments are provided it will try and create a rectangle hit area based on the texture frame the Game Object is using. If\n             * this isn't a texture-bound object, such as a Graphics or BitmapText object, this will fail, and you'll need to provide a specific\n             * shape for it to use.\n             * \n             * You can also provide an Input Configuration Object as the only argument to this method.\n             * @param gameObject The Game Object to be enabled for input.\n             * @param shape Either an input configuration object, or a geometric shape that defines the hit area for the Game Object. If not specified a Rectangle will be used.\n             * @param callback The 'contains' function to invoke to check if the pointer is within the hit area.\n             * @param dropZone Is this Game Object a drop zone or not? Default false.",
        "* Takes the given Pointer and performs a hit test against it, to see which interactive Game Objects\n             * it is currently above.\n             * \n             * The hit test is performed against which-ever Camera the Pointer is over. If it is over multiple\n             * cameras, it starts checking the camera at the top of the camera list, and if nothing is found, iterates down the list.\n             * @param pointer The Pointer to check against the Game Objects.",
        "* Returns the drag state of the given Pointer for this Input Plugin.\n             * \n             * The state will be one of the following:\n             * \n             * 0 = Not dragging anything\n             * 1 = Primary button down and objects below, so collect a draglist\n             * 2 = Pointer being checked if meets drag criteria\n             * 3 = Pointer meets criteria, notify the draglist\n             * 4 = Pointer actively dragging the draglist and has moved\n             * 5 = Pointer actively dragging but has been released, notify draglist\n             * @param pointer The Pointer to get the drag state for.",
        "* Sets the drag state of the given Pointer for this Input Plugin.\n             * \n             * The state must be one of the following values:\n             * \n             * 0 = Not dragging anything\n             * 1 = Primary button down and objects below, so collect a draglist\n             * 2 = Pointer being checked if meets drag criteria\n             * 3 = Pointer meets criteria, notify the draglist\n             * 4 = Pointer actively dragging the draglist and has moved\n             * 5 = Pointer actively dragging but has been released, notify draglist\n             * @param pointer The Pointer to set the drag state for.\n             * @param state The drag state value. An integer between 0 and 5.",
        "* Sets the draggable state of the given array of Game Objects.\n             * \n             * They can either be set to be draggable, or can have their draggable state removed by passing `false`.\n             * \n             * A Game Object will not fire drag events unless it has been specifically enabled for drag.\n             * @param gameObjects An array of Game Objects to change the draggable state on.\n             * @param value Set to `true` if the Game Objects should be made draggable, `false` if they should be unset. Default true.",
        "* Creates a function that can be passed to `setInteractive`, `enable` or `setHitArea` that will handle\n             * pixel-perfect input detection on an Image or Sprite based Game Object, or any custom class that extends them.\n             * \n             * The following will create a sprite that is clickable on any pixel that has an alpha value >= 1.\n             * \n             * ```javascript\n             * this.add.sprite(x, y, key).setInteractive(this.input.makePixelPerfect());\n             * ```\n             * \n             * The following will create a sprite that is clickable on any pixel that has an alpha value >= 150.\n             * \n             * ```javascript\n             * this.add.sprite(x, y, key).setInteractive(this.input.makePixelPerfect(150));\n             * ```\n             * \n             * Once you have made an Interactive Object pixel perfect it impacts all input related events for it: down, up,\n             * dragstart, drag, etc.\n             * \n             * As a pointer interacts with the Game Object it will constantly poll the texture, extracting a single pixel from\n             * the given coordinates and checking its color values. This is an expensive process, so should only be enabled on\n             * Game Objects that really need it.\n             * \n             * You cannot make non-texture based Game Objects pixel perfect. So this will not work on Graphics, BitmapText,\n             * Render Textures, Text, Tilemaps, Containers or Particles.\n             * @param alphaTolerance The alpha level that the pixel should be above to be included as a successful interaction. Default 1.",
        "* Sets the hit area for the given array of Game Objects.\n             * \n             * A hit area is typically one of the geometric shapes Phaser provides, such as a `Phaser.Geom.Rectangle`\n             * or `Phaser.Geom.Circle`. However, it can be any object as long as it works with the provided callback.\n             * \n             * If no hit area is provided a Rectangle is created based on the size of the Game Object, if possible\n             * to calculate.\n             * \n             * The hit area callback is the function that takes an `x` and `y` coordinate and returns a boolean if\n             * those values fall within the area of the shape or not. All of the Phaser geometry objects provide this,\n             * such as `Phaser.Geom.Rectangle.Contains`.\n             * @param gameObjects An array of Game Objects to set the hit area on.\n             * @param shape Either an input configuration object, or a geometric shape that defines the hit area for the Game Object. If not specified a Rectangle will be used.\n             * @param callback The 'contains' function to invoke to check if the pointer is within the hit area.",
        "* Sets the hit area for an array of Game Objects to be a `Phaser.Geom.Circle` shape, using\n             * the given coordinates and radius to control its position and size.\n             * @param gameObjects An array of Game Objects to set as having a circle hit area.\n             * @param x The center of the circle.\n             * @param y The center of the circle.\n             * @param radius The radius of the circle.\n             * @param callback The hit area callback. If undefined it uses Circle.Contains.",
        "* Sets the hit area for an array of Game Objects to be a `Phaser.Geom.Ellipse` shape, using\n             * the given coordinates and dimensions to control its position and size.\n             * @param gameObjects An array of Game Objects to set as having an ellipse hit area.\n             * @param x The center of the ellipse.\n             * @param y The center of the ellipse.\n             * @param width The width of the ellipse.\n             * @param height The height of the ellipse.\n             * @param callback The hit area callback. If undefined it uses Ellipse.Contains.",
        "* Sets the hit area for an array of Game Objects to be a `Phaser.Geom.Rectangle` shape, using\n             * the Game Objects texture frame to define the position and size of the hit area.\n             * @param gameObjects An array of Game Objects to set as having an ellipse hit area.\n             * @param callback The hit area callback. If undefined it uses Rectangle.Contains.",
        "* Sets the hit area for an array of Game Objects to be a `Phaser.Geom.Rectangle` shape, using\n             * the given coordinates and dimensions to control its position and size.\n             * @param gameObjects An array of Game Objects to set as having a rectangular hit area.\n             * @param x The top-left of the rectangle.\n             * @param y The top-left of the rectangle.\n             * @param width The width of the rectangle.\n             * @param height The height of the rectangle.\n             * @param callback The hit area callback. If undefined it uses Rectangle.Contains.",
        "* Sets the hit area for an array of Game Objects to be a `Phaser.Geom.Triangle` shape, using\n             * the given coordinates to control the position of its points.\n             * @param gameObjects An array of Game Objects to set as having a  triangular hit area.\n             * @param x1 The x coordinate of the first point of the triangle.\n             * @param y1 The y coordinate of the first point of the triangle.\n             * @param x2 The x coordinate of the second point of the triangle.\n             * @param y2 The y coordinate of the second point of the triangle.\n             * @param x3 The x coordinate of the third point of the triangle.\n             * @param y3 The y coordinate of the third point of the triangle.\n             * @param callback The hit area callback. If undefined it uses Triangle.Contains.",
        "* Sets the Pointers to always poll.\n             * \n             * When a pointer is polled it runs a hit test to see which Game Objects are currently below it,\n             * or being interacted with it, regardless if the Pointer has actually moved or not.\n             * \n             * You should enable this if you want objects in your game to fire over / out events, and the objects\n             * are constantly moving, but the pointer may not have. Polling every frame has additional computation\n             * costs, especially if there are a large number of interactive objects in your game.",
        "* Sets the Pointers to only poll when they are moved or updated.\n             * \n             * When a pointer is polled it runs a hit test to see which Game Objects are currently below it,\n             * or being interacted with it.",
        "* Sets the poll rate value. This is the amount of time that should have elapsed before a pointer\n             * will be polled again. See the `setPollAlways` and `setPollOnMove` methods.\n             * @param value The amount of time, in ms, that should elapsed before re-polling the pointers.",
        "* When set to `true` the global Input Manager will emulate DOM behavior by only emitting events from\n             * the top-most Game Objects in the Display List.\n             * \n             * If set to `false` it will emit events from all Game Objects below a Pointer, not just the top one.\n             * @param value `true` to only include the top-most Game Object, or `false` to include all Game Objects in a hit test.",
        "* When set to `true` this Input Plugin will emulate DOM behavior by only emitting events from\n             * the top-most Game Objects in the Display List.\n             * \n             * If set to `false` it will emit events from all Game Objects below a Pointer, not just the top one.\n             * @param value `true` to only include the top-most Game Object, or `false` to include all Game Objects in a hit test.",
        "* Given an array of Game Objects, sort the array and return it, so that the objects are in depth index order\n             * with the lowest at the bottom.\n             * @param gameObjects An array of Game Objects to be sorted.",
        "* Causes the Input Manager to stop emitting any events for the remainder of this game step.",
        "* **Note:** As of Phaser 3.16 this method is no longer required _unless_ you have set `input.queue = true`\n             * in your game config, to force it to use the legacy event queue system. This method is deprecated and\n             * will be removed in a future version.\n             * \n             * Adds a callback to be invoked whenever the native DOM `mouseup` or `touchend` events are received.\n             * By setting the `isOnce` argument you can control if the callback is called once,\n             * or every time the DOM event occurs.\n             * \n             * Callbacks passed to this method are invoked _immediately_ when the DOM event happens,\n             * within the scope of the DOM event handler. Therefore, they are considered as 'native'\n             * from the perspective of the browser. This means they can be used for tasks such as\n             * opening new browser windows, or anything which explicitly requires user input to activate.\n             * However, as a result of this, they come with their own risks, and as such should not be used\n             * for general game input, but instead be reserved for special circumstances.\n             * \n             * If all you're trying to do is execute a callback when a pointer is released, then\n             * please use the internal Input event system instead.\n             * \n             * Please understand that these callbacks are invoked when the browser feels like doing so,\n             * which may be entirely out of the normal flow of the Phaser Game Loop. Therefore, you should absolutely keep\n             * Phaser related operations to a minimum in these callbacks. For example, don't destroy Game Objects,\n             * change Scenes or manipulate internal systems, otherwise you run a very real risk of creating\n             * heisenbugs (https://en.wikipedia.org/wiki/Heisenbug) that prove a challenge to reproduce, never mind\n             * solve.\n             * @param callback The callback to be invoked on this DOM event.\n             * @param isOnce `true` if the callback will only be invoked once, `false` to call every time this event happens. Default true.",
        "* **Note:** As of Phaser 3.16 this method is no longer required _unless_ you have set `input.queue = true`\n             * in your game config, to force it to use the legacy event queue system. This method is deprecated and\n             * will be removed in a future version.\n             * \n             * Adds a callback to be invoked whenever the native DOM `mousedown` or `touchstart` events are received.\n             * By setting the `isOnce` argument you can control if the callback is called once,\n             * or every time the DOM event occurs.\n             * \n             * Callbacks passed to this method are invoked _immediately_ when the DOM event happens,\n             * within the scope of the DOM event handler. Therefore, they are considered as 'native'\n             * from the perspective of the browser. This means they can be used for tasks such as\n             * opening new browser windows, or anything which explicitly requires user input to activate.\n             * However, as a result of this, they come with their own risks, and as such should not be used\n             * for general game input, but instead be reserved for special circumstances.\n             * \n             * If all you're trying to do is execute a callback when a pointer is down, then\n             * please use the internal Input event system instead.\n             * \n             * Please understand that these callbacks are invoked when the browser feels like doing so,\n             * which may be entirely out of the normal flow of the Phaser Game Loop. Therefore, you should absolutely keep\n             * Phaser related operations to a minimum in these callbacks. For example, don't destroy Game Objects,\n             * change Scenes or manipulate internal systems, otherwise you run a very real risk of creating\n             * heisenbugs (https://en.wikipedia.org/wiki/Heisenbug) that prove a challenge to reproduce, never mind\n             * solve.\n             * @param callback The callback to be invoked on this dom event.\n             * @param isOnce `true` if the callback will only be invoked once, `false` to call every time this event happens. Default true.",
        "* **Note:** As of Phaser 3.16 this method is no longer required _unless_ you have set `input.queue = true`\n             * in your game config, to force it to use the legacy event queue system. This method is deprecated and\n             * will be removed in a future version.\n             * \n             * Adds a callback to be invoked whenever the native DOM `mousemove` or `touchmove` events are received.\n             * By setting the `isOnce` argument you can control if the callback is called once,\n             * or every time the DOM event occurs.\n             * \n             * Callbacks passed to this method are invoked _immediately_ when the DOM event happens,\n             * within the scope of the DOM event handler. Therefore, they are considered as 'native'\n             * from the perspective of the browser. This means they can be used for tasks such as\n             * opening new browser windows, or anything which explicitly requires user input to activate.\n             * However, as a result of this, they come with their own risks, and as such should not be used\n             * for general game input, but instead be reserved for special circumstances.\n             * \n             * If all you're trying to do is execute a callback when a pointer is moved, then\n             * please use the internal Input event system instead.\n             * \n             * Please understand that these callbacks are invoked when the browser feels like doing so,\n             * which may be entirely out of the normal flow of the Phaser Game Loop. Therefore, you should absolutely keep\n             * Phaser related operations to a minimum in these callbacks. For example, don't destroy Game Objects,\n             * change Scenes or manipulate internal systems, otherwise you run a very real risk of creating\n             * heisenbugs (https://en.wikipedia.org/wiki/Heisenbug) that prove a challenge to reproduce, never mind\n             * solve.\n             * @param callback The callback to be invoked on this dom event.\n             * @param isOnce `true` if the callback will only be invoked once, `false` to call every time this event happens. Default false.",
        "* Adds new Pointer objects to the Input Manager.\n             * \n             * By default Phaser creates 2 pointer objects: `mousePointer` and `pointer1`.\n             * \n             * You can create more either by calling this method, or by setting the `input.activePointers` property\n             * in the Game Config, up to a maximum of 10 pointers.\n             * \n             * The first 10 pointers are available via the `InputPlugin.pointerX` properties, once they have been added\n             * via this method.\n             * @param quantity The number of new Pointers to create. A maximum of 10 is allowed in total. Default 1.",
        "* Tells the Input system to set a custom cursor.\n             * \n             * This cursor will be the default cursor used when interacting with the game canvas.\n             * \n             * If an Interactive Object also sets a custom cursor, this is the cursor that is reset after its use.\n             * \n             * Any valid CSS cursor value is allowed, including paths to image files, i.e.:\n             * \n             * ```javascript\n             * this.input.setDefaultCursor('url(assets/cursors/sword.cur), pointer');\n             * ```\n             * \n             * Please read about the differences between browsers when it comes to the file formats and sizes they support:\n             * \n             * https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n             * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_User_Interface/Using_URL_values_for_the_cursor_property\n             * \n             * It's up to you to pick a suitable cursor format that works across the range of browsers you need to support.\n             * @param cursor The CSS to be used when setting the default cursor.",
        "* The x coordinates of the ActivePointer based on the first camera in the camera list.\n             * This is only safe to use if your game has just 1 non-transformed camera and doesn't use multi-touch.",
        "* The y coordinates of the ActivePointer based on the first camera in the camera list.\n             * This is only safe to use if your game has just 1 non-transformed camera and doesn't use multi-touch.",
        "* Are any mouse or touch pointers currently over the game canvas?",
        "* The mouse has its own unique Pointer object, which you can reference directly if making a _desktop specific game_.\n             * If you are supporting both desktop and touch devices then do not use this property, instead use `activePointer`\n             * which will always map to the most recently interacted pointer.",
        "* The current active input Pointer.",
        "* A touch-based Pointer object.\n             * This will be `undefined` by default unless you add a new Pointer using `addPointer`.",
        "* A touch-based Pointer object.\n             * This will be `undefined` by default unless you add a new Pointer using `addPointer`.",
        "* A touch-based Pointer object.\n             * This will be `undefined` by default unless you add a new Pointer using `addPointer`.",
        "* A touch-based Pointer object.\n             * This will be `undefined` by default unless you add a new Pointer using `addPointer`.",
        "* A touch-based Pointer object.\n             * This will be `undefined` by default unless you add a new Pointer using `addPointer`.",
        "* A touch-based Pointer object.\n             * This will be `undefined` by default unless you add a new Pointer using `addPointer`.",
        "* A touch-based Pointer object.\n             * This will be `undefined` by default unless you add a new Pointer using `addPointer`.",
        "* A touch-based Pointer object.\n             * This will be `undefined` by default unless you add a new Pointer using `addPointer`.",
        "* A touch-based Pointer object.\n             * This will be `undefined` by default unless you add a new Pointer using `addPointer`.",
        "* A touch-based Pointer object.\n             * This will be `undefined` by default unless you add a new Pointer using `addPointer`.",
        "* An instance of the Keyboard Plugin class, if enabled via the `input.keyboard` Scene or Game Config property.\n             * Use this to create Key objects and listen for keyboard specific events.",
        "* The object / shape to use as the Hit Area. If not given it will try to create a Rectangle based on the texture frame.",
        "* The callback that determines if the pointer is within the Hit Area shape or not.",
        "* If `true` the Interactive Object will be set to be draggable and emit drag events.",
        "* If `true` the Interactive Object will be set to be a drop zone for draggable objects.",
        "* If `true` the Interactive Object will set the `pointer` hand cursor when a pointer is over it. This is a short-cut for setting `cursor: 'pointer'`.",
        "* The CSS string to be used when the cursor is over this Interactive Object.",
        "* If `true` the a pixel perfect function will be set for the hit area callback. Only works with texture based Game Objects.",
        "* If `pixelPerfect` is set, this is the alpha tolerance threshold value used in the callback.",
        "* Static method called directly by the Core internal Plugins.\n             * Key is a reference used to get the plugin from the plugins object (i.e. InputPlugin)\n             * Plugin is the object to instantiate to create the plugin\n             * Mapping is what the plugin is injected into the Scene.Systems as (i.e. input)",
        "* Returns the input plugin object from the cache based on the given key.",
        "* Installs all of the registered Input Plugins into the given target.",
        "* Removes an input plugin based on the given key.",
        "* A KeyCombo will listen for a specific string of keys from the Keyboard, and when it receives them\n             * it will emit a `keycombomatch` event from the Keyboard Manager.\n             * \n             * The keys to be listened for can be defined as:\n             * \n             * A string (i.e. 'ATARI')\n             * An array of either integers (key codes) or strings, or a mixture of both\n             * An array of objects (such as Key objects) with a public 'keyCode' property\n             * \n             * For example, to listen for the Konami code (up, up, down, down, left, right, left, right, b, a, enter)\n             * you could pass the following array of key codes:\n             * \n             * ```javascript\n             * this.input.keyboard.createCombo([ 38, 38, 40, 40, 37, 39, 37, 39, 66, 65, 13 ], { resetOnMatch: true });\n             * \n             * this.input.keyboard.on('keycombomatch', function (event) {\n             *     console.log('Konami Code entered!');\n             * });\n             * ```\n             * \n             * Or, to listen for the user entering the word PHASER:\n             * \n             * ```javascript\n             * this.input.keyboard.createCombo('PHASER');\n             * ```",
        "* \n                 * @param keyboardPlugin A reference to the Keyboard Plugin.\n                 * @param keys The keys that comprise this combo.\n                 * @param config A Key Combo configuration object.",
        "* A reference to the Keyboard Manager",
        "* A flag that controls if this Key Combo is actively processing keys or not.",
        "* An array of the keycodes that comprise this combo.",
        "* The current keyCode the combo is waiting for.",
        "* The current index of the key being waited for in the 'keys' string.",
        "* The length of this combo (in keycodes)",
        "* The time the previous key in the combo was matched.",
        "* Has this Key Combo been matched yet?",
        "* The time the entire combo was matched.",
        "* If they press the wrong key do we reset the combo?",
        "* The max delay in ms between each key press. Above this the combo is reset. 0 means disabled.",
        "* If previously matched and they press the first key of the combo again, will it reset?",
        "* If the combo matches, will it delete itself?",
        "* How far complete is this combo? A value between 0 and 1.",
        "* Destroys this Key Combo and all of its references.",
        "* The Global Key Down Event.\n                 * \n                 * This event is dispatched by the Keyboard Plugin when any key on the keyboard is pressed down.\n                 * \n                 * Listen to this event from within a Scene using: `this.input.keyboard.on('keydown', listener)`.\n                 * \n                 * You can also listen for a specific key being pressed. See [Keyboard.Events.KEY_DOWN]{@linkcode Phaser.Input.Keyboard.Events#event:KEY_DOWN} for details.\n                 * \n                 * Finally, you can create Key objects, which you can also listen for events from. See [Keyboard.Events.DOWN]{@linkcode Phaser.Input.Keyboard.Events#event:DOWN} for details.\n                 * \n                 * _Note_: Many keyboards are unable to process certain combinations of keys due to hardware limitations known as ghosting.\n                 * Read [this article on ghosting]{@link http://www.html5gamedevs.com/topic/4876-impossible-to-use-more-than-2-keyboard-input-buttons-at-the-same-time/} for details.\n                 * \n                 * Also, please be aware that some browser extensions can disable or override Phaser keyboard handling.\n                 * For example, the Chrome extension vimium is known to disable Phaser from using the D key, while EverNote disables the backtick key.\n                 * There are others. So, please check your extensions if you find you have specific keys that don't work.",
        "* The Global Key Up Event.\n                 * \n                 * This event is dispatched by the Keyboard Plugin when any key on the keyboard is released.\n                 * \n                 * Listen to this event from within a Scene using: `this.input.keyboard.on('keyup', listener)`.\n                 * \n                 * You can also listen for a specific key being released. See [Keyboard.Events.KEY_UP]{@linkcode Phaser.Input.Keyboard.Events#event:KEY_UP} for details.\n                 * \n                 * Finally, you can create Key objects, which you can also listen for events from. See [Keyboard.Events.UP]{@linkcode Phaser.Input.Keyboard.Events#event:UP} for details.",
        "* The Key Combo Match Event.\n                 * \n                 * This event is dispatched by the Keyboard Plugin when a [Key Combo]{@link Phaser.Input.Keyboard.KeyCombo} is matched.\n                 * \n                 * Listen for this event from the Key Plugin after a combo has been created:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.createCombo([ 38, 38, 40, 40, 37, 39, 37, 39, 66, 65, 13 ], { resetOnMatch: true });\n                 * \n                 * this.input.keyboard.on('keycombomatch', function (event) {\n                 *     console.log('Konami Code entered!');\n                 * });\n                 * ```",
        "* The Key Down Event.\n                 * \n                 * This event is dispatched by a [Key]{@link Phaser.Input.Keyboard.Key} object when it is pressed.\n                 * \n                 * Listen for this event from the Key object instance directly:\n                 * \n                 * ```javascript\n                 * var spaceBar = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n                 * \n                 * spaceBar.on('down', listener)\n                 * ```\n                 * \n                 * You can also create a generic 'global' listener. See [Keyboard.Events.ANY_KEY_DOWN]{@linkcode Phaser.Input.Keyboard.Events#event:ANY_KEY_DOWN} for details.",
        "* The Key Down Event.\n                 * \n                 * This event is dispatched by the Keyboard Plugin when any key on the keyboard is pressed down.\n                 * \n                 * Unlike the `ANY_KEY_DOWN` event, this one has a special dynamic event name. For example, to listen for the `A` key being pressed\n                 * use the following from within a Scene: `this.input.keyboard.on('keydown-A', listener)`. You can replace the `-A` part of the event\n                 * name with any valid [Key Code string]{@link Phaser.Input.Keyboard.KeyCodes}. For example, this will listen for the space bar: \n                 * `this.input.keyboard.on('keydown-SPACE', listener)`.\n                 * \n                 * You can also create a generic 'global' listener. See [Keyboard.Events.ANY_KEY_DOWN]{@linkcode Phaser.Input.Keyboard.Events#event:ANY_KEY_DOWN} for details.\n                 * \n                 * Finally, you can create Key objects, which you can also listen for events from. See [Keyboard.Events.DOWN]{@linkcode Phaser.Input.Keyboard.Events#event:DOWN} for details.\n                 * \n                 * _Note_: Many keyboards are unable to process certain combinations of keys due to hardware limitations known as ghosting.\n                 * Read [this article on ghosting]{@link http://www.html5gamedevs.com/topic/4876-impossible-to-use-more-than-2-keyboard-input-buttons-at-the-same-time/} for details.\n                 * \n                 * Also, please be aware that some browser extensions can disable or override Phaser keyboard handling.\n                 * For example, the Chrome extension vimium is known to disable Phaser from using the D key, while EverNote disables the backtick key.\n                 * There are others. So, please check your extensions if you find you have specific keys that don't work.",
        "* The Key Up Event.\n                 * \n                 * This event is dispatched by the Keyboard Plugin when any key on the keyboard is released.\n                 * \n                 * Unlike the `ANY_KEY_UP` event, this one has a special dynamic event name. For example, to listen for the `A` key being released\n                 * use the following from within a Scene: `this.input.keyboard.on('keyup-A', listener)`. You can replace the `-A` part of the event\n                 * name with any valid [Key Code string]{@link Phaser.Input.Keyboard.KeyCodes}. For example, this will listen for the space bar: \n                 * `this.input.keyboard.on('keyup-SPACE', listener)`.\n                 * \n                 * You can also create a generic 'global' listener. See [Keyboard.Events.ANY_KEY_UP]{@linkcode Phaser.Input.Keyboard.Events#event:ANY_KEY_UP} for details.\n                 * \n                 * Finally, you can create Key objects, which you can also listen for events from. See [Keyboard.Events.UP]{@linkcode Phaser.Input.Keyboard.Events#event:UP} for details.",
        "* The Key Up Event.\n                 * \n                 * This event is dispatched by a [Key]{@link Phaser.Input.Keyboard.Key} object when it is released.\n                 * \n                 * Listen for this event from the Key object instance directly:\n                 * \n                 * ```javascript\n                 * var spaceBar = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n                 * \n                 * spaceBar.on('up', listener)\n                 * ```\n                 * \n                 * You can also create a generic 'global' listener. See [Keyboard.Events.ANY_KEY_UP]{@linkcode Phaser.Input.Keyboard.Events#event:ANY_KEY_UP} for details.",
        "* The Keyboard Manager is a helper class that belongs to the global Input Manager.\n             * \n             * Its role is to listen for native DOM Keyboard Events and then store them for further processing by the Keyboard Plugin.\n             * \n             * You do not need to create this class directly, the Input Manager will create an instance of it automatically if keyboard\n             * input has been enabled in the Game Config.",
        "* \n                 * @param inputManager A reference to the Input Manager.",
        "* A reference to the Input Manager.",
        "* A flag that controls if the non-modified keys, matching those stored in the `captures` array,\n                 * have `preventDefault` called on them or not.\n                 * \n                 * A non-modified key is one that doesn't have a modifier key held down with it. The modifier keys are\n                 * shift, control, alt and the meta key (Command on a Mac, the Windows Key on Windows).\n                 * Therefore, if the user presses shift + r, it won't prevent this combination, because of the modifier.\n                 * However, if the user presses just the r key on its own, it will have its event prevented.\n                 * \n                 * If you wish to stop capturing the keys, for example switching out to a DOM based element, then\n                 * you can toggle this property at run-time.",
        "* An array of Key Code values that will automatically have `preventDefault` called on them,\n                 * as long as the `KeyboardManager.preventDefault` boolean is set to `true`.\n                 * \n                 * By default the array is empty.\n                 * \n                 * The key must be non-modified when pressed in order to be captured.\n                 * \n                 * A non-modified key is one that doesn't have a modifier key held down with it. The modifier keys are\n                 * shift, control, alt and the meta key (Command on a Mac, the Windows Key on Windows).\n                 * Therefore, if the user presses shift + r, it won't prevent this combination, because of the modifier.\n                 * However, if the user presses just the r key on its own, it will have its event prevented.\n                 * \n                 * If you wish to stop capturing the keys, for example switching out to a DOM based element, then\n                 * you can toggle the `KeyboardManager.preventDefault` boolean at run-time.\n                 * \n                 * If you need more specific control, you can create Key objects and set the flag on each of those instead.\n                 * \n                 * This array can be populated via the Game Config by setting the `input.keyboard.capture` array, or you\n                 * can call the `addCapture` method. See also `removeCapture` and `clearCaptures`.",
        "* A boolean that controls if the Keyboard Manager is enabled or not.\n                 * Can be toggled on the fly.",
        "* The Keyboard Event target, as defined in the Game Config.\n                 * Typically the window in which the game is rendering, but can be any interactive DOM element.",
        "* The Key Down Event handler.\n                 * This function is sent the native DOM KeyEvent.\n                 * Initially empty and bound in the `startListeners` method.",
        "* The Key Up Event handler.\n                 * This function is sent the native DOM KeyEvent.\n                 * Initially empty and bound in the `startListeners` method.",
        "* Starts the Keyboard Event listeners running.\n                 * This is called automatically and does not need to be manually invoked.",
        "* Stops the Key Event listeners.\n                 * This is called automatically and does not need to be manually invoked.",
        "* By default when a key is pressed Phaser will not stop the event from propagating up to the browser.\n                 * There are some keys this can be annoying for, like the arrow keys or space bar, which make the browser window scroll.\n                 * \n                 * This `addCapture` method enables consuming keyboard event for specific keys so it doesn't bubble up to the the browser\n                 * and cause the default browser behavior.\n                 * \n                 * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to say prevent\n                 * the SPACE BAR from triggering a page scroll, then it will prevent it for any Scene in your game, not just the calling one.\n                 * \n                 * You can pass in a single key code value, or an array of key codes, or a string:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.addCapture(62);\n                 * ```\n                 * \n                 * An array of key codes:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.addCapture([ 62, 63, 64 ]);\n                 * ```\n                 * \n                 * Or a string:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.addCapture('W,S,A,D');\n                 * ```\n                 * \n                 * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\n                 * \n                 * You can also provide an array mixing both strings and key code integers.\n                 * \n                 * If there are active captures after calling this method, the `preventDefault` property is set to `true`.\n                 * @param keycode The Key Codes to enable capture for, preventing them reaching the browser.",
        "* Removes an existing key capture.\n                 * \n                 * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to remove\n                 * the capture of a key, then it will remove it for any Scene in your game, not just the calling one.\n                 * \n                 * You can pass in a single key code value, or an array of key codes, or a string:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.removeCapture(62);\n                 * ```\n                 * \n                 * An array of key codes:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.removeCapture([ 62, 63, 64 ]);\n                 * ```\n                 * \n                 * Or a string:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.removeCapture('W,S,A,D');\n                 * ```\n                 * \n                 * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\n                 * \n                 * You can also provide an array mixing both strings and key code integers.\n                 * \n                 * If there are no captures left after calling this method, the `preventDefault` property is set to `false`.\n                 * @param keycode The Key Codes to disable capture for, allowing them reaching the browser again.",
        "* Removes all keyboard captures and sets the `preventDefault` property to `false`.",
        "* Destroys this Keyboard Manager instance.",
        "* The Keyboard Plugin is an input plugin that belongs to the Scene-owned Input system.\n             * \n             * Its role is to listen for native DOM Keyboard Events and then process them.\n             * \n             * You do not need to create this class directly, the Input system will create an instance of it automatically.\n             * \n             * You can access it from within a Scene using `this.input.keyboard`. For example, you can do:\n             * \n             * ```javascript\n             * this.input.keyboard.on('keydown', callback, context);\n             * ```\n             * \n             * Or, to listen for a specific key:\n             * \n             * ```javascript\n             * this.input.keyboard.on('keydown-A', callback, context);\n             * ```\n             * \n             * You can also create Key objects, which you can then poll in your game loop:\n             * \n             * ```javascript\n             * var spaceBar = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n             * ```\n             * \n             * If you have multiple parallel Scenes, each trying to get keyboard input, be sure to disable capture on them to stop them from\n             * stealing input from another Scene in the list. You can do this with `this.input.keyboard.enabled = false` within the\n             * Scene to stop all input, or `this.input.keyboard.preventDefault = false` to stop a Scene halting input on another Scene.\n             * \n             * _Note_: Many keyboards are unable to process certain combinations of keys due to hardware limitations known as ghosting.\n             * See http://www.html5gamedevs.com/topic/4876-impossible-to-use-more-than-2-keyboard-input-buttons-at-the-same-time/ for more details.\n             * \n             * Also please be aware that certain browser extensions can disable or override Phaser keyboard handling.\n             * For example the Chrome extension vimium is known to disable Phaser from using the D key, while EverNote disables the backtick key.\n             * And there are others. So, please check your extensions before opening Phaser issues about keys that don't work.",
        "* \n                 * @param sceneInputPlugin A reference to the Scene Input Plugin that the KeyboardPlugin belongs to.",
        "* A reference to the core game, so we can listen for visibility events.",
        "* A reference to the Scene that this Input Plugin is responsible for.",
        "* A reference to the Scene Systems Settings.",
        "* A reference to the Scene Input Plugin that created this Keyboard Plugin.",
        "* A reference to the global Keyboard Manager.",
        "* A boolean that controls if this Keyboard Plugin is enabled or not.\n                 * Can be toggled on the fly.",
        "* An array of Key objects to process.",
        "* An array of KeyCombo objects to process.",
        "* Checks to see if both this plugin and the Scene to which it belongs is active.",
        "* By default when a key is pressed Phaser will not stop the event from propagating up to the browser.\n                 * There are some keys this can be annoying for, like the arrow keys or space bar, which make the browser window scroll.\n                 * \n                 * This `addCapture` method enables consuming keyboard events for specific keys, so they don't bubble up the browser\n                 * and cause the default behaviors.\n                 * \n                 * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to say prevent\n                 * the SPACE BAR from triggering a page scroll, then it will prevent it for any Scene in your game, not just the calling one.\n                 * \n                 * You can pass a single key code value:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.addCapture(62);\n                 * ```\n                 * \n                 * An array of key codes:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.addCapture([ 62, 63, 64 ]);\n                 * ```\n                 * \n                 * Or, a comma-delimited string:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.addCapture('W,S,A,D');\n                 * ```\n                 * \n                 * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\n                 * \n                 * You can also provide an array mixing both strings and key code integers.\n                 * @param keycode The Key Codes to enable event capture for.",
        "* Removes an existing key capture.\n                 * \n                 * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to remove\n                 * the capture of a key, then it will remove it for any Scene in your game, not just the calling one.\n                 * \n                 * You can pass a single key code value:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.removeCapture(62);\n                 * ```\n                 * \n                 * An array of key codes:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.removeCapture([ 62, 63, 64 ]);\n                 * ```\n                 * \n                 * Or, a comma-delimited string:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.removeCapture('W,S,A,D');\n                 * ```\n                 * \n                 * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\n                 * \n                 * You can also provide an array mixing both strings and key code integers.\n                 * @param keycode The Key Codes to disable event capture for.",
        "* Returns an array that contains all of the keyboard captures currently enabled.",
        "* Allows Phaser to prevent any key captures you may have defined from bubbling up the browser.\n                 * You can use this to re-enable event capturing if you had paused it via `disableGlobalCapture`.",
        "* Disables Phaser from preventing any key captures you may have defined, without actually removing them.\n                 * You can use this to temporarily disable event capturing if, for example, you swap to a DOM element.",
        "* Removes all keyboard captures.\n                 * \n                 * Note that this is a global change. It will clear all event captures across your game, not just for this specific Scene.",
        "* Creates and returns an object containing 4 hotkeys for Up, Down, Left and Right, and also Space Bar and shift.",
        "* A practical way to create an object containing user selected hotkeys.\n                 * \n                 * For example:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.addKeys({ 'up': Phaser.Input.Keyboard.KeyCodes.W, 'down': Phaser.Input.Keyboard.KeyCodes.S });\n                 * ```\n                 * \n                 * would return an object containing the properties (`up` and `down`) mapped to W and S {@link Phaser.Input.Keyboard.Key} objects.\n                 * \n                 * You can also pass in a comma-separated string:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.addKeys('W,S,A,D');\n                 * ```\n                 * \n                 * Which will return an object with the properties W, S, A and D mapped to the relevant Key objects.\n                 * \n                 * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\n                 * @param keys An object containing Key Codes, or a comma-separated string.\n                 * @param enableCapture Automatically call `preventDefault` on the native DOM browser event for the key codes being added. Default true.\n                 * @param emitOnRepeat Controls if the Key will continuously emit a 'down' event while being held down (true), or emit the event just once (false, the default). Default false.",
        "* Adds a Key object to this Keyboard Plugin.\n                 * \n                 * The given argument can be either an existing Key object, a string, such as `A` or `SPACE`, or a key code value.\n                 * \n                 * If a Key object is given, and one already exists matching the same key code, the existing one is replaced with the new one.\n                 * @param key Either a Key object, a string, such as `A` or `SPACE`, or a key code value.\n                 * @param enableCapture Automatically call `preventDefault` on the native DOM browser event for the key codes being added. Default true.\n                 * @param emitOnRepeat Controls if the Key will continuously emit a 'down' event while being held down (true), or emit the event just once (false, the default). Default false.",
        "* Removes a Key object from this Keyboard Plugin.\n                 * \n                 * The given argument can be either a Key object, a string, such as `A` or `SPACE`, or a key code value.\n                 * @param key Either a Key object, a string, such as `A` or `SPACE`, or a key code value.",
        "* Creates a new KeyCombo.\n                 * \n                 * A KeyCombo will listen for a specific string of keys from the Keyboard, and when it receives them\n                 * it will emit a `keycombomatch` event from this Keyboard Plugin.\n                 * \n                 * The keys to be listened for can be defined as:\n                 * \n                 * A string (i.e. 'ATARI')\n                 * An array of either integers (key codes) or strings, or a mixture of both\n                 * An array of objects (such as Key objects) with a public 'keyCode' property\n                 * \n                 * For example, to listen for the Konami code (up, up, down, down, left, right, left, right, b, a, enter)\n                 * you could pass the following array of key codes:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.createCombo([ 38, 38, 40, 40, 37, 39, 37, 39, 66, 65, 13 ], { resetOnMatch: true });\n                 * \n                 * this.input.keyboard.on('keycombomatch', function (event) {\n                 *     console.log('Konami Code entered!');\n                 * });\n                 * ```\n                 * \n                 * Or, to listen for the user entering the word PHASER:\n                 * \n                 * ```javascript\n                 * this.input.keyboard.createCombo('PHASER');\n                 * ```\n                 * @param keys The keys that comprise this combo.\n                 * @param config A Key Combo configuration object.",
        "* Checks if the given Key object is currently being held down.\n                 * \n                 * The difference between this method and checking the `Key.isDown` property directly is that you can provide\n                 * a duration to this method. For example, if you wanted a key press to fire a bullet, but you only wanted\n                 * it to be able to fire every 100ms, then you can call this method with a `duration` of 100 and it\n                 * will only return `true` every 100ms.\n                 * \n                 * If the Keyboard Plugin has been disabled, this method will always return `false`.\n                 * @param key A Key object.\n                 * @param duration The duration which must have elapsed before this Key is considered as being down. Default 0.",
        "* Resets all Key objects created by _this_ Keyboard Plugin back to their default un-pressed states.\n                 * This can only reset keys created via the `addKey`, `addKeys` or `createCursorKeys` methods.\n                 * If you have created a Key object directly you'll need to reset it yourself.\n                 * \n                 * This method is called automatically when the Keyboard Plugin shuts down, but can be\n                 * invoked directly at any time you require.",
        "* A Key object mapping to the UP arrow key.",
        "* A Key object mapping to the DOWN arrow key.",
        "* A Key object mapping to the LEFT arrow key.",
        "* A Key object mapping to the RIGHT arrow key.",
        "* A Key object mapping to the SPACE BAR key.",
        "* A Key object mapping to the SHIFT key.",
        "* Returns `true` if the Key was pressed down within the `duration` value given, or `false` if it either isn't down,\n             * or was pressed down longer ago than then given duration.\n             * @param key The Key object to test.\n             * @param duration The duration, in ms, within which the key must have been pressed down. Default 50.",
        "* The justDown value allows you to test if this Key has just been pressed down or not.\n             * \n             * When you check this value it will return `true` if the Key is down, otherwise `false`.\n             * \n             * You can only call justDown once per key press. It will only return `true` once, until the Key is released and pressed down again.\n             * This allows you to use it in situations where you want to check if this key is down without using an event, such as in a core game loop.\n             * @param key The Key to check to see if it's just down or not.",
        "* The justUp value allows you to test if this Key has just been released or not.\n             * \n             * When you check this value it will return `true` if the Key is up, otherwise `false`.\n             * \n             * You can only call JustUp once per key release. It will only return `true` once, until the Key is pressed down and released again.\n             * This allows you to use it in situations where you want to check if this key is up without using an event, such as in a core game loop.\n             * @param key The Key to check to see if it's just up or not.",
        "* A generic Key object which can be passed to the Process functions (and so on)\n             * keycode must be an integer",
        "* \n                 * @param keyCode The keycode of this key.",
        "* The keycode of this key.",
        "* The original DOM event.",
        "* Can this Key be processed?",
        "* The \"down\" state of the key. This will remain `true` for as long as the keyboard thinks this key is held down.",
        "* The \"up\" state of the key. This will remain `true` for as long as the keyboard thinks this key is up.",
        "* The down state of the ALT key, if pressed at the same time as this key.",
        "* The down state of the CTRL key, if pressed at the same time as this key.",
        "* The down state of the SHIFT key, if pressed at the same time as this key.",
        "* The down state of the Meta key, if pressed at the same time as this key.\n                 * On a Mac the Meta Key is the Command key. On Windows keyboards, it's the Windows key.",
        "* The location of the modifier key. 0 for standard (or unknown), 1 for left, 2 for right, 3 for numpad.",
        "* The timestamp when the key was last pressed down.",
        "* The number of milliseconds this key was held down for in the previous down - up sequence.",
        "* The timestamp when the key was last released.",
        "* When a key is held down should it continuously fire the `down` event each time it repeats?\n                 * \n                 * By default it will emit the `down` event just once, but if you wish to receive the event\n                 * for each repeat as well, enable this property.",
        "* If a key is held down this holds down the number of times the key has 'repeated'.",
        "* Controls if this Key will continuously emit a `down` event while being held down (true),\n                 * or emit the event just once, on first press, and then skip future events (false).\n                 * @param value Emit `down` events on repeated key down actions, or just once?",
        "* Processes the Key Down action for this Key.\n                 * Called automatically by the Keyboard Plugin.\n                 * @param event The native DOM Keyboard event.",
        "* Processes the Key Up action for this Key.\n                 * Called automatically by the Keyboard Plugin.\n                 * @param event The native DOM Keyboard event.",
        "* Resets this Key object back to its default un-pressed state.",
        "* Removes any bound event handlers and removes local references.",
        "* Keyboard Codes.",
        "* Returns `true` if the Key was released within the `duration` value given, or `false` if it either isn't up,\n             * or was released longer ago than then given duration.\n             * @param key The Key object to test.\n             * @param duration The duration, in ms, within which the key must have been released. Default 50.",
        "* The Mouse Manager is a helper class that belongs to the Input Manager.\n             * \n             * Its role is to listen for native DOM Mouse Events and then pass them onto the Input Manager for further processing.\n             * \n             * You do not need to create this class directly, the Input Manager will create an instance of it automatically.",
        "* \n                 * @param inputManager A reference to the Input Manager.",
        "* A reference to the Input Manager.",
        "* If true the DOM mouse events will have event.preventDefault applied to them, if false they will propagate fully.",
        "* A boolean that controls if the Mouse Manager is enabled or not.\n                 * Can be toggled on the fly.",
        "* The Touch Event target, as defined in the Game Config.\n                 * Typically the canvas to which the game is rendering, but can be any interactive DOM element.",
        "* If the mouse has been pointer locked successfully this will be set to true.",
        "* The Mouse Move Event handler.\n                 * This function is sent the native DOM MouseEvent.\n                 * Initially empty and bound in the `startListeners` method.",
        "* The Mouse Down Event handler.\n                 * This function is sent the native DOM MouseEvent.\n                 * Initially empty and bound in the `startListeners` method.",
        "* The Mouse Up Event handler.\n                 * This function is sent the native DOM MouseEvent.\n                 * Initially empty and bound in the `startListeners` method.",
        "* The Mouse Over Event handler.\n                 * This function is sent the native DOM MouseEvent.\n                 * Initially empty and bound in the `startListeners` method.",
        "* The Mouse Out Event handler.\n                 * This function is sent the native DOM MouseEvent.\n                 * Initially empty and bound in the `startListeners` method.",
        "* Internal pointerLockChange handler.\n                 * This function is sent the native DOM MouseEvent.\n                 * Initially empty and bound in the `startListeners` method.",
        "* Attempts to disable the context menu from appearing if you right-click on the browser.\n                 * \n                 * Works by listening for the `contextmenu` event and prevent defaulting it.\n                 * \n                 * Use this if you need to enable right-button mouse support in your game, and the browser\n                 * menu keeps getting in the way.",
        "* If the browser supports it, you can request that the pointer be locked to the browser window.\n                 * \n                 * This is classically known as 'FPS controls', where the pointer can't leave the browser until\n                 * the user presses an exit key.\n                 * \n                 * If the browser successfully enters a locked state, a `POINTER_LOCK_CHANGE_EVENT` will be dispatched,\n                 * from the games Input Manager, with an `isPointerLocked` property.\n                 * \n                 * It is important to note that pointer lock can only be enabled after an 'engagement gesture',\n                 * see: https://w3c.github.io/pointerlock/#dfn-engagement-gesture.",
        "* If the browser supports pointer lock, this will request that the pointer lock is released. If\n                 * the browser successfully enters a locked state, a 'POINTER_LOCK_CHANGE_EVENT' will be\n                 * dispatched - from the game's input manager - with an `isPointerLocked` property.",
        "* Starts the Mouse Event listeners running.\n                 * This is called automatically and does not need to be manually invoked.",
        "* Stops the Mouse Event listeners.\n                 * This is called automatically and does not need to be manually invoked.",
        "* Destroys this Mouse Manager instance.",
        "* A Pointer object encapsulates both mouse and touch input within Phaser.\n         * \n         * By default, Phaser will create 2 pointers for your game to use. If you require more, i.e. for a multi-touch\n         * game, then use the `InputPlugin.addPointer` method to do so, rather than instantiating this class directly,\n         * otherwise it won't be managed by the input system.\n         * \n         * You can reference the current active pointer via `InputPlugin.activePointer`. You can also use the properties\n         * `InputPlugin.pointer1` through to `pointer10`, for each pointer you have enabled in your game.\n         * \n         * The properties of this object are set by the Input Plugin during processing. This object is then sent in all\n         * input related events that the Input Plugin emits, so you can reference properties from it directly in your\n         * callbacks.",
        "* \n             * @param manager A reference to the Input Manager.\n             * @param id The internal ID of this Pointer.",
        "* A reference to the Input Manager.",
        "* The internal ID of this Pointer.",
        "* The most recent native DOM Event this Pointer has processed.",
        "* The DOM element the Pointer was pressed down on, taken from the DOM event.",
        "* The DOM element the Pointer was released on, taken from the DOM event.",
        "* The camera the Pointer interacted with during its last update.\n             * \n             * A Pointer can only ever interact with one camera at once, which will be the top-most camera\n             * in the list should multiple cameras be positioned on-top of each other.",
        "* 0: No button or un-initialized\n             * 1: Left button\n             * 2: Right button\n             * 4: Wheel button or middle button\n             * 8: 4th button (typically the \"Browser Back\" button)\n             * 16: 5th button (typically the \"Browser Forward\" button)\n             * \n             * For a mouse configured for left-handed use, the button actions are reversed.\n             * In this case, the values are read from right to left.",
        "* The position of the Pointer in screen space.",
        "* The previous position of the Pointer in screen space.\n             * \n             * The old x and y values are stored in here during the InputManager.transformPointer call.\n             * \n             * Use the properties `velocity`, `angle` and `distance` to create your own gesture recognition.",
        "* The current velocity of the Pointer, based on its current and previous positions.\n             * \n             * This value is smoothed out each frame, according to the `motionFactor` property.\n             * \n             * This property is updated whenever the Pointer moves, regardless of any button states. In other words,\n             * it changes based on movement alone - a button doesn't have to be pressed first.",
        "* The current angle the Pointer is moving, in radians, based on its previous and current position.\n             * \n             * The angle is based on the old position facing to the current position.\n             * \n             * This property is updated whenever the Pointer moves, regardless of any button states. In other words,\n             * it changes based on movement alone - a button doesn't have to be pressed first.",
        "* The distance the Pointer has moved, based on its previous and current position.\n             * \n             * This value is smoothed out each frame, according to the `motionFactor` property.\n             * \n             * This property is updated whenever the Pointer moves, regardless of any button states. In other words,\n             * it changes based on movement alone - a button doesn't have to be pressed first.\n             * \n             * If you need the total distance travelled since the primary buttons was pressed down,\n             * then use the `Pointer.getDistance` method.",
        "* The smoothing factor to apply to the Pointer position.\n             * \n             * Due to their nature, pointer positions are inherently noisy. While this is fine for lots of games, if you need cleaner positions\n             * then you can set this value to apply an automatic smoothing to the positions as they are recorded.\n             * \n             * The default value of zero means 'no smoothing'.\n             * Set to a small value, such as 0.2, to apply an average level of smoothing between positions. You can do this by changing this\n             * value directly, or by setting the `input.smoothFactor` property in the Game Config.\n             * \n             * Positions are only smoothed when the pointer moves. If the primary button on this Pointer enters an Up or Down state, then the position\n             * is always precise, and not smoothed.",
        "* The factor applied to the motion smoothing each frame.\n             * \n             * This value is passed to the Smooth Step Interpolation that is used to calculate the velocity,\n             * angle and distance of the Pointer. It's applied every frame, until the midPoint reaches the current\n             * position of the Pointer. 0.2 provides a good average but can be increased if you need a\n             * quicker update and are working in a high performance environment. Never set this value to\n             * zero.",
        "* The x position of this Pointer, translated into the coordinate space of the most recent Camera it interacted with.",
        "* The y position of this Pointer, translated into the coordinate space of the most recent Camera it interacted with.",
        "* Time when this Pointer was most recently moved (regardless of the state of its buttons, if any)",
        "* X coordinate of the Pointer when Button 1 (left button), or Touch, was pressed, used for dragging objects.",
        "* Y coordinate of the Pointer when Button 1 (left button), or Touch, was pressed, used for dragging objects.",
        "* Time when Button 1 (left button), or Touch, was pressed, used for dragging objects.",
        "* X coordinate of the Pointer when Button 1 (left button), or Touch, was released, used for dragging objects.",
        "* Y coordinate of the Pointer when Button 1 (left button), or Touch, was released, used for dragging objects.",
        "* Time when Button 1 (left button), or Touch, was released, used for dragging objects.",
        "* Is the primary button down? (usually button 0, the left mouse button)",
        "* Is _any_ button on this pointer considered as being down?",
        "* A dirty flag for this Pointer, used internally by the Input Plugin.",
        "* Is this Pointer considered as being \"just down\" or not?",
        "* Is this Pointer considered as being \"just up\" or not?",
        "* Is this Pointer considered as being \"just moved\" or not?",
        "* Did the previous input event come from a Touch input (true) or Mouse? (false)",
        "* Did this Pointer get canceled by a touchcancel event?\n             * \n             * Note: \"canceled\" is the American-English spelling of \"cancelled\". Please don't submit PRs correcting it!",
        "* If the mouse is locked, the horizontal relative movement of the Pointer in pixels since last frame.",
        "* If the mouse is locked, the vertical relative movement of the Pointer in pixels since last frame.",
        "* The identifier property of the Pointer as set by the DOM event when this Pointer is started.",
        "* The pointerId property of the Pointer as set by the DOM event when this Pointer is started.\n             * The browser can and will recycle this value.",
        "* An active Pointer is one that is currently pressed down on the display.\n             * A Mouse is always considered as active.",
        "* Time when this Pointer was most recently updated by the Game step.",
        "* Takes a Camera and returns a Vector2 containing the translated position of this Pointer\n             * within that Camera. This can be used to convert this Pointers position into camera space.\n             * @param camera The Camera to use for the translation.\n             * @param output A Vector2-like object in which to store the translated position.",
        "* Checks to see if any buttons are being held down on this Pointer.",
        "* Checks to see if the left button is being held down on this Pointer.",
        "* Checks to see if the right button is being held down on this Pointer.",
        "* Checks to see if the middle button is being held down on this Pointer.",
        "* Checks to see if the back button is being held down on this Pointer.",
        "* Checks to see if the forward button is being held down on this Pointer.",
        "* If the Pointer has a button pressed down at the time this method is called, it will return the\n             * distance between the Pointer's `downX` and `downY` values and the current position.\n             * \n             * If no button is held down, it will return the last recorded distance, based on where\n             * the Pointer was when the button was released.\n             * \n             * If you wish to get the distance being travelled currently, based on the velocity of the Pointer,\n             * then see the `Pointer.distance` property.",
        "* If the Pointer has a button pressed down at the time this method is called, it will return the\n             * horizontal distance between the Pointer's `downX` and `downY` values and the current position.\n             * \n             * If no button is held down, it will return the last recorded horizontal distance, based on where\n             * the Pointer was when the button was released.",
        "* If the Pointer has a button pressed down at the time this method is called, it will return the\n             * vertical distance between the Pointer's `downX` and `downY` values and the current position.\n             * \n             * If no button is held down, it will return the last recorded vertical distance, based on where\n             * the Pointer was when the button was released.",
        "* If the Pointer has a button pressed down at the time this method is called, it will return the\n             * duration since the Pointer's was pressed down.\n             * \n             * If no button is held down, it will return the last recorded duration, based on the time\n             * the Pointer button was released.",
        "* If the Pointer has a button pressed down at the time this method is called, it will return the\n             * angle between the Pointer's `downX` and `downY` values and the current position.\n             * \n             * If no button is held down, it will return the last recorded angle, based on where\n             * the Pointer was when the button was released.\n             * \n             * The angle is based on the old position facing to the current position.\n             * \n             * If you wish to get the current angle, based on the velocity of the Pointer, then\n             * see the `Pointer.angle` property.",
        "* Takes the previous and current Pointer positions and then generates an array of interpolated values between\n             * the two. The array will be populated up to the size of the `steps` argument.\n             * \n             * ```javaScript\n             * var points = pointer.getInterpolatedPosition(4);\n             * \n             * // points[0] = { x: 0, y: 0 }\n             * // points[1] = { x: 2, y: 1 }\n             * // points[2] = { x: 3, y: 2 }\n             * // points[3] = { x: 6, y: 3 }\n             * ```\n             * \n             * Use this if you need to get smoothed values between the previous and current pointer positions. DOM pointer\n             * events can often fire faster than the main browser loop, and this will help you avoid janky movement\n             * especially if you have an object following a Pointer.\n             * \n             * Note that if you provide an output array it will only be populated up to the number of steps provided.\n             * It will not clear any previous data that may have existed beyond the range of the steps count.\n             * \n             * Internally it uses the Smooth Step interpolation calculation.\n             * @param steps The number of interpolation steps to use. Default 10.\n             * @param out An array to store the results in. If not provided a new one will be created.",
        "* Destroys this Pointer instance and resets its external references.",
        "* The x position of this Pointer.\n             * The value is in screen space.\n             * See `worldX` to get a camera converted position.",
        "* The y position of this Pointer.\n             * The value is in screen space.\n             * See `worldY` to get a camera converted position.",
        "* The Touch Manager is a helper class that belongs to the Input Manager.\n             * \n             * Its role is to listen for native DOM Touch Events and then pass them onto the Input Manager for further processing.\n             * \n             * You do not need to create this class directly, the Input Manager will create an instance of it automatically.",
        "* \n                 * @param inputManager A reference to the Input Manager.",
        "* A reference to the Input Manager.",
        "* If true the DOM events will have event.preventDefault applied to them, if false they will propagate fully.",
        "* A boolean that controls if the Touch Manager is enabled or not.\n                 * Can be toggled on the fly.",
        "* The Touch Event target, as defined in the Game Config.\n                 * Typically the canvas to which the game is rendering, but can be any interactive DOM element.",
        "* The Touch Start event handler function.\n                 * Initially empty and bound in the `startListeners` method.",
        "* The Touch Move event handler function.\n                 * Initially empty and bound in the `startListeners` method.",
        "* The Touch End event handler function.\n                 * Initially empty and bound in the `startListeners` method.",
        "* The Touch Cancel event handler function.\n                 * Initially empty and bound in the `startListeners` method.",
        "* The Touch Over event handler function.\n                 * Initially empty and bound in the `startListeners` method.",
        "* The Touch Out event handler function.\n                 * Initially empty and bound in the `startListeners` method.",
        "* Starts the Touch Event listeners running as long as an input target is set.\n                 * \n                 * This method is called automatically if Touch Input is enabled in the game config,\n                 * which it is by default. However, you can call it manually should you need to\n                 * delay input capturing until later in the game.",
        "* Stops the Touch Event listeners.\n                 * This is called automatically and does not need to be manually invoked.",
        "* Destroys this Touch Manager instance.",
        "* The Loader is idle.",
        "* The Loader is actively loading.",
        "* The Loader is processing files is has loaded.",
        "* The Loader has completed loading and processing.",
        "* The Loader is shutting down.",
        "* The Loader has been destroyed.",
        "* File is in the load queue but not yet started",
        "* File has been started to load by the loader (onLoad called)",
        "* File has loaded successfully, awaiting processing",
        "* File failed to load",
        "* File is being processed (onProcess callback)",
        "* The File has errored somehow during processing.",
        "* File has finished processing.",
        "* File has been destroyed",
        "* File was populated from local data and doesn't need an HTTP request",
        "* The Loader Plugin Add File Event.\n             * \n             * This event is dispatched when a new file is successfully added to the Loader and placed into the load queue.\n             * \n             * Listen to it from a Scene using: `this.load.on('addfile', listener)`.\n             * \n             * If you add lots of files to a Loader from a `preload` method, it will dispatch this event for each one of them.",
        "* The Loader Plugin Complete Event.\n             * \n             * This event is dispatched when the Loader has fully processed everything in the load queue.\n             * By this point every loaded file will now be in its associated cache and ready for use.\n             * \n             * Listen to it from a Scene using: `this.load.on('complete', listener)`.",
        "* The File Load Complete Event.\n             * \n             * This event is dispatched by the Loader Plugin when any file in the queue finishes loading.\n             * \n             * Listen to it from a Scene using: `this.load.on('filecomplete', listener)`.\n             * \n             * You can also listen for the completion of a specific file. See the [FILE_KEY_COMPLETE]{@linkcode Phaser.Loader.Events#event:FILE_KEY_COMPLETE} event.",
        "* The File Load Complete Event.\n             * \n             * This event is dispatched by the Loader Plugin when any file in the queue finishes loading.\n             * \n             * It uses a special dynamic event name constructed from the key and type of the file.\n             * \n             * For example, if you have loaded an `image` with a key of `monster`, you can listen for it\n             * using the following:\n             * \n             * ```javascript\n             * this.load.on('filecomplete-image-monster', function (key, type, data) {\n             *     // Your handler code\n             * });\n             * ```\n             * \n             * Or, if you have loaded a texture `atlas` with a key of `Level1`:\n             * \n             * ```javascript\n             * this.load.on('filecomplete-atlas-Level1', function (key, type, data) {\n             *     // Your handler code\n             * });\n             * ```\n             * \n             * Or, if you have loaded a sprite sheet with a key of `Explosion` and a prefix of `GAMEOVER`:\n             * \n             * ```javascript\n             * this.load.on('filecomplete-spritesheet-GAMEOVERExplosion', function (key, type, data) {\n             *     // Your handler code\n             * });\n             * ```\n             * \n             * You can also listen for the generic completion of files. See the [FILE_COMPLETE]{@linkcode Phaser.Loader.Events#event:FILE_COMPLETE} event.",
        "* The File Load Error Event.\n             * \n             * This event is dispatched by the Loader Plugin when a file fails to load.\n             * \n             * Listen to it from a Scene using: `this.load.on('loaderror', listener)`.",
        "* The File Load Event.\n             * \n             * This event is dispatched by the Loader Plugin when a file finishes loading,\n             * but _before_ it is processed and added to the internal Phaser caches.\n             * \n             * Listen to it from a Scene using: `this.load.on('load', listener)`.",
        "* The File Load Progress Event.\n             * \n             * This event is dispatched by the Loader Plugin during the load of a file, if the browser receives a DOM ProgressEvent and\n             * the `lengthComputable` event property is true. Depending on the size of the file and browser in use, this may, or may not happen.\n             * \n             * Listen to it from a Scene using: `this.load.on('fileprogress', listener)`.",
        "* The Loader Plugin Post Process Event.\n             * \n             * This event is dispatched by the Loader Plugin when the Loader has finished loading everything in the load queue.\n             * It is dispatched before the internal lists are cleared and each File is destroyed.\n             * \n             * Use this hook to perform any last minute processing of files that can only happen once the\n             * Loader has completed, but prior to it emitting the `complete` event.\n             * \n             * Listen to it from a Scene using: `this.load.on('postprocess', listener)`.",
        "* The Loader Plugin Progress Event.\n             * \n             * This event is dispatched when the Loader updates its load progress, typically as a result of a file having completed loading.\n             * \n             * Listen to it from a Scene using: `this.load.on('progress', listener)`.",
        "* The Loader Plugin Start Event.\n             * \n             * This event is dispatched when the Loader starts running. At this point load progress is zero.\n             * \n             * This event is dispatched even if there aren't any files in the load queue.\n             * \n             * Listen to it from a Scene using: `this.load.on('start', listener)`.",
        "* The base File class used by all File Types that the Loader can support.\n         * You shouldn't create an instance of a File directly, but should extend it with your own class, setting a custom type and processing methods.",
        "* \n             * @param loader The Loader that is going to load this File.\n             * @param fileConfig The file configuration object, as created by the file type.",
        "* A reference to the Loader that is going to load this file.",
        "* A reference to the Cache, or Texture Manager, that is going to store this file if it loads.",
        "* The file type string (image, json, etc) for sorting within the Loader.",
        "* Unique cache key (unique within its file type)",
        "* The URL of the file, not including baseURL.\n             * Automatically has Loader.path prepended to it.",
        "* The final URL this file will load from, including baseURL and path.\n             * Set automatically when the Loader calls 'load' on this file.",
        "* The merged XHRSettings for this file.",
        "* The XMLHttpRequest instance (as created by XHR Loader) that is loading this File.",
        "* The current state of the file. One of the FILE_CONST values.",
        "* The total size of this file.\n             * Set by onProgress and only if loading via XHR.",
        "* Updated as the file loads.\n             * Only set if loading via XHR.",
        "* A percentage value between 0 and 1 indicating how much of this file has loaded.\n             * Only set if loading via XHR.",
        "* For CORs based loading.\n             * If this is undefined then the File will check BaseLoader.crossOrigin and use that (if set)",
        "* The processed file data, stored here after the file has loaded.",
        "* A config object that can be used by file types to store transitional data.",
        "* If this is a multipart file, i.e. an atlas and its json together, then this is a reference\n             * to the parent MultiFile. Set and used internally by the Loader or specific file types.",
        "* Does this file have an associated linked file? Such as an image and a normal map.\n             * Atlases and Bitmap Fonts use the multiFile, because those files need loading together but aren't\n             * actually bound by data, where-as a linkFile is.",
        "* Links this File with another, so they depend upon each other for loading and processing.\n             * @param fileB The file to link to this one.",
        "* Resets the XHRLoader instance this file is using.",
        "* Called by the Loader, starts the actual file downloading.\n             * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\n             * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.",
        "* Called when the file finishes loading, is sent a DOM ProgressEvent.\n             * @param xhr The XMLHttpRequest that caused this onload event.\n             * @param event The DOM ProgressEvent that resulted from this load.",
        "* Called if the file errors while loading, is sent a DOM ProgressEvent.\n             * @param xhr The XMLHttpRequest that caused this onload event.\n             * @param event The DOM ProgressEvent that resulted from this error.",
        "* Called during the file load progress. Is sent a DOM ProgressEvent.\n             * @param event The DOM ProgressEvent.",
        "* Usually overridden by the FileTypes and is called by Loader.nextFile.\n             * This method controls what extra work this File does with its loaded data, for example a JSON file will parse itself during this stage.",
        "* Called when the File has completed processing.\n             * Checks on the state of its multifile, if set.",
        "* Called when the File has completed processing but it generated an error.\n             * Checks on the state of its multifile, if set.",
        "* Checks if a key matching the one used by this file exists in the target Cache or not.\n             * This is called automatically by the LoaderPlugin to decide if the file can be safely\n             * loaded or will conflict.",
        "* Adds this file to its target cache upon successful loading and processing.\n             * This method is often overridden by specific file types.",
        "* Called once the file has been added to its cache and is now ready for deletion from the Loader.\n             * It will emit a `filecomplete` event from the LoaderPlugin.",
        "* Destroy this File and any references it holds.",
        "* Static method for creating object URL using URL API and setting it as image 'src' attribute.\n             * If URL API is not supported (usually on old browsers) it falls back to creating Base64 encoded url using FileReader.\n             * @param image Image object which 'src' attribute should be set to object URL.\n             * @param blob A Blob object to create an object URL for.\n             * @param defaultType Default mime type used if blob type is not available.",
        "* Static method for releasing an existing object URL which was previously created\n             * by calling {@link File#createObjectURL} method.\n             * @param image Image object which 'src' attribute should be revoked.",
        "* A single Animation JSON File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#animation method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#animation.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.\n                 * @param dataKey When the JSON file loads only this property will be stored in the Cache.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* Called at the end of the load process, after the Loader has finished all files in its queue.",
        "* The key of the file. Must be unique within both the Loader and the Texture Manager.",
        "* The absolute or relative URL to load the texture image file from.",
        "* The default file extension to use for the image texture if no url is provided.",
        "* Extra XHR Settings specifically for the texture image file.",
        "* The filename of an associated normal map. It uses the same path and url to load as the texture image.",
        "* The absolute or relative URL to load the atlas json file from. Or a well formed JSON object to use instead.",
        "* The default file extension to use for the atlas json if no url is provided.",
        "* Extra XHR Settings specifically for the atlas json file.",
        "* A single JSON based Texture Atlas File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#atlas method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#atlas.\n             * \n             * https://www.codeandweb.com/texturepacker/tutorials/how-to-create-sprite-sheets-for-phaser3?source=photonstorm",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param textureURL The absolute or relative URL to load the texture image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n                 * @param atlasURL The absolute or relative URL to load the texture atlas json data file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n                 * @param textureXhrSettings An XHR Settings configuration object for the atlas image file. Used in replacement of the Loaders default XHR Settings.\n                 * @param atlasXhrSettings An XHR Settings configuration object for the atlas json file. Used in replacement of the Loaders default XHR Settings.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The key of the file. Must be unique within both the Loader and the Texture Manager.",
        "* The absolute or relative URL to load the texture image file from.",
        "* The default file extension to use for the image texture if no url is provided.",
        "* Extra XHR Settings specifically for the texture image file.",
        "* The filename of an associated normal map. It uses the same path and url to load as the texture image.",
        "* The absolute or relative URL to load the atlas xml file from.",
        "* The default file extension to use for the atlas xml if no url is provided.",
        "* Extra XHR Settings specifically for the atlas xml file.",
        "* A single XML based Texture Atlas File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#atlasXML method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#atlasXML.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param textureURL The absolute or relative URL to load the texture image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n                 * @param atlasURL The absolute or relative URL to load the texture atlas xml data file from. If undefined or `null` it will be set to `<key>.xml`, i.e. if `key` was \"alien\" then the URL will be \"alien.xml\".\n                 * @param textureXhrSettings An XHR Settings configuration object for the atlas image file. Used in replacement of the Loaders default XHR Settings.\n                 * @param atlasXhrSettings An XHR Settings configuration object for the atlas xml file. Used in replacement of the Loaders default XHR Settings.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The key of the file. Must be unique within the Loader and Audio Cache.",
        "* The absolute or relative URL to load the file from.",
        "* Extra XHR Settings specifically for this file.",
        "* The AudioContext this file will use to process itself.",
        "* A single Audio File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#audio method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audio.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param urlConfig The absolute or relative URL to load this file from in a config object.\n                 * @param xhrSettings Extra XHR Settings specifically for this file.\n                 * @param audioContext The AudioContext this file will use to process itself.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* The key of the file. Must be unique within both the Loader and the Audio Cache.",
        "* The absolute or relative URL to load the json file from. Or a well formed JSON object to use instead.",
        "* Extra XHR Settings specifically for the json file.",
        "* The absolute or relative URL to load the audio file from.",
        "* The audio configuration options.",
        "* Extra XHR Settings specifically for the audio file.",
        "* An Audio Sprite File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#audioSprite method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audioSprite.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param jsonURL The absolute or relative URL to load the json file from. Or a well formed JSON object to use instead.\n                 * @param audioURL The absolute or relative URL to load the audio file from. If empty it will be obtained by parsing the JSON file.\n                 * @param audioConfig The audio configuration options.\n                 * @param audioXhrSettings An XHR Settings configuration object for the audio file. Used in replacement of the Loaders default XHR Settings.\n                 * @param jsonXhrSettings An XHR Settings configuration object for the json file. Used in replacement of the Loaders default XHR Settings.",
        "* Called by each File when it finishes loading.\n                 * @param file The File that has completed processing.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The key of the file. Must be unique within both the Loader and the Binary Cache.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Extra XHR Settings specifically for this file.",
        "* Optional type to cast the binary file to once loaded. For example, `Uint8Array`.",
        "* A single Binary File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#binary method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#binary.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.bin`, i.e. if `key` was \"alien\" then the URL will be \"alien.bin\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.\n                 * @param dataType Optional type to cast the binary file to once loaded. For example, `Uint8Array`.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* The key of the file. Must be unique within both the Loader and the Texture Manager.",
        "* The absolute or relative URL to load the texture image file from.",
        "* The default file extension to use for the image texture if no url is provided.",
        "* Extra XHR Settings specifically for the texture image file.",
        "* The filename of an associated normal map. It uses the same path and url to load as the texture image.",
        "* The absolute or relative URL to load the font data xml file from.",
        "* The default file extension to use for the font data xml if no url is provided.",
        "* Extra XHR Settings specifically for the font data xml file.",
        "* A single Bitmap Font based File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#bitmapFont method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#bitmapFont.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param textureURL The absolute or relative URL to load the font image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n                 * @param fontDataURL The absolute or relative URL to load the font xml data file from. If undefined or `null` it will be set to `<key>.xml`, i.e. if `key` was \"alien\" then the URL will be \"alien.xml\".\n                 * @param textureXhrSettings An XHR Settings configuration object for the font image file. Used in replacement of the Loaders default XHR Settings.\n                 * @param fontDataXhrSettings An XHR Settings configuration object for the font data xml file. Used in replacement of the Loaders default XHR Settings.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The key of the file. Must be unique within both the Loader and the Text Cache.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Extra XHR Settings specifically for this file.",
        "* A single GLSL File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#glsl method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#glsl.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.txt`, i.e. if `key` was \"alien\" then the URL will be \"alien.txt\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* A single Audio File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#audio method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audio.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param urlConfig The absolute or relative URL to load this file from.\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Called when the file finishes loading.",
        "* Called if the file errors while loading.",
        "* Called during the file load progress. Is sent a DOM ProgressEvent.",
        "* Called by the Loader, starts the actual file downloading.\n                 * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\n                 * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.",
        "* The key of the file. Must be unique within both the Loader and the Text Cache.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Extra XHR Settings specifically for this file.",
        "* A single HTML File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#html method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#html.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.txt`, i.e. if `key` was \"alien\" then the URL will be \"alien.html\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* The key of the file. Must be unique within both the Loader and the Texture Manager.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Extra XHR Settings specifically for this file.",
        "* The width of the texture the HTML will be rendered to.",
        "* The height of the texture the HTML will be rendered to.",
        "* A single HTML File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#htmlTexture method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#htmlTexture.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n                 * @param width The width of the texture the HTML will be rendered to.\n                 * @param height The height of the texture the HTML will be rendered to.\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The width of the frame in pixels.",
        "* The height of the frame in pixels. Uses the `frameWidth` value if not provided.",
        "* The first frame to start parsing from.",
        "* The frame to stop parsing at. If not provided it will calculate the value based on the image and frame dimensions.",
        "* The margin in the image. This is the space around the edge of the frames.",
        "* The spacing between each frame in the image.",
        "* The key of the file. Must be unique within both the Loader and the Texture Manager.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* The filename of an associated normal map. It uses the same path and url to load as the image.",
        "* The frame configuration object. Only provided for, and used by, Sprite Sheets.",
        "* Extra XHR Settings specifically for this file.",
        "* A single Image File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#image method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#image.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.\n                 * @param frameConfig The frame configuration object. Only provided for, and used by, Sprite Sheets.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The key of the file. Must be unique within both the Loader and the JSON Cache.",
        "* The absolute or relative URL to load the file from. Or can be a ready formed JSON object, in which case it will be directly added to the Cache.",
        "* The default file extension to use if no url is provided.",
        "* If specified instead of the whole JSON file being parsed and added to the Cache, only the section corresponding to this property key will be added. If the property you want to extract is nested, use periods to divide it.",
        "* Extra XHR Settings specifically for this file.",
        "* A single JSON File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#json method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#json.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.\n                 * @param dataKey When the JSON file loads only this property will be stored in the Cache.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* The key of the file. Must be unique within both the Loader and the Texture Manager.",
        "* The absolute or relative URL to load the multi atlas json file from. Or, a well formed JSON object.",
        "* The default file extension to use for the atlas json if no url is provided.",
        "* Extra XHR Settings specifically for the atlas json file.",
        "* Optional path to use when loading the textures defined in the atlas data.",
        "* Optional Base URL to use when loading the textures defined in the atlas data.",
        "* Extra XHR Settings specifically for the texture files.",
        "* A single Multi Texture Atlas File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#multiatlas method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#multiatlas.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key of the file. Must be unique within both the Loader and the Texture Manager.\n                 * @param atlasURL The absolute or relative URL to load the multi atlas json file from.\n                 * @param path Optional path to use when loading the textures defined in the atlas data.\n                 * @param baseURL Optional Base URL to use when loading the textures defined in the atlas data.\n                 * @param atlasXhrSettings Extra XHR Settings specifically for the atlas json file.\n                 * @param textureXhrSettings Extra XHR Settings specifically for the texture files.",
        "* Called by each File when it finishes loading.\n                 * @param file The File that has completed processing.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The key of the file. Must be unique within both the Loader and the JSON Cache.",
        "* The absolute or relative URL to load the file from. Or can be a ready formed JSON object, in which case it will be directly processed.",
        "* The default file extension to use if no url is provided.",
        "* If specified instead of the whole JSON file being parsed, only the section corresponding to this property key will be added. If the property you want to extract is nested, use periods to divide it.",
        "* Extra XHR Settings specifically for this file.",
        "* A single JSON Pack File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#pack method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#pack.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.\n                 * @param dataKey When the JSON file loads only this property will be stored in the Cache.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* The key of the file. Must be unique within the Loader.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Automatically start the plugin after loading?",
        "* If this plugin is to be injected into the Scene, this is the property key used.",
        "* Extra XHR Settings specifically for this file.",
        "* A single Plugin Script File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#plugin method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#plugin.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\n                 * @param start Automatically start the plugin after loading? Default false.\n                 * @param mapping If this plugin is to be injected into the Scene, this is the property key used.\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* The key of the file. Must be unique within both the Loader and the Text Cache.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Extra XHR Settings specifically for this file.",
        "* An external Scene JavaScript File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#sceneFile method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#sceneFile.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The key of the file. Must be unique within the Loader.",
        "* The absolute or relative URL to load the file from. Or, a Scene Plugin.",
        "* The default file extension to use if no url is provided.",
        "* If this plugin is to be added to Scene.Systems, this is the property key for it.",
        "* If this plugin is to be added to the Scene, this is the property key for it.",
        "* Extra XHR Settings specifically for this file.",
        "* A single Scene Plugin Script File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#scenePlugin method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#scenePlugin.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\n                 * @param systemKey If this plugin is to be added to Scene.Systems, this is the property key for it.\n                 * @param sceneKey If this plugin is to be added to the Scene, this is the property key for it.\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* The key of the file. Must be unique within the Loader.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Extra XHR Settings specifically for this file.",
        "* A single Script File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#script method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#script.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* The key of the file. Must be unique within both the Loader and the Texture Manager.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* The filename of an associated normal map. It uses the same path and url to load as the image.",
        "* The frame configuration object.",
        "* Extra XHR Settings specifically for this file.",
        "* A single Sprite Sheet Image File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#spritesheet method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#spritesheet.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n                 * @param frameConfig The frame configuration object.\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* An optional width. The SVG will be resized to this size before being rendered to a texture.",
        "* An optional height. The SVG will be resized to this size before being rendered to a texture.",
        "* An optional scale. If given it overrides the width / height properties. The SVG is scaled by the scale factor before being rendered to a texture.",
        "* The key of the file. Must be unique within both the Loader and the Texture Manager.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Extra XHR Settings specifically for this file.",
        "* The svg size configuration object.",
        "* A single SVG File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#svg method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#svg.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.svg`, i.e. if `key` was \"alien\" then the URL will be \"alien.svg\".\n                 * @param svgConfig The svg size configuration object.\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The key of the file. Must be unique within both the Loader and the Text Cache.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Extra XHR Settings specifically for this file.",
        "* A single Text File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#text method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#text.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.txt`, i.e. if `key` was \"alien\" then the URL will be \"alien.txt\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* The key of the file. Must be unique within both the Loader and the Tilemap Cache.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Extra XHR Settings specifically for this file.",
        "* A single Tilemap CSV File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#tilemapCSV method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#tilemapCSV.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.csv`, i.e. if `key` was \"alien\" then the URL will be \"alien.csv\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The key of the file. Must be unique within both the Loader and the Tilemap Cache.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Extra XHR Settings specifically for this file.",
        "* A single Impact.js Tilemap JSON File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#tilemapImpact method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#tilemapImpact.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The key of the file. Must be unique within both the Loader and the Tilemap Cache.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Extra XHR Settings specifically for this file.",
        "* A single Tiled Tilemap JSON File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#tilemapTiledJSON method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#tilemapTiledJSON.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The key of the file. Must be unique within both the Loader and the Texture Manager.",
        "* The absolute or relative URL to load the texture image file from.",
        "* The default file extension to use for the image texture if no url is provided.",
        "* Extra XHR Settings specifically for the texture image file.",
        "* The filename of an associated normal map. It uses the same path and url to load as the texture image.",
        "* The absolute or relative URL to load the atlas data file from.",
        "* The default file extension to use for the atlas data if no url is provided.",
        "* Extra XHR Settings specifically for the atlas data file.",
        "* A single text file based Unity Texture Atlas File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#unityAtlas method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#unityAtlas.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param textureURL The absolute or relative URL to load the texture image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n                 * @param atlasURL The absolute or relative URL to load the texture atlas data file from. If undefined or `null` it will be set to `<key>.txt`, i.e. if `key` was \"alien\" then the URL will be \"alien.txt\".\n                 * @param textureXhrSettings An XHR Settings configuration object for the atlas image file. Used in replacement of the Loaders default XHR Settings.\n                 * @param atlasXhrSettings An XHR Settings configuration object for the atlas data file. Used in replacement of the Loaders default XHR Settings.",
        "* Adds this file to its target cache upon successful loading and processing.",
        "* The key of the file. Must be unique within both the Loader and the Text Cache.",
        "* The absolute or relative URL to load the file from.",
        "* The default file extension to use if no url is provided.",
        "* Extra XHR Settings specifically for this file.",
        "* A single XML File suitable for loading by the Loader.\n             * \n             * These are created when you use the Phaser.Loader.LoaderPlugin#xml method and are not typically created directly.\n             * \n             * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#xml.",
        "* \n                 * @param loader A reference to the Loader that is responsible for this file.\n                 * @param key The key to use for this file, or a file configuration object.\n                 * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.xml`, i.e. if `key` was \"alien\" then the URL will be \"alien.xml\".\n                 * @param xhrSettings Extra XHR Settings specifically for this file.",
        "* Called automatically by Loader.nextFile.\n                 * This method controls what extra work this File does with its loaded data.",
        "* Static method called when a LoaderPlugin is created.\n             * \n             * Loops through the local types object and injects all of them as\n             * properties into the LoaderPlugin instance.\n             * @param loader The LoaderPlugin to install the types into.",
        "* Static method called directly by the File Types.\n             * \n             * The key is a reference to the function used to load the files via the Loader, i.e. `image`.\n             * @param key The key that will be used as the method name in the LoaderPlugin.\n             * @param factoryFunction The function that will be called when LoaderPlugin.key is invoked.",
        "* Removed all associated file types.",
        "* Given a File and a baseURL value this returns the URL the File will use to download from.\n         * @param file The File object.\n         * @param baseURL A default base URL.",
        "* The Loader handles loading all external content such as Images, Sounds, Texture Atlases and data files.\n         * You typically interact with it via `this.load` in your Scene. Scenes can have a `preload` method, which is always\n         * called before the Scenes `create` method, allowing you to preload assets that the Scene may need.\n         * \n         * If you call any `this.load` methods from outside of `Scene.preload` then you need to start the Loader going\n         * yourself by calling `Loader.start()`. It's only automatically started during the Scene preload.\n         * \n         * The Loader uses a combination of tag loading (eg. Audio elements) and XHR and provides progress and completion events.\n         * Files are loaded in parallel by default. The amount of concurrent connections can be controlled in your Game Configuration.\n         * \n         * Once the Loader has started loading you are still able to add files to it. These can be injected as a result of a loader\n         * event, the type of file being loaded (such as a pack file) or other external events. As long as the Loader hasn't finished\n         * simply adding a new file to it, while running, will ensure it's added into the current queue.\n         * \n         * Every Scene has its own instance of the Loader and they are bound to the Scene in which they are created. However,\n         * assets loaded by the Loader are placed into global game-level caches. For example, loading an XML file will place that\n         * file inside `Game.cache.xml`, which is accessible from every Scene in your game, no matter who was responsible\n         * for loading it. The same is true of Textures. A texture loaded in one Scene is instantly available to all other Scenes\n         * in your game.\n         * \n         * The Loader works by using custom File Types. These are stored in the FileTypesManager, which injects them into the Loader\n         * when it's instantiated. You can create your own custom file types by extending either the File or MultiFile classes.\n         * See those files for more details.",
        "* \n             * @param scene The Scene which owns this Loader instance.",
        "* Adds an Animation JSON Data file, or array of Animation JSON files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.animation('baddieAnims', 'files/BaddieAnims.json');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\n             * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\n             * \n             * The key must be a unique String. It is used to add the file to the global JSON Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the JSON Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the JSON Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.animation({\n             *     key: 'baddieAnims',\n             *     url: 'files/BaddieAnims.json'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.JSONFileConfig` for more details.\n             * \n             * Once the file has finished loading it will automatically be passed to the global Animation Managers `fromJSON` method.\n             * This will parse all of the JSON data and create animation data from it. This process happens at the very end\n             * of the Loader, once every other file in the load queue has finished. The reason for this is to allow you to load\n             * both animation data and the images it relies upon in the same load call.\n             * \n             * Once the animation data has been parsed you will be able to play animations using that data.\n             * Please see the Animation Manager `fromJSON` method for more details about the format and playback.\n             * \n             * You can also access the raw animation data from its Cache using its key:\n             * \n             * ```javascript\n             * this.load.animation('baddieAnims', 'files/BaddieAnims.json');\n             * // and later in your game ...\n             * var data = this.cache.json.get('baddieAnims');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `LEVEL1.` and the key was `Waves` the final key will be `LEVEL1.Waves` and\n             * this is what you would use to retrieve the text from the JSON Cache.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"data\"\n             * and no URL is given then the Loader will set the URL to be \"data.json\". It will always add `.json` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * You can also optionally provide a `dataKey` to use. This allows you to extract only a part of the JSON and store it in the Cache,\n             * rather than the whole file. For example, if your JSON data had a structure like this:\n             * \n             * ```json\n             * {\n             *     \"level1\": {\n             *         \"baddies\": {\n             *             \"aliens\": {},\n             *             \"boss\": {}\n             *         }\n             *     },\n             *     \"level2\": {},\n             *     \"level3\": {}\n             * }\n             * ```\n             * \n             * And if you only wanted to create animations from the `boss` data, then you could pass `level1.baddies.boss`as the `dataKey`.\n             * \n             * Note: The ability to load this type of file will only be available if the JSON File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n             * @param dataKey When the Animation JSON file loads only this property will be stored in the Cache and used to create animation data.\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a JSON based Texture Atlas, or array of atlases, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.atlas('mainmenu', 'images/MainMenu.png', 'images/MainMenu.json');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\n             * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\n             * \n             * Phaser expects the atlas data to be provided in a JSON file, using either the JSON Hash or JSON Array format.\n             * These files are created by software such as Texture Packer, Shoebox and Adobe Flash / Animate.\n             * If you are using Texture Packer and have enabled multi-atlas support, then please use the Phaser Multi Atlas loader\n             * instead of this one.\n             * \n             * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\n             * \n             * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Texture Manager first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.atlas({\n             *     key: 'mainmenu',\n             *     textureURL: 'images/MainMenu.png',\n             *     atlasURL: 'images/MainMenu.json'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.AtlasJSONFileConfig` for more details.\n             * \n             * Instead of passing a URL for the atlas JSON data you can also pass in a well formed JSON object instead.\n             * \n             * Once the atlas has finished loading you can use frames from it as textures for a Game Object by referencing its key:\n             * \n             * ```javascript\n             * this.load.atlas('mainmenu', 'images/MainMenu.png', 'images/MainMenu.json');\n             * // and later in your game ...\n             * this.add.image(x, y, 'mainmenu', 'background');\n             * ```\n             * \n             * To get a list of all available frames within an atlas please consult your Texture Atlas software.\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\n             * this is what you would use to retrieve the image from the Texture Manager.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\n             * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\n             * then you can specify it by providing an array as the `url` where the second element is the normal map:\n             * \n             * ```javascript\n             * this.load.atlas('mainmenu', [ 'images/MainMenu.png', 'images/MainMenu-n.png' ], 'images/MainMenu.json');\n             * ```\n             * \n             * Or, if you are using a config object use the `normalMap` property:\n             * \n             * ```javascript\n             * this.load.atlas({\n             *     key: 'mainmenu',\n             *     textureURL: 'images/MainMenu.png',\n             *     normalMap: 'images/MainMenu-n.png',\n             *     atlasURL: 'images/MainMenu.json'\n             * });\n             * ```\n             * \n             * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\n             * Normal maps are a WebGL only feature.\n             * \n             * Note: The ability to load this type of file will only be available if the Atlas JSON File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param textureURL The absolute or relative URL to load the texture image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n             * @param atlasURL The absolute or relative URL to load the texture atlas json data file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n             * @param textureXhrSettings An XHR Settings configuration object for the atlas image file. Used in replacement of the Loaders default XHR Settings.\n             * @param atlasXhrSettings An XHR Settings configuration object for the atlas json file. Used in replacement of the Loaders default XHR Settings.",
        "* Adds an XML based Texture Atlas, or array of atlases, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.atlasXML('mainmenu', 'images/MainMenu.png', 'images/MainMenu.xml');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\n             * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\n             * \n             * Phaser expects the atlas data to be provided in an XML file format.\n             * These files are created by software such as Shoebox and Adobe Flash / Animate.\n             * \n             * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\n             * \n             * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Texture Manager first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.atlasXML({\n             *     key: 'mainmenu',\n             *     textureURL: 'images/MainMenu.png',\n             *     atlasURL: 'images/MainMenu.xml'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.AtlasXMLFileConfig` for more details.\n             * \n             * Once the atlas has finished loading you can use frames from it as textures for a Game Object by referencing its key:\n             * \n             * ```javascript\n             * this.load.atlasXML('mainmenu', 'images/MainMenu.png', 'images/MainMenu.xml');\n             * // and later in your game ...\n             * this.add.image(x, y, 'mainmenu', 'background');\n             * ```\n             * \n             * To get a list of all available frames within an atlas please consult your Texture Atlas software.\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\n             * this is what you would use to retrieve the image from the Texture Manager.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\n             * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\n             * then you can specify it by providing an array as the `url` where the second element is the normal map:\n             * \n             * ```javascript\n             * this.load.atlasXML('mainmenu', [ 'images/MainMenu.png', 'images/MainMenu-n.png' ], 'images/MainMenu.xml');\n             * ```\n             * \n             * Or, if you are using a config object use the `normalMap` property:\n             * \n             * ```javascript\n             * this.load.atlasXML({\n             *     key: 'mainmenu',\n             *     textureURL: 'images/MainMenu.png',\n             *     normalMap: 'images/MainMenu-n.png',\n             *     atlasURL: 'images/MainMenu.xml'\n             * });\n             * ```\n             * \n             * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\n             * Normal maps are a WebGL only feature.\n             * \n             * Note: The ability to load this type of file will only be available if the Atlas XML File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param textureURL The absolute or relative URL to load the texture image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n             * @param atlasURL The absolute or relative URL to load the texture atlas xml data file from. If undefined or `null` it will be set to `<key>.xml`, i.e. if `key` was \"alien\" then the URL will be \"alien.xml\".\n             * @param textureXhrSettings An XHR Settings configuration object for the atlas image file. Used in replacement of the Loaders default XHR Settings.\n             * @param atlasXhrSettings An XHR Settings configuration object for the atlas xml file. Used in replacement of the Loaders default XHR Settings.",
        "* Adds an Audio or HTML5Audio file, or array of audio files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.audio('title', [ 'music/Title.ogg', 'music/Title.mp3', 'music/Title.m4a' ]);\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global Audio Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Audio Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Audio Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.audio({\n             *     key: 'title',\n             *     url: [ 'music/Title.ogg', 'music/Title.mp3', 'music/Title.m4a' ]\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.AudioFileConfig` for more details.\n             * \n             * The URLs can be relative or absolute. If the URLs are relative the `Loader.baseURL` and `Loader.path` values will be prepended to them.\n             * \n             * Due to different browsers supporting different audio file types you should usually provide your audio files in a variety of formats.\n             * ogg, mp3 and m4a are the most common. If you provide an array of URLs then the Loader will determine which _one_ file to load based on\n             * browser support.\n             * \n             * If audio has been disabled in your game, either via the game config, or lack of support from the device, then no audio will be loaded.\n             * \n             * Note: The ability to load this type of file will only be available if the Audio File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param urls The absolute or relative URL to load the audio files from.\n             * @param config An object containing an `instances` property for HTML5Audio. Defaults to 1.\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a JSON based Audio Sprite, or array of audio sprites, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.audioSprite('kyobi', 'kyobi.json', [\n             *         'kyobi.ogg',\n             *         'kyobi.mp3',\n             *         'kyobi.m4a'\n             *     ]);\n             * }\n             * ```\n             * \n             * Audio Sprites are a combination of audio files and a JSON configuration.\n             * The JSON follows the format of that created by https://github.com/tonistiigi/audiosprite\n             * \n             * If the JSON file includes a 'resource' object then you can let Phaser parse it and load the audio\n             * files automatically based on its content. To do this exclude the audio URLs from the load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.audioSprite('kyobi', 'kyobi.json');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\n             * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\n             * \n             * The key must be a unique String. It is used to add the file to the global Audio Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Audio Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Audio Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.audioSprite({\n             *     key: 'kyobi',\n             *     jsonURL: 'audio/Kyobi.json',\n             *     audioURL: [\n             *         'audio/Kyobi.ogg',\n             *         'audio/Kyobi.mp3',\n             *         'audio/Kyobi.m4a'\n             *     ]\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.AudioSpriteFileConfig` for more details.\n             * \n             * Instead of passing a URL for the audio JSON data you can also pass in a well formed JSON object instead.\n             * \n             * Once the audio has finished loading you can use it create an Audio Sprite by referencing its key:\n             * \n             * ```javascript\n             * this.load.audioSprite('kyobi', 'kyobi.json');\n             * // and later in your game ...\n             * var music = this.sound.addAudioSprite('kyobi');\n             * music.play('title');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\n             * this is what you would use to retrieve the image from the Texture Manager.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * Due to different browsers supporting different audio file types you should usually provide your audio files in a variety of formats.\n             * ogg, mp3 and m4a are the most common. If you provide an array of URLs then the Loader will determine which _one_ file to load based on\n             * browser support.\n             * \n             * If audio has been disabled in your game, either via the game config, or lack of support from the device, then no audio will be loaded.\n             * \n             * Note: The ability to load this type of file will only be available if the Audio Sprite File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or an array of objects.\n             * @param jsonURL The absolute or relative URL to load the json file from. Or a well formed JSON object to use instead.\n             * @param audioURL The absolute or relative URL to load the audio file from. If empty it will be obtained by parsing the JSON file.\n             * @param audioConfig The audio configuration options.\n             * @param audioXhrSettings An XHR Settings configuration object for the audio file. Used in replacement of the Loaders default XHR Settings.\n             * @param jsonXhrSettings An XHR Settings configuration object for the json file. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a Binary file, or array of Binary files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.binary('doom', 'files/Doom.wad');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global Binary Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Binary Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Binary Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.binary({\n             *     key: 'doom',\n             *     url: 'files/Doom.wad',\n             *     dataType: Uint8Array\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.BinaryFileConfig` for more details.\n             * \n             * Once the file has finished loading you can access it from its Cache using its key:\n             * \n             * ```javascript\n             * this.load.binary('doom', 'files/Doom.wad');\n             * // and later in your game ...\n             * var data = this.cache.binary.get('doom');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `LEVEL1.` and the key was `Data` the final key will be `LEVEL1.Data` and\n             * this is what you would use to retrieve the text from the Binary Cache.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"doom\"\n             * and no URL is given then the Loader will set the URL to be \"doom.bin\". It will always add `.bin` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the Binary File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.bin`, i.e. if `key` was \"alien\" then the URL will be \"alien.bin\".\n             * @param dataType Optional type to cast the binary file to once loaded. For example, `Uint8Array`.\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds an XML based Bitmap Font, or array of fonts, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.bitmapFont('goldenFont', 'images/GoldFont.png', 'images/GoldFont.xml');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\n             * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\n             * \n             * Phaser expects the font data to be provided in an XML file format.\n             * These files are created by software such as the [Angelcode Bitmap Font Generator](http://www.angelcode.com/products/bmfont/),\n             * [Littera](http://kvazars.com/littera/) or [Glyph Designer](https://71squared.com/glyphdesigner)\n             * \n             * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\n             * \n             * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Texture Manager first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.bitmapFont({\n             *     key: 'goldenFont',\n             *     textureURL: 'images/GoldFont.png',\n             *     fontDataURL: 'images/GoldFont.xml'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.BitmapFontFileConfig` for more details.\n             * \n             * Once the atlas has finished loading you can use key of it when creating a Bitmap Text Game Object:\n             * \n             * ```javascript\n             * this.load.bitmapFont('goldenFont', 'images/GoldFont.png', 'images/GoldFont.xml');\n             * // and later in your game ...\n             * this.add.bitmapText(x, y, 'goldenFont', 'Hello World');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\n             * this is what you would use when creating a Bitmap Text object.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\n             * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\n             * then you can specify it by providing an array as the `url` where the second element is the normal map:\n             * \n             * ```javascript\n             * this.load.bitmapFont('goldenFont', [ 'images/GoldFont.png', 'images/GoldFont-n.png' ], 'images/GoldFont.xml');\n             * ```\n             * \n             * Or, if you are using a config object use the `normalMap` property:\n             * \n             * ```javascript\n             * this.load.bitmapFont({\n             *     key: 'goldenFont',\n             *     textureURL: 'images/GoldFont.png',\n             *     normalMap: 'images/GoldFont-n.png',\n             *     fontDataURL: 'images/GoldFont.xml'\n             * });\n             * ```\n             * \n             * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\n             * Normal maps are a WebGL only feature.\n             * \n             * Note: The ability to load this type of file will only be available if the Bitmap Font File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param textureURL The absolute or relative URL to load the font image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n             * @param fontDataURL The absolute or relative URL to load the font xml data file from. If undefined or `null` it will be set to `<key>.xml`, i.e. if `key` was \"alien\" then the URL will be \"alien.xml\".\n             * @param textureXhrSettings An XHR Settings configuration object for the font image file. Used in replacement of the Loaders default XHR Settings.\n             * @param fontDataXhrSettings An XHR Settings configuration object for the font data xml file. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a GLSL file, or array of GLSL files, to the current load queue.\n             * In Phaser 3 GLSL files are just plain Text files at the current moment in time.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.glsl('plasma', 'shaders/Plasma.glsl');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global Shader Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Shader Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Shader Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.glsl({\n             *     key: 'plasma',\n             *     url: 'shaders/Plasma.glsl'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.GLSLFileConfig` for more details.\n             * \n             * Once the file has finished loading you can access it from its Cache using its key:\n             * \n             * ```javascript\n             * this.load.glsl('plasma', 'shaders/Plasma.glsl');\n             * // and later in your game ...\n             * var data = this.cache.shader.get('plasma');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `FX.` and the key was `Plasma` the final key will be `FX.Plasma` and\n             * this is what you would use to retrieve the text from the Shader Cache.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"plasma\"\n             * and no URL is given then the Loader will set the URL to be \"plasma.glsl\". It will always add `.glsl` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the GLSL File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.glsl`, i.e. if `key` was \"alien\" then the URL will be \"alien.glsl\".\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds an HTML file, or array of HTML files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.html('story', 'files/LoginForm.html');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global HTML Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the HTML Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the HTML Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.html({\n             *     key: 'login',\n             *     url: 'files/LoginForm.html'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.HTMLFileConfig` for more details.\n             * \n             * Once the file has finished loading you can access it from its Cache using its key:\n             * \n             * ```javascript\n             * this.load.html('login', 'files/LoginForm.html');\n             * // and later in your game ...\n             * var data = this.cache.html.get('login');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `LEVEL1.` and the key was `Story` the final key will be `LEVEL1.Story` and\n             * this is what you would use to retrieve the html from the HTML Cache.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"story\"\n             * and no URL is given then the Loader will set the URL to be \"story.html\". It will always add `.html` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the HTML File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.html`, i.e. if `key` was \"alien\" then the URL will be \"alien.html\".\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds an HTML File, or array of HTML Files, to the current load queue. When the files are loaded they\n             * will be rendered to textures and stored in the Texture Manager.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.htmlTexture('instructions', 'content/intro.html', 256, 512);\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Texture Manager first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.htmlTexture({\n             *     key: 'instructions',\n             *     url: 'content/intro.html',\n             *     width: 256,\n             *     height: 512\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.HTMLTextureFileConfig` for more details.\n             * \n             * Once the file has finished loading you can use it as a texture for a Game Object by referencing its key:\n             * \n             * ```javascript\n             * this.load.htmlTexture('instructions', 'content/intro.html', 256, 512);\n             * // and later in your game ...\n             * this.add.image(x, y, 'instructions');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\n             * this is what you would use to retrieve the image from the Texture Manager.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\n             * and no URL is given then the Loader will set the URL to be \"alien.html\". It will always add `.html` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * The width and height are the size of the texture to which the HTML will be rendered. It's not possible to determine these\n             * automatically, so you will need to provide them, either as arguments or in the file config object.\n             * When the HTML file has loaded a new SVG element is created with a size and viewbox set to the width and height given.\n             * The SVG file has a body tag added to it, with the HTML file contents included. It then calls `window.Blob` on the SVG,\n             * and if successful is added to the Texture Manager, otherwise it fails processing. The overall quality of the rendered\n             * HTML depends on your browser, and some of them may not even support the svg / blob process used. Be aware that there are\n             * limitations on what HTML can be inside an SVG. You can find out more details in this\n             * [Mozilla MDN entry](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Drawing_DOM_objects_into_a_canvas).\n             * \n             * Note: The ability to load this type of file will only be available if the HTMLTextureFile File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.html`, i.e. if `key` was \"alien\" then the URL will be \"alien.html\".\n             * @param width The width of the texture the HTML will be rendered to. Default 512.\n             * @param height The height of the texture the HTML will be rendered to. Default 512.\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds an Image, or array of Images, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.image('logo', 'images/phaserLogo.png');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\n             * If you try to load an animated gif only the first frame will be rendered. Browsers do not natively support playback\n             * of animated gifs to Canvas elements.\n             * \n             * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Texture Manager first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.image({\n             *     key: 'logo',\n             *     url: 'images/AtariLogo.png'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.ImageFileConfig` for more details.\n             * \n             * Once the file has finished loading you can use it as a texture for a Game Object by referencing its key:\n             * \n             * ```javascript\n             * this.load.image('logo', 'images/AtariLogo.png');\n             * // and later in your game ...\n             * this.add.image(x, y, 'logo');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\n             * this is what you would use to retrieve the image from the Texture Manager.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\n             * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\n             * then you can specify it by providing an array as the `url` where the second element is the normal map:\n             * \n             * ```javascript\n             * this.load.image('logo', [ 'images/AtariLogo.png', 'images/AtariLogo-n.png' ]);\n             * ```\n             * \n             * Or, if you are using a config object use the `normalMap` property:\n             * \n             * ```javascript\n             * this.load.image({\n             *     key: 'logo',\n             *     url: 'images/AtariLogo.png',\n             *     normalMap: 'images/AtariLogo-n.png'\n             * });\n             * ```\n             * \n             * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\n             * Normal maps are a WebGL only feature.\n             * \n             * Note: The ability to load this type of file will only be available if the Image File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a JSON file, or array of JSON files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.json('wavedata', 'files/AlienWaveData.json');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global JSON Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the JSON Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the JSON Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.json({\n             *     key: 'wavedata',\n             *     url: 'files/AlienWaveData.json'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.JSONFileConfig` for more details.\n             * \n             * Once the file has finished loading you can access it from its Cache using its key:\n             * \n             * ```javascript\n             * this.load.json('wavedata', 'files/AlienWaveData.json');\n             * // and later in your game ...\n             * var data = this.cache.json.get('wavedata');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `LEVEL1.` and the key was `Waves` the final key will be `LEVEL1.Waves` and\n             * this is what you would use to retrieve the text from the JSON Cache.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"data\"\n             * and no URL is given then the Loader will set the URL to be \"data.json\". It will always add `.json` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * You can also optionally provide a `dataKey` to use. This allows you to extract only a part of the JSON and store it in the Cache,\n             * rather than the whole file. For example, if your JSON data had a structure like this:\n             * \n             * ```json\n             * {\n             *     \"level1\": {\n             *         \"baddies\": {\n             *             \"aliens\": {},\n             *             \"boss\": {}\n             *         }\n             *     },\n             *     \"level2\": {},\n             *     \"level3\": {}\n             * }\n             * ```\n             * \n             * And you only wanted to store the `boss` data in the Cache, then you could pass `level1.baddies.boss`as the `dataKey`.\n             * \n             * Note: The ability to load this type of file will only be available if the JSON File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n             * @param dataKey When the JSON file loads only this property will be stored in the Cache.\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a Multi Texture Atlas, or array of multi atlases, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.multiatlas('level1', 'images/Level1.json');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\n             * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\n             * \n             * Phaser expects the atlas data to be provided in a JSON file as exported from the application Texture Packer,\n             * version 4.6.3 or above, where you have made sure to use the Phaser 3 Export option.\n             * \n             * The way it works internally is that you provide a URL to the JSON file. Phaser then loads this JSON, parses it and\n             * extracts which texture files it also needs to load to complete the process. If the JSON also defines normal maps,\n             * Phaser will load those as well.\n             * \n             * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Texture Manager first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.multiatlas({\n             *     key: 'level1',\n             *     atlasURL: 'images/Level1.json'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.MultiAtlasFileConfig` for more details.\n             * \n             * Instead of passing a URL for the atlas JSON data you can also pass in a well formed JSON object instead.\n             * \n             * Once the atlas has finished loading you can use frames from it as textures for a Game Object by referencing its key:\n             * \n             * ```javascript\n             * this.load.multiatlas('level1', 'images/Level1.json');\n             * // and later in your game ...\n             * this.add.image(x, y, 'level1', 'background');\n             * ```\n             * \n             * To get a list of all available frames within an atlas please consult your Texture Atlas software.\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\n             * this is what you would use to retrieve the image from the Texture Manager.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\n             * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the Multi Atlas File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param atlasURL The absolute or relative URL to load the texture atlas json data file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n             * @param path Optional path to use when loading the textures defined in the atlas data.\n             * @param baseURL Optional Base URL to use when loading the textures defined in the atlas data.\n             * @param atlasXhrSettings An XHR Settings configuration object for the atlas json file. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a JSON File Pack, or array of packs, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.pack('level1', 'data/Level1Files.json');\n             * }\n             * ```\n             * \n             * A File Pack is a JSON file (or object) that contains details about other files that should be added into the Loader.\n             * Here is a small example:\n             * \n             * ```json\n             * { \n             *    \"test1\": {\n             *        \"files\": [\n             *            {\n             *                \"type\": \"image\",\n             *                \"key\": \"taikodrummaster\",\n             *                \"url\": \"assets/pics/taikodrummaster.jpg\"\n             *            },\n             *            {\n             *                \"type\": \"image\",\n             *                \"key\": \"sukasuka-chtholly\",\n             *                \"url\": \"assets/pics/sukasuka-chtholly.png\"\n             *            }\n             *        ]\n             *    },\n             *    \"meta\": {\n             *        \"generated\": \"1401380327373\",\n             *        \"app\": \"Phaser 3 Asset Packer\",\n             *        \"url\": \"https://phaser.io\",\n             *        \"version\": \"1.0\",\n             *        \"copyright\": \"Photon Storm Ltd. 2018\"\n             *    }\n             * }\n             * ```\n             * \n             * The pack can be split into sections. In the example above you'll see a section called `test1. You can tell\n             * the `load.pack` method to parse only a particular section of a pack. The pack is stored in the JSON Cache,\n             * so you can pass it to the Loader to process additional sections as needed in your game, or you can just load\n             * them all at once without specifying anything.\n             * \n             * The pack file can contain an entry for any type of file that Phaser can load. The object structures exactly\n             * match that of the file type configs, and all properties available within the file type configs can be used\n             * in the pack file too.\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\n             * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\n             * \n             * The key must be a unique String. It is used to add the file to the global JSON Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the JSON Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the JSON Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.pack({\n             *     key: 'level1',\n             *     url: 'data/Level1Files.json'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.PackFileConfig` for more details.\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `LEVEL1.` and the key was `Waves` the final key will be `LEVEL1.Waves` and\n             * this is what you would use to retrieve the text from the JSON Cache.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"data\"\n             * and no URL is given then the Loader will set the URL to be \"data.json\". It will always add `.json` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * You can also optionally provide a `dataKey` to use. This allows you to extract only a part of the JSON and store it in the Cache,\n             * rather than the whole file. For example, if your JSON data had a structure like this:\n             * \n             * ```json\n             * {\n             *     \"level1\": {\n             *         \"baddies\": {\n             *             \"aliens\": {},\n             *             \"boss\": {}\n             *         }\n             *     },\n             *     \"level2\": {},\n             *     \"level3\": {}\n             * }\n             * ```\n             * \n             * And you only wanted to store the `boss` data in the Cache, then you could pass `level1.baddies.boss`as the `dataKey`.\n             * \n             * Note: The ability to load this type of file will only be available if the Pack File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n             * @param dataKey When the JSON file loads only this property will be stored in the Cache.\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a Plugin Script file, or array of plugin files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.plugin('modplayer', 'plugins/ModPlayer.js');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String and not already in-use by another file in the Loader.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.plugin({\n             *     key: 'modplayer',\n             *     url: 'plugins/ModPlayer.js'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.PluginFileConfig` for more details.\n             * \n             * Once the file has finished loading it will automatically be converted into a script element\n             * via `document.createElement('script')`. It will have its language set to JavaScript, `defer` set to\n             * false and then the resulting element will be appended to `document.head`. Any code then in the\n             * script will be executed. It will then be passed to the Phaser PluginCache.register method.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\n             * and no URL is given then the Loader will set the URL to be \"alien.js\". It will always add `.js` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the Plugin File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\". Or, a plugin function.\n             * @param start Automatically start the plugin after loading?\n             * @param mapping If this plugin is to be injected into the Scene, this is the property key used.\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds an external Scene file, or array of Scene files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.sceneFile('Level1', 'src/Level1.js');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global Scene Manager upon a successful load.\n             * \n             * For a Scene File it's vitally important that the key matches the class name in the JavaScript file.\n             * \n             * For example here is the source file:\n             * \n             * ```javascript\n             * class ExternalScene extends Phaser.Scene {\n             * \n             *     constructor ()\n             *     {\n             *         super('myScene');\n             *     }\n             * \n             * }\n             * ```\n             * \n             * Because the class is called `ExternalScene` that is the exact same key you must use when loading it:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.sceneFile('ExternalScene', 'src/yourScene.js');\n             * }\n             * ```\n             * \n             * The key that is used within the Scene Manager can either be set to the same, or you can override it in the Scene\n             * constructor, as we've done in the example above, where the Scene key was changed to `myScene`.\n             * \n             * The key should be unique both in terms of files being loaded and Scenes already present in the Scene Manager.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Scene Manager first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.sceneFile({\n             *     key: 'Level1',\n             *     url: 'src/Level1.js'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.SceneFileConfig` for more details.\n             * \n             * Once the file has finished loading it will be added to the Scene Manager.\n             * \n             * ```javascript\n             * this.load.sceneFile('Level1', 'src/Level1.js');\n             * // and later in your game ...\n             * this.scene.start('Level1');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `WORLD1.` and the key was `Story` the final key will be `WORLD1.Story` and\n             * this is what you would use to retrieve the text from the Scene Manager.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"story\"\n             * and no URL is given then the Loader will set the URL to be \"story.js\". It will always add `.js` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the Scene File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a Scene Plugin Script file, or array of plugin files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.scenePlugin('ModPlayer', 'plugins/ModPlayer.js', 'modPlayer', 'mods');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String and not already in-use by another file in the Loader.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.scenePlugin({\n             *     key: 'modplayer',\n             *     url: 'plugins/ModPlayer.js'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.ScenePluginFileConfig` for more details.\n             * \n             * Once the file has finished loading it will automatically be converted into a script element\n             * via `document.createElement('script')`. It will have its language set to JavaScript, `defer` set to\n             * false and then the resulting element will be appended to `document.head`. Any code then in the\n             * script will be executed. It will then be passed to the Phaser PluginCache.register method.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\n             * and no URL is given then the Loader will set the URL to be \"alien.js\". It will always add `.js` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the Script File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\". Or, set to a plugin function.\n             * @param systemKey If this plugin is to be added to Scene.Systems, this is the property key for it.\n             * @param sceneKey If this plugin is to be added to the Scene, this is the property key for it.\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a Script file, or array of Script files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.script('aliens', 'lib/aliens.js');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String and not already in-use by another file in the Loader.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.script({\n             *     key: 'aliens',\n             *     url: 'lib/aliens.js'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.ScriptFileConfig` for more details.\n             * \n             * Once the file has finished loading it will automatically be converted into a script element\n             * via `document.createElement('script')`. It will have its language set to JavaScript, `defer` set to\n             * false and then the resulting element will be appended to `document.head`. Any code then in the\n             * script will be executed.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\n             * and no URL is given then the Loader will set the URL to be \"alien.js\". It will always add `.js` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the Script File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a Sprite Sheet Image, or array of Sprite Sheet Images, to the current load queue.\n             * \n             * The term 'Sprite Sheet' in Phaser means a fixed-size sheet. Where every frame in the sheet is the exact same size,\n             * and you reference those frames using numbers, not frame names. This is not the same thing as a Texture Atlas, where\n             * the frames are packed in a way where they take up the least amount of space, and are referenced by their names,\n             * not numbers. Some articles and software use the term 'Sprite Sheet' to mean Texture Atlas, so please be aware of\n             * what sort of file you're actually trying to load.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.spritesheet('bot', 'images/robot.png', { frameWidth: 32, frameHeight: 38 });\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\n             * If you try to load an animated gif only the first frame will be rendered. Browsers do not natively support playback\n             * of animated gifs to Canvas elements.\n             * \n             * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Texture Manager first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.spritesheet({\n             *     key: 'bot',\n             *     url: 'images/robot.png',\n             *     frameConfig: {\n             *         frameWidth: 32,\n             *         frameHeight: 38,\n             *         startFrame: 0,\n             *         endFrame: 8\n             *     }\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.SpriteSheetFileConfig` for more details.\n             * \n             * Once the file has finished loading you can use it as a texture for a Game Object by referencing its key:\n             * \n             * ```javascript\n             * this.load.spritesheet('bot', 'images/robot.png', { frameWidth: 32, frameHeight: 38 });\n             * // and later in your game ...\n             * this.add.image(x, y, 'bot', 0);\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `PLAYER.` and the key was `Running` the final key will be `PLAYER.Running` and\n             * this is what you would use to retrieve the image from the Texture Manager.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\n             * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\n             * then you can specify it by providing an array as the `url` where the second element is the normal map:\n             * \n             * ```javascript\n             * this.load.spritesheet('logo', [ 'images/AtariLogo.png', 'images/AtariLogo-n.png' ], { frameWidth: 256, frameHeight: 80 });\n             * ```\n             * \n             * Or, if you are using a config object use the `normalMap` property:\n             * \n             * ```javascript\n             * this.load.spritesheet({\n             *     key: 'logo',\n             *     url: 'images/AtariLogo.png',\n             *     normalMap: 'images/AtariLogo-n.png',\n             *     frameConfig: {\n             *         frameWidth: 256,\n             *         frameHeight: 80\n             *     }\n             * });\n             * ```\n             * \n             * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\n             * Normal maps are a WebGL only feature.\n             * \n             * Note: The ability to load this type of file will only be available if the Sprite Sheet File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n             * @param frameConfig The frame configuration object. At a minimum it should have a `frameWidth` property.\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds an SVG File, or array of SVG Files, to the current load queue. When the files are loaded they\n             * will be rendered to bitmap textures and stored in the Texture Manager.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.svg('morty', 'images/Morty.svg');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Texture Manager first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.svg({\n             *     key: 'morty',\n             *     url: 'images/Morty.svg'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.SVGFileConfig` for more details.\n             * \n             * Once the file has finished loading you can use it as a texture for a Game Object by referencing its key:\n             * \n             * ```javascript\n             * this.load.svg('morty', 'images/Morty.svg');\n             * // and later in your game ...\n             * this.add.image(x, y, 'morty');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\n             * this is what you would use to retrieve the image from the Texture Manager.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\n             * and no URL is given then the Loader will set the URL to be \"alien.html\". It will always add `.html` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * You can optionally pass an SVG Resize Configuration object when you load an SVG file. By default the SVG will be rendered to a texture\n             * at the same size defined in the SVG file attributes. However, this isn't always desirable. You may wish to resize the SVG (either down\n             * or up) to improve texture clarity, or reduce texture memory consumption. You can either specify an exact width and height to resize\n             * the SVG to:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.svg('morty', 'images/Morty.svg', { width: 300, height: 600 });\n             * }\n             * ```\n             * \n             * Or when using a configuration object:\n             * \n             * ```javascript\n             * this.load.svg({\n             *     key: 'morty',\n             *     url: 'images/Morty.svg',\n             *     svgConfig: {\n             *         width: 300,\n             *         height: 600\n             *     }\n             * });\n             * ```\n             * \n             * Alternatively, you can just provide a scale factor instead:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.svg('morty', 'images/Morty.svg', { scale: 2.5 });\n             * }\n             * ```\n             * \n             * Or when using a configuration object:\n             * \n             * ```javascript\n             * this.load.svg({\n             *     key: 'morty',\n             *     url: 'images/Morty.svg',\n             *     svgConfig: {\n             *         scale: 2.5\n             *     }\n             * });\n             * ```\n             * \n             * If scale, width and height values are all given, the scale has priority and the width and height values are ignored.\n             * \n             * Note: The ability to load this type of file will only be available if the SVG File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.svg`, i.e. if `key` was \"alien\" then the URL will be \"alien.svg\".\n             * @param svgConfig The svg size configuration object.\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a Text file, or array of Text files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.text('story', 'files/IntroStory.txt');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global Text Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Text Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Text Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.text({\n             *     key: 'story',\n             *     url: 'files/IntroStory.txt'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.TextFileConfig` for more details.\n             * \n             * Once the file has finished loading you can access it from its Cache using its key:\n             * \n             * ```javascript\n             * this.load.text('story', 'files/IntroStory.txt');\n             * // and later in your game ...\n             * var data = this.cache.text.get('story');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `LEVEL1.` and the key was `Story` the final key will be `LEVEL1.Story` and\n             * this is what you would use to retrieve the text from the Text Cache.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"story\"\n             * and no URL is given then the Loader will set the URL to be \"story.txt\". It will always add `.txt` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the Text File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.txt`, i.e. if `key` was \"alien\" then the URL will be \"alien.txt\".\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a CSV Tilemap file, or array of CSV files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.tilemapCSV('level1', 'maps/Level1.csv');\n             * }\n             * ```\n             * \n             * Tilemap CSV data can be created in a text editor, or a 3rd party app that exports as CSV.\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global Tilemap Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Tilemap Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Text Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.tilemapCSV({\n             *     key: 'level1',\n             *     url: 'maps/Level1.csv'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.TilemapCSVFileConfig` for more details.\n             * \n             * Once the file has finished loading you can access it from its Cache using its key:\n             * \n             * ```javascript\n             * this.load.tilemapCSV('level1', 'maps/Level1.csv');\n             * // and later in your game ...\n             * var map = this.make.tilemap({ key: 'level1' });\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `LEVEL1.` and the key was `Story` the final key will be `LEVEL1.Story` and\n             * this is what you would use to retrieve the text from the Tilemap Cache.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"level\"\n             * and no URL is given then the Loader will set the URL to be \"level.csv\". It will always add `.csv` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the Tilemap CSV File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.csv`, i.e. if `key` was \"alien\" then the URL will be \"alien.csv\".\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds an Impact.js Tilemap file, or array of map files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.tilemapImpact('level1', 'maps/Level1.json');\n             * }\n             * ```\n             * \n             * Impact Tilemap data is created the Impact.js Map Editor called Weltmeister.\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global Tilemap Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Tilemap Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Text Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.tilemapImpact({\n             *     key: 'level1',\n             *     url: 'maps/Level1.json'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.TilemapImpactFileConfig` for more details.\n             * \n             * Once the file has finished loading you can access it from its Cache using its key:\n             * \n             * ```javascript\n             * this.load.tilemapImpact('level1', 'maps/Level1.json');\n             * // and later in your game ...\n             * var map = this.make.tilemap({ key: 'level1' });\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `LEVEL1.` and the key was `Story` the final key will be `LEVEL1.Story` and\n             * this is what you would use to retrieve the text from the Tilemap Cache.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"level\"\n             * and no URL is given then the Loader will set the URL to be \"level.json\". It will always add `.json` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the Tilemap Impact File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a Tiled JSON Tilemap file, or array of map files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.tilemapTiledJSON('level1', 'maps/Level1.json');\n             * }\n             * ```\n             * \n             * The Tilemap data is created using the Tiled Map Editor and selecting JSON as the export format.\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global Tilemap Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Tilemap Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Text Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.tilemapTiledJSON({\n             *     key: 'level1',\n             *     url: 'maps/Level1.json'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.TilemapJSONFileConfig` for more details.\n             * \n             * Once the file has finished loading you can access it from its Cache using its key:\n             * \n             * ```javascript\n             * this.load.tilemapTiledJSON('level1', 'maps/Level1.json');\n             * // and later in your game ...\n             * var map = this.make.tilemap({ key: 'level1' });\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `LEVEL1.` and the key was `Story` the final key will be `LEVEL1.Story` and\n             * this is what you would use to retrieve the text from the Tilemap Cache.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"level\"\n             * and no URL is given then the Loader will set the URL to be \"level.json\". It will always add `.json` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the Tilemap JSON File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* Adds a Unity YAML based Texture Atlas, or array of atlases, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.unityAtlas('mainmenu', 'images/MainMenu.png', 'images/MainMenu.txt');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\n             * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\n             * \n             * Phaser expects the atlas data to be provided in a YAML formatted text file as exported from Unity.\n             * \n             * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\n             * \n             * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the Texture Manager first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.unityAtlas({\n             *     key: 'mainmenu',\n             *     textureURL: 'images/MainMenu.png',\n             *     atlasURL: 'images/MainMenu.txt'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.UnityAtlasFileConfig` for more details.\n             * \n             * Once the atlas has finished loading you can use frames from it as textures for a Game Object by referencing its key:\n             * \n             * ```javascript\n             * this.load.unityAtlas('mainmenu', 'images/MainMenu.png', 'images/MainMenu.json');\n             * // and later in your game ...\n             * this.add.image(x, y, 'mainmenu', 'background');\n             * ```\n             * \n             * To get a list of all available frames within an atlas please consult your Texture Atlas software.\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\n             * this is what you would use to retrieve the image from the Texture Manager.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\n             * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\n             * then you can specify it by providing an array as the `url` where the second element is the normal map:\n             * \n             * ```javascript\n             * this.load.unityAtlas('mainmenu', [ 'images/MainMenu.png', 'images/MainMenu-n.png' ], 'images/MainMenu.txt');\n             * ```\n             * \n             * Or, if you are using a config object use the `normalMap` property:\n             * \n             * ```javascript\n             * this.load.unityAtlas({\n             *     key: 'mainmenu',\n             *     textureURL: 'images/MainMenu.png',\n             *     normalMap: 'images/MainMenu-n.png',\n             *     atlasURL: 'images/MainMenu.txt'\n             * });\n             * ```\n             * \n             * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\n             * Normal maps are a WebGL only feature.\n             * \n             * Note: The ability to load this type of file will only be available if the Unity Atlas File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param textureURL The absolute or relative URL to load the texture image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\n             * @param atlasURL The absolute or relative URL to load the texture atlas data file from. If undefined or `null` it will be set to `<key>.txt`, i.e. if `key` was \"alien\" then the URL will be \"alien.txt\".\n             * @param textureXhrSettings An XHR Settings configuration object for the atlas image file. Used in replacement of the Loaders default XHR Settings.\n             * @param atlasXhrSettings An XHR Settings configuration object for the atlas data file. Used in replacement of the Loaders default XHR Settings.",
        "* Adds an XML file, or array of XML files, to the current load queue.\n             * \n             * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n             * \n             * ```javascript\n             * function preload ()\n             * {\n             *     this.load.xml('wavedata', 'files/AlienWaveData.xml');\n             * }\n             * ```\n             * \n             * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n             * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n             * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n             * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n             * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n             * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n             * loaded.\n             * \n             * The key must be a unique String. It is used to add the file to the global XML Cache upon a successful load.\n             * The key should be unique both in terms of files being loaded and files already present in the XML Cache.\n             * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n             * then remove it from the XML Cache first, before loading a new one.\n             * \n             * Instead of passing arguments you can pass a configuration object, such as:\n             * \n             * ```javascript\n             * this.load.xml({\n             *     key: 'wavedata',\n             *     url: 'files/AlienWaveData.xml'\n             * });\n             * ```\n             * \n             * See the documentation for `Phaser.Loader.FileTypes.XMLFileConfig` for more details.\n             * \n             * Once the file has finished loading you can access it from its Cache using its key:\n             * \n             * ```javascript\n             * this.load.xml('wavedata', 'files/AlienWaveData.xml');\n             * // and later in your game ...\n             * var data = this.cache.xml.get('wavedata');\n             * ```\n             * \n             * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n             * key. For example, if the prefix was `LEVEL1.` and the key was `Waves` the final key will be `LEVEL1.Waves` and\n             * this is what you would use to retrieve the text from the XML Cache.\n             * \n             * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n             * \n             * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"data\"\n             * and no URL is given then the Loader will set the URL to be \"data.xml\". It will always add `.xml` as the extension, although\n             * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\n             * \n             * Note: The ability to load this type of file will only be available if the XML File type has been built into Phaser.\n             * It is available in the default build but can be excluded from custom builds.\n             * @param key The key to use for this file, or a file configuration object, or array of them.\n             * @param url The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.xml`, i.e. if `key` was \"alien\" then the URL will be \"alien.xml\".\n             * @param xhrSettings An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.",
        "* The Scene which owns this Loader instance.",
        "* A reference to the Scene Systems.",
        "* A reference to the global Cache Manager.",
        "* A reference to the global Texture Manager.",
        "* A reference to the global Scene Manager.",
        "* An optional prefix that is automatically prepended to the start of every file key.\n             * If prefix was `MENU.` and you load an image with the key 'Background' the resulting key would be `MENU.Background`.\n             * You can set this directly, or call `Loader.setPrefix()`. It will then affect every file added to the Loader\n             * from that point on. It does _not_ change any file already in the load queue.",
        "* The value of `path`, if set, is placed before any _relative_ file path given. For example:\n             * \n             * ```javascript\n             * this.load.path = \"images/sprites/\";\n             * this.load.image(\"ball\", \"ball.png\");\n             * this.load.image(\"tree\", \"level1/oaktree.png\");\n             * this.load.image(\"boom\", \"http://server.com/explode.png\");\n             * ```\n             * \n             * Would load the `ball` file from `images/sprites/ball.png` and the tree from\n             * `images/sprites/level1/oaktree.png` but the file `boom` would load from the URL\n             * given as it's an absolute URL.\n             * \n             * Please note that the path is added before the filename but *after* the baseURL (if set.)\n             * \n             * If you set this property directly then it _must_ end with a \"/\". Alternatively, call `setPath()` and it'll do it for you.",
        "* If you want to append a URL before the path of any asset you can set this here.\n             * \n             * Useful if allowing the asset base url to be configured outside of the game code.\n             * \n             * If you set this property directly then it _must_ end with a \"/\". Alternatively, call `setBaseURL()` and it'll do it for you.",
        "* The number of concurrent / parallel resources to try and fetch at once.\n             * \n             * Old browsers limit 6 requests per domain; modern ones, especially those with HTTP/2 don't limit it at all.\n             * \n             * The default is 32 but you can change this in your Game Config, or by changing this property before the Loader starts.",
        "* xhr specific global settings (can be overridden on a per-file basis)",
        "* The crossOrigin value applied to loaded images. Very often this needs to be set to 'anonymous'.",
        "* The total number of files to load. It may not always be accurate because you may add to the Loader during the process\n             * of loading, especially if you load a Pack File. Therefore this value can change, but in most cases remains static.",
        "* The progress of the current load queue, as a float value between 0 and 1.\n             * This is updated automatically as files complete loading.\n             * Note that it is possible for this value to go down again if you add content to the current load queue during a load.",
        "* Files are placed in this Set when they're added to the Loader via `addFile`.\n             * \n             * They are moved to the `inflight` Set when they start loading, and assuming a successful\n             * load, to the `queue` Set for further processing.\n             * \n             * By the end of the load process this Set will be empty.",
        "* Files are stored in this Set while they're in the process of being loaded.\n             * \n             * Upon a successful load they are moved to the `queue` Set.\n             * \n             * By the end of the load process this Set will be empty.",
        "* Files are stored in this Set while they're being processed.\n             * \n             * If the process is successful they are moved to their final destination, which could be\n             * a Cache or the Texture Manager.\n             * \n             * At the end of the load process this Set will be empty.",
        "* The total number of files that failed to load during the most recent load.\n             * This value is reset when you call `Loader.start`.",
        "* The total number of files that successfully loaded during the most recent load.\n             * This value is reset when you call `Loader.start`.",
        "* The current state of the Loader.",
        "* If you want to append a URL before the path of any asset you can set this here.\n             * \n             * Useful if allowing the asset base url to be configured outside of the game code.\n             * \n             * Once a base URL is set it will affect every file loaded by the Loader from that point on. It does _not_ change any\n             * file _already_ being loaded. To reset it, call this method with no arguments.\n             * @param url The URL to use. Leave empty to reset.",
        "* The value of `path`, if set, is placed before any _relative_ file path given. For example:\n             * \n             * ```javascript\n             * this.load.setPath(\"images/sprites/\");\n             * this.load.image(\"ball\", \"ball.png\");\n             * this.load.image(\"tree\", \"level1/oaktree.png\");\n             * this.load.image(\"boom\", \"http://server.com/explode.png\");\n             * ```\n             * \n             * Would load the `ball` file from `images/sprites/ball.png` and the tree from\n             * `images/sprites/level1/oaktree.png` but the file `boom` would load from the URL\n             * given as it's an absolute URL.\n             * \n             * Please note that the path is added before the filename but *after* the baseURL (if set.)\n             * \n             * Once a path is set it will then affect every file added to the Loader from that point on. It does _not_ change any\n             * file _already_ in the load queue. To reset it, call this method with no arguments.\n             * @param path The path to use. Leave empty to reset.",
        "* An optional prefix that is automatically prepended to the start of every file key.\n             * \n             * If prefix was `MENU.` and you load an image with the key 'Background' the resulting key would be `MENU.Background`.\n             * \n             * Once a prefix is set it will then affect every file added to the Loader from that point on. It does _not_ change any\n             * file _already_ in the load queue. To reset it, call this method with no arguments.\n             * @param prefix The prefix to use. Leave empty to reset.",
        "* Sets the Cross Origin Resource Sharing value used when loading files.\n             * \n             * Files can override this value on a per-file basis by specifying an alternative `crossOrigin` value in their file config.\n             * \n             * Once CORs is set it will then affect every file loaded by the Loader from that point on, as long as they don't have\n             * their own CORs setting. To reset it, call this method with no arguments.\n             * \n             * For more details about CORs see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n             * @param crossOrigin The value to use for the `crossOrigin` property in the load request.",
        "* Adds a file, or array of files, into the load queue.\n             * \n             * The file must be an instance of `Phaser.Loader.File`, or a class that extends it. The Loader will check that the key\n             * used by the file won't conflict with any other key either in the loader, the inflight queue or the target cache.\n             * If allowed it will then add the file into the pending list, read for the load to start. Or, if the load has already\n             * started, ready for the next batch of files to be pulled from the list to the inflight queue.\n             * \n             * You should not normally call this method directly, but rather use one of the Loader methods like `image` or `atlas`,\n             * however you can call this as long as the file given to it is well formed.\n             * @param file The file, or array of files, to be added to the load queue.",
        "* Checks the key and type of the given file to see if it will conflict with anything already\n             * in a Cache, the Texture Manager, or the list or inflight queues.\n             * @param file The file to check the key of.",
        "* Takes a well formed, fully parsed pack file object and adds its entries into the load queue. Usually you do not call\n             * this method directly, but instead use `Loader.pack` and supply a path to a JSON file that holds the\n             * pack data. However, if you've got the data prepared you can pass it to this method.\n             * \n             * You can also provide an optional key. If you do then it will only add the entries from that part of the pack into\n             * to the load queue. If not specified it will add all entries it finds. For more details about the pack file format\n             * see the `LoaderPlugin.pack` method.\n             * @param data The Pack File data to be parsed and each entry of it to added to the load queue.\n             * @param packKey An optional key to use from the pack file data.",
        "* Is the Loader actively loading, or processing loaded files?",
        "* Is the Loader ready to start a new load?",
        "* Starts the Loader running. This will reset the progress and totals and then emit a `start` event.\n             * If there is nothing in the queue the Loader will immediately complete, otherwise it will start\n             * loading the first batch of files.\n             * \n             * The Loader is started automatically if the queue is populated within your Scenes `preload` method.\n             * \n             * However, outside of this, you need to call this method to start it.\n             * \n             * If the Loader is already running this method will simply return.",
        "* Called automatically during the load process.\n             * It updates the `progress` value and then emits a progress event, which you can use to\n             * display a loading bar in your game.",
        "* Called automatically during the load process.",
        "* An internal method called automatically by the XHRLoader belong to a File.\n             * \n             * This method will remove the given file from the inflight Set and update the load progress.\n             * If the file was successful its `onProcess` method is called, otherwise it is added to the delete queue.\n             * @param file The File that just finished loading, or errored during load.\n             * @param success `true` if the file loaded successfully, otherwise `false`.",
        "* An internal method that is called automatically by the File when it has finished processing.\n             * \n             * If the process was successful, and the File isn't part of a MultiFile, its `addToCache` method is called.\n             * \n             * It this then removed from the queue. If there are no more files to load `loadComplete` is called.\n             * @param file The file that has finished processing.",
        "* Called at the end when the load queue is exhausted and all files have either loaded or errored.\n             * By this point every loaded file will now be in its associated cache and ready for use.\n             * \n             * Also clears down the Sets, puts progress to 1 and clears the deletion queue.",
        "* Adds a File into the pending-deletion queue.\n             * @param file The File to be queued for deletion when the Loader completes.",
        "* Converts the given JSON data into a file that the browser then prompts you to download so you can save it locally.\n             * \n             * The data must be well formed JSON and ready-parsed, not a JavaScript object.\n             * @param data The JSON data, ready parsed.\n             * @param filename The name to save the JSON file as. Default file.json.",
        "* Causes the browser to save the given data as a file to its default Downloads folder.\n             * \n             * Creates a DOM level anchor link, assigns it as being a `download` anchor, sets the href\n             * to be an ObjectURL based on the given data, and then invokes a click event.\n             * @param data The data to be saved. Will be passed through URL.createObjectURL.\n             * @param filename The filename to save the file as. Default file.json.\n             * @param filetype The file type to use when saving the file. Defaults to JSON. Default application/json.",
        "* Resets the Loader.\n             * \n             * This will clear all lists and reset the base URL, path and prefix.\n             * \n             * Warning: If the Loader is currently downloading files, or has files in its queue, they will be aborted.",
        "* Takes two XHRSettings Objects and creates a new XHRSettings object from them.\n         * \n         * The new object is seeded by the values given in the global settings, but any setting in\n         * the local object overrides the global ones.\n         * @param global The global XHRSettings object.\n         * @param local The local XHRSettings object.",
        "* A MultiFile is a special kind of parent that contains two, or more, Files as children and looks after\n         * the loading and processing of them all. It is commonly extended and used as a base class for file types such as AtlasJSON or BitmapFont.\n         * \n         * You shouldn't create an instance of a MultiFile directly, but should extend it with your own class, setting a custom type and processing methods.",
        "* \n             * @param loader The Loader that is going to load this File.\n             * @param type The file type string for sorting within the Loader.\n             * @param key The key of the file within the loader.\n             * @param files An array of Files that make-up this MultiFile.",
        "* A reference to the Loader that is going to load this file.",
        "* The file type string for sorting within the Loader.",
        "* Unique cache key (unique within its file type)",
        "* Array of files that make up this MultiFile.",
        "* The completion status of this MultiFile.",
        "* The number of files to load.",
        "* The number of files that failed to load.",
        "* A storage container for transient data that the loading files need.",
        "* Checks if this MultiFile is ready to process its children or not.",
        "* Adds another child to this MultiFile, increases the pending count and resets the completion status.\n             * @param files The File to add to this MultiFile.",
        "* Called by each File when it finishes loading.\n             * @param file The File that has completed processing.",
        "* Called by each File that fails to load.\n             * @param file The File that has failed to load.",
        "* Creates a new XMLHttpRequest (xhr) object based on the given File and XHRSettings\n         * and starts the download of it. It uses the Files own XHRSettings and merges them\n         * with the global XHRSettings object to set the xhr values before download.\n         * @param file The File to download.\n         * @param globalXHRSettings The global XHRSettings object.",
        "* Creates an XHRSettings Object with default values.\n         * @param responseType The responseType, such as 'text'. Default ''.\n         * @param async Should the XHR request use async or not? Default true.\n         * @param user Optional username for the XHR request. Default ''.\n         * @param password Optional password for the XHR request. Default ''.\n         * @param timeout Optional XHR timeout value. Default 0.",
        "* Find the angle of a segment from (x1, y1) -> (x2, y2).\n             * @param x1 The x coordinate of the first point.\n             * @param y1 The y coordinate of the first point.\n             * @param x2 The x coordinate of the second point.\n             * @param y2 The y coordinate of the second point.",
        "* Find the angle of a segment from (point1.x, point1.y) -> (point2.x, point2.y).\n             * \n             * Calculates the angle of the vector from the first point to the second point.\n             * @param point1 The first point.\n             * @param point2 The second point.",
        "* Find the angle of a segment from (point1.x, point1.y) -> (point2.x, point2.y).\n             * \n             * The difference between this method and {@link Phaser.Math.Angle.BetweenPoints} is that this assumes the y coordinate\n             * travels down the screen.\n             * @param point1 The first point.\n             * @param point2 The second point.",
        "* Find the angle of a segment from (x1, y1) -> (x2, y2).\n             * \n             * The difference between this method and {@link Phaser.Math.Angle.Between} is that this assumes the y coordinate\n             * travels down the screen.\n             * @param x1 The x coordinate of the first point.\n             * @param y1 The y coordinate of the first point.\n             * @param x2 The x coordinate of the second point.\n             * @param y2 The y coordinate of the second point.",
        "* Takes an angle in Phasers default clockwise format and converts it so that\n             * 0 is North, 90 is West, 180 is South and 270 is East,\n             * therefore running counter-clockwise instead of clockwise.\n             * \n             * You can pass in the angle from a Game Object using:\n             * \n             * ```javascript\n             * var converted = CounterClockwise(gameobject.rotation);\n             * ```\n             * \n             * All values for this function are in radians.\n             * @param angle The angle to convert, in radians.",
        "* Normalize an angle to the [0, 2pi] range.\n             * @param angle The angle to normalize, in radians.",
        "* Reverse the given angle.\n             * @param angle The angle to reverse, in radians.",
        "* Rotates `currentAngle` towards `targetAngle`, taking the shortest rotation distance. The `lerp` argument is the amount to rotate by in this call.\n             * @param currentAngle The current angle, in radians.\n             * @param targetAngle The target angle to rotate to, in radians.\n             * @param lerp The lerp value to add to the current angle. Default 0.05.",
        "* Gets the shortest angle between `angle1` and `angle2`.\n             * \n             * Both angles must be in the range -180 to 180, which is the same clamped\n             * range that `sprite.angle` uses, so you can pass in two sprite angles to\n             * this method and get the shortest angle back between the two of them.\n             * \n             * The angle returned will be in the same range. If the returned angle is\n             * greater than 0 then it's a counter-clockwise rotation, if < 0 then it's\n             * a clockwise rotation.\n             * \n             * TODO: Wrap the angles in this function?\n             * @param angle1 The first angle in the range -180 to 180.\n             * @param angle2 The second angle in the range -180 to 180.",
        "* Wrap an angle.\n             * \n             * Wraps the angle to a value in the range of -PI to PI.\n             * @param angle The angle to wrap, in radians.",
        "* Wrap an angle in degrees.\n             * \n             * Wraps the angle to a value in the range of -180 to 180.\n             * @param angle The angle to wrap, in degrees.",
        "* Calculate the mean average of the given values.\n         * @param values The values to average.",
        "* [description]\n         * @param n [description]\n         * @param i [description]",
        "* Compute a random integer between the `min` and `max` values, inclusive.\n         * @param min The minimum value.\n         * @param max The maximum value.",
        "* Calculates a Catmull-Rom value.\n         * @param t [description]\n         * @param p0 [description]\n         * @param p1 [description]\n         * @param p2 [description]\n         * @param p3 [description]",
        "* Ceils to some place comparative to a `base`, default is 10 for decimal place.\n         * \n         * The `place` is represented by the power applied to `base` to get that place.\n         * @param value The value to round.\n         * @param place The place to round to. Default 0.\n         * @param base The base to round in. Default is 10 for decimal. Default 10.",
        "* Force a value within the boundaries by clamping it to the range `min`, `max`.\n         * @param value The value to be clamped.\n         * @param min The minimum bounds.\n         * @param max The maximum bounds.",
        "* The value of PI * 2.",
        "* The value of PI * 0.5.",
        "* An epsilon value (1.0e-6)",
        "* For converting degrees to radians (PI / 180)",
        "* For converting radians to degrees (180 / PI)",
        "* An instance of the Random Number Generator.\n         * This is not set until the Game boots.",
        "* Convert the given angle from degrees, to the equivalent angle in radians.\n         * @param degrees The angle (in degrees) to convert to radians.",
        "* Calculates the positive difference of two given numbers.\n         * @param a The first number in the calculation.\n         * @param b The second number in the calculation.",
        "* Calculate the distance between two sets of coordinates (points).\n             * @param x1 The x coordinate of the first point.\n             * @param y1 The y coordinate of the first point.\n             * @param x2 The x coordinate of the second point.\n             * @param y2 The y coordinate of the second point.",
        "* Calculate the distance between two sets of coordinates (points) to the power of `pow`.\n             * @param x1 The x coordinate of the first point.\n             * @param y1 The y coordinate of the first point.\n             * @param x2 The x coordinate of the second point.\n             * @param y2 The y coordinate of the second point.\n             * @param pow The exponent.",
        "* Calculate the distance between two sets of coordinates (points), squared.\n             * @param x1 The x coordinate of the first point.\n             * @param y1 The y coordinate of the first point.\n             * @param x2 The x coordinate of the second point.\n             * @param y2 The y coordinate of the second point.",
        "* Back ease-in.\n                 * @param v The value to be tweened.\n                 * @param overshoot The overshoot amount. Default 1.70158.",
        "* Back ease-in/out.\n                 * @param v The value to be tweened.\n                 * @param overshoot The overshoot amount. Default 1.70158.",
        "* Back ease-out.\n                 * @param v The value to be tweened.\n                 * @param overshoot The overshoot amount. Default 1.70158.",
        "* Bounce ease-in.\n                 * @param v The value to be tweened.",
        "* Bounce ease-in/out.\n                 * @param v The value to be tweened.",
        "* Bounce ease-out.\n                 * @param v The value to be tweened.",
        "* Circular ease-in.\n                 * @param v The value to be tweened.",
        "* Circular ease-in/out.\n                 * @param v The value to be tweened.",
        "* Circular ease-out.\n                 * @param v The value to be tweened.",
        "* Cubic ease-in.\n                 * @param v The value to be tweened.",
        "* Cubic ease-in/out.\n                 * @param v The value to be tweened.",
        "* Cubic ease-out.\n                 * @param v The value to be tweened.",
        "* Elastic ease-in.\n                 * @param v The value to be tweened.\n                 * @param amplitude The amplitude of the elastic ease. Default 0.1.\n                 * @param period Sets how tight the sine-wave is, where smaller values are tighter waves, which result in more cycles. Default 0.1.",
        "* Elastic ease-in/out.\n                 * @param v The value to be tweened.\n                 * @param amplitude The amplitude of the elastic ease. Default 0.1.\n                 * @param period Sets how tight the sine-wave is, where smaller values are tighter waves, which result in more cycles. Default 0.1.",
        "* Elastic ease-out.\n                 * @param v The value to be tweened.\n                 * @param amplitude The amplitude of the elastic ease. Default 0.1.\n                 * @param period Sets how tight the sine-wave is, where smaller values are tighter waves, which result in more cycles. Default 0.1.",
        "* Exponential ease-in.\n                 * @param v The value to be tweened.",
        "* Exponential ease-in/out.\n                 * @param v The value to be tweened.",
        "* Exponential ease-out.\n                 * @param v The value to be tweened.",
        "* Linear easing (no variation).\n                 * @param v The value to be tweened.",
        "* Quadratic ease-in.\n                 * @param v The value to be tweened.",
        "* Quadratic ease-in/out.\n                 * @param v The value to be tweened.",
        "* Quadratic ease-out.\n                 * @param v The value to be tweened.",
        "* Quartic ease-in.\n                 * @param v The value to be tweened.",
        "* Quartic ease-in/out.\n                 * @param v The value to be tweened.",
        "* Quartic ease-out.\n                 * @param v The value to be tweened.",
        "* Quintic ease-in.\n                 * @param v The value to be tweened.",
        "* Quintic ease-in/out.\n                 * @param v The value to be tweened.",
        "* Quintic ease-out.\n                 * @param v The value to be tweened.",
        "* Sinusoidal ease-in.\n                 * @param v The value to be tweened.",
        "* Sinusoidal ease-in/out.\n                 * @param v The value to be tweened.",
        "* Sinusoidal ease-out.\n                 * @param v The value to be tweened.",
        "* Stepped easing.\n                 * @param v The value to be tweened.\n                 * @param steps The number of steps in the ease. Default 1.",
        "* Calculates the factorial of a given number for integer values greater than 0.\n         * @param value A positive integer to calculate the factorial of.",
        "* Generate a random floating point number between the two given bounds, minimum inclusive, maximum exclusive.\n         * @param min The lower bound for the float, inclusive.\n         * @param max The upper bound for the float exclusive.",
        "* Floors to some place comparative to a `base`, default is 10 for decimal place.\n         * \n         * The `place` is represented by the power applied to `base` to get that place.\n         * @param value The value to round.\n         * @param place The place to round to. Default 0.\n         * @param base The base to round in. Default is 10 for decimal. Default 10.",
        "* Return a value based on the range between `min` and `max` and the percentage given.\n         * @param percent A value between 0 and 1 representing the percentage.\n         * @param min The minimum value.\n         * @param max The maximum value.",
        "* Calculate the fuzzy ceiling of the given value.\n             * @param value The value.\n             * @param epsilon The epsilon. Default 0.0001.",
        "* Check whether the given values are fuzzily equal.\n             * \n             * Two numbers are fuzzily equal if their difference is less than `epsilon`.\n             * @param a The first value.\n             * @param b The second value.\n             * @param epsilon The epsilon. Default 0.0001.",
        "* Calculate the fuzzy floor of the given value.\n             * @param value The value.\n             * @param epsilon The epsilon. Default 0.0001.",
        "* Check whether `a` is fuzzily greater than `b`.\n             * \n             * `a` is fuzzily greater than `b` if it is more than `b - epsilon`.\n             * @param a The first value.\n             * @param b The second value.\n             * @param epsilon The epsilon. Default 0.0001.",
        "* Check whether `a` is fuzzily less than `b`.\n             * \n             * `a` is fuzzily less than `b` if it is less than `b + epsilon`.\n             * @param a The first value.\n             * @param b The second value.\n             * @param epsilon The epsilon. Default 0.0001.",
        "* Calculate the speed required to cover a distance in the time given.\n         * @param distance The distance to travel in pixels.\n         * @param time The time, in ms, to cover the distance in.",
        "* A bezier interpolation method.\n             * @param v The input array of values to interpolate between.\n             * @param k The percentage of interpolation, between 0 and 1.",
        "* A Catmull-Rom interpolation method.\n             * @param v The input array of values to interpolate between.\n             * @param k The percentage of interpolation, between 0 and 1.",
        "* A cubic bezier interpolation method.\n             * @param t The percentage of interpolation, between 0 and 1.\n             * @param p0 The start point.\n             * @param p1 The first control point.\n             * @param p2 The second control point.\n             * @param p3 The end point.",
        "* A linear interpolation method.\n             * @param v The input array of values to interpolate between.\n             * @param k The percentage of interpolation, between 0 and 1.",
        "* A quadratic bezier interpolation method.\n             * @param t The percentage of interpolation, between 0 and 1.\n             * @param p0 The start point.\n             * @param p1 The control point.\n             * @param p2 The end point.",
        "* A Smoother Step interpolation method.\n             * @param t The percentage of interpolation, between 0 and 1.\n             * @param min The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n             * @param max The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.",
        "* A Smooth Step interpolation method.\n             * @param t The percentage of interpolation, between 0 and 1.\n             * @param min The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n             * @param max The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.",
        "* Check if a given value is an even number.\n         * @param value The number to perform the check with.",
        "* Check if a given value is an even number using a strict type check.\n         * @param value The number to perform the check with.",
        "* Calculates a linear (interpolation) value over t.\n         * @param p0 The first point.\n         * @param p1 The second point.\n         * @param t The percentage between p0 and p1 to return, represented as a number between 0 and 1.",
        "* A three-dimensional matrix.\n         * \n         * Defaults to the identity matrix when instantiated.",
        "* \n             * @param m Optional Matrix3 to copy values from.",
        "* The matrix values.",
        "* Make a clone of this Matrix3.",
        "* This method is an alias for `Matrix3.copy`.\n             * @param src The Matrix to set the values of this Matrix's from.",
        "* Copy the values of a given Matrix into this Matrix.\n             * @param src The Matrix to copy the values from.",
        "* Copy the values of a given Matrix4 into this Matrix3.\n             * @param m The Matrix4 to copy the values from.",
        "* Set the values of this Matrix from the given array.\n             * @param a The array to copy the values from.",
        "* Reset this Matrix to an identity (default) matrix.",
        "* Transpose this Matrix.",
        "* Invert this Matrix.",
        "* Calculate the adjoint, or adjugate, of this Matrix.",
        "* Calculate the determinant of this Matrix.",
        "* Multiply this Matrix by the given Matrix.\n             * @param src The Matrix to multiply this Matrix by.",
        "* Translate this Matrix using the given Vector.\n             * @param v The Vector to translate this Matrix with.",
        "* Apply a rotation transformation to this Matrix.\n             * @param rad The angle in radians to rotate by.",
        "* Apply a scale transformation to this Matrix.\n             * \n             * Uses the `x` and `y` components of the given Vector to scale the Matrix.\n             * @param v The Vector to scale this Matrix with.",
        "* Set the values of this Matrix from the given Quaternion.\n             * @param q The Quaternion to set the values of this Matrix from.",
        "* [description]\n             * @param m [description]",
        "* A four-dimensional matrix.",
        "* \n             * @param m Optional Matrix4 to copy values from.",
        "* The matrix values.",
        "* Make a clone of this Matrix4.",
        "* This method is an alias for `Matrix4.copy`.\n             * @param src The Matrix to set the values of this Matrix's from.",
        "* Copy the values of a given Matrix into this Matrix.\n             * @param src The Matrix to copy the values from.",
        "* Set the values of this Matrix from the given array.\n             * @param a The array to copy the values from.",
        "* Reset this Matrix.\n             * \n             * Sets all values to `0`.",
        "* Set the `x`, `y` and `z` values of this Matrix.\n             * @param x The x value.\n             * @param y The y value.\n             * @param z The z value.",
        "* Set the scaling values of this Matrix.\n             * @param x The x scaling value.\n             * @param y The y scaling value.\n             * @param z The z scaling value.",
        "* Reset this Matrix to an identity (default) matrix.",
        "* Transpose this Matrix.",
        "* Invert this Matrix.",
        "* Calculate the adjoint, or adjugate, of this Matrix.",
        "* Calculate the determinant of this Matrix.",
        "* Multiply this Matrix by the given Matrix.\n             * @param src The Matrix to multiply this Matrix by.",
        "* [description]\n             * @param src [description]",
        "* Translate this Matrix using the given Vector.\n             * @param v The Vector to translate this Matrix with.",
        "* Translate this Matrix using the given values.\n             * @param x The x component.\n             * @param y The y component.\n             * @param z The z component.",
        "* Apply a scale transformation to this Matrix.\n             * \n             * Uses the `x`, `y` and `z` components of the given Vector to scale the Matrix.\n             * @param v The Vector to scale this Matrix with.",
        "* Apply a scale transformation to this Matrix.\n             * @param x The x component.\n             * @param y The y component.\n             * @param z The z component.",
        "* Derive a rotation matrix around the given axis.\n             * @param axis The rotation axis.\n             * @param angle The rotation angle in radians.",
        "* Apply a rotation transformation to this Matrix.\n             * @param rad The angle in radians to rotate by.\n             * @param axis The axis to rotate upon.",
        "* Rotate this matrix on its X axis.\n             * @param rad The angle in radians to rotate by.",
        "* Rotate this matrix on its Y axis.\n             * @param rad The angle to rotate by, in radians.",
        "* Rotate this matrix on its Z axis.\n             * @param rad The angle to rotate by, in radians.",
        "* Set the values of this Matrix from the given rotation Quaternion and translation Vector.\n             * @param q The Quaternion to set rotation from.\n             * @param v The Vector to set translation from.",
        "* Set the values of this Matrix from the given Quaternion.\n             * @param q The Quaternion to set the values of this Matrix from.",
        "* Generate a frustum matrix with the given bounds.\n             * @param left The left bound of the frustum.\n             * @param right The right bound of the frustum.\n             * @param bottom The bottom bound of the frustum.\n             * @param top The top bound of the frustum.\n             * @param near The near bound of the frustum.\n             * @param far The far bound of the frustum.",
        "* Generate a perspective projection matrix with the given bounds.\n             * @param fovy Vertical field of view in radians\n             * @param aspect Aspect ratio. Typically viewport width  /height.\n             * @param near Near bound of the frustum.\n             * @param far Far bound of the frustum.",
        "* Generate a perspective projection matrix with the given bounds.\n             * @param width The width of the frustum.\n             * @param height The height of the frustum.\n             * @param near Near bound of the frustum.\n             * @param far Far bound of the frustum.",
        "* Generate an orthogonal projection matrix with the given bounds.\n             * @param left The left bound of the frustum.\n             * @param right The right bound of the frustum.\n             * @param bottom The bottom bound of the frustum.\n             * @param top The top bound of the frustum.\n             * @param near The near bound of the frustum.\n             * @param far The far bound of the frustum.",
        "* Generate a look-at matrix with the given eye position, focal point, and up axis.\n             * @param eye Position of the viewer\n             * @param center Point the viewer is looking at\n             * @param up vec3 pointing up.",
        "* Set the values of this matrix from the given `yaw`, `pitch` and `roll` values.\n             * @param yaw [description]\n             * @param pitch [description]\n             * @param roll [description]",
        "* Generate a world matrix from the given rotation, position, scale, view matrix and projection matrix.\n             * @param rotation The rotation of the world matrix.\n             * @param position The position of the world matrix.\n             * @param scale The scale of the world matrix.\n             * @param viewMatrix The view matrix.\n             * @param projectionMatrix The projection matrix.",
        "* Add an `amount` to a `value`, limiting the maximum result to `max`.\n         * @param value The value to add to.\n         * @param amount The amount to add.\n         * @param max The maximum value to return.",
        "* Subtract an `amount` from `value`, limiting the minimum result to `min`.\n         * @param value The value to subtract from.\n         * @param amount The amount to subtract.\n         * @param min The minimum value to return.",
        "* Work out what percentage `value` is of the range between `min` and `max`.\n         * If `max` isn't given then it will return the percentage of `value` to `min`.\n         * \n         * You can optionally specify an `upperMax` value, which is a mid-way point in the range that represents 100%, after which the % starts to go down to zero again.\n         * @param value The value to determine the percentage of.\n         * @param min The minimum value.\n         * @param max The maximum value.\n         * @param upperMax The mid-way point in the range that represents 100%.",
        "* Returns the nearest power of 2 to the given `value`.\n             * @param value The value.",
        "* Checks if the given `width` and `height` are a power of two.\n             * Useful for checking texture dimensions.\n             * @param width The width.\n             * @param height The height.",
        "* Tests the value and returns `true` if it is a power of two.\n             * @param value The value to check if it's a power of two.",
        "* A quaternion.",
        "* \n             * @param x The x component.\n             * @param y The y component.\n             * @param z The z component.\n             * @param w The w component.",
        "* The x component of this Quaternion.",
        "* The y component of this Quaternion.",
        "* The z component of this Quaternion.",
        "* The w component of this Quaternion.",
        "* Copy the components of a given Quaternion or Vector into this Quaternion.\n             * @param src The Quaternion or Vector to copy the components from.",
        "* Set the components of this Quaternion.\n             * @param x The x component, or an object containing x, y, z, and w components. Default 0.\n             * @param y The y component. Default 0.\n             * @param z The z component. Default 0.\n             * @param w The w component. Default 0.",
        "* Add a given Quaternion or Vector to this Quaternion. Addition is component-wise.\n             * @param v The Quaternion or Vector to add to this Quaternion.",
        "* Subtract a given Quaternion or Vector from this Quaternion. Subtraction is component-wise.\n             * @param v The Quaternion or Vector to subtract from this Quaternion.",
        "* Scale this Quaternion by the given value.\n             * @param scale The value to scale this Quaternion by.",
        "* Calculate the length of this Quaternion.",
        "* Calculate the length of this Quaternion squared.",
        "* Normalize this Quaternion.",
        "* Calculate the dot product of this Quaternion and the given Quaternion or Vector.\n             * @param v The Quaternion or Vector to dot product with this Quaternion.",
        "* Linearly interpolate this Quaternion towards the given Quaternion or Vector.\n             * @param v The Quaternion or Vector to interpolate towards.\n             * @param t The percentage of interpolation. Default 0.",
        "* [description]\n             * @param a [description]\n             * @param b [description]",
        "* Set the axes of this Quaternion.\n             * @param view The view axis.\n             * @param right The right axis.\n             * @param up The upwards axis.",
        "* Reset this Matrix to an identity (default) Quaternion.",
        "* Set the axis angle of this Quaternion.\n             * @param axis The axis.\n             * @param rad The angle in radians.",
        "* Multiply this Quaternion by the given Quaternion or Vector.\n             * @param b The Quaternion or Vector to multiply this Quaternion by.",
        "* Smoothly linearly interpolate this Quaternion towards the given Quaternion or Vector.\n             * @param b The Quaternion or Vector to interpolate towards.\n             * @param t The percentage of interpolation.",
        "* Invert this Quaternion.",
        "* Convert this Quaternion into its conjugate.\n             * \n             * Sets the x, y and z components.",
        "* Rotate this Quaternion on the X axis.\n             * @param rad The rotation angle in radians.",
        "* Rotate this Quaternion on the Y axis.\n             * @param rad The rotation angle in radians.",
        "* Rotate this Quaternion on the Z axis.\n             * @param rad The rotation angle in radians.",
        "* Create a unit (or rotation) Quaternion from its x, y, and z components.\n             * \n             * Sets the w component.",
        "* Convert the given Matrix into this Quaternion.\n             * @param mat The Matrix to convert from.",
        "* Convert the given angle in radians, to the equivalent angle in degrees.\n         * @param radians The angle in radians to convert ot degrees.",
        "* A seeded Random Data Generator.\n         * \n         * Access via `Phaser.Math.RND` which is an instance of this class pre-defined\n         * by Phaser. Or, create your own instance to use as you require.\n         * \n         * The `Math.RND` generator is seeded by the Game Config property value `seed`.\n         * If no such config property exists, a random number is used.\n         * \n         * If you create your own instance of this class you should provide a seed for it.\n         * If no seed is given it will use a 'random' one based on Date.now.",
        "* \n             * @param seeds The seeds to use for the random number generator.",
        "* Signs to choose from.",
        "* Initialize the state of the random data generator.\n             * @param seeds The seeds to initialize the random data generator with.",
        "* Reset the seed of the random data generator.\n             * \n             * _Note_: the seed array is only processed up to the first `undefined` (or `null`) value, should such be present.\n             * @param seeds The array of seeds: the `toString()` of each value is used.",
        "* Returns a random integer between 0 and 2^32.",
        "* Returns a random real number between 0 and 1.",
        "* Returns a random real number between 0 and 2^32.",
        "* Returns a random integer between and including min and max.\n             * @param min The minimum value in the range.\n             * @param max The maximum value in the range.",
        "* Returns a random integer between and including min and max.\n             * This method is an alias for RandomDataGenerator.integerInRange.\n             * @param min The minimum value in the range.\n             * @param max The maximum value in the range.",
        "* Returns a random real number between min and max.\n             * @param min The minimum value in the range.\n             * @param max The maximum value in the range.",
        "* Returns a random real number between -1 and 1.",
        "* Returns a valid RFC4122 version4 ID hex string from https://gist.github.com/1308368",
        "* Returns a random element from within the given array.\n             * @param array The array to pick a random element from.",
        "* Returns a sign to be used with multiplication operator.",
        "* Returns a random element from within the given array, favoring the earlier entries.\n             * @param array The array to pick a random element from.",
        "* Returns a random timestamp between min and max, or between the beginning of 2000 and the end of 2020 if min and max aren't specified.\n             * @param min The minimum value in the range.\n             * @param max The maximum value in the range.",
        "* Returns a random angle between -180 and 180.",
        "* Returns a random rotation in radians, between -3.141 and 3.141",
        "* Gets or Sets the state of the generator. This allows you to retain the values\n             * that the generator is using between games, i.e. in a game save file.\n             * \n             * To seed this generator with a previously saved state you can pass it as the\n             * `seed` value in your game config, or call this method directly after Phaser has booted.\n             * \n             * Call this method with no parameters to return the current state.\n             * \n             * If providing a state it should match the same format that this method\n             * returns, which is a string with a header `!rnd` followed by the `c`,\n             * `s0`, `s1` and `s2` values respectively, each comma-delimited.\n             * @param state Generator state to be set.",
        "* Shuffles the given array, using the current seed.\n             * @param array The array to be shuffled.",
        "* Compute a random unit vector.\n         * \n         * Computes random values for the given vector between -1 and 1 that can be used to represent a direction.\n         * \n         * Optionally accepts a scale value to scale the resulting vector by.\n         * @param vector The Vector to compute random values for.\n         * @param scale The scale of the random values. Default 1.",
        "* Compute a random position vector in a spherical area, optionally defined by the given radius.\n         * @param vec3 The Vector to compute random values for.\n         * @param radius The radius. Default 1.",
        "* Compute a random four-dimensional vector.\n         * @param vec4 The Vector to compute random values for.\n         * @param scale The scale of the random values. Default 1.",
        "* Rotate a given point by a given angle around the origin (0, 0), in an anti-clockwise direction.\n         * @param point The point to be rotated.\n         * @param angle The angle to be rotated by in an anticlockwise direction.",
        "* Rotate a `point` around `x` and `y` by the given `angle`.\n         * @param point The point to be rotated.\n         * @param x The horizontal coordinate to rotate around.\n         * @param y The vertical coordinate to rotate around.\n         * @param angle The angle of rotation in radians.",
        "* Rotate a `point` around `x` and `y` by the given `angle` and `distance`.\n         * @param point The point to be rotated.\n         * @param x The horizontal coordinate to rotate around.\n         * @param y The vertical coordinate to rotate around.\n         * @param angle The angle of rotation in radians.\n         * @param distance The distance from (x, y) to place the point at.",
        "* Rotates a vector in place by axis angle.\n         * \n         * This is the same as transforming a point by an\n         * axis-angle quaternion, but it has higher precision.\n         * @param vec The vector to be rotated.\n         * @param axis The axis to rotate around.\n         * @param radians The angle of rotation in radians.",
        "* Round a given number so it is further away from zero. That is, positive numbers are rounded up, and negative numbers are rounded down.\n         * @param value The number to round.",
        "* Round a value to a given decimal place.\n         * @param value The value to round.\n         * @param place The place to round to. Default 0.\n         * @param base The base to round in. Default is 10 for decimal. Default 10.",
        "* Generate a series of sine and cosine values.\n         * @param length The number of values to generate.\n         * @param sinAmp The sine value amplitude. Default 1.\n         * @param cosAmp The cosine value amplitude. Default 1.\n         * @param frequency The frequency of the values. Default 1.",
        "* Calculate a smoother interpolation percentage of `x` between `min` and `max`.\n         * \n         * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\n         * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\n         * between 0 and 1 otherwise.\n         * \n         * Produces an even smoother interpolation than {@link Phaser.Math.SmoothStep}.\n         * @param x The input value.\n         * @param min The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n         * @param max The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.",
        "* Calculate a smooth interpolation percentage of `x` between `min` and `max`.\n         * \n         * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\n         * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\n         * between 0 and 1 otherwise.\n         * @param x The input value.\n         * @param min The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n         * @param max The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.",
        "* Snap a value to nearest grid slice, using ceil.\n             * \n             * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `15`.\n             * As will `14` snap to `15`... but `16` will snap to `20`.\n             * @param value The value to snap.\n             * @param gap The interval gap of the grid.\n             * @param start Optional starting offset for gap. Default 0.\n             * @param divide If `true` it will divide the snapped value by the gap before returning. Default false.",
        "* Snap a value to nearest grid slice, using floor.\n             * \n             * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10`.\n             * As will `14` snap to `10`... but `16` will snap to `15`.\n             * @param value The value to snap.\n             * @param gap The interval gap of the grid.\n             * @param start Optional starting offset for gap. Default 0.\n             * @param divide If `true` it will divide the snapped value by the gap before returning. Default false.",
        "* Snap a value to nearest grid slice, using rounding.\n             * \n             * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10` whereas `14` will snap to `15`.\n             * @param value The value to snap.\n             * @param gap The interval gap of the grid.\n             * @param start Optional starting offset for gap. Default 0.\n             * @param divide If `true` it will divide the snapped value by the gap before returning. Default false.",
        "* Takes the `x` and `y` coordinates and transforms them into the same space as\n         * defined by the position, rotation and scale values.\n         * @param x The x coordinate to be transformed.\n         * @param y The y coordinate to be transformed.\n         * @param positionX Horizontal position of the transform point.\n         * @param positionY Vertical position of the transform point.\n         * @param rotation Rotation of the transform point, in radians.\n         * @param scaleX Horizontal scale of the transform point.\n         * @param scaleY Vertical scale of the transform point.\n         * @param output The output vector, point or object for the translated coordinates.",
        "* A representation of a vector in 2D space.\n         * \n         * A two-component vector.",
        "* \n             * @param x The x component, or an object with `x` and `y` properties.\n             * @param y The y component.",
        "* The x component of this Vector.",
        "* The y component of this Vector.",
        "* Make a clone of this Vector2.",
        "* Copy the components of a given Vector into this Vector.\n             * @param src The Vector to copy the components from.",
        "* Set the component values of this Vector from a given Vector2Like object.\n             * @param obj The object containing the component values to set for this Vector.",
        "* Set the `x` and `y` components of the this Vector to the given `x` and `y` values.\n             * @param x The x value to set for this Vector.\n             * @param y The y value to set for this Vector. Default x.",
        "* This method is an alias for `Vector2.set`.\n             * @param x The x value to set for this Vector.\n             * @param y The y value to set for this Vector. Default x.",
        "* Sets the `x` and `y` values of this object from a given polar coordinate.\n             * @param azimuth The angular coordinate, in radians.\n             * @param radius The radial coordinate (length). Default 1.",
        "* Check whether this Vector is equal to a given Vector.\n             * \n             * Performs a strict equality check against each Vector's components.\n             * @param v The vector to compare with this Vector.",
        "* Calculate the angle between this Vector and the positive x-axis, in radians.",
        "* Add a given Vector to this Vector. Addition is component-wise.\n             * @param src The Vector to add to this Vector.",
        "* Subtract the given Vector from this Vector. Subtraction is component-wise.\n             * @param src The Vector to subtract from this Vector.",
        "* Perform a component-wise multiplication between this Vector and the given Vector.\n             * \n             * Multiplies this Vector by the given Vector.\n             * @param src The Vector to multiply this Vector by.",
        "* Scale this Vector by the given value.\n             * @param value The value to scale this Vector by.",
        "* Perform a component-wise division between this Vector and the given Vector.\n             * \n             * Divides this Vector by the given Vector.\n             * @param src The Vector to divide this Vector by.",
        "* Negate the `x` and `y` components of this Vector.",
        "* Calculate the distance between this Vector and the given Vector.\n             * @param src The Vector to calculate the distance to.",
        "* Calculate the distance between this Vector and the given Vector, squared.\n             * @param src The Vector to calculate the distance to.",
        "* Calculate the length (or magnitude) of this Vector.",
        "* Calculate the length of this Vector squared.",
        "* Normalize this Vector.\n             * \n             * Makes the vector a unit length vector (magnitude of 1) in the same direction.",
        "* Right-hand normalize (make unit length) this Vector.",
        "* Calculate the dot product of this Vector and the given Vector.\n             * @param src The Vector2 to dot product with this Vector2.",
        "* Calculate the cross product of this Vector and the given Vector.\n             * @param src The Vector2 to cross with this Vector2.",
        "* Linearly interpolate between this Vector and the given Vector.\n             * \n             * Interpolates this Vector towards the given Vector.\n             * @param src The Vector2 to interpolate towards.\n             * @param t The interpolation percentage, between 0 and 1. Default 0.",
        "* Transform this Vector with the given Matrix.\n             * @param mat The Matrix3 to transform this Vector2 with.",
        "* Transform this Vector with the given Matrix.\n             * @param mat The Matrix4 to transform this Vector2 with.",
        "* Make this Vector the zero vector (0, 0).",
        "* A static zero Vector2 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A static right Vector2 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A static left Vector2 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A static up Vector2 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A static down Vector2 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A static one Vector2 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A representation of a vector in 3D space.\n         * \n         * A three-component vector.",
        "* \n             * @param x The x component.\n             * @param y The y component.\n             * @param z The z component.",
        "* The x component of this Vector.",
        "* The y component of this Vector.",
        "* The z component of this Vector.",
        "* Set this Vector to point up.\n             * \n             * Sets the y component of the vector to 1, and the others to 0.",
        "* Make a clone of this Vector3.",
        "* Calculate the cross (vector) product of two given Vectors.\n             * @param a The first Vector to multiply.\n             * @param b The second Vector to multiply.",
        "* Check whether this Vector is equal to a given Vector.\n             * \n             * Performs a strict equality check against each Vector's components.\n             * @param v The Vector3 to compare against.",
        "* Copy the components of a given Vector into this Vector.\n             * @param src The Vector to copy the components from.",
        "* Set the `x`, `y`, and `z` components of this Vector to the given `x`, `y`, and `z` values.\n             * @param x The x value to set for this Vector, or an object containing x, y and z components.\n             * @param y The y value to set for this Vector.\n             * @param z The z value to set for this Vector.",
        "* Add a given Vector to this Vector. Addition is component-wise.\n             * @param v The Vector to add to this Vector.",
        "* Subtract the given Vector from this Vector. Subtraction is component-wise.\n             * @param v The Vector to subtract from this Vector.",
        "* Perform a component-wise multiplication between this Vector and the given Vector.\n             * \n             * Multiplies this Vector by the given Vector.\n             * @param v The Vector to multiply this Vector by.",
        "* Scale this Vector by the given value.\n             * @param scale The value to scale this Vector by.",
        "* Perform a component-wise division between this Vector and the given Vector.\n             * \n             * Divides this Vector by the given Vector.\n             * @param v The Vector to divide this Vector by.",
        "* Negate the `x`, `y` and `z` components of this Vector.",
        "* Calculate the distance between this Vector and the given Vector.\n             * @param v The Vector to calculate the distance to.",
        "* Calculate the distance between this Vector and the given Vector, squared.\n             * @param v The Vector to calculate the distance to.",
        "* Calculate the length (or magnitude) of this Vector.",
        "* Calculate the length of this Vector squared.",
        "* Normalize this Vector.\n             * \n             * Makes the vector a unit length vector (magnitude of 1) in the same direction.",
        "* Calculate the dot product of this Vector and the given Vector.\n             * @param v The Vector3 to dot product with this Vector3.",
        "* Calculate the cross (vector) product of this Vector (which will be modified) and the given Vector.\n             * @param v The Vector to cross product with.",
        "* Linearly interpolate between this Vector and the given Vector.\n             * \n             * Interpolates this Vector towards the given Vector.\n             * @param v The Vector3 to interpolate towards.\n             * @param t The interpolation percentage, between 0 and 1. Default 0.",
        "* Transform this Vector with the given Matrix.\n             * @param mat The Matrix3 to transform this Vector3 with.",
        "* Transform this Vector with the given Matrix.\n             * @param mat The Matrix4 to transform this Vector3 with.",
        "* Transforms the coordinates of this Vector3 with the given Matrix4.\n             * @param mat The Matrix4 to transform this Vector3 with.",
        "* Transform this Vector with the given Quaternion.\n             * @param q The Quaternion to transform this Vector with.",
        "* Multiplies this Vector3 by the specified matrix, applying a W divide. This is useful for projection,\n             * e.g. unprojecting a 2D point into 3D space.\n             * @param mat The Matrix4 to multiply this Vector3 with.",
        "* Unproject this point from 2D space to 3D space.\n             * The point should have its x and y properties set to\n             * 2D screen space, and the z either at 0 (near plane)\n             * or 1 (far plane). The provided matrix is assumed to already\n             * be combined, i.e. projection * view * model.\n             * \n             * After this operation, this vector's (x, y, z) components will\n             * represent the unprojected 3D coordinate.\n             * @param viewport Screen x, y, width and height in pixels.\n             * @param invProjectionView Combined projection and view matrix.",
        "* Make this Vector the zero vector (0, 0, 0).",
        "* A static zero Vector3 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A static right Vector3 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A static left Vector3 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A static up Vector3 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A static down Vector3 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A static forward Vector3 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A static back Vector3 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A static one Vector3 for use by reference.\n             * \n             * This constant is meant for comparison operations and should not be modified directly.",
        "* A representation of a vector in 4D space.\n         * \n         * A four-component vector.",
        "* \n             * @param x The x component.\n             * @param y The y component.\n             * @param z The z component.\n             * @param w The w component.",
        "* The x component of this Vector.",
        "* The y component of this Vector.",
        "* The z component of this Vector.",
        "* The w component of this Vector.",
        "* Make a clone of this Vector4.",
        "* Copy the components of a given Vector into this Vector.\n             * @param src The Vector to copy the components from.",
        "* Check whether this Vector is equal to a given Vector.\n             * \n             * Performs a strict quality check against each Vector's components.\n             * @param v The vector to check equality with.",
        "* Set the `x`, `y`, `z` and `w` components of the this Vector to the given `x`, `y`, `z` and `w` values.\n             * @param x The x value to set for this Vector, or an object containing x, y, z and w components.\n             * @param y The y value to set for this Vector.\n             * @param z The z value to set for this Vector.\n             * @param w The z value to set for this Vector.",
        "* Add a given Vector to this Vector. Addition is component-wise.\n             * @param v The Vector to add to this Vector.",
        "* Subtract the given Vector from this Vector. Subtraction is component-wise.\n             * @param v The Vector to subtract from this Vector.",
        "* Scale this Vector by the given value.\n             * @param scale The value to scale this Vector by.",
        "* Calculate the length (or magnitude) of this Vector.",
        "* Calculate the length of this Vector squared.",
        "* Normalize this Vector.\n             * \n             * Makes the vector a unit length vector (magnitude of 1) in the same direction.",
        "* Calculate the dot product of this Vector and the given Vector.\n             * @param v The Vector4 to dot product with this Vector4.",
        "* Linearly interpolate between this Vector and the given Vector.\n             * \n             * Interpolates this Vector towards the given Vector.\n             * @param v The Vector4 to interpolate towards.\n             * @param t The interpolation percentage, between 0 and 1. Default 0.",
        "* Perform a component-wise multiplication between this Vector and the given Vector.\n             * \n             * Multiplies this Vector by the given Vector.\n             * @param v The Vector to multiply this Vector by.",
        "* Perform a component-wise division between this Vector and the given Vector.\n             * \n             * Divides this Vector by the given Vector.\n             * @param v The Vector to divide this Vector by.",
        "* Calculate the distance between this Vector and the given Vector.\n             * @param v The Vector to calculate the distance to.",
        "* Calculate the distance between this Vector and the given Vector, squared.\n             * @param v The Vector to calculate the distance to.",
        "* Negate the `x`, `y`, `z` and `w` components of this Vector.",
        "* Transform this Vector with the given Matrix.\n             * @param mat The Matrix4 to transform this Vector4 with.",
        "* Transform this Vector with the given Quaternion.\n             * @param q The Quaternion to transform this Vector with.",
        "* Make this Vector the zero vector (0, 0, 0, 0).",
        "* Checks if the two values are within the given `tolerance` of each other.\n         * @param a The first value to use in the calculation.\n         * @param b The second value to use in the calculation.\n         * @param tolerance The tolerance. Anything equal to or less than this value is considered as being within range.",
        "* Wrap the given `value` between `min` and `max.\n         * @param value The value to wrap.\n         * @param min The minimum value.\n         * @param max The maximum value.",
        "* An Arcade Physics Image is an Image with an Arcade Physics body and related components.\n             * The body can be dynamic or static.\n             * \n             * The main difference between an Arcade Image and an Arcade Sprite is that you cannot animate an Arcade Image.",
        "* \n                 * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* This Game Object's Physics Body.",
        "* Clears all alpha values associated with this Game Object.\n                 * \n                 * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n                 * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n                 * \n                 * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n                 * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n                 * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n                 * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n                 * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n                 * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n                 * \n                 * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n                 * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n                 * are used.\n                 * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.\n                 * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n                 * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n                 * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n                 * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n                 * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n                 * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n                 * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n                 * \n                 * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n                 * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n                 * \n                 * If a mask is already set on this Game Object it will be immediately replaced.\n                 * \n                 * Masks are positioned in global space and are not relative to the Game Object to which they\n                 * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n                 * \n                 * Masks have no impact on physics or input detection. They are purely a rendering component\n                 * that allows you to limit what is visible during the render pass.\n                 * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n                 * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a renderable Game Object.\n                 * A renderable Game Object is one that uses a texture to render with, such as an\n                 * Image, Sprite, Render Texture or BitmapText.\n                 * \n                 * If you do not provide a renderable object, and this Game Object has a texture,\n                 * it will use itself as the object. This means you can call this method to create\n                 * a Bitmap Mask from any renderable Game Object.\n                 * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a Graphics Game Object.\n                 * \n                 * If you do not provide a graphics object, and this Game Object is an instance\n                 * of a Graphics object, then it will use itself to create the mask.\n                 * \n                 * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n                 * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n                 * \n                 * The values are given in the range 0 to 1.\n                 * @param x The horizontal origin value. Default 0.5.\n                 * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n                 * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n                 * @param x The horizontal display origin value. Default 0.\n                 * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n                 * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n                 * This should only be called during the instantiation of the Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n                 * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.\n                 * @param x The horizontal scroll factor of this Game Object.\n                 * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The native (un-scaled) width of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n                 * \n                 * Calling this will adjust the scale.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n                 * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n                 * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n                 * \n                 * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n                 * \n                 * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n                 * changes what is shown when rendered.\n                 * \n                 * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n                 * \n                 * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n                 * half of it, you could call `setCrop(0, 0, 400, 600)`.\n                 * \n                 * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n                 * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n                 * \n                 * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n                 * \n                 * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n                 * \n                 * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n                 * the renderer to skip several internal calculations.\n                 * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n                 * @param y The y coordinate to start the crop from.\n                 * @param width The width of the crop rectangle in pixels.\n                 * @param height The height of the crop rectangle in pixels.",
        "* Sets the texture and frame this Game Object will use to render with.\n                 * \n                 * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n                 * @param key The key of the texture to be used, as stored in the Texture Manager.\n                 * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n                 * \n                 * The Frame has to belong to the current Texture being used.\n                 * \n                 * It can be either a string or an index.\n                 * \n                 * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n                 * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n                 * @param frame The name or index of the frame within the Texture.\n                 * @param updateSize Should this call adjust the size of the Game Object? Default true.\n                 * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n                 * \n                 * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n                 * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n                 * \n                 * The tint works by taking the pixel color values from the Game Objects texture, and then\n                 * multiplying it by the color value of the tint. You can provide either one color value,\n                 * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n                 * per corner. The colors are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n                 * \n                 * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n                 * with those in the tint. You can use this for effects such as making a player flash 'white'\n                 * if hit by something. You can provide either one color value, in which case the whole\n                 * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n                 * are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n                 * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n                 * \n                 * Where 0 is to the right, 90 is down, 180 is left.\n                 * \n                 * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n                 * \n                 * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n                 * @param x The x position of this Game Object. Default 0.\n                 * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n                 * @param z The z position of this Game Object. Default 0.\n                 * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n                 * the given area.\n                 * \n                 * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n                 * \n                 * The position does not factor in the size of this Game Object, meaning that only the origin is\n                 * guaranteed to be within the area.\n                 * @param x The x position of the top-left of the random area. Default 0.\n                 * @param y The y position of the top-left of the random area. Default 0.\n                 * @param width The width of the random area.\n                 * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n                 * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n                 * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n                 * @param x The horizontal scale of this Game Object.\n                 * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n                 * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n                 * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n                 * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n                 * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.\n                 * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.\n                 * @param value The visible state of the Game Object.",
        "* Sets the body's horizontal and vertical acceleration. If the vertical acceleration value is not provided, the vertical acceleration is set to the same value as the horizontal acceleration.\n                 * @param x The horizontal acceleration\n                 * @param y The vertical acceleration Default x.",
        "* Sets the body's horizontal acceleration.\n                 * @param value The horizontal acceleration",
        "* Sets the body's vertical acceleration.\n                 * @param value The vertical acceleration",
        "* Sets the angular velocity of the body.\n                 * \n                 * In Arcade Physics, bodies cannot rotate. They are always axis-aligned.\n                 * However, they can have angular motion, which is passed on to the Game Object bound to the body,\n                 * causing them to visually rotate, even though the body remains axis-aligned.\n                 * @param value The amount of angular velocity.",
        "* Sets the angular acceleration of the body.\n                 * \n                 * In Arcade Physics, bodies cannot rotate. They are always axis-aligned.\n                 * However, they can have angular motion, which is passed on to the Game Object bound to the body,\n                 * causing them to visually rotate, even though the body remains axis-aligned.\n                 * @param value The amount of angular acceleration.",
        "* Sets the angular drag of the body. Drag is applied to the current velocity, providing a form of deceleration.\n                 * @param value The amount of drag.",
        "* Sets the bounce values of this body.\n                 * \n                 * Bounce is the amount of restitution, or elasticity, the body has when it collides with another object.\n                 * A value of 1 means that it will retain its full velocity after the rebound. A value of 0 means it will not rebound at all.\n                 * @param x The amount of horizontal bounce to apply on collision. A float, typically between 0 and 1.\n                 * @param y The amount of vertical bounce to apply on collision. A float, typically between 0 and 1. Default x.",
        "* Sets the horizontal bounce value for this body.\n                 * @param value The amount of horizontal bounce to apply on collision. A float, typically between 0 and 1.",
        "* Sets the vertical bounce value for this body.\n                 * @param value The amount of vertical bounce to apply on collision. A float, typically between 0 and 1.",
        "* Sets if this body should collide with the world bounds or not.\n                 * @param value `true` if this body should collide with the world bounds, otherwise `false`.",
        "* Sets the debug values of this body.\n                 * \n                 * Bodies will only draw their debug if debug has been enabled for Arcade Physics as a whole.\n                 * Note that there is a performance cost in drawing debug displays. It should never be used in production.\n                 * @param showBody Set to `true` to have this body render its outline to the debug display.\n                 * @param showVelocity Set to `true` to have this body render a velocity marker to the debug display.\n                 * @param bodyColor The color of the body outline when rendered to the debug display.",
        "* Sets the color of the body outline when it renders to the debug display.\n                 * @param value The color of the body outline when rendered to the debug display.",
        "* Set to `true` to have this body render its outline to the debug display.",
        "* Set to `true` to have this body render a velocity marker to the debug display.",
        "* The color of the body outline when it renders to the debug display.",
        "* Sets the body's horizontal and vertical drag. If the vertical drag value is not provided, the vertical drag is set to the same value as the horizontal drag.\n                 * \n                 * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\n                 * It is the absolute loss of velocity due to movement, in pixels per second squared.\n                 * The x and y components are applied separately.\n                 * \n                 * When `useDamping` is true, this is 1 minus the damping factor.\n                 * A value of 1 means the Body loses no velocity.\n                 * A value of 0.95 means the Body loses 5% of its velocity per step.\n                 * A value of 0.5 means the Body loses 50% of its velocity per step.\n                 * \n                 * Drag is applied only when `acceleration` is zero.\n                 * @param x The amount of horizontal drag to apply.\n                 * @param y The amount of vertical drag to apply. Default x.",
        "* Sets the body's horizontal drag.\n                 * \n                 * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\n                 * It is the absolute loss of velocity due to movement, in pixels per second squared.\n                 * The x and y components are applied separately.\n                 * \n                 * When `useDamping` is true, this is 1 minus the damping factor.\n                 * A value of 1 means the Body loses no velocity.\n                 * A value of 0.95 means the Body loses 5% of its velocity per step.\n                 * A value of 0.5 means the Body loses 50% of its velocity per step.\n                 * \n                 * Drag is applied only when `acceleration` is zero.\n                 * @param value The amount of horizontal drag to apply.",
        "* Sets the body's vertical drag.\n                 * \n                 * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\n                 * It is the absolute loss of velocity due to movement, in pixels per second squared.\n                 * The x and y components are applied separately.\n                 * \n                 * When `useDamping` is true, this is 1 minus the damping factor.\n                 * A value of 1 means the Body loses no velocity.\n                 * A value of 0.95 means the Body loses 5% of its velocity per step.\n                 * A value of 0.5 means the Body loses 50% of its velocity per step.\n                 * \n                 * Drag is applied only when `acceleration` is zero.\n                 * @param value The amount of vertical drag to apply.",
        "* If this Body is using `drag` for deceleration this function controls how the drag is applied.\n                 * If set to `true` drag will use a damping effect rather than a linear approach. If you are\n                 * creating a game where the Body moves freely at any angle (i.e. like the way the ship moves in\n                 * the game Asteroids) then you will get a far smoother and more visually correct deceleration\n                 * by using damping, avoiding the axis-drift that is prone with linear deceleration.\n                 * \n                 * If you enable this property then you should use far smaller `drag` values than with linear, as\n                 * they are used as a multiplier on the velocity. Values such as 0.95 will give a nice slow\n                 * deceleration, where-as smaller values, such as 0.5 will stop an object almost immediately.\n                 * @param value `true` to use damping for deceleration, or `false` to use linear deceleration.",
        "* Enables this Game Object's Body.\n                 * @param reset Also reset the Body and place it at (x, y).\n                 * @param x The horizontal position to place the Game Object and Body.\n                 * @param y The horizontal position to place the Game Object and Body.\n                 * @param enableGameObject Also activate this Game Object.\n                 * @param showGameObject Also show this Game Object.",
        "* Stops and disables this Game Object's Body.\n                 * @param disableGameObject Also deactivate this Game Object. Default false.\n                 * @param hideGameObject Also hide this Game Object. Default false.",
        "* Syncs the Body's position and size with its parent Game Object.\n                 * You don't need to call this for Dynamic Bodies, as it happens automatically.\n                 * But for Static bodies it's a useful way of modifying the position of a Static Body\n                 * in the Physics World, based on its Game Object.",
        "* Sets the friction (e.g. the amount of velocity reduced over time) of the physics body when moving.\n                 * The higher than friction, the faster the body will slow down once force stops being applied to it.\n                 * @param x The amount of horizontal friction to apply.\n                 * @param y The amount of vertical friction to apply. Default x.",
        "* Sets the friction (e.g. the amount of velocity reduced over time) of the physics body when moving horizontally in the X axis.\n                 * The higher than friction, the faster the body will slow down once force stops being applied to it.\n                 * @param x The amount of friction to apply.",
        "* Sets the friction (e.g. the amount of velocity reduced over time) of the physics body when moving vertically in the Y axis.\n                 * The higher than friction, the faster the body will slow down once force stops being applied to it.\n                 * @param x The amount of friction to apply.",
        "* Set the X and Y values of the gravitational pull to act upon this Arcade Physics Game Object. Values can be positive or negative. Larger values result in a stronger effect.\n                 * \n                 * If only one value is provided, this value will be used for both the X and Y axis.\n                 * @param x The gravitational force to be applied to the X-axis.\n                 * @param y The gravitational force to be applied to the Y-axis. If this is not specified, the X value will be used. Default x.",
        "* Set the gravitational force to be applied to the X axis. Value can be positive or negative. Larger values result in a stronger effect.\n                 * @param x The gravitational force to be applied to the X-axis.",
        "* Set the gravitational force to be applied to the Y axis. Value can be positive or negative. Larger values result in a stronger effect.\n                 * @param y The gravitational force to be applied to the Y-axis.",
        "* Sets Whether this Body can be moved by collisions with another Body.\n                 * @param value Sets if this body can be moved by collisions with another Body. Default true.",
        "* Sets the mass of the physics body\n                 * @param value New value for the mass of the body.",
        "* Sets the body offset. This allows you to adjust the difference between the center of the body\n                 * and the x and y coordinates of the parent Game Object.\n                 * @param x The amount to offset the body from the parent Game Object along the x-axis.\n                 * @param y The amount to offset the body from the parent Game Object along the y-axis. Defaults to the value given for the x-axis. Default x.",
        "* Sets this physics body to use a circle for collision instead of a rectangle.\n                 * @param radius The radius of the physics body, in pixels.\n                 * @param offsetX The amount to offset the body from the parent Game Object along the x-axis.\n                 * @param offsetY The amount to offset the body from the parent Game Object along the y-axis.",
        "* Sets the velocity of the Body.\n                 * @param x The horizontal velocity of the body. Positive values move the body to the right, while negative values move it to the left.\n                 * @param y The vertical velocity of the body. Positive values move the body down, while negative values move it up. Default x.",
        "* Sets the horizontal component of the body's velocity.\n                 * \n                 * Positive values move the body to the right, while negative values move it to the left.\n                 * @param x The new horizontal velocity.",
        "* Sets the vertical component of the body's velocity.\n                 * \n                 * Positive values move the body down, while negative values move it up.\n                 * @param y The new vertical velocity of the body.",
        "* Sets the maximum velocity of the body.\n                 * @param x The new maximum horizontal velocity.\n                 * @param y The new maximum vertical velocity. Default x.",
        "* The Arcade Physics Plugin belongs to a Scene and sets up and manages the Scene's physics simulation.\n             * It also holds some useful methods for moving and rotating Arcade Physics Bodies.\n             * \n             * You can access it from within a Scene using `this.physics`.",
        "* \n                 * @param scene The Scene that this Plugin belongs to.",
        "* The Scene that this Plugin belongs to.",
        "* The Scene's Systems.",
        "* A configuration object. Union of the `physics.arcade.*` properties of the GameConfig and SceneConfig objects.",
        "* The physics simulation.",
        "* An object holding the Arcade Physics factory methods.",
        "* Creates the physics configuration for the current Scene.",
        "* Tests if Game Objects overlap. See {@link Phaser.Physics.Arcade.World#overlap}\n                 * @param object1 The first object or array of objects to check.\n                 * @param object2 The second object or array of objects to check, or `undefined`.\n                 * @param collideCallback An optional callback function that is called if the objects collide.\n                 * @param processCallback An optional callback function that lets you perform additional checks against the two objects if they overlap. If this is set then `collideCallback` will only be called if this callback returns `true`.\n                 * @param callbackContext The context in which to run the callbacks.",
        "* Tests if Game Objects overlap and separates them (if possible). See {@link Phaser.Physics.Arcade.World#collide}.\n                 * @param object1 The first object or array of objects to check.\n                 * @param object2 The second object or array of objects to check, or `undefined`.\n                 * @param collideCallback An optional callback function that is called if the objects collide.\n                 * @param processCallback An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\n                 * @param callbackContext The context in which to run the callbacks.",
        "* Pauses the simulation.",
        "* Resumes the simulation (if paused).",
        "* Sets the acceleration.x/y property on the game object so it will move towards the x/y coordinates at the given rate (in pixels per second squared)\n                 * \n                 * You must give a maximum speed value, beyond which the game object won't go any faster.\n                 * \n                 * Note: The game object does not continuously track the target. If the target changes location during transit the game object will not modify its course.\n                 * Note: The game object doesn't stop moving once it reaches the destination coordinates.\n                 * @param gameObject Any Game Object with an Arcade Physics body.\n                 * @param x The x coordinate to accelerate towards.\n                 * @param y The y coordinate to accelerate towards.\n                 * @param speed The acceleration (change in speed) in pixels per second squared. Default 60.\n                 * @param xSpeedMax The maximum x velocity the game object can reach. Default 500.\n                 * @param ySpeedMax The maximum y velocity the game object can reach. Default 500.",
        "* Sets the acceleration.x/y property on the game object so it will move towards the x/y coordinates at the given rate (in pixels per second squared)\n                 * \n                 * You must give a maximum speed value, beyond which the game object won't go any faster.\n                 * \n                 * Note: The game object does not continuously track the target. If the target changes location during transit the game object will not modify its course.\n                 * Note: The game object doesn't stop moving once it reaches the destination coordinates.\n                 * @param gameObject Any Game Object with an Arcade Physics body.\n                 * @param destination The Game Object to move towards. Can be any object but must have visible x/y properties.\n                 * @param speed The acceleration (change in speed) in pixels per second squared. Default 60.\n                 * @param xSpeedMax The maximum x velocity the game object can reach. Default 500.\n                 * @param ySpeedMax The maximum y velocity the game object can reach. Default 500.",
        "* Finds the Body closest to a source point or object.\n                 * @param source Any object with public `x` and `y` properties, such as a Game Object or Geometry object.",
        "* Finds the Body farthest from a source point or object.\n                 * @param source Any object with public `x` and `y` properties, such as a Game Object or Geometry object.",
        "* Move the given display object towards the x/y coordinates at a steady velocity.\n                 * If you specify a maxTime then it will adjust the speed (over-writing what you set) so it arrives at the destination in that number of seconds.\n                 * Timings are approximate due to the way browser timers work. Allow for a variance of +- 50ms.\n                 * Note: The display object does not continuously track the target. If the target changes location during transit the display object will not modify its course.\n                 * Note: The display object doesn't stop moving once it reaches the destination coordinates.\n                 * Note: Doesn't take into account acceleration, maxVelocity or drag (if you've set drag or acceleration too high this object may not move at all)\n                 * @param gameObject Any Game Object with an Arcade Physics body.\n                 * @param x The x coordinate to move towards.\n                 * @param y The y coordinate to move towards.\n                 * @param speed The speed it will move, in pixels per second (default is 60 pixels/sec) Default 60.\n                 * @param maxTime Time given in milliseconds (1000 = 1 sec). If set the speed is adjusted so the object will arrive at destination in the given number of ms. Default 0.",
        "* Move the given display object towards the destination object at a steady velocity.\n                 * If you specify a maxTime then it will adjust the speed (overwriting what you set) so it arrives at the destination in that number of seconds.\n                 * Timings are approximate due to the way browser timers work. Allow for a variance of +- 50ms.\n                 * Note: The display object does not continuously track the target. If the target changes location during transit the display object will not modify its course.\n                 * Note: The display object doesn't stop moving once it reaches the destination coordinates.\n                 * Note: Doesn't take into account acceleration, maxVelocity or drag (if you've set drag or acceleration too high this object may not move at all)\n                 * @param gameObject Any Game Object with an Arcade Physics body.\n                 * @param destination Any object with public `x` and `y` properties, such as a Game Object or Geometry object.\n                 * @param speed The speed it will move, in pixels per second (default is 60 pixels/sec) Default 60.\n                 * @param maxTime Time given in milliseconds (1000 = 1 sec). If set the speed is adjusted so the object will arrive at destination in the given number of ms. Default 0.",
        "* Given the angle (in degrees) and speed calculate the velocity and return it as a vector, or set it to the given vector object.\n                 * One way to use this is: velocityFromAngle(angle, 200, sprite.body.velocity) which will set the values directly to the sprite's velocity and not create a new vector object.\n                 * @param angle The angle in degrees calculated in clockwise positive direction (down = 90 degrees positive, right = 0 degrees positive, up = 90 degrees negative)\n                 * @param speed The speed it will move, in pixels per second squared. Default 60.\n                 * @param vec2 The Vector2 in which the x and y properties will be set to the calculated velocity.",
        "* Given the rotation (in radians) and speed calculate the velocity and return it as a vector, or set it to the given vector object.\n                 * One way to use this is: velocityFromRotation(rotation, 200, sprite.body.velocity) which will set the values directly to the sprite's velocity and not create a new vector object.\n                 * @param rotation The angle in radians.\n                 * @param speed The speed it will move, in pixels per second squared Default 60.\n                 * @param vec2 The Vector2 in which the x and y properties will be set to the calculated velocity.",
        "* The Scene that owns this plugin is shutting down.\n                 * We need to kill and reset all internal properties as well as stop listening to Scene events.",
        "* The Scene that owns this plugin is being destroyed.\n                 * We need to shutdown and then kill off all external references.",
        "* An Arcade Physics Sprite is a Sprite with an Arcade Physics body and related components.\n             * The body can be dynamic or static.\n             * \n             * The main difference between an Arcade Sprite and an Arcade Image is that you cannot animate an Arcade Image.\n             * If you do not require animation then you can safely use Arcade Images instead of Arcade Sprites.",
        "* \n                 * @param scene The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* This Game Object's Physics Body.",
        "* Clears all alpha values associated with this Game Object.\n                 * \n                 * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n                 * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n                 * \n                 * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n                 * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n                 * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n                 * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n                 * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n                 * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n                 * \n                 * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n                 * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n                 * are used.\n                 * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.\n                 * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n                 * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n                 * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n                 * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n                 * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n                 * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n                 * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n                 * \n                 * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n                 * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n                 * \n                 * If a mask is already set on this Game Object it will be immediately replaced.\n                 * \n                 * Masks are positioned in global space and are not relative to the Game Object to which they\n                 * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n                 * \n                 * Masks have no impact on physics or input detection. They are purely a rendering component\n                 * that allows you to limit what is visible during the render pass.\n                 * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n                 * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a renderable Game Object.\n                 * A renderable Game Object is one that uses a texture to render with, such as an\n                 * Image, Sprite, Render Texture or BitmapText.\n                 * \n                 * If you do not provide a renderable object, and this Game Object has a texture,\n                 * it will use itself as the object. This means you can call this method to create\n                 * a Bitmap Mask from any renderable Game Object.\n                 * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a Graphics Game Object.\n                 * \n                 * If you do not provide a graphics object, and this Game Object is an instance\n                 * of a Graphics object, then it will use itself to create the mask.\n                 * \n                 * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n                 * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n                 * \n                 * The values are given in the range 0 to 1.\n                 * @param x The horizontal origin value. Default 0.5.\n                 * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n                 * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n                 * @param x The horizontal display origin value. Default 0.\n                 * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n                 * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n                 * This should only be called during the instantiation of the Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n                 * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.\n                 * @param x The horizontal scroll factor of this Game Object.\n                 * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The native (un-scaled) width of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n                 * \n                 * Calling this will adjust the scale.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n                 * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n                 * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n                 * \n                 * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n                 * \n                 * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n                 * changes what is shown when rendered.\n                 * \n                 * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n                 * \n                 * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n                 * half of it, you could call `setCrop(0, 0, 400, 600)`.\n                 * \n                 * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n                 * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n                 * \n                 * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n                 * \n                 * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n                 * \n                 * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n                 * the renderer to skip several internal calculations.\n                 * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n                 * @param y The y coordinate to start the crop from.\n                 * @param width The width of the crop rectangle in pixels.\n                 * @param height The height of the crop rectangle in pixels.",
        "* Sets the texture and frame this Game Object will use to render with.\n                 * \n                 * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n                 * @param key The key of the texture to be used, as stored in the Texture Manager.\n                 * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n                 * \n                 * The Frame has to belong to the current Texture being used.\n                 * \n                 * It can be either a string or an index.\n                 * \n                 * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n                 * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n                 * @param frame The name or index of the frame within the Texture.\n                 * @param updateSize Should this call adjust the size of the Game Object? Default true.\n                 * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n                 * \n                 * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n                 * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n                 * \n                 * The tint works by taking the pixel color values from the Game Objects texture, and then\n                 * multiplying it by the color value of the tint. You can provide either one color value,\n                 * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n                 * per corner. The colors are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n                 * \n                 * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n                 * with those in the tint. You can use this for effects such as making a player flash 'white'\n                 * if hit by something. You can provide either one color value, in which case the whole\n                 * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n                 * are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n                 * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n                 * \n                 * Where 0 is to the right, 90 is down, 180 is left.\n                 * \n                 * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n                 * \n                 * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n                 * @param x The x position of this Game Object. Default 0.\n                 * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n                 * @param z The z position of this Game Object. Default 0.\n                 * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n                 * the given area.\n                 * \n                 * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n                 * \n                 * The position does not factor in the size of this Game Object, meaning that only the origin is\n                 * guaranteed to be within the area.\n                 * @param x The x position of the top-left of the random area. Default 0.\n                 * @param y The y position of the top-left of the random area. Default 0.\n                 * @param width The width of the random area.\n                 * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n                 * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n                 * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n                 * @param x The horizontal scale of this Game Object.\n                 * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n                 * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n                 * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n                 * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n                 * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.\n                 * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.\n                 * @param value The visible state of the Game Object.",
        "* Sets the body's horizontal and vertical acceleration. If the vertical acceleration value is not provided, the vertical acceleration is set to the same value as the horizontal acceleration.\n                 * @param x The horizontal acceleration\n                 * @param y The vertical acceleration Default x.",
        "* Sets the body's horizontal acceleration.\n                 * @param value The horizontal acceleration",
        "* Sets the body's vertical acceleration.\n                 * @param value The vertical acceleration",
        "* Sets the angular velocity of the body.\n                 * \n                 * In Arcade Physics, bodies cannot rotate. They are always axis-aligned.\n                 * However, they can have angular motion, which is passed on to the Game Object bound to the body,\n                 * causing them to visually rotate, even though the body remains axis-aligned.\n                 * @param value The amount of angular velocity.",
        "* Sets the angular acceleration of the body.\n                 * \n                 * In Arcade Physics, bodies cannot rotate. They are always axis-aligned.\n                 * However, they can have angular motion, which is passed on to the Game Object bound to the body,\n                 * causing them to visually rotate, even though the body remains axis-aligned.\n                 * @param value The amount of angular acceleration.",
        "* Sets the angular drag of the body. Drag is applied to the current velocity, providing a form of deceleration.\n                 * @param value The amount of drag.",
        "* Sets the bounce values of this body.\n                 * \n                 * Bounce is the amount of restitution, or elasticity, the body has when it collides with another object.\n                 * A value of 1 means that it will retain its full velocity after the rebound. A value of 0 means it will not rebound at all.\n                 * @param x The amount of horizontal bounce to apply on collision. A float, typically between 0 and 1.\n                 * @param y The amount of vertical bounce to apply on collision. A float, typically between 0 and 1. Default x.",
        "* Sets the horizontal bounce value for this body.\n                 * @param value The amount of horizontal bounce to apply on collision. A float, typically between 0 and 1.",
        "* Sets the vertical bounce value for this body.\n                 * @param value The amount of vertical bounce to apply on collision. A float, typically between 0 and 1.",
        "* Sets if this body should collide with the world bounds or not.\n                 * @param value `true` if this body should collide with the world bounds, otherwise `false`.",
        "* Sets the debug values of this body.\n                 * \n                 * Bodies will only draw their debug if debug has been enabled for Arcade Physics as a whole.\n                 * Note that there is a performance cost in drawing debug displays. It should never be used in production.\n                 * @param showBody Set to `true` to have this body render its outline to the debug display.\n                 * @param showVelocity Set to `true` to have this body render a velocity marker to the debug display.\n                 * @param bodyColor The color of the body outline when rendered to the debug display.",
        "* Sets the color of the body outline when it renders to the debug display.\n                 * @param value The color of the body outline when rendered to the debug display.",
        "* Set to `true` to have this body render its outline to the debug display.",
        "* Set to `true` to have this body render a velocity marker to the debug display.",
        "* The color of the body outline when it renders to the debug display.",
        "* Sets the body's horizontal and vertical drag. If the vertical drag value is not provided, the vertical drag is set to the same value as the horizontal drag.\n                 * \n                 * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\n                 * It is the absolute loss of velocity due to movement, in pixels per second squared.\n                 * The x and y components are applied separately.\n                 * \n                 * When `useDamping` is true, this is 1 minus the damping factor.\n                 * A value of 1 means the Body loses no velocity.\n                 * A value of 0.95 means the Body loses 5% of its velocity per step.\n                 * A value of 0.5 means the Body loses 50% of its velocity per step.\n                 * \n                 * Drag is applied only when `acceleration` is zero.\n                 * @param x The amount of horizontal drag to apply.\n                 * @param y The amount of vertical drag to apply. Default x.",
        "* Sets the body's horizontal drag.\n                 * \n                 * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\n                 * It is the absolute loss of velocity due to movement, in pixels per second squared.\n                 * The x and y components are applied separately.\n                 * \n                 * When `useDamping` is true, this is 1 minus the damping factor.\n                 * A value of 1 means the Body loses no velocity.\n                 * A value of 0.95 means the Body loses 5% of its velocity per step.\n                 * A value of 0.5 means the Body loses 50% of its velocity per step.\n                 * \n                 * Drag is applied only when `acceleration` is zero.\n                 * @param value The amount of horizontal drag to apply.",
        "* Sets the body's vertical drag.\n                 * \n                 * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\n                 * It is the absolute loss of velocity due to movement, in pixels per second squared.\n                 * The x and y components are applied separately.\n                 * \n                 * When `useDamping` is true, this is 1 minus the damping factor.\n                 * A value of 1 means the Body loses no velocity.\n                 * A value of 0.95 means the Body loses 5% of its velocity per step.\n                 * A value of 0.5 means the Body loses 50% of its velocity per step.\n                 * \n                 * Drag is applied only when `acceleration` is zero.\n                 * @param value The amount of vertical drag to apply.",
        "* If this Body is using `drag` for deceleration this function controls how the drag is applied.\n                 * If set to `true` drag will use a damping effect rather than a linear approach. If you are\n                 * creating a game where the Body moves freely at any angle (i.e. like the way the ship moves in\n                 * the game Asteroids) then you will get a far smoother and more visually correct deceleration\n                 * by using damping, avoiding the axis-drift that is prone with linear deceleration.\n                 * \n                 * If you enable this property then you should use far smaller `drag` values than with linear, as\n                 * they are used as a multiplier on the velocity. Values such as 0.95 will give a nice slow\n                 * deceleration, where-as smaller values, such as 0.5 will stop an object almost immediately.\n                 * @param value `true` to use damping for deceleration, or `false` to use linear deceleration.",
        "* Enables this Game Object's Body.\n                 * @param reset Also reset the Body and place it at (x, y).\n                 * @param x The horizontal position to place the Game Object and Body.\n                 * @param y The horizontal position to place the Game Object and Body.\n                 * @param enableGameObject Also activate this Game Object.\n                 * @param showGameObject Also show this Game Object.",
        "* Stops and disables this Game Object's Body.\n                 * @param disableGameObject Also deactivate this Game Object. Default false.\n                 * @param hideGameObject Also hide this Game Object. Default false.",
        "* Syncs the Body's position and size with its parent Game Object.\n                 * You don't need to call this for Dynamic Bodies, as it happens automatically.\n                 * But for Static bodies it's a useful way of modifying the position of a Static Body\n                 * in the Physics World, based on its Game Object.",
        "* Sets the friction (e.g. the amount of velocity reduced over time) of the physics body when moving.\n                 * The higher than friction, the faster the body will slow down once force stops being applied to it.\n                 * @param x The amount of horizontal friction to apply.\n                 * @param y The amount of vertical friction to apply. Default x.",
        "* Sets the friction (e.g. the amount of velocity reduced over time) of the physics body when moving horizontally in the X axis.\n                 * The higher than friction, the faster the body will slow down once force stops being applied to it.\n                 * @param x The amount of friction to apply.",
        "* Sets the friction (e.g. the amount of velocity reduced over time) of the physics body when moving vertically in the Y axis.\n                 * The higher than friction, the faster the body will slow down once force stops being applied to it.\n                 * @param x The amount of friction to apply.",
        "* Set the X and Y values of the gravitational pull to act upon this Arcade Physics Game Object. Values can be positive or negative. Larger values result in a stronger effect.\n                 * \n                 * If only one value is provided, this value will be used for both the X and Y axis.\n                 * @param x The gravitational force to be applied to the X-axis.\n                 * @param y The gravitational force to be applied to the Y-axis. If this is not specified, the X value will be used. Default x.",
        "* Set the gravitational force to be applied to the X axis. Value can be positive or negative. Larger values result in a stronger effect.\n                 * @param x The gravitational force to be applied to the X-axis.",
        "* Set the gravitational force to be applied to the Y axis. Value can be positive or negative. Larger values result in a stronger effect.\n                 * @param y The gravitational force to be applied to the Y-axis.",
        "* Sets Whether this Body can be moved by collisions with another Body.\n                 * @param value Sets if this body can be moved by collisions with another Body. Default true.",
        "* Sets the mass of the physics body\n                 * @param value New value for the mass of the body.",
        "* Sets the body offset. This allows you to adjust the difference between the center of the body\n                 * and the x and y coordinates of the parent Game Object.\n                 * @param x The amount to offset the body from the parent Game Object along the x-axis.\n                 * @param y The amount to offset the body from the parent Game Object along the y-axis. Defaults to the value given for the x-axis. Default x.",
        "* Sets this physics body to use a circle for collision instead of a rectangle.\n                 * @param radius The radius of the physics body, in pixels.\n                 * @param offsetX The amount to offset the body from the parent Game Object along the x-axis.\n                 * @param offsetY The amount to offset the body from the parent Game Object along the y-axis.",
        "* Sets the velocity of the Body.\n                 * @param x The horizontal velocity of the body. Positive values move the body to the right, while negative values move it to the left.\n                 * @param y The vertical velocity of the body. Positive values move the body down, while negative values move it up. Default x.",
        "* Sets the horizontal component of the body's velocity.\n                 * \n                 * Positive values move the body to the right, while negative values move it to the left.\n                 * @param x The new horizontal velocity.",
        "* Sets the vertical component of the body's velocity.\n                 * \n                 * Positive values move the body down, while negative values move it up.\n                 * @param y The new vertical velocity of the body.",
        "* Sets the maximum velocity of the body.\n                 * @param x The new maximum horizontal velocity.\n                 * @param y The new maximum vertical velocity. Default x.",
        "* A Dynamic Arcade Body.\n             * \n             * Its static counterpart is {@link Phaser.Physics.Arcade.StaticBody}.",
        "* \n                 * @param world The Arcade Physics simulation this Body belongs to.\n                 * @param gameObject The Game Object this Body belongs to.",
        "* The Arcade Physics simulation this Body belongs to.",
        "* The Game Object this Body belongs to.",
        "* Transformations applied to this Body.",
        "* Whether the Body's boundary is drawn to the debug display.",
        "* Whether the Body's velocity is drawn to the debug display.",
        "* The color of this Body on the debug display.",
        "* Whether this Body is updated by the physics simulation.",
        "* Whether this Body's boundary is circular (true) or rectangular (false).",
        "* If this Body is circular, this is the unscaled radius of the Body's boundary, as set by setCircle(), in source pixels.\n                 * The true radius is equal to `halfWidth`.",
        "* The offset of this Body's position from its Game Object's position, in source pixels.",
        "* The position of this Body within the simulation.",
        "* The position of this Body during the previous step.",
        "* Whether this Body's `rotation` is affected by its angular acceleration and angular velocity.",
        "* This body's rotation, in degrees, based on its angular acceleration and angular velocity.\n                 * The Body's rotation controls the `angle` of its Game Object.\n                 * It doesn't rotate the Body's boundary, which is always an axis-aligned rectangle or a circle.",
        "* The Body's rotation, in degrees, during the previous step.",
        "* The width of the Body's boundary, in pixels.\n                 * If the Body is circular, this is also the Body's diameter.",
        "* The height of the Body's boundary, in pixels.\n                 * If the Body is circular, this is also the Body's diameter.",
        "* The unscaled width of the Body, in source pixels, as set by setSize().\n                 * The default is the width of the Body's Game Object's texture frame.",
        "* The unscaled height of the Body, in source pixels, as set by setSize().\n                 * The default is the height of the Body's Game Object's texture frame.",
        "* Half the Body's width, in pixels.",
        "* Half the Body's height, in pixels.",
        "* The center of the Body's boundary.\n                 * The midpoint of its `position` (top-left corner) and its bottom-right corner.",
        "* The Body's velocity, in pixels per second.",
        "* The Body's calculated velocity, in pixels per second, at the last step.",
        "* The Body's absolute maximum change in position, in pixels per step.",
        "* The Body's change in velocity, in pixels per second squared.",
        "* Whether this Body's velocity is affected by its `drag`.",
        "* Absolute loss of velocity due to movement, in pixels per second squared.\n                 * The x and y components are applied separately.\n                 * \n                 * When `useDamping` is true, this is 1 minus the damping factor.\n                 * A value of 1 means the Body loses no velocity.\n                 * A value of 0.95 means the Body loses 5% of its velocity per step.\n                 * A value of 0.5 means the Body loses 50% of its velocity per step.\n                 * \n                 * Drag is applied only when `acceleration` is zero.",
        "* Whether this Body's position is affected by gravity (local or world).",
        "* Acceleration due to gravity (specific to this Body), in pixels per second squared.\n                 * Total gravity is the sum of this vector and the simulation's `gravity`.",
        "* Rebound following a collision, relative to 1.",
        "* Rebound following a collision with the world boundary, relative to 1.\n                 * If null, `bounce` is used instead.",
        "* Whether the simulation emits a `worldbounds` event when this Body collides with the world boundary (and `collideWorldBounds` is also true).",
        "* Whether the simulation emits a `collide` event when this Body collides with another.",
        "* Whether the simulation emits an `overlap` event when this Body overlaps with another.",
        "* The Body's absolute maximum velocity, in pixels per second.\n                 * The horizontal and vertical components are applied separately.",
        "* The maximum speed this Body is allowed to reach.\n                 * \n                 * If not negative it limits the scalar value of speed.\n                 * \n                 * Any negative value means no maximum is being applied.",
        "* If this Body is `immovable` and in motion, `friction` is the proportion of this Body's motion received by the riding Body on each axis, relative to 1.\n                 * The default value (1, 0) moves the riding Body horizontally in equal proportion to this Body and vertically not at all.\n                 * The horizontal component (x) is applied only when two colliding Bodies are separated vertically.\n                 * The vertical component (y) is applied only when two colliding Bodies are separated horizontally.",
        "* If this Body is using `drag` for deceleration this property controls how the drag is applied.\n                 * If set to `true` drag will use a damping effect rather than a linear approach. If you are\n                 * creating a game where the Body moves freely at any angle (i.e. like the way the ship moves in\n                 * the game Asteroids) then you will get a far smoother and more visually correct deceleration\n                 * by using damping, avoiding the axis-drift that is prone with linear deceleration.\n                 * \n                 * If you enable this property then you should use far smaller `drag` values than with linear, as\n                 * they are used as a multiplier on the velocity. Values such as 0.95 will give a nice slow\n                 * deceleration, where-as smaller values, such as 0.5 will stop an object almost immediately.",
        "* The rate of change of this Body's `rotation`, in degrees per second.",
        "* The Body's angular acceleration (change in angular velocity), in degrees per second squared.",
        "* Loss of angular velocity due to angular movement, in degrees per second.\n                 * \n                 * Angular drag is applied only when angular acceleration is zero.",
        "* The Body's maximum angular velocity, in degrees per second.",
        "* The Body's inertia, relative to a default unit (1).\n                 * With `bounce`, this affects the exchange of momentum (velocities) during collisions.",
        "* The calculated angle of this Body's velocity vector, in degrees, during the last step.",
        "* The calculated magnitude of the Body's velocity, in pixels per second, during the last step.",
        "* The direction of the Body's velocity, as calculated during the last step.\n                 * If the Body is moving on both axes (diagonally), this describes motion on the vertical axis only.",
        "* Whether this Body can be moved by collisions with another Body.",
        "* Whether the Body's position and rotation are affected by its velocity, acceleration, drag, and gravity.",
        "* A flag disabling the default horizontal separation of colliding bodies.\n                 * Pass your own `collideCallback` to the collider.",
        "* A flag disabling the default vertical separation of colliding bodies.\n                 * Pass your own `collideCallback` to the collider.",
        "* The amount of horizontal overlap (before separation), if this Body is colliding with another.",
        "* The amount of vertical overlap (before separation), if this Body is colliding with another.",
        "* The amount of overlap (before separation), if this Body is circular and colliding with another circular body.",
        "* Whether this Body is overlapped with another and both are not moving.",
        "* Whether this Body interacts with the world boundary.",
        "* Whether this Body is checked for collisions and for which directions.\n                 * You can set `checkCollision.none = true` to disable collision checks.",
        "* Whether this Body is colliding with another and in which direction.",
        "* Whether this Body was colliding with another during the last step, and in which direction.",
        "* Whether this Body is colliding with a tile or the world boundary.",
        "* Whether to automatically synchronize this Body's dimensions to the dimensions of its Game Object's visual bounds.",
        "* Whether this Body is being moved by the `moveTo` or `moveFrom` methods.",
        "* Whether this Body's movement by `moveTo` or `moveFrom` will be stopped by collisions with other bodies.",
        "* The Body's physics type (dynamic or static).",
        "* Updates the Body's `transform`, `width`, `height`, and `center` from its Game Object.\n                 * The Body's `position` isn't changed.",
        "* Updates the Body's `center` from its `position`, `width`, and `height`.",
        "* Updates the Body.\n                 * @param delta The delta time, in seconds, elapsed since the last frame.",
        "* Feeds the Body results back into the parent Game Object.\n                 * @param resetDelta Reset the delta properties?",
        "* Checks for collisions between this Body and the world boundary and separates them.",
        "* Sets the offset of the Body's position from its Game Object's position.\n                 * @param x The horizontal offset, in source pixels.\n                 * @param y The vertical offset, in source pixels. Default x.",
        "* Sizes and positions this Body's boundary, as a rectangle.\n                 * Modifies the Body `offset` if `center` is true (the default).\n                 * Resets the width and height to match current frame, if no width and height provided and a frame is found.\n                 * @param width The width of the Body in pixels. Cannot be zero. If not given, and the parent Game Object has a frame, it will use the frame width.\n                 * @param height The height of the Body in pixels. Cannot be zero. If not given, and the parent Game Object has a frame, it will use the frame height.\n                 * @param center Modify the Body's `offset`, placing the Body's center on its Game Object's center. Only works if the Game Object has the `getCenter` method. Default true.",
        "* Sizes and positions this Body's boundary, as a circle.\n                 * @param radius The radius of the Body, in source pixels.\n                 * @param offsetX The horizontal offset of the Body from its Game Object, in source pixels.\n                 * @param offsetY The vertical offset of the Body from its Game Object, in source pixels.",
        "* Resets this Body to the given coordinates. Also positions its parent Game Object to the same coordinates.\n                 * If the Body had any velocity or acceleration it is lost as a result of calling this.\n                 * @param x The horizontal position to place the Game Object and Body.\n                 * @param y The vertical position to place the Game Object and Body.",
        "* Sets acceleration, velocity, and speed to zero.",
        "* Copies the coordinates of this Body's edges into an object.\n                 * @param obj An object to copy the values into.",
        "* Tests if the coordinates are within this Body's boundary.\n                 * @param x The horizontal coordinate.\n                 * @param y The vertical coordinate.",
        "* Whether this Body is touching a tile or the world boundary while moving down.",
        "* Whether this Body is touching a tile or the world boundary while moving up.",
        "* Whether this Body is touching a tile or the world boundary while moving left or right.",
        "* The absolute (non-negative) change in this Body's horizontal position from the previous step.",
        "* The absolute (non-negative) change in this Body's vertical position from the previous step.",
        "* The change in this Body's horizontal position from the previous step.\n                 * This value is set during the Body's update phase.",
        "* The change in this Body's vertical position from the previous step.\n                 * This value is set during the Body's update phase.",
        "* The change in this Body's rotation from the previous step, in degrees.",
        "* Disables this Body and marks it for deletion by the simulation.",
        "* Draws this Body's boundary and velocity, if enabled.\n                 * @param graphic The Graphics object to draw on.",
        "* Whether this Body will be drawn to the debug display.",
        "* Sets whether this Body collides with the world boundary.\n                 * @param value True (collisions) or false (no collisions). Default true.",
        "* Sets the Body's velocity.\n                 * @param x The horizontal velocity, in pixels per second.\n                 * @param y The vertical velocity, in pixels per second. Default x.",
        "* Sets the Body's horizontal velocity.\n                 * @param value The velocity, in pixels per second.",
        "* Sets the Body's vertical velocity.\n                 * @param value The velocity, in pixels per second.",
        "* Sets the Body's maximum velocity.\n                 * @param x The horizontal velocity, in pixels per second.\n                 * @param y The vertical velocity, in pixels per second. Default x.",
        "* Sets the maximum speed the Body can move.\n                 * @param value The maximum speed value, in pixels per second. Set to a negative value to disable.",
        "* Sets the Body's bounce.\n                 * @param x The horizontal bounce, relative to 1.\n                 * @param y The vertical bounce, relative to 1.",
        "* Sets the Body's horizontal bounce.\n                 * @param value The bounce, relative to 1.",
        "* Sets the Body's vertical bounce.\n                 * @param value The bounce, relative to 1.",
        "* Sets the Body's acceleration.\n                 * @param x The horizontal component, in pixels per second squared.\n                 * @param y The vertical component, in pixels per second squared.",
        "* Sets the Body's horizontal acceleration.\n                 * @param value The acceleration, in pixels per second squared.",
        "* Sets the Body's vertical acceleration.\n                 * @param value The acceleration, in pixels per second squared.",
        "* Enables or disables drag.\n                 * @param value `true` to allow drag on this body, or `false` to disable it. Default true.",
        "* Enables or disables gravity's effect on this Body.\n                 * @param value `true` to allow gravity on this body, or `false` to disable it. Default true.",
        "* Enables or disables rotation.\n                 * @param value `true` to allow rotation on this body, or `false` to disable it. Default true.",
        "* Sets the Body's drag.\n                 * @param x The horizontal component, in pixels per second squared.\n                 * @param y The vertical component, in pixels per second squared.",
        "* Sets the Body's horizontal drag.\n                 * @param value The drag, in pixels per second squared.",
        "* Sets the Body's vertical drag.\n                 * @param value The drag, in pixels per second squared.",
        "* Sets the Body's gravity.\n                 * @param x The horizontal component, in pixels per second squared.\n                 * @param y The vertical component, in pixels per second squared.",
        "* Sets the Body's horizontal gravity.\n                 * @param value The gravity, in pixels per second squared.",
        "* Sets the Body's vertical gravity.\n                 * @param value The gravity, in pixels per second squared.",
        "* Sets the Body's friction.\n                 * @param x The horizontal component, relative to 1.\n                 * @param y The vertical component, relative to 1.",
        "* Sets the Body's horizontal friction.\n                 * @param value The friction value, relative to 1.",
        "* Sets the Body's vertical friction.\n                 * @param value The friction value, relative to 1.",
        "* Sets the Body's angular velocity.\n                 * @param value The velocity, in degrees per second.",
        "* Sets the Body's angular acceleration.\n                 * @param value The acceleration, in degrees per second squared.",
        "* Sets the Body's angular drag.\n                 * @param value The drag, in degrees per second squared.",
        "* Sets the Body's mass.\n                 * @param value The mass value, relative to 1.",
        "* Sets the Body's `immovable` property.\n                 * @param value The value to assign to `immovable`. Default true.",
        "* Sets the Body's `enable` property.\n                 * @param value The value to assign to `enable`. Default true.",
        "* The Body's horizontal position (left edge).",
        "* The Body's vertical position (top edge).",
        "* The left edge of the Body's boundary. Identical to x.",
        "* The right edge of the Body's boundary.",
        "* The top edge of the Body's boundary. Identical to y.",
        "* The bottom edge of this Body's boundary.",
        "* An Arcade Physics Collider will automatically check for collision, or overlaps, between two objects\n             * every step. If a collision, or overlap, occurs it will invoke the given callbacks.",
        "* \n                 * @param world The Arcade physics World that will manage the collisions.\n                 * @param overlapOnly Whether to check for collisions or overlap.\n                 * @param object1 The first object to check for collision.\n                 * @param object2 The second object to check for collision.\n                 * @param collideCallback The callback to invoke when the two objects collide.\n                 * @param processCallback The callback to invoke when the two objects collide. Must return a boolean.\n                 * @param callbackContext The scope in which to call the callbacks.",
        "* The world in which the bodies will collide.",
        "* The name of the collider (unused by Phaser).",
        "* Whether the collider is active.",
        "* Whether to check for collisions or overlaps.",
        "* The first object to check for collision.",
        "* The second object to check for collision.",
        "* The callback to invoke when the two objects collide.",
        "* If a processCallback exists it must return true or collision checking will be skipped.",
        "* The context the collideCallback and processCallback will run in.",
        "* A name for the Collider.\n                 * \n                 * Phaser does not use this value, it's for your own reference.\n                 * @param name The name to assign to the Collider.",
        "* Called by World as part of its step processing, initial operation of collision checking.",
        "* Removes Collider from World and disposes of its resources.",
        "* Provides methods used for setting the acceleration properties of an Arcade Physics Body.",
        "* Sets the body's horizontal and vertical acceleration. If the vertical acceleration value is not provided, the vertical acceleration is set to the same value as the horizontal acceleration.\n                     * @param x The horizontal acceleration\n                     * @param y The vertical acceleration Default x.",
        "* Sets the body's horizontal acceleration.\n                     * @param value The horizontal acceleration",
        "* Sets the body's vertical acceleration.\n                     * @param value The vertical acceleration",
        "* Provides methods used for setting the angular acceleration properties of an Arcade Physics Body.",
        "* Sets the angular velocity of the body.\n                     * \n                     * In Arcade Physics, bodies cannot rotate. They are always axis-aligned.\n                     * However, they can have angular motion, which is passed on to the Game Object bound to the body,\n                     * causing them to visually rotate, even though the body remains axis-aligned.\n                     * @param value The amount of angular velocity.",
        "* Sets the angular acceleration of the body.\n                     * \n                     * In Arcade Physics, bodies cannot rotate. They are always axis-aligned.\n                     * However, they can have angular motion, which is passed on to the Game Object bound to the body,\n                     * causing them to visually rotate, even though the body remains axis-aligned.\n                     * @param value The amount of angular acceleration.",
        "* Sets the angular drag of the body. Drag is applied to the current velocity, providing a form of deceleration.\n                     * @param value The amount of drag.",
        "* Provides methods used for setting the bounce properties of an Arcade Physics Body.",
        "* Sets the bounce values of this body.\n                     * \n                     * Bounce is the amount of restitution, or elasticity, the body has when it collides with another object.\n                     * A value of 1 means that it will retain its full velocity after the rebound. A value of 0 means it will not rebound at all.\n                     * @param x The amount of horizontal bounce to apply on collision. A float, typically between 0 and 1.\n                     * @param y The amount of vertical bounce to apply on collision. A float, typically between 0 and 1. Default x.",
        "* Sets the horizontal bounce value for this body.\n                     * @param value The amount of horizontal bounce to apply on collision. A float, typically between 0 and 1.",
        "* Sets the vertical bounce value for this body.\n                     * @param value The amount of vertical bounce to apply on collision. A float, typically between 0 and 1.",
        "* Sets if this body should collide with the world bounds or not.\n                     * @param value `true` if this body should collide with the world bounds, otherwise `false`.",
        "* Provides methods used for setting the debug properties of an Arcade Physics Body.",
        "* Sets the debug values of this body.\n                     * \n                     * Bodies will only draw their debug if debug has been enabled for Arcade Physics as a whole.\n                     * Note that there is a performance cost in drawing debug displays. It should never be used in production.\n                     * @param showBody Set to `true` to have this body render its outline to the debug display.\n                     * @param showVelocity Set to `true` to have this body render a velocity marker to the debug display.\n                     * @param bodyColor The color of the body outline when rendered to the debug display.",
        "* Sets the color of the body outline when it renders to the debug display.\n                     * @param value The color of the body outline when rendered to the debug display.",
        "* Set to `true` to have this body render its outline to the debug display.",
        "* Set to `true` to have this body render a velocity marker to the debug display.",
        "* The color of the body outline when it renders to the debug display.",
        "* Provides methods used for setting the drag properties of an Arcade Physics Body.",
        "* Sets the body's horizontal and vertical drag. If the vertical drag value is not provided, the vertical drag is set to the same value as the horizontal drag.\n                     * \n                     * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\n                     * It is the absolute loss of velocity due to movement, in pixels per second squared.\n                     * The x and y components are applied separately.\n                     * \n                     * When `useDamping` is true, this is 1 minus the damping factor.\n                     * A value of 1 means the Body loses no velocity.\n                     * A value of 0.95 means the Body loses 5% of its velocity per step.\n                     * A value of 0.5 means the Body loses 50% of its velocity per step.\n                     * \n                     * Drag is applied only when `acceleration` is zero.\n                     * @param x The amount of horizontal drag to apply.\n                     * @param y The amount of vertical drag to apply. Default x.",
        "* Sets the body's horizontal drag.\n                     * \n                     * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\n                     * It is the absolute loss of velocity due to movement, in pixels per second squared.\n                     * The x and y components are applied separately.\n                     * \n                     * When `useDamping` is true, this is 1 minus the damping factor.\n                     * A value of 1 means the Body loses no velocity.\n                     * A value of 0.95 means the Body loses 5% of its velocity per step.\n                     * A value of 0.5 means the Body loses 50% of its velocity per step.\n                     * \n                     * Drag is applied only when `acceleration` is zero.\n                     * @param value The amount of horizontal drag to apply.",
        "* Sets the body's vertical drag.\n                     * \n                     * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\n                     * It is the absolute loss of velocity due to movement, in pixels per second squared.\n                     * The x and y components are applied separately.\n                     * \n                     * When `useDamping` is true, this is 1 minus the damping factor.\n                     * A value of 1 means the Body loses no velocity.\n                     * A value of 0.95 means the Body loses 5% of its velocity per step.\n                     * A value of 0.5 means the Body loses 50% of its velocity per step.\n                     * \n                     * Drag is applied only when `acceleration` is zero.\n                     * @param value The amount of vertical drag to apply.",
        "* If this Body is using `drag` for deceleration this function controls how the drag is applied.\n                     * If set to `true` drag will use a damping effect rather than a linear approach. If you are\n                     * creating a game where the Body moves freely at any angle (i.e. like the way the ship moves in\n                     * the game Asteroids) then you will get a far smoother and more visually correct deceleration\n                     * by using damping, avoiding the axis-drift that is prone with linear deceleration.\n                     * \n                     * If you enable this property then you should use far smaller `drag` values than with linear, as\n                     * they are used as a multiplier on the velocity. Values such as 0.95 will give a nice slow\n                     * deceleration, where-as smaller values, such as 0.5 will stop an object almost immediately.\n                     * @param value `true` to use damping for deceleration, or `false` to use linear deceleration.",
        "* Provides methods used for setting the enable properties of an Arcade Physics Body.",
        "* Enables this Game Object's Body.\n                     * @param reset Also reset the Body and place it at (x, y).\n                     * @param x The horizontal position to place the Game Object and Body.\n                     * @param y The horizontal position to place the Game Object and Body.\n                     * @param enableGameObject Also activate this Game Object.\n                     * @param showGameObject Also show this Game Object.",
        "* Stops and disables this Game Object's Body.\n                     * @param disableGameObject Also deactivate this Game Object. Default false.\n                     * @param hideGameObject Also hide this Game Object. Default false.",
        "* Syncs the Body's position and size with its parent Game Object.\n                     * You don't need to call this for Dynamic Bodies, as it happens automatically.\n                     * But for Static bodies it's a useful way of modifying the position of a Static Body\n                     * in the Physics World, based on its Game Object.",
        "* Sets the friction (e.g. the amount of velocity reduced over time) of the physics body when moving horizontally in the X axis. The higher than friction, the faster the body will slow down once force stops being applied to it.",
        "* Sets the friction (e.g. the amount of velocity reduced over time) of the physics body when moving.\n                     * The higher than friction, the faster the body will slow down once force stops being applied to it.\n                     * @param x The amount of horizontal friction to apply.\n                     * @param y The amount of vertical friction to apply. Default x.",
        "* Sets the friction (e.g. the amount of velocity reduced over time) of the physics body when moving horizontally in the X axis.\n                     * The higher than friction, the faster the body will slow down once force stops being applied to it.\n                     * @param x The amount of friction to apply.",
        "* Sets the friction (e.g. the amount of velocity reduced over time) of the physics body when moving vertically in the Y axis.\n                     * The higher than friction, the faster the body will slow down once force stops being applied to it.\n                     * @param x The amount of friction to apply.",
        "* Provides methods for setting the gravity properties of an Arcade Physics Game Object.\n                 * Should be applied as a mixin and not used directly.",
        "* Set the X and Y values of the gravitational pull to act upon this Arcade Physics Game Object. Values can be positive or negative. Larger values result in a stronger effect.\n                     * \n                     * If only one value is provided, this value will be used for both the X and Y axis.\n                     * @param x The gravitational force to be applied to the X-axis.\n                     * @param y The gravitational force to be applied to the Y-axis. If this is not specified, the X value will be used. Default x.",
        "* Set the gravitational force to be applied to the X axis. Value can be positive or negative. Larger values result in a stronger effect.\n                     * @param x The gravitational force to be applied to the X-axis.",
        "* Set the gravitational force to be applied to the Y axis. Value can be positive or negative. Larger values result in a stronger effect.\n                     * @param y The gravitational force to be applied to the Y-axis.",
        "* Provides methods used for setting the immovable properties of an Arcade Physics Body.",
        "* Sets Whether this Body can be moved by collisions with another Body.\n                     * @param value Sets if this body can be moved by collisions with another Body. Default true.",
        "* Provides methods used for setting the mass properties of an Arcade Physics Body.",
        "* Sets the mass of the physics body\n                     * @param value New value for the mass of the body.",
        "* Provides methods for setting the size of an Arcade Physics Game Object.\n                 * Should be applied as a mixin and not used directly.",
        "* Sets the body offset. This allows you to adjust the difference between the center of the body\n                     * and the x and y coordinates of the parent Game Object.\n                     * @param x The amount to offset the body from the parent Game Object along the x-axis.\n                     * @param y The amount to offset the body from the parent Game Object along the y-axis. Defaults to the value given for the x-axis. Default x.",
        "* Sets the size of this physics body. Setting the size does not adjust the dimensions\n                     * of the parent Game Object.\n                     * @param width The new width of the physics body, in pixels.\n                     * @param height The new height of the physics body, in pixels.\n                     * @param center Should the body be re-positioned so its center aligns with the parent Game Object? Default true.",
        "* Sets this physics body to use a circle for collision instead of a rectangle.\n                     * @param radius The radius of the physics body, in pixels.\n                     * @param offsetX The amount to offset the body from the parent Game Object along the x-axis.\n                     * @param offsetY The amount to offset the body from the parent Game Object along the y-axis.",
        "* Provides methods for modifying the velocity of an Arcade Physics body.\n                 * \n                 * Should be applied as a mixin and not used directly.",
        "* Sets the velocity of the Body.\n                     * @param x The horizontal velocity of the body. Positive values move the body to the right, while negative values move it to the left.\n                     * @param y The vertical velocity of the body. Positive values move the body down, while negative values move it up. Default x.",
        "* Sets the horizontal component of the body's velocity.\n                     * \n                     * Positive values move the body to the right, while negative values move it to the left.\n                     * @param x The new horizontal velocity.",
        "* Sets the vertical component of the body's velocity.\n                     * \n                     * Positive values move the body down, while negative values move it up.\n                     * @param y The new vertical velocity of the body.",
        "* Sets the maximum velocity of the body.\n                     * @param x The new maximum horizontal velocity.\n                     * @param y The new maximum vertical velocity. Default x.",
        "* Dynamic Body.",
        "* Static Body.",
        "* Arcade Physics Group containing Dynamic Bodies.",
        "* A Tilemap Layer.",
        "* Facing no direction (initial value).",
        "* Facing up.",
        "* Facing down.",
        "* Facing left.",
        "* Facing right.",
        "* The Arcade Physics World Collide Event.\n                 * \n                 * This event is dispatched by an Arcade Physics World instance if two bodies collide _and_ at least\n                 * one of them has their [onCollide]{@link Phaser.Physics.Arcade.Body#onCollide} property set to `true`.\n                 * \n                 * It provides an alternative means to handling collide events rather than using the callback approach.\n                 * \n                 * Listen to it from a Scene using: `this.physics.world.on('collide', listener)`.\n                 * \n                 * Please note that 'collide' and 'overlap' are two different things in Arcade Physics.",
        "* The Arcade Physics World Overlap Event.\n                 * \n                 * This event is dispatched by an Arcade Physics World instance if two bodies overlap _and_ at least\n                 * one of them has their [onOverlap]{@link Phaser.Physics.Arcade.Body#onOverlap} property set to `true`.\n                 * \n                 * It provides an alternative means to handling overlap events rather than using the callback approach.\n                 * \n                 * Listen to it from a Scene using: `this.physics.world.on('overlap', listener)`.\n                 * \n                 * Please note that 'collide' and 'overlap' are two different things in Arcade Physics.",
        "* The Arcade Physics World Pause Event.\n                 * \n                 * This event is dispatched by an Arcade Physics World instance when it is paused.\n                 * \n                 * Listen to it from a Scene using: `this.physics.world.on('pause', listener)`.",
        "* The Arcade Physics World Resume Event.\n                 * \n                 * This event is dispatched by an Arcade Physics World instance when it resumes from a paused state.\n                 * \n                 * Listen to it from a Scene using: `this.physics.world.on('resume', listener)`.",
        "* The Arcade Physics Tile Collide Event.\n                 * \n                 * This event is dispatched by an Arcade Physics World instance if a body collides with a Tile _and_\n                 * has its [onCollide]{@link Phaser.Physics.Arcade.Body#onCollide} property set to `true`.\n                 * \n                 * It provides an alternative means to handling collide events rather than using the callback approach.\n                 * \n                 * Listen to it from a Scene using: `this.physics.world.on('tilecollide', listener)`.\n                 * \n                 * Please note that 'collide' and 'overlap' are two different things in Arcade Physics.",
        "* The Arcade Physics Tile Overlap Event.\n                 * \n                 * This event is dispatched by an Arcade Physics World instance if a body overlaps with a Tile _and_\n                 * has its [onOverlap]{@link Phaser.Physics.Arcade.Body#onOverlap} property set to `true`.\n                 * \n                 * It provides an alternative means to handling overlap events rather than using the callback approach.\n                 * \n                 * Listen to it from a Scene using: `this.physics.world.on('tileoverlap', listener)`.\n                 * \n                 * Please note that 'collide' and 'overlap' are two different things in Arcade Physics.",
        "* The Arcade Physics World Bounds Event.\n                 * \n                 * This event is dispatched by an Arcade Physics World instance if a body makes contact with the world bounds _and_\n                 * it has its [onWorldBounds]{@link Phaser.Physics.Arcade.Body#onWorldBounds} property set to `true`.\n                 * \n                 * It provides an alternative means to handling collide events rather than using the callback approach.\n                 * \n                 * Listen to it from a Scene using: `this.physics.world.on('worldbounds', listener)`.",
        "* The Arcade Physics Factory allows you to easily create Arcade Physics enabled Game Objects.\n             * Objects that are created by this Factory are automatically added to the physics world.",
        "* \n                 * @param world The Arcade Physics World instance.",
        "* A reference to the Arcade Physics World.",
        "* A reference to the Scene this Arcade Physics instance belongs to.",
        "* A reference to the Scene.Systems this Arcade Physics instance belongs to.",
        "* Creates a new Arcade Physics Collider object.\n                 * @param object1 The first object to check for collision.\n                 * @param object2 The second object to check for collision.\n                 * @param collideCallback The callback to invoke when the two objects collide.\n                 * @param processCallback The callback to invoke when the two objects collide. Must return a boolean.\n                 * @param callbackContext The scope in which to call the callbacks.",
        "* Creates a new Arcade Physics Collider Overlap object.\n                 * @param object1 The first object to check for overlap.\n                 * @param object2 The second object to check for overlap.\n                 * @param collideCallback The callback to invoke when the two objects collide.\n                 * @param processCallback The callback to invoke when the two objects collide. Must return a boolean.\n                 * @param callbackContext The scope in which to call the callbacks.",
        "* Adds an Arcade Physics Body to the given Game Object.\n                 * @param gameObject A Game Object.\n                 * @param isStatic Create a Static body (true) or Dynamic body (false). Default false.",
        "* Creates a new Arcade Image object with a Static body.\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Creates a new Arcade Image object with a Dynamic body.\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Creates a new Arcade Sprite object with a Static body.\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Creates a new Arcade Sprite object with a Dynamic body.\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param key The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Creates a Static Physics Group object.\n                 * All Game Objects created by this Group will automatically be static Arcade Physics objects.\n                 * @param children Game Objects to add to this group; or the `config` argument.\n                 * @param config Settings for this group.",
        "* Creates a Physics Group object.\n                 * All Game Objects created by this Group will automatically be dynamic Arcade Physics objects.\n                 * @param children Game Objects to add to this group; or the `config` argument.\n                 * @param config Settings for this group.",
        "* Destroys this Factory.",
        "* Calculates and returns the horizontal overlap between two arcade physics bodies and sets their properties\n             * accordingly, including: `touching.left`, `touching.right`, `touching.none` and `overlapX'.\n             * @param body1 The first Body to separate.\n             * @param body2 The second Body to separate.\n             * @param overlapOnly Is this an overlap only check, or part of separation?\n             * @param bias A value added to the delta values during collision checks. Increase it to prevent sprite tunneling(sprites passing through another instead of colliding).",
        "* Calculates and returns the vertical overlap between two arcade physics bodies and sets their properties\n             * accordingly, including: `touching.up`, `touching.down`, `touching.none` and `overlapY'.\n             * @param body1 The first Body to separate.\n             * @param body2 The second Body to separate.\n             * @param overlapOnly Is this an overlap only check, or part of separation?\n             * @param bias A value added to the delta values during collision checks. Increase it to prevent sprite tunneling(sprites passing through another instead of colliding).",
        "* An Arcade Physics Group object.\n             * \n             * All Game Objects created by this Group will automatically be given dynamic Arcade Physics bodies.\n             * \n             * Its static counterpart is {@link Phaser.Physics.Arcade.StaticGroup}.",
        "* \n                 * @param world The physics simulation.\n                 * @param scene The scene this group belongs to.\n                 * @param children Game Objects to add to this group; or the `config` argument.\n                 * @param config Settings for this group.",
        "* The physics simulation.",
        "* The class to create new Group members from.\n                 * \n                 * This should be either `Phaser.Physics.Arcade.Image`, `Phaser.Physics.Arcade.Sprite`, or a class extending one of those.",
        "* The physics type of the Group's members.",
        "* Default physics properties applied to Game Objects added to the Group or created by the Group. Derived from the `config` argument.",
        "* Enables a Game Object's Body and assigns `defaults`. Called when a Group member is added or created.\n                 * @param child The Game Object being added.",
        "* Disables a Game Object's Body. Called when a Group member is removed.\n                 * @param child The Game Object being removed.",
        "* Sets the velocity of each Group member.\n                 * @param x The horizontal velocity.\n                 * @param y The vertical velocity.\n                 * @param step The velocity increment. When set, the first member receives velocity (x, y), the second (x + step, y + step), and so on. Default 0.",
        "* Sets the horizontal velocity of each Group member.\n                 * @param value The velocity value.\n                 * @param step The velocity increment. When set, the first member receives velocity (x), the second (x + step), and so on. Default 0.",
        "* Sets the vertical velocity of each Group member.\n                 * @param value The velocity value.\n                 * @param step The velocity increment. When set, the first member receives velocity (y), the second (y + step), and so on. Default 0.",
        "* Separates two overlapping bodies on the X-axis (horizontally).\n             * \n             * Separation involves moving two overlapping bodies so they don't overlap anymore and adjusting their velocities based on their mass. This is a core part of collision detection.\n             * \n             * The bodies won't be separated if there is no horizontal overlap between them, if they are static, or if either one uses custom logic for its separation.\n             * @param body1 The first Body to separate.\n             * @param body2 The second Body to separate.\n             * @param overlapOnly If `true`, the bodies will only have their overlap data set and no separation will take place.\n             * @param bias A value to add to the delta value during overlap checking. Used to prevent sprite tunneling.",
        "* Separates two overlapping bodies on the Y-axis (vertically).\n             * \n             * Separation involves moving two overlapping bodies so they don't overlap anymore and adjusting their velocities based on their mass. This is a core part of collision detection.\n             * \n             * The bodies won't be separated if there is no vertical overlap between them, if they are static, or if either one uses custom logic for its separation.\n             * @param body1 The first Body to separate.\n             * @param body2 The second Body to separate.\n             * @param overlapOnly If `true`, the bodies will only have their overlap data set and no separation will take place.\n             * @param bias A value to add to the delta value during overlap checking. Used to prevent sprite tunneling.",
        "* A Static Arcade Physics Body.\n             * \n             * A Static Body never moves, and isn't automatically synchronized with its parent Game Object.\n             * That means if you make any change to the parent's origin, position, or scale after creating or adding the body, you'll need to update the Body manually.\n             * \n             * A Static Body can collide with other Bodies, but is never moved by collisions.\n             * \n             * Its dynamic counterpart is {@link Phaser.Physics.Arcade.Body}.",
        "* \n                 * @param world The Arcade Physics simulation this Static Body belongs to.\n                 * @param gameObject The Game Object this Static Body belongs to.",
        "* The Arcade Physics simulation this Static Body belongs to.",
        "* The Game Object this Static Body belongs to.",
        "* Whether the Static Body's boundary is drawn to the debug display.",
        "* The color of this Static Body on the debug display.",
        "* Whether this Static Body is updated by the physics simulation.",
        "* Whether this Static Body's boundary is circular (`true`) or rectangular (`false`).",
        "* If this Static Body is circular, this is the unscaled radius of the Static Body's boundary, as set by {@link #setCircle}, in source pixels.\n                 * The true radius is equal to `halfWidth`.",
        "* The offset of this Static Body's actual position from any updated position.\n                 * \n                 * Unlike a dynamic Body, a Static Body does not follow its Game Object. As such, this offset is only applied when resizing the Static Body.",
        "* The position of this Static Body within the simulation.",
        "* The width of the Static Body's boundary, in pixels.\n                 * If the Static Body is circular, this is also the Static Body's diameter.",
        "* The height of the Static Body's boundary, in pixels.\n                 * If the Static Body is circular, this is also the Static Body's diameter.",
        "* Half the Static Body's width, in pixels.\n                 * If the Static Body is circular, this is also the Static Body's radius.",
        "* Half the Static Body's height, in pixels.\n                 * If the Static Body is circular, this is also the Static Body's radius.",
        "* The center of the Static Body's boundary.\n                 * This is the midpoint of its `position` (top-left corner) and its bottom-right corner.",
        "* A constant zero velocity used by the Arcade Physics simulation for calculations.",
        "* A constant `false` value expected by the Arcade Physics simulation.",
        "* Gravitational force applied specifically to this Body. Values are in pixels per second squared. Always zero for a Static Body.",
        "* Rebound, or restitution, following a collision, relative to 1. Always zero for a Static Body.",
        "* Whether the simulation emits a `worldbounds` event when this StaticBody collides with the world boundary.\n                 * Always false for a Static Body. (Static Bodies never collide with the world boundary and never trigger a `worldbounds` event.)",
        "* Whether the simulation emits a `collide` event when this StaticBody collides with another.",
        "* Whether the simulation emits an `overlap` event when this StaticBody overlaps with another.",
        "* The StaticBody's inertia, relative to a default unit (1). With `bounce`, this affects the exchange of momentum (velocities) during collisions.",
        "* Whether this object can be moved by collisions with another body.",
        "* A flag disabling the default horizontal separation of colliding bodies. Pass your own `collideHandler` to the collider.",
        "* A flag disabling the default vertical separation of colliding bodies. Pass your own `collideHandler` to the collider.",
        "* The amount of horizontal overlap (before separation), if this Body is colliding with another.",
        "* The amount of vertical overlap (before separation), if this Body is colliding with another.",
        "* The amount of overlap (before separation), if this StaticBody is circular and colliding with another circular body.",
        "* Whether this StaticBody has ever overlapped with another while both were not moving.",
        "* Whether this StaticBody interacts with the world boundary.\n                 * Always false for a Static Body. (Static Bodies never collide with the world boundary.)",
        "* Whether this StaticBody is checked for collisions and for which directions. You can set `checkCollision.none = false` to disable collision checks.",
        "* Whether this StaticBody has ever collided with another body and in which direction.",
        "* Whether this StaticBody was colliding with another body during the last step or any previous step, and in which direction.",
        "* Whether this StaticBody has ever collided with a tile or the world boundary.",
        "* The StaticBody's physics type (static by default).",
        "* Changes the Game Object this Body is bound to.\n                 * First it removes its reference from the old Game Object, then sets the new one.\n                 * You can optionally update the position and dimensions of this Body to reflect that of the new Game Object.\n                 * @param gameObject The new Game Object that will own this Body.\n                 * @param update Reposition and resize this Body to match the new Game Object? Default true.",
        "* Updates this Static Body so that its position and dimensions are updated\n                 * based on the current Game Object it is bound to.",
        "* Sets the offset of the body.\n                 * @param x The horizontal offset of the Body from the Game Object's center.\n                 * @param y The vertical offset of the Body from the Game Object's center.",
        "* Sets the size of the body.\n                 * Resets the width and height to match current frame, if no width and height provided and a frame is found.\n                 * @param width The width of the Body in pixels. Cannot be zero. If not given, and the parent Game Object has a frame, it will use the frame width.\n                 * @param height The height of the Body in pixels. Cannot be zero. If not given, and the parent Game Object has a frame, it will use the frame height.\n                 * @param offsetX The horizontal offset of the Body from the Game Object's center.\n                 * @param offsetY The vertical offset of the Body from the Game Object's center.",
        "* Sets this Static Body to have a circular body and sets its sizes and position.\n                 * @param radius The radius of the StaticBody, in pixels.\n                 * @param offsetX The horizontal offset of the StaticBody from its Game Object, in pixels.\n                 * @param offsetY The vertical offset of the StaticBody from its Game Object, in pixels.",
        "* Updates the StaticBody's `center` from its `position` and dimensions.",
        "* Resets this Body to the given coordinates. Also positions its parent Game Object to the same coordinates.\n                 * Similar to `updateFromGameObject`, but doesn't modify the Body's dimensions.\n                 * @param x The x coordinate to reset the body to. If not given will use the parent Game Object's coordinate.\n                 * @param y The y coordinate to reset the body to. If not given will use the parent Game Object's coordinate.",
        "* NOOP function. A Static Body cannot be stopped.",
        "* Returns the x and y coordinates of the top left and bottom right points of the StaticBody.\n                 * @param obj The object which will hold the coordinates of the bounds.",
        "* Checks to see if a given x,y coordinate is colliding with this Static Body.\n                 * @param x The x coordinate to check against this body.\n                 * @param y The y coordinate to check against this body.",
        "* NOOP",
        "* The absolute (non-negative) change in this StaticBody's horizontal position from the previous step. Always zero.",
        "* The absolute (non-negative) change in this StaticBody's vertical position from the previous step. Always zero.",
        "* The change in this StaticBody's horizontal position from the previous step. Always zero.",
        "* The change in this StaticBody's vertical position from the previous step. Always zero.",
        "* The change in this StaticBody's rotation from the previous step. Always zero.",
        "* Disables this Body and marks it for destruction during the next step.",
        "* Draws a graphical representation of the StaticBody for visual debugging purposes.\n                 * @param graphic The Graphics object to use for the debug drawing of the StaticBody.",
        "* Indicates whether the StaticBody is going to be showing a debug visualization during postUpdate.",
        "* Sets the Mass of the StaticBody. Will set the Mass to 0.1 if the value passed is less than or equal to zero.\n                 * @param value The value to set the Mass to. Values of zero or less are changed to 0.1.",
        "* The x coordinate of the StaticBody.",
        "* The y coordinate of the StaticBody.",
        "* Returns the left-most x coordinate of the area of the StaticBody.",
        "* The right-most x coordinate of the area of the StaticBody.",
        "* The highest y coordinate of the area of the StaticBody.",
        "* The lowest y coordinate of the area of the StaticBody. (y + height)",
        "* An Arcade Physics Static Group object.\n             * \n             * All Game Objects created by this Group will automatically be given static Arcade Physics bodies.\n             * \n             * Its dynamic counterpart is {@link Phaser.Physics.Arcade.Group}.",
        "* \n                 * @param world The physics simulation.\n                 * @param scene The scene this group belongs to.\n                 * @param children Game Objects to add to this group; or the `config` argument.\n                 * @param config Settings for this group.",
        "* The physics simulation.",
        "* The scene this group belongs to.",
        "* Adds a static physics body to the new group member (if it lacks one) and adds it to the simulation.\n                 * @param child The new group member.",
        "* Disables the group member's physics body, removing it from the simulation.\n                 * @param child The group member being removed.",
        "* Refreshes the group.\n                 * @param entries The newly created group members.",
        "* Resets each Body to the position of its parent Game Object.\n                 * Body sizes aren't changed (use {@link Phaser.Physics.Arcade.Components.Enable#refreshBody} for that).",
        "* A function to process the collision callbacks between a single tile and an Arcade Physics enabled Game Object.\n                 * @param tile The Tile to process.\n                 * @param sprite The Game Object to process with the Tile.",
        "* Internal function to process the separation of a physics body from a tile.\n                 * @param body The Body object to separate.\n                 * @param x The x separation amount.",
        "* Internal function to process the separation of a physics body from a tile.\n                 * @param body The Body object to separate.\n                 * @param y The y separation amount.",
        "* The core separation function to separate a physics body and a tile.\n                 * @param i The index of the tile within the map data.\n                 * @param body The Body object to separate.\n                 * @param tile The tile to collide against.\n                 * @param tileWorldRect A rectangle-like object defining the dimensions of the tile.\n                 * @param tilemapLayer The tilemapLayer to collide against.\n                 * @param tileBias The tile bias value. Populated by the `World.TILE_BIAS` constant.",
        "* Check the body against the given tile on the X axis.\n                 * Used internally by the SeparateTile function.\n                 * @param body The Body object to separate.\n                 * @param tile The tile to check.\n                 * @param tileLeft The left position of the tile within the tile world.\n                 * @param tileRight The right position of the tile within the tile world.\n                 * @param tileBias The tile bias value. Populated by the `World.TILE_BIAS` constant.",
        "* Check the body against the given tile on the Y axis.\n                 * Used internally by the SeparateTile function.\n                 * @param body The Body object to separate.\n                 * @param tile The tile to check.\n                 * @param tileTop The top position of the tile within the tile world.\n                 * @param tileBottom The bottom position of the tile within the tile world.\n                 * @param tileBias The tile bias value. Populated by the `World.TILE_BIAS` constant.",
        "* Checks for intersection between the given tile rectangle-like object and an Arcade Physics body.\n                 * @param tileWorldRect A rectangle object that defines the tile placement in the world.\n                 * @param body The body to check for intersection against.",
        "* The Arcade Physics World.\n             * \n             * The World is responsible for creating, managing, colliding and updating all of the bodies within it.\n             * \n             * An instance of the World belongs to a Phaser.Scene and is accessed via the property `physics.world`.",
        "* \n                 * @param scene The Scene to which this World instance belongs.\n                 * @param config An Arcade Physics Configuration object.",
        "* The Scene this simulation belongs to.",
        "* Dynamic Bodies in this simulation.",
        "* Static Bodies in this simulation.",
        "* Static Bodies marked for deletion.",
        "* This simulation's collision processors.",
        "* Acceleration of Bodies due to gravity, in pixels per second.",
        "* A boundary constraining Bodies.",
        "* The boundary edges that Bodies can collide with.",
        "* The number of physics steps to be taken per second.\n                 * \n                 * This property is read-only. Use the `setFPS` method to modify it at run-time.",
        "* The number of steps that took place in the last frame.",
        "* Scaling factor applied to the frame rate.\n                 * \n                 * - 1.0 = normal speed\n                 * - 2.0 = half speed\n                 * - 0.5 = double speed",
        "* The maximum absolute difference of a Body's per-step velocity and its overlap with another Body that will result in separation on *each axis*.\n                 * Larger values favor separation.\n                 * Smaller values favor no separation.",
        "* The maximum absolute value of a Body's overlap with a tile that will result in separation on *each axis*.\n                 * Larger values favor separation.\n                 * Smaller values favor no separation.\n                 * The optimum value may be similar to the tile size.",
        "* Always separate overlapping Bodies horizontally before vertically.\n                 * False (the default) means Bodies are first separated on the axis of greater gravity, or the vertical axis if neither is greater.",
        "* Whether the simulation advances with the game loop.",
        "* Enables the debug display.",
        "* The graphics object drawing the debug display.",
        "* Default debug display settings for new Bodies.",
        "* The maximum number of items per node on the RTree.\n                 * \n                 * This is ignored if `useTree` is `false`. If you have a large number of bodies in\n                 * your world then you may find search performance improves by increasing this value,\n                 * to allow more items per node and less node division.",
        "* Should this Arcade Physics World use an RTree for Dynamic Physics bodies or not?\n                 * \n                 * An RTree is a fast way of spatially sorting of all the moving bodies in the world.\n                 * However, at certain limits, the cost of clearing and inserting the bodies into the\n                 * tree every frame becomes more expensive than the search speed gains it provides.\n                 * \n                 * If you have a large number of dynamic bodies in your world then it may be best to\n                 * disable the use of the RTree by setting this property to `true`.\n                 * The number it can cope with depends on browser and device, but a conservative estimate\n                 * of around 5,000 bodies should be considered the max before disabling it.\n                 * \n                 * Note this only applies to dynamic bodies. Static bodies are always kept in an RTree,\n                 * because they don't have to be cleared every frame, so you benefit from the\n                 * massive search speeds all the time.",
        "* The spatial index of Dynamic Bodies.",
        "* The spatial index of Static Bodies.",
        "* Recycled input for tree searches.",
        "* Adds an Arcade Physics Body to a Game Object, an array of Game Objects, or the children of a Group.\n                 * \n                 * The difference between this and the `enableBody` method is that you can pass arrays or Groups\n                 * to this method.\n                 * \n                 * You can specify if the bodies are to be Dynamic or Static. A dynamic body can move via velocity and\n                 * acceleration. A static body remains fixed in place and as such is able to use an optimized search\n                 * tree, making it ideal for static elements such as level objects. You can still collide and overlap\n                 * with static bodies.\n                 * \n                 * Normally, rather than calling this method directly, you'd use the helper methods available in the\n                 * Arcade Physics Factory, such as:\n                 * \n                 * ```javascript\n                 * this.physics.add.image(x, y, textureKey);\n                 * this.physics.add.sprite(x, y, textureKey);\n                 * ```\n                 * \n                 * Calling factory methods encapsulates the creation of a Game Object and the creation of its\n                 * body at the same time. If you are creating custom classes then you can pass them to this\n                 * method to have their bodies created.\n                 * @param object The object, or objects, on which to create the bodies.\n                 * @param bodyType The type of Body to create. Either `DYNAMIC_BODY` or `STATIC_BODY`.",
        "* Creates an Arcade Physics Body on a single Game Object.\n                 * \n                 * If the Game Object already has a body, this method will simply add it back into the simulation.\n                 * \n                 * You can specify if the body is Dynamic or Static. A dynamic body can move via velocity and\n                 * acceleration. A static body remains fixed in place and as such is able to use an optimized search\n                 * tree, making it ideal for static elements such as level objects. You can still collide and overlap\n                 * with static bodies.\n                 * \n                 * Normally, rather than calling this method directly, you'd use the helper methods available in the\n                 * Arcade Physics Factory, such as:\n                 * \n                 * ```javascript\n                 * this.physics.add.image(x, y, textureKey);\n                 * this.physics.add.sprite(x, y, textureKey);\n                 * ```\n                 * \n                 * Calling factory methods encapsulates the creation of a Game Object and the creation of its\n                 * body at the same time. If you are creating custom classes then you can pass them to this\n                 * method to have their bodies created.\n                 * @param object The Game Object on which to create the body.\n                 * @param bodyType The type of Body to create. Either `DYNAMIC_BODY` or `STATIC_BODY`.",
        "* Adds an existing Arcade Physics Body or StaticBody to the simulation.\n                 * \n                 * The body is enabled and added to the local search trees.\n                 * @param body The Body to be added to the simulation.",
        "* Disables the Arcade Physics Body of a Game Object, an array of Game Objects, or the children of a Group.\n                 * \n                 * The difference between this and the `disableBody` method is that you can pass arrays or Groups\n                 * to this method.\n                 * \n                 * The body itself is not deleted, it just has its `enable` property set to false, which\n                 * means you can re-enable it again at any point by passing it to enable `World.enable` or `World.add`.\n                 * @param object The object, or objects, on which to disable the bodies.",
        "* Disables an existing Arcade Physics Body or StaticBody and removes it from the simulation.\n                 * \n                 * The body is disabled and removed from the local search trees.\n                 * \n                 * The body itself is not deleted, it just has its `enable` property set to false, which\n                 * means you can re-enable it again at any point by passing it to enable `World.enable` or `World.add`.\n                 * @param body The Body to be disabled.",
        "* Removes an existing Arcade Physics Body or StaticBody from the simulation.\n                 * \n                 * The body is disabled and removed from the local search trees.\n                 * \n                 * The body itself is not deleted, it just has its `enabled` property set to false, which\n                 * means you can re-enable it again at any point by passing it to enable `enable` or `add`.\n                 * @param body The body to be removed from the simulation.",
        "* Creates a Graphics Game Object that the world will use to render the debug display to.\n                 * \n                 * This is called automatically when the World is instantiated if the `debug` config property\n                 * was set to `true`. However, you can call it at any point should you need to display the\n                 * debug Graphic from a fixed point.\n                 * \n                 * You can control which objects are drawn to the Graphics object, and the colors they use,\n                 * by setting the debug properties in the physics config.\n                 * \n                 * You should not typically use this in a production game. Use it to aid during debugging.",
        "* Sets the position, size and properties of the World boundary.\n                 * \n                 * The World boundary is an invisible rectangle that defines the edges of the World.\n                 * If a Body is set to collide with the world bounds then it will automatically stop\n                 * when it reaches any of the edges. You can optionally set which edges of the boundary\n                 * should be checked against.\n                 * @param x The top-left x coordinate of the boundary.\n                 * @param y The top-left y coordinate of the boundary.\n                 * @param width The width of the boundary.\n                 * @param height The height of the boundary.\n                 * @param checkLeft Should bodies check against the left edge of the boundary?\n                 * @param checkRight Should bodies check against the right edge of the boundary?\n                 * @param checkUp Should bodies check against the top edge of the boundary?\n                 * @param checkDown Should bodies check against the bottom edge of the boundary?",
        "* Enables or disables collisions on each edge of the World boundary.\n                 * @param left Should bodies check against the left edge of the boundary? Default true.\n                 * @param right Should bodies check against the right edge of the boundary? Default true.\n                 * @param up Should bodies check against the top edge of the boundary? Default true.\n                 * @param down Should bodies check against the bottom edge of the boundary? Default true.",
        "* Pauses the simulation.\n                 * \n                 * A paused simulation does not update any existing bodies, or run any Colliders.\n                 * \n                 * However, you can still enable and disable bodies within it, or manually run collide or overlap\n                 * checks.",
        "* Resumes the simulation, if paused.",
        "* Creates a new Collider object and adds it to the simulation.\n                 * \n                 * A Collider is a way to automatically perform collision checks between two objects,\n                 * calling the collide and process callbacks if they occur.\n                 * \n                 * Colliders are run as part of the World update, after all of the Bodies have updated.\n                 * \n                 * By creating a Collider you don't need then call `World.collide` in your `update` loop,\n                 * as it will be handled for you automatically.\n                 * @param object1 The first object to check for collision.\n                 * @param object2 The second object to check for collision.\n                 * @param collideCallback The callback to invoke when the two objects collide.\n                 * @param processCallback The callback to invoke when the two objects collide. Must return a boolean.\n                 * @param callbackContext The scope in which to call the callbacks.",
        "* Creates a new Overlap Collider object and adds it to the simulation.\n                 * \n                 * A Collider is a way to automatically perform overlap checks between two objects,\n                 * calling the collide and process callbacks if they occur.\n                 * \n                 * Colliders are run as part of the World update, after all of the Bodies have updated.\n                 * \n                 * By creating a Collider you don't need then call `World.overlap` in your `update` loop,\n                 * as it will be handled for you automatically.\n                 * @param object1 The first object to check for overlap.\n                 * @param object2 The second object to check for overlap.\n                 * @param collideCallback The callback to invoke when the two objects overlap.\n                 * @param processCallback The callback to invoke when the two objects overlap. Must return a boolean.\n                 * @param callbackContext The scope in which to call the callbacks.",
        "* Removes a Collider from the simulation so it is no longer processed.\n                 * \n                 * This method does not destroy the Collider. If you wish to add it back at a later stage you can call\n                 * `World.colliders.add(Collider)`.\n                 * \n                 * If you no longer need the Collider you can call the `Collider.destroy` method instead, which will\n                 * automatically clear all of its references and then remove it from the World. If you call destroy on\n                 * a Collider you _don't_ need to pass it to this method too.\n                 * @param collider The Collider to remove from the simulation.",
        "* Sets the frame rate to run the simulation at.\n                 * \n                 * The frame rate value is used to simulate a fixed update time step. This fixed\n                 * time step allows for a straightforward implementation of a deterministic game state.\n                 * \n                 * This frame rate is independent of the frequency at which the game is rendering. The\n                 * higher you set the fps, the more physics simulation steps will occur per game step.\n                 * Conversely, the lower you set it, the less will take place.\n                 * \n                 * You can optionally advance the simulation directly yourself by calling the `step` method.\n                 * @param framerate The frame rate to advance the simulation at.",
        "* Advances the simulation based on the elapsed time and fps rate.\n                 * \n                 * This is called automatically by your Scene and does not need to be invoked directly.\n                 * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n                 * @param delta The delta time, in ms, elapsed since the last frame.",
        "* Advances the simulation by a time increment.\n                 * @param delta The delta time amount, in seconds, by which to advance the simulation.",
        "* Updates bodies, draws the debug display, and handles pending queue operations.",
        "* Calculates a Body's velocity and updates its position.\n                 * @param body The Body to be updated.\n                 * @param delta The delta value to be used in the motion calculations, in seconds.",
        "* Calculates a Body's angular velocity.\n                 * @param body The Body to compute the velocity for.\n                 * @param delta The delta value to be used in the calculation, in seconds.",
        "* Calculates a Body's per-axis velocity.\n                 * @param body The Body to compute the velocity for.\n                 * @param delta The delta value to be used in the calculation, in seconds.",
        "* Separates two Bodies.\n                 * @param body1 The first Body to be separated.\n                 * @param body2 The second Body to be separated.\n                 * @param processCallback The process callback.\n                 * @param callbackContext The context in which to invoke the callback.\n                 * @param overlapOnly If this a collide or overlap check?",
        "* Separates two Bodies, when both are circular.\n                 * @param body1 The first Body to be separated.\n                 * @param body2 The second Body to be separated.\n                 * @param overlapOnly If this a collide or overlap check?\n                 * @param bias A small value added to the calculations.",
        "* Checks to see if two Bodies intersect at all.\n                 * @param body1 The first body to check.\n                 * @param body2 The second body to check.",
        "* Tests if a circular Body intersects with another Body.\n                 * @param circle The circular body to test.\n                 * @param body The rectangular body to test.",
        "* Tests if Game Objects overlap.\n                 * @param object1 The first object or array of objects to check.\n                 * @param object2 The second object or array of objects to check, or `undefined`.\n                 * @param overlapCallback An optional callback function that is called if the objects overlap.\n                 * @param processCallback An optional callback function that lets you perform additional checks against the two objects if they overlap. If this is set then `overlapCallback` will only be called if this callback returns `true`.\n                 * @param callbackContext The context in which to run the callbacks.",
        "* Performs a collision check and separation between the two physics enabled objects given, which can be single\n                 * Game Objects, arrays of Game Objects, Physics Groups, arrays of Physics Groups or normal Groups.\n                 * \n                 * If you don't require separation then use {@link #overlap} instead.\n                 * \n                 * If two Groups or arrays are passed, each member of one will be tested against each member of the other.\n                 * \n                 * If one Group **only** is passed (as `object1`), each member of the Group will be collided against the other members.\n                 * \n                 * Two callbacks can be provided. The `collideCallback` is invoked if a collision occurs and the two colliding\n                 * objects are passed to it.\n                 * \n                 * Arcade Physics uses the Projection Method of collision resolution and separation. While it's fast and suitable\n                 * for 'arcade' style games it lacks stability when multiple objects are in close proximity or resting upon each other.\n                 * The separation that stops two objects penetrating may create a new penetration against a different object. If you\n                 * require a high level of stability please consider using an alternative physics system, such as Matter.js.\n                 * @param object1 The first object or array of objects to check.\n                 * @param object2 The second object or array of objects to check, or `undefined`.\n                 * @param collideCallback An optional callback function that is called if the objects collide.\n                 * @param processCallback An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\n                 * @param callbackContext The context in which to run the callbacks.",
        "* Internal handler for Sprite vs. Tilemap collisions.\n                 * Please use Phaser.Physics.Arcade.World#collide instead.\n                 * @param sprite The first object to check for collision.\n                 * @param tilemapLayer The second object to check for collision.\n                 * @param collideCallback An optional callback function that is called if the objects collide.\n                 * @param processCallback An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\n                 * @param callbackContext The context in which to run the callbacks.\n                 * @param overlapOnly Whether this is a collision or overlap check.",
        "* Wrap an object's coordinates (or several objects' coordinates) within {@link Phaser.Physics.Arcade.World#bounds}.\n                 * \n                 * If the object is outside any boundary edge (left, top, right, bottom), it will be moved to the same offset from the opposite edge (the interior).\n                 * @param object A Game Object, a Group, an object with `x` and `y` coordinates, or an array of such objects.\n                 * @param padding An amount added to each boundary edge during the operation. Default 0.",
        "* Wrap each object's coordinates within {@link Phaser.Physics.Arcade.World#bounds}.\n                 * @param objects An array of objects to be wrapped.\n                 * @param padding An amount added to the boundary. Default 0.",
        "* Wrap an object's coordinates within {@link Phaser.Physics.Arcade.World#bounds}.\n                 * @param object A Game Object, a Physics Body, or any object with `x` and `y` coordinates\n                 * @param padding An amount added to the boundary. Default 0.",
        "* Shuts down the simulation, clearing physics data and removing listeners.",
        "* Shuts down the simulation and disconnects it from the current scene.",
        "* An Impact.js compatible physics world, body and solver, for those who are used\n         * to the Impact way of defining and controlling physics bodies. Also works with\n         * the new Loader support for Weltmeister map data.\n         * \n         * World updated to run off the Phaser main loop.\n         * Body extended to support additional setter functions.\n         * \n         * To create the map data you'll need Weltmeister, which comes with Impact\n         * and can be purchased from http://impactjs.com\n         * \n         * My thanks to Dominic Szablewski for his permission to support Impact in Phaser.",
        "* An Impact.js compatible physics body.\n             * This re-creates the properties you'd get on an Entity and the math needed to update them.",
        "* \n                 * @param world [description]\n                 * @param x [description]\n                 * @param y [description]\n                 * @param sx [description] Default 16.\n                 * @param sy [description] Default 16.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* The ImpactBody, ImpactSprite or ImpactImage object that owns this Body, if any.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* min 44 deg, max 136 deg",
        "* [description]\n                 * @param x [description]\n                 * @param y [description]",
        "* [description]\n                 * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* [description]\n                 * @param graphic [description]",
        "* [description]",
        "* [description]",
        "* Determines whether the body collides with the `other` one or not.\n                 * @param other [description]",
        "* Reset the size and position of the physics body.\n                 * @param x The x coordinate to position the body.\n                 * @param y The y coordinate to position the body.\n                 * @param width The width of the body.\n                 * @param height The height of the body.",
        "* Export this body object to JSON.",
        "* [description]\n                 * @param config [description]",
        "* Can be overridden by user code\n                 * @param other [description]",
        "* Can be overridden by user code\n                 * @param other [description]\n                 * @param axis [description]",
        "* Can be overridden by user code but must return a boolean.\n                 * @param res [description]",
        "* [description]",
        "* Collision Types - Determine if and how entities collide with each other.\n             * \n             * In ACTIVE vs. LITE or FIXED vs. ANY collisions, only the \"weak\" entity moves,\n             * while the other one stays fixed. In ACTIVE vs. ACTIVE and ACTIVE vs. PASSIVE\n             * collisions, both entities are moved. LITE or PASSIVE entities don't collide\n             * with other LITE or PASSIVE entities at all. The behavior for FIXED vs.\n             * FIXED collisions is undefined.",
        "* Never collides.",
        "* Lite collision.",
        "* Passive collision.",
        "* Active collision.",
        "* Fixed collision.",
        "* [description]",
        "* \n                 * @param tilesize [description] Default 32.\n                 * @param data [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param x [description]\n                 * @param y [description]\n                 * @param vx [description]\n                 * @param vy [description]\n                 * @param objectWidth [description]\n                 * @param objectHeight [description]",
        "* [description]\n                 * @param res [description]\n                 * @param x [description]\n                 * @param y [description]\n                 * @param vx [description]\n                 * @param vy [description]\n                 * @param width [description]\n                 * @param height [description]\n                 * @param rvx [description]\n                 * @param rvy [description]\n                 * @param step [description]",
        "* [description]\n                 * @param res [description]\n                 * @param t [description]\n                 * @param x [description]\n                 * @param y [description]\n                 * @param vx [description]\n                 * @param vy [description]\n                 * @param width [description]\n                 * @param height [description]\n                 * @param tileX [description]\n                 * @param tileY [description]",
        "* The Impact Acceleration component.\n                 * Should be applied as a mixin.",
        "* Sets the horizontal acceleration of this body.\n                     * @param x The amount of acceleration to apply.",
        "* Sets the vertical acceleration of this body.\n                     * @param y The amount of acceleration to apply.",
        "* Sets the horizontal and vertical acceleration of this body.\n                     * @param x The amount of horizontal acceleration to apply.\n                     * @param y The amount of vertical acceleration to apply.",
        "* The Impact Body Scale component.\n                 * Should be applied as a mixin.",
        "* Sets the size of the physics body.\n                     * @param width The width of the body in pixels.\n                     * @param height The height of the body in pixels. Default width.",
        "* Sets the scale of the physics body.\n                     * @param scaleX The horizontal scale of the body.\n                     * @param scaleY The vertical scale of the body. If not given, will use the horizontal scale value.",
        "* The Impact Body Type component.\n                 * Should be applied as a mixin.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* The Impact Bounce component.\n                 * Should be applied as a mixin.",
        "* Sets the impact physics bounce, or restitution, value.\n                     * @param value A value between 0 (no rebound) and 1 (full rebound)",
        "* Sets the minimum velocity the body is allowed to be moving to be considered for rebound.\n                     * @param value The minimum allowed velocity.",
        "* The bounce, or restitution, value of this body.\n                     * A value between 0 (no rebound) and 1 (full rebound)",
        "* The Impact Check Against component.\n                 * Should be applied as a mixin.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* The Impact Collides component.\n                 * Should be applied as a mixin.",
        "* [description]\n                     * @param callback [description]\n                     * @param scope [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* The Impact Debug component.\n                 * Should be applied as a mixin.",
        "* [description]\n                     * @param showBody [description]\n                     * @param showVelocity [description]\n                     * @param bodyColor [description]",
        "* [description]\n                     * @param value [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* The Impact Friction component.\n                 * Should be applied as a mixin.",
        "* [description]\n                     * @param x [description]",
        "* [description]\n                     * @param y [description]",
        "* [description]\n                     * @param x [description]\n                     * @param y [description]",
        "* The Impact Gravity component.\n                 * Should be applied as a mixin.",
        "* [description]\n                     * @param value [description]",
        "* [description]",
        "* The Impact Offset component.\n                 * Should be applied as a mixin.",
        "* [description]\n                     * @param x [description]\n                     * @param y [description]\n                     * @param width [description]\n                     * @param height [description]",
        "* The Impact Set Game Object component.\n                 * Should be applied as a mixin.",
        "* [description]\n                     * @param gameObject [description]\n                     * @param sync [description] Default true.",
        "* [description]",
        "* The Impact Velocity component.\n                 * Should be applied as a mixin.",
        "* Sets the horizontal velocity of the physics body.\n                     * @param x The horizontal velocity value.",
        "* Sets the vertical velocity of the physics body.\n                     * @param y The vertical velocity value.",
        "* Sets the horizontal and vertical velocities of the physics body.\n                     * @param x The horizontal velocity value.\n                     * @param y The vertical velocity value. If not given, defaults to the horizontal value. Default x.",
        "* Sets the maximum velocity this body can travel at.\n                     * @param x The maximum allowed horizontal velocity.\n                     * @param y The maximum allowed vertical velocity. If not given, defaults to the horizontal value. Default x.",
        "* The Impact Physics World Collide Event.\n                 * \n                 * This event is dispatched by an Impact Physics World instance if two bodies collide.\n                 * \n                 * Listen to it from a Scene using: `this.impact.world.on('collide', listener)`.",
        "* The Impact Physics World Pause Event.\n                 * \n                 * This event is dispatched by an Impact Physics World instance when it is paused.\n                 * \n                 * Listen to it from a Scene using: `this.impact.world.on('pause', listener)`.",
        "* The Impact Physics World Resume Event.\n                 * \n                 * This event is dispatched by an Impact Physics World instance when it resumes from a paused state.\n                 * \n                 * Listen to it from a Scene using: `this.impact.world.on('resume', listener)`.",
        "* The Impact Physics Factory allows you to easily create Impact Physics enabled Game Objects.\n             * Objects that are created by this Factory are automatically added to the physics world.",
        "* \n                 * @param world A reference to the Impact Physics world.",
        "* A reference to the Impact Physics world.",
        "* A reference to the Scene.Systems this Impact Physics instance belongs to.",
        "* Creates a new ImpactBody object and adds it to the physics simulation.\n                 * @param x The horizontal position of the body in the physics world.\n                 * @param y The vertical position of the body in the physics world.\n                 * @param width The width of the body.\n                 * @param height The height of the body.",
        "* Adds an Impact Physics Body to the given Game Object.\n                 * @param gameObject The Game Object to receive the physics body.",
        "* Creates a new ImpactImage object and adds it to the physics world.\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param key The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Creates a new ImpactSprite object and adds it to the physics world.\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param key The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* Destroys this Factory.",
        "* [description]\n             * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\n             * @param vel [description]\n             * @param accel [description]\n             * @param friction [description]\n             * @param max [description]",
        "* [description]",
        "* \n                 * @param world [description]\n                 * @param x x - The horizontal position of this physics body in the world.\n                 * @param y y - The vertical position of this physics body in the world.\n                 * @param width The width of the physics body in the world.\n                 * @param height [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* Sets the horizontal acceleration of this body.\n                 * @param x The amount of acceleration to apply.",
        "* Sets the vertical acceleration of this body.\n                 * @param y The amount of acceleration to apply.",
        "* Sets the horizontal and vertical acceleration of this body.\n                 * @param x The amount of horizontal acceleration to apply.\n                 * @param y The amount of vertical acceleration to apply.",
        "* Sets the size of the physics body.\n                 * @param width The width of the body in pixels.\n                 * @param height The height of the body in pixels. Default width.",
        "* Sets the scale of the physics body.\n                 * @param scaleX The horizontal scale of the body.\n                 * @param scaleY The vertical scale of the body. If not given, will use the horizontal scale value.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* Sets the impact physics bounce, or restitution, value.\n                 * @param value A value between 0 (no rebound) and 1 (full rebound)",
        "* Sets the minimum velocity the body is allowed to be moving to be considered for rebound.\n                 * @param value The minimum allowed velocity.",
        "* The bounce, or restitution, value of this body.\n                 * A value between 0 (no rebound) and 1 (full rebound)",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param callback [description]\n                 * @param scope [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param showBody [description]\n                 * @param showVelocity [description]\n                 * @param bodyColor [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param x [description]",
        "* [description]\n                 * @param y [description]",
        "* [description]\n                 * @param x [description]\n                 * @param y [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]",
        "* [description]\n                 * @param x [description]\n                 * @param y [description]\n                 * @param width [description]\n                 * @param height [description]",
        "* [description]\n                 * @param gameObject [description]\n                 * @param sync [description] Default true.",
        "* [description]",
        "* Sets the horizontal velocity of the physics body.\n                 * @param x The horizontal velocity value.",
        "* Sets the vertical velocity of the physics body.\n                 * @param y The vertical velocity value.",
        "* Sets the horizontal and vertical velocities of the physics body.\n                 * @param x The horizontal velocity value.\n                 * @param y The vertical velocity value. If not given, defaults to the horizontal value. Default x.",
        "* Sets the maximum velocity this body can travel at.\n                 * @param x The maximum allowed horizontal velocity.\n                 * @param y The maximum allowed vertical velocity. If not given, defaults to the horizontal value. Default x.",
        "* An Impact Physics Image Game Object.\n             * \n             * An Image is a light-weight Game Object useful for the display of static images in your game,\n             * such as logos, backgrounds, scenery or other non-animated elements. Images can have input\n             * events and physics bodies, or be tweened, tinted or scrolled. The main difference between an\n             * Image and a Sprite is that you cannot animate an Image as they do not have the Animation component.",
        "* \n                 * @param world The physics world of the Impact physics system.\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* The Physics Body linked to an ImpactImage.",
        "* The size of the physics Body.",
        "* The X and Y offset of the Body from the left and top of the Image.",
        "* The velocity, or rate of change the Body's position. Measured in pixels per second.",
        "* The acceleration is the rate of change of the velocity. Measured in pixels per second squared.",
        "* Friction between colliding bodies.",
        "* The maximum velocity of the body.",
        "* Clears all alpha values associated with this Game Object.\n                 * \n                 * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n                 * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n                 * \n                 * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n                 * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n                 * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n                 * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n                 * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n                 * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n                 * \n                 * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n                 * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n                 * are used.\n                 * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.\n                 * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n                 * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n                 * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n                 * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n                 * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n                 * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n                 * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n                 * \n                 * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n                 * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n                 * \n                 * If a mask is already set on this Game Object it will be immediately replaced.\n                 * \n                 * Masks are positioned in global space and are not relative to the Game Object to which they\n                 * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n                 * \n                 * Masks have no impact on physics or input detection. They are purely a rendering component\n                 * that allows you to limit what is visible during the render pass.\n                 * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n                 * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a renderable Game Object.\n                 * A renderable Game Object is one that uses a texture to render with, such as an\n                 * Image, Sprite, Render Texture or BitmapText.\n                 * \n                 * If you do not provide a renderable object, and this Game Object has a texture,\n                 * it will use itself as the object. This means you can call this method to create\n                 * a Bitmap Mask from any renderable Game Object.\n                 * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a Graphics Game Object.\n                 * \n                 * If you do not provide a graphics object, and this Game Object is an instance\n                 * of a Graphics object, then it will use itself to create the mask.\n                 * \n                 * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n                 * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n                 * \n                 * The values are given in the range 0 to 1.\n                 * @param x The horizontal origin value. Default 0.5.\n                 * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n                 * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n                 * @param x The horizontal display origin value. Default 0.\n                 * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n                 * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n                 * This should only be called during the instantiation of the Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n                 * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.\n                 * @param x The horizontal scroll factor of this Game Object.\n                 * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The native (un-scaled) width of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n                 * \n                 * Calling this will adjust the scale.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n                 * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n                 * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n                 * \n                 * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n                 * \n                 * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n                 * changes what is shown when rendered.\n                 * \n                 * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n                 * \n                 * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n                 * half of it, you could call `setCrop(0, 0, 400, 600)`.\n                 * \n                 * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n                 * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n                 * \n                 * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n                 * \n                 * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n                 * \n                 * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n                 * the renderer to skip several internal calculations.\n                 * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n                 * @param y The y coordinate to start the crop from.\n                 * @param width The width of the crop rectangle in pixels.\n                 * @param height The height of the crop rectangle in pixels.",
        "* Sets the texture and frame this Game Object will use to render with.\n                 * \n                 * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n                 * @param key The key of the texture to be used, as stored in the Texture Manager.\n                 * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n                 * \n                 * The Frame has to belong to the current Texture being used.\n                 * \n                 * It can be either a string or an index.\n                 * \n                 * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n                 * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n                 * @param frame The name or index of the frame within the Texture.\n                 * @param updateSize Should this call adjust the size of the Game Object? Default true.\n                 * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n                 * \n                 * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n                 * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n                 * \n                 * The tint works by taking the pixel color values from the Game Objects texture, and then\n                 * multiplying it by the color value of the tint. You can provide either one color value,\n                 * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n                 * per corner. The colors are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n                 * \n                 * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n                 * with those in the tint. You can use this for effects such as making a player flash 'white'\n                 * if hit by something. You can provide either one color value, in which case the whole\n                 * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n                 * are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n                 * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n                 * \n                 * Where 0 is to the right, 90 is down, 180 is left.\n                 * \n                 * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n                 * \n                 * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n                 * @param x The x position of this Game Object. Default 0.\n                 * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n                 * @param z The z position of this Game Object. Default 0.\n                 * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n                 * the given area.\n                 * \n                 * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n                 * \n                 * The position does not factor in the size of this Game Object, meaning that only the origin is\n                 * guaranteed to be within the area.\n                 * @param x The x position of the top-left of the random area. Default 0.\n                 * @param y The y position of the top-left of the random area. Default 0.\n                 * @param width The width of the random area.\n                 * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n                 * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n                 * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n                 * @param x The horizontal scale of this Game Object.\n                 * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n                 * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n                 * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n                 * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n                 * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.\n                 * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.\n                 * @param value The visible state of the Game Object.",
        "* Sets the horizontal acceleration of this body.\n                 * @param x The amount of acceleration to apply.",
        "* Sets the vertical acceleration of this body.\n                 * @param y The amount of acceleration to apply.",
        "* Sets the horizontal and vertical acceleration of this body.\n                 * @param x The amount of horizontal acceleration to apply.\n                 * @param y The amount of vertical acceleration to apply.",
        "* Sets the size of the physics body.\n                 * @param width The width of the body in pixels.\n                 * @param height The height of the body in pixels. Default width.",
        "* Sets the scale of the physics body.\n                 * @param scaleX The horizontal scale of the body.\n                 * @param scaleY The vertical scale of the body. If not given, will use the horizontal scale value.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* Sets the impact physics bounce, or restitution, value.\n                 * @param value A value between 0 (no rebound) and 1 (full rebound)",
        "* Sets the minimum velocity the body is allowed to be moving to be considered for rebound.\n                 * @param value The minimum allowed velocity.",
        "* The bounce, or restitution, value of this body.\n                 * A value between 0 (no rebound) and 1 (full rebound)",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param callback [description]\n                 * @param scope [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param showBody [description]\n                 * @param showVelocity [description]\n                 * @param bodyColor [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param x [description]",
        "* [description]\n                 * @param y [description]",
        "* [description]\n                 * @param x [description]\n                 * @param y [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]",
        "* [description]\n                 * @param x [description]\n                 * @param y [description]\n                 * @param width [description]\n                 * @param height [description]",
        "* [description]\n                 * @param gameObject [description]\n                 * @param sync [description] Default true.",
        "* [description]",
        "* Sets the horizontal velocity of the physics body.\n                 * @param x The horizontal velocity value.",
        "* Sets the vertical velocity of the physics body.\n                 * @param y The vertical velocity value.",
        "* Sets the horizontal and vertical velocities of the physics body.\n                 * @param x The horizontal velocity value.\n                 * @param y The vertical velocity value. If not given, defaults to the horizontal value. Default x.",
        "* Sets the maximum velocity this body can travel at.\n                 * @param x The maximum allowed horizontal velocity.\n                 * @param y The maximum allowed vertical velocity. If not given, defaults to the horizontal value. Default x.",
        "* [description]",
        "* \n                 * @param scene [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* An Impact Physics Sprite Game Object.\n             * \n             * A Sprite Game Object is used for the display of both static and animated images in your game.\n             * Sprites can have input events and physics bodies. They can also be tweened, tinted, scrolled\n             * and animated.\n             * \n             * The main difference between a Sprite and an Image Game Object is that you cannot animate Images.\n             * As such, Sprites take a fraction longer to process and have a larger API footprint due to the Animation\n             * Component. If you do not require animation then you can safely use Images to replace Sprites in all cases.",
        "* \n                 * @param world [description]\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* Clears all alpha values associated with this Game Object.\n                 * \n                 * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n                 * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n                 * \n                 * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n                 * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n                 * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n                 * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n                 * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n                 * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n                 * \n                 * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n                 * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n                 * are used.\n                 * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.\n                 * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n                 * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n                 * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n                 * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n                 * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n                 * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n                 * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n                 * \n                 * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n                 * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n                 * \n                 * If a mask is already set on this Game Object it will be immediately replaced.\n                 * \n                 * Masks are positioned in global space and are not relative to the Game Object to which they\n                 * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n                 * \n                 * Masks have no impact on physics or input detection. They are purely a rendering component\n                 * that allows you to limit what is visible during the render pass.\n                 * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n                 * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a renderable Game Object.\n                 * A renderable Game Object is one that uses a texture to render with, such as an\n                 * Image, Sprite, Render Texture or BitmapText.\n                 * \n                 * If you do not provide a renderable object, and this Game Object has a texture,\n                 * it will use itself as the object. This means you can call this method to create\n                 * a Bitmap Mask from any renderable Game Object.\n                 * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a Graphics Game Object.\n                 * \n                 * If you do not provide a graphics object, and this Game Object is an instance\n                 * of a Graphics object, then it will use itself to create the mask.\n                 * \n                 * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n                 * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n                 * \n                 * The values are given in the range 0 to 1.\n                 * @param x The horizontal origin value. Default 0.5.\n                 * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n                 * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n                 * @param x The horizontal display origin value. Default 0.\n                 * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n                 * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n                 * This should only be called during the instantiation of the Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n                 * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.\n                 * @param x The horizontal scroll factor of this Game Object.\n                 * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The native (un-scaled) width of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n                 * \n                 * Calling this will adjust the scale.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n                 * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n                 * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n                 * \n                 * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n                 * \n                 * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n                 * changes what is shown when rendered.\n                 * \n                 * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n                 * \n                 * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n                 * half of it, you could call `setCrop(0, 0, 400, 600)`.\n                 * \n                 * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n                 * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n                 * \n                 * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n                 * \n                 * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n                 * \n                 * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n                 * the renderer to skip several internal calculations.\n                 * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n                 * @param y The y coordinate to start the crop from.\n                 * @param width The width of the crop rectangle in pixels.\n                 * @param height The height of the crop rectangle in pixels.",
        "* Sets the texture and frame this Game Object will use to render with.\n                 * \n                 * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n                 * @param key The key of the texture to be used, as stored in the Texture Manager.\n                 * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n                 * \n                 * The Frame has to belong to the current Texture being used.\n                 * \n                 * It can be either a string or an index.\n                 * \n                 * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n                 * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n                 * @param frame The name or index of the frame within the Texture.\n                 * @param updateSize Should this call adjust the size of the Game Object? Default true.\n                 * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n                 * \n                 * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n                 * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n                 * \n                 * The tint works by taking the pixel color values from the Game Objects texture, and then\n                 * multiplying it by the color value of the tint. You can provide either one color value,\n                 * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n                 * per corner. The colors are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n                 * \n                 * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n                 * with those in the tint. You can use this for effects such as making a player flash 'white'\n                 * if hit by something. You can provide either one color value, in which case the whole\n                 * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n                 * are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n                 * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n                 * \n                 * Where 0 is to the right, 90 is down, 180 is left.\n                 * \n                 * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n                 * \n                 * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n                 * @param x The x position of this Game Object. Default 0.\n                 * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n                 * @param z The z position of this Game Object. Default 0.\n                 * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n                 * the given area.\n                 * \n                 * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n                 * \n                 * The position does not factor in the size of this Game Object, meaning that only the origin is\n                 * guaranteed to be within the area.\n                 * @param x The x position of the top-left of the random area. Default 0.\n                 * @param y The y position of the top-left of the random area. Default 0.\n                 * @param width The width of the random area.\n                 * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n                 * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n                 * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n                 * @param x The horizontal scale of this Game Object.\n                 * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n                 * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n                 * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n                 * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n                 * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.\n                 * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.\n                 * @param value The visible state of the Game Object.",
        "* Sets the horizontal acceleration of this body.\n                 * @param x The amount of acceleration to apply.",
        "* Sets the vertical acceleration of this body.\n                 * @param y The amount of acceleration to apply.",
        "* Sets the horizontal and vertical acceleration of this body.\n                 * @param x The amount of horizontal acceleration to apply.\n                 * @param y The amount of vertical acceleration to apply.",
        "* Sets the size of the physics body.\n                 * @param width The width of the body in pixels.\n                 * @param height The height of the body in pixels. Default width.",
        "* Sets the scale of the physics body.\n                 * @param scaleX The horizontal scale of the body.\n                 * @param scaleY The vertical scale of the body. If not given, will use the horizontal scale value.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* Sets the impact physics bounce, or restitution, value.\n                 * @param value A value between 0 (no rebound) and 1 (full rebound)",
        "* Sets the minimum velocity the body is allowed to be moving to be considered for rebound.\n                 * @param value The minimum allowed velocity.",
        "* The bounce, or restitution, value of this body.\n                 * A value between 0 (no rebound) and 1 (full rebound)",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param callback [description]\n                 * @param scope [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param showBody [description]\n                 * @param showVelocity [description]\n                 * @param bodyColor [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param x [description]",
        "* [description]\n                 * @param y [description]",
        "* [description]\n                 * @param x [description]\n                 * @param y [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]",
        "* [description]\n                 * @param x [description]\n                 * @param y [description]\n                 * @param width [description]\n                 * @param height [description]",
        "* [description]\n                 * @param gameObject [description]\n                 * @param sync [description] Default true.",
        "* [description]",
        "* Sets the horizontal velocity of the physics body.\n                 * @param x The horizontal velocity value.",
        "* Sets the vertical velocity of the physics body.\n                 * @param y The vertical velocity value.",
        "* Sets the horizontal and vertical velocities of the physics body.\n                 * @param x The horizontal velocity value.\n                 * @param y The vertical velocity value. If not given, defaults to the horizontal value. Default x.",
        "* Sets the maximum velocity this body can travel at.\n                 * @param x The maximum allowed horizontal velocity.\n                 * @param y The maximum allowed vertical velocity. If not given, defaults to the horizontal value. Default x.",
        "* [description]\n             * @param world [description]\n             * @param left [description]\n             * @param right [description]\n             * @param weak [description]",
        "* [description]\n             * @param world [description]\n             * @param top [description]\n             * @param bottom [description]\n             * @param weak [description]",
        "* Impact Physics Solver\n             * @param world The Impact simulation to run the solver in.\n             * @param bodyA The first body in the collision.\n             * @param bodyB The second body in the collision.",
        "* Collision Types - Determine if and how entities collide with each other.\n             * \n             * In ACTIVE vs. LITE or FIXED vs. ANY collisions, only the \"weak\" entity moves,\n             * while the other one stays fixed. In ACTIVE vs. ACTIVE and ACTIVE vs. PASSIVE\n             * collisions, both entities are moved. LITE or PASSIVE entities don't collide\n             * with other LITE or PASSIVE entities at all. The behavior for FIXED vs.\n             * FIXED collisions is undefined.",
        "* Collides with nothing.",
        "* Type A. Collides with Type B.",
        "* Type B. Collides with Type A.",
        "* Collides with both types A and B.",
        "* Set up the trace-result\n             * var res = {\n             *     collision: {x: false, y: false, slope: false},\n             *     pos: {x: x, y: y},\n             *     tile: {x: 0, y: 0}\n             * };\n             * @param body [description]\n             * @param res [description]",
        "* Sets {@link Phaser.Physics.Impact.World#gravity}",
        "* The size of the cells used for the broadphase pass. Increase this value if you have lots of large objects in the world.",
        "* A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.",
        "* [description]",
        "* Sets {@link Phaser.Physics.Impact.World#debug}.",
        "* The maximum velocity a body can move.",
        "* Whether the Body's boundary is drawn to the debug display.",
        "* Whether the Body's velocity is drawn to the debug display.",
        "* The color of this Body on the debug display.",
        "* The color of the Body's velocity on the debug display.",
        "* Maximum X velocity objects can move.",
        "* Maximum Y velocity objects can move.",
        "* The minimum velocity an object can be moving at to be considered for bounce.",
        "* Gravity multiplier. Set to 0 for no gravity.",
        "* The default bounce, or restitution, of bodies in the world.",
        "* Should the world have bounds enabled by default?",
        "* The x coordinate of the world bounds.",
        "* The y coordinate of the world bounds.",
        "* The width of the world bounds.",
        "* The height of the world bounds.",
        "* The thickness of the walls of the world bounds.",
        "* Should the left-side world bounds wall be created?",
        "* Should the right-side world bounds wall be created?",
        "* Should the top world bounds wall be created?",
        "* Should the bottom world bounds wall be created?",
        "* An object containing the 4 wall bodies that bound the physics world.",
        "* Whether the Body's boundary is drawn to the debug display.",
        "* Whether the Body's velocity is drawn to the debug display.",
        "* The color of this Body on the debug display.",
        "* The color of the Body's velocity on the debug display.",
        "* Maximum X velocity objects can move.",
        "* Maximum Y velocity objects can move.",
        "* The minimum velocity an object can be moving at to be considered for bounce.",
        "* Gravity multiplier. Set to 0 for no gravity.",
        "* The default bounce, or restitution, of bodies in the world.",
        "* The left-side wall of the world bounds.",
        "* The right-side wall of the world bounds.",
        "* The top wall of the world bounds.",
        "* The bottom wall of the world bounds.",
        "* [description]",
        "* \n                 * @param scene The Scene to which this Impact World instance belongs.\n                 * @param config [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* Spatial hash cell dimensions",
        "* [description]",
        "* [description]",
        "* Impacts maximum time step is 20 fps.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* An object containing the 4 wall bodies that bound the physics world.",
        "* [description]",
        "* Sets the collision map for the world either from a Weltmeister JSON level in the cache or from\n                 * a 2D array. If loading from a Weltmeister level, the map must have a layer called \"collision\".\n                 * @param key Either a string key that corresponds to a Weltmeister level\n                 * in the cache, or a 2D array of collision IDs.\n                 * @param tileSize The size of a tile. This is optional if loading from a Weltmeister\n                 * level in the cache.",
        "* Sets the collision map for the world from a tilemap layer. Only tiles that are marked as\n                 * colliding will be used. You can specify the mapping from tiles to slope IDs in a couple of\n                 * ways. The easiest is to use Tiled and the slopeTileProperty option. Alternatively, you can\n                 * manually create a slopeMap that stores the mapping between tile indices and slope IDs.\n                 * @param tilemapLayer The tilemap layer to use.\n                 * @param options Options for controlling the mapping from tiles to slope IDs.",
        "* Sets the bounds of the Physics world to match the given world pixel dimensions.\n                 * You can optionally set which 'walls' to create: left, right, top or bottom.\n                 * If none of the walls are given it will default to use the walls settings it had previously.\n                 * I.e. if you previously told it to not have the left or right walls, and you then adjust the world size\n                 * the newly created bounds will also not have the left and right walls.\n                 * Explicitly state them in the parameters to override this.\n                 * @param x The x coordinate of the top-left corner of the bounds.\n                 * @param y The y coordinate of the top-left corner of the bounds.\n                 * @param width The width of the bounds.\n                 * @param height The height of the bounds.\n                 * @param thickness [description] Default 64.\n                 * @param left If true will create the left bounds wall. Default true.\n                 * @param right If true will create the right bounds wall. Default true.\n                 * @param top If true will create the top bounds wall. Default true.\n                 * @param bottom If true will create the bottom bounds wall. Default true.",
        "* position = 'left', 'right', 'top' or 'bottom'\n                 * @param add [description]\n                 * @param position [description]\n                 * @param x [description]\n                 * @param y [description]\n                 * @param width [description]\n                 * @param height [description]",
        "* Creates a Graphics Game Object used for debug display and enables the world for debug drawing.",
        "* [description]",
        "* [description]\n                 * @param x [description]\n                 * @param y [description]\n                 * @param sizeX [description]\n                 * @param sizeY [description]",
        "* [description]\n                 * @param object The Body to remove from this World.",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param time The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\n                 * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* Check the body against the spatial hash.\n                 * @param body [description]\n                 * @param hash [description]\n                 * @param size [description]",
        "* [description]\n                 * @param bodyA [description]\n                 * @param bodyB [description]",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the collides value on.",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the collides value on.",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the collides value on.",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the collides value on.",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the collides value on.",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the type value on.",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the type value on.",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the type value on.",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the type value on.",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the type value on.",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the type value on.",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the type value on.",
        "* [description]\n                 * @param bodies An Array of Impact Bodies to set the type value on.",
        "* [description]",
        "* [description]",
        "* A component to set restitution on objects.",
        "* Sets the restitution on the physics object.\n                     * @param value A Number that defines the restitution (elasticity) of the body. The value is always positive and is in the range (0, 1). A value of 0 means collisions may be perfectly inelastic and no bouncing may occur. A value of 0.8 means the body may bounce back with approximately 80% of its kinetic energy. Note that collision response is based on pairs of bodies, and that restitution values are combined with the following formula: `Math.max(bodyA.restitution, bodyB.restitution)`",
        "* Contains methods for changing the collision filter of a Matter Body. Should be used as a mixin and not called directly.",
        "* Sets the collision category of this Game Object's Matter Body. This number must be a power of two between 2^0 (= 1) and 2^31. Two bodies with different collision groups (see {@link #setCollisionGroup}) will only collide if their collision categories are included in their collision masks (see {@link #setCollidesWith}).\n                     * @param value Unique category bitfield.",
        "* Sets the collision group of this Game Object's Matter Body. If this is zero or two Matter Bodies have different values, they will collide according to the usual rules (see {@link #setCollisionCategory} and {@link #setCollisionGroup}). If two Matter Bodies have the same positive value, they will always collide; if they have the same negative value, they will never collide.\n                     * @param value Unique group index.",
        "* Sets the collision mask for this Game Object's Matter Body. Two Matter Bodies with different collision groups will only collide if each one includes the other's category in its mask based on a bitwise AND, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0` are both true.\n                     * @param categories A unique category bitfield, or an array of them.",
        "* A component to apply force to Matter.js bodies.",
        "* Applies a force to a body.\n                     * @param force A Vector that specifies the force to apply.",
        "* Applies a force to a body from a given position.\n                     * @param position The position in which the force comes from.\n                     * @param force A Vector that specifies the force to apply.",
        "* Apply thrust to the forward position of the body.\n                     * @param speed A speed value to be applied to a directional force.",
        "* Apply thrust to the left position of the body.\n                     * @param speed A speed value to be applied to a directional force.",
        "* Apply thrust to the right position of the body.\n                     * @param speed A speed value to be applied to a directional force.",
        "* Apply thrust to the back position of the body.\n                     * @param speed A speed value to be applied to a directional force.",
        "* Contains methods for changing the friction of a Game Object's Matter Body. Should be used a mixin, not called directly.",
        "* Sets new friction values for this Game Object's Matter Body.\n                     * @param value The new friction of the body, between 0 and 1, where 0 allows the Body to slide indefinitely, while 1 allows it to stop almost immediately after a force is applied.\n                     * @param air If provided, the new air resistance of the Body. The higher the value, the faster the Body will slow as it moves through space. 0 means the body has no air resistance.\n                     * @param fstatic If provided, the new static friction of the Body. The higher the value (e.g. 10), the more force it will take to initially get the Body moving when it is nearly stationary. 0 means the body will never \"stick\" when it is nearly stationary.",
        "* Sets a new air resistance for this Game Object's Matter Body. A value of 0 means the Body will never slow as it moves through space. The higher the value, the faster a Body slows when moving through space.\n                     * @param value The new air resistance for the Body.",
        "* Sets a new static friction for this Game Object's Matter Body. A value of 0 means the Body will never \"stick\" when it is nearly stationary. The higher the value (e.g. 10), the more force it will take to initially get the Body moving when it is nearly stationary.\n                     * @param value The new static friction for the Body.",
        "* A component to manipulate world gravity for Matter.js bodies.",
        "* A togglable function for ignoring world gravity in real-time on the current body.\n                     * @param value Set to true to ignore the effect of world gravity, or false to not ignore it.",
        "* Allows accessing the mass, density, and center of mass of a Matter-enabled Game Object. Should be used as a mixin and not directly.",
        "* Sets the mass of the Game Object's Matter Body.\n                     * @param value The new mass of the body.",
        "* Sets density of the body.\n                     * @param value The new density of the body.",
        "* The body's center of mass.",
        "* [description]",
        "* [description]\n                     * @param value [description]",
        "* [description]",
        "* [description]",
        "* Set the body on a Game Object to a rectangle.\n                     * @param width Width of the rectangle.\n                     * @param height Height of the rectangle.\n                     * @param options [description]",
        "* [description]\n                     * @param radius [description]\n                     * @param options [description]",
        "* Set the body on the Game Object to a polygon shape.\n                     * @param radius The radius of the polygon.\n                     * @param sides The amount of sides creating the polygon.\n                     * @param options A matterjs config object.",
        "* Creates a new matterjs trapezoid body.\n                     * @param width The width of the trapezoid.\n                     * @param height The height of the trapezoid.\n                     * @param slope The angle of slope for the trapezoid.\n                     * @param options A matterjs config object for the body.",
        "* [description]\n                     * @param body [description]\n                     * @param addToWorld [description] Default true.",
        "* [description]\n                     * @param config [description]\n                     * @param options [description]",
        "* [description]",
        "* [description]\n                     * @param value [description] Default 60.",
        "* [description]\n                     * @param start [description]\n                     * @param end [description]",
        "* [description]\n                     * @param value [description]",
        "* [description]\n                     * @param value [description]",
        "* [description]",
        "* [description]\n                     * @param value [description]",
        "* [description]",
        "* Provides methods used for getting and setting the position, scale and rotation of a Game Object.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* Use `angle` to set or get rotation of the physics body associated to this GameObject. Unlike rotation, when using set the value can be in degrees, which will be converted to radians internally.",
        "* Use `rotation` to set or get the rotation of the physics body associated with this GameObject. The value when set must be in radians.",
        "* Sets the position of the physics body along x and y axes. Both the parameters to this function are optional and if not passed any they default to 0.\n                     * @param x The horizontal position of the body. Default 0.\n                     * @param y The vertical position of the body. Default x.",
        "* [description]\n                     * @param radians [description] Default 0.",
        "* [description]",
        "* [description]\n                     * @param degrees [description] Default 0.",
        "* Sets the scale of this Game Object.\n                     * @param x The horizontal scale of this Game Object. Default 1.\n                     * @param y The vertical scale of this Game Object. If not set it will use the x value. Default x.\n                     * @param point The point (Vector2) from which scaling will occur.",
        "* [description]",
        "* [description]\n                     * @param value [description]",
        "* Sets the horizontal velocity of the physics body.\n                     * @param x The horizontal velocity value.",
        "* Sets vertical velocity of the physics body.\n                     * @param y The vertical velocity value.",
        "* Sets both the horizontal and vertical velocity of the physics body.\n                     * @param x The horizontal velocity value.\n                     * @param y The vertical velocity value, it can be either positive or negative. If not given, it will be the same as the `x` value. Default x.",
        "* The Matter Engine `timing.timestamp` value for the event.",
        "* The source object of the event.",
        "* The name of the event.",
        "* The Matter Physics After Update Event.\n                 * \n                 * This event is dispatched by a Matter Physics World instance after the engine has updated and all collision events have resolved.\n                 * \n                 * Listen to it from a Scene using: `this.matter.world.on('afterupdate', listener)`.",
        "* The Matter Engine `timing.timestamp` value for the event.",
        "* The source object of the event.",
        "* The name of the event.",
        "* The Matter Physics Before Update Event.\n                 * \n                 * This event is dispatched by a Matter Physics World instance right before all the collision processing takes place.\n                 * \n                 * Listen to it from a Scene using: `this.matter.world.on('beforeupdate', listener)`.",
        "* A list of all affected pairs in the collision.",
        "* The Matter Engine `timing.timestamp` value for the event.",
        "* The source object of the event.",
        "* The name of the event.",
        "* The Matter Physics Collision Active Event.\n                 * \n                 * This event is dispatched by a Matter Physics World instance after the engine has updated.\n                 * It provides a list of all pairs that are colliding in the current tick (if any).\n                 * \n                 * Listen to it from a Scene using: `this.matter.world.on('collisionactive', listener)`.",
        "* A list of all affected pairs in the collision.",
        "* The Matter Engine `timing.timestamp` value for the event.",
        "* The source object of the event.",
        "* The name of the event.",
        "* The Matter Physics Collision End Event.\n                 * \n                 * This event is dispatched by a Matter Physics World instance after the engine has updated.\n                 * It provides a list of all pairs that have finished colliding in the current tick (if any).\n                 * \n                 * Listen to it from a Scene using: `this.matter.world.on('collisionend', listener)`.",
        "* A list of all affected pairs in the collision.",
        "* The Matter Engine `timing.timestamp` value for the event.",
        "* The source object of the event.",
        "* The name of the event.",
        "* The Matter Physics Collision Start Event.\n                 * \n                 * This event is dispatched by a Matter Physics World instance after the engine has updated.\n                 * It provides a list of all pairs that have started to collide in the current tick (if any).\n                 * \n                 * Listen to it from a Scene using: `this.matter.world.on('collisionstart', listener)`.",
        "* The Matter Physics Drag End Event.\n                 * \n                 * This event is dispatched by a Matter Physics World instance when a Pointer Constraint\n                 * stops dragging a body.\n                 * \n                 * Listen to it from a Scene using: `this.matter.world.on('dragend', listener)`.",
        "* The Matter Physics Drag Event.\n                 * \n                 * This event is dispatched by a Matter Physics World instance when a Pointer Constraint\n                 * is actively dragging a body. It is emitted each time the pointer moves.\n                 * \n                 * Listen to it from a Scene using: `this.matter.world.on('drag', listener)`.",
        "* The Matter Physics Drag Start Event.\n                 * \n                 * This event is dispatched by a Matter Physics World instance when a Pointer Constraint\n                 * starts dragging a body.\n                 * \n                 * Listen to it from a Scene using: `this.matter.world.on('dragstart', listener)`.",
        "* The Matter Physics World Pause Event.\n                 * \n                 * This event is dispatched by an Matter Physics World instance when it is paused.\n                 * \n                 * Listen to it from a Scene using: `this.matter.world.on('pause', listener)`.",
        "* The Matter Physics World Resume Event.\n                 * \n                 * This event is dispatched by an Matter Physics World instance when it resumes from a paused state.\n                 * \n                 * Listen to it from a Scene using: `this.matter.world.on('resume', listener)`.",
        "* The source object of the event.",
        "* The name of the event.",
        "* The Matter Physics Sleep End Event.\n                 * \n                 * This event is dispatched by a Matter Physics World instance when a Body stop sleeping.\n                 * \n                 * Listen to it from a Scene using: `this.matter.world.on('sleepend', listener)`.",
        "* The source object of the event.",
        "* The name of the event.",
        "* The Matter Physics Sleep Start Event.\n                 * \n                 * This event is dispatched by a Matter Physics World instance when a Body goes to sleep.\n                 * \n                 * Listen to it from a Scene using: `this.matter.world.on('sleepstart', listener)`.",
        "* The Matter Factory can create different types of bodies and them to a physics world.",
        "* \n                 * @param world The Matter World which this Factory adds to.",
        "* The Matter World which this Factory adds to.",
        "* The Scene which this Factory's Matter World belongs to.",
        "* A reference to the Scene.Systems this Matter Physics instance belongs to.",
        "* Creates a new rigid rectangular Body and adds it to the World.\n                 * @param x The X coordinate of the center of the Body.\n                 * @param y The Y coordinate of the center of the Body.\n                 * @param width The width of the Body.\n                 * @param height The height of the Body.\n                 * @param options An object of properties to set on the Body. You can also specify a `chamfer` property to automatically adjust the body.",
        "* Creates a new rigid trapezoidal Body and adds it to the World.\n                 * @param x The X coordinate of the center of the Body.\n                 * @param y The Y coordinate of the center of the Body.\n                 * @param width The width of the trapezoid of the Body.\n                 * @param height The height of the trapezoid of the Body.\n                 * @param slope The slope of the trapezoid. 0 creates a rectangle, while 1 creates a triangle. Positive values make the top side shorter, while negative values make the bottom side shorter.\n                 * @param options An object of properties to set on the Body. You can also specify a `chamfer` property to automatically adjust the body.",
        "* Creates a new rigid circular Body and adds it to the World.\n                 * @param x The X coordinate of the center of the Body.\n                 * @param y The Y coordinate of the center of the Body.\n                 * @param radius The radius of the circle.\n                 * @param options An object of properties to set on the Body. You can also specify a `chamfer` property to automatically adjust the body.\n                 * @param maxSides The maximum amount of sides to use for the polygon which will approximate this circle.",
        "* Creates a new rigid polygonal Body and adds it to the World.\n                 * @param x The X coordinate of the center of the Body.\n                 * @param y The Y coordinate of the center of the Body.\n                 * @param sides The number of sides the polygon will have.\n                 * @param radius The \"radius\" of the polygon, i.e. the distance from its center to any vertex. This is also the radius of its circumcircle.\n                 * @param options An object of properties to set on the Body. You can also specify a `chamfer` property to automatically adjust the body.",
        "* Creates a body using the supplied vertices (or an array containing multiple sets of vertices) and adds it to the World.\n                 * If the vertices are convex, they will pass through as supplied. Otherwise, if the vertices are concave, they will be decomposed. Note that this process is not guaranteed to support complex sets of vertices, e.g. ones with holes.\n                 * @param x The X coordinate of the center of the Body.\n                 * @param y The Y coordinate of the center of the Body.\n                 * @param vertexSets [description]\n                 * @param options [description]\n                 * @param flagInternal Flag internal edges (coincident part edges)\n                 * @param removeCollinear Whether Matter.js will discard collinear edges (to improve performance).\n                 * @param minimumArea During decomposition discard parts that have an area less than this",
        "* Create a new composite containing Matter Image objects created in a grid arrangement.\n                 * This function uses the body bounds to prevent overlaps.\n                 * @param key The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with. Set to `null` to skip this value.\n                 * @param x The horizontal position of this composite in the world.\n                 * @param y The vertical position of this composite in the world.\n                 * @param columns The number of columns in the grid.\n                 * @param rows The number of rows in the grid.\n                 * @param columnGap The distance between each column. Default 0.\n                 * @param rowGap The distance between each row. Default 0.\n                 * @param options [description]",
        "* Create a new composite containing bodies created in the callback in a grid arrangement.\n                 * This function uses the body bounds to prevent overlaps.\n                 * @param x The horizontal position of this composite in the world.\n                 * @param y The vertical position of this composite in the world.\n                 * @param columns The number of columns in the grid.\n                 * @param rows The number of rows in the grid.\n                 * @param columnGap The distance between each column.\n                 * @param rowGap The distance between each row.\n                 * @param callback The callback that creates the stack.",
        "* Create a new composite containing bodies created in the callback in a pyramid arrangement.\n                 * This function uses the body bounds to prevent overlaps.\n                 * @param x The horizontal position of this composite in the world.\n                 * @param y The vertical position of this composite in the world.\n                 * @param columns The number of columns in the pyramid.\n                 * @param rows The number of rows in the pyramid.\n                 * @param columnGap The distance between each column.\n                 * @param rowGap The distance between each row.\n                 * @param callback The callback function to be invoked.",
        "* Chains all bodies in the given composite together using constraints.\n                 * @param composite [description]\n                 * @param xOffsetA [description]\n                 * @param yOffsetA [description]\n                 * @param xOffsetB [description]\n                 * @param yOffsetB [description]\n                 * @param options [description]",
        "* Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n                 * @param composite [description]\n                 * @param columns [description]\n                 * @param rows [description]\n                 * @param crossBrace [description]\n                 * @param options [description]",
        "* Creates a composite with a Newton's Cradle setup of bodies and constraints.\n                 * @param x [description]\n                 * @param y [description]\n                 * @param number [description]\n                 * @param size [description]\n                 * @param length [description]",
        "* Creates a composite with simple car setup of bodies and constraints.\n                 * @param x [description]\n                 * @param y [description]\n                 * @param width [description]\n                 * @param height [description]\n                 * @param wheelSize [description]",
        "* Creates a simple soft body like object.\n                 * @param x The horizontal position of this composite in the world.\n                 * @param y The vertical position of this composite in the world.\n                 * @param columns The number of columns in the Composite.\n                 * @param rows The number of rows in the Composite.\n                 * @param columnGap The distance between each column.\n                 * @param rowGap The distance between each row.\n                 * @param crossBrace [description]\n                 * @param particleRadius The radius of this circlular composite.\n                 * @param particleOptions [description]\n                 * @param constraintOptions [description]",
        "* [description]\n                 * @param bodyA [description]\n                 * @param bodyB [description]\n                 * @param length [description]\n                 * @param stiffness [description] Default 1.\n                 * @param options [description] Default {}.",
        "* [description]\n                 * @param bodyA The first possible `Body` that this constraint is attached to.\n                 * @param bodyB The second possible `Body` that this constraint is attached to.\n                 * @param length A Number that specifies the target resting length of the constraint. It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`\n                 * @param stiffness A Number that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`. A value of `1` means the constraint should be very stiff. A value of `0.2` means the constraint acts as a soft spring. Default 1.\n                 * @param options [description] Default {}.",
        "* [description]\n                 * @param bodyA [description]\n                 * @param bodyB [description]\n                 * @param length [description]\n                 * @param stiffness [description] Default 1.\n                 * @param options [description] Default {}.",
        "* [description]\n                 * @param bodyB [description]\n                 * @param length [description]\n                 * @param stiffness [description] Default 1.\n                 * @param options [description] Default {}.",
        "* [description]\n                 * @param options [description]",
        "* [description]\n                 * @param options [description]",
        "* [description]\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param key The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with. Set to `null` to skip this value.\n                 * @param options [description] Default {}.",
        "* [description]\n                 * @param tile [description]\n                 * @param options [description]",
        "* [description]\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param key The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with. Set to `null` to skip this value.\n                 * @param options [description] Default {}.",
        "* [description]\n                 * @param gameObject The Game Object to inject the Matter Body in to.\n                 * @param options [description]",
        "* Destroys this Factory.",
        "* [description]\n             * @param world The Matter world to add the body to.\n             * @param gameObject The Game Object that will have the Matter body applied to it.\n             * @param options Matter options config object.",
        "* A Matter Physics Image Game Object.\n             * \n             * An Image is a light-weight Game Object useful for the display of static images in your game,\n             * such as logos, backgrounds, scenery or other non-animated elements. Images can have input\n             * events and physics bodies, or be tweened, tinted or scrolled. The main difference between an\n             * Image and a Sprite is that you cannot animate an Image as they do not have the Animation component.",
        "* \n                 * @param world [description]\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with.\n                 * @param options Matter.js configuration object. Default {}.",
        "* [description]",
        "* Clears all alpha values associated with this Game Object.\n                 * \n                 * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n                 * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n                 * \n                 * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n                 * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n                 * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n                 * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n                 * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n                 * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n                 * \n                 * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n                 * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n                 * are used.\n                 * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.\n                 * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n                 * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n                 * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n                 * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n                 * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n                 * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n                 * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n                 * \n                 * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n                 * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n                 * \n                 * If a mask is already set on this Game Object it will be immediately replaced.\n                 * \n                 * Masks are positioned in global space and are not relative to the Game Object to which they\n                 * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n                 * \n                 * Masks have no impact on physics or input detection. They are purely a rendering component\n                 * that allows you to limit what is visible during the render pass.\n                 * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n                 * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a renderable Game Object.\n                 * A renderable Game Object is one that uses a texture to render with, such as an\n                 * Image, Sprite, Render Texture or BitmapText.\n                 * \n                 * If you do not provide a renderable object, and this Game Object has a texture,\n                 * it will use itself as the object. This means you can call this method to create\n                 * a Bitmap Mask from any renderable Game Object.\n                 * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a Graphics Game Object.\n                 * \n                 * If you do not provide a graphics object, and this Game Object is an instance\n                 * of a Graphics object, then it will use itself to create the mask.\n                 * \n                 * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n                 * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n                 * \n                 * The values are given in the range 0 to 1.\n                 * @param x The horizontal origin value. Default 0.5.\n                 * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n                 * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n                 * @param x The horizontal display origin value. Default 0.\n                 * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n                 * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n                 * This should only be called during the instantiation of the Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n                 * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.\n                 * @param x The horizontal scroll factor of this Game Object.\n                 * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The native (un-scaled) width of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n                 * \n                 * Calling this will adjust the scale.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n                 * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n                 * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n                 * \n                 * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n                 * \n                 * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n                 * changes what is shown when rendered.\n                 * \n                 * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n                 * \n                 * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n                 * half of it, you could call `setCrop(0, 0, 400, 600)`.\n                 * \n                 * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n                 * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n                 * \n                 * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n                 * \n                 * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n                 * \n                 * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n                 * the renderer to skip several internal calculations.\n                 * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n                 * @param y The y coordinate to start the crop from.\n                 * @param width The width of the crop rectangle in pixels.\n                 * @param height The height of the crop rectangle in pixels.",
        "* Sets the texture and frame this Game Object will use to render with.\n                 * \n                 * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n                 * @param key The key of the texture to be used, as stored in the Texture Manager.\n                 * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n                 * \n                 * The Frame has to belong to the current Texture being used.\n                 * \n                 * It can be either a string or an index.\n                 * \n                 * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n                 * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n                 * @param frame The name or index of the frame within the Texture.\n                 * @param updateSize Should this call adjust the size of the Game Object? Default true.\n                 * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n                 * \n                 * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n                 * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n                 * \n                 * The tint works by taking the pixel color values from the Game Objects texture, and then\n                 * multiplying it by the color value of the tint. You can provide either one color value,\n                 * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n                 * per corner. The colors are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n                 * \n                 * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n                 * with those in the tint. You can use this for effects such as making a player flash 'white'\n                 * if hit by something. You can provide either one color value, in which case the whole\n                 * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n                 * are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n                 * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n                 * \n                 * Where 0 is to the right, 90 is down, 180 is left.\n                 * \n                 * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n                 * \n                 * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n                 * @param x The x position of this Game Object. Default 0.\n                 * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n                 * @param z The z position of this Game Object. Default 0.\n                 * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n                 * the given area.\n                 * \n                 * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n                 * \n                 * The position does not factor in the size of this Game Object, meaning that only the origin is\n                 * guaranteed to be within the area.\n                 * @param x The x position of the top-left of the random area. Default 0.\n                 * @param y The y position of the top-left of the random area. Default 0.\n                 * @param width The width of the random area.\n                 * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n                 * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n                 * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n                 * @param x The horizontal scale of this Game Object.\n                 * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n                 * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n                 * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n                 * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n                 * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.\n                 * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.\n                 * @param value The visible state of the Game Object.",
        "* Sets the restitution on the physics object.\n                 * @param value A Number that defines the restitution (elasticity) of the body. The value is always positive and is in the range (0, 1). A value of 0 means collisions may be perfectly inelastic and no bouncing may occur. A value of 0.8 means the body may bounce back with approximately 80% of its kinetic energy. Note that collision response is based on pairs of bodies, and that restitution values are combined with the following formula: `Math.max(bodyA.restitution, bodyB.restitution)`",
        "* Sets the collision category of this Game Object's Matter Body. This number must be a power of two between 2^0 (= 1) and 2^31. Two bodies with different collision groups (see {@link #setCollisionGroup}) will only collide if their collision categories are included in their collision masks (see {@link #setCollidesWith}).\n                 * @param value Unique category bitfield.",
        "* Sets the collision group of this Game Object's Matter Body. If this is zero or two Matter Bodies have different values, they will collide according to the usual rules (see {@link #setCollisionCategory} and {@link #setCollisionGroup}). If two Matter Bodies have the same positive value, they will always collide; if they have the same negative value, they will never collide.\n                 * @param value Unique group index.",
        "* Sets the collision mask for this Game Object's Matter Body. Two Matter Bodies with different collision groups will only collide if each one includes the other's category in its mask based on a bitwise AND, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0` are both true.\n                 * @param categories A unique category bitfield, or an array of them.",
        "* Applies a force to a body.\n                 * @param force A Vector that specifies the force to apply.",
        "* Applies a force to a body from a given position.\n                 * @param position The position in which the force comes from.\n                 * @param force A Vector that specifies the force to apply.",
        "* Apply thrust to the forward position of the body.\n                 * @param speed A speed value to be applied to a directional force.",
        "* Apply thrust to the left position of the body.\n                 * @param speed A speed value to be applied to a directional force.",
        "* Apply thrust to the right position of the body.\n                 * @param speed A speed value to be applied to a directional force.",
        "* Apply thrust to the back position of the body.\n                 * @param speed A speed value to be applied to a directional force.",
        "* Sets new friction values for this Game Object's Matter Body.\n                 * @param value The new friction of the body, between 0 and 1, where 0 allows the Body to slide indefinitely, while 1 allows it to stop almost immediately after a force is applied.\n                 * @param air If provided, the new air resistance of the Body. The higher the value, the faster the Body will slow as it moves through space. 0 means the body has no air resistance.\n                 * @param fstatic If provided, the new static friction of the Body. The higher the value (e.g. 10), the more force it will take to initially get the Body moving when it is nearly stationary. 0 means the body will never \"stick\" when it is nearly stationary.",
        "* Sets a new air resistance for this Game Object's Matter Body. A value of 0 means the Body will never slow as it moves through space. The higher the value, the faster a Body slows when moving through space.\n                 * @param value The new air resistance for the Body.",
        "* Sets a new static friction for this Game Object's Matter Body. A value of 0 means the Body will never \"stick\" when it is nearly stationary. The higher the value (e.g. 10), the more force it will take to initially get the Body moving when it is nearly stationary.\n                 * @param value The new static friction for the Body.",
        "* A togglable function for ignoring world gravity in real-time on the current body.\n                 * @param value Set to true to ignore the effect of world gravity, or false to not ignore it.",
        "* Sets the mass of the Game Object's Matter Body.\n                 * @param value The new mass of the body.",
        "* Sets density of the body.\n                 * @param value The new density of the body.",
        "* The body's center of mass.",
        "* [description]\n                 * @param value [description]",
        "* [description]",
        "* Set the body on a Game Object to a rectangle.\n                 * @param width Width of the rectangle.\n                 * @param height Height of the rectangle.\n                 * @param options [description]",
        "* [description]\n                 * @param radius [description]\n                 * @param options [description]",
        "* Set the body on the Game Object to a polygon shape.\n                 * @param radius The radius of the polygon.\n                 * @param sides The amount of sides creating the polygon.\n                 * @param options A matterjs config object.",
        "* Creates a new matterjs trapezoid body.\n                 * @param width The width of the trapezoid.\n                 * @param height The height of the trapezoid.\n                 * @param slope The angle of slope for the trapezoid.\n                 * @param options A matterjs config object for the body.",
        "* [description]\n                 * @param body [description]\n                 * @param addToWorld [description] Default true.",
        "* [description]\n                 * @param config [description]\n                 * @param options [description]",
        "* [description]\n                 * @param value [description] Default 60.",
        "* [description]\n                 * @param start [description]\n                 * @param end [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param value [description]",
        "* Sets the horizontal velocity of the physics body.\n                 * @param x The horizontal velocity value.",
        "* Sets vertical velocity of the physics body.\n                 * @param y The vertical velocity value.",
        "* Sets both the horizontal and vertical velocity of the physics body.\n                 * @param x The horizontal velocity value.\n                 * @param y The vertical velocity value, it can be either positive or negative. If not given, it will be the same as the `x` value. Default x.",
        "* [description]",
        "* \n                 * @param scene [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* A reference to the `Matter.Vertices` module which contains methods for creating and manipulating sets of vertices.\n                 * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n                 * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* Sets the Matter Engine to run at fixed timestep of 60Hz and enables `autoUpdate`.\n                 * If you have set a custom `getDelta` function then this will override it.",
        "* Sets the Matter Engine to run at fixed timestep of 30Hz and enables `autoUpdate`.\n                 * If you have set a custom `getDelta` function then this will override it.",
        "* Manually advances the physics simulation by one iteration.\n                 * \n                 * You can optionally pass in the `delta` and `correction` values to be used by Engine.update.\n                 * If undefined they use the Matter defaults of 60Hz and no correction.\n                 * \n                 * Calling `step` directly bypasses any checks of `enabled` or `autoUpdate`.\n                 * \n                 * It also ignores any custom `getDelta` functions, as you should be passing the delta\n                 * value in to this call.\n                 * \n                 * You can adjust the number of iterations that Engine.update performs internally.\n                 * Use the Scene Matter Physics config object to set the following properties:\n                 * \n                 * positionIterations (defaults to 6)\n                 * velocityIterations (defaults to 4)\n                 * constraintIterations (defaults to 2)\n                 * \n                 * Adjusting these values can help performance in certain situations, depending on the physics requirements\n                 * of your game.\n                 * @param delta [description] Default 16.666.\n                 * @param correction [description] Default 1.",
        "* A Matter Physics Sprite Game Object.\n             * \n             * A Sprite Game Object is used for the display of both static and animated images in your game.\n             * Sprites can have input events and physics bodies. They can also be tweened, tinted, scrolled\n             * and animated.\n             * \n             * The main difference between a Sprite and an Image Game Object is that you cannot animate Images.\n             * As such, Sprites take a fraction longer to process and have a larger API footprint due to the Animation\n             * Component. If you do not require animation then you can safely use Images to replace Sprites in all cases.",
        "* \n                 * @param world [description]\n                 * @param x The horizontal position of this Game Object in the world.\n                 * @param y The vertical position of this Game Object in the world.\n                 * @param texture The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\n                 * @param frame An optional frame from the Texture this Game Object is rendering with.\n                 * @param options Matter.js configuration object. Default {}.",
        "* [description]",
        "* Clears all alpha values associated with this Game Object.\n                 * \n                 * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n                 * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n                 * \n                 * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n                 * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n                 * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n                 * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n                 * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n                 * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n                 * \n                 * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n                 * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n                 * \n                 * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n                 * \n                 * Under WebGL only the following Blend Modes are available:\n                 * \n                 * * ADD\n                 * * MULTIPLY\n                 * * SCREEN\n                 * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n                 * \n                 * Canvas has more available depending on browser support.\n                 * \n                 * You can also create your own custom Blend Modes in WebGL.\n                 * \n                 * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n                 * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n                 * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n                 * are used.\n                 * @param value The BlendMode value. Either a string or a CONST.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n                 * \n                 * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n                 * of Game Objects, without actually moving their position in the display list.\n                 * \n                 * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n                 * value will always render in front of one with a lower value.\n                 * \n                 * Setting the depth will queue a depth sort event within the Scene.\n                 * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n                 * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n                 * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n                 * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n                 * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n                 * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n                 * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n                 * The returned point is calculated in local space and does not factor in any parent containers\n                 * @param output An object to store the values in. If not provided a new Vector2 will be created.\n                 * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n                 * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n                 * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The Mask this Game Object is using during render.",
        "* Sets the mask that this Game Object will use to render with.\n                 * \n                 * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\n                 * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\n                 * \n                 * If a mask is already set on this Game Object it will be immediately replaced.\n                 * \n                 * Masks are positioned in global space and are not relative to the Game Object to which they\n                 * are applied. The reason for this is that multiple Game Objects can all share the same mask.\n                 * \n                 * Masks have no impact on physics or input detection. They are purely a rendering component\n                 * that allows you to limit what is visible during the render pass.\n                 * @param mask The mask this Game Object will use when rendering.",
        "* Clears the mask that this Game Object was using.\n                 * @param destroyMask Destroy the mask before clearing it? Default false.",
        "* Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a renderable Game Object.\n                 * A renderable Game Object is one that uses a texture to render with, such as an\n                 * Image, Sprite, Render Texture or BitmapText.\n                 * \n                 * If you do not provide a renderable object, and this Game Object has a texture,\n                 * it will use itself as the object. This means you can call this method to create\n                 * a Bitmap Mask from any renderable Game Object.\n                 * @param renderable A renderable Game Object that uses a texture, such as a Sprite.",
        "* Creates and returns a Geometry Mask. This mask can be used by any Game Object,\n                 * including this one.\n                 * \n                 * To create the mask you need to pass in a reference to a Graphics Game Object.\n                 * \n                 * If you do not provide a graphics object, and this Game Object is an instance\n                 * of a Graphics object, then it will use itself to create the mask.\n                 * \n                 * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\n                 * @param graphics A Graphics Game Object. The geometry within it will be used as the mask.",
        "* The horizontal origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n                 * The origin maps the relationship between the size and position of the Game Object.\n                 * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n                 * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n                 * The origin is a normalized value between 0 and 1.\n                 * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n                 * \n                 * The values are given in the range 0 to 1.\n                 * @param x The horizontal origin value. Default 0.5.\n                 * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n                 * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n                 * @param x The horizontal display origin value. Default 0.\n                 * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n                 * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n                 * This should only be called during the instantiation of the Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n                 * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n                 * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n                 * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n                 * \n                 * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n                 * \n                 * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n                 * It does not change the Game Objects actual position values.\n                 * \n                 * A value of 1 means it will move exactly in sync with a camera.\n                 * A value of 0 means it will not move at all, even if the camera moves.\n                 * Other values control the degree to which the camera movement is mapped to this Game Object.\n                 * \n                 * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n                 * calculating physics collisions. Bodies always collide based on their world position, but changing\n                 * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n                 * them from physics bodies if not accounted for in your code.\n                 * @param x The horizontal scroll factor of this Game Object.\n                 * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The native (un-scaled) width of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n                 * \n                 * Changing this value will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or use\n                 * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n                 * \n                 * This value takes into account the scale factor.\n                 * \n                 * Setting this value will adjust the Game Object's scale property.",
        "* Sets the size of this Game Object to be that of the given Frame.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param frame The frame to base the size of this Game Object on.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n                 * \n                 * This will not change the size that the Game Object is rendered in-game.\n                 * For that you need to either set the scale of the Game Object (`setScale`) or call the\n                 * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n                 * to do so by giving pixel values.\n                 * \n                 * If you have enabled this Game Object for input, changing the size will _not_ change the\n                 * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n                 * \n                 * Calling this will adjust the scale.\n                 * @param width The width of this Game Object.\n                 * @param height The height of this Game Object.",
        "* The Texture this Game Object is using to render with.",
        "* The Texture Frame this Game Object is using to render with.",
        "* A boolean flag indicating if this Game Object is being cropped or not.\n                 * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\n                 * Equally, calling `setCrop` with no arguments will reset the crop and disable it.",
        "* Applies a crop to a texture based Game Object, such as a Sprite or Image.\n                 * \n                 * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\n                 * \n                 * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\n                 * changes what is shown when rendered.\n                 * \n                 * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\n                 * \n                 * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\n                 * half of it, you could call `setCrop(0, 0, 400, 600)`.\n                 * \n                 * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\n                 * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\n                 * \n                 * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\n                 * \n                 * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\n                 * \n                 * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\n                 * the renderer to skip several internal calculations.\n                 * @param x The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\n                 * @param y The y coordinate to start the crop from.\n                 * @param width The width of the crop rectangle in pixels.\n                 * @param height The height of the crop rectangle in pixels.",
        "* Sets the texture and frame this Game Object will use to render with.\n                 * \n                 * Textures are referenced by their string-based keys, as stored in the Texture Manager.\n                 * @param key The key of the texture to be used, as stored in the Texture Manager.\n                 * @param frame The name or index of the frame within the Texture.",
        "* Sets the frame this Game Object will use to render with.\n                 * \n                 * The Frame has to belong to the current Texture being used.\n                 * \n                 * It can be either a string or an index.\n                 * \n                 * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\n                 * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\n                 * @param frame The name or index of the frame within the Texture.\n                 * @param updateSize Should this call adjust the size of the Game Object? Default true.\n                 * @param updateOrigin Should this call adjust the origin of the Game Object? Default true.",
        "* Fill or additive?",
        "* Clears all tint values associated with this Game Object.\n                 * \n                 * Immediately sets the color values back to 0xffffff and the tint type to 'additive',\n                 * which results in no visible change to the texture.",
        "* Sets an additive tint on this Game Object.\n                 * \n                 * The tint works by taking the pixel color values from the Game Objects texture, and then\n                 * multiplying it by the color value of the tint. You can provide either one color value,\n                 * in which case the whole Game Object will be tinted in that color. Or you can provide a color\n                 * per corner. The colors are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being an additive tint to a fill based tint set the property `tintFill` to `true`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If no other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* Sets a fill-based tint on this Game Object.\n                 * \n                 * Unlike an additive tint, a fill-tint literally replaces the pixel colors from the texture\n                 * with those in the tint. You can use this for effects such as making a player flash 'white'\n                 * if hit by something. You can provide either one color value, in which case the whole\n                 * Game Object will be rendered in that color. Or you can provide a color per corner. The colors\n                 * are blended together across the extent of the Game Object.\n                 * \n                 * To modify the tint color once set, either call this method again with new values or use the\n                 * `tint` property to set all colors at once. Or, use the properties `tintTopLeft`, `tintTopRight,\n                 * `tintBottomLeft` and `tintBottomRight` to set the corner color values independently.\n                 * \n                 * To remove a tint call `clearTint`.\n                 * \n                 * To swap this from being a fill-tint to an additive tint set the property `tintFill` to `false`.\n                 * @param topLeft The tint being applied to the top-left of the Game Object. If not other values are given this value is applied evenly, tinting the whole Game Object. Default 0xffffff.\n                 * @param topRight The tint being applied to the top-right of the Game Object.\n                 * @param bottomLeft The tint being applied to the bottom-left of the Game Object.\n                 * @param bottomRight The tint being applied to the bottom-right of the Game Object.",
        "* The tint value being applied to the top-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the top-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-left of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the bottom-right of the Game Object.\n                 * This value is interpolated from the corner to the center of the Game Object.",
        "* The tint value being applied to the whole of the Game Object.",
        "* Does this Game Object have a tint applied to it or not?",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n                 * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n                 * \n                 * Where 0 is to the right, 90 is down, 180 is left.\n                 * \n                 * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n                 * \n                 * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n                 * @param x The x position of this Game Object. Default 0.\n                 * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n                 * @param z The z position of this Game Object. Default 0.\n                 * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n                 * the given area.\n                 * \n                 * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n                 * \n                 * The position does not factor in the size of this Game Object, meaning that only the origin is\n                 * guaranteed to be within the area.\n                 * @param x The x position of the top-left of the random area. Default 0.\n                 * @param y The y position of the top-left of the random area. Default 0.\n                 * @param width The width of the random area.\n                 * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n                 * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n                 * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n                 * @param x The horizontal scale of this Game Object.\n                 * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n                 * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n                 * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n                 * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n                 * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n                 * @param tempMatrix The matrix to populate with the values from this Game Object.\n                 * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n                 * \n                 * An invisible Game Object will skip rendering, but will still process update logic.\n                 * @param value The visible state of the Game Object.",
        "* Sets the restitution on the physics object.\n                 * @param value A Number that defines the restitution (elasticity) of the body. The value is always positive and is in the range (0, 1). A value of 0 means collisions may be perfectly inelastic and no bouncing may occur. A value of 0.8 means the body may bounce back with approximately 80% of its kinetic energy. Note that collision response is based on pairs of bodies, and that restitution values are combined with the following formula: `Math.max(bodyA.restitution, bodyB.restitution)`",
        "* Sets the collision category of this Game Object's Matter Body. This number must be a power of two between 2^0 (= 1) and 2^31. Two bodies with different collision groups (see {@link #setCollisionGroup}) will only collide if their collision categories are included in their collision masks (see {@link #setCollidesWith}).\n                 * @param value Unique category bitfield.",
        "* Sets the collision group of this Game Object's Matter Body. If this is zero or two Matter Bodies have different values, they will collide according to the usual rules (see {@link #setCollisionCategory} and {@link #setCollisionGroup}). If two Matter Bodies have the same positive value, they will always collide; if they have the same negative value, they will never collide.\n                 * @param value Unique group index.",
        "* Sets the collision mask for this Game Object's Matter Body. Two Matter Bodies with different collision groups will only collide if each one includes the other's category in its mask based on a bitwise AND, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0` are both true.\n                 * @param categories A unique category bitfield, or an array of them.",
        "* Applies a force to a body.\n                 * @param force A Vector that specifies the force to apply.",
        "* Applies a force to a body from a given position.\n                 * @param position The position in which the force comes from.\n                 * @param force A Vector that specifies the force to apply.",
        "* Apply thrust to the forward position of the body.\n                 * @param speed A speed value to be applied to a directional force.",
        "* Apply thrust to the left position of the body.\n                 * @param speed A speed value to be applied to a directional force.",
        "* Apply thrust to the right position of the body.\n                 * @param speed A speed value to be applied to a directional force.",
        "* Apply thrust to the back position of the body.\n                 * @param speed A speed value to be applied to a directional force.",
        "* Sets new friction values for this Game Object's Matter Body.\n                 * @param value The new friction of the body, between 0 and 1, where 0 allows the Body to slide indefinitely, while 1 allows it to stop almost immediately after a force is applied.\n                 * @param air If provided, the new air resistance of the Body. The higher the value, the faster the Body will slow as it moves through space. 0 means the body has no air resistance.\n                 * @param fstatic If provided, the new static friction of the Body. The higher the value (e.g. 10), the more force it will take to initially get the Body moving when it is nearly stationary. 0 means the body will never \"stick\" when it is nearly stationary.",
        "* Sets a new air resistance for this Game Object's Matter Body. A value of 0 means the Body will never slow as it moves through space. The higher the value, the faster a Body slows when moving through space.\n                 * @param value The new air resistance for the Body.",
        "* Sets a new static friction for this Game Object's Matter Body. A value of 0 means the Body will never \"stick\" when it is nearly stationary. The higher the value (e.g. 10), the more force it will take to initially get the Body moving when it is nearly stationary.\n                 * @param value The new static friction for the Body.",
        "* A togglable function for ignoring world gravity in real-time on the current body.\n                 * @param value Set to true to ignore the effect of world gravity, or false to not ignore it.",
        "* Sets the mass of the Game Object's Matter Body.\n                 * @param value The new mass of the body.",
        "* Sets density of the body.\n                 * @param value The new density of the body.",
        "* The body's center of mass.",
        "* [description]\n                 * @param value [description]",
        "* [description]",
        "* Set the body on a Game Object to a rectangle.\n                 * @param width Width of the rectangle.\n                 * @param height Height of the rectangle.\n                 * @param options [description]",
        "* [description]\n                 * @param radius [description]\n                 * @param options [description]",
        "* Set the body on the Game Object to a polygon shape.\n                 * @param radius The radius of the polygon.\n                 * @param sides The amount of sides creating the polygon.\n                 * @param options A matterjs config object.",
        "* Creates a new matterjs trapezoid body.\n                 * @param width The width of the trapezoid.\n                 * @param height The height of the trapezoid.\n                 * @param slope The angle of slope for the trapezoid.\n                 * @param options A matterjs config object for the body.",
        "* [description]\n                 * @param body [description]\n                 * @param addToWorld [description] Default true.",
        "* [description]\n                 * @param config [description]\n                 * @param options [description]",
        "* [description]\n                 * @param value [description] Default 60.",
        "* [description]\n                 * @param start [description]\n                 * @param end [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param value [description]",
        "* Sets the horizontal velocity of the physics body.\n                 * @param x The horizontal velocity value.",
        "* Sets vertical velocity of the physics body.\n                 * @param y The vertical velocity value.",
        "* Sets both the horizontal and vertical velocity of the physics body.\n                 * @param x The horizontal velocity value.\n                 * @param y The vertical velocity value, it can be either positive or negative. If not given, it will be the same as the `x` value. Default x.",
        "* A wrapper around a Tile that provides access to a corresponding Matter body. A tile can only\n             * have one Matter body associated with it. You can either pass in an existing Matter body for\n             * the tile or allow the constructor to create the corresponding body for you. If the Tile has a\n             * collision group (defined in Tiled), those shapes will be used to create the body. If not, the\n             * tile's rectangle bounding box will be used.\n             * \n             * The corresponding body will be accessible on the Tile itself via Tile.physics.matterBody.\n             * \n             * Note: not all Tiled collision shapes are supported. See\n             * Phaser.Physics.Matter.TileBody#setFromTileCollision for more information.",
        "* \n                 * @param world [description]\n                 * @param tile The target tile that should have a Matter body.\n                 * @param options Options to be used when creating the Matter body.",
        "* The tile object the body is associated with.",
        "* The Matter world the body exists within.",
        "* Sets the current body to a rectangle that matches the bounds of the tile.\n                 * @param options Options to be used when creating the Matter body. See MatterJS.Body for a list of what Matter accepts.",
        "* Sets the current body from the collision group associated with the Tile. This is typically\n                 * set up in Tiled's collision editor.\n                 * \n                 * Note: Matter doesn't support all shapes from Tiled. Rectangles and polygons are directly\n                 * supported. Ellipses are converted into circle bodies. Polylines are treated as if they are\n                 * closed polygons. If a tile has multiple shapes, a multi-part body will be created. Concave\n                 * shapes are supported if poly-decomp library is included. Decomposition is not guaranteed to\n                 * work for complex shapes (e.g. holes), so it's often best to manually decompose a concave\n                 * polygon into multiple convex polygons yourself.\n                 * @param options Options to be used when creating the Matter body. See MatterJS.Body for a list of what Matter accepts.",
        "* Sets the current body to the given body. This will remove the previous body, if one already\n                 * exists.\n                 * @param body The new Matter body to use.\n                 * @param addToWorld Whether or not to add the body to the Matter world. Default true.",
        "* Removes the current body from the TileBody and from the Matter world",
        "* Removes the current body from the tile and the world.",
        "* Sets the restitution on the physics object.\n                 * @param value A Number that defines the restitution (elasticity) of the body. The value is always positive and is in the range (0, 1). A value of 0 means collisions may be perfectly inelastic and no bouncing may occur. A value of 0.8 means the body may bounce back with approximately 80% of its kinetic energy. Note that collision response is based on pairs of bodies, and that restitution values are combined with the following formula: `Math.max(bodyA.restitution, bodyB.restitution)`",
        "* Sets the collision category of this Game Object's Matter Body. This number must be a power of two between 2^0 (= 1) and 2^31. Two bodies with different collision groups (see {@link #setCollisionGroup}) will only collide if their collision categories are included in their collision masks (see {@link #setCollidesWith}).\n                 * @param value Unique category bitfield.",
        "* Sets the collision group of this Game Object's Matter Body. If this is zero or two Matter Bodies have different values, they will collide according to the usual rules (see {@link #setCollisionCategory} and {@link #setCollisionGroup}). If two Matter Bodies have the same positive value, they will always collide; if they have the same negative value, they will never collide.\n                 * @param value Unique group index.",
        "* Sets the collision mask for this Game Object's Matter Body. Two Matter Bodies with different collision groups will only collide if each one includes the other's category in its mask based on a bitwise AND, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0` are both true.\n                 * @param categories A unique category bitfield, or an array of them.",
        "* Sets new friction values for this Game Object's Matter Body.\n                 * @param value The new friction of the body, between 0 and 1, where 0 allows the Body to slide indefinitely, while 1 allows it to stop almost immediately after a force is applied.\n                 * @param air If provided, the new air resistance of the Body. The higher the value, the faster the Body will slow as it moves through space. 0 means the body has no air resistance.\n                 * @param fstatic If provided, the new static friction of the Body. The higher the value (e.g. 10), the more force it will take to initially get the Body moving when it is nearly stationary. 0 means the body will never \"stick\" when it is nearly stationary.",
        "* Sets a new air resistance for this Game Object's Matter Body. A value of 0 means the Body will never slow as it moves through space. The higher the value, the faster a Body slows when moving through space.\n                 * @param value The new air resistance for the Body.",
        "* Sets a new static friction for this Game Object's Matter Body. A value of 0 means the Body will never \"stick\" when it is nearly stationary. The higher the value (e.g. 10), the more force it will take to initially get the Body moving when it is nearly stationary.\n                 * @param value The new static friction for the Body.",
        "* A togglable function for ignoring world gravity in real-time on the current body.\n                 * @param value Set to true to ignore the effect of world gravity, or false to not ignore it.",
        "* Sets the mass of the Game Object's Matter Body.\n                 * @param value The new mass of the body.",
        "* Sets density of the body.\n                 * @param value The new density of the body.",
        "* The body's center of mass.",
        "* [description]\n                 * @param value [description]",
        "* [description]",
        "* [description]\n                 * @param value [description] Default 60.",
        "* [description]\n                 * @param start [description]\n                 * @param end [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]\n                 * @param value [description]",
        "* [description]",
        "* Use PhysicsEditorParser.parseBody() to build a Matter body object, based on a physics data file\n             * created and exported with PhysicsEditor (https://www.codeandweb.com/physicseditor).",
        "* Parses a body element exported by PhysicsEditor.\n                 * @param x x position.\n                 * @param y y position.\n                 * @param w width.\n                 * @param h height.\n                 * @param config body configuration and fixture (child body) definitions.",
        "* Parses an element of the \"fixtures\" list exported by PhysicsEditor\n                 * @param fixtureConfig the fixture object to parse",
        "* Parses the \"vertices\" lists exported by PhysicsEditor.\n                 * @param vertexSets The vertex lists to parse.\n                 * @param options Matter body options.",
        "* A Pointer Constraint is a special type of constraint that allows you to click\n             * and drag bodies in a Matter World. It monitors the active Pointers in a Scene,\n             * and when one is pressed down it checks to see if that hit any part of any active\n             * body in the world. If it did, and the body has input enabled, it will begin to\n             * drag it until either released, or you stop it via the `stopDrag` method.\n             * \n             * You can adjust the stiffness, length and other properties of the constraint via\n             * the `options` object on creation.",
        "* \n                 * @param scene A reference to the Scene to which this Pointer Constraint belongs.\n                 * @param world A reference to the Matter World instance to which this Constraint belongs.\n                 * @param options A Constraint configuration object.",
        "* A reference to the Scene to which this Pointer Constraint belongs.\n                 * This is the same Scene as the Matter World instance.",
        "* A reference to the Matter World instance to which this Constraint belongs.",
        "* The Camera the Pointer was interacting with when the input\n                 * down event was processed.",
        "* A reference to the Input Pointer that activated this Constraint.\n                 * This is set in the `onDown` handler.",
        "* Is this Constraint active or not?\n                 * \n                 * An active constraint will be processed each update. An inactive one will be skipped.\n                 * Use this to toggle a Pointer Constraint on and off.",
        "* The internal transformed position.",
        "* The body that is currently being dragged, if any.",
        "* The part of the body that was clicked on to start the drag.",
        "* The native Matter Constraint that is used to attach to bodies.",
        "* A Pointer has been pressed down onto the Scene.\n                 * \n                 * If this Constraint doesn't have an active Pointer then a hit test is\n                 * run against all active bodies in the world. If one is found it is bound\n                 * to this constraint and the drag begins.\n                 * @param pointer A reference to the Pointer that was pressed.",
        "* Scans all active bodies in the current Matter World to see if any of them\n                 * are hit by the Pointer. The _first one_ found to hit is set as the active contraint\n                 * body.",
        "* Scans the current body to determine if a part of it was clicked on.\n                 * If a part is found the body is set as the `constraint.bodyB` property,\n                 * as well as the `body` property of this class. The part is also set.\n                 * @param body The Matter Body to check.\n                 * @param position A translated hit test position.",
        "* Internal update handler. Called in the Matter BEFORE_UPDATE step.",
        "* Stops the Pointer Constraint from dragging the body any further.\n                 * \n                 * This is called automatically if the Pointer is released while actively\n                 * dragging a body. Or, you can call it manually to release a body from a\n                 * constraint without having to first release the pointer.",
        "* Destroys this Pointer Constraint instance and all of its references.",
        "* [description]",
        "* \n                 * @param scene The Scene to which this Matter World instance belongs.\n                 * @param config [description]",
        "* The Scene to which this Matter World instance belongs.",
        "* An instance of the MatterJS Engine.",
        "* A `World` composite object that will contain all simulated bodies and constraints.",
        "* An object containing the 4 wall bodies that bound the physics world.",
        "* A flag that toggles if the world is enabled or not.",
        "* The correction argument is an optional Number that specifies the time correction factor to apply to the update.\n                 * This can help improve the accuracy of the simulation in cases where delta is changing between updates.\n                 * The value of correction is defined as delta / lastDelta, i.e. the percentage change of delta over the last step.\n                 * Therefore the value is always 1 (no correction) when delta constant (or when no correction is desired, which is the default).\n                 * See the paper on Time Corrected Verlet for more information.",
        "* This function is called every time the core game loop steps, which is bound to the\n                 * Request Animation Frame frequency unless otherwise modified.\n                 * \n                 * The function is passed two values: `time` and `delta`, both of which come from the game step values.\n                 * \n                 * It must return a number. This number is used as the delta value passed to Matter.Engine.update.\n                 * \n                 * You can override this function with your own to define your own timestep.\n                 * \n                 * If you need to update the Engine multiple times in a single game step then call\n                 * `World.update` as many times as required. Each call will trigger the `getDelta` function.\n                 * If you wish to have full control over when the Engine updates then see the property `autoUpdate`.\n                 * \n                 * You can also adjust the number of iterations that Engine.update performs.\n                 * Use the Scene Matter Physics config object to set the following properties:\n                 * \n                 * positionIterations (defaults to 6)\n                 * velocityIterations (defaults to 4)\n                 * constraintIterations (defaults to 2)\n                 * \n                 * Adjusting these values can help performance in certain situations, depending on the physics requirements\n                 * of your game.",
        "* Automatically call Engine.update every time the game steps.\n                 * If you disable this then you are responsible for calling `World.step` directly from your game.\n                 * If you call `set60Hz` or `set30Hz` then `autoUpdate` is reset to `true`.",
        "* A flag that controls if the debug graphics will be drawn to or not.",
        "* An instance of the Graphics object the debug bodies are drawn to, if enabled.",
        "* The default configuration values.",
        "* [description]",
        "* Sets the bounds of the Physics world to match the given world pixel dimensions.\n                 * You can optionally set which 'walls' to create: left, right, top or bottom.\n                 * If none of the walls are given it will default to use the walls settings it had previously.\n                 * I.e. if you previously told it to not have the left or right walls, and you then adjust the world size\n                 * the newly created bounds will also not have the left and right walls.\n                 * Explicitly state them in the parameters to override this.\n                 * @param x The x coordinate of the top-left corner of the bounds. Default 0.\n                 * @param y The y coordinate of the top-left corner of the bounds. Default 0.\n                 * @param width The width of the bounds.\n                 * @param height The height of the bounds.\n                 * @param thickness The thickness of each wall, in pixels. Default 128.\n                 * @param left If true will create the left bounds wall. Default true.\n                 * @param right If true will create the right bounds wall. Default true.\n                 * @param top If true will create the top bounds wall. Default true.\n                 * @param bottom If true will create the bottom bounds wall. Default true.",
        "* [description]\n                 * @param add [description]\n                 * @param position [description]\n                 * @param x [description]\n                 * @param y [description]\n                 * @param width [description]\n                 * @param height [description]",
        "* [description]",
        "* Sets the world's gravity and gravity scale to 0.",
        "* Sets the world's gravity\n                 * @param x The world gravity x component. Default 0.\n                 * @param y The world gravity y component. Default 1.\n                 * @param scale [description]",
        "* Creates a rectangle Matter body and adds it to the world.\n                 * @param x The horizontal position of the body in the world.\n                 * @param y The vertical position of the body in the world.\n                 * @param width The width of the body.\n                 * @param height The height of the body.\n                 * @param options Optional Matter configuration object.",
        "* Adds an object to the world.\n                 * @param object Can be single or an array, and can be a body, composite or constraint",
        "* [description]\n                 * @param object The object to be removed from the world.\n                 * @param deep [description]",
        "* [description]\n                 * @param constraint [description]\n                 * @param deep [description]",
        "* Adds MatterTileBody instances for all the colliding tiles within the given tilemap layer. Set\n                 * the appropriate tiles in your layer to collide before calling this method!\n                 * @param tilemapLayer An array of tiles.\n                 * @param options Options to be passed to the MatterTileBody constructor. {@ee Phaser.Physics.Matter.TileBody}",
        "* Adds MatterTileBody instances for the given tiles. This adds bodies regardless of whether the\n                 * tiles are set to collide or not.\n                 * @param tiles An array of tiles.\n                 * @param options Options to be passed to the MatterTileBody constructor. {@see Phaser.Physics.Matter.TileBody}",
        "* [description]\n                 * @param isNonColliding [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]\n                 * @param time The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\n                 * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* Manually advances the physics simulation by one iteration.\n                 * \n                 * You can optionally pass in the `delta` and `correction` values to be used by Engine.update.\n                 * If undefined they use the Matter defaults of 60Hz and no correction.\n                 * \n                 * Calling `step` directly bypasses any checks of `enabled` or `autoUpdate`.\n                 * \n                 * It also ignores any custom `getDelta` functions, as you should be passing the delta\n                 * value in to this call.\n                 * \n                 * You can adjust the number of iterations that Engine.update performs internally.\n                 * Use the Scene Matter Physics config object to set the following properties:\n                 * \n                 * positionIterations (defaults to 6)\n                 * velocityIterations (defaults to 4)\n                 * constraintIterations (defaults to 2)\n                 * \n                 * Adjusting these values can help performance in certain situations, depending on the physics requirements\n                 * of your game.\n                 * @param delta [description] Default 16.666.\n                 * @param correction [description] Default 1.",
        "* Runs the Matter Engine.update at a fixed timestep of 60Hz.",
        "* Runs the Matter Engine.update at a fixed timestep of 30Hz.",
        "* [description]\n                 * @param path [description]\n                 * @param points [description]",
        "* Will remove all Matter physics event listeners and clear the matter physics world,\n                 * engine and any debug graphics, if any.",
        "* Will remove all Matter physics event listeners and clear the matter physics world,\n                 * engine and any debug graphics, if any.\n                 * \n                 * After destroying the world it cannot be re-used again.",
        "* A Global Plugin is installed just once into the Game owned Plugin Manager.\n         * It can listen for Game events and respond to them.",
        "* \n             * @param pluginManager A reference to the Plugin Manager.",
        "* A handy reference to the Plugin Manager that is responsible for this plugin.\n             * Can be used as a route to gain access to game systems and  events.",
        "* A reference to the Game instance this plugin is running under.",
        "* A reference to the Scene that has installed this plugin.\n             * Only set if it's a Scene Plugin, otherwise `null`.\n             * This property is only set when the plugin is instantiated and added to the Scene, not before.\n             * You cannot use it during the `init` method, but you can during the `boot` method.",
        "* A reference to the Scene Systems of the Scene that has installed this plugin.\n             * Only set if it's a Scene Plugin, otherwise `null`.\n             * This property is only set when the plugin is instantiated and added to the Scene, not before.\n             * You cannot use it during the `init` method, but you can during the `boot` method.",
        "* Called by the PluginManager when this plugin is first instantiated.\n             * It will never be called again on this instance.\n             * In here you can set-up whatever you need for this plugin to run.\n             * If a plugin is set to automatically start then `BasePlugin.start` will be called immediately after this.\n             * @param data A value specified by the user, if any, from the `data` property of the plugin's configuration object (if started at game boot) or passed in the PluginManager's `install` method (if started manually).",
        "* Called by the PluginManager when this plugin is started.\n             * If a plugin is stopped, and then started again, this will get called again.\n             * Typically called immediately after `BasePlugin.init`.",
        "* Called by the PluginManager when this plugin is stopped.\n             * The game code has requested that your plugin stop doing whatever it does.\n             * It is now considered as 'inactive' by the PluginManager.\n             * Handle that process here (i.e. stop listening for events, etc)\n             * If the plugin is started again then `BasePlugin.start` will be called again.",
        "* If this is a Scene Plugin (i.e. installed into a Scene) then this method is called when the Scene boots.\n             * By this point the plugin properties `scene` and `systems` will have already been set.\n             * In here you can listen for Scene events and set-up whatever you need for this plugin to run.",
        "* Game instance has been destroyed.\n             * You must release everything in here, all references, all objects, free it all up.",
        "* These are the Global Managers that are created by the Phaser.Game instance.",
        "* These are the core plugins that are installed into every Scene.Systems instance, no matter what.",
        "* These plugins are created in Scene.Systems in addition to the CoreScenePlugins.",
        "* These are the Global Managers that are created by the Phaser.Game instance.\n         * They are referenced from Scene.Systems so that plugins can use them.",
        "* These are the core plugins that are installed into every Scene.Systems instance, no matter what.\n         * They are optionally exposed in the Scene as well (see the InjectionMap for details)\n         * \n         * They are created in the order in which they appear in this array and EventEmitter is always first.",
        "* These plugins are created in Scene.Systems in addition to the CoreScenePlugins.\n         * \n         * You can elect not to have these plugins by either creating a DefaultPlugins object as part\n         * of the Game Config, by creating a Plugins object as part of a Scene Config, or by modifying this array\n         * and building your own bundle.\n         * \n         * They are optionally exposed in the Scene as well (see the InjectionMap for details)\n         * \n         * They are always created in the order in which they appear in the array.",
        "* Static method called directly by the Core internal Plugins.\n             * Key is a reference used to get the plugin from the plugins object (i.e. InputPlugin)\n             * Plugin is the object to instantiate to create the plugin\n             * Mapping is what the plugin is injected into the Scene.Systems as (i.e. input)\n             * @param key A reference used to get this plugin from the plugin cache.\n             * @param plugin The plugin to be stored. Should be the core object, not instantiated.\n             * @param mapping If this plugin is to be injected into the Scene Systems, this is the property key map used.\n             * @param custom Core Scene plugin or a Custom Scene plugin? Default false.",
        "* Stores a custom plugin in the global plugin cache.\n             * The key must be unique, within the scope of the cache.\n             * @param key A reference used to get this plugin from the plugin cache.\n             * @param plugin The plugin to be stored. Should be the core object, not instantiated.\n             * @param mapping If this plugin is to be injected into the Scene Systems, this is the property key map used.\n             * @param data A value to be passed to the plugin's `init` method.",
        "* Checks if the given key is already being used in the core plugin cache.\n             * @param key The key to check for.",
        "* Checks if the given key is already being used in the custom plugin cache.\n             * @param key The key to check for.",
        "* Returns the core plugin object from the cache based on the given key.\n             * @param key The key of the core plugin to get.",
        "* Returns the custom plugin object from the cache based on the given key.\n             * @param key The key of the custom plugin to get.",
        "* Returns an object from the custom cache based on the given key that can be instantiated.\n             * @param key The key of the custom plugin to get.",
        "* Removes a core plugin based on the given key.\n             * @param key The key of the core plugin to remove.",
        "* Removes a custom plugin based on the given key.\n             * @param key The key of the custom plugin to remove.",
        "* Removes all Core Plugins.\n             * \n             * This includes all of the internal system plugins that Phaser needs, like the Input Plugin and Loader Plugin.\n             * So be sure you only call this if you do not wish to run Phaser again.",
        "* Removes all Custom Plugins.",
        "* The PluginManager is responsible for installing and adding plugins to Phaser.\n         * \n         * It is a global system and therefore belongs to the Game instance, not a specific Scene.\n         * \n         * It works in conjunction with the PluginCache. Core internal plugins automatically register themselves \n         * with the Cache, but it's the Plugin Manager that is responsible for injecting them into the Scenes.\n         * \n         * There are two types of plugin:\n         * \n         * 1. A Global Plugin\n         * 2. A Scene Plugin\n         * \n         * A Global Plugin is a plugin that lives within the Plugin Manager rather than a Scene. You can get\n         * access to it by calling `PluginManager.get` and providing a key. Any Scene that requests a plugin in\n         * this way will all get access to the same plugin instance, allowing you to use a single plugin across\n         * multiple Scenes.\n         * \n         * A Scene Plugin is a plugin dedicated to running within a Scene. These are different to Global Plugins\n         * in that their instances do not live within the Plugin Manager, but within the Scene Systems class instead.\n         * And that every Scene created is given its own unique instance of a Scene Plugin. Examples of core Scene\n         * Plugins include the Input Plugin, the Tween Plugin and the physics Plugins.\n         * \n         * You can add a plugin to Phaser in three different ways:\n         * \n         * 1. Preload it\n         * 2. Include it in your source code and install it via the Game Config\n         * 3. Include it in your source code and install it within a Scene\n         * \n         * For examples of all of these approaches please see the Phaser 3 Examples Repo `plugins` folder.\n         * \n         * For information on creating your own plugin please see the Phaser 3 Plugin Template.",
        "* \n             * @param game The game instance that owns this Plugin Manager.",
        "* The game instance that owns this Plugin Manager.",
        "* The global plugins currently running and managed by this Plugin Manager.\n             * A plugin must have been started at least once in order to appear in this list.",
        "* A list of plugin keys that should be installed into Scenes as well as the Core Plugins.",
        "* Run once the game has booted and installs all of the plugins configured in the Game Config.",
        "* Called by the Scene Systems class. Tells the plugin manager to install all Scene plugins into it.\n             * \n             * First it will install global references, i.e. references from the Game systems into the Scene Systems (and Scene if mapped.)\n             * Then it will install Core Scene Plugins followed by Scene Plugins registered with the PluginManager.\n             * Finally it will install any references to Global Plugins that have a Scene mapping property into the Scene itself.\n             * @param sys The Scene Systems class to install all the plugins in to.\n             * @param globalPlugins An array of global plugins to install.\n             * @param scenePlugins An array of scene plugins to install.",
        "* Called by the Scene Systems class. Returns a list of plugins to be installed.",
        "* Installs a new Scene Plugin into the Plugin Manager and optionally adds it\n             * to the given Scene as well. A Scene Plugin added to the manager in this way\n             * will be automatically installed into all new Scenes using the key and mapping given.\n             * \n             * The `key` property is what the plugin is injected into Scene.Systems as.\n             * The `mapping` property is optional, and if specified is what the plugin is installed into\n             * the Scene as. For example:\n             * \n             * ```javascript\n             * this.plugins.installScenePlugin('powerupsPlugin', pluginCode, 'powerups');\n             * \n             * // and from within the scene:\n             * this.sys.powerupsPlugin; // key value\n             * this.powerups; // mapping value\n             * ```\n             * \n             * This method is called automatically by Phaser if you install your plugins using either the\n             * Game Configuration object, or by preloading them via the Loader.\n             * @param key The property key that will be used to add this plugin to Scene.Systems.\n             * @param plugin The plugin code. This should be the non-instantiated version.\n             * @param mapping If this plugin is injected into the Phaser.Scene class, this is the property key to use.\n             * @param addToScene Optionally automatically add this plugin to the given Scene.",
        "* Installs a new Global Plugin into the Plugin Manager and optionally starts it running.\n             * A global plugin belongs to the Plugin Manager, rather than a specific Scene, and can be accessed\n             * and used by all Scenes in your game.\n             * \n             * The `key` property is what you use to access this plugin from the Plugin Manager.\n             * \n             * ```javascript\n             * this.plugins.install('powerupsPlugin', pluginCode);\n             * \n             * // and from within the scene:\n             * this.plugins.get('powerupsPlugin');\n             * ```\n             * \n             * This method is called automatically by Phaser if you install your plugins using either the\n             * Game Configuration object, or by preloading them via the Loader.\n             * \n             * The same plugin can be installed multiple times into the Plugin Manager by simply giving each\n             * instance its own unique key.\n             * @param key The unique handle given to this plugin within the Plugin Manager.\n             * @param plugin The plugin code. This should be the non-instantiated version.\n             * @param start Automatically start the plugin running? This is always `true` if you provide a mapping value. Default false.\n             * @param mapping If this plugin is injected into the Phaser.Scene class, this is the property key to use.\n             * @param data A value passed to the plugin's `init` method.",
        "* Gets an index of a global plugin based on the given key.\n             * @param key The unique plugin key.",
        "* Gets a global plugin based on the given key.\n             * @param key The unique plugin key.",
        "* Checks if the given global plugin, based on its key, is active or not.\n             * @param key The unique plugin key.",
        "* Starts a global plugin running.\n             * \n             * If the plugin was previously active then calling `start` will reset it to an active state and then\n             * call its `start` method.\n             * \n             * If the plugin has never been run before a new instance of it will be created within the Plugin Manager,\n             * its active state set and then both of its `init` and `start` methods called, in that order.\n             * \n             * If the plugin is already running under the given key then nothing happens.\n             * @param key The key of the plugin to start.\n             * @param runAs Run the plugin under a new key. This allows you to run one plugin multiple times.",
        "* Stops a global plugin from running.\n             * \n             * If the plugin is active then its active state will be set to false and the plugins `stop` method\n             * will be called.\n             * \n             * If the plugin is not already running, nothing will happen.\n             * @param key The key of the plugin to stop.",
        "* Gets a global plugin from the Plugin Manager based on the given key and returns it.\n             * \n             * If it cannot find an active plugin based on the key, but there is one in the Plugin Cache with the same key,\n             * then it will create a new instance of the cached plugin and return that.\n             * @param key The key of the plugin to get.\n             * @param autoStart Automatically start a new instance of the plugin if found in the cache, but not actively running. Default true.",
        "* Returns the plugin class from the cache.\n             * Used internally by the Plugin Manager.\n             * @param key The key of the plugin to get.",
        "* Removes a global plugin from the Plugin Manager and Plugin Cache.\n             * \n             * It is up to you to remove all references to this plugin that you may hold within your game code.\n             * @param key The key of the plugin to remove.",
        "* Removes a scene plugin from the Plugin Manager and Plugin Cache.\n             * \n             * This will not remove the plugin from any active Scenes that are already using it.\n             * \n             * It is up to you to remove all references to this plugin that you may hold within your game code.\n             * @param key The key of the plugin to remove.",
        "* Registers a new type of Game Object with the global Game Object Factory and / or Creator.\n             * This is usually called from within your Plugin code and is a helpful short-cut for creating\n             * new Game Objects.\n             * \n             * The key is the property that will be injected into the factories and used to create the\n             * Game Object. For example:\n             * \n             * ```javascript\n             * this.plugins.registerGameObject('clown', clownFactoryCallback, clownCreatorCallback);\n             * // later in your game code:\n             * this.add.clown();\n             * this.make.clown();\n             * ```\n             * \n             * The callbacks are what are called when the factories try to create a Game Object\n             * matching the given key. It's important to understand that the callbacks are invoked within\n             * the context of the GameObjectFactory. In this context there are several properties available\n             * to use:\n             * \n             * this.scene - A reference to the Scene that owns the GameObjectFactory.\n             * this.displayList - A reference to the Display List the Scene owns.\n             * this.updateList - A reference to the Update List the Scene owns.\n             * \n             * See the GameObjectFactory and GameObjectCreator classes for more details.\n             * Any public property or method listed is available from your callbacks under `this`.\n             * @param key The key of the Game Object that the given callbacks will create, i.e. `image`, `sprite`.\n             * @param factoryCallback The callback to invoke when the Game Object Factory is called.\n             * @param creatorCallback The callback to invoke when the Game Object Creator is called.",
        "* Registers a new file type with the global File Types Manager, making it available to all Loader\n             * Plugins created after this.\n             * \n             * This is usually called from within your Plugin code and is a helpful short-cut for creating\n             * new loader file types.\n             * \n             * The key is the property that will be injected into the Loader Plugin and used to load the\n             * files. For example:\n             * \n             * ```javascript\n             * this.plugins.registerFileType('wad', doomWadLoaderCallback);\n             * // later in your preload code:\n             * this.load.wad();\n             * ```\n             * \n             * The callback is what is called when the loader tries to load a file  matching the given key.\n             * It's important to understand that the callback is invoked within\n             * the context of the LoaderPlugin. In this context there are several properties / methods available\n             * to use:\n             * \n             * this.addFile - A method to add the new file to the load queue.\n             * this.scene - The Scene that owns the Loader Plugin instance.\n             * \n             * See the LoaderPlugin class for more details. Any public property or method listed is available from\n             * your callback under `this`.\n             * @param key The key of the Game Object that the given callbacks will create, i.e. `image`, `sprite`.\n             * @param callback The callback to invoke when the Game Object Factory is called.\n             * @param addToScene Optionally add this file type into the Loader Plugin owned by the given Scene.",
        "* Destroys this Plugin Manager and all associated plugins.\n             * It will iterate all plugins found and call their `destroy` methods.\n             * \n             * The PluginCache will remove all custom plugins.",
        "* A Scene Level Plugin is installed into every Scene and belongs to that Scene.\n         * It can listen for Scene events and respond to them.\n         * It can map itself to a Scene property, or into the Scene Systems, or both.",
        "* \n             * @param scene A reference to the Scene that has installed this plugin.\n             * @param pluginManager A reference to the Plugin Manager.",
        "* This method is called when the Scene boots. It is only ever called once.\n             * \n             * By this point the plugin properties `scene` and `systems` will have already been set.\n             * \n             * In here you can listen for Scene events and set-up whatever you need for this plugin to run.\n             * Here are the Scene events you can listen to:\n             * \n             * start\n             * ready\n             * preupdate\n             * update\n             * postupdate\n             * resize\n             * pause\n             * resume\n             * sleep\n             * wake\n             * transitioninit\n             * transitionstart\n             * transitioncomplete\n             * transitionout\n             * shutdown\n             * destroy\n             * \n             * At the very least you should offer a destroy handler for when the Scene closes down, i.e:\n             * \n             * ```javascript\n             * var eventEmitter = this.systems.events;\n             * eventEmitter.once('destroy', this.sceneDestroy, this);\n             * ```",
        "* Phaser Blend Modes.",
        "* Skips the Blend Mode check in the renderer.",
        "* Normal blend mode. For Canvas and WebGL.\n         * This is the default setting and draws new shapes on top of the existing canvas content.",
        "* Add blend mode. For Canvas and WebGL.\n         * Where both shapes overlap the color is determined by adding color values.",
        "* Multiply blend mode. For Canvas and WebGL.\n         * The pixels are of the top layer are multiplied with the corresponding pixel of the bottom layer. A darker picture is the result.",
        "* Screen blend mode. For Canvas and WebGL.\n         * The pixels are inverted, multiplied, and inverted again. A lighter picture is the result (opposite of multiply)",
        "* Overlay blend mode. For Canvas only.\n         * A combination of multiply and screen. Dark parts on the base layer become darker, and light parts become lighter.",
        "* Darken blend mode. For Canvas only.\n         * Retains the darkest pixels of both layers.",
        "* Lighten blend mode. For Canvas only.\n         * Retains the lightest pixels of both layers.",
        "* Color Dodge blend mode. For Canvas only.\n         * Divides the bottom layer by the inverted top layer.",
        "* Color Burn blend mode. For Canvas only.\n         * Divides the inverted bottom layer by the top layer, and then inverts the result.",
        "* Hard Light blend mode. For Canvas only.\n         * A combination of multiply and screen like overlay, but with top and bottom layer swapped.",
        "* Soft Light blend mode. For Canvas only.\n         * A softer version of hard-light. Pure black or white does not result in pure black or white.",
        "* Difference blend mode. For Canvas only.\n         * Subtracts the bottom layer from the top layer or the other way round to always get a positive value.",
        "* Exclusion blend mode. For Canvas only.\n         * Like difference, but with lower contrast.",
        "* Hue blend mode. For Canvas only.\n         * Preserves the luma and chroma of the bottom layer, while adopting the hue of the top layer.",
        "* Saturation blend mode. For Canvas only.\n         * Preserves the luma and hue of the bottom layer, while adopting the chroma of the top layer.",
        "* Color blend mode. For Canvas only.\n         * Preserves the luma of the bottom layer, while adopting the hue and chroma of the top layer.",
        "* Luminosity blend mode. For Canvas only.\n         * Preserves the hue and chroma of the bottom layer, while adopting the luma of the top layer.",
        "* Alpha erase blend mode. For Canvas and WebGL.",
        "* Source-in blend mode. For Canvas only.\n         * The new shape is drawn only where both the new shape and the destination canvas overlap. Everything else is made transparent.",
        "* Source-out blend mode. For Canvas only.\n         * The new shape is drawn where it doesn't overlap the existing canvas content.",
        "* Source-out blend mode. For Canvas only.\n         * The new shape is only drawn where it overlaps the existing canvas content.",
        "* Destination-over blend mode. For Canvas only.\n         * New shapes are drawn behind the existing canvas content.",
        "* Destination-in blend mode. For Canvas only.\n         * The existing canvas content is kept where both the new shape and existing canvas content overlap. Everything else is made transparent.",
        "* Destination-out blend mode. For Canvas only.\n         * The existing content is kept where it doesn't overlap the new shape.",
        "* Destination-out blend mode. For Canvas only.\n         * The existing canvas is only kept where it overlaps the new shape. The new shape is drawn behind the canvas content.",
        "* Lighten blend mode. For Canvas only.\n         * Where both shapes overlap the color is determined by adding color values.",
        "* Copy blend mode. For Canvas only.\n         * Only the new shape is shown.",
        "* xor blend mode. For Canvas only.\n         * Shapes are made transparent where both overlap and drawn normal everywhere else.",
        "* The Canvas Renderer is responsible for managing 2D canvas rendering contexts, including the one used by the Game's canvas. It tracks the internal state of a given context and can renderer textured Game Objects to it, taking into account alpha, blending, and scaling.",
        "* \n                 * @param game The Phaser Game instance that owns this renderer.",
        "* The Phaser Game instance that owns this renderer.",
        "* A constant which allows the renderer to be easily identified as a Canvas Renderer.",
        "* The total number of Game Objects which were rendered in a frame.",
        "* The width of the canvas being rendered to.",
        "* The height of the canvas being rendered to.",
        "* The local configuration settings of the CanvasRenderer.",
        "* The scale mode which should be used by the CanvasRenderer.",
        "* The canvas element which the Game uses.",
        "* The canvas context used to render all Cameras in all Scenes during the game loop.",
        "* The canvas context currently used by the CanvasRenderer for all rendering operations.",
        "* The blend modes supported by the Canvas Renderer.\n                 * \n                 * This object maps the {@link Phaser.BlendModes} to canvas compositing operations.",
        "* The scale mode currently in use by the Canvas Renderer.",
        "* Details about the currently scheduled snapshot.\n                 * \n                 * If a non-null `callback` is set in this object, a snapshot of the canvas will be taken after the current frame is fully rendered.",
        "* Prepares the game canvas for rendering.",
        "* The event handler that manages the `resize` event dispatched by the Scale Manager.\n                 * @param gameSize The default Game Size object. This is the un-modified game dimensions.\n                 * @param baseSize The base Size object. The game dimensions multiplied by the resolution. The canvas width / height values match this.\n                 * @param displaySize The display Size object. The size of the canvas style width / height attributes.\n                 * @param resolution The Scale Manager resolution setting.",
        "* Resize the main game canvas.\n                 * @param width The new width of the renderer.\n                 * @param height The new height of the renderer.",
        "* A NOOP method for handling lost context. Intentionally empty.\n                 * @param callback Ignored parameter.",
        "* A NOOP method for handling restored context. Intentionally empty.\n                 * @param callback Ignored parameter.",
        "* Resets the transformation matrix of the current context to the identity matrix, thus resetting any transformation.",
        "* Sets the blend mode (compositing operation) of the current context.\n                 * @param blendMode The new blend mode which should be used.",
        "* Changes the Canvas Rendering Context that all draw operations are performed against.\n                 * @param ctx The new Canvas Rendering Context to draw everything to. Leave empty to reset to the Game Canvas.",
        "* Sets the global alpha of the current context.\n                 * @param alpha The new alpha to use, where 0 is fully transparent and 1 is fully opaque.",
        "* Called at the start of the render loop.",
        "* Renders the Scene to the given Camera.\n                 * @param scene The Scene to render.\n                 * @param children The Game Objects within the Scene to be rendered.\n                 * @param interpolationPercentage The interpolation percentage to apply. Currently unused.\n                 * @param camera The Scene Camera to render with.",
        "* Restores the game context's global settings and takes a snapshot if one is scheduled.\n                 * \n                 * The post-render step happens after all Cameras in all Scenes have been rendered.",
        "* Schedules a snapshot of the entire game viewport to be taken after the current frame is rendered.\n                 * \n                 * To capture a specific area see the `snapshotArea` method. To capture a specific pixel, see `snapshotPixel`.\n                 * \n                 * Only one snapshot can be active _per frame_. If you have already called `snapshotPixel`, for example, then\n                 * calling this method will override it.\n                 * \n                 * Snapshots work by creating an Image object from the canvas data, this is a blocking process, which gets\n                 * more expensive the larger the canvas size gets, so please be careful how you employ this in your game.\n                 * @param callback The Function to invoke after the snapshot image is created.\n                 * @param type The format of the image to create, usually `image/png` or `image/jpeg`. Default 'image/png'.\n                 * @param encoderOptions The image quality, between 0 and 1. Used for image formats with lossy compression, such as `image/jpeg`. Default 0.92.",
        "* Schedules a snapshot of the given area of the game viewport to be taken after the current frame is rendered.\n                 * \n                 * To capture the whole game viewport see the `snapshot` method. To capture a specific pixel, see `snapshotPixel`.\n                 * \n                 * Only one snapshot can be active _per frame_. If you have already called `snapshotPixel`, for example, then\n                 * calling this method will override it.\n                 * \n                 * Snapshots work by creating an Image object from the canvas data, this is a blocking process, which gets\n                 * more expensive the larger the canvas size gets, so please be careful how you employ this in your game.\n                 * @param x The x coordinate to grab from.\n                 * @param y The y coordinate to grab from.\n                 * @param width The width of the area to grab.\n                 * @param height The height of the area to grab.\n                 * @param callback The Function to invoke after the snapshot image is created.\n                 * @param type The format of the image to create, usually `image/png` or `image/jpeg`. Default 'image/png'.\n                 * @param encoderOptions The image quality, between 0 and 1. Used for image formats with lossy compression, such as `image/jpeg`. Default 0.92.",
        "* Schedules a snapshot of the given pixel from the game viewport to be taken after the current frame is rendered.\n                 * \n                 * To capture the whole game viewport see the `snapshot` method. To capture a specific area, see `snapshotArea`.\n                 * \n                 * Only one snapshot can be active _per frame_. If you have already called `snapshotArea`, for example, then\n                 * calling this method will override it.\n                 * \n                 * Unlike the other two snapshot methods, this one will return a `Color` object containing the color data for\n                 * the requested pixel. It doesn't need to create an internal Canvas or Image object, so is a lot faster to execute,\n                 * using less memory.\n                 * @param x The x coordinate of the pixel to get.\n                 * @param y The y coordinate of the pixel to get.\n                 * @param callback The Function to invoke after the snapshot pixel data is extracted.",
        "* Takes a Sprite Game Object, or any object that extends it, and draws it to the current context.\n                 * @param sprite The texture based Game Object to draw.\n                 * @param frame The frame to draw, doesn't have to be that owned by the Game Object.\n                 * @param camera The Camera to use for the rendering transform.\n                 * @param parentTransformMatrix The transform matrix of the parent container, if set.",
        "* Destroys all object references in the Canvas Renderer.",
        "* Returns an array which maps the default blend modes to supported Canvas blend modes.\n             * \n             * If the browser doesn't support a blend mode, it will default to the normal `source-over` blend mode.",
        "* Takes a reference to the Canvas Renderer, a Canvas Rendering Context, a Game Object, a Camera and a parent matrix\n             * and then performs the following steps:\n             * \n             * 1. Checks the alpha of the source combined with the Camera alpha. If 0 or less it aborts.\n             * 2. Takes the Camera and Game Object matrix and multiplies them, combined with the parent matrix if given.\n             * 3. Sets the blend mode of the context to be that used by the Game Object.\n             * 4. Sets the alpha value of the context to be that used by the Game Object combined with the Camera.\n             * 5. Saves the context state.\n             * 6. Sets the final matrix values into the context via setTransform.\n             * \n             * This function is only meant to be used internally. Most of the Canvas Renderer classes use it.\n             * @param renderer A reference to the current active Canvas renderer.\n             * @param ctx The canvas context to set the transform on.\n             * @param src The Game Object being rendered. Can be any type that extends the base class.\n             * @param camera The Camera that is rendering the Game Object.\n             * @param parentMatrix A parent transform matrix to apply to the Game Object before rendering.",
        "* Takes a snapshot of an area from the current frame displayed by a canvas.\n             * \n             * This is then copied to an Image object. When this loads, the results are sent\n             * to the callback provided in the Snapshot Configuration object.\n             * @param sourceCanvas The canvas to take a snapshot of.\n             * @param config The snapshot configuration object.",
        "* Takes a snapshot of an area from the current frame displayed by a WebGL canvas.\n             * \n             * This is then copied to an Image object. When this loads, the results are sent\n             * to the callback provided in the Snapshot Configuration object.\n             * @param sourceCanvas The canvas to take a snapshot of.\n             * @param config The snapshot configuration object.",
        "* BitmapMaskPipeline handles all bitmap masking rendering in WebGL. It works by using \n                 * sampling two texture on the fragment shader and using the fragment's alpha to clip the region.\n                 * The config properties are:\n                 * - game: Current game instance.\n                 * - renderer: Current WebGL renderer.\n                 * - topology: This indicates how the primitives are rendered. The default value is GL_TRIANGLES.\n                 *              Here is the full list of rendering primitives (https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants).\n                 * - vertShader: Source for vertex shader as a string.\n                 * - fragShader: Source for fragment shader as a string.\n                 * - vertexCapacity: The amount of vertices that shall be allocated\n                 * - vertexSize: The size of a single vertex in bytes.",
        "* \n                     * @param config Used for overriding shader an pipeline properties if extending this pipeline.",
        "* Float32 view of the array buffer containing the pipeline's vertices.",
        "* Size of the batch.",
        "* Dirty flag to check if resolution properties need to be updated on the \n                     * masking shader.",
        "* Called every time the pipeline needs to be used.\n                     * It binds all necessary resources.",
        "* [description]\n                     * @param width [description]\n                     * @param height [description]\n                     * @param resolution [description]",
        "* Binds necessary resources and renders the mask to a separated framebuffer.\n                     * The framebuffer for the masked object is also bound for further use.\n                     * @param mask GameObject used as mask.\n                     * @param maskedObject GameObject masked by the mask GameObject.\n                     * @param camera [description]",
        "* The masked game object's framebuffer is unbound and it's texture \n                     * is bound together with the mask texture and the mask shader and \n                     * a draw call with a single quad is processed. Here is where the\n                     * masking effect is applied.\n                     * @param mask GameObject used as a mask.",
        "* ForwardDiffuseLightPipeline implements a forward rendering approach for 2D lights.\n                 * This pipeline extends TextureTintPipeline so it implements all it's rendering functions\n                 * and batching system.",
        "* \n                     * @param config The configuration of the pipeline, same as the {@link Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline}. The fragment shader will be replaced with the lighting shader.",
        "* This function sets all the needed resources for each camera pass.\n                     * @param scene The Scene being rendered.\n                     * @param camera The Scene Camera being rendered with.",
        "* Generic function for batching a textured quad\n                     * @param gameObject Source GameObject\n                     * @param texture Raw WebGLTexture associated with the quad\n                     * @param textureWidth Real texture width\n                     * @param textureHeight Real texture height\n                     * @param srcX X coordinate of the quad\n                     * @param srcY Y coordinate of the quad\n                     * @param srcWidth Width of the quad\n                     * @param srcHeight Height of the quad\n                     * @param scaleX X component of scale\n                     * @param scaleY Y component of scale\n                     * @param rotation Rotation of the quad\n                     * @param flipX Indicates if the quad is horizontally flipped\n                     * @param flipY Indicates if the quad is vertically flipped\n                     * @param scrollFactorX By which factor is the quad affected by the camera horizontal scroll\n                     * @param scrollFactorY By which factor is the quad effected by the camera vertical scroll\n                     * @param displayOriginX Horizontal origin in pixels\n                     * @param displayOriginY Vertical origin in pixels\n                     * @param frameX X coordinate of the texture frame\n                     * @param frameY Y coordinate of the texture frame\n                     * @param frameWidth Width of the texture frame\n                     * @param frameHeight Height of the texture frame\n                     * @param tintTL Tint for top left\n                     * @param tintTR Tint for top right\n                     * @param tintBL Tint for bottom left\n                     * @param tintBR Tint for bottom right\n                     * @param tintEffect The tint effect (0 for additive, 1 for replacement)\n                     * @param uOffset Horizontal offset on texture coordinate\n                     * @param vOffset Vertical offset on texture coordinate\n                     * @param camera Current used camera\n                     * @param parentTransformMatrix Parent container",
        "* Sets the Game Objects normal map as the active texture.\n                     * @param gameObject The Game Object to update.",
        "* Rotates the normal map vectors inversely by the given angle.\n                     * Only works in 2D space.\n                     * @param rotation The angle of rotation in radians.",
        "* Takes a Sprite Game Object, or any object that extends it, which has a normal texture and adds it to the batch.\n                     * @param sprite The texture-based Game Object to add to the batch.\n                     * @param camera The Camera to use for the rendering transform.\n                     * @param parentTransformMatrix The transform matrix of the parent container, if set.",
        "* TextureTintPipeline implements the rendering infrastructure\n                 * for displaying textured objects\n                 * The config properties are:\n                 * - game: Current game instance.\n                 * - renderer: Current WebGL renderer.\n                 * - topology: This indicates how the primitives are rendered. The default value is GL_TRIANGLES.\n                 *              Here is the full list of rendering primitives (https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants).\n                 * - vertShader: Source for vertex shader as a string.\n                 * - fragShader: Source for fragment shader as a string.\n                 * - vertexCapacity: The amount of vertices that shall be allocated\n                 * - vertexSize: The size of a single vertex in bytes.",
        "* \n                     * @param config The configuration options for this Texture Tint Pipeline, as described above.",
        "* Float32 view of the array buffer containing the pipeline's vertices.",
        "* Uint32 view of the array buffer containing the pipeline's vertices.",
        "* Size of the batch.",
        "* Collection of batch information",
        "* Called every time the pipeline needs to be used.\n                     * It binds all necessary resources.",
        "* Resizes this pipeline and updates the projection.\n                     * @param width The new width.\n                     * @param height The new height.\n                     * @param resolution The resolution.",
        "* Assigns a texture to the current batch. If a different texture is already set it creates a new batch object.\n                     * @param texture WebGLTexture that will be assigned to the current batch. If not given uses blankTexture.\n                     * @param unit Texture unit to which the texture needs to be bound. Default 0.",
        "* Checks if the current batch has the same texture and texture unit, or if we need to create a new batch.\n                     * @param texture WebGLTexture that will be assigned to the current batch. If not given uses blankTexture.\n                     * @param unit Texture unit to which the texture needs to be bound.",
        "* Creates a new batch object and pushes it to a batch array.\n                     * The batch object contains information relevant to the current \n                     * vertex batch like the offset in the vertex buffer, vertex count and \n                     * the textures used by that batch.\n                     * @param texture Optional WebGLTexture that will be assigned to the created batch.\n                     * @param unit Texture unit to which the texture needs to be bound.",
        "* Uploads the vertex data and emits a draw call for the current batch of vertices.",
        "* Takes a Sprite Game Object, or any object that extends it, and adds it to the batch.\n                     * @param sprite The texture based Game Object to add to the batch.\n                     * @param camera The Camera to use for the rendering transform.\n                     * @param parentTransformMatrix The transform matrix of the parent container, if set.",
        "* Adds the vertices data into the batch and flushes if full.\n                     * \n                     * Assumes 6 vertices in the following arrangement:\n                     * \n                     * ```\n                     * 0----3\n                     * |\\  B|\n                     * | \\  |\n                     * |  \\ |\n                     * | A \\|\n                     * |    \\\n                     * 1----2\n                     * ```\n                     * \n                     * Where tx0/ty0 = 0, tx1/ty1 = 1, tx2/ty2 = 2 and tx3/ty3 = 3\n                     * @param x0 The top-left x position.\n                     * @param y0 The top-left y position.\n                     * @param x1 The bottom-left x position.\n                     * @param y1 The bottom-left y position.\n                     * @param x2 The bottom-right x position.\n                     * @param y2 The bottom-right y position.\n                     * @param x3 The top-right x position.\n                     * @param y3 The top-right y position.\n                     * @param u0 UV u0 value.\n                     * @param v0 UV v0 value.\n                     * @param u1 UV u1 value.\n                     * @param v1 UV v1 value.\n                     * @param tintTL The top-left tint color value.\n                     * @param tintTR The top-right tint color value.\n                     * @param tintBL The bottom-left tint color value.\n                     * @param tintBR The bottom-right tint color value.\n                     * @param tintEffect The tint effect for the shader to use.\n                     * @param texture WebGLTexture that will be assigned to the current batch if a flush occurs.\n                     * @param unit Texture unit to which the texture needs to be bound. Default 0.",
        "* Adds the vertices data into the batch and flushes if full.\n                     * \n                     * Assumes 3 vertices in the following arrangement:\n                     * \n                     * ```\n                     * 0\n                     * |\\\n                     * | \\\n                     * |  \\\n                     * |   \\\n                     * |    \\\n                     * 1-----2\n                     * ```\n                     * @param x1 The bottom-left x position.\n                     * @param y1 The bottom-left y position.\n                     * @param x2 The bottom-right x position.\n                     * @param y2 The bottom-right y position.\n                     * @param x3 The top-right x position.\n                     * @param y3 The top-right y position.\n                     * @param u0 UV u0 value.\n                     * @param v0 UV v0 value.\n                     * @param u1 UV u1 value.\n                     * @param v1 UV v1 value.\n                     * @param tintTL The top-left tint color value.\n                     * @param tintTR The top-right tint color value.\n                     * @param tintBL The bottom-left tint color value.\n                     * @param tintEffect The tint effect for the shader to use.\n                     * @param texture WebGLTexture that will be assigned to the current batch if a flush occurs.\n                     * @param unit Texture unit to which the texture needs to be bound. Default 0.",
        "* Generic function for batching a textured quad using argument values instead of a Game Object.\n                     * @param gameObject Source GameObject.\n                     * @param texture Raw WebGLTexture associated with the quad.\n                     * @param textureWidth Real texture width.\n                     * @param textureHeight Real texture height.\n                     * @param srcX X coordinate of the quad.\n                     * @param srcY Y coordinate of the quad.\n                     * @param srcWidth Width of the quad.\n                     * @param srcHeight Height of the quad.\n                     * @param scaleX X component of scale.\n                     * @param scaleY Y component of scale.\n                     * @param rotation Rotation of the quad.\n                     * @param flipX Indicates if the quad is horizontally flipped.\n                     * @param flipY Indicates if the quad is vertically flipped.\n                     * @param scrollFactorX By which factor is the quad affected by the camera horizontal scroll.\n                     * @param scrollFactorY By which factor is the quad effected by the camera vertical scroll.\n                     * @param displayOriginX Horizontal origin in pixels.\n                     * @param displayOriginY Vertical origin in pixels.\n                     * @param frameX X coordinate of the texture frame.\n                     * @param frameY Y coordinate of the texture frame.\n                     * @param frameWidth Width of the texture frame.\n                     * @param frameHeight Height of the texture frame.\n                     * @param tintTL Tint for top left.\n                     * @param tintTR Tint for top right.\n                     * @param tintBL Tint for bottom left.\n                     * @param tintBR Tint for bottom right.\n                     * @param tintEffect The tint effect.\n                     * @param uOffset Horizontal offset on texture coordinate.\n                     * @param vOffset Vertical offset on texture coordinate.\n                     * @param camera Current used camera.\n                     * @param parentTransformMatrix Parent container.\n                     * @param skipFlip Skip the renderTexture check. Default false.",
        "* Adds a Texture Frame into the batch for rendering.\n                     * @param frame The Texture Frame to be rendered.\n                     * @param x The horizontal position to render the texture at.\n                     * @param y The vertical position to render the texture at.\n                     * @param tint The tint color.\n                     * @param alpha The alpha value.\n                     * @param transformMatrix The Transform Matrix to use for the texture.\n                     * @param parentTransformMatrix A parent Transform Matrix.",
        "* Pushes a filled rectangle into the vertex batch.\n                     * Rectangle has no transform values and isn't transformed into the local space.\n                     * Used for directly batching untransformed rectangles, such as Camera background colors.\n                     * @param x Horizontal top left coordinate of the rectangle.\n                     * @param y Vertical top left coordinate of the rectangle.\n                     * @param width Width of the rectangle.\n                     * @param height Height of the rectangle.\n                     * @param color Color of the rectangle to draw.\n                     * @param alpha Alpha value of the rectangle to draw.",
        "* Pushes a filled rectangle into the vertex batch.\n                     * Rectangle factors in the given transform matrices before adding to the batch.\n                     * @param x Horizontal top left coordinate of the rectangle.\n                     * @param y Vertical top left coordinate of the rectangle.\n                     * @param width Width of the rectangle.\n                     * @param height Height of the rectangle.\n                     * @param currentMatrix The current transform.\n                     * @param parentMatrix The parent transform.",
        "* Pushes a filled triangle into the vertex batch.\n                     * Triangle factors in the given transform matrices before adding to the batch.\n                     * @param x0 Point 0 x coordinate.\n                     * @param y0 Point 0 y coordinate.\n                     * @param x1 Point 1 x coordinate.\n                     * @param y1 Point 1 y coordinate.\n                     * @param x2 Point 2 x coordinate.\n                     * @param y2 Point 2 y coordinate.\n                     * @param currentMatrix The current transform.\n                     * @param parentMatrix The parent transform.",
        "* Pushes a stroked triangle into the vertex batch.\n                     * Triangle factors in the given transform matrices before adding to the batch.\n                     * The triangle is created from 3 lines and drawn using the `batchStrokePath` method.\n                     * @param x0 Point 0 x coordinate.\n                     * @param y0 Point 0 y coordinate.\n                     * @param x1 Point 1 x coordinate.\n                     * @param y1 Point 1 y coordinate.\n                     * @param x2 Point 2 x coordinate.\n                     * @param y2 Point 2 y coordinate.\n                     * @param lineWidth The width of the line in pixels.\n                     * @param currentMatrix The current transform.\n                     * @param parentMatrix The parent transform.",
        "* Adds the given path to the vertex batch for rendering.\n                     * \n                     * It works by taking the array of path data and then passing it through Earcut, which\n                     * creates a list of polygons. Each polygon is then added to the batch.\n                     * \n                     * The path is always automatically closed because it's filled.\n                     * @param path Collection of points that represent the path.\n                     * @param currentMatrix The current transform.\n                     * @param parentMatrix The parent transform.",
        "* Adds the given path to the vertex batch for rendering.\n                     * \n                     * It works by taking the array of path data and calling `batchLine` for each section\n                     * of the path.\n                     * \n                     * The path is optionally closed at the end.\n                     * @param path Collection of points that represent the path.\n                     * @param lineWidth The width of the line segments in pixels.\n                     * @param pathOpen Indicates if the path should be closed or left open.\n                     * @param currentMatrix The current transform.\n                     * @param parentMatrix The parent transform.",
        "* Creates a quad and adds it to the vertex batch based on the given line values.\n                     * @param ax X coordinate to the start of the line\n                     * @param ay Y coordinate to the start of the line\n                     * @param bx X coordinate to the end of the line\n                     * @param by Y coordinate to the end of the line\n                     * @param aLineWidth Width of the start of the line\n                     * @param bLineWidth Width of the end of the line\n                     * @param currentMatrix Parent matrix, generally used by containers",
        "* Packs four floats on a range from 0.0 to 1.0 into a single Uint32\n                 * @param r Red component in a range from 0.0 to 1.0\n                 * @param g Green component in a range from 0.0 to 1.0\n                 * @param b Blue component in a range from 0.0 to 1.0\n                 * @param a Alpha component in a range from 0.0 to 1.0",
        "* Packs a Uint24, representing RGB components, with a Float32, representing\n                 * the alpha component, with a range between 0.0 and 1.0 and return a Uint32\n                 * @param rgb Uint24 representing RGB components\n                 * @param a Float32 representing Alpha component",
        "* Packs a Uint24, representing RGB components, with a Float32, representing\n                 * the alpha component, with a range between 0.0 and 1.0 and return a \n                 * swizzled Uint32\n                 * @param rgb Uint24 representing RGB components\n                 * @param a Float32 representing Alpha component",
        "* Unpacks a Uint24 RGB into an array of floats of ranges of 0.0 and 1.0\n                 * @param rgb RGB packed as a Uint24",
        "* Counts how many attributes of 32 bits a vertex has\n                 * @param attributes Array of attributes\n                 * @param glContext WebGLContext used for check types",
        "* WebGLPipeline is a class that describes the way elements will be rendererd\n             * in WebGL, specially focused on batching vertices (batching is not provided).\n             * Pipelines are mostly used for describing 2D rendering passes but it's\n             * flexible enough to be used for any type of rendering including 3D.\n             * Internally WebGLPipeline will handle things like compiling shaders,\n             * creating vertex buffers, assigning primitive topology and binding\n             * vertex attributes.\n             * \n             * The config properties are:\n             * - game: Current game instance.\n             * - renderer: Current WebGL renderer.\n             * - gl: Current WebGL context.\n             * - topology: This indicates how the primitives are rendered. The default value is GL_TRIANGLES.\n             *              Here is the full list of rendering primitives (https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants).\n             * - vertShader: Source for vertex shader as a string.\n             * - fragShader: Source for fragment shader as a string.\n             * - vertexCapacity: The amount of vertices that shall be allocated\n             * - vertexSize: The size of a single vertex in bytes.\n             * - vertices: An optional buffer of vertices\n             * - attributes: An array describing the vertex attributes\n             * \n             * The vertex attributes properties are:\n             * - name : String - Name of the attribute in the vertex shader\n             * - size : integer - How many components describe the attribute. For ex: vec3 = size of 3, float = size of 1\n             * - type : GLenum - WebGL type (gl.BYTE, gl.SHORT, gl.UNSIGNED_BYTE, gl.UNSIGNED_SHORT, gl.FLOAT)\n             * - normalized : boolean - Is the attribute normalized\n             * - offset : integer - The offset in bytes to the current attribute in the vertex. Equivalent to offsetof(vertex, attrib) in C\n             * Here you can find more information of how to describe an attribute:\n             * - https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer",
        "* \n                 * @param config The configuration object for this WebGL Pipeline, as described above.",
        "* Name of the Pipeline. Used for identifying",
        "* The Game which owns this WebGL Pipeline.",
        "* The canvas which this WebGL Pipeline renders to.",
        "* Used to store the current game resolution",
        "* Width of the current viewport",
        "* Height of the current viewport",
        "* The WebGL context this WebGL Pipeline uses.",
        "* How many vertices have been fed to the current pipeline.",
        "* The limit of vertices that the pipeline can hold",
        "* The WebGL Renderer which owns this WebGL Pipeline.",
        "* Raw byte buffer of vertices.",
        "* The handle to a WebGL vertex buffer object.",
        "* The handle to a WebGL program",
        "* Array of objects that describe the vertex attributes",
        "* The size in bytes of the vertex",
        "* The primitive topology which the pipeline will use to submit draw calls",
        "* Uint8 view to the vertex raw buffer. Used for uploading vertex buffer resources\n                 * to the GPU.",
        "* This will store the amount of components of 32 bit length",
        "* Indicates if the current pipeline is flushing the contents to the GPU.\n                 * When the variable is set the flush function will be locked.",
        "* Indicates if the current pipeline is active or not for this frame only.\n                 * Reset in the onRender method.",
        "* Called when the Game has fully booted and the Renderer has finished setting up.\n                 * \n                 * By this stage all Game level systems are now in place and you can perform any final\n                 * tasks that the pipeline may need that relied on game systems such as the Texture Manager.",
        "* Adds a description of vertex attribute to the pipeline\n                 * @param name Name of the vertex attribute\n                 * @param size Vertex component size\n                 * @param type Type of the attribute\n                 * @param normalized Is the value normalized to a range\n                 * @param offset Byte offset to the beginning of the first element in the vertex",
        "* Check if the current batch of vertices is full.",
        "* Resizes the properties used to describe the viewport\n                 * @param width The new width of this WebGL Pipeline.\n                 * @param height The new height of this WebGL Pipeline.\n                 * @param resolution The resolution this WebGL Pipeline should be resized to.",
        "* Binds the pipeline resources, including programs, vertex buffers and binds attributes",
        "* Set whenever this WebGL Pipeline is bound to a WebGL Renderer.\n                 * \n                 * This method is called every time the WebGL Pipeline is attempted to be bound, even if it already is the current pipeline.",
        "* Called before each frame is rendered, but after the canvas has been cleared.",
        "* Called before a Scene's Camera is rendered.\n                 * @param scene The Scene being rendered.\n                 * @param camera The Scene Camera being rendered with.",
        "* Called after each frame has been completely rendered and snapshots have been taken.",
        "* Uploads the vertex data and emits a draw call\n                 * for the current batch of vertices.",
        "* Removes all object references in this WebGL Pipeline and removes its program from the WebGL context.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x The new value of the `float` uniform.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x The new X component of the `vec2` uniform.\n                 * @param y The new Y component of the `vec2` uniform.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x The new X component of the `vec3` uniform.\n                 * @param y The new Y component of the `vec3` uniform.\n                 * @param z The new Z component of the `vec3` uniform.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x X component of the uniform\n                 * @param y Y component of the uniform\n                 * @param z Z component of the uniform\n                 * @param w W component of the uniform",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param arr The new value to be used for the uniform variable.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param arr The new value to be used for the uniform variable.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param arr The new value to be used for the uniform variable.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param arr The new value to be used for the uniform variable.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x The new value of the `int` uniform.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x The new X component of the `ivec2` uniform.\n                 * @param y The new Y component of the `ivec2` uniform.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x The new X component of the `ivec3` uniform.\n                 * @param y The new Y component of the `ivec3` uniform.\n                 * @param z The new Z component of the `ivec3` uniform.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x X component of the uniform\n                 * @param y Y component of the uniform\n                 * @param z Z component of the uniform\n                 * @param w W component of the uniform",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param transpose Whether to transpose the matrix. Should be `false`.\n                 * @param matrix The new values for the `mat2` uniform.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param transpose Whether to transpose the matrix. Should be `false`.\n                 * @param matrix The new values for the `mat3` uniform.",
        "* Set a uniform value of the current pipeline program.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param transpose Should the matrix be transpose\n                 * @param matrix Matrix data",
        "* WebGLRenderer is a class that contains the needed functionality to keep the\n             * WebGLRenderingContext state clean. The main idea of the WebGLRenderer is to keep track of\n             * any context change that happens for WebGL rendering inside of Phaser. This means\n             * if raw webgl functions are called outside the WebGLRenderer of the Phaser WebGL\n             * rendering ecosystem they might pollute the current WebGLRenderingContext state producing\n             * unexpected behavior. It's recommended that WebGL interaction is done through\n             * WebGLRenderer and/or WebGLPipeline.",
        "* \n                 * @param game The Game instance which owns this WebGL Renderer.",
        "* The local configuration settings of this WebGL Renderer.",
        "* The Game instance which owns this WebGL Renderer.",
        "* A constant which allows the renderer to be easily identified as a WebGL Renderer.",
        "* The width of the canvas being rendered to.\n                 * This is populated in the onResize event handler.",
        "* The height of the canvas being rendered to.\n                 * This is populated in the onResize event handler.",
        "* The canvas which this WebGL Renderer draws to.",
        "* An array of functions to invoke if the WebGL context is lost.",
        "* An array of functions to invoke if the WebGL context is restored.",
        "* An array of blend modes supported by the WebGL Renderer.\n                 * \n                 * This array includes the default blend modes as well as any custom blend modes added through {@link #addBlendMode}.",
        "* Keeps track of any WebGLTexture created with the current WebGLRenderingContext",
        "* Set to `true` if the WebGL context of the renderer is lost.",
        "* This object will store all pipelines created through addPipeline",
        "* Details about the currently scheduled snapshot.\n                 * \n                 * If a non-null `callback` is set in this object, a snapshot of the canvas will be taken after the current frame is fully rendered.",
        "* Cached value for the last texture unit that was used",
        "* An array of the last texture handles that were bound to the WebGLRenderingContext",
        "* Current framebuffer in use",
        "* Current WebGLPipeline in use",
        "* Current WebGLProgram in use",
        "* Current WebGLBuffer (Vertex buffer) in use",
        "* Current WebGLBuffer (Index buffer) in use",
        "* Current blend mode in use",
        "* Indicates if the the scissor state is enabled in WebGLRenderingContext",
        "* Stores the current scissor data",
        "* Stack of scissor data",
        "* The underlying WebGL context of the renderer.",
        "* Array of strings that indicate which WebGL extensions are supported by the browser",
        "* Extensions loaded into the current context",
        "* Stores the current WebGL component formats for further use",
        "* Stores the supported WebGL texture compression formats.",
        "* Cached drawing buffer height to reduce gl calls.",
        "* A blank 32x32 transparent texture, as used by the Graphics system where needed.\n                 * This is set in the `boot` method.",
        "* A default Camera used in calls when no other camera has been provided.",
        "* Creates a new WebGLRenderingContext and initializes all internal state.\n                 * @param config The configuration object for the renderer.",
        "* The event handler that manages the `resize` event dispatched by the Scale Manager.\n                 * @param gameSize The default Game Size object. This is the un-modified game dimensions.\n                 * @param baseSize The base Size object. The game dimensions multiplied by the resolution. The canvas width / height values match this.\n                 * @param displaySize The display Size object. The size of the canvas style width / height attributes.\n                 * @param resolution The Scale Manager resolution setting.",
        "* Resizes the drawing buffer to match that required by the Scale Manager.\n                 * @param width The new width of the renderer.\n                 * @param height The new height of the renderer.\n                 * @param resolution The new resolution of the renderer.",
        "* Adds a callback to be invoked when the WebGL context has been restored by the browser.\n                 * @param callback The callback to be invoked on context restoration.\n                 * @param target The context of the callback.",
        "* Adds a callback to be invoked when the WebGL context has been lost by the browser.\n                 * @param callback The callback to be invoked on context loss.\n                 * @param target The context of the callback.",
        "* Checks if a WebGL extension is supported\n                 * @param extensionName Name of the WebGL extension",
        "* Loads a WebGL extension\n                 * @param extensionName The name of the extension to load.",
        "* Flushes the current pipeline if the pipeline is bound",
        "* Checks if a pipeline is present in the current WebGLRenderer\n                 * @param pipelineName The name of the pipeline.",
        "* Returns the pipeline by name if the pipeline exists\n                 * @param pipelineName The name of the pipeline.",
        "* Removes a pipeline by name.\n                 * @param pipelineName The name of the pipeline to be removed.",
        "* Adds a pipeline instance into the collection of pipelines\n                 * @param pipelineName A unique string-based key for the pipeline.\n                 * @param pipelineInstance A pipeline instance which must extend WebGLPipeline.",
        "* Pushes a new scissor state. This is used to set nested scissor states.\n                 * @param x The x position of the scissor.\n                 * @param y The y position of the scissor.\n                 * @param width The width of the scissor.\n                 * @param height The height of the scissor.\n                 * @param drawingBufferHeight Optional drawingBufferHeight override value.",
        "* Sets the current scissor state.\n                 * @param x The x position of the scissor.\n                 * @param y The y position of the scissor.\n                 * @param width The width of the scissor.\n                 * @param height The height of the scissor.\n                 * @param drawingBufferHeight Optional drawingBufferHeight override value.",
        "* Pops the last scissor state and sets it.",
        "* Binds a WebGLPipeline and sets it as the current pipeline to be used.\n                 * @param pipelineInstance The pipeline instance to be activated.\n                 * @param gameObject The Game Object that invoked this pipeline, if any.",
        "* Use this to reset the gl context to the state that Phaser requires to continue rendering.\n                 * Calling this will:\n                 * \n                 * * Disable `DEPTH_TEST`, `CULL_FACE` and `STENCIL_TEST`.\n                 * * Clear the depth buffer and stencil buffers.\n                 * * Reset the viewport size.\n                 * * Reset the blend mode.\n                 * * Bind a blank texture as the active texture on texture unit zero.\n                 * * Rebinds the given pipeline instance.\n                 * \n                 * You should call this having previously called `clearPipeline` and then wishing to return\n                 * control to Phaser again.\n                 * @param pipelineInstance The pipeline instance to be activated.",
        "* Flushes the current WebGLPipeline being used and then clears it, along with the\n                 * the current shader program and vertex buffer. Then resets the blend mode to NORMAL.\n                 * Call this before jumping to your own gl context handler, and then call `rebindPipeline` when\n                 * you wish to return control to Phaser again.",
        "* Sets the blend mode to the value given.\n                 * \n                 * If the current blend mode is different from the one given, the pipeline is flushed and the new\n                 * blend mode is enabled.\n                 * @param blendModeId The blend mode to be set. Can be a `BlendModes` const or an integer value.\n                 * @param force Force the blend mode to be set, regardless of the currently set blend mode. Default false.",
        "* Creates a new custom blend mode for the renderer.\n                 * @param func An array containing the WebGL functions to use for the source and the destination blending factors, respectively. See the possible constants for {@link WebGLRenderingContext#blendFunc()}.\n                 * @param equation The equation to use for combining the RGB and alpha components of a new pixel with a rendered one. See the possible constants for {@link WebGLRenderingContext#blendEquation()}.",
        "* Updates the function bound to a given custom blend mode.\n                 * @param index The index of the custom blend mode.\n                 * @param func The function to use for the blend mode.\n                 * @param equation The equation to use for the blend mode.",
        "* Removes a custom blend mode from the renderer.\n                 * Any Game Objects still using this blend mode will error, so be sure to clear them first.\n                 * @param index The index of the custom blend mode to be removed.",
        "* Binds a texture at a texture unit. If a texture is already\n                 * bound to that unit it will force a flush on the current pipeline.\n                 * @param texture The WebGL texture that needs to be bound.\n                 * @param textureUnit The texture unit to which the texture will be bound.\n                 * @param flush Will the current pipeline be flushed if this is a new texture, or not? Default true.",
        "* Binds a framebuffer. If there was another framebuffer already bound it will force a pipeline flush.\n                 * @param framebuffer The framebuffer that needs to be bound.\n                 * @param updateScissor If a framebuffer is given, set the gl scissor to match the frame buffer size? Or, if `null` given, pop the scissor from the stack. Default false.",
        "* Binds a program. If there was another program already bound it will force a pipeline flush.\n                 * @param program The program that needs to be bound.",
        "* Bounds a vertex buffer. If there is a vertex buffer already bound it'll force a pipeline flush.\n                 * @param vertexBuffer The buffer that needs to be bound.",
        "* Bounds a index buffer. If there is a index buffer already bound it'll force a pipeline flush.\n                 * @param indexBuffer The buffer the needs to be bound.",
        "* Creates a texture from an image source. If the source is not valid it creates an empty texture.\n                 * @param source The source of the texture.\n                 * @param width The width of the texture.\n                 * @param height The height of the texture.\n                 * @param scaleMode The scale mode to be used by the texture.",
        "* A wrapper for creating a WebGLTexture. If no pixel data is passed it will create an empty texture.\n                 * @param mipLevel Mip level of the texture.\n                 * @param minFilter Filtering of the texture.\n                 * @param magFilter Filtering of the texture.\n                 * @param wrapT Wrapping mode of the texture.\n                 * @param wrapS Wrapping mode of the texture.\n                 * @param format Which format does the texture use.\n                 * @param pixels pixel data.\n                 * @param width Width of the texture in pixels.\n                 * @param height Height of the texture in pixels.\n                 * @param pma Does the texture have premultiplied alpha?",
        "* Wrapper for creating WebGLFramebuffer.\n                 * @param width Width in pixels of the framebuffer\n                 * @param height Height in pixels of the framebuffer\n                 * @param renderTexture The color texture to where the color pixels are written\n                 * @param addDepthStencilBuffer Indicates if the current framebuffer support depth and stencil buffers",
        "* Wrapper for creating a WebGLProgram\n                 * @param vertexShader Source to the vertex shader\n                 * @param fragmentShader Source to the fragment shader",
        "* Wrapper for creating a vertex buffer.\n                 * @param initialDataOrSize It's either ArrayBuffer or an integer indicating the size of the vbo\n                 * @param bufferUsage How the buffer is used. gl.DYNAMIC_DRAW, gl.STATIC_DRAW or gl.STREAM_DRAW",
        "* Wrapper for creating a vertex buffer.\n                 * @param initialDataOrSize Either ArrayBuffer or an integer indicating the size of the vbo.\n                 * @param bufferUsage How the buffer is used. gl.DYNAMIC_DRAW, gl.STATIC_DRAW or gl.STREAM_DRAW.",
        "* Removes the given texture from the nativeTextures array and then deletes it from the GPU.\n                 * @param texture The WebGL Texture to be deleted.",
        "* Deletes a WebGLFramebuffer from the GL instance.\n                 * @param framebuffer The Framebuffer to be deleted.",
        "* Deletes a WebGLProgram from the GL instance.\n                 * @param program The shader program to be deleted.",
        "* Deletes a WebGLBuffer from the GL instance.\n                 * @param vertexBuffer The WebGLBuffer to be deleted.",
        "* Controls the pre-render operations for the given camera.\n                 * Handles any clipping needed by the camera and renders the background color if a color is visible.\n                 * @param camera The Camera to pre-render.",
        "* Controls the post-render operations for the given camera.\n                 * Renders the foreground camera effects like flash and fading. It resets the current scissor state.\n                 * @param camera The Camera to post-render.",
        "* Clears the current vertex buffer and updates pipelines.",
        "* The core render step for a Scene Camera.\n                 * \n                 * Iterates through the given Game Object's array and renders them with the given Camera.\n                 * \n                 * This is called by the `CameraManager.render` method. The Camera Manager instance belongs to a Scene, and is invoked\n                 * by the Scene Systems.render method.\n                 * \n                 * This method is not called if `Camera.visible` is `false`, or `Camera.alpha` is zero.\n                 * @param scene The Scene to render.\n                 * @param children The Game Object's within the Scene to be rendered.\n                 * @param interpolationPercentage The interpolation percentage to apply. Currently un-used.\n                 * @param camera The Scene Camera to render with.",
        "* The post-render step happens after all Cameras in all Scenes have been rendered.",
        "* Schedules a snapshot of the entire game viewport to be taken after the current frame is rendered.\n                 * \n                 * To capture a specific area see the `snapshotArea` method. To capture a specific pixel, see `snapshotPixel`.\n                 * \n                 * Only one snapshot can be active _per frame_. If you have already called `snapshotPixel`, for example, then\n                 * calling this method will override it.\n                 * \n                 * Snapshots work by using the WebGL `readPixels` feature to grab every pixel from the frame buffer into an ArrayBufferView.\n                 * It then parses this, copying the contents to a temporary Canvas and finally creating an Image object from it,\n                 * which is the image returned to the callback provided. All in all, this is a computationally expensive and blocking process,\n                 * which gets more expensive the larger the canvas size gets, so please be careful how you employ this in your game.\n                 * @param callback The Function to invoke after the snapshot image is created.\n                 * @param type The format of the image to create, usually `image/png` or `image/jpeg`. Default 'image/png'.\n                 * @param encoderOptions The image quality, between 0 and 1. Used for image formats with lossy compression, such as `image/jpeg`. Default 0.92.",
        "* Schedules a snapshot of the given area of the game viewport to be taken after the current frame is rendered.\n                 * \n                 * To capture the whole game viewport see the `snapshot` method. To capture a specific pixel, see `snapshotPixel`.\n                 * \n                 * Only one snapshot can be active _per frame_. If you have already called `snapshotPixel`, for example, then\n                 * calling this method will override it.\n                 * \n                 * Snapshots work by using the WebGL `readPixels` feature to grab every pixel from the frame buffer into an ArrayBufferView.\n                 * It then parses this, copying the contents to a temporary Canvas and finally creating an Image object from it,\n                 * which is the image returned to the callback provided. All in all, this is a computationally expensive and blocking process,\n                 * which gets more expensive the larger the canvas size gets, so please be careful how you employ this in your game.\n                 * @param x The x coordinate to grab from.\n                 * @param y The y coordinate to grab from.\n                 * @param width The width of the area to grab.\n                 * @param height The height of the area to grab.\n                 * @param callback The Function to invoke after the snapshot image is created.\n                 * @param type The format of the image to create, usually `image/png` or `image/jpeg`. Default 'image/png'.\n                 * @param encoderOptions The image quality, between 0 and 1. Used for image formats with lossy compression, such as `image/jpeg`. Default 0.92.",
        "* Schedules a snapshot of the given pixel from the game viewport to be taken after the current frame is rendered.\n                 * \n                 * To capture the whole game viewport see the `snapshot` method. To capture a specific area, see `snapshotArea`.\n                 * \n                 * Only one snapshot can be active _per frame_. If you have already called `snapshotArea`, for example, then\n                 * calling this method will override it.\n                 * \n                 * Unlike the other two snapshot methods, this one will return a `Color` object containing the color data for\n                 * the requested pixel. It doesn't need to create an internal Canvas or Image object, so is a lot faster to execute,\n                 * using less memory.\n                 * @param x The x coordinate of the pixel to get.\n                 * @param y The y coordinate of the pixel to get.\n                 * @param callback The Function to invoke after the snapshot pixel data is extracted.",
        "* Creates a WebGL Texture based on the given canvas element.\n                 * @param srcCanvas The Canvas element that will be used to populate the texture.\n                 * @param dstTexture Is this going to replace an existing texture? If so, pass it here.\n                 * @param noRepeat Should this canvas never be allowed to set REPEAT? (such as for Text objects) Default false.",
        "* Sets the minification and magnification filter for a texture.\n                 * @param texture The texture to set the filter for.\n                 * @param filter The filter to set. 0 for linear filtering, 1 for nearest neighbor (blocky) filtering.",
        "* [description]\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x [description]",
        "* [description]\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x [description]\n                 * @param y [description]",
        "* [description]\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x [description]\n                 * @param y [description]\n                 * @param z [description]",
        "* Sets uniform of a WebGLProgram\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x X component\n                 * @param y Y component\n                 * @param z Z component\n                 * @param w W component",
        "* Sets the value of a uniform variable in the given WebGLProgram.\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param arr The new value to be used for the uniform variable.",
        "* Sets the value of a uniform variable in the given WebGLProgram.\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param arr The new value to be used for the uniform variable.",
        "* Sets the value of a uniform variable in the given WebGLProgram.\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param arr The new value to be used for the uniform variable.",
        "* Sets the value of a uniform variable in the given WebGLProgram.\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param arr The new value to be used for the uniform variable.",
        "* Sets the value of a uniform variable in the given WebGLProgram.\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x [description]",
        "* Sets the value of a uniform variable in the given WebGLProgram.\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x The new X component\n                 * @param y The new Y component",
        "* Sets the value of a uniform variable in the given WebGLProgram.\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x The new X component\n                 * @param y The new Y component\n                 * @param z The new Z component",
        "* Sets the value of a uniform variable in the given WebGLProgram.\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param x X component\n                 * @param y Y component\n                 * @param z Z component\n                 * @param w W component",
        "* Sets the value of a 2x2 matrix uniform variable in the given WebGLProgram.\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param transpose The value indicating whether to transpose the matrix. Must be false.\n                 * @param matrix The new matrix value.",
        "* [description]\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param transpose [description]\n                 * @param matrix [description]",
        "* Sets uniform of a WebGLProgram\n                 * @param program The target WebGLProgram from which the uniform location will be looked-up.\n                 * @param name The name of the uniform to look-up and modify.\n                 * @param transpose Is the matrix transposed\n                 * @param matrix Matrix data",
        "* Returns the maximum number of texture units that can be used in a fragment shader.",
        "* Returns the largest texture size (either width or height) that can be created.\n                 * Note that VRAM may not allow a texture of any given size, it just expresses\n                 * hardware / driver support for a given size.",
        "* Destroy this WebGLRenderer, cleaning up all related resources such as pipelines, native textures, etc.",
        "* Phaser Scale Modes.",
        "* Default Scale Mode (Linear).",
        "* Linear Scale Mode.",
        "* Nearest Scale Mode.",
        "* Phaser Scale Manager constants for centering the game canvas.",
        "* The game canvas is not centered within the parent by Phaser.\n             * You can still center it yourself via CSS.",
        "* The game canvas is centered both horizontally and vertically within the parent.\n             * To do this, the parent has to have a bounds that can be calculated and not be empty.\n             * \n             * Centering is achieved by setting the margin left and top properties of the\n             * game canvas, and does not factor in any other CSS styles you may have applied.",
        "* The game canvas is centered horizontally within the parent.\n             * To do this, the parent has to have a bounds that can be calculated and not be empty.\n             * \n             * Centering is achieved by setting the margin left and top properties of the\n             * game canvas, and does not factor in any other CSS styles you may have applied.",
        "* The game canvas is centered both vertically within the parent.\n             * To do this, the parent has to have a bounds that can be calculated and not be empty.\n             * \n             * Centering is achieved by setting the margin left and top properties of the\n             * game canvas, and does not factor in any other CSS styles you may have applied.",
        "* Phaser Scale Manager constants for centering the game canvas.\n         * \n         * To find out what each mode does please see [Phaser.Scale.Center]{@link Phaser.Scale.Center}.",
        "* Phaser Scale Manager constants for orientation.",
        "* A landscape orientation.",
        "* A portrait orientation.",
        "* Phaser Scale Manager constants for orientation.\n         * \n         * To find out what each mode does please see [Phaser.Scale.Orientation]{@link Phaser.Scale.Orientation}.",
        "* Phaser Scale Manager constants for the different scale modes available.",
        "* No scaling happens at all. The canvas is set to the size given in the game config and Phaser doesn't change it\n             * again from that point on. If you change the canvas size, either via CSS, or directly via code, then you need\n             * to call the Scale Managers `resize` method to give the new dimensions, or input events will stop working.",
        "* The height is automatically adjusted based on the width.",
        "* The width is automatically adjusted based on the height.",
        "* The width and height are automatically adjusted to fit inside the given target area,\n             * while keeping the aspect ratio. Depending on the aspect ratio there may be some space\n             * inside the area which is not covered.",
        "* The width and height are automatically adjusted to make the size cover the entire target\n             * area while keeping the aspect ratio. This may extend further out than the target size.",
        "* The Canvas is resized to fit all available _parent_ space, regardless of aspect ratio.",
        "* Phaser Scale Manager constants for the different scale modes available.\n         * \n         * To find out what each mode does please see [Phaser.Scale.ScaleModes]{@link Phaser.Scale.ScaleModes}.",
        "* Phaser Scale Manager constants for zoom modes.",
        "* The game canvas will not be zoomed by Phaser.",
        "* The game canvas will be 2x zoomed by Phaser.",
        "* The game canvas will be 4x zoomed by Phaser.",
        "* Calculate the zoom value based on the maximum multiplied game size that will\n             * fit into the parent, or browser window if no parent is set.",
        "* Phaser Scale Manager constants for zoom modes.\n         * \n         * To find out what each mode does please see [Phaser.Scale.Zoom]{@link Phaser.Scale.Zoom}.",
        "* The Scale Manager Resize Event.",
        "* The Scale Manager Resize Event.",
        "* The Scale Manager Resize Event.",
        "* The Scale Manager Resize Event.",
        "* The Scale Manager Resize Event.\n             * \n             * This event is dispatched whenever the Scale Manager detects a resize event from the browser.\n             * It sends three parameters to the callback, each of them being Size components. You can read\n             * the `width`, `height`, `aspectRatio` and other properties of these components to help with\n             * scaling your own game content.",
        "* The Scale Manager handles the scaling, resizing and alignment of the game canvas.\n         * \n         * The way scaling is handled is by setting the game canvas to a fixed size, which is defined in the\n         * game configuration. You also define the parent container in the game config. If no parent is given,\n         * it will default to using the document body. The Scale Manager will then look at the available space\n         * within the _parent_ and scale the canvas accordingly. Scaling is handled by setting the canvas CSS\n         * width and height properties, leaving the width and height of the canvas element itself untouched.\n         * Scaling is therefore achieved by keeping the core canvas the same size and 'stretching'\n         * it via its CSS properties. This gives the same result and speed as using the `transform-scale` CSS\n         * property, without the need for browser prefix handling.\n         * \n         * The calculations for the scale are heavily influenced by the bounding parent size, which is the computed\n         * dimensions of the canvas's parent. The CSS rules of the parent element play an important role in the\n         * operation of the Scale Manager. For example, if the parent has no defined width or height, then actions\n         * like auto-centering will fail to achieve the required result. The Scale Manager works in tandem with the\n         * CSS you set-up on the page hosting your game, rather than taking control of it.\n         * \n         * #### Parent and Display canvas containment guidelines:\n         * \n         * - Style the Parent element (of the game canvas) to control the Parent size and thus the games size and layout.\n         * \n         * - The Parent element's CSS styles should _effectively_ apply maximum (and minimum) bounding behavior.\n         * \n         * - The Parent element should _not_ apply a padding as this is not accounted for.\n         *   If a padding is required apply it to the Parent's parent or apply a margin to the Parent.\n         *   If you need to add a border, margin or any other CSS around your game container, then use a parent element and\n         *   apply the CSS to this instead, otherwise you'll be constantly resizing the shape of the game container.\n         * \n         * - The Display canvas layout CSS styles (i.e. margins, size) should not be altered / specified as\n         *   they may be updated by the Scale Manager.\n         * \n         * #### Scale Modes\n         * \n         * The way the scaling is handled is determined by the `scaleMode` property. The default is `NO_SCALE`,\n         * which prevents Phaser from scaling or touching the canvas, or its parent, at all. In this mode, you are\n         * responsible for all scaling. The other scaling modes afford you automatic scaling.\n         * \n         * If you wish to scale your game so that it always fits into the available space within the parent, you\n         * should use the scale mode `FIT`. Look at the documentation for other scale modes to see what options are\n         * available. Here is a basic config showing how to set this scale mode:\n         * \n         * ```javascript\n         * scale: {\n         *     parent: 'yourgamediv',\n         *     mode: Phaser.Scale.FIT,\n         *     width: 800,\n         *     height: 600\n         * }\n         * ```\n         * \n         * Place the `scale` config object within your game config.\n         * \n         * If you wish for the canvas to be resized directly, so that the canvas itself fills the available space\n         * (i.e. it isn't scaled, it's resized) then use the `RESIZE` scale mode. This will give you a 1:1 mapping\n         * of canvas pixels to game size. In this mode CSS isn't used to scale the canvas, it's literally adjusted\n         * to fill all available space within the parent. You should be extremely careful about the size of the\n         * canvas you're creating when doing this, as the larger the area, the more work the GPU has to do and it's\n         * very easy to hit fill-rate limits quickly.\n         * \n         * For complex, custom-scaling requirements, you should probably consider using the `RESIZE` scale mode,\n         * with your own limitations in place re: canvas dimensions and managing the scaling with the game scenes\n         * yourself. For the vast majority of games, however, the `FIT` mode is likely to be the most used.\n         * \n         * Please appreciate that the Scale Manager cannot perform miracles. All it does is scale your game canvas\n         * as best it can, based on what it can infer from its surrounding area. There are all kinds of environments\n         * where it's up to you to guide and help the canvas position itself, especially when built into rendering\n         * frameworks like React and Vue. If your page requires meta tags to prevent user scaling gestures, or such\n         * like, then it's up to you to ensure they are present in the html.\n         * \n         * #### Centering\n         * \n         * You can also have the game canvas automatically centered. Again, this relies heavily on the parent being\n         * properly configured and styled, as the centering offsets are based entirely on the available space\n         * within the parent element. Centering is disabled by default, or can be applied horizontally, vertically,\n         * or both. Here's an example:\n         * \n         * ```javascript\n         * scale: {\n         *     parent: 'yourgamediv',\n         *     autoCenter: Phaser.Scale.CENTER_BOTH,\n         *     width: 800,\n         *     height: 600\n         * }\n         * ```\n         * \n         * #### Fullscreen API\n         * \n         * If the browser supports it, you can send your game into fullscreen mode. In this mode, the game will fill\n         * the entire display, removing all browser UI and anything else present on the screen. It will remain in this\n         * mode until your game either disables it, or until the user tabs out or presses ESCape if on desktop. It's a\n         * great way to achieve a desktop-game like experience from the browser, but it does require a modern browser\n         * to handle it. Some mobile browsers also support this.",
        "* \n             * @param game A reference to the Phaser.Game instance.",
        "* A reference to the Phaser.Game instance.",
        "* A reference to the HTML Canvas Element that Phaser uses to render the game.",
        "* The DOM bounds of the canvas element.",
        "* The parent object of the Canvas. Often a div, or the browser window, or nothing in non-browser environments.\n             * \n             * This is set in the Game Config as the `parent` property. If undefined (or just not present), it will default\n             * to use the document body. If specifically set to `null` Phaser will ignore all parent operations.",
        "* Is the parent element the browser window?",
        "* The Parent Size component.",
        "* The Game Size component.\n             * \n             * The un-modified game size, as requested in the game config (the raw width / height),\n             * as used for world bounds, cameras, etc",
        "* The Base Size component.\n             * \n             * The modified game size, which is the gameSize * resolution, used to set the canvas width and height\n             * (but not the CSS style)",
        "* The Display Size component.\n             * \n             * The size used for the canvas style, factoring in the scale mode, parent and other values.",
        "* The game scale mode.",
        "* The canvas resolution.\n             * \n             * This is hard-coded to a value of 1 in the 3.16 release of Phaser and will be enabled at a later date.",
        "* The game zoom factor.\n             * \n             * This value allows you to multiply your games base size by the given zoom factor.\n             * This is then used when calculating the display size, even in `NO_SCALE` situations.\n             * If you don't want Phaser to touch the canvas style at all, this value should be 1.\n             * \n             * Can also be set to `MAX_ZOOM` in which case the zoom value will be derived based\n             * on the game size and available space within the parent.",
        "* The scale factor between the baseSize and the canvasBounds.",
        "* If set, the canvas sizes will be automatically passed through Math.floor.\n             * This results in rounded pixel display values, which is important for performance on legacy\n             * and low powered devices, but at the cost of not achieving a 'perfect' fit in some browser windows.",
        "* Automatically center the canvas within the parent? The different centering modes are:\n             * \n             * 1. No centering.\n             * 2. Center both horizontally and vertically.\n             * 3. Center horizontally.\n             * 4. Center vertically.\n             * \n             * Please be aware that in order to center the game canvas, you must have specified a parent\n             * that has a size set, or the canvas parent is the document.body.",
        "* The current device orientation.\n             * \n             * Orientation events are dispatched via the Device Orientation API, typically only on mobile browsers.",
        "* A reference to the Device.Fullscreen object.",
        "* The DOM Element which is sent into fullscreen mode.",
        "* The dirty state of the Scale Manager.\n             * Set if there is a change between the parent size and the current size.",
        "* How many milliseconds should elapse before checking if the browser size has changed?\n             * \n             * Most modern browsers dispatch a 'resize' event, which the Scale Manager will listen for.\n             * However, older browsers fail to do this, or do it consistently, so we fall back to a\n             * more traditional 'size check' based on a time interval. You can control how often it is\n             * checked here.",
        "* Called _before_ the canvas object is created and added to the DOM.",
        "* The Boot handler is called by Phaser.Game when it first starts up.\n             * The renderer is available by now and the canvas has been added to the DOM.",
        "* Parses the game configuration to set-up the scale defaults.\n             * @param config The Game configuration object.",
        "* Determines the parent element of the game canvas, if any, based on the game configuration.\n             * @param config The Game configuration object.",
        "* Calculates the size of the parent bounds and updates the `parentSize` component, if the canvas has a dom parent.",
        "* Attempts to lock the orientation of the web browser using the Screen Orientation API.\n             * \n             * This API is only available on modern mobile browsers.\n             * See https://developer.mozilla.org/en-US/docs/Web/API/Screen/lockOrientation for details.\n             * @param orientation The orientation you'd like to lock the browser in. Should be an API string such as 'landscape', 'landscape-primary', 'portrait', etc.",
        "* This method will set the size of the Parent Size component, which is used in scaling\n             * and centering calculations. You only need to call this method if you have explicitly\n             * disabled the use of a parent in your game config, but still wish to take advantage of\n             * other Scale Manager features.\n             * @param width The new width of the parent.\n             * @param height The new height of the parent.",
        "* This method will set a new size for your game.\n             * @param width The new width of the game.\n             * @param height The new height of the game.",
        "* Call this to modify the size of the Phaser canvas element directly.\n             * You should only use this if you are using the `NO_SCALE` scale mode,\n             * it will update all internal components completely.\n             * \n             * If all you want to do is change the size of the parent, see the `setParentSize` method.\n             * \n             * If all you want is to change the base size of the game, but still have the Scale Manager\n             * manage all the scaling, then see the `setGameSize` method.\n             * \n             * This method will set the `gameSize`, `baseSize` and `displaySize` components to the given\n             * dimensions. It will then resize the canvas width and height to the values given, by\n             * directly setting the properties. Finally, if you have set the Scale Manager zoom value\n             * to anything other than 1 (the default), it will set the canvas CSS width and height to\n             * be the given size multiplied by the zoom factor (the canvas pixel size remains untouched).\n             * \n             * If you have enabled `autoCenter`, it is then passed to the `updateCenter` method and\n             * the margins are set, allowing the canvas to be centered based on its parent element\n             * alone. Finally, the `displayScale` is adjusted and the RESIZE event dispatched.\n             * @param width The new width of the game.\n             * @param height The new height of the game.",
        "* Sets the zoom value of the Scale Manager.\n             * @param value The new zoom value of the game.",
        "* Sets the zoom to be the maximum possible based on the _current_ parent size.",
        "* Refreshes the internal scale values, bounds sizes and orientation checks.\n             * \n             * Once finished, dispatches the resize event.\n             * \n             * This is called automatically by the Scale Manager when the browser window size changes,\n             * as long as it is using a Scale Mode other than 'NONE'.",
        "* Internal method that checks the current screen orientation, only if the internal check flag is set.\n             * \n             * If the orientation has changed it updates the orientation property and then dispatches the orientation change event.",
        "* Internal method that manages updating the size components based on the scale mode.",
        "* Calculates and returns the largest possible zoom factor, based on the current\n             * parent and game sizes. If the parent has no dimensions (i.e. an unstyled div),\n             * or is smaller than the un-zoomed game, then this will return a value of 1 (no zoom)",
        "* Calculates and updates the canvas CSS style in order to center it within the\n             * bounds of its parent. If you have explicitly set parent to be `null` in your\n             * game config then this method will likely give incorrect results unless you have called the\n             * `setParentSize` method first.\n             * \n             * It works by modifying the canvas CSS `marginLeft` and `marginTop` properties.\n             * \n             * If they have already been set by your own style sheet, or code, this will overwrite them.\n             * \n             * To prevent the Scale Manager from centering the canvas, either do not set the\n             * `autoCenter` property in your game config, or make sure it is set to `NO_CENTER`.",
        "* Updates the `canvasBounds` rectangle to match the bounding client rectangle of the\n             * canvas element being used to track input events.",
        "* Transforms the pageX value into the scaled coordinate space of the Scale Manager.\n             * @param pageX The DOM pageX value.",
        "* Transforms the pageY value into the scaled coordinate space of the Scale Manager.\n             * @param pageY The DOM pageY value.",
        "* Sends a request to the browser to ask it to go in to full screen mode, using the {@link https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API Fullscreen API}.\n             * \n             * If the browser does not support this, a `FULLSCREEN_UNSUPPORTED` event will be emitted.\n             * \n             * This method _must_ be called from a user-input gesture, such as `pointerdown`. You cannot launch\n             * games fullscreen without this, as most browsers block it. Games within an iframe will also be blocked\n             * from fullscreen unless the iframe has the `allowfullscreen` attribute.\n             * \n             * Performing an action that navigates to another page, or opens another tab, will automatically cancel\n             * fullscreen mode, as will the user pressing the ESC key. To cancel fullscreen mode from your game, i.e.\n             * from clicking an icon, call the `stopFullscreen` method.\n             * \n             * A browser can only send one DOM element into fullscreen. You can control which element this is by\n             * setting the `fullscreenTarget` property in your game config, or changing the property in the Scale Manager.\n             * Note that the game canvas _must_ be a child of the target. If you do not give a target, Phaser will\n             * automatically create a blank `<div>` element and move the canvas into it, before going fullscreen.\n             * When it leaves fullscreen, the div will be removed.\n             * @param fullscreenOptions The FullscreenOptions dictionary is used to provide configuration options when entering full screen.",
        "* An internal method that gets the target element that is used when entering fullscreen mode.",
        "* Calling this method will cancel fullscreen mode, if the browser has entered it.",
        "* Toggles the fullscreen mode. If already in fullscreen, calling this will cancel it.\n             * If not in fullscreen, this will request the browser to enter fullscreen mode.\n             * \n             * If the browser does not support this, a `FULLSCREEN_UNSUPPORTED` event will be emitted.\n             * \n             * This method _must_ be called from a user-input gesture, such as `pointerdown`. You cannot launch\n             * games fullscreen without this, as most browsers block it. Games within an iframe will also be blocked\n             * from fullscreen unless the iframe has the `allowfullscreen` attribute.\n             * @param fullscreenOptions The FullscreenOptions dictionary is used to provide configuration options when entering full screen.",
        "* An internal method that starts the different DOM event listeners running.",
        "* Triggered when a fullscreenchange event is dispatched by the DOM.",
        "* Triggered when a fullscreenerror event is dispatched by the DOM.",
        "* Internal method, called automatically by the game step.\n             * Monitors the elapsed time and resize interval to see if a parent bounds check needs to take place.\n             * @param time The time value from the most recent Game step. Typically a high-resolution timer value, or Date.now().\n             * @param delta The delta value since the last frame. This is smoothed to avoid delta spikes by the TimeStep class.",
        "* Stops all DOM event listeners.",
        "* Destroys this Scale Manager, releasing all references to external resources.\n             * Once destroyed, the Scale Manager cannot be used again.",
        "* Is the browser currently in fullscreen mode or not?",
        "* The game width.\n             * \n             * This is typically the size given in the game configuration.",
        "* The game height.\n             * \n             * This is typically the size given in the game configuration.",
        "* Is the device in a portrait orientation as reported by the Orientation API?\n             * This value is usually only available on mobile devices.",
        "* Is the device in a landscape orientation as reported by the Orientation API?\n             * This value is usually only available on mobile devices.",
        "* Are the game dimensions portrait? (i.e. taller than they are wide)\n             * \n             * This is different to the device itself being in a portrait orientation.",
        "* Are the game dimensions landscape? (i.e. wider than they are tall)\n             * \n             * This is different to the device itself being in a landscape orientation.",
        "* The game canvas is not centered within the parent by Phaser.\n         * You can still center it yourself via CSS.",
        "* The game canvas is centered both horizontally and vertically within the parent.\n         * To do this, the parent has to have a bounds that can be calculated and not be empty.\n         * \n         * Centering is achieved by setting the margin left and top properties of the\n         * game canvas, and does not factor in any other CSS styles you may have applied.",
        "* The game canvas is centered horizontally within the parent.\n         * To do this, the parent has to have a bounds that can be calculated and not be empty.\n         * \n         * Centering is achieved by setting the margin left and top properties of the\n         * game canvas, and does not factor in any other CSS styles you may have applied.",
        "* The game canvas is centered both vertically within the parent.\n         * To do this, the parent has to have a bounds that can be calculated and not be empty.\n         * \n         * Centering is achieved by setting the margin left and top properties of the\n         * game canvas, and does not factor in any other CSS styles you may have applied.",
        "* A landscape orientation.",
        "* A portrait orientation.",
        "* No scaling happens at all. The canvas is set to the size given in the game config and Phaser doesn't change it\n         * again from that point on. If you change the canvas size, either via CSS, or directly via code, then you need\n         * to call the Scale Managers `resize` method to give the new dimensions, or input events will stop working.",
        "* The height is automatically adjusted based on the width.",
        "* The width is automatically adjusted based on the height.",
        "* The width and height are automatically adjusted to fit inside the given target area,\n         * while keeping the aspect ratio. Depending on the aspect ratio there may be some space\n         * inside the area which is not covered.",
        "* The width and height are automatically adjusted to make the size cover the entire target\n         * area while keeping the aspect ratio. This may extend further out than the target size.",
        "* The Canvas is resized to fit all available _parent_ space, regardless of aspect ratio.",
        "* The game canvas will not be zoomed by Phaser.",
        "* The game canvas will be 2x zoomed by Phaser.",
        "* The game canvas will be 4x zoomed by Phaser.",
        "* Calculate the zoom value based on the maximum multiplied game size that will\n         * fit into the parent, or browser window if no parent is set.",
        "* Scene state.",
        "* Scene state.",
        "* Scene state.",
        "* Scene state.",
        "* Scene state.",
        "* Scene state.",
        "* Scene state.",
        "* Scene state.",
        "* Scene state.",
        "* Scene state.",
        "* The Scene Systems Boot Event.\n             * \n             * This event is dispatched by a Scene during the Scene Systems boot process. Primarily used by Scene Plugins.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('boot', listener)`.",
        "* The Scene Systems Destroy Event.\n             * \n             * This event is dispatched by a Scene during the Scene Systems destroy process.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('destroy', listener)`.\n             * \n             * You should destroy any resources that may be in use by your Scene in this event handler.",
        "* The Scene Systems Pause Event.\n             * \n             * This event is dispatched by a Scene when it is paused, either directly via the `pause` method, or as an\n             * action from another Scene.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('pause', listener)`.",
        "* The Scene Systems Post Update Event.\n             * \n             * This event is dispatched by a Scene during the main game loop step.\n             * \n             * The event flow for a single step of a Scene is as follows:\n             * \n             * 1. [PRE_UPDATE]{@linkcode Phaser.Scenes.Events#event:PRE_UPDATE}\n             * 2. [UPDATE]{@linkcode Phaser.Scenes.Events#event:UPDATE}\n             * 3. The `Scene.update` method is called, if it exists\n             * 4. [POST_UPDATE]{@linkcode Phaser.Scenes.Events#event:POST_UPDATE}\n             * 5. [RENDER]{@linkcode Phaser.Scenes.Events#event:RENDER}\n             * \n             * Listen to it from a Scene using `this.scene.events.on('postupdate', listener)`.\n             * \n             * A Scene will only run its step if it is active.",
        "* The Scene Systems Pre Update Event.\n             * \n             * This event is dispatched by a Scene during the main game loop step.\n             * \n             * The event flow for a single step of a Scene is as follows:\n             * \n             * 1. [PRE_UPDATE]{@linkcode Phaser.Scenes.Events#event:PRE_UPDATE}\n             * 2. [UPDATE]{@linkcode Phaser.Scenes.Events#event:UPDATE}\n             * 3. The `Scene.update` method is called, if it exists\n             * 4. [POST_UPDATE]{@linkcode Phaser.Scenes.Events#event:POST_UPDATE}\n             * 5. [RENDER]{@linkcode Phaser.Scenes.Events#event:RENDER}\n             * \n             * Listen to it from a Scene using `this.scene.events.on('preupdate', listener)`.\n             * \n             * A Scene will only run its step if it is active.",
        "* The Scene Systems Ready Event.\n             * \n             * This event is dispatched by a Scene during the Scene Systems start process.\n             * By this point in the process the Scene is now fully active and rendering.\n             * This event is meant for your game code to use, as all plugins have responded to the earlier 'start' event.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('ready', listener)`.",
        "* The Scene Systems Render Event.\n             * \n             * This event is dispatched by a Scene during the main game loop step.\n             * \n             * The event flow for a single step of a Scene is as follows:\n             * \n             * 1. [PRE_UPDATE]{@linkcode Phaser.Scenes.Events#event:PRE_UPDATE}\n             * 2. [UPDATE]{@linkcode Phaser.Scenes.Events#event:UPDATE}\n             * 3. The `Scene.update` method is called, if it exists\n             * 4. [POST_UPDATE]{@linkcode Phaser.Scenes.Events#event:POST_UPDATE}\n             * 5. [RENDER]{@linkcode Phaser.Scenes.Events#event:RENDER}\n             * \n             * Listen to it from a Scene using `this.scene.events.on('render', listener)`.\n             * \n             * A Scene will only render if it is visible and active.\n             * By the time this event is dispatched, the Scene will have already been rendered.",
        "* The Scene Systems Resume Event.\n             * \n             * This event is dispatched by a Scene when it is resumed from a paused state, either directly via the `resume` method,\n             * or as an action from another Scene.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('resume', listener)`.",
        "* The Scene Systems Shutdown Event.\n             * \n             * This event is dispatched by a Scene during the Scene Systems shutdown process.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('shutdown', listener)`.\n             * \n             * You should free-up any resources that may be in use by your Scene in this event handler, on the understanding\n             * that the Scene may, at any time, become active again. A shutdown Scene is not 'destroyed', it's simply not\n             * currently active. Use the [DESTROY]{@linkcode Phaser.Scenes.Events#event:DESTROY} event to completely clear resources.",
        "* The Scene Systems Sleep Event.\n             * \n             * This event is dispatched by a Scene when it is sent to sleep, either directly via the `sleep` method,\n             * or as an action from another Scene.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('sleep', listener)`.",
        "* The Scene Systems Start Event.\n             * \n             * This event is dispatched by a Scene during the Scene Systems start process. Primarily used by Scene Plugins.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('start', listener)`.",
        "* The Scene Transition Complete Event.\n             * \n             * This event is dispatched by the Target Scene of a transition.\n             * \n             * It happens when the transition process has completed. This occurs when the duration timer equals or exceeds the duration\n             * of the transition.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('transitioncomplete', listener)`.\n             * \n             * The Scene Transition event flow is as follows:\n             * \n             * 1. [TRANSITION_OUT]{@linkcode Phaser.Scenes.Events#event:TRANSITION_OUT} - the Scene that started the transition will emit this event.\n             * 2. [TRANSITION_INIT]{@linkcode Phaser.Scenes.Events#event:TRANSITION_INIT} - the Target Scene will emit this event if it has an `init` method.\n             * 3. [TRANSITION_START]{@linkcode Phaser.Scenes.Events#event:TRANSITION_START} - the Target Scene will emit this event after its `create` method is called, OR ...\n             * 4. [TRANSITION_WAKE]{@linkcode Phaser.Scenes.Events#event:TRANSITION_WAKE} - the Target Scene will emit this event if it was asleep and has been woken-up to be transitioned to.\n             * 5. [TRANSITION_COMPLETE]{@linkcode Phaser.Scenes.Events#event:TRANSITION_COMPLETE} - the Target Scene will emit this event when the transition finishes.",
        "* The Scene Transition Init Event.\n             * \n             * This event is dispatched by the Target Scene of a transition.\n             * \n             * It happens immediately after the `Scene.init` method is called. If the Scene does not have an `init` method,\n             * this event is not dispatched.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('transitioninit', listener)`.\n             * \n             * The Scene Transition event flow is as follows:\n             * \n             * 1. [TRANSITION_OUT]{@linkcode Phaser.Scenes.Events#event:TRANSITION_OUT} - the Scene that started the transition will emit this event.\n             * 2. [TRANSITION_INIT]{@linkcode Phaser.Scenes.Events#event:TRANSITION_INIT} - the Target Scene will emit this event if it has an `init` method.\n             * 3. [TRANSITION_START]{@linkcode Phaser.Scenes.Events#event:TRANSITION_START} - the Target Scene will emit this event after its `create` method is called, OR ...\n             * 4. [TRANSITION_WAKE]{@linkcode Phaser.Scenes.Events#event:TRANSITION_WAKE} - the Target Scene will emit this event if it was asleep and has been woken-up to be transitioned to.\n             * 5. [TRANSITION_COMPLETE]{@linkcode Phaser.Scenes.Events#event:TRANSITION_COMPLETE} - the Target Scene will emit this event when the transition finishes.",
        "* The Scene Transition Out Event.\n             * \n             * This event is dispatched by a Scene when it initiates a transition to another Scene.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('transitionout', listener)`.\n             * \n             * The Scene Transition event flow is as follows:\n             * \n             * 1. [TRANSITION_OUT]{@linkcode Phaser.Scenes.Events#event:TRANSITION_OUT} - the Scene that started the transition will emit this event.\n             * 2. [TRANSITION_INIT]{@linkcode Phaser.Scenes.Events#event:TRANSITION_INIT} - the Target Scene will emit this event if it has an `init` method.\n             * 3. [TRANSITION_START]{@linkcode Phaser.Scenes.Events#event:TRANSITION_START} - the Target Scene will emit this event after its `create` method is called, OR ...\n             * 4. [TRANSITION_WAKE]{@linkcode Phaser.Scenes.Events#event:TRANSITION_WAKE} - the Target Scene will emit this event if it was asleep and has been woken-up to be transitioned to.\n             * 5. [TRANSITION_COMPLETE]{@linkcode Phaser.Scenes.Events#event:TRANSITION_COMPLETE} - the Target Scene will emit this event when the transition finishes.",
        "* The Scene Transition Start Event.\n             * \n             * This event is dispatched by the Target Scene of a transition, only if that Scene was not asleep.\n             * \n             * It happens immediately after the `Scene.create` method is called. If the Scene does not have a `create` method,\n             * this event is dispatched anyway.\n             * \n             * If the Target Scene was sleeping then the [TRANSITION_WAKE]{@linkcode Phaser.Scenes.Events#event:TRANSITION_WAKE} event is\n             * dispatched instead of this event.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('transitionstart', listener)`.\n             * \n             * The Scene Transition event flow is as follows:\n             * \n             * 1. [TRANSITION_OUT]{@linkcode Phaser.Scenes.Events#event:TRANSITION_OUT} - the Scene that started the transition will emit this event.\n             * 2. [TRANSITION_INIT]{@linkcode Phaser.Scenes.Events#event:TRANSITION_INIT} - the Target Scene will emit this event if it has an `init` method.\n             * 3. [TRANSITION_START]{@linkcode Phaser.Scenes.Events#event:TRANSITION_START} - the Target Scene will emit this event after its `create` method is called, OR ...\n             * 4. [TRANSITION_WAKE]{@linkcode Phaser.Scenes.Events#event:TRANSITION_WAKE} - the Target Scene will emit this event if it was asleep and has been woken-up to be transitioned to.\n             * 5. [TRANSITION_COMPLETE]{@linkcode Phaser.Scenes.Events#event:TRANSITION_COMPLETE} - the Target Scene will emit this event when the transition finishes.",
        "* The Scene Transition Wake Event.\n             * \n             * This event is dispatched by the Target Scene of a transition, only if that Scene was asleep before\n             * the transition began. If the Scene was not asleep the [TRANSITION_START]{@linkcode Phaser.Scenes.Events#event:TRANSITION_START} event is dispatched instead.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('transitionwake', listener)`.\n             * \n             * The Scene Transition event flow is as follows:\n             * \n             * 1. [TRANSITION_OUT]{@linkcode Phaser.Scenes.Events#event:TRANSITION_OUT} - the Scene that started the transition will emit this event.\n             * 2. [TRANSITION_INIT]{@linkcode Phaser.Scenes.Events#event:TRANSITION_INIT} - the Target Scene will emit this event if it has an `init` method.\n             * 3. [TRANSITION_START]{@linkcode Phaser.Scenes.Events#event:TRANSITION_START} - the Target Scene will emit this event after its `create` method is called, OR ...\n             * 4. [TRANSITION_WAKE]{@linkcode Phaser.Scenes.Events#event:TRANSITION_WAKE} - the Target Scene will emit this event if it was asleep and has been woken-up to be transitioned to.\n             * 5. [TRANSITION_COMPLETE]{@linkcode Phaser.Scenes.Events#event:TRANSITION_COMPLETE} - the Target Scene will emit this event when the transition finishes.",
        "* The Scene Systems Update Event.\n             * \n             * This event is dispatched by a Scene during the main game loop step.\n             * \n             * The event flow for a single step of a Scene is as follows:\n             * \n             * 1. [PRE_UPDATE]{@linkcode Phaser.Scenes.Events#event:PRE_UPDATE}\n             * 2. [UPDATE]{@linkcode Phaser.Scenes.Events#event:UPDATE}\n             * 3. The `Scene.update` method is called, if it exists\n             * 4. [POST_UPDATE]{@linkcode Phaser.Scenes.Events#event:POST_UPDATE}\n             * 5. [RENDER]{@linkcode Phaser.Scenes.Events#event:RENDER}\n             * \n             * Listen to it from a Scene using `this.scene.events.on('update', listener)`.\n             * \n             * A Scene will only run its step if it is active.",
        "* The Scene Systems Wake Event.\n             * \n             * This event is dispatched by a Scene when it is woken from sleep, either directly via the `wake` method,\n             * or as an action from another Scene.\n             * \n             * Listen to it from a Scene using `this.scene.events.on('wake', listener)`.",
        "* Builds an array of which physics plugins should be activated for the given Scene.\n         * @param sys The scene system to get the physics systems of.",
        "* Builds an array of which plugins (not including physics plugins) should be activated for the given Scene.\n         * @param sys The Scene Systems object to check for plugins.",
        "* The Scene Manager.\n         * \n         * The Scene Manager is a Game level system, responsible for creating, processing and updating all of the\n         * Scenes in a Game instance.",
        "* \n             * @param game The Phaser.Game instance this Scene Manager belongs to.\n             * @param sceneConfig Scene specific configuration settings.",
        "* The Game that this SceneManager belongs to.",
        "* An object that maps the keys to the scene so we can quickly get a scene from a key without iteration.",
        "* The array in which all of the scenes are kept.",
        "* Is the Scene Manager actively processing the Scenes list?",
        "* Has the Scene Manager properly started?",
        "* Do any of the Cameras in any of the Scenes require a custom viewport?\n             * If not we can skip scissor tests.",
        "* Process the Scene operations queue.",
        "* Adds a new Scene into the SceneManager.\n             * You must give each Scene a unique key by which you'll identify it.\n             * \n             * The `sceneConfig` can be:\n             * \n             * * A `Phaser.Scene` object, or an object that extends it.\n             * * A plain JavaScript object\n             * * A JavaScript ES6 Class that extends `Phaser.Scene`\n             * * A JavaScript ES5 prototype based Class\n             * * A JavaScript function\n             * \n             * If a function is given then a new Scene will be created by calling it.\n             * @param key A unique key used to reference the Scene, i.e. `MainMenu` or `Level1`.\n             * @param sceneConfig The config for the Scene\n             * @param autoStart If `true` the Scene will be started immediately after being added. Default false.\n             * @param data Optional data object. This will be set as Scene.settings.data and passed to `Scene.init`.",
        "* Removes a Scene from the SceneManager.\n             * \n             * The Scene is removed from the local scenes array, it's key is cleared from the keys\n             * cache and Scene.Systems.destroy is then called on it.\n             * \n             * If the SceneManager is processing the Scenes when this method is called it will\n             * queue the operation for the next update sequence.\n             * @param scene The Scene to be removed.",
        "* Updates the Scenes.\n             * @param time Time elapsed.\n             * @param delta Delta time from the last update.",
        "* Renders the Scenes.\n             * @param renderer The renderer to use.",
        "* Returns an array of all the current Scenes being managed by this Scene Manager.\n             * \n             * You can filter the output by the active state of the Scene and choose to have\n             * the array returned in normal or reversed order.\n             * @param isActive Only include Scene's that are currently active? Default true.\n             * @param inReverse Return the array of Scenes in reverse? Default false.",
        "* Retrieves a Scene.\n             * @param key The Scene to retrieve.",
        "* Determines whether a Scene is active.\n             * @param key The Scene to check.",
        "* Determines whether a Scene is visible.\n             * @param key The Scene to check.",
        "* Determines whether a Scene is sleeping.\n             * @param key The Scene to check.",
        "* Pauses the given Scene.\n             * @param key The Scene to pause.\n             * @param data An optional data object that will be passed to the Scene and emitted by its pause event.",
        "* Resumes the given Scene.\n             * @param key The Scene to resume.\n             * @param data An optional data object that will be passed to the Scene and emitted by its resume event.",
        "* Puts the given Scene to sleep.\n             * @param key The Scene to put to sleep.\n             * @param data An optional data object that will be passed to the Scene and emitted by its sleep event.",
        "* Awakens the given Scene.\n             * @param key The Scene to wake up.\n             * @param data An optional data object that will be passed to the Scene and emitted by its wake event.",
        "* Runs the given Scene, but does not change the state of this Scene.\n             * \n             * If the given Scene is paused, it will resume it. If sleeping, it will wake it.\n             * If not running at all, it will be started.\n             * \n             * Use this if you wish to open a modal Scene by calling `pause` on the current\n             * Scene, then `run` on the modal Scene.\n             * @param key The Scene to run.\n             * @param data A data object that will be passed to the Scene on start, wake, or resume.",
        "* Starts the given Scene.\n             * @param key The Scene to start.\n             * @param data Optional data object to pass to Scene.Settings and Scene.init.",
        "* Stops the given Scene.\n             * @param key The Scene to stop.",
        "* Sleeps one one Scene and starts the other.\n             * @param from The Scene to sleep.\n             * @param to The Scene to start.",
        "* Retrieves a Scene by numeric index.\n             * @param index The index of the Scene to retrieve.",
        "* Retrieves the numeric index of a Scene.\n             * @param key The key of the Scene.",
        "* Brings a Scene to the top of the Scenes list.\n             * \n             * This means it will render above all other Scenes.\n             * @param key The Scene to move.",
        "* Sends a Scene to the back of the Scenes list.\n             * \n             * This means it will render below all other Scenes.\n             * @param key The Scene to move.",
        "* Moves a Scene down one position in the Scenes list.\n             * @param key The Scene to move.",
        "* Moves a Scene up one position in the Scenes list.\n             * @param key The Scene to move.",
        "* Moves a Scene so it is immediately above another Scene in the Scenes list.\n             * \n             * This means it will render over the top of the other Scene.\n             * @param keyA The Scene that Scene B will be moved above.\n             * @param keyB The Scene to be moved.",
        "* Moves a Scene so it is immediately below another Scene in the Scenes list.\n             * \n             * This means it will render behind the other Scene.\n             * @param keyA The Scene that Scene B will be moved above.\n             * @param keyB The Scene to be moved.",
        "* Swaps the positions of two Scenes in the Scenes list.\n             * @param keyA The first Scene to swap.\n             * @param keyB The second Scene to swap.",
        "* Dumps debug information about each Scene to the developer console.",
        "* Destroy the SceneManager and all of its Scene's systems.",
        "* A proxy class to the Global Scene Manager.",
        "* \n             * @param scene The Scene that this ScenePlugin belongs to.",
        "* The Scene that this ScenePlugin belongs to.",
        "* The Scene Systems instance of the Scene that this ScenePlugin belongs to.",
        "* The settings of the Scene this ScenePlugin belongs to.",
        "* The key of the Scene this ScenePlugin belongs to.",
        "* The Game's SceneManager.",
        "* If this Scene is currently transitioning to another, this holds\n             * the current percentage of the transition progress, between 0 and 1.",
        "* Shutdown this Scene and run the given one.\n             * @param key The Scene to start.\n             * @param data The Scene data.",
        "* Restarts this Scene.\n             * @param data The Scene data.",
        "* This will start a transition from the current Scene to the target Scene given.\n             * \n             * The transition will last for the duration specified in milliseconds.\n             * \n             * You can have the target Scene moved above or below this one in the display list.\n             * \n             * You can specify an update callback. This callback will be invoked _every frame_ for the duration\n             * of the transition.\n             * \n             * This Scene can either be sent to sleep at the end of the transition, or stopped. The default is to stop.\n             * \n             * There are also 5 transition related events: This scene will emit the event `transitionout` when\n             * the transition begins, which is typically the frame after calling this method.\n             * \n             * The target Scene will emit the event `transitioninit` when that Scene's `init` method is called.\n             * It will then emit the event `transitionstart` when its `create` method is called.\n             * If the Scene was sleeping and has been woken up, it will emit the event `transitionwake` instead of these two,\n             * as the Scenes `init` and `create` methods are not invoked when a Scene wakes up.\n             * \n             * When the duration of the transition has elapsed it will emit the event `transitioncomplete`.\n             * These events are cleared of all listeners when the Scene shuts down, but not if it is sent to sleep.\n             * \n             * It's important to understand that the duration of the transition begins the moment you call this method.\n             * If the Scene you are transitioning to includes delayed processes, such as waiting for files to load, the\n             * time still counts down even while that is happening. If the game itself pauses, or something else causes\n             * this Scenes update loop to stop, then the transition will also pause for that duration. There are\n             * checks in place to prevent you accidentally stopping a transitioning Scene but if you've got code to\n             * override this understand that until the target Scene completes it might never be unlocked for input events.\n             * @param config The transition configuration object.",
        "* Add the Scene into the Scene Manager and start it if 'autoStart' is true or the Scene config 'active' property is set.\n             * @param key The Scene key.\n             * @param sceneConfig The config for the Scene.\n             * @param autoStart Whether to start the Scene after it's added.\n             * @param data Optional data object. This will be set as Scene.settings.data and passed to `Scene.init`.",
        "* Launch the given Scene and run it in parallel with this one.\n             * @param key The Scene to launch.\n             * @param data The Scene data.",
        "* Runs the given Scene, but does not change the state of this Scene.\n             * \n             * If the given Scene is paused, it will resume it. If sleeping, it will wake it.\n             * If not running at all, it will be started.\n             * \n             * Use this if you wish to open a modal Scene by calling `pause` on the current\n             * Scene, then `run` on the modal Scene.\n             * @param key The Scene to run.\n             * @param data A data object that will be passed to the Scene and emitted in its ready, wake, or resume events.",
        "* Pause the Scene - this stops the update step from happening but it still renders.\n             * @param key The Scene to pause.\n             * @param data An optional data object that will be passed to the Scene and emitted in its pause event.",
        "* Resume the Scene - starts the update loop again.\n             * @param key The Scene to resume.\n             * @param data An optional data object that will be passed to the Scene and emitted in its resume event.",
        "* Makes the Scene sleep (no update, no render) but doesn't shutdown.\n             * @param key The Scene to put to sleep.\n             * @param data An optional data object that will be passed to the Scene and emitted in its sleep event.",
        "* Makes the Scene wake-up (starts update and render)\n             * @param key The Scene to wake up.\n             * @param data An optional data object that will be passed to the Scene and emitted in its wake event.",
        "* Makes this Scene sleep then starts the Scene given.\n             * @param key The Scene to start.",
        "* Shutdown the Scene, clearing display list, timers, etc.\n             * @param key The Scene to stop.",
        "* Sets the active state of the given Scene.\n             * @param value If `true` the Scene will be resumed. If `false` it will be paused.\n             * @param key The Scene to set the active state of.\n             * @param data An optional data object that will be passed to the Scene and emitted with its events.",
        "* Sets the visible state of the given Scene.\n             * @param value The visible value.\n             * @param key The Scene to set the visible state for.",
        "* Checks if the given Scene is sleeping or not?\n             * @param key The Scene to check.",
        "* Checks if the given Scene is active or not?\n             * @param key The Scene to check.",
        "* Checks if the given Scene is visible or not?\n             * @param key The Scene to check.",
        "* Swaps the position of two scenes in the Scenes list.\n             * \n             * This controls the order in which they are rendered and updated.\n             * @param keyA The first Scene to swap.\n             * @param keyB The second Scene to swap. If none is given it defaults to this Scene.",
        "* Swaps the position of two scenes in the Scenes list, so that Scene B is directly above Scene A.\n             * \n             * This controls the order in which they are rendered and updated.\n             * @param keyA The Scene that Scene B will be moved to be above.\n             * @param keyB The Scene to be moved. If none is given it defaults to this Scene.",
        "* Swaps the position of two scenes in the Scenes list, so that Scene B is directly below Scene A.\n             * \n             * This controls the order in which they are rendered and updated.\n             * @param keyA The Scene that Scene B will be moved to be below.\n             * @param keyB The Scene to be moved. If none is given it defaults to this Scene.",
        "* Removes a Scene from the SceneManager.\n             * \n             * The Scene is removed from the local scenes array, it's key is cleared from the keys\n             * cache and Scene.Systems.destroy is then called on it.\n             * \n             * If the SceneManager is processing the Scenes when this method is called it wil\n             * queue the operation for the next update sequence.\n             * @param key The Scene to be removed.",
        "* Moves a Scene up one position in the Scenes list.\n             * @param key The Scene to move.",
        "* Moves a Scene down one position in the Scenes list.\n             * @param key The Scene to move.",
        "* Brings a Scene to the top of the Scenes list.\n             * \n             * This means it will render above all other Scenes.\n             * @param key The Scene to move.",
        "* Sends a Scene to the back of the Scenes list.\n             * \n             * This means it will render below all other Scenes.\n             * @param key The Scene to move.",
        "* Retrieve a Scene.\n             * @param key The Scene to retrieve.",
        "* Retrieves the numeric index of a Scene in the Scenes list.\n             * @param key The Scene to get the index of.",
        "* The unique key of this Scene. Must be unique within the entire Game instance.",
        "* Does the Scene start as active or not? An active Scene updates each step.",
        "* Does the Scene start as visible or not? A visible Scene renders each step.",
        "* An optional Loader Packfile to be loaded before the Scene begins.",
        "* An optional Camera configuration object.",
        "* Overwrites the default injection map for a scene.",
        "* Extends the injection map for a scene.",
        "* The physics configuration object for the Scene.",
        "* The loader configuration object for the Scene.",
        "* The plugin configuration object for the Scene.",
        "* The current status of the Scene. Maps to the Scene constants.",
        "* The unique key of this Scene. Unique within the entire Game instance.",
        "* The active state of this Scene. An active Scene updates each step.",
        "* The visible state of this Scene. A visible Scene renders each step.",
        "* Has the Scene finished booting?",
        "* Is the Scene in a state of transition?",
        "* The Scene this Scene is transitioning from, if set.",
        "* The duration of the transition, if set.",
        "* Is this Scene allowed to receive input during transitions?",
        "* a data bundle passed to this Scene from the Scene Manager.",
        "* The Loader Packfile to be loaded before the Scene begins.",
        "* The Camera configuration object.",
        "* The Scene's Injection Map.",
        "* The physics configuration object for the Scene.",
        "* The loader configuration object for the Scene.",
        "* The plugin configuration object for the Scene.",
        "* Takes a Scene configuration object and returns a fully formed System Settings object.\n             * @param config The Scene configuration object used to create this Scene Settings.",
        "* The Scene Systems class.\n         * \n         * This class is available from within a Scene under the property `sys`.\n         * It is responsible for managing all of the plugins a Scene has running, including the display list, and\n         * handling the update step and renderer. It also contains references to global systems belonging to Game.",
        "* \n             * @param scene The Scene that owns this Systems instance.\n             * @param config Scene specific configuration settings.",
        "* A reference to the Scene that these Systems belong to.",
        "* A reference to the Phaser Game instance.",
        "* The Facebook Instant Games Plugin.",
        "* The Scene Configuration object, as passed in when creating the Scene.",
        "* The Scene Settings. This is the parsed output based on the Scene configuration.",
        "* A handy reference to the Scene canvas / context.",
        "* A reference to the Canvas Rendering Context being used by the renderer.",
        "* A reference to the global Animations Manager.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.anims` property.",
        "* A reference to the global Cache. The Cache stores all files bought in to Phaser via\n             * the Loader, with the exception of images. Images are stored in the Texture Manager.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.cache` property.",
        "* A reference to the global Plugins Manager.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.plugins` property.",
        "* A reference to the global registry. This is a game-wide instance of the Data Manager, allowing\n             * you to exchange data between Scenes via a universal and shared point.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.registry` property.",
        "* A reference to the global Scale Manager.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.scale` property.",
        "* A reference to the global Sound Manager.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.sound` property.",
        "* A reference to the global Texture Manager.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.textures` property.",
        "* A reference to the Scene's Game Object Factory.\n             * \n             * Use this to quickly and easily create new Game Object's.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.add` property.",
        "* A reference to the Scene's Camera Manager.\n             * \n             * Use this to manipulate and create Cameras for this specific Scene.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.cameras` property.",
        "* A reference to the Scene's Display List.\n             * \n             * Use this to organize the children contained in the display list.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.children` property.",
        "* A reference to the Scene's Event Manager.\n             * \n             * Use this to listen for Scene specific events, such as `pause` and `shutdown`.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.events` property.",
        "* A reference to the Scene's Game Object Creator.\n             * \n             * Use this to quickly and easily create new Game Object's. The difference between this and the\n             * Game Object Factory, is that the Creator just creates and returns Game Object instances, it\n             * doesn't then add them to the Display List or Update List.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.make` property.",
        "* A reference to the Scene Manager Plugin.\n             * \n             * Use this to manipulate both this and other Scene's in your game, for example to launch a parallel Scene,\n             * or pause or resume a Scene, or switch from this Scene to another.\n             * \n             * In the default set-up you can access this from within a Scene via the `this.scene` property.",
        "* A reference to the Scene's Update List.\n             * \n             * Use this to organize the children contained in the update list.\n             * \n             * The Update List is responsible for managing children that need their `preUpdate` methods called,\n             * in order to process so internal components, such as Sprites with Animations.\n             * \n             * In the default set-up there is no reference to this from within the Scene itself.",
        "* This method is called only once by the Scene Manager when the Scene is instantiated.\n             * It is responsible for setting up all of the Scene plugins and references.\n             * It should never be called directly.\n             * @param game A reference to the Phaser Game instance.",
        "* A single game step. Called automatically by the Scene Manager as a result of a Request Animation\n             * Frame or Set Timeout call to the main Game instance.\n             * @param time The time value from the most recent Game step. Typically a high-resolution timer value, or Date.now().\n             * @param delta The delta value since the last frame. This is smoothed to avoid delta spikes by the TimeStep class.",
        "* Called automatically by the Scene Manager.\n             * Instructs the Scene to render itself via its Camera Manager to the renderer given.\n             * @param renderer The renderer that invoked the render call.",
        "* Force a sort of the display list on the next render.",
        "* Immediately sorts the display list if the flag is set.",
        "* Pause this Scene.\n             * A paused Scene still renders, it just doesn't run ANY of its update handlers or systems.\n             * @param data A data object that will be passed in the 'pause' event.",
        "* Resume this Scene from a paused state.\n             * @param data A data object that will be passed in the 'resume' event.",
        "* Send this Scene to sleep.\n             * \n             * A sleeping Scene doesn't run it's update step or render anything, but it also isn't shut down\n             * or have any of its systems or children removed, meaning it can be re-activated at any point and\n             * will carry on from where it left off. It also keeps everything in memory and events and callbacks\n             * from other Scenes may still invoke changes within it, so be careful what is left active.\n             * @param data A data object that will be passed in the 'sleep' event.",
        "* Wake-up this Scene if it was previously asleep.\n             * @param data A data object that will be passed in the 'wake' event.",
        "* Is this Scene sleeping?",
        "* Is this Scene active?",
        "* Is this Scene paused?",
        "* Is this Scene currently transitioning out to, or in from another Scene?",
        "* Is this Scene currently transitioning out from itself to another Scene?",
        "* Is this Scene currently transitioning in from another Scene?",
        "* Is this Scene visible and rendering?",
        "* Sets the visible state of this Scene.\n             * An invisible Scene will not render, but will still process updates.\n             * @param value `true` to render this Scene, otherwise `false`.",
        "* Set the active state of this Scene.\n             * \n             * An active Scene will run its core update loop.\n             * @param value If `true` the Scene will be resumed, if previously paused. If `false` it will be paused.\n             * @param data A data object that will be passed in the 'resume' or 'pause' events.",
        "* Start this Scene running and rendering.\n             * Called automatically by the SceneManager.\n             * @param data Optional data object that may have been passed to this Scene from another.",
        "* Shutdown this Scene and send a shutdown event to all of its systems.\n             * A Scene that has been shutdown will not run its update loop or render, but it does\n             * not destroy any of its plugins or references. It is put into hibernation for later use.\n             * If you don't ever plan to use this Scene again, then it should be destroyed instead\n             * to free-up resources.\n             * @param data A data object that will be passed in the 'shutdown' event.",
        "* A base Phaser.Scene class which you could extend for your own use.",
        "* \n         * @param config Scene specific configuration settings.",
        "* The Scene Systems. You must never overwrite this property, or all hell will break lose.",
        "* A reference to the Phaser.Game instance.\n         * This property will only be available if defined in the Scene Injection Map.",
        "* A reference to the global Animation Manager.\n         * This property will only be available if defined in the Scene Injection Map.",
        "* A reference to the global Cache.\n         * This property will only be available if defined in the Scene Injection Map.",
        "* A reference to the game level Data Manager.\n         * This property will only be available if defined in the Scene Injection Map.",
        "* A reference to the Sound Manager.\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.",
        "* A reference to the Texture Manager.\n         * This property will only be available if defined in the Scene Injection Map.",
        "* A scene level Event Emitter.\n         * This property will only be available if defined in the Scene Injection Map.",
        "* A scene level Camera System.\n         * This property will only be available if defined in the Scene Injection Map.",
        "* A scene level Game Object Factory.\n         * This property will only be available if defined in the Scene Injection Map.",
        "* A scene level Game Object Creator.\n         * This property will only be available if defined in the Scene Injection Map.",
        "* A reference to the Scene Manager Plugin.\n         * This property will only be available if defined in the Scene Injection Map.",
        "* A scene level Game Object Display List.\n         * This property will only be available if defined in the Scene Injection Map.",
        "* A scene level Lights Manager Plugin.\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.",
        "* A scene level Data Manager Plugin.\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.",
        "* A scene level Input Manager Plugin.\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.",
        "* A scene level Loader Plugin.\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.",
        "* A scene level Time and Clock Plugin.\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.",
        "* A scene level Tween Manager Plugin.\n         * This property will only be available if defined in the Scene Injection Map and the plugin is installed.",
        "* A scene level Arcade Physics Plugin.\n         * This property will only be available if defined in the Scene Injection Map, the plugin is installed and configured.",
        "* A scene level Impact Physics Plugin.\n         * This property will only be available if defined in the Scene Injection Map, the plugin is installed and configured.",
        "* A scene level Matter Physics Plugin.\n         * This property will only be available if defined in the Scene Injection Map, the plugin is installed and configured.",
        "* A scene level Facebook Instant Games Plugin.\n         * This property will only be available if defined in the Scene Injection Map, the plugin is installed and configured.",
        "* A reference to the global Scale Manager.\n         * This property will only be available if defined in the Scene Injection Map.",
        "* Should be overridden by your own Scenes.\n         * @param time The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\n         * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* Class containing all the shared state and behavior of a sound object, independent of the implementation.",
        "* \n             * @param manager Reference to the current sound manager instance.\n             * @param key Asset key for the sound.\n             * @param config An optional config object containing default sound settings.",
        "* Asset key for the sound.",
        "* Flag indicating if sound is currently playing.",
        "* Flag indicating if sound is currently paused.",
        "* A property that holds the value of sound's actual playback rate,\n             * after its rate and detune values has been combined with global\n             * rate and detune values.",
        "* A value representing the duration, in seconds.\n             * It could be total sound duration or a marker duration.",
        "* The total duration of the sound in seconds.",
        "* Object containing markers definitions.",
        "* Currently playing marker.\n             * 'null' if whole sound is playing.",
        "* Adds a marker into the current sound. A marker is represented by name, start time, duration, and optionally config object.\n             * This allows you to bundle multiple sounds together into a single audio file and use markers to jump between them for playback.\n             * @param marker Marker object.",
        "* Updates previously added marker.\n             * @param marker Marker object with updated values.",
        "* Removes a marker from the sound.\n             * @param markerName The name of the marker to remove.",
        "* Play this sound, or a marked section of it.\n             * It always plays the sound from the start. If you want to start playback from a specific time\n             * you can set 'seek' setting of the config object, provided to this call, to that value.\n             * @param markerName If you want to play a marker then provide the marker name here, otherwise omit it to play the full sound. Default ''.\n             * @param config Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.",
        "* Pauses the sound.",
        "* Resumes the sound.",
        "* Stop playing this sound.",
        "* Method used internally for applying config values to some of the sound properties.",
        "* Method used internally for resetting values of some of the config properties.",
        "* Update method called automatically by sound manager on every game step.\n             * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n             * @param delta The delta time elapsed since the last frame.",
        "* Method used internally to calculate total playback rate of the sound.",
        "* Destroys this sound and all associated events and marks it for removal from the sound manager.",
        "* The sound manager is responsible for playing back audio via Web Audio API or HTML Audio tag as fallback.\n         * The audio file type and the encoding of those files are extremely important.\n         * \n         * Not all browsers can play all audio formats.\n         * \n         * There is a good guide to what's supported [here](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/Cross-browser_audio_basics#Audio_Codec_Support).",
        "* \n             * @param game Reference to the current game instance.",
        "* Local reference to game.",
        "* Local reference to the JSON Cache, as used by Audio Sprites.",
        "* Global mute setting.",
        "* Global volume setting.",
        "* Flag indicating if sounds should be paused when game looses focus,\n             * for instance when user switches to another tab/program/app.",
        "* Mobile devices require sounds to be triggered from an explicit user action,\n             * such as a tap, before any sound can be loaded/played on a web page.\n             * Set to true if the audio system is currently locked awaiting user interaction.",
        "* Adds a new sound into the sound manager.\n             * @param key Asset key for the sound.\n             * @param config An optional config object containing default sound settings.",
        "* Adds a new audio sprite sound into the sound manager.\n             * Audio Sprites are a combination of audio files and a JSON configuration.\n             * The JSON follows the format of that created by https://github.com/tonistiigi/audiosprite\n             * @param key Asset key for the sound.\n             * @param config An optional config object containing default sound settings.",
        "* Enables playing sound on the fly without the need to keep a reference to it.\n             * Sound will auto destroy once its playback ends.\n             * @param key Asset key for the sound.\n             * @param extra An optional additional object containing settings to be applied to the sound. It could be either config or marker object.",
        "* Enables playing audio sprite sound on the fly without the need to keep a reference to it.\n             * Sound will auto destroy once its playback ends.\n             * @param key Asset key for the sound.\n             * @param spriteName The name of the sound sprite to play.\n             * @param config An optional config object containing default sound settings.",
        "* Removes a sound from the sound manager.\n             * The removed sound is destroyed before removal.\n             * @param sound The sound object to remove.",
        "* Removes all sounds from the sound manager that have an asset key matching the given value.\n             * The removed sounds are destroyed before removal.\n             * @param key The key to match when removing sound objects.",
        "* Pauses all the sounds in the game.",
        "* Resumes all the sounds in the game.",
        "* Stops all the sounds in the game.",
        "* Method used internally for unlocking audio playback on devices that\n             * require user interaction before any sound can be played on a web page.\n             * \n             * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).",
        "* Method used internally for pausing sound manager if\n             * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.",
        "* Method used internally for resuming sound manager if\n             * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.",
        "* Update method called on every game step.\n             * Removes destroyed sounds and updates every active sound in the game.\n             * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n             * @param delta The delta time elapsed since the last frame.",
        "* Destroys all the sounds in the game and all associated events.",
        "* Sets the global playback rate at which all the sounds will be played.\n             * \n             * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\n             * and 2.0 doubles the audios playback speed.\n             * @param value Global playback rate at which all the sounds will be played.",
        "* Global playback rate at which all the sounds will be played.\n             * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\n             * and 2.0 doubles the audio's playback speed.",
        "* Sets the global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\n             * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\n             * @param value The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).",
        "* Global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\n             * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).",
        "* The Sound Complete Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they complete playback.\n             * \n             * Listen to it from a Sound instance using `Sound.on('complete', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('complete', listener);\n             * music.play();\n             * ```",
        "* The Sound Destroy Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are destroyed, either\n             * directly or via a Sound Manager.\n             * \n             * Listen to it from a Sound instance using `Sound.on('destroy', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('destroy', listener);\n             * music.destroy();\n             * ```",
        "* The Sound Detune Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their detune value changes.\n             * \n             * Listen to it from a Sound instance using `Sound.on('detune', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('detune', listener);\n             * music.play();\n             * music.setDetune(200);\n             * ```",
        "* The Sound Manager Global Detune Event.\n             * \n             * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\n             * or the HTML5 Audio Manager. It is dispatched when the `detune` property of the Sound Manager is changed, which globally\n             * adjusts the detuning of all active sounds.\n             * \n             * Listen to it from a Scene using: `this.sound.on('rate', listener)`.",
        "* The Sound Manager Global Mute Event.\n             * \n             * This event is dispatched by the Sound Manager when its `mute` property is changed, either directly\n             * or via the `setMute` method. This changes the mute state of all active sounds.\n             * \n             * Listen to it from a Scene using: `this.sound.on('mute', listener)`.",
        "* The Sound Manager Global Rate Event.\n             * \n             * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\n             * or the HTML5 Audio Manager. It is dispatched when the `rate` property of the Sound Manager is changed, which globally\n             * adjusts the playback rate of all active sounds.\n             * \n             * Listen to it from a Scene using: `this.sound.on('rate', listener)`.",
        "* The Sound Manager Global Volume Event.\n             * \n             * This event is dispatched by the Sound Manager when its `volume` property is changed, either directly\n             * or via the `setVolume` method. This changes the volume of all active sounds.\n             * \n             * Listen to it from a Scene using: `this.sound.on('volume', listener)`.",
        "* The Sound Looped Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they loop during playback.\n             * \n             * Listen to it from a Sound instance using `Sound.on('looped', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('looped', listener);\n             * music.setLoop(true);\n             * music.play();\n             * ```\n             * \n             * This is not to be confused with the [LOOP]{@linkcode Phaser.Sound.Events#event:LOOP} event, which only emits when the loop state of a Sound is changed.",
        "* The Sound Loop Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their loop state is changed.\n             * \n             * Listen to it from a Sound instance using `Sound.on('loop', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('loop', listener);\n             * music.setLoop(true);\n             * ```\n             * \n             * This is not to be confused with the [LOOPED]{@linkcode Phaser.Sound.Events#event:LOOPED} event, which emits each time a Sound loops during playback.",
        "* The Sound Mute Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their mute state changes.\n             * \n             * Listen to it from a Sound instance using `Sound.on('mute', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('mute', listener);\n             * music.play();\n             * music.setMute(true);\n             * ```",
        "* The Pause All Sounds Event.\n             * \n             * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\n             * or the HTML5 Audio Manager. It is dispatched when the `pauseAll` method is invoked and after all current Sounds\n             * have been paused.\n             * \n             * Listen to it from a Scene using: `this.sound.on('pauseall', listener)`.",
        "* The Sound Pause Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are paused.\n             * \n             * Listen to it from a Sound instance using `Sound.on('pause', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('pause', listener);\n             * music.play();\n             * music.pause();\n             * ```",
        "* The Sound Play Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are played.\n             * \n             * Listen to it from a Sound instance using `Sound.on('play', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('play', listener);\n             * music.play();\n             * ```",
        "* The Sound Rate Change Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their rate changes.\n             * \n             * Listen to it from a Sound instance using `Sound.on('rate', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('rate', listener);\n             * music.play();\n             * music.setRate(0.5);\n             * ```",
        "* The Resume All Sounds Event.\n             * \n             * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\n             * or the HTML5 Audio Manager. It is dispatched when the `resumeAll` method is invoked and after all current Sounds\n             * have been resumed.\n             * \n             * Listen to it from a Scene using: `this.sound.on('resumeall', listener)`.",
        "* The Sound Resume Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are resumed from a paused state.\n             * \n             * Listen to it from a Sound instance using `Sound.on('resume', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('resume', listener);\n             * music.play();\n             * music.pause();\n             * music.resume();\n             * ```",
        "* The Sound Seek Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are seeked to a new position.\n             * \n             * Listen to it from a Sound instance using `Sound.on('seek', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('seek', listener);\n             * music.play();\n             * music.setSeek(5000);\n             * ```",
        "* The Stop All Sounds Event.\n             * \n             * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\n             * or the HTML5 Audio Manager. It is dispatched when the `stopAll` method is invoked and after all current Sounds\n             * have been stopped.\n             * \n             * Listen to it from a Scene using: `this.sound.on('stopall', listener)`.",
        "* The Sound Stop Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are stopped.\n             * \n             * Listen to it from a Sound instance using `Sound.on('stop', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('stop', listener);\n             * music.play();\n             * music.stop();\n             * ```",
        "* The Sound Manager Unlocked Event.\n             * \n             * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,\n             * or the HTML5 Audio Manager. It is dispatched during the update loop when the Sound Manager becomes unlocked. For\n             * Web Audio this is on the first user gesture on the page.\n             * \n             * Listen to it from a Scene using: `this.sound.on('unlocked', listener)`.",
        "* The Sound Volume Event.\n             * \n             * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their volume changes.\n             * \n             * Listen to it from a Sound instance using `Sound.on('volume', listener)`, i.e.:\n             * \n             * ```javascript\n             * var music = this.sound.add('key');\n             * music.on('volume', listener);\n             * music.play();\n             * music.setVolume(0.5);\n             * ```",
        "* HTML5 Audio implementation of the sound.",
        "* \n             * @param manager Reference to the current sound manager instance.\n             * @param key Asset key for the sound.\n             * @param config An optional config object containing default sound settings. Default {}.",
        "* Play this sound, or a marked section of it.\n             * It always plays the sound from the start. If you want to start playback from a specific time\n             * you can set 'seek' setting of the config object, provided to this call, to that value.\n             * @param markerName If you want to play a marker then provide the marker name here, otherwise omit it to play the full sound. Default ''.\n             * @param config Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.",
        "* Pauses the sound.",
        "* Resumes the sound.",
        "* Stop playing this sound.",
        "* Update method called automatically by sound manager on every game step.\n             * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n             * @param delta The delta time elapsed since the last frame.",
        "* Calls Phaser.Sound.BaseSound#destroy method\n             * and cleans up all HTML5 Audio related stuff.",
        "* Method used internally to calculate total playback rate of the sound.",
        "* Boolean indicating whether the sound is muted or not.\n             * Gets or sets the muted state of this sound.",
        "* Sets the muted state of this Sound.\n             * @param value `true` to mute this sound, `false` to unmute it.",
        "* Gets or sets the volume of this sound, a value between 0 (silence) and 1 (full volume).",
        "* Sets the volume of this Sound.\n             * @param value The volume of the sound.",
        "* Rate at which this Sound will be played.\n             * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\n             * and 2.0 doubles the audios playback speed.",
        "* Sets the playback rate of this Sound.\n             * \n             * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\n             * and 2.0 doubles the audios playback speed.\n             * @param value The playback rate at of this Sound.",
        "* The detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\n             * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).",
        "* Sets the detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\n             * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\n             * @param value The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).",
        "* Property representing the position of playback for this sound, in seconds.\n             * Setting it to a specific value moves current playback to that position.\n             * The value given is clamped to the range 0 to current marker duration.\n             * Setting seek of a stopped sound has no effect.",
        "* Seeks to a specific point in this sound.\n             * @param value The point in the sound to seek to.",
        "* Flag indicating whether or not the sound or current sound marker will loop.",
        "* Sets the loop state of this Sound.\n             * @param value `true` to loop this sound, `false` to not loop it.",
        "* HTML5AudioSoundManager",
        "* \n             * @param game Reference to the current game instance.",
        "* Flag indicating whether if there are no idle instances of HTML5 Audio tag,\n             * for any particular sound, if one of the used tags should be hijacked and used\n             * for succeeding playback or if succeeding Phaser.Sound.HTML5AudioSound#play\n             * call should be ignored.",
        "* Value representing time difference, in seconds, between calling\n             * play method on an audio tag and when it actually starts playing.\n             * It is used to achieve more accurate delayed sound playback.\n             * \n             * You might need to tweak this value to get the desired results\n             * since audio play delay varies depending on the browser/platform.",
        "* A value by which we should offset the loop end marker of the\n             * looping sound to compensate for lag, caused by changing audio\n             * tag playback position, in order to achieve gapless looping.\n             * \n             * You might need to tweak this value to get the desired results\n             * since loop lag varies depending on the browser/platform.",
        "* Adds a new sound into the sound manager.\n             * @param key Asset key for the sound.\n             * @param config An optional config object containing default sound settings.",
        "* Unlocks HTML5 Audio loading and playback on mobile\n             * devices on the initial explicit user interaction.",
        "* Method used internally for pausing sound manager if\n             * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.",
        "* Method used internally for resuming sound manager if\n             * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.",
        "* Calls Phaser.Sound.BaseSoundManager#destroy method\n             * and cleans up all HTML5 Audio related stuff.",
        "* Method used internally by Phaser.Sound.HTML5AudioSound class methods and property setters\n             * to check if sound manager is locked and then either perform action immediately or queue it\n             * to be performed once the sound manager gets unlocked.\n             * @param sound Sound object on which to perform queued action.\n             * @param prop Name of the method to be called or property to be assigned a value to.\n             * @param value An optional parameter that either holds an array of arguments to be passed to the method call or value to be set to the property.",
        "* Sets the muted state of all this Sound Manager.\n             * @param value `true` to mute all sounds, `false` to unmute them.",
        "* Sets the volume of this Sound Manager.\n             * @param value The global volume of this Sound Manager.",
        "* No audio implementation of the sound. It is used if audio has been\n         * disabled in the game config or the device doesn't support any audio.\n         * \n         * It represents a graceful degradation of sound logic that provides\n         * minimal functionality and prevents Phaser projects that use audio from\n         * breaking on devices that don't support any audio playback technologies.",
        "* \n             * @param manager Reference to the current sound manager instance.\n             * @param key Asset key for the sound.\n             * @param config An optional config object containing default sound settings. Default {}.",
        "* No audio implementation of the sound manager. It is used if audio has been\n         * disabled in the game config or the device doesn't support any audio.\n         * \n         * It represents a graceful degradation of sound manager logic that provides\n         * minimal functionality and prevents Phaser projects that use audio from\n         * breaking on devices that don't support any audio playback technologies.",
        "* \n             * @param game Reference to the current game instance.",
        "* Creates a Web Audio, HTML5 Audio or No Audio Sound Manager based on config and device settings.\n         * \n         * Be aware of https://developers.google.com/web/updates/2017/09/autoplay-policy-changes\n         * @param game Reference to the current game instance.",
        "* Web Audio API implementation of the sound.",
        "* \n             * @param manager Reference to the current sound manager instance.\n             * @param key Asset key for the sound.\n             * @param config An optional config object containing default sound settings. Default {}.",
        "* Play this sound, or a marked section of it.\n             * \n             * It always plays the sound from the start. If you want to start playback from a specific time\n             * you can set 'seek' setting of the config object, provided to this call, to that value.\n             * @param markerName If you want to play a marker then provide the marker name here, otherwise omit it to play the full sound. Default ''.\n             * @param config Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.",
        "* Pauses the sound.",
        "* Resumes the sound.",
        "* Stop playing this sound.",
        "* Method used internally for applying config values to some of the sound properties.",
        "* Update method called automatically by sound manager on every game step.\n             * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.\n             * @param delta The delta time elapsed since the last frame.",
        "* Calls Phaser.Sound.BaseSound#destroy method\n             * and cleans up all Web Audio API related stuff.",
        "* Method used internally to calculate total playback rate of the sound.",
        "* Rate at which this Sound will be played.\n             * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\n             * and 2.0 doubles the audios playback speed.",
        "* Sets the playback rate of this Sound.\n             * \n             * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\n             * and 2.0 doubles the audios playback speed.\n             * @param value The playback rate at of this Sound.",
        "* The detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\n             * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).",
        "* Sets the detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\n             * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\n             * @param value The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).",
        "* Boolean indicating whether the sound is muted or not.\n             * Gets or sets the muted state of this sound.",
        "* Sets the muted state of this Sound.\n             * @param value `true` to mute this sound, `false` to unmute it.",
        "* Gets or sets the volume of this sound, a value between 0 (silence) and 1 (full volume).",
        "* Sets the volume of this Sound.\n             * @param value The volume of the sound.",
        "* Property representing the position of playback for this sound, in seconds.\n             * Setting it to a specific value moves current playback to that position.\n             * The value given is clamped to the range 0 to current marker duration.\n             * Setting seek of a stopped sound has no effect.",
        "* Seeks to a specific point in this sound.\n             * @param value The point in the sound to seek to.",
        "* Flag indicating whether or not the sound or current sound marker will loop.",
        "* Sets the loop state of this Sound.\n             * @param value `true` to loop this sound, `false` to not loop it.",
        "* Web Audio API implementation of the sound manager.",
        "* \n             * @param game Reference to the current game instance.",
        "* Adds a new sound into the sound manager.\n             * @param key Asset key for the sound.\n             * @param config An optional config object containing default sound settings.",
        "* Unlocks Web Audio API on the initial input event.\n             * \n             * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).",
        "* Method used internally for pausing sound manager if\n             * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.",
        "* Method used internally for resuming sound manager if\n             * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.",
        "* Calls Phaser.Sound.BaseSoundManager#destroy method\n             * and cleans up all Web Audio API related stuff.",
        "* Sets the muted state of all this Sound Manager.\n             * @param value `true` to mute all sounds, `false` to unmute them.",
        "* Sets the volume of this Sound Manager.\n             * @param value The global volume of this Sound Manager.",
        "* List is a generic implementation of an ordered list which contains utility methods for retrieving, manipulating, and iterating items.",
        "* \n             * @param parent The parent of this list.",
        "* The parent of this list.",
        "* The objects that belong to this collection.",
        "* The index of the current element.\n             * \n             * This is used internally when iterating through the list with the {@link #first}, {@link #last}, {@link #get}, and {@link #previous} properties.",
        "* A callback that is invoked every time a child is added to this list.",
        "* A callback that is invoked every time a child is removed from this list.",
        "* The property key to sort by.",
        "* Adds the given item to the end of the list. Each item must be unique.\n             * @param child The item, or array of items, to add to the list.\n             * @param skipCallback Skip calling the List.addCallback if this child is added successfully. Default false.",
        "* Adds an item to list, starting at a specified index. Each item must be unique within the list.\n             * @param child The item, or array of items, to add to the list.\n             * @param index The index in the list at which the element(s) will be inserted. Default 0.\n             * @param skipCallback Skip calling the List.addCallback if this child is added successfully. Default false.",
        "* Retrieves the item at a given position inside the List.\n             * @param index The index of the item.",
        "* Locates an item within the List and returns its index.\n             * @param child The item to locate.",
        "* Sort the contents of this List so the items are in order based on the given property.\n             * For example, `sort('alpha')` would sort the List contents based on the value of their `alpha` property.\n             * @param property The property to lexically sort by.\n             * @param handler Provide your own custom handler function. Will receive 2 children which it should compare and return a boolean.",
        "* Searches for the first instance of a child with its `name`\n             * property matching the given argument. Should more than one child have\n             * the same name only the first is returned.\n             * @param name The name to search for.",
        "* Returns a random child from the group.\n             * @param startIndex Offset from the front of the group (lowest child). Default 0.\n             * @param length Restriction on the number of values you want to randomly select from. Default (to top).",
        "* Returns the first element in a given part of the List which matches a specific criterion.\n             * @param property The name of the property to test or a falsey value to have no criterion.\n             * @param value The value to test the `property` against, or `undefined` to allow any value and only check for existence.\n             * @param startIndex The position in the List to start the search at. Default 0.\n             * @param endIndex The position in the List to optionally stop the search at. It won't be checked.",
        "* Returns all children in this List.\n             * \n             * You can optionally specify a matching criteria using the `property` and `value` arguments.\n             * \n             * For example: `getAll('parent')` would return only children that have a property called `parent`.\n             * \n             * You can also specify a value to compare the property to:\n             * \n             * `getAll('visible', true)` would return only children that have their visible property set to `true`.\n             * \n             * Optionally you can specify a start and end index. For example if this List had 100 children,\n             * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\n             * the first 50 children in the List.\n             * @param property An optional property to test against the value argument.\n             * @param value If property is set then Child.property must strictly equal this value to be included in the results.\n             * @param startIndex The first child index to start the search from.\n             * @param endIndex The last child index to search up until.",
        "* Returns the total number of items in the List which have a property matching the given value.\n             * @param property The property to test on each item.\n             * @param value The value to test the property against.",
        "* Swaps the positions of two items in the list.\n             * @param child1 The first item to swap.\n             * @param child2 The second item to swap.",
        "* Moves an item in the List to a new position.\n             * @param child The item to move.\n             * @param index Moves an item in the List to a new position.",
        "* Removes one or many items from the List.\n             * @param child The item, or array of items, to remove.\n             * @param skipCallback Skip calling the List.removeCallback. Default false.",
        "* Removes the item at the given position in the List.\n             * @param index The position to remove the item from.\n             * @param skipCallback Skip calling the List.removeCallback. Default false.",
        "* Removes the items within the given range in the List.\n             * @param startIndex The index to start removing from. Default 0.\n             * @param endIndex The position to stop removing at. The item at this position won't be removed.\n             * @param skipCallback Skip calling the List.removeCallback. Default false.",
        "* Removes all the items.\n             * @param skipCallback Skip calling the List.removeCallback. Default false.",
        "* Brings the given child to the top of this List.\n             * @param child The item to bring to the top of the List.",
        "* Sends the given child to the bottom of this List.\n             * @param child The item to send to the back of the list.",
        "* Moves the given child up one place in this group unless it's already at the top.\n             * @param child The item to move up.",
        "* Moves the given child down one place in this group unless it's already at the bottom.\n             * @param child The item to move down.",
        "* Reverses the order of all children in this List.",
        "* Shuffles the items in the list.",
        "* Replaces a child of this List with the given newChild. The newChild cannot be a member of this List.\n             * @param oldChild The child in this List that will be replaced.\n             * @param newChild The child to be inserted into this List.",
        "* Checks if an item exists within the List.\n             * @param child The item to check for the existence of.",
        "* Sets the property `key` to the given value on all members of this List.\n             * @param property The name of the property to set.\n             * @param value The value to set the property to.\n             * @param startIndex The first child index to start the search from.\n             * @param endIndex The last child index to search up until.",
        "* Passes all children to the given callback.\n             * @param callback The function to call.\n             * @param context Value to use as `this` when executing callback.\n             * @param args Additional arguments that will be passed to the callback, after the child.",
        "* Clears the List and recreates its internal array.",
        "* Destroys this List.",
        "* The number of items inside the List.",
        "* The first item in the List or `null` for an empty List.",
        "* The last item in the List, or `null` for an empty List.",
        "* The next item in the List, or `null` if the entire List has been traversed.\n             * \n             * This property can be read successively after reading {@link #first} or manually setting the {@link #position} to iterate the List.",
        "* The previous item in the List, or `null` if the entire List has been traversed.\n             * \n             * This property can be read successively after reading {@link #last} or manually setting the {@link #position} to iterate the List backwards.",
        "* The keys of a Map can be arbitrary values.\n         * \n         * ```javascript\n         * var map = new Map([\n         *    [ 1, 'one' ],\n         *    [ 2, 'two' ],\n         *    [ 3, 'three' ]\n         * ]);\n         * ```",
        "* \n             * @param elements An optional array of key-value pairs to populate this Map with.",
        "* The entries in this Map.",
        "* The number of key / value pairs in this Map.",
        "* Adds an element with a specified `key` and `value` to this Map.\n             * If the `key` already exists, the value will be replaced.\n             * @param key The key of the element to be added to this Map.\n             * @param value The value of the element to be added to this Map.",
        "* Returns the value associated to the `key`, or `undefined` if there is none.\n             * @param key The key of the element to return from the `Map` object.",
        "* Returns an `Array` of all the values stored in this Map.",
        "* Returns a boolean indicating whether an element with the specified key exists or not.\n             * @param key The key of the element to test for presence of in this Map.",
        "* Delete the specified element from this Map.\n             * @param key The key of the element to delete from this Map.",
        "* Delete all entries from this Map.",
        "* Returns all entries keys in this Map.",
        "* Returns an `Array` of all entries.",
        "* Dumps the contents of this Map to the console via `console.group`.",
        "* Passes all entries in this Map to the given callback.\n             * @param callback The callback which will receive the keys and entries held in this Map.",
        "* Returns `true` if the value exists within this Map. Otherwise, returns `false`.\n             * @param value The value to search for.",
        "* Merges all new keys from the given Map into this one.\n             * If it encounters a key that already exists it will be skipped unless override is set to `true`.\n             * @param map The Map to merge in to this Map.\n             * @param override Set to `true` to replace values in this Map with those from the source map, or `false` to skip them. Default false.",
        "* A Process Queue maintains three internal lists.\n         * \n         * The `pending` list is a selection of items which are due to be made 'active' in the next update.\n         * The `active` list is a selection of items which are considered active and should be updated.\n         * The `destroy` list is a selection of items that were active and are awaiting being destroyed in the next update.\n         * \n         * When new items are added to a Process Queue they are put in a pending data, rather than being added\n         * immediately the active list. Equally, items that are removed are put into the destroy list, rather than\n         * being destroyed immediately. This allows the Process Queue to carefully process each item at a specific, fixed\n         * time, rather than at the time of the request from the API.",
        "* Adds a new item to the Process Queue.\n             * The item is added to the pending list and made active in the next update.\n             * @param item The item to add to the queue.",
        "* Removes an item from the Process Queue.\n             * The item is added to the pending destroy and fully removed in the next update.\n             * @param item The item to be removed from the queue.",
        "* Update this queue. First it will process any items awaiting destruction, and remove them.\n             * \n             * Then it will check to see if there are any items pending insertion, and move them to an\n             * active state. Finally, it will return a list of active items for further processing.",
        "* Returns the current list of active items.",
        "* Immediately destroys this process queue, clearing all of its internal arrays and resetting the process totals.",
        "* RBush is a high-performance JavaScript library for 2D spatial indexing of points and rectangles.\n         * It's based on an optimized R-tree data structure with bulk insertion support.\n         * \n         * Spatial index is a special data structure for points and rectangles that allows you to perform queries like\n         * \"all items within this bounding box\" very efficiently (e.g. hundreds of times faster than looping over all items).\n         * \n         * This version of RBush uses a fixed min/max accessor structure of `[ '.left', '.top', '.right', '.bottom' ]`.\n         * This is to avoid the eval like function creation that the original library used, which caused CSP policy violations.",
        "* A Set is a collection of unique elements.",
        "* \n             * @param elements An optional array of elements to insert into this Set.",
        "* The entries of this Set. Stored internally as an array.",
        "* Inserts the provided value into this Set. If the value is already contained in this Set this method will have no effect.\n             * @param value The value to insert into this Set.",
        "* Get an element of this Set which has a property of the specified name, if that property is equal to the specified value.\n             * If no elements of this Set satisfy the condition then this method will return `null`.\n             * @param property The property name to check on the elements of this Set.\n             * @param value The value to check for.",
        "* Returns an array containing all the values in this Set.",
        "* Removes the given value from this Set if this Set contains that value.\n             * @param value The value to remove from the Set.",
        "* Dumps the contents of this Set to the console via `console.group`.",
        "* Passes each value in this Set to the given callback.\n             * Use this function when you know this Set will be modified during the iteration, otherwise use `iterate`.\n             * @param callback The callback to be invoked and passed each value this Set contains.\n             * @param callbackScope The scope of the callback.",
        "* Passes each value in this Set to the given callback.\n             * For when you absolutely know this Set won't be modified during the iteration.\n             * @param callback The callback to be invoked and passed each value this Set contains.\n             * @param callbackScope The scope of the callback.",
        "* Goes through each entry in this Set and invokes the given function on them, passing in the arguments.\n             * @param callbackKey The key of the function to be invoked on each Set entry.\n             * @param args Additional arguments that will be passed to the callback, after the child.",
        "* Clears this Set so that it no longer contains any values.",
        "* Returns `true` if this Set contains the given value, otherwise returns `false`.\n             * @param value The value to check for in this Set.",
        "* Returns a new Set containing all values that are either in this Set or in the Set provided as an argument.\n             * @param set The Set to perform the union with.",
        "* Returns a new Set that contains only the values which are in this Set and that are also in the given Set.\n             * @param set The Set to intersect this set with.",
        "* Returns a new Set containing all the values in this Set which are *not* also in the given Set.\n             * @param set The Set to perform the difference with.",
        "* The size of this Set. This is the number of entries within it.\n             * Changing the size will truncate the Set if the given value is smaller than the current size.\n             * Increasing the size larger than the current size has no effect.",
        "* The Size component allows you to set `width` and `height` properties and define the relationship between them.\n         * \n         * The component can automatically maintain the aspect ratios between the two values, and clamp them\n         * to a defined min-max range. You can also control the dominant axis. When dimensions are given to the Size component\n         * that would cause it to exceed its min-max range, the dimensions are adjusted based on the dominant axis.",
        "* \n             * @param width The width of the Size component. Default 0.\n             * @param height The height of the Size component. If not given, it will use the `width`. Default width.\n             * @param aspectMode The aspect mode of the Size component. Defaults to 0, no mode. Default 0.\n             * @param parent The parent of this Size component. Can be any object with public `width` and `height` properties. Dimensions are clamped to keep them within the parent bounds where possible. Default null.",
        "* The aspect mode this Size component will use when calculating its dimensions.\n             * This property is read-only. To change it use the `setAspectMode` method.",
        "* The proportional relationship between the width and height.\n             * \n             * This property is read-only and is updated automatically when either the `width` or `height` properties are changed,\n             * depending on the aspect mode.",
        "* The minimum allowed width.\n             * Cannot be less than zero.\n             * This value is read-only. To change it see the `setMin` method.",
        "* The minimum allowed height.\n             * Cannot be less than zero.\n             * This value is read-only. To change it see the `setMin` method.",
        "* The maximum allowed width.\n             * This value is read-only. To change it see the `setMax` method.",
        "* The maximum allowed height.\n             * This value is read-only. To change it see the `setMax` method.",
        "* A Vector2 containing the horizontal and vertical snap values, which the width and height are snapped to during resizing.\n             * \n             * By default this is disabled.\n             * \n             * This property is read-only. To change it see the `setSnap` method.",
        "* Sets the aspect mode of this Size component.\n             * \n             * The aspect mode controls what happens when you modify the `width` or `height` properties, or call `setSize`.\n             * \n             * It can be a number from 0 to 4, or a Size constant:\n             * \n             * 0. NONE = Do not make the size fit the aspect ratio. Change the ratio when the size changes.\n             * 1. WIDTH_CONTROLS_HEIGHT = The height is automatically adjusted based on the width.\n             * 2. HEIGHT_CONTROLS_WIDTH = The width is automatically adjusted based on the height.\n             * 3. FIT = The width and height are automatically adjusted to fit inside the given target area, while keeping the aspect ratio. Depending on the aspect ratio there may be some space inside the area which is not covered.\n             * 4. ENVELOP = The width and height are automatically adjusted to make the size cover the entire target area while keeping the aspect ratio. This may extend further out than the target size.\n             * \n             * Calling this method automatically recalculates the `width` and the `height`, if required.\n             * @param value The aspect mode value. Default 0.",
        "* By setting a Snap To value when this Size component is modified its dimensions will automatically\n             * by snapped to the nearest grid slice, using floor. For example, if you have snap value of 16,\n             * and the width changes to 68, then it will snap down to 64 (the closest multiple of 16 when floored)\n             * \n             * Note that snapping takes place before adjustments by the parent, or the min / max settings. If these\n             * values are not multiples of the given snap values, then this can result in un-snapped dimensions.\n             * \n             * Call this method with no arguments to reset the snap values.\n             * \n             * Calling this method automatically recalculates the `width` and the `height`, if required.\n             * @param snapWidth The amount to snap the width to. If you don't want to snap the width, pass a value of zero. Default 0.\n             * @param snapHeight The amount to snap the height to. If not provided it will use the `snapWidth` value. If you don't want to snap the height, pass a value of zero. Default snapWidth.",
        "* Sets, or clears, the parent of this Size component.\n             * \n             * To clear the parent call this method with no arguments.\n             * \n             * The parent influences the maximum extents to which this Size compoent can expand,\n             * based on the aspect mode:\n             * \n             * NONE - The parent clamps both the width and height.\n             * WIDTH_CONTROLS_HEIGHT - The parent clamps just the width.\n             * HEIGHT_CONTROLS_WIDTH - The parent clamps just the height.\n             * FIT - The parent clamps whichever axis is required to ensure the size fits within it.\n             * ENVELOP - The parent is used to ensure the size fully envelops the parent.\n             * \n             * Calling this method automatically calls `setSize`.\n             * @param parent Sets the parent of this Size component. Don't provide a value to clear an existing parent.",
        "* Set the minimum width and height values this Size component will allow.\n             * \n             * The minimum values can never be below zero, or greater than the maximum values.\n             * \n             * Setting this will automatically adjust both the `width` and `height` properties to ensure they are within range.\n             * \n             * Note that based on the aspect mode, and if this Size component has a parent set or not, the minimums set here\n             * _can_ be exceed in some situations.\n             * @param width The minimum allowed width of the Size component. Default 0.\n             * @param height The minimum allowed height of the Size component. If not given, it will use the `width`. Default width.",
        "* Set the maximum width and height values this Size component will allow.\n             * \n             * Setting this will automatically adjust both the `width` and `height` properties to ensure they are within range.\n             * \n             * Note that based on the aspect mode, and if this Size component has a parent set or not, the maximums set here\n             * _can_ be exceed in some situations.\n             * @param width The maximum allowed width of the Size component. Default Number.MAX_VALUE.\n             * @param height The maximum allowed height of the Size component. If not given, it will use the `width`. Default width.",
        "* Sets the width and height of this Size component based on the aspect mode.\n             * \n             * If the aspect mode is 'none' then calling this method will change the aspect ratio, otherwise the current\n             * aspect ratio is honored across all other modes.\n             * \n             * If snapTo values have been set then the given width and height are snapped first, prior to any further\n             * adjustment via min/max values, or a parent.\n             * \n             * If minimum and/or maximum dimensions have been specified, the values given to this method will be clamped into\n             * that range prior to adjustment, but may still exceed them depending on the aspect mode.\n             * \n             * If this Size component has a parent set, and the aspect mode is `fit` or `envelop`, then the given sizes will\n             * be clamped to the range specified by the parent.\n             * @param width The new width of the Size component. Default 0.\n             * @param height The new height of the Size component. If not given, it will use the `width`. Default width.",
        "* Sets a new aspect ratio, overriding what was there previously.\n             * \n             * It then calls `setSize` immediately using the current dimensions.\n             * @param ratio The new aspect ratio.",
        "* Sets a new width and height for this Size component and updates the aspect ratio based on them.\n             * \n             * It _doesn't_ change the `aspectMode` and still factors in size limits such as the min max and parent bounds.\n             * @param width The new width of the Size component.\n             * @param height The new height of the Size component. If not given, it will use the `width`. Default width.",
        "* Takes a new width and passes it through the min/max clamp and then checks it doesn't exceed the parent width.\n             * @param value The value to clamp and check.\n             * @param checkParent Check the given value against the parent, if set. Default true.",
        "* Takes a new height and passes it through the min/max clamp and then checks it doesn't exceed the parent height.\n             * @param value The value to clamp and check.\n             * @param checkParent Check the given value against the parent, if set. Default true.",
        "* The current `width` and `height` are adjusted to fit inside the given dimensions, while keeping the aspect ratio.\n             * \n             * If `fit` is true there may be some space inside the target area which is not covered if its aspect ratio differs.\n             * If `fit` is false the size may extend further out than the target area if the aspect ratios differ.\n             * \n             * If this Size component has a parent set, then the width and height passed to this method will be clamped so\n             * it cannot exceed that of the parent.\n             * @param width The new width of the Size component. Default 0.\n             * @param height The new height of the Size component. If not given, it will use the width value.\n             * @param fit Perform a `fit` (true) constraint, or an `envelop` (false) constraint. Default true.",
        "* The current `width` and `height` are adjusted to fit inside the given dimensions, while keeping the aspect ratio.\n             * \n             * There may be some space inside the target area which is not covered if its aspect ratio differs.\n             * \n             * If this Size component has a parent set, then the width and height passed to this method will be clamped so\n             * it cannot exceed that of the parent.\n             * @param width The new width of the Size component. Default 0.\n             * @param height The new height of the Size component. If not given, it will use the width value.",
        "* The current `width` and `height` are adjusted so that they fully envlop the given dimensions, while keeping the aspect ratio.\n             * \n             * The size may extend further out than the target area if the aspect ratios differ.\n             * \n             * If this Size component has a parent set, then the values are clamped so that it never exceeds the parent\n             * on the longest axis.\n             * @param width The new width of the Size component. Default 0.\n             * @param height The new height of the Size component. If not given, it will use the width value.",
        "* Sets the width of this Size component.\n             * \n             * Depending on the aspect mode, changing the width may also update the height and aspect ratio.\n             * @param width The new width of the Size component.",
        "* Sets the height of this Size component.\n             * \n             * Depending on the aspect mode, changing the height may also update the width and aspect ratio.\n             * @param height The new height of the Size component.",
        "* Returns a string representation of this Size component.",
        "* Copies the aspect mode, aspect ratio, width and height from this Size component\n             * to the given Size component. Note that the parent, if set, is not copied across.\n             * @param destination The Size component to copy the values to.",
        "* Destroys this Size component.\n             * \n             * This clears the local properties and any parent object, if set.\n             * \n             * A destroyed Size component cannot be re-used.",
        "* The width of this Size component.\n             * \n             * This value is clamped to the range specified by `minWidth` and `maxWidth`, if enabled.\n             * \n             * A width can never be less than zero.\n             * \n             * Changing this value will automatically update the `height` if the aspect ratio lock is enabled.\n             * You can also use the `setWidth` and `getWidth` methods.",
        "* The height of this Size component.\n             * \n             * This value is clamped to the range specified by `minHeight` and `maxHeight`, if enabled.\n             * \n             * A height can never be less than zero.\n             * \n             * Changing this value will automatically update the `width` if the aspect ratio lock is enabled.\n             * You can also use the `setHeight` and `getHeight` methods.",
        "* Do not make the size fit the aspect ratio. Change the ratio when the size changes.",
        "* The height is automatically adjusted based on the width.",
        "* The width is automatically adjusted based on the height.",
        "* The width and height are automatically adjusted to fit inside the given target area, while keeping the aspect ratio. Depending on the aspect ratio there may be some space inside the area which is not covered.",
        "* The width and height are automatically adjusted to make the size cover the entire target area while keeping the aspect ratio. This may extend further out than the target size.",
        "* A Canvas Texture is a special kind of Texture that is backed by an HTML Canvas Element as its source.\n         * \n         * You can use the properties of this texture to draw to the canvas element directly, using all of the standard\n         * canvas operations available in the browser. Any Game Object can be given this texture and will render with it.\n         * \n         * Note: When running under WebGL the Canvas Texture needs to re-generate its base WebGLTexture and reupload it to\n         * the GPU every time you modify it, otherwise the changes you make to this texture will not be visible. To do this\n         * you should call `CanvasTexture.refresh()` once you are finished with your changes to the canvas. Try and keep\n         * this to a minimum, especially on large canvas sizes, or you may inadvertently thrash the GPU by constantly uploading\n         * texture data to it. This restriction does not apply if using the Canvas Renderer.\n         * \n         * It starts with only one frame that covers the whole of the canvas. You can add further frames, that specify\n         * sections of the canvas using the `add` method.\n         * \n         * Should you need to resize the canvas use the `setSize` method so that it accurately updates all of the underlying\n         * texture data as well. Forgetting to do this (i.e. by changing the canvas size directly from your code) could cause\n         * graphical errors.",
        "* \n             * @param manager A reference to the Texture Manager this Texture belongs to.\n             * @param key The unique string-based key of this Texture.\n             * @param source The canvas element that is used as the base of this texture.\n             * @param width The width of the canvas.\n             * @param height The height of the canvas.",
        "* The source Canvas Element.",
        "* The 2D Canvas Rendering Context.",
        "* The width of the Canvas.\n             * This property is read-only, if you wish to change it use the `setSize` method.",
        "* The height of the Canvas.\n             * This property is read-only, if you wish to change it use the `setSize` method.",
        "* The context image data.\n             * Use the `update` method to populate this when the canvas changes.",
        "* A Uint8ClampedArray view into the `buffer`.\n             * Use the `update` method to populate this when the canvas changes.\n             * Note that this is unavailable in some browsers, such as Epic Browser, due to their security restrictions.",
        "* An Uint32Array view into the `buffer`.",
        "* An ArrayBuffer the same size as the context ImageData.",
        "* This re-creates the `imageData` from the current context.\n             * It then re-builds the ArrayBuffer, the `data` Uint8ClampedArray reference and the `pixels` Int32Array.\n             * \n             * Warning: This is a very expensive operation, so use it sparingly.",
        "* Draws the given Image or Canvas element to this CanvasTexture, then updates the internal\n             * ImageData buffer and arrays.\n             * @param x The x coordinate to draw the source at.\n             * @param y The y coordinate to draw the source at.\n             * @param source The element to draw to this canvas.",
        "* Draws the given texture frame to this CanvasTexture, then updates the internal\n             * ImageData buffer and arrays.\n             * @param key The unique string-based key of the Texture.\n             * @param frame The string-based name, or integer based index, of the Frame to get from the Texture.\n             * @param x The x coordinate to draw the source at. Default 0.\n             * @param y The y coordinate to draw the source at. Default 0.",
        "* Sets a pixel in the CanvasTexture to the given color and alpha values.\n             * \n             * This is an expensive operation to run in large quantities, so use sparingly.\n             * @param x The x coordinate of the pixel to get. Must lay within the dimensions of this CanvasTexture and be an integer.\n             * @param y The y coordinate of the pixel to get. Must lay within the dimensions of this CanvasTexture and be an integer.\n             * @param red The red color value. A number between 0 and 255.\n             * @param green The green color value. A number between 0 and 255.\n             * @param blue The blue color value. A number between 0 and 255.\n             * @param alpha The alpha value. A number between 0 and 255. Default 255.",
        "* Puts the ImageData into the context of this CanvasTexture at the given coordinates.\n             * @param imageData The ImageData to put at the given location.\n             * @param x The x coordinate to put the imageData. Must lay within the dimensions of this CanvasTexture and be an integer.\n             * @param y The y coordinate to put the imageData. Must lay within the dimensions of this CanvasTexture and be an integer.\n             * @param dirtyX Horizontal position (x coordinate) of the top-left corner from which the image data will be extracted. Default 0.\n             * @param dirtyY Vertical position (x coordinate) of the top-left corner from which the image data will be extracted. Default 0.\n             * @param dirtyWidth Width of the rectangle to be painted. Defaults to the width of the image data.\n             * @param dirtyHeight Height of the rectangle to be painted. Defaults to the height of the image data.",
        "* Gets an ImageData region from this CanvasTexture from the position and size specified.\n             * You can write this back using `CanvasTexture.putData`, or manipulate it.\n             * @param x The x coordinate of the top-left of the area to get the ImageData from. Must lay within the dimensions of this CanvasTexture and be an integer.\n             * @param y The y coordinate of the top-left of the area to get the ImageData from. Must lay within the dimensions of this CanvasTexture and be an integer.\n             * @param width The width of the rectangle from which the ImageData will be extracted. Positive values are to the right, and negative to the left.\n             * @param height The height of the rectangle from which the ImageData will be extracted. Positive values are down, and negative are up.",
        "* Get the color of a specific pixel from this texture and store it in a Color object.\n             * \n             * If you have drawn anything to this CanvasTexture since it was created you must call `CanvasTexture.update` to refresh the array buffer,\n             * otherwise this may return out of date color values, or worse - throw a run-time error as it tries to access an array element that doesn't exist.\n             * @param x The x coordinate of the pixel to get. Must lay within the dimensions of this CanvasTexture and be an integer.\n             * @param y The y coordinate of the pixel to get. Must lay within the dimensions of this CanvasTexture and be an integer.\n             * @param out A Color object to store the pixel values in. If not provided a new Color object will be created.",
        "* Returns an array containing all of the pixels in the given region.\n             * \n             * If the requested region extends outside the bounds of this CanvasTexture,\n             * the region is truncated to fit.\n             * \n             * If you have drawn anything to this CanvasTexture since it was created you must call `CanvasTexture.update` to refresh the array buffer,\n             * otherwise this may return out of date color values, or worse - throw a run-time error as it tries to access an array element that doesn't exist.\n             * @param x The x coordinate of the top-left of the region. Must lay within the dimensions of this CanvasTexture and be an integer.\n             * @param y The y coordinate of the top-left of the region. Must lay within the dimensions of this CanvasTexture and be an integer.\n             * @param width The width of the region to get. Must be an integer.\n             * @param height The height of the region to get. Must be an integer. If not given will be set to the `width`.",
        "* Returns the Image Data index for the given pixel in this CanvasTexture.\n             * \n             * The index can be used to read directly from the `this.data` array.\n             * \n             * The index points to the red value in the array. The subsequent 3 indexes\n             * point to green, blue and alpha respectively.\n             * @param x The x coordinate of the pixel to get. Must lay within the dimensions of this CanvasTexture and be an integer.\n             * @param y The y coordinate of the pixel to get. Must lay within the dimensions of this CanvasTexture and be an integer.",
        "* This should be called manually if you are running under WebGL.\n             * It will refresh the WebGLTexture from the Canvas source. Only call this if you know that the\n             * canvas has changed, as there is a significant GPU texture allocation cost involved in doing so.",
        "* Gets the Canvas Element.",
        "* Gets the 2D Canvas Rendering Context.",
        "* Clears the given region of this Canvas Texture, resetting it back to transparent.\n             * If no region is given, the whole Canvas Texture is cleared.\n             * @param x The x coordinate of the top-left of the region to clear. Default 0.\n             * @param y The y coordinate of the top-left of the region to clear. Default 0.\n             * @param width The width of the region.\n             * @param height The height of the region.",
        "* Changes the size of this Canvas Texture.\n             * @param width The new width of the Canvas.\n             * @param height The new height of the Canvas. If not given it will use the width as the height.",
        "* Destroys this Texture and releases references to its sources and frames.",
        "* Filter Types.",
        "* Linear filter type.",
        "* Nearest neighbor filter type.",
        "* The Texture Add Event.\n             * \n             * This event is dispatched by the Texture Manager when a texture is added to it.\n             * \n             * Listen to this event from within a Scene using: `this.textures.on('addtexture', listener)`.",
        "* The Texture Load Error Event.\n             * \n             * This event is dispatched by the Texture Manager when a texture it requested to load failed.\n             * This only happens when base64 encoded textures fail. All other texture types are loaded via the Loader Plugin.\n             * \n             * Listen to this event from within a Scene using: `this.textures.on('onerror', listener)`.",
        "* The Texture Load Event.\n             * \n             * This event is dispatched by the Texture Manager when a texture has finished loading on it.\n             * This only happens for base64 encoded textures. All other texture types are loaded via the Loader Plugin.\n             * \n             * Listen to this event from within a Scene using: `this.textures.on('onload', listener)`.\n             * \n             * This event is dispatched after the [ADD]{@linkcode Phaser.Textures.Events#event:ADD} event.",
        "* This internal event signifies that the Texture Manager is now ready and the Game can continue booting.\n             * \n             * When a Phaser Game instance is booting for the first time, the Texture Manager has to wait on a couple of non-blocking\n             * async events before it's fully ready to carry on. When those complete the Texture Manager emits this event via the Game\n             * instance, which tells the Game to carry on booting.",
        "* The Texture Remove Event.\n             * \n             * This event is dispatched by the Texture Manager when a texture is removed from it.\n             * \n             * Listen to this event from within a Scene using: `this.textures.on('removetexture', listener)`.\n             * \n             * If you have any Game Objects still using the removed texture, they will start throwing\n             * errors the next time they try to render. Be sure to clear all use of the texture in this event handler.",
        "* A Frame is a section of a Texture.",
        "* \n             * @param texture The Texture this Frame is a part of.\n             * @param name The name of this Frame. The name is unique within the Texture.\n             * @param sourceIndex The index of the TextureSource that this Frame is a part of.\n             * @param x The x coordinate of the top-left of this Frame.\n             * @param y The y coordinate of the top-left of this Frame.\n             * @param width The width of this Frame.\n             * @param height The height of this Frame.",
        "* The Texture this Frame is a part of.",
        "* The name of this Frame.\n             * The name is unique within the Texture.",
        "* The TextureSource this Frame is part of.",
        "* The index of the TextureSource in the Texture sources array.",
        "* A reference to the Texture Source WebGL Texture that this Frame is using.",
        "* X position within the source image to cut from.",
        "* Y position within the source image to cut from.",
        "* The width of the area in the source image to cut.",
        "* The height of the area in the source image to cut.",
        "* The X rendering offset of this Frame, taking trim into account.",
        "* The Y rendering offset of this Frame, taking trim into account.",
        "* The rendering width of this Frame, taking trim into account.",
        "* The rendering height of this Frame, taking trim into account.",
        "* Half the width, floored.\n             * Precalculated for the renderer.",
        "* Half the height, floored.\n             * Precalculated for the renderer.",
        "* The x center of this frame, floored.",
        "* The y center of this frame, floored.",
        "* The horizontal pivot point of this Frame.",
        "* The vertical pivot point of this Frame.",
        "* Does this Frame have a custom pivot point?",
        "* **CURRENTLY UNSUPPORTED**\n             * \n             * Is this frame is rotated or not in the Texture?\n             * Rotation allows you to use rotated frames in texture atlas packing.\n             * It has nothing to do with Sprite rotation.",
        "* Over-rides the Renderer setting.\n             * -1 = use Renderer Setting\n             * 0 = No rounding\n             * 1 = Round",
        "* Any Frame specific custom data can be stored here.",
        "* WebGL UV u0 value.",
        "* WebGL UV v0 value.",
        "* WebGL UV u1 value.",
        "* WebGL UV v1 value.",
        "* Sets the width, height, x and y of this Frame.\n             * \n             * This is called automatically by the constructor\n             * and should rarely be changed on-the-fly.\n             * @param width The width of the frame before being trimmed.\n             * @param height The height of the frame before being trimmed.\n             * @param x The x coordinate of the top-left of this Frame. Default 0.\n             * @param y The y coordinate of the top-left of this Frame. Default 0.",
        "* If the frame was trimmed when added to the Texture Atlas, this records the trim and source data.\n             * @param actualWidth The width of the frame before being trimmed.\n             * @param actualHeight The height of the frame before being trimmed.\n             * @param destX The destination X position of the trimmed frame for display.\n             * @param destY The destination Y position of the trimmed frame for display.\n             * @param destWidth The destination width of the trimmed frame for display.\n             * @param destHeight The destination height of the trimmed frame for display.",
        "* Takes a crop data object and, based on the rectangular region given, calculates the\n             * required UV coordinates in order to crop this Frame for WebGL and Canvas rendering.\n             * \n             * This is called directly by the Game Object Texture Components `setCrop` method.\n             * Please use that method to crop a Game Object.\n             * @param crop The crop data object. This is the `GameObject._crop` property.\n             * @param x The x coordinate to start the crop from. Cannot be negative or exceed the Frame width.\n             * @param y The y coordinate to start the crop from. Cannot be negative or exceed the Frame height.\n             * @param width The width of the crop rectangle. Cannot exceed the Frame width.\n             * @param height The height of the crop rectangle. Cannot exceed the Frame height.\n             * @param flipX Does the parent Game Object have flipX set?\n             * @param flipY Does the parent Game Object have flipY set?",
        "* Takes a crop data object and recalculates the UVs based on the dimensions inside the crop object.\n             * Called automatically by `setFrame`.\n             * @param crop The crop data object. This is the `GameObject._crop` property.\n             * @param flipX Does the parent Game Object have flipX set?\n             * @param flipY Does the parent Game Object have flipY set?",
        "* Updates the internal WebGL UV cache and the drawImage cache.",
        "* Updates the internal WebGL UV cache.",
        "* Clones this Frame into a new Frame object.",
        "* Destroys this Frames references.",
        "* The width of the Frame in its un-trimmed, un-padded state, as prepared in the art package,\n             * before being packed.",
        "* The height of the Frame in its un-trimmed, un-padded state, as prepared in the art package,\n             * before being packed.",
        "* The radius of the Frame (derived from sqrt(w * w + h * h) / 2)",
        "* Is the Frame trimmed or not?",
        "* The Canvas drawImage data object.",
        "* Linear filter type.",
        "* Nearest Neighbor filter type.",
        "* A Texture consists of a source, usually an Image from the Cache, and a collection of Frames.\n         * The Frames represent the different areas of the Texture. For example a texture atlas\n         * may have many Frames, one for each element within the atlas. Where-as a single image would have\n         * just one frame, that encompasses the whole image.\n         * \n         * Textures are managed by the global TextureManager. This is a singleton class that is\n         * responsible for creating and delivering Textures and their corresponding Frames to Game Objects.\n         * \n         * Sprites and other Game Objects get the texture data they need from the TextureManager.",
        "* \n             * @param manager A reference to the Texture Manager this Texture belongs to.\n             * @param key The unique string-based key of this Texture.\n             * @param source An array of sources that are used to create the texture. Usually Images, but can also be a Canvas.\n             * @param width The width of the Texture. This is optional and automatically derived from the source images.\n             * @param height The height of the Texture. This is optional and automatically derived from the source images.",
        "* A reference to the Texture Manager this Texture belongs to.",
        "* The unique string-based key of this Texture.",
        "* An array of TextureSource instances.\n             * These are unique to this Texture and contain the actual Image (or Canvas) data.",
        "* An array of TextureSource data instances.\n             * Used to store additional data images, such as normal maps or specular maps.",
        "* A key-value object pair associating the unique Frame keys with the Frames objects.",
        "* Any additional data that was set in the source JSON (if any),\n             * or any extra data you'd like to store relating to this texture",
        "* The name of the first frame of the Texture.",
        "* The total number of Frames in this Texture.",
        "* Adds a new Frame to this Texture.\n             * \n             * A Frame is a rectangular region of a TextureSource with a unique index or string-based key.\n             * @param name The name of this Frame. The name is unique within the Texture.\n             * @param sourceIndex The index of the TextureSource that this Frame is a part of.\n             * @param x The x coordinate of the top-left of this Frame.\n             * @param y The y coordinate of the top-left of this Frame.\n             * @param width The width of this Frame.\n             * @param height The height of this Frame.",
        "* Checks to see if a Frame matching the given key exists within this Texture.\n             * @param name The key of the Frame to check for.",
        "* Gets a Frame from this Texture based on either the key or the index of the Frame.\n             * \n             * In a Texture Atlas Frames are typically referenced by a key.\n             * In a Sprite Sheet Frames are referenced by an index.\n             * Passing no value for the name returns the base texture.\n             * @param name The string-based name, or integer based index, of the Frame to get from this Texture.",
        "* Takes the given TextureSource and returns the index of it within this Texture.\n             * If it's not in this Texture, it returns -1.\n             * Unless this Texture has multiple TextureSources, such as with a multi-atlas, this\n             * method will always return zero or -1.\n             * @param source The TextureSource to check.",
        "* Returns an array of all the Frames in the given TextureSource.\n             * @param sourceIndex The index of the TextureSource to get the Frames from.\n             * @param includeBase Include the `__BASE` Frame in the output array? Default false.",
        "* Returns an array with all of the names of the Frames in this Texture.\n             * \n             * Useful if you want to randomly assign a Frame to a Game Object, as you can\n             * pick a random element from the returned array.\n             * @param includeBase Include the `__BASE` Frame in the output array? Default false.",
        "* Given a Frame name, return the source image it uses to render with.\n             * \n             * This will return the actual DOM Image or Canvas element.\n             * @param name The string-based name, or integer based index, of the Frame to get from this Texture.",
        "* Given a Frame name, return the data source image it uses to render with.\n             * You can use this to get the normal map for an image for example.\n             * \n             * This will return the actual DOM Image.\n             * @param name The string-based name, or integer based index, of the Frame to get from this Texture.",
        "* Adds a data source image to this Texture.\n             * \n             * An example of a data source image would be a normal map, where all of the Frames for this Texture\n             * equally apply to the normal map.\n             * @param data The source image.",
        "* Sets the Filter Mode for this Texture.\n             * \n             * The mode can be either Linear, the default, or Nearest.\n             * \n             * For pixel-art you should use Nearest.\n             * \n             * The mode applies to the entire Texture, not just a specific Frame of it.\n             * @param filterMode The Filter Mode.",
        "* Destroys this Texture and releases references to its sources and frames.",
        "* Textures are managed by the global TextureManager. This is a singleton class that is\n         * responsible for creating and delivering Textures and their corresponding Frames to Game Objects.\n         * \n         * Sprites and other Game Objects get the texture data they need from the TextureManager.\n         * \n         * Access it via `scene.textures`.",
        "* \n             * @param game The Phaser.Game instance this Texture Manager belongs to.",
        "* The Game that this TextureManager belongs to.",
        "* The name of this manager.",
        "* An object that has all of textures that Texture Manager creates.\n             * Textures are assigned to keys so we can access to any texture that this object has directly by key value without iteration.",
        "* Checks the given texture key and throws a console.warn if the key is already in use, then returns false.\n             * If you wish to avoid the console.warn then use `TextureManager.exists` instead.\n             * @param key The texture key to check.",
        "* Removes a Texture from the Texture Manager and destroys it. This will immediately\n             * clear all references to it from the Texture Manager, and if it has one, destroy its\n             * WebGLTexture. This will emit a `removetexture` event.\n             * \n             * Note: If you have any Game Objects still using this texture they will start throwing\n             * errors the next time they try to render. Make sure that removing the texture is the final\n             * step when clearing down to avoid this.\n             * @param key The key of the Texture to remove, or a reference to it.",
        "* Adds a new Texture to the Texture Manager created from the given Base64 encoded data.\n             * @param key The unique string-based key of the Texture.\n             * @param data The Base64 encoded data.",
        "* Gets an existing texture frame and converts it into a base64 encoded image and returns the base64 data.\n             * \n             * You can also provide the image type and encoder options.\n             * @param key The unique string-based key of the Texture.\n             * @param frame The string-based name, or integer based index, of the Frame to get from the Texture.\n             * @param type [description] Default 'image/png'.\n             * @param encoderOptions [description] Default 0.92.",
        "* Adds a new Texture to the Texture Manager created from the given Image element.\n             * @param key The unique string-based key of the Texture.\n             * @param source The source Image element.\n             * @param dataSource An optional data Image element.",
        "* Adds a Render Texture to the Texture Manager using the given key.\n             * This allows you to then use the Render Texture as a normal texture for texture based Game Objects like Sprites.\n             * @param key The unique string-based key of the Texture.\n             * @param renderTexture The source Render Texture.",
        "* Creates a new Texture using the given config values.\n             * Generated textures consist of a Canvas element to which the texture data is drawn.\n             * See the Phaser.Create function for the more direct way to create textures.\n             * @param key The unique string-based key of the Texture.\n             * @param config The configuration object needed to generate the texture.",
        "* Creates a new Texture using a blank Canvas element of the size given.\n             * \n             * Canvas elements are automatically pooled and calling this method will\n             * extract a free canvas from the CanvasPool, or create one if none are available.\n             * @param key The unique string-based key of the Texture.\n             * @param width The width of the Canvas element. Default 256.\n             * @param height The height of the Canvas element. Default 256.",
        "* Creates a new Canvas Texture object from an existing Canvas element\n             * and adds it to this Texture Manager, unless `skipCache` is true.\n             * @param key The unique string-based key of the Texture.\n             * @param source The Canvas element to form the base of the new Texture.\n             * @param skipCache Skip adding this Texture into the Cache? Default false.",
        "* Adds a new Texture Atlas to this Texture Manager.\n             * It can accept either JSON Array or JSON Hash formats, as exported by Texture Packer and similar software.\n             * @param key The unique string-based key of the Texture.\n             * @param source The source Image element.\n             * @param data The Texture Atlas data.\n             * @param dataSource An optional data Image element.",
        "* Adds a Texture Atlas to this Texture Manager.\n             * The frame data of the atlas must be stored in an Array within the JSON.\n             * This is known as a JSON Array in software such as Texture Packer.\n             * @param key The unique string-based key of the Texture.\n             * @param source The source Image element/s.\n             * @param data The Texture Atlas data/s.\n             * @param dataSource An optional data Image element.",
        "* Adds a Texture Atlas to this Texture Manager.\n             * The frame data of the atlas must be stored in an Object within the JSON.\n             * This is known as a JSON Hash in software such as Texture Packer.\n             * @param key The unique string-based key of the Texture.\n             * @param source The source Image element.\n             * @param data The Texture Atlas data.\n             * @param dataSource An optional data Image element.",
        "* Adds a Texture Atlas to this Texture Manager, where the atlas data is given\n             * in the XML format.\n             * @param key The unique string-based key of the Texture.\n             * @param source The source Image element.\n             * @param data The Texture Atlas XML data.\n             * @param dataSource An optional data Image element.",
        "* Adds a Unity Texture Atlas to this Texture Manager.\n             * The data must be in the form of a Unity YAML file.\n             * @param key The unique string-based key of the Texture.\n             * @param source The source Image element.\n             * @param data The Texture Atlas data.\n             * @param dataSource An optional data Image element.",
        "* Adds a Sprite Sheet to this Texture Manager.\n             * \n             * In Phaser terminology a Sprite Sheet is a texture containing different frames, but each frame is the exact\n             * same size and cannot be trimmed or rotated.\n             * @param key The unique string-based key of the Texture.\n             * @param source The source Image element.\n             * @param config The configuration object for this Sprite Sheet.",
        "* Adds a Sprite Sheet to this Texture Manager, where the Sprite Sheet exists as a Frame within a Texture Atlas.\n             * \n             * In Phaser terminology a Sprite Sheet is a texture containing different frames, but each frame is the exact\n             * same size and cannot be trimmed or rotated.\n             * @param key The unique string-based key of the Texture.\n             * @param config The configuration object for this Sprite Sheet.",
        "* Creates a new Texture using the given source and dimensions.\n             * @param key The unique string-based key of the Texture.\n             * @param source The source Image element.\n             * @param width The width of the Texture.\n             * @param height The height of the Texture.",
        "* Checks the given key to see if a Texture using it exists within this Texture Manager.\n             * @param key The unique string-based key of the Texture.",
        "* Returns a Texture from the Texture Manager that matches the given key.\n             * If the key is undefined it will return the `__DEFAULT` Texture.\n             * If the key is given, but not found, it will return the `__MISSING` Texture.\n             * @param key The unique string-based key of the Texture.",
        "* Takes a Texture key and Frame name and returns a clone of that Frame if found.\n             * @param key The unique string-based key of the Texture.\n             * @param frame The string or index of the Frame to be cloned.",
        "* Takes a Texture key and Frame name and returns a reference to that Frame, if found.\n             * @param key The unique string-based key of the Texture.\n             * @param frame The string-based name, or integer based index, of the Frame to get from the Texture.",
        "* Returns an array with all of the keys of all Textures in this Texture Manager.\n             * The output array will exclude the `__DEFAULT` and `__MISSING` keys.",
        "* Given a Texture and an `x` and `y` coordinate this method will return a new\n             * Color object that has been populated with the color and alpha values of the pixel\n             * at that location in the Texture.\n             * @param x The x coordinate of the pixel within the Texture.\n             * @param y The y coordinate of the pixel within the Texture.\n             * @param key The unique string-based key of the Texture.\n             * @param frame The string or index of the Frame.",
        "* Given a Texture and an `x` and `y` coordinate this method will return a value between 0 and 255\n             * corresponding to the alpha value of the pixel at that location in the Texture. If the coordinate\n             * is out of bounds it will return null.\n             * @param x The x coordinate of the pixel within the Texture.\n             * @param y The y coordinate of the pixel within the Texture.\n             * @param key The unique string-based key of the Texture.\n             * @param frame The string or index of the Frame.",
        "* Sets the given Game Objects `texture` and `frame` properties so that it uses\n             * the Texture and Frame specified in the `key` and `frame` arguments to this method.\n             * @param gameObject The Game Object the texture would be set on.\n             * @param key The unique string-based key of the Texture.\n             * @param frame The string or index of the Frame.",
        "* Changes the key being used by a Texture to the new key provided.\n             * \n             * The old key is removed, allowing it to be re-used.\n             * \n             * Game Objects are linked to Textures by a reference to the Texture object, so\n             * all existing references will be retained.\n             * @param currentKey The current string-based key of the Texture you wish to rename.\n             * @param newKey The new unique string-based key to use for the Texture.",
        "* Passes all Textures to the given callback.\n             * @param callback The callback function to be sent the Textures.\n             * @param scope The value to use as `this` when executing the callback.\n             * @param args Additional arguments that will be passed to the callback, after the child.",
        "* Destroys the Texture Manager and all Textures stored within it.",
        "* A Texture Source is the encapsulation of the actual source data for a Texture.\n         * This is typically an Image Element, loaded from the file system or network, or a Canvas Element.\n         * \n         * A Texture can contain multiple Texture Sources, which only happens when a multi-atlas is loaded.",
        "* \n             * @param texture The Texture this TextureSource belongs to.\n             * @param source The source image data.\n             * @param width Optional width of the source image. If not given it's derived from the source itself.\n             * @param height Optional height of the source image. If not given it's derived from the source itself.",
        "* The Texture this TextureSource belongs to.",
        "* The Texture this TextureSource belongs to.",
        "* The source of the image data.\n             * This is either an Image Element, a Canvas Element or a RenderTexture.",
        "* The image data.\n             * This is either an Image element or a Canvas element.",
        "* Currently un-used.",
        "* The resolution of the source image.",
        "* The width of the source image. If not specified in the constructor it will check\n             * the `naturalWidth` and then `width` properties of the source image.",
        "* The height of the source image. If not specified in the constructor it will check\n             * the `naturalHeight` and then `height` properties of the source image.",
        "* The Scale Mode the image will use when rendering.\n             * Either Linear or Nearest.",
        "* Is the source image a Canvas Element?",
        "* Is the source image a Render Texture?",
        "* Are the source image dimensions a power of two?",
        "* The WebGL Texture of the source image.",
        "* Creates a WebGL Texture, if required, and sets the Texture filter mode.\n             * @param game A reference to the Phaser Game instance.",
        "* Sets the Filter Mode for this Texture.\n             * \n             * The mode can be either Linear, the default, or Nearest.\n             * \n             * For pixel-art you should use Nearest.\n             * @param filterMode The Filter Mode.",
        "* If this TextureSource is backed by a Canvas and is running under WebGL,\n             * it updates the WebGLTexture using the canvas data.",
        "* Destroys this Texture Source and nulls the references.",
        "* A Dynamic Tilemap Layer is a Game Object that renders LayerData from a Tilemap when used in combination\n         * with one, or more, Tilesets.\n         * \n         * A Dynamic Tilemap Layer trades some speed for being able to apply powerful effects. Unlike a\n         * Static Tilemap Layer, you can apply per-tile effects like tint or alpha, and you can change the\n         * tiles in a DynamicTilemapLayer.\n         * \n         * Use this over a Static Tilemap Layer when you need those features.",
        "* \n             * @param scene The Scene to which this Game Object belongs.\n             * @param tilemap The Tilemap this layer is a part of.\n             * @param layerIndex The index of the LayerData associated with this layer.\n             * @param tileset The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\n             * @param x The world x position where the top left of this layer will be placed. Default 0.\n             * @param y The world y position where the top left of this layer will be placed. Default 0.",
        "* Used internally by physics system to perform fast type checks.",
        "* The Tilemap that this layer is a part of.",
        "* The index of the LayerData associated with this layer.",
        "* The LayerData associated with this layer. LayerData can only be associated with one\n             * tilemap layer.",
        "* The Tileset/s associated with this layer.\n             * \n             * As of Phaser 3.14 this property is now an array of Tileset objects, previously it was a single reference.",
        "* Used internally with the canvas render. This holds the tiles that are visible within the\n             * camera.",
        "* You can control if the Cameras should cull tiles before rendering them or not.\n             * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\n             * \n             * However, there are some instances when you may wish to disable this, and toggling this flag allows\n             * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.",
        "* The total number of tiles drawn by the renderer in the last frame.",
        "* The total number of tiles in this layer. Updated every frame.",
        "* The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\n             * \n             * See the method `setCullPadding` for more details.",
        "* The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\n             * \n             * See the method `setCullPadding` for more details.",
        "* The callback that is invoked when the tiles are culled.\n             * \n             * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\n             * \n             * It will be sent 3 arguments:\n             * \n             * 1. The Phaser.Tilemaps.LayerData object for this Layer\n             * 2. The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\n             * 3. A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\n             * \n             * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.",
        "* An array holding the mapping between the tile indexes and the tileset they belong to.",
        "* Sets the rendering (draw) order of the tiles in this layer.\n             * \n             * The default is 'right-down', meaning it will order the tiles starting from the top-left,\n             * drawing to the right and then moving down to the next row.\n             * \n             * The draw orders are:\n             * \n             * 0 = right-down\n             * 1 = left-down\n             * 2 = right-up\n             * 3 = left-up\n             * \n             * Setting the render order does not change the tiles or how they are stored in the layer,\n             * it purely impacts the order in which they are rendered.\n             * \n             * You can provide either an integer (0 to 3), or the string version of the order.\n             * @param renderOrder The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.",
        "* Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\n             * faces are used internally for optimizing collisions against tiles. This method is mostly used\n             * internally to optimize recalculating faces when only one tile has been changed.\n             * @param tileX The x coordinate.\n             * @param tileY The y coordinate.",
        "* Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\n             * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\n             * is mostly used internally.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.",
        "* Creates a Sprite for every object matching the given tile indexes in the layer. You can\n             * optionally specify if each tile will be replaced with a new tile after the Sprite has been\n             * created. This is useful if you want to lay down special tiles in a level that are converted to\n             * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\n             * @param indexes The tile index, or array of indexes, to create Sprites from.\n             * @param replacements The tile index, or array of indexes, to change a converted\n             * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\n             * one-to-one mapping with the indexes array.\n             * @param spriteConfig The config object to pass into the Sprite creator (i.e.\n             * scene.make.sprite).\n             * @param scene The Scene to create the Sprites within. Default scene the map is within.\n             * @param camera The Camera to use when determining the world XY Default main camera.",
        "* Returns the tiles in the given layer that are within the cameras viewport.\n             * This is used internally.\n             * @param camera The Camera to run the cull check against.",
        "* Copies the tiles in the source rectangular area to a new destination (all specified in tile\n             * coordinates) within the layer. This copies all tile properties & recalculates collision\n             * information in the destination region.\n             * @param srcTileX The x coordinate of the area to copy from, in tiles, not pixels.\n             * @param srcTileY The y coordinate of the area to copy from, in tiles, not pixels.\n             * @param width The width of the area to copy, in tiles, not pixels.\n             * @param height The height of the area to copy, in tiles, not pixels.\n             * @param destTileX The x coordinate of the area to copy to, in tiles, not pixels.\n             * @param destTileY The y coordinate of the area to copy to, in tiles, not pixels.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.",
        "* Destroys this DynamicTilemapLayer and removes its link to the associated LayerData.",
        "* Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\n             * specified index. Tiles will be set to collide if the given index is a colliding index.\n             * Collision information in the region will be recalculated.\n             * @param index The tile index to fill the area with.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.",
        "* For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\n             * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\n             * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\n             * @param callback The callback. Each tile in the given area will be passed to this\n             * callback as the first and only parameter. The callback should return true for tiles that pass the\n             * filter.\n             * @param context The context under which the callback should be run.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area to filter. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area to filter. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param FilteringOptions Optional filters to apply when getting the tiles.",
        "* Searches the entire map layer for the first tile matching the given index, then returns that Tile\n             * object. If no match is found, it returns null. The search starts from the top-left tile and\n             * continues horizontally until it hits the end of the row, then it drops down to the next column.\n             * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\n             * the top-left.\n             * @param index The tile index value to search for.\n             * @param skip The number of times to skip a matching tile before returning. Default 0.\n             * @param reverse If true it will scan the layer in reverse, starting at the\n             * bottom-right. Otherwise it scans from the top-left. Default false.",
        "* Find the first tile in the given rectangular area (in tile coordinates) of the layer that\n             * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\n             * true. Similar to Array.prototype.find in vanilla JS.\n             * @param callback The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\n             * @param context The context under which the callback should be run.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area to search. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area to search. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param FilteringOptions Optional filters to apply when getting the tiles.",
        "* For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\n             * callback. Similar to Array.prototype.forEach in vanilla JS.\n             * @param callback The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\n             * @param context The context under which the callback should be run.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area to search. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area to search. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param FilteringOptions Optional filters to apply when getting the tiles.",
        "* Gets a tile at the given tile coordinates from the given layer.\n             * @param tileX X position to get the tile from (given in tile units, not pixels).\n             * @param tileY Y position to get the tile from (given in tile units, not pixels).\n             * @param nonNull If true getTile won't return null for empty tiles, but a Tile object with an index of -1. Default false.",
        "* Gets a tile at the given world coordinates from the given layer.\n             * @param worldX X position to get the tile from (given in pixels)\n             * @param worldY Y position to get the tile from (given in pixels)\n             * @param nonNull If true, function won't return null for empty tiles, but a Tile object with an index of -1. Default false.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param FilteringOptions Optional filters to apply when getting the tiles.",
        "* Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\n             * Line, Rectangle or Triangle. The shape should be in world coordinates.\n             * @param shape A shape in world (pixel) coordinates\n             * @param FilteringOptions Optional filters to apply when getting the tiles.\n             * @param camera The Camera to use when factoring in which tiles to return. Default main camera.",
        "* Gets the tiles in the given rectangular area (in world coordinates) of the layer.\n             * @param worldX The world x coordinate for the top-left of the area.\n             * @param worldY The world y coordinate for the top-left of the area.\n             * @param width The width of the area.\n             * @param height The height of the area.\n             * @param FilteringOptions Optional filters to apply when getting the tiles.\n             * @param camera The Camera to use when factoring in which tiles to return. Default main camera.",
        "* Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\n             * false if there is no tile or if the tile at that location has an index of -1.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param tileY The y coordinate, in tiles, not pixels.",
        "* Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\n             * false if there is no tile or if the tile at that location has an index of -1.\n             * @param worldX The x coordinate, in pixels.\n             * @param worldY The y coordinate, in pixels.\n             * @param camera The Camera to use when factoring in which tiles to return. Default main camera.",
        "* Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\n             * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\n             * location. If you pass in an index, only the index at the specified location will be changed.\n             * Collision information will be recalculated at the specified location.\n             * @param tile The index of this tile to set or a Tile object.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param tileY The y coordinate, in tiles, not pixels.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.",
        "* Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\n             * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\n             * specified location. If you pass in an index, only the index at the specified location will be\n             * changed. Collision information will be recalculated at the specified location.\n             * @param tile The index of this tile to set or a Tile object.\n             * @param worldX The x coordinate, in pixels.\n             * @param worldY The y coordinate, in pixels.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\n             * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\n             * all attributes will be copied over to the specified location. If you pass in an index, only the\n             * index at the specified location will be changed. Collision information will be recalculated\n             * within the region tiles were changed.\n             * @param tile A row (array) or grid (2D array) of Tiles or tile indexes to place.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param tileY The y coordinate, in tiles, not pixels.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.",
        "* Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\n             * specified layer. Each tile will receive a new index. If an array of indexes is passed in, then\n             * those will be used for randomly assigning new tile indexes. If an array is not provided, the\n             * indexes found within the region (excluding -1) will be used for randomly assigning new tile\n             * indexes. This method only modifies tile indexes and does not change collision information.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param indexes An array of indexes to randomly draw from during randomization.",
        "* Removes the tile at the given tile coordinates in the specified layer and updates the layer's\n             * collision information.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param tileY The y coordinate, in tiles, not pixels.\n             * @param replaceWithNull If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1. Default true.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.",
        "* Removes the tile at the given world coordinates in the specified layer and updates the layer's\n             * collision information.\n             * @param worldX The x coordinate, in pixels.\n             * @param worldY The y coordinate, in pixels.\n             * @param replaceWithNull If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1. Default true.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\n             * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\n             * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\n             * wherever you want on the screen.\n             * @param graphics The target Graphics object to draw upon.\n             * @param styleConfig An object specifying the colors to use for the debug drawing.",
        "* Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\n             * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\n             * not change collision information.\n             * @param findIndex The index of the tile to search for.\n             * @param newIndex The index of the tile to replace it with.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.",
        "* You can control if the Cameras should cull tiles before rendering them or not.\n             * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\n             * \n             * However, there are some instances when you may wish to disable this.\n             * @param value Set to `true` to stop culling tiles. Set to `false` to enable culling again. Default true.",
        "* When a Camera culls the tiles in this layer it does so using its view into the world, building up a\n             * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\n             * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\n             * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\n             * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\n             * @param paddingX The amount of extra horizontal tiles to add to the cull check padding. Default 1.\n             * @param paddingY The amount of extra vertical tiles to add to the cull check padding. Default 1.",
        "* Sets collision on the given tile or tiles within a layer by index. You can pass in either a\n             * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\n             * collision will be enabled (true) or disabled (false).\n             * @param indexes Either a single tile index, or an array of tile indexes.\n             * @param collides If true it will enable collision. If false it will clear collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the update. Default true.",
        "* Sets collision on a range of tiles in a layer whose index is between the specified `start` and\n             * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\n             * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\n             * enabled (true) or disabled (false).\n             * @param start The first index of the tile to be set for collision.\n             * @param stop The last index of the tile to be set for collision.\n             * @param collides If true it will enable collision. If false it will clear collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the update. Default true.",
        "* Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\n             * that matches the given properties object, its collision flag will be set. The `collides`\n             * parameter controls if collision will be enabled (true) or disabled (false). Passing in\n             * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\n             * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\n             * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\n             * \"types\" property that matches any of those values, its collision flag will be updated.\n             * @param properties An object with tile properties and corresponding values that should be checked.\n             * @param collides If true it will enable collision. If false it will clear collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the update. Default true.",
        "* Sets collision on all tiles in the given layer, except for tiles that have an index specified in\n             * the given array. The `collides` parameter controls if collision will be enabled (true) or\n             * disabled (false).\n             * @param indexes An array of the tile indexes to not be counted for collision.\n             * @param collides If true it will enable collision. If false it will clear collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the update. Default true.",
        "* Sets collision on the tiles within a layer by checking each tiles collision group data\n             * (typically defined in Tiled within the tileset collision editor). If any objects are found within\n             * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\n             * controls if collision will be enabled (true) or disabled (false).\n             * @param collides If true it will enable collision. If false it will clear collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the update. Default true.",
        "* Sets a global collision callback for the given tile index within the layer. This will affect all\n             * tiles on this layer that have the same index. If a callback is already set for the tile index it\n             * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\n             * at a specific location on the map then see setTileLocationCallback.\n             * @param indexes Either a single tile index, or an array of tile indexes to have a collision callback set for.\n             * @param callback The callback that will be invoked when the tile is collided with.\n             * @param callbackContext The context under which the callback is called.",
        "* Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\n             * If a callback is already set for the tile index it will be replaced. Set the callback to null to\n             * remove it.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param callback The callback that will be invoked when the tile is collided with.\n             * @param callbackContext The context under which the callback is called.",
        "* Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\n             * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\n             * appear to have changed! This method only modifies tile indexes and does not change collision\n             * information.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.",
        "* Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\n             * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\n             * information.\n             * @param tileA First tile index.\n             * @param tileB Second tile index.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.",
        "* Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\n             * layers position, scale and scroll.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\n             * layers position, scale and scroll.\n             * @param tileY The y coordinate, in tiles, not pixels.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\n             * layers position, scale and scroll. This will return a new Vector2 object or update the given\n             * `point` object.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param tileY The y coordinate, in tiles, not pixels.\n             * @param point A Vector2 to store the coordinates in. If not given a new Vector2 is created.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\n             * specified layer. Each tile will recieve a new index. New indexes are drawn from the given\n             * weightedIndexes array. An example weighted array:\n             * \n             * [\n             *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\n             *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\n             *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\n             *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\n             * ]\n             * \n             * The probability of any index being choose is (the index's weight) / (sum of all weights). This\n             * method only modifies tile indexes and does not change collision information.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param weightedIndexes An array of objects to randomly draw from during\n             * randomization. They should be in the form: { index: 0, weight: 4 } or\n             * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.",
        "* Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\n             * layers position, scale and scroll.\n             * @param worldX The x coordinate to be converted, in pixels, not tiles.\n             * @param snapToFloor Whether or not to round the tile coordinate down to the nearest integer. Default true.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\n             * layers position, scale and scroll.\n             * @param worldY The y coordinate to be converted, in pixels, not tiles.\n             * @param snapToFloor Whether or not to round the tile coordinate down to the nearest integer. Default true.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\n             * layers position, scale and scroll. This will return a new Vector2 object or update the given\n             * `point` object.\n             * @param worldX The x coordinate to be converted, in pixels, not tiles.\n             * @param worldY The y coordinate to be converted, in pixels, not tiles.\n             * @param snapToFloor Whether or not to round the tile coordinate down to the nearest integer. Default true.\n             * @param point A Vector2 to store the coordinates in. If not given a new Vector2 is created.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n             * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n             * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n             * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n             * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* CSV Map Type",
        "* Tiled JSON Map Type",
        "* 2D Array Map Type",
        "* Weltmeister (Impact.js) Map Type",
        "* An Image Collection is a special Tile Set containing multiple images, with no slicing into each image.\n         * \n         * Image Collections are normally created automatically when Tiled data is loaded.",
        "* \n             * @param name The name of the image collection in the map data.\n             * @param firstgid The first image index this image collection contains.\n             * @param width Width of widest image (in pixels). Default 32.\n             * @param height Height of tallest image (in pixels). Default 32.\n             * @param margin The margin around all images in the collection (in pixels). Default 0.\n             * @param spacing The spacing between each image in the collection (in pixels). Default 0.\n             * @param properties Custom Image Collection properties. Default {}.",
        "* The name of the Image Collection.",
        "* The Tiled firstgid value.\n             * This is the starting index of the first image index this Image Collection contains.",
        "* The width of the widest image (in pixels).",
        "* The height of the tallest image (in pixels).",
        "* The margin around the images in the collection (in pixels).\n             * Use `setSpacing` to change.",
        "* The spacing between each image in the collection (in pixels).\n             * Use `setSpacing` to change.",
        "* Image Collection-specific properties that are typically defined in the Tiled editor.",
        "* The cached images that are a part of this collection.",
        "* The total number of images in the image collection.",
        "* Returns true if and only if this image collection contains the given image index.\n             * @param imageIndex The image index to search for.",
        "* Add an image to this Image Collection.\n             * @param gid The gid of the image in the Image Collection.\n             * @param image The the key of the image in the Image Collection and in the cache.",
        "* A class for representing data about about a layer in a map. Maps are parsed from CSV, Tiled,\n         * etc. into this format. Tilemap, StaticTilemapLayer and DynamicTilemapLayer have a reference\n         * to this data and use it to look up and perform operations on tiles.",
        "* \n             * @param config [description]",
        "* The name of the layer, if specified in Tiled.",
        "* The x offset of where to draw from the top left",
        "* The y offset of where to draw from the top left",
        "* The width in tile of the layer.",
        "* The height in tiles of the layer.",
        "* The pixel width of the tiles.",
        "* The pixel height of the tiles.",
        "* [description]",
        "* [description]",
        "* The width in pixels of the entire layer.",
        "* The height in pixels of the entire layer.",
        "* [description]",
        "* [description]",
        "* Layer specific properties (can be specified in Tiled)",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* An array of the tile indexes",
        "* [description]",
        "* A class for representing data about a map. Maps are parsed from CSV, Tiled, etc. into this\n         * format. A Tilemap object get a copy of this data and then unpacks the needed properties into\n         * itself.",
        "* \n             * @param config [description]",
        "* The key in the Phaser cache that corresponds to the loaded tilemap data.",
        "* The width of the entire tilemap.",
        "* The height of the entire tilemap.",
        "* The width of the tiles.",
        "* The height of the tiles.",
        "* The width in pixels of the entire tilemap.",
        "* The height in pixels of the entire tilemap.",
        "* [description]",
        "* The orientation of the map data (i.e. orthogonal, isometric, hexagonal), default 'orthogonal'.",
        "* Determines the draw order of tilemap. Default is right-down\n             * \n             * 0, or 'right-down'\n             * 1, or 'left-down'\n             * 2, or 'right-up'\n             * 3, or 'left-up'",
        "* The version of the map data (as specified in Tiled).",
        "* Map specific properties (can be specified in Tiled)",
        "* An array with all the layers configured to the MapData.",
        "* An array of Tiled Image Layers.",
        "* An object of Tiled Object Layers.",
        "* An object of collision data. Must be created as physics object or will return undefined.",
        "* An array of Tilesets.",
        "* The collection of images the map uses(specified in Tiled)",
        "* [description]",
        "* A class for representing a Tiled object layer in a map. This mirrors the structure of a Tiled\n         * object layer, except:\n         *  - \"x\" & \"y\" properties are ignored since these cannot be changed in Tiled.\n         *  - \"offsetx\" & \"offsety\" are applied to the individual object coordinates directly, so they\n         *    are ignored as well.\n         *  - \"draworder\" is ignored.",
        "* \n             * @param config The data for the layer from the Tiled JSON object.",
        "* The name of the Object Layer.",
        "* The opacity of the layer, between 0 and 1.",
        "* The custom properties defined on the Object Layer, keyed by their name.",
        "* The type of each custom property defined on the Object Layer, keyed by its name.",
        "* The type of the layer, which should be `objectgroup`.",
        "* Whether the layer is shown (`true`) or hidden (`false`).",
        "* An array of all objects on this Object Layer.\n             * \n             * Each Tiled object corresponds to a JavaScript object in this array. It has an `id` (unique), `name` (as assigned in Tiled), `type` (as assigned in Tiled), `rotation` (in clockwise degrees), `properties` (if any), `visible` state (`true` if visible, `false` otherwise), `x` and `y` coordinates (in pixels, relative to the tilemap), and a `width` and `height` (in pixels).\n             * \n             * An object tile has a `gid` property (GID of the represented tile), a `flippedHorizontal` property, a `flippedVertical` property, and `flippedAntiDiagonal` property. The {@link http://docs.mapeditor.org/en/latest/reference/tmx-map-format/|Tiled documentation} contains information on flipping and rotation.\n             * \n             * Polylines have a `polyline` property, which is an array of objects corresponding to points, where each point has an `x` property and a `y` property. Polygons have an identically structured array in their `polygon` property. Text objects have a `text` property with the text's properties.\n             * \n             * Rectangles and ellipses have a `rectangle` or `ellipse` property set to `true`.",
        "* [description]\n                 * @param json [description]\n                 * @param insertNull [description]",
        "* [description]\n                 * @param json [description]",
        "* Parses a Weltmeister JSON object into a new MapData object.\n                 * @param name The name of the tilemap, used to set the name on the MapData.\n                 * @param json The Weltmeister JSON object.\n                 * @param insertNull Controls how empty tiles, tiles with an index of -1, in the map\n                 * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\n                 * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\n                 * the tile data doesn't need to change then setting this value to `true` will help with memory\n                 * consumption. However if your map is small or you need to update the tiles dynamically, then leave\n                 * the default value set.",
        "* Parses raw data of a given Tilemap format into a new MapData object. If no recognized data format\n             * is found, returns `null`. When loading from CSV or a 2D array, you should specify the tileWidth &\n             * tileHeight. When parsing from a map from Tiled, the tileWidth & tileHeight will be pulled from\n             * the map data.\n             * @param name The name of the tilemap, used to set the name on the MapData.\n             * @param mapFormat See ../Formats.js.\n             * @param data 2D array, CSV string or Tiled JSON object.\n             * @param tileWidth The width of a tile in pixels. Required for 2D array and CSV, but\n             * ignored for Tiled JSON.\n             * @param tileHeight The height of a tile in pixels. Required for 2D array and CSV, but\n             * ignored for Tiled JSON.\n             * @param insertNull Controls how empty tiles, tiles with an index of -1, in the map\n             * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\n             * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\n             * the tile data doesn't need to change then setting this value to `true` will help with memory\n             * consumption. However if your map is small or you need to update the tiles dynamically, then leave\n             * the default value set.",
        "* Parses a 2D array of tile indexes into a new MapData object with a single layer.\n             * @param name The name of the tilemap, used to set the name on the MapData.\n             * @param data 2D array, CSV string or Tiled JSON object.\n             * @param tileWidth The width of a tile in pixels.\n             * @param tileHeight The height of a tile in pixels.\n             * @param insertNull Controls how empty tiles, tiles with an index of -1, in the map\n             * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\n             * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\n             * the tile data doesn't need to change then setting this value to `true` will help with memory\n             * consumption. However if your map is small or you need to update the tiles dynamically, then leave\n             * the default value set.",
        "* Parses a CSV string of tile indexes into a new MapData object with a single layer.\n             * @param name The name of the tilemap, used to set the name on the MapData.\n             * @param data CSV string of tile indexes.\n             * @param tileWidth The width of a tile in pixels.\n             * @param tileHeight The height of a tile in pixels.\n             * @param insertNull Controls how empty tiles, tiles with an index of -1, in the map\n             * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\n             * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\n             * the tile data doesn't need to change then setting this value to `true` will help with memory\n             * consumption. However if your map is small or you need to update the tiles dynamically, then leave\n             * the default value set.",
        "* Copy properties from tileset to tiles.\n                 * @param mapData [description]",
        "* Decode base-64 encoded data, for example as exported by Tiled.\n                 * @param data Base-64 encoded data to decode.",
        "* Master list of tiles -> x, y, index in tileset.\n                 * @param mapData [description]",
        "* See Tiled documentation on tile flipping:\n                 * http://docs.mapeditor.org/en/latest/reference/tmx-map-format/\n                 * @param gid [description]",
        "* [description]\n                 * @param json [description]",
        "* Parses a Tiled JSON object into a new MapData object.\n                 * @param name The name of the tilemap, used to set the name on the MapData.\n                 * @param json The Tiled JSON object.\n                 * @param insertNull Controls how empty tiles, tiles with an index of -1, in the map\n                 * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\n                 * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\n                 * the tile data doesn't need to change then setting this value to `true` will help with memory\n                 * consumption. However if your map is small or you need to update the tiles dynamically, then leave\n                 * the default value set.",
        "* Convert a Tiled object to an internal parsed object normalising and copying properties over, while applying optional x and y offsets. The parsed object will always have the properties `id`, `name`, `type`, `rotation`, `properties`, `visible`, `x`, `y`, `width` and `height`. Other properties will be added according to the object type (such as text, polyline, gid etc.)\n                 * @param tiledObject Tiled object to convert to an internal parsed object normalising and copying properties over.\n                 * @param offsetX Optional additional offset to apply to the object's x property. Defaults to 0. Default 0.\n                 * @param offsetY Optional additional offset to apply to the object's y property. Defaults to 0. Default 0.",
        "* Parses a Tiled JSON object into an array of ObjectLayer objects.\n                 * @param json The Tiled JSON object.",
        "* [description]\n                 * @param json [description]\n                 * @param insertNull [description]",
        "* Tilesets & Image Collections\n                 * @param json [description]",
        "* Returns a new object that only contains the `keys` that were found on the object provided. If no `keys` are found, an empty object is returned.\n                 * @param object The object to pick the provided keys from.\n                 * @param keys An array of properties to retrieve from the provided object.",
        "* Create a Tilemap from the given key or data. If neither is given, make a blank Tilemap. When\n         * loading from CSV or a 2D array, you should specify the tileWidth & tileHeight. When parsing from\n         * a map from Tiled, the tileWidth, tileHeight, width & height will be pulled from the map data. For\n         * an empty map, you should specify tileWidth, tileHeight, width & height.\n         * @param scene The Scene to which this Tilemap belongs.\n         * @param key The key in the Phaser cache that corresponds to the loaded tilemap data.\n         * @param tileWidth The width of a tile in pixels. Default 32.\n         * @param tileHeight The height of a tile in pixels. Default 32.\n         * @param width The width of the map in tiles. Default 10.\n         * @param height The height of the map in tiles. Default 10.\n         * @param data Instead of loading from the cache, you can also load directly from\n         * a 2D array of tile indexes.\n         * @param insertNull Controls how empty tiles, tiles with an index of -1, in the\n         * map data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\n         * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\n         * the tile data doesn't need to change then setting this value to `true` will help with memory\n         * consumption. However if your map is small or you need to update the tiles dynamically, then leave\n         * the default value set. Default false.",
        "* A Static Tilemap Layer is a Game Object that renders LayerData from a Tilemap when used in combination\n         * with one, or more, Tilesets.\n         * \n         * A Static Tilemap Layer is optimized for rendering speed over flexibility. You cannot apply per-tile\n         * effects like tint or alpha, or change the tiles or tilesets the layer uses.\n         * \n         * Use a Static Tilemap Layer instead of a Dynamic Tilemap Layer when you don't need tile manipulation features.",
        "* \n             * @param scene The Scene to which this Game Object belongs.\n             * @param tilemap The Tilemap this layer is a part of.\n             * @param layerIndex The index of the LayerData associated with this layer.\n             * @param tileset The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\n             * @param x The world x position where the top left of this layer will be placed. Default 0.\n             * @param y The world y position where the top left of this layer will be placed. Default 0.",
        "* Used internally by physics system to perform fast type checks.",
        "* The Tilemap that this layer is a part of.",
        "* The index of the LayerData associated with this layer.",
        "* The LayerData associated with this layer. LayerData can only be associated with one\n             * tilemap layer.",
        "* The Tileset/s associated with this layer.\n             * \n             * As of Phaser 3.14 this property is now an array of Tileset objects, previously it was a single reference.",
        "* Used internally by the Canvas renderer.\n             * This holds the tiles that are visible within the camera in the last frame.",
        "* Canvas only.\n             * \n             * You can control if the Cameras should cull tiles before rendering them or not.\n             * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\n             * \n             * However, there are some instances when you may wish to disable this, and toggling this flag allows\n             * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.",
        "* Canvas only.\n             * \n             * The total number of tiles drawn by the renderer in the last frame.\n             * \n             * This only works when rending with Canvas.",
        "* Canvas only.\n             * \n             * The total number of tiles in this layer. Updated every frame.",
        "* Canvas only.\n             * \n             * The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\n             * \n             * See the method `setCullPadding` for more details.",
        "* Canvas only.\n             * \n             * The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\n             * \n             * See the method `setCullPadding` for more details.",
        "* Canvas only.\n             * \n             * The callback that is invoked when the tiles are culled.\n             * \n             * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\n             * \n             * It will be sent 3 arguments:\n             * \n             * 1. The Phaser.Tilemaps.LayerData object for this Layer\n             * 2. The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\n             * 3. A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\n             * \n             * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.",
        "* An array holding the mapping between the tile indexes and the tileset they belong to.",
        "* Upload the tile data to a VBO.\n             * @param camera The camera to render to.\n             * @param tilesetIndex The tileset index.",
        "* Sets the rendering (draw) order of the tiles in this layer.\n             * \n             * The default is 'right-down', meaning it will order the tiles starting from the top-left,\n             * drawing to the right and then moving down to the next row.\n             * \n             * The draw orders are:\n             * \n             * 0 = right-down\n             * 1 = left-down\n             * 2 = right-up\n             * 3 = left-up\n             * \n             * Setting the render order does not change the tiles or how they are stored in the layer,\n             * it purely impacts the order in which they are rendered.\n             * \n             * You can provide either an integer (0 to 3), or the string version of the order.\n             * @param renderOrder The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.",
        "* Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\n             * faces are used internally for optimizing collisions against tiles. This method is mostly used\n             * internally to optimize recalculating faces when only one tile has been changed.\n             * @param tileX The x coordinate.\n             * @param tileY The y coordinate.",
        "* Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\n             * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\n             * is mostly used internally.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.",
        "* Creates a Sprite for every object matching the given tile indexes in the layer. You can\n             * optionally specify if each tile will be replaced with a new tile after the Sprite has been\n             * created. This is useful if you want to lay down special tiles in a level that are converted to\n             * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\n             * @param indexes The tile index, or array of indexes, to create Sprites from.\n             * @param replacements The tile index, or array of indexes, to change a converted\n             * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\n             * one-to-one mapping with the indexes array.\n             * @param spriteConfig The config object to pass into the Sprite creator (i.e.\n             * scene.make.sprite).\n             * @param scene The Scene to create the Sprites within. Default scene the map is within.\n             * @param camera The Camera to use when determining the world XY Default main camera.",
        "* Returns the tiles in the given layer that are within the cameras viewport.\n             * This is used internally.\n             * @param camera The Camera to run the cull check against.",
        "* Canvas only.\n             * \n             * You can control if the Cameras should cull tiles before rendering them or not.\n             * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\n             * \n             * However, there are some instances when you may wish to disable this.\n             * @param value Set to `true` to stop culling tiles. Set to `false` to enable culling again. Default true.",
        "* Canvas only.\n             * \n             * When a Camera culls the tiles in this layer it does so using its view into the world, building up a\n             * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\n             * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\n             * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\n             * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\n             * @param paddingX The amount of extra horizontal tiles to add to the cull check padding. Default 1.\n             * @param paddingY The amount of extra vertical tiles to add to the cull check padding. Default 1.",
        "* Searches the entire map layer for the first tile matching the given index, then returns that Tile\n             * object. If no match is found, it returns null. The search starts from the top-left tile and\n             * continues horizontally until it hits the end of the row, then it drops down to the next column.\n             * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\n             * the top-left.\n             * @param index The tile index value to search for.\n             * @param skip The number of times to skip a matching tile before returning. Default 0.\n             * @param reverse If true it will scan the layer in reverse, starting at the\n             * bottom-right. Otherwise it scans from the top-left. Default false.",
        "* Find the first tile in the given rectangular area (in tile coordinates) of the layer that\n             * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\n             * true. Similar to Array.prototype.find in vanilla JS.\n             * @param callback The callback. Each tile in the given area will be passed to this\n             * callback as the first and only parameter.\n             * @param context The context under which the callback should be run.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area to filter. Default 0.\n             * @param tileY The topmost tile index (in tile coordinates) to use as the origin of the area to filter. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param filteringOptions Optional filters to apply when getting the tiles.",
        "* For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\n             * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\n             * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\n             * @param callback The callback. Each tile in the given area will be passed to this\n             * callback as the first and only parameter. The callback should return true for tiles that pass the\n             * filter.\n             * @param context The context under which the callback should be run.\n             * @param tileX The leftmost tile index (in tile coordinates) to use as the origin of the area to filter. Default 0.\n             * @param tileY The topmost tile index (in tile coordinates) to use as the origin of the area to filter. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param filteringOptions Optional filters to apply when getting the tiles.",
        "* For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\n             * callback. Similar to Array.prototype.forEach in vanilla JS.\n             * @param callback The callback. Each tile in the given area will be passed to this\n             * callback as the first and only parameter.\n             * @param context The context under which the callback should be run.\n             * @param tileX The leftmost tile index (in tile coordinates) to use as the origin of the area to filter. Default 0.\n             * @param tileY The topmost tile index (in tile coordinates) to use as the origin of the area to filter. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param filteringOptions Optional filters to apply when getting the tiles.",
        "* Gets a tile at the given tile coordinates from the given layer.\n             * @param tileX X position to get the tile from (given in tile units, not pixels).\n             * @param tileY Y position to get the tile from (given in tile units, not pixels).\n             * @param nonNull If true getTile won't return null for empty tiles, but a Tile\n             * object with an index of -1. Default false.",
        "* Gets a tile at the given world coordinates from the given layer.\n             * @param worldX X position to get the tile from (given in pixels)\n             * @param worldY Y position to get the tile from (given in pixels)\n             * @param nonNull If true, function won't return null for empty tiles, but a Tile\n             * object with an index of -1. Default false.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\n             * @param tileX The leftmost tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The topmost tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param filteringOptions Optional filters to apply when getting the tiles.",
        "* Gets the tiles in the given rectangular area (in world coordinates) of the layer.\n             * @param worldX The leftmost tile index (in tile coordinates) to use as the origin of the area to filter.\n             * @param worldY The topmost tile index (in tile coordinates) to use as the origin of the area to filter.\n             * @param width How many tiles wide from the `tileX` index the area will be.\n             * @param height How many tiles high from the `tileY` index the area will be.\n             * @param filteringOptions Optional filters to apply when getting the tiles.\n             * @param camera The Camera to use when factoring in which tiles to return. Default main camera.",
        "* Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\n             * Line, Rectangle or Triangle. The shape should be in world coordinates.\n             * @param shape A shape in world (pixel) coordinates\n             * @param filteringOptions Optional filters to apply when getting the tiles.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\n             * false if there is no tile or if the tile at that location has an index of -1.\n             * @param tileX X position to get the tile from in tile coordinates.\n             * @param tileY Y position to get the tile from in tile coordinates.",
        "* Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\n             * false if there is no tile or if the tile at that location has an index of -1.\n             * @param worldX The X coordinate of the world position.\n             * @param worldY The Y coordinate of the world position.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\n             * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\n             * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\n             * wherever you want on the screen.\n             * @param graphics The target Graphics object to draw upon.\n             * @param styleConfig An object specifying the colors to use for the debug drawing.",
        "* Sets collision on the given tile or tiles within a layer by index. You can pass in either a\n             * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\n             * collision will be enabled (true) or disabled (false).\n             * @param indexes Either a single tile index, or an array of tile indexes.\n             * @param collides If true it will enable collision. If false it will clear\n             * collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the\n             * update. Default true.",
        "* Sets collision on a range of tiles in a layer whose index is between the specified `start` and\n             * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\n             * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\n             * enabled (true) or disabled (false).\n             * @param start The first index of the tile to be set for collision.\n             * @param stop The last index of the tile to be set for collision.\n             * @param collides If true it will enable collision. If false it will clear\n             * collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the\n             * update. Default true.",
        "* Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\n             * that matches the given properties object, its collision flag will be set. The `collides`\n             * parameter controls if collision will be enabled (true) or disabled (false). Passing in\n             * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\n             * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\n             * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\n             * \"types\" property that matches any of those values, its collision flag will be updated.\n             * @param properties An object with tile properties and corresponding values that should\n             * be checked.\n             * @param collides If true it will enable collision. If false it will clear\n             * collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the\n             * update. Default true.",
        "* Sets collision on all tiles in the given layer, except for tiles that have an index specified in\n             * the given array. The `collides` parameter controls if collision will be enabled (true) or\n             * disabled (false).\n             * @param indexes An array of the tile indexes to not be counted for collision.\n             * @param collides If true it will enable collision. If false it will clear\n             * collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the\n             * update. Default true.",
        "* Sets a global collision callback for the given tile index within the layer. This will affect all\n             * tiles on this layer that have the same index. If a callback is already set for the tile index it\n             * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\n             * at a specific location on the map then see setTileLocationCallback.\n             * @param indexes Either a single tile index, or an array of tile indexes to have a\n             * collision callback set for.\n             * @param callback The callback that will be invoked when the tile is collided with.\n             * @param callbackContext The context under which the callback is called.",
        "* Sets collision on the tiles within a layer by checking each tiles collision group data\n             * (typically defined in Tiled within the tileset collision editor). If any objects are found within\n             * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\n             * controls if collision will be enabled (true) or disabled (false).\n             * @param collides If true it will enable collision. If false it will clear\n             * collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the\n             * update. Default true.",
        "* Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\n             * If a callback is already set for the tile index it will be replaced. Set the callback to null to\n             * remove it.\n             * @param tileX The leftmost tile index (in tile coordinates) to use as the origin of the area.\n             * @param tileY The topmost tile index (in tile coordinates) to use as the origin of the area.\n             * @param width How many tiles wide from the `tileX` index the area will be.\n             * @param height How many tiles tall from the `tileY` index the area will be.\n             * @param callback The callback that will be invoked when the tile is collided with.\n             * @param callbackContext The context under which the callback is called.",
        "* Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\n             * layers position, scale and scroll.\n             * @param tileX The X coordinate, in tile coordinates.\n             * @param camera The Camera to use when calculating the world values from the tile index. Default main camera.",
        "* Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\n             * layers position, scale and scroll.\n             * @param tileY The Y coordinate, in tile coordinates.\n             * @param camera The Camera to use when calculating the world values from the tile index. Default main camera.",
        "* Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\n             * layers position, scale and scroll. This will return a new Vector2 object or update the given\n             * `point` object.\n             * @param tileX The X coordinate, in tile coordinates.\n             * @param tileY The Y coordinate, in tile coordinates.\n             * @param point A Vector2 to store the coordinates in. If not given, a new Vector2 is created.\n             * @param camera The Camera to use when calculating the world values from the tile index. Default main camera.",
        "* Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\n             * layers position, scale and scroll.\n             * @param worldX The X coordinate, in world pixels.\n             * @param snapToFloor Whether or not to round the tile coordinate down to the\n             * nearest integer. Default true.\n             * @param camera The Camera to use when calculating the tile index from the world values.] Default main camera.",
        "* Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\n             * layers position, scale and scroll.\n             * @param worldY The Y coordinate, in world pixels.\n             * @param snapToFloor Whether or not to round the tile coordinate down to the\n             * nearest integer. Default true.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\n             * layers position, scale and scroll. This will return a new Vector2 object or update the given\n             * `point` object.\n             * @param worldX The X coordinate, in world pixels.\n             * @param worldY The Y coordinate, in world pixels.\n             * @param snapToFloor Whether or not to round the tile coordinate down to the\n             * nearest integer. Default true.\n             * @param point A Vector2 to store the coordinates in. If not given, a new Vector2 is created.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.",
        "* Destroys this StaticTilemapLayer and removes its link to the associated LayerData.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\n             * are used.",
        "* Sets the Blend Mode being used by this Game Object.\n             * \n             * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n             * \n             * Under WebGL only the following Blend Modes are available:\n             * \n             * * ADD\n             * * MULTIPLY\n             * * SCREEN\n             * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\n             * \n             * Canvas has more available depending on browser support.\n             * \n             * You can also create your own custom Blend Modes in WebGL.\n             * \n             * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\n             * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\n             * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\n             * are used.\n             * @param value The BlendMode value. Either a string or a CONST.",
        "* The native (un-scaled) width of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayWidth` property.",
        "* The native (un-scaled) height of this Game Object.\n             * \n             * Changing this value will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or use\n             * the `displayHeight` property.",
        "* The displayed width of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* The displayed height of this Game Object.\n             * \n             * This value takes into account the scale factor.\n             * \n             * Setting this value will adjust the Game Object's scale property.",
        "* Sets the internal size of this Game Object, as used for frame or physics body creation.\n             * \n             * This will not change the size that the Game Object is rendered in-game.\n             * For that you need to either set the scale of the Game Object (`setScale`) or call the\n             * `setDisplaySize` method, which is the same thing as changing the scale but allows you\n             * to do so by giving pixel values.\n             * \n             * If you have enabled this Game Object for input, changing the size will _not_ change the\n             * size of the hit area. To do this you should adjust the `input.hitArea` object directly.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* Sets the display size of this Game Object.\n             * \n             * Calling this will adjust the scale.\n             * @param width The width of this Game Object.\n             * @param height The height of this Game Object.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.",
        "* The depth of this Game Object within the Scene.\n             * \n             * The depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\n             * of Game Objects, without actually moving their position in the display list.\n             * \n             * The depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\n             * value will always render in front of one with a lower value.\n             * \n             * Setting the depth will queue a depth sort event within the Scene.\n             * @param value The depth of this Game Object.",
        "* The horizontally flipped state of the Game Object.\n             * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n             * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n             * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n             * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* Gets the center coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.",
        "* Gets the top-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the top-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-left corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bottom-right corner coordinate of this Game Object, regardless of origin.\n             * The returned point is calculated in local space and does not factor in any parent containers\n             * @param output An object to store the values in. If not provided a new Vector2 will be created.\n             * @param includeParent If this Game Object has a parent Container, include it (and all other ancestors) in the resulting vector? Default false.",
        "* Gets the bounds of this Game Object, regardless of origin.\n             * The values are stored and returned in a Rectangle, or Rectangle-like, object.\n             * @param output An object to store the values in. If not provided a new Rectangle will be created.",
        "* The horizontal origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the left of the Game Object.",
        "* The vertical origin of this Game Object.\n             * The origin maps the relationship between the size and position of the Game Object.\n             * The default value is 0.5, meaning all Game Objects are positioned based on their center.\n             * Setting the value to 0 means the position now relates to the top of the Game Object.",
        "* The horizontal display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* The vertical display origin of this Game Object.\n             * The origin is a normalized value between 0 and 1.\n             * The displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
        "* Sets the origin of this Game Object.\n             * \n             * The values are given in the range 0 to 1.\n             * @param x The horizontal origin value. Default 0.5.\n             * @param y The vertical origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Sets the origin of this Game Object based on the Pivot values in its Frame.",
        "* Sets the display origin of this Game Object.\n             * The difference between this and setting the origin is that you can use pixel values for setting the display origin.\n             * @param x The horizontal display origin value. Default 0.\n             * @param y The vertical display origin value. If not defined it will be set to the value of `x`. Default x.",
        "* Updates the Display Origin cached values internally stored on this Game Object.\n             * You don't usually call this directly, but it is exposed for edge-cases where you may.",
        "* The initial WebGL pipeline of this Game Object.",
        "* The current WebGL pipeline of this Game Object.",
        "* Sets the initial WebGL Pipeline of this Game Object.\n             * This should only be called during the instantiation of the Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object. Defaults to the Texture Tint Pipeline. Default TextureTintPipeline.",
        "* Sets the active WebGL Pipeline of this Game Object.\n             * @param pipelineName The name of the pipeline to set on this Game Object.",
        "* Resets the WebGL Pipeline of this Game Object back to the default it was created with.",
        "* Gets the name of the WebGL Pipeline this Game Object is currently using.",
        "* The Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
        "* Sets the Scale Mode being used by this Game Object.\n             * Can be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.\n             * @param value The Scale Mode to be used by this Game Object.",
        "* The x position of this Game Object.",
        "* The y position of this Game Object.",
        "* The z position of this Game Object.\n             * Note: Do not use this value to set the z-index, instead see the `depth` property.",
        "* The w position of this Game Object.",
        "* The horizontal scale of this Game Object.",
        "* The vertical scale of this Game Object.",
        "* The angle of this Game Object as expressed in degrees.\n             * \n             * Where 0 is to the right, 90 is down, 180 is left.\n             * \n             * If you prefer to work in radians, see the `rotation` property instead.",
        "* The angle of this Game Object in radians.\n             * \n             * If you prefer to work in degrees, see the `angle` property instead.",
        "* Sets the position of this Game Object.\n             * @param x The x position of this Game Object. Default 0.\n             * @param y The y position of this Game Object. If not set it will use the `x` value. Default x.\n             * @param z The z position of this Game Object. Default 0.\n             * @param w The w position of this Game Object. Default 0.",
        "* Sets the position of this Game Object to be a random position within the confines of\n             * the given area.\n             * \n             * If no area is specified a random position between 0 x 0 and the game width x height is used instead.\n             * \n             * The position does not factor in the size of this Game Object, meaning that only the origin is\n             * guaranteed to be within the area.\n             * @param x The x position of the top-left of the random area. Default 0.\n             * @param y The y position of the top-left of the random area. Default 0.\n             * @param width The width of the random area.\n             * @param height The height of the random area.",
        "* Sets the rotation of this Game Object.\n             * @param radians The rotation of this Game Object, in radians. Default 0.",
        "* Sets the angle of this Game Object.\n             * @param degrees The rotation of this Game Object, in degrees. Default 0.",
        "* Sets the scale of this Game Object.\n             * @param x The horizontal scale of this Game Object.\n             * @param y The vertical scale of this Game Object. If not set it will use the `x` value. Default x.",
        "* Sets the x position of this Game Object.\n             * @param value The x position of this Game Object. Default 0.",
        "* Sets the y position of this Game Object.\n             * @param value The y position of this Game Object. Default 0.",
        "* Sets the z position of this Game Object.\n             * @param value The z position of this Game Object. Default 0.",
        "* Sets the w position of this Game Object.\n             * @param value The w position of this Game Object. Default 0.",
        "* Gets the local transform matrix for this Game Object.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.",
        "* Gets the world transform matrix for this Game Object, factoring in any parent Containers.\n             * @param tempMatrix The matrix to populate with the values from this Game Object.\n             * @param parentMatrix A temporary matrix to hold parent values during the calculations.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* The horizontal scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* The vertical scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.",
        "* Sets the scroll factor of this Game Object.\n             * \n             * The scroll factor controls the influence of the movement of a Camera upon this Game Object.\n             * \n             * When a camera scrolls it will change the location at which this Game Object is rendered on-screen.\n             * It does not change the Game Objects actual position values.\n             * \n             * A value of 1 means it will move exactly in sync with a camera.\n             * A value of 0 means it will not move at all, even if the camera moves.\n             * Other values control the degree to which the camera movement is mapped to this Game Object.\n             * \n             * Please be aware that scroll factor values other than 1 are not taken in to consideration when\n             * calculating physics collisions. Bodies always collide based on their world position, but changing\n             * the scroll factor is a visual adjustment to where the textures are rendered, which can offset\n             * them from physics bodies if not accounted for in your code.\n             * @param x The horizontal scroll factor of this Game Object.\n             * @param y The vertical scroll factor of this Game Object. If not set it will use the `x` value. Default x.",
        "* A Tile is a representation of a single tile within the Tilemap. This is a lightweight data\n         * representation, so its position information is stored without factoring in scroll, layer\n         * scale or layer position.",
        "* \n             * @param layer The LayerData object in the Tilemap that this tile belongs to.\n             * @param index The unique index of this tile within the map.\n             * @param x The x coordinate of this tile in tile coordinates.\n             * @param y The y coordinate of this tile in tile coordinates.\n             * @param width Width of the tile in pixels.\n             * @param height Height of the tile in pixels.\n             * @param baseWidth The base width a tile in the map (in pixels). Tiled maps support\n             * multiple tileset sizes within one map, but they are still placed at intervals of the base\n             * tile width.\n             * @param baseHeight The base height of the tile in pixels (in pixels). Tiled maps\n             * support multiple tileset sizes within one map, but they are still placed at intervals of the\n             * base tile height.",
        "* The LayerData in the Tilemap data that this tile belongs to.",
        "* The index of this tile within the map data corresponding to the tileset, or -1 if this\n             * represents a blank tile.",
        "* The x map coordinate of this tile in tile units.",
        "* The y map coordinate of this tile in tile units.",
        "* The width of the tile in pixels.",
        "* The height of the tile in pixels.",
        "* The map's base width of a tile in pixels. Tiled maps support multiple tileset sizes\n             * within one map, but they are still placed at intervals of the base tile size.",
        "* The map's base height of a tile in pixels. Tiled maps support multiple tileset sizes\n             * within one map, but they are still placed at intervals of the base tile size.",
        "* The x coordinate of the top left of this tile in pixels. This is relative to the top left\n             * of the layer this tile is being rendered within. This property does NOT factor in camera\n             * scroll, layer scale or layer position.",
        "* The y coordinate of the top left of this tile in pixels. This is relative to the top left\n             * of the layer this tile is being rendered within. This property does NOT factor in camera\n             * scroll, layer scale or layer position.",
        "* Tile specific properties. These usually come from Tiled.",
        "* The rotation angle of this tile.",
        "* Whether the tile should collide with any object on the left side.",
        "* Whether the tile should collide with any object on the right side.",
        "* Whether the tile should collide with any object on the top side.",
        "* Whether the tile should collide with any object on the bottom side.",
        "* Whether the tile's left edge is interesting for collisions.",
        "* Whether the tile's right edge is interesting for collisions.",
        "* Whether the tile's top edge is interesting for collisions.",
        "* Whether the tile's bottom edge is interesting for collisions.",
        "* Tile collision callback.",
        "* The context in which the collision callback will be called.",
        "* The tint to apply to this tile. Note: tint is currently a single color value instead of\n             * the 4 corner tint component on other GameObjects.",
        "* An empty object where physics-engine specific information (e.g. bodies) may be stored.",
        "* Check if the given x and y world coordinates are within this Tile. This does not factor in\n             * camera scroll, layer scale or layer position.\n             * @param x The x coordinate to test.\n             * @param y The y coordinate to test.",
        "* Copies the tile data & properties from the given tile to this tile. This copies everything\n             * except for position and interesting faces.\n             * @param tile The tile to copy from.",
        "* The collision group for this Tile, defined within the Tileset. This returns a reference to\n             * the collision group stored within the Tileset, so any modification of the returned object\n             * will impact all tiles that have the same index as this tile.",
        "* The tile data for this Tile, defined within the Tileset. This typically contains Tiled\n             * collision data, tile animations and terrain information. This returns a reference to the tile\n             * data stored within the Tileset, so any modification of the returned object will impact all\n             * tiles that have the same index as this tile.",
        "* Gets the world X position of the left side of the tile, factoring in the layers position,\n             * scale and scroll.\n             * @param camera The Camera to use to perform the check.",
        "* Gets the world X position of the right side of the tile, factoring in the layer's position,\n             * scale and scroll.\n             * @param camera The Camera to use to perform the check.",
        "* Gets the world Y position of the top side of the tile, factoring in the layer's position,\n             * scale and scroll.\n             * @param camera The Camera to use to perform the check.",
        "* Gets the world Y position of the bottom side of the tile, factoring in the layer's position,\n             * scale and scroll.\n             * @param camera The Camera to use to perform the check.",
        "* Gets the world rectangle bounding box for the tile, factoring in the layers position,\n             * scale and scroll.\n             * @param camera The Camera to use to perform the check.\n             * @param output [description]",
        "* Gets the world X position of the center of the tile, factoring in the layer's position,\n             * scale and scroll.\n             * @param camera The Camera to use to perform the check.",
        "* Gets the world Y position of the center of the tile, factoring in the layer's position,\n             * scale and scroll.\n             * @param camera The Camera to use to perform the check.",
        "* Clean up memory.",
        "* Check for intersection with this tile. This does not factor in camera scroll, layer scale or\n             * layer position.\n             * @param x The x axis in pixels.\n             * @param y The y axis in pixels.\n             * @param right The right point.\n             * @param bottom The bottom point.",
        "* Checks if the tile is interesting.\n             * @param collides If true, will consider the tile interesting if it collides on any side.\n             * @param faces If true, will consider the tile interesting if it has an interesting face.",
        "* Reset collision status flags.\n             * @param recalculateFaces Whether or not to recalculate interesting faces for this tile and its neighbors. Default true.",
        "* Reset faces.",
        "* Sets the collision flags for each side of this tile and updates the interesting faces list.\n             * @param left Indicating collide with any object on the left.\n             * @param right Indicating collide with any object on the right.\n             * @param up Indicating collide with any object on the top.\n             * @param down Indicating collide with any object on the bottom.\n             * @param recalculateFaces Whether or not to recalculate interesting faces\n             * for this tile and its neighbors. Default true.",
        "* Set a callback to be called when this tile is hit by an object. The callback must true for\n             * collision processing to take place.\n             * @param callback Callback function.\n             * @param context Callback will be called within this context.",
        "* Sets the size of the tile and updates its pixelX and pixelY.\n             * @param tileWidth The width of the tile in pixels.\n             * @param tileHeight The height of the tile in pixels.\n             * @param baseWidth The base width a tile in the map (in pixels).\n             * @param baseHeight The base height of the tile in pixels (in pixels).",
        "* Used internally. Updates the tile's world XY position based on the current tile size.",
        "* True if this tile can collide on any of its faces or has a collision callback set.",
        "* True if this tile can collide on any of its faces.",
        "* True if this tile has any interesting faces.",
        "* The tileset that contains this Tile. This is null if accessed from a LayerData instance\n             * before the tile is placed in a StaticTilemapLayer or DynamicTilemapLayer, or if the tile has\n             * an index that doesn't correspond to any of the map's tilesets.",
        "* The tilemap layer that contains this Tile. This will only return null if accessed from a\n             * LayerData instance before the tile is placed within a StaticTilemapLayer or\n             * DynamicTilemapLayer.",
        "* The tilemap that contains this Tile. This will only return null if accessed from a LayerData\n             * instance before the tile is placed within a StaticTilemapLayer or DynamicTilemapLayer.",
        "* Clears all alpha values associated with this Game Object.\n             * \n             * Immediately sets the alpha levels back to 1 (fully opaque).",
        "* Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\n             * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\n             * \n             * If your game is running under WebGL you can optionally specify four different alpha values, each of which\n             * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\n             * @param topLeft The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object. Default 1.\n             * @param topRight The alpha value used for the top-right of the Game Object. WebGL only.\n             * @param bottomLeft The alpha value used for the bottom-left of the Game Object. WebGL only.\n             * @param bottomRight The alpha value used for the bottom-right of the Game Object. WebGL only.",
        "* The alpha value of the Game Object.\n             * \n             * This is a global value, impacting the entire Game Object, not just a region of it.",
        "* The alpha value starting from the top-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the top-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-left of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The alpha value starting from the bottom-right of the Game Object.\n             * This value is interpolated from the corner to the center of the Game Object.",
        "* The horizontally flipped state of the Game Object.\n             * A Game Object that is flipped horizontally will render inversed on the horizontal axis.\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* The vertically flipped state of the Game Object.\n             * A Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\n             * Flipping always takes place from the middle of the texture and does not impact the scale value.",
        "* Toggles the horizontal flipped state of this Game Object.",
        "* Toggles the vertical flipped state of this Game Object.",
        "* Sets the horizontal flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the vertical flipped state of this Game Object.\n             * @param value The flipped state. `false` for no flip, or `true` to be flipped.",
        "* Sets the horizontal and vertical flipped state of this Game Object.\n             * @param x The horizontal flipped state. `false` for no flip, or `true` to be flipped.\n             * @param y The horizontal flipped state. `false` for no flip, or `true` to be flipped.",
        "* Resets the horizontal and vertical flipped state of this Game Object back to their default un-flipped state.",
        "* The visible state of the Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.",
        "* Sets the visibility of this Game Object.\n             * \n             * An invisible Game Object will skip rendering, but will still process update logic.\n             * @param value The visible state of the Game Object.",
        "* A Tilemap is a container for Tilemap data. This isn't a display object, rather, it holds data\n         * about the map and allows you to add tilesets and tilemap layers to it. A map can have one or\n         * more tilemap layers (StaticTilemapLayer or DynamicTilemapLayer), which are the display\n         * objects that actually render tiles.\n         * \n         * The Tilemap data be parsed from a Tiled JSON file, a CSV file or a 2D array. Tiled is a free\n         * software package specifically for creating tile maps, and is available from:\n         * http://www.mapeditor.org\n         * \n         * A Tilemap has handy methods for getting & manipulating the tiles within a layer. You can only\n         * use the methods that change tiles (e.g. removeTileAt) on a DynamicTilemapLayer.\n         * \n         * Note that all Tilemaps use a base tile size to calculate dimensions from, but that a\n         * StaticTilemapLayer or DynamicTilemapLayer may have its own unique tile size that overrides\n         * it.",
        "* \n             * @param scene The Scene to which this Tilemap belongs.\n             * @param mapData A MapData instance containing Tilemap data.",
        "* The base width of a tile in pixels. Note that individual layers may have a different tile\n             * width.",
        "* The base height of a tile in pixels. Note that individual layers may have a different\n             * tile height.",
        "* The width of the map (in tiles).",
        "* The height of the map (in tiles).",
        "* The orientation of the map data (as specified in Tiled), usually 'orthogonal'.",
        "* The render (draw) order of the map data (as specified in Tiled), usually 'right-down'.\n             * \n             * The draw orders are:\n             * \n             * right-down\n             * left-down\n             * right-up\n             * left-up\n             * \n             * This can be changed via the `setRenderOrder` method.",
        "* The format of the map data.",
        "* The version of the map data (as specified in Tiled, usually 1).",
        "* Map specific properties as specified in Tiled.",
        "* The width of the map in pixels based on width * tileWidth.",
        "* The height of the map in pixels based on height * tileHeight.",
        "* An array of Tiled Image Layers.",
        "* An array of Tilemap layer data.",
        "* An array of Tilesets used in the map.",
        "* An array of ObjectLayer instances parsed from Tiled object layers.",
        "* The index of the currently selected LayerData object.",
        "* Sets the rendering (draw) order of the tiles in this map.\n             * \n             * The default is 'right-down', meaning it will order the tiles starting from the top-left,\n             * drawing to the right and then moving down to the next row.\n             * \n             * The draw orders are:\n             * \n             * 0 = right-down\n             * 1 = left-down\n             * 2 = right-up\n             * 3 = left-up\n             * \n             * Setting the render order does not change the tiles or how they are stored in the layer,\n             * it purely impacts the order in which they are rendered.\n             * \n             * You can provide either an integer (0 to 3), or the string version of the order.\n             * \n             * Calling this method _after_ creating Static or Dynamic Tilemap Layers will **not** automatically\n             * update them to use the new render order. If you call this method after creating layers, use their\n             * own `setRenderOrder` methods to change them as needed.\n             * @param renderOrder The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.",
        "* Adds an image to the map to be used as a tileset. A single map may use multiple tilesets.\n             * Note that the tileset name can be found in the JSON file exported from Tiled, or in the Tiled\n             * editor.\n             * @param tilesetName The name of the tileset as specified in the map data.\n             * @param key The key of the Phaser.Cache image used for this tileset. If\n             * `undefined` or `null` it will look for an image with a key matching the tilesetName parameter.\n             * @param tileWidth The width of the tile (in pixels) in the Tileset Image. If not\n             * given it will default to the map's tileWidth value, or the tileWidth specified in the Tiled\n             * JSON file.\n             * @param tileHeight The height of the tiles (in pixels) in the Tileset Image. If\n             * not given it will default to the map's tileHeight value, or the tileHeight specified in the\n             * Tiled JSON file.\n             * @param tileMargin The margin around the tiles in the sheet (in pixels). If not\n             * specified, it will default to 0 or the value specified in the Tiled JSON file.\n             * @param tileSpacing The spacing between each the tile in the sheet (in pixels).\n             * If not specified, it will default to 0 or the value specified in the Tiled JSON file.\n             * @param gid If adding multiple tilesets to a blank map, specify the starting\n             * GID this set will use here. Default 0.",
        "* Turns the StaticTilemapLayer associated with the given layer into a DynamicTilemapLayer. If\n             * no layer specified, the map's current layer is used. This is useful if you want to manipulate\n             * a map at the start of a scene, but then make it non-manipulable and optimize it for speed.\n             * Note: the DynamicTilemapLayer passed in is destroyed, so make sure to store the value\n             * returned from this method if you want to manipulate the new StaticTilemapLayer.\n             * @param layer The name of the layer from Tiled, the\n             * index of the layer in the map, or a DynamicTilemapLayer.",
        "* Copies the tiles in the source rectangular area to a new destination (all specified in tile\n             * coordinates) within the layer. This copies all tile properties & recalculates collision\n             * information in the destination region.\n             * \n             * If no layer specified, the map's current layer is used. This cannot be applied to StaticTilemapLayers.\n             * @param srcTileX The x coordinate of the area to copy from, in tiles, not pixels.\n             * @param srcTileY The y coordinate of the area to copy from, in tiles, not pixels.\n             * @param width The width of the area to copy, in tiles, not pixels.\n             * @param height The height of the area to copy, in tiles, not pixels.\n             * @param destTileX The x coordinate of the area to copy to, in tiles, not pixels.\n             * @param destTileY The y coordinate of the area to copy to, in tiles, not pixels.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Creates a new and empty DynamicTilemapLayer. The currently selected layer in the map is set to this new layer.\n             * @param name The name of this layer. Must be unique within the map.\n             * @param tileset The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\n             * @param x The world x position where the top left of this layer will be placed. Default 0.\n             * @param y The world y position where the top left of this layer will be placed. Default 0.\n             * @param width The width of the layer in tiles. If not specified, it will default to the map's width.\n             * @param height The height of the layer in tiles. If not specified, it will default to the map's height.\n             * @param tileWidth The width of the tiles the layer uses for calculations. If not specified, it will default to the map's tileWidth.\n             * @param tileHeight The height of the tiles the layer uses for calculations. If not specified, it will default to the map's tileHeight.",
        "* Creates a new DynamicTilemapLayer that renders the LayerData associated with the given\n             * `layerID`. The currently selected layer in the map is set to this new layer.\n             * \n             * The `layerID` is important. If you've created your map in Tiled then you can get this by\n             * looking in Tiled and looking at the layer name. Or you can open the JSON file it exports and\n             * look at the layers[].name value. Either way it must match.\n             * \n             * Unlike a static layer, a dynamic layer can be modified. See DynamicTilemapLayer for more\n             * information.\n             * @param layerID The layer array index value, or if a string is given, the layer name from Tiled.\n             * @param tileset The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\n             * @param x The x position to place the layer in the world. If not specified, it will default to the layer offset from Tiled or 0.\n             * @param y The y position to place the layer in the world. If not specified, it will default to the layer offset from Tiled or 0.",
        "* Creates a Sprite for every object matching the given gid in the map data. All properties from\n             * the map data objectgroup are copied into the `spriteConfig`, so you can use this as an easy\n             * way to configure Sprite properties from within the map editor. For example giving an object a\n             * property of alpha: 0.5 in the map editor will duplicate that when the Sprite is created.\n             * \n             * Custom object properties not sharing names with the Sprite's own properties are copied to the\n             * Sprite's {@link Phaser.GameObjects.Sprite#data data store}.\n             * @param name The name of the object layer (from Tiled) to create Sprites from.\n             * @param id Either the id (object), gid (tile object) or name (object or\n             * tile object) from Tiled. Ids are unique in Tiled, but a gid is shared by all tile objects\n             * with the same graphic. The same name can be used on multiple objects.\n             * @param spriteConfig The config object to pass into the Sprite creator (i.e.\n             * scene.make.sprite).\n             * @param scene The Scene to create the Sprites within. Default the scene the map is within.",
        "* Creates a Sprite for every object matching the given tile indexes in the layer. You can\n             * optionally specify if each tile will be replaced with a new tile after the Sprite has been\n             * created. This is useful if you want to lay down special tiles in a level that are converted to\n             * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\n             * @param indexes The tile index, or array of indexes, to create Sprites from.\n             * @param replacements The tile index, or array of indexes, to change a converted\n             * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\n             * one-to-one mapping with the indexes array.\n             * @param spriteConfig The config object to pass into the Sprite creator (i.e. scene.make.sprite).\n             * @param scene The Scene to create the Sprites within. Default scene the map is within.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Creates a new StaticTilemapLayer that renders the LayerData associated with the given\n             * `layerID`. The currently selected layer in the map is set to this new layer.\n             * \n             * The `layerID` is important. If you've created your map in Tiled then you can get this by\n             * looking in Tiled and looking at the layer name. Or you can open the JSON file it exports and\n             * look at the layers[].name value. Either way it must match.\n             * \n             * It's important to remember that a static layer cannot be modified. See StaticTilemapLayer for\n             * more information.\n             * @param layerID The layer array index value, or if a string is given, the layer name from Tiled.\n             * @param tileset The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\n             * @param x The x position to place the layer in the world. If not specified, it will default to the layer offset from Tiled or 0. Default 0.\n             * @param y The y position to place the layer in the world. If not specified, it will default to the layer offset from Tiled or 0. Default 0.",
        "* Removes all layer data from this Tilemap and nulls the scene reference. This will destroy any\n             * StaticTilemapLayers or DynamicTilemapLayers that have been linked to LayerData.",
        "* Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\n             * specified index. Tiles will be set to collide if the given index is a colliding index.\n             * Collision information in the region will be recalculated.\n             * \n             * If no layer specified, the map's current layer is used.\n             * This cannot be applied to StaticTilemapLayers.\n             * @param index The tile index to fill the area with.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* For each object in the given object layer, run the given filter callback function. Any\n             * objects that pass the filter test (i.e. where the callback returns true) will returned as a\n             * new array. Similar to Array.prototype.Filter in vanilla JS.\n             * @param objectLayer The name of an object layer (from Tiled) or an ObjectLayer instance.\n             * @param callback The callback. Each object in the given area will be passed to this callback as the first and only parameter.\n             * @param context The context under which the callback should be run.",
        "* For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\n             * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\n             * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\n             * If no layer specified, the map's current layer is used.\n             * @param callback The callback. Each tile in the given area will be passed to this\n             * callback as the first and only parameter. The callback should return true for tiles that pass the\n             * filter.\n             * @param context The context under which the callback should be run.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area to filter. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area to filter. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param filteringOptions Optional filters to apply when getting the tiles.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Searches the entire map layer for the first tile matching the given index, then returns that Tile\n             * object. If no match is found, it returns null. The search starts from the top-left tile and\n             * continues horizontally until it hits the end of the row, then it drops down to the next column.\n             * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\n             * the top-left.\n             * If no layer specified, the map's current layer is used.\n             * @param index The tile index value to search for.\n             * @param skip The number of times to skip a matching tile before returning. Default 0.\n             * @param reverse If true it will scan the layer in reverse, starting at the bottom-right. Otherwise it scans from the top-left. Default false.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Find the first object in the given object layer that satisfies the provided testing function.\n             * I.e. finds the first object for which `callback` returns true. Similar to\n             * Array.prototype.find in vanilla JS.\n             * @param objectLayer The name of an object layer (from Tiled) or an ObjectLayer instance.\n             * @param callback The callback. Each object in the given area will be passed to this callback as the first and only parameter.\n             * @param context The context under which the callback should be run.",
        "* Find the first tile in the given rectangular area (in tile coordinates) of the layer that\n             * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\n             * true. Similar to Array.prototype.find in vanilla JS.\n             * If no layer specified, the maps current layer is used.\n             * @param callback The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\n             * @param context The context under which the callback should be run.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area to search. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area to search. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param filteringOptions Optional filters to apply when getting the tiles.\n             * @param layer The Tile layer to run the search on. If not provided will use the current layer.",
        "* For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\n             * callback. Similar to Array.prototype.forEach in vanilla JS.\n             * \n             * If no layer specified, the map's current layer is used.\n             * @param callback The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\n             * @param context The context under which the callback should be run.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area to search. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area to search. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param filteringOptions Optional filters to apply when getting the tiles.\n             * @param layer The Tile layer to run the search on. If not provided will use the current layer.",
        "* Gets the image layer index based on its name.\n             * @param name The name of the image to get.",
        "* Internally used. Returns the index of the object in one of the Tilemaps arrays whose name\n             * property matches the given `name`.\n             * @param location The Tilemap array to search.\n             * @param name The name of the array element to get.",
        "* Gets the LayerData from this.layers that is associated with `layer`, or null if an invalid\n             * `layer` is given.\n             * @param layer The name of the\n             * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\n             * StaticTilemapLayer. If not given will default to the maps current layer index.",
        "* Gets the ObjectLayer from this.objects that has the given `name`, or null if no ObjectLayer\n             * is found with that name.\n             * @param name The name of the object layer from Tiled.",
        "* Gets the LayerData index of the given `layer` within this.layers, or null if an invalid\n             * `layer` is given.\n             * @param layer The name of the\n             * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\n             * StaticTilemapLayer. If not given will default to the map's current layer index.",
        "* Gets the index of the LayerData within this.layers that has the given `name`, or null if an\n             * invalid `name` is given.\n             * @param name The name of the layer to get.",
        "* Gets a tile at the given tile coordinates from the given layer.\n             * If no layer specified, the map's current layer is used.\n             * @param tileX X position to get the tile from (given in tile units, not pixels).\n             * @param tileY Y position to get the tile from (given in tile units, not pixels).\n             * @param nonNull If true getTile won't return null for empty tiles, but a Tile object with an index of -1. Default false.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Gets a tile at the given world coordinates from the given layer.\n             * If no layer specified, the map's current layer is used.\n             * @param worldX X position to get the tile from (given in pixels)\n             * @param worldY Y position to get the tile from (given in pixels)\n             * @param nonNull If true, function won't return null for empty tiles, but a Tile object with an index of -1. Default false.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\n             * If no layer specified, the maps current layer is used.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param filteringOptions Optional filters to apply when getting the tiles.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\n             * Line, Rectangle or Triangle. The shape should be in world coordinates.\n             * If no layer specified, the maps current layer is used.\n             * @param shape A shape in world (pixel) coordinates\n             * @param filteringOptions Optional filters to apply when getting the tiles.\n             * @param camera The Camera to use when factoring in which tiles to return. Default main camera.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Gets the tiles in the given rectangular area (in world coordinates) of the layer.\n             * If no layer specified, the maps current layer is used.\n             * @param worldX The world x coordinate for the top-left of the area.\n             * @param worldY The world y coordinate for the top-left of the area.\n             * @param width The width of the area.\n             * @param height The height of the area.\n             * @param filteringOptions Optional filters to apply when getting the tiles.\n             * @param camera The Camera to use when factoring in which tiles to return. Default main camera.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Gets the Tileset that has the given `name`, or null if an invalid `name` is given.\n             * @param name The name of the Tileset to get.",
        "* Gets the index of the Tileset within this.tilesets that has the given `name`, or null if an\n             * invalid `name` is given.\n             * @param name The name of the Tileset to get.",
        "* Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\n             * false if there is no tile or if the tile at that location has an index of -1.\n             * \n             * If no layer specified, the map's current layer is used.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param tileY The y coordinate, in tiles, not pixels.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\n             * false if there is no tile or if the tile at that location has an index of -1.\n             * \n             * If no layer specified, the maps current layer is used.\n             * @param worldX The x coordinate, in pixels.\n             * @param worldY The y coordinate, in pixels.\n             * @param camera The Camera to use when factoring in which tiles to return. Default main camera.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* The LayerData object that is currently selected in the map. You can set this property using\n             * any type supported by setLayer.",
        "* Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\n             * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\n             * location. If you pass in an index, only the index at the specified location will be changed.\n             * Collision information will be recalculated at the specified location.\n             * \n             * If no layer specified, the maps current layer is used.\n             * \n             * This cannot be applied to StaticTilemapLayers.\n             * @param tile The index of this tile to set or a Tile object.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param tileY The y coordinate, in tiles, not pixels.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\n             * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\n             * specified location. If you pass in an index, only the index at the specified location will be\n             * changed. Collision information will be recalculated at the specified location.\n             * \n             * If no layer specified, the maps current layer is used. This\n             * cannot be applied to StaticTilemapLayers.\n             * @param tile The index of this tile to set or a Tile object.\n             * @param worldX The x coordinate, in pixels.\n             * @param worldY The y coordinate, in pixels.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\n             * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\n             * all attributes will be copied over to the specified location. If you pass in an index, only the\n             * index at the specified location will be changed. Collision information will be recalculated\n             * within the region tiles were changed.\n             * \n             * If no layer specified, the maps current layer is used.\n             * This cannot be applied to StaticTilemapLayers.\n             * @param tile A row (array) or grid (2D array) of Tiles or tile indexes to place.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param tileY The y coordinate, in tiles, not pixels.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\n             * specified layer. Each tile will recieve a new index. If an array of indexes is passed in, then\n             * those will be used for randomly assigning new tile indexes. If an array is not provided, the\n             * indexes found within the region (excluding -1) will be used for randomly assigning new tile\n             * indexes. This method only modifies tile indexes and does not change collision information.\n             * \n             * If no layer specified, the maps current layer is used.\n             * This cannot be applied to StaticTilemapLayers.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param indexes An array of indexes to randomly draw from during randomization.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\n             * faces are used internally for optimizing collisions against tiles. This method is mostly used\n             * internally to optimize recalculating faces when only one tile has been changed.\n             * \n             * If no layer specified, the maps current layer is used.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param tileY The y coordinate, in tiles, not pixels.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\n             * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\n             * is mostly used internally.\n             * \n             * If no layer specified, the map's current layer is used.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Removes all layers from this Tilemap and destroys any associated StaticTilemapLayers or\n             * DynamicTilemapLayers.",
        "* Removes the tile at the given tile coordinates in the specified layer and updates the layer's\n             * collision information.\n             * \n             * If no layer specified, the maps current layer is used.\n             * This cannot be applied to StaticTilemapLayers.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param tileY The y coordinate, in tiles, not pixels.\n             * @param replaceWithNull If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1. Default true.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Removes the tile at the given world coordinates in the specified layer and updates the layer's\n             * collision information.\n             * \n             * If no layer specified, the maps current layer is used.\n             * This cannot be applied to StaticTilemapLayers.\n             * @param worldX The x coordinate, in pixels.\n             * @param worldY The y coordinate, in pixels.\n             * @param replaceWithNull If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1. Default true.\n             * @param recalculateFaces `true` if the faces data should be recalculated. Default true.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\n             * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\n             * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\n             * wherever you want on the screen.\n             * \n             * If no layer specified, the maps current layer is used.\n             * @param graphics The target Graphics object to draw upon.\n             * @param styleConfig An object specifying the colors to use for the debug drawing.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\n             * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\n             * not change collision information.\n             * \n             * If no layer specified, the maps current layer is used.\n             * This cannot be applied to StaticTilemapLayers.\n             * @param findIndex The index of the tile to search for.\n             * @param newIndex The index of the tile to replace it with.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Sets collision on the given tile or tiles within a layer by index. You can pass in either a\n             * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\n             * collision will be enabled (true) or disabled (false).\n             * \n             * If no layer specified, the map's current layer is used.\n             * @param indexes Either a single tile index, or an array of tile indexes.\n             * @param collides If true it will enable collision. If false it will clear collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the update. Default true.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Sets collision on a range of tiles in a layer whose index is between the specified `start` and\n             * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\n             * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\n             * enabled (true) or disabled (false).\n             * \n             * If no layer specified, the map's current layer is used.\n             * @param start The first index of the tile to be set for collision.\n             * @param stop The last index of the tile to be set for collision.\n             * @param collides If true it will enable collision. If false it will clear collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the update. Default true.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\n             * that matches the given properties object, its collision flag will be set. The `collides`\n             * parameter controls if collision will be enabled (true) or disabled (false). Passing in\n             * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\n             * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\n             * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\n             * \"types\" property that matches any of those values, its collision flag will be updated.\n             * \n             * If no layer specified, the map's current layer is used.\n             * @param properties An object with tile properties and corresponding values that should be checked.\n             * @param collides If true it will enable collision. If false it will clear collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the update. Default true.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Sets collision on all tiles in the given layer, except for tiles that have an index specified in\n             * the given array. The `collides` parameter controls if collision will be enabled (true) or\n             * disabled (false).\n             * \n             * If no layer specified, the map's current layer is used.\n             * @param indexes An array of the tile indexes to not be counted for collision.\n             * @param collides If true it will enable collision. If false it will clear collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the update. Default true.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Sets collision on the tiles within a layer by checking each tile's collision group data\n             * (typically defined in Tiled within the tileset collision editor). If any objects are found within\n             * a tile's collision group, the tile's colliding information will be set. The `collides` parameter\n             * controls if collision will be enabled (true) or disabled (false).\n             * \n             * If no layer specified, the map's current layer is used.\n             * @param collides If true it will enable collision. If false it will clear collision. Default true.\n             * @param recalculateFaces Whether or not to recalculate the tile faces after the update. Default true.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Sets a global collision callback for the given tile index within the layer. This will affect all\n             * tiles on this layer that have the same index. If a callback is already set for the tile index it\n             * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\n             * at a specific location on the map then see setTileLocationCallback.\n             * \n             * If no layer specified, the map's current layer is used.\n             * @param indexes Either a single tile index, or an array of tile indexes to have a collision callback set for.\n             * @param callback The callback that will be invoked when the tile is collided with.\n             * @param callbackContext The context under which the callback is called.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Sets a collision callback for the given rectangular area (in tile coordindates) within the layer.\n             * If a callback is already set for the tile index it will be replaced. Set the callback to null to\n             * remove it.\n             * \n             * If no layer specified, the map's current layer is used.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area.\n             * @param width How many tiles wide from the `tileX` index the area will be.\n             * @param height How many tiles tall from the `tileY` index the area will be.\n             * @param callback The callback that will be invoked when the tile is collided with.\n             * @param callbackContext The context under which the callback is called.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Sets the current layer to the LayerData associated with `layer`.\n             * @param layer The name of the\n             * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\n             * StaticTilemapLayer. If not given will default to the map's current layer index.",
        "* Sets the base tile size for the map. Note: this does not necessarily match the tileWidth and\n             * tileHeight for all layers. This also updates the base size on all tiles across all layers.\n             * @param tileWidth The width of the tiles the map uses for calculations.\n             * @param tileHeight The height of the tiles the map uses for calculations.",
        "* Sets the tile size for a specific `layer`. Note: this does not necessarily match the map's\n             * tileWidth and tileHeight for all layers. This will set the tile size for the layer and any\n             * tiles the layer has.\n             * @param tileWidth The width of the tiles (in pixels) in the layer.\n             * @param tileHeight The height of the tiles (in pixels) in the layer.\n             * @param layer The name of the\n             * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\n             * StaticTilemapLayer. If not given will default to the map's current layer index.",
        "* Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\n             * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\n             * appear to have changed! This method only modifies tile indexes and does not change collision\n             * information.\n             * \n             * If no layer specified, the maps current layer is used.\n             * This cannot be applied to StaticTilemapLayers.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\n             * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\n             * information.\n             * \n             * If no layer specified, the maps current layer is used.\n             * This cannot be applied to StaticTilemapLayers.\n             * @param tileA First tile index.\n             * @param tileB Second tile index.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\n             * layers position, scale and scroll.\n             * \n             * If no layer specified, the maps current layer is used.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\n             * layers position, scale and scroll.\n             * \n             * If no layer specified, the maps current layer is used.\n             * @param tileY The y coordinate, in tiles, not pixels.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.\n             * @param layer The tile layer\n             * to use. If not given the current layer is used.",
        "* Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\n             * layers position, scale and scroll. This will return a new Vector2 object or update the given\n             * `point` object.\n             * \n             * If no layer specified, the maps current layer is used.\n             * @param tileX The x coordinate, in tiles, not pixels.\n             * @param tileY The y coordinate, in tiles, not pixels.\n             * @param point A Vector2 to store the coordinates in. If not given a new Vector2 is created.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\n             * specified layer. Each tile will receive a new index. New indexes are drawn from the given\n             * weightedIndexes array. An example weighted array:\n             * \n             * [\n             *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\n             *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\n             *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\n             *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\n             * ]\n             * \n             * The probability of any index being choose is (the index's weight) / (sum of all weights). This\n             * method only modifies tile indexes and does not change collision information.\n             * \n             * If no layer specified, the map's current layer is used. This\n             * cannot be applied to StaticTilemapLayers.\n             * @param tileX The left most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param tileY The top most tile index (in tile coordinates) to use as the origin of the area. Default 0.\n             * @param width How many tiles wide from the `tileX` index the area will be. Default max width based on tileX.\n             * @param height How many tiles tall from the `tileY` index the area will be. Default max height based on tileY.\n             * @param weightedIndexes An array of objects to randomly draw from during\n             * randomization. They should be in the form: { index: 0, weight: 4 } or\n             * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\n             * layers position, scale and scroll.\n             * \n             * If no layer specified, the maps current layer is used.\n             * @param worldX The x coordinate to be converted, in pixels, not tiles.\n             * @param snapToFloor Whether or not to round the tile coordinate down to the nearest integer. Default true.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.\n             * @param layer The tile layer\n             * to use. If not given the current layer is used.",
        "* Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\n             * layers position, scale and scroll.\n             * \n             * If no layer specified, the maps current layer is used.\n             * @param worldY The y coordinate to be converted, in pixels, not tiles.\n             * @param snapToFloor Whether or not to round the tile coordinate down to the nearest integer. Default true.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\n             * layers position, scale and scroll. This will return a new Vector2 object or update the given\n             * `point` object.\n             * \n             * If no layer specified, the maps current layer is used.\n             * @param worldX The x coordinate to be converted, in pixels, not tiles.\n             * @param worldY The y coordinate to be converted, in pixels, not tiles.\n             * @param snapToFloor Whether or not to round the tile coordinate down to the nearest integer. Default true.\n             * @param point A Vector2 to store the coordinates in. If not given a new Vector2 is created.\n             * @param camera The Camera to use when calculating the tile index from the world values. Default main camera.\n             * @param layer The tile layer to use. If not given the current layer is used.",
        "* A Tileset is a combination of an image containing the tiles and a container for data about\n         * each tile.",
        "* \n             * @param name The name of the tileset in the map data.\n             * @param firstgid The first tile index this tileset contains.\n             * @param tileWidth Width of each tile (in pixels). Default 32.\n             * @param tileHeight Height of each tile (in pixels). Default 32.\n             * @param tileMargin The margin around all tiles in the sheet (in pixels). Default 0.\n             * @param tileSpacing The spacing between each tile in the sheet (in pixels). Default 0.\n             * @param tileProperties Custom properties defined per tile in the Tileset.\n             * These typically are custom properties created in Tiled when editing a tileset. Default {}.\n             * @param tileData Data stored per tile. These typically are created in Tiled\n             * when editing a tileset, e.g. from Tiled's tile collision editor or terrain editor. Default {}.",
        "* The name of the Tileset.",
        "* The starting index of the first tile index this Tileset contains.",
        "* The width of each tile (in pixels). Use setTileSize to change.",
        "* The height of each tile (in pixels). Use setTileSize to change.",
        "* The margin around the tiles in the sheet (in pixels). Use `setSpacing` to change.",
        "* The spacing between each the tile in the sheet (in pixels). Use `setSpacing` to change.",
        "* Tileset-specific properties per tile that are typically defined in the Tiled editor in the\n             * Tileset editor.",
        "* Tileset-specific data per tile that are typically defined in the Tiled editor, e.g. within\n             * the Tileset collision editor. This is where collision objects and terrain are stored.",
        "* The cached image that contains the individual tiles. Use setImage to set.",
        "* The gl texture used by the WebGL renderer.",
        "* The number of tile rows in the the tileset.",
        "* The number of tile columns in the tileset.",
        "* The total number of tiles in the tileset.",
        "* The look-up table to specific tile image texture coordinates (UV in pixels). Each element\n             * contains the coordinates for a tile in an object of the form {x, y}.",
        "* Get a tiles properties that are stored in the Tileset. Returns null if tile index is not\n             * contained in this Tileset. This is typically defined in Tiled under the Tileset editor.\n             * @param tileIndex The unique id of the tile across all tilesets in the map.",
        "* Get a tile's data that is stored in the Tileset. Returns null if tile index is not contained\n             * in this Tileset. This is typically defined in Tiled and will contain both Tileset collision\n             * info and terrain mapping.\n             * @param tileIndex The unique id of the tile across all tilesets in the map.",
        "* Get a tile's collision group that is stored in the Tileset. Returns null if tile index is not\n             * contained in this Tileset. This is typically defined within Tiled's tileset collision editor.\n             * @param tileIndex The unique id of the tile across all tilesets in the map.",
        "* Returns true if and only if this Tileset contains the given tile index.\n             * @param tileIndex The unique id of the tile across all tilesets in the map.",
        "* Returns the texture coordinates (UV in pixels) in the Tileset image for the given tile index.\n             * Returns null if tile index is not contained in this Tileset.\n             * @param tileIndex The unique id of the tile across all tilesets in the map.",
        "* Sets the image associated with this Tileset and updates the tile data (rows, columns, etc.).\n             * @param texture The image that contains the tiles.",
        "* Sets the tile width & height and updates the tile data (rows, columns, etc.).\n             * @param tileWidth The width of a tile in pixels.\n             * @param tileHeight The height of a tile in pixels.",
        "* Sets the tile margin & spacing and updates the tile data (rows, columns, etc.).\n             * @param margin The margin around the tiles in the sheet (in pixels).\n             * @param spacing The spacing between the tiles in the sheet (in pixels).",
        "* Updates tile texture coordinates and tileset data.\n             * @param imageWidth The (expected) width of the image to slice.\n             * @param imageHeight The (expected) height of the image to slice.",
        "* The Clock is a Scene plugin which creates and updates Timer Events for its Scene.",
        "* \n             * @param scene The Scene which owns this Clock.",
        "* The Scene which owns this Clock.",
        "* The Scene Systems object of the Scene which owns this Clock.",
        "* The current time of the Clock, in milliseconds.\n             * \n             * If accessed externally, this is equivalent to the `time` parameter normally passed to a Scene's `update` method.",
        "* The scale of the Clock's time delta.\n             * \n             * The time delta is the time elapsed between two consecutive frames and influences the speed of time for this Clock and anything which uses it, such as its Timer Events. Values higher than 1 increase the speed of time, while values smaller than 1 decrease it. A value of 0 freezes time and is effectively equivalent to pausing the Clock.",
        "* Whether the Clock is paused (`true`) or active (`false`).\n             * \n             * When paused, the Clock will not update any of its Timer Events, thus freezing time.",
        "* Creates a Timer Event and adds it to the Clock at the start of the frame.\n             * @param config The configuration for the Timer Event.",
        "* Creates a Timer Event and adds it to the Clock at the start of the frame.\n             * \n             * This is a shortcut for {@link #addEvent} which can be shorter and is compatible with the syntax of the GreenSock Animation Platform (GSAP).\n             * @param delay The delay of the function call, in milliseconds.\n             * @param callback The function to call after the delay expires.\n             * @param args The arguments to call the function with.\n             * @param callbackScope The scope (`this` object) to call the function with.",
        "* Clears and recreates the array of pending Timer Events.",
        "* Schedules all active Timer Events for removal at the start of the frame.",
        "* Updates the arrays of active and pending Timer Events. Called at the start of the frame.\n             * @param time The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\n             * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* Updates the Clock's internal time and all of its Timer Events.\n             * @param time The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\n             * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* A Timer Event represents a delayed function call. It's managed by a Scene's {@link Clock} and will call its function after a set amount of time has passed. The Timer Event can optionally repeat - i.e. call its function multiple times before finishing, or loop indefinitely.\n         * \n         * Because it's managed by a Clock, a Timer Event is based on game time, will be affected by its Clock's time scale, and will pause if its Clock pauses.",
        "* \n             * @param config The configuration for the Timer Event, including its delay and callback.",
        "* The delay in ms at which this TimerEvent fires.",
        "* The total number of times this TimerEvent will repeat before finishing.",
        "* If repeating this contains the current repeat count.",
        "* True if this TimerEvent loops, otherwise false.",
        "* The callback that will be called when the TimerEvent occurs.",
        "* The scope in which the callback will be called.",
        "* Additional arguments to be passed to the callback.",
        "* Scale the time causing this TimerEvent to update.",
        "* Start this many MS into the elapsed (useful if you want a long duration with repeat, but for the first loop to fire quickly)",
        "* The time in milliseconds which has elapsed since the Timer Event's creation.\n             * \n             * This value is local for the Timer Event and is relative to its Clock. As such, it's influenced by the Clock's time scale and paused state, the Timer Event's initial {@link #startAt} property, and the Timer Event's {@link #timeScale} and {@link #paused} state.",
        "* Whether or not this timer is paused.",
        "* Whether the Timer Event's function has been called.\n             * \n             * When the Timer Event fires, this property will be set to `true` before the callback function is invoked and will be reset immediately afterward if the Timer Event should repeat. The value of this property does not directly influence whether the Timer Event will be removed from its Clock, but can prevent it from firing.",
        "* Completely reinitializes the Timer Event, regardless of its current state, according to a configuration object.\n             * @param config The new state for the Timer Event.",
        "* Gets the progress of the current iteration, not factoring in repeats.",
        "* Gets the progress of the timer overall, factoring in repeats.",
        "* Returns the number of times this Timer Event will repeat before finishing.\n             * \n             * This should not be confused with the number of times the Timer Event will fire before finishing. A return value of 0 doesn't indicate that the Timer Event has finished running - it indicates that it will not repeat after the next time it fires.",
        "* Returns the local elapsed time for the current iteration of the Timer Event.",
        "* Returns the local elapsed time for the current iteration of the Timer Event in seconds.",
        "* Forces the Timer Event to immediately expire, thus scheduling its removal in the next frame.\n             * @param dispatchCallback If `true` (by default `false`), the function of the Timer Event will be called before its removal from its Clock.",
        "* Destroys all object references in the Timer Event, i.e. its callback, scope, and arguments.\n             * \n             * Normally, this method is only called by the Clock when it shuts down. As such, it doesn't stop the Timer Event. If called manually, the Timer Event will still be updated by the Clock, but it won't do anything when it fires.",
        "* Retrieves the value of the given key from an object.\n             * @param source The object to retrieve the value from.\n             * @param key The key to look for in the `source` object.\n             * @param defaultValue The default value to return if the `key` doesn't exist or if no `source` object is provided.",
        "* [description]\n             * @param ease [description]\n             * @param easeParams [description]",
        "* [description]\n             * @param source [description]\n             * @param key [description]\n             * @param defaultValue [description]",
        "* [description]\n             * @param config The configuration object of the tween to get the target(s) from.",
        "* Extracts an array of targets from a Tween configuration object.\n             * \n             * The targets will be looked for in a `targets` property. If it's a function, its return value will be used as the result.\n             * @param config The configuration object to use.",
        "* Returns an array of all tweens in the given config\n             * @param config [description]",
        "* Returns `getStart` and `getEnd` functions for a Tween's Data based on a target property and end value.\n             * \n             * If the end value is a number, it will be treated as an absolute value and the property will be tweened to it. A string can be provided to specify a relative end value which consists of an operation (`+=` to add to the current value, `-=` to subtract from the current value, `*=` to multiply the current value, or `/=` to divide the current value) followed by its operand. A function can be provided to allow greater control over the end value; it will receive the target object being tweened, the name of the property being tweened, and the current value of the property as its arguments. If both the starting and the ending values need to be controlled, an object with `getStart` and `getEnd` callbacks, which will receive the same arguments, can be provided instead. If an object with a `value` property is provided, the property will be used as the effective value under the same rules described here.\n             * @param key The name of the property to modify.\n             * @param propertyValue The ending value of the property, as described above.",
        "* [description]\n             * @param parent [description]\n             * @param config [description]\n             * @param defaults [description]",
        "* Builds a Timeline of Tweens based on a configuration object.\n             * \n             * The configuration object (`config`) can have the following properties:\n             * \n             * `tweens` - an array of tween configuration objects to create and add into the new Timeline, as described by `TweenBuilder`. If this doesn't exist or is empty, the Timeline will start off paused and none of the other configuration settings will be read. If it's a function, it will be called and its return value will be used as the array.\n             * `targets` - an array (or function which returns one) of default targets to which to apply the Timeline. Each individual Tween configuration can override this value.\n             * `totalDuration` - if specified, each Tween in the Timeline will get an equal portion of this duration, usually in milliseconds, by default. Each individual Tween configuration can override the Tween's duration.\n             * `duration` - if `totalDuration` is not specified, the default duration, usually in milliseconds, of each Tween which will be created. Each individual Tween configuration can override the Tween's duration.\n             * `delay`, `easeParams`, `ease`, `hold`, `repeat`, `repeatDelay`, `yoyo`, `flipX`, `flipY` - the default settings for each Tween which will be created, as specified by `TweenBuilder`. Each individual Tween configuration can override any of these values.\n             * `completeDelay` - if specified, the time to wait, usually in milliseconds, before the Timeline completes.\n             * `loop` - how many times the Timeline should loop, or -1 to loop indefinitely.\n             * `loopDelay` - the time, usually in milliseconds, between each loop\n             * `paused` - if `true`, the Timeline will start paused\n             * `useFrames` - if `true`, all duration in the Timeline will be in frames instead of milliseconds\n             * `callbackScope` - the default scope (`this` value) to use for each callback registered by the Timeline Builder. If not specified, the Timeline itself will be used.\n             * `onStart` - if specified, the `onStart` callback for the Timeline, called every time it starts playing\n             * `onStartScope` - the scope (`this` value) to use for the `onStart` callback. If not specified, the `callbackScope` will be used.\n             * `onStartParams` - additional arguments to pass to the `onStart` callback. The Timeline will always be the first argument.\n             * `onUpdate` - if specified, the `onUpdate` callback for the Timeline, called every frame it's active, regardless of its Tweens\n             * `onUpdateScope` - the scope (`this` value) to use for the `onUpdate` callback. If not specified, the `callbackScope` will be used.\n             * `onUpdateParams` - additional arguments to pass to the `onUpdate` callback. The Timeline will always be the first argument.\n             * `onLoop` - if specified, the `onLoop` callback for the Timeline, called every time it loops\n             * `onLoopScope` - the scope (`this` value) to use for the `onLoop` callback. If not specified, the `callbackScope` will be used.\n             * `onLoopParams` - additional arguments to pass to the `onLoop` callback. The Timeline will always be the first argument.\n             * `onYoyo` - if specified, the `onYoyo` callback for the Timeline, called every time it yoyos\n             * `onYoyoScope` - the scope (`this` value) to use for the `onYoyo` callback. If not specified, the `callbackScope` will be used.\n             * `onYoyoParams` - additional arguments to pass to the `onYoyo` callback. The first argument will always be `null`, while the Timeline will always be the second argument.\n             * `onComplete` - if specified, the `onComplete` callback for the Timeline, called after it completes\n             * `onCompleteScope` - the scope (`this` value) to use for the `onComplete` callback. If not specified, the `callbackScope` will be used.\n             * `onCompleteParams` - additional arguments to pass to the `onComplete` callback. The Timeline will always be the first argument.\n             * @param manager The Tween Manager to which the Timeline will belong.\n             * @param config The configuration object for the Timeline, as described above.",
        "* [description]\n             * @param parent [description]\n             * @param config [description]\n             * @param defaults Tween configuration defaults.\n             * `",
        "* The Timeline Complete Event.\n             * \n             * This event is dispatched by a Tween Timeline when it completes playback.\n             * \n             * Listen to it from a Timeline instance using `Timeline.on('complete', listener)`, i.e.:\n             * \n             * ```javascript\n             * var timeline = this.tweens.timeline({\n             *     targets: image,\n             *     ease: 'Power1',\n             *     duration: 3000,\n             *     tweens: [ { x: 600 }, { y: 500 }, { x: 100 }, { y: 100 } ]\n             * });\n             * timeline.on('complete', listener);\n             * timeline.play();\n             * ```",
        "* The Timeline Loop Event.\n             * \n             * This event is dispatched by a Tween Timeline every time it loops.\n             * \n             * Listen to it from a Timeline instance using `Timeline.on('loop', listener)`, i.e.:\n             * \n             * ```javascript\n             * var timeline = this.tweens.timeline({\n             *     targets: image,\n             *     ease: 'Power1',\n             *     duration: 3000,\n             *     loop: 4,\n             *     tweens: [ { x: 600 }, { y: 500 }, { x: 100 }, { y: 100 } ]\n             * });\n             * timeline.on('loop', listener);\n             * timeline.play();\n             * ```",
        "* The Timeline Pause Event.\n             * \n             * This event is dispatched by a Tween Timeline when it is paused.\n             * \n             * Listen to it from a Timeline instance using `Timeline.on('pause', listener)`, i.e.:\n             * \n             * ```javascript\n             * var timeline = this.tweens.timeline({\n             *     targets: image,\n             *     ease: 'Power1',\n             *     duration: 3000,\n             *     tweens: [ { x: 600 }, { y: 500 }, { x: 100 }, { y: 100 } ]\n             * });\n             * timeline.on('pause', listener);\n             * // At some point later ...\n             * timeline.pause();\n             * ```",
        "* The Timeline Resume Event.\n             * \n             * This event is dispatched by a Tween Timeline when it is resumed from a paused state.\n             * \n             * Listen to it from a Timeline instance using `Timeline.on('resume', listener)`, i.e.:\n             * \n             * ```javascript\n             * var timeline = this.tweens.timeline({\n             *     targets: image,\n             *     ease: 'Power1',\n             *     duration: 3000,\n             *     tweens: [ { x: 600 }, { y: 500 }, { x: 100 }, { y: 100 } ]\n             * });\n             * timeline.on('resume', listener);\n             * // At some point later ...\n             * timeline.resume();\n             * ```",
        "* The Timeline Start Event.\n             * \n             * This event is dispatched by a Tween Timeline when it starts.\n             * \n             * Listen to it from a Timeline instance using `Timeline.on('start', listener)`, i.e.:\n             * \n             * ```javascript\n             * var timeline = this.tweens.timeline({\n             *     targets: image,\n             *     ease: 'Power1',\n             *     duration: 3000,\n             *     tweens: [ { x: 600 }, { y: 500 }, { x: 100 }, { y: 100 } ]\n             * });\n             * timeline.on('start', listener);\n             * timeline.play();\n             * ```",
        "* The Timeline Update Event.\n             * \n             * This event is dispatched by a Tween Timeline every time it updates, which can happen a lot of times per second,\n             * so be careful about listening to this event unless you absolutely require it.\n             * \n             * Listen to it from a Timeline instance using `Timeline.on('update', listener)`, i.e.:\n             * \n             * ```javascript\n             * var timeline = this.tweens.timeline({\n             *     targets: image,\n             *     ease: 'Power1',\n             *     duration: 3000,\n             *     tweens: [ { x: 600 }, { y: 500 }, { x: 100 }, { y: 100 } ]\n             * });\n             * timeline.on('update', listener);\n             * timeline.play();\n             * ```",
        "* A Timeline combines multiple Tweens into one. Its overall behavior is otherwise similar to a single Tween.\n         * \n         * The Timeline updates all of its Tweens simultaneously. Its methods allow you to easily build a sequence of Tweens (each one starting after the previous one) or run multiple Tweens at once during given parts of the Timeline.",
        "* \n             * @param manager The Tween Manager which owns this Timeline.",
        "* The Tween Manager which owns this Timeline.",
        "* A constant value which allows this Timeline to be easily identified as one.",
        "* An array of Tween objects, each containing a unique property and target being tweened.",
        "* data array doesn't usually change, so we can cache the length",
        "* If true then duration, delay, etc values are all frame totals.",
        "* Scales the time applied to this Tween. A value of 1 runs in real-time. A value of 0.5 runs 50% slower, and so on.\n             * Value isn't used when calculating total duration of the tween, it's a run-time delta adjustment only.",
        "* Loop this tween? Can be -1 for an infinite loop, or an integer.\n             * When enabled it will play through ALL TweenDatas again (use TweenData.repeat to loop a single TD)",
        "* Time in ms/frames before the tween loops.",
        "* How many loops are left to run?",
        "* Time in ms/frames before the 'onComplete' event fires. This never fires if loop = true (as it never completes)",
        "* Countdown timer (used by loopDelay and completeDelay)",
        "* The current state of the tween",
        "* Does the Tween start off paused? (if so it needs to be started with Tween.play)",
        "* Elapsed time in ms/frames of this run through the Tween.",
        "* Total elapsed time in ms/frames of the entire Tween, including looping.",
        "* Time in ms/frames for the whole Tween to play through once, excluding loop amounts and loop delays.",
        "* Value between 0 and 1. The amount through the Tween, excluding loops.",
        "* Time in ms/frames for all Tweens to complete (including looping)",
        "* Value between 0 and 1. The amount through the entire Tween, including looping.",
        "* Sets the value of the time scale applied to this Timeline. A value of 1 runs in real-time. A value of 0.5 runs 50% slower, and so on.\n             * Value isn't used when calculating total duration of the tween, it's a run-time delta adjustment only.\n             * @param value The time scale value to set.",
        "* Gets the value of the time scale applied to this Timeline. A value of 1 runs in real-time. A value of 0.5 runs 50% slower, and so on.",
        "* Check whether or not the Timeline is playing.",
        "* [description]\n             * @param config [description]",
        "* [description]\n             * @param tween [description]",
        "* [description]\n             * @param tween [description]",
        "* Checks whether the offset value is a number or a directive that is relative to previous tweens.\n             * @param value The offset value to be evaluated",
        "* Checks if the offset is a relative value rather than an absolute one. If the value is just a number, this returns false.\n             * @param value The offset value to be evaluated",
        "* Parses the relative offset value, returning a positive or negative number.\n             * @param value The relative offset, in the format of '-=500', for example. The first character determines whether it will be a positive or negative number. Spacing matters here.\n             * @param base The value to use as the offset.",
        "* Calculates the total duration of the timeline.  Computes all tween's durations and returns the full duration of the timeline. The resulting number is stored in the timeline, not as a return value.",
        "* Initializes the timeline, which means all Tweens get their init() called, and the total duration will be computed. Returns a boolean indicating whether the timeline is auto-started or not.",
        "* Resets all of the timeline's tweens back to their initial states.  The boolean parameter indicates whether tweens that are looping should reset as well, or not.\n             * @param resetFromLoop If true, resets all looping tweens to their initial values.",
        "* Sets a callback for the Timeline.\n             * @param type The internal type of callback to set.\n             * @param callback Timeline allows multiple tweens to be linked together to create a streaming sequence.\n             * @param params The parameters to pass to the callback.\n             * @param scope The context scope of the callback.",
        "* Delegates #makeActive to the Tween manager.\n             * @param tween The tween object to make active.",
        "* Starts playing the timeline.",
        "* [description]",
        "* Returns 'true' if this Timeline has finished and should be removed from the Tween Manager.\n             * Otherwise, returns false.\n             * @param timestamp [description]\n             * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* Stops the Tween immediately, whatever stage of progress it is at and flags it for removal by the TweenManager.",
        "* Pauses the timeline, retaining its internal state.",
        "* Resumes the timeline from where it was when it was paused.",
        "* Checks if any of the tweens has the target as the object they are operating on. Retuns false if no tweens operate on the target object.\n             * @param target The target to check all tweens against.",
        "* Stops all the Tweens in the Timeline immediately, whatever stage of progress they are at and flags them for removal by the TweenManager.",
        "* TweenData state.",
        "* TweenData state.",
        "* TweenData state.",
        "* TweenData state.",
        "* TweenData state.",
        "* TweenData state.",
        "* TweenData state.",
        "* TweenData state.",
        "* TweenData state.",
        "* TweenData state.",
        "* Tween state.",
        "* Tween state.",
        "* Tween state.",
        "* Tween state.",
        "* Tween state.",
        "* Tween state.",
        "* Tween state.",
        "* The object, or an array of objects, to run the tween on.",
        "* The number of milliseconds to delay before the tween will start.",
        "* The duration of the tween in milliseconds.",
        "* The easing equation to use for the tween.",
        "* Optional easing parameters.",
        "* The number of milliseconds to hold the tween for before yoyo'ing.",
        "* The number of times to repeat the tween.",
        "* The number of milliseconds to pause before a tween will repeat.",
        "* Should the tween complete, then reverse the values incrementally to get back to the starting tween values? The reverse tweening will also take `duration` milliseconds to complete.",
        "* Horizontally flip the target of the Tween when it completes (before it yoyos, if set to do so). Only works for targets that support the `flipX` property.",
        "* Vertically flip the target of the Tween when it completes (before it yoyos, if set to do so). Only works for targets that support the `flipY` property.",
        "* A Tween is able to manipulate the properties of one or more objects to any given value, based\n         * on a duration and type of ease. They are rarely instantiated directly and instead should be\n         * created via the TweenManager.",
        "* \n             * @param parent A reference to the parent of this Tween. Either the Tween Manager or a Tween Timeline instance.\n             * @param data An array of TweenData objects, each containing a unique property to be tweened.\n             * @param targets An array of targets to be tweened.",
        "* A reference to the parent of this Tween.\n             * Either the Tween Manager or a Tween Timeline instance.",
        "* Is the parent of this Tween a Timeline?",
        "* An array of TweenData objects, each containing a unique property and target being tweened.",
        "* The cached length of the data array.",
        "* An array of references to the target/s this Tween is operating on.",
        "* Cached target total (not necessarily the same as the data total)",
        "* If `true` then duration, delay, etc values are all frame totals.",
        "* Scales the time applied to this Tween. A value of 1 runs in real-time. A value of 0.5 runs 50% slower, and so on.\n             * Value isn't used when calculating total duration of the tween, it's a run-time delta adjustment only.",
        "* Loop this tween? Can be -1 for an infinite loop, or an integer.\n             * When enabled it will play through ALL TweenDatas again. Use TweenData.repeat to loop a single element.",
        "* Time in ms/frames before the tween loops.",
        "* How many loops are left to run?",
        "* Time in ms/frames before the 'onComplete' event fires. This never fires if loop = -1 (as it never completes)",
        "* Countdown timer (used by timeline offset, loopDelay and completeDelay)",
        "* Set only if this Tween is part of a Timeline.",
        "* Set only if this Tween is part of a Timeline. The calculated offset amount.",
        "* The current state of the tween",
        "* Does the Tween start off paused? (if so it needs to be started with Tween.play)",
        "* Elapsed time in ms/frames of this run through the Tween.",
        "* Total elapsed time in ms/frames of the entire Tween, including looping.",
        "* Time in ms/frames for the whole Tween to play through once, excluding loop amounts and loop delays.",
        "* Value between 0 and 1. The amount through the Tween, excluding loops.",
        "* Time in ms/frames for the Tween to complete (including looping)",
        "* Value between 0 and 1. The amount through the entire Tween, including looping.",
        "* An object containing the various Tween callback references.",
        "* Returns the current value of the Tween.",
        "* Set the scale the time applied to this Tween. A value of 1 runs in real-time. A value of 0.5 runs 50% slower, and so on.\n             * @param value The scale factor for timescale.",
        "* Returns the scale of the time applied to this Tween.",
        "* Checks if the Tween is currently active.",
        "* Checks if the Tween is currently paused.",
        "* See if this Tween is currently acting upon the given target.\n             * @param target The target to check against this Tween.",
        "* Updates the value of a property of this Tween to a new value, without adjusting the\n             * Tween duration or current progress.\n             * \n             * You can optionally tell it to set the 'start' value to be the current value (before the change).\n             * @param key The property to set the new value for.\n             * @param value The new value of the property.\n             * @param startToCurrent Should this change set the start value to be the current value? Default false.",
        "* Restarts the tween from the beginning.",
        "* Internal method that calculates the overall duration of the Tween.",
        "* Called by TweenManager.preUpdate as part of its loop to check pending and active tweens.\n             * Should not be called directly.",
        "* Internal method that advances to the next state of the Tween during playback.",
        "* Pauses the Tween immediately. Use `resume` to continue playback.",
        "* Starts a Tween playing.\n             * \n             * You only need to call this method if you have configured the tween to be paused on creation.\n             * @param resetFromTimeline Is this Tween being played as part of a Timeline?",
        "* Internal method that resets all of the Tween Data, including the progress and elapsed values.\n             * @param resetFromLoop Has this method been called as part of a loop?",
        "* Resumes the playback of a previously paused Tween.",
        "* Attempts to seek to a specific position in a Tween.\n             * @param toPosition A value between 0 and 1 which represents the progress point to seek to.",
        "* Sets an event based callback to be invoked during playback.\n             * @param type Type of the callback.\n             * @param callback Callback function.\n             * @param params An array of parameters for specified callbacks types.\n             * @param scope The context the callback will be invoked in.",
        "* Flags the Tween as being complete, whatever stage of progress it is at.\n             * \n             * If an onComplete callback has been defined it will automatically invoke it, unless a `delay`\n             * argument is provided, in which case the Tween will delay for that period of time before calling the callback.\n             * \n             * If you don't need a delay, or have an onComplete callback, then call `Tween.stop` instead.\n             * @param delay The time to wait before invoking the complete callback. If zero it will fire immediately. Default 0.",
        "* Stops the Tween immediately, whatever stage of progress it is at and flags it for removal by the TweenManager.\n             * @param resetTo A value between 0 and 1.",
        "* Internal method that advances the Tween based on the time values.\n             * @param timestamp The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\n             * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* Internal method used as part of the playback process that sets a tween to play in reverse.\n             * @param tween The Tween to update.\n             * @param tweenData The TweenData property to update.\n             * @param diff Any extra time that needs to be accounted for in the elapsed and progress values.",
        "* Internal method used as part of the playback process that sets a tween to play from the start.\n             * @param tween The Tween to update.\n             * @param tweenData The TweenData property to update.\n             * @param diff Any extra time that needs to be accounted for in the elapsed and progress values.",
        "* Internal method that advances the TweenData based on the time value given.\n             * @param tween The Tween to update.\n             * @param tweenData The TweenData property to update.\n             * @param delta Either a value in ms, or 1 if Tween.useFrames is true",
        "* The target to tween.",
        "* The property of the target being tweened.",
        "* The returned value sets what the property will be at the END of the Tween.",
        "* The returned value sets what the property will be at the START of the Tween.",
        "* The ease function this tween uses.",
        "* Duration of the tween in ms/frames, excludes time for yoyo or repeats.",
        "* The total calculated duration of this TweenData (based on duration, repeat, delay and yoyo)",
        "* Time in ms/frames before tween will start.",
        "* Cause the tween to return back to its start value after hold has expired.",
        "* Time in ms/frames the tween will pause before running the yoyo or starting a repeat.",
        "* Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.",
        "* Time in ms/frames before the repeat will start.",
        "* Automatically call toggleFlipX when the TweenData yoyos or repeats",
        "* Automatically call toggleFlipY when the TweenData yoyos or repeats",
        "* Between 0 and 1 showing completion of this TweenData.",
        "* Delta counter",
        "* How many repeats are left to run?",
        "* Ease value data.",
        "* Ease value data.",
        "* Ease value data.",
        "* Time duration 1.",
        "* Time duration 2.",
        "* LoadValue generation functions.",
        "* TWEEN_CONST.CREATED",
        "* Returns a TweenDataConfig object that describes the tween data for a unique property of a unique target. A single Tween consists of multiple TweenDatas, depending on how many properties are being changed by the Tween.\n         * \n         * This is an internal function used by the TweenBuilder and should not be accessed directly, instead, Tweens should be created using the GameObjectFactory or GameObjectCreator.\n         * @param target The target to tween.\n         * @param key The property of the target to tween.\n         * @param getEnd What the property will be at the END of the Tween.\n         * @param getStart What the property will be at the START of the Tween.\n         * @param ease The ease function this tween uses.\n         * @param delay Time in ms/frames before tween will start.\n         * @param duration Duration of the tween in ms/frames.\n         * @param yoyo Determines whether the tween should return back to its start value after hold has expired.\n         * @param hold Time in ms/frames the tween will pause before repeating or returning to its starting value if yoyo is set to true.\n         * @param repeat Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.\n         * @param repeatDelay Time in ms/frames before the repeat will start.\n         * @param flipX Should toggleFlipX be called when yoyo or repeat happens?\n         * @param flipY Should toggleFlipY be called when yoyo or repeat happens?",
        "* The Tween Manager is a default Scene Plugin which controls and updates Tweens and Timelines.",
        "* \n             * @param scene The Scene which owns this Tween Manager.",
        "* The Scene which owns this Tween Manager.",
        "* The Systems object of the Scene which owns this Tween Manager.",
        "* The time scale of the Tween Manager.\n             * \n             * This value scales the time delta between two frames, thus influencing the speed of time for all Tweens owned by this Tween Manager.",
        "* Create a Tween Timeline and return it, but do NOT add it to the active or pending Tween lists.\n             * @param config The configuration object for the Timeline and its Tweens.",
        "* Create a Tween Timeline and add it to the active Tween list/\n             * @param config The configuration object for the Timeline and its Tweens.",
        "* Create a Tween and return it, but do NOT add it to the active or pending Tween lists.\n             * @param config The configuration object for the Tween as per {@link Phaser.Tweens.Builders.TweenBuilder}.",
        "* Create a Tween and add it to the active Tween list.\n             * @param config The configuration object for the Tween as per the {@link Phaser.Tweens.Builders.TweenBuilder}.",
        "* Add an existing tween into the active Tween list.\n             * @param tween The Tween to add.",
        "* Create a Tween and add it to the active Tween list.\n             * @param config The configuration object for the Number Tween as per the {@link Phaser.Tweens.Builders.NumberTweenBuilder}.",
        "* Updates the Tween Manager's internal lists at the start of the frame.\n             * \n             * This method will return immediately if no changes have been indicated.",
        "* Updates all Tweens and Timelines of the Tween Manager.\n             * @param timestamp The current time in milliseconds.\n             * @param delta The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.",
        "* Checks if a Tween or Timeline is active and adds it to the Tween Manager at the start of the frame if it isn't.\n             * @param tween The Tween to check.",
        "* Passes all Tweens to the given callback.\n             * @param callback The function to call.\n             * @param scope The scope (`this` object) to call the function with.\n             * @param args The arguments to pass into the function. Its first argument will always be the Tween currently being iterated.",
        "* Returns an array of all active Tweens and Timelines in the Tween Manager.",
        "* Returns the scale of the time delta for all Tweens and Timelines owned by this Tween Manager.",
        "* Returns an array of all Tweens or Timelines in the Tween Manager which affect the given target or array of targets.\n             * @param target The target to look for. Provide an array to look for multiple targets.",
        "* Checks if the given object is being affected by a playing Tween.\n             * @param target target Phaser.Tweens.Tween object",
        "* Stops all Tweens in this Tween Manager. They will be removed at the start of the frame.",
        "* Stops all Tweens which affect the given target or array of targets. The Tweens will be removed from the Tween Manager at the start of the frame.\n             * @param target The target to look for. Provide an array to look for multiple targets.",
        "* Pauses all Tweens in this Tween Manager.",
        "* Resumes all Tweens in this Tween Manager.",
        "* Sets a new scale of the time delta for this Tween Manager.\n             * \n             * The time delta is the time elapsed between two consecutive frames and influences the speed of time for this Tween Manager and all Tweens it owns. Values higher than 1 increase the speed of time, while values smaller than 1 decrease it. A value of 0 freezes time and is effectively equivalent to pausing all Tweens.\n             * @param value The new scale of the time delta, where 1 is the normal speed.",
        "* The Scene that owns this plugin is shutting down.\n             * We need to kill and reset all internal properties as well as stop listening to Scene events.",
        "* The Scene that owns this plugin is being destroyed.\n             * We need to shutdown and then kill off all external references.",
        "* Adds the given item, or array of items, to the array.\n             * \n             * Each item must be unique within the array.\n             * \n             * The array is modified in-place and returned.\n             * \n             * You can optionally specify a limit to the maximum size of the array. If the quantity of items being\n             * added will take the array length over this limit, it will stop adding once the limit is reached.\n             * \n             * You can optionally specify a callback to be invoked for each item successfully added to the array.\n             * @param array The array to be added to.\n             * @param item The item, or array of items, to add to the array. Each item must be unique within the array.\n             * @param limit Optional limit which caps the size of the array.\n             * @param callback A callback to be invoked for each item successfully added to the array.\n             * @param context The context in which the callback is invoked.",
        "* Adds the given item, or array of items, to the array starting at the index specified.\n             * \n             * Each item must be unique within the array.\n             * \n             * Existing elements in the array are shifted up.\n             * \n             * The array is modified in-place and returned.\n             * \n             * You can optionally specify a limit to the maximum size of the array. If the quantity of items being\n             * added will take the array length over this limit, it will stop adding once the limit is reached.\n             * \n             * You can optionally specify a callback to be invoked for each item successfully added to the array.\n             * @param array The array to be added to.\n             * @param item The item, or array of items, to add to the array.\n             * @param index The index in the array where the item will be inserted. Default 0.\n             * @param limit Optional limit which caps the size of the array.\n             * @param callback A callback to be invoked for each item successfully added to the array.\n             * @param context The context in which the callback is invoked.",
        "* Moves the given element to the top of the array.\n             * The array is modified in-place.\n             * @param array The array.\n             * @param item The element to move.",
        "* Returns the total number of elements in the array which have a property matching the given value.\n             * @param array The array to search.\n             * @param property The property to test on each array element.\n             * @param value The value to test the property against. Must pass a strict (`===`) comparison check.\n             * @param startIndex An optional start index to search from.\n             * @param endIndex An optional end index to search to.",
        "* Passes each element in the array to the given callback.\n             * @param array The array to search.\n             * @param callback A callback to be invoked for each item in the array.\n             * @param context The context in which the callback is invoked.\n             * @param args Additional arguments that will be passed to the callback, after the current array item.",
        "* Passes each element in the array, between the start and end indexes, to the given callback.\n             * @param array The array to search.\n             * @param callback A callback to be invoked for each item in the array.\n             * @param context The context in which the callback is invoked.\n             * @param startIndex The start index to search from.\n             * @param endIndex The end index to search to.\n             * @param args Additional arguments that will be passed to the callback, after the child.",
        "* Searches a pre-sorted array for the closet value to the given number.\n             * \n             * If the `key` argument is given it will assume the array contains objects that all have the required `key` property name,\n             * and will check for the closest value of those to the given number.\n             * @param value The value to search for in the array.\n             * @param array The array to search, which must be sorted.\n             * @param key An optional property key. If specified the array elements property will be checked against value.",
        "* Returns all elements in the array.\n             * \n             * You can optionally specify a matching criteria using the `property` and `value` arguments.\n             * \n             * For example: `getAll('visible', true)` would return only elements that have their visible property set.\n             * \n             * Optionally you can specify a start and end index. For example if the array had 100 elements,\n             * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\n             * the first 50 elements.\n             * @param array The array to search.\n             * @param property The property to test on each array element.\n             * @param value The value to test the property against. Must pass a strict (`===`) comparison check.\n             * @param startIndex An optional start index to search from.\n             * @param endIndex An optional end index to search to.",
        "* Returns the first element in the array.\n             * \n             * You can optionally specify a matching criteria using the `property` and `value` arguments.\n             * \n             * For example: `getAll('visible', true)` would return the first element that had its `visible` property set.\n             * \n             * Optionally you can specify a start and end index. For example if the array had 100 elements,\n             * and you set `startIndex` to 0 and `endIndex` to 50, it would search only the first 50 elements.\n             * @param array The array to search.\n             * @param property The property to test on each array element.\n             * @param value The value to test the property against. Must pass a strict (`===`) comparison check.\n             * @param startIndex An optional start index to search from. Default 0.\n             * @param endIndex An optional end index to search up to (but not included) Default array.length.",
        "* Returns a Random element from the array.\n             * @param array The array to select the random entry from.\n             * @param startIndex An optional start index. Default 0.\n             * @param length An optional length, the total number of elements (from the startIndex) to choose from. Default array.length.",
        "* Checks if an array can be used as a matrix.\n                 * \n                 * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows) have the same length. There must be at least two rows:\n                 * \n                 * ```\n                 *    [\n                 *        [ 1, 1, 1, 1, 1, 1 ],\n                 *        [ 2, 0, 0, 0, 0, 4 ],\n                 *        [ 2, 0, 1, 2, 0, 4 ],\n                 *        [ 2, 0, 3, 4, 0, 4 ],\n                 *        [ 2, 0, 0, 0, 0, 4 ],\n                 *        [ 3, 3, 3, 3, 3, 3 ]\n                 *    ]\n                 * ```\n                 * @param matrix The array to check.",
        "* Generates a string (which you can pass to console.log) from the given Array Matrix.\n                 * @param matrix A 2-dimensional array.",
        "* Reverses the columns in the given Array Matrix.\n                 * @param matrix The array matrix to reverse the columns for.",
        "* Reverses the rows in the given Array Matrix.\n                 * @param matrix The array matrix to reverse the rows for.",
        "* Rotates the array matrix 180 degrees.\n                 * @param matrix The array to rotate.",
        "* Rotates the array matrix to the left (or 90 degrees)\n                 * @param matrix The array to rotate.",
        "* Rotates the array matrix based on the given rotation value.\n                 * \n                 * The value can be given in degrees: 90, -90, 270, -270 or 180,\n                 * or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\n                 * \n                 * Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\n                 * @param matrix The array to rotate.\n                 * @param direction The amount to rotate the matrix by. Default 90.",
        "* Rotates the array matrix to the left (or -90 degrees)\n                 * @param matrix The array to rotate.",
        "* Transposes the elements of the given matrix (array of arrays).\n                 * \n                 * The transpose of a matrix is a new matrix whose rows are the columns of the original.\n                 * @param array The array matrix to transpose.",
        "* Moves the given array element down one place in the array.\n             * The array is modified in-place.\n             * @param array The input array.\n             * @param item The element to move down the array.",
        "* Moves an element in an array to a new position within the same array.\n             * The array is modified in-place.\n             * @param array The array.\n             * @param item The element to move.\n             * @param index The new index that the element will be moved to.",
        "* Moves the given array element up one place in the array.\n             * The array is modified in-place.\n             * @param array The input array.\n             * @param item The element to move up the array.",
        "* Create an array representing the range of numbers (usually integers), between, and inclusive of,\n             * the given `start` and `end` arguments. For example:\n             * \n             * `var array = numberArray(2, 4); // array = [2, 3, 4]`\n             * `var array = numberArray(0, 9); // array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n             * \n             * This is equivalent to `numberArrayStep(start, end, 1)`.\n             * \n             * You can optionally provide a prefix and / or suffix string. If given the array will contain\n             * strings, not integers. For example:\n             * \n             * `var array = numberArray(1, 4, 'Level '); // array = [\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\"]`\n             * `var array = numberArray(5, 7, 'HD-', '.png'); // array = [\"HD-5.png\", \"HD-6.png\", \"HD-7.png\"]`\n             * @param start The minimum value the array starts with.\n             * @param end The maximum value the array contains.\n             * @param prefix Optional prefix to place before the number. If provided the array will contain strings, not integers.\n             * @param suffix Optional suffix to place after the number. If provided the array will contain strings, not integers.",
        "* Create an array of numbers (positive and/or negative) progressing from `start`\n             * up to but not including `end` by advancing by `step`.\n             * \n             * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\n             * \n             * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\n             * for forward compatibility make sure to pass in actual numbers.\n             * @param start The start of the range. Default 0.\n             * @param end The end of the range. Default null.\n             * @param step The value to increment or decrement by. Default 1.",
        "* A [Floyd-Rivest](https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm) quick selection algorithm.\n             * \n             * Rearranges the array items so that all items in the [left, k] range are smaller than all items in [k, right];\n             * The k-th element will have the (k - left + 1)th smallest value in [left, right].\n             * \n             * The array is modified in-place.\n             * \n             * Based on code by [Vladimir Agafonkin](https://www.npmjs.com/~mourner)\n             * @param arr The array to sort.\n             * @param k The k-th element index.\n             * @param left The index of the left part of the range. Default 0.\n             * @param right The index of the right part of the range.\n             * @param compare An optional comparison function. Is passed two elements and should return 0, 1 or -1.",
        "* Creates an array populated with a range of values, based on the given arguments and configuration object.\n             * \n             * Range ([a,b,c], [1,2,3]) =\n             * a1, a2, a3, b1, b2, b3, c1, c2, c3\n             * \n             * Range ([a,b], [1,2,3], qty = 3) =\n             * a1, a1, a1, a2, a2, a2, a3, a3, a3, b1, b1, b1, b2, b2, b2, b3, b3, b3\n             * \n             * Range ([a,b,c], [1,2,3], repeat x1) =\n             * a1, a2, a3, b1, b2, b3, c1, c2, c3, a1, a2, a3, b1, b2, b3, c1, c2, c3\n             * \n             * Range ([a,b], [1,2], repeat -1 = endless, max = 14) =\n             * Maybe if max is set then repeat goes to -1 automatically?\n             * a1, a2, b1, b2, a1, a2, b1, b2, a1, a2, b1, b2, a1, a2 (capped at 14 elements)\n             * \n             * Range ([a], [1,2,3,4,5], random = true) =\n             * a4, a1, a5, a2, a3\n             * \n             * Range ([a, b], [1,2,3], random = true) =\n             * b3, a2, a1, b1, a3, b2\n             * \n             * Range ([a, b, c], [1,2,3], randomB = true) =\n             * a3, a1, a2, b2, b3, b1, c1, c3, c2\n             * \n             * Range ([a], [1,2,3,4,5], yoyo = true) =\n             * a1, a2, a3, a4, a5, a5, a4, a3, a2, a1\n             * \n             * Range ([a, b], [1,2,3], yoyo = true) =\n             * a1, a2, a3, b1, b2, b3, b3, b2, b1, a3, a2, a1\n             * @param a The first array of range elements.\n             * @param b The second array of range elements.\n             * @param options A range configuration object. Can contain: repeat, random, randomB, yoyo, max, qty.",
        "* Removes the given item, or array of items, from the array.\n             * \n             * The array is modified in-place.\n             * \n             * You can optionally specify a callback to be invoked for each item successfully removed from the array.\n             * @param array The array to be modified.\n             * @param item The item, or array of items, to be removed from the array.\n             * @param callback A callback to be invoked for each item successfully removed from the array.\n             * @param context The context in which the callback is invoked.",
        "* Removes the item from the given position in the array.\n             * \n             * The array is modified in-place.\n             * \n             * You can optionally specify a callback to be invoked for the item if it is successfully removed from the array.\n             * @param array The array to be modified.\n             * @param index The array index to remove the item from. The index must be in bounds or it will throw an error.\n             * @param callback A callback to be invoked for the item removed from the array.\n             * @param context The context in which the callback is invoked.",
        "* Removes the item within the given range in the array.\n             * \n             * The array is modified in-place.\n             * \n             * You can optionally specify a callback to be invoked for the item/s successfully removed from the array.\n             * @param array The array to be modified.\n             * @param startIndex The start index to remove from.\n             * @param endIndex The end index to remove to.\n             * @param callback A callback to be invoked for the item removed from the array.\n             * @param context The context in which the callback is invoked.",
        "* Removes a random object from the given array and returns it.\n             * Will return null if there are no array items that fall within the specified range or if there is no item for the randomly chosen index.\n             * @param array The array to removed a random element from.\n             * @param start The array index to start the search from. Default 0.\n             * @param length Optional restriction on the number of elements to randomly select from. Default array.length.",
        "* Replaces an element of the array with the new element.\n             * The new element cannot already be a member of the array.\n             * The array is modified in-place.\n             * @param oldChild The element in the array that will be replaced.\n             * @param newChild The element to be inserted into the array at the position of `oldChild`.",
        "* Moves the element at the start of the array to the end, shifting all items in the process.\n             * The \"rotation\" happens to the left.\n             * @param array The array to shift to the left. This array is modified in place.\n             * @param total The number of times to shift the array. Default 1.",
        "* Moves the element at the end of the array to the start, shifting all items in the process.\n             * The \"rotation\" happens to the right.\n             * @param array The array to shift to the right. This array is modified in place.\n             * @param total The number of times to shift the array. Default 1.",
        "* Tests if the start and end indexes are a safe range for the given array.\n             * @param array The array to check.\n             * @param startIndex The start index.\n             * @param endIndex The end index.\n             * @param throwError Throw an error if the range is out of bounds. Default true.",
        "* Moves the given element to the bottom of the array.\n             * The array is modified in-place.\n             * @param array The array.\n             * @param item The element to move.",
        "* Scans the array for elements with the given property. If found, the property is set to the `value`.\n             * \n             * For example: `SetAll('visible', true)` would set all elements that have a `visible` property to `false`.\n             * \n             * Optionally you can specify a start and end index. For example if the array had 100 elements,\n             * and you set `startIndex` to 0 and `endIndex` to 50, it would update only the first 50 elements.\n             * @param array The array to search.\n             * @param property The property to test for on each array element.\n             * @param value The value to set the property to.\n             * @param startIndex An optional start index to search from.\n             * @param endIndex An optional end index to search to.",
        "* Shuffles the contents of the given array using the Fisher-Yates implementation.\n             * \n             * The original array is modified directly and returned.\n             * @param array The array to shuffle. This array is modified in place.",
        "* Removes a single item from an array and returns it without creating gc, like the native splice does.\n             * Based on code by Mike Reinstein.\n             * @param array The array to splice from.\n             * @param index The index of the item which should be spliced.",
        "* Sort the input array and simply copy it back if the result isn't in the original array, which happens on an odd number of passes.\n                 * @param arr The input array.\n                 * @param comp The comparison handler.",
        "* A stable array sort, because `Array#sort()` is not guaranteed stable.\n             * This is an implementation of merge sort, without recursion.\n             * @param arr The input array to be sorted.\n             * @param comp The comparison handler.",
        "* Swaps the position of two elements in the given array.\n             * The elements must exist in the same array.\n             * The array is modified in-place.\n             * @param array The input array.\n             * @param item1 The first element to swap.\n             * @param item2 The second element to swap.",
        "* A NOOP (No Operation) callback function.\n         * \n         * Used internally by Phaser when it's more expensive to determine if a callback exists\n         * than it is to just invoke an empty function.",
        "* Shallow Object Clone. Will not clone nested objects.\n             * @param obj the object from which to clone",
        "* This is a slightly modified version of http://api.jquery.com/jQuery.extend/",
        "* Retrieves a value from an object. Allows for more advanced selection options, including:\n             * \n             * Allowed types:\n             * \n             * Implicit\n             * {\n             *     x: 4\n             * }\n             * \n             * From function\n             * {\n             *     x: function ()\n             * }\n             * \n             * Randomly pick one element from the array\n             * {\n             *     x: [a, b, c, d, e, f]\n             * }\n             * \n             * Random integer between min and max:\n             * {\n             *     x: { randInt: [min, max] }\n             * }\n             * \n             * Random float between min and max:\n             * {\n             *     x: { randFloat: [min, max] }\n             * }\n             * @param source The object to retrieve the value from.\n             * @param key The name of the property to retrieve from the object. If a property is nested, the names of its preceding properties should be separated by a dot (`.`) - `banner.hideBanner` would return the value of the `hideBanner` property from the object stored in the `banner` property of the `source` object.\n             * @param defaultValue The value to return if the `key` isn't found in the `source` object.",
        "* Finds the key within the top level of the {@link source} object, or returns {@link defaultValue}\n             * @param source The object to search\n             * @param key The key for the property on source. Must exist at the top level of the source object (no periods)\n             * @param defaultValue The default value to use if the key does not exist.",
        "* Retrieves and clamps a numerical value from an object.\n             * @param source The object to retrieve the value from.\n             * @param key The name of the property to retrieve from the object. If a property is nested, the names of its preceding properties should be separated by a dot (`.`).\n             * @param min The minimum value which can be returned.\n             * @param max The maximum value which can be returned.\n             * @param defaultValue The value to return if the property doesn't exist. It's also constrained to the given bounds.",
        "* Retrieves a value from an object.\n             * @param source The object to retrieve the value from.\n             * @param key The name of the property to retrieve from the object. If a property is nested, the names of its preceding properties should be separated by a dot (`.`) - `banner.hideBanner` would return the value of the `hideBanner` property from the object stored in the `banner` property of the `source` object.\n             * @param defaultValue The value to return if the `key` isn't found in the `source` object.",
        "* Verifies that an object contains all requested keys\n             * @param source an object on which to check for key existence\n             * @param keys an array of keys to ensure the source object contains",
        "* Verifies that an object contains at least one of the requested keys\n             * @param source an object on which to check for key existence\n             * @param keys an array of keys to search the object for",
        "* Determine whether the source object has a property with the specified key.\n             * @param source The source object to be checked.\n             * @param key The property to check for within the object",
        "* This is a slightly modified version of jQuery.isPlainObject.\n             * A plain object is an object whose internal class property is [object Object].\n             * @param obj The object to inspect.",
        "* Creates a new Object using all values from obj1 and obj2.\n             * If a value exists in both obj1 and obj2, the value in obj1 is used.\n             * @param obj1 The first object.\n             * @param obj2 The second object.",
        "* Creates a new Object using all values from obj1.\n             * \n             * Then scans obj2. If a property is found in obj2 that *also* exists in obj1, the value from obj2 is used, otherwise the property is skipped.\n             * @param obj1 The first object to merge.\n             * @param obj2 The second object to merge. Keys from this object which also exist in `obj1` will be copied to `obj1`.",
        "* Takes a string and replaces instances of markers with values in the given array.\n             * The markers take the form of `%1`, `%2`, etc. I.e.:\n             * \n             * `Format(\"The %1 is worth %2 gold\", [ 'Sword', 500 ])`\n             * @param string The string containing the replacement markers.\n             * @param values An array containing values that will replace the markers. If no value exists an empty string is inserted instead.",
        "* Takes the given string and pads it out, to the length required, using the character\n             * specified. For example if you need a string to be 6 characters long, you can call:\n             * \n             * `pad('bob', 6, '-', 2)`\n             * \n             * This would return: `bob---` as it has padded it out to 6 characters, using the `-` on the right.\n             * \n             * You can also use it to pad numbers (they are always returned as strings):\n             * \n             * `pad(512, 6, '0', 1)`\n             * \n             * Would return: `000512` with the string padded to the left.\n             * \n             * If you don't specify a direction it'll pad to both sides:\n             * \n             * `pad('c64', 7, '*')`\n             * \n             * Would return: `**c64**`\n             * @param str The target string. `toString()` will be called on the string, which means you can also pass in common data types like numbers.\n             * @param len The number of characters to be added. Default 0.\n             * @param pad The string to pad it out with (defaults to a space). Default \" \".\n             * @param dir The direction dir = 1 (left), 2 (right), 3 (both). Default 3.",
        "* Takes the given string and reverses it, returning the reversed string.\n             * For example if given the string `Atari 520ST` it would return `TS025 iratA`.\n             * @param string The string to be reversed.",
        "* Capitalizes the first letter of a string if there is one.\n             * @param str The string to capitalize.",
        "* Creates and returns an RFC4122 version 4 compliant UUID.\n             * \n             * The string is in the form: `xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx` where each `x` is replaced with a random\n             * hexadecimal digit from 0 to f, and `y` is replaced with a random hexadecimal digit from 8 to b.",
        "* The Facebook Instant Games Plugin for Phaser 3 provides a seamless bridge between Phaser\n     * and the Facebook Instant Games API version 6.2.\n     * \n     * You can access this plugin via the `facebook` property in a Scene, i.e:\n     * \n     * ```javascript\n     * this.facebook.getPlatform();\n     * ```\n     * \n     * If this is unavailable please check to make sure you're using a build of Phaser that has\n     * this plugin within it. You can quickly check this by looking at the dev tools console\n     * header - the Phaser version number will have `-FB` after it if this plugin is loaded.\n     * \n     * If you are building your own version of Phaser then use this Webpack DefinePlugin flag:\n     * \n     * `\"typeof PLUGIN_FBINSTANT\": JSON.stringify(true)`\n     * \n     * You will find that every Instant Games API method has a mapping in this plugin.\n     * For a full list please consult either the plugin documentation, or the 6.2 SDK documentation\n     * at https://developers.facebook.com/docs/games/instant-games/sdk/fbinstant6.2\n     * \n     * Internally this plugin uses its own Data Manager to handle seamless user data updates and provides\n     * handy functions for advertisement displaying, opening share dialogs, logging, leaderboards, purchase API requests,\n     * loader integration and more.\n     * \n     * To get started with Facebook Instant Games you will need to register on Facebook and create a new Instant\n     * Game app that has its own unique app ID. Facebook have also provided a dashboard interface for setting up\n     * various features for your game, including leaderboards, ad requests and the payments API. There are lots\n     * of guides on the Facebook Developers portal to assist with setting these\n     * various systems up: https://developers.facebook.com/docs/games/instant-games/guides\n     * \n     * For more details follow the Quick Start guide here: https://developers.facebook.com/docs/games/instant-games",
        "* \n         * @param game A reference to the Phaser.Game instance.",
        "* A reference to the Phaser.Game instance.",
        "* A Data Manager instance.\n         * It allows you to store, query and retrieve any key/value data you may need to store.\n         * It's also used internally by the plugin to store FBIG API data.",
        "* Has the Facebook Instant Games API loaded yet?\n         * This is set automatically during the boot process.",
        "* Is the Data Manager currently locked?",
        "* A list of the Facebook Instant Games APIs that are available,\n         * based on the given platform, context and user privacy settings.\n         * This value is populated automatically during boot.",
        "* Holds the entry point that the game was launched from.\n         * This value is populated automatically during boot.",
        "* An object that contains any data associated with the entry point that the game was launched from.\n         * The contents of the object are developer-defined, and can occur from entry points on different platforms.\n         * This will return null for older mobile clients, as well as when there is no data associated with the particular entry point.\n         * This value is populated automatically during boot.",
        "* A unique identifier for the current game context. This represents a specific context\n         * that the game is being played in (for example, a particular messenger conversation or facebook post).\n         * The identifier will be null if game is being played in a solo context.\n         * This value is populated automatically during boot.",
        "* The current context in which your game is running. This can be either `null` or\n         * one of:\n         * \n         * `POST` - The game is running inside of a Facebook post.\n         * `THREAD` - The game is running inside a Facebook Messenger thread.\n         * `GROUP` - The game is running inside a Facebook Group.\n         * `SOLO` - This is the default context, the player is the only participant.\n         * \n         * This value is populated automatically during boot.",
        "* The current locale.\n         * See https://origincache.facebook.com/developers/resources/?id=FacebookLocales.xml for a complete list of supported locale values.\n         * Use this to determine what languages the current game should be localized with.\n         * This value is populated automatically during boot.",
        "* The platform on which the game is currently running, i.e. `IOS`.\n         * This value is populated automatically during boot.",
        "* The string representation of the Facebook Instant Games SDK version being used.\n         * This value is populated automatically during boot.",
        "* Holds the id of the player. This is a string based ID, the same as `FBInstant.player.getID()`.\n         * This value is populated automatically during boot if the API is supported.",
        "* The player's localized display name.\n         * This value is populated automatically during boot if the API is supported.",
        "* A url to the player's public profile photo. The photo will always be a square, and with dimensions\n         * of at least 200x200. When rendering it in the game, the exact dimensions should never be assumed to be constant.\n         * It's recommended to always scale the image to a desired size before rendering.\n         * This value is populated automatically during boot if the API is supported.",
        "* Whether a player can subscribe to the game bot or not.",
        "* Does the current platform and context allow for use of the payments API?\n         * Currently this is only available on Facebook.com and Android 6+.",
        "* The set of products that are registered to the game.",
        "* Contains all of the player's unconsumed purchases.\n         * The game must fetch the current player's purchases as soon as the client indicates that it is ready to perform payments-related operations,\n         * i.e. at game start. The game can then process and consume any purchases that are waiting to be consumed.",
        "* Contains all of the leaderboard data, as populated by the `getLeaderboard()` method.",
        "* Contains AdInstance objects, as created by the `preloadAds()` method.",
        "* Call this method from your `Scene.preload` in order to sync the load progress\n         * of the Phaser Loader with the Facebook Instant Games loader display, i.e.:\n         * \n         * ```javascript\n         * this.facebook.showLoadProgress(this);\n         * this.facebook.once('startgame', this.startGame, this);\n         * ```\n         * @param scene The Scene for which you want to show loader progress for.",
        "* This method is called automatically when the game has finished loading,\n         * if you used the `showLoadProgress` method. If your game doesn't need to\n         * load any assets, or you're managing the load yourself, then call this\n         * method directly to start the API running.\n         * \n         * When the API has finished starting this plugin will emit a `startgame` event\n         * which you should listen for.",
        "* Checks to see if a given Facebook Instant Games API is available or not.\n         * @param api The API to check for, i.e. `player.getID`.",
        "* Returns the unique identifier for the current game context. This represents a specific context\n         * that the game is being played in (for example, a particular messenger conversation or facebook post).\n         * The identifier will be null if game is being played in a solo context.\n         * \n         * It is only populated if `contextGetID` is in the list of supported APIs.",
        "* Returns the current context in which your game is running. This can be either `null` or one of:\n         * \n         * `POST` - The game is running inside of a Facebook post.\n         * `THREAD` - The game is running inside a Facebook Messenger thread.\n         * `GROUP` - The game is running inside a Facebook Group.\n         * `SOLO` - This is the default context, the player is the only participant.\n         * \n         * It is only populated if `contextGetType` is in the list of supported APIs.",
        "* Returns the current locale.\n         * See https://origincache.facebook.com/developers/resources/?id=FacebookLocales.xml for a complete list of supported locale values.\n         * Use this to determine what languages the current game should be localized with.\n         * It is only populated if `getLocale` is in the list of supported APIs.",
        "* Returns the platform on which the game is currently running, i.e. `IOS`.\n         * It is only populated if `getPlatform` is in the list of supported APIs.",
        "* Returns the string representation of the Facebook Instant Games SDK version being used.\n         * It is only populated if `getSDKVersion` is in the list of supported APIs.",
        "* Returns the id of the player. This is a string based ID, the same as `FBInstant.player.getID()`.\n         * It is only populated if `playerGetID` is in the list of supported APIs.",
        "* Returns the player's localized display name.\n         * It is only populated if `playerGetName` is in the list of supported APIs.",
        "* Returns the url to the player's public profile photo. The photo will always be a square, and with dimensions\n         * of at least 200x200. When rendering it in the game, the exact dimensions should never be assumed to be constant.\n         * It's recommended to always scale the image to a desired size before rendering.\n         * It is only populated if `playerGetPhoto` is in the list of supported APIs.",
        "* Load the player's photo and store it in the Texture Manager, ready for use in-game.\n         * \n         * This method works by using a Scene Loader instance and then asking the Loader to\n         * retrieve the image.\n         * \n         * When complete the plugin will emit a `photocomplete` event, along with the key of the photo.\n         * \n         * ```javascript\n         * this.facebook.loadPlayerPhoto(this, 'player').once('photocomplete', function (key) {\n         *   this.add.image(x, y, 'player);\n         * }, this);\n         * ```\n         * @param scene The Scene that will be responsible for loading this photo.\n         * @param key The key to use when storing the photo in the Texture Manager.",
        "* Checks if the current player can subscribe to the game bot.\n         * \n         * It makes an async call to the API, so the result isn't available immediately.\n         * \n         * If they can subscribe, the `playerCanSubscribeBot` property is set to `true`\n         * and this plugin will emit the `cansubscribebot` event.\n         * \n         * If they cannot, i.e. it's not in the list of supported APIs, or the request\n         * was rejected, it will emit a `cansubscribebotfail` event instead.",
        "* Subscribes the current player to the game bot.\n         * \n         * It makes an async call to the API, so the result isn't available immediately.\n         * \n         * If they are successfully subscribed this plugin will emit the `subscribebot` event.\n         * \n         * If they cannot, i.e. it's not in the list of supported APIs, or the request\n         * was rejected, it will emit a `subscribebotfail` event instead.",
        "* Gets the associated data from the player based on the given key, or array of keys.\n         * \n         * The data is requested in an async call, so the result isn't available immediately.\n         * \n         * When the call completes the data is set into this plugins Data Manager and the\n         * `getdata` event will be emitted.\n         * @param keys The key/s of the data to retrieve.",
        "* Set data to be saved to the designated cloud storage of the current player. The game can store up to 1MB of data for each unique player.\n         * \n         * The data save is requested in an async call, so the result isn't available immediately.\n         * \n         * Data managed via this plugins Data Manager instance is automatically synced with Facebook. However, you can call this\n         * method directly if you need to replace the data object directly.\n         * \n         * When the APIs `setDataAsync` call resolves it will emit the `savedata` event from this plugin. If the call fails for some\n         * reason it will emit `savedatafail` instead.\n         * \n         * The call resolving does not necessarily mean that the input has already been persisted. Rather, it means that the data was valid and\n         * has been scheduled to be saved. It also guarantees that all values that were set are now available in `getData`.\n         * @param data An object containing a set of key-value pairs that should be persisted to cloud storage.\n         * The object must contain only serializable values - any non-serializable values will cause the entire modification to be rejected.",
        "* Immediately flushes any changes to the player data to the designated cloud storage.\n         * This function is expensive, and should primarily be used for critical changes where persistence needs to be immediate\n         * and known by the game. Non-critical changes should rely on the platform to persist them in the background.\n         * NOTE: Calls to player.setDataAsync will be rejected while this function's result is pending.\n         * \n         * Data managed via this plugins Data Manager instance is automatically synced with Facebook. However, you can call this\n         * method directly if you need to flush the data directly.\n         * \n         * When the APIs `flushDataAsync` call resolves it will emit the `flushdata` event from this plugin. If the call fails for some\n         * reason it will emit `flushdatafail` instead.",
        "* Retrieve stats from the designated cloud storage of the current player.\n         * \n         * The data is requested in an async call, so the result isn't available immediately.\n         * \n         * When the call completes the `getstats` event will be emitted along with the data object returned.\n         * \n         * If the call fails, i.e. it's not in the list of supported APIs, or the request was rejected,\n         * it will emit a `getstatsfail` event instead.\n         * @param keys An optional array of unique keys to retrieve stats for. If the function is called without it, it will fetch all stats.",
        "* Save the stats of the current player to the designated cloud storage.\n         * \n         * Stats in the Facebook Instant Games API are purely numerical values paired with a string-based key. Only numbers can be saved as stats,\n         * all other data types will be ignored.\n         * \n         * The data is requested in an async call, so the result isn't available immediately.\n         * \n         * When the call completes the `savestats` event will be emitted along with the data object returned.\n         * \n         * If the call fails, i.e. it's not in the list of supported APIs, or the request was rejected,\n         * it will emit a `savestatsfail` event instead.\n         * @param data An object containing a set of key-value pairs that should be persisted to cloud storage as stats. Note that only numerical values are stored.",
        "* Increment the stats of the current player and save them to the designated cloud storage.\n         * \n         * Stats in the Facebook Instant Games API are purely numerical values paired with a string-based key. Only numbers can be saved as stats,\n         * all other data types will be ignored.\n         * \n         * The data object provided for this call should contain offsets for how much to modify the stats by:\n         * \n         * ```javascript\n         * this.facebook.incStats({\n         *     level: 1,\n         *     zombiesSlain: 17,\n         *     rank: -1\n         * });\n         * ```\n         * \n         * The data is requested in an async call, so the result isn't available immediately.\n         * \n         * When the call completes the `incstats` event will be emitted along with the data object returned.\n         * \n         * If the call fails, i.e. it's not in the list of supported APIs, or the request was rejected,\n         * it will emit a `incstatsfail` event instead.\n         * @param data An object containing a set of key-value pairs indicating how much to increment each stat in cloud storage. Note that only numerical values are processed.",
        "* Sets the data associated with the individual gameplay session for the current context.\n         * \n         * This function should be called whenever the game would like to update the current session data.\n         * \n         * This session data may be used to populate a variety of payloads, such as game play webhooks.\n         * @param data An arbitrary data object, which must be less than or equal to 1000 characters when stringified.",
        "* This invokes a dialog to let the user share specified content, either as a message in Messenger or as a post on the user's timeline.\n         * \n         * A blob of data can be attached to the share which every game session launched from the share will be able to access via the `this.entryPointData` property.\n         * \n         * This data must be less than or equal to 1000 characters when stringified.\n         * \n         * When this method is called you should consider your game paused. Listen out for the `resume` event from this plugin to know when the dialog has been closed.\n         * \n         * The user may choose to cancel the share action and close the dialog. The resulting `resume` event will be dispatched regardless if the user actually shared the content or not.\n         * @param text A text message to be shared.\n         * @param key The key of the texture to use as the share image.\n         * @param frame The frame of the texture to use as the share image. Set to `null` if you don't require a frame, but do need to set session data.\n         * @param sessionData A blob of data to attach to the share.",
        "* This invokes a dialog to let the user invite a friend to play this game, either as a message in Messenger or as a post on the user's timeline.\n         * \n         * A blob of data can be attached to the share which every game session launched from the share will be able to access via the `this.entryPointData` property.\n         * \n         * This data must be less than or equal to 1000 characters when stringified.\n         * \n         * When this method is called you should consider your game paused. Listen out for the `resume` event from this plugin to know when the dialog has been closed.\n         * \n         * The user may choose to cancel the share action and close the dialog. The resulting `resume` event will be dispatched regardless if the user actually shared the content or not.\n         * @param text A text message to be shared.\n         * @param key The key of the texture to use as the share image.\n         * @param frame The frame of the texture to use as the share image. Set to `null` if you don't require a frame, but do need to set session data.\n         * @param sessionData A blob of data to attach to the share.",
        "* This invokes a dialog to let the user share specified content, either as a message in Messenger or as a post on the user's timeline.\n         * \n         * A blob of data can be attached to the share which every game session launched from the share will be able to access via the `this.entryPointData` property.\n         * \n         * This data must be less than or equal to 1000 characters when stringified.\n         * \n         * When this method is called you should consider your game paused. Listen out for the `resume` event from this plugin to know when the dialog has been closed.\n         * \n         * The user may choose to cancel the share action and close the dialog. The resulting `resume` event will be dispatched regardless if the user actually shared the content or not.\n         * @param text A text message to be shared.\n         * @param key The key of the texture to use as the share image.\n         * @param frame The frame of the texture to use as the share image. Set to `null` if you don't require a frame, but do need to set session data.\n         * @param sessionData A blob of data to attach to the share.",
        "* This invokes a dialog to let the user share specified content, either as a message in Messenger or as a post on the user's timeline.\n         * \n         * A blob of data can be attached to the share which every game session launched from the share will be able to access via the `this.entryPointData` property.\n         * \n         * This data must be less than or equal to 1000 characters when stringified.\n         * \n         * When this method is called you should consider your game paused. Listen out for the `resume` event from this plugin to know when the dialog has been closed.\n         * \n         * The user may choose to cancel the share action and close the dialog. The resulting `resume` event will be dispatched regardless if the user actually shared the content or not.\n         * @param text A text message to be shared.\n         * @param key The key of the texture to use as the share image.\n         * @param frame The frame of the texture to use as the share image. Set to `null` if you don't require a frame, but do need to set session data.\n         * @param sessionData A blob of data to attach to the share.",
        "* This function determines whether the number of participants in the current game context is between a given minimum and maximum, inclusive.\n         * If one of the bounds is null only the other bound will be checked against.\n         * It will always return the original result for the first call made in a context in a given game play session.\n         * Subsequent calls, regardless of arguments, will return the answer to the original query until a context change occurs and the query result is reset.\n         * @param min The minimum bound of the context size query.\n         * @param max The maximum bound of the context size query.",
        "* Request a switch into a specific context. If the player does not have permission to enter that context,\n         * or if the player does not provide permission for the game to enter that context, this will emit a `switchfail` event.\n         * \n         * Otherwise, the plugin will emit the `switch` event when the game has switched into the specified context.\n         * @param contextID The ID of the desired context.",
        "* Opens a context selection dialog for the player. If the player selects an available context,\n         * the client will attempt to switch into that context, and emit the `choose` event if successful.\n         * Otherwise, if the player exits the menu or the client fails to switch into the new context, the `choosefail` event will be emitted.\n         * @param contextID The ID of the desired context.",
        "* Attempts to create or switch into a context between a specified player and the current player.\n         * This plugin will emit the `create` event once the context switch is completed.\n         * If the API call fails, such as if the player listed is not a Connected Player of the current player or if the\n         * player does not provide permission to enter the new context, then the plugin will emit a 'createfail' event.\n         * @param playerID ID of the player.",
        "* Fetches an array of ConnectedPlayer objects containing information about active players\n         * (people who played the game in the last 90 days) that are connected to the current player.\n         * \n         * It makes an async call to the API, so the result isn't available immediately.\n         * \n         * If they are successfully subscribed this plugin will emit the `players` event along\n         * with the player data.\n         * \n         * If they cannot, i.e. it's not in the list of supported APIs, or the request\n         * was rejected, it will emit a `playersfail` event instead.",
        "* Fetches the game's product catalog.\n         * \n         * It makes an async call to the API, so the result isn't available immediately.\n         * \n         * If they are successfully subscribed this plugin will emit the `getcatalog` event along\n         * with the catalog data.\n         * \n         * If they cannot, i.e. it's not in the list of supported APIs, or the request\n         * was rejected, it will emit a `getcatalogfail` event instead.",
        "* Begins the purchase flow for a specific product.\n         * \n         * It makes an async call to the API, so the result isn't available immediately.\n         * \n         * If they are successfully subscribed this plugin will emit the `purchase` event along\n         * with the purchase data.\n         * \n         * If they cannot, i.e. it's not in the list of supported APIs, or the request\n         * was rejected, it will emit a `purchasefail` event instead.\n         * @param productID The identifier of the product to purchase.\n         * @param developerPayload An optional developer-specified payload, to be included in the returned purchase's signed request.",
        "* Fetches all of the player's unconsumed purchases. The game must fetch the current player's purchases\n         * as soon as the client indicates that it is ready to perform payments-related operations,\n         * i.e. at game start. The game can then process and consume any purchases that are waiting to be consumed.\n         * \n         * It makes an async call to the API, so the result isn't available immediately.\n         * \n         * If they are successfully subscribed this plugin will emit the `getpurchases` event along\n         * with the purchase data.\n         * \n         * If they cannot, i.e. it's not in the list of supported APIs, or the request\n         * was rejected, it will emit a `getpurchasesfail` event instead.",
        "* Consumes a specific purchase belonging to the current player. Before provisioning a product's effects to the player,\n         * the game should request the consumption of the purchased product. Once the purchase is successfully consumed,\n         * the game should immediately provide the player with the effects of their purchase.\n         * \n         * It makes an async call to the API, so the result isn't available immediately.\n         * \n         * If they are successfully subscribed this plugin will emit the `consumepurchase` event along\n         * with the purchase data.\n         * \n         * If they cannot, i.e. it's not in the list of supported APIs, or the request\n         * was rejected, it will emit a `consumepurchasefail` event instead.\n         * @param purchaseToken The purchase token of the purchase that should be consumed.",
        "* Informs Facebook of a custom update that occurred in the game.\n         * This will temporarily yield control to Facebook and Facebook will decide what to do based on what the update is.\n         * Once Facebook returns control to the game the plugin will emit an `update` or `upatefail` event.\n         * \n         * It makes an async call to the API, so the result isn't available immediately.\n         * \n         * The `text` parameter is an update payload with the following structure:\n         * \n         * ```\n         * text: {\n         *     default: 'X just invaded Y\\'s village!',\n         *     localizations: {\n         *         ar_AR: 'X \\u0641\\u0642\\u0637 \\u063A\\u0632\\u062A ' +\n         *         '\\u0642\\u0631\\u064A\\u0629 Y!',\n         *         en_US: 'X just invaded Y\\'s village!',\n         *         es_LA: '\\u00A1X acaba de invadir el pueblo de Y!',\n         *     }\n         * }\n         * ```\n         * @param cta The call to action text.\n         * @param text The text object.\n         * @param key The key of the texture to use as the share image.\n         * @param frame The frame of the texture to use as the share image. Set to `null` if you don't require a frame, but do need to set session data.\n         * @param template The update template key.\n         * @param updateData The update data object payload.",
        "* Informs Facebook of a leaderboard update that occurred in the game.\n         * This will temporarily yield control to Facebook and Facebook will decide what to do based on what the update is.\n         * Once Facebook returns control to the game the plugin will emit an `update` or `upatefail` event.\n         * \n         * It makes an async call to the API, so the result isn't available immediately.\n         * \n         * The `text` parameter is an update payload with the following structure:\n         * \n         * ```\n         * text: {\n         *     default: 'X just invaded Y\\'s village!',\n         *     localizations: {\n         *         ar_AR: 'X \\u0641\\u0642\\u0637 \\u063A\\u0632\\u062A ' +\n         *         '\\u0642\\u0631\\u064A\\u0629 Y!',\n         *         en_US: 'X just invaded Y\\'s village!',\n         *         es_LA: '\\u00A1X acaba de invadir el pueblo de Y!',\n         *     }\n         * }\n         * ```\n         * @param cta The call to action text.\n         * @param text The text object.\n         * @param key The key of the texture to use as the share image.\n         * @param frame The frame of the texture to use as the share image. Set to `null` if you don't require a frame, but do need to set session data.\n         * @param template The update template key.\n         * @param updateData The update data object payload.",
        "* Request that the client switch to a different Instant Game.\n         * \n         * It makes an async call to the API, so the result isn't available immediately.\n         * \n         * If the game switches successfully this plugin will emit the `switchgame` event and the client will load the new game.\n         * \n         * If they cannot, i.e. it's not in the list of supported APIs, or the request\n         * was rejected, it will emit a `switchgamefail` event instead.\n         * @param appID The Application ID of the Instant Game to switch to. The application must be an Instant Game, and must belong to the same business as the current game.\n         * @param data An optional data payload. This will be set as the entrypoint data for the game being switched to. Must be less than or equal to 1000 characters when stringified.",
        "* Prompts the user to create a shortcut to the game if they are eligible to.\n         * Can only be called once per session.\n         * \n         * It makes an async call to the API, so the result isn't available immediately.\n         * \n         * If the user choose to create a shortcut this plugin will emit the `shortcutcreated` event.\n         * \n         * If they cannot, i.e. it's not in the list of supported APIs, or the request\n         * was rejected, it will emit a `shortcutcreatedfail` event instead.",
        "* Quits the game.",
        "* Log an app event with FB Analytics.\n         * \n         * See https://developers.facebook.com/docs/javascript/reference/v2.8#app_events for more details about FB Analytics.\n         * @param name Name of the event. Must be 2 to 40 characters, and can only contain '_', '-', ' ', and alphanumeric characters.\n         * @param value An optional numeric value that FB Analytics can calculate a sum with.\n         * @param params An optional object that can contain up to 25 key-value pairs to be logged with the event. Keys must be 2 to 40 characters, and can only contain '_', '-', ' ', and alphanumeric characters. Values must be less than 100 characters in length.",
        "* Attempt to create an instance of an interstitial ad.\n         * \n         * If the instance is created successfully then the ad is preloaded ready for display in-game via the method `showAd()`.\n         * \n         * If the ad loads it will emit the `adloaded` event, passing the AdInstance as the only parameter.\n         * \n         * If the ad cannot be displayed because there was no inventory to fill it, it will emit the `adsnofill` event.\n         * @param placementID The ad placement ID, or an array of IDs, as created in your Audience Network settings within Facebook.",
        "* Attempt to create an instance of an rewarded video ad.\n         * \n         * If the instance is created successfully then the ad is preloaded ready for display in-game via the method `showVideo()`.\n         * \n         * If the ad loads it will emit the `adloaded` event, passing the AdInstance as the only parameter.\n         * \n         * If the ad cannot be displayed because there was no inventory to fill it, it will emit the `adsnofill` event.\n         * @param placementID The ad placement ID, or an array of IDs, as created in your Audience Network settings within Facebook.",
        "* Displays a previously loaded interstitial ad.\n         * \n         * If the ad is successfully displayed this plugin will emit the `adfinished` event, with the AdInstance object as its parameter.\n         * \n         * If the ad cannot be displayed, it will emit the `adsnotloaded` event.\n         * @param placementID The ad placement ID to display.",
        "* Displays a previously loaded interstitial video ad.\n         * \n         * If the ad is successfully displayed this plugin will emit the `adfinished` event, with the AdInstance object as its parameter.\n         * \n         * If the ad cannot be displayed, it will emit the `adsnotloaded` event.\n         * @param placementID The ad placement ID to display.",
        "* Attempts to match the current player with other users looking for people to play with.\n         * If successful, a new Messenger group thread will be created containing the matched players and the player will\n         * be context switched to that thread. This plugin will also dispatch the `matchplayer` event, containing the new context ID and Type.\n         * \n         * The default minimum and maximum number of players in one matched thread are 2 and 20 respectively,\n         * depending on how many players are trying to get matched around the same time.\n         * \n         * The values can be changed in `fbapp-config.json`. See the Bundle Config documentation for documentation about `fbapp-config.json`.\n         * @param matchTag Optional extra information about the player used to group them with similar players. Players will only be grouped with other players with exactly the same tag. The tag must only include letters, numbers, and underscores and be 100 characters or less in length.\n         * @param switchImmediately Optional extra parameter that specifies whether the player should be immediately switched to the new context when a match is found. By default this will be false which will mean the player needs explicitly press play after being matched to switch to the new context. Default false.",
        "* Fetch a specific leaderboard belonging to this Instant Game.\n         * \n         * The data is requested in an async call, so the result isn't available immediately.\n         * \n         * When the call completes the `getleaderboard` event will be emitted along with a Leaderboard object instance.\n         * @param name The name of the leaderboard. Each leaderboard for an Instant Game must have its own distinct name.",
        "* Quits the Facebook API and then destroys this plugin.",
        "* The left edge.",
        "* The upper edge.",
        "* The right edge.",
        "* The lower edge.",
        "* True if the Body is not colliding.",
        "* True if the Body is colliding on its upper edge.",
        "* True if the Body is colliding on its lower edge.",
        "* True if the Body is colliding on its left edge.",
        "* True if the Body is colliding on its right edge.",
        "* Sets {@link Phaser.Physics.Arcade.Body#collideWorldBounds}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#acceleration acceleration.x}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#acceleration acceleration.y}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#allowDrag}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#allowGravity}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#allowRotation}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#bounce bounce.x}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#bounce bounce.y}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#drag drag.x}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#drag drag.y}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#enable enable}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#gravity gravity.x}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#gravity gravity.y}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#friction friction.x}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#friction friction.y}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#velocity velocity.x}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#velocity velocity.y}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#angularVelocity}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#angularAcceleration}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#angularDrag}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#mass}.",
        "* Sets {@link Phaser.Physics.Arcade.Body#immovable}.",
        "* As {@link Phaser.Physics.Arcade.Body#setCollideWorldBounds}.",
        "* As {@link Phaser.Physics.Arcade.Body#setAccelerationX}.",
        "* As {@link Phaser.Physics.Arcade.Body#setAccelerationY}.",
        "* As {@link Phaser.Physics.Arcade.Body#setAllowDrag}.",
        "* As {@link Phaser.Physics.Arcade.Body#setAllowGravity}.",
        "* As {@link Phaser.Physics.Arcade.Body#setAllowRotation}.",
        "* As {@link Phaser.Physics.Arcade.Body#setBounceX}.",
        "* As {@link Phaser.Physics.Arcade.Body#setBounceY}.",
        "* As {@link Phaser.Physics.Arcade.Body#setDragX}.",
        "* As {@link Phaser.Physics.Arcade.Body#setDragY}.",
        "* As {@link Phaser.Physics.Arcade.Body#setEnable}.",
        "* As {@link Phaser.Physics.Arcade.Body#setGravityX}.",
        "* As {@link Phaser.Physics.Arcade.Body#setGravityY}.",
        "* As {@link Phaser.Physics.Arcade.Body#setFrictionX}.",
        "* As {@link Phaser.Physics.Arcade.Body#setFrictionY}.",
        "* As {@link Phaser.Physics.Arcade.Body#setVelocityX}.",
        "* As {@link Phaser.Physics.Arcade.Body#setVelocityY}.",
        "* As {@link Phaser.Physics.Arcade.Body#setAngularVelocity}.",
        "* As {@link Phaser.Physics.Arcade.Body#setAngularAcceleration}.",
        "* As {@link Phaser.Physics.Arcade.Body#setAngularDrag}.",
        "* As {@link Phaser.Physics.Arcade.Body#setMass}.",
        "* As {@link Phaser.Physics.Arcade.Body#setImmovable}.",
        "* Sets {@link Phaser.Physics.Arcade.World#fps}.",
        "* Sets {@link Phaser.Physics.Arcade.World#timeScale}.",
        "* Sets {@link Phaser.Physics.Arcade.World#gravity}.",
        "* The horizontal world gravity value.",
        "* The vertical world gravity value.",
        "* Sets {@link Phaser.Physics.Arcade.World#bounds bounds.x}.",
        "* Sets {@link Phaser.Physics.Arcade.World#bounds bounds.y}.",
        "* Sets {@link Phaser.Physics.Arcade.World#bounds bounds.width}.",
        "* Sets {@link Phaser.Physics.Arcade.World#bounds bounds.height}.",
        "* Sets {@link Phaser.Physics.Arcade.World#checkCollision}.",
        "* Should bodies collide with the top of the world bounds?",
        "* Should bodies collide with the bottom of the world bounds?",
        "* Should bodies collide with the left of the world bounds?",
        "* Should bodies collide with the right of the world bounds?",
        "* Sets {@link Phaser.Physics.Arcade.World#OVERLAP_BIAS}.",
        "* Sets {@link Phaser.Physics.Arcade.World#TILE_BIAS}.",
        "* Sets {@link Phaser.Physics.Arcade.World#forceX}.",
        "* Sets {@link Phaser.Physics.Arcade.World#isPaused}.",
        "* Sets {@link Phaser.Physics.Arcade.World#debug}.",
        "* Sets {@link Phaser.Physics.Arcade.World#defaults debugShowBody}.",
        "* Sets {@link Phaser.Physics.Arcade.World#defaults debugShowStaticBody}.",
        "* Sets {@link Phaser.Physics.Arcade.World#defaults debugShowStaticBody}.",
        "* Sets {@link Phaser.Physics.Arcade.World#defaults debugBodyColor}.",
        "* Sets {@link Phaser.Physics.Arcade.World#defaults debugStaticBodyColor}.",
        "* Sets {@link Phaser.Physics.Arcade.World#defaults debugVelocityColor}.",
        "* Sets {@link Phaser.Physics.Arcade.World#maxEntries}.",
        "* Sets {@link Phaser.Physics.Arcade.World#useTree}.",
        "* Will bodies collide with the top side of the world bounds?",
        "* Will bodies collide with the bottom side of the world bounds?",
        "* Will bodies collide with the left side of the world bounds?",
        "* Will bodies collide with the right side of the world bounds?",
        "* Set to `true` to render dynamic body outlines to the debug display.",
        "* Set to `true` to render static body outlines to the debug display.",
        "* Set to `true` to render body velocity markers to the debug display.",
        "* The color of dynamic body outlines when rendered to the debug display.",
        "* The color of static body outlines when rendered to the debug display.",
        "* The color of the velocity markers when rendered to the debug display.",
        "* The minimum x value used in RTree searches.",
        "* The minimum y value used in RTree searches.",
        "* The maximum x value used in RTree searches.",
        "* The maximum y value used in RTree searches.",
        "* An Arcade Physics Collider Type.",
        "* [description]",
        "* [description]",
        "* The entity's position in the game world.",
        "* Current velocity in pixels per second.",
        "* Current acceleration to be added to the entity's velocity per second. E.g. an entity with a `vel.x` of 0 and `accel.x` of 10 will have a `vel.x` of 100 ten seconds later.",
        "* Deceleration to be subtracted from the entity's velocity per second. Only applies if `accel` is 0.",
        "* The maximum velocity a body can move.",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* [description]",
        "* Slope IDs can be stored on tiles directly\n     * using Impacts tileset editor. If a tile has a property with the given slopeTileProperty string\n     * name, the value of that property for the tile will be used for its slope mapping. E.g. a 45\n     * degree slope upward could be given a \"slope\" property with a value of 2.",
        "* A tile index to slope definition map.",
        "* If specified, the default slope ID to\n     * assign to a colliding tile. If not specified, the tile's index is used.",
        "* The default slope ID to assign to a\n     * non-colliding tile.",
        "* The `Matter.Body` module contains methods for creating and manipulating body models.\n     * A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n     * Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.",
        "* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n     * A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n     * It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n     * Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.",
        "* The `Matter.World` module contains methods for creating and manipulating the world composite.\n     * A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n     * A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n     * It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n     * There are also a few methods here that alias those in `Matter.Composite` for easier readability.",
        "* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n     * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n     * The stiffness of constraints can be modified to create springs or elastic.",
        "* The `Matter.Engine` module contains methods for creating and manipulating engines.\n     * An engine is a controller that manages updating the simulation of the world.",
        "* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n     * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n     * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).",
        "* An existing Matter body to be used instead of creating a new one.",
        "* Whether or not the newly created body should be made static. This defaults to true since typically tiles should not be moved.",
        "* Whether or not to add the newly created body (or existing body if options.body is used) to the Matter world.",
        "* Whether or not the newly created body should be made static. This defaults to true since typically tiles should not be moved.",
        "* Whether or not to add the newly created body (or existing body if options.body is used) to the Matter world.",
        "* The unique name of this plugin in the core plugin cache.",
        "* The plugin to be stored. Should be the source object, not instantiated.",
        "* If this plugin is to be injected into the Scene Systems, this is the property key map used.",
        "* Core Scene plugin or a Custom Scene plugin?",
        "* The unique name of this plugin in the custom plugin cache.",
        "* The plugin to be stored. Should be the source object, not instantiated.",
        "* The unique name of this plugin within the plugin cache.",
        "* An instance of the plugin.",
        "* Is the plugin active or not?",
        "* If this plugin is to be injected into the Scene Systems, this is the property key map used.",
        "* The function to call after the snapshot is taken.",
        "* The format of the image to create, usually `image/png` or `image/jpeg`.",
        "* The image quality, between 0 and 1. Used for image formats with lossy compression, such as `image/jpeg`.",
        "* The x coordinate to start the snapshot from.",
        "* The y coordinate to start the snapshot from.",
        "* The width of the snapshot.",
        "* The height of the snapshot.",
        "* Is this a snapshot to get a single pixel, or an area?",
        "* Implements a model view projection matrices.\n * Pipelines can implement this for doing 2D and 3D rendering.",
        "* Dirty flag for checking if model matrix needs to be updated on GPU.",
        "* Dirty flag for checking if view matrix needs to be updated on GPU.",
        "* Dirty flag for checking if projection matrix needs to be updated on GPU.",
        "* Model matrix",
        "* View matrix",
        "* Projection matrix",
        "* Initializes MVP matrices with an identity matrix",
        "* If dirty flags are set then the matrices are uploaded to the GPU.",
        "* Loads an identity matrix to the model matrix",
        "* Scale model matrix",
        "* Translate model matrix",
        "* Rotates the model matrix in the X axis.",
        "* Rotates the model matrix in the Y axis.",
        "* Rotates the model matrix in the Z axis.",
        "* Loads identity matrix into the view matrix",
        "* Scales view matrix",
        "* Translates view matrix",
        "* Rotates view matrix in the X axis.",
        "* Rotates view matrix in the Y axis.",
        "* Rotates view matrix in the Z axis.",
        "* Loads a 2D view matrix (3x2 matrix) into a 4x4 view matrix",
        "* Copies a 4x4 matrix into the view matrix",
        "* Loads identity matrix into the projection matrix.",
        "* Sets up an orthographics projection matrix",
        "* Sets up a perspective projection matrix",
        "* The Scene key to transition to.",
        "* The duration, in ms, for the transition to last.",
        "* Will the Scene responsible for the transition be sent to sleep on completion (`true`), or stopped? (`false`)",
        "* Will the Scenes Input system be able to process events while it is transitioning in or out?",
        "* Move the target Scene to be above this one before the transition starts.",
        "* Move the target Scene to be below this one before the transition starts.",
        "* This callback is invoked every frame for the duration of the transition.",
        "* The context in which the callback is invoked.",
        "* An object containing any data you wish to be passed to the target Scenes init / create methods.",
        "* Audio sprite sound type.",
        "* Local reference to 'spritemap' object form json file generated by audiosprite tool.",
        "* Config object containing various sound settings.",
        "* Boolean indicating whether the sound should be muted or not.",
        "* A value between 0 (silence) and 1 (full volume).",
        "* Defines the speed at which the sound should be played.",
        "* Represents detuning of sound in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).",
        "* Position of playback for this sound, in seconds.",
        "* Whether or not the sound or current sound marker should loop.",
        "* Time, in seconds, that should elapse before the sound actually starts its playback.",
        "* Marked section of a sound represented by name, and optionally start time, duration, and config object.",
        "* Unique identifier of a sound marker.",
        "* Sound position offset at witch playback should start.",
        "* Playback duration of this marker.",
        "* An optional config object containing default marker settings.",
        "* An object containing the position and color data for a single pixel in a CanvasTexture.",
        "* The x-coordinate of the pixel.",
        "* The y-coordinate of the pixel.",
        "* The color of the pixel, not including the alpha channel.",
        "* The alpha of the pixel, between 0 and 1.",
        "* The fixed width of each frame.",
        "* The fixed height of each frame. If not set it will use the frameWidth as the height.",
        "* Skip a number of frames. Useful when there are multiple sprite sheets in one Texture.",
        "* The total number of frames to extract from the Sprite Sheet. The default value of -1 means \"extract all frames\".",
        "* If the frames have been drawn with a margin, specify the amount here.",
        "* If the frames have been drawn with spacing between them, specify the amount here.",
        "* The key of the Texture Atlas in which this Sprite Sheet can be found.",
        "* The key of the Texture Atlas Frame in which this Sprite Sheet can be found.",
        "* The fixed width of each frame.",
        "* The fixed height of each frame. If not set it will use the frameWidth as the height.",
        "* Skip a number of frames. Useful when there are multiple sprite sheets in one Texture.",
        "* The total number of frames to extract from the Sprite Sheet. The default value of -1 means \"extract all frames\".",
        "* If the frames have been drawn with a margin, specify the amount here.",
        "* If the frames have been drawn with spacing between them, specify the amount here.",
        "* If true, only return tiles that don't have -1 for an index.",
        "* If true, only return tiles that collide on at least one side.",
        "* If true, only return tiles that have at least one interesting face.",
        "* The key in the Phaser cache that corresponds to the loaded tilemap data.",
        "* The width of the entire tilemap.",
        "* The height of the entire tilemap.",
        "* The width of the tiles.",
        "* The height of the tiles.",
        "* The width in pixels of the entire tilemap.",
        "* The height in pixels of the entire tilemap.",
        "* The format of the Tilemap, as defined in Tiled.",
        "* The orientation of the map data (i.e. orthogonal, isometric, hexagonal), default 'orthogonal'.",
        "* Determines the draw order of tilemap. Default is right-down.",
        "* The version of Tiled the map uses.",
        "* Map specific properties (can be specified in Tiled).",
        "* The layers of the tilemap.",
        "* An array with all the layers configured to the MapData.",
        "* An array of Tiled Image Layers.",
        "* An object of Tiled Object Layers.",
        "* The tilesets the map uses.",
        "* The collection of images the map uses(specified in Tiled).",
        "* [description]",
        "* If true, only return tiles that don't have -1 for an index.",
        "* If true, only return tiles that collide on at least one side.",
        "* If true, only return tiles that have at least one interesting face.",
        "* Color to use for drawing a filled rectangle at non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.",
        "* Color to use for drawing a filled rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.",
        "* Color to use for drawing a line at interesting tile faces. If set to null, interesting tile faces will not be drawn.",
        "* The key in the Phaser cache that corresponds to the loaded tilemap data.",
        "* Instead of loading from the cache, you can also load directly from a 2D array of tile indexes.",
        "* The width of a tile in pixels.",
        "* The height of a tile in pixels.",
        "* The width of the map in tiles.",
        "* The height of the map in tiles.",
        "* Controls how empty tiles, tiles with an index of -1,\n     * in the map data are handled. If `true`, empty locations will get a value of `null`. If `false`,\n     * empty location will get a Tile object with an index of -1. If you've a large sparsely populated\n     * map and the tile data doesn't need to change then setting this value to `true` will help with\n     * memory consumption. However if your map is small or you need to update the tiles dynamically,\n     * then leave the default value set.",
        "* The delay after which the Timer Event should fire, in milliseconds.",
        "* The total number of times the Timer Event will repeat before finishing.",
        "* `true` if the Timer Event should repeat indefinitely.",
        "* The callback which will be called when the Timer Event fires.",
        "* The scope (`this` object) with which to invoke the `callback`.",
        "* Additional arguments to be passed to the `callback`.",
        "* The scale of the elapsed time.",
        "* The initial elapsed time in milliseconds. Useful if you want a long duration with repeat, but for the first loop to fire quickly.",
        "* `true` if the Timer Event should be paused.",
        "* Time in ms/frames before tween will start.",
        "* Duration of the tween in ms/frames, excludes time for yoyo or repeats.",
        "* Time in ms/frames the tween will pause before running the yoyo or starting a repeat.",
        "* Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.",
        "* Time in ms/frames before the repeat will start.",
        "* Class",
        "* \n     * @param definition a dictionary of functions for the class",
        "* Represents an instance of an ad.",
        "* The Audience Network placement ID of this ad instance.",
        "* Has this ad already been shown in-game?",
        "* Is this a video ad?",
        "* This class represents one single Leaderboard that belongs to a Facebook Instant Game.\n     * \n     * You do not need to instantiate this class directly, it will be created when you use the\n     * `getLeaderboard()` method of the main plugin.",
        "* \n         * @param plugin A reference to the Facebook Instant Games Plugin.\n         * @param data An Instant Game leaderboard instance.",
        "* A reference to the Facebook Instant Games Plugin.",
        "* An Instant Game leaderboard instance.",
        "* The name of the leaderboard.",
        "* The ID of the context that the leaderboard is associated with, or null if the leaderboard is not tied to a particular context.",
        "* The total number of player entries in the leaderboard.\n         * This value defaults to zero. Populate it via the `getEntryCount()` method.",
        "* The players score object.\n         * This value defaults to `null`. Populate it via the `getPlayerScore()` method.",
        "* The scores in the Leaderboard from the currently requested range.\n         * This value defaults to an empty array. Populate it via the `getScores()` method.\n         * The contents of this array are reset each time `getScores()` is called.",
        "* Fetches the total number of player entries in the leaderboard.\n         * \n         * The data is requested in an async call, so the result isn't available immediately.\n         * \n         * When the call completes this Leaderboard will emit the `getentrycount` event along with the count and name of the Leaderboard.",
        "* Updates the player's score. If the player has an existing score, the old score will only be replaced if the new score is better than it.\n         * NOTE: If the leaderboard is associated with a specific context, the game must be in that context to set a score for the player.\n         * \n         * The data is requested in an async call, so the result isn't available immediately.\n         * \n         * When the call completes this Leaderboard will emit the `setscore` event along with the LeaderboardScore object and the name of the Leaderboard.\n         * \n         * If the save fails the event will send `null` as the score value.\n         * @param score The new score for the player. Must be a 64-bit integer number.\n         * @param data Metadata to associate with the stored score. Must be less than 2KB in size. If an object is given it will be passed to `JSON.stringify`.",
        "* Gets the players leaderboard entry and stores it in the `playerScore` property.\n         * \n         * The data is requested in an async call, so the result isn't available immediately.\n         * \n         * When the call completes this Leaderboard will emit the `getplayerscore` event along with the score and the name of the Leaderboard.\n         * \n         * If the player has not yet saved a score, the event will send `null` as the score value, and `playerScore` will be set to `null` as well.",
        "* Retrieves a set of leaderboard entries, ordered by score ranking in the leaderboard.\n         * \n         * The data is requested in an async call, so the result isn't available immediately.\n         * \n         * When the call completes this Leaderboard will emit the `getscores` event along with an array of LeaderboardScore entries and the name of the Leaderboard.\n         * @param count The number of entries to attempt to fetch from the leaderboard. Currently, up to a maximum of 100 entries may be fetched per query. Default 10.\n         * @param offset The offset from the top of the leaderboard that entries will be fetched from. Default 0.",
        "* Retrieves a set of leaderboard entries, based on the current player's connected players (including the current player), ordered by local rank within the set of connected players.\n         * \n         * The data is requested in an async call, so the result isn't available immediately.\n         * \n         * When the call completes this Leaderboard will emit the `getconnectedscores` event along with an array of LeaderboardScore entries and the name of the Leaderboard.\n         * @param count The number of entries to attempt to fetch from the leaderboard. Currently, up to a maximum of 100 entries may be fetched per query. Default 10.\n         * @param offset The offset from the top of the leaderboard that entries will be fetched from. Default 0.",
        "* An integer score value.",
        "* The score value, formatted with the score format associated with the leaderboard.",
        "* The Unix timestamp of when the leaderboard entry was last updated.",
        "* The entry's leaderboard ranking.",
        "* The developer-specified payload associated with the score, or null if one was not set.",
        "* The player's localized display name.",
        "* A url to the player's public profile photo.",
        "* The game's unique identifier for the player.",
        "* The title of the product.",
        "* The product's game-specified identifier.",
        "* The product description.",
        "* A link to the product's associated image.",
        "* The price of the product.",
        "* The currency code for the product.",
        "* A developer-specified string, provided during the purchase of the product.",
        "* The identifier for the purchase transaction.",
        "* The product's game-specified identifier.",
        "* Unix timestamp of when the purchase occurred.",
        "* A token representing the purchase that may be used to consume the purchase.",
        "* Server-signed encoding of the purchase request."
    ],
    "functions": [],
    "classes": [
        "Animation",
        "AnimationFrame",
        "AnimationManager",
        "BaseCache",
        "CacheManager",
        "BaseCamera",
        "Camera",
        "CameraManager",
        "Fade",
        "Flash",
        "Pan",
        "Shake",
        "Zoom",
        "FixedKeyControl",
        "SmoothedKeyControl",
        "Game",
        "Config",
        "TimeStep",
        "CubicBezier",
        "Curve",
        "Ellipse",
        "Line",
        "MoveTo",
        "Path",
        "QuadraticBezier",
        "Spline",
        "DataManager",
        "DataManagerPlugin",
        "Color",
        "BitmapMask",
        "GeometryMask",
        "RequestAnimationFrame",
        "EventEmitter",
        "DynamicBitmapText",
        "BitmapText",
        "Blitter",
        "Bob",
        "TransformMatrix",
        "Container",
        "DisplayList",
        "Extern",
        "GameObject",
        "GameObjectCreator",
        "GameObjectFactory",
        "Graphics",
        "Group",
        "Image",
        "Light",
        "LightsManager",
        "LightsPlugin",
        "Mesh",
        "EmitterOp",
        "GravityWell",
        "Particle",
        "ParticleEmitter",
        "ParticleEmitterManager",
        "DeathZone",
        "EdgeZone",
        "RandomZone",
        "PathFollower",
        "Quad",
        "RenderTexture",
        "Arc",
        "Curve",
        "Ellipse",
        "Grid",
        "IsoBox",
        "IsoTriangle",
        "Line",
        "Polygon",
        "Rectangle",
        "Shape",
        "Star",
        "Triangle",
        "Sprite",
        "Text",
        "TextStyle",
        "TileSprite",
        "UpdateList",
        "Zone",
        "Circle",
        "Ellipse",
        "Line",
        "Point",
        "Polygon",
        "Rectangle",
        "Triangle",
        "Axis",
        "Button",
        "Gamepad",
        "GamepadPlugin",
        "InputManager",
        "InputPlugin",
        "KeyCombo",
        "KeyboardManager",
        "KeyboardPlugin",
        "Key",
        "MouseManager",
        "Pointer",
        "TouchManager",
        "File",
        "AnimationJSONFile",
        "AtlasJSONFile",
        "AtlasXMLFile",
        "AudioFile",
        "AudioSpriteFile",
        "BinaryFile",
        "BitmapFontFile",
        "GLSLFile",
        "HTML5AudioFile",
        "HTMLFile",
        "HTMLTextureFile",
        "ImageFile",
        "JSONFile",
        "MultiAtlasFile",
        "PackFile",
        "PluginFile",
        "SceneFile",
        "ScenePluginFile",
        "ScriptFile",
        "SpriteSheetFile",
        "SVGFile",
        "TextFile",
        "TilemapCSVFile",
        "TilemapImpactFile",
        "TilemapJSONFile",
        "UnityAtlasFile",
        "XMLFile",
        "LoaderPlugin",
        "MultiFile",
        "Matrix3",
        "Matrix4",
        "Quaternion",
        "RandomDataGenerator",
        "Vector2",
        "Vector3",
        "Vector4",
        "Image",
        "ArcadePhysics",
        "Sprite",
        "Body",
        "Collider",
        "Factory",
        "Group",
        "StaticBody",
        "StaticGroup",
        "World",
        "Body",
        "CollisionMap",
        "Factory",
        "ImpactBody",
        "ImpactImage",
        "ImpactPhysics",
        "ImpactSprite",
        "World",
        "Factory",
        "Image",
        "MatterPhysics",
        "Sprite",
        "TileBody",
        "PointerConstraint",
        "World",
        "BasePlugin",
        "PluginManager",
        "ScenePlugin",
        "CanvasRenderer",
        "BitmapMaskPipeline",
        "ForwardDiffuseLightPipeline",
        "TextureTintPipeline",
        "WebGLPipeline",
        "WebGLRenderer",
        "ScaleManager",
        "SceneManager",
        "ScenePlugin",
        "Systems",
        "Scene",
        "BaseSound",
        "BaseSoundManager",
        "HTML5AudioSound",
        "HTML5AudioSoundManager",
        "NoAudioSound",
        "NoAudioSoundManager",
        "WebAudioSound",
        "WebAudioSoundManager",
        "ProcessQueue",
        "RTree",
        "Size",
        "CanvasTexture",
        "Frame",
        "Texture",
        "TextureManager",
        "TextureSource",
        "DynamicTilemapLayer",
        "ImageCollection",
        "LayerData",
        "MapData",
        "ObjectLayer",
        "StaticTilemapLayer",
        "Tile",
        "Tilemap",
        "Tileset",
        "Clock",
        "TimerEvent",
        "Timeline",
        "Tween",
        "TweenManager",
        "FacebookInstantGamesPlugin",
        "Body",
        "Composite",
        "World",
        "Constraint",
        "Engine",
        "Vertices",
        "Class",
        "Leaderboard"
    ]
}