{
    "identifiers": [
        "org",
        "openqa",
        "selenium",
        "tools",
        "jar",
        "java",
        "io",
        "ByteArrayOutputStream",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "io",
        "OutputStream",
        "java",
        "io",
        "UncheckedIOException",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "nio",
        "file",
        "Path",
        "java",
        "nio",
        "file",
        "Paths",
        "java",
        "nio",
        "file",
        "attribute",
        "FileTime",
        "java",
        "time",
        "Instant",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Objects",
        "java",
        "util",
        "java",
        "util",
        "SortedMap",
        "java",
        "util",
        "SortedSet",
        "java",
        "util",
        "TreeMap",
        "java",
        "util",
        "TreeSet",
        "java",
        "util",
        "jar",
        "Attributes",
        "java",
        "util",
        "jar",
        "JarEntry",
        "java",
        "util",
        "jar",
        "JarOutputStream",
        "java",
        "util",
        "jar",
        "Manifest",
        "java",
        "util",
        "ZipEntry",
        "java",
        "util",
        "ZipInputStream",
        "java",
        "util",
        "Deflater",
        "BEST_COMPRESSION",
        "java",
        "util",
        "ZipOutputStream",
        "DEFLATED",
        "DOS_EPOCH",
        "FileTime",
        "Instant",
        "parse",
        "args",
        "sources",
        "i",
        "i",
        "args",
        "length",
        "i",
        "args",
        "i",
        "Paths",
        "get",
        "args",
        "i",
        "path",
        "Paths",
        "get",
        "args",
        "i",
        "Files",
        "exists",
        "path",
        "Files",
        "isReadable",
        "path",
        "path",
        "sources",
        "add",
        "path",
        "Arrays",
        "toString",
        "args",
        "Objects",
        "requireNonNull",
        "sources",
        "isEmpty",
        "fos",
        "Files",
        "newOutputStream",
        "jos",
        "fos",
        "temp",
        "Files",
        "createTempDirectory",
        "manifest",
        "manifest",
        "getMainAttributes",
        "put",
        "Attributes",
        "Name",
        "MANIFEST_VERSION",
        "allPaths",
        "source",
        "sources",
        "fis",
        "Files",
        "newInputStream",
        "source",
        "zis",
        "fis",
        "entry",
        "entry",
        "zis",
        "getNextEntry",
        "equals",
        "entry",
        "getName",
        "other",
        "zis",
        "manifest",
        "merge",
        "manifest",
        "other",
        "entry",
        "isDirectory",
        "zis",
        "readAllBytes",
        "outPath",
        "temp",
        "resolve",
        "entry",
        "getName",
        "normalize",
        "outPath",
        "startsWith",
        "temp",
        "outPath",
        "Files",
        "exists",
        "outPath",
        "getParent",
        "Files",
        "createDirectories",
        "outPath",
        "getParent",
        "os",
        "Files",
        "newOutputStream",
        "outPath",
        "zis",
        "transferTo",
        "os",
        "dirPaths",
        "allPaths",
        "computeIfAbsent",
        "temp",
        "relativize",
        "outPath",
        "getParent",
        "path",
        "dirPaths",
        "put",
        "temp",
        "relativize",
        "outPath",
        "outPath",
        "manifest",
        "getMainAttributes",
        "put",
        "seen",
        "of",
        "os",
        "Files",
        "newOutputStream",
        "jos",
        "os",
        "jos",
        "setMethod",
        "DEFLATED",
        "jos",
        "setLevel",
        "BEST_COMPRESSION",
        "entry",
        "entry",
        "resetTime",
        "entry",
        "jos",
        "putNextEntry",
        "entry",
        "jos",
        "closeEntry",
        "entry",
        "entry",
        "resetTime",
        "entry",
        "bos",
        "manifest",
        "write",
        "bos",
        "entry",
        "setSize",
        "bos",
        "size",
        "jos",
        "putNextEntry",
        "entry",
        "jos",
        "write",
        "bos",
        "toByteArray",
        "jos",
        "closeEntry",
        "allPaths",
        "forEach",
        "dir",
        "entries",
        "name",
        "dir",
        "toString",
        "seen",
        "add",
        "name",
        "je",
        "name",
        "je",
        "resetTime",
        "je",
        "jos",
        "putNextEntry",
        "je",
        "jos",
        "closeEntry",
        "me",
        "entries",
        "entrySet",
        "name",
        "me",
        "getKey",
        "toString",
        "seen",
        "add",
        "name",
        "je",
        "name",
        "je",
        "resetTime",
        "je",
        "jos",
        "putNextEntry",
        "je",
        "fis",
        "Files",
        "newInputStream",
        "me",
        "getValue",
        "fis",
        "transferTo",
        "jos",
        "jos",
        "closeEntry",
        "e",
        "e",
        "entry",
        "entry",
        "setTime",
        "DOS_EPOCH",
        "toMillis",
        "entry",
        "into",
        "attributes",
        "getMainAttributes",
        "attributes",
        "attributes",
        "forEach",
        "key",
        "value",
        "into",
        "getMainAttributes",
        "put",
        "key",
        "value",
        "getEntries",
        "forEach",
        "key",
        "value",
        "attrs",
        "into",
        "getAttributes",
        "key",
        "attrs",
        "attrs",
        "into",
        "getEntries",
        "put",
        "key",
        "attrs",
        "attrs",
        "putAll",
        "value",
        "into"
    ],
    "literals": [
        "\"1985-02-01T00:00:00.00Z\"",
        "\"--compression\"",
        "\"--normalize\"",
        "\"--output\"",
        "\"--sources\"",
        "\"Source must a readable file: \"",
        "\"Unable to parse command line: \"",
        "\"Output path must be set.\"",
        "\"mergejars\"",
        "\"1.0\"",
        "\"META-INF/MANIFEST.MF\"",
        "\"Attempt to write jar entry somewhere weird: \"",
        "\"Created-By\"",
        "\"mergejars\"",
        "\"META-INF/\"",
        "\"META-INF/MANIFEST.MF\"",
        "\"META-INF/\"",
        "\"META-INF/MANIFEST.MF\"",
        "\"/\""
    ],
    "variables": [
        "entry"
    ],
    "comments": [
        "Licensed to the Software Freedom Conservancy (SFC) under one",
        "or more contributor license agreements.  See the NOTICE file",
        "distributed with this work for additional information",
        "regarding copyright ownership.  The SFC licenses this file",
        "to you under the Apache License, Version 2.0 (the",
        "\"License\"); you may not use this file except in compliance",
        "with the License.  You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing,",
        "software distributed under the License is distributed on an",
        "\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
        "KIND, either express or implied.  See the License for the",
        "specific language governing permissions and limitations",
        "under the License.",
        "File time is taken from the epoch (1970-01-01T00:00:00Z), but zip files",
        "have a different epoch. Oof. Make something sensible up.",
        "ignore",
        "Just write an empty jar and leave",
        "To keep things simple, we expand all the inputs jars into a single directory,",
        "merge the manifests, and then create our own zip.",
        "Skip it.",
        "TODO: merge services files",
        "Now create the output jar",
        "Write the manifest by hand to ensure the date is good"
    ],
    "docstrings": [],
    "functions": [
        "main",
        "JarEntry",
        "resetTime",
        "Manifest",
        "merge"
    ],
    "classes": [
        "MergeJars"
    ]
}