{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "process",
        "process",
        "process",
        "url",
        "debug",
        "url",
        "buildkiteAccessToken",
        "fetch",
        "url",
        "httpResponse",
        "isNullOrEmpty",
        "body",
        "url",
        "buildkiteAccessToken",
        "httpResponse",
        "error",
        "debug",
        "body",
        "pipeline",
        "buildNumber",
        "debug",
        "pipeline",
        "buildNumber",
        "fetch",
        "pipeline",
        "buildNumber",
        "buildkiteAccessToken",
        "httpResponse",
        "job",
        "debug",
        "fetch",
        "job",
        "job",
        "buildkiteAccessToken",
        "httpResponse",
        "environment",
        "text",
        "key",
        "startIndex",
        "debug",
        "isNullOrEmpty",
        "startIndex",
        "startIndex",
        "startIndex",
        "startIndex",
        "key",
        "text",
        "line",
        "lineNumber",
        "begin",
        "regex",
        "key",
        "line",
        "regex",
        "line",
        "key",
        "found",
        "lineNumber",
        "found",
        "lineNumber",
        "job",
        "debug",
        "job",
        "download",
        "job",
        "buildkiteAccessToken",
        "sanitize",
        "logText",
        "environment",
        "debug",
        "environment",
        "isNullOrEmpty",
        "environment",
        "isNullOrEmpty",
        "environment",
        "environment",
        "environment",
        "label",
        "label",
        "label",
        "label",
        "label",
        "label",
        "label",
        "label",
        "label",
        "label",
        "label",
        "label",
        "label",
        "label",
        "job",
        "debug",
        "download",
        "job",
        "buildkiteAccessToken",
        "artifacts",
        "artifact",
        "artifact",
        "xmlFilename",
        "isNullOrEmpty",
        "testResultsArtifact",
        "xmlFilename",
        "job",
        "job",
        "testResultsArtifact",
        "download",
        "urlBuildkite",
        "buildkiteAccessToken",
        "lower",
        "name",
        "name",
        "XML",
        "rawXML",
        "xmlOptions",
        "err",
        "result",
        "xmlTestResults",
        "result",
        "xmlError",
        "err",
        "isNullOrEmpty",
        "xmlError",
        "xmlTestResults",
        "job",
        "job",
        "xmlError",
        "logText",
        "debug",
        "logText",
        "lines",
        "line",
        "line",
        "resultLines",
        "line",
        "line",
        "y",
        "parts",
        "parts",
        "parts",
        "parts",
        "rawResult",
        "testResult",
        "rawResult",
        "testResult",
        "testResult",
        "xUnit",
        "debug",
        "isNullOrEmpty",
        "xUnit",
        "xUnit",
        "test",
        "test",
        "test",
        "x",
        "x",
        "test",
        "testResult",
        "test",
        "testResult",
        "testResult",
        "text",
        "debug",
        "text",
        "text",
        "chunkSize",
        "sanitize",
        "text",
        "chunkSize",
        "sanitize",
        "text",
        "chunkSize",
        "text",
        "test",
        "logText",
        "debug",
        "logText",
        "test",
        "test",
        "getLineNumber",
        "logText",
        "testResultLine",
        "startIndex",
        "test",
        "output",
        "output",
        "pipelineWhitelist",
        "test",
        "output",
        "debug",
        "output",
        "logText",
        "testResultLine",
        "testLog",
        "errorLine",
        "output",
        "errorLine",
        "output",
        "errorLine",
        "output",
        "errorLine",
        "testLog",
        "line",
        "isNullOrEmpty",
        "line",
        "testLog",
        "line",
        "isNullOrEmpty",
        "line",
        "output",
        "errorLine",
        "testLog",
        "testLog",
        "line",
        "line",
        "output",
        "errorLine",
        "isNullOrEmpty",
        "testLog",
        "line",
        "line",
        "testLog",
        "line",
        "line",
        "output",
        "errorLine",
        "output",
        "testLog",
        "line",
        "line",
        "test",
        "test",
        "isNullOrEmpty",
        "testLog",
        "line",
        "line",
        "testLog",
        "line",
        "line",
        "output",
        "errorLine",
        "output",
        "testLog",
        "line",
        "line",
        "errorLine",
        "testLog",
        "output",
        "getLineNumber",
        "logText",
        "errorLine",
        "startIndex",
        "output",
        "buildkiteObject",
        "isNullOrEmpty",
        "buildkiteObject",
        "job",
        "inBuildkite",
        "job",
        "isNullOrEmpty",
        "job",
        "inBuildkite",
        "job",
        "getLog",
        "job",
        "xUnit",
        "getXML",
        "job",
        "testResults",
        "parseXunit",
        "xUnit",
        "error",
        "job",
        "job",
        "error",
        "testResults",
        "isNullOrEmpty",
        "testResults",
        "testResults",
        "parseLog",
        "logText",
        "getEnvironment",
        "job",
        "env",
        "env",
        "getOS",
        "env",
        "testResults",
        "result",
        "result",
        "env",
        "env",
        "env",
        "env",
        "env",
        "env",
        "env",
        "env",
        "env",
        "parseFloat",
        "result",
        "job",
        "metrics",
        "test",
        "testDiagnostics",
        "test",
        "logText",
        "metrics",
        "isNullOrEmpty",
        "buildkiteObject",
        "build",
        "build",
        "inBuildkite",
        "build",
        "build",
        "job",
        "job",
        "job",
        "job",
        "job",
        "promises",
        "testMetrics",
        "job",
        "moreMetrics",
        "isNullOrEmpty",
        "moreMetrics",
        "metrics",
        "metrics",
        "moreMetrics",
        "inBuildkite",
        "job",
        "moreMetrics",
        "error",
        "inBuildkite",
        "job",
        "job",
        "error",
        "errorCount",
        "promises",
        "metrics",
        "inBuildkite",
        "debug",
        "process",
        "inBuildkite",
        "process",
        "process",
        "process",
        "process",
        "debug",
        "process",
        "process",
        "process",
        "inBuildkite",
        "buildNumber",
        "pipeline",
        "isNullOrEmpty",
        "buildNumber",
        "isNullOrEmpty",
        "pipeline",
        "isNullOrEmpty",
        "process",
        "inBuildkite",
        "isNullOrEmpty",
        "process",
        "isNullOrEmpty",
        "buildNumber",
        "isNullOrEmpty",
        "pipeline",
        "errorCount",
        "inBuildkite",
        "build",
        "getBuild",
        "pipeline",
        "buildNumber",
        "metrics",
        "testMetrics",
        "build",
        "inBuildkite",
        "fs",
        "outputFile",
        "outputFile",
        "process",
        "inBuildkite",
        "execSync",
        "outputFile",
        "errorCount",
        "inBuildkite",
        "inBuildkite",
        "isNullOrEmpty",
        "build",
        "build",
        "inBuildkite",
        "process",
        "EXIT_SUCCESS",
        "process",
        "errorCount",
        "main"
    ],
    "literals": [
        "'child_process'",
        "'node-fetch'",
        "'fs'",
        "'xml2js'",
        "?access_token=${process.env.BUILDKITE_API_KEY}",
        "'true'",
        "'true'",
        "'test-metrics.json'",
        "'eosio'",
        "'eosio-base-images'",
        "'eosio-beta'",
        "'eosio-build-unpinned'",
        "'eosio-debug'",
        "'eosio-lrt'",
        "'eosio-security'",
        "download(${url.replace(buildkiteAccessToken, '')})",
        "''",
        "ERROR: URL returned nothing! URL: ${url.replace(buildkiteAccessToken, '')}",
        "''",
        "'http body is null or empty'",
        "'download()'",
        "'Download complete.'",
        "getBuild(${pipeline}, ${buildNumber})",
        "https://api.buildkite.com/v2/organizations/EOSIO/pipelines/${pipeline}/builds/${buildNumber}${buildkiteAccessToken}",
        "'getEnvironment()'",
        "${job.build_url}/jobs/${job.id}/env${buildkiteAccessToken}",
        "'getLineNumber()'",
        "'\\n'",
        "getLog(${job.raw_log_url})",
        "getOS(${environment.BUILDKITE_LABEL})",
        "'ERROR: getOS() called with empty environment.BUILDKITE_LABEL!'",
        "'Amazon Linux 1'",
        "'Amazon Linux 2'",
        "'CentOS 7'",
        "'Fedora 27'",
        "'High Sierra'",
        "'Mojave'",
        "'Ubuntu 16.04'",
        "'Ubuntu 18.04'",
        "'Docker'",
        "'Unknown'",
        "'getXML()'",
        "'test-results.xml'",
        "WARNING: No ${xmlFilename} found for \"${job.name}\"! Link: ${job.web_url}",
        "WARNING: Failed to parse xml for \"${job.name}\" job! Link: ${job.web_url}",
        "'parseLog()'",
        "'\\n'",
        "'failed'",
        "'Failed'",
        "'passed'",
        "'Passed'",
        "'Exception'",
        "'parseXunit()'",
        "'WARNING: xUnit is empty!'",
        "'failed'",
        "'Failed'",
        "'passed'",
        "'Passed'",
        "'Exception'",
        "sanitize(text) where text.length = ${text.length} bytes",
        "'\\n'",
        "''",
        "' '",
        "''",
        "testDiagnostics(test, logText) where logText.length = ${logText.length} bytes and test is",
        "test\\\\s+#\\\\d+.*${test.testName}",
        "'g'",
        "'passed'",
        "'test diangostics are not enabled for this pipeline'",
        "'Running diagnostics...'",
        "'uncategorized'",
        "'\\n'",
        "'test not run'",
        "'test timeout'",
        "'exception'",
        "''",
        "''",
        "fc::${errorLine.split('::')[1].replace(/['\",]/g, '').split(' ')[0]}",
        "'::'",
        "''",
        "' '",
        "'\\n'",
        "'ctest:'",
        "'ctest:'",
        "ctest:${errorLine.split('ctest:')[1]}",
        "'ctest:'",
        "boost: ${errorLine.replace(/[()]/g, '').split(/: (.+)/)[1]}",
        "''",
        "'thread-'",
        "''",
        "''",
        "'exception: '",
        "'exception: '",
        "''",
        "'thread-'",
        "''",
        "''",
        "Processing test metrics for \"${job.name}\"${(inBuildkite) ? '' : ` at ${job.web_url}`}...",
        "''",
        "at ${job.web_url}",
        "${(inBuildkite) ? '+++ :warning: ' : ''}WARNING: \"${job.name}\" was skipped!",
        "'+++ :warning: '",
        "''",
        "XML processing failed for \"${job.name}\"! Link: ${job.web_url}",
        "'^git@github.com:(EOSIO/)?'",
        "''",
        "'.git$'",
        "''",
        "Processing test metrics for ${build.pipeline.slug} build ${build.number}${(inBuildkite) ? '' : ` at ${build.web_url}`}...",
        "''",
        "at ${build.web_url}",
        "'script'",
        "${(inBuildkite) ? '+++ :warning: ' : ''}WARNING: \"${job.name}\" metrics are empty!\\nmetrics = ${JSON.stringify(moreMetrics)}",
        "'+++ :warning: '",
        "''",
        "${(inBuildkite) ? '+++ :no_entry: ' : ''}ERROR: Failed to process test metrics for \"${job.name}\"! Link: ${job.web_url}",
        "'+++ :no_entry: '",
        "''",
        "${(inBuildkite) ? '+++ :no_entry: ' : ''}ERROR: Buildkite object not recognized or not a test step!",
        "'+++ :no_entry: '",
        "''",
        "$ ${process.argv.join(' ')}",
        "' '",
        "${(inBuildkite) ? '+++ :evergreen_tree: ' : ''}Getting information from enviroment...",
        "'+++ :evergreen_tree: '",
        "''",
        "BUILDKITE=${process.env.BUILDKITE}",
        "BUILDKITE_BUILD_NUMBER=${process.env.BUILDKITE_BUILD_NUMBER}",
        "BUILDKITE_PIPELINE_SLUG=${process.env.BUILDKITE_PIPELINE_SLUG}",
        "'    State:'",
        "inBuildkite = \"${inBuildkite}\"",
        "buildNumber = \"${buildNumber}\"",
        "pipeline    = \"${pipeline}\"",
        "${(inBuildkite) ? '+++ :no_entry: ' : ''}ERROR: Missing required inputs!",
        "'+++ :no_entry: '",
        "''",
        "'- Buildkite API key, as BUILDKITE_API_KEY environment variable'",
        "'- Build Number, as BUILDKITE_BUILD_NUMBER or argument 1'",
        "'- Pipeline Slug, as BUILDKITE_PIPELINE_SLUG or argument 2'",
        "${(inBuildkite) ? '+++ :bar_chart: ' : ''}Processing test metrics...",
        "'+++ :bar_chart: '",
        "''",
        "'Done processing test metrics.'",
        "${(inBuildkite) ? '+++ :pencil: ' : ''}Writing to file...",
        "'+++ :pencil: '",
        "''",
        "Saved metrics to \"${outputFile}\" in \"${process.cwd()}\".",
        "'+++ :arrow_up: Uploading artifact...'",
        "buildkite-agent artifact upload ${outputFile}",
        "${(inBuildkite) ? '+++ :white_check_mark: ' : ''}Done!",
        "'+++ :white_check_mark: '",
        "''",
        "${(inBuildkite) ? '+++ :warning: ' : ''}Finished with errors.",
        "'+++ :warning: '",
        "''",
        "Please send automation a link to this job${(isNullOrEmpty(build)) ? '.' : `: ${build.web_url}`}",
        "'.'",
        ": ${build.web_url}",
        "'@kj4ezj or @zreyn on Telegram'"
    ],
    "variables": [
        "execSync",
        "fetch",
        "fs",
        "XML",
        "buildkiteAccessToken",
        "debug",
        "errorCount",
        "EXIT_SUCCESS",
        "inBuildkite",
        "outputFile",
        "pipelineWhitelist",
        "httpResponse",
        "body",
        "error",
        "httpResponse",
        "httpResponse",
        "environment",
        "begin",
        "found",
        "lineNumber",
        "regex",
        "logText",
        "label",
        "xmlFilename",
        "artifacts",
        "testResultsArtifact",
        "urlBuildkite",
        "rawXML",
        "xmlOptions",
        "xmlError",
        "xmlTestResults",
        "lines",
        "resultLines",
        "y",
        "parts",
        "testName",
        "testTime",
        "rawResult",
        "testResult",
        "testName",
        "testTime",
        "testResult",
        "chunkSize",
        "testResultLine",
        "startIndex",
        "output",
        "testLog",
        "errorLine",
        "errorLine",
        "errorLine",
        "errorLine",
        "errorLine",
        "job",
        "buildkiteObject",
        "logText",
        "testResults",
        "xUnit",
        "env",
        "metrics",
        "os",
        "test",
        "build",
        "buildkiteObject",
        "metrics",
        "promises",
        "build",
        "metrics",
        "buildNumber",
        "pipeline"
    ],
    "comments": [
        "includes",
        "run shell commands",
        "downloading",
        "file stream",
        "parse xml",
        "globals",
        "import buildkite access token from environment",
        "count number of jobs which caused an error",
        "the pipelines for which we run diagnostics",
        "functions",
        "given a url string, download a text document",
        "DEBUG",
        "DEBUG",
        "given a pipeline and a build number, get a build object",
        "DEBUG",
        "given a buildkite job, return the environmental variables",
        "DEBUG",
        "given a string to search, a key as regex or a string, and optionally a start index, return the lowest line number containing the key",
        "DEBUG",
        "c-style break",
        "for the linter, plz delete when linter is fixed",
        "given a buildkite job, return a sanitized log file",
        "DEBUG",
        "returns log lowercase, with single spaces and '\\n' only, and only ascii-printable characters",
        "made this a separate function for unit testing purposes",
        "given a Buildkite environment, return the operating system used",
        "DEBUG",
        "given a Buildkite job, return the test-results.xml file as JSON",
        "DEBUG",
        "do not put single strings in single-element arrays",
        "make attributes children of their node",
        "convert all tag names to lowercase",
        "test if variable is empty",
        "return array of test results from a buildkite job log",
        "DEBUG",
        "'grep' for the test result lines",
        "parse the strings and make test records",
        "remove everything before the test declaration",
        "split the line and remove the test number and time unit",
        "create a test record",
        "return array of test results from an xUnit-formatted JSON object",
        "DEBUG",
        "returns text lowercase, with single spaces and '\\n' only, and only ascii-printable characters",
        "DEBUG",
        "process text in 128 kB chunks",
        "convert all line endings to '\\n'",
        "convert all whitespace to ' '",
        "remove non-printable characters",
        "input is array of whole lines containing \"test #\" and (\"failed\" or \"exception\")",
        "DEBUG",
        "get basic information",
        "regex defining \"test #\" line",
        "default output",
        "filter tests",
        "diagnostics",
        "DEBUG",
        "get log output from this test only, as array of lines",
        "first line, from \"test ## name\" to '\\n' exclusive",
        "not run",
        "timeout",
        "test exception",
        "isolate the error message after exception",
        "fc exception",
        "get first line",
        "isolate fx exception body",
        "ctest exception",
        "boost exception",
        "capturing parenthesis, split only at first ' :'",
        "get the bottom of the stack trace",
        "unit test, application exception",
        "capturing parenthesis, split only at first ' :'",
        "get the bottom of the stack trace",
        "else uncategorized unit test",
        "else integration test, add cross-referencing code here (or uncategorized)",
        "get real line number from log file",
        "return test metrics given a buildkite job or build",
        "input is a Buildkite job object",
        "get test results",
        "get test metrics",
        "add test properties",
        "add testName, testResult, testTime",
        "input is a Buildkite build object",
        "process test metrics",
        "something else",
        "main"
    ],
    "docstrings": [],
    "functions": [
        "download",
        "getBuild",
        "getEnvironment",
        "getLineNumber",
        "getLog",
        "getOS",
        "getXML",
        "isNullOrEmpty",
        "parseLog",
        "parseXunit",
        "sanitize",
        "testDiagnostics",
        "testMetrics",
        "main"
    ],
    "classes": []
}