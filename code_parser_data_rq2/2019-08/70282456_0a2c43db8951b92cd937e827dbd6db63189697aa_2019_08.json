{
    "identifiers": [
        "dataclasses",
        "collections",
        "abc",
        "numpy",
        "np",
        "lsst",
        "afw",
        "image",
        "utils",
        "collections",
        "abc",
        "Sequence",
        "filters",
        "filters",
        "key",
        "_filters",
        "key",
        "len",
        "_filters",
        "join",
        "f",
        "f",
        "_filters",
        "_defined",
        "reset",
        "_filters",
        "defineFilter",
        "_defined",
        "_defined",
        "RuntimeError",
        "msg",
        "classmethod",
        "cls",
        "lsst",
        "afw",
        "image",
        "utils",
        "resetFilters",
        "dataclasses",
        "dataclass",
        "frozen",
        "np",
        "nan",
        "np",
        "nan",
        "isinstance",
        "alias",
        "__setattr__",
        "alias",
        "physical_filter",
        "lambdaEff",
        "abstract_filter",
        "txt",
        "abstract_filter",
        "afw_name",
        "txt",
        "afw_name",
        "np",
        "isnan",
        "lambdaMin",
        "txt",
        "lambdaMin",
        "np",
        "isnan",
        "lambdaMax",
        "txt",
        "lambdaMax",
        "len",
        "alias",
        "txt",
        "alias",
        "txt",
        "alias",
        "physical_filter",
        "abstract_filter",
        "abstract_filter",
        "aliases",
        "add",
        "physical_filter",
        "afw_name",
        "afw_name",
        "aliases",
        "add",
        "physical_filter",
        "afw_name",
        "abstract_filter",
        "aliases",
        "add",
        "abstract_filter",
        "lsst",
        "afw",
        "image",
        "utils",
        "defineFilter",
        "name",
        "lambdaEff",
        "lambdaEff",
        "lambdaMin",
        "lambdaMin",
        "lambdaMax",
        "lambdaMax",
        "alias",
        "sorted",
        "aliases"
    ],
    "literals": [
        "\"FilterDefinition\"",
        "\"FilterDefinitionCollection\"",
        "\"FilterDefinitions(\"",
        "', '",
        "')'",
        "f\"afw Filters were already defined on: {self._defined}\"",
        "'alias'",
        "f\"FilterDefinition(physical_filter='{self.physical_filter}', lambdaEff='{self.lambdaEff}'\"",
        "f\", abstract_filter='{self.abstract_filter}'\"",
        "f\", afw_name='{self.afw_name}'\"",
        "f\", lambdaMin='{self.lambdaMin}'\"",
        "f\", lambdaMax='{self.lambdaMax}'\"",
        "f\", alias='{self.alias}'\"",
        "\")\""
    ],
    "variables": [
        "__all__",
        "_defined",
        "_filters",
        "FilterDefinitionCollection",
        "_defined",
        "msg",
        "cls",
        "_defined",
        "physical_filter",
        "lambdaEff",
        "abstract_filter",
        "afw_name",
        "lambdaMin",
        "lambdaMax",
        "alias",
        "txt",
        "aliases",
        "name",
        "name",
        "name"
    ],
    "comments": [
        "This file is part of obs_base.",
        "",
        "Developed for the LSST Data Management System.",
        "This product includes software developed by the LSST Project",
        "(http://www.lsst.org).",
        "See the COPYRIGHT file at the top-level directory of this distribution",
        "for details of code ownership.",
        "",
        "This program is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with this program.  If not, see <http://www.gnu.org/licenses/>.",
        "noop: we've already defined these filters, so do nothing",
        "force alias to be immutable, so that hashing works",
        "Only add `physical_filter/abstract_filter` as an alias if afw_name is defined.ee"
    ],
    "docstrings": [
        "\"\"\"Classes to allow obs packages to define the filters used by an Instrument\nand for use by `lsst.afw.image.Filter`, gen2 dataIds, and gen3 Dimensions.\n\"\"\"",
        "\"\"\"An order-preserving collection of `FilterDefinition`s.\n\n    Parameters\n    ----------\n    filters : sequence\n        The filters in this collection.\n    \"\"\"",
        "\"\"\"Whether these filters have been defined via\n    `~lsst.afw.image.utils.defineFilter`. If so, set to ``self`` to identify\n    the filter collection that defined them.\n    \"\"\"",
        "\"\"\"Define all the filters to `lsst.afw.image.Filter`.\n\n        `~lsst.afw.image.Filter` objects are singletons, so we protect against\n        filters being defined multiple times.\n\n        Raises\n        ------\n        RuntimeError\n            Raised if any other `FilterDefinitionCollection` has already called\n            ``defineFilters``.\n        \"\"\"",
        "\"\"\"Reset the afw Filter definitions and clear the `defined` singleton.\n        Use this in unittests that define different filters.\n        \"\"\"",
        "\"\"\"The definition of an instrument's filter bandpass.\n\n    This class is used to interface between the `~lsst.afw.image.Filter` class\n    and the Gen2 `~lsst.daf.persistence.CameraMapper` and Gen3\n    `~lsst.daf.butler.Instruments` and ``physical_filter``/``abstract_filter``\n    `~lsst.daf.butler.Dimension`.\n\n    This class is likely temporary, until we have a better versioned filter\n    definition system that includes complete transmission information.\n    \"\"\"",
        "\"\"\"The name of a filter associated with a particular instrument: unique for\n    each piece of glass. This should match the exact filter name used in the\n    observatory's metadata.\n\n    This name is used to define the ``physical_filter`` gen3 Butler Dimension.\n\n    If neither ``abstract_filter`` or ``afw_name`` is defined, this is used\n    as the `~lsst.afw.image.Filter` ``name``, otherwise it is added to the\n    list of `~lsst.afw.image.Filter` aliases.\n    \"\"\"",
        "\"\"\"The effective wavelength of this filter (nm).\"\"\"",
        "\"\"\"The generic name of a filter not associated with a particular instrument\n    (e.g. `r` for the SDSS Gunn r-band, which could be on SDSS, LSST, or HSC).\n\n    Not all filters have an abstract filter: engineering or test filters may\n    not have a genericly-termed filter name.\n\n    If specified and if `afw_name` is None, this is used as the\n    `~lsst.afw.image.Filter` ``name`` field, otherwise it is added to the list\n    of `~lsst.afw.image.Filter` aliases.\n    \"\"\"",
        "\"\"\"If not None, the name of the `~lsst.afw.image.Filter` object.\n\n    This is distinct from physical_filter and abstract_filter to maintain\n    backwards compatibility in some obs packages.\n    For example, for HSC there are two distinct ``r`` and ``i`` filters, named\n    ``r/r2`` and ``i/i2``.\n    \"\"\"",
        "\"\"\"The minimum wavelength of this filter (nm; defined as 1% throughput)\"\"\"",
        "\"\"\"The maximum wavelength of this filter (nm; defined as 1% throughput)\"\"\"",
        "\"\"\"Alternate names for this filter. These are added to the\n    `~lsst.afw.image.Filter` alias list.\n    \"\"\"",
        "\"\"\"Declare the filters via afw.image.Filter.\n        \"\"\""
    ],
    "functions": [
        "__getitem__",
        "__len__",
        "__str__",
        "defineFilters",
        "reset",
        "__post_init__",
        "__str__",
        "defineFilter"
    ],
    "classes": [
        "FilterDefinitionCollection",
        "FilterDefinition"
    ]
}