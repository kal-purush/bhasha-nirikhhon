{
    "identifiers": [
        "print_function",
        "argparse",
        "datetime",
        "difflib",
        "glob",
        "os",
        "re",
        "sys",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "help",
        "nargs",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "abspath",
        "rootdir",
        "parser",
        "add_argument",
        "rootdir",
        "help",
        "os",
        "path",
        "join",
        "rootdir",
        "parser",
        "add_argument",
        "default_boilerplate_dir",
        "parser",
        "add_argument",
        "help",
        "action",
        "parser",
        "parse_args",
        "sys",
        "stderr",
        "args",
        "verbose",
        "open",
        "path",
        "glob",
        "glob",
        "os",
        "path",
        "join",
        "args",
        "boilerplate_dir",
        "os",
        "path",
        "basename",
        "path",
        "split",
        "open",
        "path",
        "ref_file",
        "read",
        "splitlines",
        "ref_file",
        "close",
        "refs",
        "filename",
        "data",
        "regexs",
        "d",
        "skipped_ungenerated_files",
        "d",
        "filename",
        "regexs",
        "p",
        "search",
        "data",
        "filename",
        "refs",
        "regexs",
        "open",
        "filename",
        "exc",
        "filename",
        "exc",
        "file",
        "verbose_out",
        "f",
        "read",
        "f",
        "close",
        "is_generated_file",
        "filename",
        "data",
        "regexs",
        "os",
        "path",
        "basename",
        "filename",
        "file_extension",
        "filename",
        "generated",
        "extension",
        "extension",
        "extension",
        "refs",
        "extension",
        "refs",
        "basename",
        "extension",
        "extension",
        "regexs",
        "p",
        "subn",
        "data",
        "extension",
        "regexs",
        "p",
        "subn",
        "data",
        "data",
        "splitlines",
        "len",
        "len",
        "data",
        "filename",
        "len",
        "data",
        "len",
        "file",
        "verbose_out",
        "data",
        "len",
        "regexs",
        "d",
        "data",
        "p",
        "search",
        "d",
        "generated",
        "filename",
        "file",
        "verbose_out",
        "filename",
        "file",
        "verbose_out",
        "generated",
        "regexs",
        "i",
        "d",
        "data",
        "data",
        "i",
        "p",
        "subn",
        "d",
        "found",
        "data",
        "filename",
        "file",
        "verbose_out",
        "args",
        "verbose",
        "file",
        "verbose_out",
        "line",
        "difflib",
        "unified_diff",
        "data",
        "filename",
        "lineterm",
        "line",
        "file",
        "verbose_out",
        "file",
        "verbose_out",
        "filename",
        "os",
        "path",
        "splitext",
        "filename",
        "split",
        "lower",
        "files",
        "pathname",
        "files",
        "x",
        "pathname",
        "x",
        "skipped_dirs",
        "newfiles",
        "append",
        "pathname",
        "i",
        "pathname",
        "newfiles",
        "os",
        "path",
        "isabs",
        "pathname",
        "os",
        "path",
        "join",
        "args",
        "rootdir",
        "pathname",
        "newfiles",
        "extensions",
        "len",
        "args",
        "filenames",
        "args",
        "filenames",
        "root",
        "dirs",
        "walkfiles",
        "os",
        "walk",
        "args",
        "rootdir",
        "d",
        "skipped_dirs",
        "d",
        "dirs",
        "dirs",
        "remove",
        "d",
        "name",
        "walkfiles",
        "os",
        "path",
        "join",
        "root",
        "name",
        "files",
        "append",
        "pathname",
        "normalize_files",
        "files",
        "pathname",
        "files",
        "os",
        "path",
        "basename",
        "pathname",
        "file_extension",
        "pathname",
        "extension",
        "extensions",
        "basename",
        "extensions",
        "outfiles",
        "append",
        "pathname",
        "outfiles",
        "datetime",
        "datetime",
        "now",
        "year",
        "join",
        "year",
        "year",
        "years",
        "re",
        "compile",
        "re",
        "compile",
        "get_dates",
        "re",
        "compile",
        "re",
        "MULTILINE",
        "re",
        "compile",
        "re",
        "MULTILINE",
        "re",
        "compile",
        "regexs",
        "get_regexs",
        "get_refs",
        "get_files",
        "refs",
        "keys",
        "filename",
        "filenames",
        "file_passes",
        "filename",
        "refs",
        "regexs",
        "filename",
        "file",
        "sys",
        "stdout",
        "sys",
        "exit",
        "main"
    ],
    "literals": [
        "\"filenames\"",
        "\"list of files to check, all files if unspecified\"",
        "'*'",
        "\"/../../\"",
        "\"--rootdir\"",
        "\"root directory to examine\"",
        "\"hack/boilerplate\"",
        "\"--boilerplate-dir\"",
        "\"-v\"",
        "\"--verbose\"",
        "\"give verbose output regarding why a file does not pass\"",
        "\"store_true\"",
        "\"/dev/null\"",
        "\"w\"",
        "\"boilerplate.*.txt\"",
        "\".\"",
        "'r'",
        "\"generated\"",
        "'r'",
        "\"Unable to open %s: %s\"",
        "\"go\"",
        "\"generatego\"",
        "\"bzl\"",
        "\"generatebzl\"",
        "\"\"",
        "\"go\"",
        "\"generatego\"",
        "\"go_build_constraints\"",
        "\"\"",
        "\"sh\"",
        "\"shebang\"",
        "\"\"",
        "'File %s smaller than reference (%d < %d)'",
        "\"year\"",
        "'File %s has the YEAR field, but it should not be in generated file'",
        "'File %s has the YEAR field, but missing the year of date'",
        "\"date\"",
        "'YEAR'",
        "\"Header in %s does not match reference, diff:\"",
        "'reference'",
        "''",
        "\".\"",
        "'Godeps'",
        "'third_party'",
        "'_gopath'",
        "'_output'",
        "'.git'",
        "'cluster/env.sh'",
        "\"vendor\"",
        "\"test/e2e/generated/bindata.go\"",
        "\"hack/boilerplate/test\"",
        "\"pkg/kubectl/generated/bindata.go\"",
        "'hack/lib/swagger.sh'",
        "'hack/boilerplate/boilerplate.py'",
        "'(%s)'",
        "'|'",
        "\"year\"",
        "'YEAR'",
        "\"date\"",
        "\"go_build_constraints\"",
        "r\"^(// \\+build.*\\n)+\\n\"",
        "\"shebang\"",
        "r\"^(#!.*\\n)\\n*\"",
        "\"generated\"",
        "'DO NOT EDIT'",
        "\"__main__\""
    ],
    "variables": [
        "parser",
        "rootdir",
        "rootdir",
        "default_boilerplate_dir",
        "args",
        "verbose_out",
        "refs",
        "extension",
        "ref_file",
        "refs",
        "extension",
        "p",
        "f",
        "data",
        "generated",
        "basename",
        "extension",
        "extension",
        "extension",
        "p",
        "data",
        "found",
        "p",
        "data",
        "found",
        "data",
        "data",
        "p",
        "p",
        "found",
        "skipped_dirs",
        "skipped_ungenerated_files",
        "newfiles",
        "newfiles",
        "i",
        "files",
        "files",
        "pathname",
        "files",
        "outfiles",
        "basename",
        "extension",
        "years",
        "regexs",
        "regexs",
        "regexs",
        "regexs",
        "regexs",
        "regexs",
        "regexs",
        "refs",
        "filenames"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Copyright 2015 The Kubernetes Authors.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "determine if the file is automatically generated",
        "remove extra content from the top of files",
        "if our test file is smaller than the reference it surely fails!",
        "trim our file to the same number of lines as the reference file",
        "Replace all occurrences of the regex \"2014|2015|2016|2017|2018\" with \"YEAR\"",
        "if we don't match the reference at this point, fail",
        "list all the files contain 'DO NOT EDIT', but are not generated",
        "don't visit certain dirs. This is just a performance improvement",
        "as we would prune these later in normalize_files(). But doing it",
        "cuts down the amount of filesystem walking we do and cuts down",
        "the size of the file list",
        "Search for \"YEAR\" which exists in the boilerplate, but shouldn't in the real thing",
        "get_dates return 2014, 2015, 2016, 2017, or 2018 until the current year as a regex like: \"(2014|2015|2016|2017|2018)\";",
        "company holder names can be anything",
        "strip // +build \\n\\n build constraints",
        "strip #!.* from shell scripts",
        "Search for generated files"
    ],
    "docstrings": [],
    "functions": [
        "get_refs",
        "is_generated_file",
        "file_passes",
        "file_extension",
        "normalize_files",
        "get_files",
        "get_dates",
        "get_regexs",
        "main"
    ],
    "classes": []
}