{
    "identifiers": [
        "re",
        "Enum",
        "EnumMeta",
        "textwrap",
        "dedent",
        "indent",
        "typing",
        "Any",
        "Union",
        "pydantic",
        "BaseModel",
        "BaseSettings",
        "ValueError",
        "input_type",
        "input_type",
        "input_type",
        "repr",
        "input_type",
        "replace",
        "test_object",
        "isinstance",
        "test_object",
        "BaseSettings",
        "isinstance",
        "test_object",
        "BaseModel",
        "issubclass",
        "test_object",
        "BaseSettings",
        "issubclass",
        "test_object",
        "BaseModel",
        "instance",
        "subclass",
        "prop",
        "pydantic",
        "fields",
        "Shape",
        "Shape",
        "TUPLE",
        "Shape",
        "SET",
        "Shape",
        "LIST",
        "Shape",
        "SINGLETON",
        "prop",
        "prop",
        "__module__",
        "type_to_string",
        "prop",
        "issubclass",
        "prop",
        "type_",
        "__class__",
        "Enum",
        "issubclass",
        "prop",
        "type_",
        "__class__",
        "EnumMeta",
        "join",
        "x",
        "value",
        "x",
        "prop",
        "type_",
        "prop",
        "type_",
        "prop",
        "shape",
        "Shape",
        "SINGLETON",
        "type_to_string",
        "prop",
        "type_",
        "is_pydantic",
        "prop",
        "type_",
        "prop",
        "type_",
        "prop",
        "type_",
        "__module__",
        "prop",
        "key_field",
        "prop",
        "sub_fields",
        "sub_fields",
        "sf",
        "type_",
        "sf",
        "sub_fields",
        "f",
        "f",
        "sub_fields",
        "f",
        "type_",
        "parse_type_str",
        "f",
        "f",
        "reconstructed_props",
        "len",
        "parsed_types",
        "parsed_types",
        "join",
        "parsed_types",
        "prop",
        "shape",
        "Shape",
        "MAPPING",
        "parse_type_str",
        "key_field",
        "parse_type_str",
        "prop",
        "type_",
        "sub_fields",
        "typing_map",
        "prop",
        "shape",
        "join",
        "parse_type_str",
        "sf",
        "sf",
        "sub_fields",
        "prop",
        "type_",
        "Any",
        "prop",
        "type_",
        "prop",
        "type_",
        "prop",
        "shape",
        "typing_map",
        "keys",
        "prop",
        "sub_fields",
        "prop",
        "type_",
        "__module__",
        "prop",
        "type_",
        "typing_map",
        "prop",
        "shape",
        "parse_type_str",
        "prop",
        "type_",
        "typing_map",
        "prop",
        "shape",
        "join",
        "parse_type_str",
        "sf",
        "sf",
        "prop",
        "sub_fields",
        "prop",
        "prop_type_str",
        "base_docs",
        "target_object",
        "Union",
        "BaseModel",
        "BaseModel",
        "allow_failure",
        "base_docs",
        "base_docs",
        "is_pydantic",
        "target_object",
        "re",
        "search",
        "doc_edit",
        "re",
        "MULTILINE",
        "doc_edit",
        "endswith",
        "doc_edit",
        "dedent",
        "doc_edit",
        "target_object",
        "__fields__",
        "prop_name",
        "prop",
        "target_fields",
        "items",
        "parse_type_str",
        "prop",
        "prop",
        "schema",
        "description",
        "prop_name",
        "prop_type_str",
        "prop",
        "required",
        "prop",
        "is_pydantic",
        "prop",
        "first_line",
        "prop",
        "first_line",
        "prop",
        "indent",
        "prop_desc",
        "prop_desc",
        "new_doc",
        "first_line",
        "second_line",
        "allow_failure",
        "base_docs",
        "base_docs",
        "new_doc",
        "target",
        "Union",
        "BaseModel",
        "BaseModel",
        "allow_failure",
        "isinstance",
        "target",
        "BaseModel",
        "isinstance",
        "target",
        "issubclass",
        "target",
        "BaseModel",
        "hasattr",
        "target",
        "ALREADY_AUTODOCED_ATTR",
        "getattr",
        "target",
        "ALREADY_AUTODOCED_ATTR",
        "AutoDocError",
        "ALREADY_AUTODOCED_ATTR",
        "target",
        "__doc__",
        "setattr",
        "target",
        "AUTODOC_BASE_DOC_REFERENCE_ATTR",
        "base_doc",
        "target",
        "setattr",
        "target",
        "ALREADY_AUTODOCED_ATTR",
        "allow_failure",
        "args",
        "doc_formatter",
        "base_doc",
        "target",
        "allow_failure",
        "allow_failure",
        "target",
        "base_doc",
        "hasattr",
        "target",
        "ALREADY_AUTODOCED_ATTR",
        "setattr",
        "target",
        "ALREADY_AUTODOCED_ATTR",
        "target",
        "Union",
        "BaseModel",
        "BaseModel",
        "allow_failure",
        "ignore_reapply",
        "force_reapply",
        "AutoPydanticDocGenerator",
        "target",
        "allow_failure",
        "allow_failure",
        "AutoDocError",
        "ignore_reapply",
        "force_reapply",
        "target",
        "__doc__",
        "auto_gen_docs_on_demand",
        "target",
        "allow_failure",
        "allow_failure",
        "ignore_reapply",
        "ignore_reapply",
        "force_reapply",
        "target",
        "hasattr",
        "target",
        "AutoPydanticDocGenerator",
        "AUTODOC_BASE_DOC_REFERENCE_ATTR",
        "getattr",
        "target",
        "AutoPydanticDocGenerator",
        "AUTODOC_BASE_DOC_REFERENCE_ATTR",
        "target",
        "__doc__"
    ],
    "literals": [
        "\"auto_gen_docs_on_demand\"",
        "\"get_base_docs\"",
        "\"typing.\"",
        "\"\"",
        "\"Tuple\"",
        "\"Set\"",
        "\"List\"",
        "\"Union\"",
        "\"typing\"",
        "'{'",
        "','",
        "'}'",
        "f\":class:`{prop.type_.__name__}`\"",
        "\"typing\"",
        "\"\"",
        "\"Union[\"",
        "', '",
        "']'",
        "\"Dict[\"",
        "', '",
        "']'",
        "'['",
        "', '",
        "']'",
        "\"Any\"",
        "\"ConstrainedInt\"",
        "\"ConstrainedInt\"",
        "\"ConstrainedFloat\"",
        "\"ConstrainedFloat\"",
        "\"pydantic.types\"",
        "'['",
        "']'",
        "'['",
        "', '",
        "']'",
        "''",
        "r'^\\s*Parameters\\n'",
        "'\\n\\n'",
        "\"\\n\\n\"",
        "\"Parameters\\n----------\\n\"",
        "' : '",
        "\", Optional\"",
        "f\", Default: {prop.default}\"",
        "\"\\n\"",
        "\"    \"",
        "\"\"",
        "\"\\n\"",
        "\"__model_autodoc_applied__\"",
        "\"__base_doc__\"",
        "\"Object already has autodoc rules applied to it, cannot re-apply auto documentation\"",
        "f\"without first resetting the __doc__ attribute and setting \"",
        "f\"{self.ALREADY_AUTODOCED_ATTR} to False (or deleting it)\"",
        "\"Cannot use auto-doc tech on non-BaseModel subclasses\""
    ],
    "variables": [
        "__all__",
        "instance",
        "instance",
        "subclass",
        "subclass",
        "typing_map",
        "prop_type_str",
        "prop_type_str",
        "prop_type_str",
        "prop_type_str",
        "prop_type_str",
        "key_field",
        "sub_fields",
        "reconstructed_props",
        "parsed_types",
        "prop_type_str",
        "prop_type_str",
        "prop_type_str",
        "prop_type_str",
        "prop_type_str",
        "prop_type_str",
        "prop_type_str",
        "prop_type_str",
        "prop_type_str",
        "prop_type_str",
        "prop_type_str",
        "doc_edit",
        "doc_edit",
        "new_doc",
        "target_fields",
        "prop_type_str",
        "prop_desc",
        "first_line",
        "second_line",
        "new_doc",
        "new_doc",
        "ALREADY_AUTODOCED_ATTR",
        "AUTODOC_BASE_DOC_REFERENCE_ATTR",
        "base_doc",
        "target",
        "allow_failure",
        "__doc__",
        "target",
        "__doc__"
    ],
    "comments": [
        "Import here to minimize issues",
        "True native Python type",
        "Enumerate, have to do the __class__ or issubclass(prop.type_) throws issues later.",
        "Native Python type buried in a Field",
        "Pydantic types",
        "Typing Types",
        "Special case of Optional[]",
        "if sub_fields is not None and any([sf.sub_fields is type(None) for sf in sub_fields]):",
        "Not \"optional\", but iterable",
        "Single item",
        "A bit of a catch-all",
        "Finally, with nothing else to do...",
        "Convert the None to regex-parsable string",
        "Is pydantic and not already formatted",
        "Add the white space",
        "Add Parameters separate",
        "Get Pydantic fields",
        "Go through each property",
        "Handle Type",
        "Handle (optional) description",
        "Combine in the following format:",
        "name : type(, Optional, Default)",
        "description",
        "Write the prop description",
        "Finally, write the detailed doc string",
        "Assign the new doc string",
        "Checks against already instanced and uninstanced classes while avoiding unhahsable type error",
        "Corner case where trying to reapply and failing cannot delete the new self mid __init__ since",
        "base_doc has not been set.",
        "Reapply by force to allow inherited models to auto doc as well"
    ],
    "docstrings": [
        "\"\"\"\n    Helper error Raised when the autodoc application failed.\n\n    Traps this very specific error and not other ValueErrors\n    \"\"\"",
        "\"\"\"\n    Generate the docstring for a Pydantic object automatically based on the parameters\n\n    This could use improvement.\n\n    Might be ported to Elemental at some point\n    \"\"\"",
        "\"\"\"\n    Dynamic Doc generator, should never be called directly and only though augo_gen_docs_on_demand\n    \"\"\"",
        "\"\"\"Tell a Pydantic base model to generate its docstrings on the fly with the tech here \"\"\"",
        "\"\"\"Get the non-auto formatted docs, if present, otherwise just get the basic docstring\"\"\""
    ],
    "functions": [
        "type_to_string",
        "is_pydantic",
        "parse_type_str",
        "doc_formatter",
        "__get__",
        "__del__",
        "auto_gen_docs_on_demand",
        "get_base_docs"
    ],
    "classes": [
        "AutoDocError",
        "AutoPydanticDocGenerator"
    ]
}