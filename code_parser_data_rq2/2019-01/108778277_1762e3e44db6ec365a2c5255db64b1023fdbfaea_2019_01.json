{
    "identifiers": [
        "sketch",
        "node",
        "sync",
        "color",
        "p5",
        "color",
        "p5",
        "color",
        "p5",
        "gray",
        "alpha",
        "p5",
        "v1",
        "v2",
        "v3",
        "alpha",
        "p5",
        "value",
        "alpha",
        "p5",
        "values",
        "p5",
        "color",
        "p5",
        "p5",
        "color",
        "p5",
        "color",
        "p5",
        "c1",
        "p5",
        "c2",
        "p5",
        "amt",
        "p5",
        "color",
        "p5",
        "color",
        "p5",
        "color",
        "p5",
        "color",
        "p5",
        "colorstring",
        "a",
        "gray",
        "a",
        "v1",
        "v2",
        "v3",
        "a",
        "values",
        "image",
        "p5",
        "a",
        "mode",
        "max",
        "mode",
        "max1",
        "max2",
        "max3",
        "maxA",
        "v1",
        "v2",
        "v3",
        "alpha",
        "value",
        "alpha",
        "values",
        "color",
        "p5",
        "v1",
        "v2",
        "v3",
        "alpha",
        "value",
        "alpha",
        "values",
        "color",
        "p5",
        "x",
        "y",
        "w",
        "h",
        "start",
        "stop",
        "mode",
        "x",
        "y",
        "w",
        "h",
        "x",
        "y",
        "w",
        "h",
        "detail",
        "x1",
        "y1",
        "x2",
        "y2",
        "x1",
        "y1",
        "z1",
        "x2",
        "y2",
        "z2",
        "x",
        "y",
        "z",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "x4",
        "y4",
        "x1",
        "y1",
        "z1",
        "x2",
        "y2",
        "z2",
        "x3",
        "y3",
        "z3",
        "x4",
        "y4",
        "z4",
        "x",
        "y",
        "w",
        "h",
        "tl",
        "tr",
        "br",
        "bl",
        "x",
        "y",
        "w",
        "h",
        "detailX",
        "detailY",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "mode",
        "mode",
        "cap",
        "join",
        "weight",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "x4",
        "y4",
        "x1",
        "y1",
        "z1",
        "x2",
        "y2",
        "z2",
        "x3",
        "y3",
        "z3",
        "x4",
        "y4",
        "z4",
        "detail",
        "a",
        "b",
        "c",
        "d",
        "t",
        "a",
        "b",
        "c",
        "d",
        "t",
        "x1",
        "y1",
        "x2",
        "y2",
        "x3",
        "y3",
        "x4",
        "y4",
        "x1",
        "y1",
        "z1",
        "x2",
        "y2",
        "z2",
        "x3",
        "y3",
        "z3",
        "x4",
        "y4",
        "z4",
        "resolution",
        "amount",
        "a",
        "b",
        "c",
        "d",
        "t",
        "a",
        "b",
        "c",
        "d",
        "t",
        "contents",
        "x",
        "y",
        "fps",
        "val",
        "val",
        "w",
        "h",
        "renderer",
        "w",
        "h",
        "noRedraw",
        "w",
        "h",
        "renderer",
        "p5",
        "mode",
        "n",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "angle",
        "axis",
        "p5",
        "angle",
        "angle",
        "angle",
        "s",
        "p5",
        "y",
        "z",
        "scales",
        "p5",
        "angle",
        "angle",
        "x",
        "y",
        "z",
        "vector",
        "p5",
        "kind",
        "x2",
        "y2",
        "x3",
        "y3",
        "x4",
        "y4",
        "x",
        "y",
        "mode",
        "cx",
        "cy",
        "x3",
        "y3",
        "x",
        "y",
        "x",
        "y",
        "z",
        "u",
        "v",
        "key",
        "value",
        "p5",
        "key",
        "value",
        "p5",
        "value",
        "value",
        "code",
        "width",
        "height",
        "p5",
        "selectedCanvas",
        "p5",
        "filename",
        "extension",
        "filename",
        "extension",
        "filename",
        "extension",
        "duration",
        "framerate",
        "callback",
        "p1",
        "path",
        "successCallback",
        "p1",
        "p5",
        "failureCallback",
        "p1",
        "p5",
        "img",
        "p5",
        "p5",
        "x",
        "y",
        "width",
        "height",
        "img",
        "p5",
        "p5",
        "dx",
        "dy",
        "dWidth",
        "dHeight",
        "sx",
        "sy",
        "sWidth",
        "sHeight",
        "v1",
        "v2",
        "v3",
        "alpha",
        "value",
        "alpha",
        "values",
        "color",
        "p5",
        "mode",
        "srcImage",
        "p5",
        "sx",
        "sy",
        "sw",
        "sh",
        "dx",
        "dy",
        "dw",
        "dh",
        "blendMode",
        "sx",
        "sy",
        "sw",
        "sh",
        "dx",
        "dy",
        "dw",
        "dh",
        "blendMode",
        "srcImage",
        "p5",
        "p5",
        "sx",
        "sy",
        "sw",
        "sh",
        "dx",
        "dy",
        "dw",
        "dh",
        "sx",
        "sy",
        "sw",
        "sh",
        "dx",
        "dy",
        "dw",
        "dh",
        "filterType",
        "filterParam",
        "x",
        "y",
        "w",
        "h",
        "p5",
        "x",
        "y",
        "c",
        "x",
        "y",
        "w",
        "h",
        "path",
        "jsonpOptions",
        "datatype",
        "callback",
        "errorCallback",
        "filename",
        "callback",
        "errorCallback",
        "filename",
        "options",
        "callback",
        "errorCallback",
        "filename",
        "callback",
        "errorCallback",
        "filename",
        "callback",
        "errorCallback",
        "path",
        "datatype",
        "data",
        "callback",
        "errorCallback",
        "path",
        "datatype",
        "data",
        "callback",
        "errorCallback",
        "path",
        "method",
        "datatype",
        "data",
        "callback",
        "errorCallback",
        "path",
        "options",
        "callback",
        "errorCallback",
        "name",
        "extension",
        "p5",
        "objectOrFilename",
        "filename",
        "options",
        "json",
        "filename",
        "optimize",
        "filename",
        "extension",
        "Table",
        "p5",
        "filename",
        "options",
        "n",
        "n",
        "n",
        "low",
        "high",
        "x1",
        "y1",
        "x2",
        "y2",
        "x1",
        "y1",
        "z1",
        "x2",
        "y2",
        "z2",
        "n",
        "n",
        "start",
        "stop",
        "amt",
        "n",
        "a",
        "b",
        "value",
        "start1",
        "stop1",
        "start2",
        "stop2",
        "withinBounds",
        "n0",
        "n1",
        "nums",
        "n0",
        "n1",
        "nums",
        "value",
        "start",
        "stop",
        "n",
        "e",
        "n",
        "n",
        "n",
        "x",
        "y",
        "z",
        "p5",
        "x",
        "y",
        "z",
        "lod",
        "falloff",
        "seed",
        "seed",
        "min",
        "max",
        "choices",
        "mean",
        "sd",
        "value",
        "value",
        "value",
        "y",
        "x",
        "angle",
        "angle",
        "angle",
        "radians",
        "degrees",
        "mode",
        "horizAlign",
        "vertAlign",
        "leading",
        "theSize",
        "theStyle",
        "theText",
        "path",
        "callback",
        "onError",
        "p5",
        "x",
        "y",
        "x2",
        "y2",
        "font",
        "size",
        "array",
        "value",
        "src",
        "srcPosition",
        "dst",
        "dstPosition",
        "length",
        "src",
        "dst",
        "length",
        "a",
        "b",
        "array",
        "count",
        "value",
        "position",
        "start",
        "count",
        "n",
        "ns",
        "n",
        "n",
        "n",
        "ns",
        "n",
        "ns",
        "n",
        "ns",
        "n",
        "digits",
        "ns",
        "digits",
        "n",
        "ns",
        "separator",
        "regexp",
        "regexp",
        "num",
        "left",
        "right",
        "nums",
        "left",
        "right",
        "num",
        "right",
        "nums",
        "right",
        "num",
        "left",
        "right",
        "nums",
        "left",
        "right",
        "num",
        "left",
        "right",
        "nums",
        "left",
        "right",
        "value",
        "delim",
        "value",
        "delim",
        "strs",
        "x",
        "y",
        "z",
        "centerX",
        "centerY",
        "centerZ",
        "upX",
        "upY",
        "upZ",
        "fovy",
        "aspect",
        "near",
        "far",
        "left",
        "right",
        "bottom",
        "top",
        "near",
        "far",
        "v1",
        "v2",
        "v3",
        "alpha",
        "value",
        "alpha",
        "values",
        "color",
        "p5",
        "v1",
        "v2",
        "v3",
        "position",
        "p5",
        "color",
        "p5",
        "x",
        "y",
        "z",
        "color",
        "p5",
        "position",
        "p5",
        "v1",
        "v2",
        "v3",
        "x",
        "y",
        "z",
        "v1",
        "v2",
        "v3",
        "x",
        "y",
        "z",
        "v1",
        "v2",
        "v3",
        "position",
        "p5",
        "color",
        "p5",
        "x",
        "y",
        "z",
        "color",
        "p5",
        "position",
        "p5",
        "path",
        "normalize",
        "successCallback",
        "p1",
        "p5",
        "failureCallback",
        "p1",
        "p5",
        "path",
        "successCallback",
        "p1",
        "p5",
        "failureCallback",
        "p1",
        "p5",
        "model",
        "p5",
        "vertFilename",
        "fragFilename",
        "p5",
        "vertSrc",
        "fragSrc",
        "p5",
        "s",
        "p5",
        "tex",
        "p5",
        "p5",
        "p5",
        "v1",
        "v2",
        "v3",
        "a",
        "color",
        "p5",
        "v1",
        "v2",
        "v3",
        "a",
        "color",
        "p5",
        "key",
        "value",
        "obj",
        "width",
        "height",
        "detailX",
        "detailY",
        "width",
        "Height",
        "depth",
        "detailX",
        "detailY",
        "radius",
        "detailX",
        "detailY",
        "radius",
        "height",
        "detailX",
        "detailY",
        "bottomCap",
        "topCap",
        "radius",
        "height",
        "detailX",
        "detailY",
        "cap",
        "radiusx",
        "radiusy",
        "radiusz",
        "detailX",
        "detailY",
        "radius",
        "tubeRadius",
        "detailX",
        "detailY",
        "frequency",
        "midiNote",
        "formats",
        "name",
        "container",
        "p5",
        "name",
        "container",
        "html",
        "p5",
        "html",
        "p5",
        "html",
        "p5",
        "src",
        "alt",
        "successCallback",
        "p5",
        "href",
        "html",
        "target",
        "p5",
        "min",
        "max",
        "value",
        "step",
        "p5",
        "label",
        "value",
        "p5",
        "label",
        "value",
        "p5",
        "multiple",
        "p5",
        "existing",
        "p5",
        "divId",
        "p5",
        "value",
        "p5",
        "callback",
        "multiple",
        "p5",
        "src",
        "callback",
        "p5",
        "p5",
        "src",
        "callback",
        "p5",
        "p5",
        "callback",
        "p5",
        "tag",
        "content",
        "p5",
        "volume",
        "rampTime",
        "timeFromNow",
        "p5",
        "format",
        "red",
        "green",
        "blue",
        "alpha",
        "parent",
        "p5",
        "p5",
        "p5",
        "id",
        "p5",
        "theClass",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "fxn",
        "p5",
        "callback",
        "fxn",
        "p5",
        "theClass",
        "p5",
        "theClass",
        "p5",
        "child",
        "p5",
        "p5",
        "align",
        "p5",
        "html",
        "append",
        "p5",
        "x",
        "y",
        "p5",
        "property",
        "value",
        "p5",
        "value2",
        "p5",
        "value3",
        "p5",
        "p5",
        "attr",
        "value",
        "p5",
        "attr",
        "p5",
        "value",
        "p5",
        "p5",
        "p5",
        "w",
        "h",
        "p5",
        "p5",
        "p5",
        "elt",
        "pInst",
        "isMainCanvas",
        "key",
        "key",
        "key",
        "value",
        "key",
        "value",
        "obj",
        "key",
        "p5",
        "p5",
        "Key",
        "Amount",
        "Key",
        "Amount",
        "Key",
        "Amount",
        "Key",
        "Amount",
        "x",
        "y",
        "w",
        "h",
        "x",
        "y",
        "w",
        "h",
        "p5",
        "x",
        "y",
        "a",
        "width",
        "height",
        "srcImage",
        "p5",
        "p5",
        "sx",
        "sy",
        "sw",
        "sh",
        "dx",
        "dy",
        "dw",
        "dh",
        "sx",
        "sy",
        "sw",
        "sh",
        "dx",
        "dy",
        "dw",
        "dh",
        "srcImage",
        "p5",
        "filterType",
        "filterParam",
        "srcImage",
        "p5",
        "sx",
        "sy",
        "sw",
        "sh",
        "dx",
        "dy",
        "dw",
        "dh",
        "blendMode",
        "sx",
        "sy",
        "sw",
        "sh",
        "dx",
        "dy",
        "dw",
        "dh",
        "blendMode",
        "filename",
        "extension",
        "data",
        "data",
        "rows",
        "p5",
        "p5",
        "row",
        "p5",
        "id",
        "rowID",
        "p5",
        "p5",
        "value",
        "column",
        "p5",
        "value",
        "column",
        "p5",
        "regexp",
        "column",
        "p5",
        "regexp",
        "column",
        "p5",
        "column",
        "title",
        "chars",
        "column",
        "column",
        "column",
        "column",
        "value",
        "row",
        "column",
        "value",
        "row",
        "column",
        "value",
        "row",
        "column",
        "row",
        "column",
        "row",
        "column",
        "headerColumn",
        "separator",
        "column",
        "value",
        "column",
        "value",
        "column",
        "value",
        "column",
        "column",
        "column",
        "p5",
        "the",
        "name",
        "p5",
        "name",
        "p5",
        "a",
        "p5",
        "name",
        "the",
        "name",
        "defaultValue",
        "name",
        "defaultValue",
        "name",
        "value",
        "defaultValue",
        "text",
        "x",
        "y",
        "z",
        "p5",
        "value",
        "p5",
        "p5",
        "p5",
        "x",
        "y",
        "z",
        "p5",
        "value",
        "p5",
        "p5",
        "v1",
        "p5",
        "v2",
        "p5",
        "target",
        "p5",
        "v1",
        "p5",
        "v2",
        "p5",
        "p5",
        "x",
        "y",
        "z",
        "p5",
        "value",
        "p5",
        "p5",
        "v1",
        "p5",
        "v2",
        "p5",
        "target",
        "p5",
        "v1",
        "p5",
        "v2",
        "p5",
        "p5",
        "n",
        "p5",
        "v",
        "p5",
        "n",
        "target",
        "p5",
        "v",
        "p5",
        "n",
        "p5",
        "n",
        "p5",
        "v",
        "p5",
        "n",
        "target",
        "p5",
        "v",
        "p5",
        "n",
        "p5",
        "vecT",
        "p5",
        "x",
        "y",
        "z",
        "value",
        "p5",
        "v1",
        "p5",
        "v2",
        "p5",
        "v",
        "p5",
        "p5",
        "v1",
        "p5",
        "v2",
        "p5",
        "v",
        "p5",
        "v1",
        "p5",
        "v2",
        "p5",
        "p5",
        "max",
        "p5",
        "len",
        "p5",
        "angle",
        "p5",
        "the",
        "p5",
        "x",
        "y",
        "z",
        "amt",
        "p5",
        "v",
        "p5",
        "amt",
        "p5",
        "v1",
        "p5",
        "v2",
        "p5",
        "amt",
        "target",
        "p5",
        "v1",
        "p5",
        "v2",
        "p5",
        "amt",
        "x",
        "y",
        "z",
        "value",
        "p5",
        "angle",
        "length",
        "p5",
        "theta",
        "phi",
        "length",
        "p5",
        "p5",
        "p5",
        "line",
        "x",
        "y",
        "fontSize",
        "options",
        "txt",
        "x",
        "y",
        "fontSize",
        "options",
        "vertData",
        "detailX",
        "detailY",
        "callback",
        "p5",
        "p5",
        "p5",
        "p5",
        "p5",
        "uniformName",
        "data",
        "p5",
        "elt",
        "p5",
        "p5",
        "p5",
        "p5",
        "p5",
        "autoplay",
        "p5",
        "val",
        "p5",
        "speed",
        "p5",
        "time",
        "p5",
        "callback",
        "p5",
        "audioNode",
        "time",
        "callback",
        "value",
        "id",
        "id",
        "file",
        "path",
        "successCallback",
        "errorCallback",
        "whileLoadingCallback",
        "path",
        "successCallback",
        "errorCallback",
        "whileLoading",
        "startTime",
        "rate",
        "amp",
        "cueStart",
        "duration",
        "startTime",
        "startTime",
        "rate",
        "amp",
        "cueLoopStart",
        "duration",
        "startTime",
        "volume",
        "rampTime",
        "timeFromNow",
        "panValue",
        "timeFromNow",
        "playbackRate",
        "cueTime",
        "duration",
        "length",
        "callback",
        "path",
        "callback",
        "buf",
        "callback",
        "initThreshold",
        "minThreshold",
        "minPeaks",
        "time",
        "callback",
        "value",
        "id",
        "smoothing",
        "snd",
        "smoothing",
        "channel",
        "smoothing",
        "bins",
        "source",
        "bins",
        "precision",
        "bins",
        "scale",
        "frequency1",
        "frequency2",
        "smoothing",
        "N",
        "octaveBands",
        "N",
        "fCtr0",
        "value",
        "secondsFromNow",
        "input",
        "number",
        "p5",
        "number",
        "p5",
        "number",
        "inMin",
        "inMax",
        "outMin",
        "outMax",
        "p5",
        "freq",
        "time",
        "frequency",
        "secondsFromNow",
        "vol",
        "rampTime",
        "timeFromNow",
        "Frequency",
        "rampTime",
        "timeFromNow",
        "unit",
        "panning",
        "timeFromNow",
        "phase",
        "number",
        "p5",
        "number",
        "p5",
        "inMin",
        "inMax",
        "outMin",
        "outMax",
        "p5",
        "p5",
        "freq",
        "p5",
        "freq",
        "p5",
        "freq",
        "p5",
        "freq",
        "attackTime",
        "attackLevel",
        "decayTime",
        "decayLevel",
        "releaseTime",
        "releaseLevel",
        "attackTime",
        "decayTime",
        "susRatio",
        "releaseTime",
        "aLevel",
        "rLevel",
        "inputs",
        "isExp",
        "unit",
        "startTime",
        "sustainTime",
        "unit",
        "secondsFromNow",
        "unit",
        "secondsFromNow",
        "unit",
        "secondsFromNow",
        "v",
        "v2",
        "number",
        "p5",
        "number",
        "p5",
        "inMin",
        "inMax",
        "outMin",
        "outMax",
        "p5",
        "p5",
        "freq",
        "w",
        "width",
        "p5",
        "panning",
        "timeFromNow",
        "volume",
        "rampTime",
        "timeFromNow",
        "unit",
        "errorCallback",
        "successCallback",
        "errorCallback",
        "unit",
        "smoothing",
        "vol",
        "time",
        "successCallback",
        "errorCallback",
        "num",
        "ac",
        "input",
        "output",
        "_drywet",
        "wet",
        "vol",
        "rampTime",
        "tFromNow",
        "arguments",
        "fade",
        "unit",
        "p5",
        "Signal",
        "freq",
        "res",
        "freq",
        "res",
        "timeFromNow",
        "freq",
        "timeFromNow",
        "res",
        "timeFromNow",
        "gain",
        "t",
        "p5",
        "p5",
        "p5",
        "p5",
        "_eqsize",
        "src",
        "src",
        "xVal",
        "yVal",
        "zVal",
        "time",
        "xVal",
        "yVal",
        "zVal",
        "time",
        "maxDistance",
        "rolloffFactor",
        "maxDistance",
        "rolloffFactor",
        "p5",
        "Signal",
        "delayTime",
        "feedback",
        "lowPass",
        "delayTime",
        "feedback",
        "cutoffFreq",
        "res",
        "volume",
        "rampTime",
        "timeFromNow",
        "unit",
        "p5",
        "src",
        "seconds",
        "decayRate",
        "reverse",
        "seconds",
        "decayRate",
        "reverse",
        "volume",
        "rampTime",
        "timeFromNow",
        "unit",
        "p5",
        "path",
        "callback",
        "errorCallback",
        "path",
        "callback",
        "errorCallback",
        "p5",
        "src",
        "path",
        "callback",
        "errorCallback",
        "path",
        "callback",
        "errorCallback",
        "id",
        "BPM",
        "rampTime",
        "name",
        "callback",
        "sequence",
        "steps",
        "tatums",
        "BPM",
        "rampTime",
        "time",
        "time",
        "time",
        "time",
        "phrase",
        "p5",
        "phraseName",
        "phraseName",
        "phraseName",
        "sequence",
        "callback",
        "parts",
        "p5",
        "BPM",
        "rampTime",
        "callback",
        "interval",
        "timeFromNow",
        "timeFromNow",
        "timeFromNow",
        "otherLoop",
        "timeFromNow",
        "p5",
        "src",
        "attack",
        "knee",
        "ratio",
        "threshold",
        "release",
        "attack",
        "knee",
        "ratio",
        "threshold",
        "release",
        "attack",
        "time",
        "knee",
        "time",
        "ratio",
        "time",
        "threshold",
        "time",
        "release",
        "time",
        "unit",
        "soundFile",
        "p5",
        "duration",
        "callback",
        "soundFile",
        "p5",
        "name",
        "freq1",
        "freq2",
        "threshold",
        "framesPerPeak",
        "fftObject",
        "p5",
        "callback",
        "val",
        "src",
        "unit",
        "volume",
        "rampTime",
        "timeFromNow",
        "unit",
        "note",
        "velocity",
        "secondsFromNow",
        "sustainTime",
        "note",
        "velocity",
        "secondsFromNow",
        "secondsFromNow",
        "attackTime",
        "decayTime",
        "susRatio",
        "releaseTime",
        "vol",
        "rampTime",
        "unit",
        "synthVoice",
        "polyValue",
        "note",
        "velocity",
        "secondsFromNow",
        "sustainTime",
        "note",
        "attackTime",
        "decayTime",
        "susRatio",
        "releaseTime",
        "note",
        "attackTime",
        "decayTime",
        "susRatio",
        "releaseTime",
        "note",
        "velocity",
        "secondsFromNow",
        "note",
        "secondsFromNow",
        "unit",
        "p5",
        "amount",
        "oversample",
        "amount",
        "oversample",
        "amount",
        "oversample",
        "RGB",
        "HSB",
        "HSL",
        "CHORD",
        "PIE",
        "OPEN",
        "CENTER",
        "RADIUS",
        "CORNER",
        "CORNERS",
        "CORNER",
        "CORNERS",
        "CENTER",
        "RADIUS",
        "SQUARE",
        "PROJECT",
        "ROUND",
        "MITER",
        "BEVEL",
        "ROUND",
        "P2D",
        "WEBGL",
        "BLEND",
        "DARKEST",
        "LIGHTEST",
        "DIFFERENCE",
        "MULTIPLY",
        "EXCLUSION",
        "SCREEN",
        "REPLACE",
        "OVERLAY",
        "HARD_LIGHT",
        "SOFT_LIGHT",
        "DODGE",
        "BURN",
        "ADD",
        "NORMAL",
        "POINTS",
        "LINES",
        "TRIANGLES",
        "TRIANGLE_FAN",
        "TRIANGLE_STRIP",
        "QUADS",
        "QUAD_STRIP",
        "CLOSE",
        "CORNER",
        "CORNERS",
        "CENTER",
        "THRESHOLD",
        "GRAY",
        "OPAQUE",
        "INVERT",
        "POSTERIZE",
        "BLUR",
        "ERODE",
        "DILATE",
        "BLUR",
        "RADIANS",
        "DEGREES",
        "LEFT",
        "CENTER",
        "RIGHT",
        "TOP",
        "BOTTOM",
        "CENTER",
        "BASELINE",
        "NORMAL",
        "ITALIC",
        "BOLD"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'p2d'",
        "'webgl'",
        "'degrees'",
        "'radians'",
        "'corner'",
        "'corners'",
        "'radius'",
        "'right'",
        "'left'",
        "'center'",
        "'top'",
        "'bottom'",
        "'alphabetic'",
        "'quads'",
        "'quad_strip'",
        "'close'",
        "'open'",
        "'chord'",
        "'pie'",
        "'square'",
        "'butt'",
        "'round'",
        "'bevel'",
        "'miter'",
        "'rgb'",
        "'hsb'",
        "'hsl'",
        "'source-over'",
        "'lighter'",
        "'darkest'",
        "'lighten'",
        "'difference'",
        "'exclusion'",
        "'multiply'",
        "'screen'",
        "'copy'",
        "'overlay'",
        "'hard-light'",
        "'soft-light'",
        "'color-dodge'",
        "'color-burn'",
        "'threshold'",
        "'gray'",
        "'opaque'",
        "'invert'",
        "'posterize'",
        "'dilate'",
        "'erode'",
        "'blur'",
        "'normal'",
        "'italic'",
        "'bold'",
        "'landscape'",
        "'portrait'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "This file was auto-generated. Please do not edit it.",
        "Properties from p5",
        "src/color/creating_reading.js",
        "src/color/setting.js",
        "src/core/2d_primitives.js",
        "src/core/attributes.js",
        "src/core/constants.js",
        "src/core/core.js",
        "src/core/curves.js",
        "src/core/environment.js",
        "src/core/rendering.js",
        "src/core/structure.js",
        "src/core/transform.js",
        "src/core/vertex.js",
        "src/data/p5.TypedDict.js",
        "src/events/acceleration.js",
        "src/events/keyboard.js",
        "src/events/mouse.js",
        "src/events/touch.js",
        "src/image/image.js",
        "src/image/loading_displaying.js",
        "src/image/pixels.js",
        "src/io/files.js",
        "src/math/calculation.js",
        "src/math/math.js",
        "src/math/noise.js",
        "src/math/random.js",
        "src/math/trigonometry.js",
        "src/typography/attributes.js",
        "src/typography/loading_displaying.js",
        "src/utilities/array_functions.js",
        "src/utilities/conversion.js",
        "src/utilities/string_functions.js",
        "src/utilities/time_date.js",
        "src/webgl/camera.js",
        "src/webgl/interaction.js",
        "src/webgl/light.js",
        "src/webgl/loading.js",
        "src/webgl/material.js",
        "src/webgl/p5.RendererGL.js",
        "src/webgl/primitives.js",
        "lib/addons/p5.sound.js",
        "Properties from p5.dom",
        "lib/addons/p5.dom.js",
        "Properties from p5.sound",
        "lib/addons/p5.sound.js",
        "src/color/p5.Color.js",
        "src/core/p5.Element.js",
        "lib/addons/p5.dom.js",
        "src/core/p5.Graphics.js",
        "src/core/p5.Renderer.js",
        "src/data/p5.TypedDict.js",
        "src/image/p5.Image.js",
        "src/io/files.js",
        "src/io/p5.Table.js",
        "src/io/p5.TableRow.js",
        "src/io/p5.XML.js",
        "src/math/p5.Vector.js",
        "src/typography/p5.Font.js",
        "src/webgl/p5.Geometry.js",
        "src/webgl/p5.Shader.js",
        "lib/addons/p5.dom.js",
        "lib/addons/p5.sound.js",
        "TODO: Annotate attribute \"isDetected\", defined in lib/addons/p5.sound.js, line 11388",
        "Constants"
    ],
    "docstrings": [
        "*   This is the p5 instance constructor. A p5 instance \n   *   holds all the properties and methods related to a \n   *   p5 sketch. It expects an incoming sketch closure \n   *   and it can also take an optional node parameter \n   *   for attaching the generated p5 canvas to a node. \n   *   The sketch closure takes the newly created p5 \n   *   instance as its sole argument and may optionally \n   *   set preload(), setup(), and/or draw() properties \n   *   on it for running a sketch. \n   * \n   *   A p5 sketch can run in \"global\" or \"instance\" \n   *   mode: \"global\" - all properties and methods are \n   *   attached to the window \"instance\" - all properties \n   *   and methods are bound to this p5 object\n   *\n   *   @param sketch a closure that can set optional \n   *   preload(), setup(), and/or draw() properties on \n   *   the given p5 instance\n   *   @param [node] element to attach canvas to, if a \n   *   boolean is passed in use it as sync\n   *   @param [sync] start synchronously (optional)\n   *   @return a p5 instance",
        "*   Extracts the alpha value from a color or pixel \n   *   array.\n   *\n   *   @param color p5.Color object, color components, or \n   *   CSS color\n   *   @return the alpha value",
        "*   Extracts the blue value from a color or pixel \n   *   array.\n   *\n   *   @param color p5.Color object, color components, or \n   *   CSS color\n   *   @return the blue value",
        "*   Extracts the HSB brightness value from a color or \n   *   pixel array.\n   *\n   *   @param color p5.Color object, color components, or \n   *   CSS color\n   *   @return the brightness value",
        "*   Creates colors for storing in variables of the \n   *   color datatype. The parameters are interpreted as \n   *   RGB or HSB values depending on the current \n   *   colorMode(). The default mode is RGB values from 0 \n   *   to 255 and, therefore, the function call \n   *   color(255, 204, 0) will return a bright yellow \n   *   color.  Note that if only one value is provided to \n   *   color(), it will be interpreted as a grayscale \n   *   value. Add a second value, and it will be used for \n   *   alpha transparency. When three values are \n   *   specified, they are interpreted as either RGB or \n   *   HSB values. Adding a fourth value applies alpha \n   *   transparency. \n   * \n   *  \n   *   If a single string argument is provided, RGB, RGBA \n   *   and Hex CSS color strings and all named color \n   *   strings are supported. In this case, an alpha \n   *   number value as a second argument is not \n   *   supported, the RGBA form should be used.\n   *\n   *   @param gray number specifying value between white \n   *   and black.\n   *   @param [alpha] alpha value relative to current \n   *   color range (default is 0-255)\n   *   @return resulting color",
        "*   Creates colors for storing in variables of the \n   *   color datatype. The parameters are interpreted as \n   *   RGB or HSB values depending on the current \n   *   colorMode(). The default mode is RGB values from 0 \n   *   to 255 and, therefore, the function call \n   *   color(255, 204, 0) will return a bright yellow \n   *   color.  Note that if only one value is provided to \n   *   color(), it will be interpreted as a grayscale \n   *   value. Add a second value, and it will be used for \n   *   alpha transparency. When three values are \n   *   specified, they are interpreted as either RGB or \n   *   HSB values. Adding a fourth value applies alpha \n   *   transparency. \n   * \n   *  \n   *   If a single string argument is provided, RGB, RGBA \n   *   and Hex CSS color strings and all named color \n   *   strings are supported. In this case, an alpha \n   *   number value as a second argument is not \n   *   supported, the RGBA form should be used.\n   *\n   *   @param v1 red or hue value relative to the current \n   *   color range\n   *   @param v2 green or saturation value relative to \n   *   the current color range\n   *   @param v3 blue or brightness value relative to the \n   *   current color range\n   *   @param [alpha] alpha value relative to current \n   *   color range (default is 0-255)",
        "*   Creates colors for storing in variables of the \n   *   color datatype. The parameters are interpreted as \n   *   RGB or HSB values depending on the current \n   *   colorMode(). The default mode is RGB values from 0 \n   *   to 255 and, therefore, the function call \n   *   color(255, 204, 0) will return a bright yellow \n   *   color.  Note that if only one value is provided to \n   *   color(), it will be interpreted as a grayscale \n   *   value. Add a second value, and it will be used for \n   *   alpha transparency. When three values are \n   *   specified, they are interpreted as either RGB or \n   *   HSB values. Adding a fourth value applies alpha \n   *   transparency. \n   * \n   *  \n   *   If a single string argument is provided, RGB, RGBA \n   *   and Hex CSS color strings and all named color \n   *   strings are supported. In this case, an alpha \n   *   number value as a second argument is not \n   *   supported, the RGBA form should be used.\n   *\n   *   @param value a color string\n   *   @param [alpha] alpha value relative to current \n   *   color range (default is 0-255)",
        "*   Creates colors for storing in variables of the \n   *   color datatype. The parameters are interpreted as \n   *   RGB or HSB values depending on the current \n   *   colorMode(). The default mode is RGB values from 0 \n   *   to 255 and, therefore, the function call \n   *   color(255, 204, 0) will return a bright yellow \n   *   color.  Note that if only one value is provided to \n   *   color(), it will be interpreted as a grayscale \n   *   value. Add a second value, and it will be used for \n   *   alpha transparency. When three values are \n   *   specified, they are interpreted as either RGB or \n   *   HSB values. Adding a fourth value applies alpha \n   *   transparency. \n   * \n   *  \n   *   If a single string argument is provided, RGB, RGBA \n   *   and Hex CSS color strings and all named color \n   *   strings are supported. In this case, an alpha \n   *   number value as a second argument is not \n   *   supported, the RGBA form should be used.\n   *\n   *   @param values an array containing the \n   *   red,green,blue & and alpha components of the color",
        "*   Creates colors for storing in variables of the \n   *   color datatype. The parameters are interpreted as \n   *   RGB or HSB values depending on the current \n   *   colorMode(). The default mode is RGB values from 0 \n   *   to 255 and, therefore, the function call \n   *   color(255, 204, 0) will return a bright yellow \n   *   color.  Note that if only one value is provided to \n   *   color(), it will be interpreted as a grayscale \n   *   value. Add a second value, and it will be used for \n   *   alpha transparency. When three values are \n   *   specified, they are interpreted as either RGB or \n   *   HSB values. Adding a fourth value applies alpha \n   *   transparency. \n   * \n   *  \n   *   If a single string argument is provided, RGB, RGBA \n   *   and Hex CSS color strings and all named color \n   *   strings are supported. In this case, an alpha \n   *   number value as a second argument is not \n   *   supported, the RGBA form should be used.\n   *",
        "*   Extracts the green value from a color or pixel \n   *   array.\n   *\n   *   @param color p5.Color object, color components, or \n   *   CSS color\n   *   @return the green value",
        "*   Extracts the hue value from a color or pixel \n   *   array. Hue exists in both HSB and HSL. This \n   *   function will return the HSB-normalized hue when \n   *   supplied with an HSB color object (or when \n   *   supplied with a pixel array while the color mode \n   *   is HSB), but will default to the HSL-normalized \n   *   hue otherwise. (The values will only be different \n   *   if the maximum hue setting for each system is \n   *   different.)\n   *\n   *   @param color p5.Color object, color components, or \n   *   CSS color\n   *   @return the hue",
        "*   Blends two colors to find a third color somewhere \n   *   between them. The amt parameter is the amount to \n   *   interpolate between the two values where 0.0 equal \n   *   to the first color, 0.1 is very near the first \n   *   color, 0.5 is halfway in between, etc. An amount \n   *   below 0 will be treated as 0. Likewise, amounts \n   *   above 1 will be capped at 1. This is different \n   *   from the behavior of lerp(), but necessary because \n   *   otherwise numbers outside the range will produce \n   *   strange and unexpected colors.  The way that \n   *   colours are interpolated depends on the current \n   *   color mode.\n   *\n   *   @param c1 interpolate from this color\n   *   @param c2 interpolate to this color\n   *   @param amt number between 0 and 1\n   *   @return interpolated color",
        "*   Extracts the HSL lightness value from a color or \n   *   pixel array.\n   *\n   *   @param color p5.Color object, color components, or \n   *   CSS color\n   *   @return the lightness",
        "*   Extracts the red value from a color or pixel \n   *   array.\n   *\n   *   @param color p5.Color object, color components, or \n   *   CSS color\n   *   @return the red value",
        "*   Extracts the saturation value from a color or \n   *   pixel array. Saturation is scaled differently in \n   *   HSB and HSL. This function will return the HSB \n   *   saturation when supplied with an HSB color object \n   *   (or when supplied with a pixel array while the \n   *   color mode is HSB), but will default to the HSL \n   *   saturation otherwise.\n   *\n   *   @param color p5.Color object, color components, or \n   *   CSS color\n   *   @return the saturation value",
        "*   The background() function sets the color used for \n   *   the background of the p5.js canvas. The default \n   *   background is light gray. This function is \n   *   typically used within draw() to clear the display \n   *   window at the beginning of each frame, but it can \n   *   be used inside setup() to set the background on \n   *   the first frame of animation or if the background \n   *   need only be set once.  The color is either \n   *   specified in terms of the RGB, HSB, or HSL color \n   *   depending on the current colorMode. (The default \n   *   color space is RGB, with each value in the range \n   *   from 0 to 255). The alpha range by default is also \n   *   0 to 255. \n   * \n   *  \n   *   If a single string argument is provided, RGB, RGBA \n   *   and Hex CSS color strings and all named color \n   *   strings are supported. In this case, an alpha \n   *   number value as a second argument is not \n   *   supported, the RGBA form should be used. \n   * \n   *  \n   *   A p5.Color object can also be provided to set the \n   *   background color. \n   * \n   *  \n   *   A p5.Image can also be provided to set the \n   *   background iamge.\n   *\n   *   @param color any value created by the color() \n   *   function\n   *   @chainable",
        "*   The background() function sets the color used for \n   *   the background of the p5.js canvas. The default \n   *   background is light gray. This function is \n   *   typically used within draw() to clear the display \n   *   window at the beginning of each frame, but it can \n   *   be used inside setup() to set the background on \n   *   the first frame of animation or if the background \n   *   need only be set once.  The color is either \n   *   specified in terms of the RGB, HSB, or HSL color \n   *   depending on the current colorMode. (The default \n   *   color space is RGB, with each value in the range \n   *   from 0 to 255). The alpha range by default is also \n   *   0 to 255. \n   * \n   *  \n   *   If a single string argument is provided, RGB, RGBA \n   *   and Hex CSS color strings and all named color \n   *   strings are supported. In this case, an alpha \n   *   number value as a second argument is not \n   *   supported, the RGBA form should be used. \n   * \n   *  \n   *   A p5.Color object can also be provided to set the \n   *   background color. \n   * \n   *  \n   *   A p5.Image can also be provided to set the \n   *   background iamge.\n   *\n   *   @param colorstring color string, possible formats \n   *   include: integer rgb() or rgba(), percentage rgb() \n   *   or rgba(), 3-digit hex, 6-digit hex\n   *   @param [a] opacity of the background relative to \n   *   current color range (default is 0-255)\n   *   @chainable",
        "*   The background() function sets the color used for \n   *   the background of the p5.js canvas. The default \n   *   background is light gray. This function is \n   *   typically used within draw() to clear the display \n   *   window at the beginning of each frame, but it can \n   *   be used inside setup() to set the background on \n   *   the first frame of animation or if the background \n   *   need only be set once.  The color is either \n   *   specified in terms of the RGB, HSB, or HSL color \n   *   depending on the current colorMode. (The default \n   *   color space is RGB, with each value in the range \n   *   from 0 to 255). The alpha range by default is also \n   *   0 to 255. \n   * \n   *  \n   *   If a single string argument is provided, RGB, RGBA \n   *   and Hex CSS color strings and all named color \n   *   strings are supported. In this case, an alpha \n   *   number value as a second argument is not \n   *   supported, the RGBA form should be used. \n   * \n   *  \n   *   A p5.Color object can also be provided to set the \n   *   background color. \n   * \n   *  \n   *   A p5.Image can also be provided to set the \n   *   background iamge.\n   *\n   *   @param gray specifies a value between white and \n   *   black\n   *   @param [a] opacity of the background relative to \n   *   current color range (default is 0-255)\n   *   @chainable",
        "*   The background() function sets the color used for \n   *   the background of the p5.js canvas. The default \n   *   background is light gray. This function is \n   *   typically used within draw() to clear the display \n   *   window at the beginning of each frame, but it can \n   *   be used inside setup() to set the background on \n   *   the first frame of animation or if the background \n   *   need only be set once.  The color is either \n   *   specified in terms of the RGB, HSB, or HSL color \n   *   depending on the current colorMode. (The default \n   *   color space is RGB, with each value in the range \n   *   from 0 to 255). The alpha range by default is also \n   *   0 to 255. \n   * \n   *  \n   *   If a single string argument is provided, RGB, RGBA \n   *   and Hex CSS color strings and all named color \n   *   strings are supported. In this case, an alpha \n   *   number value as a second argument is not \n   *   supported, the RGBA form should be used. \n   * \n   *  \n   *   A p5.Color object can also be provided to set the \n   *   background color. \n   * \n   *  \n   *   A p5.Image can also be provided to set the \n   *   background iamge.\n   *\n   *   @param v1 red or hue value (depending on the \n   *   current color mode)\n   *   @param v2 green or saturation value (depending on \n   *   the current color mode)\n   *   @param v3 blue or brightness value (depending on \n   *   the current color mode)\n   *   @param [a] opacity of the background relative to \n   *   current color range (default is 0-255)\n   *   @chainable",
        "*   The background() function sets the color used for \n   *   the background of the p5.js canvas. The default \n   *   background is light gray. This function is \n   *   typically used within draw() to clear the display \n   *   window at the beginning of each frame, but it can \n   *   be used inside setup() to set the background on \n   *   the first frame of animation or if the background \n   *   need only be set once.  The color is either \n   *   specified in terms of the RGB, HSB, or HSL color \n   *   depending on the current colorMode. (The default \n   *   color space is RGB, with each value in the range \n   *   from 0 to 255). The alpha range by default is also \n   *   0 to 255. \n   * \n   *  \n   *   If a single string argument is provided, RGB, RGBA \n   *   and Hex CSS color strings and all named color \n   *   strings are supported. In this case, an alpha \n   *   number value as a second argument is not \n   *   supported, the RGBA form should be used. \n   * \n   *  \n   *   A p5.Color object can also be provided to set the \n   *   background color. \n   * \n   *  \n   *   A p5.Image can also be provided to set the \n   *   background iamge.\n   *\n   *   @param values an array containing the \n   *   red,green,blue & and alpha components of the color\n   *   @chainable",
        "*   The background() function sets the color used for \n   *   the background of the p5.js canvas. The default \n   *   background is light gray. This function is \n   *   typically used within draw() to clear the display \n   *   window at the beginning of each frame, but it can \n   *   be used inside setup() to set the background on \n   *   the first frame of animation or if the background \n   *   need only be set once.  The color is either \n   *   specified in terms of the RGB, HSB, or HSL color \n   *   depending on the current colorMode. (The default \n   *   color space is RGB, with each value in the range \n   *   from 0 to 255). The alpha range by default is also \n   *   0 to 255. \n   * \n   *  \n   *   If a single string argument is provided, RGB, RGBA \n   *   and Hex CSS color strings and all named color \n   *   strings are supported. In this case, an alpha \n   *   number value as a second argument is not \n   *   supported, the RGBA form should be used. \n   * \n   *  \n   *   A p5.Color object can also be provided to set the \n   *   background color. \n   * \n   *  \n   *   A p5.Image can also be provided to set the \n   *   background iamge.\n   *\n   *   @param image image created with loadImage() or \n   *   createImage(), to set as background (must be same \n   *   size as the sketch window)\n   *   @param [a] opacity of the background relative to \n   *   current color range (default is 0-255)\n   *   @chainable",
        "*   Clears the pixels within a buffer. This function \n   *   only works on p5.Canvas objects created with the \n   *   createCanvas() function; it won't work with the \n   *   main display window. Unlike the main graphics \n   *   context, pixels in additional graphics areas \n   *   created with createGraphics() can be entirely or \n   *   partially transparent. This function clears \n   *   everything to make all of the pixels 100% \n   *   transparent.\n   *\n   *   @chainable",
        "*   colorMode() changes the way p5.js interprets color \n   *   data. By default, the parameters for fill(), \n   *   stroke(), background(), and color() are defined by \n   *   values between 0 and 255 using the RGB color \n   *   model. This is equivalent to setting \n   *   colorMode(RGB, 255). Setting colorMode(HSB) lets \n   *   you use the HSB system instead. By default, this \n   *   is colorMode(HSB, 360, 100, 100, 1). You can also \n   *   use HSL.  Note: existing color objects remember \n   *   the mode that they were created in, so you can \n   *   change modes as you like without affecting their \n   *   appearance.\n   *\n   *   @param mode either RGB, HSB or HSL, corresponding \n   *   to Red/Green/Blue and Hue/Saturation/Brightness \n   *   (or Lightness)\n   *   @param [max] range for all values\n   *   @chainable",
        "*   colorMode() changes the way p5.js interprets color \n   *   data. By default, the parameters for fill(), \n   *   stroke(), background(), and color() are defined by \n   *   values between 0 and 255 using the RGB color \n   *   model. This is equivalent to setting \n   *   colorMode(RGB, 255). Setting colorMode(HSB) lets \n   *   you use the HSB system instead. By default, this \n   *   is colorMode(HSB, 360, 100, 100, 1). You can also \n   *   use HSL.  Note: existing color objects remember \n   *   the mode that they were created in, so you can \n   *   change modes as you like without affecting their \n   *   appearance.\n   *\n   *   @param mode either RGB, HSB or HSL, corresponding \n   *   to Red/Green/Blue and Hue/Saturation/Brightness \n   *   (or Lightness)\n   *   @param max1 range for the red or hue depending on \n   *   the current color mode\n   *   @param max2 range for the green or saturation \n   *   depending on the current color mode\n   *   @param max3 range for the blue or \n   *   brightness/lighntess depending on the current \n   *   color mode\n   *   @param [maxA] range for the alpha\n   *   @chainable",
        "*   Sets the color used to fill shapes. For example, \n   *   if you run fill(204, 102, 0), all subsequent \n   *   shapes will be filled with orange. This color is \n   *   either specified in terms of the RGB or HSB color \n   *   depending on the current colorMode(). (The default \n   *   color space is RGB, with each value in the range \n   *   from 0 to 255). The alpha range by default is also \n   *   0 to 255.  If a single string argument is \n   *   provided, RGB, RGBA and Hex CSS color strings and \n   *   all named color strings are supported. In this \n   *   case, an alpha number value as a second argument \n   *   is not supported, the RGBA form should be used. \n   * \n   *  \n   *   A p5 Color object can also be provided to set the \n   *   fill color.\n   *\n   *   @param v1 red or hue value relative to the current \n   *   color range\n   *   @param v2 green or saturation value relative to \n   *   the current color range\n   *   @param v3 blue or brightness value relative to the \n   *   current color range\n   *   @chainable",
        "*   Sets the color used to fill shapes. For example, \n   *   if you run fill(204, 102, 0), all subsequent \n   *   shapes will be filled with orange. This color is \n   *   either specified in terms of the RGB or HSB color \n   *   depending on the current colorMode(). (The default \n   *   color space is RGB, with each value in the range \n   *   from 0 to 255). The alpha range by default is also \n   *   0 to 255.  If a single string argument is \n   *   provided, RGB, RGBA and Hex CSS color strings and \n   *   all named color strings are supported. In this \n   *   case, an alpha number value as a second argument \n   *   is not supported, the RGBA form should be used. \n   * \n   *  \n   *   A p5 Color object can also be provided to set the \n   *   fill color.\n   *\n   *   @param value a color string\n   *   @chainable",
        "*   Sets the color used to fill shapes. For example, \n   *   if you run fill(204, 102, 0), all subsequent \n   *   shapes will be filled with orange. This color is \n   *   either specified in terms of the RGB or HSB color \n   *   depending on the current colorMode(). (The default \n   *   color space is RGB, with each value in the range \n   *   from 0 to 255). The alpha range by default is also \n   *   0 to 255.  If a single string argument is \n   *   provided, RGB, RGBA and Hex CSS color strings and \n   *   all named color strings are supported. In this \n   *   case, an alpha number value as a second argument \n   *   is not supported, the RGBA form should be used. \n   * \n   *  \n   *   A p5 Color object can also be provided to set the \n   *   fill color.\n   *\n   *   @param values an array containing the \n   *   red,green,blue & and alpha components of the color\n   *   @chainable",
        "*   Sets the color used to fill shapes. For example, \n   *   if you run fill(204, 102, 0), all subsequent \n   *   shapes will be filled with orange. This color is \n   *   either specified in terms of the RGB or HSB color \n   *   depending on the current colorMode(). (The default \n   *   color space is RGB, with each value in the range \n   *   from 0 to 255). The alpha range by default is also \n   *   0 to 255.  If a single string argument is \n   *   provided, RGB, RGBA and Hex CSS color strings and \n   *   all named color strings are supported. In this \n   *   case, an alpha number value as a second argument \n   *   is not supported, the RGBA form should be used. \n   * \n   *  \n   *   A p5 Color object can also be provided to set the \n   *   fill color.\n   *\n   *   @param color the fill color\n   *   @chainable",
        "*   Disables filling geometry. If both noStroke() and \n   *   noFill() are called, nothing will be drawn to the \n   *   screen.\n   *\n   *   @chainable",
        "*   Disables drawing the stroke (outline). If both \n   *   noStroke() and noFill() are called, nothing will \n   *   be drawn to the screen.\n   *\n   *   @chainable",
        "*   Sets the color used to draw lines and borders \n   *   around shapes. This color is either specified in \n   *   terms of the RGB or HSB color depending on the \n   *   current colorMode() (the default color space is \n   *   RGB, with each value in the range from 0 to 255). \n   *   The alpha range by default is also 0 to 255.  If a \n   *   single string argument is provided, RGB, RGBA and \n   *   Hex CSS color strings and all named color strings \n   *   are supported. In this case, an alpha number value \n   *   as a second argument is not supported, the RGBA \n   *   form should be used. \n   * \n   *  \n   *   A p5 Color object can also be provided to set the \n   *   stroke color.\n   *\n   *   @param v1 red or hue value relative to the current \n   *   color range\n   *   @param v2 green or saturation value relative to \n   *   the current color range\n   *   @param v3 blue or brightness value relative to the \n   *   current color range\n   *   @chainable",
        "*   Sets the color used to draw lines and borders \n   *   around shapes. This color is either specified in \n   *   terms of the RGB or HSB color depending on the \n   *   current colorMode() (the default color space is \n   *   RGB, with each value in the range from 0 to 255). \n   *   The alpha range by default is also 0 to 255.  If a \n   *   single string argument is provided, RGB, RGBA and \n   *   Hex CSS color strings and all named color strings \n   *   are supported. In this case, an alpha number value \n   *   as a second argument is not supported, the RGBA \n   *   form should be used. \n   * \n   *  \n   *   A p5 Color object can also be provided to set the \n   *   stroke color.\n   *\n   *   @param value a color string\n   *   @chainable",
        "*   Sets the color used to draw lines and borders \n   *   around shapes. This color is either specified in \n   *   terms of the RGB or HSB color depending on the \n   *   current colorMode() (the default color space is \n   *   RGB, with each value in the range from 0 to 255). \n   *   The alpha range by default is also 0 to 255.  If a \n   *   single string argument is provided, RGB, RGBA and \n   *   Hex CSS color strings and all named color strings \n   *   are supported. In this case, an alpha number value \n   *   as a second argument is not supported, the RGBA \n   *   form should be used. \n   * \n   *  \n   *   A p5 Color object can also be provided to set the \n   *   stroke color.\n   *\n   *   @param values an array containing the \n   *   red,green,blue & and alpha components of the color\n   *   @chainable",
        "*   Sets the color used to draw lines and borders \n   *   around shapes. This color is either specified in \n   *   terms of the RGB or HSB color depending on the \n   *   current colorMode() (the default color space is \n   *   RGB, with each value in the range from 0 to 255). \n   *   The alpha range by default is also 0 to 255.  If a \n   *   single string argument is provided, RGB, RGBA and \n   *   Hex CSS color strings and all named color strings \n   *   are supported. In this case, an alpha number value \n   *   as a second argument is not supported, the RGBA \n   *   form should be used. \n   * \n   *  \n   *   A p5 Color object can also be provided to set the \n   *   stroke color.\n   *\n   *   @param color the stroke color\n   *   @chainable",
        "*   Draw an arc to the screen. If called with only x, \n   *   y, w, h, start, and stop, the arc will be drawn \n   *   and filled as an open pie segment. If a mode \n   *   parameter is provided, the arc will be filled like \n   *   an open semi-circle (OPEN) , a closed semi-circle \n   *   (CHORD), or as a closed pie segment (PIE). The \n   *   origin may be changed with the ellipseMode() \n   *   function. Note that drawing a full circle (ex: 0 \n   *   to TWO_PI) will appear blank because 0 and TWO_PI \n   *   are the same position on the unit circle. The best \n   *   way to handle this is by using the ellipse() \n   *   function instead to create a closed ellipse, and \n   *   to use the arc() function only to draw parts of an \n   *   ellipse.\n   *\n   *   @param x x-coordinate of the arc's ellipse\n   *   @param y y-coordinate of the arc's ellipse\n   *   @param w width of the arc's ellipse by default\n   *   @param h height of the arc's ellipse by default\n   *   @param start angle to start the arc, specified in \n   *   radians\n   *   @param stop angle to stop the arc, specified in \n   *   radians\n   *   @param [mode] optional parameter to determine the \n   *   way of drawing the arc. either CHORD, PIE or OPEN\n   *   @chainable",
        "*   Draws an ellipse (oval) to the screen. An ellipse \n   *   with equal width and height is a circle. By \n   *   default, the first two parameters set the \n   *   location, and the third and fourth parameters set \n   *   the shape's width and height. If no height is \n   *   specified, the value of width is used for both the \n   *   width and height. If a negative height or width is \n   *   specified, the absolute value is taken. The origin \n   *   may be changed with the ellipseMode() function.\n   *\n   *   @param x x-coordinate of the ellipse.\n   *   @param y y-coordinate of the ellipse.\n   *   @param w width of the ellipse.\n   *   @param [h] height of the ellipse.\n   *   @chainable",
        "*   Draws an ellipse (oval) to the screen. An ellipse \n   *   with equal width and height is a circle. By \n   *   default, the first two parameters set the \n   *   location, and the third and fourth parameters set \n   *   the shape's width and height. If no height is \n   *   specified, the value of width is used for both the \n   *   width and height. If a negative height or width is \n   *   specified, the absolute value is taken. The origin \n   *   may be changed with the ellipseMode() function.\n   *\n   *   @param x x-coordinate of the ellipse.\n   *   @param y y-coordinate of the ellipse.\n   *   @param w width of the ellipse.\n   *   @param h height of the ellipse.\n   *   @param detail number of radial sectors to draw",
        "*   Draws a line (a direct path between two points) to \n   *   the screen. The version of line() with four \n   *   parameters draws the line in 2D. To color a line, \n   *   use the stroke() function. A line cannot be \n   *   filled, therefore the fill() function will not \n   *   affect the color of a line. 2D lines are drawn \n   *   with a width of one pixel by default, but this can \n   *   be changed with the strokeWeight() function.\n   *\n   *   @param x1 the x-coordinate of the first point\n   *   @param y1 the y-coordinate of the first point\n   *   @param x2 the x-coordinate of the second point\n   *   @param y2 the y-coordinate of the second point\n   *   @chainable",
        "*   Draws a line (a direct path between two points) to \n   *   the screen. The version of line() with four \n   *   parameters draws the line in 2D. To color a line, \n   *   use the stroke() function. A line cannot be \n   *   filled, therefore the fill() function will not \n   *   affect the color of a line. 2D lines are drawn \n   *   with a width of one pixel by default, but this can \n   *   be changed with the strokeWeight() function.\n   *\n   *   @param x1 the x-coordinate of the first point\n   *   @param y1 the y-coordinate of the first point\n   *   @param z1 the z-coordinate of the first point\n   *   @param x2 the x-coordinate of the second point\n   *   @param y2 the y-coordinate of the second point\n   *   @param z2 the z-coordinate of the second point\n   *   @chainable",
        "*   Draws a point, a coordinate in space at the \n   *   dimension of one pixel. The first parameter is the \n   *   horizontal value for the point, the second value \n   *   is the vertical value for the point. The color of \n   *   the point is determined by the current stroke.\n   *\n   *   @param x the x-coordinate\n   *   @param y the y-coordinate\n   *   @param [z] the z-coordinate (for WEBGL mode)\n   *   @chainable",
        "*   Draw a quad. A quad is a quadrilateral, a four \n   *   sided polygon. It is similar to a rectangle, but \n   *   the angles between its edges are not constrained \n   *   to ninety degrees. The first pair of parameters \n   *   (x1,y1) sets the first vertex and the subsequent \n   *   pairs should proceed clockwise or \n   *   counter-clockwise around the defined shape.\n   *\n   *   @param x1 the x-coordinate of the first point\n   *   @param y1 the y-coordinate of the first point\n   *   @param x2 the x-coordinate of the second point\n   *   @param y2 the y-coordinate of the second point\n   *   @param x3 the x-coordinate of the third point\n   *   @param y3 the y-coordinate of the third point\n   *   @param x4 the x-coordinate of the fourth point\n   *   @param y4 the y-coordinate of the fourth point\n   *   @chainable",
        "*   Draw a quad. A quad is a quadrilateral, a four \n   *   sided polygon. It is similar to a rectangle, but \n   *   the angles between its edges are not constrained \n   *   to ninety degrees. The first pair of parameters \n   *   (x1,y1) sets the first vertex and the subsequent \n   *   pairs should proceed clockwise or \n   *   counter-clockwise around the defined shape.\n   *\n   *   @param x1 the x-coordinate of the first point\n   *   @param y1 the y-coordinate of the first point\n   *   @param x2 the x-coordinate of the second point\n   *   @param y2 the y-coordinate of the second point\n   *   @param x3 the x-coordinate of the third point\n   *   @param y3 the y-coordinate of the third point\n   *   @param x4 the x-coordinate of the fourth point\n   *   @param y4 the y-coordinate of the fourth point\n   *   @chainable",
        "*   Draws a rectangle to the screen. A rectangle is a \n   *   four-sided shape with every angle at ninety \n   *   degrees. By default, the first two parameters set \n   *   the location of the upper-left corner, the third \n   *   sets the width, and the fourth sets the height. \n   *   The way these parameters are interpreted, however, \n   *   may be changed with the rectMode() function.  The \n   *   fifth, sixth, seventh and eighth parameters, if \n   *   specified, determine corner radius for the \n   *   top-right, top-left, lower-right and lower-left \n   *   corners, respectively. An omitted corner radius \n   *   parameter is set to the value of the previously \n   *   specified radius value in the parameter list.\n   *\n   *   @param x x-coordinate of the rectangle.\n   *   @param y y-coordinate of the rectangle.\n   *   @param w width of the rectangle.\n   *   @param h height of the rectangle.\n   *   @param [tl] optional radius of top-left corner.\n   *   @param [tr] optional radius of top-right corner.\n   *   @param [br] optional radius of bottom-right \n   *   corner.\n   *   @param [bl] optional radius of bottom-left corner.\n   *   @chainable",
        "*   Draws a rectangle to the screen. A rectangle is a \n   *   four-sided shape with every angle at ninety \n   *   degrees. By default, the first two parameters set \n   *   the location of the upper-left corner, the third \n   *   sets the width, and the fourth sets the height. \n   *   The way these parameters are interpreted, however, \n   *   may be changed with the rectMode() function.  The \n   *   fifth, sixth, seventh and eighth parameters, if \n   *   specified, determine corner radius for the \n   *   top-right, top-left, lower-right and lower-left \n   *   corners, respectively. An omitted corner radius \n   *   parameter is set to the value of the previously \n   *   specified radius value in the parameter list.\n   *\n   *   @param x x-coordinate of the rectangle.\n   *   @param y y-coordinate of the rectangle.\n   *   @param w width of the rectangle.\n   *   @param h height of the rectangle.\n   *   @param [detailX] number of segments in the \n   *   x-direction\n   *   @param [detailY] number of segments in the \n   *   y-direction\n   *   @chainable",
        "*   A triangle is a plane created by connecting three \n   *   points. The first two arguments specify the first \n   *   point, the middle two arguments specify the second \n   *   point, and the last two arguments specify the \n   *   third point.\n   *\n   *   @param x1 x-coordinate of the first point\n   *   @param y1 y-coordinate of the first point\n   *   @param x2 x-coordinate of the second point\n   *   @param y2 y-coordinate of the second point\n   *   @param x3 x-coordinate of the third point\n   *   @param y3 y-coordinate of the third point\n   *   @chainable",
        "*   Modifies the location from which ellipses are \n   *   drawn by changing the way in which parameters \n   *   given to ellipse() are interpreted.  The default \n   *   mode is ellipseMode(CENTER), which interprets the \n   *   first two parameters of ellipse() as the shape's \n   *   center point, while the third and fourth \n   *   parameters are its width and height. \n   * \n   *  \n   *   ellipseMode(RADIUS) also uses the first two \n   *   parameters of ellipse() as the shape's center \n   *   point, but uses the third and fourth parameters to \n   *   specify half of the shapes's width and height. \n   * \n   *  \n   *   ellipseMode(CORNER) interprets the first two \n   *   parameters of ellipse() as the upper-left corner \n   *   of the shape, while the third and fourth \n   *   parameters are its width and height. \n   * \n   *  \n   *   ellipseMode(CORNERS) interprets the first two \n   *   parameters of ellipse() as the location of one \n   *   corner of the ellipse's bounding box, and the \n   *   third and fourth parameters as the location of the \n   *   opposite corner. \n   * \n   *  \n   *   The parameter must be written in ALL CAPS because \n   *   Javascript is a case-sensitive language.\n   *\n   *   @param mode either CENTER, RADIUS, CORNER, or \n   *   CORNERS\n   *   @chainable",
        "*   Draws all geometry with jagged (aliased) edges. \n   *   Note that smooth() is active by default, so it is \n   *   necessary to call noSmooth() to disable smoothing \n   *   of geometry, images, and fonts.\n   *\n   *   @chainable",
        "*   Modifies the location from which rectangles are \n   *   drawn by changing the way in which parameters \n   *   given to rect() are interpreted.  The default mode \n   *   is rectMode(CORNER), which interprets the first \n   *   two parameters of rect() as the upper-left corner \n   *   of the shape, while the third and fourth \n   *   parameters are its width and height. \n   * \n   *  \n   *   rectMode(CORNERS) interprets the first two \n   *   parameters of rect() as the location of one \n   *   corner, and the third and fourth parameters as the \n   *   location of the opposite corner. \n   * \n   *  \n   *   rectMode(CENTER) interprets the first two \n   *   parameters of rect() as the shape's center point, \n   *   while the third and fourth parameters are its \n   *   width and height. \n   * \n   *  \n   *   rectMode(RADIUS) also uses the first two \n   *   parameters of rect() as the shape's center point, \n   *   but uses the third and fourth parameters to \n   *   specify half of the shapes's width and height. \n   * \n   *  \n   *   The parameter must be written in ALL CAPS because \n   *   Javascript is a case-sensitive language.\n   *\n   *   @param mode either CORNER, CORNERS, CENTER, or \n   *   RADIUS\n   *   @chainable",
        "*   Draws all geometry with smooth (anti-aliased) \n   *   edges. smooth() will also improve image quality of \n   *   resized images. Note that smooth() is active by \n   *   default; noSmooth() can be used to disable \n   *   smoothing of geometry, images, and fonts.\n   *\n   *   @chainable",
        "*   Sets the style for rendering line endings. These \n   *   ends are either squared, extended, or rounded, \n   *   each of which specified with the corresponding \n   *   parameters: SQUARE, PROJECT, and ROUND. The \n   *   default cap is ROUND.\n   *\n   *   @param cap either SQUARE, PROJECT, or ROUND\n   *   @chainable",
        "*   Sets the style of the joints which connect line \n   *   segments. These joints are either mitered, \n   *   beveled, or rounded and specified with the \n   *   corresponding parameters MITER, BEVEL, and ROUND. \n   *   The default joint is MITER.\n   *\n   *   @param join either MITER, BEVEL, ROUND\n   *   @chainable",
        "*   Sets the width of the stroke used for lines, \n   *   points, and the border around shapes. All widths \n   *   are set in units of pixels.\n   *\n   *   @param weight the weight (in pixels) of the stroke\n   *   @chainable",
        "*   HALF_PI is a mathematical constant with the value \n   *   1.57079632679489661923. It is half the ratio of \n   *   the circumference of a circle to its diameter. It \n   *   is useful in combination with the trigonometric \n   *   functions sin() and cos().\n   *",
        "*   PI is a mathematical constant with the value \n   *   3.14159265358979323846. It is the ratio of the \n   *   circumference of a circle to its diameter. It is \n   *   useful in combination with the trigonometric \n   *   functions sin() and cos().\n   *",
        "*   QUARTER_PI is a mathematical constant with the \n   *   value 0.7853982. It is one quarter the ratio of \n   *   the circumference of a circle to its diameter. It \n   *   is useful in combination with the trigonometric \n   *   functions sin() and cos().\n   *",
        "*   TAU is an alias for TWO_PI, a mathematical \n   *   constant with the value 6.28318530717958647693. It \n   *   is twice the ratio of the circumference of a \n   *   circle to its diameter. It is useful in \n   *   combination with the trigonometric functions sin() \n   *   and cos().\n   *",
        "*   TWO_PI is a mathematical constant with the value \n   *   6.28318530717958647693. It is twice the ratio of \n   *   the circumference of a circle to its diameter. It \n   *   is useful in combination with the trigonometric \n   *   functions sin() and cos().\n   *",
        "*   Constant to be used with angleMode() function, to \n   *   set the mode which p5.js interprates and \n   *   calculates angles (either DEGREES or RADIANS).\n   *",
        "*   Constant to be used with angleMode() function, to \n   *   set the mode which p5.js interprates and \n   *   calculates angles (either RADIANS or DEGREES).\n   *",
        "*   Called directly before setup(), the preload() \n   *   function is used to handle asynchronous loading of \n   *   external files. If a preload function is defined, \n   *   setup() will wait until any load calls within have \n   *   finished. Nothing besides load calls should be \n   *   inside preload (loadImage, loadJSON, loadFont, \n   *   loadStrings, etc).\n   * \n   *  \n   *   By default the text \"loading...\" will be \n   *   displayed. To make your own loading page, include \n   *   an HTML element with id \"p5_loading\" in your page. \n   *   More information here.\n   *",
        "*   The setup() function is called once when the \n   *   program starts. It's used to define initial \n   *   environment properties such as screen size and \n   *   background color and to load media such as images \n   *   and fonts as the program starts. There can only be \n   *   one setup() function for each program and it \n   *   shouldn't be called again after its initial \n   *   execution. \n   * \n   *  \n   *   Note: Variables declared within setup() are not \n   *   accessible within other functions, including \n   *   draw().\n   *",
        "*   Called directly after setup(), the draw() function \n   *   continuously executes the lines of code contained \n   *   inside its block until the program is stopped or \n   *   noLoop() is called. Note if noLoop() is called in \n   *   setup(), draw() will still be executed once before \n   *   stopping. draw() is called automatically and \n   *   should never be called explicitly.  It should \n   *   always be controlled with noLoop(), redraw() and \n   *   loop(). After noLoop() stops the code in draw() \n   *   from executing, redraw() causes the code inside \n   *   draw() to execute once, and loop() will cause the \n   *   code inside draw() to resume executing \n   *   continuously. \n   * \n   *  \n   *   The number of times draw() executes in each second \n   *   may be controlled with the frameRate() function. \n   * \n   *  \n   *   There can only be one draw() function for each \n   *   sketch, and draw() must exist if you want the code \n   *   to run continuously, or to process events such as \n   *   mousePressed(). Sometimes, you might have an empty \n   *   call to draw() in your program, as shown in the \n   *   above example. \n   * \n   *  \n   *   It is important to note that the drawing \n   *   coordinate system will be reset at the beginning \n   *   of each draw() call. If any transformations are \n   *   performed within draw() (ex: scale, rotate, \n   *   translate), their effects will be undone at the \n   *   beginning of draw(), so transformations will not \n   *   accumulate over time. On the other hand, styling \n   *   applied (ex: fill, stroke, etc) will remain in \n   *   effect.\n   *",
        "*   Removes the entire p5 sketch. This will remove the \n   *   canvas and any elements created by p5.js. It will \n   *   also stop the draw loop and unbind any properties \n   *   or methods from the window global scope. It will \n   *   leave a variable p5 in case you wanted to create a \n   *   new p5 sketch. If you like, you can set p5 = null \n   *   to erase it. While all functions and variables and \n   *   objects created by the p5 library will be removed, \n   *   any other global variables created by your code \n   *   will remain.\n   *",
        "*   Draws a cubic Bezier curve on the screen. These \n   *   curves are defined by a series of anchor and \n   *   control points. The first two parameters specify \n   *   the first anchor point and the last two parameters \n   *   specify the other anchor point, which become the \n   *   first and last points on the curve. The middle \n   *   parameters specify the two control points which \n   *   define the shape of the curve. Approximately \n   *   speaking, control points \"pull\" the curve towards \n   *   them.Bezier curves were developed by French \n   *   automotive engineer Pierre Bezier, and are \n   *   commonly used in computer graphics to define \n   *   gently sloping curves. See also curve().\n   *\n   *   @param x1 x-coordinate for the first anchor point\n   *   @param y1 y-coordinate for the first anchor point\n   *   @param x2 x-coordinate for the first control point\n   *   @param y2 y-coordinate for the first control point\n   *   @param x3 x-coordinate for the second control \n   *   point\n   *   @param y3 y-coordinate for the second control \n   *   point\n   *   @param x4 x-coordinate for the second anchor point\n   *   @param y4 y-coordinate for the second anchor point\n   *   @chainable",
        "*   Draws a cubic Bezier curve on the screen. These \n   *   curves are defined by a series of anchor and \n   *   control points. The first two parameters specify \n   *   the first anchor point and the last two parameters \n   *   specify the other anchor point, which become the \n   *   first and last points on the curve. The middle \n   *   parameters specify the two control points which \n   *   define the shape of the curve. Approximately \n   *   speaking, control points \"pull\" the curve towards \n   *   them.Bezier curves were developed by French \n   *   automotive engineer Pierre Bezier, and are \n   *   commonly used in computer graphics to define \n   *   gently sloping curves. See also curve().\n   *\n   *   @param x1 x-coordinate for the first anchor point\n   *   @param y1 y-coordinate for the first anchor point\n   *   @param z1 z-coordinate for the first anchor point\n   *   @param x2 x-coordinate for the first control point\n   *   @param y2 y-coordinate for the first control point\n   *   @param z2 z-coordinate for the first control point\n   *   @param x3 x-coordinate for the second control \n   *   point\n   *   @param y3 y-coordinate for the second control \n   *   point\n   *   @param z3 z-coordinate for the second control \n   *   point\n   *   @param x4 x-coordinate for the second anchor point\n   *   @param y4 y-coordinate for the second anchor point\n   *   @param z4 z-coordinate for the second anchor point\n   *   @chainable",
        "*   Sets the resolution at which Beziers display. The \n   *   default value is 20.\n   *\n   *   @param detail resolution of the curves\n   *   @chainable",
        "*   Evaluates the Bezier at position t for points a, \n   *   b, c, d. The parameters a and d are the first and \n   *   last points on the curve, and b and c are the \n   *   control points. The final parameter t varies \n   *   between 0 and 1. This can be done once with the x \n   *   coordinates and a second time with the y \n   *   coordinates to get the location of a bezier curve \n   *   at t.\n   *\n   *   @param a coordinate of first point on the curve\n   *   @param b coordinate of first control point\n   *   @param c coordinate of second control point\n   *   @param d coordinate of second point on the curve\n   *   @param t value between 0 and 1\n   *   @return the value of the Bezier at position t",
        "*   Evaluates the tangent to the Bezier at position t \n   *   for points a, b, c, d. The parameters a and d are \n   *   the first and last points on the curve, and b and \n   *   c are the control points. The final parameter t \n   *   varies between 0 and 1.\n   *\n   *   @param a coordinate of first point on the curve\n   *   @param b coordinate of first control point\n   *   @param c coordinate of second control point\n   *   @param d coordinate of second point on the curve\n   *   @param t value between 0 and 1\n   *   @return the tangent at position t",
        "*   Draws a curved line on the screen between two \n   *   points, given as the middle four parameters. The \n   *   first two parameters are a control point, as if \n   *   the curve came from this point even though it's \n   *   not drawn. The last two parameters similarly \n   *   describe the other control point.  Longer curves \n   *   can be created by putting a series of curve() \n   *   functions together or using curveVertex(). An \n   *   additional function called curveTightness() \n   *   provides control for the visual quality of the \n   *   curve. The curve() function is an implementation \n   *   of Catmull-Rom splines.\n   *\n   *   @param x1 x-coordinate for the beginning control \n   *   point\n   *   @param y1 y-coordinate for the beginning control \n   *   point\n   *   @param x2 x-coordinate for the first point\n   *   @param y2 y-coordinate for the first point\n   *   @param x3 x-coordinate for the second point\n   *   @param y3 y-coordinate for the second point\n   *   @param x4 x-coordinate for the ending control \n   *   point\n   *   @param y4 y-coordinate for the ending control \n   *   point\n   *   @chainable",
        "*   Draws a curved line on the screen between two \n   *   points, given as the middle four parameters. The \n   *   first two parameters are a control point, as if \n   *   the curve came from this point even though it's \n   *   not drawn. The last two parameters similarly \n   *   describe the other control point.  Longer curves \n   *   can be created by putting a series of curve() \n   *   functions together or using curveVertex(). An \n   *   additional function called curveTightness() \n   *   provides control for the visual quality of the \n   *   curve. The curve() function is an implementation \n   *   of Catmull-Rom splines.\n   *\n   *   @param x1 x-coordinate for the beginning control \n   *   point\n   *   @param y1 y-coordinate for the beginning control \n   *   point\n   *   @param z1 z-coordinate for the beginning control \n   *   point\n   *   @param x2 x-coordinate for the first point\n   *   @param y2 y-coordinate for the first point\n   *   @param z2 z-coordinate for the first point\n   *   @param x3 x-coordinate for the second point\n   *   @param y3 y-coordinate for the second point\n   *   @param z3 z-coordinate for the second point\n   *   @param x4 x-coordinate for the ending control \n   *   point\n   *   @param y4 y-coordinate for the ending control \n   *   point\n   *   @param z4 z-coordinate for the ending control \n   *   point\n   *   @chainable",
        "*   Sets the resolution at which curves display. The \n   *   default value is 20.\n   *\n   *   @param resolution of the curves\n   *   @chainable",
        "*   Modifies the quality of forms created with curve() \n   *   and curveVertex(). The parameter tightness \n   *   determines how the curve fits to the vertex \n   *   points. The value 0.0 is the default value for \n   *   tightness (this value defines the curves to be \n   *   Catmull-Rom splines) and the value 1.0 connects \n   *   all the points with straight lines. Values within \n   *   the range -5.0 and 5.0 will deform the curves but \n   *   will leave them recognizable and as values \n   *   increase in magnitude, they will continue to \n   *   deform.\n   *\n   *   @param amount of deformation from the original \n   *   vertices\n   *   @chainable",
        "*   Evaluates the curve at position t for points a, b, \n   *   c, d. The parameter t varies between 0 and 1, a \n   *   and d are points on the curve, and b and c are the \n   *   control points. This can be done once with the x \n   *   coordinates and a second time with the y \n   *   coordinates to get the location of a curve at t.\n   *\n   *   @param a coordinate of first point on the curve\n   *   @param b coordinate of first control point\n   *   @param c coordinate of second control point\n   *   @param d coordinate of second point on the curve\n   *   @param t value between 0 and 1\n   *   @return bezier value at position t",
        "*   Evaluates the tangent to the curve at position t \n   *   for points a, b, c, d. The parameter t varies \n   *   between 0 and 1, a and d are points on the curve, \n   *   and b and c are the control points.\n   *\n   *   @param a coordinate of first point on the curve\n   *   @param b coordinate of first control point\n   *   @param c coordinate of second control point\n   *   @param d coordinate of second point on the curve\n   *   @param t value between 0 and 1\n   *   @return the tangent at position t",
        "*   The print() function writes to the console area of \n   *   your browser. This function is often helpful for \n   *   looking at the data a program is producing. This \n   *   function creates a new line of text for each call \n   *   to the function. Individual elements can be \n   *   separated with quotes (\"\") and joined with the \n   *   addition operator (+).\n   *\n   *   @param contents any combination of Number, String, \n   *   Object, Boolean, Array to print",
        "*   The system variable frameCount contains the number \n   *   of frames that have been displayed since the \n   *   program started. Inside setup() the value is 0, \n   *   after the first iteration of draw it is 1, etc.\n   *",
        "*   Confirms if the window a p5.js program is in is \n   *   \"focused,\" meaning that the sketch will accept \n   *   mouse or keyboard input. This variable is \"true\" \n   *   if the window is focused and \"false\" if not.\n   *",
        "*   Sets the cursor to a predefined symbol or an \n   *   image, or makes it visible if already hidden. If \n   *   you are trying to set an image as the cursor, the \n   *   recommended size is 16x16 or 32x32 pixels. It is \n   *   not possible to load an image as the cursor if you \n   *   are exporting your program for the Web, and not \n   *   all MODES work with all browsers. The values for \n   *   parameters x and y must be less than the \n   *   dimensions of the image.\n   *\n   *   @param type either ARROW, CROSS, HAND, MOVE, TEXT, \n   *   or WAIT, or path for image\n   *   @param [x] the horizontal active spot of the \n   *   cursor\n   *   @param [y] the vertical active spot of the cursor",
        "*   Specifies the number of frames to be displayed \n   *   every second. For example, the function call \n   *   frameRate(30) will attempt to refresh 30 times a \n   *   second. If the processor is not fast enough to \n   *   maintain the specified rate, the frame rate will \n   *   not be achieved. Setting the frame rate within \n   *   setup() is recommended. The default rate is 60 \n   *   frames per second. This is the same as \n   *   setFrameRate(val).  Calling frameRate() with no \n   *   arguments returns the current framerate. The draw \n   *   function must run at least once before it will \n   *   return a value. This is the same as \n   *   getFrameRate(). \n   * \n   *  \n   *   Calling frameRate() with arguments that are not of \n   *   the type numbers or are non positive also returns \n   *   current framerate.\n   *\n   *   @param fps number of frames to be displayed every \n   *   second\n   *   @chainable",
        "*   Specifies the number of frames to be displayed \n   *   every second. For example, the function call \n   *   frameRate(30) will attempt to refresh 30 times a \n   *   second. If the processor is not fast enough to \n   *   maintain the specified rate, the frame rate will \n   *   not be achieved. Setting the frame rate within \n   *   setup() is recommended. The default rate is 60 \n   *   frames per second. This is the same as \n   *   setFrameRate(val).  Calling frameRate() with no \n   *   arguments returns the current framerate. The draw \n   *   function must run at least once before it will \n   *   return a value. This is the same as \n   *   getFrameRate(). \n   * \n   *  \n   *   Calling frameRate() with arguments that are not of \n   *   the type numbers or are non positive also returns \n   *   current framerate.\n   *\n   *   @return current frameRate",
        "*   Hides the cursor from view.\n   *",
        "*   System variable that stores the width of the \n   *   entire screen display. This is used to run a \n   *   full-screen program on any display size.\n   *",
        "*   System variable that stores the height of the \n   *   entire screen display. This is used to run a \n   *   full-screen program on any display size.\n   *",
        "*   System variable that stores the width of the inner \n   *   window, it maps to window.innerWidth.\n   *",
        "*   System variable that stores the height of the \n   *   inner window, it maps to window.innerHeight.\n   *",
        "*   The windowResized() function is called once every \n   *   time the browser window is resized. This is a good \n   *   place to resize the canvas or do any other \n   *   adjustments to accommodate the new window size.\n   *",
        "*   System variable that stores the width of the \n   *   drawing canvas. This value is set by the first \n   *   parameter of the createCanvas() function. For \n   *   example, the function call createCanvas(320, 240) \n   *   sets the width variable to the value 320. The \n   *   value of width defaults to 100 if createCanvas() \n   *   is not used in a program.\n   *",
        "*   System variable that stores the height of the \n   *   drawing canvas. This value is set by the second \n   *   parameter of the createCanvas() function. For \n   *   example, the function call createCanvas(320, 240) \n   *   sets the height variable to the value 240. The \n   *   value of height defaults to 100 if createCanvas() \n   *   is not used in a program.\n   *",
        "*   If argument is given, sets the sketch to \n   *   fullscreen or not based on the value of the \n   *   argument. If no argument is given, returns the \n   *   current fullscreen state. Note that due to browser \n   *   restrictions this can only be called on user \n   *   input, for example, on mouse press like the \n   *   example below.\n   *\n   *   @param [val] whether the sketch should be in \n   *   fullscreen mode or not\n   *   @return current fullscreen state",
        "*   Sets the pixel scaling for high pixel density \n   *   displays. By default pixel density is set to match \n   *   display density, call pixelDensity(1) to turn this \n   *   off. Calling pixelDensity() with no arguments \n   *   returns the current pixel density of the sketch.\n   *\n   *   @param [val] whether or how much the sketch should \n   *   scale\n   *   @return current pixel density of the sketch",
        "*   Returns the pixel density of the current display \n   *   the sketch is running on.\n   *\n   *   @return current pixel density of the display",
        "*   Gets the current URL.\n   *\n   *   @return url",
        "*   Gets the current URL path as an array.\n   *\n   *   @return path components",
        "*   Gets the current URL params as an Object.\n   *\n   *   @return URL params",
        "*   Creates a canvas element in the document, and sets \n   *   the dimensions of it in pixels. This method should \n   *   be called only once at the start of setup. Calling \n   *   createCanvas more than once in a sketch will \n   *   result in very unpredictable behavior. If you want \n   *   more than one drawing canvas you could use \n   *   createGraphics (hidden by default but it can be \n   *   shown).  The system variables width and height are \n   *   set by the parameters passed to this function. If \n   *   createCanvas() is not used, the window will be \n   *   given a default size of 100x100 pixels. \n   * \n   *  \n   *   For more ways to position the canvas, see the  \n   *   positioning the canvas wiki page.\n   *\n   *   @param w width of the canvas\n   *   @param h height of the canvas\n   *   @param [renderer] either P2D or WEBGL\n   *   @return canvas generated",
        "*   Resizes the canvas to given width and height. The \n   *   canvas will be cleared and draw will be called \n   *   immediately, allowing the sketch to re-render \n   *   itself in the resized canvas.\n   *\n   *   @param w width of the canvas\n   *   @param h height of the canvas\n   *   @param [noRedraw] don't redraw the canvas \n   *   immediately",
        "*   Removes the default canvas for a p5 sketch that \n   *   doesn't require a canvas\n   *",
        "*   Creates and returns a new p5.Renderer object. Use \n   *   this class if you need to draw into an off-screen \n   *   graphics buffer. The two parameters define the \n   *   width and height in pixels.\n   *\n   *   @param w width of the offscreen graphics buffer\n   *   @param h height of the offscreen graphics buffer\n   *   @param [renderer] either P2D or WEBGL undefined \n   *   defaults to p2d\n   *   @return offscreen graphics buffer",
        "*   Blends the pixels in the display window according \n   *   to the defined mode. There is a choice of the \n   *   following modes to blend the source pixels (A) \n   *   with the ones of pixels already in the display \n   *   window (B): - BLEND - linear interpolation of \n   *   colours: C = A*factor + B. This is the default \n   *   blending mode.\n   *   - ADD - sum of A and B\n   *   - DARKEST - only the darkest colour succeeds: C = \n   *   min(A*factor, B).\n   *   - LIGHTEST - only the lightest colour succeeds: C \n   *   = max(A*factor, B).\n   *   - DIFFERENCE - subtract colors from underlying \n   *   image.\n   *   - EXCLUSION - similar to DIFFERENCE, but less \n   *   extreme.\n   *   - MULTIPLY - multiply the colors, result will \n   *   always be darker.\n   *   - SCREEN - opposite multiply, uses inverse values \n   *   of the colors.\n   *   - REPLACE - the pixels entirely replace the others \n   *   and don't utilize alpha (transparency) values.\n   *   - OVERLAY - mix of MULTIPLY and SCREEN . \n   *   Multiplies dark values, and screens light values.\n   *   - HARD_LIGHT - SCREEN when greater than 50% gray, \n   *   MULTIPLY when lower.\n   *   - SOFT_LIGHT - mix of DARKEST and LIGHTEST. Works \n   *   like OVERLAY, but not as harsh. \n   *   - DODGE - lightens light tones and increases \n   *   contrast, ignores darks.\n   *   - BURN - darker areas are applied, increasing \n   *   contrast, ignores lights.\n   *\n   *   @param mode blend mode to set for canvas. either \n   *   BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \n   *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \n   *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL",
        "*   Stops p5.js from continuously executing the code \n   *   within draw(). If loop() is called, the code in \n   *   draw() begins to run continuously again. If using \n   *   noLoop() in setup(), it should be the last line \n   *   inside the block.  When noLoop() is used, it's not \n   *   possible to manipulate or access the screen inside \n   *   event handling functions such as mousePressed() or \n   *   keyPressed(). Instead, use those functions to call \n   *   redraw() or loop(), which will run draw(), which \n   *   can update the screen properly. This means that \n   *   when noLoop() has been called, no drawing can \n   *   happen, and functions like saveFrame() or \n   *   loadPixels() may not be used. \n   * \n   *  \n   *   Note that if the sketch is resized, redraw() will \n   *   be called to update the sketch, even after \n   *   noLoop() has been specified. Otherwise, the sketch \n   *   would enter an odd state until loop() was called.\n   *",
        "*   By default, p5.js loops through draw() \n   *   continuously, executing the code within it. \n   *   However, the draw() loop may be stopped by calling \n   *   noLoop(). In that case, the draw() loop can be \n   *   resumed with loop().\n   *",
        "*   The push() function saves the current drawing \n   *   style settings and transformations, while pop() \n   *   restores these settings. Note that these functions \n   *   are always used together. They allow you to change \n   *   the style and transformation settings and later \n   *   return to what you had. When a new state is \n   *   started with push(), it builds on the current \n   *   style and transform information. The push() and \n   *   pop() functions can be embedded to provide more \n   *   control. (See the second example for a \n   *   demonstration.)  push() stores information related \n   *   to the current transformation state and style \n   *   settings controlled by the following functions: \n   *   fill(), stroke(), tint(), strokeWeight(), \n   *   strokeCap(), strokeJoin(), imageMode(), \n   *   rectMode(), ellipseMode(), colorMode(), \n   *   textAlign(), textFont(), textMode(), textSize(), \n   *   textLeading().\n   *",
        "*   The push() function saves the current drawing \n   *   style settings and transformations, while pop() \n   *   restores these settings. Note that these functions \n   *   are always used together. They allow you to change \n   *   the style and transformation settings and later \n   *   return to what you had. When a new state is \n   *   started with push(), it builds on the current \n   *   style and transform information. The push() and \n   *   pop() functions can be embedded to provide more \n   *   control. (See the second example for a \n   *   demonstration.)  push() stores information related \n   *   to the current transformation state and style \n   *   settings controlled by the following functions: \n   *   fill(), stroke(), tint(), strokeWeight(), \n   *   strokeCap(), strokeJoin(), imageMode(), \n   *   rectMode(), ellipseMode(), colorMode(), \n   *   textAlign(), textFont(), textMode(), textSize(), \n   *   textLeading().\n   *",
        "*   Executes the code within draw() one time. This \n   *   functions allows the program to update the display \n   *   window only when necessary, for example when an \n   *   event registered by mousePressed() or keyPressed() \n   *   occurs.  In structuring a program, it only makes \n   *   sense to call redraw() within events such as \n   *   mousePressed(). This is because redraw() does not \n   *   run draw() immediately (it only sets a flag that \n   *   indicates an update is needed). \n   * \n   *  \n   *   The redraw() function does not work properly when \n   *   called inside draw(). To enable/disable \n   *   animations, use loop() and noLoop(). \n   * \n   *  \n   *   In addition you can set the number of redraws per \n   *   method call. Just add an integer as single \n   *   parameter for the number of redraws.\n   *\n   *   @param [n] Redraw for n-times. The default value \n   *   is 1.",
        "*   Multiplies the current matrix by the one specified \n   *   through the parameters. This is a powerful \n   *   operation that can perform the equivalent of \n   *   translate, scale, shear and rotate all at once. \n   *   You can learn more about transformation matrices \n   *   on  Wikipedia. The naming of the arguments here \n   *   follows the naming of the  WHATWG specification \n   *   and corresponds to a transformation matrix of the \n   *   form:\n   *\n   *   @param a numbers which define the 2x3 matrix to be \n   *   multiplied\n   *   @param b numbers which define the 2x3 matrix to be \n   *   multiplied\n   *   @param c numbers which define the 2x3 matrix to be \n   *   multiplied\n   *   @param d numbers which define the 2x3 matrix to be \n   *   multiplied\n   *   @param e numbers which define the 2x3 matrix to be \n   *   multiplied\n   *   @param f numbers which define the 2x3 matrix to be \n   *   multiplied\n   *   @chainable",
        "*   Replaces the current matrix with the identity \n   *   matrix.\n   *\n   *   @chainable",
        "*   Rotates a shape the amount specified by the angle \n   *   parameter. This function accounts for angleMode, \n   *   so angles can be entered in either RADIANS or \n   *   DEGREES.  Objects are always rotated around their \n   *   relative position to the origin and positive \n   *   numbers rotate objects in a clockwise direction. \n   *   Transformations apply to everything that happens \n   *   after and subsequent calls to the function \n   *   accumulates the effect. For example, calling \n   *   rotate(HALF_PI) and then rotate(HALF_PI) is the \n   *   same as rotate(PI). All tranformations are reset \n   *   when draw() begins again. \n   * \n   *  \n   *   Technically, rotate() multiplies the current \n   *   transformation matrix by a rotation matrix. This \n   *   function can be further controlled by the push() \n   *   and pop().\n   *\n   *   @param angle the angle of rotation, specified in \n   *   radians or degrees, depending on current angleMode\n   *   @param [axis] (in 3d) the axis to rotate around\n   *   @chainable",
        "*   Rotates around X axis.\n   *\n   *   @param angle the angle of rotation, specified in \n   *   radians or degrees, depending on current angleMode\n   *   @chainable",
        "*   Rotates around Y axis.\n   *\n   *   @param angle the angle of rotation, specified in \n   *   radians or degrees, depending on current angleMode\n   *   @chainable",
        "*   Rotates around Z axis. Webgl mode only.\n   *\n   *   @param angle the angle of rotation, specified in \n   *   radians or degrees, depending on current angleMode\n   *   @chainable",
        "*   Increases or decreases the size of a shape by \n   *   expanding and contracting vertices. Objects always \n   *   scale from their relative origin to the coordinate \n   *   system. Scale values are specified as decimal \n   *   percentages. For example, the function call \n   *   scale(2.0) increases the dimension of a shape by \n   *   200%.  Transformations apply to everything that \n   *   happens after and subsequent calls to the function \n   *   multiply the effect. For example, calling \n   *   scale(2.0) and then scale(1.5) is the same as \n   *   scale(3.0). If scale() is called within draw(), \n   *   the transformation is reset when the loop begins \n   *   again. \n   * \n   *  \n   *   Using this function with the z parameter is only \n   *   available in WEBGL mode. This function can be \n   *   further controlled with push() and pop().\n   *\n   *   @param s percent to scale the object, or \n   *   percentage to scale the object in the x-axis if \n   *   multiple arguments are given\n   *   @param [y] percent to scale the object in the \n   *   y-axis\n   *   @param [z] percent to scale the object in the \n   *   z-axis (webgl only)\n   *   @chainable",
        "*   Increases or decreases the size of a shape by \n   *   expanding and contracting vertices. Objects always \n   *   scale from their relative origin to the coordinate \n   *   system. Scale values are specified as decimal \n   *   percentages. For example, the function call \n   *   scale(2.0) increases the dimension of a shape by \n   *   200%.  Transformations apply to everything that \n   *   happens after and subsequent calls to the function \n   *   multiply the effect. For example, calling \n   *   scale(2.0) and then scale(1.5) is the same as \n   *   scale(3.0). If scale() is called within draw(), \n   *   the transformation is reset when the loop begins \n   *   again. \n   * \n   *  \n   *   Using this function with the z parameter is only \n   *   available in WEBGL mode. This function can be \n   *   further controlled with push() and pop().\n   *\n   *   @param scales per-axis percents to scale the \n   *   object\n   *   @chainable",
        "*   Shears a shape around the x-axis the amount \n   *   specified by the angle parameter. Angles should be \n   *   specified in the current angleMode. Objects are \n   *   always sheared around their relative position to \n   *   the origin and positive numbers shear objects in a \n   *   clockwise direction.  Transformations apply to \n   *   everything that happens after and subsequent calls \n   *   to the function accumulates the effect. For \n   *   example, calling shearX(PI/2) and then \n   *   shearX(PI/2) is the same as shearX(PI). If \n   *   shearX() is called within the draw(), the \n   *   transformation is reset when the loop begins \n   *   again. \n   * \n   *  \n   *   Technically, shearX() multiplies the current \n   *   transformation matrix by a rotation matrix. This \n   *   function can be further controlled by the push() \n   *   and pop() functions.\n   *\n   *   @param angle angle of shear specified in radians \n   *   or degrees, depending on current angleMode\n   *   @chainable",
        "*   Shears a shape around the y-axis the amount \n   *   specified by the angle parameter. Angles should be \n   *   specified in the current angleMode. Objects are \n   *   always sheared around their relative position to \n   *   the origin and positive numbers shear objects in a \n   *   clockwise direction.  Transformations apply to \n   *   everything that happens after and subsequent calls \n   *   to the function accumulates the effect. For \n   *   example, calling shearY(PI/2) and then \n   *   shearY(PI/2) is the same as shearY(PI). If \n   *   shearY() is called within the draw(), the \n   *   transformation is reset when the loop begins \n   *   again. \n   * \n   *  \n   *   Technically, shearY() multiplies the current \n   *   transformation matrix by a rotation matrix. This \n   *   function can be further controlled by the push() \n   *   and pop() functions.\n   *\n   *   @param angle angle of shear specified in radians \n   *   or degrees, depending on current angleMode\n   *   @chainable",
        "*   Specifies an amount to displace objects within the \n   *   display window. The x parameter specifies \n   *   left/right translation, the y parameter specifies \n   *   up/down translation.  Transformations are \n   *   cumulative and apply to everything that happens \n   *   after and subsequent calls to the function \n   *   accumulates the effect. For example, calling \n   *   translate(50, 0) and then translate(20, 0) is the \n   *   same as translate(70, 0). If translate() is called \n   *   within draw(), the transformation is reset when \n   *   the loop begins again. This function can be \n   *   further controlled by using push() and pop().\n   *\n   *   @param x left/right translation\n   *   @param y up/down translation\n   *   @param [z] forward/backward translation (webgl \n   *   only)\n   *   @chainable",
        "*   Specifies an amount to displace objects within the \n   *   display window. The x parameter specifies \n   *   left/right translation, the y parameter specifies \n   *   up/down translation.  Transformations are \n   *   cumulative and apply to everything that happens \n   *   after and subsequent calls to the function \n   *   accumulates the effect. For example, calling \n   *   translate(50, 0) and then translate(20, 0) is the \n   *   same as translate(70, 0). If translate() is called \n   *   within draw(), the transformation is reset when \n   *   the loop begins again. This function can be \n   *   further controlled by using push() and pop().\n   *\n   *   @param vector the vector to translate by\n   *   @chainable",
        "*   Use the beginContour() and endContour() functions \n   *   to create negative shapes within shapes such as \n   *   the center of the letter 'O'. beginContour() \n   *   begins recording vertices for the shape and \n   *   endContour() stops recording. The vertices that \n   *   define a negative shape must \"wind\" in the \n   *   opposite direction from the exterior shape. First \n   *   draw vertices for the exterior clockwise order, \n   *   then for internal shapes, draw vertices shape in \n   *   counter-clockwise.  These functions can only be \n   *   used within a beginShape()/endShape() pair and \n   *   transformations such as translate(), rotate(), and \n   *   scale() do not work within a \n   *   beginContour()/endContour() pair. It is also not \n   *   possible to use other shapes, such as ellipse() or \n   *   rect() within.\n   *\n   *   @chainable",
        "*   Using the beginShape() and endShape() functions \n   *   allow creating more complex forms. beginShape() \n   *   begins recording vertices for a shape and \n   *   endShape() stops recording. The value of the kind \n   *   parameter tells it which types of shapes to create \n   *   from the provided vertices. With no mode \n   *   specified, the shape can be any irregular polygon.  \n   *   The parameters available for beginShape() are \n   *   POINTS, LINES, TRIANGLES, TRIANGLE_FAN, \n   *   TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After \n   *   calling the beginShape() function, a series of \n   *   vertex() commands must follow. To stop drawing the \n   *   shape, call endShape(). Each shape will be \n   *   outlined with the current stroke color and filled \n   *   with the fill color. \n   * \n   *  \n   *   Transformations such as translate(), rotate(), and \n   *   scale() do not work within beginShape(). It is \n   *   also not possible to use other shapes, such as \n   *   ellipse() or rect() within beginShape().\n   *\n   *   @param [kind] either POINTS, LINES, TRIANGLES, \n   *   TRIANGLE_FAN TRIANGLE_STRIP, QUADS, or QUAD_STRIP\n   *   @chainable",
        "*   Specifies vertex coordinates for Bezier curves. \n   *   Each call to bezierVertex() defines the position \n   *   of two control points and one anchor point of a \n   *   Bezier curve, adding a new segment to a line or \n   *   shape.  The first time bezierVertex() is used \n   *   within a beginShape() call, it must be prefaced \n   *   with a call to vertex() to set the first anchor \n   *   point. This function must be used between \n   *   beginShape() and endShape() and only when there is \n   *   no MODE parameter specified to beginShape().\n   *\n   *   @param x2 x-coordinate for the first control point\n   *   @param y2 y-coordinate for the first control point\n   *   @param x3 x-coordinate for the second control \n   *   point\n   *   @param y3 y-coordinate for the second control \n   *   point\n   *   @param x4 x-coordinate for the anchor point\n   *   @param y4 y-coordinate for the anchor point\n   *   @chainable",
        "*   Specifies vertex coordinates for curves. This \n   *   function may only be used between beginShape() and \n   *   endShape() and only when there is no MODE \n   *   parameter specified to beginShape().  The first \n   *   and last points in a series of curveVertex() lines \n   *   will be used to guide the beginning and end of a \n   *   the curve. A minimum of four points is required to \n   *   draw a tiny curve between the second and third \n   *   points. Adding a fifth point with curveVertex() \n   *   will draw the curve between the second, third, and \n   *   fourth points. The curveVertex() function is an \n   *   implementation of Catmull-Rom splines.\n   *\n   *   @param x x-coordinate of the vertex\n   *   @param y y-coordinate of the vertex\n   *   @chainable",
        "*   Use the beginContour() and endContour() functions \n   *   to create negative shapes within shapes such as \n   *   the center of the letter 'O'. beginContour() \n   *   begins recording vertices for the shape and \n   *   endContour() stops recording. The vertices that \n   *   define a negative shape must \"wind\" in the \n   *   opposite direction from the exterior shape. First \n   *   draw vertices for the exterior clockwise order, \n   *   then for internal shapes, draw vertices shape in \n   *   counter-clockwise.  These functions can only be \n   *   used within a beginShape()/endShape() pair and \n   *   transformations such as translate(), rotate(), and \n   *   scale() do not work within a \n   *   beginContour()/endContour() pair. It is also not \n   *   possible to use other shapes, such as ellipse() or \n   *   rect() within.\n   *\n   *   @chainable",
        "*   The endShape() function is the companion to \n   *   beginShape() and may only be called after \n   *   beginShape(). When endshape() is called, all of \n   *   image data defined since the previous call to \n   *   beginShape() is written into the image buffer. The \n   *   constant CLOSE as the value for the MODE parameter \n   *   to close the shape (to connect the beginning and \n   *   the end).\n   *\n   *   @param [mode] use CLOSE to close the shape\n   *   @chainable",
        "*   Specifies vertex coordinates for quadratic Bezier \n   *   curves. Each call to quadraticVertex() defines the \n   *   position of one control points and one anchor \n   *   point of a Bezier curve, adding a new segment to a \n   *   line or shape. The first time quadraticVertex() is \n   *   used within a beginShape() call, it must be \n   *   prefaced with a call to vertex() to set the first \n   *   anchor point. This function must be used between \n   *   beginShape() and endShape() and only when there is \n   *   no MODE parameter specified to beginShape().\n   *\n   *   @param cx x-coordinate for the control point\n   *   @param cy y-coordinate for the control point\n   *   @param x3 x-coordinate for the anchor point\n   *   @param y3 y-coordinate for the anchor point\n   *   @chainable",
        "*   All shapes are constructed by connecting a series \n   *   of vertices. vertex() is used to specify the \n   *   vertex coordinates for points, lines, triangles, \n   *   quads, and polygons. It is used exclusively within \n   *   the beginShape() and endShape() functions.\n   *\n   *   @param x x-coordinate of the vertex\n   *   @param y y-coordinate of the vertex\n   *   @chainable",
        "*   All shapes are constructed by connecting a series \n   *   of vertices. vertex() is used to specify the \n   *   vertex coordinates for points, lines, triangles, \n   *   quads, and polygons. It is used exclusively within \n   *   the beginShape() and endShape() functions.\n   *\n   *   @param x x-coordinate of the vertex\n   *   @param y y-coordinate of the vertex\n   *   @param [z] z-coordinate of the vertex\n   *   @param [u] the vertex's texture u-coordinate\n   *   @param [v] the vertex's texture v-coordinate",
        "*   Creates a new instance of p5.StringDict using the \n   *   key, value pair or object you provide.\n   *\n   *   @param key or object",
        "*   Creates a new instance of p5.NumberDict using the \n   *   key, value pair or object you provide.\n   *\n   *   @param key or object",
        "*   The system variable deviceOrientation always \n   *   contains the orientation of the device. The value \n   *   of this variable will either be set 'landscape' or \n   *   'portrait'. If no data is available it will be set \n   *   to 'undefined'. either LANDSCAPE or PORTRAIT.\n   *",
        "*   The system variable accelerationX always contains \n   *   the acceleration of the device along the x axis. \n   *   Value is represented as meters per second squared.\n   *",
        "*   The system variable accelerationY always contains \n   *   the acceleration of the device along the y axis. \n   *   Value is represented as meters per second squared.\n   *",
        "*   The system variable accelerationZ always contains \n   *   the acceleration of the device along the z axis. \n   *   Value is represented as meters per second squared.\n   *",
        "*   The system variable pAccelerationX always contains \n   *   the acceleration of the device along the x axis in \n   *   the frame previous to the current frame. Value is \n   *   represented as meters per second squared.\n   *",
        "*   The system variable pAccelerationY always contains \n   *   the acceleration of the device along the y axis in \n   *   the frame previous to the current frame. Value is \n   *   represented as meters per second squared.\n   *",
        "*   The system variable pAccelerationZ always contains \n   *   the acceleration of the device along the z axis in \n   *   the frame previous to the current frame. Value is \n   *   represented as meters per second squared.\n   *",
        "*   The system variable rotationX always contains the \n   *   rotation of the device along the x axis. Value is \n   *   represented as 0 to +/-180 degrees.  Note: The \n   *   order the rotations are called is important, ie. \n   *   if used together, it must be called in the order \n   *   Z-X-Y or there might be unexpected behaviour.\n   *",
        "*   The system variable rotationY always contains the \n   *   rotation of the device along the y axis. Value is \n   *   represented as 0 to +/-90 degrees.  Note: The \n   *   order the rotations are called is important, ie. \n   *   if used together, it must be called in the order \n   *   Z-X-Y or there might be unexpected behaviour.\n   *",
        "*   The system variable rotationZ always contains the \n   *   rotation of the device along the z axis. Value is \n   *   represented as 0 to 359 degrees.  Unlike rotationX \n   *   and rotationY, this variable is available for \n   *   devices with a built-in compass only. \n   * \n   *  \n   *   Note: The order the rotations are called is \n   *   important, ie. if used together, it must be called \n   *   in the order Z-X-Y or there might be unexpected \n   *   behaviour.\n   *",
        "*   The system variable pRotationX always contains the \n   *   rotation of the device along the x axis in the \n   *   frame previous to the current frame. Value is \n   *   represented as 0 to +/-180 degrees.  pRotationX \n   *   can also be used with rotationX to determine the \n   *   rotate direction of the device along the X-axis.\n   *",
        "*   The system variable pRotationY always contains the \n   *   rotation of the device along the y axis in the \n   *   frame previous to the current frame. Value is \n   *   represented as 0 to +/-90 degrees.  pRotationY can \n   *   also be used with rotationY to determine the \n   *   rotate direction of the device along the Y-axis.\n   *",
        "*   The system variable pRotationZ always contains the \n   *   rotation of the device along the z axis in the \n   *   frame previous to the current frame. Value is \n   *   represented as 0 to 359 degrees.  pRotationZ can \n   *   also be used with rotationZ to determine the \n   *   rotate direction of the device along the Z-axis.\n   *",
        "*   The setMoveThreshold() function is used to set the \n   *   movement threshold for the deviceMoved() function. \n   *   The default threshold is set to 0.5.\n   *\n   *   @param value The threshold value",
        "*   The setShakeThreshold() function is used to set \n   *   the movement threshold for the deviceShaken() \n   *   function. The default threshold is set to 30.\n   *\n   *   @param value The threshold value",
        "*   The deviceMoved() function is called when the \n   *   device is moved by more than the threshold value \n   *   along X, Y or Z axis. The default threshold is set \n   *   to 0.5.\n   *",
        "*   The deviceTurned() function is called when the \n   *   device rotates by more than 90 degrees \n   *   continuously.  The axis that triggers the \n   *   deviceTurned() method is stored in the turnAxis \n   *   variable. The deviceTurned() method can be locked \n   *   to trigger on any axis: X, Y or Z by comparing the \n   *   turnAxis variable to 'X', 'Y' or 'Z'.\n   *",
        "*   The deviceShaken() function is called when the \n   *   device total acceleration changes of accelerationX \n   *   and accelerationY values is more than the \n   *   threshold value. The default threshold is set to \n   *   30.\n   *",
        "*   The boolean system variable keyIsPressed is true \n   *   if any key is pressed and false if no keys are \n   *   pressed.\n   *",
        "*   The system variable key always contains the value \n   *   of the most recent key on the keyboard that was \n   *   typed. To get the proper capitalization, it is \n   *   best to use it within keyTyped(). For non-ASCII \n   *   keys, use the keyCode variable.\n   *",
        "*   The variable keyCode is used to detect special \n   *   keys such as BACKSPACE, DELETE, ENTER, RETURN, \n   *   TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, \n   *   UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW. You \n   *   can also check for custom keys by looking up the \n   *   keyCode of any key on a site like this: \n   *   keycode.info.\n   *",
        "*   The keyPressed() function is called once every \n   *   time a key is pressed. The keyCode for the key \n   *   that was pressed is stored in the keyCode \n   *   variable.  For non-ASCII keys, use the keyCode \n   *   variable. You can check if the keyCode equals \n   *   BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, \n   *   SHIFT, CONTROL, OPTION, ALT, UP_ARROW, DOWN_ARROW, \n   *   LEFT_ARROW, RIGHT_ARROW. \n   * \n   *  \n   *   For ASCII keys that was pressed is stored in the \n   *   key variable. However, it does not distinguish \n   *   between uppercase and lowercase. For this reason, \n   *   it is recommended to use keyTyped() to read the \n   *   key variable, in which the case of the variable \n   *   will be distinguished. \n   * \n   *  \n   *   Because of how operating systems handle key \n   *   repeats, holding down a key may cause multiple \n   *   calls to keyTyped() (and keyReleased() as well). \n   *   The rate of repeat is set by the operating system \n   *   and how each computer is configured.\n   * \n   *  \n   *   Browsers may have different default behaviors \n   *   attached to various key events. To prevent any \n   *   default behavior for this event, add \"return \n   *   false\" to the end of the method.\n   *",
        "*   The keyReleased() function is called once every \n   *   time a key is released. See key and keyCode for \n   *   more information. Browsers may have different \n   *   default behaviors attached to various key events. \n   *   To prevent any default behavior for this event, \n   *   add \"return false\" to the end of the method.\n   *",
        "*   The keyTyped() function is called once every time \n   *   a key is pressed, but action keys such as Ctrl, \n   *   Shift, and Alt are ignored. The most recent key \n   *   pressed will be stored in the key variable.  \n   *   Because of how operating systems handle key \n   *   repeats, holding down a key will cause multiple \n   *   calls to keyTyped() (and keyReleased() as well). \n   *   The rate of repeat is set by the operating system \n   *   and how each computer is configured.\n   * \n   *  \n   *   Browsers may have different default behaviors \n   *   attached to various key events. To prevent any \n   *   default behavior for this event, add \"return \n   *   false\" to the end of the method.\n   *",
        "*   The keyIsDown() function checks if the key is \n   *   currently down, i.e. pressed. It can be used if \n   *   you have an object that moves, and you want \n   *   several keys to be able to affect its behaviour \n   *   simultaneously, such as moving a sprite \n   *   diagonally. You can put in any number representing \n   *   the keyCode of the key, or use any of the variable \n   *   keyCode names listed here.\n   *\n   *   @param code The key to check for.\n   *   @return whether key is down or not",
        "*   The system variable mouseX always contains the \n   *   current horizontal position of the mouse, relative \n   *   to (0, 0) of the canvas. If touch is used instead \n   *   of mouse input, mouseX will hold the x value of \n   *   the most recent touch point.\n   *",
        "*   The system variable mouseY always contains the \n   *   current vertical position of the mouse, relative \n   *   to (0, 0) of the canvas. If touch is used instead \n   *   of mouse input, mouseY will hold the y value of \n   *   the most recent touch point.\n   *",
        "*   The system variable pmouseX always contains the \n   *   horizontal position of the mouse or finger in the \n   *   frame previous to the current frame, relative to \n   *   (0, 0) of the canvas.\n   *",
        "*   The system variable pmouseY always contains the \n   *   vertical position of the mouse or finger in the \n   *   frame previous to the current frame, relative to \n   *   (0, 0) of the canvas.\n   *",
        "*   The system variable winMouseX always contains the \n   *   current horizontal position of the mouse, relative \n   *   to (0, 0) of the window.\n   *",
        "*   The system variable winMouseY always contains the \n   *   current vertical position of the mouse, relative \n   *   to (0, 0) of the window.\n   *",
        "*   The system variable pwinMouseX always contains the \n   *   horizontal position of the mouse in the frame \n   *   previous to the current frame, relative to (0, 0) \n   *   of the window.\n   *",
        "*   The system variable pwinMouseY always contains the \n   *   vertical position of the mouse in the frame \n   *   previous to the current frame, relative to (0, 0) \n   *   of the window.\n   *",
        "*   Processing automatically tracks if the mouse \n   *   button is pressed and which button is pressed. The \n   *   value of the system variable mouseButton is either \n   *   LEFT, RIGHT, or CENTER depending on which button \n   *   was pressed last. Warning: different browsers may \n   *   track mouseButton differently.\n   *",
        "*   The boolean system variable mouseIsPressed is true \n   *   if the mouse is pressed and false if not.\n   *",
        "*   The mouseMoved() function is called every time the \n   *   mouse moves and a mouse button is not pressed. \n   *   Browsers may have different default behaviors \n   *   attached to various mouse events. To prevent any \n   *   default behavior for this event, add \"return \n   *   false\" to the end of the method.\n   *",
        "*   The mouseDragged() function is called once every \n   *   time the mouse moves and a mouse button is \n   *   pressed. If no mouseDragged() function is defined, \n   *   the touchMoved() function will be called instead \n   *   if it is defined. Browsers may have different \n   *   default behaviors attached to various mouse \n   *   events. To prevent any default behavior for this \n   *   event, add \"return false\" to the end of the \n   *   method.\n   *",
        "*   The mousePressed() function is called once after \n   *   every time a mouse button is pressed. The \n   *   mouseButton variable (see the related reference \n   *   entry) can be used to determine which button has \n   *   been pressed. If no mousePressed() function is \n   *   defined, the touchStarted() function will be \n   *   called instead if it is defined. Browsers may have \n   *   different default behaviors attached to various \n   *   mouse events. To prevent any default behavior for \n   *   this event, add \"return false\" to the end of the \n   *   method.\n   *",
        "*   The mouseReleased() function is called every time \n   *   a mouse button is released. If no mouseReleased() \n   *   function is defined, the touchEnded() function \n   *   will be called instead if it is defined. Browsers \n   *   may have different default behaviors attached to \n   *   various mouse events. To prevent any default \n   *   behavior for this event, add \"return false\" to the \n   *   end of the method.\n   *",
        "*   The mouseClicked() function is called once after a \n   *   mouse button has been pressed and then released. \n   *   Browsers handle clicks differently, so this \n   *   function is only guaranteed to be run when the \n   *   left mouse button is clicked. To handle other \n   *   mouse buttons being pressed or released, see \n   *   mousePressed() or mouseReleased().\n   * \n   *  \n   *   Browsers may have different default behaviors \n   *   attached to various mouse events. To prevent any \n   *   default behavior for this event, add \"return \n   *   false\" to the end of the method.\n   *",
        "*   The doubleClicked() function is executed every \n   *   time a event listener has detected a dblclick \n   *   event which is a part of the DOM L3 specification. \n   *   The doubleClicked event is fired when a pointing \n   *   device button (usually a mouse's primary button) \n   *   is clicked twice on a single element. For more \n   *   info on the dblclick event refer to mozilla's \n   *   documentation here: \n   *   https://developer.mozilla.org/en-US/docs/Web/Events/dblclick\n   *",
        "*   The function mouseWheel() is executed every time a \n   *   vertical mouse wheel event is detected either \n   *   triggered by an actual mouse wheel or by a \n   *   touchpad. The event.delta property returns the \n   *   amount the mouse wheel have scrolled. The values \n   *   can be positive or negative depending on the \n   *   scroll direction (on OS X with \"natural\" scrolling \n   *   enabled, the signs are inverted).\n   * \n   *  \n   *   Browsers may have different default behaviors \n   *   attached to various mouse events. To prevent any \n   *   default behavior for this event, add \"return \n   *   false\" to the end of the method.\n   * \n   *  \n   *   Due to the current support of the \"wheel\" event on \n   *   Safari, the function may only work as expected if \n   *   \"return false\" is included while using Safari.\n   *",
        "*   The system variable touches[] contains an array of \n   *   the positions of all current touch points, \n   *   relative to (0, 0) of the canvas, and IDs \n   *   identifying a unique touch as it moves. Each \n   *   element in the array is an object with x, y, and \n   *   id properties. The touches[] array is not \n   *   supported on Safari and IE on touch-based desktops \n   *   (laptops).\n   *",
        "*   The touchStarted() function is called once after \n   *   every time a touch is registered. If no \n   *   touchStarted() function is defined, the \n   *   mousePressed() function will be called instead if \n   *   it is defined. Browsers may have different default \n   *   behaviors attached to various touch events. To \n   *   prevent any default behavior for this event, add \n   *   \"return false\" to the end of the method.\n   *",
        "*   The touchMoved() function is called every time a \n   *   touch move is registered. If no touchMoved() \n   *   function is defined, the mouseDragged() function \n   *   will be called instead if it is defined. Browsers \n   *   may have different default behaviors attached to \n   *   various touch events. To prevent any default \n   *   behavior for this event, add \"return false\" to the \n   *   end of the method.\n   *",
        "*   The touchEnded() function is called every time a \n   *   touch ends. If no touchEnded() function is \n   *   defined, the mouseReleased() function will be \n   *   called instead if it is defined. Browsers may have \n   *   different default behaviors attached to various \n   *   touch events. To prevent any default behavior for \n   *   this event, add \"return false\" to the end of the \n   *   method.\n   *",
        "*   Creates a new p5.Image (the datatype for storing \n   *   images). This provides a fresh buffer of pixels to \n   *   play with. Set the size of the buffer with the \n   *   width and height parameters.  .pixels gives access \n   *   to an array containing the values for all the \n   *   pixels in the display window. These values are \n   *   numbers. This array is the size (including an \n   *   appropriate factor for the pixelDensity) of the \n   *   display window x4, representing the R, G, B, A \n   *   values in order for each pixel, moving from left \n   *   to right across each row, then down each column. \n   *   See .pixels for more info. It may also be simpler \n   *   to use set() or get(). \n   * \n   *  \n   *   Before accessing the pixels of an image, the data \n   *   must loaded with the loadPixels() function. After \n   *   the array data has been modified, the \n   *   updatePixels() function must be run to update the \n   *   changes.\n   *\n   *   @param width width in pixels\n   *   @param height height in pixels\n   *   @return the p5.Image object",
        "*   Save the current canvas as an image. In Safari, \n   *   this will open the image in the window and the \n   *   user must provide their own filename on save-as. \n   *   Other browsers will either save the file \n   *   immediately, or prompt the user with a dialogue \n   *   window.\n   *\n   *   @param selectedCanvas a variable representing a \n   *   specific html5 canvas (optional)\n   *   @param [extension] 'jpg' or 'png'",
        "*   Save the current canvas as an image. In Safari, \n   *   this will open the image in the window and the \n   *   user must provide their own filename on save-as. \n   *   Other browsers will either save the file \n   *   immediately, or prompt the user with a dialogue \n   *   window.\n   *\n   *   @param [extension] 'jpg' or 'png'",
        "*   Capture a sequence of frames that can be used to \n   *   create a movie. Accepts a callback. For example, \n   *   you may wish to send the frames to a server where \n   *   they can be stored or converted into a movie. If \n   *   no callback is provided, the browser will pop up \n   *   save dialogues in an attempt to download all of \n   *   the images that have just been created. With the \n   *   callback provided the image data isn't saved by \n   *   default but instead passed as an argument to the \n   *   callback function as an array of objects, with the \n   *   size of array equal to the total number of frames. \n   *   Note that saveFrames() will only save the first 15 \n   *   frames of an animation. To export longer \n   *   animations, you might look into a library like \n   *   ccapture.js.\n   *\n   *   @param extension 'jpg' or 'png'\n   *   @param duration Duration in seconds to save the \n   *   frames for.\n   *   @param framerate Framerate to save the frames in.\n   *   @param [callback] A callback function that will be \n   *   executed to handle the image data. This function \n   *   should accept an array as argument. The array will \n   *   contain the specified number of frames of objects. \n   *   Each object has three properties: imageData - an \n   *   image/octet-stream, filename and extension.",
        "*   Loads an image from a path and creates a p5.Image \n   *   from it.  The image may not be immediately \n   *   available for rendering If you want to ensure that \n   *   the image is ready before doing anything with it, \n   *   place the loadImage() call in preload(). You may \n   *   also supply a callback function to handle the \n   *   image when it's ready. \n   * \n   *  \n   *   The path to the image should be relative to the \n   *   HTML file that links in your sketch. Loading an \n   *   image from a URL or other remote location may be \n   *   blocked due to your browser's built-in security.\n   *\n   *   @param path Path of the image to be loaded\n   *   @param [successCallback] Function to be called \n   *   once the image is loaded. Will be passed the \n   *   p5.Image.\n   *   @param [failureCallback] called with event error \n   *   if the image fails to load.\n   *   @return the p5.Image object",
        "*   Draw an image to the p5.js canvas. This function \n   *   can be used with different numbers of parameters. \n   *   The simplest use requires only three parameters: \n   *   img, x, and y—where (x, y) is the position of the \n   *   image. Two more parameters can optionally be added \n   *   to specify the width and height of the image. \n   * \n   *   This function can also be used with all eight \n   *   Number parameters. To differentiate between all \n   *   these parameters, p5.js uses the language of \n   *   \"destination rectangle\" (which corresponds to \n   *   \"dx\", \"dy\", etc.) and \"source image\" (which \n   *   corresponds to \"sx\", \"sy\", etc.) below. Specifying \n   *   the \"source image\" dimensions can be useful when \n   *   you want to display a subsection of the source \n   *   image instead of the whole thing. Here's a diagram \n   *   to explain further:\n   *\n   *   @param img the image to display\n   *   @param x the x-coordinate of the top-left corner \n   *   of the image\n   *   @param y the y-coordinate of the top-left corner \n   *   of the image\n   *   @param [width] the width to draw the image\n   *   @param [height] the height to draw the image",
        "*   Draw an image to the p5.js canvas. This function \n   *   can be used with different numbers of parameters. \n   *   The simplest use requires only three parameters: \n   *   img, x, and y—where (x, y) is the position of the \n   *   image. Two more parameters can optionally be added \n   *   to specify the width and height of the image. \n   * \n   *   This function can also be used with all eight \n   *   Number parameters. To differentiate between all \n   *   these parameters, p5.js uses the language of \n   *   \"destination rectangle\" (which corresponds to \n   *   \"dx\", \"dy\", etc.) and \"source image\" (which \n   *   corresponds to \"sx\", \"sy\", etc.) below. Specifying \n   *   the \"source image\" dimensions can be useful when \n   *   you want to display a subsection of the source \n   *   image instead of the whole thing. Here's a diagram \n   *   to explain further:\n   *\n   *   @param img the image to display\n   *   @param dx the x-coordinate of the destination \n   *   rectangle in which to draw the source image\n   *   @param dy the y-coordinate of the destination \n   *   rectangle in which to draw the source image\n   *   @param dWidth the width of the destination \n   *   rectangle\n   *   @param dHeight the height of the destination \n   *   rectangle\n   *   @param sx the x-coordinate of the subsection of \n   *   the source image to draw into the destination \n   *   rectangle\n   *   @param sy the y-coordinate of the subsection of \n   *   the source image to draw into the destination \n   *   rectangle\n   *   @param [sWidth] the width of the subsection of the \n   *   source image to draw into the destination \n   *   rectangle\n   *   @param [sHeight] the height of the subsection of \n   *   the source image to draw into the destination \n   *   rectangle",
        "*   Sets the fill value for displaying images. Images \n   *   can be tinted to specified colors or made \n   *   transparent by including an alpha value.  To apply \n   *   transparency to an image without affecting its \n   *   color, use white as the tint color and specify an \n   *   alpha value. For instance, tint(255, 128) will \n   *   make an image 50% transparent (assuming the \n   *   default alpha range of 0-255, which can be changed \n   *   with colorMode()). \n   * \n   *  \n   *   The value for the gray parameter must be less than \n   *   or equal to the current maximum value as specified \n   *   by colorMode(). The default maximum value is 255.\n   *\n   *   @param v1 red or hue value relative to the current \n   *   color range\n   *   @param v2 green or saturation value relative to \n   *   the current color range\n   *   @param v3 blue or brightness value relative to the \n   *   current color range",
        "*   Sets the fill value for displaying images. Images \n   *   can be tinted to specified colors or made \n   *   transparent by including an alpha value.  To apply \n   *   transparency to an image without affecting its \n   *   color, use white as the tint color and specify an \n   *   alpha value. For instance, tint(255, 128) will \n   *   make an image 50% transparent (assuming the \n   *   default alpha range of 0-255, which can be changed \n   *   with colorMode()). \n   * \n   *  \n   *   The value for the gray parameter must be less than \n   *   or equal to the current maximum value as specified \n   *   by colorMode(). The default maximum value is 255.\n   *\n   *   @param value a color string",
        "*   Sets the fill value for displaying images. Images \n   *   can be tinted to specified colors or made \n   *   transparent by including an alpha value.  To apply \n   *   transparency to an image without affecting its \n   *   color, use white as the tint color and specify an \n   *   alpha value. For instance, tint(255, 128) will \n   *   make an image 50% transparent (assuming the \n   *   default alpha range of 0-255, which can be changed \n   *   with colorMode()). \n   * \n   *  \n   *   The value for the gray parameter must be less than \n   *   or equal to the current maximum value as specified \n   *   by colorMode(). The default maximum value is 255.\n   *\n   *   @param values an array containing the \n   *   red,green,blue & and alpha components of the color",
        "*   Sets the fill value for displaying images. Images \n   *   can be tinted to specified colors or made \n   *   transparent by including an alpha value.  To apply \n   *   transparency to an image without affecting its \n   *   color, use white as the tint color and specify an \n   *   alpha value. For instance, tint(255, 128) will \n   *   make an image 50% transparent (assuming the \n   *   default alpha range of 0-255, which can be changed \n   *   with colorMode()). \n   * \n   *  \n   *   The value for the gray parameter must be less than \n   *   or equal to the current maximum value as specified \n   *   by colorMode(). The default maximum value is 255.\n   *\n   *   @param color the tint color",
        "*   Removes the current fill value for displaying \n   *   images and reverts to displaying images with their \n   *   original hues.\n   *",
        "*   Set image mode. Modifies the location from which \n   *   images are drawn by changing the way in which \n   *   parameters given to image() are interpreted. The \n   *   default mode is imageMode(CORNER), which \n   *   interprets the second and third parameters of \n   *   image() as the upper-left corner of the image. If \n   *   two additional parameters are specified, they are \n   *   used to set the image's width and height.  \n   *   imageMode(CORNERS) interprets the second and third \n   *   parameters of image() as the location of one \n   *   corner, and the fourth and fifth parameters as the \n   *   opposite corner. \n   * \n   *  \n   *   imageMode(CENTER) interprets the second and third \n   *   parameters of image() as the image's center point. \n   *   If two additional parameters are specified, they \n   *   are used to set the image's width and height.\n   *\n   *   @param mode either CORNER, CORNERS, or CENTER",
        "*   Uint8ClampedArray containing the values for all \n   *   the pixels in the display window. These values are \n   *   numbers. This array is the size (include an \n   *   appropriate factor for pixelDensity) of the \n   *   display window x4, representing the R, G, B, A \n   *   values in order for each pixel, moving from left \n   *   to right across each row, then down each column. \n   *   Retina and other high density displays will have \n   *   more pixels[] (by a factor of pixelDensity^2). For \n   *   example, if the image is 100x100 pixels, there \n   *   will be 40,000. On a retina display, there will be \n   *   160,000.  The first four values (indices 0-3) in \n   *   the array will be the R, G, B, A values of the \n   *   pixel at (0, 0). The second four values (indices \n   *   4-7) will contain the R, G, B, A values of the \n   *   pixel at (1, 0). More generally, to set values for \n   *   a pixel at (x, y): \n   * \n   *   var d = pixelDensity(); for (var i = 0; i < d; \n   *   i++) { for (var j = 0; j < d; j++) { // loop over \n   *   idx = 4 * ((y * d + j) * width * d + (x * d + i)); \n   *   pixels[idx] = r; pixels[idx+1] = g; pixels[idx+2] \n   *   = b; pixels[idx+3] = a; } }  \n   * \n   *   While the above method is complex, it is flexible \n   *   enough to work with any pixelDensity. Note that \n   *   set() will automatically take care of setting all \n   *   the appropriate values in pixels[] for a given (x, \n   *   y) at any pixelDensity, but the performance may \n   *   not be as fast when lots of modifications are made \n   *   to the pixel array. \n   * \n   *  \n   *   Before accessing this array, the data must loaded \n   *   with the loadPixels() function. After the array \n   *   data has been modified, the updatePixels() \n   *   function must be run to update the changes. \n   * \n   *  \n   *   Note that this is not a standard javascript array. \n   *   This means that standard javascript functions such \n   *   as slice() or arrayCopy() do not work.\n   *",
        "*   Copies a region of pixels from one image to \n   *   another, using a specified blend mode to do the \n   *   operation.\n   *\n   *   @param srcImage source image\n   *   @param sx X coordinate of the source's upper left \n   *   corner\n   *   @param sy Y coordinate of the source's upper left \n   *   corner\n   *   @param sw source image width\n   *   @param sh source image height\n   *   @param dx X coordinate of the destination's upper \n   *   left corner\n   *   @param dy Y coordinate of the destination's upper \n   *   left corner\n   *   @param dw destination image width\n   *   @param dh destination image height\n   *   @param blendMode the blend mode. either BLEND, \n   *   DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \n   *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \n   *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.",
        "*   Copies a region of pixels from one image to \n   *   another, using a specified blend mode to do the \n   *   operation.\n   *\n   *   @param sx X coordinate of the source's upper left \n   *   corner\n   *   @param sy Y coordinate of the source's upper left \n   *   corner\n   *   @param sw source image width\n   *   @param sh source image height\n   *   @param dx X coordinate of the destination's upper \n   *   left corner\n   *   @param dy Y coordinate of the destination's upper \n   *   left corner\n   *   @param dw destination image width\n   *   @param dh destination image height\n   *   @param blendMode the blend mode. either BLEND, \n   *   DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \n   *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \n   *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.",
        "*   Copies a region of the canvas to another region of \n   *   the canvas and copies a region of pixels from an \n   *   image used as the srcImg parameter into the canvas \n   *   srcImage is specified this is used as the source. \n   *   If the source and destination regions aren't the \n   *   same size, it will automatically resize source \n   *   pixels to fit the specified target region.\n   *\n   *   @param srcImage source image\n   *   @param sx X coordinate of the source's upper left \n   *   corner\n   *   @param sy Y coordinate of the source's upper left \n   *   corner\n   *   @param sw source image width\n   *   @param sh source image height\n   *   @param dx X coordinate of the destination's upper \n   *   left corner\n   *   @param dy Y coordinate of the destination's upper \n   *   left corner\n   *   @param dw destination image width\n   *   @param dh destination image height",
        "*   Copies a region of the canvas to another region of \n   *   the canvas and copies a region of pixels from an \n   *   image used as the srcImg parameter into the canvas \n   *   srcImage is specified this is used as the source. \n   *   If the source and destination regions aren't the \n   *   same size, it will automatically resize source \n   *   pixels to fit the specified target region.\n   *\n   *   @param sx X coordinate of the source's upper left \n   *   corner\n   *   @param sy Y coordinate of the source's upper left \n   *   corner\n   *   @param sw source image width\n   *   @param sh source image height\n   *   @param dx X coordinate of the destination's upper \n   *   left corner\n   *   @param dy Y coordinate of the destination's upper \n   *   left corner\n   *   @param dw destination image width\n   *   @param dh destination image height",
        "*   Applies a filter to the canvas.  \n   * \n   *   The presets options are: \n   * \n   *  \n   * \n   *   THRESHOLD Converts the image to black and white \n   *   pixels depending if they are above or below the \n   *   threshold defined by the level parameter. The \n   *   parameter must be between 0.0 (black) and 1.0 \n   *   (white). If no level is specified, 0.5 is used. \n   * \n   *  \n   * \n   *   GRAY Converts any colors in the image to grayscale \n   *   equivalents. No parameter is used. \n   * \n   *  \n   * \n   *   OPAQUE Sets the alpha channel to entirely opaque. \n   *   No parameter is used. \n   * \n   *  \n   * \n   *   INVERT Sets each pixel to its inverse value. No \n   *   parameter is used. \n   * \n   *  \n   * \n   *   POSTERIZE Limits each channel of the image to the \n   *   number of colors specified as the parameter. The \n   *   parameter can be set to values between 2 and 255, \n   *   but results are most noticeable in the lower \n   *   ranges. \n   * \n   *  \n   * \n   *   BLUR Executes a Gaussian blur with the level \n   *   parameter specifying the extent of the blurring. \n   *   If no parameter is used, the blur is equivalent to \n   *   Gaussian blur of radius 1. Larger values increase \n   *   the blur. \n   * \n   *  \n   * \n   *   ERODE Reduces the light areas. No parameter is \n   *   used. \n   * \n   *  \n   * \n   *   DILATE Increases the light areas. No parameter is \n   *   used.\n   *\n   *   @param filterType either THRESHOLD, GRAY, OPAQUE, \n   *   INVERT, POSTERIZE, BLUR, ERODE, DILATE or BLUR. \n   *   See Filters.js for docs on each available filter\n   *   @param [filterParam] an optional parameter unique \n   *   to each filter, see above",
        "*   Returns an array of [R,G,B,A] values for any pixel \n   *   or grabs a section of an image. If no parameters \n   *   are specified, the entire image is returned. Use \n   *   the x and y parameters to get the value of one \n   *   pixel. Get a section of the display window by \n   *   specifying additional w and h parameters. When \n   *   getting an image, the x and y parameters define \n   *   the coordinates for the upper-left corner of the \n   *   image, regardless of the current imageMode().  If \n   *   the pixel requested is outside of the image \n   *   window, [0,0,0,255] is returned. To get the \n   *   numbers scaled according to the current color \n   *   ranges and taking into account colorMode, use \n   *   getColor instead of get. \n   * \n   *  \n   *   Getting the color of a single pixel with get(x, y) \n   *   is easy, but not as fast as grabbing the data \n   *   directly from pixels[]. The equivalent statement \n   *   to get(x, y) using pixels[] with pixel density d \n   *   is  var x, y, d; // set these to the coordinates \n   *   var off = (y  width + x)  d * 4; var components = \n   *   [ pixels[off], pixels[off + 1], pixels[off + 2], \n   *   pixels[off + 3] ]; print(components);  \n   * \n   *  \n   *   See the reference for pixels[] for more \n   *   information.\n   *\n   *   @param [x] x-coordinate of the pixel\n   *   @param [y] y-coordinate of the pixel\n   *   @param [w] width\n   *   @param [h] height\n   *   @return values of pixel at x,y in array format [R, \n   *   G, B, A] or p5.Image",
        "*   Loads the pixel data for the display window into \n   *   the pixels[] array. This function must always be \n   *   called before reading from or writing to pixels[]. \n   *   Note that only changes made with set() or direct \n   *   manipulation of pixels[] will occur.\n   *",
        "*   Changes the color of any pixel, or writes an image \n   *   directly to the display window. The x and y \n   *   parameters specify the pixel to change and the c \n   *   parameter specifies the color value. This can be a \n   *   p5.Color object, or [R, G, B, A] pixel array. It \n   *   can also be a single grayscale value. When setting \n   *   an image, the x and y parameters define the \n   *   coordinates for the upper-left corner of the \n   *   image, regardless of the current imageMode().  \n   * \n   *  \n   *   After using set(), you must call updatePixels() \n   *   for your changes to appear. This should be called \n   *   once all pixels have been set, and must be called \n   *   before calling .get() or drawing the image.  \n   * \n   *   Setting the color of a single pixel with set(x, y) \n   *   is easy, but not as fast as putting the data \n   *   directly into pixels[]. Setting the pixels[] \n   *   values directly may be complicated when working \n   *   with a retina display, but will perform better \n   *   when lots of pixels need to be set directly on \n   *   every loop. \n   * \n   *   See the reference for pixels[] for more \n   *   information.\n   *\n   *   @param x x-coordinate of the pixel\n   *   @param y y-coordinate of the pixel\n   *   @param c insert a grayscale value | a pixel array \n   *   | a p5.Color object | a p5.Image to copy",
        "*   Updates the display window with the data in the \n   *   pixels[] array. Use in conjunction with \n   *   loadPixels(). If you're only reading pixels from \n   *   the array, there's no need to call updatePixels() \n   *   — updating is only necessary to apply changes. \n   *   updatePixels() should be called anytime the pixels \n   *   array is manipulated or set() is called, and only \n   *   changes made with set() or direct changes to \n   *   pixels[] will occur.\n   *\n   *   @param [x] x-coordinate of the upper-left corner \n   *   of region to update\n   *   @param [y] y-coordinate of the upper-left corner \n   *   of region to update\n   *   @param [w] width of region to update\n   *   @param [h] height of region to update",
        "*   Loads a JSON file from a file or a URL, and \n   *   returns an Object. Note that even if the JSON file \n   *   contains an Array, an Object will be returned with \n   *   index numbers as keys. This method is \n   *   asynchronous, meaning it may not finish before the \n   *   next line in your sketch is executed. JSONP is \n   *   supported via a polyfill and you can pass in as \n   *   the second argument an object with definitions of \n   *   the json callback following the syntax specified \n   *   here.\n   *\n   *   @param path name of the file or url to load\n   *   @param [jsonpOptions] options object for jsonp \n   *   related settings\n   *   @param [datatype] \"json\" or \"jsonp\"\n   *   @param [callback] function to be executed after \n   *   loadJSON() completes, data is passed in as first \n   *   argument\n   *   @param [errorCallback] function to be executed if \n   *   there is an error, response is passed in as first \n   *   argument\n   *   @return JSON data",
        "*   Reads the contents of a file and creates a String \n   *   array of its individual lines. If the name of the \n   *   file is used as the parameter, as in the above \n   *   example, the file must be located in the sketch \n   *   directory/folder.  Alternatively, the file maybe \n   *   be loaded from anywhere on the local computer \n   *   using an absolute path (something that starts with \n   *   / on Unix and Linux, or a drive letter on \n   *   Windows), or the filename parameter can be a URL \n   *   for a file found on a network. \n   * \n   *  \n   *   This method is asynchronous, meaning it may not \n   *   finish before the next line in your sketch is \n   *   executed.\n   *\n   *   @param filename name of the file or url to load\n   *   @param [callback] function to be executed after \n   *   loadStrings() completes, Array is passed in as \n   *   first argument\n   *   @param [errorCallback] function to be executed if \n   *   there is an error, response is passed in as first \n   *   argument\n   *   @return Array of Strings",
        "*   Reads the contents of a file or URL and creates a \n   *   p5.Table object with its values. If a file is \n   *   specified, it must be located in the sketch's \n   *   \"data\" folder. The filename parameter can also be \n   *   a URL to a file found online. By default, the file \n   *   is assumed to be comma-separated (in CSV format). \n   *   Table only looks for a header row if the 'header' \n   *   option is included. Possible options include: \n   * \n   *   - csv - parse the table as comma-separated values\n   *   - tsv - parse the table as tab-separated values\n   *   - header - this table has a header (title) row  \n   * \n   *   When passing in multiple options, pass them in as \n   *   separate parameters, seperated by commas. For \n   *   example: \n   * \n   *   \n   *   loadTable('my_csv_file.csv', 'csv', 'header');   \n   * \n   *  \n   *   All files loaded and saved use UTF-8 encoding. \n   * \n   *   This method is asynchronous, meaning it may not \n   *   finish before the next line in your sketch is \n   *   executed. Calling loadTable() inside preload() \n   *   guarantees to complete the operation before \n   *   setup() and draw() are called. \n   * \n   *   Outside of preload(), you may supply a callback \n   *   function to handle the object:\n   *\n   *   @param filename name of the file or URL to load\n   *   @param options \"header\" \"csv\" \"tsv\"\n   *   @param [callback] function to be executed after \n   *   loadTable() completes. On success, the Table \n   *   object is passed in as the first argument.\n   *   @param [errorCallback] function to be executed if \n   *   there is an error, response is passed in as first \n   *   argument\n   *   @return Table object containing data",
        "*   Reads the contents of a file or URL and creates a \n   *   p5.Table object with its values. If a file is \n   *   specified, it must be located in the sketch's \n   *   \"data\" folder. The filename parameter can also be \n   *   a URL to a file found online. By default, the file \n   *   is assumed to be comma-separated (in CSV format). \n   *   Table only looks for a header row if the 'header' \n   *   option is included. Possible options include: \n   * \n   *   - csv - parse the table as comma-separated values\n   *   - tsv - parse the table as tab-separated values\n   *   - header - this table has a header (title) row  \n   * \n   *   When passing in multiple options, pass them in as \n   *   separate parameters, seperated by commas. For \n   *   example: \n   * \n   *   \n   *   loadTable('my_csv_file.csv', 'csv', 'header');   \n   * \n   *  \n   *   All files loaded and saved use UTF-8 encoding. \n   * \n   *   This method is asynchronous, meaning it may not \n   *   finish before the next line in your sketch is \n   *   executed. Calling loadTable() inside preload() \n   *   guarantees to complete the operation before \n   *   setup() and draw() are called. \n   * \n   *   Outside of preload(), you may supply a callback \n   *   function to handle the object:\n   *\n   *   @param filename name of the file or URL to load\n   *   @param [callback] function to be executed after \n   *   loadTable() completes. On success, the Table \n   *   object is passed in as the first argument.\n   *   @param [errorCallback] function to be executed if \n   *   there is an error, response is passed in as first \n   *   argument",
        "*   Reads the contents of a file and creates an XML \n   *   object with its values. If the name of the file is \n   *   used as the parameter, as in the above example, \n   *   the file must be located in the sketch \n   *   directory/folder. Alternatively, the file maybe be \n   *   loaded from anywhere on the local computer using \n   *   an absolute path (something that starts with / on \n   *   Unix and Linux, or a drive letter on Windows), or \n   *   the filename parameter can be a URL for a file \n   *   found on a network. \n   * \n   *   This method is asynchronous, meaning it may not \n   *   finish before the next line in your sketch is \n   *   executed. Calling loadXML() inside preload() \n   *   guarantees to complete the operation before \n   *   setup() and draw() are called. \n   * \n   *   Outside of preload(), you may supply a callback \n   *   function to handle the object.\n   *\n   *   @param filename name of the file or URL to load\n   *   @param [callback] function to be executed after \n   *   loadXML() completes, XML object is passed in as \n   *   first argument\n   *   @param [errorCallback] function to be executed if \n   *   there is an error, response is passed in as first \n   *   argument\n   *   @return XML object containing data",
        "*   Method for executing an HTTP GET request. If data \n   *   type is not specified, p5 will try to guess based \n   *   on the URL, defaulting to text. This is equivalent \n   *   to calling httpDo(path, 'GET').\n   *\n   *   @param path name of the file or url to load\n   *   @param [datatype] \"json\", \"jsonp\", \"xml\", or \n   *   \"text\"\n   *   @param [data] param data passed sent with request\n   *   @param [callback] function to be executed after \n   *   httpGet() completes, data is passed in as first \n   *   argument\n   *   @param [errorCallback] function to be executed if \n   *   there is an error, response is passed in as first \n   *   argument",
        "*   Method for executing an HTTP POST request. If data \n   *   type is not specified, p5 will try to guess based \n   *   on the URL, defaulting to text. This is equivalent \n   *   to calling httpDo(path, 'POST').\n   *\n   *   @param path name of the file or url to load\n   *   @param [datatype] \"json\", \"jsonp\", \"xml\", or \n   *   \"text\". If omitted, httpPost() will guess.\n   *   @param [data] param data passed sent with request\n   *   @param [callback] function to be executed after \n   *   httpPost() completes, data is passed in as first \n   *   argument\n   *   @param [errorCallback] function to be executed if \n   *   there is an error, response is passed in as first \n   *   argument",
        "*   Method for executing an HTTP request. If data type \n   *   is not specified, p5 will try to guess based on \n   *   the URL, defaulting to text. For more advanced \n   *   use, you may also pass in the path as the first \n   *   argument and a object as the second argument, the \n   *   signature follows the one specified in the Fetch \n   *   API specification.\n   *\n   *   @param path name of the file or url to load\n   *   @param [method] either \"GET\", \"POST\", or \"PUT\", \n   *   defaults to \"GET\"\n   *   @param [datatype] \"json\", \"jsonp\", \"xml\", or \n   *   \"text\"\n   *   @param [data] param data passed sent with request\n   *   @param [callback] function to be executed after \n   *   httpGet() completes, data is passed in as first \n   *   argument\n   *   @param [errorCallback] function to be executed if \n   *   there is an error, response is passed in as first \n   *   argument",
        "*   Method for executing an HTTP request. If data type \n   *   is not specified, p5 will try to guess based on \n   *   the URL, defaulting to text. For more advanced \n   *   use, you may also pass in the path as the first \n   *   argument and a object as the second argument, the \n   *   signature follows the one specified in the Fetch \n   *   API specification.\n   *\n   *   @param path name of the file or url to load\n   *   @param options Request object options as \n   *   documented in the \"fetch\" API reference\n   *   @param [callback] function to be executed after \n   *   httpGet() completes, data is passed in as first \n   *   argument\n   *   @param [errorCallback] function to be executed if \n   *   there is an error, response is passed in as first \n   *   argument",
        "*   Save an image, text, json, csv, wav, or html. \n   *   Prompts download to the client's computer. Note \n   *   that it is not recommended to call save() within \n   *   draw if it's looping, as the save() function will \n   *   open a new save dialog every frame. The default \n   *   behavior is to save the canvas as an image. You \n   *   can optionally specify a filename. For example: \n   * \n   *  \n   *   save(); save('myCanvas.jpg'); // save a specific \n   *   canvas with a filename  \n   * \n   *   Alternately, the first parameter can be a pointer \n   *   to a canvas p5.Element, an Array of Strings, an \n   *   Array of JSON, a JSON object, a p5.Table, a \n   *   p5.Image, or a p5.SoundFile (requires p5.sound). \n   *   The second parameter is a filename (including \n   *   extension). The third parameter is for options \n   *   specific to this type of object. This method will \n   *   save a file that fits the given paramaters. For \n   *   example: \n   * \n   *  \n   *   // Saves canvas as an image save('myCanvas.jpg'); \n   *   // Saves pImage as a png image var img = \n   *   createImage(10, 10); save(img, 'my.png'); // Saves \n   *   canvas as an image var cnv = createCanvas(100, \n   *   100); save(cnv, 'myCanvas.jpg'); // Saves \n   *   p5.Renderer object as an image var gb = \n   *   createGraphics(100, 100); save(gb, \n   *   'myGraphics.jpg'); var myTable = new p5.Table(); \n   *   // Saves table as html file save(myTable, \n   *   'myTable.html'); // Comma Separated Values \n   *   save(myTable, 'myTable.csv'); // Tab Separated \n   *   Values save(myTable, 'myTable.tsv'); var myJSON = \n   *   { a: 1, b: true }; // Saves pretty JSON \n   *   save(myJSON, 'my.json'); // Optimizes JSON \n   *   filesize save(myJSON, 'my.json', true); // Saves \n   *   array of strings to a text file with line breaks \n   *   after each item var arrayOfStrings = ['a', 'b']; \n   *   save(arrayOfStrings, 'my.txt');\n   *\n   *   @param [objectOrFilename] If filename is provided, \n   *   will save canvas as an image with either png or \n   *   jpg extension depending on the filename. If object \n   *   is provided, will save depending on the object and \n   *   filename (see examples above).\n   *   @param [filename] If an object is provided as the \n   *   first parameter, then the second parameter \n   *   indicates the filename, and should include an \n   *   appropriate file extension (see examples above).\n   *   @param [options] Additional options depend on \n   *   filetype. For example, when saving JSON, true \n   *   indicates that the output will be optimized for \n   *   filesize, rather than readability.",
        "*   Writes the contents of an Array or a JSON object \n   *   to a .json file. The file saving process and \n   *   location of the saved file will vary between web \n   *   browsers.\n   *\n   *   @param [optimize] If true, removes line breaks and \n   *   spaces from the output file to optimize filesize \n   *   (but not readability).",
        "*   Writes an array of Strings to a text file, one \n   *   line per String. The file saving process and \n   *   location of the saved file will vary between web \n   *   browsers.\n   *\n   *   @param list string array to be written\n   *   @param filename filename for output\n   *   @param [extension] the filename's extension",
        "*   Writes the contents of a Table object to a file. \n   *   Defaults to a text file with \n   *   comma-separated-values ('csv') but can also use \n   *   tab separation ('tsv'), or generate an HTML table \n   *   ('html'). The file saving process and location of \n   *   the saved file will vary between web browsers.\n   *\n   *   @param Table the Table object to save to a file\n   *   @param filename the filename to which the Table \n   *   should be saved\n   *   @param [options] can be one of \"tsv\", \"csv\", or \n   *   \"html\"",
        "*   Calculates the absolute value (magnitude) of a \n   *   number. Maps to Math.abs(). The absolute value of \n   *   a number is always positive.\n   *\n   *   @param n number to compute\n   *   @return absolute value of given number",
        "*   Calculates the closest int value that is greater \n   *   than or equal to the value of the parameter. Maps \n   *   to Math.ceil(). For example, ceil(9.03) returns \n   *   the value 10.\n   *\n   *   @param n number to round up\n   *   @return rounded up number",
        "*   Constrains a value between a minimum and maximum \n   *   value.\n   *\n   *   @param n number to constrain\n   *   @param low minimum limit\n   *   @param high maximum limit\n   *   @return constrained number",
        "*   Calculates the distance between two points.\n   *\n   *   @param x1 x-coordinate of the first point\n   *   @param y1 y-coordinate of the first point\n   *   @param x2 x-coordinate of the second point\n   *   @param y2 y-coordinate of the second point\n   *   @return distance between the two points",
        "*   Calculates the distance between two points.\n   *\n   *   @param x1 x-coordinate of the first point\n   *   @param y1 y-coordinate of the first point\n   *   @param z1 z-coordinate of the first point\n   *   @param x2 x-coordinate of the second point\n   *   @param y2 y-coordinate of the second point\n   *   @param z2 z-coordinate of the second point\n   *   @return distance between the two points",
        "*   Returns Euler's number e (2.71828...) raised to \n   *   the power of the n parameter. Maps to Math.exp().\n   *\n   *   @param n exponent to raise\n   *   @return e^n",
        "*   Calculates the closest int value that is less than \n   *   or equal to the value of the parameter. Maps to \n   *   Math.floor().\n   *\n   *   @param n number to round down\n   *   @return rounded down number",
        "*   Calculates a number between two numbers at a \n   *   specific increment. The amt parameter is the \n   *   amount to interpolate between the two values where \n   *   0.0 equal to the first point, 0.1 is very near the \n   *   first point, 0.5 is half-way in between, etc. The \n   *   lerp function is convenient for creating motion \n   *   along a straight path and for drawing dotted \n   *   lines.\n   *\n   *   @param start first value\n   *   @param stop second value\n   *   @param amt number between 0.0 and 1.0\n   *   @return lerped value",
        "*   Calculates the natural logarithm (the base-e \n   *   logarithm) of a number. This function expects the \n   *   n parameter to be a value greater than 0.0. Maps \n   *   to Math.log().\n   *\n   *   @param n number greater than 0\n   *   @return natural logarithm of n",
        "*   Calculates the magnitude (or length) of a vector. \n   *   A vector is a direction in space commonly used in \n   *   computer graphics and linear algebra. Because it \n   *   has no \"start\" position, the magnitude of a vector \n   *   can be thought of as the distance from the \n   *   coordinate 0,0 to its x,y value. Therefore, mag() \n   *   is a shortcut for writing dist(0, 0, x, y).\n   *\n   *   @param a first value\n   *   @param b second value\n   *   @return magnitude of vector from (0,0) to (a,b)",
        "*   Re-maps a number from one range to another.  In \n   *   the first example above, the number 25 is \n   *   converted from a value in the range of 0 to 100 \n   *   into a value that ranges from the left edge of the \n   *   window (0) to the right edge (width).\n   *\n   *   @param value the incoming value to be converted\n   *   @param start1 lower bound of the value's current \n   *   range\n   *   @param stop1 upper bound of the value's current \n   *   range\n   *   @param start2 lower bound of the value's target \n   *   range\n   *   @param stop2 upper bound of the value's target \n   *   range\n   *   @param [withinBounds] constrain the value to the \n   *   newly mapped range\n   *   @return remapped number",
        "*   Determines the largest value in a sequence of \n   *   numbers, and then returns that value. max() \n   *   accepts any number of Number parameters, or an \n   *   Array of any length.\n   *\n   *   @param n0 Number to compare\n   *   @param n1 Number to compare\n   *   @return maximum Number",
        "*   Determines the largest value in a sequence of \n   *   numbers, and then returns that value. max() \n   *   accepts any number of Number parameters, or an \n   *   Array of any length.\n   *\n   *   @param nums Numbers to compare",
        "*   Determines the smallest value in a sequence of \n   *   numbers, and then returns that value. min() \n   *   accepts any number of Number parameters, or an \n   *   Array of any length.\n   *\n   *   @param n0 Number to compare\n   *   @param n1 Number to compare\n   *   @return minimum Number",
        "*   Determines the smallest value in a sequence of \n   *   numbers, and then returns that value. min() \n   *   accepts any number of Number parameters, or an \n   *   Array of any length.\n   *\n   *   @param nums Numbers to compare",
        "*   Normalizes a number from another range into a \n   *   value between 0 and 1. Identical to map(value, \n   *   low, high, 0, 1). Numbers outside of the range are \n   *   not clamped to 0 and 1, because out-of-range \n   *   values are often intentional and useful. (See the \n   *   second example above.)\n   *\n   *   @param value incoming value to be normalized\n   *   @param start lower bound of the value's current \n   *   range\n   *   @param stop upper bound of the value's current \n   *   range\n   *   @return normalized number",
        "*   Facilitates exponential expressions. The pow() \n   *   function is an efficient way of multiplying \n   *   numbers by themselves (or their reciprocals) in \n   *   large quantities. For example, pow(3, 5) is \n   *   equivalent to the expression 33333 and pow(3, -5) \n   *   is equivalent to 1 / 33333. Maps to Math.pow().\n   *\n   *   @param n base of the exponential expression\n   *   @param e power by which to raise the base\n   *   @return n^e",
        "*   Calculates the integer closest to the n parameter. \n   *   For example, round(133.8) returns the value 134. \n   *   Maps to Math.round().\n   *\n   *   @param n number to round\n   *   @return rounded number",
        "*   Squares a number (multiplies a number by itself). \n   *   The result is always a positive number, as \n   *   multiplying two negative numbers always yields a \n   *   positive result. For example, -1 * -1 = 1.\n   *\n   *   @param n number to square\n   *   @return squared number",
        "*   Calculates the square root of a number. The square \n   *   root of a number is always positive, even though \n   *   there may be a valid negative root. The square \n   *   root s of number a is such that s*s = a. It is the \n   *   opposite of squaring. Maps to Math.sqrt().\n   *\n   *   @param n non-negative number to square root\n   *   @return square root of number",
        "*   Creates a new p5.Vector (the datatype for storing \n   *   vectors). This provides a two or three dimensional \n   *   vector, specifically a Euclidean (also known as \n   *   geometric) vector. A vector is an entity that has \n   *   both magnitude and direction.\n   *\n   *   @param [x] x component of the vector\n   *   @param [y] y component of the vector\n   *   @param [z] z component of the vector",
        "*   Returns the Perlin noise value at specified \n   *   coordinates. Perlin noise is a random sequence \n   *   generator producing a more natural ordered, \n   *   harmonic succession of numbers compared to the \n   *   standard random() function. It was invented by Ken \n   *   Perlin in the 1980s and been used since in \n   *   graphical applications to produce procedural \n   *   textures, natural motion, shapes, terrains etc. \n   *   The main difference to the random() function is \n   *   that Perlin noise is defined in an infinite \n   *   n-dimensional space where each pair of coordinates \n   *   corresponds to a fixed semi-random value (fixed \n   *   only for the lifespan of the program; see the \n   *   noiseSeed() function). p5.js can compute 1D, 2D \n   *   and 3D noise, depending on the number of \n   *   coordinates given. The resulting value will always \n   *   be between 0.0 and 1.0. The noise value can be \n   *   animated by moving through the noise space as \n   *   demonstrated in the example above. The 2nd and 3rd \n   *   dimension can also be interpreted as time.\n   * \n   *   The actual noise is structured similar to an audio \n   *   signal, in respect to the function's use of \n   *   frequencies. Similar to the concept of harmonics \n   *   in physics, perlin noise is computed over several \n   *   octaves which are added together for the final \n   *   result. \n   * \n   *   Another way to adjust the character of the \n   *   resulting sequence is the scale of the input \n   *   coordinates. As the function works within an \n   *   infinite space the value of the coordinates \n   *   doesn't matter as such, only the distance between \n   *   successive coordinates does (eg. when using \n   *   noise() within a loop). As a general rule the \n   *   smaller the difference between coordinates, the \n   *   smoother the resulting noise sequence will be. \n   *   Steps of 0.005-0.03 work best for most \n   *   applications, but this will differ depending on \n   *   use.\n   *\n   *   @param x x-coordinate in noise space\n   *   @param [y] y-coordinate in noise space\n   *   @param [z] z-coordinate in noise space\n   *   @return Perlin noise value (between 0 and 1) at \n   *   specified coordinates",
        "*   Adjusts the character and level of detail produced \n   *   by the Perlin noise function. Similar to harmonics \n   *   in physics, noise is computed over several \n   *   octaves. Lower octaves contribute more to the \n   *   output signal and as such define the overall \n   *   intensity of the noise, whereas higher octaves \n   *   create finer grained details in the noise \n   *   sequence.  By default, noise is computed over 4 \n   *   octaves with each octave contributing exactly half \n   *   than its predecessor, starting at 50% strength for \n   *   the 1st octave. This falloff amount can be changed \n   *   by adding an additional function parameter. Eg. a \n   *   falloff factor of 0.75 means each octave will now \n   *   have 75% impact (25% less) of the previous lower \n   *   octave. Any value between 0.0 and 1.0 is valid, \n   *   however note that values greater than 0.5 might \n   *   result in greater than 1.0 values returned by \n   *   noise(). \n   * \n   *  \n   *   By changing these parameters, the signal created \n   *   by the noise() function can be adapted to fit very \n   *   specific needs and characteristics.\n   *\n   *   @param lod number of octaves to be used by the \n   *   noise\n   *   @param falloff falloff factor for each octave",
        "*   Sets the seed value for noise(). By default, \n   *   noise() produces different results each time the \n   *   program is run. Set the value parameter to a \n   *   constant to return the same pseudo-random numbers \n   *   each time the software is run.\n   *\n   *   @param seed the seed value",
        "*   Sets the seed value for random(). By default, \n   *   random() produces different results each time the \n   *   program is run. Set the seed parameter to a \n   *   constant to return the same pseudo-random numbers \n   *   each time the software is run.\n   *\n   *   @param seed the seed value",
        "*   Return a random floating-point number. Takes \n   *   either 0, 1 or 2 arguments. \n   * \n   *   If no argument is given, returns a random number \n   *   from 0 up to (but not including) 1. \n   * \n   *   If one argument is given and it is a number, \n   *   returns a random number from 0 up to (but not \n   *   including) the number. \n   * \n   *   If one argument is given and it is an array, \n   *   returns a random element from that array. \n   * \n   *   If two arguments are given, returns a random \n   *   number from the first argument up to (but not \n   *   including) the second argument.\n   *\n   *   @param [min] the lower bound (inclusive)\n   *   @param [max] the upper bound (exclusive)\n   *   @return the random number",
        "*   Return a random floating-point number. Takes \n   *   either 0, 1 or 2 arguments. \n   * \n   *   If no argument is given, returns a random number \n   *   from 0 up to (but not including) 1. \n   * \n   *   If one argument is given and it is a number, \n   *   returns a random number from 0 up to (but not \n   *   including) the number. \n   * \n   *   If one argument is given and it is an array, \n   *   returns a random element from that array. \n   * \n   *   If two arguments are given, returns a random \n   *   number from the first argument up to (but not \n   *   including) the second argument.\n   *\n   *   @param choices the array to choose from\n   *   @return the random element from the array",
        "*   Returns a random number fitting a Gaussian, or \n   *   normal, distribution. There is theoretically no \n   *   minimum or maximum value that randomGaussian() \n   *   might return. Rather, there is just a very low \n   *   probability that values far from the mean will be \n   *   returned; and a higher probability that numbers \n   *   near the mean will be returned.  Takes either 0, 1 \n   *   or 2 arguments.\n   *  \n   *   If no args, returns a mean of 0 and standard \n   *   deviation of 1.\n   *  \n   *   If one arg, that arg is the mean (standard \n   *   deviation is 1).\n   *  \n   *   If two args, first is mean, second is standard \n   *   deviation.\n   *\n   *   @param mean the mean\n   *   @param sd the standard deviation\n   *   @return the random number",
        "*   The inverse of cos(), returns the arc cosine of a \n   *   value. This function expects the values in the \n   *   range of -1 to 1 and values are returned in the \n   *   range 0 to PI (3.1415927).\n   *\n   *   @param value the value whose arc cosine is to be \n   *   returned\n   *   @return the arc cosine of the given value",
        "*   The inverse of sin(), returns the arc sine of a \n   *   value. This function expects the values in the \n   *   range of -1 to 1 and values are returned in the \n   *   range -PI/2 to PI/2.\n   *\n   *   @param value the value whose arc sine is to be \n   *   returned\n   *   @return the arc sine of the given value",
        "*   The inverse of tan(), returns the arc tangent of a \n   *   value. This function expects the values in the \n   *   range of -Infinity to Infinity (exclusive) and \n   *   values are returned in the range -PI/2 to PI/2.\n   *\n   *   @param value the value whose arc tangent is to be \n   *   returned\n   *   @return the arc tangent of the given value",
        "*   Calculates the angle (in radians) from a specified \n   *   point to the coordinate origin as measured from \n   *   the positive x-axis. Values are returned as a \n   *   float in the range from PI to -PI. The atan2() \n   *   function is most often used for orienting geometry \n   *   to the position of the cursor.  Note: The \n   *   y-coordinate of the point is the first parameter, \n   *   and the x-coordinate is the second parameter, due \n   *   the the structure of calculating the tangent.\n   *\n   *   @param y y-coordinate of the point\n   *   @param x x-coordinate of the point\n   *   @return the arc tangent of the given point",
        "*   Calculates the cosine of an angle. This function \n   *   takes into account the current angleMode. Values \n   *   are returned in the range -1 to 1.\n   *\n   *   @param angle the angle\n   *   @return the cosine of the angle",
        "*   Calculates the sine of an angle. This function \n   *   takes into account the current angleMode. Values \n   *   are returned in the range -1 to 1.\n   *\n   *   @param angle the angle\n   *   @return the sine of the angle",
        "*   Calculates the tangent of an angle. This function \n   *   takes into account the current angleMode. Values \n   *   are returned in the range -1 to 1.\n   *\n   *   @param angle the angle\n   *   @return the tangent of the angle",
        "*   Converts a radian measurement to its corresponding \n   *   value in degrees. Radians and degrees are two ways \n   *   of measuring the same thing. There are 360 degrees \n   *   in a circle and 2*PI radians in a circle. For \n   *   example, 90° = PI/2 = 1.5707964. This function \n   *   does not take into account the current angleMode.\n   *\n   *   @param radians the radians value to convert to \n   *   degrees\n   *   @return the converted angle",
        "*   Converts a degree measurement to its corresponding \n   *   value in radians. Radians and degrees are two ways \n   *   of measuring the same thing. There are 360 degrees \n   *   in a circle and 2*PI radians in a circle. For \n   *   example, 90° = PI/2 = 1.5707964. This function \n   *   does not take into account the current angleMode.\n   *\n   *   @param degrees the degree value to convert to \n   *   radians\n   *   @return the converted angle",
        "*   Sets the current mode of p5 to given mode. Default \n   *   mode is RADIANS.\n   *\n   *   @param mode either RADIANS or DEGREES",
        "*   Sets the current alignment for drawing text. \n   *   Accepts two arguments: horizAlign (LEFT, CENTER, \n   *   or RIGHT) and vertAlign (TOP, BOTTOM, CENTER, or \n   *   BASELINE). The horizAlign parameter is in \n   *   reference to the x value of the text() function, \n   *   while the vertAlign parameter is in reference to \n   *   the y value. \n   * \n   *   So if you write textAlign(LEFT), you are aligning \n   *   the left edge of your text to the x value you give \n   *   in text(). If you write textAlign(RIGHT, TOP), you \n   *   are aligning the right edge of your text to the x \n   *   value and the top of edge of the text to the y \n   *   value.\n   *\n   *   @param horizAlign horizontal alignment, either \n   *   LEFT, CENTER, or RIGHT\n   *   @param [vertAlign] vertical alignment, either TOP, \n   *   BOTTOM, CENTER, or BASELINE\n   *   @chainable",
        "*   Sets the current alignment for drawing text. \n   *   Accepts two arguments: horizAlign (LEFT, CENTER, \n   *   or RIGHT) and vertAlign (TOP, BOTTOM, CENTER, or \n   *   BASELINE). The horizAlign parameter is in \n   *   reference to the x value of the text() function, \n   *   while the vertAlign parameter is in reference to \n   *   the y value. \n   * \n   *   So if you write textAlign(LEFT), you are aligning \n   *   the left edge of your text to the x value you give \n   *   in text(). If you write textAlign(RIGHT, TOP), you \n   *   are aligning the right edge of your text to the x \n   *   value and the top of edge of the text to the y \n   *   value.\n   *",
        "*   Sets/gets the spacing, in pixels, between lines of \n   *   text. This setting will be used in all subsequent \n   *   calls to the text() function.\n   *\n   *   @param leading the size in pixels for spacing \n   *   between lines\n   *   @chainable",
        "*   Sets/gets the spacing, in pixels, between lines of \n   *   text. This setting will be used in all subsequent \n   *   calls to the text() function.\n   *",
        "*   Sets/gets the current font size. This size will be \n   *   used in all subsequent calls to the text() \n   *   function. Font size is measured in pixels.\n   *\n   *   @param theSize the size of the letters in units of \n   *   pixels\n   *   @chainable",
        "*   Sets/gets the current font size. This size will be \n   *   used in all subsequent calls to the text() \n   *   function. Font size is measured in pixels.\n   *",
        "*   Sets/gets the style of the text for system fonts \n   *   to NORMAL, ITALIC, or BOLD. Note: this may be is \n   *   overridden by CSS styling. For non-system fonts \n   *   (opentype, truetype, etc.) please load styled \n   *   fonts instead.\n   *\n   *   @param theStyle styling for text, either NORMAL, \n   *   ITALIC, or BOLD\n   *   @chainable",
        "*   Sets/gets the style of the text for system fonts \n   *   to NORMAL, ITALIC, or BOLD. Note: this may be is \n   *   overridden by CSS styling. For non-system fonts \n   *   (opentype, truetype, etc.) please load styled \n   *   fonts instead.\n   *",
        "*   Calculates and returns the width of any character \n   *   or text string.\n   *\n   *   @param theText the String of characters to measure",
        "*   Returns the ascent of the current font at its \n   *   current size. The ascent represents the distance, \n   *   in pixels, of the tallest character above the \n   *   baseline.\n   *",
        "*   Returns the descent of the current font at its \n   *   current size. The descent represents the distance, \n   *   in pixels, of the character with the longest \n   *   descender below the baseline.\n   *",
        "*   Loads an opentype font file (.otf, .ttf) from a \n   *   file or a URL, and returns a PFont Object. This \n   *   method is asynchronous, meaning it may not finish \n   *   before the next line in your sketch is executed.  \n   *   The path to the font should be relative to the \n   *   HTML file that links in your sketch. Loading an \n   *   from a URL or other remote location may be blocked \n   *   due to your browser's built-in security.\n   *\n   *   @param path name of the file or url to load\n   *   @param [callback] function to be executed after \n   *   loadFont() completes\n   *   @param [onError] function to be executed if an \n   *   error occurs\n   *   @return p5.Font object",
        "*   Draws text to the screen. Displays the information \n   *   specified in the first parameter on the screen in \n   *   the position specified by the additional \n   *   parameters. A default font will be used unless a \n   *   font is set with the textFont() function and a \n   *   default size will be used unless a font is set \n   *   with textSize(). Change the color of the text with \n   *   the fill() function. Change the outline of the \n   *   text with the stroke() and strokeWeight() \n   *   functions.  The text displays in relation to the \n   *   textAlign() function, which gives the option to \n   *   draw to the left, right, and center of the \n   *   coordinates. \n   * \n   *  \n   *   The x2 and y2 parameters define a rectangular area \n   *   to display within and may only be used with string \n   *   data. When these parameters are specified, they \n   *   are interpreted based on the current rectMode() \n   *   setting. Text that does not fit completely within \n   *   the rectangle specified will not be drawn to the \n   *   screen.\n   *\n   *   @param str the alphanumeric symbols to be \n   *   displayed\n   *   @param x x-coordinate of text\n   *   @param y y-coordinate of text\n   *   @param [x2] by default, the width of the text box, \n   *   see rectMode() for more info\n   *   @param [y2] by default, the height of the text \n   *   box, see rectMode() for more info\n   *   @chainable",
        "*   Sets the current font that will be drawn with the \n   *   text() function.\n   *\n   *   @return the current font",
        "*   Sets the current font that will be drawn with the \n   *   text() function.\n   *\n   *   @param font a font loaded via loadFont(), or a \n   *   String representing a web safe font (a font that \n   *   is generally available across all systems)\n   *   @param [size] the font size to use\n   *   @chainable",
        "*   Adds a value to the end of an array. Extends the \n   *   length of the array by one. Maps to Array.push().\n   *\n   *   @param array Array to append\n   *   @param value to be added to the Array",
        "*   Copies an array (or part of an array) to another \n   *   array. The src array is copied to the dst array, \n   *   beginning at the position specified by srcPosition \n   *   and into the position specified by dstPosition. \n   *   The number of elements to copy is determined by \n   *   length. Note that copying values overwrites \n   *   existing values in the destination array. To \n   *   append values instead of overwriting them, use \n   *   concat().  The simplified version with only two \n   *   arguments, arrayCopy(src, dst), copies an entire \n   *   array to another of the same size. It is \n   *   equivalent to arrayCopy(src, 0, dst, 0, \n   *   src.length). \n   * \n   *  \n   *   Using this function is far more efficient for \n   *   copying array data than iterating through a for() \n   *   loop and copying each element individually.\n   *\n   *   @param src the source Array\n   *   @param srcPosition starting position in the source \n   *   Array\n   *   @param dst the destination Array\n   *   @param dstPosition starting position in the \n   *   destination Array\n   *   @param length number of Array elements to be \n   *   copied",
        "*   Copies an array (or part of an array) to another \n   *   array. The src array is copied to the dst array, \n   *   beginning at the position specified by srcPosition \n   *   and into the position specified by dstPosition. \n   *   The number of elements to copy is determined by \n   *   length. Note that copying values overwrites \n   *   existing values in the destination array. To \n   *   append values instead of overwriting them, use \n   *   concat().  The simplified version with only two \n   *   arguments, arrayCopy(src, dst), copies an entire \n   *   array to another of the same size. It is \n   *   equivalent to arrayCopy(src, 0, dst, 0, \n   *   src.length). \n   * \n   *  \n   *   Using this function is far more efficient for \n   *   copying array data than iterating through a for() \n   *   loop and copying each element individually.\n   *\n   *   @param src the source Array\n   *   @param dst the destination Array\n   *   @param [length] number of Array elements to be \n   *   copied",
        "*   Concatenates two arrays, maps to Array.concat(). \n   *   Does not modify the input arrays.\n   *\n   *   @param a first Array to concatenate\n   *   @param b second Array to concatenate\n   *   @return concatenated array",
        "*   Reverses the order of an array, maps to \n   *   Array.reverse()\n   *\n   *   @param list Array to reverse",
        "*   Decreases an array by one element and returns the \n   *   shortened array, maps to Array.pop().\n   *\n   *   @param list Array to shorten\n   *   @return shortened Array",
        "*   Randomizes the order of the elements of an array. \n   *   Implements  Fisher-Yates Shuffle Algorithm.\n   *\n   *   @param array Array to shuffle\n   *   @param [bool] modify passed array\n   *   @return shuffled Array",
        "*   Sorts an array of numbers from smallest to \n   *   largest, or puts an array of words in alphabetical \n   *   order. The original array is not modified; a \n   *   re-ordered array is returned. The count parameter \n   *   states the number of elements to sort. For \n   *   example, if there are 12 elements in an array and \n   *   count is set to 5, only the first 5 elements in \n   *   the array will be sorted.\n   *\n   *   @param list Array to sort\n   *   @param [count] number of elements to sort, \n   *   starting from 0",
        "*   Inserts a value or an array of values into an \n   *   existing array. The first parameter specifies the \n   *   initial array to be modified, and the second \n   *   parameter defines the data to be inserted. The \n   *   third parameter is an index value which specifies \n   *   the array position from which to insert data. \n   *   (Remember that array index numbering starts at \n   *   zero, so the first position is 0, the second \n   *   position is 1, and so on.)\n   *\n   *   @param list Array to splice into\n   *   @param value value to be spliced in\n   *   @param position in the array from which to insert \n   *   data",
        "*   Extracts an array of elements from an existing \n   *   array. The list parameter defines the array from \n   *   which the elements will be copied, and the start \n   *   and count parameters specify which elements to \n   *   extract. If no count is given, elements will be \n   *   extracted from the start to the end of the array. \n   *   When specifying the start, remember that the first \n   *   array element is 0. This function does not change \n   *   the source array.\n   *\n   *   @param list Array to extract from\n   *   @param start position to begin\n   *   @param [count] number of values to extract\n   *   @return Array of extracted elements",
        "*   Converts a string to its floating point \n   *   representation. The contents of a string must \n   *   resemble a number, or NaN (not a number) will be \n   *   returned. For example, float(\"1234.56\") evaluates \n   *   to 1234.56, but float(\"giraffe\") will return NaN. \n   *   When an array of values is passed in, then an \n   *   array of floats of the same length is returned.\n   *\n   *   @param str float string to parse\n   *   @return floating point representation of string",
        "*   Converts a boolean, string, or float to its \n   *   integer representation. When an array of values is \n   *   passed in, then an int array of the same length is \n   *   returned.\n   *\n   *   @param n value to parse\n   *   @return integer representation of value",
        "*   Converts a boolean, string, or float to its \n   *   integer representation. When an array of values is \n   *   passed in, then an int array of the same length is \n   *   returned.\n   *\n   *   @param ns values to parse\n   *   @return integer representation of values",
        "*   Converts a boolean, string or number to its string \n   *   representation. When an array of values is passed \n   *   in, then an array of strings of the same length is \n   *   returned.\n   *\n   *   @param n value to parse\n   *   @return string representation of value",
        "*   Converts a number or string to its boolean \n   *   representation. For a number, any non-zero value \n   *   (positive or negative) evaluates to true, while \n   *   zero evaluates to false. For a string, the value \n   *   \"true\" evaluates to true, while any other value \n   *   evaluates to false. When an array of number or \n   *   string values is passed in, then a array of \n   *   booleans of the same length is returned.\n   *\n   *   @param n value to parse\n   *   @return boolean representation of value",
        "*   Converts a number, string representation of a \n   *   number, or boolean to its byte representation. A \n   *   byte can be only a whole number between -128 and \n   *   127, so when a value outside of this range is \n   *   converted, it wraps around to the corresponding \n   *   byte representation. When an array of number, \n   *   string or boolean values is passed in, then an \n   *   array of bytes the same length is returned.\n   *\n   *   @param n value to parse\n   *   @return byte representation of value",
        "*   Converts a number, string representation of a \n   *   number, or boolean to its byte representation. A \n   *   byte can be only a whole number between -128 and \n   *   127, so when a value outside of this range is \n   *   converted, it wraps around to the corresponding \n   *   byte representation. When an array of number, \n   *   string or boolean values is passed in, then an \n   *   array of bytes the same length is returned.\n   *\n   *   @param ns values to parse\n   *   @return array of byte representation of values",
        "*   Converts a number or string to its corresponding \n   *   single-character string representation. If a \n   *   string parameter is provided, it is first parsed \n   *   as an integer and then translated into a \n   *   single-character string. When an array of number \n   *   or string values is passed in, then an array of \n   *   single-character strings of the same length is \n   *   returned.\n   *\n   *   @param n value to parse\n   *   @return string representation of value",
        "*   Converts a number or string to its corresponding \n   *   single-character string representation. If a \n   *   string parameter is provided, it is first parsed \n   *   as an integer and then translated into a \n   *   single-character string. When an array of number \n   *   or string values is passed in, then an array of \n   *   single-character strings of the same length is \n   *   returned.\n   *\n   *   @param ns values to parse\n   *   @return array of string representation of values",
        "*   Converts a single-character string to its \n   *   corresponding integer representation. When an \n   *   array of single-character string values is passed \n   *   in, then an array of integers of the same length \n   *   is returned.\n   *\n   *   @param n value to parse\n   *   @return integer representation of value",
        "*   Converts a single-character string to its \n   *   corresponding integer representation. When an \n   *   array of single-character string values is passed \n   *   in, then an array of integers of the same length \n   *   is returned.\n   *\n   *   @param ns values to parse\n   *   @return integer representation of values",
        "*   Converts a number to a string in its equivalent \n   *   hexadecimal notation. If a second parameter is \n   *   passed, it is used to set the number of characters \n   *   to generate in the hexadecimal notation. When an \n   *   array is passed in, an array of strings in \n   *   hexadecimal notation of the same length is \n   *   returned.\n   *\n   *   @param n value to parse\n   *   @return hexadecimal string representation of value",
        "*   Converts a number to a string in its equivalent \n   *   hexadecimal notation. If a second parameter is \n   *   passed, it is used to set the number of characters \n   *   to generate in the hexadecimal notation. When an \n   *   array is passed in, an array of strings in \n   *   hexadecimal notation of the same length is \n   *   returned.\n   *\n   *   @param ns array of values to parse\n   *   @return hexadecimal string representation of \n   *   values",
        "*   Converts a string representation of a hexadecimal \n   *   number to its equivalent integer value. When an \n   *   array of strings in hexadecimal notation is passed \n   *   in, an array of integers of the same length is \n   *   returned.\n   *\n   *   @param n value to parse\n   *   @return integer representation of hexadecimal \n   *   value",
        "*   Converts a string representation of a hexadecimal \n   *   number to its equivalent integer value. When an \n   *   array of strings in hexadecimal notation is passed \n   *   in, an array of integers of the same length is \n   *   returned.\n   *\n   *   @param ns values to parse\n   *   @return integer representations of hexadecimal \n   *   value",
        "*   Combines an array of Strings into one String, each \n   *   separated by the character(s) used for the \n   *   separator parameter. To join arrays of ints or \n   *   floats, it's necessary to first convert them to \n   *   Strings using nf() or nfs().\n   *\n   *   @param list array of Strings to be joined\n   *   @param separator String to be placed between each \n   *   item\n   *   @return joined String",
        "*   This function is used to apply a regular \n   *   expression to a piece of text, and return matching \n   *   groups (elements found inside parentheses) as a \n   *   String array. If there are no matches, a null \n   *   value will be returned. If no groups are specified \n   *   in the regular expression, but the sequence \n   *   matches, an array of length 1 (with the matched \n   *   text as the first element of the array) will be \n   *   returned.  To use the function, first check to see \n   *   if the result is null. If the result is null, then \n   *   the sequence did not match at all. If the sequence \n   *   did match, an array is returned. \n   * \n   *  \n   *   If there are groups (specified by sets of \n   *   parentheses) in the regular expression, then the \n   *   contents of each will be returned in the array. \n   *   Element [0] of a regular expression match returns \n   *   the entire matching string, and the match groups \n   *   start at element [1] (the first group is [1], the \n   *   second [2], and so on).\n   *\n   *   @param str the String to be searched\n   *   @param regexp the regexp to be used for matching\n   *   @return Array of Strings found",
        "*   This function is used to apply a regular \n   *   expression to a piece of text, and return a list \n   *   of matching groups (elements found inside \n   *   parentheses) as a two-dimensional String array. If \n   *   there are no matches, a null value will be \n   *   returned. If no groups are specified in the \n   *   regular expression, but the sequence matches, a \n   *   two dimensional array is still returned, but the \n   *   second dimension is only of length one.  To use \n   *   the function, first check to see if the result is \n   *   null. If the result is null, then the sequence did \n   *   not match at all. If the sequence did match, a 2D \n   *   array is returned. \n   * \n   *  \n   *   If there are groups (specified by sets of \n   *   parentheses) in the regular expression, then the \n   *   contents of each will be returned in the array. \n   *   Assuming a loop with counter variable i, element \n   *   [i][0] of a regular expression match returns the \n   *   entire matching string, and the match groups start \n   *   at element [i][1] (the first group is [i][1], the \n   *   second [i][2], and so on).\n   *\n   *   @param str the String to be searched\n   *   @param regexp the regexp to be used for matching\n   *   @return 2d Array of Strings found",
        "*   Utility function for formatting numbers into \n   *   strings. There are two versions: one for \n   *   formatting floats, and one for formatting ints. \n   *   The values for the digits, left, and right \n   *   parameters should always be positive integers.\n   *\n   *   @param num the Number to format\n   *   @param [left] number of digits to the left of the \n   *   decimal point\n   *   @param [right] number of digits to the right of \n   *   the decimal point\n   *   @return formatted String",
        "*   Utility function for formatting numbers into \n   *   strings. There are two versions: one for \n   *   formatting floats, and one for formatting ints. \n   *   The values for the digits, left, and right \n   *   parameters should always be positive integers.\n   *\n   *   @param nums the Numbers to format\n   *   @param [left] number of digits to the left of the \n   *   decimal point\n   *   @param [right] number of digits to the right of \n   *   the decimal point\n   *   @return formatted Strings",
        "*   Utility function for formatting numbers into \n   *   strings and placing appropriate commas to mark \n   *   units of 1000. There are two versions: one for \n   *   formatting ints, and one for formatting an array \n   *   of ints. The value for the right parameter should \n   *   always be a positive integer.\n   *\n   *   @param num the Number to format\n   *   @param [right] number of digits to the right of \n   *   the decimal point\n   *   @return formatted String",
        "*   Utility function for formatting numbers into \n   *   strings and placing appropriate commas to mark \n   *   units of 1000. There are two versions: one for \n   *   formatting ints, and one for formatting an array \n   *   of ints. The value for the right parameter should \n   *   always be a positive integer.\n   *\n   *   @param nums the Numbers to format\n   *   @param [right] number of digits to the right of \n   *   the decimal point\n   *   @return formatted Strings",
        "*   Utility function for formatting numbers into \n   *   strings. Similar to nf() but puts a \"+\" in front \n   *   of positive numbers and a \"-\" in front of negative \n   *   numbers. There are two versions: one for \n   *   formatting floats, and one for formatting ints. \n   *   The values for left, and right parameters should \n   *   always be positive integers.\n   *\n   *   @param num the Number to format\n   *   @param [left] number of digits to the left of the \n   *   decimal point\n   *   @param [right] number of digits to the right of \n   *   the decimal point\n   *   @return formatted String",
        "*   Utility function for formatting numbers into \n   *   strings. Similar to nf() but puts a \"+\" in front \n   *   of positive numbers and a \"-\" in front of negative \n   *   numbers. There are two versions: one for \n   *   formatting floats, and one for formatting ints. \n   *   The values for left, and right parameters should \n   *   always be positive integers.\n   *\n   *   @param nums the Numbers to format\n   *   @param [left] number of digits to the left of the \n   *   decimal point\n   *   @param [right] number of digits to the right of \n   *   the decimal point\n   *   @return formatted Strings",
        "*   Utility function for formatting numbers into \n   *   strings. Similar to nf() but puts a \" \" (space) in \n   *   front of positive numbers and a \"-\" in front of \n   *   negative numbers. There are two versions: one for \n   *   formatting floats, and one for formatting ints. \n   *   The values for the digits, left, and right \n   *   parameters should always be positive integers.\n   *\n   *   @param num the Number to format\n   *   @param [left] number of digits to the left of the \n   *   decimal point\n   *   @param [right] number of digits to the right of \n   *   the decimal point\n   *   @return formatted String",
        "*   Utility function for formatting numbers into \n   *   strings. Similar to nf() but puts a \" \" (space) in \n   *   front of positive numbers and a \"-\" in front of \n   *   negative numbers. There are two versions: one for \n   *   formatting floats, and one for formatting ints. \n   *   The values for the digits, left, and right \n   *   parameters should always be positive integers.\n   *\n   *   @param nums the Numbers to format\n   *   @param [left] number of digits to the left of the \n   *   decimal point\n   *   @param [right] number of digits to the right of \n   *   the decimal point\n   *   @return formatted Strings",
        "*   The split() function maps to String.split(), it \n   *   breaks a String into pieces using a character or \n   *   string as the delimiter. The delim parameter \n   *   specifies the character or characters that mark \n   *   the boundaries between each piece. A String[] \n   *   array is returned that contains each of the \n   *   pieces. The splitTokens() function works in a \n   *   similar fashion, except that it splits using a \n   *   range of characters instead of a specific \n   *   character or sequence.\n   *\n   *   @param value the String to be split\n   *   @param delim the String used to separate the data\n   *   @return Array of Strings",
        "*   The splitTokens() function splits a String at one \n   *   or many character delimiters or \"tokens.\" The \n   *   delim parameter specifies the character or \n   *   characters to be used as a boundary.  If no delim \n   *   characters are specified, any whitespace character \n   *   is used to split. Whitespace characters include \n   *   tab (\\t), line feed (\\n), carriage return (\\r), \n   *   form feed (\\f), and space.\n   *\n   *   @param value the String to be split\n   *   @param [delim] list of individual Strings that \n   *   will be used as separators\n   *   @return Array of Strings",
        "*   Removes whitespace characters from the beginning \n   *   and end of a String. In addition to standard \n   *   whitespace characters such as space, carriage \n   *   return, and tab, this function also removes the \n   *   Unicode \"nbsp\" character.\n   *\n   *   @param str a String to be trimmed\n   *   @return a trimmed String",
        "*   Removes whitespace characters from the beginning \n   *   and end of a String. In addition to standard \n   *   whitespace characters such as space, carriage \n   *   return, and tab, this function also removes the \n   *   Unicode \"nbsp\" character.\n   *\n   *   @param strs an Array of Strings to be trimmed\n   *   @return an Array of trimmed Strings",
        "*   p5.js communicates with the clock on your \n   *   computer. The day() function returns the current \n   *   day as a value from 1 - 31.\n   *\n   *   @return the current day",
        "*   p5.js communicates with the clock on your \n   *   computer. The hour() function returns the current \n   *   hour as a value from 0 - 23.\n   *\n   *   @return the current hour",
        "*   p5.js communicates with the clock on your \n   *   computer. The minute() function returns the \n   *   current minute as a value from 0 - 59.\n   *\n   *   @return the current minute",
        "*   Returns the number of milliseconds (thousandths of \n   *   a second) since starting the program. This \n   *   information is often used for timing events and \n   *   animation sequences.\n   *\n   *   @return the number of milliseconds since starting \n   *   the program",
        "*   p5.js communicates with the clock on your \n   *   computer. The month() function returns the current \n   *   month as a value from 1 - 12.\n   *\n   *   @return the current month",
        "*   p5.js communicates with the clock on your \n   *   computer. The second() function returns the \n   *   current second as a value from 0 - 59.\n   *\n   *   @return the current second",
        "*   p5.js communicates with the clock on your \n   *   computer. The year() function returns the current \n   *   year as an integer (2014, 2015, 2016, etc).\n   *\n   *   @return the current year",
        "*   Sets camera position for a 3D sketch. The function \n   *   behaves similarly gluLookAt, except that it \n   *   replaces the existing modelview matrix instead of \n   *   applying any transformations calculated here on \n   *   top of the existing model view. When called with \n   *   no arguments, this function sets a default camera \n   *   equivalent to calling camera(0, 0, (height/2.0) / \n   *   tan(PI*30.0 / 180.0), 0, 0, 0, 0, 1, 0);\n   *\n   *   @param [x] camera position value on x axis\n   *   @param [y] camera position value on y axis\n   *   @param [z] camera position value on z axis\n   *   @param [centerX] x coordinate representing center \n   *   of the sketch\n   *   @param [centerY] y coordinate representing center \n   *   of the sketch\n   *   @param [centerZ] z coordinate representing center \n   *   of the sketch\n   *   @param [upX] x component of direction 'up' from \n   *   camera\n   *   @param [upY] y component of direction 'up' from \n   *   camera\n   *   @param [upZ] z component of direction 'up' from \n   *   camera\n   *   @chainable",
        "*   Sets perspective camera. When called with no \n   *   arguments, the defaults provided are equivalent to \n   *   perspective(PI/3.0, width/height, cameraZ/10.0, \n   *   cameraZ10.0) where cameraZ is ((height/2.0) / \n   *   tan(PI60.0/360.0));\n   *\n   *   @param [fovy] camera frustum vertical field of \n   *   view, from bottom to top of view, in angleMode \n   *   units\n   *   @param [aspect] camera frustum aspect ratio\n   *   @param [near] frustum near plane length\n   *   @param [far] frustum far plane length\n   *   @chainable",
        "*   Setup ortho camera\n   *\n   *   @param [left] camera frustum left plane\n   *   @param [right] camera frustum right plane\n   *   @param [bottom] camera frustum bottom plane\n   *   @param [top] camera frustum top plane\n   *   @param [near] camera frustum near plane\n   *   @param [far] camera frustum far plane\n   *   @chainable",
        "*   Creates an ambient light with a color\n   *\n   *   @param v1 red or hue value relative to the current \n   *   color range\n   *   @param v2 green or saturation value relative to \n   *   the current color range\n   *   @param v3 blue or brightness value relative to the \n   *   current color range\n   *   @chainable",
        "*   Creates an ambient light with a color\n   *\n   *   @param value a color string\n   *   @chainable",
        "*   Creates an ambient light with a color\n   *\n   *   @param values an array containing the \n   *   red,green,blue & and alpha components of the color\n   *   @chainable",
        "*   Creates an ambient light with a color\n   *\n   *   @param color the ambient light color\n   *   @chainable",
        "*   Creates a directional light with a color and a \n   *   direction\n   *\n   *   @param v1 red or hue value (depending on the \n   *   current color mode),\n   *   @param v2 green or saturation value\n   *   @param v3 blue or brightness value\n   *   @param position the direction of the light\n   *   @chainable",
        "*   Creates a directional light with a color and a \n   *   direction\n   *\n   *   @param color color Array, CSS color string, or \n   *   p5.Color value\n   *   @param x x axis direction\n   *   @param y y axis direction\n   *   @param z z axis direction\n   *   @chainable",
        "*   Creates a directional light with a color and a \n   *   direction\n   *\n   *   @param color color Array, CSS color string, or \n   *   p5.Color value\n   *   @param position the direction of the light\n   *   @chainable",
        "*   Creates a directional light with a color and a \n   *   direction\n   *\n   *   @param v1 red or hue value (depending on the \n   *   current color mode),\n   *   @param v2 green or saturation value\n   *   @param v3 blue or brightness value\n   *   @param x x axis direction\n   *   @param y y axis direction\n   *   @param z z axis direction\n   *   @chainable",
        "*   Creates a point light with a color and a light \n   *   position\n   *\n   *   @param v1 red or hue value (depending on the \n   *   current color mode),\n   *   @param v2 green or saturation value\n   *   @param v3 blue or brightness value\n   *   @param x x axis position\n   *   @param y y axis position\n   *   @param z z axis position\n   *   @chainable",
        "*   Creates a point light with a color and a light \n   *   position\n   *\n   *   @param v1 red or hue value (depending on the \n   *   current color mode),\n   *   @param v2 green or saturation value\n   *   @param v3 blue or brightness value\n   *   @param position the position of the light\n   *   @chainable",
        "*   Creates a point light with a color and a light \n   *   position\n   *\n   *   @param color color Array, CSS color string, or \n   *   p5.Color value\n   *   @param x x axis position\n   *   @param y y axis position\n   *   @param z z axis position\n   *   @chainable",
        "*   Creates a point light with a color and a light \n   *   position\n   *\n   *   @param color color Array, CSS color string, or \n   *   p5.Color value\n   *   @param position the position of the light\n   *   @chainable",
        "*   Load a 3d model from an OBJ file.  One of the \n   *   limitations of the OBJ format is that it doesn't \n   *   have a built-in sense of scale. This means that \n   *   models exported from different programs might be \n   *   very different sizes. If your model isn't \n   *   displaying, try calling loadModel() with the \n   *   normalized parameter set to true. This will resize \n   *   the model to a scale appropriate for p5. You can \n   *   also make additional changes to the final size of \n   *   your model with the scale() function.\n   *\n   *   @param path Path of the model to be loaded\n   *   @param normalize If true, scale the model to a \n   *   standardized size when loading\n   *   @param [successCallback] Function to be called \n   *   once the model is loaded. Will be passed the 3D \n   *   model object.\n   *   @param [failureCallback] called with event error \n   *   if the image fails to load.\n   *   @return the p5.Geometry object",
        "*   Load a 3d model from an OBJ file.  One of the \n   *   limitations of the OBJ format is that it doesn't \n   *   have a built-in sense of scale. This means that \n   *   models exported from different programs might be \n   *   very different sizes. If your model isn't \n   *   displaying, try calling loadModel() with the \n   *   normalized parameter set to true. This will resize \n   *   the model to a scale appropriate for p5. You can \n   *   also make additional changes to the final size of \n   *   your model with the scale() function.\n   *\n   *   @param path Path of the model to be loaded\n   *   @param [successCallback] Function to be called \n   *   once the model is loaded. Will be passed the 3D \n   *   model object.\n   *   @param [failureCallback] called with event error \n   *   if the image fails to load.\n   *   @return the p5.Geometry object",
        "*   Render a 3d model to the screen.\n   *\n   *   @param model Loaded 3d model to be rendered",
        "*   Loads a custom shader from the provided vertex and \n   *   fragment shader paths. The shader files are loaded \n   *   asynchronously in the background, so this method \n   *   should be used in preload(). For now, there are \n   *   three main types of shaders. p5 will automatically \n   *   supply appropriate vertices, normals, colors, and \n   *   lighting attributes if the parameters defined in \n   *   the shader match the names.\n   *\n   *   @param [vertFilename] path to file containing \n   *   vertex shader source code\n   *   @param [fragFilename] path to file containing \n   *   fragment shader source code\n   *   @return a shader object created from the provided \n   *   vertex and fragment shader files.",
        "*   The shader() function lets the user provide a \n   *   custom shader to fill in shapes in WEBGL mode. \n   *   Users can create their own shaders by loading \n   *   vertex and fragment shaders with loadShader().\n   *\n   *   @param [s] the desired p5.Shader to use for \n   *   rendering shapes.\n   *   @chainable",
        "*   Normal material for geometry. You can view all \n   *   possible materials in this example.\n   *\n   *   @chainable",
        "*   Texture for geometry. You can view other possible \n   *   materials in this example.\n   *\n   *   @param tex 2-dimensional graphics to render as \n   *   texture\n   *   @chainable",
        "*   Ambient material for geometry with a given color. \n   *   You can view all possible materials in this \n   *   example.\n   *\n   *   @param v1 gray value, red or hue value (depending \n   *   on the current color mode),\n   *   @param [v2] green or saturation value\n   *   @param [v3] blue or brightness value\n   *   @param [a] opacity\n   *   @chainable",
        "*   Ambient material for geometry with a given color. \n   *   You can view all possible materials in this \n   *   example.\n   *\n   *   @param color color, color Array, or CSS color \n   *   string\n   *   @chainable",
        "*   Specular material for geometry with a given color. \n   *   You can view all possible materials in this \n   *   example.\n   *\n   *   @param v1 gray value, red or hue value (depending \n   *   on the current color mode),\n   *   @param [v2] green or saturation value\n   *   @param [v3] blue or brightness value\n   *   @param [a] opacity\n   *   @chainable",
        "*   Specular material for geometry with a given color. \n   *   You can view all possible materials in this \n   *   example.\n   *\n   *   @param color color Array, or CSS color string\n   *   @chainable",
        "*   Set attributes for the WebGL Drawing context. This \n   *   is a way of adjusting ways that the WebGL renderer \n   *   works to fine-tune the display and performance. \n   *   This should be put in setup(). The available \n   *   attributes are:  alpha - indicates if the canvas \n   *   contains an alpha buffer \n   * \n   *   default is true \n   * \n   *  \n   *   depth - indicates whether the drawing buffer has a \n   *   depth buffer of at least 16 bits - default is true \n   * \n   *  \n   *   stencil - indicates whether the drawing buffer has \n   *   a stencil buffer of at least 8 bits \n   * \n   *  \n   *   antialias - indicates whether or not to perform \n   *   anti-aliasing \n   * \n   *   default is false \n   * \n   *  \n   *   premultipliedAlpha - indicates that the page \n   *   compositor will assume the drawing buffer contains \n   *   colors with pre-multiplied alpha \n   * \n   *   default is false \n   * \n   *  \n   *   preserveDrawingBuffer - if true the buffers will \n   *   not be cleared and and will preserve their values \n   *   until cleared or overwritten by author (note that \n   *   p5 clears automatically on draw loop) \n   * \n   *   default is true \n   * \n   *  \n   *   perPixelLighting - if true, per-pixel lighting \n   *   will be used in the lighting shader. \n   * \n   *   default is false\n   *\n   *   @param key Name of attribute\n   *   @param value New value of named attribute",
        "*   Set attributes for the WebGL Drawing context. This \n   *   is a way of adjusting ways that the WebGL renderer \n   *   works to fine-tune the display and performance. \n   *   This should be put in setup(). The available \n   *   attributes are:  alpha - indicates if the canvas \n   *   contains an alpha buffer \n   * \n   *   default is true \n   * \n   *  \n   *   depth - indicates whether the drawing buffer has a \n   *   depth buffer of at least 16 bits - default is true \n   * \n   *  \n   *   stencil - indicates whether the drawing buffer has \n   *   a stencil buffer of at least 8 bits \n   * \n   *  \n   *   antialias - indicates whether or not to perform \n   *   anti-aliasing \n   * \n   *   default is false \n   * \n   *  \n   *   premultipliedAlpha - indicates that the page \n   *   compositor will assume the drawing buffer contains \n   *   colors with pre-multiplied alpha \n   * \n   *   default is false \n   * \n   *  \n   *   preserveDrawingBuffer - if true the buffers will \n   *   not be cleared and and will preserve their values \n   *   until cleared or overwritten by author (note that \n   *   p5 clears automatically on draw loop) \n   * \n   *   default is true \n   * \n   *  \n   *   perPixelLighting - if true, per-pixel lighting \n   *   will be used in the lighting shader. \n   * \n   *   default is false\n   *\n   *   @param obj object with key-value pairs",
        "*   Draw a plane with given a width and height\n   *\n   *   @param [width] width of the plane\n   *   @param [height] height of the plane\n   *   @param [detailX] Optional number of triangle \n   *   subdivisions in x-dimension\n   *   @param [detailY] Optional number of triangle \n   *   subdivisions in y-dimension\n   *   @chainable",
        "*   Draw a box with given width, height and depth\n   *\n   *   @param [width] width of the box\n   *   @param [Height] height of the box\n   *   @param [depth] depth of the box\n   *   @param [detailX] Optional number of triangle \n   *   subdivisions in x-dimension\n   *   @param [detailY] Optional number of triangle \n   *   subdivisions in y-dimension\n   *   @chainable",
        "*   Draw a sphere with given radius\n   *\n   *   @param [radius] radius of circle\n   *   @param [detailX] number of segments, the more \n   *   segments the smoother geometry default is 24\n   *   @param [detailY] number of segments, the more \n   *   segments the smoother geometry default is 16\n   *   @chainable",
        "*   Draw a cylinder with given radius and height\n   *\n   *   @param [radius] radius of the surface\n   *   @param [height] height of the cylinder\n   *   @param [detailX] number of segments, the more \n   *   segments the smoother geometry default is 24\n   *   @param [detailY] number of segments in \n   *   y-dimension, the more segments the smoother \n   *   geometry default is 1\n   *   @param [bottomCap] whether to draw the bottom of \n   *   the cylinder\n   *   @param [topCap] whether to draw the top of the \n   *   cylinder\n   *   @chainable",
        "*   Draw a cone with given radius and height\n   *\n   *   @param [radius] radius of the bottom surface\n   *   @param [height] height of the cone\n   *   @param [detailX] number of segments, the more \n   *   segments the smoother geometry default is 24\n   *   @param [detailY] number of segments, the more \n   *   segments the smoother geometry default is 1\n   *   @param [cap] whether to draw the base of the cone\n   *   @chainable",
        "*   Draw an ellipsoid with given radius\n   *\n   *   @param [radiusx] xradius of circle\n   *   @param [radiusy] yradius of circle\n   *   @param [radiusz] zradius of circle\n   *   @param [detailX] number of segments, the more \n   *   segments the smoother geometry default is 24. \n   *   Avoid detail number above 150, it may crash the \n   *   browser.\n   *   @param [detailY] number of segments, the more \n   *   segments the smoother geometry default is 16. \n   *   Avoid detail number above 150, it may crash the \n   *   browser.\n   *   @chainable",
        "*   Draw a torus with given radius and tube radius\n   *\n   *   @param [radius] radius of the whole ring\n   *   @param [tubeRadius] radius of the tube\n   *   @param [detailX] number of segments in \n   *   x-dimension, the more segments the smoother \n   *   geometry default is 24\n   *   @param [detailY] number of segments in \n   *   y-dimension, the more segments the smoother \n   *   geometry default is 16\n   *   @chainable",
        "*   Returns a number representing the sample rate, in \n   *   samples per second, of all sound objects in this \n   *   audio context. It is determined by the sampling \n   *   rate of your operating system's sound card, and it \n   *   is not currently possile to change. It is often \n   *   44100, or twice the range of human hearing.\n   *\n   *   @return samplerate samples per second",
        "*   Returns the closest MIDI note value for a given \n   *   frequency.\n   *\n   *   @param frequency A freqeuncy, for example, the \"A\" \n   *   above Middle C is 440Hz\n   *   @return MIDI note value",
        "*   Returns the frequency value of a MIDI note value. \n   *   General MIDI treats notes as integers where middle \n   *   C is 60, C# is 61, D is 62 etc. Useful for \n   *   generating musical frequencies with oscillators.\n   *\n   *   @param midiNote The number of a MIDI note\n   *   @return Frequency value of the given MIDI note",
        "*   List the SoundFile formats that you will include. \n   *   LoadSound will search your directory for these \n   *   extensions, and will pick a format that is \n   *   compatable with the client's web browser. Here is \n   *   a free online file converter.\n   *\n   *   @param [formats] i.e. 'mp3', 'wav', 'ogg'",
        "*   Searches the page for an element with the given \n   *   ID, class, or tag name (using the '#' or '.' \n   *   prefixes to specify an ID or class respectively, \n   *   and none for a tag) and returns it as a \n   *   p5.Element. If a class or tag name is given with \n   *   more than 1 element, only the first element will \n   *   be returned. The DOM node itself can be accessed \n   *   with .elt. Returns null if none found. You can \n   *   also specify a container to search within.\n   *\n   *   @param name id, class, or tag name of element to \n   *   search for\n   *   @param [container] id, p5.Element, or HTML element \n   *   to search within\n   *   @return p5.Element containing node found",
        "*   Searches the page for elements with the given \n   *   class or tag name (using the '.' prefix to specify \n   *   a class and no prefix for a tag) and returns them \n   *   as p5.Elements in an array. The DOM node itself \n   *   can be accessed with .elt. Returns an empty array \n   *   if none found. You can also specify a container to \n   *   search within.\n   *\n   *   @param name class or tag name of elements to \n   *   search for\n   *   @param [container] id, p5.Element, or HTML element \n   *   to search within\n   *   @return Array of p5.Elements containing nodes \n   *   found",
        "*   Removes all elements created by p5, except any \n   *   canvas / graphics elements created by createCanvas \n   *   or createGraphics. Event handlers are removed, and \n   *   element is removed from the DOM.\n   *",
        "*   Creates a <div></div> element in the DOM with \n   *   given inner HTML. Appends to the container node if \n   *   one is specified, otherwise appends to body.\n   *\n   *   @param [html] inner HTML for element created\n   *   @return pointer to p5.Element holding created node",
        "*   Creates a <p></p> element in the DOM with given \n   *   inner HTML. Used for paragraph length text. \n   *   Appends to the container node if one is specified, \n   *   otherwise appends to body.\n   *\n   *   @param [html] inner HTML for element created\n   *   @return pointer to p5.Element holding created node",
        "*   Creates a <span></span> element in the DOM with \n   *   given inner HTML. Appends to the container node if \n   *   one is specified, otherwise appends to body.\n   *\n   *   @param [html] inner HTML for element created\n   *   @return pointer to p5.Element holding created node",
        "*   Creates an <img> element in the DOM with given src \n   *   and alternate text. Appends to the container node \n   *   if one is specified, otherwise appends to body.\n   *\n   *   @param src src path or url for image\n   *   @param [alt] alternate text to be used if image \n   *   does not load\n   *   @param [successCallback] callback to be called \n   *   once image data is loaded\n   *   @return pointer to p5.Element holding created node",
        "*   Creates an <a></a> element in the DOM for \n   *   including a hyperlink. Appends to the container \n   *   node if one is specified, otherwise appends to \n   *   body.\n   *\n   *   @param href url of page to link to\n   *   @param html inner html of link element to display\n   *   @param [target] target where new link should open, \n   *   could be _blank, _self, _parent, _top.\n   *   @return pointer to p5.Element holding created node",
        "*   Creates a slider <input></input> element in the \n   *   DOM. Use .size() to set the display length of the \n   *   slider. Appends to the container node if one is \n   *   specified, otherwise appends to body.\n   *\n   *   @param min minimum value of the slider\n   *   @param max maximum value of the slider\n   *   @param [value] default value of the slider\n   *   @param [step] step size for each tick of the \n   *   slider (if step is set to 0, the slider will move \n   *   continuously from the minimum to the maximum \n   *   value)\n   *   @return pointer to p5.Element holding created node",
        "*   Creates a <button></button> element in the DOM. \n   *   Use .size() to set the display size of the button. \n   *   Use .mousePressed() to specify behavior on press. \n   *   Appends to the container node if one is specified, \n   *   otherwise appends to body.\n   *\n   *   @param label label displayed on the button\n   *   @param [value] value of the button\n   *   @return pointer to p5.Element holding created node",
        "*   Creates a checkbox <input></input> element in the \n   *   DOM. Calling .checked() on a checkbox returns if \n   *   it is checked or not\n   *\n   *   @param [label] label displayed after checkbox\n   *   @param [value] value of the checkbox; checked is \n   *   true, unchecked is false\n   *   @return pointer to p5.Element holding created node",
        "*   Creates a dropdown menu <select></select> element \n   *   in the DOM. It also helps to assign select-box \n   *   methods to p5.Element when selecting existing \n   *   select box\n   *\n   *   @param [multiple] true if dropdown should support \n   *   multiple selections",
        "*   Creates a dropdown menu <select></select> element \n   *   in the DOM. It also helps to assign select-box \n   *   methods to p5.Element when selecting existing \n   *   select box\n   *\n   *   @param existing DOM select element",
        "*   Creates a radio button <input></input> element in \n   *   the DOM. The .option() method can be used to set \n   *   options for the radio after it is created. The \n   *   .value() method will return the currently selected \n   *   option.\n   *\n   *   @param [divId] the id and name of the created div \n   *   and input field respectively\n   *   @return pointer to p5.Element holding created node",
        "*   Creates an <input></input> element in the DOM for \n   *   text input. Use .size() to set the display length \n   *   of the box. Appends to the container node if one \n   *   is specified, otherwise appends to body.\n   *\n   *   @param [value] default value of the input box\n   *   @param [type] type of text, ie text, password etc. \n   *   Defaults to text\n   *   @return pointer to p5.Element holding created node",
        "*   Creates an <input></input> element in the DOM of \n   *   type 'file'. This allows users to select local \n   *   files for use in a sketch.\n   *\n   *   @param [callback] callback function for when a \n   *   file loaded\n   *   @param [multiple] optional to allow multiple files \n   *   selected\n   *   @return pointer to p5.Element holding created DOM \n   *   element",
        "*   Creates an HTML5 <video> element in the DOM for \n   *   simple playback of audio/video. Shown by default, \n   *   can be hidden with .hide() and drawn into canvas \n   *   using video(). Appends to the container node if \n   *   one is specified, otherwise appends to body. The \n   *   first parameter can be either a single string path \n   *   to a video file, or an array of string paths to \n   *   different formats of the same video. This is \n   *   useful for ensuring that your video can play \n   *   across different browsers, as each supports \n   *   different formats. See this page for further \n   *   information about supported formats.\n   *\n   *   @param src path to a video file, or array of paths \n   *   for supporting different browsers\n   *   @param [callback] callback function to be called \n   *   upon 'canplaythrough' event fire, that is, when \n   *   the browser can play the media, and estimates that \n   *   enough data has been loaded to play the media up \n   *   to its end without having to stop for further \n   *   buffering of content\n   *   @return pointer to video p5.Element",
        "*   Creates a hidden HTML5 <audio> element in the DOM \n   *   for simple audio playback. Appends to the \n   *   container node if one is specified, otherwise \n   *   appends to body. The first parameter can be either \n   *   a single string path to a audio file, or an array \n   *   of string paths to different formats of the same \n   *   audio. This is useful for ensuring that your audio \n   *   can play across different browsers, as each \n   *   supports different formats. See this page for \n   *   further information about supported formats.\n   *\n   *   @param [src] path to an audio file, or array of \n   *   paths for supporting different browsers\n   *   @param [callback] callback function to be called \n   *   upon 'canplaythrough' event fire, that is, when \n   *   the browser can play the media, and estimates that \n   *   enough data has been loaded to play the media up \n   *   to its end without having to stop for further \n   *   buffering of content\n   *   @return pointer to audio p5.Element /**",
        "*   Creates a new <video> element that contains the \n   *   audio/video feed from a webcam. This can be drawn \n   *   onto the canvas using video(). More specific \n   *   properties of the feed can be passing in a \n   *   Constraints object. See the  W3C spec for possible \n   *   properties. Note that not all of these are \n   *   supported by all browsers. \n   * \n   *   Security note: A new browser security \n   *   specification requires that getUserMedia, which is \n   *   behind createCapture(), only works when you're \n   *   running the code locally, or on HTTPS. Learn more \n   *   here and here.\n   *\n   *   @param type type of capture, either VIDEO or AUDIO \n   *   if none specified, default both, or a Constraints \n   *   object\n   *   @param callback function to be called once stream \n   *   has loaded\n   *   @return capture video p5.Element",
        "*   Creates element with given tag in the DOM with \n   *   given content. Appends to the container node if \n   *   one is specified, otherwise appends to body.\n   *\n   *   @param tag tag for the new element\n   *   @param [content] html content to be inserted into \n   *   the element\n   *   @return pointer to p5.Element holding created node",
        "*   Returns the Audio Context for this sketch. Useful \n   *   for users who would like to dig deeper into the \n   *   Web Audio API .\n   *\n   *   @return AudioContext for this sketch",
        "*   Returns a number representing the master amplitude \n   *   (volume) for sound in this sketch.\n   *\n   *   @return Master amplitude (volume) for sound in \n   *   this sketch. Should be between 0.0 (silence) and \n   *   1.0.",
        "*   Scale the output of all sound in this sketch \n   *   Scaled between 0.0 (silence) and 1.0 (full \n   *   volume). 1.0 is the maximum amplitude of a digital \n   *   sound, so multiplying by greater than 1.0 may \n   *   cause digital distortion. To fade, provide a \n   *   rampTime parameter. For more complex fades, see \n   *   the Env class. Alternately, you can pass in a \n   *   signal source such as an oscillator to modulate \n   *   the amplitude with an audio signal. How This \n   *   Works: When you load the p5.sound module, it \n   *   creates a single instance of p5sound. All sound \n   *   objects in this module output to p5sound before \n   *   reaching your computer's output. So if you change \n   *   the amplitude of p5sound, it impacts all of the \n   *   sound in this module. \n   * \n   *   If no value is provided, returns a Web Audio API \n   *   Gain Node\n   *\n   *   @param volume Volume (amplitude) between 0.0 and \n   *   1.0 or modulating signal/oscillator\n   *   @param [rampTime] Fade for t seconds\n   *   @param [timeFromNow] Schedule this event to happen \n   *   at t seconds in the future",
        "*   p5.soundOut is the p5.sound master output. It \n   *   sends output to the destination of this window's \n   *   web audio context. It contains Web Audio API nodes \n   *   including a dyanmicsCompressor (.limiter), and \n   *   Gain Nodes for .input and .output.\n   *",
        "*   This function returns the color formatted as a \n     *   string. This can be useful for debugging, or for \n     *   using p5.js with other libraries.\n     *\n     *   @param [format] How the color string will be \n     *   formatted. Leaving this empty formats the string \n     *   as rgba(r, g, b, a). '#rgb' '#rgba' '#rrggbb' and \n     *   '#rrggbbaa' format as hexadecimal color codes. \n     *   'rgb' 'hsb' and 'hsl' return the color formatted \n     *   in the specified color mode. 'rgba' 'hsba' and \n     *   'hsla' are the same as above but with alpha \n     *   channels. 'rgb%' 'hsb%' 'hsl%' 'rgba%' 'hsba%' and \n     *   'hsla%' format as percentages.\n     *   @return the formatted string",
        "*   Underlying HTML element. All normal HTML methods \n     *   can be called on this.\n     *",
        "*   Attaches the element to the parent specified. A \n     *   way of setting the container for the element. \n     *   Accepts either a string ID, DOM node, or \n     *   p5.Element. If no arguments given, parent node is \n     *   returned. For more ways to position the canvas, \n     *   see the  positioning the canvas wiki page.\n     *\n     *   @param parent the ID, DOM node, or p5.Element of \n     *   desired parent element\n     *   @chainable",
        "*   Attaches the element to the parent specified. A \n     *   way of setting the container for the element. \n     *   Accepts either a string ID, DOM node, or \n     *   p5.Element. If no arguments given, parent node is \n     *   returned. For more ways to position the canvas, \n     *   see the  positioning the canvas wiki page.\n     *",
        "*   Sets the ID of the element. If no ID argument is \n     *   passed in, it instead returns the current ID of \n     *   the element.\n     *\n     *   @param id ID of the element\n     *   @chainable",
        "*   Sets the ID of the element. If no ID argument is \n     *   passed in, it instead returns the current ID of \n     *   the element.\n     *\n     *   @return the id of the element",
        "*   Adds given class to the element. If no class \n     *   argument is passed in, it instead returns a string \n     *   containing the current class(es) of the element.\n     *\n     *   @param class class to add\n     *   @chainable",
        "*   Adds given class to the element. If no class \n     *   argument is passed in, it instead returns a string \n     *   containing the current class(es) of the element.\n     *\n     *   @return the class of the element",
        "*   The .mousePressed() function is called once after \n     *   every time a mouse button is pressed over the \n     *   element. This can be used to attach element \n     *   specific event listeners.\n     *\n     *   @param fxn function to be fired when mouse is \n     *   pressed over the element. if false is passed \n     *   instead, the previously firing function will no \n     *   longer fire.\n     *   @chainable",
        "*   The .doubleClicked() function is called once after \n     *   every time a mouse button is pressed twice over \n     *   the element. This can be used to attach element \n     *   and action specific event listeners.\n     *\n     *   @param fxn function to be fired when mouse is \n     *   double clicked over the element. if false is \n     *   passed instead, the previously firing function \n     *   will no longer fire.",
        "*   The .mouseWheel() function is called once after \n     *   every time a mouse wheel is scrolled over the \n     *   element. This can be used to attach element \n     *   specific event listeners.  The function accepts a \n     *   callback function as argument which will be \n     *   executed when the wheel event is triggered on the \n     *   element, the callback function is passed one \n     *   argument event. The event.deltaY property returns \n     *   negative values if the mouse wheel is rotated up \n     *   or away from the user and positive in the other \n     *   direction. The event.deltaX does the same as \n     *   event.deltaY except it reads the horizontal wheel \n     *   scroll of the mouse wheel. \n     * \n     *  \n     *   On OS X with \"natural\" scrolling enabled, the \n     *   event.deltaY values are reversed.\n     *\n     *   @param fxn function to be fired when mouse is \n     *   scrolled over the element. if false is passed \n     *   instead, the previously firing function will no \n     *   longer fire.\n     *   @chainable",
        "*   The .mouseReleased() function is called once after \n     *   every time a mouse button is released over the \n     *   element. This can be used to attach element \n     *   specific event listeners.\n     *\n     *   @param fxn function to be fired when mouse is \n     *   released over the element. if false is passed \n     *   instead, the previously firing function will no \n     *   longer fire.\n     *   @chainable",
        "*   The .mouseClicked() function is called once after \n     *   a mouse button is pressed and released over the \n     *   element. This can be used to attach element \n     *   specific event listeners.\n     *\n     *   @param fxn function to be fired when mouse is \n     *   clicked over the element. if false is passed \n     *   instead, the previously firing function will no \n     *   longer fire.\n     *   @chainable",
        "*   The .mouseMoved() function is called once every \n     *   time a mouse moves over the element. This can be \n     *   used to attach an element specific event listener.\n     *\n     *   @param fxn function to be fired when a mouse moves \n     *   over the element. if false is passed instead, the \n     *   previously firing function will no longer fire.\n     *   @chainable",
        "*   The .mouseOver() function is called once after \n     *   every time a mouse moves onto the element. This \n     *   can be used to attach an element specific event \n     *   listener.\n     *\n     *   @param fxn function to be fired when a mouse moves \n     *   onto the element. if false is passed instead, the \n     *   previously firing function will no longer fire.\n     *   @chainable",
        "*   The .changed() function is called when the value \n     *   of an element changes. This can be used to attach \n     *   an element specific event listener.\n     *\n     *   @param fxn function to be fired when the value of \n     *   an element changes. if false is passed instead, \n     *   the previously firing function will no longer \n     *   fire.\n     *   @chainable",
        "*   The .input() function is called when any user \n     *   input is detected with an element. The input event \n     *   is often used to detect keystrokes in a input \n     *   element, or changes on a slider element. This can \n     *   be used to attach an element specific event \n     *   listener.\n     *\n     *   @param fxn function to be fired when any user \n     *   input is detected within the element. if false is \n     *   passed instead, the previously firing function \n     *   will no longer fire.\n     *   @chainable",
        "*   The .mouseOut() function is called once after \n     *   every time a mouse moves off the element. This can \n     *   be used to attach an element specific event \n     *   listener.\n     *\n     *   @param fxn function to be fired when a mouse moves \n     *   off of an element. if false is passed instead, the \n     *   previously firing function will no longer fire.\n     *   @chainable",
        "*   The .touchStarted() function is called once after \n     *   every time a touch is registered. This can be used \n     *   to attach element specific event listeners.\n     *\n     *   @param fxn function to be fired when a touch \n     *   starts over the element. if false is passed \n     *   instead, the previously firing function will no \n     *   longer fire.\n     *   @chainable",
        "*   The .touchMoved() function is called once after \n     *   every time a touch move is registered. This can be \n     *   used to attach element specific event listeners.\n     *\n     *   @param fxn function to be fired when a touch moves \n     *   over the element. if false is passed instead, the \n     *   previously firing function will no longer fire.\n     *   @chainable",
        "*   The .touchEnded() function is called once after \n     *   every time a touch is registered. This can be used \n     *   to attach element specific event listeners.\n     *\n     *   @param fxn function to be fired when a touch ends \n     *   over the element. if false is passed instead, the \n     *   previously firing function will no longer fire.\n     *   @chainable",
        "*   The .dragOver() function is called once after \n     *   every time a file is dragged over the element. \n     *   This can be used to attach an element specific \n     *   event listener.\n     *\n     *   @param fxn function to be fired when a file is \n     *   dragged over the element. if false is passed \n     *   instead, the previously firing function will no \n     *   longer fire.\n     *   @chainable",
        "*   The .dragLeave() function is called once after \n     *   every time a dragged file leaves the element area. \n     *   This can be used to attach an element specific \n     *   event listener.\n     *\n     *   @param fxn function to be fired when a file is \n     *   dragged off the element. if false is passed \n     *   instead, the previously firing function will no \n     *   longer fire.\n     *   @chainable",
        "*   The .drop() function is called for each file \n     *   dropped on the element. It requires a callback \n     *   that is passed a p5.File object. You can \n     *   optionally pass two callbacks, the first one \n     *   (required) is triggered for each file dropped when \n     *   the file is loaded. The second (optional) is \n     *   triggered just once when a file (or files) are \n     *   dropped.\n     *\n     *   @param callback callback triggered when files are \n     *   dropped.\n     *   @param [fxn] callback to receive loaded file.\n     *   @chainable",
        "*   Adds specified class to the element.\n     *\n     *   @param class name of class to add",
        "*   Removes specified class from the element.\n     *\n     *   @param class name of class to remove\n     *   @return * @example  // In this example, a class is \n     *   set when the div is created // and removed when \n     *   mouse is pressed. This could link up // with a CSS \n     *   style rule to toggle style properties. var div; \n     *   function setup() { div = createDiv('div'); \n     *   div.addClass('myClass'); } function mousePressed() \n     *   { div.removeClass('myClass'); }",
        "*   Attaches the element as a child to the parent \n     *   specified. Accepts either a string ID, DOM node, \n     *   or p5.Element. If no argument is specified, an \n     *   array of children DOM nodes is returned.\n     *\n     *   @param [child] the ID, DOM node, or p5.Element to \n     *   add to the current element",
        "*   Centers a p5 Element either vertically, \n     *   horizontally, or both, relative to its parent or \n     *   according to the body if the Element has no \n     *   parent. If no argument is passed the Element is \n     *   aligned both vertically and horizontally.\n     *\n     *   @param [align] passing 'vertical', 'horizontal' \n     *   aligns element accordingly\n     *   @return pointer to p5.Element",
        "*   If an argument is given, sets the inner HTML of \n     *   the element, replacing any existing html. If true \n     *   is included as a second argument, html is appended \n     *   instead of replacing existing html. If no \n     *   arguments are given, returns the inner HTML of the \n     *   element.\n     *\n     *   @param [html] the HTML to be placed inside the \n     *   element\n     *   @param [append] whether to append HTML to existing",
        "*   Sets the position of the element relative to (0, \n     *   0) of the window. Essentially, sets \n     *   position:absolute and left and top properties of \n     *   style. If no arguments given returns the x and y \n     *   position of the element in an object.\n     *\n     *   @param [x] x-position relative to upper left of \n     *   window\n     *   @param [y] y-position relative to upper left of \n     *   window",
        "*   Sets the given style (css) property (1st arg) of \n     *   the element with the given value (2nd arg). If a \n     *   single argument is given, .style() returns the \n     *   value of the given property; however, if the \n     *   single argument is given in css syntax \n     *   ('text-align:center'), .style() sets the css \n     *   appropriatly. .style() also handles 2d and 3d css \n     *   transforms. If the 1st arg is 'rotate', \n     *   'translate', or 'position', the following \n     *   arguments accept Numbers as values. ('translate', \n     *   10, 100, 50);\n     *\n     *   @param property property to be set\n     *   @param [value] value to assign to property (only \n     *   String|Number for rotate/translate)\n     *   @param [value2] position can take a 2nd value\n     *   @param [value3] translate can take a 2nd & 3rd \n     *   value\n     *   @return value of property, if no value is \n     *   specified or p5.Element",
        "*   Adds a new attribute or changes the value of an \n     *   existing attribute on the specified element. If no \n     *   value is specified, returns the value of the given \n     *   attribute, or null if attribute is not set.\n     *\n     *   @param attr attribute to set\n     *   @param [value] value to assign to attribute\n     *   @return value of attribute, if no value is \n     *   specified or p5.Element",
        "*   Removes an attribute on the specified element.\n     *\n     *   @param attr attribute to remove",
        "*   Either returns the value of the element if no \n     *   arguments given, or sets the value of the element.\n     *\n     *   @return value of element if no value is specified \n     *   or p5.Element",
        "*   Shows the current element. Essentially, setting \n     *   display:block for the style.\n     *",
        "*   Hides the current element. Essentially, setting \n     *   display:none for the style.\n     *",
        "*   Sets the width and height of the element. AUTO can \n     *   be used to only adjust one dimension. If no \n     *   arguments given returns the width and height of \n     *   the element in an object.\n     *\n     *   @param [w] width of the element, either AUTO, or a \n     *   number\n     *   @param [h] height of the element, either AUTO, or \n     *   a number",
        "*   Removes the element and deregisters all listeners.\n     *",
        "*   Main graphics and rendering context, as well as \n     *   the base API implementation for p5.js \"core\". To \n     *   be used as the superclass for Renderer2D and \n     *   Renderer3D classes, respecitvely.\n     *\n     *   @param elt DOM node that is wrapped\n     *   @param [pInst] pointer to p5 instance\n     *   @param [isMainCanvas] whether we're using it as \n     *   main canvas",
        "*   Returns the number of key-value pairs currently in \n     *   Dictionary object\n     *\n     *   @return the number of key-value pairs in \n     *   Dictionary object",
        "*   Returns true if key exists in Dictionary otherwise \n     *   returns false\n     *\n     *   @param key that you want to access\n     *   @return whether that key exists in Dictionary",
        "*   Returns value stored at supplied key.\n     *\n     *   @param key that you want to access\n     *   @return the value stored at that key",
        "*   Changes the value of key if in it already exists \n     *   in in the Dictionary otherwise makes a new \n     *   key-value pair\n     *",
        "*   Creates a key-value pair in the Dictionary\n     *",
        "*   Creates a key-value pair in the Dictionary\n     *\n     *   @param obj key/value pair",
        "*   Empties Dictionary of all key-value pairs\n     *",
        "*   Removes a key-value pair in the Dictionary\n     *\n     *   @param key for the pair to remove",
        "*   Logs the list of items currently in the Dictionary \n     *   to the console\n     *",
        "*   Converts the Dictionary into a CSV file for local \n     *   storage.\n     *",
        "*   Converts the Dictionary into a JSON file for local \n     *   storage.\n     *",
        "*   Add to a value stored at a certain key The sum is \n     *   stored in that location in the Dictionary.\n     *\n     *   @param Key for value you wish to add to\n     *   @param Amount to add to the value",
        "*   Subtract from a value stored at a certain key The \n     *   difference is stored in that location in the \n     *   Dictionary.\n     *\n     *   @param Key for value you wish to subtract from\n     *   @param Amount to subtract from the value",
        "*   Multiply a value stored at a certain key The \n     *   product is stored in that location in the \n     *   Dictionary.\n     *\n     *   @param Key for value you wish to multiply\n     *   @param Amount to multiply the value by",
        "*   Divide a value stored at a certain key The \n     *   quotient is stored in that location in the \n     *   Dictionary.\n     *\n     *   @param Key for value you wish to divide\n     *   @param Amount to divide the value by",
        "*   Return the lowest value.\n     *",
        "*   Return the highest value.\n     *",
        "*   Return the lowest key.\n     *",
        "*   Return the highest key.\n     *",
        "*   Image width.\n     *",
        "*   Image height.\n     *",
        "*   Array containing the values for all the pixels in \n     *   the display window. These values are numbers. This \n     *   array is the size (include an appropriate factor \n     *   for pixelDensity) of the display window x4, \n     *   representing the R, G, B, A values in order for \n     *   each pixel, moving from left to right across each \n     *   row, then down each column. Retina and other high \n     *   denisty displays may have more pixels[] (by a \n     *   factor of pixelDensity^2). For example, if the \n     *   image is 100x100 pixels, there will be 40,000. \n     *   With pixelDensity = 2, there will be 160,000. The \n     *   first four values (indices 0-3) in the array will \n     *   be the R, G, B, A values of the pixel at (0, 0). \n     *   The second four values (indices 4-7) will contain \n     *   the R, G, B, A values of the pixel at (1, 0). More \n     *   generally, to set values for a pixel at (x, y): \n     *   var d = pixelDensity(); for (var i = 0; i < d; \n     *   i++) { for (var j = 0; j < d; j++) { // loop over \n     *   idx = 4 * ((y * d + j) * width * d + (x * d + i)); \n     *   pixels[idx] = r; pixels[idx+1] = g; pixels[idx+2] \n     *   = b; pixels[idx+3] = a; } }  \n     * \n     * \n     * \n     *  \n     *   Before accessing this array, the data must loaded \n     *   with the loadPixels() function. After the array \n     *   data has been modified, the updatePixels() \n     *   function must be run to update the changes.\n     *",
        "*   Loads the pixels data for this image into the \n     *   [pixels] attribute.\n     *",
        "*   Updates the backing canvas for this image with the \n     *   contents of the [pixels] array.\n     *\n     *   @param x x-offset of the target update area for \n     *   the underlying canvas\n     *   @param y y-offset of the target update area for \n     *   the underlying canvas\n     *   @param w height of the target update area for the \n     *   underlying canvas\n     *   @param h height of the target update area for the \n     *   underlying canvas",
        "*   Updates the backing canvas for this image with the \n     *   contents of the [pixels] array.\n     *",
        "*   Get a region of pixels from an image. If no params \n     *   are passed, those whole image is returned, if x \n     *   and y are the only params passed a single pixel is \n     *   extracted if all params are passed a rectangle \n     *   region is extracted and a p5.Image is returned. \n     * \n     *   Returns undefined if the region is outside the \n     *   bounds of the image\n     *\n     *   @param [x] x-coordinate of the pixel\n     *   @param [y] y-coordinate of the pixel\n     *   @param [w] width\n     *   @param [h] height\n     *   @return color of pixel at x,y in array format [R, \n     *   G, B, A] or p5.Image",
        "*   Set the color of a single pixel or write an image \n     *   into this p5.Image. Note that for a large number \n     *   of pixels this will be slower than directly \n     *   manipulating the pixels array and then calling \n     *   updatePixels().\n     *\n     *   @param x x-coordinate of the pixel\n     *   @param y y-coordinate of the pixel\n     *   @param a grayscale value | pixel array | a \n     *   p5.Color | image to copy",
        "*   Resize the image to a new width and height. To \n     *   make the image scale proportionally, use 0 as the \n     *   value for the wide or high parameter. For \n     *   instance, to make the width of an image 150 \n     *   pixels, and change the height using the same \n     *   proportion, use resize(150, 0).\n     *\n     *   @param width the resized image width\n     *   @param height the resized image height",
        "*   Copies a region of pixels from one image to \n     *   another. If no srcImage is specified this is used \n     *   as the source. If the source and destination \n     *   regions aren't the same size, it will \n     *   automatically resize source pixels to fit the \n     *   specified target region.\n     *\n     *   @param srcImage source image\n     *   @param sx X coordinate of the source's upper left \n     *   corner\n     *   @param sy Y coordinate of the source's upper left \n     *   corner\n     *   @param sw source image width\n     *   @param sh source image height\n     *   @param dx X coordinate of the destination's upper \n     *   left corner\n     *   @param dy Y coordinate of the destination's upper \n     *   left corner\n     *   @param dw destination image width\n     *   @param dh destination image height",
        "*   Copies a region of pixels from one image to \n     *   another. If no srcImage is specified this is used \n     *   as the source. If the source and destination \n     *   regions aren't the same size, it will \n     *   automatically resize source pixels to fit the \n     *   specified target region.\n     *\n     *   @param sx X coordinate of the source's upper left \n     *   corner\n     *   @param sy Y coordinate of the source's upper left \n     *   corner\n     *   @param sw source image width\n     *   @param sh source image height\n     *   @param dx X coordinate of the destination's upper \n     *   left corner\n     *   @param dy Y coordinate of the destination's upper \n     *   left corner\n     *   @param dw destination image width\n     *   @param dh destination image height",
        "*   Masks part of an image from displaying by loading \n     *   another image and using it's alpha channel as an \n     *   alpha channel for this image.\n     *\n     *   @param srcImage source image",
        "*   Applies an image filter to a p5.Image\n     *\n     *   @param filterType either THRESHOLD, GRAY, OPAQUE, \n     *   INVERT, POSTERIZE, BLUR, ERODE, DILATE or BLUR. \n     *   See Filters.js for docs on each available filter\n     *   @param [filterParam] an optional parameter unique \n     *   to each filter, see above",
        "*   Copies a region of pixels from one image to \n     *   another, using a specified blend mode to do the \n     *   operation.\n     *\n     *   @param srcImage source image\n     *   @param sx X coordinate of the source's upper left \n     *   corner\n     *   @param sy Y coordinate of the source's upper left \n     *   corner\n     *   @param sw source image width\n     *   @param sh source image height\n     *   @param dx X coordinate of the destination's upper \n     *   left corner\n     *   @param dy Y coordinate of the destination's upper \n     *   left corner\n     *   @param dw destination image width\n     *   @param dh destination image height\n     *   @param blendMode the blend mode. either BLEND, \n     *   DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \n     *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \n     *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL. \n     * \n     *   Available blend modes are: normal | multiply | \n     *   screen | overlay | darken | lighten | color-dodge \n     *   | color-burn | hard-light | soft-light | \n     *   difference | exclusion | hue | saturation | color \n     *   | luminosity \n     * \n     *   http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
        "*   Copies a region of pixels from one image to \n     *   another, using a specified blend mode to do the \n     *   operation.\n     *\n     *   @param sx X coordinate of the source's upper left \n     *   corner\n     *   @param sy Y coordinate of the source's upper left \n     *   corner\n     *   @param sw source image width\n     *   @param sh source image height\n     *   @param dx X coordinate of the destination's upper \n     *   left corner\n     *   @param dy Y coordinate of the destination's upper \n     *   left corner\n     *   @param dw destination image width\n     *   @param dh destination image height\n     *   @param blendMode the blend mode. either BLEND, \n     *   DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \n     *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \n     *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL. \n     * \n     *   Available blend modes are: normal | multiply | \n     *   screen | overlay | darken | lighten | color-dodge \n     *   | color-burn | hard-light | soft-light | \n     *   difference | exclusion | hue | saturation | color \n     *   | luminosity \n     * \n     *   http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
        "*   Saves the image to a file and force the browser to \n     *   download it. Accepts two strings for filename and \n     *   file extension Supports png (default) and jpg.\n     *\n     *   @param filename give your file a name\n     *   @param extension 'png' or 'jpg'",
        "*   Writes data to the PrintWriter stream\n     *\n     *   @param data all data to be written by the \n     *   PrintWriter",
        "*   Writes data to the PrintWriter stream, and adds a \n     *   new line at the end\n     *\n     *   @param data all data to be printed by the \n     *   PrintWriter",
        "*   Clears the data already written to the PrintWriter \n     *   object\n     *",
        "*   Closes the PrintWriter\n     *",
        "*   Table objects store data with multiple rows and \n     *   columns, much like in a traditional spreadsheet. \n     *   Tables can be generated from scratch, dynamically, \n     *   or using data from an existing file.\n     *\n     *   @param [rows] An array of p5.TableRow objects",
        "*   Use addRow() to add a new row of data to a \n     *   p5.Table object. By default, an empty row is \n     *   created. Typically, you would store a reference to \n     *   the new row in a TableRow object (see newRow in \n     *   the example above), and then set individual values \n     *   using set(). If a p5.TableRow object is included \n     *   as a parameter, then that row is duplicated and \n     *   added to the table.\n     *\n     *   @param [row] row to be added to the table",
        "*   Removes a row from the table object.\n     *\n     *   @param id ID number of the row to remove",
        "*   Returns a reference to the specified p5.TableRow. \n     *   The reference can then be used to get and set \n     *   values of the selected row.\n     *\n     *   @param rowID ID number of the row to get\n     *   @return p5.TableRow object",
        "*   Gets all rows from the table. Returns an array of \n     *   p5.TableRows.\n     *\n     *   @return Array of p5.TableRows",
        "*   Finds the first row in the Table that contains the \n     *   value provided, and returns a reference to that \n     *   row. Even if multiple rows are possible matches, \n     *   only the first matching row is returned. The \n     *   column to search may be specified by either its ID \n     *   or title.\n     *\n     *   @param value The value to match\n     *   @param column ID number or title of the column to \n     *   search",
        "*   Finds the rows in the Table that contain the value \n     *   provided, and returns references to those rows. \n     *   Returns an Array, so for must be used to iterate \n     *   through all the rows, as shown in the example \n     *   above. The column to search may be specified by \n     *   either its ID or title.\n     *\n     *   @param value The value to match\n     *   @param column ID number or title of the column to \n     *   search\n     *   @return An Array of TableRow objects",
        "*   Finds the first row in the Table that matches the \n     *   regular expression provided, and returns a \n     *   reference to that row. Even if multiple rows are \n     *   possible matches, only the first matching row is \n     *   returned. The column to search may be specified by \n     *   either its ID or title.\n     *\n     *   @param regexp The regular expression to match\n     *   @param column The column ID (number) or title \n     *   (string)\n     *   @return TableRow object",
        "*   Finds the rows in the Table that match the regular \n     *   expression provided, and returns references to \n     *   those rows. Returns an array, so for must be used \n     *   to iterate through all the rows, as shown in the \n     *   example. The column to search may be specified by \n     *   either its ID or title.\n     *\n     *   @param regexp The regular expression to match\n     *   @param [column] The column ID (number) or title \n     *   (string)\n     *   @return An Array of TableRow objects",
        "*   Retrieves all values in the specified column, and \n     *   returns them as an array. The column may be \n     *   specified by either its ID or title.\n     *\n     *   @param column String or Number of the column to \n     *   return\n     *   @return Array of column values",
        "*   Removes all rows from a Table. While all rows are \n     *   removed, columns and column titles are maintained.\n     *",
        "*   Use addColumn() to add a new column to a Table \n     *   object. Typically, you will want to specify a \n     *   title, so the column may be easily referenced \n     *   later by name. (If no title is specified, the new \n     *   column's title will be null.)\n     *\n     *   @param [title] title of the given column",
        "*   Returns the total number of columns in a Table.\n     *\n     *   @return Number of columns in this table",
        "*   Returns the total number of rows in a Table.\n     *\n     *   @return Number of rows in this table",
        "*   Removes any of the specified characters (or \n     *   \"tokens\"). If no column is specified, then the \n     *   values in all columns and rows are processed. A \n     *   specific column may be referenced by either its ID \n     *   or title.\n     *\n     *   @param chars String listing characters to be \n     *   removed\n     *   @param [column] Column ID (number) or name \n     *   (string)",
        "*   Trims leading and trailing whitespace, such as \n     *   spaces and tabs, from String table values. If no \n     *   column is specified, then the values in all \n     *   columns and rows are trimmed. A specific column \n     *   may be referenced by either its ID or title.\n     *\n     *   @param [column] Column ID (number) or name \n     *   (string)",
        "*   Use removeColumn() to remove an existing column \n     *   from a Table object. The column to be removed may \n     *   be identified by either its title (a String) or \n     *   its index value (an int). removeColumn(0) would \n     *   remove the first column, removeColumn(1) would \n     *   remove the second column, and so on.\n     *\n     *   @param column columnName (string) or ID (number)",
        "*   Stores a value in the Table's specified row and \n     *   column. The row is specified by its ID, while the \n     *   column may be specified by either its ID or title.\n     *\n     *   @param column column ID (Number) or title (String)\n     *   @param value value to assign",
        "*   Stores a Float value in the Table's specified row \n     *   and column. The row is specified by its ID, while \n     *   the column may be specified by either its ID or \n     *   title.\n     *\n     *   @param row row ID\n     *   @param column column ID (Number) or title (String)\n     *   @param value value to assign",
        "*   Stores a String value in the Table's specified row \n     *   and column. The row is specified by its ID, while \n     *   the column may be specified by either its ID or \n     *   title.\n     *\n     *   @param row row ID\n     *   @param column column ID (Number) or title (String)\n     *   @param value value to assign",
        "*   Retrieves a value from the Table's specified row \n     *   and column. The row is specified by its ID, while \n     *   the column may be specified by either its ID or \n     *   title.\n     *\n     *   @param row row ID\n     *   @param column columnName (string) or ID (number)",
        "*   Retrieves a Float value from the Table's specified \n     *   row and column. The row is specified by its ID, \n     *   while the column may be specified by either its ID \n     *   or title.\n     *\n     *   @param row row ID\n     *   @param column columnName (string) or ID (number)",
        "*   Retrieves a String value from the Table's \n     *   specified row and column. The row is specified by \n     *   its ID, while the column may be specified by \n     *   either its ID or title.\n     *\n     *   @param row row ID\n     *   @param column columnName (string) or ID (number)",
        "*   Retrieves all table data and returns as an object. \n     *   If a column name is passed in, each row object \n     *   will be stored with that attribute as its title.\n     *\n     *   @param [headerColumn] Name of the column which \n     *   should be used to title each row object (optional)",
        "*   Retrieves all table data and returns it as a \n     *   multidimensional array.\n     *",
        "*   A TableRow object represents a single row of data \n     *   values, stored in columns, from a table. A Table \n     *   Row contains both an ordered array, and an \n     *   unordered JSON object.\n     *\n     *   @param [str] optional: populate the row with a \n     *   string of values, separated by the separator\n     *   @param [separator] comma separated values (csv) by \n     *   default",
        "*   Stores a value in the TableRow's specified column. \n     *   The column may be specified by either its ID or \n     *   title.\n     *\n     *   @param column Column ID (Number) or Title (String)\n     *   @param value The value to be stored",
        "*   Stores a Float value in the TableRow's specified \n     *   column. The column may be specified by either its \n     *   ID or title.\n     *\n     *   @param column Column ID (Number) or Title (String)\n     *   @param value The value to be stored as a Float",
        "*   Stores a String value in the TableRow's specified \n     *   column. The column may be specified by either its \n     *   ID or title.\n     *\n     *   @param column Column ID (Number) or Title (String)\n     *   @param value The value to be stored as a String",
        "*   Retrieves a value from the TableRow's specified \n     *   column. The column may be specified by either its \n     *   ID or title.\n     *\n     *   @param column columnName (string) or ID (number)",
        "*   Retrieves a Float value from the TableRow's \n     *   specified column. The column may be specified by \n     *   either its ID or title.\n     *\n     *   @param column columnName (string) or ID (number)\n     *   @return Float Floating point number",
        "*   Retrieves an String value from the TableRow's \n     *   specified column. The column may be specified by \n     *   either its ID or title.\n     *\n     *   @param column columnName (string) or ID (number)\n     *   @return String",
        "*   XML is a representation of an XML object, able to \n     *   parse XML code. Use loadXML() to load external XML \n     *   files and create XML objects.\n     *",
        "*   Gets a copy of the element's parent. Returns the \n     *   parent as another p5.XML object.\n     *\n     *   @return element parent",
        "*   Gets the element's full name, which is returned as \n     *   a String.\n     *\n     *   @return the name of the node",
        "*   Sets the element's name, which is specified as a \n     *   String.\n     *\n     *   @param the new name of the node",
        "*   Checks whether or not the element has any \n     *   children, and returns the result as a boolean.\n     *",
        "*   Get the names of all of the element's children, \n     *   and returns the names as an array of Strings. This \n     *   is the same as looping through and calling \n     *   getName() on each child element individually.\n     *\n     *   @return names of the children of the element",
        "*   Returns all of the element's children as an array \n     *   of p5.XML objects. When the name parameter is \n     *   specified, then it will return all children that \n     *   match that name.\n     *\n     *   @param [name] element name\n     *   @return children of the element",
        "*   Returns the first of the element's children that \n     *   matches the name parameter or the child of the \n     *   given index.It returns undefined if no matching \n     *   child is found.\n     *\n     *   @param name element name or index",
        "*   Appends a new child to the element. The child can \n     *   be specified with either a String, which will be \n     *   used as the new tag's name, or as a reference to \n     *   an existing p5.XML object. A reference to the \n     *   newly created child is returned as an p5.XML \n     *   object.\n     *\n     *   @param a p5.XML Object which will be the child to \n     *   be added",
        "*   Removes the element specified by name or index.\n     *\n     *   @param name element name or index",
        "*   Counts the specified element's number of \n     *   attributes, returned as an Number.\n     *",
        "*   Gets all of the specified element's attributes, \n     *   and returns them as an array of Strings.\n     *\n     *   @return an array of strings containing the names \n     *   of attributes",
        "*   Checks whether or not an element has the specified \n     *   attribute.\n     *\n     *   @param the attribute to be checked\n     *   @return true if attribute found else false",
        "*   Returns an attribute value of the element as an \n     *   Number. If the defaultValue parameter is specified \n     *   and the attribute doesn't exist, then defaultValue \n     *   is returned. If no defaultValue is specified and \n     *   the attribute doesn't exist, the value 0 is \n     *   returned.\n     *\n     *   @param name the non-null full name of the \n     *   attribute\n     *   @param [defaultValue] the default value of the \n     *   attribute",
        "*   Returns an attribute value of the element as an \n     *   String. If the defaultValue parameter is specified \n     *   and the attribute doesn't exist, then defaultValue \n     *   is returned. If no defaultValue is specified and \n     *   the attribute doesn't exist, null is returned.\n     *\n     *   @param name the non-null full name of the \n     *   attribute\n     *   @param [defaultValue] the default value of the \n     *   attribute",
        "*   Sets the content of an element's attribute. The \n     *   first parameter specifies the attribute name, \n     *   while the second specifies the new content.\n     *\n     *   @param name the full name of the attribute\n     *   @param value the value of the attribute",
        "*   Returns the content of an element. If there is no \n     *   such content, defaultValue is returned if \n     *   specified, otherwise null is returned.\n     *\n     *   @param [defaultValue] value returned if no content \n     *   is found",
        "*   Sets the element's content.\n     *\n     *   @param text the new content",
        "*   The x component of the vector\n     *",
        "*   The y component of the vector\n     *",
        "*   The z component of the vector\n     *",
        "*   Returns a string representation of a vector v by \n     *   calling String(v) or v.toString(). This method is \n     *   useful for logging vectors in the console.\n     *",
        "*   Sets the x, y, and z component of the vector using \n     *   two or three separate variables, the data from a \n     *   p5.Vector, or the values from a float array.\n     *\n     *   @param [x] the x component of the vector\n     *   @param [y] the y component of the vector\n     *   @param [z] the z component of the vector\n     *   @chainable",
        "*   Sets the x, y, and z component of the vector using \n     *   two or three separate variables, the data from a \n     *   p5.Vector, or the values from a float array.\n     *\n     *   @param value the vector to set\n     *   @chainable",
        "*   Gets a copy of the vector, returns a p5.Vector \n     *   object.\n     *\n     *   @return the copy of the p5.Vector object",
        "*   Adds x, y, and z components to a vector, adds one \n     *   vector to another, or adds two independent vectors \n     *   together. The version of the method that adds two \n     *   vectors together is a static method and returns a \n     *   p5.Vector, the others acts directly on the vector. \n     *   See the examples for more context.\n     *\n     *   @param x the x component of the vector to be added\n     *   @param [y] the y component of the vector to be \n     *   added\n     *   @param [z] the z component of the vector to be \n     *   added\n     *   @chainable",
        "*   Adds x, y, and z components to a vector, adds one \n     *   vector to another, or adds two independent vectors \n     *   together. The version of the method that adds two \n     *   vectors together is a static method and returns a \n     *   p5.Vector, the others acts directly on the vector. \n     *   See the examples for more context.\n     *\n     *   @param value the vector to add\n     *   @chainable",
        "*   Adds x, y, and z components to a vector, adds one \n     *   vector to another, or adds two independent vectors \n     *   together. The version of the method that adds two \n     *   vectors together is a static method and returns a \n     *   p5.Vector, the others acts directly on the vector. \n     *   See the examples for more context.\n     *\n     *   @param v1 a p5.Vector to add\n     *   @param v2 a p5.Vector to add\n     *   @param target the vector to receive the result",
        "*   Adds x, y, and z components to a vector, adds one \n     *   vector to another, or adds two independent vectors \n     *   together. The version of the method that adds two \n     *   vectors together is a static method and returns a \n     *   p5.Vector, the others acts directly on the vector. \n     *   See the examples for more context.\n     *\n     *   @param v1 a p5.Vector to add\n     *   @param v2 a p5.Vector to add\n     *   @return the resulting p5.Vector",
        "*   Subtracts x, y, and z components from a vector, \n     *   subtracts one vector from another, or subtracts \n     *   two independent vectors. The version of the method \n     *   that subtracts two vectors is a static method and \n     *   returns a p5.Vector, the other acts directly on \n     *   the vector. See the examples for more context.\n     *\n     *   @param x the x component of the vector to subtract\n     *   @param [y] the y component of the vector to \n     *   subtract\n     *   @param [z] the z component of the vector to \n     *   subtract\n     *   @chainable",
        "*   Subtracts x, y, and z components from a vector, \n     *   subtracts one vector from another, or subtracts \n     *   two independent vectors. The version of the method \n     *   that subtracts two vectors is a static method and \n     *   returns a p5.Vector, the other acts directly on \n     *   the vector. See the examples for more context.\n     *\n     *   @param value the vector to subtract\n     *   @chainable",
        "*   Subtracts x, y, and z components from a vector, \n     *   subtracts one vector from another, or subtracts \n     *   two independent vectors. The version of the method \n     *   that subtracts two vectors is a static method and \n     *   returns a p5.Vector, the other acts directly on \n     *   the vector. See the examples for more context.\n     *\n     *   @param v1 a p5.Vector to subtract from\n     *   @param v2 a p5.Vector to subtract\n     *   @param target if undefined a new vector will be \n     *   created",
        "*   Subtracts x, y, and z components from a vector, \n     *   subtracts one vector from another, or subtracts \n     *   two independent vectors. The version of the method \n     *   that subtracts two vectors is a static method and \n     *   returns a p5.Vector, the other acts directly on \n     *   the vector. See the examples for more context.\n     *\n     *   @param v1 a p5.Vector to subtract from\n     *   @param v2 a p5.Vector to subtract\n     *   @return the resulting p5.Vector",
        "*   Multiply the vector by a scalar. The static \n     *   version of this method creates a new p5.Vector \n     *   while the non static version acts on the vector \n     *   directly. See the examples for more context.\n     *\n     *   @param n the number to multiply with the vector\n     *   @chainable",
        "*   Multiply the vector by a scalar. The static \n     *   version of this method creates a new p5.Vector \n     *   while the non static version acts on the vector \n     *   directly. See the examples for more context.\n     *\n     *   @param v the vector to multiply\n     *   @param n the number to multiply with the vector\n     *   @param target if undefined a new vector will be \n     *   created",
        "*   Multiply the vector by a scalar. The static \n     *   version of this method creates a new p5.Vector \n     *   while the non static version acts on the vector \n     *   directly. See the examples for more context.\n     *\n     *   @param v the vector to multiply\n     *   @param n the number to multiply with the vector\n     *   @return the resulting new p5.Vector",
        "*   Divide the vector by a scalar. The static version \n     *   of this method creates a new p5.Vector while the \n     *   non static version acts on the vector directly. \n     *   See the examples for more context.\n     *\n     *   @param n the number to divide the vector by\n     *   @chainable",
        "*   Divide the vector by a scalar. The static version \n     *   of this method creates a new p5.Vector while the \n     *   non static version acts on the vector directly. \n     *   See the examples for more context.\n     *\n     *   @param v the vector to divide\n     *   @param n the number to divide the vector by\n     *   @param target if undefined a new vector will be \n     *   created",
        "*   Divide the vector by a scalar. The static version \n     *   of this method creates a new p5.Vector while the \n     *   non static version acts on the vector directly. \n     *   See the examples for more context.\n     *\n     *   @param v the vector to divide\n     *   @param n the number to divide the vector by\n     *   @return the resulting new p5.Vector",
        "*   Calculates the magnitude (length) of the vector \n     *   and returns the result as a float (this is simply \n     *   the equation sqrt(xx + yy + z*z).)\n     *\n     *   @return magnitude of the vector",
        "*   Calculates the magnitude (length) of the vector \n     *   and returns the result as a float (this is simply \n     *   the equation sqrt(xx + yy + z*z).)\n     *\n     *   @param vecT the vector to return the magnitude of\n     *   @return the magnitude of vecT",
        "*   Calculates the squared magnitude of the vector and \n     *   returns the result as a float (this is simply the \n     *   equation (xx + yy + z*z).) Faster if the real \n     *   length is not required in the case of comparing \n     *   vectors, etc.\n     *\n     *   @return squared magnitude of the vector",
        "*   Calculates the dot product of two vectors. The \n     *   version of the method that computes the dot \n     *   product of two independent vectors is a static \n     *   method. See the examples for more context.\n     *\n     *   @param x x component of the vector\n     *   @param [y] y component of the vector\n     *   @param [z] z component of the vector\n     *   @return the dot product",
        "*   Calculates the dot product of two vectors. The \n     *   version of the method that computes the dot \n     *   product of two independent vectors is a static \n     *   method. See the examples for more context.\n     *\n     *   @param value value component of the vector or a \n     *   p5.Vector",
        "*   Calculates the dot product of two vectors. The \n     *   version of the method that computes the dot \n     *   product of two independent vectors is a static \n     *   method. See the examples for more context.\n     *\n     *   @param v1 the first p5.Vector\n     *   @param v2 the second p5.Vector\n     *   @return the dot product",
        "*   Calculates and returns a vector composed of the \n     *   cross product between two vectors. Both the static \n     *   and non static methods return a new p5.Vector. See \n     *   the examples for more context.\n     *\n     *   @param v p5.Vector to be crossed\n     *   @return p5.Vector composed of cross product",
        "*   Calculates and returns a vector composed of the \n     *   cross product between two vectors. Both the static \n     *   and non static methods return a new p5.Vector. See \n     *   the examples for more context.\n     *\n     *   @param v1 the first p5.Vector\n     *   @param v2 the second p5.Vector\n     *   @return the cross product",
        "*   Calculates the Euclidean distance between two \n     *   points (considering a point as a vector object).\n     *\n     *   @param v the x, y, and z coordinates of a \n     *   p5.Vector\n     *   @return the distance",
        "*   Calculates the Euclidean distance between two \n     *   points (considering a point as a vector object).\n     *\n     *   @param v1 the first p5.Vector\n     *   @param v2 the second p5.Vector\n     *   @return the distance",
        "*   Normalize the vector to length 1 (make it a unit \n     *   vector).\n     *\n     *   @return normalized p5.Vector",
        "*   Limit the magnitude of this vector to the value \n     *   used for the max parameter.\n     *\n     *   @param max the maximum magnitude for the vector\n     *   @chainable",
        "*   Set the magnitude of this vector to the value used \n     *   for the len parameter.\n     *\n     *   @param len the new length for this vector\n     *   @chainable",
        "*   Calculate the angle of rotation for this vector \n     *   (only 2D vectors)\n     *\n     *   @return the angle of rotation",
        "*   Rotate the vector by an angle (only 2D vectors), \n     *   magnitude remains the same\n     *\n     *   @param angle the angle of rotation\n     *   @chainable",
        "*   Calculates and returns the angle (in radians) \n     *   between two vectors.\n     *\n     *   @param the x, y, and z components of a p5.Vector\n     *   @return the angle between (in radians)",
        "*   Linear interpolate the vector to another vector\n     *\n     *   @param x the x component\n     *   @param y the y component\n     *   @param z the z component\n     *   @param amt the amount of interpolation; some value \n     *   between 0.0 (old vector) and 1.0 (new vector). 0.9 \n     *   is very near the new vector. 0.5 is halfway in \n     *   between.\n     *   @chainable",
        "*   Linear interpolate the vector to another vector\n     *\n     *   @param v the p5.Vector to lerp to\n     *   @param amt the amount of interpolation; some value \n     *   between 0.0 (old vector) and 1.0 (new vector). 0.9 \n     *   is very near the new vector. 0.5 is halfway in \n     *   between.\n     *   @chainable",
        "*   Linear interpolate the vector to another vector\n     *\n     *   @param amt the amount of interpolation; some value \n     *   between 0.0 (old vector) and 1.0 (new vector). 0.9 \n     *   is very near the new vector. 0.5 is halfway in \n     *   between.\n     *   @param target if undefined a new vector will be \n     *   created",
        "*   Linear interpolate the vector to another vector\n     *\n     *   @param amt the amount of interpolation; some value \n     *   between 0.0 (old vector) and 1.0 (new vector). 0.9 \n     *   is very near the new vector. 0.5 is halfway in \n     *   between.\n     *   @return the lerped value",
        "*   Return a representation of this vector as a float \n     *   array. This is only for temporary use. If used in \n     *   any other fashion, the contents should be copied \n     *   by using the p5.Vector.copy() method to copy into \n     *   your own array.\n     *\n     *   @return an Array with the 3 values",
        "*   Equality check against a p5.Vector\n     *\n     *   @param [x] the x component of the vector\n     *   @param [y] the y component of the vector\n     *   @param [z] the z component of the vector\n     *   @return whether the vectors are equals",
        "*   Equality check against a p5.Vector\n     *\n     *   @param value the vector to compare",
        "*   Make a new 2D vector from an angle\n     *\n     *   @param angle the desired angle, in radians\n     *   @param [length] the length of the new vector \n     *   (defaults to 1)\n     *   @return the new p5.Vector object",
        "*   Make a new 3D vector from a pair of ISO spherical \n     *   angles\n     *\n     *   @param theta the polar angle, in radians (zero is \n     *   up)\n     *   @param phi the azimuthal angle, in radians (zero \n     *   is out of the screen)\n     *   @param [length] the length of the new vector \n     *   (defaults to 1)\n     *   @return the new p5.Vector object",
        "*   Make a new 2D unit vector from a random angle\n     *\n     *   @return the new p5.Vector object",
        "*   Make a new random 3D unit vector.\n     *\n     *   @return the new p5.Vector object",
        "*   Underlying opentype font implementation\n     *",
        "*   Returns a tight bounding box for the given text \n     *   string using this font (currently only supports \n     *   single lines)\n     *\n     *   @param line a line of text\n     *   @param x x-position\n     *   @param y y-position\n     *   @param [fontSize] font size to use (optional)\n     *   @param [options] opentype options (optional)\n     *   @return a rectangle object with properties: x, y, \n     *   w, h",
        "*   Computes an array of points following the path for \n     *   specified text\n     *\n     *   @param txt a line of text\n     *   @param x x-position\n     *   @param y y-position\n     *   @param fontSize font size to use (optional)\n     *   @param [options] an (optional) object that can \n     *   contain: \n     * \n     * \n     *   sampleFactor - the ratio of path-length to number \n     *   of samples (default=.25); higher values yield more \n     *   points and are therefore more precise \n     * \n     * \n     *   simplifyThreshold - if set to a non-zero value, \n     *   collinear points will be be removed from the \n     *   polygon; the value represents the threshold angle \n     *   to use when determining whether two edges are \n     *   collinear\n     *   @return an array of points, each with x, y, alpha \n     *   (the path angle)",
        "*   p5 Geometry class\n     *\n     *   @param vertData callback function or Object \n     *   containing routine(s) for vertex data generation\n     *   @param [detailX] number of vertices on horizontal \n     *   surface\n     *   @param [detailY] number of vertices on horizontal \n     *   surface\n     *   @param [callback] function to call upon object \n     *   instantiation.",
        "*   computes smooth normals per vertex as an average \n     *   of each face.\n     *\n     *   @chainable",
        "*   Averages the vertex normals. Used in curved \n     *   surfaces\n     *\n     *   @chainable",
        "*   Averages pole normals. Used in spherical \n     *   primitives\n     *\n     *   @chainable",
        "*   Modifies all vertices to be centered within the \n     *   range -100 to 100.\n     *\n     *   @chainable",
        "*   Wrapper around gl.uniform functions. As we store \n     *   uniform info in the shader we can use that to do \n     *   type checking on the supplied data and call the \n     *   appropriate function.\n     *\n     *   @param uniformName the name of the uniform in the \n     *   shader program\n     *   @param data the data to be associated with that \n     *   uniform; type varies (could be a single numerical \n     *   value, array, matrix, or texture / sampler \n     *   reference)\n     *   @chainable",
        "*   Extends p5.Element to handle audio and video. In \n     *   addition to the methods of p5.Element, it also \n     *   contains methods for controlling media. It is not \n     *   called directly, but p5.MediaElements are created \n     *   by calling createVideo, createAudio, and \n     *   createCapture.\n     *\n     *   @param elt DOM node that is wrapped",
        "*   Path to the media element source.\n     *",
        "*   Play an HTML5 media element.\n     *",
        "*   Stops an HTML5 media element (sets current time to \n     *   zero).\n     *",
        "*   Pauses an HTML5 media element.\n     *",
        "*   Set 'loop' to true for an HTML5 media element, and \n     *   starts playing.\n     *",
        "*   Set 'loop' to false for an HTML5 media element. \n     *   Element will stop when it reaches the end.\n     *",
        "*   Set HTML5 media element to autoplay or not.\n     *\n     *   @param autoplay whether the element should \n     *   autoplay",
        "*   Sets volume for this HTML5 media element. If no \n     *   argument is given, returns the current volume.\n     *\n     *   @param [val] volume between 0.0 and 1.0\n     *   @return current volume or p5.MediaElement",
        "*   If no arguments are given, returns the current \n     *   playback speed of the element. The speed parameter \n     *   sets the speed where 2.0 will play the element \n     *   twice as fast, 0.5 will play at half the speed, \n     *   and -1 will play the element in normal speed in \n     *   reverse.(Note that not all browsers support \n     *   backward playback and even if they do, playback \n     *   might not be smooth.)\n     *\n     *   @param [speed] speed multiplier for element \n     *   playback\n     *   @return current playback speed or p5.MediaElement",
        "*   If no arguments are given, returns the current \n     *   time of the element. If an argument is given the \n     *   current time of the element is set to it.\n     *\n     *   @param [time] time to jump to (in seconds)\n     *   @return current time (in seconds) or \n     *   p5.MediaElement",
        "*   Returns the duration of the HTML5 media element.\n     *\n     *   @return duration",
        "*   Schedule an event to be called when the audio or \n     *   video element reaches the end. If the element is \n     *   looping, this will not be called. The element is \n     *   passed in as the argument to the onended callback.\n     *\n     *   @param callback function to call when the \n     *   soundfile has ended. The media element will be \n     *   passed in as the argument to the callback.",
        "*   Send the audio output of this element to a \n     *   specified audioNode or p5.sound object. If no \n     *   element is provided, connects to p5's master \n     *   output. That connection is established when this \n     *   method is first called. All connections are \n     *   removed by the .disconnect() method. This method \n     *   is meant to be used with the p5.sound.js addon \n     *   library.\n     *\n     *   @param audioNode AudioNode from the Web Audio API, \n     *   or an object from the p5.sound library",
        "*   Disconnect all Web Audio routing, including to \n     *   master output. This is useful if you want to \n     *   re-route the output through audio effects, for \n     *   example.\n     *",
        "*   Show the default MediaElement controls, as \n     *   determined by the web browser.\n     *",
        "*   Hide the default mediaElement controls.\n     *",
        "*   Schedule events to trigger every time a \n     *   MediaElement (audio/video) reaches a playback cue \n     *   point. Accepts a callback function, a time (in \n     *   seconds) at which to trigger the callback, and an \n     *   optional parameter for the callback. \n     * \n     *   Time will be passed as the first parameter to the \n     *   callback function, and param will be the second \n     *   parameter.\n     *\n     *   @param time Time in seconds, relative to this \n     *   media element's playback. For example, to trigger \n     *   an event every time playback reaches two seconds, \n     *   pass in the number 2. This will be passed as the \n     *   first parameter to the callback function.\n     *   @param callback Name of a function that will be \n     *   called at the given time. The callback will \n     *   receive time and (optionally) param as its two \n     *   parameters.\n     *   @param [value] An object to be passed as the \n     *   second parameter to the callback function.\n     *   @return id ID of this cue, useful for \n     *   removeCue(id)",
        "*   Remove a callback based on its ID. The ID is \n     *   returned by the addCue method.\n     *\n     *   @param id ID of the cue, as returned by addCue",
        "*   Remove all of the callbacks that had originally \n     *   been scheduled via the addCue method.\n     *\n     *   @param id ID of the cue, as returned by addCue",
        "*   Base class for a file Using this for \n     *   createFileInput\n     *\n     *   @param file File that is wrapped",
        "*   Underlying File object. All normal File methods \n     *   can be called on this.\n     *",
        "*   File type (image, text, etc.)\n     *",
        "*   File subtype (usually the file extension jpg, png, \n     *   xml, etc.)\n     *",
        "*   File name\n     *",
        "*   File size\n     *",
        "*   URL string containing image data.\n     *",
        "*   SoundFile object with a path to a file. The \n     *   p5.SoundFile may not be available immediately \n     *   because it loads the file information \n     *   asynchronously. \n     * \n     *   To do something with the sound as soon as it loads \n     *   pass the name of a function as the second \n     *   parameter. \n     * \n     *   Only one file path is required. However, audio \n     *   file formats (i.e. mp3, ogg, wav and m4a/aac) are \n     *   not supported by all web browsers. If you want to \n     *   ensure compatability, instead of a single file \n     *   path, you may include an Array of filepaths, and \n     *   the browser will choose a format that works.\n     *\n     *   @param path path to a sound file (String). \n     *   Optionally, you may include multiple file formats \n     *   in an array. Alternately, accepts an object from \n     *   the HTML5 File API, or a p5.File.\n     *   @param [successCallback] Name of a function to \n     *   call once file loads\n     *   @param [errorCallback] Name of a function to call \n     *   if file fails to load. This function will receive \n     *   an error or XMLHttpRequest object with information \n     *   about what went wrong.\n     *   @param [whileLoadingCallback] Name of a function \n     *   to call while file is loading. That function will \n     *   receive progress of the request to load the sound \n     *   file (between 0 and 1) as its first parameter. \n     *   This progress does not account for the additional \n     *   time needed to decode the audio data.",
        "*   loadSound() returns a new p5.SoundFile from a \n     *   specified path. If called during preload(), the \n     *   p5.SoundFile will be ready to play in time for \n     *   setup() and draw(). If called outside of preload, \n     *   the p5.SoundFile will not be ready immediately, so \n     *   loadSound accepts a callback as the second \n     *   parameter. Using a  local server is recommended \n     *   when loading external files.\n     *\n     *   @param path Path to the sound file, or an array \n     *   with paths to soundfiles in multiple formats i.e. \n     *   ['sound.ogg', 'sound.mp3']. Alternately, accepts \n     *   an object: either from the HTML5 File API, or a \n     *   p5.File.\n     *   @param [successCallback] Name of a function to \n     *   call once file loads\n     *   @param [errorCallback] Name of a function to call \n     *   if there is an error loading the file.\n     *   @param [whileLoading] Name of a function to call \n     *   while file is loading. This function will receive \n     *   the percentage loaded so far, from 0.0 to 1.0.\n     *   @return Returns a p5.SoundFile",
        "*   Returns true if the sound file finished loading \n     *   successfully.\n     *",
        "*   Play the p5.SoundFile\n     *\n     *   @param [startTime] (optional) schedule playback to \n     *   start (in seconds from now).\n     *   @param [rate] (optional) playback rate\n     *   @param [amp] (optional) amplitude (volume) of \n     *   playback\n     *   @param [cueStart] (optional) cue start time in \n     *   seconds\n     *   @param [duration] (optional) duration of playback \n     *   in seconds",
        "*   p5.SoundFile has two play modes: restart and \n     *   sustain. Play Mode determines what happens to a \n     *   p5.SoundFile if it is triggered while in the \n     *   middle of playback. In sustain mode, playback will \n     *   continue simultaneous to the new playback. In \n     *   restart mode, play() will stop playback and start \n     *   over. With untilDone, a sound will play only if \n     *   it's not already playing. Sustain is the default \n     *   mode.\n     *\n     *   @param str 'restart' or 'sustain' or 'untilDone'",
        "*   Pauses a file that is currently playing. If the \n     *   file is not playing, then nothing will happen. \n     *   After pausing, .play() will resume from the paused \n     *   position. If p5.SoundFile had been set to loop \n     *   before it was paused, it will continue to loop \n     *   after it is unpaused with .play().\n     *\n     *   @param [startTime] (optional) schedule event to \n     *   occur seconds from now",
        "*   Loop the p5.SoundFile. Accepts optional parameters \n     *   to set the playback rate, playback volume, \n     *   loopStart, loopEnd.\n     *\n     *   @param [startTime] (optional) schedule event to \n     *   occur seconds from now\n     *   @param [rate] (optional) playback rate\n     *   @param [amp] (optional) playback volume\n     *   @param [cueLoopStart] (optional) startTime in \n     *   seconds\n     *   @param [duration] (optional) loop duration in \n     *   seconds",
        "*   Set a p5.SoundFile's looping flag to true or \n     *   false. If the sound is currently playing, this \n     *   change will take effect when it reaches the end of \n     *   the current playback.\n     *\n     *   @param Boolean set looping to true or false",
        "*   Returns 'true' if a p5.SoundFile is currently \n     *   looping and playing, 'false' if not.\n     *",
        "*   Returns true if a p5.SoundFile is playing, false \n     *   if not (i.e. paused or stopped).\n     *",
        "*   Returns true if a p5.SoundFile is paused, false if \n     *   not (i.e. playing or stopped).\n     *",
        "*   Stop soundfile playback.\n     *\n     *   @param [startTime] (optional) schedule event to \n     *   occur in seconds from now",
        "*   Multiply the output volume (amplitude) of a sound \n     *   file between 0.0 (silence) and 1.0 (full volume). \n     *   1.0 is the maximum amplitude of a digital sound, \n     *   so multiplying by greater than 1.0 may cause \n     *   digital distortion. To fade, provide a rampTime \n     *   parameter. For more complex fades, see the Env \n     *   class. Alternately, you can pass in a signal \n     *   source such as an oscillator to modulate the \n     *   amplitude with an audio signal.\n     *\n     *   @param volume Volume (amplitude) between 0.0 and \n     *   1.0 or modulating signal/oscillator\n     *   @param [rampTime] Fade for t seconds\n     *   @param [timeFromNow] Schedule this event to happen \n     *   at t seconds in the future",
        "*   Set the stereo panning of a p5.sound object to a \n     *   floating point number between -1.0 (left) and 1.0 \n     *   (right). Default is 0.0 (center).\n     *\n     *   @param [panValue] Set the stereo panner\n     *   @param [timeFromNow] schedule this event to happen \n     *   seconds from now",
        "*   Returns the current stereo pan position (-1.0 to \n     *   1.0)\n     *\n     *   @return Returns the stereo pan setting of the \n     *   Oscillator as a number between -1.0 (left) and 1.0 \n     *   (right). 0.0 is center and default.",
        "*   Set the playback rate of a sound file. Will change \n     *   the speed and the pitch. Values less than zero \n     *   will reverse the audio buffer.\n     *\n     *   @param [playbackRate] Set the playback rate. 1.0 \n     *   is normal, .5 is half-speed, 2.0 is twice as fast. \n     *   Values less than zero play backwards.",
        "*   Returns the duration of a sound file in seconds.\n     *\n     *   @return The duration of the soundFile in seconds.",
        "*   Return the current position of the p5.SoundFile \n     *   playhead, in seconds. Time is relative to the \n     *   normal buffer direction, so if reverseBuffer has \n     *   been called, currentTime will count backwards.\n     *\n     *   @return currentTime of the soundFile in seconds.",
        "*   Move the playhead of the song to a position, in \n     *   seconds. Start timing and playback duration. If \n     *   none are given, will reset the file to play entire \n     *   duration from start to finish.\n     *\n     *   @param cueTime cueTime of the soundFile in \n     *   seconds.\n     *   @param duration duration in seconds.",
        "*   Return the number of channels in a sound file. For \n     *   example, Mono = 1, Stereo = 2.\n     *\n     *   @return [channels]",
        "*   Return the sample rate of the sound file.\n     *\n     *   @return [sampleRate]",
        "*   Return the number of samples in a sound file. \n     *   Equal to sampleRate * duration.\n     *\n     *   @return [sampleCount]",
        "*   Returns an array of amplitude peaks in a \n     *   p5.SoundFile that can be used to draw a static \n     *   waveform. Scans through the p5.SoundFile's audio \n     *   buffer to find the greatest amplitudes. Accepts \n     *   one parameter, 'length', which determines size of \n     *   the array. Larger arrays result in more precise \n     *   waveform visualizations. Inspired by \n     *   Wavesurfer.js.\n     *\n     *   @param [length] length is the size of the returned \n     *   array. Larger length results in more precision. \n     *   Defaults to 5*width of the browser window.\n     *   @return Array of peaks.",
        "*   Reverses the p5.SoundFile's buffer source. \n     *   Playback must be handled separately (see example).\n     *",
        "*   Schedule an event to be called when the soundfile \n     *   reaches the end of a buffer. If the soundfile is \n     *   playing through once, this will be called when it \n     *   ends. If it is looping, it will be called when \n     *   stop is called.\n     *\n     *   @param callback function to call when the \n     *   soundfile has ended.",
        "*   Connects the output of a p5sound object to input \n     *   of another p5.sound object. For example, you may \n     *   connect a p5.SoundFile to an FFT or an Effect. If \n     *   no parameter is given, it will connect to the \n     *   master output. Most p5sound objects connect to the \n     *   master output when they are created.\n     *\n     *   @param [object] Audio object that accepts an input",
        "*   Disconnects the output of this p5sound object.\n     *",
        "*   Reset the source for this SoundFile to a new path \n     *   (URL).\n     *\n     *   @param path path to audio file\n     *   @param callback Callback",
        "*   Replace the current Audio Buffer with a new \n     *   Buffer.\n     *\n     *   @param buf Array of Float32 Array(s). 2 Float32 \n     *   Arrays will create a stereo source. 1 will create \n     *   a mono source.",
        "*   processPeaks returns an array of timestamps where \n     *   it thinks there is a beat. This is an asynchronous \n     *   function that processes the soundfile in an \n     *   offline audio context, and sends the results to \n     *   your callback function. \n     * \n     *   The process involves running the soundfile through \n     *   a lowpass filter, and finding all of the peaks \n     *   above the initial threshold. If the total number \n     *   of peaks are below the minimum number of peaks, it \n     *   decreases the threshold and re-runs the analysis \n     *   until either minPeaks or minThreshold are reached.\n     *\n     *   @param callback a function to call once this data \n     *   is returned\n     *   @param [initThreshold] initial threshold defaults \n     *   to 0.9\n     *   @param [minThreshold] minimum threshold defaults \n     *   to 0.22\n     *   @param [minPeaks] minimum number of peaks defaults \n     *   to 200\n     *   @return Array of timestamped peaks",
        "*   Schedule events to trigger every time a \n     *   MediaElement (audio/video) reaches a playback cue \n     *   point. Accepts a callback function, a time (in \n     *   seconds) at which to trigger the callback, and an \n     *   optional parameter for the callback. \n     * \n     *   Time will be passed as the first parameter to the \n     *   callback function, and param will be the second \n     *   parameter.\n     *\n     *   @param time Time in seconds, relative to this \n     *   media element's playback. For example, to trigger \n     *   an event every time playback reaches two seconds, \n     *   pass in the number 2. This will be passed as the \n     *   first parameter to the callback function.\n     *   @param callback Name of a function that will be \n     *   called at the given time. The callback will \n     *   receive time and (optionally) param as its two \n     *   parameters.\n     *   @param [value] An object to be passed as the \n     *   second parameter to the callback function.\n     *   @return id ID of this cue, useful for \n     *   removeCue(id)",
        "*   Remove a callback based on its ID. The ID is \n     *   returned by the addCue method.\n     *\n     *   @param id ID of the cue, as returned by addCue",
        "*   Remove all of the callbacks that had originally \n     *   been scheduled via the addCue method.\n     *",
        "*   Amplitude measures volume between 0.0 and 1.0. \n     *   Listens to all p5sound by default, or use \n     *   setInput() to listen to a specific sound source. \n     *   Accepts an optional smoothing value, which \n     *   defaults to 0.\n     *\n     *   @param [smoothing] between 0.0 and .999 to smooth \n     *   amplitude readings (defaults to 0)",
        "*   Connects to the p5sound instance (master output) \n     *   by default. Optionally, you can pass in a specific \n     *   source (i.e. a soundfile).\n     *\n     *   @param [snd] set the sound source (optional, \n     *   defaults to master output)\n     *   @param [smoothing] a range between 0.0 and 1.0 to \n     *   smooth amplitude readings",
        "*   Returns a single Amplitude reading at the moment \n     *   it is called. For continuous readings, run in the \n     *   draw loop.\n     *\n     *   @param [channel] Optionally return only channel 0 \n     *   (left) or 1 (right)\n     *   @return Amplitude as a number between 0.0 and 1.0",
        "*   Determines whether the results of \n     *   Amplitude.process() will be Normalized. To \n     *   normalize, Amplitude finds the difference the \n     *   loudest reading it has processed and the maximum \n     *   amplitude of 1.0. Amplitude adds this difference \n     *   to all values to produce results that will \n     *   reliably map between 0.0 and 1.0. However, if a \n     *   louder moment occurs, the amount that Normalize \n     *   adds to all the values will change. Accepts an \n     *   optional boolean parameter (true or false). \n     *   Normalizing is off by default.\n     *\n     *   @param [boolean] set normalize to true (1) or \n     *   false (0)",
        "*   Smooth Amplitude analysis by averaging with the \n     *   last analysis frame. Off by default.\n     *\n     *   @param set smoothing from 0.0 <= 1",
        "*   FFT (Fast Fourier Transform) is an analysis \n     *   algorithm that isolates individual  audio \n     *   frequencies within a waveform. Once instantiated, \n     *   a p5.FFT object can return an array based on two \n     *   types of analyses: \n     *  \n     *   • FFT.waveform() computes amplitude values along \n     *   the time domain. The array indices correspond to \n     *   samples across a brief moment in time. Each value \n     *   represents amplitude of the waveform at that \n     *   sample of time.\n     *  \n     *   • FFT.analyze()  computes amplitude values along \n     *   the frequency domain. The array indices correspond \n     *   to frequencies (i.e. pitches), from the lowest to \n     *   the highest that humans can hear. Each value \n     *   represents amplitude at that slice of the \n     *   frequency spectrum. Use with getEnergy() to \n     *   measure amplitude at specific frequencies, or \n     *   within a range of frequencies.  \n     * \n     *   FFT analyzes a very short snapshot of sound called \n     *   a sample buffer. It returns an array of amplitude \n     *   measurements, referred to as bins. The array is \n     *   1024 bins long by default. You can change the bin \n     *   array length, but it must be a power of 2 between \n     *   16 and 1024 in order for the FFT algorithm to \n     *   function correctly. The actual size of the FFT \n     *   buffer is twice the number of bins, so given a \n     *   standard sample rate, the buffer is 2048/44100 \n     *   seconds long.\n     *\n     *   @param [smoothing] Smooth results of Freq \n     *   Spectrum. 0.0 < smoothing < 1.0. Defaults to 0.8.\n     *   @param [bins] Length of resulting array. Must be a \n     *   power of two between 16 and 1024. Defaults to \n     *   1024.",
        "*   Set the input source for the FFT analysis. If no \n     *   source is provided, FFT will analyze all sound in \n     *   the sketch.\n     *\n     *   @param [source] p5.sound object (or web audio API \n     *   source node)",
        "*   Returns an array of amplitude values (between -1.0 \n     *   and +1.0) that represent a snapshot of amplitude \n     *   readings in a single buffer. Length will be equal \n     *   to bins (defaults to 1024). Can be used to draw \n     *   the waveform of a sound.\n     *\n     *   @param [bins] Must be a power of two between 16 \n     *   and 1024. Defaults to 1024.\n     *   @param [precision] If any value is provided, will \n     *   return results in a Float32 Array which is more \n     *   precise than a regular array.\n     *   @return Array Array of amplitude values (-1 to 1) \n     *   over time. Array length = bins.",
        "*   Returns an array of amplitude values (between 0 \n     *   and 255) across the frequency spectrum. Length is \n     *   equal to FFT bins (1024 by default). The array \n     *   indices correspond to frequencies (i.e. pitches), \n     *   from the lowest to the highest that humans can \n     *   hear. Each value represents amplitude at that \n     *   slice of the frequency spectrum. Must be called \n     *   prior to using getEnergy().\n     *\n     *   @param [bins] Must be a power of two between 16 \n     *   and 1024. Defaults to 1024.\n     *   @param [scale] If \"dB,\" returns decibel float \n     *   measurements between -140 and 0 (max). Otherwise \n     *   returns integers from 0-255.\n     *   @return spectrum Array of energy \n     *   (amplitude/volume) values across the frequency \n     *   spectrum. Lowest energy (silence) = 0, highest \n     *   possible is 255.",
        "*   Returns the amount of energy (volume) at a \n     *   specific  frequency, or the average amount of \n     *   energy between two frequencies. Accepts Number(s) \n     *   corresponding to frequency (in Hz), or a String \n     *   corresponding to predefined frequency ranges \n     *   (\"bass\", \"lowMid\", \"mid\", \"highMid\", \"treble\"). \n     *   Returns a range between 0 (no energy/volume at \n     *   that frequency) and 255 (maximum energy). NOTE: \n     *   analyze() must be called prior to getEnergy(). \n     *   Analyze() tells the FFT to analyze frequency data, \n     *   and getEnergy() uses the results determine the \n     *   value at a specific frequency or range of \n     *   frequencies.\n     *\n     *   @param frequency1 Will return a value representing \n     *   energy at this frequency. Alternately, the strings \n     *   \"bass\", \"lowMid\" \"mid\", \"highMid\", and \"treble\" \n     *   will return predefined frequency ranges.\n     *   @param [frequency2] If a second frequency is \n     *   given, will return average amount of energy that \n     *   exists between the two frequencies.\n     *   @return Energy Energy (volume/amplitude) from 0 \n     *   and 255.",
        "*   Returns the  spectral centroid of the input \n     *   signal. NOTE: analyze() must be called prior to \n     *   getCentroid(). Analyze() tells the FFT to analyze \n     *   frequency data, and getCentroid() uses the results \n     *   determine the spectral centroid.\n     *\n     *   @return Spectral Centroid Frequency Frequency of \n     *   the spectral centroid in Hz.",
        "*   Smooth FFT analysis by averaging with the last \n     *   analysis frame.\n     *\n     *   @param smoothing 0.0 < smoothing < 1.0. Defaults \n     *   to 0.8.",
        "*   Returns an array of average amplitude values for a \n     *   given number of frequency bands split equally. N \n     *   defaults to 16. NOTE: analyze() must be called \n     *   prior to linAverages(). Analyze() tells the FFT to \n     *   analyze frequency data, and linAverages() uses the \n     *   results to group them into a smaller set of \n     *   averages.\n     *\n     *   @param N Number of returned frequency groups\n     *   @return linearAverages Array of average amplitude \n     *   values for each group",
        "*   Returns an array of average amplitude values of \n     *   the spectrum, for a given set of  Octave Bands \n     *   NOTE: analyze() must be called prior to \n     *   logAverages(). Analyze() tells the FFT to analyze \n     *   frequency data, and logAverages() uses the results \n     *   to group them into a smaller set of averages.\n     *\n     *   @param octaveBands Array of Octave Bands objects \n     *   for grouping\n     *   @return logAverages Array of average amplitude \n     *   values for each group",
        "*   Calculates and Returns the 1/N Octave Bands N \n     *   defaults to 3 and minimum central frequency to \n     *   15.625Hz. (1/3 Octave Bands ~= 31 Frequency Bands) \n     *   Setting fCtr0 to a central value of a higher \n     *   octave will ignore the lower bands and produce \n     *   less frequency groups.\n     *\n     *   @param N Specifies the 1/N type of generated \n     *   octave bands\n     *   @param fCtr0 Minimum central frequency for the \n     *   lowest band\n     *   @return octaveBands Array of octave band objects \n     *   with their bounds",
        "*   p5.Signal is a constant audio-rate signal used by \n     *   p5.Oscillator and p5.Envelope for modulation math. \n     *   This is necessary because Web Audio is processed \n     *   on a seprate clock. For example, the p5 draw loop \n     *   runs about 60 times per second. But the audio \n     *   clock must process samples 44100 times per second. \n     *   If we want to add a value to each of those \n     *   samples, we can't do it in the draw loop, but we \n     *   can do it by adding a constant-rate audio \n     *   signal.This class mostly functions behind the \n     *   scenes in p5.sound, and returns a Tone.Signal from \n     *   the Tone.js library by Yotam Mann. If you want to \n     *   work directly with audio signals for modular \n     *   synthesis, check out tone.js.\n     *\n     *   @return A Signal object from the Tone.js library",
        "*   Fade to value, for smooth transitions\n     *\n     *   @param value Value to set this signal\n     *   @param [secondsFromNow] Length of fade, in seconds \n     *   from now",
        "*   Connect a p5.sound object or Web Audio node to \n     *   this p5.Signal so that its amplitude values can be \n     *   scaled.\n     *",
        "*   Add a constant value to this audio signal, and \n     *   return the resulting audio signal. Does not change \n     *   the value of the original signal, instead it \n     *   returns a new p5.SignalAdd.\n     *\n     *   @return object",
        "*   Multiply this signal by a constant value, and \n     *   return the resulting audio signal. Does not change \n     *   the value of the original signal, instead it \n     *   returns a new p5.SignalMult.\n     *\n     *   @param number to multiply\n     *   @return object",
        "*   Scale this signal value to a given range, and \n     *   return the result as an audio signal. Does not \n     *   change the value of the original signal, instead \n     *   it returns a new p5.SignalScale.\n     *\n     *   @param number to multiply\n     *   @param inMin input range minumum\n     *   @param inMax input range maximum\n     *   @param outMin input range minumum\n     *   @param outMax input range maximum\n     *   @return object",
        "*   Creates a signal that oscillates between -1.0 and \n     *   1.0. By default, the oscillation takes the form of \n     *   a sinusoidal shape ('sine'). Additional types \n     *   include 'triangle', 'sawtooth' and 'square'. The \n     *   frequency defaults to 440 oscillations per second \n     *   (440Hz, equal to the pitch of an 'A' note). Set \n     *   the type of oscillation with setType(), or by \n     *   instantiating a specific oscillator: p5.SinOsc, \n     *   p5.TriOsc, p5.SqrOsc, or p5.SawOsc.\n     *\n     *   @param [freq] frequency defaults to 440Hz\n     *   @param [type] type of oscillator. Options: 'sine' \n     *   (default), 'triangle', 'sawtooth', 'square'",
        "*   Start an oscillator. Accepts an optional parameter \n     *   to determine how long (in seconds from now) until \n     *   the oscillator starts.\n     *\n     *   @param [time] startTime in seconds from now.\n     *   @param [frequency] frequency in Hz.",
        "*   Stop an oscillator. Accepts an optional parameter \n     *   to determine how long (in seconds from now) until \n     *   the oscillator stops.\n     *\n     *   @param secondsFromNow Time, in seconds from now.",
        "*   Set the amplitude between 0 and 1.0. Or, pass in \n     *   an object such as an oscillator to modulate \n     *   amplitude with an audio signal.\n     *\n     *   @param vol between 0 and 1.0 or a modulating \n     *   signal/oscillator\n     *   @param [rampTime] create a fade that lasts \n     *   rampTime\n     *   @param [timeFromNow] schedule this event to happen \n     *   seconds from now\n     *   @return gain If no value is provided, returns the \n     *   Web Audio API AudioParam that controls this \n     *   oscillator's gain/amplitude/volume)",
        "*   Set frequency of an oscillator to a value. Or, \n     *   pass in an object such as an oscillator to \n     *   modulate the frequency with an audio signal.\n     *\n     *   @param Frequency Frequency in Hz or modulating \n     *   signal/oscillator\n     *   @param [rampTime] Ramp time (in seconds)\n     *   @param [timeFromNow] Schedule this event to happen \n     *   at x seconds from now\n     *   @return Frequency If no value is provided, returns \n     *   the Web Audio API AudioParam that controls this \n     *   oscillator's frequency",
        "*   Set type to 'sine', 'triangle', 'sawtooth' or \n     *   'square'.\n     *\n     *   @param type 'sine', 'triangle', 'sawtooth' or \n     *   'square'.",
        "*   Connect to a p5.sound / Web Audio object.\n     *\n     *   @param unit A p5.sound or Web Audio object",
        "*   Disconnect all outputs\n     *",
        "*   Pan between Left (-1) and Right (1)\n     *\n     *   @param panning Number between -1 and 1\n     *   @param timeFromNow schedule this event to happen \n     *   seconds from now",
        "*   Set the phase of an oscillator between 0.0 and \n     *   1.0. In this implementation, phase is a delay time \n     *   based on the oscillator's current frequency.\n     *\n     *   @param phase float between 0.0 and 1.0",
        "*   Add a value to the p5.Oscillator's output \n     *   amplitude, and return the oscillator. Calling this \n     *   method again will override the initial add() with \n     *   a new value.\n     *\n     *   @param number Constant number to add\n     *   @return Oscillator Returns this oscillator with \n     *   scaled output",
        "*   Multiply the p5.Oscillator's output amplitude by a \n     *   fixed value (i.e. turn it up!). Calling this \n     *   method again will override the initial mult() with \n     *   a new value.\n     *\n     *   @param number Constant number to multiply\n     *   @return Oscillator Returns this oscillator with \n     *   multiplied output",
        "*   Scale this oscillator's amplitude values to a \n     *   given range, and return the oscillator. Calling \n     *   this method again will override the initial \n     *   scale() with new values.\n     *\n     *   @param inMin input range minumum\n     *   @param inMax input range maximum\n     *   @param outMin input range minumum\n     *   @param outMax input range maximum\n     *   @return Oscillator Returns this oscillator with \n     *   scaled output",
        "*   Constructor: new p5.SinOsc(). This creates a Sine \n     *   Wave Oscillator and is equivalent to  new \n     *   p5.Oscillator('sine')  or creating a p5.Oscillator \n     *   and then calling its method setType('sine'). See \n     *   p5.Oscillator for methods.\n     *\n     *   @param [freq] Set the frequency",
        "*   Constructor: new p5.TriOsc(). This creates a \n     *   Triangle Wave Oscillator and is equivalent to new \n     *   p5.Oscillator('triangle')  or creating a \n     *   p5.Oscillator and then calling its method \n     *   setType('triangle'). See p5.Oscillator for \n     *   methods.\n     *\n     *   @param [freq] Set the frequency",
        "*   Constructor: new p5.SawOsc(). This creates a \n     *   SawTooth Wave Oscillator and is equivalent to  new \n     *   p5.Oscillator('sawtooth')  or creating a \n     *   p5.Oscillator and then calling its method \n     *   setType('sawtooth'). See p5.Oscillator for \n     *   methods.\n     *\n     *   @param [freq] Set the frequency",
        "*   Constructor: new p5.SqrOsc(). This creates a \n     *   Square Wave Oscillator and is equivalent to  new \n     *   p5.Oscillator('square')  or creating a \n     *   p5.Oscillator and then calling its method \n     *   setType('square'). See p5.Oscillator for methods.\n     *\n     *   @param [freq] Set the frequency",
        "*   Envelopes are pre-defined amplitude distribution \n     *   over time. Typically, envelopes are used to \n     *   control the output volume of an object, a series \n     *   of fades referred to as Attack, Decay, Sustain and \n     *   Release ( ADSR ). Envelopes can also control other \n     *   Web Audio Parameters—for example, a p5.Env can \n     *   control an Oscillator's frequency like this: \n     *   osc.freq(env). Use setRange to change the \n     *   attack/release level. Use setADSR to change \n     *   attackTime, decayTime, sustainPercent and \n     *   releaseTime. \n     * \n     *   Use the play method to play the entire envelope, \n     *   the ramp method for a pingable trigger, or \n     *   triggerAttack/ triggerRelease to trigger \n     *   noteOn/noteOff.\n     *",
        "*   Time until envelope reaches attackLevel\n     *",
        "*   Level once attack is complete.\n     *",
        "*   Time until envelope reaches decayLevel.\n     *",
        "*   Level after decay. The envelope will sustain here \n     *   until it is released.\n     *",
        "*   Duration of the release portion of the envelope.\n     *",
        "*   Level at the end of the release.\n     *",
        "*   Reset the envelope with a series of time/value \n     *   pairs.\n     *\n     *   @param attackTime Time (in seconds) before level \n     *   reaches attackLevel\n     *   @param attackLevel Typically an amplitude between \n     *   0.0 and 1.0\n     *   @param decayTime Time\n     *   @param decayLevel Amplitude (In a standard ADSR \n     *   envelope, decayLevel = sustainLevel)\n     *   @param releaseTime Release Time (in seconds)\n     *   @param releaseLevel Amplitude",
        "*   Set values like a traditional  ADSR envelope .\n     *\n     *   @param attackTime Time (in seconds before envelope \n     *   reaches Attack Level\n     *   @param [decayTime] Time (in seconds) before \n     *   envelope reaches Decay/Sustain Level\n     *   @param [susRatio] Ratio between attackLevel and \n     *   releaseLevel, on a scale from 0 to 1, where 1.0 = \n     *   attackLevel, 0.0 = releaseLevel. The susRatio \n     *   determines the decayLevel and the level at which \n     *   the sustain portion of the envelope will sustain. \n     *   For example, if attackLevel is 0.4, releaseLevel \n     *   is 0, and susAmt is 0.5, the decayLevel would be \n     *   0.2. If attackLevel is increased to 1.0 (using \n     *   setRange), then decayLevel would increase \n     *   proportionally, to become 0.5.\n     *   @param [releaseTime] Time in seconds from now \n     *   (defaults to 0)",
        "*   Set max (attackLevel) and min (releaseLevel) of \n     *   envelope.\n     *\n     *   @param aLevel attack level (defaults to 1)\n     *   @param rLevel release level (defaults to 0)",
        "*   Assign a parameter to be controlled by this \n     *   envelope. If a p5.Sound object is given, then the \n     *   p5.Env will control its output gain. If multiple \n     *   inputs are provided, the env will control all of \n     *   them.\n     *\n     *   @param [inputs] A p5.sound object or Web Audio \n     *   Param.",
        "*   Set whether the envelope ramp is linear (default) \n     *   or exponential. Exponential ramps can be useful \n     *   because we perceive amplitude and frequency \n     *   logarithmically.\n     *\n     *   @param isExp true is exponential, false is linear",
        "*   Play tells the envelope to start acting on a given \n     *   input. If the input is a p5.sound object (i.e. \n     *   AudioIn, Oscillator, SoundFile), then Env will \n     *   control its output volume. Envelopes can also be \n     *   used to control any  Web Audio Audio Param.\n     *\n     *   @param unit A p5.sound object or Web Audio Param.\n     *   @param [startTime] time from now (in seconds) at \n     *   which to play\n     *   @param [sustainTime] time to sustain before \n     *   releasing the envelope",
        "*   Trigger the Attack, and Decay portion of the \n     *   Envelope. Similar to holding down a key on a \n     *   piano, but it will hold the sustain level until \n     *   you let go. Input can be any p5.sound object, or a  \n     *   Web Audio Param.\n     *\n     *   @param unit p5.sound Object or Web Audio Param\n     *   @param secondsFromNow time from now (in seconds)",
        "*   Trigger the Release of the Envelope. This is \n     *   similar to releasing the key on a piano and \n     *   letting the sound fade according to the release \n     *   level and release time.\n     *\n     *   @param unit p5.sound Object or Web Audio Param\n     *   @param secondsFromNow time to trigger the release",
        "*   Exponentially ramp to a value using the first two \n     *   values from setADSR(attackTime, decayTime) as  \n     *   time constants for simple exponential ramps. If \n     *   the value is higher than current value, it uses \n     *   attackTime, while a decrease uses decayTime.\n     *\n     *   @param unit p5.sound Object or Web Audio Param\n     *   @param secondsFromNow When to trigger the ramp\n     *   @param v Target value\n     *   @param [v2] Second target value (optional)",
        "*   Add a value to the p5.Oscillator's output \n     *   amplitude, and return the oscillator. Calling this \n     *   method again will override the initial add() with \n     *   new values.\n     *\n     *   @param number Constant number to add\n     *   @return Envelope Returns this envelope with scaled \n     *   output",
        "*   Multiply the p5.Env's output amplitude by a fixed \n     *   value. Calling this method again will override the \n     *   initial mult() with new values.\n     *\n     *   @param number Constant number to multiply\n     *   @return Envelope Returns this envelope with scaled \n     *   output",
        "*   Scale this envelope's amplitude values to a given \n     *   range, and return the envelope. Calling this \n     *   method again will override the initial scale() \n     *   with new values.\n     *\n     *   @param inMin input range minumum\n     *   @param inMax input range maximum\n     *   @param outMin input range minumum\n     *   @param outMax input range maximum\n     *   @return Envelope Returns this envelope with scaled \n     *   output",
        "*   Creates a Pulse object, an oscillator that \n     *   implements Pulse Width Modulation. The pulse is \n     *   created with two oscillators. Accepts a parameter \n     *   for frequency, and to set the width between the \n     *   pulses. See  p5.Oscillator for a full list of \n     *   methods.\n     *\n     *   @param [freq] Frequency in oscillations per second \n     *   (Hz)\n     *   @param [w] Width between the pulses (0 to 1.0, \n     *   defaults to 0)",
        "*   Set the width of a Pulse object (an oscillator \n     *   that implements Pulse Width Modulation).\n     *\n     *   @param [width] Width between the pulses (0 to 1.0, \n     *   defaults to 0)",
        "*   Noise is a type of oscillator that generates a \n     *   buffer with random values.\n     *\n     *   @param type Type of noise can be 'white' \n     *   (default), 'brown' or 'pink'.",
        "*   Set type of noise to 'white', 'pink' or 'brown'. \n     *   White is the default.\n     *\n     *   @param [type] 'white', 'pink' or 'brown'",
        "*   Start the noise\n     *",
        "*   Stop the noise.\n     *",
        "*   Pan the noise.\n     *\n     *   @param panning Number between -1 (left) and 1 \n     *   (right)\n     *   @param timeFromNow schedule this event to happen \n     *   seconds from now",
        "*   Set the amplitude of the noise between 0 and 1.0. \n     *   Or, modulate amplitude with an audio signal such \n     *   as an oscillator.\n     *\n     *   @param volume amplitude between 0 and 1.0 or \n     *   modulating signal/oscillator\n     *   @param [rampTime] create a fade that lasts \n     *   rampTime\n     *   @param [timeFromNow] schedule this event to happen \n     *   seconds from now",
        "*   Send output to a p5.sound or web audio object\n     *",
        "*   Disconnect all output.\n     *",
        "*   Get audio from an input, i.e. your computer's \n     *   microphone. Turn the mic on/off with the start() \n     *   and stop() methods. When the mic is on, its volume \n     *   can be measured with getLevel or by connecting an \n     *   FFT object. \n     * \n     *   If you want to hear the AudioIn, use the \n     *   .connect() method. AudioIn does not connect to \n     *   p5.sound output by default to prevent feedback. \n     * \n     *   Note: This uses the getUserMedia/ Stream API, \n     *   which is not supported by certain browsers. Access \n     *   in Chrome browser is limited to localhost and \n     *   https, but access over http may be limited.\n     *\n     *   @param [errorCallback] A function to call if there \n     *   is an error accessing the AudioIn. For example, \n     *   Safari and iOS devices do not currently allow \n     *   microphone access.",
        "*   Client must allow browser to access their \n     *   microphone / audioin source. Default: false. Will \n     *   become true when the client enables acces.\n     *",
        "*   Start processing audio input. This enables the use \n     *   of other AudioIn methods like getLevel(). Note \n     *   that by default, AudioIn is not connected to \n     *   p5.sound's output. So you won't hear anything \n     *   unless you use the connect() method. \n     * \n     *   Certain browsers limit access to the user's \n     *   microphone. For example, Chrome only allows access \n     *   from localhost and over https. For this reason, \n     *   you may want to include an errorCallback—a \n     *   function that is called in case the browser won't \n     *   provide mic access.\n     *\n     *   @param [successCallback] Name of a function to \n     *   call on success.\n     *   @param [errorCallback] Name of a function to call \n     *   if there was an error. For example, some browsers \n     *   do not support getUserMedia.",
        "*   Turn the AudioIn off. If the AudioIn is stopped, \n     *   it cannot getLevel(). If re-starting, the user may \n     *   be prompted for permission access.\n     *",
        "*   Connect to an audio unit. If no parameter is \n     *   provided, will connect to the master output (i.e. \n     *   your speakers).\n     *\n     *   @param [unit] An object that accepts audio input, \n     *   such as an FFT",
        "*   Disconnect the AudioIn from all audio units. For \n     *   example, if connect() had been called, \n     *   disconnect() will stop sending signal to your \n     *   speakers.\n     *",
        "*   Read the Amplitude (volume level) of an AudioIn. \n     *   The AudioIn class contains its own instance of the \n     *   Amplitude class to help make it easy to get a \n     *   microphone's volume level. Accepts an optional \n     *   smoothing value (0.0 < 1.0). NOTE: AudioIn must \n     *   .start() before using .getLevel().\n     *\n     *   @param [smoothing] Smoothing is 0.0 by default. \n     *   Smooths values based on previous values.\n     *   @return Volume level (between 0.0 and 1.0)",
        "*   Set amplitude (volume) of a mic input between 0 \n     *   and 1.0.\n     *\n     *   @param vol between 0 and 1.0\n     *   @param [time] ramp time (optional)",
        "*   Returns a list of available input sources. This is \n     *   a wrapper for <a \n     *   title=\"MediaDevices.enumerateDevices() - Web APIs \n     *   | MDN\" target=\"_blank\" href= \n     *   \"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"  \n     *   and it returns a Promise.\n     *\n     *   @param [successCallback] This callback function \n     *   handles the sources when they have been \n     *   enumerated. The callback function receives the \n     *   deviceList array as its only argument\n     *   @param [errorCallback] This optional callback \n     *   receives the error message as its argument.\n     *   @return Returns a Promise that can be used in \n     *   place of the callbacks, similar to the \n     *   enumerateDevices() method",
        "*   Set the input source. Accepts a number \n     *   representing a position in the array returned by \n     *   getSources(). This is only available in browsers \n     *   that support <a \n     *   title=\"MediaDevices.enumerateDevices() - Web APIs \n     *   | MDN\" target=\"_blank\" href= \n     *   \"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"  \n     *   navigator.mediaDevices.enumerateDevices().\n     *\n     *   @param num position of input source in the array",
        "*   Effect is a base class for audio effects in p5.  \n     *   This module handles the nodes and methods that are \n     *   common and useful for current and future effects. \n     * \n     *   This class is extended by p5.Distortion, \n     *   p5.Compressor, p5.Delay, p5.Filter, p5.Reverb.\n     *\n     *   @param [ac] Reference to the audio context of the \n     *   p5 object\n     *   @param [input] Gain Node effect wrapper\n     *   @param [output] Gain Node effect wrapper\n     *   @param [_drywet] Tone.JS CrossFade node (defaults \n     *   to value: 1)\n     *   @param [wet] Effects that extend this class should \n     *   connect to the wet signal to this gain node, so \n     *   that dry and wet signals are mixed properly.",
        "*   Set the output volume of the filter.\n     *\n     *   @param [vol] amplitude between 0 and 1.0\n     *   @param [rampTime] create a fade that lasts until \n     *   rampTime\n     *   @param [tFromNow] schedule this event to happen in \n     *   tFromNow seconds",
        "*   Link effects together in a chain Example usage: \n     *   filter.chain(reverb, delay, panner); May be used \n     *   with an open-ended number of arguments\n     *\n     *   @param [arguments] Chain together multiple sound \n     *   objects",
        "*   Adjust the dry/wet value.\n     *\n     *   @param [fade] The desired drywet value (0 - 1.0)",
        "*   Send output to a p5.js-sound, Web Audio Node, or \n     *   use signal to control an AudioParam\n     *",
        "*   Disconnect all output.\n     *",
        "*   A p5.Filter uses a Web Audio Biquad Filter to \n     *   filter the frequency response of an input source. \n     *   Subclasses include: \n     * \n     *   - p5.LowPass: Allows frequencies below the cutoff \n     *   frequency to pass through, and attenuates \n     *   frequencies above the cutoff.\n     *   - p5.HighPass: The opposite of a lowpass filter. \n     *   - p5.BandPass: Allows a range of frequencies to \n     *   pass through and attenuates the frequencies below \n     *   and above this frequency range. \n     * \n     *   The .res() method controls either width of the \n     *   bandpass, or resonance of the low/highpass cutoff \n     *   frequency. \n     * \n     *   This class extends p5.Effect. Methods amp(), \n     *   chain(), drywet(), connect(), and disconnect() are \n     *   available.\n     *\n     *   @param [type] 'lowpass' (default), 'highpass', \n     *   'bandpass'",
        "*   The p5.Filter is built with a  Web Audio \n     *   BiquadFilter Node.\n     *",
        "*   Filter an audio signal according to a set of \n     *   filter parameters.\n     *\n     *   @param Signal An object that outputs audio\n     *   @param [freq] Frequency in Hz, from 10 to 22050\n     *   @param [res] Resonance/Width of the filter \n     *   frequency from 0.001 to 1000",
        "*   Set the frequency and the resonance of the filter.\n     *\n     *   @param [freq] Frequency in Hz, from 10 to 22050\n     *   @param [res] Resonance (Q) from 0.001 to 1000\n     *   @param [timeFromNow] schedule this event to happen \n     *   seconds from now",
        "*   Set the filter frequency, in Hz, from 10 to 22050 \n     *   (the range of human hearing, although in reality \n     *   most people hear in a narrower range).\n     *\n     *   @param freq Filter Frequency\n     *   @param [timeFromNow] schedule this event to happen \n     *   seconds from now\n     *   @return value Returns the current frequency value",
        "*   Controls either width of a bandpass frequency, or \n     *   the resonance of a low/highpass cutoff frequency.\n     *\n     *   @param res Resonance/Width of filter freq from \n     *   0.001 to 1000\n     *   @param [timeFromNow] schedule this event to happen \n     *   seconds from now\n     *   @return value Returns the current res value",
        "*   Controls the gain attribute of a Biquad Filter. \n     *   This is distinctly different from .amp() which is \n     *   inherited from p5.Effect .amp() controls the \n     *   volume via the output gain node p5.Filter.gain() \n     *   controls the gain parameter of a Biquad Filter \n     *   node.\n     *\n     *   @return Returns the current or updated gain value",
        "*   Toggle function. Switches between the specified \n     *   type and allpass\n     *\n     *   @return [Toggle value]",
        "*   Set the type of a p5.Filter. Possible types \n     *   include: \"lowpass\" (default), \"highpass\", \n     *   \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \n     *   \"notch\", \"allpass\".\n     *",
        "*   Constructor: new p5.LowPass() Filter. This is the \n     *   same as creating a p5.Filter and then calling its \n     *   method setType('lowpass'). See p5.Filter for \n     *   methods.\n     *",
        "*   Constructor: new p5.HighPass() Filter. This is the \n     *   same as creating a p5.Filter and then calling its \n     *   method setType('highpass'). See p5.Filter for \n     *   methods.\n     *",
        "*   Constructor: new p5.BandPass() Filter. This is the \n     *   same as creating a p5.Filter and then calling its \n     *   method setType('bandpass'). See p5.Filter for \n     *   methods.\n     *",
        "*   p5.EQ is an audio effect that performs the \n     *   function of a multiband audio equalizer. \n     *   Equalization is used to adjust the balance of \n     *   frequency compoenents of an audio signal. This \n     *   process is commonly used in sound production and \n     *   recording to change the waveform before it reaches \n     *   a sound output device. EQ can also be used as an \n     *   audio effect to create interesting distortions by \n     *   filtering out parts of the spectrum. p5.EQ is \n     *   built using a chain of Web Audio Biquad Filter \n     *   Nodes and can be instantiated with 3 or 8 bands. \n     *   Bands can be added or removed from the EQ by \n     *   directly modifying p5.EQ.bands (the array that \n     *   stores filters). This class extends p5.Effect. \n     *   Methods amp(), chain(), drywet(), connect(), and \n     *   disconnect() are available.\n     *\n     *   @param [_eqsize] Constructor will accept 3 or 8, \n     *   defaults to 3\n     *   @return p5.EQ object",
        "*   The p5.EQ is built with abstracted p5.Filter \n     *   objects. To modify any bands, use methods of the  \n     *   p5.Filter API, especially gain and freq. Bands are \n     *   stored in an array, with indices 0 - 3, or 0 - 7\n     *",
        "*   Process an input by connecting it to the EQ\n     *\n     *   @param src Audio source",
        "*   Panner3D is based on the  Web Audio Spatial Panner \n     *   Node. This panner is a spatial processing node \n     *   that allows audio to be positioned and oriented in \n     *   3D space. The position is relative to an  Audio \n     *   Context Listener, which can be accessed by \n     *   p5.soundOut.audiocontext.listener\n     *",
        "*   Web Audio Spatial Panner Node Properties include \n     * \n     *   - <a title=\"w3 spec for Panning Model\" \n     *   href=\"https://www.w3.org/TR/webaudio/#idl-def-PanningModelType\" \n     *   panningModel: \"equal power\" or \"HRTF\" \n     *   - <a title=\"w3 spec for Distance Model\" \n     *   href=\"https://www.w3.org/TR/webaudio/#idl-def-DistanceModelType\" \n     *   distanceModel: \"linear\", \"inverse\", or \n     *   \"exponential\"\n     *",
        "*   Connect an audio sorce\n     *\n     *   @param src Input source",
        "*   Set the X,Y,Z position of the Panner\n     *\n     *   @return Updated x, y, z values as an array",
        "*   Getter and setter methods for position coordinates\n     *\n     *   @return updated coordinate value",
        "*   Getter and setter methods for position coordinates\n     *\n     *   @return updated coordinate value",
        "*   Getter and setter methods for position coordinates\n     *\n     *   @return updated coordinate value",
        "*   Set the X,Y,Z position of the Panner\n     *\n     *   @return Updated x, y, z values as an array",
        "*   Getter and setter methods for orient coordinates\n     *\n     *   @return updated coordinate value",
        "*   Getter and setter methods for orient coordinates\n     *\n     *   @return updated coordinate value",
        "*   Getter and setter methods for orient coordinates\n     *\n     *   @return updated coordinate value",
        "*   Set the rolloff factor and max distance\n     *",
        "*   Maxium distance between the source and the \n     *   listener\n     *\n     *   @return updated value",
        "*   How quickly the volume is reduced as the source \n     *   moves away from the listener\n     *\n     *   @return updated value",
        "*   Delay is an echo effect. It processes an existing \n     *   sound source, and outputs a delayed version of \n     *   that sound. The p5.Delay can produce different \n     *   effects depending on the delayTime, feedback, \n     *   filter, and type. In the example below, a feedback \n     *   of 0.5 (the defaul value) will produce a looping \n     *   delay that decreases in volume by 50% each repeat. \n     *   A filter will cut out the high frequencies so that \n     *   the delay does not sound as piercing as the \n     *   original source. \n     * \n     *   This class extends p5.Effect. Methods amp(), \n     *   chain(), drywet(), connect(), and disconnect() are \n     *   available.\n     *",
        "*   The p5.Delay is built with two  Web Audio Delay \n     *   Nodes, one for each stereo channel.\n     *",
        "*   The p5.Delay is built with two  Web Audio Delay \n     *   Nodes, one for each stereo channel.\n     *",
        "*   Add delay to an audio signal according to a set of \n     *   delay parameters.\n     *\n     *   @param Signal An object that outputs audio\n     *   @param [delayTime] Time (in seconds) of the \n     *   delay/echo. Some browsers limit delayTime to 1 \n     *   second.\n     *   @param [feedback] sends the delay back through \n     *   itself in a loop that decreases in volume each \n     *   time.\n     *   @param [lowPass] Cutoff frequency. Only \n     *   frequencies below the lowPass will be part of the \n     *   delay.",
        "*   Set the delay (echo) time, in seconds. Usually \n     *   this value will be a floating point number between \n     *   0.0 and 1.0.\n     *\n     *   @param delayTime Time (in seconds) of the delay",
        "*   Feedback occurs when Delay sends its signal back \n     *   through its input in a loop. The feedback amount \n     *   determines how much signal to send each time \n     *   through the loop. A feedback greater than 1.0 is \n     *   not desirable because it will increase the overall \n     *   output each time through the loop, creating an \n     *   infinite feedback loop. The default value is 0.5\n     *\n     *   @param feedback 0.0 to 1.0, or an object such as \n     *   an Oscillator that can be used to modulate this \n     *   param\n     *   @return Feedback value",
        "*   Set a lowpass filter frequency for the delay. A \n     *   lowpass filter will cut off any frequencies higher \n     *   than the filter frequency.\n     *\n     *   @param cutoffFreq A lowpass filter will cut off \n     *   any frequencies higher than the filter frequency.\n     *   @param res Resonance of the filter frequency \n     *   cutoff, or an object (i.e. a p5.Oscillator) that \n     *   can be used to modulate this parameter. High \n     *   numbers (i.e. 15) will produce a resonance, low \n     *   numbers (i.e. .2) will produce a slope.",
        "*   Choose a preset type of delay. 'pingPong' bounces \n     *   the signal from the left to the right channel to \n     *   produce a stereo effect. Any other parameter will \n     *   revert to the default delay setting.\n     *\n     *   @param type 'pingPong' (1) or 'default' (0)",
        "*   Set the output level of the delay effect.\n     *\n     *   @param volume amplitude between 0 and 1.0\n     *   @param [rampTime] create a fade that lasts \n     *   rampTime\n     *   @param [timeFromNow] schedule this event to happen \n     *   seconds from now",
        "*   Send output to a p5.sound or web audio object\n     *",
        "*   Disconnect all output.\n     *",
        "*   Reverb adds depth to a sound through a large \n     *   number of decaying echoes. It creates the \n     *   perception that sound is occurring in a physical \n     *   space. The p5.Reverb has paramters for Time (how \n     *   long does the reverb last) and decayRate (how much \n     *   the sound decays with each echo) that can be set \n     *   with the .set() or .process() methods. The \n     *   p5.Convolver extends p5.Reverb allowing you to \n     *   recreate the sound of actual physical spaces \n     *   through convolution. This class extends p5.Effect. \n     *   Methods amp(), chain(), drywet(), connect(), and \n     *   disconnect() are available.\n     *",
        "*   Connect a source to the reverb, and assign reverb \n     *   parameters.\n     *\n     *   @param src p5.sound / Web Audio object with a \n     *   sound output.\n     *   @param [seconds] Duration of the reverb, in \n     *   seconds. Min: 0, Max: 10. Defaults to 3.\n     *   @param [decayRate] Percentage of decay with each \n     *   echo. Min: 0, Max: 100. Defaults to 2.\n     *   @param [reverse] Play the reverb backwards or \n     *   forwards.",
        "*   Set the reverb settings. Similar to .process(), \n     *   but without assigning a new input.\n     *\n     *   @param [seconds] Duration of the reverb, in \n     *   seconds. Min: 0, Max: 10. Defaults to 3.\n     *   @param [decayRate] Percentage of decay with each \n     *   echo. Min: 0, Max: 100. Defaults to 2.\n     *   @param [reverse] Play the reverb backwards or \n     *   forwards.",
        "*   Set the output level of the reverb effect.\n     *\n     *   @param volume amplitude between 0 and 1.0\n     *   @param [rampTime] create a fade that lasts \n     *   rampTime\n     *   @param [timeFromNow] schedule this event to happen \n     *   seconds from now",
        "*   Send output to a p5.sound or web audio object\n     *",
        "*   Disconnect all output.\n     *",
        "*   p5.Convolver extends p5.Reverb. It can emulate the \n     *   sound of real physical spaces through a process \n     *   called  convolution. Convolution multiplies any \n     *   audio input by an \"impulse response\" to simulate \n     *   the dispersion of sound over time. The impulse \n     *   response is generated from an audio file that you \n     *   provide. One way to generate an impulse response \n     *   is to pop a balloon in a reverberant space and \n     *   record the echo. Convolution can also be used to \n     *   experiment with sound. \n     * \n     *   Use the method createConvolution(path) to \n     *   instantiate a p5.Convolver with a path to your \n     *   impulse response audio file.\n     *\n     *   @param path path to a sound file\n     *   @param [callback] function to call when loading \n     *   succeeds\n     *   @param [errorCallback] function to call if loading \n     *   fails. This function will receive an error or \n     *   XMLHttpRequest object with information about what \n     *   went wrong.",
        "*   Internally, the p5.Convolver uses the a  Web Audio \n     *   Convolver Node.\n     *",
        "*   Create a p5.Convolver. Accepts a path to a \n     *   soundfile that will be used to generate an impulse \n     *   response.\n     *\n     *   @param path path to a sound file\n     *   @param [callback] function to call if loading is \n     *   successful. The object will be passed in as the \n     *   argument to the callback function.\n     *   @param [errorCallback] function to call if loading \n     *   is not successful. A custom error will be passed \n     *   in as the argument to the callback function.",
        "*   Connect a source to the reverb, and assign reverb \n     *   parameters.\n     *\n     *   @param src p5.sound / Web Audio object with a \n     *   sound output.",
        "*   If you load multiple impulse files using the \n     *   .addImpulse method, they will be stored as Objects \n     *   in this Array. Toggle between them with the \n     *   toggleImpulse(id) method.\n     *",
        "*   Load and assign a new Impulse Response to the \n     *   p5.Convolver. The impulse is added to the \n     *   .impulses array. Previous impulses can be accessed \n     *   with the .toggleImpulse(id) method.\n     *\n     *   @param path path to a sound file\n     *   @param callback function (optional)\n     *   @param errorCallback function (optional)",
        "*   Similar to .addImpulse, except that the .impulses \n     *   Array is reset to save memory. A new .impulses \n     *   array is created with this impulse as the only \n     *   item.\n     *\n     *   @param path path to a sound file\n     *   @param callback function (optional)\n     *   @param errorCallback function (optional)",
        "*   If you have used .addImpulse() to add multiple \n     *   impulses to a p5.Convolver, then you can use this \n     *   method to toggle between the items in the \n     *   .impulses Array. Accepts a parameter to identify \n     *   which impulse you wish to use, identified either \n     *   by its original filename (String) or by its \n     *   position in the .impulses  Array (Number). You can \n     *   access the objects in the .impulses Array \n     *   directly. Each Object has two attributes: an \n     *   .audioBuffer (type: Web Audio  AudioBuffer) and a \n     *   .name, a String that corresponds with the original \n     *   filename.\n     *\n     *   @param id Identify the impulse by its original \n     *   filename (String), or by its position in the \n     *   .impulses Array (Number).",
        "*   Set the global tempo, in beats per minute, for all \n     *   p5.Parts. This method will impact all active \n     *   p5.Parts.\n     *\n     *   @param BPM Beats Per Minute\n     *   @param rampTime Seconds from now",
        "*   A phrase is a pattern of musical events over time, \n     *   i.e. a series of notes and rests. Phrases must be \n     *   added to a p5.Part for playback, and each part can \n     *   play multiple phrases at the same time. For \n     *   example, one Phrase might be a kick drum, another \n     *   could be a snare, and another could be the \n     *   bassline. \n     * \n     *   The first parameter is a name so that the phrase \n     *   can be modified or deleted later. The callback is \n     *   a a function that this phrase will call at every \n     *   step—for example it might be called \n     *   playNote(value){}. The array determines which \n     *   value is passed into the callback at each step of \n     *   the phrase. It can be numbers, an object with \n     *   multiple numbers, or a zero (0) indicates a rest \n     *   so the callback won't be called).\n     *\n     *   @param name Name so that you can access the \n     *   Phrase.\n     *   @param callback The name of a function that this \n     *   phrase will call. Typically it will play a sound, \n     *   and accept two parameters: a time at which to play \n     *   the sound (in seconds from now), and a value from \n     *   the sequence array. The time should be passed into \n     *   the play() or start() method to ensure precision.\n     *   @param sequence Array of values to pass into the \n     *   callback at each step of the phrase.",
        "*   Array of values to pass into the callback at each \n     *   step of the phrase. Depending on the callback \n     *   function's requirements, these values may be \n     *   numbers, strings, or an object with multiple \n     *   parameters. Zero (0) indicates a rest.\n     *",
        "*   A p5.Part plays back one or more p5.Phrases. \n     *   Instantiate a part with steps and tatums. By \n     *   default, each step represents 1/16th note. See \n     *   p5.Phrase for more about musical timing.\n     *\n     *   @param [steps] Steps in the part\n     *   @param [tatums] Divisions of a beat (default is \n     *   1/16, a quarter note)",
        "*   Set the tempo of this part, in Beats Per Minute.\n     *\n     *   @param BPM Beats Per Minute\n     *   @param [rampTime] Seconds from now",
        "*   Returns the Beats Per Minute of this currently \n     *   part.\n     *",
        "*   Start playback of this part. It will play through \n     *   all of its phrases at a speed determined by \n     *   setBPM.\n     *\n     *   @param [time] seconds from now",
        "*   Loop playback of this part. It will begin looping \n     *   through all of its phrases at a speed determined \n     *   by setBPM.\n     *\n     *   @param [time] seconds from now",
        "*   Tell the part to stop looping.\n     *",
        "*   Stop the part and cue it to step 0.\n     *\n     *   @param [time] seconds from now",
        "*   Pause the part. Playback will resume from the \n     *   current step.\n     *\n     *   @param time seconds from now",
        "*   Add a p5.Phrase to this Part.\n     *\n     *   @param phrase reference to a p5.Phrase",
        "*   Remove a phrase from this part, based on the name \n     *   it was given when it was created.\n     *",
        "*   Get a phrase from this part, based on the name it \n     *   was given when it was created. Now you can modify \n     *   its array.\n     *",
        "*   Get a phrase from this part, based on the name it \n     *   was given when it was created. Now you can modify \n     *   its array.\n     *\n     *   @param sequence Array of values to pass into the \n     *   callback at each step of the phrase.",
        "*   Fire a callback function at every step.\n     *\n     *   @param callback The name of the callback you want \n     *   to fire on every beat/tatum.",
        "*   A Score consists of a series of Parts. The parts \n     *   will be played back in order. For example, you \n     *   could have an A part, a B part, and a C part, and \n     *   play them back in this order new p5.Score(a, a, b, \n     *   a, c)\n     *\n     *   @param [parts] One or multiple parts, to be played \n     *   in sequence.",
        "*   Start playback of the score.\n     *",
        "*   Stop playback of the score.\n     *",
        "*   Pause playback of the score.\n     *",
        "*   Loop playback of the score.\n     *",
        "*   Stop looping playback of the score. If it is \n     *   currently playing, this will go into effect after \n     *   the current round of playback completes.\n     *",
        "*   Set the tempo for all parts in the score\n     *\n     *   @param BPM Beats Per Minute\n     *   @param rampTime Seconds from now",
        "*   SoundLoop\n     *\n     *   @param callback this function will be called on \n     *   each iteration of theloop\n     *   @param [interval] amount of time or beats for each \n     *   iteration of the loop defaults to 1",
        "*   musicalTimeMode uses Tone.Time convention true if \n     *   string, false if number\n     *",
        "*   Set a limit to the number of loops to play. \n     *   defaults to Infinity\n     *",
        "*   Start the loop\n     *\n     *   @param [timeFromNow] schedule a starting time",
        "*   Stop the loop\n     *\n     *   @param [timeFromNow] schedule a stopping time",
        "*   Pause the loop\n     *\n     *   @param [timeFromNow] schedule a pausing time",
        "*   Synchronize loops. Use this method to start two \n     *   more more loops in synchronization or to start a \n     *   loop in synchronization with a loop that is \n     *   already playing This method will schedule the \n     *   implicit loop in sync with the explicit master \n     *   loop i.e. loopToStart.syncedStart(loopToSyncWith)\n     *\n     *   @param otherLoop a p5.SoundLoop to sync with\n     *   @param [timeFromNow] Start the loops in sync after \n     *   timeFromNow seconds",
        "*   Getters and Setters, setting any paramter will \n     *   result in a change in the clock's frequency, that \n     *   will be reflected after the next callback beats \n     *   per minute (defaults to 60)\n     *",
        "*   number of quarter notes in a measure (defaults to \n     *   4)\n     *",
        "*   length of the loops interval\n     *",
        "*   how many times the callback has been called so far\n     *",
        "*   Compressor is an audio effect class that performs \n     *   dynamics compression on an audio input source. \n     *   This is a very commonly used technique in music \n     *   and sound production. Compression creates an \n     *   overall louder, richer, and fuller sound by \n     *   lowering the volume of louds and raising that of \n     *   softs. Compression can be used to avoid clipping \n     *   (sound distortion due to peaks in volume) and is \n     *   especially useful when many sounds are played at \n     *   once. Compression can be used on indivudal sound \n     *   sources in addition to the master output. This \n     *   class extends p5.Effect. Methods amp(), chain(), \n     *   drywet(), connect(), and disconnect() are \n     *   available.\n     *",
        "*   The p5.Compressor is built with a Web Audio \n     *   Dynamics Compressor Node\n     *",
        "*   Performs the same function as .connect, but also \n     *   accepts optional parameters to set compressor's \n     *   audioParams\n     *\n     *   @param src Sound source to be connected\n     *   @param [attack] The amount of time (in seconds) to \n     *   reduce the gain by 10dB, default = .003, range 0 - \n     *   1\n     *   @param [knee] A decibel value representing the \n     *   range above the threshold where the curve smoothly \n     *   transitions to the \"ratio\" portion. default = 30, \n     *   range 0 - 40\n     *   @param [ratio] The amount of dB change in input \n     *   for a 1 dB change in output default = 12, range 1 \n     *   - 20\n     *   @param [threshold] The decibel value above which \n     *   the compression will start taking effect default = \n     *   -24, range -100 - 0\n     *   @param [release] The amount of time (in seconds) \n     *   to increase the gain by 10dB default = .25, range \n     *   0 - 1",
        "*   Set the paramters of a compressor.\n     *\n     *   @param attack The amount of time (in seconds) to \n     *   reduce the gain by 10dB, default = .003, range 0 - \n     *   1\n     *   @param knee A decibel value representing the range \n     *   above the threshold where the curve smoothly \n     *   transitions to the \"ratio\" portion. default = 30, \n     *   range 0 - 40\n     *   @param ratio The amount of dB change in input for \n     *   a 1 dB change in output default = 12, range 1 - 20\n     *   @param threshold The decibel value above which the \n     *   compression will start taking effect default = \n     *   -24, range -100 - 0\n     *   @param release The amount of time (in seconds) to \n     *   increase the gain by 10dB default = .25, range 0 - \n     *   1",
        "*   Get current attack or set value w/ time ramp\n     *\n     *   @param [attack] Attack is the amount of time (in \n     *   seconds) to reduce the gain by 10dB, default = \n     *   .003, range 0 - 1\n     *   @param [time] Assign time value to schedule the \n     *   change in value",
        "*   Get current knee or set value w/ time ramp\n     *\n     *   @param [knee] A decibel value representing the \n     *   range above the threshold where the curve smoothly \n     *   transitions to the \"ratio\" portion. default = 30, \n     *   range 0 - 40\n     *   @param [time] Assign time value to schedule the \n     *   change in value",
        "*   Get current ratio or set value w/ time ramp\n     *\n     *   @param [ratio] The amount of dB change in input \n     *   for a 1 dB change in output default = 12, range 1 \n     *   - 20\n     *   @param [time] Assign time value to schedule the \n     *   change in value",
        "*   Get current threshold or set value w/ time ramp\n     *\n     *   @param threshold The decibel value above which the \n     *   compression will start taking effect default = \n     *   -24, range -100 - 0\n     *   @param [time] Assign time value to schedule the \n     *   change in value",
        "*   Get current release or set value w/ time ramp\n     *\n     *   @param release The amount of time (in seconds) to \n     *   increase the gain by 10dB default = .25, range 0 - \n     *   1\n     *   @param [time] Assign time value to schedule the \n     *   change in value",
        "*   Return the current reduction value\n     *\n     *   @return Value of the amount of gain reduction that \n     *   is applied to the signal",
        "*   Record sounds for playback and/or to save as a \n     *   .wav file. The p5.SoundRecorder records all sound \n     *   output from your sketch, or can be assigned a \n     *   specific source with setInput(). The record() \n     *   method accepts a p5.SoundFile as a parameter. When \n     *   playback is stopped (either after the given amount \n     *   of time, or with the stop() method), the \n     *   p5.SoundRecorder will send its recording to that \n     *   p5.SoundFile for playback.\n     *",
        "*   Connect a specific device to the p5.SoundRecorder. \n     *   If no parameter is given, p5.SoundRecorer will \n     *   record all audible p5.sound from your sketch.\n     *\n     *   @param [unit] p5.sound object or a web audio unit \n     *   that outputs sound",
        "*   Start recording. To access the recording, provide \n     *   a p5.SoundFile as the first parameter. The \n     *   p5.SoundRecorder will send its recording to that \n     *   p5.SoundFile for playback once recording is \n     *   complete. Optional parameters include duration (in \n     *   seconds) of the recording, and a callback function \n     *   that will be called once the complete recording \n     *   has been transfered to the p5.SoundFile.\n     *\n     *   @param soundFile p5.SoundFile\n     *   @param [duration] Time (in seconds)\n     *   @param [callback] The name of a function that will \n     *   be called once the recording completes",
        "*   Stop the recording. Once the recording is stopped, \n     *   the results will be sent to the p5.SoundFile that \n     *   was given on .record(), and if a callback function \n     *   was provided on record, that function will be \n     *   called.\n     *",
        "*   Save a p5.SoundFile as a .wav audio file.\n     *\n     *   @param soundFile p5.SoundFile that you wish to \n     *   save\n     *   @param name name of the resulting .wav file.",
        "*   PeakDetect works in conjunction with p5.FFT to \n     *   look for onsets in some or all of the frequency \n     *   spectrum.   To use p5.PeakDetect, call update in \n     *   the draw loop and pass in a p5.FFT object.  \n     * \n     *  \n     *   You can listen for a specific part of the \n     *   frequency spectrum by setting the range between \n     *   freq1 and freq2.  \n     * \n     *   threshold is the threshold for detecting a peak, \n     *   scaled between 0 and 1. It is logarithmic, so 0.1 \n     *   is half as loud as 1.0. \n     * \n     *  \n     *   The update method is meant to be run in the draw \n     *   loop, and frames determines how many loops must \n     *   pass before another peak can be detected. For \n     *   example, if the frameRate() = 60, you could detect \n     *   the beat of a 120 beat-per-minute song with this \n     *   equation:  framesPerPeak = 60 / (estimatedBPM / 60 \n     *   );  \n     * \n     *  \n     *   Based on example contribtued by @b2renger, and a \n     *   simple beat detection explanation by a \n     *   href=\"http://www.airtightinteractive.com/2013/10/making-audio-reactive-visuals/\" \n     *   target=\"_blank\"Felix Turner.\n     *\n     *   @param [freq1] lowFrequency - defaults to 20Hz\n     *   @param [freq2] highFrequency - defaults to 20000 \n     *   Hz\n     *   @param [threshold] Threshold for detecting a beat \n     *   between 0 and 1 scaled logarithmically where 0.1 \n     *   is 1/2 the loudness of 1.0. Defaults to 0.35.\n     *   @param [framesPerPeak] Defaults to 20.",
        "*   The update method is run in the draw loop. Accepts \n     *   an FFT object. You must call .analyze() on the FFT \n     *   object prior to updating the peakDetect because it \n     *   relies on a completed FFT analysis.\n     *\n     *   @param fftObject A p5.FFT object",
        "*   onPeak accepts two arguments: a function to call \n     *   when a peak is detected. The value of the peak, \n     *   between 0.0 and 1.0, is passed to the callback.\n     *\n     *   @param callback Name of a function that will be \n     *   called when a peak is detected.\n     *   @param [val] Optional value to pass into the \n     *   function when a peak is detected.",
        "*   A gain node is usefull to set the relative volume \n     *   of sound. It's typically used to build mixers.\n     *",
        "*   Connect a source to the gain node.\n     *\n     *   @param src p5.sound / Web Audio object with a \n     *   sound output.",
        "*   Send output to a p5.sound or web audio object\n     *",
        "*   Disconnect all output.\n     *",
        "*   Set the output level of the gain node.\n     *\n     *   @param volume amplitude between 0 and 1.0\n     *   @param [rampTime] create a fade that lasts \n     *   rampTime\n     *   @param [timeFromNow] schedule this event to happen \n     *   seconds from now",
        "*   Base class for monophonic synthesizers. Any \n     *   extensions of this class should follow the API and \n     *   implement the methods below in order to remain \n     *   compatible with p5.PolySynth();\n     *",
        "*   Connect to p5 objects or Web Audio Nodes\n     *",
        "*   Disconnect from soundOut\n     *",
        "*   An MonoSynth is used as a single voice for sound \n     *   synthesis. This is a class to be used in \n     *   conjonction with the PolySynth class. Custom \n     *   synthetisers should be built inheriting from this \n     *   class.\n     *",
        "*   Play tells the MonoSynth to start playing a note. \n     *   This method schedules the calling of \n     *   .triggerAttack and .triggerRelease.\n     *\n     *   @param note the note you want to play, specified \n     *   as a frequency in Hertz (Number) or as a midi \n     *   value in Note/Octave format (\"C4\", \"Eb3\"...etc\") \n     *   See  Tone. Defaults to 440 hz.\n     *   @param [velocity] velocity of the note to play \n     *   (ranging from 0 to 1)\n     *   @param [secondsFromNow] time from now (in seconds) \n     *   at which to play\n     *   @param [sustainTime] time to sustain before \n     *   releasing the envelope",
        "*   Trigger the Attack, and Decay portion of the \n     *   Envelope. Similar to holding down a key on a \n     *   piano, but it will hold the sustain level until \n     *   you let go.\n     *\n     *   @param note the note you want to play, specified \n     *   as a frequency in Hertz (Number) or as a midi \n     *   value in Note/Octave format (\"C4\", \"Eb3\"...etc\") \n     *   See  Tone. Defaults to 440 hz\n     *   @param [velocity] velocity of the note to play \n     *   (ranging from 0 to 1)\n     *   @param [secondsFromNow] time from now (in seconds) \n     *   at which to play",
        "*   Trigger the release of the Envelope. This is \n     *   similar to releasing the key on a piano and \n     *   letting the sound fade according to the release \n     *   level and release time.\n     *\n     *   @param secondsFromNow time to trigger the release",
        "*   Set values like a traditional  ADSR envelope .\n     *\n     *   @param attackTime Time (in seconds before envelope \n     *   reaches Attack Level\n     *   @param [decayTime] Time (in seconds) before \n     *   envelope reaches Decay/Sustain Level\n     *   @param [susRatio] Ratio between attackLevel and \n     *   releaseLevel, on a scale from 0 to 1, where 1.0 = \n     *   attackLevel, 0.0 = releaseLevel. The susRatio \n     *   determines the decayLevel and the level at which \n     *   the sustain portion of the envelope will sustain. \n     *   For example, if attackLevel is 0.4, releaseLevel \n     *   is 0, and susAmt is 0.5, the decayLevel would be \n     *   0.2. If attackLevel is increased to 1.0 (using \n     *   setRange), then decayLevel would increase \n     *   proportionally, to become 0.5.\n     *   @param [releaseTime] Time in seconds from now \n     *   (defaults to 0)",
        "*   Getters and Setters\n     *",
        "*   MonoSynth amp\n     *\n     *   @param vol desired volume\n     *   @param [rampTime] Time to reach new volume\n     *   @return new volume value",
        "*   Connect to a p5.sound / Web Audio object.\n     *\n     *   @param unit A p5.sound or Web Audio object",
        "*   Disconnect all outputs\n     *",
        "*   Get rid of the MonoSynth and free up its resources \n     *   / memory.\n     *",
        "*   An AudioVoice is used as a single voice for sound \n     *   synthesis. The PolySynth class holds an array of \n     *   AudioVoice, and deals with voices allocations, \n     *   with setting notes to be played, and parameters to \n     *   be set.\n     *\n     *   @param [synthVoice] A monophonic synth voice \n     *   inheriting the AudioVoice class. Defaults to \n     *   p5.MonoSynth\n     *   @param [polyValue] Number of voices, defaults to \n     *   8;",
        "*   An object that holds information about which notes \n     *   have been played and which notes are currently \n     *   being played. New notes are added as keys on the \n     *   fly. While a note has been attacked, but not \n     *   released, the value of the key is the audiovoice \n     *   which is generating that note. When notes are \n     *   released, the value of the key becomes undefined.\n     *",
        "*   A PolySynth must have at least 1 voice, defaults \n     *   to 8\n     *",
        "*   Monosynth that generates the sound for each note \n     *   that is triggered. The p5.PolySynth defaults to \n     *   using the p5.MonoSynth as its voice.\n     *",
        "*   Play a note by triggering noteAttack and \n     *   noteRelease with sustain time\n     *\n     *   @param [note] midi note to play (ranging from 0 to \n     *   127 - 60 being a middle C)\n     *   @param [velocity] velocity of the note to play \n     *   (ranging from 0 to 1)\n     *   @param [secondsFromNow] time from now (in seconds) \n     *   at which to play\n     *   @param [sustainTime] time to sustain before \n     *   releasing the envelope",
        "*   noteADSR sets the envelope for a specific note \n     *   that has just been triggered. Using this method \n     *   modifies the envelope of whichever audiovoice is \n     *   being used to play the desired note. The envelope \n     *   should be reset before noteRelease is called in \n     *   order to prevent the modified envelope from being \n     *   used on other notes.\n     *\n     *   @param [note] Midi note on which ADSR should be \n     *   set.\n     *   @param [attackTime] Time (in seconds before \n     *   envelope reaches Attack Level\n     *   @param [decayTime] Time (in seconds) before \n     *   envelope reaches Decay/Sustain Level\n     *   @param [susRatio] Ratio between attackLevel and \n     *   releaseLevel, on a scale from 0 to 1, where 1.0 = \n     *   attackLevel, 0.0 = releaseLevel. The susRatio \n     *   determines the decayLevel and the level at which \n     *   the sustain portion of the envelope will sustain. \n     *   For example, if attackLevel is 0.4, releaseLevel \n     *   is 0, and susAmt is 0.5, the decayLevel would be \n     *   0.2. If attackLevel is increased to 1.0 (using \n     *   setRange), then decayLevel would increase \n     *   proportionally, to become 0.5.\n     *   @param [releaseTime] Time in seconds from now \n     *   (defaults to 0)",
        "*   Set the PolySynths global envelope. This method \n     *   modifies the envelopes of each monosynth so that \n     *   all notes are played with this envelope.\n     *\n     *   @param [note] Midi note on which ADSR should be \n     *   set.\n     *   @param [attackTime] Time (in seconds before \n     *   envelope reaches Attack Level\n     *   @param [decayTime] Time (in seconds) before \n     *   envelope reaches Decay/Sustain Level\n     *   @param [susRatio] Ratio between attackLevel and \n     *   releaseLevel, on a scale from 0 to 1, where 1.0 = \n     *   attackLevel, 0.0 = releaseLevel. The susRatio \n     *   determines the decayLevel and the level at which \n     *   the sustain portion of the envelope will sustain. \n     *   For example, if attackLevel is 0.4, releaseLevel \n     *   is 0, and susAmt is 0.5, the decayLevel would be \n     *   0.2. If attackLevel is increased to 1.0 (using \n     *   setRange), then decayLevel would increase \n     *   proportionally, to become 0.5.\n     *   @param [releaseTime] Time in seconds from now \n     *   (defaults to 0)",
        "*   Trigger the Attack, and Decay portion of a \n     *   MonoSynth. Similar to holding down a key on a \n     *   piano, but it will hold the sustain level until \n     *   you let go.\n     *\n     *   @param [note] midi note on which attack should be \n     *   triggered.\n     *   @param [velocity] velocity of the note to play \n     *   (ranging from 0 to 1)/\n     *   @param [secondsFromNow] time from now (in seconds)",
        "*   Trigger the Release of an AudioVoice note. This is \n     *   similar to releasing the key on a piano and \n     *   letting the sound fade according to the release \n     *   level and release time.\n     *\n     *   @param [note] midi note on which attack should be \n     *   triggered.\n     *   @param [secondsFromNow] time to trigger the \n     *   release",
        "*   Connect to a p5.sound / Web Audio object.\n     *\n     *   @param unit A p5.sound or Web Audio object",
        "*   Disconnect all outputs\n     *",
        "*   Get rid of the MonoSynth and free up its resources \n     *   / memory.\n     *",
        "*   A Distortion effect created with a Waveshaper \n     *   Node, with an approach adapted from Kevin Ennis \n     *   This class extends p5.Effect. Methods amp(), \n     *   chain(), drywet(), connect(), and disconnect() are \n     *   available.\n     *\n     *   @param [amount] Unbounded distortion amount. \n     *   Normal values range from 0-1.\n     *   @param [oversample] 'none', '2x', or '4x'.",
        "*   The p5.Distortion is built with a  Web Audio \n     *   WaveShaper Node.\n     *",
        "*   Process a sound source, optionally specify amount \n     *   and oversample values.\n     *\n     *   @param [amount] Unbounded distortion amount. \n     *   Normal values range from 0-1.\n     *   @param [oversample] 'none', '2x', or '4x'.",
        "*   Set the amount and oversample of the waveshaper \n     *   distortion.\n     *\n     *   @param [amount] Unbounded distortion amount. \n     *   Normal values range from 0-1.\n     *   @param [oversample] 'none', '2x', or '4x'.",
        "*   Return the distortion amount, typically between \n     *   0-1.\n     *\n     *   @return Unbounded distortion amount. Normal values \n     *   range from 0-1.",
        "*   Return the oversampling.\n     *\n     *   @return Oversample can either be 'none', '2x', or \n     *   '4x'."
    ],
    "functions": [],
    "classes": [
        "p5",
        "Color",
        "Element",
        "Graphics",
        "Renderer",
        "TypedDict",
        "StringDict",
        "NumberDict",
        "Image",
        "PrintWriter",
        "Table",
        "TableRow",
        "XML",
        "Font",
        "Geometry",
        "Shader",
        "MediaElement",
        "File",
        "SoundFile",
        "Amplitude",
        "FFT",
        "Signal",
        "Oscillator",
        "SinOsc",
        "TriOsc",
        "SawOsc",
        "SqrOsc",
        "Env",
        "Pulse",
        "Noise",
        "AudioIn",
        "Effect",
        "Filter",
        "LowPass",
        "HighPass",
        "BandPass",
        "EQ",
        "Panner3D",
        "Delay",
        "Reverb",
        "Convolver",
        "Phrase",
        "Part",
        "Score",
        "SoundLoop",
        "Compressor",
        "SoundRecorder",
        "PeakDetect",
        "Gain",
        "AudioVoice",
        "MonoSynth",
        "PolySynth",
        "Distortion"
    ]
}