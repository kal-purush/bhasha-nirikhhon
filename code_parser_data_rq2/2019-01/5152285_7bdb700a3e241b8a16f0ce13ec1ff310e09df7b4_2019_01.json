{
    "identifiers": [
        "okhttp3",
        "duplex",
        "java",
        "io",
        "java",
        "io",
        "InterruptedIOException",
        "javax",
        "annotation",
        "okhttp3",
        "Call",
        "okhttp3",
        "Callback",
        "okhttp3",
        "MediaType",
        "okhttp3",
        "RequestBody",
        "okhttp3",
        "Response",
        "okio",
        "BufferedSink",
        "okio",
        "Okio",
        "okio",
        "Pipe",
        "okio",
        "Sink",
        "pipe",
        "contentType",
        "failure",
        "response",
        "enqueued",
        "contentType",
        "pipeMaxBufferSize",
        "pipe",
        "pipeMaxBufferSize",
        "contentType",
        "contentType",
        "call",
        "call",
        "enqueue",
        "enqueued",
        "Okio",
        "buffer",
        "pipe",
        "sink",
        "requestBodyOut",
        "thread",
        "Override",
        "requestBody",
        "Okio",
        "buffer",
        "requestBodyOut",
        "requestBody",
        "writeAll",
        "pipe",
        "source",
        "e",
        "e",
        "printStackTrace",
        "thread",
        "start",
        "Override",
        "call",
        "e",
        "failure",
        "response",
        "failure",
        "e",
        "notifyAll",
        "Override",
        "call",
        "response",
        "failure",
        "response",
        "response",
        "response",
        "notifyAll",
        "enqueued",
        "failure",
        "response",
        "wait",
        "failure",
        "failure",
        "response",
        "e",
        "currentThread",
        "interrupt",
        "Override",
        "contentType",
        "Override",
        "sink"
    ],
    "literals": [
        "\"duplex folder thingy\"",
        "\"body isn't enqueued.\""
    ],
    "variables": [
        "pipe",
        "contentType",
        "failure",
        "response",
        "enqueued"
    ],
    "comments": [
        "TODO(jwilson/oldergod): include content-length? Callers might know it!",
        "TODO: replace with okio Pipe#fold when released",
        "TODO: actual fold should fix this.",
        "Retain interrupted status."
    ],
    "docstrings": [
        "* Copyright (C) 2019 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Duplex request bodies are special. They are called differently and they yield different\n * interaction patterns over the network.\n *\n * <p>Rather than writing the body contents via the {@link #writeTo} callback, callers stream\n * request bodies by writing to the {@link #createSink sink}. Callers stream out the entire request\n * body and then {@link Sink#close close} it to signal the end of the request stream. The {@code\n * maxBufferSize} controls how many outbound bytes may be enqueued without blocking: large values\n * allow writing without blocking; small values limit a call’s memory consumption. 64 KiB is a\n * reasonable size for most applications.\n *\n * <p>Calls with duplex bodies may receive HTTP responses before the HTTP request body has\n * completed\n * streaming. Interleaving of request and response data is why this mechanism is called duplex.\n * Though any call may be initiated as a duplex call, only web servers that are specially designed\n * for this nonstandard interaction will use it. As of 2019-01, the only widely-used implementation\n * of this pattern is gRPC.\n *\n * <p>Duplex calls are only supported for HTTP/2 connections. Calls to HTTP/1 servers will fail\n * before the HTTP request is transmitted.\n *\n * <p>Duplex calls may not be used with OkHttp interceptors that log, compress, encrypt, or\n * otherwise access the request body. This includes OkHttp’s\n * {@link okhttp3.logging.HttpLoggingInterceptor logging interceptor}."
    ],
    "functions": [
        "DuplexRequestBody",
        "BufferedSink",
        "createSink",
        "foldSink",
        "run",
        "onFailure",
        "onResponse",
        "Response",
        "awaitExecute",
        "MediaType",
        "contentType",
        "writeTo"
    ],
    "classes": [
        "DuplexRequestBody"
    ]
}