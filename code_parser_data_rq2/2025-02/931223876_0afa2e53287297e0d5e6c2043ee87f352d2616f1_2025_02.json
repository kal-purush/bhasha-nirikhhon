{
    "identifiers": [
        "argparse",
        "collections",
        "torch",
        "os",
        "re",
        "inputs",
        "collections",
        "OrderedDict",
        "len",
        "inputs",
        "f",
        "inputs",
        "torch",
        "load",
        "f",
        "map_location",
        "s",
        "_",
        "torch",
        "serialization",
        "default_restore_location",
        "s",
        "new_state",
        "state",
        "state",
        "model_params",
        "keys",
        "params_keys",
        "model_params_keys",
        "params_keys",
        "model_params_keys",
        "KeyError",
        "format",
        "f",
        "params_keys",
        "model_params_keys",
        "k",
        "params_keys",
        "model_params",
        "k",
        "isinstance",
        "p",
        "torch",
        "HalfTensor",
        "p",
        "k",
        "params_dict",
        "p",
        "clone",
        "params_dict",
        "k",
        "p",
        "collections",
        "OrderedDict",
        "k",
        "v",
        "params_dict",
        "items",
        "v",
        "averaged_params",
        "k",
        "div_",
        "num_models",
        "averaged_params",
        "new_state",
        "paths",
        "n",
        "update_based",
        "upper_bound",
        "len",
        "paths",
        "paths",
        "update_based",
        "re",
        "compile",
        "re",
        "compile",
        "os",
        "listdir",
        "path",
        "f",
        "files",
        "pt_regexp",
        "fullmatch",
        "f",
        "m",
        "m",
        "group",
        "upper_bound",
        "sort_key",
        "upper_bound",
        "entries",
        "append",
        "sort_key",
        "m",
        "group",
        "len",
        "entries",
        "n",
        "len",
        "entries",
        "n",
        "os",
        "path",
        "join",
        "path",
        "x",
        "x",
        "sorted",
        "entries",
        "reverse",
        "n",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "required",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "required",
        "metavar",
        "help",
        "parser",
        "add_mutually_exclusive_group",
        "num_group",
        "add_argument",
        "help",
        "num_group",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "args",
        "args",
        "num_update_checkpoints",
        "args",
        "num_update_checkpoints",
        "args",
        "num_epoch_checkpoints",
        "args",
        "num_epoch_checkpoints",
        "args",
        "checkpoint_upper_bound",
        "args",
        "num_epoch_checkpoints",
        "args",
        "num_epoch_checkpoints",
        "args",
        "num_update_checkpoints",
        "num",
        "last_n_checkpoints",
        "args",
        "inputs",
        "num",
        "is_update_based",
        "upper_bound",
        "args",
        "checkpoint_upper_bound",
        "args",
        "inputs",
        "average_checkpoints",
        "args",
        "inputs",
        "torch",
        "save",
        "new_state",
        "args",
        "output",
        "format",
        "args",
        "output",
        "main"
    ],
    "literals": [
        "'cpu'",
        "'model'",
        "'For checkpoint {}, expected list of params: {}, '",
        "'but found: {}'",
        "'model'",
        "r'checkpoint_\\d+_(\\d+)\\.pt'",
        "r'checkpoint(\\d+)\\.pt'",
        "'Found {} checkpoint files but need at least {}'",
        "'Tool to average the params of input checkpoints to '",
        "'produce a new checkpoint'",
        "'--inputs'",
        "'+'",
        "'Input checkpoint file paths.'",
        "'--output'",
        "'FILE'",
        "'Write the new checkpoint containing the averaged weights to this path.'",
        "'--num-epoch-checkpoints'",
        "'if set, will try to find checkpoints with names checkpoint_xx.pt in the path specified by input, '",
        "'and average last this many of them.'",
        "'--num-update-checkpoints'",
        "'if set, will try to find checkpoints with names checkpoint_ee_xx.pt in the path specified by input, '",
        "'and average last this many of them.'",
        "'--checkpoint-upper-bound'",
        "'when using --num-epoch-checkpoints, this will set an upper bound on which checkpoint to use, '",
        "'e.g., with --num-epoch-checkpoints=10 --checkpoint-upper-bound=50, checkpoints 41-50 would be averaged.'",
        "'--checkpoint-upper-bound requires --num-epoch-checkpoints'",
        "'Cannot combine --num-epoch-checkpoints and --num-update-checkpoints'",
        "'averaging checkpoints: '",
        "'Finished writing averaged checkpoint to {}.'",
        "'__main__'"
    ],
    "variables": [
        "params_dict",
        "params_keys",
        "new_state",
        "num_models",
        "state",
        "new_state",
        "model_params",
        "model_params_keys",
        "params_keys",
        "p",
        "p",
        "params_dict",
        "k",
        "averaged_params",
        "averaged_params",
        "k",
        "new_state",
        "path",
        "pt_regexp",
        "pt_regexp",
        "files",
        "entries",
        "m",
        "sort_key",
        "parser",
        "num_group",
        "args",
        "num",
        "is_update_based",
        "num",
        "is_update_based",
        "num",
        "args",
        "inputs",
        "new_state"
    ],
    "comments": [
        "Copies over the settings from the first checkpoint",
        "NOTE: clone() is needed in case of p is a shared parameter",
        "fmt: off",
        "fmt: on"
    ],
    "docstrings": [
        "\"\"\"Loads checkpoints from inputs and returns a model with averaged weights.\n\n    Args:\n      inputs: An iterable of string paths of checkpoints to load from.\n\n    Returns:\n      A dict of string keys mapping to various values. The 'model' key\n      from the returned dict should correspond to an OrderedDict mapping\n      string parameter names to torch Tensors.\n    \"\"\""
    ],
    "functions": [
        "average_checkpoints",
        "last_n_checkpoints",
        "main"
    ],
    "classes": []
}