{
    "identifiers": [
        "os",
        "datetime",
        "time",
        "requests",
        "wikipedia",
        "pyttsx3",
        "google",
        "generativeai",
        "genai",
        "transformers",
        "AutoModelForSequenceClassification",
        "AutoTokenizer",
        "torch",
        "torch",
        "nn",
        "nn",
        "re",
        "typing",
        "Tuple",
        "Dict",
        "text",
        "re",
        "sub",
        "text",
        "re",
        "sub",
        "text",
        "re",
        "sub",
        "text",
        "join",
        "text",
        "split",
        "text",
        "datetime",
        "datetime",
        "now",
        "hour",
        "hour",
        "hour",
        "city_name",
        "api_key",
        "base_url",
        "api_key",
        "city_name",
        "requests",
        "get",
        "complete_url",
        "response",
        "json",
        "x",
        "x",
        "y",
        "y",
        "x",
        "z",
        "current_temperature",
        "current_humidity",
        "weather_description",
        "e",
        "e",
        "api_key",
        "api_key",
        "requests",
        "get",
        "url",
        "response",
        "json",
        "data",
        "data",
        "data",
        "i",
        "article",
        "articles",
        "news_headlines",
        "append",
        "i",
        "article",
        "news_headlines",
        "e",
        "e",
        "AutoTokenizer",
        "from_pretrained",
        "AutoModelForSequenceClassification",
        "from_pretrained",
        "num_labels",
        "text",
        "emotion_tokenizer",
        "text",
        "return_tensors",
        "truncation",
        "max_length",
        "emotion_model",
        "inputs",
        "outputs",
        "logits",
        "argmax",
        "item",
        "emotions",
        "emotion_id",
        "user_input",
        "detected_emotion",
        "response_templates",
        "get",
        "detected_emotion",
        "google_api_key",
        "weather_api_key",
        "news_api_key",
        "pyttsx3",
        "init",
        "engine",
        "getProperty",
        "engine",
        "setProperty",
        "voices",
        "id",
        "genai",
        "configure",
        "api_key",
        "google_api_key",
        "genai",
        "GenerativeModel",
        "gemini_model",
        "start_chat",
        "history",
        "EmotionalDialogueModel",
        "weather_api_key",
        "news_api_key",
        "text",
        "clean_text",
        "text",
        "engine",
        "say",
        "cleaned_text",
        "engine",
        "runAndWait",
        "user_input",
        "Tuple",
        "user_input",
        "speak",
        "input",
        "strip",
        "get_weather",
        "city_name",
        "weather_api_key",
        "response",
        "response",
        "user_input",
        "datetime",
        "datetime",
        "now",
        "strftime",
        "current_time",
        "response",
        "response",
        "user_input",
        "get_top_news",
        "news_api_key",
        "join",
        "headlines",
        "response",
        "response",
        "user_input",
        "user_input",
        "replace",
        "strip",
        "wikipedia",
        "summary",
        "query",
        "sentences",
        "results",
        "results",
        "e",
        "emotional_model",
        "detect_emotion",
        "user_input",
        "emotional_model",
        "generate_response",
        "user_input",
        "emotion",
        "emotion",
        "user_input",
        "chat",
        "send_message",
        "enhanced_prompt",
        "stream",
        "chunk",
        "response",
        "chunk",
        "text",
        "display_response",
        "chunk",
        "text",
        "speech_response",
        "clean_text",
        "chunk",
        "text",
        "e",
        "e",
        "error_msg",
        "error_msg",
        "emotional_context",
        "display_response",
        "emotional_context",
        "speech_response",
        "final_display",
        "final_speech",
        "HybridAssistant",
        "GOOGLE_API_KEY",
        "WEATHER_API_KEY",
        "NEWS_API_KEY",
        "assistant",
        "speak",
        "wishMe",
        "greeting",
        "assistant",
        "speak",
        "greeting",
        "input",
        "strip",
        "lower",
        "user_input",
        "assistant",
        "speak",
        "assistant",
        "process_input",
        "user_input",
        "display_response",
        "assistant",
        "speak",
        "speech_response",
        "e",
        "e",
        "assistant",
        "speak",
        "run_hybrid_assistant"
    ],
    "literals": [
        "r'\\*+([^\\*]+)\\*+'",
        "r'\\1'",
        "r'`([^`]+)`'",
        "r'\\1'",
        "r'\\[([^\\]]+)\\]\\([^\\)]+\\)'",
        "r'\\1'",
        "' '",
        "\"Hello, Good Morning!\"",
        "\"Hello, Good Afternoon!\"",
        "\"Hello, Good Evening!\"",
        "\"https://api.openweathermap.org/data/2.5/weather?\"",
        "f\"{base_url}appid={api_key}&q={city_name}\"",
        "\"cod\"",
        "\"404\"",
        "\"main\"",
        "\"temp\"",
        "\"humidity\"",
        "\"weather\"",
        "\"description\"",
        "f\"Temperature in Kelvin is {current_temperature}, \"",
        "f\"Humidity is {current_humidity} percent, \"",
        "f\"and the weather description is {weather_description}.\"",
        "\"City not found\"",
        "f\"Error fetching weather: {str(e)}\"",
        "f'https://newsapi.org/v2/top-headlines?country=us&apiKey={api_key}'",
        "'status'",
        "'ok'",
        "'articles'",
        "'articles'",
        "f\"News {i + 1}: {article['title']}\"",
        "'title'",
        "f\"Error fetching news: {str(e)}\"",
        "\"roberta-base\"",
        "\"roberta-base\"",
        "\"pt\"",
        "\"joy\"",
        "\"sadness\"",
        "\"anger\"",
        "\"fear\"",
        "\"surprise\"",
        "\"disgust\"",
        "\"neutral\"",
        "\"joy\"",
        "\"I'm glad you're feeling positive! \"",
        "\"sadness\"",
        "\"I understand this might be difficult. \"",
        "\"anger\"",
        "\"I can sense your frustration. Let's work through this together. \"",
        "\"fear\"",
        "\"It's okay to feel anxious. I'm here to help. \"",
        "\"surprise\"",
        "\"That's quite unexpected! \"",
        "\"disgust\"",
        "\"I understand your discomfort. \"",
        "\"neutral\"",
        "\"\"",
        "\"\"",
        "'sapi5'",
        "'voices'",
        "'voice'",
        "'gemini-pro'",
        "'weather'",
        "\"What's the city name?\"",
        "\"City name: \"",
        "'time'",
        "\"%H:%M:%S\"",
        "f\"The time is {current_time}\"",
        "'news'",
        "\"\\n\"",
        "'wikipedia'",
        "\"wikipedia\"",
        "\"\"",
        "f\"According to Wikipedia: {results}\"",
        "f\"According to Wikipedia: {results}\"",
        "\"Sorry, I couldn't fetch the information from Wikipedia.\"",
        "\"Sorry, I couldn't fetch the information from Wikipedia.\"",
        "\"\"",
        "\"\"",
        "f\"Context: User's emotional state appears to be {emotion}. \\\n                Please respond appropriately to: {user_input}\"",
        "f\"Error getting AI response: {str(e)}\"",
        "'AIzaSyDCoS5osHEnQguuOeniVuIrg47f_APzfc4'",
        "'7bcc14a012464257fb28ff3ee878bd39'",
        "'1f83a0479f694f0091098c6bc25bcfe8'",
        "\"Loading your enhanced AI personal assistant...\"",
        "\"Loading your enhanced AI personal assistant\"",
        "\"You: \"",
        "\"exit\"",
        "\"Goodbye! Have a great day!\"",
        "\"Assistant:\"",
        "f\"Error: {str(e)}\"",
        "\"I encountered an error. Please try again.\"",
        "\"__main__\""
    ],
    "variables": [
        "text",
        "text",
        "text",
        "text",
        "hour",
        "base_url",
        "complete_url",
        "response",
        "x",
        "y",
        "current_temperature",
        "current_humidity",
        "z",
        "weather_description",
        "url",
        "news_headlines",
        "response",
        "data",
        "articles",
        "emotion_tokenizer",
        "emotion_model",
        "conversation_history",
        "max_history",
        "inputs",
        "outputs",
        "emotion_id",
        "emotions",
        "response_templates",
        "engine",
        "voices",
        "gemini_model",
        "chat",
        "emotional_model",
        "weather_api_key",
        "news_api_key",
        "cleaned_text",
        "city_name",
        "response",
        "current_time",
        "response",
        "headlines",
        "response",
        "query",
        "results",
        "emotion",
        "emotional_context",
        "display_response",
        "speech_response",
        "enhanced_prompt",
        "response",
        "error_msg",
        "final_display",
        "final_speech",
        "GOOGLE_API_KEY",
        "WEATHER_API_KEY",
        "NEWS_API_KEY",
        "assistant",
        "greeting",
        "user_input",
        "display_response",
        "speech_response"
    ],
    "comments": [
        "Handle special commands first",
        "Default emotional + Gemini response",
        "API keys"
    ],
    "docstrings": [
        "\"\"\"Remove markdown formatting and clean text for speech.\"\"\"",
        "\"\"\"Greet the user based on the time of day.\"\"\"",
        "\"\"\"Get weather information for a given city.\"\"\"",
        "\"\"\"Get top news headlines.\"\"\""
    ],
    "functions": [
        "clean_text",
        "wishMe",
        "get_weather",
        "get_top_news",
        "detect_emotion",
        "generate_response",
        "speak",
        "process_input",
        "run_hybrid_assistant"
    ],
    "classes": [
        "EmotionalDialogueModel",
        "HybridAssistant"
    ]
}