{
    "identifiers": [
        "org",
        "amine",
        "accountservice",
        "commands",
        "aggregates",
        "org",
        "amine",
        "accountservice",
        "commonapi",
        "commands",
        "CreateAccountCommand",
        "org",
        "amine",
        "accountservice",
        "commonapi",
        "enums",
        "AccountStatus",
        "org",
        "amine",
        "accountservice",
        "commonapi",
        "events",
        "AccountCreatedEvent",
        "org",
        "amine",
        "accountservice",
        "commonapi",
        "exceptions",
        "NegativeInitialBalanceException",
        "org",
        "axonframework",
        "commandhandling",
        "CommandHandler",
        "org",
        "axonframework",
        "eventsourcing",
        "EventSourcingHandler",
        "org",
        "axonframework",
        "modelling",
        "command",
        "AggregateIdentifier",
        "org",
        "axonframework",
        "modelling",
        "command",
        "AggregateLifecycle",
        "org",
        "axonframework",
        "spring",
        "stereotype",
        "Aggregate",
        "Aggregate",
        "AggregateIdentifier",
        "accountId",
        "currency",
        "balance",
        "status",
        "CommandHandler",
        "command",
        "command",
        "getInitialBalance",
        "AggregateLifecycle",
        "apply",
        "command",
        "getId",
        "command",
        "getCurrency",
        "command",
        "getInitialBalance",
        "AccountStatus",
        "CREATED",
        "EventSourcingHandler",
        "accountId",
        "getId",
        "balance",
        "getBalance",
        "status",
        "getStatus",
        "currency",
        "getCurrency"
    ],
    "literals": [
        "\"Negative balance\""
    ],
    "variables": [
        "accountId",
        "currency",
        "balance",
        "status"
    ],
    "comments": [
        "required by Axon",
        "TODO: règles métier ici (fonction de décision)",
        "On crée l'événement comme quoi le compte a été crée -> il est enregistré dans le event store",
        "TODO: Il faut informer les autres ms (fonction d'évolution)",
        "ça veut dire je vais dans le eventStore, à chaque fois",
        "qu'il y a un event de type 'AccountCreatedEvent' je fais ce qui suit"
    ],
    "docstrings": [],
    "functions": [
        "AccountAggregate",
        "AccountAggregate",
        "on"
    ],
    "classes": [
        "AccountAggregate"
    ]
}