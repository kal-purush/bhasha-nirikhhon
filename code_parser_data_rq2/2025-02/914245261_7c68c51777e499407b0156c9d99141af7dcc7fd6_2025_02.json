{
    "identifiers": [
        "__name",
        "target",
        "value",
        "__defProp",
        "target",
        "x",
        "require",
        "require",
        "Proxy",
        "Proxy",
        "x",
        "a",
        "b",
        "require",
        "require",
        "a",
        "b",
        "x",
        "x",
        "require",
        "require",
        "arguments",
        "x",
        "__commonJS",
        "cb",
        "mod",
        "__require2",
        "mod",
        "cb",
        "__getOwnPropNames",
        "cb",
        "mod",
        "mod",
        "mod",
        "__copyProps",
        "to",
        "desc",
        "key",
        "__getOwnPropNames",
        "__hasOwnProp",
        "to",
        "key",
        "key",
        "__defProp",
        "to",
        "key",
        "key",
        "desc",
        "__getOwnPropDesc",
        "key",
        "desc",
        "to",
        "__toESM",
        "mod",
        "isNodeMode",
        "target",
        "target",
        "mod",
        "__create",
        "__getProtoOf",
        "mod",
        "__copyProps",
        "isNodeMode",
        "mod",
        "mod",
        "__defProp",
        "target",
        "mod",
        "target",
        "mod",
        "__commonJS",
        "__commonJS",
        "exports",
        "nacl3",
        "__name",
        "init",
        "Float64Array",
        "init",
        "i",
        "i",
        "init",
        "i",
        "r",
        "i",
        "init",
        "i",
        "r",
        "__name",
        "Uint8Array",
        "Uint8Array",
        "_9",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "x",
        "i",
        "h",
        "l",
        "x",
        "i",
        "h",
        "x",
        "i",
        "h",
        "x",
        "i",
        "h",
        "x",
        "i",
        "h",
        "x",
        "i",
        "l",
        "x",
        "i",
        "l",
        "x",
        "i",
        "l",
        "x",
        "i",
        "l",
        "__name",
        "ts64",
        "x",
        "xi",
        "y",
        "yi",
        "n",
        "i",
        "i",
        "n",
        "i",
        "d",
        "x",
        "xi",
        "i",
        "y",
        "yi",
        "i",
        "d",
        "__name",
        "vn",
        "x",
        "xi",
        "y",
        "yi",
        "vn",
        "x",
        "xi",
        "y",
        "yi",
        "__name",
        "crypto_verify_16",
        "x",
        "xi",
        "y",
        "yi",
        "vn",
        "x",
        "xi",
        "y",
        "yi",
        "__name",
        "crypto_verify_32",
        "o",
        "p",
        "k",
        "c",
        "c",
        "c",
        "c",
        "c",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "c",
        "c",
        "c",
        "c",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "c",
        "c",
        "c",
        "c",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "c",
        "c",
        "c",
        "c",
        "i",
        "i",
        "u",
        "x0",
        "x12",
        "x4",
        "u",
        "u",
        "u",
        "x4",
        "x0",
        "x8",
        "u",
        "u",
        "u",
        "x8",
        "x4",
        "x12",
        "u",
        "u",
        "u",
        "x12",
        "x8",
        "x0",
        "u",
        "u",
        "u",
        "x5",
        "x1",
        "x9",
        "u",
        "u",
        "u",
        "x9",
        "x5",
        "x13",
        "u",
        "u",
        "u",
        "x13",
        "x9",
        "x1",
        "u",
        "u",
        "u",
        "x1",
        "x13",
        "x5",
        "u",
        "u",
        "u",
        "x10",
        "x6",
        "x14",
        "u",
        "u",
        "u",
        "x14",
        "x10",
        "x2",
        "u",
        "u",
        "u",
        "x2",
        "x14",
        "x6",
        "u",
        "u",
        "u",
        "x6",
        "x2",
        "x10",
        "u",
        "u",
        "u",
        "x15",
        "x11",
        "x3",
        "u",
        "u",
        "u",
        "x3",
        "x15",
        "x7",
        "u",
        "u",
        "u",
        "x7",
        "x3",
        "x11",
        "u",
        "u",
        "u",
        "x11",
        "x7",
        "x15",
        "u",
        "u",
        "u",
        "x0",
        "x3",
        "x1",
        "u",
        "u",
        "u",
        "x1",
        "x0",
        "x2",
        "u",
        "u",
        "u",
        "x2",
        "x1",
        "x3",
        "u",
        "u",
        "u",
        "x3",
        "x2",
        "x0",
        "u",
        "u",
        "u",
        "x5",
        "x4",
        "x6",
        "u",
        "u",
        "u",
        "x6",
        "x5",
        "x7",
        "u",
        "u",
        "u",
        "x7",
        "x6",
        "x4",
        "u",
        "u",
        "u",
        "x4",
        "x7",
        "x5",
        "u",
        "u",
        "u",
        "x10",
        "x9",
        "x11",
        "u",
        "u",
        "u",
        "x11",
        "x10",
        "x8",
        "u",
        "u",
        "u",
        "x8",
        "x11",
        "x9",
        "u",
        "u",
        "u",
        "x9",
        "x8",
        "x10",
        "u",
        "u",
        "u",
        "x15",
        "x14",
        "x12",
        "u",
        "u",
        "u",
        "x12",
        "x15",
        "x13",
        "u",
        "u",
        "u",
        "x13",
        "x12",
        "x14",
        "u",
        "u",
        "u",
        "x14",
        "x13",
        "x15",
        "u",
        "u",
        "x0",
        "x0",
        "j0",
        "x1",
        "x1",
        "j1",
        "x2",
        "x2",
        "j2",
        "x3",
        "x3",
        "j3",
        "x4",
        "x4",
        "j4",
        "x5",
        "x5",
        "j5",
        "x6",
        "x6",
        "j6",
        "x7",
        "x7",
        "j7",
        "x8",
        "x8",
        "j8",
        "x9",
        "x9",
        "j9",
        "x10",
        "x10",
        "j10",
        "x11",
        "x11",
        "j11",
        "x12",
        "x12",
        "j12",
        "x13",
        "x13",
        "j13",
        "x14",
        "x14",
        "j14",
        "x15",
        "x15",
        "j15",
        "o",
        "x0",
        "o",
        "x0",
        "o",
        "x0",
        "o",
        "x0",
        "o",
        "x1",
        "o",
        "x1",
        "o",
        "x1",
        "o",
        "x1",
        "o",
        "x2",
        "o",
        "x2",
        "o",
        "x2",
        "o",
        "x2",
        "o",
        "x3",
        "o",
        "x3",
        "o",
        "x3",
        "o",
        "x3",
        "o",
        "x4",
        "o",
        "x4",
        "o",
        "x4",
        "o",
        "x4",
        "o",
        "x5",
        "o",
        "x5",
        "o",
        "x5",
        "o",
        "x5",
        "o",
        "x6",
        "o",
        "x6",
        "o",
        "x6",
        "o",
        "x6",
        "o",
        "x7",
        "o",
        "x7",
        "o",
        "x7",
        "o",
        "x7",
        "o",
        "x8",
        "o",
        "x8",
        "o",
        "x8",
        "o",
        "x8",
        "o",
        "x9",
        "o",
        "x9",
        "o",
        "x9",
        "o",
        "x9",
        "o",
        "x10",
        "o",
        "x10",
        "o",
        "x10",
        "o",
        "x10",
        "o",
        "x11",
        "o",
        "x11",
        "o",
        "x11",
        "o",
        "x11",
        "o",
        "x12",
        "o",
        "x12",
        "o",
        "x12",
        "o",
        "x12",
        "o",
        "x13",
        "o",
        "x13",
        "o",
        "x13",
        "o",
        "x13",
        "o",
        "x14",
        "o",
        "x14",
        "o",
        "x14",
        "o",
        "x14",
        "o",
        "x15",
        "o",
        "x15",
        "o",
        "x15",
        "o",
        "x15",
        "__name",
        "core_salsa20",
        "o",
        "p",
        "k",
        "c",
        "c",
        "c",
        "c",
        "c",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "c",
        "c",
        "c",
        "c",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "c",
        "c",
        "c",
        "c",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "c",
        "c",
        "c",
        "c",
        "i",
        "i",
        "u",
        "x0",
        "x12",
        "x4",
        "u",
        "u",
        "u",
        "x4",
        "x0",
        "x8",
        "u",
        "u",
        "u",
        "x8",
        "x4",
        "x12",
        "u",
        "u",
        "u",
        "x12",
        "x8",
        "x0",
        "u",
        "u",
        "u",
        "x5",
        "x1",
        "x9",
        "u",
        "u",
        "u",
        "x9",
        "x5",
        "x13",
        "u",
        "u",
        "u",
        "x13",
        "x9",
        "x1",
        "u",
        "u",
        "u",
        "x1",
        "x13",
        "x5",
        "u",
        "u",
        "u",
        "x10",
        "x6",
        "x14",
        "u",
        "u",
        "u",
        "x14",
        "x10",
        "x2",
        "u",
        "u",
        "u",
        "x2",
        "x14",
        "x6",
        "u",
        "u",
        "u",
        "x6",
        "x2",
        "x10",
        "u",
        "u",
        "u",
        "x15",
        "x11",
        "x3",
        "u",
        "u",
        "u",
        "x3",
        "x15",
        "x7",
        "u",
        "u",
        "u",
        "x7",
        "x3",
        "x11",
        "u",
        "u",
        "u",
        "x11",
        "x7",
        "x15",
        "u",
        "u",
        "u",
        "x0",
        "x3",
        "x1",
        "u",
        "u",
        "u",
        "x1",
        "x0",
        "x2",
        "u",
        "u",
        "u",
        "x2",
        "x1",
        "x3",
        "u",
        "u",
        "u",
        "x3",
        "x2",
        "x0",
        "u",
        "u",
        "u",
        "x5",
        "x4",
        "x6",
        "u",
        "u",
        "u",
        "x6",
        "x5",
        "x7",
        "u",
        "u",
        "u",
        "x7",
        "x6",
        "x4",
        "u",
        "u",
        "u",
        "x4",
        "x7",
        "x5",
        "u",
        "u",
        "u",
        "x10",
        "x9",
        "x11",
        "u",
        "u",
        "u",
        "x11",
        "x10",
        "x8",
        "u",
        "u",
        "u",
        "x8",
        "x11",
        "x9",
        "u",
        "u",
        "u",
        "x9",
        "x8",
        "x10",
        "u",
        "u",
        "u",
        "x15",
        "x14",
        "x12",
        "u",
        "u",
        "u",
        "x12",
        "x15",
        "x13",
        "u",
        "u",
        "u",
        "x13",
        "x12",
        "x14",
        "u",
        "u",
        "u",
        "x14",
        "x13",
        "x15",
        "u",
        "u",
        "o",
        "x0",
        "o",
        "x0",
        "o",
        "x0",
        "o",
        "x0",
        "o",
        "x5",
        "o",
        "x5",
        "o",
        "x5",
        "o",
        "x5",
        "o",
        "x10",
        "o",
        "x10",
        "o",
        "x10",
        "o",
        "x10",
        "o",
        "x15",
        "o",
        "x15",
        "o",
        "x15",
        "o",
        "x15",
        "o",
        "x6",
        "o",
        "x6",
        "o",
        "x6",
        "o",
        "x6",
        "o",
        "x7",
        "o",
        "x7",
        "o",
        "x7",
        "o",
        "x7",
        "o",
        "x8",
        "o",
        "x8",
        "o",
        "x8",
        "o",
        "x8",
        "o",
        "x9",
        "o",
        "x9",
        "o",
        "x9",
        "o",
        "x9",
        "__name",
        "core_hsalsa20",
        "inp",
        "k",
        "c",
        "core_salsa20",
        "inp",
        "k",
        "c",
        "__name",
        "crypto_core_salsa20",
        "inp",
        "k",
        "c",
        "core_hsalsa20",
        "inp",
        "k",
        "c",
        "__name",
        "crypto_core_hsalsa20",
        "Uint8Array",
        "c",
        "cpos",
        "m",
        "mpos",
        "b",
        "n",
        "k",
        "Uint8Array",
        "Uint8Array",
        "i",
        "i",
        "i",
        "z",
        "i",
        "i",
        "i",
        "i",
        "z",
        "i",
        "n",
        "i",
        "b",
        "crypto_core_salsa20",
        "x",
        "z",
        "k",
        "sigma",
        "i",
        "i",
        "i",
        "c",
        "cpos",
        "i",
        "m",
        "mpos",
        "i",
        "x",
        "i",
        "u",
        "i",
        "i",
        "i",
        "u",
        "u",
        "z",
        "i",
        "z",
        "i",
        "u",
        "u",
        "b",
        "cpos",
        "mpos",
        "b",
        "crypto_core_salsa20",
        "x",
        "z",
        "k",
        "sigma",
        "i",
        "i",
        "b",
        "i",
        "c",
        "cpos",
        "i",
        "m",
        "mpos",
        "i",
        "x",
        "i",
        "__name",
        "crypto_stream_salsa20_xor",
        "c",
        "cpos",
        "b",
        "n",
        "k",
        "Uint8Array",
        "Uint8Array",
        "i",
        "i",
        "i",
        "z",
        "i",
        "i",
        "i",
        "i",
        "z",
        "i",
        "n",
        "i",
        "b",
        "crypto_core_salsa20",
        "x",
        "z",
        "k",
        "sigma",
        "i",
        "i",
        "i",
        "c",
        "cpos",
        "i",
        "x",
        "i",
        "u",
        "i",
        "i",
        "i",
        "u",
        "u",
        "z",
        "i",
        "z",
        "i",
        "u",
        "u",
        "b",
        "cpos",
        "b",
        "crypto_core_salsa20",
        "x",
        "z",
        "k",
        "sigma",
        "i",
        "i",
        "b",
        "i",
        "c",
        "cpos",
        "i",
        "x",
        "i",
        "__name",
        "crypto_stream_salsa20",
        "c",
        "cpos",
        "d",
        "n",
        "k",
        "Uint8Array",
        "crypto_core_hsalsa20",
        "s",
        "n",
        "k",
        "sigma",
        "Uint8Array",
        "i",
        "i",
        "sn",
        "i",
        "n",
        "i",
        "crypto_stream_salsa20",
        "c",
        "cpos",
        "d",
        "sn",
        "s",
        "__name",
        "crypto_stream",
        "c",
        "cpos",
        "m",
        "mpos",
        "d",
        "n",
        "k",
        "Uint8Array",
        "crypto_core_hsalsa20",
        "s",
        "n",
        "k",
        "sigma",
        "Uint8Array",
        "i",
        "i",
        "sn",
        "i",
        "n",
        "i",
        "crypto_stream_salsa20_xor",
        "c",
        "cpos",
        "m",
        "mpos",
        "d",
        "sn",
        "s",
        "__name",
        "crypto_stream_xor",
        "__name",
        "key",
        "Uint8Array",
        "Uint16Array",
        "Uint16Array",
        "Uint16Array",
        "t0",
        "key",
        "key",
        "t0",
        "t1",
        "key",
        "key",
        "t0",
        "t1",
        "t2",
        "key",
        "key",
        "t1",
        "t2",
        "t3",
        "key",
        "key",
        "t2",
        "t3",
        "t4",
        "key",
        "key",
        "t3",
        "t4",
        "t4",
        "t5",
        "key",
        "key",
        "t4",
        "t5",
        "t6",
        "key",
        "key",
        "t5",
        "t6",
        "t7",
        "key",
        "key",
        "t6",
        "t7",
        "t7",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "poly1305",
        "m",
        "mpos",
        "t0",
        "m",
        "mpos",
        "m",
        "mpos",
        "h0",
        "t0",
        "t1",
        "m",
        "mpos",
        "m",
        "mpos",
        "h1",
        "t0",
        "t1",
        "t2",
        "m",
        "mpos",
        "m",
        "mpos",
        "h2",
        "t1",
        "t2",
        "t3",
        "m",
        "mpos",
        "m",
        "mpos",
        "h3",
        "t2",
        "t3",
        "t4",
        "m",
        "mpos",
        "m",
        "mpos",
        "h4",
        "t3",
        "t4",
        "h5",
        "t4",
        "t5",
        "m",
        "mpos",
        "m",
        "mpos",
        "h6",
        "t4",
        "t5",
        "t6",
        "m",
        "mpos",
        "m",
        "mpos",
        "h7",
        "t5",
        "t6",
        "t7",
        "m",
        "mpos",
        "m",
        "mpos",
        "h8",
        "t6",
        "t7",
        "h9",
        "t7",
        "hibit",
        "c",
        "d0",
        "c",
        "d0",
        "h0",
        "r0",
        "d0",
        "h1",
        "r9",
        "d0",
        "h2",
        "r8",
        "d0",
        "h3",
        "r7",
        "d0",
        "h4",
        "r6",
        "c",
        "d0",
        "d0",
        "d0",
        "h5",
        "r5",
        "d0",
        "h6",
        "r4",
        "d0",
        "h7",
        "r3",
        "d0",
        "h8",
        "r2",
        "d0",
        "h9",
        "r1",
        "c",
        "d0",
        "d0",
        "d1",
        "c",
        "d1",
        "h0",
        "r1",
        "d1",
        "h1",
        "r0",
        "d1",
        "h2",
        "r9",
        "d1",
        "h3",
        "r8",
        "d1",
        "h4",
        "r7",
        "c",
        "d1",
        "d1",
        "d1",
        "h5",
        "r6",
        "d1",
        "h6",
        "r5",
        "d1",
        "h7",
        "r4",
        "d1",
        "h8",
        "r3",
        "d1",
        "h9",
        "r2",
        "c",
        "d1",
        "d1",
        "d2",
        "c",
        "d2",
        "h0",
        "r2",
        "d2",
        "h1",
        "r1",
        "d2",
        "h2",
        "r0",
        "d2",
        "h3",
        "r9",
        "d2",
        "h4",
        "r8",
        "c",
        "d2",
        "d2",
        "d2",
        "h5",
        "r7",
        "d2",
        "h6",
        "r6",
        "d2",
        "h7",
        "r5",
        "d2",
        "h8",
        "r4",
        "d2",
        "h9",
        "r3",
        "c",
        "d2",
        "d2",
        "d3",
        "c",
        "d3",
        "h0",
        "r3",
        "d3",
        "h1",
        "r2",
        "d3",
        "h2",
        "r1",
        "d3",
        "h3",
        "r0",
        "d3",
        "h4",
        "r9",
        "c",
        "d3",
        "d3",
        "d3",
        "h5",
        "r8",
        "d3",
        "h6",
        "r7",
        "d3",
        "h7",
        "r6",
        "d3",
        "h8",
        "r5",
        "d3",
        "h9",
        "r4",
        "c",
        "d3",
        "d3",
        "d4",
        "c",
        "d4",
        "h0",
        "r4",
        "d4",
        "h1",
        "r3",
        "d4",
        "h2",
        "r2",
        "d4",
        "h3",
        "r1",
        "d4",
        "h4",
        "r0",
        "c",
        "d4",
        "d4",
        "d4",
        "h5",
        "r9",
        "d4",
        "h6",
        "r8",
        "d4",
        "h7",
        "r7",
        "d4",
        "h8",
        "r6",
        "d4",
        "h9",
        "r5",
        "c",
        "d4",
        "d4",
        "d5",
        "c",
        "d5",
        "h0",
        "r5",
        "d5",
        "h1",
        "r4",
        "d5",
        "h2",
        "r3",
        "d5",
        "h3",
        "r2",
        "d5",
        "h4",
        "r1",
        "c",
        "d5",
        "d5",
        "d5",
        "h5",
        "r0",
        "d5",
        "h6",
        "r9",
        "d5",
        "h7",
        "r8",
        "d5",
        "h8",
        "r7",
        "d5",
        "h9",
        "r6",
        "c",
        "d5",
        "d5",
        "d6",
        "c",
        "d6",
        "h0",
        "r6",
        "d6",
        "h1",
        "r5",
        "d6",
        "h2",
        "r4",
        "d6",
        "h3",
        "r3",
        "d6",
        "h4",
        "r2",
        "c",
        "d6",
        "d6",
        "d6",
        "h5",
        "r1",
        "d6",
        "h6",
        "r0",
        "d6",
        "h7",
        "r9",
        "d6",
        "h8",
        "r8",
        "d6",
        "h9",
        "r7",
        "c",
        "d6",
        "d6",
        "d7",
        "c",
        "d7",
        "h0",
        "r7",
        "d7",
        "h1",
        "r6",
        "d7",
        "h2",
        "r5",
        "d7",
        "h3",
        "r4",
        "d7",
        "h4",
        "r3",
        "c",
        "d7",
        "d7",
        "d7",
        "h5",
        "r2",
        "d7",
        "h6",
        "r1",
        "d7",
        "h7",
        "r0",
        "d7",
        "h8",
        "r9",
        "d7",
        "h9",
        "r8",
        "c",
        "d7",
        "d7",
        "d8",
        "c",
        "d8",
        "h0",
        "r8",
        "d8",
        "h1",
        "r7",
        "d8",
        "h2",
        "r6",
        "d8",
        "h3",
        "r5",
        "d8",
        "h4",
        "r4",
        "c",
        "d8",
        "d8",
        "d8",
        "h5",
        "r3",
        "d8",
        "h6",
        "r2",
        "d8",
        "h7",
        "r1",
        "d8",
        "h8",
        "r0",
        "d8",
        "h9",
        "r9",
        "c",
        "d8",
        "d8",
        "d9",
        "c",
        "d9",
        "h0",
        "r9",
        "d9",
        "h1",
        "r8",
        "d9",
        "h2",
        "r7",
        "d9",
        "h3",
        "r6",
        "d9",
        "h4",
        "r5",
        "c",
        "d9",
        "d9",
        "d9",
        "h5",
        "r4",
        "d9",
        "h6",
        "r3",
        "d9",
        "h7",
        "r2",
        "d9",
        "h8",
        "r1",
        "d9",
        "h9",
        "r0",
        "c",
        "d9",
        "d9",
        "c",
        "c",
        "c",
        "c",
        "c",
        "d0",
        "d0",
        "c",
        "c",
        "c",
        "d1",
        "c",
        "h0",
        "d0",
        "h1",
        "d1",
        "h2",
        "d2",
        "h3",
        "d3",
        "h4",
        "d4",
        "h5",
        "d5",
        "h6",
        "d6",
        "h7",
        "d7",
        "h8",
        "d8",
        "h9",
        "d9",
        "mpos",
        "h0",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "h7",
        "h8",
        "h9",
        "poly1305",
        "mac",
        "macpos",
        "Uint16Array",
        "i",
        "i",
        "i",
        "i",
        "i",
        "c",
        "i",
        "i",
        "i",
        "i",
        "c",
        "c",
        "i",
        "i",
        "c",
        "c",
        "c",
        "c",
        "c",
        "g",
        "c",
        "g",
        "g",
        "i",
        "i",
        "i",
        "g",
        "i",
        "i",
        "c",
        "c",
        "g",
        "i",
        "g",
        "i",
        "g",
        "mask",
        "c",
        "i",
        "i",
        "i",
        "g",
        "i",
        "mask",
        "mask",
        "mask",
        "i",
        "i",
        "i",
        "i",
        "i",
        "mask",
        "g",
        "i",
        "f",
        "f",
        "i",
        "i",
        "i",
        "f",
        "i",
        "i",
        "f",
        "i",
        "f",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "mac",
        "macpos",
        "poly1305",
        "m",
        "mpos",
        "want",
        "want",
        "want",
        "i",
        "i",
        "want",
        "i",
        "i",
        "m",
        "mpos",
        "i",
        "want",
        "mpos",
        "want",
        "want",
        "want",
        "m",
        "mpos",
        "want",
        "mpos",
        "want",
        "want",
        "i",
        "i",
        "i",
        "i",
        "m",
        "mpos",
        "i",
        "outpos",
        "m",
        "mpos",
        "n",
        "k",
        "poly1305",
        "k",
        "s",
        "m",
        "mpos",
        "n",
        "s",
        "outpos",
        "__name",
        "crypto_onetimeauth",
        "h",
        "hpos",
        "m",
        "mpos",
        "n",
        "k",
        "Uint8Array",
        "crypto_onetimeauth",
        "x",
        "m",
        "mpos",
        "n",
        "k",
        "crypto_verify_16",
        "h",
        "hpos",
        "x",
        "__name",
        "crypto_onetimeauth_verify",
        "c",
        "m",
        "d",
        "n",
        "k",
        "d",
        "crypto_stream_xor",
        "c",
        "m",
        "d",
        "n",
        "k",
        "crypto_onetimeauth",
        "c",
        "c",
        "d",
        "c",
        "i",
        "i",
        "i",
        "c",
        "i",
        "__name",
        "crypto_secretbox",
        "m",
        "c",
        "d",
        "n",
        "k",
        "Uint8Array",
        "d",
        "crypto_stream",
        "x",
        "n",
        "k",
        "crypto_onetimeauth_verify",
        "c",
        "c",
        "d",
        "x",
        "crypto_stream_xor",
        "m",
        "c",
        "d",
        "n",
        "k",
        "i",
        "i",
        "i",
        "m",
        "i",
        "__name",
        "crypto_secretbox_open",
        "r",
        "a",
        "i",
        "i",
        "i",
        "r",
        "i",
        "a",
        "i",
        "__name",
        "set25519",
        "o",
        "i",
        "i",
        "i",
        "v",
        "o",
        "i",
        "c",
        "c",
        "v",
        "o",
        "i",
        "v",
        "c",
        "o",
        "c",
        "c",
        "__name",
        "car25519",
        "p",
        "q",
        "b",
        "b",
        "i",
        "i",
        "t",
        "c",
        "p",
        "i",
        "q",
        "i",
        "p",
        "i",
        "t",
        "q",
        "i",
        "t",
        "__name",
        "sel25519",
        "o",
        "n",
        "gf",
        "gf",
        "i",
        "i",
        "i",
        "t",
        "i",
        "n",
        "i",
        "car25519",
        "t",
        "car25519",
        "t",
        "car25519",
        "t",
        "j",
        "j",
        "j",
        "m",
        "t",
        "i",
        "i",
        "i",
        "m",
        "i",
        "t",
        "i",
        "m",
        "i",
        "m",
        "i",
        "m",
        "t",
        "m",
        "b",
        "m",
        "m",
        "sel25519",
        "t",
        "m",
        "b",
        "i",
        "i",
        "i",
        "o",
        "i",
        "t",
        "i",
        "o",
        "i",
        "t",
        "i",
        "__name",
        "pack25519",
        "a",
        "b",
        "Uint8Array",
        "Uint8Array",
        "pack25519",
        "c",
        "a",
        "pack25519",
        "d",
        "b",
        "crypto_verify_32",
        "c",
        "d",
        "__name",
        "neq25519",
        "a",
        "Uint8Array",
        "pack25519",
        "d",
        "a",
        "d",
        "__name",
        "par25519",
        "o",
        "n",
        "i",
        "i",
        "i",
        "o",
        "i",
        "n",
        "i",
        "n",
        "i",
        "o",
        "__name",
        "unpack25519",
        "o",
        "a",
        "b",
        "i",
        "i",
        "o",
        "i",
        "a",
        "i",
        "b",
        "i",
        "__name",
        "A",
        "o",
        "a",
        "b",
        "i",
        "i",
        "o",
        "i",
        "a",
        "i",
        "b",
        "i",
        "__name",
        "Z",
        "o",
        "a",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "v",
        "a",
        "t0",
        "v",
        "b0",
        "t1",
        "v",
        "b1",
        "t2",
        "v",
        "b2",
        "t3",
        "v",
        "b3",
        "t4",
        "v",
        "b4",
        "t5",
        "v",
        "b5",
        "t6",
        "v",
        "b6",
        "t7",
        "v",
        "b7",
        "t8",
        "v",
        "b8",
        "t9",
        "v",
        "b9",
        "t10",
        "v",
        "b10",
        "t11",
        "v",
        "b11",
        "t12",
        "v",
        "b12",
        "t13",
        "v",
        "b13",
        "t14",
        "v",
        "b14",
        "t15",
        "v",
        "b15",
        "v",
        "a",
        "t1",
        "v",
        "b0",
        "t2",
        "v",
        "b1",
        "t3",
        "v",
        "b2",
        "t4",
        "v",
        "b3",
        "t5",
        "v",
        "b4",
        "t6",
        "v",
        "b5",
        "t7",
        "v",
        "b6",
        "t8",
        "v",
        "b7",
        "t9",
        "v",
        "b8",
        "t10",
        "v",
        "b9",
        "t11",
        "v",
        "b10",
        "t12",
        "v",
        "b11",
        "t13",
        "v",
        "b12",
        "t14",
        "v",
        "b13",
        "t15",
        "v",
        "b14",
        "t16",
        "v",
        "b15",
        "v",
        "a",
        "t2",
        "v",
        "b0",
        "t3",
        "v",
        "b1",
        "t4",
        "v",
        "b2",
        "t5",
        "v",
        "b3",
        "t6",
        "v",
        "b4",
        "t7",
        "v",
        "b5",
        "t8",
        "v",
        "b6",
        "t9",
        "v",
        "b7",
        "t10",
        "v",
        "b8",
        "t11",
        "v",
        "b9",
        "t12",
        "v",
        "b10",
        "t13",
        "v",
        "b11",
        "t14",
        "v",
        "b12",
        "t15",
        "v",
        "b13",
        "t16",
        "v",
        "b14",
        "t17",
        "v",
        "b15",
        "v",
        "a",
        "t3",
        "v",
        "b0",
        "t4",
        "v",
        "b1",
        "t5",
        "v",
        "b2",
        "t6",
        "v",
        "b3",
        "t7",
        "v",
        "b4",
        "t8",
        "v",
        "b5",
        "t9",
        "v",
        "b6",
        "t10",
        "v",
        "b7",
        "t11",
        "v",
        "b8",
        "t12",
        "v",
        "b9",
        "t13",
        "v",
        "b10",
        "t14",
        "v",
        "b11",
        "t15",
        "v",
        "b12",
        "t16",
        "v",
        "b13",
        "t17",
        "v",
        "b14",
        "t18",
        "v",
        "b15",
        "v",
        "a",
        "t4",
        "v",
        "b0",
        "t5",
        "v",
        "b1",
        "t6",
        "v",
        "b2",
        "t7",
        "v",
        "b3",
        "t8",
        "v",
        "b4",
        "t9",
        "v",
        "b5",
        "t10",
        "v",
        "b6",
        "t11",
        "v",
        "b7",
        "t12",
        "v",
        "b8",
        "t13",
        "v",
        "b9",
        "t14",
        "v",
        "b10",
        "t15",
        "v",
        "b11",
        "t16",
        "v",
        "b12",
        "t17",
        "v",
        "b13",
        "t18",
        "v",
        "b14",
        "t19",
        "v",
        "b15",
        "v",
        "a",
        "t5",
        "v",
        "b0",
        "t6",
        "v",
        "b1",
        "t7",
        "v",
        "b2",
        "t8",
        "v",
        "b3",
        "t9",
        "v",
        "b4",
        "t10",
        "v",
        "b5",
        "t11",
        "v",
        "b6",
        "t12",
        "v",
        "b7",
        "t13",
        "v",
        "b8",
        "t14",
        "v",
        "b9",
        "t15",
        "v",
        "b10",
        "t16",
        "v",
        "b11",
        "t17",
        "v",
        "b12",
        "t18",
        "v",
        "b13",
        "t19",
        "v",
        "b14",
        "t20",
        "v",
        "b15",
        "v",
        "a",
        "t6",
        "v",
        "b0",
        "t7",
        "v",
        "b1",
        "t8",
        "v",
        "b2",
        "t9",
        "v",
        "b3",
        "t10",
        "v",
        "b4",
        "t11",
        "v",
        "b5",
        "t12",
        "v",
        "b6",
        "t13",
        "v",
        "b7",
        "t14",
        "v",
        "b8",
        "t15",
        "v",
        "b9",
        "t16",
        "v",
        "b10",
        "t17",
        "v",
        "b11",
        "t18",
        "v",
        "b12",
        "t19",
        "v",
        "b13",
        "t20",
        "v",
        "b14",
        "t21",
        "v",
        "b15",
        "v",
        "a",
        "t7",
        "v",
        "b0",
        "t8",
        "v",
        "b1",
        "t9",
        "v",
        "b2",
        "t10",
        "v",
        "b3",
        "t11",
        "v",
        "b4",
        "t12",
        "v",
        "b5",
        "t13",
        "v",
        "b6",
        "t14",
        "v",
        "b7",
        "t15",
        "v",
        "b8",
        "t16",
        "v",
        "b9",
        "t17",
        "v",
        "b10",
        "t18",
        "v",
        "b11",
        "t19",
        "v",
        "b12",
        "t20",
        "v",
        "b13",
        "t21",
        "v",
        "b14",
        "t22",
        "v",
        "b15",
        "v",
        "a",
        "t8",
        "v",
        "b0",
        "t9",
        "v",
        "b1",
        "t10",
        "v",
        "b2",
        "t11",
        "v",
        "b3",
        "t12",
        "v",
        "b4",
        "t13",
        "v",
        "b5",
        "t14",
        "v",
        "b6",
        "t15",
        "v",
        "b7",
        "t16",
        "v",
        "b8",
        "t17",
        "v",
        "b9",
        "t18",
        "v",
        "b10",
        "t19",
        "v",
        "b11",
        "t20",
        "v",
        "b12",
        "t21",
        "v",
        "b13",
        "t22",
        "v",
        "b14",
        "t23",
        "v",
        "b15",
        "v",
        "a",
        "t9",
        "v",
        "b0",
        "t10",
        "v",
        "b1",
        "t11",
        "v",
        "b2",
        "t12",
        "v",
        "b3",
        "t13",
        "v",
        "b4",
        "t14",
        "v",
        "b5",
        "t15",
        "v",
        "b6",
        "t16",
        "v",
        "b7",
        "t17",
        "v",
        "b8",
        "t18",
        "v",
        "b9",
        "t19",
        "v",
        "b10",
        "t20",
        "v",
        "b11",
        "t21",
        "v",
        "b12",
        "t22",
        "v",
        "b13",
        "t23",
        "v",
        "b14",
        "t24",
        "v",
        "b15",
        "v",
        "a",
        "t10",
        "v",
        "b0",
        "t11",
        "v",
        "b1",
        "t12",
        "v",
        "b2",
        "t13",
        "v",
        "b3",
        "t14",
        "v",
        "b4",
        "t15",
        "v",
        "b5",
        "t16",
        "v",
        "b6",
        "t17",
        "v",
        "b7",
        "t18",
        "v",
        "b8",
        "t19",
        "v",
        "b9",
        "t20",
        "v",
        "b10",
        "t21",
        "v",
        "b11",
        "t22",
        "v",
        "b12",
        "t23",
        "v",
        "b13",
        "t24",
        "v",
        "b14",
        "t25",
        "v",
        "b15",
        "v",
        "a",
        "t11",
        "v",
        "b0",
        "t12",
        "v",
        "b1",
        "t13",
        "v",
        "b2",
        "t14",
        "v",
        "b3",
        "t15",
        "v",
        "b4",
        "t16",
        "v",
        "b5",
        "t17",
        "v",
        "b6",
        "t18",
        "v",
        "b7",
        "t19",
        "v",
        "b8",
        "t20",
        "v",
        "b9",
        "t21",
        "v",
        "b10",
        "t22",
        "v",
        "b11",
        "t23",
        "v",
        "b12",
        "t24",
        "v",
        "b13",
        "t25",
        "v",
        "b14",
        "t26",
        "v",
        "b15",
        "v",
        "a",
        "t12",
        "v",
        "b0",
        "t13",
        "v",
        "b1",
        "t14",
        "v",
        "b2",
        "t15",
        "v",
        "b3",
        "t16",
        "v",
        "b4",
        "t17",
        "v",
        "b5",
        "t18",
        "v",
        "b6",
        "t19",
        "v",
        "b7",
        "t20",
        "v",
        "b8",
        "t21",
        "v",
        "b9",
        "t22",
        "v",
        "b10",
        "t23",
        "v",
        "b11",
        "t24",
        "v",
        "b12",
        "t25",
        "v",
        "b13",
        "t26",
        "v",
        "b14",
        "t27",
        "v",
        "b15",
        "v",
        "a",
        "t13",
        "v",
        "b0",
        "t14",
        "v",
        "b1",
        "t15",
        "v",
        "b2",
        "t16",
        "v",
        "b3",
        "t17",
        "v",
        "b4",
        "t18",
        "v",
        "b5",
        "t19",
        "v",
        "b6",
        "t20",
        "v",
        "b7",
        "t21",
        "v",
        "b8",
        "t22",
        "v",
        "b9",
        "t23",
        "v",
        "b10",
        "t24",
        "v",
        "b11",
        "t25",
        "v",
        "b12",
        "t26",
        "v",
        "b13",
        "t27",
        "v",
        "b14",
        "t28",
        "v",
        "b15",
        "v",
        "a",
        "t14",
        "v",
        "b0",
        "t15",
        "v",
        "b1",
        "t16",
        "v",
        "b2",
        "t17",
        "v",
        "b3",
        "t18",
        "v",
        "b4",
        "t19",
        "v",
        "b5",
        "t20",
        "v",
        "b6",
        "t21",
        "v",
        "b7",
        "t22",
        "v",
        "b8",
        "t23",
        "v",
        "b9",
        "t24",
        "v",
        "b10",
        "t25",
        "v",
        "b11",
        "t26",
        "v",
        "b12",
        "t27",
        "v",
        "b13",
        "t28",
        "v",
        "b14",
        "t29",
        "v",
        "b15",
        "v",
        "a",
        "t15",
        "v",
        "b0",
        "t16",
        "v",
        "b1",
        "t17",
        "v",
        "b2",
        "t18",
        "v",
        "b3",
        "t19",
        "v",
        "b4",
        "t20",
        "v",
        "b5",
        "t21",
        "v",
        "b6",
        "t22",
        "v",
        "b7",
        "t23",
        "v",
        "b8",
        "t24",
        "v",
        "b9",
        "t25",
        "v",
        "b10",
        "t26",
        "v",
        "b11",
        "t27",
        "v",
        "b12",
        "t28",
        "v",
        "b13",
        "t29",
        "v",
        "b14",
        "t30",
        "v",
        "b15",
        "t0",
        "t16",
        "t1",
        "t17",
        "t2",
        "t18",
        "t3",
        "t19",
        "t4",
        "t20",
        "t5",
        "t21",
        "t6",
        "t22",
        "t7",
        "t23",
        "t8",
        "t24",
        "t9",
        "t25",
        "t10",
        "t26",
        "t11",
        "t27",
        "t12",
        "t28",
        "t13",
        "t29",
        "t14",
        "t30",
        "c",
        "v",
        "t0",
        "c",
        "c",
        "v",
        "t0",
        "v",
        "c",
        "v",
        "t1",
        "c",
        "c",
        "v",
        "t1",
        "v",
        "c",
        "v",
        "t2",
        "c",
        "c",
        "v",
        "t2",
        "v",
        "c",
        "v",
        "t3",
        "c",
        "c",
        "v",
        "t3",
        "v",
        "c",
        "v",
        "t4",
        "c",
        "c",
        "v",
        "t4",
        "v",
        "c",
        "v",
        "t5",
        "c",
        "c",
        "v",
        "t5",
        "v",
        "c",
        "v",
        "t6",
        "c",
        "c",
        "v",
        "t6",
        "v",
        "c",
        "v",
        "t7",
        "c",
        "c",
        "v",
        "t7",
        "v",
        "c",
        "v",
        "t8",
        "c",
        "c",
        "v",
        "t8",
        "v",
        "c",
        "v",
        "t9",
        "c",
        "c",
        "v",
        "t9",
        "v",
        "c",
        "v",
        "t10",
        "c",
        "c",
        "v",
        "t10",
        "v",
        "c",
        "v",
        "t11",
        "c",
        "c",
        "v",
        "t11",
        "v",
        "c",
        "v",
        "t12",
        "c",
        "c",
        "v",
        "t12",
        "v",
        "c",
        "v",
        "t13",
        "c",
        "c",
        "v",
        "t13",
        "v",
        "c",
        "v",
        "t14",
        "c",
        "c",
        "v",
        "t14",
        "v",
        "c",
        "v",
        "t15",
        "c",
        "c",
        "v",
        "t15",
        "v",
        "c",
        "t0",
        "c",
        "c",
        "c",
        "v",
        "t0",
        "c",
        "c",
        "v",
        "t0",
        "v",
        "c",
        "v",
        "t1",
        "c",
        "c",
        "v",
        "t1",
        "v",
        "c",
        "v",
        "t2",
        "c",
        "c",
        "v",
        "t2",
        "v",
        "c",
        "v",
        "t3",
        "c",
        "c",
        "v",
        "t3",
        "v",
        "c",
        "v",
        "t4",
        "c",
        "c",
        "v",
        "t4",
        "v",
        "c",
        "v",
        "t5",
        "c",
        "c",
        "v",
        "t5",
        "v",
        "c",
        "v",
        "t6",
        "c",
        "c",
        "v",
        "t6",
        "v",
        "c",
        "v",
        "t7",
        "c",
        "c",
        "v",
        "t7",
        "v",
        "c",
        "v",
        "t8",
        "c",
        "c",
        "v",
        "t8",
        "v",
        "c",
        "v",
        "t9",
        "c",
        "c",
        "v",
        "t9",
        "v",
        "c",
        "v",
        "t10",
        "c",
        "c",
        "v",
        "t10",
        "v",
        "c",
        "v",
        "t11",
        "c",
        "c",
        "v",
        "t11",
        "v",
        "c",
        "v",
        "t12",
        "c",
        "c",
        "v",
        "t12",
        "v",
        "c",
        "v",
        "t13",
        "c",
        "c",
        "v",
        "t13",
        "v",
        "c",
        "v",
        "t14",
        "c",
        "c",
        "v",
        "t14",
        "v",
        "c",
        "v",
        "t15",
        "c",
        "c",
        "v",
        "t15",
        "v",
        "c",
        "t0",
        "c",
        "c",
        "o",
        "t0",
        "o",
        "t1",
        "o",
        "t2",
        "o",
        "t3",
        "o",
        "t4",
        "o",
        "t5",
        "o",
        "t6",
        "o",
        "t7",
        "o",
        "t8",
        "o",
        "t9",
        "o",
        "t10",
        "o",
        "t11",
        "o",
        "t12",
        "o",
        "t13",
        "o",
        "t14",
        "o",
        "t15",
        "__name",
        "M",
        "o",
        "a",
        "M",
        "o",
        "a",
        "a",
        "__name",
        "S",
        "o",
        "i",
        "gf",
        "a",
        "a",
        "a",
        "c",
        "a",
        "i",
        "a",
        "a",
        "a",
        "a",
        "S",
        "c",
        "c",
        "a",
        "a",
        "M",
        "c",
        "c",
        "i",
        "a",
        "a",
        "a",
        "o",
        "a",
        "c",
        "a",
        "__name",
        "inv25519",
        "o",
        "i",
        "gf",
        "a",
        "a",
        "a",
        "c",
        "a",
        "i",
        "a",
        "a",
        "a",
        "a",
        "S",
        "c",
        "c",
        "a",
        "M",
        "c",
        "c",
        "i",
        "a",
        "a",
        "a",
        "o",
        "a",
        "c",
        "a",
        "__name",
        "pow2523",
        "q",
        "n",
        "p",
        "Uint8Array",
        "Float64Array",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "i",
        "i",
        "i",
        "z",
        "i",
        "n",
        "i",
        "z",
        "n",
        "z",
        "unpack25519",
        "x",
        "p",
        "i",
        "i",
        "i",
        "b",
        "i",
        "x",
        "i",
        "d",
        "i",
        "a",
        "i",
        "c",
        "i",
        "a",
        "d",
        "i",
        "i",
        "i",
        "r",
        "z",
        "i",
        "i",
        "sel25519",
        "a",
        "b",
        "r",
        "sel25519",
        "c",
        "d",
        "r",
        "A",
        "e",
        "a",
        "c",
        "Z",
        "a",
        "a",
        "c",
        "A",
        "c",
        "b",
        "d",
        "Z",
        "b",
        "b",
        "d",
        "S",
        "d",
        "e",
        "S",
        "f",
        "a",
        "M",
        "a",
        "c",
        "a",
        "M",
        "c",
        "b",
        "e",
        "A",
        "e",
        "a",
        "c",
        "Z",
        "a",
        "a",
        "c",
        "S",
        "b",
        "a",
        "Z",
        "c",
        "d",
        "f",
        "M",
        "a",
        "c",
        "_121665",
        "A",
        "a",
        "a",
        "d",
        "M",
        "c",
        "c",
        "a",
        "M",
        "a",
        "d",
        "f",
        "M",
        "d",
        "b",
        "x",
        "S",
        "b",
        "e",
        "sel25519",
        "a",
        "b",
        "r",
        "sel25519",
        "c",
        "d",
        "r",
        "i",
        "i",
        "i",
        "x",
        "i",
        "a",
        "i",
        "x",
        "i",
        "c",
        "i",
        "x",
        "i",
        "b",
        "i",
        "x",
        "i",
        "d",
        "i",
        "x",
        "x",
        "inv25519",
        "x32",
        "x32",
        "M",
        "x16",
        "x16",
        "x32",
        "pack25519",
        "q",
        "x16",
        "__name",
        "crypto_scalarmult",
        "q",
        "n",
        "crypto_scalarmult",
        "q",
        "n",
        "_9",
        "__name",
        "crypto_scalarmult_base",
        "y",
        "x",
        "randombytes",
        "x",
        "crypto_scalarmult_base",
        "y",
        "x",
        "__name",
        "crypto_box_keypair",
        "k",
        "y",
        "x",
        "Uint8Array",
        "crypto_scalarmult",
        "s",
        "x",
        "y",
        "crypto_core_hsalsa20",
        "k",
        "_0",
        "s",
        "sigma",
        "__name",
        "crypto_box_beforenm",
        "c",
        "m",
        "d",
        "n",
        "y",
        "x",
        "Uint8Array",
        "crypto_box_beforenm",
        "k",
        "y",
        "x",
        "crypto_box_afternm",
        "c",
        "m",
        "d",
        "n",
        "k",
        "__name",
        "crypto_box",
        "m",
        "c",
        "d",
        "n",
        "y",
        "x",
        "Uint8Array",
        "crypto_box_beforenm",
        "k",
        "y",
        "x",
        "crypto_box_open_afternm",
        "m",
        "c",
        "d",
        "n",
        "k",
        "__name",
        "crypto_box_open",
        "hh",
        "hl",
        "m",
        "n",
        "Int32Array",
        "Int32Array",
        "hh",
        "hh",
        "hh",
        "hh",
        "hh",
        "hh",
        "hh",
        "hh",
        "hl",
        "hl",
        "hl",
        "hl",
        "hl",
        "hl",
        "hl",
        "hl",
        "n",
        "i",
        "i",
        "i",
        "j",
        "i",
        "pos",
        "wh",
        "i",
        "m",
        "j",
        "m",
        "j",
        "m",
        "j",
        "m",
        "j",
        "wl",
        "i",
        "m",
        "j",
        "m",
        "j",
        "m",
        "j",
        "m",
        "j",
        "i",
        "i",
        "i",
        "bh0",
        "ah0",
        "bh1",
        "ah1",
        "bh2",
        "ah2",
        "bh3",
        "ah3",
        "bh4",
        "ah4",
        "bh5",
        "ah5",
        "bh6",
        "ah6",
        "bh7",
        "ah7",
        "bl0",
        "al0",
        "bl1",
        "al1",
        "bl2",
        "al2",
        "bl3",
        "al3",
        "bl4",
        "al4",
        "bl5",
        "al5",
        "bl6",
        "al6",
        "bl7",
        "al7",
        "h",
        "ah7",
        "l",
        "al7",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "ah4",
        "al4",
        "ah4",
        "al4",
        "al4",
        "ah4",
        "l",
        "al4",
        "ah4",
        "al4",
        "ah4",
        "ah4",
        "al4",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "ah4",
        "ah5",
        "ah4",
        "ah6",
        "l",
        "al4",
        "al5",
        "al4",
        "al6",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "K",
        "i",
        "l",
        "K",
        "i",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "wh",
        "i",
        "l",
        "wl",
        "i",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "b",
        "a",
        "c",
        "b",
        "d",
        "c",
        "th",
        "c",
        "d",
        "tl",
        "a",
        "b",
        "h",
        "th",
        "l",
        "tl",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "ah0",
        "al0",
        "al0",
        "ah0",
        "al0",
        "ah0",
        "l",
        "al0",
        "ah0",
        "ah0",
        "al0",
        "ah0",
        "al0",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "ah0",
        "ah1",
        "ah0",
        "ah2",
        "ah1",
        "ah2",
        "l",
        "al0",
        "al1",
        "al0",
        "al2",
        "al1",
        "al2",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "b",
        "a",
        "c",
        "b",
        "d",
        "c",
        "bh7",
        "c",
        "d",
        "bl7",
        "a",
        "b",
        "h",
        "bh3",
        "l",
        "bl3",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "th",
        "l",
        "tl",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "b",
        "a",
        "c",
        "b",
        "d",
        "c",
        "bh3",
        "c",
        "d",
        "bl3",
        "a",
        "b",
        "ah1",
        "bh0",
        "ah2",
        "bh1",
        "ah3",
        "bh2",
        "ah4",
        "bh3",
        "ah5",
        "bh4",
        "ah6",
        "bh5",
        "ah7",
        "bh6",
        "ah0",
        "bh7",
        "al1",
        "bl0",
        "al2",
        "bl1",
        "al3",
        "bl2",
        "al4",
        "bl3",
        "al5",
        "bl4",
        "al6",
        "bl5",
        "al7",
        "bl6",
        "al0",
        "bl7",
        "i",
        "j",
        "j",
        "j",
        "h",
        "wh",
        "j",
        "l",
        "wl",
        "j",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "wh",
        "j",
        "l",
        "wl",
        "j",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "th",
        "wh",
        "j",
        "tl",
        "wl",
        "j",
        "h",
        "th",
        "tl",
        "th",
        "tl",
        "th",
        "l",
        "tl",
        "th",
        "tl",
        "th",
        "tl",
        "th",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "th",
        "wh",
        "j",
        "tl",
        "wl",
        "j",
        "h",
        "th",
        "tl",
        "tl",
        "th",
        "th",
        "l",
        "tl",
        "th",
        "th",
        "tl",
        "tl",
        "th",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "b",
        "a",
        "c",
        "b",
        "d",
        "c",
        "wh",
        "j",
        "c",
        "d",
        "wl",
        "j",
        "a",
        "b",
        "h",
        "ah0",
        "l",
        "al0",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "hh",
        "l",
        "hl",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "b",
        "a",
        "c",
        "b",
        "d",
        "c",
        "hh",
        "ah0",
        "c",
        "d",
        "hl",
        "al0",
        "a",
        "b",
        "h",
        "ah1",
        "l",
        "al1",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "hh",
        "l",
        "hl",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "b",
        "a",
        "c",
        "b",
        "d",
        "c",
        "hh",
        "ah1",
        "c",
        "d",
        "hl",
        "al1",
        "a",
        "b",
        "h",
        "ah2",
        "l",
        "al2",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "hh",
        "l",
        "hl",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "b",
        "a",
        "c",
        "b",
        "d",
        "c",
        "hh",
        "ah2",
        "c",
        "d",
        "hl",
        "al2",
        "a",
        "b",
        "h",
        "ah3",
        "l",
        "al3",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "hh",
        "l",
        "hl",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "b",
        "a",
        "c",
        "b",
        "d",
        "c",
        "hh",
        "ah3",
        "c",
        "d",
        "hl",
        "al3",
        "a",
        "b",
        "h",
        "ah4",
        "l",
        "al4",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "hh",
        "l",
        "hl",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "b",
        "a",
        "c",
        "b",
        "d",
        "c",
        "hh",
        "ah4",
        "c",
        "d",
        "hl",
        "al4",
        "a",
        "b",
        "h",
        "ah5",
        "l",
        "al5",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "hh",
        "l",
        "hl",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "b",
        "a",
        "c",
        "b",
        "d",
        "c",
        "hh",
        "ah5",
        "c",
        "d",
        "hl",
        "al5",
        "a",
        "b",
        "h",
        "ah6",
        "l",
        "al6",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "hh",
        "l",
        "hl",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "b",
        "a",
        "c",
        "b",
        "d",
        "c",
        "hh",
        "ah6",
        "c",
        "d",
        "hl",
        "al6",
        "a",
        "b",
        "h",
        "ah7",
        "l",
        "al7",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "h",
        "hh",
        "l",
        "hl",
        "a",
        "l",
        "b",
        "l",
        "c",
        "h",
        "d",
        "h",
        "b",
        "a",
        "c",
        "b",
        "d",
        "c",
        "hh",
        "ah7",
        "c",
        "d",
        "hl",
        "al7",
        "a",
        "b",
        "pos",
        "n",
        "n",
        "__name",
        "crypto_hashblocks_hl",
        "m",
        "n",
        "Int32Array",
        "Int32Array",
        "Uint8Array",
        "hh",
        "hh",
        "hh",
        "hh",
        "hh",
        "hh",
        "hh",
        "hh",
        "hl",
        "hl",
        "hl",
        "hl",
        "hl",
        "hl",
        "hl",
        "hl",
        "crypto_hashblocks_hl",
        "hh",
        "hl",
        "m",
        "n",
        "n",
        "i",
        "i",
        "n",
        "i",
        "x",
        "i",
        "m",
        "b",
        "n",
        "i",
        "x",
        "n",
        "n",
        "n",
        "x",
        "n",
        "ts64",
        "x",
        "n",
        "b",
        "b",
        "crypto_hashblocks_hl",
        "hh",
        "hl",
        "x",
        "n",
        "i",
        "i",
        "i",
        "ts64",
        "i",
        "hh",
        "i",
        "hl",
        "i",
        "__name",
        "crypto_hash",
        "p",
        "q",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "Z",
        "a",
        "p",
        "p",
        "Z",
        "t",
        "q",
        "q",
        "M",
        "a",
        "a",
        "t",
        "A",
        "b",
        "p",
        "p",
        "A",
        "t",
        "q",
        "q",
        "M",
        "b",
        "b",
        "t",
        "M",
        "c",
        "p",
        "q",
        "M",
        "c",
        "c",
        "D2",
        "M",
        "d",
        "p",
        "q",
        "A",
        "d",
        "d",
        "d",
        "Z",
        "e",
        "b",
        "a",
        "Z",
        "f",
        "d",
        "c",
        "A",
        "g",
        "d",
        "c",
        "A",
        "h",
        "b",
        "a",
        "M",
        "p",
        "e",
        "f",
        "M",
        "p",
        "h",
        "g",
        "M",
        "p",
        "g",
        "f",
        "M",
        "p",
        "e",
        "h",
        "__name",
        "add",
        "p",
        "q",
        "b",
        "i",
        "i",
        "i",
        "sel25519",
        "p",
        "i",
        "q",
        "i",
        "b",
        "__name",
        "cswap",
        "r",
        "p",
        "gf",
        "gf",
        "gf",
        "inv25519",
        "zi",
        "p",
        "M",
        "tx",
        "p",
        "zi",
        "M",
        "ty",
        "p",
        "zi",
        "pack25519",
        "r",
        "ty",
        "r",
        "par25519",
        "tx",
        "__name",
        "pack",
        "p",
        "q",
        "s",
        "set25519",
        "p",
        "gf0",
        "set25519",
        "p",
        "gf1",
        "set25519",
        "p",
        "gf1",
        "set25519",
        "p",
        "gf0",
        "i",
        "i",
        "i",
        "b",
        "s",
        "i",
        "i",
        "cswap",
        "p",
        "q",
        "b",
        "add",
        "q",
        "p",
        "add",
        "p",
        "p",
        "cswap",
        "p",
        "q",
        "b",
        "__name",
        "scalarmult",
        "p",
        "s",
        "gf",
        "gf",
        "gf",
        "gf",
        "set25519",
        "q",
        "X",
        "set25519",
        "q",
        "Y",
        "set25519",
        "q",
        "gf1",
        "M",
        "q",
        "X",
        "Y",
        "scalarmult",
        "p",
        "q",
        "s",
        "__name",
        "scalarbase",
        "pk",
        "sk",
        "seeded",
        "Uint8Array",
        "gf",
        "gf",
        "gf",
        "gf",
        "seeded",
        "randombytes",
        "sk",
        "crypto_hash",
        "d",
        "sk",
        "d",
        "d",
        "d",
        "scalarbase",
        "p",
        "d",
        "pack",
        "pk",
        "p",
        "i",
        "i",
        "i",
        "sk",
        "i",
        "pk",
        "i",
        "__name",
        "crypto_sign_keypair",
        "Float64Array",
        "r",
        "x",
        "i",
        "i",
        "i",
        "carry",
        "j",
        "i",
        "k",
        "i",
        "j",
        "k",
        "j",
        "x",
        "j",
        "carry",
        "x",
        "i",
        "L",
        "j",
        "i",
        "carry",
        "x",
        "j",
        "x",
        "j",
        "carry",
        "x",
        "j",
        "carry",
        "x",
        "i",
        "carry",
        "j",
        "j",
        "j",
        "x",
        "j",
        "carry",
        "x",
        "L",
        "j",
        "carry",
        "x",
        "j",
        "x",
        "j",
        "j",
        "j",
        "j",
        "x",
        "j",
        "carry",
        "L",
        "j",
        "i",
        "i",
        "i",
        "x",
        "i",
        "x",
        "i",
        "r",
        "i",
        "x",
        "i",
        "__name",
        "modL",
        "r",
        "Float64Array",
        "i",
        "i",
        "i",
        "x",
        "i",
        "r",
        "i",
        "i",
        "i",
        "i",
        "r",
        "i",
        "modL",
        "r",
        "x",
        "__name",
        "reduce",
        "sm",
        "m",
        "n",
        "sk",
        "Uint8Array",
        "Uint8Array",
        "Uint8Array",
        "Float64Array",
        "gf",
        "gf",
        "gf",
        "gf",
        "crypto_hash",
        "d",
        "sk",
        "d",
        "d",
        "d",
        "n",
        "i",
        "i",
        "n",
        "i",
        "sm",
        "i",
        "m",
        "i",
        "i",
        "i",
        "i",
        "sm",
        "i",
        "d",
        "i",
        "crypto_hash",
        "r",
        "sm",
        "n",
        "reduce",
        "r",
        "scalarbase",
        "p",
        "r",
        "pack",
        "sm",
        "p",
        "i",
        "i",
        "i",
        "sm",
        "i",
        "sk",
        "i",
        "crypto_hash",
        "h",
        "sm",
        "n",
        "reduce",
        "h",
        "i",
        "i",
        "i",
        "x",
        "i",
        "i",
        "i",
        "i",
        "x",
        "i",
        "r",
        "i",
        "i",
        "i",
        "i",
        "j",
        "j",
        "j",
        "x",
        "i",
        "j",
        "h",
        "i",
        "d",
        "j",
        "modL",
        "sm",
        "x",
        "smlen",
        "__name",
        "crypto_sign",
        "r",
        "p",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "set25519",
        "r",
        "gf1",
        "unpack25519",
        "r",
        "p",
        "S",
        "num",
        "r",
        "M",
        "den",
        "num",
        "D",
        "Z",
        "num",
        "num",
        "r",
        "A",
        "den",
        "r",
        "den",
        "S",
        "den2",
        "den",
        "S",
        "den4",
        "den2",
        "M",
        "den6",
        "den4",
        "den2",
        "M",
        "t",
        "den6",
        "num",
        "M",
        "t",
        "t",
        "den",
        "pow2523",
        "t",
        "t",
        "M",
        "t",
        "t",
        "num",
        "M",
        "t",
        "t",
        "den",
        "M",
        "t",
        "t",
        "den",
        "M",
        "r",
        "t",
        "den",
        "S",
        "chk",
        "r",
        "M",
        "chk",
        "chk",
        "den",
        "neq25519",
        "chk",
        "num",
        "M",
        "r",
        "r",
        "I",
        "S",
        "chk",
        "r",
        "M",
        "chk",
        "chk",
        "den",
        "neq25519",
        "chk",
        "num",
        "par25519",
        "r",
        "p",
        "Z",
        "r",
        "gf0",
        "r",
        "M",
        "r",
        "r",
        "r",
        "__name",
        "unpackneg",
        "m",
        "sm",
        "n",
        "pk",
        "Uint8Array",
        "Uint8Array",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "gf",
        "n",
        "unpackneg",
        "q",
        "pk",
        "i",
        "i",
        "n",
        "i",
        "m",
        "i",
        "sm",
        "i",
        "i",
        "i",
        "i",
        "m",
        "i",
        "pk",
        "i",
        "crypto_hash",
        "h",
        "m",
        "n",
        "reduce",
        "h",
        "scalarmult",
        "p",
        "q",
        "h",
        "scalarbase",
        "q",
        "sm",
        "add",
        "p",
        "q",
        "pack",
        "t",
        "p",
        "n",
        "crypto_verify_32",
        "sm",
        "t",
        "i",
        "i",
        "n",
        "i",
        "m",
        "i",
        "i",
        "i",
        "n",
        "i",
        "m",
        "i",
        "sm",
        "i",
        "n",
        "__name",
        "crypto_sign_open",
        "nacl3",
        "k",
        "n",
        "k",
        "crypto_secretbox_KEYBYTES",
        "n",
        "crypto_secretbox_NONCEBYTES",
        "__name",
        "checkLengths",
        "pk",
        "sk",
        "pk",
        "crypto_box_PUBLICKEYBYTES",
        "sk",
        "crypto_box_SECRETKEYBYTES",
        "__name",
        "checkBoxLengths",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "Uint8Array",
        "__name",
        "checkArrayTypes",
        "arr",
        "i",
        "arr",
        "i",
        "arr",
        "i",
        "__name",
        "cleanup",
        "nacl3",
        "n",
        "Uint8Array",
        "n",
        "randombytes",
        "b",
        "n",
        "b",
        "nacl3",
        "msg",
        "nonce",
        "key",
        "checkArrayTypes",
        "msg",
        "nonce",
        "key",
        "checkLengths",
        "key",
        "nonce",
        "Uint8Array",
        "crypto_secretbox_ZEROBYTES",
        "msg",
        "Uint8Array",
        "m",
        "i",
        "msg",
        "i",
        "m",
        "i",
        "crypto_secretbox_ZEROBYTES",
        "msg",
        "i",
        "crypto_secretbox",
        "c",
        "m",
        "m",
        "nonce",
        "key",
        "c",
        "crypto_secretbox_BOXZEROBYTES",
        "nacl3",
        "box",
        "nonce",
        "key",
        "checkArrayTypes",
        "box",
        "nonce",
        "key",
        "checkLengths",
        "key",
        "nonce",
        "Uint8Array",
        "crypto_secretbox_BOXZEROBYTES",
        "box",
        "Uint8Array",
        "c",
        "i",
        "box",
        "i",
        "c",
        "i",
        "crypto_secretbox_BOXZEROBYTES",
        "box",
        "i",
        "c",
        "crypto_secretbox_open",
        "m",
        "c",
        "c",
        "nonce",
        "key",
        "m",
        "crypto_secretbox_ZEROBYTES",
        "nacl3",
        "crypto_secretbox_KEYBYTES",
        "nacl3",
        "crypto_secretbox_NONCEBYTES",
        "nacl3",
        "crypto_secretbox_BOXZEROBYTES",
        "nacl3",
        "n",
        "p",
        "checkArrayTypes",
        "n",
        "p",
        "n",
        "crypto_scalarmult_SCALARBYTES",
        "p",
        "crypto_scalarmult_BYTES",
        "Uint8Array",
        "crypto_scalarmult_BYTES",
        "crypto_scalarmult",
        "q",
        "n",
        "p",
        "q",
        "nacl3",
        "n",
        "checkArrayTypes",
        "n",
        "n",
        "crypto_scalarmult_SCALARBYTES",
        "Uint8Array",
        "crypto_scalarmult_BYTES",
        "crypto_scalarmult_base",
        "q",
        "n",
        "q",
        "nacl3",
        "crypto_scalarmult_SCALARBYTES",
        "nacl3",
        "crypto_scalarmult_BYTES",
        "nacl3",
        "msg",
        "nonce",
        "publicKey",
        "secretKey",
        "nacl3",
        "publicKey",
        "secretKey",
        "nacl3",
        "msg",
        "nonce",
        "k",
        "nacl3",
        "publicKey",
        "secretKey",
        "checkArrayTypes",
        "publicKey",
        "secretKey",
        "checkBoxLengths",
        "publicKey",
        "secretKey",
        "Uint8Array",
        "crypto_box_BEFORENMBYTES",
        "crypto_box_beforenm",
        "k",
        "publicKey",
        "secretKey",
        "k",
        "nacl3",
        "nacl3",
        "nacl3",
        "msg",
        "nonce",
        "publicKey",
        "secretKey",
        "nacl3",
        "publicKey",
        "secretKey",
        "nacl3",
        "msg",
        "nonce",
        "k",
        "nacl3",
        "nacl3",
        "nacl3",
        "Uint8Array",
        "crypto_box_PUBLICKEYBYTES",
        "Uint8Array",
        "crypto_box_SECRETKEYBYTES",
        "crypto_box_keypair",
        "pk",
        "sk",
        "pk",
        "sk",
        "nacl3",
        "secretKey",
        "checkArrayTypes",
        "secretKey",
        "secretKey",
        "crypto_box_SECRETKEYBYTES",
        "Uint8Array",
        "crypto_box_PUBLICKEYBYTES",
        "crypto_scalarmult_base",
        "pk",
        "secretKey",
        "pk",
        "Uint8Array",
        "secretKey",
        "nacl3",
        "crypto_box_PUBLICKEYBYTES",
        "nacl3",
        "crypto_box_SECRETKEYBYTES",
        "nacl3",
        "crypto_box_BEFORENMBYTES",
        "nacl3",
        "crypto_box_NONCEBYTES",
        "nacl3",
        "nacl3",
        "nacl3",
        "msg",
        "secretKey",
        "checkArrayTypes",
        "msg",
        "secretKey",
        "secretKey",
        "crypto_sign_SECRETKEYBYTES",
        "Uint8Array",
        "crypto_sign_BYTES",
        "msg",
        "crypto_sign",
        "signedMsg",
        "msg",
        "msg",
        "secretKey",
        "signedMsg",
        "nacl3",
        "signedMsg",
        "publicKey",
        "checkArrayTypes",
        "signedMsg",
        "publicKey",
        "publicKey",
        "crypto_sign_PUBLICKEYBYTES",
        "Uint8Array",
        "signedMsg",
        "crypto_sign_open",
        "tmp",
        "signedMsg",
        "signedMsg",
        "publicKey",
        "mlen",
        "Uint8Array",
        "mlen",
        "i",
        "m",
        "i",
        "m",
        "i",
        "tmp",
        "i",
        "m",
        "nacl3",
        "msg",
        "secretKey",
        "nacl3",
        "msg",
        "secretKey",
        "Uint8Array",
        "crypto_sign_BYTES",
        "i",
        "sig",
        "i",
        "sig",
        "i",
        "signedMsg",
        "i",
        "sig",
        "nacl3",
        "msg",
        "sig",
        "publicKey",
        "checkArrayTypes",
        "msg",
        "sig",
        "publicKey",
        "sig",
        "crypto_sign_BYTES",
        "publicKey",
        "crypto_sign_PUBLICKEYBYTES",
        "Uint8Array",
        "crypto_sign_BYTES",
        "msg",
        "Uint8Array",
        "crypto_sign_BYTES",
        "msg",
        "i",
        "i",
        "crypto_sign_BYTES",
        "i",
        "sm",
        "i",
        "sig",
        "i",
        "i",
        "i",
        "msg",
        "i",
        "sm",
        "i",
        "crypto_sign_BYTES",
        "msg",
        "i",
        "crypto_sign_open",
        "m",
        "sm",
        "sm",
        "publicKey",
        "nacl3",
        "Uint8Array",
        "crypto_sign_PUBLICKEYBYTES",
        "Uint8Array",
        "crypto_sign_SECRETKEYBYTES",
        "crypto_sign_keypair",
        "pk",
        "sk",
        "pk",
        "sk",
        "nacl3",
        "secretKey",
        "checkArrayTypes",
        "secretKey",
        "secretKey",
        "crypto_sign_SECRETKEYBYTES",
        "Uint8Array",
        "crypto_sign_PUBLICKEYBYTES",
        "i",
        "pk",
        "i",
        "pk",
        "i",
        "secretKey",
        "i",
        "pk",
        "Uint8Array",
        "secretKey",
        "nacl3",
        "seed",
        "checkArrayTypes",
        "seed",
        "seed",
        "crypto_sign_SEEDBYTES",
        "Uint8Array",
        "crypto_sign_PUBLICKEYBYTES",
        "Uint8Array",
        "crypto_sign_SECRETKEYBYTES",
        "i",
        "i",
        "sk",
        "i",
        "seed",
        "i",
        "crypto_sign_keypair",
        "pk",
        "sk",
        "pk",
        "sk",
        "nacl3",
        "crypto_sign_PUBLICKEYBYTES",
        "nacl3",
        "crypto_sign_SECRETKEYBYTES",
        "nacl3",
        "crypto_sign_SEEDBYTES",
        "nacl3",
        "crypto_sign_BYTES",
        "nacl3",
        "msg",
        "checkArrayTypes",
        "msg",
        "Uint8Array",
        "crypto_hash_BYTES",
        "crypto_hash",
        "h",
        "msg",
        "msg",
        "h",
        "nacl3",
        "crypto_hash_BYTES",
        "nacl3",
        "x",
        "y",
        "checkArrayTypes",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "vn",
        "x",
        "y",
        "x",
        "nacl3",
        "fn",
        "randombytes",
        "fn",
        "crypto2",
        "crypto2",
        "nacl3",
        "x",
        "n",
        "Uint8Array",
        "n",
        "i",
        "i",
        "n",
        "i",
        "QUOTA",
        "crypto2",
        "v",
        "i",
        "i",
        "n",
        "i",
        "QUOTA",
        "i",
        "i",
        "n",
        "i",
        "x",
        "i",
        "v",
        "i",
        "cleanup",
        "v",
        "__require",
        "crypto2",
        "require_crypto",
        "crypto2",
        "crypto2",
        "nacl3",
        "x",
        "n",
        "crypto2",
        "n",
        "i",
        "i",
        "n",
        "i",
        "x",
        "i",
        "v",
        "i",
        "cleanup",
        "v",
        "__commonJS",
        "__commonJS",
        "exports",
        "WINDOW",
        "root",
        "WINDOW",
        "WINDOW",
        "root",
        "process",
        "process",
        "process",
        "NODE_JS",
        "root",
        "WEB_WORKER",
        "root",
        "root",
        "define",
        "define",
        "root",
        "ArrayBuffer",
        "root",
        "obj",
        "obj",
        "ARRAY_BUFFER",
        "root",
        "ArrayBuffer",
        "ArrayBuffer",
        "obj",
        "obj",
        "obj",
        "obj",
        "ArrayBuffer",
        "__name",
        "outputType",
        "is224",
        "message2",
        "Sha256",
        "is224",
        "message2",
        "outputType",
        "__name",
        "is224",
        "createOutputMethod",
        "is224",
        "NODE_JS",
        "method",
        "nodeWrap",
        "method",
        "is224",
        "method",
        "Sha256",
        "is224",
        "method",
        "message2",
        "method",
        "message2",
        "i",
        "OUTPUT_TYPES",
        "i",
        "OUTPUT_TYPES",
        "i",
        "method",
        "createOutputMethod",
        "is224",
        "method",
        "__name",
        "method",
        "is224",
        "require_crypto",
        "require_buffer",
        "is224",
        "Buffer2",
        "root",
        "bufferFrom",
        "Buffer2",
        "bufferFrom",
        "__name",
        "message2",
        "Buffer2",
        "message2",
        "__name",
        "message2",
        "message2",
        "crypto2",
        "algorithm",
        "message2",
        "message2",
        "message2",
        "ERROR",
        "message2",
        "ArrayBuffer",
        "message2",
        "Uint8Array",
        "message2",
        "message2",
        "ArrayBuffer",
        "message2",
        "message2",
        "Buffer2",
        "crypto2",
        "algorithm",
        "bufferFrom",
        "message2",
        "method",
        "message2",
        "nodeMethod",
        "__name",
        "outputType",
        "is224",
        "key",
        "message2",
        "HmacSha256",
        "key",
        "is224",
        "message2",
        "outputType",
        "__name",
        "is224",
        "createHmacOutputMethod",
        "is224",
        "method",
        "key",
        "HmacSha256",
        "key",
        "is224",
        "method",
        "key",
        "message2",
        "method",
        "key",
        "message2",
        "i",
        "OUTPUT_TYPES",
        "i",
        "OUTPUT_TYPES",
        "i",
        "method",
        "createHmacOutputMethod",
        "is224",
        "method",
        "is224",
        "sharedMemory",
        "sharedMemory",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "blocks",
        "is224",
        "is224",
        "__name",
        "Sha256",
        "Sha256",
        "message2",
        "message2",
        "message2",
        "ERROR",
        "ARRAY_BUFFER",
        "message2",
        "ArrayBuffer",
        "message2",
        "Uint8Array",
        "message2",
        "message2",
        "ARRAY_BUFFER",
        "ArrayBuffer",
        "message2",
        "ERROR",
        "ERROR",
        "notString",
        "message2",
        "index",
        "length",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "notString",
        "i",
        "index",
        "length",
        "i",
        "index",
        "blocks2",
        "i",
        "message2",
        "index",
        "SHIFT",
        "i",
        "i",
        "index",
        "length",
        "i",
        "index",
        "code",
        "message2",
        "index",
        "code",
        "blocks2",
        "i",
        "code",
        "SHIFT",
        "i",
        "code",
        "blocks2",
        "i",
        "code",
        "SHIFT",
        "i",
        "blocks2",
        "i",
        "code",
        "SHIFT",
        "i",
        "code",
        "code",
        "blocks2",
        "i",
        "code",
        "SHIFT",
        "i",
        "blocks2",
        "i",
        "code",
        "SHIFT",
        "i",
        "blocks2",
        "i",
        "code",
        "SHIFT",
        "i",
        "code",
        "code",
        "message2",
        "index",
        "blocks2",
        "i",
        "code",
        "SHIFT",
        "i",
        "blocks2",
        "i",
        "code",
        "SHIFT",
        "i",
        "blocks2",
        "i",
        "code",
        "SHIFT",
        "i",
        "blocks2",
        "i",
        "code",
        "SHIFT",
        "i",
        "i",
        "i",
        "i",
        "blocks2",
        "i",
        "i",
        "Sha256",
        "blocks2",
        "blocks2",
        "i",
        "EXTRA",
        "i",
        "blocks2",
        "i",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "blocks2",
        "Sha256",
        "j",
        "j",
        "j",
        "t1",
        "blocks2",
        "j",
        "s0",
        "t1",
        "t1",
        "t1",
        "t1",
        "t1",
        "t1",
        "blocks2",
        "j",
        "s1",
        "t1",
        "t1",
        "t1",
        "t1",
        "t1",
        "blocks2",
        "j",
        "blocks2",
        "j",
        "s0",
        "blocks2",
        "j",
        "s1",
        "bc",
        "b",
        "c",
        "j",
        "j",
        "j",
        "ab",
        "t1",
        "blocks2",
        "h",
        "t1",
        "d",
        "t1",
        "ab",
        "t1",
        "blocks2",
        "h",
        "t1",
        "d",
        "t1",
        "s0",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "s1",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "ab",
        "a",
        "b",
        "maj",
        "ab",
        "a",
        "c",
        "bc",
        "ch",
        "e",
        "f",
        "e",
        "g",
        "t1",
        "h",
        "s1",
        "ch",
        "K",
        "j",
        "blocks2",
        "j",
        "t2",
        "s0",
        "maj",
        "h",
        "d",
        "t1",
        "d",
        "t1",
        "t2",
        "s0",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "s1",
        "h",
        "h",
        "h",
        "h",
        "h",
        "h",
        "da",
        "d",
        "a",
        "maj",
        "da",
        "d",
        "b",
        "ab",
        "ch",
        "h",
        "e",
        "h",
        "f",
        "t1",
        "g",
        "s1",
        "ch",
        "K",
        "j",
        "blocks2",
        "j",
        "t2",
        "s0",
        "maj",
        "g",
        "c",
        "t1",
        "c",
        "t1",
        "t2",
        "s0",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "s1",
        "g",
        "g",
        "g",
        "g",
        "g",
        "g",
        "cd",
        "c",
        "d",
        "maj",
        "cd",
        "c",
        "a",
        "da",
        "ch",
        "g",
        "h",
        "g",
        "e",
        "t1",
        "f",
        "s1",
        "ch",
        "K",
        "j",
        "blocks2",
        "j",
        "t2",
        "s0",
        "maj",
        "f",
        "b",
        "t1",
        "b",
        "t1",
        "t2",
        "s0",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "s1",
        "f",
        "f",
        "f",
        "f",
        "f",
        "f",
        "bc",
        "b",
        "c",
        "maj",
        "bc",
        "b",
        "d",
        "cd",
        "ch",
        "f",
        "g",
        "f",
        "h",
        "t1",
        "e",
        "s1",
        "ch",
        "K",
        "j",
        "blocks2",
        "j",
        "t2",
        "s0",
        "maj",
        "e",
        "a",
        "t1",
        "a",
        "t1",
        "t2",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "Sha256",
        "HEX_CHARS",
        "h0",
        "HEX_CHARS",
        "h0",
        "HEX_CHARS",
        "h0",
        "HEX_CHARS",
        "h0",
        "HEX_CHARS",
        "h0",
        "HEX_CHARS",
        "h0",
        "HEX_CHARS",
        "h0",
        "HEX_CHARS",
        "h0",
        "HEX_CHARS",
        "h1",
        "HEX_CHARS",
        "h1",
        "HEX_CHARS",
        "h1",
        "HEX_CHARS",
        "h1",
        "HEX_CHARS",
        "h1",
        "HEX_CHARS",
        "h1",
        "HEX_CHARS",
        "h1",
        "HEX_CHARS",
        "h1",
        "HEX_CHARS",
        "h2",
        "HEX_CHARS",
        "h2",
        "HEX_CHARS",
        "h2",
        "HEX_CHARS",
        "h2",
        "HEX_CHARS",
        "h2",
        "HEX_CHARS",
        "h2",
        "HEX_CHARS",
        "h2",
        "HEX_CHARS",
        "h2",
        "HEX_CHARS",
        "h3",
        "HEX_CHARS",
        "h3",
        "HEX_CHARS",
        "h3",
        "HEX_CHARS",
        "h3",
        "HEX_CHARS",
        "h3",
        "HEX_CHARS",
        "h3",
        "HEX_CHARS",
        "h3",
        "HEX_CHARS",
        "h3",
        "HEX_CHARS",
        "h4",
        "HEX_CHARS",
        "h4",
        "HEX_CHARS",
        "h4",
        "HEX_CHARS",
        "h4",
        "HEX_CHARS",
        "h4",
        "HEX_CHARS",
        "h4",
        "HEX_CHARS",
        "h4",
        "HEX_CHARS",
        "h4",
        "HEX_CHARS",
        "h5",
        "HEX_CHARS",
        "h5",
        "HEX_CHARS",
        "h5",
        "HEX_CHARS",
        "h5",
        "HEX_CHARS",
        "h5",
        "HEX_CHARS",
        "h5",
        "HEX_CHARS",
        "h5",
        "HEX_CHARS",
        "h5",
        "HEX_CHARS",
        "h6",
        "HEX_CHARS",
        "h6",
        "HEX_CHARS",
        "h6",
        "HEX_CHARS",
        "h6",
        "HEX_CHARS",
        "h6",
        "HEX_CHARS",
        "h6",
        "HEX_CHARS",
        "h6",
        "HEX_CHARS",
        "h6",
        "hex",
        "HEX_CHARS",
        "h7",
        "HEX_CHARS",
        "h7",
        "HEX_CHARS",
        "h7",
        "HEX_CHARS",
        "h7",
        "HEX_CHARS",
        "h7",
        "HEX_CHARS",
        "h7",
        "HEX_CHARS",
        "h7",
        "HEX_CHARS",
        "h7",
        "hex",
        "Sha256",
        "Sha256",
        "Sha256",
        "h0",
        "h0",
        "h0",
        "h0",
        "h1",
        "h1",
        "h1",
        "h1",
        "h2",
        "h2",
        "h2",
        "h2",
        "h3",
        "h3",
        "h3",
        "h3",
        "h4",
        "h4",
        "h4",
        "h4",
        "h5",
        "h5",
        "h5",
        "h5",
        "h6",
        "h6",
        "h6",
        "h6",
        "arr",
        "h7",
        "h7",
        "h7",
        "h7",
        "arr",
        "Sha256",
        "Sha256",
        "Sha256",
        "ArrayBuffer",
        "DataView",
        "buffer",
        "dataView",
        "dataView",
        "dataView",
        "dataView",
        "dataView",
        "dataView",
        "dataView",
        "dataView",
        "buffer",
        "key",
        "is224",
        "sharedMemory",
        "key",
        "key",
        "i",
        "i",
        "length",
        "i",
        "code",
        "key",
        "i",
        "code",
        "index",
        "code",
        "code",
        "index",
        "code",
        "index",
        "code",
        "code",
        "code",
        "index",
        "code",
        "index",
        "code",
        "index",
        "code",
        "code",
        "code",
        "key",
        "i",
        "index",
        "code",
        "index",
        "code",
        "index",
        "code",
        "index",
        "code",
        "key",
        "key",
        "ERROR",
        "ARRAY_BUFFER",
        "key",
        "ArrayBuffer",
        "key",
        "Uint8Array",
        "key",
        "key",
        "ARRAY_BUFFER",
        "ArrayBuffer",
        "key",
        "ERROR",
        "ERROR",
        "key",
        "key",
        "Sha256",
        "is224",
        "key",
        "i",
        "i",
        "i",
        "key",
        "i",
        "oKeyPad",
        "i",
        "b",
        "iKeyPad",
        "i",
        "b",
        "Sha256",
        "is224",
        "sharedMemory",
        "iKeyPad",
        "oKeyPad",
        "sharedMemory",
        "__name",
        "HmacSha256",
        "HmacSha256",
        "Sha256",
        "HmacSha256",
        "Sha256",
        "Sha256",
        "innerHash",
        "Sha256",
        "createMethod",
        "exports2",
        "exports2",
        "exports2",
        "createMethod",
        "exports2",
        "createHmacMethod",
        "exports2",
        "createHmacMethod",
        "COMMON_JS",
        "exports2",
        "root",
        "exports2",
        "root",
        "exports2",
        "AMD",
        "define",
        "exports2",
        "__name",
        "key",
        "key",
        "CryptoKey",
        "TextEncoder",
        "TextDecoder",
        "buffers",
        "buffers",
        "acc",
        "acc",
        "length",
        "Uint8Array",
        "size",
        "buffer",
        "buffers",
        "buf",
        "buffer",
        "i",
        "i",
        "buffer",
        "buf",
        "__name",
        "concat",
        "__name",
        "input",
        "unencoded",
        "unencoded",
        "encoder",
        "unencoded",
        "i",
        "unencoded",
        "i",
        "CHUNK_SIZE",
        "arr",
        "unencoded",
        "i",
        "i",
        "CHUNK_SIZE",
        "btoa",
        "arr",
        "__name",
        "input",
        "encodeBase64",
        "input",
        "__name",
        "encoded",
        "atob",
        "encoded",
        "Uint8Array",
        "binary",
        "i",
        "binary",
        "i",
        "i",
        "binary",
        "i",
        "__name",
        "input",
        "encoded",
        "Uint8Array",
        "encoded",
        "decoder",
        "encoded",
        "encoded",
        "encoded",
        "decodeBase64",
        "encoded",
        "message2",
        "options",
        "message2",
        "options",
        "__name",
        "JOSEError",
        "JOSEError",
        "JOSEError",
        "message2",
        "payload",
        "claim",
        "reason",
        "message2",
        "claim",
        "reason",
        "payload",
        "__name",
        "JWTClaimValidationFailed",
        "JWTClaimValidationFailed",
        "JOSEError",
        "message2",
        "payload",
        "claim",
        "reason",
        "message2",
        "claim",
        "reason",
        "payload",
        "__name",
        "JWTExpired",
        "JWTExpired",
        "JOSEError",
        "arguments",
        "__name",
        "JOSEAlgNotAllowed",
        "JOSEAlgNotAllowed",
        "JOSEError",
        "arguments",
        "__name",
        "JOSENotSupported",
        "JOSENotSupported",
        "JOSEError",
        "message2",
        "options",
        "message2",
        "options",
        "__name",
        "JWEDecryptionFailed",
        "JWEDecryptionFailed",
        "JOSEError",
        "arguments",
        "__name",
        "JWEInvalid",
        "JWEInvalid",
        "JOSEError",
        "arguments",
        "__name",
        "JWSInvalid",
        "JWSInvalid",
        "JOSEError",
        "arguments",
        "__name",
        "JWTInvalid",
        "JWTInvalid",
        "JOSEError",
        "arguments",
        "__name",
        "JWKInvalid",
        "JWKInvalid",
        "JOSEError",
        "arguments",
        "__name",
        "JWKSInvalid",
        "JWKSInvalid",
        "JOSEError",
        "message2",
        "options",
        "message2",
        "options",
        "__name",
        "JWKSNoMatchingKey",
        "JWKSNoMatchingKey",
        "JOSEError",
        "message2",
        "options",
        "message2",
        "options",
        "__name",
        "JWKSMultipleMatchingKeys",
        "JWKSMultipleMatchingKeys",
        "JOSEError",
        "message2",
        "options",
        "message2",
        "options",
        "__name",
        "JWKSTimeout",
        "JWKSTimeout",
        "JOSEError",
        "message2",
        "options",
        "message2",
        "options",
        "__name",
        "JWSSignatureVerificationFailed",
        "JWSSignatureVerificationFailed",
        "name",
        "prop",
        "prop",
        "name",
        "__name",
        "unusable",
        "algorithm",
        "name",
        "algorithm",
        "name",
        "__name",
        "isAlgorithm",
        "hash",
        "parseInt",
        "hash",
        "__name",
        "getHashLength",
        "alg",
        "alg",
        "__name",
        "getNamedCurve",
        "key",
        "usages",
        "usages",
        "usages",
        "expected",
        "key",
        "expected",
        "usages",
        "usages",
        "msg",
        "usages",
        "last",
        "usages",
        "msg",
        "usages",
        "usages",
        "msg",
        "usages",
        "msg",
        "__name",
        "checkUsage",
        "key",
        "alg",
        "usages",
        "alg",
        "isAlgorithm",
        "key",
        "unusable",
        "parseInt",
        "alg",
        "getHashLength",
        "key",
        "actual",
        "expected",
        "unusable",
        "expected",
        "isAlgorithm",
        "key",
        "unusable",
        "parseInt",
        "alg",
        "getHashLength",
        "key",
        "actual",
        "expected",
        "unusable",
        "expected",
        "isAlgorithm",
        "key",
        "unusable",
        "parseInt",
        "alg",
        "getHashLength",
        "key",
        "actual",
        "expected",
        "unusable",
        "expected",
        "key",
        "key",
        "unusable",
        "isAlgorithm",
        "key",
        "unusable",
        "isAlgorithm",
        "key",
        "unusable",
        "getNamedCurve",
        "alg",
        "key",
        "actual",
        "expected",
        "unusable",
        "expected",
        "checkUsage",
        "key",
        "usages",
        "__name",
        "checkSigCryptoKey",
        "msg",
        "actual",
        "types2",
        "types2",
        "types2",
        "types2",
        "types2",
        "msg",
        "types2",
        "last",
        "types2",
        "msg",
        "types2",
        "types2",
        "msg",
        "types2",
        "actual",
        "msg",
        "actual",
        "actual",
        "actual",
        "msg",
        "actual",
        "actual",
        "actual",
        "actual",
        "msg",
        "actual",
        "msg",
        "__name",
        "message",
        "__name",
        "actual",
        "types2",
        "message",
        "actual",
        "types2",
        "alg",
        "actual",
        "types2",
        "message",
        "alg",
        "actual",
        "types2",
        "__name",
        "withAlg",
        "__name",
        "key",
        "isCryptoKey",
        "key",
        "key",
        "__name",
        "headers",
        "headers",
        "sources",
        "sources",
        "header",
        "sources",
        "header",
        "acc",
        "acc",
        "acc",
        "parameters",
        "parameter",
        "parameters",
        "acc",
        "parameter",
        "acc",
        "parameter",
        "value",
        "value",
        "value",
        "__name",
        "isObjectLike",
        "input",
        "isObjectLike",
        "input",
        "input",
        "input",
        "proto",
        "proto",
        "proto",
        "input",
        "proto",
        "__name",
        "isObject",
        "__name",
        "alg",
        "key",
        "alg",
        "alg",
        "key",
        "modulusLength",
        "modulusLength",
        "alg",
        "key",
        "isObject",
        "key",
        "key",
        "__name",
        "isJWK",
        "key",
        "key",
        "key",
        "__name",
        "isPrivateJWK",
        "key",
        "key",
        "key",
        "__name",
        "isPublicJWK",
        "key",
        "isJWK",
        "key",
        "key",
        "key",
        "__name",
        "isSecretJWK",
        "jwk",
        "jwk",
        "jwk",
        "algorithm",
        "jwk",
        "keyUsages",
        "jwk",
        "algorithm",
        "jwk",
        "keyUsages",
        "jwk",
        "algorithm",
        "parseInt",
        "jwk",
        "keyUsages",
        "jwk",
        "JOSENotSupported",
        "jwk",
        "algorithm",
        "keyUsages",
        "jwk",
        "algorithm",
        "keyUsages",
        "jwk",
        "algorithm",
        "keyUsages",
        "jwk",
        "algorithm",
        "jwk",
        "keyUsages",
        "jwk",
        "JOSENotSupported",
        "jwk",
        "algorithm",
        "keyUsages",
        "jwk",
        "algorithm",
        "jwk",
        "keyUsages",
        "jwk",
        "algorithm",
        "jwk",
        "keyUsages",
        "jwk",
        "JOSENotSupported",
        "JOSENotSupported",
        "__name",
        "subtleMapping",
        "__name",
        "jwk",
        "jwk",
        "subtleMapping",
        "jwk",
        "algorithm",
        "jwk",
        "jwk",
        "keyUsages",
        "jwk",
        "keyData",
        "keyData",
        "webcrypto_default",
        "keyData",
        "rest",
        "__name",
        "k",
        "decode",
        "k",
        "__name",
        "key",
        "key",
        "__name",
        "cache",
        "key",
        "jwk",
        "alg",
        "freeze",
        "cache",
        "key",
        "cached",
        "alg",
        "cached",
        "alg",
        "jwk_to_key_default",
        "jwk",
        "freeze",
        "key",
        "cached",
        "cache",
        "key",
        "alg",
        "cryptoKey",
        "cached",
        "alg",
        "cryptoKey",
        "cryptoKey",
        "__name",
        "key",
        "alg",
        "isKeyObject",
        "key",
        "key",
        "jwk",
        "jwk",
        "jwk",
        "jwk",
        "jwk",
        "jwk",
        "jwk",
        "exportKeyValue",
        "jwk",
        "pubCache",
        "pubCache",
        "importAndCache",
        "pubCache",
        "key",
        "jwk",
        "alg",
        "isJWK",
        "key",
        "key",
        "decode",
        "key",
        "pubCache",
        "pubCache",
        "importAndCache",
        "pubCache",
        "key",
        "key",
        "alg",
        "cryptoKey",
        "key",
        "__name",
        "key",
        "alg",
        "isKeyObject",
        "key",
        "key",
        "jwk",
        "exportKeyValue",
        "jwk",
        "privCache",
        "privCache",
        "importAndCache",
        "privCache",
        "key",
        "jwk",
        "alg",
        "isJWK",
        "key",
        "key",
        "decode",
        "key",
        "privCache",
        "privCache",
        "importAndCache",
        "privCache",
        "key",
        "key",
        "alg",
        "cryptoKey",
        "key",
        "jwk",
        "alg",
        "isObject",
        "jwk",
        "alg",
        "alg",
        "jwk",
        "jwk",
        "jwk",
        "jwk",
        "decode",
        "jwk",
        "jwk",
        "jwk",
        "JOSENotSupported",
        "jwk_to_key_default",
        "jwk",
        "JOSENotSupported",
        "__name",
        "importJWK",
        "__name",
        "key",
        "key",
        "__name",
        "alg",
        "key",
        "usage",
        "key",
        "key",
        "key",
        "key",
        "usage",
        "usage",
        "key",
        "key",
        "alg",
        "alg",
        "__name",
        "alg",
        "key",
        "usage",
        "allowJwk",
        "key",
        "Uint8Array",
        "allowJwk",
        "isJWK",
        "key",
        "isSecretJWK",
        "key",
        "jwkMatchesOp",
        "alg",
        "key",
        "usage",
        "is_key_like_default",
        "key",
        "withAlg",
        "alg",
        "key",
        "types",
        "allowJwk",
        "key",
        "tag",
        "key",
        "__name",
        "alg",
        "key",
        "usage",
        "allowJwk",
        "allowJwk",
        "isJWK",
        "key",
        "usage",
        "isPrivateJWK",
        "key",
        "jwkMatchesOp",
        "alg",
        "key",
        "usage",
        "isPublicJWK",
        "key",
        "jwkMatchesOp",
        "alg",
        "key",
        "usage",
        "is_key_like_default",
        "key",
        "withAlg",
        "alg",
        "key",
        "types",
        "allowJwk",
        "key",
        "tag",
        "key",
        "usage",
        "key",
        "tag",
        "key",
        "usage",
        "key",
        "tag",
        "key",
        "key",
        "usage",
        "key",
        "tag",
        "key",
        "key",
        "usage",
        "key",
        "tag",
        "key",
        "allowJwk",
        "alg",
        "key",
        "usage",
        "alg",
        "alg",
        "alg",
        "alg",
        "symmetric",
        "symmetricTypeCheck",
        "alg",
        "key",
        "usage",
        "allowJwk",
        "asymmetricTypeCheck",
        "alg",
        "key",
        "usage",
        "allowJwk",
        "__name",
        "checkKeyType",
        "checkKeyType",
        "checkKeyType",
        "Err",
        "recognizedDefault",
        "recognizedOption",
        "protectedHeader",
        "joseHeader",
        "joseHeader",
        "protectedHeader",
        "Err",
        "protectedHeader",
        "protectedHeader",
        "protectedHeader",
        "protectedHeader",
        "protectedHeader",
        "input",
        "input",
        "input",
        "Err",
        "recognizedOption",
        "recognized",
        "recognizedOption",
        "recognizedDefault",
        "recognized",
        "recognizedDefault",
        "parameter",
        "protectedHeader",
        "recognized",
        "parameter",
        "JOSENotSupported",
        "parameter",
        "joseHeader",
        "parameter",
        "Err",
        "parameter",
        "recognized",
        "parameter",
        "protectedHeader",
        "parameter",
        "Err",
        "parameter",
        "protectedHeader",
        "__name",
        "validateCrit",
        "__name",
        "option",
        "algorithms",
        "algorithms",
        "algorithms",
        "algorithms",
        "s",
        "s",
        "option",
        "algorithms",
        "algorithms",
        "alg",
        "algorithm",
        "alg",
        "alg",
        "alg",
        "algorithm",
        "algorithm",
        "JOSENotSupported",
        "alg",
        "__name",
        "subtleDsa",
        "alg",
        "key",
        "usage",
        "usage",
        "key",
        "normalize_key_default",
        "key",
        "alg",
        "usage",
        "key",
        "normalize_key_default",
        "key",
        "alg",
        "isCryptoKey",
        "key",
        "checkSigCryptoKey",
        "key",
        "alg",
        "usage",
        "key",
        "key",
        "Uint8Array",
        "alg",
        "invalid_key_input_default",
        "key",
        "types",
        "webcrypto_default",
        "key",
        "alg",
        "usage",
        "invalid_key_input_default",
        "key",
        "types",
        "__name",
        "getCryptoKey",
        "__name",
        "alg",
        "key",
        "signature",
        "data",
        "getCryptoKey",
        "alg",
        "key",
        "check_key_length_default",
        "alg",
        "cryptoKey",
        "subtleDsa",
        "alg",
        "cryptoKey",
        "webcrypto_default",
        "algorithm",
        "cryptoKey",
        "signature",
        "data",
        "jws",
        "key",
        "options",
        "isObject",
        "jws",
        "JWSInvalid",
        "jws",
        "jws",
        "JWSInvalid",
        "jws",
        "jws",
        "JWSInvalid",
        "jws",
        "JWSInvalid",
        "jws",
        "JWSInvalid",
        "jws",
        "isObject",
        "jws",
        "JWSInvalid",
        "jws",
        "decode",
        "jws",
        "parsedProt",
        "decoder",
        "protectedHeader",
        "JWSInvalid",
        "is_disjoint_default",
        "parsedProt",
        "jws",
        "JWSInvalid",
        "parsedProt",
        "jws",
        "validate_crit_default",
        "JWSInvalid",
        "options",
        "parsedProt",
        "joseHeader",
        "extensions",
        "b64",
        "parsedProt",
        "b64",
        "JWSInvalid",
        "alg",
        "alg",
        "JWSInvalid",
        "options",
        "validate_algorithms_default",
        "options",
        "algorithms",
        "algorithms",
        "alg",
        "JOSEAlgNotAllowed",
        "b64",
        "jws",
        "JWSInvalid",
        "jws",
        "jws",
        "Uint8Array",
        "JWSInvalid",
        "key",
        "key",
        "key",
        "parsedProt",
        "jws",
        "resolvedKey",
        "checkKeyTypeWithJwk",
        "alg",
        "key",
        "isJWK",
        "key",
        "key",
        "importJWK",
        "key",
        "alg",
        "checkKeyTypeWithJwk",
        "alg",
        "key",
        "concat",
        "encoder",
        "jws",
        "encoder",
        "jws",
        "encoder",
        "jws",
        "jws",
        "signature",
        "decode",
        "jws",
        "JWSInvalid",
        "verify_default",
        "alg",
        "key",
        "signature",
        "data",
        "verified",
        "JWSSignatureVerificationFailed",
        "b64",
        "payload",
        "decode",
        "jws",
        "JWSInvalid",
        "jws",
        "payload",
        "encoder",
        "jws",
        "payload",
        "jws",
        "jws",
        "result",
        "parsedProt",
        "jws",
        "result",
        "jws",
        "resolvedKey",
        "result",
        "result",
        "__name",
        "flattenedVerify",
        "jws",
        "key",
        "options",
        "jws",
        "Uint8Array",
        "jws",
        "decoder",
        "jws",
        "jws",
        "JWSInvalid",
        "jws",
        "length",
        "JWSInvalid",
        "flattenedVerify",
        "protectedHeader",
        "key",
        "options",
        "verified",
        "verified",
        "key",
        "result",
        "verified",
        "result",
        "__name",
        "compactVerify",
        "__name",
        "date",
        "date",
        "minute",
        "hour",
        "day",
        "day",
        "__name",
        "REGEX",
        "matched",
        "matched",
        "matched",
        "parseFloat",
        "matched",
        "matched",
        "unit",
        "numericDate",
        "value",
        "numericDate",
        "value",
        "minute",
        "numericDate",
        "value",
        "hour",
        "numericDate",
        "value",
        "day",
        "numericDate",
        "value",
        "week",
        "numericDate",
        "value",
        "year",
        "matched",
        "matched",
        "numericDate",
        "numericDate",
        "__name",
        "value",
        "value",
        "__name",
        "audPayload",
        "audOption",
        "audPayload",
        "audOption",
        "audPayload",
        "audPayload",
        "audOption",
        "audPayload",
        "__name",
        "protectedHeader",
        "encodedPayload",
        "options",
        "payload",
        "decoder",
        "encodedPayload",
        "isObject",
        "payload",
        "JWTInvalid",
        "typ",
        "protectedHeader",
        "normalizeTyp",
        "protectedHeader",
        "normalizeTyp",
        "typ",
        "JWTClaimValidationFailed",
        "payload",
        "requiredClaims",
        "maxTokenAge",
        "presenceCheck",
        "audience",
        "presenceCheck",
        "subject",
        "presenceCheck",
        "issuer",
        "presenceCheck",
        "claim",
        "presenceCheck",
        "claim",
        "payload",
        "JWTClaimValidationFailed",
        "claim",
        "payload",
        "claim",
        "issuer",
        "issuer",
        "issuer",
        "issuer",
        "payload",
        "JWTClaimValidationFailed",
        "payload",
        "subject",
        "payload",
        "subject",
        "JWTClaimValidationFailed",
        "payload",
        "audience",
        "checkAudiencePresence",
        "payload",
        "audience",
        "audience",
        "audience",
        "JWTClaimValidationFailed",
        "payload",
        "options",
        "tolerance",
        "secs_default",
        "options",
        "tolerance",
        "options",
        "tolerance",
        "epoch_default",
        "currentDate",
        "payload",
        "maxTokenAge",
        "payload",
        "JWTClaimValidationFailed",
        "payload",
        "payload",
        "payload",
        "JWTClaimValidationFailed",
        "payload",
        "payload",
        "now",
        "tolerance",
        "JWTClaimValidationFailed",
        "payload",
        "payload",
        "payload",
        "JWTClaimValidationFailed",
        "payload",
        "payload",
        "now",
        "tolerance",
        "JWTExpired",
        "payload",
        "maxTokenAge",
        "now",
        "payload",
        "maxTokenAge",
        "maxTokenAge",
        "secs_default",
        "maxTokenAge",
        "age",
        "tolerance",
        "max",
        "JWTExpired",
        "payload",
        "age",
        "tolerance",
        "JWTClaimValidationFailed",
        "payload",
        "payload",
        "jwt",
        "key",
        "options",
        "compactVerify",
        "jwt",
        "key",
        "options",
        "verified",
        "verified",
        "JWTInvalid",
        "jwt_claims_set_default",
        "verified",
        "verified",
        "options",
        "verified",
        "key",
        "result",
        "verified",
        "result",
        "__name",
        "jwtVerify",
        "__name",
        "alg",
        "key",
        "data",
        "getCryptoKey",
        "alg",
        "key",
        "check_key_length_default",
        "alg",
        "cryptoKey",
        "webcrypto_default",
        "subtleDsa",
        "alg",
        "cryptoKey",
        "cryptoKey",
        "data",
        "Uint8Array",
        "signature",
        "payload",
        "payload",
        "Uint8Array",
        "payload",
        "protectedHeader",
        "protectedHeader",
        "unprotectedHeader",
        "unprotectedHeader",
        "key",
        "options",
        "JWSInvalid",
        "is_disjoint_default",
        "JWSInvalid",
        "validate_crit_default",
        "JWSInvalid",
        "options",
        "joseHeader",
        "extensions",
        "b64",
        "b64",
        "JWSInvalid",
        "alg",
        "alg",
        "JWSInvalid",
        "checkKeyTypeWithJwk",
        "alg",
        "key",
        "b64",
        "payload",
        "encoder",
        "encode",
        "payload",
        "protectedHeader",
        "encoder",
        "encode",
        "protectedHeader",
        "encoder",
        "concat",
        "protectedHeader",
        "encoder",
        "payload",
        "sign_default",
        "alg",
        "key",
        "data",
        "encode",
        "signature",
        "b64",
        "jws",
        "decoder",
        "payload",
        "jws",
        "jws",
        "decoder",
        "protectedHeader",
        "jws",
        "__name",
        "FlattenedSign",
        "payload",
        "FlattenedSign",
        "payload",
        "protectedHeader",
        "protectedHeader",
        "key",
        "options",
        "key",
        "options",
        "jws",
        "jws",
        "jws",
        "jws",
        "__name",
        "CompactSign",
        "label",
        "input",
        "input",
        "label",
        "input",
        "__name",
        "validateInput",
        "payload",
        "isObject",
        "payload",
        "payload",
        "issuer",
        "issuer",
        "subject",
        "subject",
        "audience",
        "audience",
        "jwtId",
        "jwtId",
        "input",
        "input",
        "validateInput",
        "input",
        "input",
        "validateInput",
        "epoch_default",
        "input",
        "epoch_default",
        "secs_default",
        "input",
        "input",
        "input",
        "validateInput",
        "input",
        "input",
        "validateInput",
        "epoch_default",
        "input",
        "epoch_default",
        "secs_default",
        "input",
        "input",
        "input",
        "epoch_default",
        "input",
        "validateInput",
        "epoch_default",
        "input",
        "input",
        "validateInput",
        "epoch_default",
        "secs_default",
        "input",
        "validateInput",
        "input",
        "__name",
        "ProduceJWT",
        "ProduceJWT",
        "protectedHeader",
        "protectedHeader",
        "key",
        "options",
        "CompactSign",
        "encoder",
        "sig",
        "JWTInvalid",
        "sig",
        "key",
        "options",
        "__name",
        "SignJWT",
        "__toESM",
        "require_nacl_fast",
        "atob",
        "atob",
        "globalThis",
        "Response",
        "loginPage",
        "globalThis",
        "__name",
        "renderLoginPage",
        "request",
        "env",
        "request",
        "env",
        "password",
        "savedPass",
        "Response",
        "env",
        "secretKey",
        "secretKey",
        "generateSecretKey",
        "env",
        "secretKey",
        "TextEncoder",
        "secretKey",
        "SignJWT",
        "globalThis",
        "secret",
        "Response",
        "jwtToken",
        "__name",
        "generateJWTToken",
        "import_tweetnacl",
        "key",
        "__name",
        "generateSecretKey",
        "request",
        "env",
        "env",
        "TextEncoder",
        "secretKey",
        "request",
        "cookie",
        "cookie",
        "token",
        "jwtVerify",
        "token",
        "secret",
        "payload",
        "error",
        "error",
        "__name",
        "Authenticate",
        "Response",
        "__name",
        "logout",
        "request",
        "env",
        "Authenticate",
        "request",
        "env",
        "env",
        "oldPwd",
        "auth",
        "Response",
        "request",
        "newPwd",
        "oldPwd",
        "Response",
        "env",
        "newPwd",
        "Response",
        "__name",
        "resetPassword",
        "request",
        "env",
        "Authenticate",
        "request",
        "env",
        "auth",
        "Response",
        "globalThis",
        "request",
        "generateJWTToken",
        "request",
        "env",
        "renderLoginPage",
        "__name",
        "login",
        "cleanIPs",
        "enableIPv6",
        "resolveDNS",
        "globalThis",
        "enableIPv6",
        "resolved",
        "ip",
        "ip",
        "globalThis",
        "resolved",
        "defaultIPv6",
        "cleanIPs",
        "cleanIPs",
        "__name",
        "getConfigAddresses",
        "warpConfigs",
        "isWoW",
        "isWoW",
        "warpConfigs",
        "index",
        "warpConfig",
        "warpConfig",
        "warpConfig",
        "warpConfigs",
        "index",
        "__name",
        "extractWireguardParams",
        "index",
        "port",
        "address",
        "cleanIPs",
        "protocol",
        "configType",
        "configType",
        "configType",
        "cleanIPs",
        "address",
        "addressType",
        "addressType",
        "isDomain",
        "address",
        "isIPv4",
        "address",
        "isIPv6",
        "address",
        "index",
        "protocol",
        "addressType",
        "port",
        "__name",
        "generateRemark",
        "i",
        "i",
        "result",
        "i",
        "i",
        "result",
        "__name",
        "randomUpperCase",
        "length",
        "characters",
        "i",
        "length",
        "i",
        "result",
        "characters",
        "charactersLength",
        "result",
        "__name",
        "getRandomPath",
        "base64",
        "atob",
        "base64",
        "binaryString",
        "hexString",
        "hex",
        "parseInt",
        "hex",
        "decimalArray",
        "__name",
        "base64ToDecimal",
        "address",
        "ipv4Pattern",
        "address",
        "__name",
        "isIPv4",
        "address",
        "ipv6Pattern",
        "address",
        "__name",
        "isIPv6",
        "url",
        "URL",
        "url",
        "newUrl",
        "isDomain",
        "host",
        "__name",
        "getDomain",
        "__toESM",
        "require_nacl_fast",
        "env",
        "generateKeyPair",
        "generateKeyPair",
        "__name",
        "key",
        "fetch",
        "apiBaseUrl",
        "commonPayload",
        "key",
        "response",
        "key",
        "warpKeys",
        "fetchAccount",
        "key",
        "warpConfigs",
        "key",
        "accountData",
        "warpConfigs",
        "env",
        "configs",
        "__name",
        "fetchWarpConfigs",
        "__name",
        "__name",
        "array",
        "btoa",
        "array",
        "import_tweetnacl2",
        "privateKey",
        "privateKey",
        "privateKey",
        "import_tweetnacl2",
        "privateKey",
        "base64Encode",
        "publicKey",
        "base64Encode",
        "privateKey",
        "publicKeyBase64",
        "privateKeyBase64",
        "request",
        "env",
        "proxySettings",
        "env",
        "warpConfigs",
        "env",
        "error",
        "error",
        "error",
        "proxySettings",
        "proxySettings",
        "updateDataset",
        "request",
        "env",
        "fetchWarpConfigs",
        "env",
        "proxySettings",
        "error",
        "error",
        "warpConfigs",
        "configs",
        "globalThis",
        "proxySettings",
        "proxySettings",
        "updateDataset",
        "request",
        "env",
        "__name",
        "getDataset",
        "request",
        "env",
        "request",
        "request",
        "newSettings",
        "isReset",
        "currentSettings",
        "env",
        "error",
        "error",
        "error",
        "newSettings",
        "newSettings",
        "newSettings",
        "newSettings",
        "newSettings",
        "udpNoises",
        "udpNoiseModes",
        "mode",
        "index",
        "mode",
        "udpNoisePackets",
        "index",
        "udpNoiseDelaysMin",
        "index",
        "udpNoiseDelaysMax",
        "index",
        "udpNoiseCount",
        "index",
        "newSettings",
        "__name",
        "field",
        "newSettings",
        "field",
        "fieldValue",
        "fieldValue",
        "fieldValue",
        "fieldValue",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "extractChainProxyParams",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "udpNoises",
        "udpNoises",
        "currentSettings",
        "btoa",
        "globalThis",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "validateField",
        "currentSettings",
        "globalThis",
        "env",
        "proxySettings",
        "isReset",
        "updateWarpConfigs",
        "request",
        "env",
        "error",
        "error",
        "error",
        "proxySettings",
        "__name",
        "updateDataset",
        "chainProxy",
        "chainProxy",
        "URL",
        "chainProxy",
        "url",
        "protocol",
        "atob",
        "URLSearchParams",
        "url",
        "configParams",
        "url",
        "url",
        "url",
        "value",
        "key",
        "configParams",
        "key",
        "value",
        "configParams",
        "url",
        "url",
        "url",
        "url",
        "configParams",
        "__name",
        "extractChainProxyParams",
        "request",
        "env",
        "Authenticate",
        "request",
        "env",
        "auth",
        "Response",
        "request",
        "fetchWarpConfigs",
        "env",
        "warpPlusError",
        "Response",
        "warpPlusError",
        "Response",
        "error",
        "error",
        "Response",
        "error",
        "Response",
        "__name",
        "updateWarpConfigs",
        "proxySettings",
        "isPassSet",
        "VLConfigs",
        "TRConfigs",
        "globalThis",
        "globalThis",
        "globalThis",
        "allPorts",
        "port",
        "port",
        "ports",
        "port",
        "id",
        "port",
        "isChecked",
        "id",
        "port",
        "globalThis",
        "port",
        "httpsPortsBlock",
        "portBlock",
        "httpPortsBlock",
        "portBlock",
        "xrayUdpNoises",
        "noise",
        "index",
        "udpNoiseBlocks",
        "index",
        "index",
        "index",
        "index",
        "noise",
        "noise",
        "noise",
        "noise",
        "index",
        "index",
        "noise",
        "index",
        "index",
        "noise",
        "index",
        "noise",
        "index",
        "index",
        "noise",
        "__name",
        "apps",
        "apps",
        "app",
        "app",
        "__name",
        "path",
        "app",
        "tag2",
        "title",
        "sbType",
        "hiddifyType",
        "sbType",
        "hiddifyType",
        "globalThis",
        "path",
        "globalThis",
        "app",
        "app",
        "tag2",
        "url",
        "title",
        "__name",
        "path",
        "app",
        "tag2",
        "hiddifyType",
        "hiddifyType",
        "globalThis",
        "path",
        "globalThis",
        "app",
        "app",
        "tag2",
        "url",
        "atob",
        "globalThis",
        "atob",
        "globalThis",
        "atob",
        "atob",
        "remoteDNS",
        "localDNS",
        "VLTRFakeDNS",
        "VLTRFakeDNS",
        "proxyIP",
        "outProxy",
        "cleanIPs",
        "enableIPv6",
        "enableIPv6",
        "customCdnAddrs",
        "customCdnHost",
        "customCdnSni",
        "bestVLTRInterval",
        "VLConfigs",
        "atob",
        "TRConfigs",
        "atob",
        "httpsPortsBlock",
        "httpPortsBlock",
        "httpPortsBlock",
        "lengthMin",
        "lengthMax",
        "intervalMin",
        "intervalMax",
        "fragmentPackets",
        "fragmentPackets",
        "fragmentPackets",
        "fragmentPackets",
        "fragmentPackets",
        "warpEndpoints",
        "warpFakeDNS",
        "warpFakeDNS",
        "warpEnableIPv6",
        "warpEnableIPv6",
        "bestWarpInterval",
        "udpNoiseBlocks",
        "hiddifyNoiseMode",
        "nikaNGNoiseMode",
        "noiseCountMin",
        "noiseCountMax",
        "noiseSizeMin",
        "noiseSizeMax",
        "noiseDelayMin",
        "noiseDelayMax",
        "bypassLAN",
        "blockAds",
        "bypassIran",
        "blockPorn",
        "bypassChina",
        "blockUDP443",
        "bypassRussia",
        "customBypassRules",
        "customBlockRules",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "supportedApps",
        "subURL",
        "atob",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "supportedApps",
        "subQR",
        "atob",
        "subURL",
        "atob",
        "atob",
        "ports",
        "ports",
        "port",
        "globalThis",
        "port",
        "activeProtocols",
        "isPassSet",
        "atob",
        "atob",
        "atob",
        "atob",
        "atob",
        "atob",
        "atob",
        "atob",
        "atob",
        "atob",
        "Response",
        "homePage",
        "globalThis",
        "__name",
        "renderHomePage",
        "uuid",
        "uuidRegex",
        "uuid",
        "__name",
        "isValidUUID",
        "domain",
        "dohURL",
        "encodeURIComponent",
        "domain",
        "dohURL",
        "encodeURIComponent",
        "domain",
        "fetch",
        "dohURLv4",
        "fetch",
        "dohURLv6",
        "ipv4Response",
        "ipv6Response",
        "ipv4Addresses",
        "ipv4Addresses",
        "record",
        "record",
        "ipv6Addresses",
        "ipv6Addresses",
        "record",
        "record",
        "error",
        "error",
        "error",
        "__name",
        "resolveDNS",
        "address",
        "domainPattern",
        "address",
        "__name",
        "isDomain",
        "request",
        "env",
        "Authenticate",
        "request",
        "env",
        "request",
        "auth",
        "Response",
        "updateDataset",
        "request",
        "env",
        "Response",
        "getDataset",
        "request",
        "env",
        "env",
        "pwd",
        "auth",
        "Response",
        "globalThis",
        "pwd",
        "renderHomePage",
        "proxySettings",
        "isPassSet",
        "__name",
        "handlePanel",
        "request",
        "URL",
        "request",
        "url",
        "Response",
        "url",
        "globalThis",
        "url",
        "Request",
        "url",
        "request",
        "request",
        "request",
        "fetch",
        "newRequest",
        "__name",
        "fallback",
        "request",
        "request",
        "fetch",
        "ip",
        "response",
        "Response",
        "geoLocation",
        "error",
        "error",
        "__name",
        "getMyIP",
        "request",
        "env",
        "Authenticate",
        "request",
        "env",
        "auth",
        "Response",
        "getDataset",
        "request",
        "env",
        "extractWireguardParams",
        "warpConfigs",
        "warpEndpoints",
        "endpoint",
        "privateKey",
        "warpIPv6",
        "publicKey",
        "endpoint",
        "warpConfs",
        "warpConf",
        "Response",
        "warpConfs",
        "__name",
        "getWarpConfigFiles",
        "request",
        "env",
        "env",
        "proxyIP",
        "proxyIP",
        "URL",
        "request",
        "URLSearchParams",
        "url",
        "globalThis",
        "globalThis",
        "globalThis",
        "globalThis",
        "env",
        "globalThis",
        "env",
        "globalThis",
        "proxyIPs",
        "proxyIPs",
        "proxyIPs",
        "atob",
        "globalThis",
        "request",
        "globalThis",
        "url",
        "globalThis",
        "searchParams",
        "globalThis",
        "url",
        "globalThis",
        "env",
        "globalThis",
        "env",
        "globalThis",
        "env",
        "userID",
        "pathName",
        "userID",
        "globalThis",
        "atob",
        "hostName",
        "userID",
        "isValidUUID",
        "userID",
        "userID",
        "env",
        "__name",
        "initializeParams",
        "connect",
        "request",
        "WebSocketPair",
        "webSocketPair",
        "webSocket",
        "__name",
        "info",
        "address",
        "portWithRandomLog",
        "info",
        "request",
        "makeReadableWebSocketStream",
        "webSocket",
        "earlyDataHeader",
        "log",
        "readableWebSocketStream",
        "WritableStream",
        "chunk",
        "controller",
        "isDns",
        "udpStreamWrite",
        "udpStreamWrite",
        "chunk",
        "remoteSocketWapper",
        "remoteSocketWapper",
        "writer",
        "chunk",
        "writer",
        "Uint8Array",
        "processVLHeader",
        "chunk",
        "globalThis",
        "address",
        "addressRemote",
        "portWithRandomLog",
        "portRemote",
        "isUDP",
        "hasError",
        "message2",
        "isUDP",
        "portRemote",
        "isDns",
        "Uint8Array",
        "VLVersion",
        "chunk",
        "rawDataIndex",
        "isDns",
        "handleUDPOutBound",
        "webSocket",
        "VLResponseHeader",
        "log",
        "udpStreamWrite",
        "write",
        "udpStreamWrite",
        "rawClientData",
        "handleTCPOutBound",
        "remoteSocketWapper",
        "addressRemote",
        "portRemote",
        "rawClientData",
        "webSocket",
        "VLResponseHeader",
        "log",
        "log",
        "reason",
        "log",
        "reason",
        "err",
        "log",
        "err",
        "Response",
        "client",
        "__name",
        "VLOverWSHandler",
        "targetUuid",
        "getApiResponse",
        "apiResponse",
        "apiResponse",
        "user",
        "user",
        "targetUuid",
        "isUuidInResponse",
        "error",
        "error",
        "__name",
        "checkUuidInApiResponse",
        "remoteSocket",
        "addressRemote",
        "portRemote",
        "rawClientData",
        "webSocket",
        "VLResponseHeader",
        "log",
        "address",
        "port",
        "address",
        "address",
        "atob",
        "address",
        "atob",
        "connect",
        "address",
        "remoteSocket",
        "tcpSocket2",
        "log",
        "address",
        "port",
        "tcpSocket2",
        "writer",
        "rawClientData",
        "writer",
        "tcpSocket2",
        "__name",
        "connectAndWrite",
        "globalThis",
        "panelProxyIP",
        "atob",
        "panelProxyIP",
        "panelProxyIPs",
        "panelProxyIPs",
        "panelProxyIPs",
        "globalThis",
        "addressRemote",
        "connectAndWrite",
        "finalProxyIP",
        "portRemote",
        "tcpSocket2",
        "error",
        "error",
        "safeCloseWebSocket",
        "webSocket",
        "VLRemoteSocketToWS",
        "tcpSocket2",
        "webSocket",
        "VLResponseHeader",
        "log",
        "__name",
        "retry",
        "connectAndWrite",
        "addressRemote",
        "portRemote",
        "VLRemoteSocketToWS",
        "tcpSocket",
        "webSocket",
        "VLResponseHeader",
        "retry",
        "log",
        "__name",
        "handleTCPOutBound",
        "webSocketServer",
        "earlyDataHeader",
        "log",
        "ReadableStream",
        "controller",
        "webSocketServer",
        "readableStreamCancel",
        "controller",
        "message2",
        "webSocketServer",
        "safeCloseWebSocket",
        "webSocketServer",
        "readableStreamCancel",
        "controller",
        "webSocketServer",
        "err",
        "log",
        "controller",
        "err",
        "base64ToArrayBuffer",
        "earlyDataHeader",
        "error",
        "controller",
        "error",
        "earlyData",
        "controller",
        "earlyData",
        "controller",
        "reason",
        "readableStreamCancel",
        "log",
        "reason",
        "readableStreamCancel",
        "safeCloseWebSocket",
        "webSocketServer",
        "stream",
        "__name",
        "makeReadableWebSocketStream",
        "VLBuffer",
        "userID2",
        "VLBuffer",
        "Uint8Array",
        "VLBuffer",
        "Uint8Array",
        "VLBuffer",
        "stringify",
        "slicedBuffer",
        "userID2",
        "userID2",
        "userID2",
        "checkUuidInApiResponse",
        "slicedBufferString",
        "isValidUser",
        "uuids",
        "userUuid",
        "checkUuidInApi",
        "slicedBufferString",
        "userUuid",
        "checkUuidInApiResponse",
        "slicedBufferString",
        "slicedBufferString",
        "isValidUser",
        "Uint8Array",
        "VLBuffer",
        "Uint8Array",
        "VLBuffer",
        "optLength",
        "optLength",
        "command",
        "command",
        "isUDP",
        "command",
        "optLength",
        "VLBuffer",
        "portIndex",
        "portIndex",
        "DataView",
        "portBuffer",
        "portIndex",
        "Uint8Array",
        "VLBuffer",
        "addressIndex",
        "addressIndex",
        "addressBuffer",
        "addressIndex",
        "addressType",
        "addressLength",
        "addressValue",
        "Uint8Array",
        "VLBuffer",
        "addressValueIndex",
        "addressValueIndex",
        "addressLength",
        "addressLength",
        "Uint8Array",
        "VLBuffer",
        "addressValueIndex",
        "addressValueIndex",
        "addressValueIndex",
        "addressValue",
        "TextDecoder",
        "VLBuffer",
        "addressValueIndex",
        "addressValueIndex",
        "addressLength",
        "addressLength",
        "DataView",
        "VLBuffer",
        "addressValueIndex",
        "addressValueIndex",
        "addressLength",
        "i",
        "i",
        "ipv6",
        "dataView",
        "i",
        "addressValue",
        "ipv6",
        "addressType",
        "addressValue",
        "addressType",
        "addressValue",
        "addressValueIndex",
        "addressLength",
        "version",
        "__name",
        "processVLHeader",
        "remoteSocket",
        "webSocket",
        "VLResponseHeader",
        "retry",
        "log",
        "remoteSocket",
        "WritableStream",
        "chunk",
        "controller",
        "hasIncomingData",
        "webSocket",
        "WS_READY_STATE_OPEN",
        "controller",
        "VLHeader",
        "webSocket",
        "Blob",
        "VLHeader",
        "chunk",
        "VLHeader",
        "webSocket",
        "chunk",
        "log",
        "hasIncomingData",
        "reason",
        "reason",
        "error",
        "atob",
        "error",
        "error",
        "safeCloseWebSocket",
        "webSocket",
        "hasIncomingData",
        "retry",
        "log",
        "retry",
        "__name",
        "VLRemoteSocketToWS",
        "base64Str",
        "base64Str",
        "base64Str",
        "base64Str",
        "atob",
        "base64Str",
        "Uint8Array",
        "decode2",
        "c",
        "c",
        "arryBuffer",
        "error",
        "__name",
        "base64ToArrayBuffer",
        "socket",
        "socket",
        "WS_READY_STATE_OPEN",
        "socket",
        "WS_READY_STATE_CLOSING",
        "socket",
        "error",
        "error",
        "__name",
        "safeCloseWebSocket",
        "i",
        "i",
        "byteToHex",
        "i",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "byteToHex",
        "arr",
        "offset",
        "__name",
        "unsafeStringify",
        "arr",
        "offset",
        "unsafeStringify",
        "arr",
        "offset",
        "isValidUUID",
        "uuid",
        "uuid",
        "__name",
        "stringify",
        "webSocket",
        "VLResponseHeader",
        "log",
        "TransformStream",
        "controller",
        "chunk",
        "controller",
        "index",
        "chunk",
        "chunk",
        "index",
        "index",
        "DataView",
        "lengthBuffer",
        "Uint8Array",
        "chunk",
        "index",
        "index",
        "udpPakcetLength",
        "index",
        "index",
        "udpPakcetLength",
        "controller",
        "udpData",
        "controller",
        "transformStream",
        "WritableStream",
        "chunk",
        "fetch",
        "globalThis",
        "chunk",
        "resp",
        "dnsQueryResult",
        "Uint8Array",
        "udpSize",
        "udpSize",
        "webSocket",
        "WS_READY_STATE_OPEN",
        "log",
        "udpSize",
        "isVLHeaderSent",
        "webSocket",
        "Blob",
        "udpSizeBuffer",
        "dnsQueryResult",
        "webSocket",
        "Blob",
        "VLResponseHeader",
        "udpSizeBuffer",
        "dnsQueryResult",
        "isVLHeaderSent",
        "error",
        "log",
        "error",
        "transformStream",
        "chunk",
        "writer",
        "chunk",
        "__name",
        "handleUDPOutBound",
        "__toESM",
        "require_sha256",
        "connect",
        "connect2",
        "request",
        "WebSocketPair",
        "webSocketPair",
        "webSocket",
        "__name",
        "info",
        "address",
        "portWithRandomLog",
        "info",
        "request",
        "makeReadableWebSocketStream2",
        "webSocket",
        "earlyDataHeader",
        "log",
        "readableWebSocketStream",
        "WritableStream",
        "chunk",
        "controller",
        "udpStreamWrite",
        "udpStreamWrite",
        "chunk",
        "remoteSocketWapper",
        "remoteSocketWapper",
        "writer",
        "chunk",
        "writer",
        "parseTRHeader",
        "chunk",
        "address",
        "addressRemote",
        "portWithRandomLog",
        "portRemote",
        "hasError",
        "message2",
        "handleTCPOutBound2",
        "remoteSocketWapper",
        "addressRemote",
        "portRemote",
        "rawClientData",
        "webSocket",
        "log",
        "log",
        "reason",
        "log",
        "reason",
        "err",
        "log",
        "err",
        "Response",
        "client",
        "__name",
        "TROverWSHandler",
        "buffer",
        "buffer",
        "Uint8Array",
        "buffer",
        "Uint8Array",
        "buffer",
        "TextDecoder",
        "buffer",
        "crLfIndex",
        "password",
        "import_js_sha256",
        "globalThis",
        "buffer",
        "crLfIndex",
        "socks5DataBuffer",
        "DataView",
        "socks5DataBuffer",
        "view",
        "cmd",
        "view",
        "atype",
        "addressLength",
        "address",
        "Uint8Array",
        "socks5DataBuffer",
        "addressIndex",
        "addressIndex",
        "addressLength",
        "addressLength",
        "Uint8Array",
        "socks5DataBuffer",
        "addressIndex",
        "addressIndex",
        "addressIndex",
        "address",
        "TextDecoder",
        "socks5DataBuffer",
        "addressIndex",
        "addressIndex",
        "addressLength",
        "addressLength",
        "DataView",
        "socks5DataBuffer",
        "addressIndex",
        "addressIndex",
        "addressLength",
        "i",
        "i",
        "ipv6",
        "dataView",
        "i",
        "address",
        "ipv6",
        "atype",
        "address",
        "atype",
        "addressIndex",
        "addressLength",
        "socks5DataBuffer",
        "portIndex",
        "portIndex",
        "DataView",
        "portBuffer",
        "address",
        "socks5DataBuffer",
        "portIndex",
        "__name",
        "parseTRHeader",
        "remoteSocket",
        "addressRemote",
        "portRemote",
        "rawClientData",
        "webSocket",
        "log",
        "address",
        "port",
        "address",
        "address",
        "atob",
        "address",
        "atob",
        "connect2",
        "address",
        "remoteSocket",
        "tcpSocket2",
        "log",
        "address",
        "port",
        "tcpSocket2",
        "writer",
        "rawClientData",
        "writer",
        "tcpSocket2",
        "__name",
        "connectAndWrite",
        "globalThis",
        "panelProxyIP",
        "atob",
        "panelProxyIP",
        "panelProxyIPs",
        "panelProxyIPs",
        "panelProxyIPs",
        "globalThis",
        "addressRemote",
        "connectAndWrite",
        "finalProxyIP",
        "portRemote",
        "tcpSocket2",
        "error",
        "error",
        "safeCloseWebSocket2",
        "webSocket",
        "TRRemoteSocketToWS",
        "tcpSocket2",
        "webSocket",
        "log",
        "__name",
        "retry",
        "connectAndWrite",
        "addressRemote",
        "portRemote",
        "TRRemoteSocketToWS",
        "tcpSocket",
        "webSocket",
        "retry",
        "log",
        "__name",
        "handleTCPOutBound2",
        "webSocketServer",
        "earlyDataHeader",
        "log",
        "ReadableStream",
        "controller",
        "webSocketServer",
        "readableStreamCancel",
        "controller",
        "message2",
        "webSocketServer",
        "safeCloseWebSocket2",
        "webSocketServer",
        "readableStreamCancel",
        "controller",
        "webSocketServer",
        "err",
        "log",
        "controller",
        "err",
        "base64ToArrayBuffer2",
        "earlyDataHeader",
        "error",
        "controller",
        "error",
        "earlyData",
        "controller",
        "earlyData",
        "controller",
        "reason",
        "readableStreamCancel",
        "log",
        "reason",
        "readableStreamCancel",
        "safeCloseWebSocket2",
        "webSocketServer",
        "stream",
        "__name",
        "makeReadableWebSocketStream2",
        "remoteSocket",
        "webSocket",
        "retry",
        "log",
        "remoteSocket",
        "WritableStream",
        "chunk",
        "controller",
        "hasIncomingData",
        "webSocket",
        "WS_READY_STATE_OPEN2",
        "controller",
        "webSocket",
        "chunk",
        "log",
        "hasIncomingData",
        "reason",
        "reason",
        "error",
        "atob",
        "error",
        "error",
        "safeCloseWebSocket2",
        "webSocket",
        "hasIncomingData",
        "retry",
        "log",
        "retry",
        "__name",
        "TRRemoteSocketToWS",
        "base64Str",
        "base64Str",
        "base64Str",
        "base64Str",
        "atob",
        "base64Str",
        "Uint8Array",
        "decode2",
        "c",
        "c",
        "arryBuffer",
        "error",
        "__name",
        "base64ToArrayBuffer2",
        "socket",
        "socket",
        "WS_READY_STATE_OPEN2",
        "socket",
        "WS_READY_STATE_CLOSING2",
        "socket",
        "error",
        "error",
        "__name",
        "safeCloseWebSocket2",
        "error",
        "atob",
        "atob",
        "globalThis",
        "error",
        "error",
        "error",
        "error",
        "Response",
        "errorPage",
        "__name",
        "renderErrorPage",
        "proxySettings",
        "outboundAddrs",
        "domainToStaticIPs",
        "isWorkerLess",
        "isWarp",
        "bypassIran",
        "bypassChina",
        "bypassRussia",
        "blockAds",
        "blockAds",
        "blockPorn",
        "VLTRFakeDNS",
        "isWarp",
        "warpFakeDNS",
        "isWarp",
        "enableIPv6",
        "isWarp",
        "warpEnableIPv6",
        "isWarp",
        "outboundAddrs",
        "address",
        "isDomain",
        "address",
        "customBypassRules",
        "address",
        "isDomain",
        "address",
        "customBlockRules",
        "address",
        "isDomain",
        "address",
        "outboundDomains",
        "uniqueOutboundDomains",
        "customBypassRulesDomains",
        "bypassIran",
        "bypassChina",
        "bypassRussia",
        "blockAds",
        "blockPorn",
        "customBlockRulesDomains",
        "isWorkerLess",
        "isWarp",
        "warpEnableIPv6",
        "remoteDNS",
        "isBlock",
        "blockRules",
        "rule",
        "dnsHost",
        "host",
        "customBlockRulesDomains",
        "domain",
        "dnsHost",
        "domain",
        "domainToStaticIPs",
        "resolveDNS",
        "domainToStaticIPs",
        "staticIPs",
        "dnsHost",
        "domainToStaticIPs",
        "enableIPv6",
        "staticIPs",
        "staticIPs",
        "staticIPs",
        "isWorkerLess",
        "domains",
        "resolveDNS",
        "resolved",
        "r",
        "r",
        "enableIPv6",
        "resolved",
        "r",
        "r",
        "dnsHost",
        "hostIPv4",
        "hostIPv6",
        "dnsHost",
        "dnsHost",
        "hosts",
        "finalRemoteDNS",
        "isIPv62",
        "getDomain",
        "remoteDNS",
        "dohHost",
        "isWorkerLess",
        "isWarp",
        "dnsObject",
        "dohHost",
        "isDomainRule",
        "uniqueOutboundDomains",
        "domain",
        "domain",
        "customBypassRulesDomains",
        "domain",
        "domain",
        "dnsObject",
        "localDNS",
        "outboundDomainRules",
        "bypassDomainRules",
        "localDNS",
        "isWorkerLess",
        "isBypass",
        "bypassRules",
        "rule",
        "localDNSServer",
        "domain",
        "localDNSServer",
        "ip",
        "dnsObject",
        "localDNSServer",
        "isFakeDNS",
        "isBypass",
        "isWorkerLess",
        "localDNSServer",
        "dnsObject",
        "fakeDNSServer",
        "dnsObject",
        "__name",
        "buildXrayDNS",
        "proxySettings",
        "outboundAddrs",
        "isChain",
        "isBalancer",
        "isWorkerLess",
        "isWarp",
        "bypassLAN",
        "bypassIran",
        "bypassChina",
        "blockAds",
        "blockAds",
        "blockPorn",
        "outboundAddrs",
        "address",
        "isDomain",
        "address",
        "customBypassRules",
        "customBypassRules",
        "customBlockRules",
        "customBlockRules",
        "customBypassRulesTotal",
        "address",
        "isDomain",
        "address",
        "outboundDomains",
        "customBypassRulesDomains",
        "blockAds",
        "blockPorn",
        "customBlockRulesTotal",
        "bypassIran",
        "bypassChina",
        "bypassRussia",
        "customBypassRulesTotal",
        "isChain",
        "isWorkerLess",
        "getDomain",
        "remoteDNS",
        "isWarp",
        "warpEnableIPv6",
        "isRemoteDnsDomain",
        "dohHost",
        "dohHost",
        "isWorkerLess",
        "isWarp",
        "isRemoteDnsDomain",
        "isBalancer",
        "isBalancer",
        "finallOutboundTag",
        "rules",
        "ipDomain",
        "remoteDNSHosts",
        "outboundType",
        "tag2",
        "isWorkerLess",
        "isDomainRule",
        "isBypass",
        "rules",
        "localDNS",
        "blockUDP443",
        "rules",
        "isBypass",
        "isBlock",
        "__name",
        "outbound",
        "outbound",
        "isWorkerLess",
        "domainDirectRule",
        "createRule",
        "ipDirectRule",
        "createRule",
        "createRule",
        "createRule",
        "geoRules",
        "rule",
        "domainDirectRule",
        "domain",
        "ipDirectRule",
        "ip",
        "domainBlockRule",
        "domain",
        "customBypassRulesTotal",
        "address",
        "isDomain",
        "address",
        "domainDirectRule",
        "address",
        "ipDirectRule",
        "address",
        "customBlockRulesTotal",
        "address",
        "isDomain",
        "address",
        "domainBlockRule",
        "address",
        "ipBlockRule",
        "address",
        "domainBlockRule",
        "rules",
        "domainBlockRule",
        "ipBlockRule",
        "rules",
        "ipBlockRule",
        "isWorkerLess",
        "domainDirectRule",
        "rules",
        "domainDirectRule",
        "ipDirectRule",
        "rules",
        "ipDirectRule",
        "isBalancer",
        "rules",
        "rules",
        "finallOutboundTag",
        "rules",
        "__name",
        "buildXrayRoutingRules",
        "tag2",
        "address",
        "port",
        "host",
        "sni",
        "proxyIP",
        "isFragment",
        "allowInsecure",
        "enableIPv6",
        "atob",
        "port",
        "userID2",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "tag2",
        "defaultHttpsPorts",
        "port",
        "outbound",
        "outbound",
        "sni",
        "outbound",
        "isFragment",
        "sockopt",
        "sockopt",
        "sockopt",
        "enableIPv6",
        "outbound",
        "__name",
        "buildXrayVLOutbound",
        "tag2",
        "address",
        "port",
        "host",
        "sni",
        "proxyIP",
        "isFragment",
        "allowInsecure",
        "enableIPv6",
        "atob",
        "port",
        "TRPassword",
        "host",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "tag2",
        "defaultHttpsPorts",
        "port",
        "outbound",
        "outbound",
        "sni",
        "outbound",
        "isFragment",
        "sockopt",
        "sockopt",
        "sockopt",
        "enableIPv6",
        "outbound",
        "__name",
        "buildXrayTROutbound",
        "proxySettings",
        "warpConfigs",
        "endpoint",
        "chain",
        "client",
        "chain",
        "extractWireguardParams",
        "warpConfigs",
        "isWoW",
        "warpIPv6",
        "isWoW",
        "endpoint",
        "base64ToDecimal",
        "reserved",
        "privateKey",
        "chain",
        "isWoW",
        "chain",
        "outbound",
        "client",
        "isWoW",
        "outbound",
        "outbound",
        "nikaNGNoiseMode",
        "noiseCountMin",
        "noiseCountMax",
        "noiseCountMin",
        "noiseCountMin",
        "noiseCountMax",
        "noiseSizeMin",
        "noiseSizeMax",
        "noiseSizeMin",
        "noiseSizeMin",
        "noiseSizeMax",
        "noiseDelayMin",
        "noiseDelayMax",
        "noiseDelayMin",
        "noiseDelayMin",
        "noiseDelayMax",
        "outbound",
        "__name",
        "buildXrayWarpOutbound",
        "chainProxyParams",
        "enableIPv6",
        "chainProxyParams",
        "server2",
        "port2",
        "enableIPv6",
        "atob",
        "server",
        "port",
        "uuid",
        "enableIPv6",
        "security",
        "alpn",
        "alpn",
        "proxyOutbound",
        "fp",
        "tlsAlpns",
        "sni",
        "security",
        "proxyOutbound",
        "proxyOutbound",
        "fp",
        "pbk",
        "sni",
        "sid",
        "spx",
        "headerType",
        "path",
        "host",
        "proxyOutbound",
        "httpHosts",
        "httpPaths",
        "security",
        "headerType",
        "proxyOutbound",
        "proxyOutbound",
        "host",
        "proxyOutbound",
        "proxyOutbound",
        "mode",
        "proxyOutbound",
        "__name",
        "buildXrayChainOutbound",
        "proxySettings",
        "isFragment",
        "isUdpNoises",
        "tag2",
        "tag2",
        "isFragment",
        "outbound",
        "fragmentPackets",
        "lengthMin",
        "lengthMax",
        "intervalMin",
        "intervalMax",
        "outbound",
        "enableIPv6",
        "isUdpNoises",
        "outbound",
        "xrayUdpNoises",
        "noise",
        "noise",
        "noise",
        "outbound",
        "count",
        "noise",
        "isFragment",
        "outbound",
        "warpEnableIPv6",
        "outbound",
        "__name",
        "buildFreedomOutbound",
        "proxySettings",
        "remark",
        "isBalancer",
        "isChain",
        "balancerFallback",
        "isWarp",
        "VLTRFakeDNS",
        "isWarp",
        "warpFakeDNS",
        "isWarp",
        "structuredClone",
        "xrayConfigTemp",
        "config",
        "remark",
        "isFakeDNS",
        "config",
        "config",
        "isBalancer",
        "isWarp",
        "bestWarpInterval",
        "bestVLTRInterval",
        "config",
        "interval",
        "balancerFallback",
        "config",
        "isChain",
        "config",
        "config",
        "config",
        "config",
        "config",
        "__name",
        "buildXrayConfig",
        "proxySettings",
        "totalAddresses",
        "chainProxy",
        "outbounds",
        "isFragment",
        "isFragment",
        "atob",
        "atob",
        "buildXrayConfig",
        "proxySettings",
        "remark",
        "chainProxy",
        "config",
        "buildXrayDNS",
        "proxySettings",
        "totalAddresses",
        "config",
        "buildXrayRoutingRules",
        "proxySettings",
        "totalAddresses",
        "chainProxy",
        "config",
        "outbounds",
        "config",
        "__name",
        "buildXrayBestPingConfig",
        "proxySettings",
        "hostName2",
        "chainProxy",
        "outbounds",
        "buildXrayConfig",
        "proxySettings",
        "atob",
        "chainProxy",
        "config",
        "buildXrayDNS",
        "proxySettings",
        "hostName2",
        "config",
        "buildXrayRoutingRules",
        "proxySettings",
        "chainProxy",
        "outbounds",
        "bestFragValues",
        "fragLength",
        "index",
        "chainProxy",
        "structuredClone",
        "chainProxy",
        "chainOutbound",
        "index",
        "chainOutbound",
        "index",
        "bestFragOutbounds",
        "chainOutbound",
        "structuredClone",
        "outbounds",
        "chainProxy",
        "proxyOutbound",
        "index",
        "proxyOutbound",
        "index",
        "structuredClone",
        "freedomOutbound",
        "fragmentOutbound",
        "index",
        "fragmentOutbound",
        "fragLength",
        "fragmentOutbound",
        "bestFragOutbounds",
        "proxyOutbound",
        "fragmentOutbound",
        "config",
        "bestFragOutbounds",
        "config",
        "__name",
        "buildXrayBestFragmentConfig",
        "proxySettings",
        "buildXrayConfig",
        "proxySettings",
        "atob",
        "buildFreedomOutbound",
        "proxySettings",
        "config",
        "fragmentOutbound",
        "config",
        "buildXrayDNS",
        "proxySettings",
        "config",
        "buildXrayRoutingRules",
        "proxySettings",
        "buildXrayVLOutbound",
        "globalThis",
        "fakeOutbound",
        "config",
        "fakeOutbound",
        "config",
        "__name",
        "buildXrayWorkerLessConfig",
        "request",
        "env",
        "isFragment",
        "getDataset",
        "request",
        "env",
        "outProxy",
        "outProxyParams",
        "chainProxy",
        "buildXrayChainOutbound",
        "proxyParams",
        "enableIPv6",
        "error",
        "error",
        "chainProxy",
        "env",
        "proxySettings",
        "getConfigAddresses",
        "cleanIPs",
        "enableIPv6",
        "customCdnAddrs",
        "customCdnAddrs",
        "isFragment",
        "Addresses",
        "Addresses",
        "customCdnAddresses",
        "ports",
        "port",
        "isFragment",
        "defaultHttpsPorts",
        "port",
        "VLConfigs",
        "protocols",
        "atob",
        "TRConfigs",
        "protocols",
        "atob",
        "isFragment",
        "buildFreedomOutbound",
        "proxySettings",
        "protocol",
        "protocols",
        "port",
        "totalPorts",
        "addr",
        "totalAddresses",
        "customCdnAddresses",
        "addr",
        "isCustomAddr",
        "isFragment",
        "isCustomAddr",
        "customCdnSni",
        "randomUpperCase",
        "hostName2",
        "isCustomAddr",
        "customCdnHost",
        "hostName2",
        "generateRemark",
        "protocolIndex",
        "port",
        "addr",
        "cleanIPs",
        "protocol",
        "configType",
        "buildXrayConfig",
        "proxySettings",
        "remark",
        "chainProxy",
        "isFragment",
        "customConfig",
        "freedomOutbound",
        "customConfig",
        "buildXrayDNS",
        "proxySettings",
        "addr",
        "customConfig",
        "buildXrayRoutingRules",
        "proxySettings",
        "addr",
        "chainProxy",
        "protocol",
        "atob",
        "buildXrayVLOutbound",
        "addr",
        "port",
        "host",
        "sni",
        "proxyIP",
        "isFragment",
        "isCustomAddr",
        "enableIPv6",
        "buildXrayTROutbound",
        "addr",
        "port",
        "host",
        "sni",
        "proxyIP",
        "isFragment",
        "isCustomAddr",
        "enableIPv6",
        "customConfig",
        "outbound",
        "outbound",
        "proxyIndex",
        "chainProxy",
        "customConfig",
        "chainProxy",
        "structuredClone",
        "chainProxy",
        "chainOutbound",
        "proxyIndex",
        "chainOutbound",
        "proxyIndex",
        "outbounds",
        "chainOutbound",
        "outbounds",
        "outbound",
        "configs",
        "customConfig",
        "proxyIndex",
        "protocolIndex",
        "isFragment",
        "outbounds",
        "freedomOutbound",
        "buildXrayBestPingConfig",
        "proxySettings",
        "totalAddresses",
        "chainProxy",
        "outbounds",
        "isFragment",
        "configs",
        "bestPing",
        "isFragment",
        "buildXrayBestFragmentConfig",
        "proxySettings",
        "hostName2",
        "chainProxy",
        "outbounds",
        "buildXrayWorkerLessConfig",
        "proxySettings",
        "finalConfigs",
        "bestFragment",
        "workerLessConfig",
        "Response",
        "finalConfigs",
        "__name",
        "getXrayCustomConfigs",
        "request",
        "env",
        "client",
        "getDataset",
        "request",
        "env",
        "warpEndpoints",
        "endpoint",
        "endpoint",
        "address",
        "isDomain",
        "address",
        "client",
        "client",
        "warpEndpoints",
        "endpoint",
        "buildXrayConfig",
        "proxySettings",
        "index",
        "proIndicator",
        "buildXrayConfig",
        "proxySettings",
        "index",
        "proIndicator",
        "client",
        "freedomOutbound",
        "buildFreedomOutbound",
        "proxySettings",
        "warpConfig",
        "freedomOutbound",
        "WoWConfig",
        "freedomOutbound",
        "warpConfig",
        "WoWConfig",
        "buildXrayDNS",
        "proxySettings",
        "endpointHost",
        "warpConfig",
        "buildXrayRoutingRules",
        "proxySettings",
        "endpointHost",
        "WoWConfig",
        "buildXrayRoutingRules",
        "proxySettings",
        "endpointHost",
        "buildXrayWarpOutbound",
        "proxySettings",
        "warpConfigs",
        "endpoint",
        "xrayWarpChain",
        "client",
        "buildXrayWarpOutbound",
        "proxySettings",
        "warpConfigs",
        "endpoint",
        "client",
        "warpConfig",
        "warpOutbound",
        "WoWConfig",
        "WoWOutbound",
        "warpOutbound",
        "xrayWarpConfigs",
        "warpConfig",
        "xrayWoWConfigs",
        "WoWConfig",
        "structuredClone",
        "warpOutbound",
        "proxyOutbound",
        "index",
        "structuredClone",
        "WoWOutbound",
        "chainOutbound",
        "index",
        "chainOutbound",
        "index",
        "xrayWarpOutbounds",
        "proxyOutbound",
        "xrayWoWOutbounds",
        "chainOutbound",
        "buildXrayDNS",
        "proxySettings",
        "outboundDomains",
        "buildXrayConfig",
        "proxySettings",
        "proIndicator",
        "xrayWarpBestPing",
        "dnsObject",
        "xrayWarpBestPing",
        "buildXrayRoutingRules",
        "proxySettings",
        "outboundDomains",
        "client",
        "xrayWarpBestPing",
        "freedomOutbound",
        "xrayWarpBestPing",
        "xrayWarpOutbounds",
        "buildXrayConfig",
        "proxySettings",
        "proIndicator",
        "xrayWoWBestPing",
        "dnsObject",
        "xrayWoWBestPing",
        "buildXrayRoutingRules",
        "proxySettings",
        "outboundDomains",
        "client",
        "xrayWoWBestPing",
        "freedomOutbound",
        "xrayWoWBestPing",
        "xrayWoWOutbounds",
        "xrayWarpOutbounds",
        "xrayWarpConfigs",
        "xrayWoWConfigs",
        "xrayWarpBestPing",
        "xrayWoWBestPing",
        "Response",
        "configs",
        "__name",
        "getXrayWarpConfigs",
        "proxySettings",
        "outboundAddrs",
        "isWarp",
        "getDomain",
        "remoteDNS",
        "VLTRFakeDNS",
        "isWarp",
        "warpFakeDNS",
        "isWarp",
        "enableIPv6",
        "isWarp",
        "warpEnableIPv6",
        "isWarp",
        "customBypassRules",
        "address",
        "isDomain",
        "address",
        "customBlockRules",
        "address",
        "isDomain",
        "address",
        "bypassIran",
        "bypassChina",
        "bypassRussia",
        "blockAds",
        "blockPorn",
        "isWarp",
        "remoteDNS",
        "dohHost",
        "localDNS",
        "dohHost",
        "isWarp",
        "servers",
        "isWarp",
        "outboundRule",
        "outboundAddrs",
        "address",
        "isDomain",
        "address",
        "outboundDomains",
        "outboundRule",
        "uniqueDomains",
        "outboundRule",
        "geoRules",
        "rule",
        "rules",
        "geosite",
        "geoip",
        "rule",
        "blockRule",
        "geosite",
        "rules",
        "blockRule",
        "__name",
        "server",
        "customBypassRulesDomains",
        "domainDirectRule",
        "createRule",
        "customBypassRulesDomains",
        "domain",
        "domainDirectRule",
        "domain",
        "rules",
        "domainDirectRule",
        "customBlockRulesDomains",
        "domainBlockRule",
        "createRule",
        "customBlockRulesDomains",
        "domain",
        "domainBlockRule",
        "domain",
        "rules",
        "domainBlockRule",
        "isFakeDNS",
        "servers",
        "rules",
        "fakeip",
        "isIPv62",
        "fakeip",
        "__name",
        "buildSingBoxDNS",
        "proxySettings",
        "customBypassRules",
        "customBypassRules",
        "customBlockRules",
        "customBlockRules",
        "bypassIran",
        "bypassChina",
        "bypassRussia",
        "blockAds",
        "blockPorn",
        "bypassLAN",
        "directIPRules",
        "__name",
        "rule",
        "action",
        "action",
        "rule",
        "action",
        "rule",
        "createRule",
        "createRule",
        "createRule",
        "createRule",
        "geoRules",
        "rule",
        "isDirect",
        "directDomainRule",
        "blockDomainRule",
        "isDirect",
        "directIPRule",
        "blockIPRule",
        "domainRule",
        "geosite",
        "ruleSets",
        "routingRuleSet",
        "geosite",
        "geositeURL",
        "geoip",
        "ipRule",
        "geoip",
        "ruleSets",
        "routingRuleSet",
        "geoip",
        "geoipURL",
        "__name",
        "rule",
        "targetArray",
        "rule",
        "rule",
        "rule",
        "targetArray",
        "rule",
        "pushRuleIfNotEmpty",
        "directDomainRule",
        "directDomainRules",
        "pushRuleIfNotEmpty",
        "directIPRule",
        "directIPRules",
        "pushRuleIfNotEmpty",
        "blockDomainRule",
        "blockDomainRules",
        "pushRuleIfNotEmpty",
        "blockIPRule",
        "blockIPRules",
        "__name",
        "addresses",
        "action",
        "createRule",
        "action",
        "createRule",
        "action",
        "addresses",
        "address",
        "isDomain",
        "address",
        "domainRule",
        "address",
        "isIPv6",
        "address",
        "address",
        "address",
        "ipRule",
        "ip",
        "pushRuleIfNotEmpty",
        "domainRule",
        "action",
        "directDomainRules",
        "blockDomainRules",
        "pushRuleIfNotEmpty",
        "ipRule",
        "action",
        "directIPRules",
        "blockIPRules",
        "customBypassRulesTotal",
        "processRules",
        "customBypassRulesTotal",
        "customBlockRulesTotal",
        "processRules",
        "customBlockRulesTotal",
        "blockUDP443",
        "rules",
        "rules",
        "defaultRules",
        "rules",
        "blockDomainRules",
        "blockIPRules",
        "directDomainRules",
        "directIPRules",
        "ruleSets",
        "__name",
        "buildSingBoxRoutingRules",
        "proxySettings",
        "remark",
        "address",
        "port",
        "host",
        "sni",
        "allowInsecure",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "defaultHttpsPorts",
        "port",
        "atob",
        "address",
        "port",
        "userID2",
        "allowInsecure",
        "sni",
        "host",
        "remark",
        "isDomain",
        "address",
        "outbound",
        "enableIPv6",
        "tls",
        "outbound",
        "outbound",
        "__name",
        "buildSingBoxVLOutbound",
        "proxySettings",
        "remark",
        "address",
        "port",
        "host",
        "sni",
        "allowInsecure",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "defaultHttpsPorts",
        "port",
        "atob",
        "TRPassword",
        "address",
        "port",
        "allowInsecure",
        "sni",
        "host",
        "remark",
        "isDomain",
        "address",
        "outbound",
        "enableIPv6",
        "tls",
        "outbound",
        "outbound",
        "__name",
        "buildSingBoxTROutbound",
        "proxySettings",
        "warpConfigs",
        "remark",
        "endpoint",
        "chain",
        "endpoint",
        "endpoint",
        "ipv6Regex",
        "endpoint",
        "endpoint",
        "endpoint",
        "portRegex",
        "endpoint",
        "chain",
        "endpointServer",
        "chain",
        "endpointPort",
        "extractWireguardParams",
        "warpConfigs",
        "chain",
        "warpIPv6",
        "server",
        "publicKey",
        "base64ToDecimal",
        "reserved",
        "privateKey",
        "remark",
        "isDomain",
        "server",
        "outbound",
        "warpEnableIPv6",
        "chain",
        "outbound",
        "chain",
        "outbound",
        "__name",
        "buildSingBoxWarpOutbound",
        "chainProxyParams",
        "enableIPv6",
        "chainProxyParams",
        "protocol",
        "server2",
        "port2",
        "user",
        "isDomain",
        "server2",
        "chainOutbound2",
        "enableIPv6",
        "protocol",
        "chainOutbound2",
        "chainOutbound2",
        "atob",
        "port",
        "isDomain",
        "server",
        "chainOutbound",
        "enableIPv6",
        "security",
        "security",
        "alpn",
        "alpn",
        "value",
        "value",
        "chainOutbound",
        "sni",
        "tlsAlpns",
        "fp",
        "security",
        "chainOutbound",
        "pbk",
        "sid",
        "chainOutbound",
        "headerType",
        "host",
        "chainOutbound",
        "httpHosts",
        "path",
        "path",
        "chainOutbound",
        "wsPath",
        "host",
        "earlyData",
        "chainOutbound",
        "serviceName",
        "chainOutbound",
        "__name",
        "buildSingBoxChainOutbound",
        "request",
        "env",
        "getDataset",
        "request",
        "env",
        "structuredClone",
        "singboxConfigTemp",
        "config",
        "buildSingBoxDNS",
        "proxySettings",
        "buildSingBoxRoutingRules",
        "proxySettings",
        "config",
        "dnsObject",
        "config",
        "dnsObject",
        "config",
        "proxySettings",
        "dnsObject",
        "config",
        "dnsObject",
        "config",
        "rules",
        "config",
        "rule_set",
        "config",
        "config",
        "selector",
        "config",
        "structuredClone",
        "warpUrlTest",
        "config",
        "warpUrlTest",
        "warpUrlTest",
        "proxySettings",
        "WoWUrlTest",
        "WoWUrlTest",
        "proxySettings",
        "warpEndpoints",
        "endpoint",
        "index",
        "index",
        "index",
        "buildSingBoxWarpOutbound",
        "proxySettings",
        "warpConfigs",
        "warpRemark",
        "endpoint",
        "buildSingBoxWarpOutbound",
        "proxySettings",
        "warpConfigs",
        "WoWRemark",
        "endpoint",
        "warpRemark",
        "config",
        "WoWOutbound",
        "warpOutbound",
        "warpRemarks",
        "warpRemark",
        "WoWRemarks",
        "WoWRemark",
        "warpUrlTest",
        "warpRemark",
        "WoWUrlTest",
        "WoWRemark",
        "selector",
        "warpRemarks",
        "WoWRemarks",
        "Response",
        "config",
        "__name",
        "getSingBoxWarpConfig",
        "request",
        "env",
        "getDataset",
        "request",
        "env",
        "outProxy",
        "outProxyParams",
        "chainProxy",
        "buildSingBoxChainOutbound",
        "proxyParams",
        "enableIPv6",
        "error",
        "error",
        "chainProxy",
        "env",
        "proxySettings",
        "getConfigAddresses",
        "cleanIPs",
        "enableIPv6",
        "customCdnAddrs",
        "customCdnAddrs",
        "Addresses",
        "customCdnAddresses",
        "structuredClone",
        "singboxConfigTemp",
        "buildSingBoxDNS",
        "proxySettings",
        "totalAddresses",
        "buildSingBoxRoutingRules",
        "proxySettings",
        "config",
        "dnsObject",
        "config",
        "dnsObject",
        "dnsObject",
        "config",
        "dnsObject",
        "config",
        "enableIPv6",
        "config",
        "rules",
        "config",
        "rule_set",
        "config",
        "config",
        "selector",
        "urlTest",
        "bestVLTRInterval",
        "urlTest",
        "VLConfigs",
        "atob",
        "TRConfigs",
        "atob",
        "protocols",
        "protocol",
        "ports",
        "port",
        "totalAddresses",
        "addr",
        "customCdnAddresses",
        "addr",
        "isCustomAddr",
        "isCustomAddr",
        "customCdnSni",
        "randomUpperCase",
        "hostName2",
        "isCustomAddr",
        "customCdnHost",
        "hostName2",
        "generateRemark",
        "protocolIndex",
        "port",
        "addr",
        "cleanIPs",
        "protocol",
        "configType",
        "protocol",
        "atob",
        "VLOutbound",
        "buildSingBoxVLOutbound",
        "proxySettings",
        "chainProxy",
        "proxyIndex",
        "remark",
        "addr",
        "port",
        "host",
        "sni",
        "isCustomAddr",
        "config",
        "VLOutbound",
        "protocol",
        "atob",
        "TROutbound",
        "buildSingBoxTROutbound",
        "proxySettings",
        "chainProxy",
        "proxyIndex",
        "remark",
        "addr",
        "port",
        "host",
        "sni",
        "isCustomAddr",
        "config",
        "TROutbound",
        "chainProxy",
        "structuredClone",
        "chainProxy",
        "chain",
        "remark",
        "chain",
        "proxyIndex",
        "config",
        "chain",
        "selector",
        "remark",
        "urlTest",
        "remark",
        "proxyIndex",
        "protocolIndex",
        "Response",
        "config",
        "__name",
        "getSingBoxCustomConfig",
        "proxySettings",
        "isChain",
        "isWarp",
        "warpEnableIPv6",
        "VLTRFakeDNS",
        "isWarp",
        "warpFakeDNS",
        "isWarp",
        "enableIPv6",
        "isWarp",
        "warpEnableIPv6",
        "isWarp",
        "customBypassRules",
        "address",
        "isDomain",
        "address",
        "bypassIran",
        "bypassChina",
        "bypassRussia",
        "bypassIran",
        "bypassChina",
        "bypassRussia",
        "isIPv62",
        "isWarp",
        "warpRemoteDNS",
        "dns2",
        "dns2",
        "isChain",
        "remoteDNS",
        "remoteDNS",
        "localDNS",
        "localDNS",
        "localDNS",
        "isChain",
        "isWarp",
        "outProxyParams",
        "isDomain",
        "chainOutboundServer",
        "dns",
        "chainOutboundServer",
        "remoteDNS",
        "isBypass",
        "bypassRules",
        "rule",
        "geosites",
        "geosite",
        "dns",
        "geosites",
        "localDNS",
        "customBypassRulesDomains",
        "domain",
        "dns",
        "domain",
        "localDNS",
        "getDomain",
        "remoteDNS",
        "dohHost",
        "isWarp",
        "dns",
        "isChain",
        "isFakeDNS",
        "dns",
        "dns",
        "__name",
        "buildClashDNS",
        "proxySettings",
        "customBypassRules",
        "customBypassRules",
        "customBlockRules",
        "customBlockRules",
        "bypassLAN",
        "bypassIran",
        "bypassChina",
        "bypassRussia",
        "blockAds",
        "blockPorn",
        "tag2",
        "format",
        "behavior",
        "url",
        "format",
        "format",
        "tag2",
        "tag2",
        "fileExtension",
        "__name",
        "buildRuleProvider",
        "geoRules",
        "rule",
        "geosite",
        "directDomainRules",
        "blockDomainRules",
        "targetRules",
        "geosite",
        "buildRuleProvider",
        "geosite",
        "format",
        "geositeURL",
        "ruleProviders",
        "ruleProvider2",
        "geoip",
        "directIPRules",
        "blockIPRules",
        "targetRules",
        "geoip",
        "noResolve",
        "buildRuleProvider",
        "geoip",
        "format",
        "geoipURL",
        "ruleProviders",
        "ruleProvider2",
        "__name",
        "address",
        "action",
        "isDomain",
        "address",
        "address",
        "action",
        "isIPv4",
        "address",
        "isIPv6",
        "address",
        "address",
        "address",
        "address",
        "isIPv4",
        "address",
        "ip",
        "cidr",
        "action",
        "customBypassRulesTotal",
        "customBlockRulesTotal",
        "address",
        "index",
        "index",
        "customBypassRulesTotal",
        "isDirectRule",
        "isDirectRule",
        "isDomain",
        "address",
        "directDomainRules",
        "directIPRules",
        "isDomain",
        "address",
        "blockDomainRules",
        "blockIPRules",
        "targetRules",
        "generateRule",
        "address",
        "action",
        "blockUDP443",
        "rules",
        "rules",
        "rules",
        "rules",
        "blockDomainRules",
        "blockIPRules",
        "directDomainRules",
        "directIPRules",
        "rules",
        "__name",
        "buildClashRoutingRules",
        "remark",
        "address",
        "port",
        "host",
        "sni",
        "path",
        "allowInsecure",
        "defaultHttpsPorts",
        "port",
        "isIPv6",
        "address",
        "address",
        "address",
        "remark",
        "atob",
        "addr",
        "port",
        "userID2",
        "tls",
        "path",
        "host",
        "tls",
        "outbound",
        "sni",
        "allowInsecure",
        "outbound",
        "__name",
        "buildClashVLOutbound",
        "remark",
        "address",
        "port",
        "host",
        "sni",
        "path",
        "allowInsecure",
        "isIPv6",
        "address",
        "address",
        "address",
        "remark",
        "atob",
        "addr",
        "port",
        "globalThis",
        "path",
        "host",
        "sni",
        "allowInsecure",
        "__name",
        "buildClashTROutbound",
        "warpConfigs",
        "remark",
        "endpoint",
        "chain",
        "endpoint",
        "endpoint",
        "ipv6Regex",
        "endpoint",
        "endpoint",
        "endpoint",
        "portRegex",
        "endpoint",
        "extractWireguardParams",
        "warpConfigs",
        "chain",
        "remark",
        "warpIPv6",
        "privateKey",
        "chain",
        "endpointServer",
        "chain",
        "endpointPort",
        "publicKey",
        "reserved",
        "chain",
        "outbound",
        "chain",
        "outbound",
        "__name",
        "buildClashWarpOutbound",
        "chainProxyParams",
        "chainProxyParams",
        "protocol",
        "protocol",
        "proxyType",
        "server2",
        "port2",
        "user",
        "atob",
        "server",
        "port",
        "uuid",
        "flow",
        "security",
        "alpn",
        "alpn",
        "chainOutbound",
        "sni",
        "tlsAlpns",
        "fp",
        "security",
        "chainOutbound",
        "sni",
        "fp",
        "pbk",
        "sid",
        "headerType",
        "path",
        "chainOutbound",
        "httpPaths",
        "path",
        "path",
        "chainOutbound",
        "wsPath",
        "host",
        "earlyData",
        "chainOutbound",
        "serviceName",
        "chainOutbound",
        "__name",
        "buildClashChainOutbound",
        "request",
        "env",
        "getDataset",
        "request",
        "env",
        "structuredClone",
        "clashConfigTemp",
        "config",
        "buildClashDNS",
        "proxySettings",
        "buildClashRoutingRules",
        "proxySettings",
        "config",
        "rules",
        "config",
        "ruleProviders",
        "config",
        "config",
        "selector",
        "warpUrlTest",
        "warpUrlTest",
        "proxySettings",
        "config",
        "structuredClone",
        "warpUrlTest",
        "config",
        "WoWUrlTest",
        "warpEndpoints",
        "endpoint",
        "index",
        "index",
        "index",
        "buildClashWarpOutbound",
        "warpConfigs",
        "warpRemark",
        "endpoint",
        "buildClashWarpOutbound",
        "warpConfigs",
        "WoWRemark",
        "endpoint",
        "warpRemark",
        "config",
        "WoWOutbound",
        "warpOutbound",
        "warpRemarks",
        "warpRemark",
        "WoWRemarks",
        "WoWRemark",
        "warpUrlTest",
        "warpRemark",
        "WoWUrlTest",
        "WoWRemark",
        "selector",
        "warpRemarks",
        "WoWRemarks",
        "Response",
        "config",
        "__name",
        "getClashWarpConfig",
        "request",
        "env",
        "getDataset",
        "request",
        "env",
        "outProxy",
        "outProxyParams",
        "chainProxy",
        "buildClashChainOutbound",
        "proxyParams",
        "error",
        "error",
        "chainProxy",
        "env",
        "proxySettings",
        "structuredClone",
        "clashConfigTemp",
        "buildClashRoutingRules",
        "proxySettings",
        "config",
        "buildClashDNS",
        "proxySettings",
        "chainProxy",
        "config",
        "rules",
        "config",
        "ruleProviders",
        "config",
        "config",
        "selector",
        "urlTest",
        "urlTest",
        "bestVLTRInterval",
        "getConfigAddresses",
        "cleanIPs",
        "enableIPv6",
        "customCdnAddrs",
        "customCdnAddrs",
        "Addresses",
        "customCdnAddresses",
        "VLConfigs",
        "atob",
        "TRConfigs",
        "atob",
        "protocols",
        "protocol",
        "ports",
        "port",
        "totalAddresses",
        "addr",
        "customCdnAddresses",
        "addr",
        "isCustomAddr",
        "isCustomAddr",
        "customCdnSni",
        "randomUpperCase",
        "hostName2",
        "isCustomAddr",
        "customCdnHost",
        "hostName2",
        "generateRemark",
        "protocolIndex",
        "port",
        "addr",
        "cleanIPs",
        "protocol",
        "configType",
        "protocol",
        "atob",
        "path",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "VLOutbound",
        "buildClashVLOutbound",
        "chainProxy",
        "proxyIndex",
        "remark",
        "addr",
        "port",
        "host",
        "sni",
        "path",
        "isCustomAddr",
        "config",
        "VLOutbound",
        "selector",
        "remark",
        "urlTest",
        "remark",
        "protocol",
        "atob",
        "defaultHttpsPorts",
        "port",
        "path",
        "getRandomPath",
        "proxyIP",
        "btoa",
        "proxyIP",
        "TROutbound",
        "buildClashTROutbound",
        "chainProxy",
        "proxyIndex",
        "remark",
        "addr",
        "port",
        "host",
        "sni",
        "path",
        "isCustomAddr",
        "config",
        "TROutbound",
        "selector",
        "remark",
        "urlTest",
        "remark",
        "chainProxy",
        "structuredClone",
        "chainProxy",
        "chain",
        "remark",
        "chain",
        "proxyIndex",
        "config",
        "chain",
        "proxyIndex",
        "protocolIndex",
        "Response",
        "config",
        "__name",
        "getClashNormalConfig",
        "request",
        "env",
        "getDataset",
        "request",
        "env",
        "getConfigAddresses",
        "cleanIPs",
        "enableIPv6",
        "customCdnAddrs",
        "customCdnAddrs",
        "Addresses",
        "customCdnAddresses",
        "client",
        "encodeURIComponent",
        "TRPassword",
        "client",
        "encodeURIComponent",
        "ports",
        "port",
        "totalAddresses",
        "addr",
        "index",
        "index",
        "Addresses",
        "isCustomAddr",
        "isCustomAddr",
        "customCdnSni",
        "randomUpperCase",
        "hostName2",
        "isCustomAddr",
        "customCdnHost",
        "hostName2",
        "getRandomPath",
        "proxyIP",
        "encodeURIComponent",
        "btoa",
        "proxyIP",
        "earlyData",
        "encodeURIComponent",
        "generateRemark",
        "proxyIndex",
        "port",
        "addr",
        "cleanIPs",
        "atob",
        "configType",
        "encodeURIComponent",
        "generateRemark",
        "proxyIndex",
        "port",
        "addr",
        "cleanIPs",
        "atob",
        "configType",
        "defaultHttpsPorts",
        "port",
        "sni",
        "alpn",
        "client",
        "defaultHttpsPorts",
        "port",
        "lengthMin",
        "lengthMax",
        "intervalMin",
        "intervalMax",
        "VLConfigs",
        "VLConfs",
        "atob",
        "userID2",
        "addr",
        "port",
        "path",
        "host",
        "tlsFields",
        "hiddifyFragment",
        "VLRemark",
        "TRConfigs",
        "TRConfs",
        "atob",
        "TRPass",
        "addr",
        "port",
        "path",
        "host",
        "tlsFields",
        "hiddifyFragment",
        "TRRemark",
        "proxyIndex",
        "outProxy",
        "encodeURIComponent",
        "outProxy",
        "outProxy",
        "outProxy",
        "regex",
        "isUserPass",
        "isUserPass",
        "chainProxy",
        "userPass",
        "outProxy",
        "userPass",
        "btoa",
        "userPass",
        "chainRemark",
        "outProxy",
        "chainRemark",
        "chainProxy",
        "outProxy",
        "chainRemark",
        "btoa",
        "VLConfs",
        "TRConfs",
        "chainProxy",
        "client",
        "headers",
        "remoteDNS",
        "Response",
        "configs",
        "__name",
        "getNormalConfigs",
        "request",
        "env",
        "isPro",
        "getDataset",
        "request",
        "env",
        "warpEndpoints",
        "endpoint",
        "index",
        "configs",
        "endpoint",
        "isPro",
        "noiseCountMin",
        "noiseCountMax",
        "noiseSizeMin",
        "noiseSizeMax",
        "noiseDelayMin",
        "noiseDelayMax",
        "hiddifyNoiseMode",
        "encodeURIComponent",
        "index",
        "encodeURIComponent",
        "index",
        "Response",
        "btoa",
        "configs",
        "isPro",
        "__name",
        "getHiddifyWarpConfigs",
        "atob",
        "atob",
        "globalThis",
        "atob",
        "atob",
        "atob",
        "atob",
        "Response",
        "secretsPage",
        "__name",
        "renderSecretsPage",
        "request",
        "env",
        "initializeParams",
        "request",
        "env",
        "request",
        "upgradeHeader",
        "upgradeHeader",
        "pathName2",
        "updateWarpConfigs",
        "request",
        "env",
        "getWarpConfigFiles",
        "request",
        "env",
        "subPath",
        "client",
        "getSingBoxCustomConfig",
        "request",
        "env",
        "client",
        "getClashNormalConfig",
        "request",
        "env",
        "client",
        "getXrayCustomConfigs",
        "request",
        "env",
        "getNormalConfigs",
        "request",
        "env",
        "subPath",
        "client",
        "getNormalConfigs",
        "request",
        "env",
        "getXrayCustomConfigs",
        "request",
        "env",
        "subPath",
        "client",
        "getClashWarpConfig",
        "request",
        "env",
        "client",
        "getSingBoxWarpConfig",
        "request",
        "env",
        "client",
        "client",
        "getHiddifyWarpConfigs",
        "request",
        "env",
        "client",
        "getHiddifyWarpConfigs",
        "request",
        "env",
        "getXrayWarpConfigs",
        "request",
        "env",
        "client",
        "handlePanel",
        "request",
        "env",
        "login",
        "request",
        "env",
        "logout",
        "resetPassword",
        "request",
        "env",
        "getMyIP",
        "request",
        "renderSecretsPage",
        "fallback",
        "request",
        "pathName2",
        "TROverWSHandler",
        "request",
        "VLOverWSHandler",
        "request",
        "err",
        "renderErrorPage",
        "err",
        "worker_default"
    ],
    "literals": [
        "\"name\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "'Dynamic require of \"'",
        "'\" is not supported'",
        "\"object\"",
        "\"function\"",
        "\"default\"",
        "\"(disabled):crypto\"",
        "\"node_modules/tweetnacl/nacl-fast.js\"",
        "\"use strict\"",
        "\"gf\"",
        "\"no PRNG\"",
        "\"randombytes\"",
        "\"ts64\"",
        "\"vn\"",
        "\"crypto_verify_16\"",
        "\"crypto_verify_32\"",
        "\"core_salsa20\"",
        "\"core_hsalsa20\"",
        "\"crypto_core_salsa20\"",
        "\"crypto_core_hsalsa20\"",
        "\"crypto_stream_salsa20_xor\"",
        "\"crypto_stream_salsa20\"",
        "\"crypto_stream\"",
        "\"crypto_stream_xor\"",
        "\"poly1305\"",
        "\"crypto_onetimeauth\"",
        "\"crypto_onetimeauth_verify\"",
        "\"crypto_secretbox\"",
        "\"crypto_secretbox_open\"",
        "\"set25519\"",
        "\"car25519\"",
        "\"sel25519\"",
        "\"pack25519\"",
        "\"neq25519\"",
        "\"par25519\"",
        "\"unpack25519\"",
        "\"A\"",
        "\"Z\"",
        "\"M\"",
        "\"S\"",
        "\"inv25519\"",
        "\"pow2523\"",
        "\"crypto_scalarmult\"",
        "\"crypto_scalarmult_base\"",
        "\"crypto_box_keypair\"",
        "\"crypto_box_beforenm\"",
        "\"crypto_box\"",
        "\"crypto_box_open\"",
        "\"crypto_hashblocks_hl\"",
        "\"crypto_hash\"",
        "\"add\"",
        "\"cswap\"",
        "\"pack\"",
        "\"scalarmult\"",
        "\"scalarbase\"",
        "\"crypto_sign_keypair\"",
        "\"modL\"",
        "\"reduce\"",
        "\"crypto_sign\"",
        "\"unpackneg\"",
        "\"crypto_sign_open\"",
        "\"bad key size\"",
        "\"bad nonce size\"",
        "\"checkLengths\"",
        "\"bad public key size\"",
        "\"bad secret key size\"",
        "\"checkBoxLengths\"",
        "\"unexpected type, use Uint8Array\"",
        "\"checkArrayTypes\"",
        "\"cleanup\"",
        "\"bad n size\"",
        "\"bad p size\"",
        "\"bad n size\"",
        "\"bad secret key size\"",
        "\"bad secret key size\"",
        "\"bad public key size\"",
        "\"bad signature size\"",
        "\"bad public key size\"",
        "\"bad secret key size\"",
        "\"bad seed size\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"(disabled):buffer\"",
        "\"node_modules/js-sha256/src/sha256.js\"",
        "\"use strict\"",
        "\"input is invalid type\"",
        "\"object\"",
        "\"object\"",
        "\"object\"",
        "\"object\"",
        "\"function\"",
        "\"undefined\"",
        "\"0123456789abcdef\"",
        "\"\"",
        "\"hex\"",
        "\"array\"",
        "\"digest\"",
        "\"arrayBuffer\"",
        "\"[object Array]\"",
        "\"object\"",
        "\"createOutputMethod\"",
        "\"hex\"",
        "\"createMethod\"",
        "\"sha224\"",
        "\"sha256\"",
        "\"bufferFrom\"",
        "\"string\"",
        "\"utf8\"",
        "\"hex\"",
        "\"hex\"",
        "\"nodeMethod\"",
        "\"nodeWrap\"",
        "\"createHmacOutputMethod\"",
        "\"hex\"",
        "\"createHmacMethod\"",
        "\"Sha256\"",
        "\"string\"",
        "\"object\"",
        "\"string\"",
        "\"object\"",
        "\"HmacSha256\"",
        "\"isCryptoKey\"",
        "\"concat\"",
        "\"string\"",
        "\"\"",
        "\"encodeBase64\"",
        "\"\"",
        "\"-\"",
        "\"_\"",
        "\"encode\"",
        "\"decodeBase64\"",
        "\"+\"",
        "\"/\"",
        "\"\"",
        "\"The input to be decoded is not correctly encoded.\"",
        "\"decode\"",
        "\"ERR_JOSE_GENERIC\"",
        "\"JOSEError\"",
        "\"ERR_JOSE_GENERIC\"",
        "\"unspecified\"",
        "\"unspecified\"",
        "\"ERR_JWT_CLAIM_VALIDATION_FAILED\"",
        "\"JWTClaimValidationFailed\"",
        "\"ERR_JWT_CLAIM_VALIDATION_FAILED\"",
        "\"unspecified\"",
        "\"unspecified\"",
        "\"ERR_JWT_EXPIRED\"",
        "\"JWTExpired\"",
        "\"ERR_JWT_EXPIRED\"",
        "\"ERR_JOSE_ALG_NOT_ALLOWED\"",
        "\"JOSEAlgNotAllowed\"",
        "\"ERR_JOSE_ALG_NOT_ALLOWED\"",
        "\"ERR_JOSE_NOT_SUPPORTED\"",
        "\"JOSENotSupported\"",
        "\"ERR_JOSE_NOT_SUPPORTED\"",
        "\"decryption operation failed\"",
        "\"ERR_JWE_DECRYPTION_FAILED\"",
        "\"JWEDecryptionFailed\"",
        "\"ERR_JWE_DECRYPTION_FAILED\"",
        "\"ERR_JWE_INVALID\"",
        "\"JWEInvalid\"",
        "\"ERR_JWE_INVALID\"",
        "\"ERR_JWS_INVALID\"",
        "\"JWSInvalid\"",
        "\"ERR_JWS_INVALID\"",
        "\"ERR_JWT_INVALID\"",
        "\"JWTInvalid\"",
        "\"ERR_JWT_INVALID\"",
        "\"ERR_JWK_INVALID\"",
        "\"JWKInvalid\"",
        "\"ERR_JWK_INVALID\"",
        "\"ERR_JWKS_INVALID\"",
        "\"JWKSInvalid\"",
        "\"ERR_JWKS_INVALID\"",
        "\"no applicable key found in the JSON Web Key Set\"",
        "\"ERR_JWKS_NO_MATCHING_KEY\"",
        "\"JWKSNoMatchingKey\"",
        "\"ERR_JWKS_NO_MATCHING_KEY\"",
        "\"multiple matching keys found in the JSON Web Key Set\"",
        "\"ERR_JWKS_MULTIPLE_MATCHING_KEYS\"",
        "\"JWKSMultipleMatchingKeys\"",
        "\"ERR_JWKS_MULTIPLE_MATCHING_KEYS\"",
        "\"request timed out\"",
        "\"ERR_JWKS_TIMEOUT\"",
        "\"JWKSTimeout\"",
        "\"ERR_JWKS_TIMEOUT\"",
        "\"signature verification failed\"",
        "\"ERR_JWS_SIGNATURE_VERIFICATION_FAILED\"",
        "\"JWSSignatureVerificationFailed\"",
        "\"ERR_JWS_SIGNATURE_VERIFICATION_FAILED\"",
        "\"algorithm.name\"",
        "CryptoKey does not support this operation, its ${prop} must be ${name}",
        "\"unusable\"",
        "\"isAlgorithm\"",
        "\"getHashLength\"",
        "\"ES256\"",
        "\"P-256\"",
        "\"ES384\"",
        "\"P-384\"",
        "\"ES512\"",
        "\"P-521\"",
        "\"unreachable\"",
        "\"getNamedCurve\"",
        "\"CryptoKey does not support this operation, its usages must include \"",
        "one of ${usages.join(\", \")}, or ${last}.",
        "\", \"",
        "one of ${usages[0]} or ${usages[1]}.",
        "${usages[0]}.",
        "\"checkUsage\"",
        "\"HS256\"",
        "\"HS384\"",
        "\"HS512\"",
        "\"HMAC\"",
        "\"HMAC\"",
        "SHA-${expected}",
        "\"algorithm.hash\"",
        "\"RS256\"",
        "\"RS384\"",
        "\"RS512\"",
        "\"RSASSA-PKCS1-v1_5\"",
        "\"RSASSA-PKCS1-v1_5\"",
        "SHA-${expected}",
        "\"algorithm.hash\"",
        "\"PS256\"",
        "\"PS384\"",
        "\"PS512\"",
        "\"RSA-PSS\"",
        "\"RSA-PSS\"",
        "SHA-${expected}",
        "\"algorithm.hash\"",
        "\"EdDSA\"",
        "\"Ed25519\"",
        "\"Ed448\"",
        "\"Ed25519 or Ed448\"",
        "\"Ed25519\"",
        "\"Ed25519\"",
        "\"Ed25519\"",
        "\"ES256\"",
        "\"ES384\"",
        "\"ES512\"",
        "\"ECDSA\"",
        "\"ECDSA\"",
        "\"algorithm.namedCurve\"",
        "\"CryptoKey does not support this operation\"",
        "\"checkSigCryptoKey\"",
        "one of type ${types2.join(\", \")}, or ${last}.",
        "\", \"",
        "one of type ${types2[0]} or ${types2[1]}.",
        "of type ${types2[0]}.",
        "Received ${actual}",
        "\"function\"",
        "Received function ${actual.name}",
        "\"object\"",
        "Received an instance of ${actual.constructor.name}",
        "\"message\"",
        "\"Key must be \"",
        "\"default\"",
        "Key for the ${alg} algorithm must be",
        "\"withAlg\"",
        "\"KeyObject\"",
        "\"default\"",
        "\"CryptoKey\"",
        "\"isDisjoint\"",
        "\"object\"",
        "\"isObjectLike\"",
        "\"[object Object]\"",
        "\"isObject\"",
        "\"RS\"",
        "\"PS\"",
        "\"number\"",
        "${alg} requires key modulusLength to be 2048 bits or larger",
        "\"default\"",
        "\"string\"",
        "\"isJWK\"",
        "\"oct\"",
        "\"string\"",
        "\"isPrivateJWK\"",
        "\"oct\"",
        "\"undefined\"",
        "\"isPublicJWK\"",
        "\"oct\"",
        "\"string\"",
        "\"isSecretJWK\"",
        "\"RSA\"",
        "\"PS256\"",
        "\"PS384\"",
        "\"PS512\"",
        "\"RSA-PSS\"",
        "SHA-${jwk.alg.slice(-3)}",
        "\"sign\"",
        "\"verify\"",
        "\"RS256\"",
        "\"RS384\"",
        "\"RS512\"",
        "\"RSASSA-PKCS1-v1_5\"",
        "SHA-${jwk.alg.slice(-3)}",
        "\"sign\"",
        "\"verify\"",
        "\"RSA-OAEP\"",
        "\"RSA-OAEP-256\"",
        "\"RSA-OAEP-384\"",
        "\"RSA-OAEP-512\"",
        "\"RSA-OAEP\"",
        "SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}",
        "\"decrypt\"",
        "\"unwrapKey\"",
        "\"encrypt\"",
        "\"wrapKey\"",
        "'Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value'",
        "\"EC\"",
        "\"ES256\"",
        "\"ECDSA\"",
        "\"P-256\"",
        "\"sign\"",
        "\"verify\"",
        "\"ES384\"",
        "\"ECDSA\"",
        "\"P-384\"",
        "\"sign\"",
        "\"verify\"",
        "\"ES512\"",
        "\"ECDSA\"",
        "\"P-521\"",
        "\"sign\"",
        "\"verify\"",
        "\"ECDH-ES\"",
        "\"ECDH-ES+A128KW\"",
        "\"ECDH-ES+A192KW\"",
        "\"ECDH-ES+A256KW\"",
        "\"ECDH\"",
        "\"deriveBits\"",
        "'Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value'",
        "\"OKP\"",
        "\"Ed25519\"",
        "\"Ed25519\"",
        "\"sign\"",
        "\"verify\"",
        "\"EdDSA\"",
        "\"sign\"",
        "\"verify\"",
        "\"ECDH-ES\"",
        "\"ECDH-ES+A128KW\"",
        "\"ECDH-ES+A192KW\"",
        "\"ECDH-ES+A256KW\"",
        "\"deriveBits\"",
        "'Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value'",
        "'Invalid or unsupported JWK \"kty\" (Key Type) Parameter value'",
        "\"subtleMapping\"",
        "'\"alg\" argument is required when \"jwk.alg\" is not present'",
        "\"jwk\"",
        "\"parse\"",
        "\"exportKeyValue\"",
        "\"KeyObject\"",
        "\"isKeyObject\"",
        "\"importAndCache\"",
        "\"jwk\"",
        "\"normalizePublicKey\"",
        "\"jwk\"",
        "\"normalizePrivateKey\"",
        "\"JWK must be an object\"",
        "\"oct\"",
        "\"string\"",
        "'missing \"k\" (Key Value) Parameter value'",
        "\"RSA\"",
        "\"oth\"",
        "'RSA JWK \"oth\" (Other Primes Info) Parameter value is not supported'",
        "\"EC\"",
        "\"OKP\"",
        "'Unsupported \"kty\" (Key Type) Parameter value'",
        "\"importJWK\"",
        "\"tag\"",
        "\"sig\"",
        "\"Invalid key for this operation, when present its use must be sig\"",
        "Invalid key for this operation, when present its key_ops must include ${usage}",
        "Invalid key for this operation, when present its alg must be ${alg}",
        "\"jwkMatchesOp\"",
        "JSON Web Key for symmetric algorithms must have JWK \"kty\" (Key Type) equal to \"oct\" and the JWK \"k\" (Key Value) present",
        "\"Uint8Array\"",
        "\"JSON Web Key\"",
        "\"secret\"",
        "${tag(key)} instances for symmetric algorithms must be of type \"secret\"",
        "\"symmetricTypeCheck\"",
        "\"sign\"",
        "JSON Web Key for this operation be a private JWK",
        "\"verify\"",
        "JSON Web Key for this operation be a public JWK",
        "\"JSON Web Key\"",
        "\"secret\"",
        "${tag(key)} instances for asymmetric algorithms must not be of type \"secret\"",
        "\"sign\"",
        "\"public\"",
        "${tag(key)} instances for asymmetric algorithm signing must be of type \"private\"",
        "\"decrypt\"",
        "\"public\"",
        "${tag(key)} instances for asymmetric algorithm decryption must be of type \"private\"",
        "\"verify\"",
        "\"private\"",
        "${tag(key)} instances for asymmetric algorithm verifying must be of type \"public\"",
        "\"encrypt\"",
        "\"private\"",
        "${tag(key)} instances for asymmetric algorithm encryption must be of type \"public\"",
        "\"asymmetricTypeCheck\"",
        "\"HS\"",
        "\"dir\"",
        "\"PBES2\"",
        "\"checkKeyType\"",
        "'\"crit\" (Critical) Header Parameter MUST be integrity protected'",
        "\"string\"",
        "'\"crit\" (Critical) Header Parameter MUST be an array of non-empty strings when present'",
        "Extension Header Parameter \"${parameter}\" is not recognized",
        "Extension Header Parameter \"${parameter}\" is missing",
        "Extension Header Parameter \"${parameter}\" MUST be integrity protected",
        "\"validateCrit\"",
        "\"string\"",
        "\"${option}\" option must be an array of strings",
        "\"validateAlgorithms\"",
        "SHA-${alg.slice(-3)}",
        "\"HS256\"",
        "\"HS384\"",
        "\"HS512\"",
        "\"HMAC\"",
        "\"PS256\"",
        "\"PS384\"",
        "\"PS512\"",
        "\"RSA-PSS\"",
        "\"RS256\"",
        "\"RS384\"",
        "\"RS512\"",
        "\"RSASSA-PKCS1-v1_5\"",
        "\"ES256\"",
        "\"ES384\"",
        "\"ES512\"",
        "\"ECDSA\"",
        "\"Ed25519\"",
        "\"Ed25519\"",
        "\"EdDSA\"",
        "alg ${alg} is not supported either by JOSE or your javascript runtime",
        "\"subtleDsa\"",
        "\"sign\"",
        "\"verify\"",
        "\"HS\"",
        "\"raw\"",
        "SHA-${alg.slice(-3)}",
        "\"HMAC\"",
        "\"Uint8Array\"",
        "\"JSON Web Key\"",
        "\"getCryptoKey\"",
        "\"verify\"",
        "\"verify\"",
        "\"Flattened JWS must be an object\"",
        "'Flattened JWS must have either of the \"protected\" or \"header\" members'",
        "\"string\"",
        "\"JWS Protected Header incorrect type\"",
        "\"JWS Payload missing\"",
        "\"string\"",
        "\"JWS Signature missing or incorrect type\"",
        "\"JWS Unprotected Header incorrect type\"",
        "\"JWS Protected Header is invalid\"",
        "\"JWS Protected and JWS Unprotected Header Parameter names must be disjoint\"",
        "\"b64\"",
        "\"b64\"",
        "\"boolean\"",
        "'The \"b64\" (base64url-encode payload) Header Parameter must be a boolean'",
        "\"string\"",
        "'JWS \"alg\" (Algorithm) Header Parameter missing or invalid'",
        "\"algorithms\"",
        "'\"alg\" (Algorithm) Header Parameter value not allowed'",
        "\"string\"",
        "\"JWS Payload must be a string\"",
        "\"string\"",
        "\"JWS Payload must be a string or an Uint8Array instance\"",
        "\"function\"",
        "\"verify\"",
        "\"verify\"",
        "\"\"",
        "\".\"",
        "\"string\"",
        "\"Failed to base64url decode the signature\"",
        "\"Failed to base64url decode the payload\"",
        "\"string\"",
        "\"flattenedVerify\"",
        "\"string\"",
        "\"Compact JWS must be a string or Uint8Array\"",
        "\".\"",
        "\"Invalid Compact JWS\"",
        "\"function\"",
        "\"compactVerify\"",
        "\"default\"",
        "\"Invalid time period format\"",
        "\"sec\"",
        "\"secs\"",
        "\"second\"",
        "\"seconds\"",
        "\"s\"",
        "\"minute\"",
        "\"minutes\"",
        "\"min\"",
        "\"mins\"",
        "\"m\"",
        "\"hour\"",
        "\"hours\"",
        "\"hr\"",
        "\"hrs\"",
        "\"h\"",
        "\"day\"",
        "\"days\"",
        "\"d\"",
        "\"week\"",
        "\"weeks\"",
        "\"w\"",
        "\"-\"",
        "\"ago\"",
        "\"default\"",
        "\"\"",
        "\"normalizeTyp\"",
        "\"string\"",
        "\"checkAudiencePresence\"",
        "\"JWT Claims Set must be a top-level JSON object\"",
        "\"string\"",
        "'unexpected \"typ\" JWT header value'",
        "\"typ\"",
        "\"check_failed\"",
        "\"iat\"",
        "\"aud\"",
        "\"sub\"",
        "\"iss\"",
        "missing required \"${claim}\" claim",
        "\"missing\"",
        "'unexpected \"iss\" claim value'",
        "\"iss\"",
        "\"check_failed\"",
        "'unexpected \"sub\" claim value'",
        "\"sub\"",
        "\"check_failed\"",
        "\"string\"",
        "'unexpected \"aud\" claim value'",
        "\"aud\"",
        "\"check_failed\"",
        "\"string\"",
        "\"number\"",
        "\"undefined\"",
        "\"Invalid clockTolerance option type\"",
        "\"number\"",
        "'\"iat\" claim must be a number'",
        "\"iat\"",
        "\"invalid\"",
        "\"number\"",
        "'\"nbf\" claim must be a number'",
        "\"nbf\"",
        "\"invalid\"",
        "'\"nbf\" claim timestamp check failed'",
        "\"nbf\"",
        "\"check_failed\"",
        "\"number\"",
        "'\"exp\" claim must be a number'",
        "\"exp\"",
        "\"invalid\"",
        "'\"exp\" claim timestamp check failed'",
        "\"exp\"",
        "\"check_failed\"",
        "\"number\"",
        "'\"iat\" claim timestamp check failed (too far in the past)'",
        "\"iat\"",
        "\"check_failed\"",
        "'\"iat\" claim timestamp check failed (it should be in the past)'",
        "\"iat\"",
        "\"check_failed\"",
        "\"default\"",
        "\"b64\"",
        "\"JWTs MUST NOT use unencoded payload\"",
        "\"function\"",
        "\"jwtVerify\"",
        "\"sign\"",
        "\"sign\"",
        "\"payload must be an instance of Uint8Array\"",
        "\"setProtectedHeader can only be called once\"",
        "\"setUnprotectedHeader can only be called once\"",
        "\"either setProtectedHeader or setUnprotectedHeader must be called before #sign()\"",
        "\"JWS Protected and JWS Unprotected Header Parameter names must be disjoint\"",
        "\"b64\"",
        "\"b64\"",
        "\"boolean\"",
        "'The \"b64\" (base64url-encode payload) Header Parameter must be a boolean'",
        "\"string\"",
        "'JWS \"alg\" (Algorithm) Header Parameter missing or invalid'",
        "\"sign\"",
        "\"\"",
        "\".\"",
        "\"\"",
        "\"FlattenedSign\"",
        "\"use the flattened module for creating JWS with b64: false\"",
        "${jws.protected}.${jws.payload}.${jws.signature}",
        "\"CompactSign\"",
        "Invalid ${label} input",
        "\"validateInput\"",
        "\"JWT Claims Set MUST be an object\"",
        "\"number\"",
        "\"setNotBefore\"",
        "\"setNotBefore\"",
        "\"number\"",
        "\"setExpirationTime\"",
        "\"setExpirationTime\"",
        "\"undefined\"",
        "\"setIssuedAt\"",
        "\"string\"",
        "\"setIssuedAt\"",
        "\"setIssuedAt\"",
        "\"ProduceJWT\"",
        "\"b64\"",
        "\"JWTs MUST NOT use unencoded payload\"",
        "\"SignJWT\"",
        "<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${atob(\"QlBC\")} Login</title>\n    <style>\n        :root {\n            --color: black;\n            --primary-color: #09639f;\n            --header-color: #09639f; \n            --background-color: #fff;\n            --form-background-color: #f9f9f9;\n            --lable-text-color: #333;\n            --h2-color: #3b3b3b;\n            --border-color: #ddd;\n            --input-background-color: white;\n            --header-shadow: 2px 2px 4px rgba(0, 0, 0, 0.25);\n        }\n        html, body { height: 100%; margin: 0; }\n        body {\n            font-family: system-ui;\n            background-color: var(--background-color);\n            position: relative;\n            overflow: hidden;\n        }\n        body.dark-mode {\n            --color: white;\n            --primary-color: #09639F;\n            --header-color: #3498DB; \n            --background-color: #121212;\n            --form-background-color: #121212;\n            --lable-text-color: #DFDFDF;\n            --h2-color: #D5D5D5;\n            --border-color: #353535;\n            --input-background-color: #252525;\n            --header-shadow: 2px 2px 4px rgba(255, 255, 255, 0.25);\n        }\n        html, body { height: 100%; margin: 0; }\n        .container {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            width: 90%;\n        }\n        h1 { font-size: 2.5rem; text-align: center; color: var(--header-color); margin: 0 auto 30px; text-shadow: var(--header-shadow); }        \n        h2 { text-align: center; color: var(--h2-color) }\n        .form-container {\n            background: var(--form-background-color);\n            border: 1px solid var(--border-color);\n            border-radius: 10px;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n            padding: 20px;\n        }\n        .form-control { margin-bottom: 15px; display: flex; align-items: center; }\n        label {\n            display: block;\n            margin-bottom: 5px;\n            padding-right: 20px;\n            font-size: 110%;\n            font-weight: 600;\n            color: var(--lable-text-color);\n        }\n        input[type=\"text\"],\n        input[type=\"password\"] {\n            width: 100%;\n            padding: 10px;\n            border: 1px solid var(--border-color);\n            border-radius: 5px;\n            color: var(--lable-text-color);\n            background-color: var(--input-background-color);\n        }\n        button {\n            display: block;\n            width: 100%;\n            padding: 10px;\n            font-size: 16px;\n            font-weight: 600;\n            border: none;\n            border-radius: 5px;\n            color: white;\n            background-color: var(--primary-color);\n            cursor: pointer;\n            transition: background-color 0.3s ease;\n        }\n        .button:hover,\n        button:focus {\n            background-color: #2980b9;\n            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);\n            transform: translateY(-2px);\n        }\n        button.button:hover { color: white; }\n        .button:active { transform: translateY(1px); box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3); }\n        @media only screen and (min-width: 768px) {\n            .container { width: 30%; }\n        }\n    </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h1>${atob(\"QlBC\")} Panel <span style=\"font-size: smaller;\">${globalThis.panelVersion}</span> \\u{1F4A6}</h1>\n            <div class=\"form-container\">\n                <h2>User Login</h2>\n                <form id=\"loginForm\">\n                    <div class=\"form-control\">\n                        <label for=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" name=\"password\" required>\n                    </div>\n                    <div id=\"passwordError\" style=\"color: red; margin-bottom: 10px;\"></div>\n                    <button type=\"submit\" class=\"button\">Login</button>\n                </form>\n            </div>\n        </div>\n    <script>\n        localStorage.getItem('darkMode') === 'enabled' && document.body.classList.add('dark-mode');\n        document.getElementById('loginForm').addEventListener('submit', async (event) => {\n            event.preventDefault();\n            const password = document.getElementById('password').value;\n\n            try {\n                const response = await fetch('/login', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'text/plain'\n                    },\n                    body: password\n                });\n            \n                if (!response.ok) {\n                    passwordError.textContent = '\\u26A0\\uFE0F Wrong Password!';\n                    const errorMessage = await response.text();\n                    console.error('Login failed:', errorMessage);\n                    return;\n                }\n                window.location.href = '/panel';\n            } catch (error) {\n                console.error('Error during login:', error);\n            }\n        });\n    <\\/script>\n    </body>\n    </html>",
        "\"QlBC\"",
        "\"QlBC\"",
        "\"Content-Type\"",
        "\"text/html;charset=utf-8\"",
        "\"Access-Control-Allow-Origin\"",
        "\"Access-Control-Allow-Methods\"",
        "\"GET, POST\"",
        "\"Access-Control-Allow-Headers\"",
        "\"Content-Type, Authorization\"",
        "\"X-Content-Type-Options\"",
        "\"nosniff\"",
        "\"X-Frame-Options\"",
        "\"DENY\"",
        "\"Referrer-Policy\"",
        "\"strict-origin-when-cross-origin\"",
        "\"Cache-Control\"",
        "\"no-store, no-cache, must-revalidate, proxy-revalidate, no-transform\"",
        "\"CDN-Cache-Control\"",
        "\"no-store\"",
        "\"renderLoginPage\"",
        "\"pwd\"",
        "\"Method Not Allowed\"",
        "\"secretKey\"",
        "\"secretKey\"",
        "\"HS256\"",
        "\"24h\"",
        "\"Success\"",
        "\"Set-Cookie\"",
        "jwtToken=${jwtToken}; HttpOnly; Secure; Max-Age=${7 * 24 * 60 * 60}; Path=/; SameSite=Strict",
        "\"Content-Type\"",
        "\"text/plain\"",
        "\"generateJWTToken\"",
        "\"0\"",
        "\"\"",
        "\"generateSecretKey\"",
        "\"secretKey\"",
        "\"Cookie\"",
        "\"Unauthorized: Token not available!\"",
        "Successfully authenticated, User ID: ${payload.userID}",
        "\"Authenticate\"",
        "\"Success\"",
        "\"Set-Cookie\"",
        "\"jwtToken=; Secure; SameSite=None; Expires=Thu, 01 Jan 1970 00:00:00 GMT\"",
        "\"Content-Type\"",
        "\"text/plain\"",
        "\"logout\"",
        "\"pwd\"",
        "\"Unauthorized!\"",
        "\"Please enter a new Password!\"",
        "\"pwd\"",
        "\"Success\"",
        "\"Set-Cookie\"",
        "\"jwtToken=; Path=/; Secure; SameSite=None; Expires=Thu, 01 Jan 1970 00:00:00 GMT\"",
        "\"Content-Type\"",
        "\"text/plain\"",
        "\"resetPassword\"",
        "${globalThis.urlOrigin}/panel",
        "\"POST\"",
        "\"login\"",
        "[${ip}]",
        "\"www.speedtest.net\"",
        "\",\"",
        "\"getConfigAddresses\"",
        "${warpConfig.interface.addresses.v6}/128",
        "\"extractWireguardParams\"",
        "${configType}",
        "\"\"",
        "\"Clean IP\"",
        "\"Domain\"",
        "\"IPv4\"",
        "\"IPv6\"",
        "\"\"",
        "\\u{1F4A6} ${index} - ${protocol}${type} - ${addressType} : ${port}",
        "\"generateRemark\"",
        "\"\"",
        "\"randomUpperCase\"",
        "\"\"",
        "\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"",
        "\"getRandomPath\"",
        "\"0\"",
        "\"\"",
        "\"base64ToDecimal\"",
        "\"isIPv4\"",
        "\"isIPv6\"",
        "\"getDomain\"",
        "\"https://api.cloudflareclient.com/v0a4005/reg\"",
        "\"\"",
        "\"\"",
        "\"Android\"",
        "\"PC\"",
        "\"en_US\"",
        "\"POST\"",
        "\"User-Agent\"",
        "\"insomnia/8.6.1\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"fetchAccount\"",
        "\"warpConfigs\"",
        "\"fetchWarpConfigs\"",
        "\"base64Encode\"",
        "\"generateKeyPair\"",
        "\"proxySettings\"",
        "\"json\"",
        "\"warpConfigs\"",
        "\"json\"",
        "An error occurred while getting KV - ${error}",
        "An error occurred while getting Warp configs - ${error}",
        "\"getDataset\"",
        "\"POST\"",
        "\"resetSettings\"",
        "\"true\"",
        "\"proxySettings\"",
        "\"json\"",
        "An error occurred while getting current KV settings - ${error}",
        "\"udpXrayNoiseMode\"",
        "\"udpXrayNoisePacket\"",
        "\"udpXrayNoiseDelayMin\"",
        "\"udpXrayNoiseDelayMax\"",
        "\"udpXrayNoiseCount\"",
        "${udpNoiseDelaysMin[index]}-${udpNoiseDelaysMax[index]}",
        "\"true\"",
        "\"false\"",
        "\"validateField\"",
        "\"remoteDNS\"",
        "\"https://8.8.8.8/dns-query\"",
        "\"localDNS\"",
        "\"8.8.8.8\"",
        "\"VLTRFakeDNS\"",
        "\"proxyIP\"",
        "\" \"",
        "\"\"",
        "\"\"",
        "\"outProxy\"",
        "\"\"",
        "\"outProxy\"",
        "\"cleanIPs\"",
        "\" \"",
        "\"\"",
        "\"\"",
        "\"enableIPv6\"",
        "\"customCdnAddrs\"",
        "\" \"",
        "\"\"",
        "\"\"",
        "\"customCdnHost\"",
        "\"\"",
        "\"customCdnSni\"",
        "\"\"",
        "\"bestVLTRInterval\"",
        "\"30\"",
        "\"VLConfigs\"",
        "\"TRConfigs\"",
        "\"ports\"",
        "\",\"",
        "\"443\"",
        "\"fragmentLengthMin\"",
        "\"100\"",
        "\"fragmentLengthMax\"",
        "\"200\"",
        "\"fragmentIntervalMin\"",
        "\"1\"",
        "\"fragmentIntervalMax\"",
        "\"1\"",
        "\"fragmentPackets\"",
        "\"tlshello\"",
        "\"bypass-lan\"",
        "\"bypass-iran\"",
        "\"bypass-china\"",
        "\"bypass-russia\"",
        "\"block-ads\"",
        "\"block-porn\"",
        "\"block-udp-443\"",
        "\"customBypassRules\"",
        "\" \"",
        "\"\"",
        "\"\"",
        "\"customBlockRules\"",
        "\" \"",
        "\"\"",
        "\"\"",
        "\"warpEndpoints\"",
        "\" \"",
        "\"\"",
        "\"engage.cloudflareclient.com:2408\"",
        "\"warpFakeDNS\"",
        "\"warpEnableIPv6\"",
        "\"bestWarpInterval\"",
        "\"30\"",
        "\"base64\"",
        "\"1-1\"",
        "\"1\"",
        "\"hiddifyNoiseMode\"",
        "\"m4\"",
        "\"nikaNGNoiseMode\"",
        "\"quic\"",
        "\"noiseCountMin\"",
        "\"10\"",
        "\"noiseCountMax\"",
        "\"15\"",
        "\"noiseSizeMin\"",
        "\"5\"",
        "\"noiseSizeMax\"",
        "\"10\"",
        "\"noiseDelayMin\"",
        "\"1\"",
        "\"noiseDelayMax\"",
        "\"1\"",
        "\"proxySettings\"",
        "An error occurred while updating KV - ${error}",
        "\"updateDataset\"",
        "\"dmxlc3M=\"",
        "\"extractChainProxyParams\"",
        "\"Unauthorized\"",
        "\"POST\"",
        "\"Warp configs updated successfully\"",
        "An error occurred while updating Warp configs! - ${error}",
        "\"Unsupported request\"",
        "\"updateWarpConfigs\"",
        "\"\"",
        "\"\"",
        "\"workers.dev\"",
        "port-${port}",
        "\"checked\"",
        "\"\"",
        "<div class=\"routing\" style=\"grid-template-columns: 1fr 2fr; margin-right: 10px;\">\n                <input type=\"checkbox\" id=${id} name=${port} onchange=\"handlePortChange(event)\" value=\"true\" ${isChecked}>\n                <label style=\"margin-bottom: 3px;\" for=${id}>${port}</label>\n            </div>",
        "\"\"",
        "<div id=\"udp-noise-container-${index}\" class=\"udp-noise\">\n                <div class=\"header-container\">\n                    <h4 style=\"margin: 0 5px;\">Noise ${index + 1}</h4>\n                    <button type=\"button\" onclick=\"deleteUdpNoise(this)\" style=\"background: none; margin: 0; border: none; cursor: pointer;\">\n                        <i class=\"fa fa-minus-circle fa-2x\" style=\"color: var(--button-color);\" aria-hidden=\"true\"></i>\n                    </button>      \n                </div>\n                <div class=\"form-control\">\n                    <label for=\"udpXrayNoiseMode-${index}\">\\u{1F635}\\u200D\\u{1F4AB} v2ray Mode</label>\n                    <div class=\"input-with-select\">\n                        <select id=\"udpXrayNoiseMode-${index}\" name=\"udpXrayNoiseMode\">\n                            <option value=\"base64\" ${noise.type === \"base64\" ? \"selected\" : \"\"}>Base64</option>\n                            <option value=\"rand\" ${noise.type === \"rand\" ? \"selected\" : \"\"}>Random</option>\n                            <option value=\"str\" ${noise.type === \"str\" ? \"selected\" : \"\"}>String</option>\n                            <option value=\"hex\" ${noise.type === \"hex\" ? \"selected\" : \"\"}>Hex</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"form-control\">\n                    <label for=\"udpXrayNoisePacket-${index}\">\\u{1F4E5} Noise Packet</label>\n                    <input type=\"text\" id=\"udpXrayNoisePacket-${index}\" name=\"udpXrayNoisePacket\" value=\"${noise.packet}\">\n                </div>\n                <div class=\"form-control\">\n                    <label for=\"udpXrayNoiseDelayMin-${index}\">\\u{1F55E} Noise Delay</label>\n                    <div class=\"min-max\">\n                        <input type=\"number\" id=\"udpXrayNoiseDelayMin-${index}\" name=\"udpXrayNoiseDelayMin\"\n                            value=\"${noise.delay.split(\"-\")[0]}\" min=\"1\" required>\n                        <span> - </span>\n                        <input type=\"number\" id=\"udpXrayNoiseDelayMax-${index}\" name=\"udpXrayNoiseDelayMax\"\n                            value=\"${noise.delay.split(\"-\")[1]}\" min=\"1\" required>\n                    </div>\n                </div>\n                <div class=\"form-control\">\n                    <label for=\"udpXrayNoiseCount-${index}\">\\u{1F39A}\\uFE0F Noise Count</label>\n                    <input type=\"number\" id=\"udpXrayNoiseCount-${index}\" name=\"udpXrayNoiseCount\" value=\"${noise.count}\" min=\"1\" required>\n                </div>\n            </div>",
        "\"base64\"",
        "\"selected\"",
        "\"\"",
        "\"rand\"",
        "\"selected\"",
        "\"\"",
        "\"str\"",
        "\"selected\"",
        "\"\"",
        "\"hex\"",
        "\"selected\"",
        "\"\"",
        "\"-\"",
        "\"-\"",
        "<div>\n            <span class=\"material-symbols-outlined symbol\">verified</span>\n            <span>${app}</span>\n        </div>",
        "\"\"",
        "\"supportedApps\"",
        "${sbType ? \"sing-box://import-remote-profile?url=\" : \"\"}${hiddifyType ? \"hiddify://import/\" : \"\"}https://${globalThis.hostName}/${path}/${globalThis.subPath}${app ? `?app=${app}` : \"\"}#${tag2}",
        "\"sing-box://import-remote-profile?url=\"",
        "\"\"",
        "\"hiddify://import/\"",
        "\"\"",
        "?app=${app}",
        "\"\"",
        "<button onclick=\"openQR('${url}', '${title}')\" style=\"margin-bottom: 8px;\">\n                QR Code&nbsp;<span class=\"material-symbols-outlined\">qr_code</span>\n            </button>",
        "\"subQR\"",
        "${hiddifyType ? \"hiddify://import/\" : \"\"}https://${globalThis.hostName}/${path}/${globalThis.subPath}${app ? `?app=${app}` : \"\"}#${tag2}",
        "\"hiddify://import/\"",
        "\"\"",
        "?app=${app}",
        "\"\"",
        "<button onclick=\"copyToClipboard('${url}')\">\n                Copy Sub<span class=\"material-symbols-outlined\">format_list_bulleted</span>\n            </button>",
        "\"subURL\"",
        "<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta name=\"timestamp\" content=${Date.now()}>\n        <title>${atob(\"QlBC\")} Panel ${globalThis.panelVersion}</title>\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200\" />\n        <title>Collapsible Sections</title>\n        <style>\n            :root {\n                --color: black;\n                --primary-color: #09639f;\n                --secondary-color: #3498db;\n                --header-color: #09639f; \n                --background-color: #fff;\n                --form-background-color: #f9f9f9;\n                --table-active-color: #f2f2f2;\n                --hr-text-color: #3b3b3b;\n                --lable-text-color: #333;\n                --border-color: #ddd;\n                --button-color: #09639f;\n                --input-background-color: white;\n                --header-shadow: 2px 2px 4px rgba(0, 0, 0, 0.25);\n            }\n            body { font-family: Twemoji Country Flags, system-ui; background-color: var(--background-color); color: var(--color) }\n            body.dark-mode {\n                --color: white;\n                --primary-color: #09639F;\n                --secondary-color: #3498DB;\n                --header-color: #3498DB; \n                --background-color: #121212;\n                --form-background-color: #121212;\n                --table-active-color: #252525;\n                --hr-text-color: #D5D5D5;\n                --lable-text-color: #DFDFDF;\n                --border-color: #353535;\n                --button-color: #3498DB;\n                --input-background-color: #252525;\n                --header-shadow: 2px 2px 4px rgba(255, 255, 255, 0.25);\n            }\n            .material-symbols-outlined {\n                margin-left: 5px;\n                font-variation-settings:\n                'FILL' 0,\n                'wght' 400,\n                'GRAD' 0,\n                'opsz' 24\n            }\n            details { border-bottom: 1px solid var(--border-color); }\n            summary {\n                font-weight: bold;\n                cursor: pointer;\n                text-align: center;\n                text-wrap: nowrap;\n            }\n            summary::marker { font-size: 1.5rem; color: var(--secondary-color); }\n            summary h2 { display: inline-flex; }\n            h1 { font-size: 2.5em; text-align: center; color: var(--header-color); text-shadow: var(--header-shadow); }\n            h2,h3 { margin: 30px 0; text-align: center; color: var(--hr-text-color); }\n            hr { border: 1px solid var(--border-color); margin: 20px 0; }\n            .footer {\n                display: flex;\n                font-weight: 600;\n                margin: 10px auto 0 auto;\n                justify-content: center;\n                align-items: center;\n            }\n            .footer button {margin: 0 20px; background: #212121; max-width: fit-content;}\n            .footer button:hover, .footer button:focus { background: #3b3b3b;}\n            .form-control a, a.link { text-decoration: none; }\n            .form-control {\n                margin-bottom: 20px;\n                font-family: Arial, sans-serif;\n                display: flex;\n                flex-direction: column;\n            }\n            .form-control button {\n                background-color: var(--form-background-color);\n                font-size: 1.1rem;\n                font-weight: 600;\n                color: var(--button-color);\n                border-color: var(--primary-color);\n                border: 1px solid;\n            }\n            #apply {display: block; margin-top: 20px;}\n            input.button {font-weight: 600; padding: 15px 0; font-size: 1.1rem;}\n            label {\n                display: block;\n                margin-bottom: 5px;\n                font-size: 110%;\n                font-weight: 600;\n                color: var(--lable-text-color);\n            }\n            input[type=\"text\"],\n            input[type=\"number\"],\n            input[type=\"url\"],\n            textarea,\n            select {\n                width: 100%;\n                text-align: center;\n                padding: 10px;\n                border: 1px solid var(--border-color);\n                border-radius: 5px;\n                font-size: 16px;\n                color: var(--lable-text-color);\n                background-color: var(--input-background-color);\n                box-sizing: border-box;\n                transition: border-color 0.3s ease;\n            }\t\n            input[type=\"text\"]:focus,\n            input[type=\"number\"]:focus,\n            input[type=\"url\"]:focus,\n            textarea:focus,\n            select:focus { border-color: var(--secondary-color); outline: none; }\n            .button,\n            table button {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                width: 100%;\n                white-space: nowrap;\n                padding: 10px 15px;\n                font-size: 16px;\n                font-weight: 600;\n                letter-spacing: 1px;\n                border: none;\n                border-radius: 5px;\n                color: white;\n                background-color: var(--primary-color);\n                cursor: pointer;\n                outline: none;\n                box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n                transition: all 0.3s ease;\n            }\n            input[type=\"checkbox\"] { \n                background-color: var(--input-background-color);\n                style=\"margin: 0; \n                grid-column: 2;\"\n            }\n            table button { margin: auto; width: auto; }\n            .button.disabled {\n                background-color: #ccc;\n                cursor: not-allowed;\n                box-shadow: none;\n                pointer-events: none;\n            }\n            .button:hover,\n            table button:hover,\n            table button:focus {\n                background-color: #2980b9;\n                box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);\n                transform: translateY(-2px);\n            }\n            .header-container button:hover {\n                transform: scale(1.1);\n            }\n            button.button:hover { color: white; }\n            .button:active,\n            table button:active { transform: translateY(1px); box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3); }\n            .form-container {\n                max-width: 90%;\n                margin: 0 auto;\n                padding: 20px;\n                background: var(--form-background-color);\n                border: 1px solid var(--border-color);\n                border-radius: 10px;\n                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n                margin-bottom: 100px;\n            }\n            .table-container { overflow-x: auto; }\n            table { \n                width: 100%;\n                border: 1px solid var(--border-color);\n                border-collapse: separate;\n                border-spacing: 0; \n                border-radius: 10px;\n                margin-bottom: 20px;\n                overflow: hidden;\n            }\n            th, td { padding: 10px; border-bottom: 1px solid var(--border-color); }\n            td div { display: flex; align-items: center; }\n            th { background-color: var(--secondary-color); color: white; font-weight: bold; font-size: 1.1rem; width: 50%;}\n            td:last-child { background-color: var(--table-active-color); }               \n            tr:hover { background-color: var(--table-active-color); }\n            .modal {\n                display: none;\n                position: fixed;\n                z-index: 1;\n                left: 0;\n                top: 0;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n                background-color: rgba(0, 0, 0, 0.4);\n            }\n            .modal-content {\n                background-color: var(--form-background-color);\n                margin: auto;\n                padding: 10px 20px 20px;\n                border: 1px solid var(--border-color);\n                border-radius: 10px;\n                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n                width: 80%;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n            .close { color: var(--color); float: right; font-size: 28px; font-weight: bold; }\n            .close:hover,\n            .close:focus { color: black; text-decoration: none; cursor: pointer; }\n            .form-control label {\n                display: block;\n                margin-bottom: 8px;\n                font-size: 110%;\n                font-weight: 600;\n                color: var(--lable-text-color);\n                line-height: 1.3em;\n            }\n            .form-control input[type=\"password\"] {\n                width: 100%;\n                padding: 10px;\n                border: 1px solid var(--border-color);\n                border-radius: 5px;\n                font-size: 16px;\n                color: var(--lable-text-color);\n                background-color: var(--input-background-color);\n                box-sizing: border-box;\n                margin-bottom: 15px;\n                transition: border-color 0.3s ease;\n            }\n            .routing { \n                display: grid;\n                justify-content: flex-start;\n                grid-template-columns: 1fr 1fr 10fr 1fr;\n                margin-bottom: 15px;\n            }\n            .form-control .routing input { grid-column: 2 / 3; }\n            #routing-rules.form-control { display: grid; grid-template-columns: 1fr 1fr; }\n            .routing label {\n                text-align: left;\n                margin: 0 0 0 10px;\n                font-weight: 400;\n                font-size: 100%;\n                text-wrap: nowrap;\n            }\n            .form-control input[type=\"password\"]:focus { border-color: var(--secondary-color); outline: none; }\n            #passwordError { color: red; margin-bottom: 10px; }\n            .symbol { margin-right: 8px; }\n            .modalQR {\n                display: none;\n                position: fixed;\n                z-index: 1;\n                left: 0;\n                top: 0;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n                background-color: rgba(0, 0, 0, 0.4);\n            }\n            .floating-button {\n                position: fixed;\n                bottom: 20px;\n                left: 20px;\n                background-color: var(--color);\n                color: white;\n                border: none;\n                border-radius: 50%;\n                width: 60px;\n                height: 60px;\n                font-size: 24px;\n                cursor: pointer;\n                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n                transition: background-color 0.3s, transform 0.3s;\n            }\n            .floating-button:hover { transform: scale(1.1); }\n            .min-max { display: grid; grid-template-columns: 1fr auto 1fr; align-items: baseline; width: 100%; }\n            .min-max span { text-align: center; white-space: pre; }\n            .input-with-select { width: 100%; }\n            body.dark-mode .floating-button { background-color: var(--color); }\n            body.dark-mode .floating-button:hover { transform: scale(1.1); }\n            #ips th { background-color: var(--hr-text-color); color: var(--background-color); width: unset; }\n            #ips td { background-color: unset; }\n            #ips td:first-child { background-color: var(--table-active-color); }\n            .header-container { display: flex; justify-content: center; margin-bottom: 20px; }\n            .udp-noise { border: 1px solid var(--border-color); border-radius: 15px; padding: 20px; margin-bottom: 10px;}\n            @media only screen and (min-width: 768px) {\n                .form-container { max-width: 70%; }\n                .form-control { \n                    margin-bottom: 15px;\n                    display: grid;\n                    grid-template-columns: 1fr 1fr;\n                    align-items: baseline;\n                    justify-content: flex-end;\n                    font-family: Arial, sans-serif;\n                }\n                #apply { display: block; margin: 20px auto 0 auto; max-width: 50%; }\n                .modal-content { width: 30% }\n                .routing { display: grid; grid-template-columns: 4fr 1fr 3fr 4fr; }\n            }\n        </style>\n    </head>\n    <body>\n        <h1>${atob(\"QlBC\")} Panel <span style=\"font-size: smaller;\">${globalThis.panelVersion}</span> \\u{1F4A6}</h1>\n        <div class=\"form-container\">\n            <form id=\"configForm\">\n                <details open>\n                    <summary><h2>${atob(\"VkxFU1M=\")} - ${atob(\"VFJPSkFO\")} \\u2699\\uFE0F</h2></summary>\n                    <div class=\"form-control\">\n                        <label for=\"remoteDNS\">\\u{1F30F} Remote DNS</label>\n                        <input type=\"url\" id=\"remoteDNS\" name=\"remoteDNS\" value=\"${remoteDNS}\" required>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"localDNS\">\\u{1F3DA}\\uFE0F Local DNS</label>\n                        <input type=\"text\" id=\"localDNS\" name=\"localDNS\" value=\"${localDNS}\"\n                            pattern=\"^(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}$\"\n                            title=\"Please enter a valid DNS IP Address!\"  required>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"VLTRFakeDNS\">\\u{1F9E2} Fake DNS</label>\n                        <div class=\"input-with-select\">\n                            <select id=\"VLTRFakeDNS\" name=\"VLTRFakeDNS\">\n                                <option value=\"true\" ${VLTRFakeDNS ? \"selected\" : \"\"}>Enabled</option>\n                                <option value=\"false\" ${!VLTRFakeDNS ? \"selected\" : \"\"}>Disabled</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"proxyIP\">\\u{1F4CD} Proxy IPs / Domains</label>\n                        <input type=\"text\" id=\"proxyIP\" name=\"proxyIP\" value=\"${proxyIP.replaceAll(\",\", \" , \")}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"outProxy\">\\u2708\\uFE0F Chain Proxy</label>\n                        <input type=\"text\" id=\"outProxy\" name=\"outProxy\" value=\"${outProxy}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"cleanIPs\">\\u2728 Clean IPs / Domains</label>\n                        <input type=\"text\" id=\"cleanIPs\" name=\"cleanIPs\" value=\"${cleanIPs.replaceAll(\",\", \" , \")}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"scanner\">\\u{1F50E} Clean IP Scanner</label>\n                        <a href=\"https://github.com/bia-pain-bache/Cloudflare-Clean-IP-Scanner/releases/tag/v2.2.5\" name=\"scanner\" target=\"_blank\" style=\"width: 100%;\">\n                            <button type=\"button\" id=\"scanner\" class=\"button\">\n                                Download Scanner\n                                <span class=\"material-symbols-outlined\">open_in_new</span>\n                            </button>\n                        </a>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"enableIPv6\">\\u{1F51B} IPv6</label>\n                        <div class=\"input-with-select\">\n                            <select id=\"enableIPv6\" name=\"enableIPv6\">\n                                <option value=\"true\" ${enableIPv6 ? \"selected\" : \"\"}>Enabled</option>\n                                <option value=\"false\" ${!enableIPv6 ? \"selected\" : \"\"}>Disabled</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"customCdnAddrs\">\\u{1F480} Custom CDN Addrs</label>\n                        <input type=\"text\" id=\"customCdnAddrs\" name=\"customCdnAddrs\" value=\"${customCdnAddrs.replaceAll(\",\", \" , \")}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"customCdnHost\">\\u{1F480} Custom CDN Host</label> \n                        <input type=\"text\" id=\"customCdnHost\" name=\"customCdnHost\" value=\"${customCdnHost}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"customCdnSni\">\\u{1F480} Custom CDN SNI</label>\n                        <input type=\"text\" id=\"customCdnSni\" name=\"customCdnSni\" value=\"${customCdnSni}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"bestVLTRInterval\">\\u{1F504} Best Interval</label>\n                        <input type=\"number\" id=\"bestVLTRInterval\" name=\"bestVLTRInterval\" min=\"10\" max=\"90\" value=\"${bestVLTRInterval}\">\n                    </div>\n                    <div class=\"form-control\" style=\"padding-top: 10px;\">\n                        <label for=\"VLConfigs\">\\u2699\\uFE0F Protocols</label>\n                        <div style=\"width: 100%; display: grid; grid-template-columns: 1fr 1fr; align-items: baseline; margin-top: 10px;\">\n                            <div style = \"display: flex; justify-content: center; align-items: center;\">\n                                <input type=\"checkbox\" id=\"VLConfigs\" name=\"VLConfigs\" onchange=\"handleProtocolChange(event)\" value=\"true\" ${VLConfigs ? \"checked\" : \"\"}>\n                                <label for=\"VLConfigs\" style=\"margin: 0 5px; font-weight: normal; font-size: unset;\">${atob(\"VkxFU1M=\")}</label>\n                            </div>\n                            <div style = \"display: flex; justify-content: center; align-items: center;\">\n                                <input type=\"checkbox\" id=\"TRConfigs\" name=\"TRConfigs\" onchange=\"handleProtocolChange(event)\" value=\"true\" ${TRConfigs ? \"checked\" : \"\"}>\n                                <label for=\"TRConfigs\" style=\"margin: 0 5px; font-weight: normal; font-size: unset;\">${atob(\"VHJvamFu\")}</label>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"table-container\">\n                        <table id=\"ports-block\">\n                            <tr>\n                                <th style=\"text-wrap: nowrap; background-color: gray;\">Config type</th>\n                                <th style=\"text-wrap: nowrap; background-color: gray;\">Ports</th>\n                            </tr>\n                            <tr>\n                                <td style=\"text-align: center; font-size: larger;\"><b>TLS</b></td>\n                                <td>\n                                    <div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr 1fr;\">${httpsPortsBlock}</div>\n                                </td>    \n                            </tr>\n                            ${!httpPortsBlock ? \"\" : `<tr>\n                                <td style=\"text-align: center; font-size: larger;\"><b>Non TLS</b></td>\n                                <td>\n                                    <div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr 1fr;\">${httpPortsBlock}</div>\n                                </td>    \n                            </tr>`}        \n                        </table>\n                    </div>\n                </details>\n                <details>\n                    <summary><h2>FRAGMENT \\u2699\\uFE0F</h2></summary>\t\n                    <div class=\"form-control\">\n                        <label for=\"fragmentLengthMin\">\\u{1F4D0} Length</label>\n                        <div class=\"min-max\">\n                            <input type=\"number\" id=\"fragmentLengthMin\" name=\"fragmentLengthMin\" value=\"${lengthMin}\" min=\"10\" required>\n                            <span> - </span>\n                            <input type=\"number\" id=\"fragmentLengthMax\" name=\"fragmentLengthMax\" value=\"${lengthMax}\" max=\"500\" required>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"fragmentIntervalMin\">\\u{1F55E} Interval</label>\n                        <div class=\"min-max\">\n                            <input type=\"number\" id=\"fragmentIntervalMin\" name=\"fragmentIntervalMin\"\n                                value=\"${intervalMin}\" min=\"1\" max=\"30\" required>\n                            <span> - </span>\n                            <input type=\"number\" id=\"fragmentIntervalMax\" name=\"fragmentIntervalMax\"\n                                value=\"${intervalMax}\" min=\"1\" max=\"30\" required>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"fragmentPackets\">\\u{1F4E6} Packets</label>\n                        <div class=\"input-with-select\">\n                            <select id=\"fragmentPackets\" name=\"fragmentPackets\">\n                                <option value=\"tlshello\" ${fragmentPackets === \"tlshello\" ? \"selected\" : \"\"}>tlshello</option>\n                                <option value=\"1-1\" ${fragmentPackets === \"1-1\" ? \"selected\" : \"\"}>1-1</option>\n                                <option value=\"1-2\" ${fragmentPackets === \"1-2\" ? \"selected\" : \"\"}>1-2</option>\n                                <option value=\"1-3\" ${fragmentPackets === \"1-3\" ? \"selected\" : \"\"}>1-3</option>\n                                <option value=\"1-5\" ${fragmentPackets === \"1-5\" ? \"selected\" : \"\"}>1-5</option>\n                            </select>\n                        </div>\n                    </div>\n                </details>\n                <details>\n                    <summary><h2>WARP GENERAL \\u2699\\uFE0F</h2></summary>\n                    <div class=\"form-control\">\n                        <label for=\"warpEndpoints\">\\u2728 Endpoints</label>\n                        <input type=\"text\" id=\"warpEndpoints\" name=\"warpEndpoints\" value=\"${warpEndpoints.replaceAll(\",\", \" , \")}\" required>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"endpointScanner\" style=\"line-height: 1.5;\">\\u{1F50E} Scan Endpoint</label>\n                        <button type=\"button\" id=\"endpointScanner\" class=\"button\" style=\"padding: 10px 0;\" onclick=\"copyToClipboard('bash <(curl -fsSL https://raw.githubusercontent.com/bia-pain-bache/warp-script/refs/heads/main/endip/install.sh)', false)\">\n                            Copy Script<span class=\"material-symbols-outlined\">terminal</span>\n                        </button>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"warpFakeDNS\">\\u{1F9E2} Fake DNS</label>\n                        <div class=\"input-with-select\">\n                            <select id=\"warpFakeDNS\" name=\"warpFakeDNS\">\n                                <option value=\"true\" ${warpFakeDNS ? \"selected\" : \"\"}>Enabled</option>\n                                <option value=\"false\" ${!warpFakeDNS ? \"selected\" : \"\"}>Disabled</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"warpEnableIPv6\">\\u{1F51B} IPv6</label>\n                        <div class=\"input-with-select\">\n                            <select id=\"warpEnableIPv6\" name=\"warpEnableIPv6\">\n                                <option value=\"true\" ${warpEnableIPv6 ? \"selected\" : \"\"}>Enabled</option>\n                                <option value=\"false\" ${!warpEnableIPv6 ? \"selected\" : \"\"}>Disabled</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"refreshBtn\">\\u267B\\uFE0F Warp Configs</label>\n                        <button id=\"refreshBtn\" type=\"button\" class=\"button\" style=\"padding: 10px 0;\" onclick=\"getWarpConfigs()\">\n                            Update<span class=\"material-symbols-outlined\">autorenew</span>\n                        </button>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"bestWarpInterval\">\\u{1F504} Best Interval</label>\n                        <input type=\"number\" id=\"bestWarpInterval\" name=\"bestWarpInterval\" min=\"10\" max=\"90\" value=\"${bestWarpInterval}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"dlConfigsBtn\">\\u{1F4E5} Download Warp Configs</label>\n                        <button id=\"dlConfigsBtn\" type=\"button\" class=\"button\" style=\"padding: 10px 0;\">\n                            Download<span class=\"material-symbols-outlined\">download</span>\n                        </button>\n                    </div>\n                </details>\n                <details>\n                    <summary><h2>WARP PRO \\u2699\\uFE0F</h2></summary>\n                    <div class=\"header-container\">\n                        <h3 style=\"margin: 0 5px;\">V2RAYNG - V2RAYN</h3>\n                        <button type=\"button\" id=\"add-udp-noise\" onclick=\"addUdpNoise()\" style=\"background: none; margin: 0; border: none; cursor: pointer;\">\n                            <i class=\"fa fa-plus-circle fa-2x\" style=\"color: var(--button-color);\" aria-hidden=\"true\"></i>\n                        </button>       \n                    </div>\n                    <div id=\"udp-noise-container\">\n                        ${udpNoiseBlocks}\n                    </div>\n                    <h3>MAHSANG - NIKANG - HIDDIFY \\u{1F527}</h3>\n                    <div class=\"form-control\">\n                        <label for=\"hiddifyNoiseMode\">\\u{1F635}\\u200D\\u{1F4AB} Hiddify Mode</label>\n                        <input type=\"text\" id=\"hiddifyNoiseMode\" name=\"hiddifyNoiseMode\" \n                            pattern=\"^(m[1-6]|h_[0-9A-Fa-f]{2}|g_([0-9A-Fa-f]{2}_){2}[0-9A-Fa-f]{2})$\" \n                            title=\"Enter 'm1-m6', 'h_HEX', 'g_HEX_HEX_HEX' which HEX can be between 00 to ff\"\n                            value=\"${hiddifyNoiseMode}\" required>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"nikaNGNoiseMode\">\\u{1F635}\\u200D\\u{1F4AB} NikaNG Mode</label>\n                        <input type=\"text\" id=\"nikaNGNoiseMode\" name=\"nikaNGNoiseMode\" \n                            pattern=\"^(none|quic|random|[0-9A-Fa-f]+)$\" \n                            title=\"Enter 'none', 'quic', 'random', or any HEX string like 'ee0000000108aaaa'\"\n                            value=\"${nikaNGNoiseMode}\" required>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"noiseCountMin\">\\u{1F39A}\\uFE0F Noise Count</label>\n                        <div class=\"min-max\">\n                            <input type=\"number\" id=\"noiseCountMin\" name=\"noiseCountMin\"\n                                value=\"${noiseCountMin}\" min=\"1\" required>\n                            <span> - </span>\n                            <input type=\"number\" id=\"noiseCountMax\" name=\"noiseCountMax\"\n                                value=\"${noiseCountMax}\" min=\"1\" required>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"noiseSizeMin\">\\u{1F4CF} Noise Size</label>\n                        <div class=\"min-max\">\n                            <input type=\"number\" id=\"noiseSizeMin\" name=\"noiseSizeMin\"\n                                value=\"${noiseSizeMin}\" min=\"1\" required>\n                            <span> - </span>\n                            <input type=\"number\" id=\"noiseSizeMax\" name=\"noiseSizeMax\"\n                                value=\"${noiseSizeMax}\" min=\"1\" required>\n                        </div>\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"noiseDelayMin\">\\u{1F55E} Noise Delay</label>\n                        <div class=\"min-max\">\n                            <input type=\"number\" id=\"noiseDelayMin\" name=\"noiseDelayMin\"\n                                value=\"${noiseDelayMin}\" min=\"1\" required>\n                            <span> - </span>\n                            <input type=\"number\" id=\"noiseDelayMax\" name=\"noiseDelayMax\"\n                                value=\"${noiseDelayMax}\" min=\"1\" required>\n                        </div>\n                    </div>\n                </details>\n                <details>\n                    <summary><h2>ROUTING RULES \\u2699\\uFE0F</h2></summary>\n                    <div id=\"routing-rules\" class=\"form-control\" style=\"margin-bottom: 20px;\">\t\t\t\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"bypass-lan\" name=\"bypass-lan\" value=\"true\" ${bypassLAN ? \"checked\" : \"\"}>\n                            <label for=\"bypass-lan\">Bypass LAN</label>\n                        </div>\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"block-ads\" name=\"block-ads\" value=\"true\" ${blockAds ? \"checked\" : \"\"}>\n                            <label for=\"block-ads\">Block Ads.</label>\n                        </div>\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"bypass-iran\" name=\"bypass-iran\" value=\"true\" ${bypassIran ? \"checked\" : \"\"}>\n                            <label for=\"bypass-iran\">Bypass Iran</label>\n                        </div>\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"block-porn\" name=\"block-porn\" value=\"true\" ${blockPorn ? \"checked\" : \"\"}>\n                            <label for=\"block-porn\">Block Porn</label>\n                        </div>\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"bypass-china\" name=\"bypass-china\" value=\"true\" ${bypassChina ? \"checked\" : \"\"}>\n                            <label for=\"bypass-china\">Bypass China</label>\n                        </div>\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"block-udp-443\" name=\"block-udp-443\" value=\"true\" ${blockUDP443 ? \"checked\" : \"\"}>\n                            <label for=\"block-udp-443\">Block QUIC</label>\n                        </div>\n                        <div class=\"routing\">\n                            <input type=\"checkbox\" id=\"bypass-russia\" name=\"bypass-russia\" value=\"true\" ${bypassRussia ? \"checked\" : \"\"}>\n                            <label for=\"bypass-russia\">Bypass Russia</label>\n                        </div>\n                    </div>\n                    <h3>CUSTOM RULES \\u{1F527}</h3>\n                    <div class=\"form-control\">\n                        <label for=\"customBypassRules\">\\u{1F7E9} Bypass IPs / Domains</label>\n                        <input type=\"text\" id=\"customBypassRules\" name=\"customBypassRules\" value=\"${customBypassRules.replaceAll(\",\", \" , \")}\">\n                    </div>\n                    <div class=\"form-control\">\n                        <label for=\"customBlockRules\">\\u{1F7E5} Block IPs / Domains</label>\n                        <input type=\"text\" id=\"customBlockRules\" name=\"customBlockRules\" value=\"${customBlockRules.replaceAll(\",\", \" , \")}\">\n                    </div>\n                </details>\n                <div id=\"apply\" class=\"form-control\">\n                    <div style=\"grid-column: 2; width: 100%; display: inline-flex;\">\n                        <input type=\"submit\" id=\"applyButton\" style=\"margin-right: 10px;\" class=\"button disabled\" value=\"APPLY SETTINGS \\u{1F4A5}\" form=\"configForm\">\n                        <button type=\"button\" id=\"resetSettings\" style=\"background: none; margin: 0; border: none; cursor: pointer;\">\n                            <i class=\"fa fa-refresh fa-2x fa-border\" style=\"border-radius: .2em; border-color: var(--border-color);\" aria-hidden=\"true\"></i>\n                        </button>\n                    </div>\n                </div>\n            </form>\n            <hr>            \n            <h2>\\u{1F517} NORMAL SUB</h2>\n            <div class=\"table-container\">\n                <table id=\"normal-configs-table\">\n                    <tr>\n                        <th>Application</th>\n                        <th>Subscription</th>\n                    </tr>\n                    <tr>\n                        <td>\n                            ${supportedApps([\"v2rayNG\", \"NikaNG\", \"MahsaNG\", \"v2rayN\", \"v2rayN-PRO\", \"Shadowrocket\", \"Streisand\", \"Hiddify\", \"Nekoray (Xray)\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"sub\", \"\", `${atob(\"QlBC\")}-Normal`, \"Normal Subscription\")}\n                            ${subURL(\"sub\", \"\", `${atob(\"QlBC\")}-Normal`)}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            ${supportedApps([\"husi\", \"Nekobox\", \"Nekoray (sing-Box)\", \"Karing\"])}\n                        </td>\n                        <td>\n                            ${subURL(\"sub\", \"singbox\", `${atob(\"QlBC\")}-Normal`)}\n                        </td>\n                    </tr>\n                </table>\n            </div>\n            <h2>\\u{1F517} FULL NORMAL SUB</h2>\n            <div class=\"table-container\">\n                <table id=\"full-normal-configs-table\">\n                    <tr>\n                        <th>Application</th>\n                        <th>Subscription</th>\n                    </tr>\n                    <tr>\n                        <td>\n                            ${supportedApps([\"v2rayNG\", \"NikaNG\", \"MahsaNG\", \"v2rayN\", \"v2rayN-PRO\", \"Streisand\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"sub\", \"xray\", `${atob(\"QlBC\")}-Full-Normal`, \"Full normal Subscription\")}\n                            ${subURL(\"sub\", \"xray\", `${atob(\"QlBC\")}-Full-Normal`)}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            ${supportedApps([\"sing-box\", \"v2rayN (sing-box)\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"sub\", \"sfa\", `${atob(\"QlBC\")}-Full-Normal`, \"Full normal Subscription\", true)}\n                            ${subURL(\"sub\", \"sfa\", `${atob(\"QlBC\")}-Full-Normal`)}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            ${supportedApps([\"Clash Meta\", \"Clash Verge\", \"FlClash\", \"Stash\", \"v2rayN (mihomo)\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"sub\", \"clash\", `${atob(\"QlBC\")}-Full-Normal`, \"Full normal Subscription\")}\n                            ${subURL(\"sub\", \"clash\", `${atob(\"QlBC\")}-Full-Normal`)}\n                        </td>\n                    </tr>\n                </table>\n            </div>\n            <h2>\\u{1F517} FRAGMENT SUB</h2>\n            <div class=\"table-container\">\n                <table id=\"frag-sub-table\">\n                    <tr>\n                        <th style=\"text-wrap: nowrap;\">Application</th>\n                        <th style=\"text-wrap: nowrap;\">Subscription</th>\n                    </tr>\n                    <tr>\n                        <td style=\"text-wrap: nowrap;\">\n                            ${supportedApps([\"v2rayNG\", \"NikaNG\", \"MahsaNG\", \"v2rayN\", \"v2rayN-PRO\", \"Streisand\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"fragsub\", \"\", `${atob(\"QlBC\")}-Fragment`, \"Fragment Subscription\")}\n                            ${subURL(\"fragsub\", \"\", `${atob(\"QlBC\")}-Fragment`)}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-wrap: nowrap;\">\n                            ${supportedApps([\"Hiddify\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"fragsub\", \"hiddify-frag\", `${atob(\"QlBC\")}-Fragment`, \"Fragment Subscription\", false, true)}\n                            ${subURL(\"fragsub\", \"hiddify-frag\", `${atob(\"QlBC\")}-Fragment`, true)}\n                        </td>\n                    </tr>\n                </table>\n            </div>\n            <h2>\\u{1F517} WARP SUB</h2>\n            <div class=\"table-container\">\n                <table id=\"normal-configs-table\">\n                    <tr>\n                        <th>Application</th>\n                        <th>Subscription</th>\n                    </tr>\n                    <tr>\n                        <td>\n                            ${supportedApps([\"v2rayNG\", \"v2rayN\", \"Streisand\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"warpsub\", \"xray\", `${atob(\"QlBC\")}-Warp`, \"Warp Subscription\")}\n                            ${subURL(\"warpsub\", \"xray\", `${atob(\"QlBC\")}-Warp`)}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            ${supportedApps([\"sing-box\", \"v2rayN (sing-box)\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"sub\", \"singbox\", `${atob(\"QlBC\")}-Warp`, \"Warp Subscription\", true)}\n                            ${subURL(\"warpsub\", \"singbox\", `${atob(\"QlBC\")}-Warp`)}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            ${supportedApps([\"Hiddify\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"warpsub\", \"hiddify\", `${atob(\"QlBC\")}-Warp`, \"Warp Pro Subscription\", false, true)}\n                            ${subURL(\"warpsub\", \"hiddify\", `${atob(\"QlBC\")}-Warp`, true)}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            ${supportedApps([\"Clash Meta\", \"Clash Verge\", \"FlClash\", \"Stash\", \"v2rayN (mihomo)\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"warpsub\", \"clash\", `${atob(\"QlBC\")}-Warp`, \"Warp Subscription\")}\n                            ${subURL(\"warpsub\", \"clash\", `${atob(\"QlBC\")}-Warp`)}\n                        </td>\n                    </tr>\n                </table>\n            </div>\n            <h2>\\u{1F517} WARP PRO SUB</h2>\n            <div class=\"table-container\">\n                <table id=\"warp-pro-configs-table\">\n                    <tr>\n                        <th>Application</th>\n                        <th>Subscription</th>\n                    </tr>\n                    <tr>\n                        <td>\n                            ${supportedApps([\"v2rayNG\", \"v2rayN\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"warpsub\", \"xray-pro\", `${atob(\"QlBC\")}-Warp-Pro`, \"Warp Pro Subscription\")}\n                            ${subURL(\"warpsub\", \"xray-pro\", `${atob(\"QlBC\")}-Warp-Pro`)}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            ${supportedApps([\"NikaNG\", \"MahsaNG\", \"v2rayN-PRO\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"warpsub\", \"nikang\", `${atob(\"QlBC\")}-Warp-Pro`, \"Warp Pro Subscription\")}\n                            ${subURL(\"warpsub\", \"nikang\", `${atob(\"QlBC\")}-Warp-Pro`)}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            ${supportedApps([\"Hiddify\"])}\n                        </td>\n                        <td>\n                            ${subQR(\"warpsub\", \"hiddify-pro\", `${atob(\"QlBC\")}-Warp-Pro`, \"Warp Pro Subscription\", false, true)}\n                            ${subURL(\"warpsub\", \"hiddify-pro\", `${atob(\"QlBC\")}-Warp-Pro`, true)}\n                        </td>\n                    </tr>\n                </table>\n            </div>\n            <div id=\"myModal\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <span class=\"close\">&times;</span>\n                    <form id=\"passwordChangeForm\">\n                        <h2>Change Password</h2>\n                        <div class=\"form-control\">\n                            <label for=\"newPassword\">New Password</label>\n                            <input type=\"password\" id=\"newPassword\" name=\"newPassword\" required>\n                            </div>\n                        <div class=\"form-control\">\n                            <label for=\"confirmPassword\">Confirm Password</label>\n                            <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required>\n                        </div>\n                        <div id=\"passwordError\" style=\"color: red; margin-bottom: 10px;\"></div>\n                        <button id=\"changePasswordBtn\" type=\"submit\" class=\"button\">Change Password</button>\n                    </form>\n                </div>\n            </div>\n            <div id=\"myQRModal\" class=\"modalQR\">\n                <div class=\"modal-content\" style=\"width: auto; text-align: center;\">\n                    <div style=\"display: flex; flex-direction: column; align-items: center; margin-bottom: 10px;\">\n                        <span id=\"closeQRModal\" class=\"close\" style=\"align-self: flex-end;\">&times;</span>\n                        <span id=\"qrcodeTitle\" style=\"align-self: center; font-weight: bold;\"></span>\n                    </div>\n                    <div id=\"qrcode-container\"></div>\n                </div>\n            </div>\n            <hr>\n            <div class=\"header-container\">\n                <h2 style=\"margin: 0 5px;\">\\u{1F4A1} MY IP</h2>\n                <button type=\"button\" id=\"refresh-geo-location\" onclick=\"fetchIPInfo()\" style=\"background: none; margin: 0; border: none; cursor: pointer;\">\n                    <i class=\"fa fa-refresh fa-2x\" style=\"color: var(--button-color);\" aria-hidden=\"true\"></i>\n                </button>       \n            </div>\n            <div class=\"table-container\">\n                <table id=\"ips\" style=\"text-align: center; margin-bottom: 15px; text-wrap-mode: nowrap;\">\n                    <tr>\n                        <th>Target Address</th>\n                        <th>IP</th>\n                        <th>Country</th>\n                        <th>City</th>\n                        <th>ISP</th>\n                    </tr>\n                    <tr>\n                        <td>Cloudflare CDN</td>\n                        <td id=\"cf-ip\"></td>\n                        <td><b id=\"cf-country\"></b></td>\n                        <td><b id=\"cf-city\"></b></td>\n                        <td><b id=\"cf-isp\"></b></td>\n                    </tr>\n                    <tr>\n                        <td>Others</td>\n                        <td id=\"ip\"></td>\n                        <td><b id=\"country\"></b></td>\n                        <td><b id=\"city\"></b></td>\n                        <td><b id=\"isp\"></b></td>\n                    </tr>\n                </table>\n            </div>\n            <hr>\n            <div class=\"footer\">\n                <i class=\"fa fa-github\" style=\"font-size:36px; margin-right: 10px;\"></i>\n                <a class=\"link\" href=\"https://github.com/bia-pain-bache/${atob(\"QlBC\")}-Worker-Panel\" style=\"color: var(--color); text-decoration: underline;\" target=\"_blank\">Github</a>\n                <button id=\"openModalBtn\" class=\"button\">Change Password</button>\n                <button type=\"button\" id=\"logout\" style=\"background: none; color: var(--color); margin: 0; border: none; cursor: pointer;\">\n                    <i class=\"fa fa-power-off fa-2x\" aria-hidden=\"true\"></i>\n                </button>\n            </div>\n        </div>\n        <button id=\"darkModeToggle\" class=\"floating-button\">\n            <i id=\"modeIcon\" class=\"fa fa-2x fa-adjust\" style=\"color: var(--background-color);\" aria-hidden=\"true\"></i>\n        </button>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js\"><\\/script>\n    <script type=\"module\" defer>\n        import { polyfillCountryFlagEmojis } from \"https://cdn.skypack.dev/country-flag-emoji-polyfill\";\n        polyfillCountryFlagEmojis();\n    <\\/script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js\"><\\/script>\n    <script>\n        const defaultHttpsPorts = ['443', '8443', '2053', '2083', '2087', '2096'];\n        let activePortsNo = ${ports.length};\n        let activeHttpsPortsNo = ${ports.filter((port) => globalThis.defaultHttpsPorts.includes(port)).length};\n        let activeProtocols = ${activeProtocols};\n        localStorage.getItem('darkMode') === 'enabled' && document.body.classList.add('dark-mode');\n\n        document.addEventListener('DOMContentLoaded', async () => {\n            const configForm = document.getElementById('configForm');            \n            const changePass = document.getElementById('openModalBtn');\n            const closeBtn = document.querySelector(\".close\");\n            const passwordChangeForm = document.getElementById('passwordChangeForm');                    \n            const initialFormData = new FormData(configForm);\n            const modal = document.getElementById('myModal');\n            const closeQR = document.getElementById('closeQRModal');\n            const resetSettings = document.getElementById('resetSettings');\n            let modalQR = document.getElementById('myQRModal');\n            let qrcodeContainer = document.getElementById('qrcode-container');\n            let forcedPassChange = false;\n            const darkModeToggle = document.getElementById('darkModeToggle');\n                    \n            const hasFormDataChanged = () => {\n                const currentFormData = new FormData(configForm);\n                const currentFormDataEntries = [...currentFormData.entries()];\n\n                const nonCheckboxFieldsChanged = currentFormDataEntries.some(\n                    ([key, value]) => !initialFormData.has(key) || initialFormData.get(key) !== value\n                );\n\n                const checkboxFieldsChanged = Array.from(configForm.elements)\n                    .filter((element) => element.type === 'checkbox')\n                    .some((checkbox) => {\n                    const initialValue = initialFormData.has(checkbox.name)\n                        ? initialFormData.get(checkbox.name)\n                        : false;\n                    const currentValue = currentFormDataEntries.find(([key]) => key === checkbox.name)?.[1] || false;\n                    return initialValue !== currentValue;\n                });\n\n                return nonCheckboxFieldsChanged || checkboxFieldsChanged;\n            };\n            \n            const enableApplyButton = () => {\n                const isChanged = hasFormDataChanged();\n                applyButton.disabled = !isChanged;\n                applyButton.classList.toggle('disabled', !isChanged);\n            };\n                        \n            passwordChangeForm.addEventListener('submit', event => resetPassword(event));\n            document.getElementById('logout').addEventListener('click', event => logout(event));\n            configForm.addEventListener('submit', (event) => applySettings(event, configForm));\n            configForm.addEventListener('input', enableApplyButton);\n            configForm.addEventListener('change', enableApplyButton);\n            changePass.addEventListener('click', () => {\n                forcedPassChange ? closeBtn.style.display = 'none' : closeBtn.style.display = '';\n                modal.style.display = \"block\";\n                document.body.style.overflow = \"hidden\";\n                forcedPassChange = false;\n            });        \n            closeBtn.addEventListener('click', () => {\n                modal.style.display = \"none\";\n                document.body.style.overflow = \"\";\n            });\n            closeQR.addEventListener('click', () => {\n                modalQR.style.display = \"none\";\n                qrcodeContainer.lastElementChild.remove();\n            });\n            resetSettings.addEventListener('click', async () => {\n                const confirmReset = confirm('\\u26A0\\uFE0F This will reset all panel settings.\\\\nAre you sure?');\n                if(!confirmReset) return;\n                const formData = new FormData();\n                formData.append('resetSettings', 'true');\n                try {\n                    document.body.style.cursor = 'wait';\n                    const refreshButtonVal = refreshBtn.innerHTML;\n                    refreshBtn.innerHTML = '\\u231B Loading...';\n\n                    const response = await fetch('/panel', {\n                        method: 'POST',\n                        body: formData,\n                        credentials: 'include'\n                    });\n\n                    document.body.style.cursor = 'default';\n                    refreshBtn.innerHTML = refreshButtonVal;\n                    if (!response.ok) {\n                        const errorMessage = await response.text();\n                        console.error(errorMessage, response.status);\n                        alert('\\u26A0\\uFE0F An error occured, Please try again!\\\\n\\u26D4 ' + errorMessage);\n                        return;\n                    }       \n                    alert('\\u2705 Panel settings reset to default successfully! \\u{1F60E}');\n                    window.location.reload(true);\n                } catch (error) {\n                    console.error('Error:', error);\n                }\n            });\n            window.onclick = (event) => {\n                if (event.target == modalQR) {\n                    modalQR.style.display = \"none\";\n                    qrcodeContainer.lastElementChild.remove();\n                }\n            }\n            darkModeToggle.addEventListener('click', () => {\n                const isDarkMode = document.body.classList.toggle('dark-mode');\n                localStorage.setItem('darkMode', isDarkMode ? 'enabled' : 'disabled');\n            });\n\n            document.getElementById(\"dlConfigsBtn\").addEventListener(\"click\", async function () {\n                try {\n                    const response = await fetch(\"/get-warp-configs\");\n                    const configs = await response.json();\n                    const zip = new JSZip();\n                    configs.forEach( (config, index) => {\n                        zip.file('\\u{1F4A6} BPB Warp config - ' + String(index + 1) + '.conf', config);\n                    });\n\n                    zip.generateAsync({ type: \"blob\" }).then(function (blob) {\n                        const link = document.createElement(\"a\");\n                        link.href = URL.createObjectURL(blob);\n                        link.download = \"\\u{1F4A6} BPB Warp configs.zip\";\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                    });\n                } catch (error) {\n                    console.error(\"Error fetching configs:\", error);\n                }\n            });\n\n            const isPassSet = ${isPassSet};\n            if (!isPassSet) {\n                forcedPassChange = true;\n                changePass.click();\n            }\n\n            await fetchIPInfo();\n        });\n\n        const fetchIPInfo = async () => {\n            const updateUI = (ip = '-', country = '-', countryCode = '-', city = '-', isp = '-', cfIP) => {\n                const flag = countryCode !== '-' ? String.fromCodePoint(...[...countryCode].map(c => 0x1F1E6 + c.charCodeAt(0) - 65)) : '';\n                document.getElementById(cfIP ? 'cf-ip' : 'ip').textContent = ip;\n                document.getElementById(cfIP ? 'cf-country' : 'country').textContent = country + ' ' + flag;\n                document.getElementById(cfIP ? 'cf-city' : 'city').textContent = city;\n                document.getElementById(cfIP ? 'cf-isp' : 'isp').textContent = isp;\n            };\n\n            const refreshIcon = document.getElementById(\"refresh-geo-location\").querySelector('i');\n            refreshIcon.classList.add('fa-spin');\n            document.body.style.cursor = 'wait';\n\n            try {\n                const ipResponse = await fetch('https://ipwho.is/' + '?nocache=' + Date.now(), { cache: \"no-store\" });\n                const ipResponseObj = await ipResponse.json();\n                const geoResponse = await fetch('/my-ip', { \n                    method: 'POST',\n                    body: ipResponseObj.ip\n                });\n                const ipGeoLocation = await geoResponse.json();\n                updateUI(ipResponseObj.ip, ipGeoLocation.country, ipGeoLocation.countryCode, ipGeoLocation.city, ipGeoLocation.isp);\n                const cfIPresponse = await fetch('https://ipv4.icanhazip.com/?nocache=' + Date.now(), { cache: \"no-store\" });\n                const cfIP = await cfIPresponse.text();\n                const cfGeoResponse = await fetch('/my-ip', { \n                    method: 'POST',\n                    body: cfIP.trim()\n                });\n                const cfIPGeoLocation = await cfGeoResponse.json();\n                updateUI(cfIP, cfIPGeoLocation.country, cfIPGeoLocation.countryCode, cfIPGeoLocation.city, cfIPGeoLocation.isp, true);\n                refreshIcon.classList.remove('fa-spin');\n                document.body.style.cursor = 'default';\n            } catch (error) {\n                console.error('Error fetching IP address:', error);\n            }\n        }\n\n        const addUdpNoise = () => {\n            const container = document.getElementById(\"udp-noise-container\");\n            const noiseBlock = document.getElementById(\"udp-noise-container-0\");\n            const index = container.children.length;\n            const clone = noiseBlock.cloneNode(true);\n            clone.querySelector(\"h4\").textContent = \"Noise \" + String(index + 1);\n            container.appendChild(clone);\n            document.getElementById(\"configForm\").dispatchEvent(new Event(\"change\"));\n        }\n        \n        const deleteUdpNoise = (button) => {\n            const container = document.getElementById(\"udp-noise-container\");\n            if (container.children.length === 1) {\n                alert('\\u26D4 You cannot delete all noises!');\n                return;\n            }   \n            const confirmReset = confirm('\\u26A0\\uFE0F This will delete the noise.\\\\nAre you sure?');\n            if(!confirmReset) return;\n            button.closest(\".udp-noise\").remove();\n            document.getElementById(\"configForm\").dispatchEvent(new Event(\"change\"));\n        }\n\n        const getWarpConfigs = async () => {\n            const confirmReset = confirm('\\u26A0\\uFE0F Are you sure?');\n            if(!confirmReset) return;\n            const refreshBtn = document.getElementById('refreshBtn');\n\n            try {\n                document.body.style.cursor = 'wait';\n                const refreshButtonVal = refreshBtn.innerHTML;\n                refreshBtn.innerHTML = '\\u231B Loading...';\n\n                const response = await fetch('/update-warp', {\n                    method: 'POST',\n                    credentials: 'include'\n                });\n\n                document.body.style.cursor = 'default';\n                refreshBtn.innerHTML = refreshButtonVal;\n                if (!response.ok) {\n                    const errorMessage = await response.text();\n                    console.error(errorMessage, response.status);\n                    alert('\\u26A0\\uFE0F An error occured, Please try again!\\\\n\\u26D4 ' + errorMessage);\n                    return;\n                }          \n                alert('\\u2705 Warp configs updated successfully! \\u{1F60E}');\n            } catch (error) {\n                console.error('Error:', error);\n            } \n        }\n\n        const handlePortChange = (event) => {\n            \n            if(event.target.checked) { \n                activePortsNo++ \n                defaultHttpsPorts.includes(event.target.name) && activeHttpsPortsNo++;\n            } else {\n                activePortsNo--;\n                defaultHttpsPorts.includes(event.target.name) && activeHttpsPortsNo--;\n            }\n\n            if (activePortsNo === 0) {\n                event.preventDefault();\n                event.target.checked = !event.target.checked;\n                alert(\"\\u26D4 At least one port should be selected! \\u{1FAE4}\");\n                activePortsNo = 1;\n                defaultHttpsPorts.includes(event.target.name) && activeHttpsPortsNo++;\n                return false;\n            }\n                \n            if (activeHttpsPortsNo === 0) {\n                event.preventDefault();\n                event.target.checked = !event.target.checked;\n                alert(\"\\u26D4 At least one TLS(https) port should be selected! \\u{1FAE4}\");\n                activeHttpsPortsNo = 1;\n                return false;\n            }\n        }\n        \n        const handleProtocolChange = (event) => {\n            \n            if(event.target.checked) { \n                activeProtocols++ \n            } else {\n                activeProtocols--;\n            }\n\n            if (activeProtocols === 0) {\n                event.preventDefault();\n                event.target.checked = !event.target.checked;\n                alert(\"\\u26D4 At least one Protocol should be selected! \\u{1FAE4}\");\n                activeProtocols = 1;\n                return false;\n            }\n        }\n\n        const openQR = (url, title) => {\n            let qrcodeContainer = document.getElementById(\"qrcode-container\");\n            let qrcodeTitle = document.getElementById(\"qrcodeTitle\");\n            const modalQR = document.getElementById(\"myQRModal\");\n            qrcodeTitle.textContent = title;\n            modalQR.style.display = \"block\";\n            let qrcodeDiv = document.createElement(\"div\");\n            qrcodeDiv.className = \"qrcode\";\n            qrcodeDiv.style.padding = \"2px\";\n            qrcodeDiv.style.backgroundColor = \"#ffffff\";\n            new QRCode(qrcodeDiv, {\n                text: url,\n                width: 256,\n                height: 256,\n                colorDark: \"#000000\",\n                colorLight: \"#ffffff\",\n                correctLevel: QRCode.CorrectLevel.H\n            });\n            qrcodeContainer.appendChild(qrcodeDiv);\n        }\n\n        const copyToClipboard = (text) => {\n            const textarea = document.createElement('textarea');\n            textarea.value = text;\n            document.body.appendChild(textarea);\n            textarea.select();\n            document.execCommand('copy');\n            document.body.removeChild(textarea);\n            alert('\\u{1F4CB} Copied to clipboard:\\\\n\\\\n' +  text);\n        }\n\n        const applySettings = async (event, configForm) => {\n            event.preventDefault();\n            event.stopPropagation();\n            const applyButton = document.getElementById('applyButton');\n            const getValue = (id) => parseInt(document.getElementById(id).value, 10);              \n            const lengthMin = getValue('fragmentLengthMin');\n            const lengthMax = getValue('fragmentLengthMax');\n            const intervalMin = getValue('fragmentIntervalMin');\n            const intervalMax = getValue('fragmentIntervalMax');\n            const customCdnAddrs = document.getElementById('customCdnAddrs').value?.split(',').filter(addr => addr !== '');\n            const customCdnHost = document.getElementById('customCdnHost').value;\n            const customCdnSni = document.getElementById('customCdnSni').value;\n            const isCustomCdn = customCdnAddrs.length || customCdnHost !== '' || customCdnSni !== '';\n            const warpEndpoints = document.getElementById('warpEndpoints').value?.replaceAll(' ', '').split(',');\n            const noiseCountMin = getValue('noiseCountMin');\n            const noiseCountMax = getValue('noiseCountMax');\n            const noiseSizeMin = getValue('noiseSizeMin');\n            const noiseSizeMax = getValue('noiseSizeMax');\n            const noiseDelayMin = getValue('noiseDelayMin');\n            const noiseDelayMax = getValue('noiseDelayMax');\n            const cleanIPs = document.getElementById('cleanIPs').value?.split(',');\n            const proxyIPs = document.getElementById('proxyIP').value?.split(',');\n            const chainProxy = document.getElementById('outProxy').value?.trim();\n            const customBypassRules = document.getElementById('customBypassRules').value?.split(',');                    \n            const customBlockRules = document.getElementById('customBlockRules').value?.split(',');                    \n            const formData = new FormData(configForm);\n            const is${atob(\"Vmxlc3M=\")} = /${atob(\"dmxlc3M=\")}:\\\\/\\\\/[^s@]+@[^\\\\s:]+:[^\\\\s]+/.test(chainProxy);\n            const isSocksHttp = /^(http|socks):\\\\/\\\\/(?:([^:@]+):([^:@]+)@)?([^:@]+):(\\\\d+)$/.test(chainProxy);\n            const hasSecurity = /security=/.test(chainProxy);\n            const securityRegex = /security=(tls|none|reality)/;\n            const validSecurityType = securityRegex.test(chainProxy);\n            let match = chainProxy.match(securityRegex);\n            const securityType = match ? match[1] : null;\n            match = chainProxy.match(/:(\\\\d+)\\\\?/);\n            const ${atob(\"dmxlc3M=\")}Port = match ? match[1] : null;\n            const validTransmission = /type=(tcp|grpc|ws)/.test(chainProxy);\n            const validIPDomain = /^((?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\\\.)+[a-zA-Z]{2,})|(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)(?:\\\\/(?:\\\\d|[12]\\\\d|3[0-2]))?|\\\\[(?:(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}|(?:[a-fA-F0-9]{1,4}:){1,7}:|(?:[a-fA-F0-9]{1,4}:){1,6}:[a-fA-F0-9]{1,4}|(?:[a-fA-F0-9]{1,4}:){1,5}(?::[a-fA-F0-9]{1,4}){1,2}|(?:[a-fA-F0-9]{1,4}:){1,4}(?::[a-fA-F0-9]{1,4}){1,3}|(?:[a-fA-F0-9]{1,4}:){1,3}(?::[a-fA-F0-9]{1,4}){1,4}|(?:[a-fA-F0-9]{1,4}:){1,2}(?::[a-fA-F0-9]{1,4}){1,5}|[a-fA-F0-9]{1,4}:(?::[a-fA-F0-9]{1,4}){1,6}|:(?::[a-fA-F0-9]{1,4}){1,7})\\\\](?:\\\\/(?:12[0-8]|1[0-1]\\\\d|[0-9]?\\\\d))?)$/i;\n            const validEndpoint = /^(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\\\.)+[a-zA-Z]{2,}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|\\\\[(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,7}:\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,6}:[a-fA-F0-9]{1,4}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,5}(?::[a-fA-F0-9]{1,4}){1,2}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,4}(?::[a-fA-F0-9]{1,4}){1,3}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,3}(?::[a-fA-F0-9]{1,4}){1,4}\\\\]|\\\\[(?:[a-fA-F0-9]{1,4}:){1,2}(?::[a-fA-F0-9]{1,4}){1,5}\\\\]|\\\\[[a-fA-F0-9]{1,4}:(?::[a-fA-F0-9]{1,4}){1,6}\\\\]|\\\\[:(?::[a-fA-F0-9]{1,4}){1,7}\\\\]|\\\\[::(?::[a-fA-F0-9]{1,4}){0,7}\\\\]):(?:[0-9]{1,5})$/;\n            const checkedPorts = Array.from(document.querySelectorAll('input[id^=\"port-\"]:checked')).map(input => input.id.split('-')[1]);\n            formData.append('ports', checkedPorts);\n            configForm.querySelectorAll('input[type=\"checkbox\"]').forEach(checkbox => {\n                !formData.has(checkbox.name) && formData.append(checkbox.name, 'false');    \n            });\n            const base64Regex = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\n            const udpNoiseModes = formData.getAll('udpXrayNoiseMode') || [];\n            const udpNoisePackets = formData.getAll('udpXrayNoisePacket') || [];\n            const udpNoiseDelaysMin = formData.getAll('udpXrayNoiseDelayMin') || [];\n            const udpNoiseDelaysMax = formData.getAll('udpXrayNoiseDelayMax') || [];\n\n            const invalidIPs = [...cleanIPs, ...proxyIPs, ...customCdnAddrs, ...customBypassRules, ...customBlockRules, customCdnHost, customCdnSni]?.filter(value => {\n                if (value) {\n                    const trimmedValue = value.trim();\n                    return !validIPDomain.test(trimmedValue);\n                }\n            });\n\n            const invalidEndpoints = warpEndpoints?.filter(value => {\n                if (value) {\n                    const trimmedValue = value.trim();\n                    return !validEndpoint.test(trimmedValue);\n                }\n            });\n\n            if (invalidIPs.length) {\n                alert('\\u26D4 Invalid IPs or Domains \\u{1FAE4}\\\\n\\\\n' + invalidIPs.map(ip => '\\u26A0\\uFE0F ' + ip).join('\\\\n'));\n                return false;\n            }\n            \n            if (invalidEndpoints.length) {\n                alert('\\u26D4 Invalid endpoint \\u{1FAE4}\\\\n\\\\n' + invalidEndpoints.map(endpoint => '\\u26A0\\uFE0F ' + endpoint).join('\\\\n'));\n                return false;\n            }\n\n            if (lengthMin >= lengthMax || intervalMin > intervalMax || noiseCountMin > noiseCountMax || noiseSizeMin > noiseSizeMax || noiseDelayMin > noiseDelayMax) {\n                alert('\\u26D4 Minimum should be smaller or equal to Maximum! \\u{1FAE4}');               \n                return false;\n            }\n\n            if (!(is${atob(\"Vmxlc3M=\")} && (hasSecurity && validSecurityType || !hasSecurity) && validTransmission) && !isSocksHttp && chainProxy) {\n                alert('\\u26D4 Invalid Config! \\u{1FAE4} \\\\n - The chain proxy should be ${atob(\"VkxFU1M=\")}, Socks or Http!\\\\n - ${atob(\"VkxFU1M=\")} transmission should be GRPC,WS or TCP\\\\n - ${atob(\"VkxFU1M=\")} security should be TLS,Reality or None\\\\n - socks or http should be like:\\\\n + (socks or http)://user:pass@host:port\\\\n + (socks or http)://host:port');               \n                return false;\n            }\n\n            if (is${atob(\"Vmxlc3M=\")} && securityType === 'tls' && ${atob(\"dmxlc3M=\")}Port !== '443') {\n                alert('\\u26D4 ${atob(\"VkxFU1M=\")} TLS port can be only 443 to be used as a proxy chain! \\u{1FAE4}');               \n                return false;\n            }\n\n            if (isCustomCdn && !(customCdnAddrs.length && customCdnHost && customCdnSni)) {\n                alert('\\u26D4 All \"Custom\" fields should be filled or deleted together! \\u{1FAE4}');               \n                return false;\n            }\n            \n            let submisionError = false;\n            for (const [index, mode] of udpNoiseModes.entries()) {\n                if (udpNoiseDelaysMin[index] > udpNoiseDelaysMax[index]) {\n                    alert('\\u26D4 The minimum noise delay should be smaller or equal to maximum! \\u{1FAE4}');\n                    submisionError = true;\n                    break;\n                }\n                \n                switch (mode) {\n                    case 'base64':\n                        if (!base64Regex.test(udpNoisePackets[index])) {\n                            alert('\\u26D4 The Base64 noise packet is not a valid base64 value! \\u{1FAE4}');\n                            submisionError = true;\n                        }\n                        break;\n    \n                    case 'rand':\n                        if (!(/^\\\\d+-\\\\d+$/.test(udpNoisePackets[index]))) {\n                            alert('\\u26D4 The Random noise packet should be a range like 0-10 or 10-30! \\u{1FAE4}');\n                            submisionError = true;\n                        }\n                        const [min, max] = udpNoisePackets[index].split(\"-\").map(Number);\n                        if (min > max) {\n                            alert('\\u26D4 The minimum Random noise packet should be smaller or equal to maximum! \\u{1FAE4}');\n                            submisionError = true;\n                        }\n                        break;\n\n                    case 'hex':\n                        if (!(/^(?=(?:[0-9A-Fa-f]{2})*$)[0-9A-Fa-f]+$/.test(udpNoisePackets[index]))) {\n                            alert('\\u26D4 The Hex noise packet is not a valid hex value! It should have even length and consisted of 0-9, a-f and A-F. \\u{1FAE4}');\n                            submisionError = true;\n                        }\n                        break;\n                }\n            }\n            if (submisionError) return false;\n\n            try {\n                document.body.style.cursor = 'wait';\n                const applyButtonVal = applyButton.value;\n                applyButton.value = '\\u231B Loading...';\n\n                const response = await fetch('/panel', {\n                    method: 'POST',\n                    body: formData,\n                    credentials: 'include'\n                });\n\n                document.body.style.cursor = 'default';\n                applyButton.value = applyButtonVal;\n\n                if (!response.ok) {\n                    const errorMessage = await response.text();\n                    console.error(errorMessage, response.status);\n                    alert('\\u26A0\\uFE0F Session expired! Please login again.');\n                    window.location.href = '/login';\n                    return;\n                }                \n                alert('\\u2705 Parameters applied successfully \\u{1F60E}');\n                window.location.reload();\n            } catch (error) {\n                console.error('Error:', error);\n            }\n        }\n\n        const logout = async (event) => {\n            event.preventDefault();\n\n            try {\n                const response = await fetch('/logout', {\n                    method: 'GET',\n                    credentials: 'same-origin'\n                });\n            \n                if (!response.ok) {\n                    console.error('Failed to log out:', response.status);\n                    return;\n                }\n                window.location.href = '/login';\n            } catch (error) {\n                console.error('Error:', error);\n            }\n        }\n\n        const resetPassword = async (event) => {\n            event.preventDefault();\n            const modal = document.getElementById('myModal');\n            const newPasswordInput = document.getElementById('newPassword');\n            const confirmPasswordInput = document.getElementById('confirmPassword');\n            const passwordError = document.getElementById('passwordError');             \n            const newPassword = newPasswordInput.value;\n            const confirmPassword = confirmPasswordInput.value;\n\n            if (newPassword !== confirmPassword) {\n                passwordError.textContent = \"Passwords do not match\";\n                return false;\n            }\n\n            const hasCapitalLetter = /[A-Z]/.test(newPassword);\n            const hasNumber = /[0-9]/.test(newPassword);\n            const isLongEnough = newPassword.length >= 8;\n\n            if (!(hasCapitalLetter && hasNumber && isLongEnough)) {\n                passwordError.textContent = '\\u26A0\\uFE0F Password must contain at least one capital letter, one number, and be at least 8 characters long.';\n                return false;\n            }\n                    \n            try {\n                const response = await fetch('/panel/password', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'text/plain'\n                    },\n                    body: newPassword,\n                    credentials: 'same-origin'\n                });\n            \n                if (response.ok) {\n                    modal.style.display = \"none\";\n                    document.body.style.overflow = \"\";\n                    alert(\"\\u2705 Password changed successfully! \\u{1F44D}\");\n                    window.location.href = '/login';\n                } else if (response.status === 401) {\n                    const errorMessage = await response.text();\n                    passwordError.textContent = '\\u26A0\\uFE0F ' + errorMessage;\n                    console.error(errorMessage, response.status);\n                    alert('\\u26A0\\uFE0F Session expired! Please login again.');\n                    window.location.href = '/login';\n                } else {\n                    const errorMessage = await response.text();\n                    passwordError.textContent = '\\u26A0\\uFE0F ' + errorMessage;\n                    console.error(errorMessage, response.status);\n                    return false;\n                }\n            } catch (error) {\n                console.error('Error:', error);\n            }\n        }\n    <\\/script>\n    </body>\t\n    </html>",
        "\"QlBC\"",
        "\"QlBC\"",
        "\"VkxFU1M=\"",
        "\"VFJPSkFO\"",
        "\"selected\"",
        "\"\"",
        "\"selected\"",
        "\"\"",
        "\",\"",
        "\" , \"",
        "\",\"",
        "\" , \"",
        "\"selected\"",
        "\"\"",
        "\"selected\"",
        "\"\"",
        "\",\"",
        "\" , \"",
        "\"checked\"",
        "\"\"",
        "\"VkxFU1M=\"",
        "\"checked\"",
        "\"\"",
        "\"VHJvamFu\"",
        "\"\"",
        "<tr>\n                                <td style=\"text-align: center; font-size: larger;\"><b>Non TLS</b></td>\n                                <td>\n                                    <div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr 1fr;\">${httpPortsBlock}</div>\n                                </td>    \n                            </tr>",
        "\"tlshello\"",
        "\"selected\"",
        "\"\"",
        "\"1-1\"",
        "\"selected\"",
        "\"\"",
        "\"1-2\"",
        "\"selected\"",
        "\"\"",
        "\"1-3\"",
        "\"selected\"",
        "\"\"",
        "\"1-5\"",
        "\"selected\"",
        "\"\"",
        "\",\"",
        "\" , \"",
        "\"selected\"",
        "\"\"",
        "\"selected\"",
        "\"\"",
        "\"selected\"",
        "\"\"",
        "\"selected\"",
        "\"\"",
        "\"checked\"",
        "\"\"",
        "\"checked\"",
        "\"\"",
        "\"checked\"",
        "\"\"",
        "\"checked\"",
        "\"\"",
        "\"checked\"",
        "\"\"",
        "\"checked\"",
        "\"\"",
        "\"checked\"",
        "\"\"",
        "\",\"",
        "\" , \"",
        "\",\"",
        "\" , \"",
        "\"v2rayNG\"",
        "\"NikaNG\"",
        "\"MahsaNG\"",
        "\"v2rayN\"",
        "\"v2rayN-PRO\"",
        "\"Shadowrocket\"",
        "\"Streisand\"",
        "\"Hiddify\"",
        "\"Nekoray (Xray)\"",
        "\"sub\"",
        "\"\"",
        "${atob(\"QlBC\")}-Normal",
        "\"QlBC\"",
        "\"Normal Subscription\"",
        "\"sub\"",
        "\"\"",
        "${atob(\"QlBC\")}-Normal",
        "\"QlBC\"",
        "\"husi\"",
        "\"Nekobox\"",
        "\"Nekoray (sing-Box)\"",
        "\"Karing\"",
        "\"sub\"",
        "\"singbox\"",
        "${atob(\"QlBC\")}-Normal",
        "\"QlBC\"",
        "\"v2rayNG\"",
        "\"NikaNG\"",
        "\"MahsaNG\"",
        "\"v2rayN\"",
        "\"v2rayN-PRO\"",
        "\"Streisand\"",
        "\"sub\"",
        "\"xray\"",
        "${atob(\"QlBC\")}-Full-Normal",
        "\"QlBC\"",
        "\"Full normal Subscription\"",
        "\"sub\"",
        "\"xray\"",
        "${atob(\"QlBC\")}-Full-Normal",
        "\"QlBC\"",
        "\"sing-box\"",
        "\"v2rayN (sing-box)\"",
        "\"sub\"",
        "\"sfa\"",
        "${atob(\"QlBC\")}-Full-Normal",
        "\"QlBC\"",
        "\"Full normal Subscription\"",
        "\"sub\"",
        "\"sfa\"",
        "${atob(\"QlBC\")}-Full-Normal",
        "\"QlBC\"",
        "\"Clash Meta\"",
        "\"Clash Verge\"",
        "\"FlClash\"",
        "\"Stash\"",
        "\"v2rayN (mihomo)\"",
        "\"sub\"",
        "\"clash\"",
        "${atob(\"QlBC\")}-Full-Normal",
        "\"QlBC\"",
        "\"Full normal Subscription\"",
        "\"sub\"",
        "\"clash\"",
        "${atob(\"QlBC\")}-Full-Normal",
        "\"QlBC\"",
        "\"v2rayNG\"",
        "\"NikaNG\"",
        "\"MahsaNG\"",
        "\"v2rayN\"",
        "\"v2rayN-PRO\"",
        "\"Streisand\"",
        "\"fragsub\"",
        "\"\"",
        "${atob(\"QlBC\")}-Fragment",
        "\"QlBC\"",
        "\"Fragment Subscription\"",
        "\"fragsub\"",
        "\"\"",
        "${atob(\"QlBC\")}-Fragment",
        "\"QlBC\"",
        "\"Hiddify\"",
        "\"fragsub\"",
        "\"hiddify-frag\"",
        "${atob(\"QlBC\")}-Fragment",
        "\"QlBC\"",
        "\"Fragment Subscription\"",
        "\"fragsub\"",
        "\"hiddify-frag\"",
        "${atob(\"QlBC\")}-Fragment",
        "\"QlBC\"",
        "\"v2rayNG\"",
        "\"v2rayN\"",
        "\"Streisand\"",
        "\"warpsub\"",
        "\"xray\"",
        "${atob(\"QlBC\")}-Warp",
        "\"QlBC\"",
        "\"Warp Subscription\"",
        "\"warpsub\"",
        "\"xray\"",
        "${atob(\"QlBC\")}-Warp",
        "\"QlBC\"",
        "\"sing-box\"",
        "\"v2rayN (sing-box)\"",
        "\"sub\"",
        "\"singbox\"",
        "${atob(\"QlBC\")}-Warp",
        "\"QlBC\"",
        "\"Warp Subscription\"",
        "\"warpsub\"",
        "\"singbox\"",
        "${atob(\"QlBC\")}-Warp",
        "\"QlBC\"",
        "\"Hiddify\"",
        "\"warpsub\"",
        "\"hiddify\"",
        "${atob(\"QlBC\")}-Warp",
        "\"QlBC\"",
        "\"Warp Pro Subscription\"",
        "\"warpsub\"",
        "\"hiddify\"",
        "${atob(\"QlBC\")}-Warp",
        "\"QlBC\"",
        "\"Clash Meta\"",
        "\"Clash Verge\"",
        "\"FlClash\"",
        "\"Stash\"",
        "\"v2rayN (mihomo)\"",
        "\"warpsub\"",
        "\"clash\"",
        "${atob(\"QlBC\")}-Warp",
        "\"QlBC\"",
        "\"Warp Subscription\"",
        "\"warpsub\"",
        "\"clash\"",
        "${atob(\"QlBC\")}-Warp",
        "\"QlBC\"",
        "\"v2rayNG\"",
        "\"v2rayN\"",
        "\"warpsub\"",
        "\"xray-pro\"",
        "${atob(\"QlBC\")}-Warp-Pro",
        "\"QlBC\"",
        "\"Warp Pro Subscription\"",
        "\"warpsub\"",
        "\"xray-pro\"",
        "${atob(\"QlBC\")}-Warp-Pro",
        "\"QlBC\"",
        "\"NikaNG\"",
        "\"MahsaNG\"",
        "\"v2rayN-PRO\"",
        "\"warpsub\"",
        "\"nikang\"",
        "${atob(\"QlBC\")}-Warp-Pro",
        "\"QlBC\"",
        "\"Warp Pro Subscription\"",
        "\"warpsub\"",
        "\"nikang\"",
        "${atob(\"QlBC\")}-Warp-Pro",
        "\"QlBC\"",
        "\"Hiddify\"",
        "\"warpsub\"",
        "\"hiddify-pro\"",
        "${atob(\"QlBC\")}-Warp-Pro",
        "\"QlBC\"",
        "\"Warp Pro Subscription\"",
        "\"warpsub\"",
        "\"hiddify-pro\"",
        "${atob(\"QlBC\")}-Warp-Pro",
        "\"QlBC\"",
        "\"QlBC\"",
        "\"Vmxlc3M=\"",
        "\"dmxlc3M=\"",
        "\"dmxlc3M=\"",
        "\"Vmxlc3M=\"",
        "\"VkxFU1M=\"",
        "\"VkxFU1M=\"",
        "\"VkxFU1M=\"",
        "\"Vmxlc3M=\"",
        "\"dmxlc3M=\"",
        "\"VkxFU1M=\"",
        "\"Content-Type\"",
        "\"text/html;charset=utf-8\"",
        "\"Access-Control-Allow-Origin\"",
        "\"Access-Control-Allow-Methods\"",
        "\"GET, POST\"",
        "\"Access-Control-Allow-Headers\"",
        "\"Content-Type, Authorization\"",
        "\"X-Content-Type-Options\"",
        "\"nosniff\"",
        "\"X-Frame-Options\"",
        "\"DENY\"",
        "\"Referrer-Policy\"",
        "\"strict-origin-when-cross-origin\"",
        "\"Cache-Control\"",
        "\"no-store, no-cache, must-revalidate, proxy-revalidate, no-transform\"",
        "\"CDN-Cache-Control\"",
        "\"no-store\"",
        "\"renderHomePage\"",
        "\"isValidUUID\"",
        "\"https://cloudflare-dns.com/dns-query\"",
        "${dohURL}?name=${encodeURIComponent(domain)}&type=A",
        "${dohURL}?name=${encodeURIComponent(domain)}&type=AAAA",
        "\"application/dns-json\"",
        "\"application/dns-json\"",
        "\"Error resolving DNS:\"",
        "An error occurred while resolving DNS - ${error}",
        "\"resolveDNS\"",
        "\"isDomain\"",
        "\"POST\"",
        "\"Unauthorized or expired session!\"",
        "\"Success\"",
        "\"pwd\"",
        "${globalThis.urlOrigin}/login",
        "\"handlePanel\"",
        "\"/\"",
        "\"Invalid path\"",
        "\"https:\"",
        "\"manual\"",
        "\"fallback\"",
        "http://ip-api.com/json/${ip}?nocache=${Date.now()}",
        "\"Content-Type\"",
        "\"text/plain;charset=utf-8\"",
        "\"Error fetching IP address:\"",
        "\"getMyIP\"",
        "\"Unauthorized or expired session!\"",
        "\",\"",
        "[Interface]\nPrivateKey = ${privateKey}\nAddress = 172.16.0.2/32, ${warpIPv6}\nDNS = 1.1.1.1, 1.0.0.1, 2606:4700:4700::1111, 2606:4700:4700::1001\nMTU = 1280\n[Peer]\nPublicKey = ${publicKey}\nAllowedIPs = 0.0.0.0/0\nAllowedIPs = ::/0\nEndpoint = ${endpoint}",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"getWarpConfigFiles\"",
        "\",\"",
        "\"3.0.9\"",
        "\"80\"",
        "\"8080\"",
        "\"2052\"",
        "\"2082\"",
        "\"2086\"",
        "\"2095\"",
        "\"8880\"",
        "\"443\"",
        "\"8443\"",
        "\"2053\"",
        "\"2083\"",
        "\"2087\"",
        "\"2096\"",
        "\"YnBiLnlvdXNlZi5pc2VnYXJvLmNvbQ==\"",
        "\"Host\"",
        "\"app\"",
        "\"https://cloudflare-dns.com/dns-query\"",
        "\"speed.cloudflare.com\"",
        "\"/secrets\"",
        "Please set UUID and ${atob(\"VHJvamFu\")} password first. Please visit <a href=\"https://${hostName}/secrets\" target=\"_blank\">here</a> to generate them.",
        "\"VHJvamFu\"",
        "\"init\"",
        "Invalid UUID: ${userID}",
        "\"init\"",
        "\"object\"",
        "\"KV Dataset is not properly set! Please refer to tutorials.\"",
        "\"init\"",
        "\"initializeParams\"",
        "\"cloudflare:sockets\"",
        "\"\"",
        "\"\"",
        "[${address}:${portWithRandomLog}] ${info}",
        "\"\"",
        "\"log\"",
        "\"sec-websocket-protocol\"",
        "\"\"",
        "\"\"",
        "${portRemote}--${Math.random()} ${isUDP ? \"udp \" : \"tcp \"}",
        "\"udp \"",
        "\"tcp \"",
        "\"UDP proxy only enable for DNS which is port 53\"",
        "readableWebSocketStream is close",
        "readableWebSocketStream is abort",
        "\"readableWebSocketStream pipeTo error\"",
        "\"VLOverWSHandler\"",
        "\"Error:\"",
        "\"checkUuidInApiResponse\"",
        "${atob(\"d3d3Lg==\")}${address}${atob(\"LnNzbGlwLmlv\")}",
        "\"d3d3Lg==\"",
        "\"LnNzbGlwLmlv\"",
        "connected to ${address}:${port}",
        "\"connectAndWrite\"",
        "\"/\"",
        "\",\"",
        "\"retry tcpSocket closed error\"",
        "\"retry\"",
        "\"handleTCPOutBound\"",
        "\"message\"",
        "\"close\"",
        "\"error\"",
        "\"webSocketServer has error\"",
        "ReadableStream was canceled, due to ${reason}",
        "\"makeReadableWebSocketStream\"",
        "\"invalid data\"",
        "\",\"",
        "\",\"",
        "checkUuidInApi: ${await checkUuidInApiResponse(slicedBufferString)}, userID: ${slicedBufferString}",
        "\"invalid user\"",
        "command ${command} is not support, command 01-tcp,02-udp,03-mux",
        "\"\"",
        "\".\"",
        "\":\"",
        "invild  addressType is ${addressType}",
        "addressValue is empty, addressType is ${addressType}",
        "\"processVLHeader\"",
        "\"webSocket.readyState is not open, maybe close\"",
        "remoteConnection!.readable is close with hasIncomingData is ${hasIncomingData}",
        "remoteConnection!.readable abort",
        "${atob(\"dmxlc3M=\")}RemoteSocketToWS has exception",
        "\"dmxlc3M=\"",
        "retry",
        "\"VLRemoteSocketToWS\"",
        "\"+\"",
        "\"/\"",
        "\"base64ToArrayBuffer\"",
        "\"safeCloseWebSocket error\"",
        "\"safeCloseWebSocket\"",
        "\"-\"",
        "\"-\"",
        "\"-\"",
        "\"-\"",
        "\"unsafeStringify\"",
        "\"Stringified UUID is invalid\"",
        "\"stringify\"",
        "\"POST\"",
        "\"content-type\"",
        "\"application/dns-message\"",
        "doh success and dns message length is ${udpSize}",
        "\"dns udp has error\"",
        "\"handleUDPOutBound\"",
        "\"cloudflare:sockets\"",
        "\"\"",
        "\"\"",
        "[${address}:${portWithRandomLog}] ${info}",
        "\"\"",
        "\"log\"",
        "\"sec-websocket-protocol\"",
        "\"\"",
        "\"\"",
        "${portRemote}--${Math.random()} tcp",
        "readableWebSocketStream is closed",
        "readableWebSocketStream is aborted",
        "\"readableWebSocketStream pipeTo error\"",
        "\"TROverWSHandler\"",
        "\"invalid data\"",
        "\"invalid header format (missing CR LF)\"",
        "\"invalid password\"",
        "\"invalid SOCKS5 request data\"",
        "\"unsupported command, only TCP (CONNECT) is allowed\"",
        "\"\"",
        "\".\"",
        "\":\"",
        "invalid addressType is ${atype}",
        "address is empty, addressType is ${atype}",
        "\"parseTRHeader\"",
        "${atob(\"d3d3Lg==\")}${address}${atob(\"LnNzbGlwLmlv\")}",
        "\"d3d3Lg==\"",
        "\"LnNzbGlwLmlv\"",
        "connected to ${address}:${port}",
        "\"connectAndWrite\"",
        "\"/\"",
        "\",\"",
        "\"retry tcpSocket closed error\"",
        "\"retry\"",
        "\"handleTCPOutBound\"",
        "\"message\"",
        "\"close\"",
        "\"error\"",
        "\"webSocketServer has error\"",
        "ReadableStream was canceled, due to ${reason}",
        "\"makeReadableWebSocketStream\"",
        "\"webSocket connection is not open\"",
        "remoteSocket.readable is closed, hasIncomingData: ${hasIncomingData}",
        "\"remoteSocket.readable abort\"",
        "${atob(\"dHJvamFu\")}RemoteSocketToWS error:",
        "\"dHJvamFu\"",
        "retry",
        "\"TRRemoteSocketToWS\"",
        "\"+\"",
        "\"/\"",
        "\"base64ToArrayBuffer\"",
        "\"safeCloseWebSocket error\"",
        "\"safeCloseWebSocket\"",
        "<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>${atob(\"QlBC\")} Error</title>\n        <style>\n            :root {\n                --color: black;\n                --header-color: #09639f; \n                --background-color: #fff;\n                --border-color: #ddd;\n                --header-shadow: 2px 2px 4px rgba(0, 0, 0, 0.25);\n            }\n            body, html {\n                height: 100%;\n                width: 100%;\n                margin: 0;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                font-family: system-ui;\n                color: var(--color);\n                background-color: var(--background-color);\n            }\n            body.dark-mode {\n                --color: white;\n                --header-color: #3498DB; \n                --background-color: #121212;\n                --header-shadow: 2px 2px 4px rgba(255, 255, 255, 0.25);          \n            }\n            h1 { font-size: 2.5rem; text-align: center; color: var(--header-color); text-shadow: var(--header-shadow); }\n            #error-container { text-align: center; }\n        </style>\n    </head>\n    <body>\n        <div id=\"error-container\">\n            <h1>${atob(\"QlBC\")} Panel <span style=\"font-size: smaller;\">${globalThis.panelVersion}</span> \\u{1F4A6}</h1>\n            <div id=\"error-message\">\n                <h2>\\u274C Something went wrong!</h2>\n                <p><b>${error ? `\\u26A0\\uFE0F ${error.cause ? error.message.toString() : error.stack.toString()}` : \"\"}</b></p>\n            </div>\n        </div>\n    <script>\n        localStorage.getItem('darkMode') === 'enabled' && document.body.classList.add('dark-mode');\n    <\\/script>\n    </body>\n    </html>",
        "\"QlBC\"",
        "\"QlBC\"",
        "\\u26A0\\uFE0F ${error.cause ? error.message.toString() : error.stack.toString()}",
        "\"\"",
        "\"Content-Type\"",
        "\"text/html\"",
        "\"renderErrorPage\"",
        "\"geosite:category-ir\"",
        "\"geoip:ir\"",
        "\"geosite:cn\"",
        "\"geoip:cn\"",
        "\"geosite:category-ru\"",
        "\"geoip:ru\"",
        "\"geosite:category-ads-all\"",
        "\"geosite:category-ads-ir\"",
        "\"geosite:category-porn\"",
        "\",\"",
        "\",\"",
        "\"https://cloudflare-dns.com/dns-query\"",
        "\"1.1.1.1\"",
        "\"1.0.0.1\"",
        "\"2606:4700:4700::1111\"",
        "\"2606:4700:4700::1001\"",
        "\"1.1.1.1\"",
        "\"1.0.0.1\"",
        "\"127.0.0.1\"",
        "domain:${domain}",
        "\"127.0.0.1\"",
        "\"cloudflare-dns.com\"",
        "\"cloudflare.com\"",
        "\"dash.cloudflare.com\"",
        "\"cloudflare-dns.com\"",
        "\"UseIP\"",
        "\"UseIPv4\"",
        "\"dns\"",
        "\"https://8.8.8.8/dns-query\"",
        "full:${dohHost.host}",
        "full:${domain}",
        "domain:${domain}",
        "\"fakedns\"",
        "\"fakedns\"",
        "\"buildXrayDNS\"",
        "\"direct\"",
        "\"geosite:private\"",
        "\"geoip:private\"",
        "\"direct\"",
        "\"geosite:category-ir\"",
        "\"geoip:ir\"",
        "\"direct\"",
        "\"geosite:cn\"",
        "\"geoip:cn\"",
        "\"block\"",
        "\"geosite:category-ads-all\"",
        "\"block\"",
        "\"geosite:category-ads-ir\"",
        "\"block\"",
        "\"geosite:category-porn\"",
        "\",\"",
        "\",\"",
        "\"chain\"",
        "\"fragment\"",
        "\"proxy\"",
        "\"1.1.1.1\"",
        "\"1.0.0.1\"",
        "\"2606:4700:4700::1111\"",
        "\"2606:4700:4700::1001\"",
        "\"1.1.1.1\"",
        "\"1.0.0.1\"",
        "full:${dohHost}",
        "\"dns-in\"",
        "\"dns-out\"",
        "\"field\"",
        "\"socks-in\"",
        "\"http-in\"",
        "\"53\"",
        "\"udp\"",
        "\"dns-out\"",
        "\"field\"",
        "\"53\"",
        "\"443\"",
        "\"domain\"",
        "\"ip\"",
        "\"balancerTag\"",
        "\"outboundTag\"",
        "\"all\"",
        "\"field\"",
        "\"53\"",
        "\"udp\"",
        "\"direct\"",
        "\"field\"",
        "\"udp\"",
        "\"443\"",
        "\"block\"",
        "\"field\"",
        "\"field\"",
        "\"createRule\"",
        "\"domain\"",
        "\"direct\"",
        "\"ip\"",
        "\"direct\"",
        "\"domain\"",
        "\"block\"",
        "\"ip\"",
        "\"block\"",
        "\"direct\"",
        "domain:${address}",
        "domain:${address}",
        "\"tcp,udp\"",
        "\"all\"",
        "\"field\"",
        "\"tcp,udp\"",
        "\"field\"",
        "\"buildXrayRoutingRules\"",
        "\"dmxlc3M=\"",
        "\"none\"",
        "\"ws\"",
        "\"none\"",
        "\"User-Agent\"",
        "\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36\"",
        "/${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : \"\"}?ed=2560",
        "/${btoa(proxyIP)}",
        "\"\"",
        "\"tls\"",
        "\"randomized\"",
        "\"h2\"",
        "\"http/1.1\"",
        "\"fragment\"",
        "\"UseIPv4v6\"",
        "\"UseIPv4\"",
        "\"buildXrayVLOutbound\"",
        "\"dHJvamFu\"",
        "\"ws\"",
        "\"none\"",
        "/tr${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : \"\"}?ed=2560",
        "/${btoa(proxyIP)}",
        "\"\"",
        "\"tls\"",
        "\"randomized\"",
        "\"h2\"",
        "\"http/1.1\"",
        "\"fragment\"",
        "\"UseIPv4v6\"",
        "\"UseIPv4\"",
        "\"buildXrayTROutbound\"",
        "\"proxy\"",
        "\"wireguard\"",
        "\"172.16.0.2/32\"",
        "\"162.159.192.1:2408\"",
        "\"chain\"",
        "\"proxy\"",
        "\"nikang\"",
        "${noiseCountMin}-${noiseCountMax}",
        "${noiseSizeMin}-${noiseSizeMax}",
        "${noiseDelayMin}-${noiseDelayMax}",
        "\"buildXrayWarpOutbound\"",
        "\"socks\"",
        "\"http\"",
        "\"tcp\"",
        "\"proxy\"",
        "\"UseIPv4v6\"",
        "\"UseIPv4\"",
        "\"reject\"",
        "\"chain\"",
        "\"reject\"",
        "\"dmxlc3M=\"",
        "\"none\"",
        "\"auto\"",
        "\"proxy\"",
        "\"UseIPv4v6\"",
        "\"UseIPv4\"",
        "\"chain\"",
        "\"tls\"",
        "\",\"",
        "\"reality\"",
        "\"http\"",
        "\",\"",
        "\",\"",
        "\"GET\"",
        "\"1.1\"",
        "\"Content-Type\"",
        "\"application/octet-stream\"",
        "\"OK\"",
        "\"200\"",
        "\"1.1\"",
        "\"http\"",
        "\"tcp\"",
        "\"reality\"",
        "\"none\"",
        "\"ws\"",
        "\"grpc\"",
        "\"multi\"",
        "\"buildXrayChainOutbound\"",
        "\"freedom\"",
        "${lengthMin}-${lengthMax}",
        "${intervalMin}-${intervalMax}",
        "\"UseIPv4v6\"",
        "\"UseIPv4\"",
        "\"UseIPv4v6\"",
        "\"UseIPv4\"",
        "\"buildFreedomOutbound\"",
        "\"fakedns\"",
        "\"fakedns\"",
        "${interval}s",
        "\"prox-2\"",
        "\"chain\"",
        "\"chain\"",
        "\"buildXrayConfig\"",
        "\\u{1F4A6} ${atob(\"QlBC\")} F - Best Ping \\u{1F4A5}",
        "\"QlBC\"",
        "\\u{1F4A6} ${atob(\"QlBC\")} - Best Ping \\u{1F4A5}",
        "\"QlBC\"",
        "\"buildXrayBestPingConfig\"",
        "\"10-20\"",
        "\"20-30\"",
        "\"30-40\"",
        "\"40-50\"",
        "\"50-60\"",
        "\"60-70\"",
        "\"70-80\"",
        "\"80-90\"",
        "\"90-100\"",
        "\"10-30\"",
        "\"20-40\"",
        "\"30-50\"",
        "\"40-60\"",
        "\"50-70\"",
        "\"60-80\"",
        "\"70-90\"",
        "\"80-100\"",
        "\"100-200\"",
        "\\u{1F4A6} ${atob(\"QlBC\")} F - Best Fragment \\u{1F60E}",
        "\"QlBC\"",
        "chain-${index + 1}",
        "prox-${index + 1}",
        "prox-${index + 1}",
        "frag-${index + 1}",
        "frag-${index + 1}",
        "\"1-1\"",
        "\"buildXrayBestFragmentConfig\"",
        "\\u{1F4A6} ${atob(\"QlBC\")} F - WorkerLess \\u2B50",
        "\"QlBC\"",
        "\"fragment\"",
        "\"fake-outbound\"",
        "\"google.com\"",
        "\"443\"",
        "\"google.com\"",
        "\"google.com\"",
        "\"\"",
        "\"/\"",
        "\"buildXrayWorkerLessConfig\"",
        "\"An error occured while parsing chain proxy: \"",
        "\"proxySettings\"",
        "\"\"",
        "\",\"",
        "\"VkxFU1M=\"",
        "\"VHJvamFu\"",
        "\"fragment\"",
        "\"C\"",
        "\"F\"",
        "\"\"",
        "\"VkxFU1M=\"",
        "\"proxy\"",
        "\"proxy\"",
        "prox-${proxyIndex}",
        "chain-${proxyIndex}",
        "prox-${proxyIndex}",
        "\"Content-Type\"",
        "\"text/plain;charset=utf-8\"",
        "\"Cache-Control\"",
        "\"no-store, no-cache, must-revalidate, proxy-revalidate\"",
        "\"CDN-Cache-Control\"",
        "\"no-store\"",
        "\"getXrayCustomConfigs\"",
        "\",\"",
        "\":\"",
        "\"xray\"",
        "\" Pro \"",
        "\" \"",
        "\"xray-pro\"",
        "\"udp-noise\"",
        "\",\"",
        "\":\"",
        "\\u{1F4A6} ${index + 1} - Warp${proIndicator}\\u{1F1EE}\\u{1F1F7}",
        "\\u{1F4A6} ${index + 1} - WoW${proIndicator}\\u{1F30D}",
        "\"xray-pro\"",
        "\"udp-noise\"",
        "\"proxy\"",
        "prox-${index + 1}",
        "chain-${index + 1}",
        "prox-${index + 1}",
        "\\u{1F4A6} Warp${proIndicator}- Best Ping \\u{1F680}",
        "\"xray-pro\"",
        "\\u{1F4A6} WoW${proIndicator}- Best Ping \\u{1F680}",
        "\"xray-pro\"",
        "\"Content-Type\"",
        "\"text/plain;charset=utf-8\"",
        "\"Cache-Control\"",
        "\"no-store, no-cache, must-revalidate, proxy-revalidate\"",
        "\"CDN-Cache-Control\"",
        "\"no-store\"",
        "\"getXrayWarpConfigs\"",
        "\"\"",
        "\"warning\"",
        "\"socks\"",
        "\"noauth\"",
        "\"http\"",
        "\"tls\"",
        "\"socks-in\"",
        "\"http\"",
        "\"noauth\"",
        "\"http\"",
        "\"tls\"",
        "\"http-in\"",
        "\"dokodemo-door\"",
        "\"1.1.1.1\"",
        "\"tcp,udp\"",
        "\"dns-in\"",
        "\"dns\"",
        "\"dns-out\"",
        "\"freedom\"",
        "\"UseIP\"",
        "\"direct\"",
        "\"blackhole\"",
        "\"http\"",
        "\"block\"",
        "\"IPIfNonMatch\"",
        "\"all\"",
        "\"prox\"",
        "\"leastPing\"",
        "\"prox\"",
        "\"https://www.gstatic.com/generate_204\"",
        "\"30s\"",
        "\",\"",
        "\",\"",
        "\"direct\"",
        "\"geosite-ir\"",
        "\"geoip-ir\"",
        "\"direct\"",
        "\"geosite-cn\"",
        "\"geoip-cn\"",
        "\"direct\"",
        "\"geosite-category-ru\"",
        "\"geoip-ru\"",
        "\"block\"",
        "\"geosite-malware\"",
        "\"block\"",
        "\"geosite-phishing\"",
        "\"block\"",
        "\"geosite-cryptominers\"",
        "\"block\"",
        "\"geosite-category-ads-all\"",
        "\"block\"",
        "\"geosite-nsfw\"",
        "\"1.1.1.1\"",
        "\"doh-resolver\"",
        "\"dns-direct\"",
        "\"\\u2705 Selector\"",
        "\"dns-remote\"",
        "\"direct\"",
        "\"dns-direct\"",
        "\"local\"",
        "\"dns-local\"",
        "\"https://8.8.8.8/dns-query\"",
        "\"\\u2705 Selector\"",
        "\"doh-resolver\"",
        "\"any\"",
        "\"dns-direct\"",
        "\"dns-direct\"",
        "\"www.gstatic.com\"",
        "\"dns-local\"",
        "\"raw.githubusercontent.com\"",
        "\"time.apple.com\"",
        "\"dns-direct\"",
        "\"Direct\"",
        "\"dns-direct\"",
        "\"Global\"",
        "\"dns-remote\"",
        "\"reject\"",
        "\"direct\"",
        "\"logical\"",
        "\"and\"",
        "\"dns-direct\"",
        "\"block\"",
        "\"createRule\"",
        "\"dns-direct\"",
        "\"dns-block\"",
        "\"fakeip\"",
        "\"dns-fake\"",
        "\"tun-in\"",
        "\"A\"",
        "\"AAAA\"",
        "\"dns-fake\"",
        "\"198.18.0.0/15\"",
        "\"fc00::/18\"",
        "\"buildSingBoxDNS\"",
        "\",\"",
        "\",\"",
        "\"sniff\"",
        "\"hijack-dns\"",
        "\"or\"",
        "\"dns-in\"",
        "\"dns\"",
        "\"logical\"",
        "\"Direct\"",
        "\"direct\"",
        "\"Global\"",
        "\"\\u2705 Selector\"",
        "\"direct\"",
        "\"geosite-ir\"",
        "\"geoip-ir\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geosite-ir.srs\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geoip-ir.srs\"",
        "\"direct\"",
        "\"geosite-cn\"",
        "\"geoip-cn\"",
        "\"https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-cn.srs\"",
        "\"https://raw.githubusercontent.com/SagerNet/sing-geoip/rule-set/geoip-cn.srs\"",
        "\"direct\"",
        "\"geosite-category-ru\"",
        "\"geoip-ru\"",
        "\"https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-category-ru.srs\"",
        "\"https://raw.githubusercontent.com/SagerNet/sing-geoip/rule-set/geoip-ru.srs\"",
        "\"block\"",
        "\"geosite-malware\"",
        "\"geoip-malware\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geosite-malware.srs\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geoip-malware.srs\"",
        "\"block\"",
        "\"geosite-phishing\"",
        "\"geoip-phishing\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geosite-phishing.srs\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geoip-phishing.srs\"",
        "\"block\"",
        "\"geosite-cryptominers\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geosite-cryptominers.srs\"",
        "\"block\"",
        "\"geosite-category-ads-all\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geosite-category-ads-all.srs\"",
        "\"block\"",
        "\"geosite-nsfw\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-sing-box-rules/rule-set/geosite-nsfw.srs\"",
        "\"direct\"",
        "\"direct\"",
        "\"createRule\"",
        "\"remote\"",
        "\"\"",
        "\"binary\"",
        "\"\"",
        "\"direct\"",
        "\"rule_set\"",
        "\"direct\"",
        "\"rule_set\"",
        "\"direct\"",
        "\"rule_set\"",
        "\"reject\"",
        "\"rule_set\"",
        "\"reject\"",
        "\"direct\"",
        "\"pushRuleIfNotEmpty\"",
        "\"domain_suffix\"",
        "\"ip_cidr\"",
        "\"\"",
        "\"direct\"",
        "\"direct\"",
        "\"processRules\"",
        "\"direct\"",
        "\"reject\"",
        "\"udp\"",
        "\"quic\"",
        "\"reject\"",
        "\"buildSingBoxRoutingRules\"",
        "/${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : \"\"}",
        "/${btoa(proxyIP)}",
        "\"\"",
        "\"dmxlc3M=\"",
        "\"\"",
        "\"http/1.1\"",
        "\"randomized\"",
        "\"Sec-WebSocket-Protocol\"",
        "\"ws\"",
        "\"prefer_ipv4\"",
        "\"ipv4_only\"",
        "\"buildSingBoxVLOutbound\"",
        "/tr${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : \"\"}",
        "/${btoa(proxyIP)}",
        "\"\"",
        "\"dHJvamFu\"",
        "\"http/1.1\"",
        "\"randomized\"",
        "\"Sec-WebSocket-Protocol\"",
        "\"ws\"",
        "\"prefer_ipv4\"",
        "\"ipv4_only\"",
        "\"buildSingBoxTROutbound\"",
        "\"[\"",
        "\":\"",
        "\"[\"",
        "\":\"",
        "\"162.159.192.1\"",
        "\"172.16.0.2/32\"",
        "\"0.0.0.0/0\"",
        "\"::/0\"",
        "\"wireguard\"",
        "\"prefer_ipv4\"",
        "\"ipv4_only\"",
        "\"buildSingBoxWarpOutbound\"",
        "\"socks\"",
        "\"http\"",
        "\"\"",
        "\"\"",
        "\"prefer_ipv4\"",
        "\"ipv4_only\"",
        "\"socks\"",
        "\"5\"",
        "\"dmxlc3M=\"",
        "\"\"",
        "\"\"",
        "\"prefer_ipv4\"",
        "\"ipv4_only\"",
        "\"tls\"",
        "\"reality\"",
        "\",\"",
        "\"h2\"",
        "\"reality\"",
        "\"http\"",
        "\",\"",
        "\"http\"",
        "\"GET\"",
        "\"Connection\"",
        "\"keep-alive\"",
        "\"Content-Type\"",
        "\"application/octet-stream\"",
        "\"ws\"",
        "\"?ed=\"",
        "\"?ed=\"",
        "\"ws\"",
        "\"Sec-WebSocket-Protocol\"",
        "\"grpc\"",
        "\"grpc\"",
        "\"buildSingBoxChainOutbound\"",
        "\"prefer_ipv4\"",
        "\"ipv4_only\"",
        "\\u{1F4A6} Warp - Best Ping \\u{1F680}",
        "\\u{1F4A6} WoW - Best Ping \\u{1F680}",
        "\\u{1F4A6} Warp - Best Ping \\u{1F680}",
        "${proxySettings.bestWarpInterval}s",
        "\\u{1F4A6} WoW - Best Ping \\u{1F680}",
        "${proxySettings.bestWarpInterval}s",
        "\",\"",
        "\\u{1F4A6} ${index + 1} - Warp \\u{1F1EE}\\u{1F1F7}",
        "\\u{1F4A6} ${index + 1} - WoW \\u{1F30D}",
        "\"\"",
        "\"Content-Type\"",
        "\"text/plain;charset=utf-8\"",
        "\"Cache-Control\"",
        "\"no-store, no-cache, must-revalidate, proxy-revalidate\"",
        "\"CDN-Cache-Control\"",
        "\"no-store\"",
        "\"getSingBoxWarpConfig\"",
        "\"An error occured while parsing chain proxy: \"",
        "\"proxySettings\"",
        "\"\"",
        "\",\"",
        "\"prefer_ipv4\"",
        "\"ipv4_only\"",
        "\"\\u{1F4A6} Best Ping \\u{1F4A5}\"",
        "${bestVLTRInterval}s",
        "\"\\u{1F4A6} Best Ping \\u{1F4A5}\"",
        "\"VkxFU1M=\"",
        "\"VHJvamFu\"",
        "\"C\"",
        "\"\"",
        "\"VkxFU1M=\"",
        "proxy-${proxyIndex}",
        "\"VHJvamFu\"",
        "proxy-${proxyIndex}",
        "proxy-${proxyIndex}",
        "\"Content-Type\"",
        "\"text/plain;charset=utf-8\"",
        "\"Cache-Control\"",
        "\"no-store, no-cache, must-revalidate, proxy-revalidate\"",
        "\"CDN-Cache-Control\"",
        "\"no-store\"",
        "\"getSingBoxCustomConfig\"",
        "\"warn\"",
        "\"direct\"",
        "\"dns-in\"",
        "\"0.0.0.0\"",
        "\"1.1.1.1\"",
        "\"tun\"",
        "\"tun-in\"",
        "\"172.18.0.1/30\"",
        "\"fdfe:dcba:9876::1/126\"",
        "\"mixed\"",
        "\"mixed\"",
        "\"mixed-in\"",
        "\"0.0.0.0\"",
        "\"selector\"",
        "\"\\u2705 Selector\"",
        "\"urltest\"",
        "\"\"",
        "\"https://www.gstatic.com/generate_204\"",
        "\"\"",
        "\"direct\"",
        "\"ipv4_only\"",
        "\"direct\"",
        "\"\\u2705 Selector\"",
        "\"time.apple.com\"",
        "\"direct\"",
        "\"30m\"",
        "\"127.0.0.1:9090\"",
        "\"ui\"",
        "\"https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip\"",
        "\"direct\"",
        "\"Rule\"",
        "\"1.1.1.1\"",
        "\"1.0.0.1\"",
        "\"[2606:4700:4700::1111]\"",
        "\"[2606:4700:4700::1001]\"",
        "\"1.1.1.1\"",
        "\"1.0.0.1\"",
        "\",\"",
        "\"ir\"",
        "\"cn\"",
        "\"ru\"",
        "\"enable\"",
        "\"listen\"",
        "\"0.0.0.0:1053\"",
        "\"ipv6\"",
        "\"respect-rules\"",
        "\"use-system-hosts\"",
        "\"nameserver\"",
        "${dns2}#\\u2705 Selector",
        "${remoteDNS}#proxy-1",
        "${remoteDNS}#\\u2705 Selector",
        "\"proxy-server-nameserver\"",
        "${localDNS}#DIRECT",
        "\"nameserver-policy\"",
        "\"raw.githubusercontent.com\"",
        "${localDNS}#DIRECT",
        "\"time.apple.com\"",
        "${localDNS}#DIRECT",
        "\"www.gstatic.com\"",
        "\"system\"",
        "\"nameserver-policy\"",
        "${remoteDNS}#proxy-1",
        "\"nameserver-policy\"",
        "rule-set:${geosites.join(\",\")}",
        "\",\"",
        "${localDNS}#DIRECT",
        "\"nameserver-policy\"",
        "+.${domain}",
        "${localDNS}#DIRECT",
        "\"default-nameserver\"",
        "https://8.8.8.8/dns-query#${isChain ? \"proxy-1\" : \"\\u2705 Selector\"}",
        "\"proxy-1\"",
        "\"\\u2705 Selector\"",
        "\"enhanced-mode\"",
        "\"fake-ip\"",
        "\"fake-ip-range\"",
        "\"198.18.0.1/16\"",
        "\"fake-ip-filter\"",
        "\"geosite:private\"",
        "\"buildClashDNS\"",
        "\",\"",
        "\",\"",
        "\"direct\"",
        "\"yaml\"",
        "\"private\"",
        "\"private-cidr\"",
        "\"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.yaml\"",
        "\"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.yaml\"",
        "\"direct\"",
        "\"text\"",
        "\"ir\"",
        "\"ir-cidr\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-clash-rules/release/ir.txt\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-clash-rules/release/ircidr.txt\"",
        "\"direct\"",
        "\"yaml\"",
        "\"cn\"",
        "\"cn-cidr\"",
        "\"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.yaml\"",
        "\"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.yaml\"",
        "\"direct\"",
        "\"yaml\"",
        "\"ru\"",
        "\"ru-cidr\"",
        "\"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ru.yaml\"",
        "\"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/ru.yaml\"",
        "\"block\"",
        "\"text\"",
        "\"malware\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-clash-rules/release/malware.txt\"",
        "\"block\"",
        "\"text\"",
        "\"phishing\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-clash-rules/release/phishing.txt\"",
        "\"block\"",
        "\"text\"",
        "\"cryptominers\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-clash-rules/release/cryptominers.txt\"",
        "\"block\"",
        "\"text\"",
        "\"ads\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-clash-rules/release/ads.txt\"",
        "\"block\"",
        "\"text\"",
        "\"nsfw\"",
        "\"https://raw.githubusercontent.com/Chocolate4U/Iran-clash-rules/release/nsfw.txt\"",
        "\"text\"",
        "\"txt\"",
        "\"http\"",
        "./ruleset/${tag2}.${fileExtension}",
        "\"buildRuleProvider\"",
        "\"direct\"",
        "RULE-SET,${geosite},${type === \"direct\" ? \"DIRECT\" : \"REJECT\"}",
        "\"direct\"",
        "\"DIRECT\"",
        "\"REJECT\"",
        "\"domain\"",
        "\"direct\"",
        "RULE-SET,${geoip},${type === \"direct\" ? \"DIRECT\" : \"REJECT\"}${noResolve ? \",no-resolve\" : \"\"}",
        "\"direct\"",
        "\"DIRECT\"",
        "\"REJECT\"",
        "\",no-resolve\"",
        "\"\"",
        "\"ipcidr\"",
        "DOMAIN-SUFFIX,${address},${action}",
        "\"IP-CIDR\"",
        "\"IP-CIDR6\"",
        "\"\"",
        "\"/\"",
        "\"\"",
        "\"/32\"",
        "\"/128\"",
        "${type},${ip}${cidr},${action},no-resolve",
        "\"generateRule\"",
        "\"DIRECT\"",
        "\"REJECT\"",
        "\"AND,((NETWORK,udp),(DST-PORT,443)),REJECT\"",
        "\"OR,((IP-CIDR,10.10.34.34/32),(IP-CIDR,10.10.34.35/32),(IP-CIDR,10.10.34.36/32)),REJECT\"",
        "\"MATCH,\\u2705 Selector\"",
        "\"buildClashRoutingRules\"",
        "\"\"",
        "\"name\"",
        "\"type\"",
        "\"dmxlc3M=\"",
        "\"server\"",
        "\"port\"",
        "\"uuid\"",
        "\"packet-encoding\"",
        "\"\"",
        "\"tls\"",
        "\"network\"",
        "\"ws\"",
        "\"udp\"",
        "\"ws-opts\"",
        "\"path\"",
        "\"headers\"",
        "\"host\"",
        "\"max-early-data\"",
        "\"early-data-header-name\"",
        "\"Sec-WebSocket-Protocol\"",
        "\"servername\"",
        "\"alpn\"",
        "\"h2\"",
        "\"http/1.1\"",
        "\"client-fingerprint\"",
        "\"random\"",
        "\"skip-cert-verify\"",
        "\"buildClashVLOutbound\"",
        "\"\"",
        "\"name\"",
        "\"type\"",
        "\"dHJvamFu\"",
        "\"server\"",
        "\"port\"",
        "\"password\"",
        "\"network\"",
        "\"ws\"",
        "\"udp\"",
        "\"ws-opts\"",
        "\"path\"",
        "\"headers\"",
        "\"host\"",
        "\"max-early-data\"",
        "\"early-data-header-name\"",
        "\"Sec-WebSocket-Protocol\"",
        "\"sni\"",
        "\"alpn\"",
        "\"h2\"",
        "\"http/1.1\"",
        "\"client-fingerprint\"",
        "\"random\"",
        "\"skip-cert-verify\"",
        "\"buildClashTROutbound\"",
        "\"[\"",
        "\":\"",
        "\"[\"",
        "\":\"",
        "\"name\"",
        "\"type\"",
        "\"wireguard\"",
        "\"ip\"",
        "\"172.16.0.2/32\"",
        "\"ipv6\"",
        "\"private-key\"",
        "\"server\"",
        "\"162.159.192.1\"",
        "\"port\"",
        "\"public-key\"",
        "\"allowed-ips\"",
        "\"0.0.0.0/0\"",
        "\"::/0\"",
        "\"reserved\"",
        "\"udp\"",
        "\"mtu\"",
        "\"dialer-proxy\"",
        "\"buildClashWarpOutbound\"",
        "\"socks\"",
        "\"http\"",
        "\"socks\"",
        "\"socks5\"",
        "\"name\"",
        "\"\"",
        "\"type\"",
        "\"server\"",
        "\"port\"",
        "\"dialer-proxy\"",
        "\"\"",
        "\"username\"",
        "\"password\"",
        "\"name\"",
        "\"\\u{1F4A6} Chain Best Ping \\u{1F4A5}\"",
        "\"type\"",
        "\"dmxlc3M=\"",
        "\"server\"",
        "\"port\"",
        "\"udp\"",
        "\"uuid\"",
        "\"flow\"",
        "\"network\"",
        "\"dialer-proxy\"",
        "\"\\u{1F4A6} Best Ping \\u{1F4A5}\"",
        "\"tls\"",
        "\",\"",
        "\"tls\"",
        "\"servername\"",
        "\"alpn\"",
        "\"client-fingerprint\"",
        "\"reality\"",
        "\"tls\"",
        "\"servername\"",
        "\"client-fingerprint\"",
        "\"reality-opts\"",
        "\"public-key\"",
        "\"short-id\"",
        "\"http\"",
        "\",\"",
        "\"http-opts\"",
        "\"method\"",
        "\"GET\"",
        "\"path\"",
        "\"headers\"",
        "\"Connection\"",
        "\"keep-alive\"",
        "\"Content-Type\"",
        "\"application/octet-stream\"",
        "\"ws\"",
        "\"?ed=\"",
        "\"?ed=\"",
        "\"ws-opts\"",
        "\"path\"",
        "\"headers\"",
        "\"Host\"",
        "\"max-early-data\"",
        "\"early-data-header-name\"",
        "\"Sec-WebSocket-Protocol\"",
        "\"grpc\"",
        "\"grpc-opts\"",
        "\"grpc-service-name\"",
        "\"buildClashChainOutbound\"",
        "\"rule-providers\"",
        "\"proxy-groups\"",
        "\"proxy-groups\"",
        "\"\\u{1F4A6} Warp - Best Ping \\u{1F680}\"",
        "\"\\u{1F4A6} WoW - Best Ping \\u{1F680}\"",
        "\"\\u{1F4A6} Warp - Best Ping \\u{1F680}\"",
        "\"proxy-groups\"",
        "\"proxy-groups\"",
        "\"\\u{1F4A6} WoW - Best Ping \\u{1F680}\"",
        "\",\"",
        "\\u{1F4A6} ${index + 1} - Warp \\u{1F1EE}\\u{1F1F7}",
        "\\u{1F4A6} ${index + 1} - WoW \\u{1F30D}",
        "\"\"",
        "\"Content-Type\"",
        "\"text/plain;charset=utf-8\"",
        "\"Cache-Control\"",
        "\"no-store, no-cache, must-revalidate, proxy-revalidate\"",
        "\"CDN-Cache-Control\"",
        "\"no-store\"",
        "\"getClashWarpConfig\"",
        "\"An error occured while parsing chain proxy: \"",
        "\"proxySettings\"",
        "\"\"",
        "\"rule-providers\"",
        "\"proxy-groups\"",
        "\"proxy-groups\"",
        "\"\\u{1F4A6} Best Ping \\u{1F4A5}\"",
        "\"\\u{1F4A6} Best Ping \\u{1F4A5}\"",
        "\",\"",
        "\"VkxFU1M=\"",
        "\"VHJvamFu\"",
        "\"C\"",
        "\"\"",
        "\" : \"",
        "\" - \"",
        "\"VkxFU1M=\"",
        "/${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : \"\"}",
        "/${btoa(proxyIP)}",
        "\"\"",
        "proxy-${proxyIndex}",
        "\"VHJvamFu\"",
        "/tr${getRandomPath(16)}${proxyIP ? `/${btoa(proxyIP)}` : \"\"}",
        "/${btoa(proxyIP)}",
        "\"\"",
        "proxy-${proxyIndex}",
        "\"name\"",
        "\"dialer-proxy\"",
        "proxy-${proxyIndex}",
        "\"Content-Type\"",
        "\"text/plain;charset=utf-8\"",
        "\"Cache-Control\"",
        "\"no-store, no-cache, must-revalidate, proxy-revalidate\"",
        "\"CDN-Cache-Control\"",
        "\"no-store\"",
        "\"getClashNormalConfig\"",
        "\"mixed-port\"",
        "\"ipv6\"",
        "\"allow-lan\"",
        "\"mode\"",
        "\"rule\"",
        "\"log-level\"",
        "\"warning\"",
        "\"disable-keep-alive\"",
        "\"keep-alive-idle\"",
        "\"keep-alive-interval\"",
        "\"unified-delay\"",
        "\"geo-auto-update\"",
        "\"geo-update-interval\"",
        "\"external-controller\"",
        "\"127.0.0.1:9090\"",
        "\"external-ui-url\"",
        "\"https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip\"",
        "\"external-ui\"",
        "\"ui\"",
        "\"external-controller-cors\"",
        "\"allow-origins\"",
        "\"*\"",
        "\"allow-private-network\"",
        "\"profile\"",
        "\"store-selected\"",
        "\"store-fake-ip\"",
        "\"dns\"",
        "\"tun\"",
        "\"enable\"",
        "\"stack\"",
        "\"mixed\"",
        "\"auto-route\"",
        "\"strict-route\"",
        "\"auto-detect-interface\"",
        "\"dns-hijack\"",
        "\"any:53\"",
        "\"mtu\"",
        "\"sniffer\"",
        "\"enable\"",
        "\"force-dns-mapping\"",
        "\"parse-pure-ip\"",
        "\"override-destination\"",
        "\"sniff\"",
        "\"HTTP\"",
        "\"ports\"",
        "\"TLS\"",
        "\"ports\"",
        "\"proxies\"",
        "\"proxy-groups\"",
        "\"name\"",
        "\"\\u2705 Selector\"",
        "\"type\"",
        "\"select\"",
        "\"proxies\"",
        "\"name\"",
        "\"\"",
        "\"type\"",
        "\"url-test\"",
        "\"url\"",
        "\"https://www.gstatic.com/generate_204\"",
        "\"interval\"",
        "\"tolerance\"",
        "\"proxies\"",
        "\"rule-providers\"",
        "\"rules\"",
        "\"ntp\"",
        "\"enable\"",
        "\"server\"",
        "\"time.apple.com\"",
        "\"port\"",
        "\"interval\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\",\"",
        "\"singbox\"",
        "\"http/1.1\"",
        "\"h2,http/1.1\"",
        "\"singbox\"",
        "\"&eh=Sec-WebSocket-Protocol&ed=2560\"",
        "\"?ed=2560\"",
        "\"C\"",
        "\"\"",
        "${getRandomPath(16)}${proxyIP ? `/${encodeURIComponent(btoa(proxyIP))}` : \"\"}${earlyData}",
        "/${encodeURIComponent(btoa(proxyIP))}",
        "\"\"",
        "\"VkxFU1M=\"",
        "\"VHJvamFu\"",
        "&security=tls&sni=${sni}&fp=randomized&alpn=${alpn}",
        "\"&security=none\"",
        "\"hiddify-frag\"",
        "&fragment=${lengthMin}-${lengthMax},${intervalMin}-${intervalMax},hellotls",
        "\"\"",
        "${atob(\"dmxlc3M6Ly8=\")}${userID2}@${addr}:${port}?path=/${path}&encryption=none&host=${host}&type=ws${tlsFields}${hiddifyFragment}#${VLRemark}",
        "\"dmxlc3M6Ly8=\"",
        "${atob(\"dHJvamFuOi8v\")}${TRPass}@${addr}:${port}?path=/tr${path}&host=${host}&type=ws${tlsFields}${hiddifyFragment}#${TRRemark}",
        "\"dHJvamFuOi8v\"",
        "#${encodeURIComponent(\"\\u{1F4A6} Chain proxy \\u{1F517}\")}",
        "\"\\u{1F4A6} Chain proxy \\u{1F517}\"",
        "\"socks\"",
        "\"http\"",
        "\"#\"",
        "\"Content-Type\"",
        "\"text/plain;charset=utf-8\"",
        "\"Cache-Control\"",
        "\"no-store, no-cache, must-revalidate, proxy-revalidate\"",
        "\"CDN-Cache-Control\"",
        "\"no-store\"",
        "\"hiddify-frag\"",
        "\"Profile-Title\"",
        "\"BPB Fragment\"",
        "\"DNS\"",
        "\"getNormalConfigs\"",
        "\"\"",
        "\",\"",
        "warp://${endpoint}${isPro ? `?ifp=${noiseCountMin}-${noiseCountMax}&ifps=${noiseSizeMin}-${noiseSizeMax}&ifpd=${noiseDelayMin}-${noiseDelayMax}&ifpm=${hiddifyNoiseMode}` : \"\"}#${encodeURIComponent(`\\u{1F4A6} ${index + 1} - Warp \\u{1F1EE}\\u{1F1F7}`)}&&detour=warp://162.159.192.1:2408#${encodeURIComponent(`\\u{1F4A6} ${index + 1} - WoW \\u{1F30D}`)}",
        "?ifp=${noiseCountMin}-${noiseCountMax}&ifps=${noiseSizeMin}-${noiseSizeMax}&ifpd=${noiseDelayMin}-${noiseDelayMax}&ifpm=${hiddifyNoiseMode}",
        "\"\"",
        "\\u{1F4A6} ${index + 1} - Warp \\u{1F1EE}\\u{1F1F7}",
        "\\u{1F4A6} ${index + 1} - WoW \\u{1F30D}",
        "\"Profile-Title\"",
        "BPB Warp${isPro ? \" Pro\" : \"\"}",
        "\" Pro\"",
        "\"\"",
        "\"DNS\"",
        "\"1.1.1.1\"",
        "\"Content-Type\"",
        "\"text/plain;charset=utf-8\"",
        "\"Cache-Control\"",
        "\"no-store, no-cache, must-revalidate, proxy-revalidate\"",
        "\"CDN-Cache-Control\"",
        "\"no-store\"",
        "\"getHiddifyWarpConfigs\"",
        "<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${atob(\"QlBC\")} Generator</title>\n    <style>\n        :root {\n            --color: black;\n            --primary-color: #09639f;\n            --header-color: #09639f; \n            --background-color: #fff;\n            --form-background-color: #f9f9f9;\n            --lable-text-color: #333;\n            --h2-color: #3b3b3b;\n            --border-color: #ddd;\n            --input-background-color: white;\n            --header-shadow: 2px 2px 4px rgba(0, 0, 0, 0.25);\n        }\n        html, body { height: 100%; margin: 0; }\n        body {\n            font-family: system-ui;\n            background-color: var(--background-color);\n            position: relative;\n            overflow: hidden;\n            text-align: center;\n        }\n        body.dark-mode {\n            --color: white;\n            --primary-color: #09639F;\n            --header-color: #3498DB; \n            --background-color: #121212;\n            --form-background-color: #121212;\n            --lable-text-color: #DFDFDF;\n            --h2-color: #D5D5D5;\n            --border-color: #353535;\n            --input-background-color: #252525;\n            --header-shadow: 2px 2px 4px rgba(255, 255, 255, 0.25);\n        }\n        html, body { height: 100%; margin: 0; }\n        .container {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            width: 90%;\n        }\n        h1 { font-size: 2.5rem; text-align: center; color: var(--header-color); margin: 0 auto 30px; text-shadow: var(--header-shadow); }        \n        h2 { text-align: center; color: var(--h2-color) }\n        strong { color: var(--lable-text-color); }\n        .output-container {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            margin: 15px 0;\n            padding: 10px;\n            background-color: var(--input-background-color);\n            color: var(--lable-text-color);\n            border: 1px solid var(--border-color);\n            border-radius: 5px;\n            font-family: monospace;\n            font-size: 1rem;\n            word-wrap: break-word;\n        }\n        .output { flex: 1; margin-right: 10px; overflow-wrap: break-word; }\n        .copy-icon {\n            cursor: pointer;\n            font-size: 1.2rem;\n            color: var(--primary-color);\n            transition: color 0.2s;\n        }\n        .copy-icon:hover { color: #2980b9; }\n        .form-container {\n            background: var(--form-background-color);\n            border: 1px solid var(--border-color);\n            border-radius: 10px;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n            padding: 20px;\n        }\n        .form-control { margin-bottom: 15px; display: flex; align-items: center; }\n        button {\n            display: block;\n            width: 100%;\n            padding: 10px;\n            font-size: 16px;\n            font-weight: 600;\n            border: none;\n            border-radius: 5px;\n            color: white;\n            background-color: var(--primary-color);\n            cursor: pointer;\n            transition: background-color 0.3s ease;\n        }\n        .button:hover,\n        button:focus {\n            background-color: #2980b9;\n            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);\n            transform: translateY(-2px);\n        }\n        button.button:hover { color: white; }\n        .button:active { transform: translateY(1px); box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3); }\n        @media only screen and (min-width: 768px) {\n            .container { width: 40%; }\n        }\n    </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h1>${atob(\"QlBC\")} Panel <span style=\"font-size: smaller;\">${globalThis.panelVersion}</span> \\u{1F4A6}</h1>\n            <div class=\"form-container\">\n                <h2>Secrets generator</h2>\n                <div>\n                    <strong>Random UUID</strong>\n                    <div class=\"output-container\">\n                        <span id=\"uuid\" class=\"output\"></span>\n                        <span class=\"copy-icon\" onclick=\"copyToClipboard('uuid')\">\\u{1F4CB}</span>\n                    </div>\n                </div>\n                <div>\n                    <strong>Random ${atob(\"VHJvamFu\")} Password</strong>\n                    <div class=\"output-container\">\n                        <span id=\"${atob(\"dHJvamFu\")}-password\" class=\"output\"></span>\n                        <span class=\"copy-icon\" onclick=\"copyToClipboard('${atob(\"dHJvamFu\")}-password')\">\\u{1F4CB}</span>\n                    </div>\n                </div>\n                <div>\n                    <strong>Random Subscription URI path</strong>\n                    <div class=\"output-container\">\n                        <span id=\"sub-path\" class=\"output\"></span>\n                        <span class=\"copy-icon\" onclick=\"copyToClipboard('sub-path')\">\\u{1F4CB}</span>\n                    </div>\n                </div>\n                <button class=\"button\" onclick=\"generateCredentials()\">Generate Again \\u267B\\uFE0F</button>\n            </div>\n        </div>\n        <script>\n            localStorage.getItem('darkMode') === 'enabled' && document.body.classList.add('dark-mode');\n            function generateUUID() {\n                return crypto.randomUUID();\n            }\n    \n            function generateStrongPassword() {\n                const charset =\n                    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+[]{}|;:',.<>?\";\n                let password = '';\n                const randomValues = new Uint8Array(16);\n                crypto.getRandomValues(randomValues);\n    \n                for (let i = 0; i < 16; i++) {\n                    password += charset[randomValues[i] % charset.length];\n                }\n                return password;\n            }\n            \n            function generateSubURIPath() {\n                const charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@$&*_-+;:,.\";\n                let uriPath = '';\n                const randomValues = new Uint8Array(16);\n                crypto.getRandomValues(randomValues);\n    \n                for (let i = 0; i < 16; i++) {\n                    uriPath += charset[randomValues[i] % charset.length];\n                }\n                return uriPath;\n            }\n    \n            function generateCredentials() {\n                const uuid = generateUUID();\n                const password = generateStrongPassword();\n                const uriPath = generateSubURIPath();\n    \n                document.getElementById('uuid').textContent = uuid;\n                document.getElementById('${atob(\"dHJvamFu\")}-password').textContent = password;\n                document.getElementById('sub-path').textContent = uriPath;\n            }\n    \n            function copyToClipboard(elementId) {\n                const textToCopy = document.getElementById(elementId).textContent;\n                navigator.clipboard.writeText(textToCopy)\n                    .then(() => alert('\\u2705 Copied to clipboard!'))\n                    .catch(err => console.error('Failed to copy text:', err));\n            }\n    \n            generateCredentials();\n        <\\/script>\n    </body>\n    </html>",
        "\"QlBC\"",
        "\"QlBC\"",
        "\"VHJvamFu\"",
        "\"dHJvamFu\"",
        "\"dHJvamFu\"",
        "\"dHJvamFu\"",
        "\"Content-Type\"",
        "\"text/html\"",
        "\"renderSecretsPage\"",
        "\"Upgrade\"",
        "\"websocket\"",
        "\"/update-warp\"",
        "\"/get-warp-configs\"",
        "/sub/${subPath}",
        "\"sfa\"",
        "\"clash\"",
        "\"xray\"",
        "/fragsub/${subPath}",
        "\"hiddify-frag\"",
        "/warpsub/${subPath}",
        "\"clash\"",
        "\"singbox\"",
        "\"hiddify-pro\"",
        "\"hiddify\"",
        "\"/panel\"",
        "\"/login\"",
        "\"/logout\"",
        "\"/panel/password\"",
        "\"/my-ip\"",
        "\"/secrets\"",
        "\"/tr\""
    ],
    "variables": [
        "__create",
        "__defProp",
        "__getOwnPropDesc",
        "__getOwnPropNames",
        "__getProtoOf",
        "__hasOwnProp",
        "__name",
        "__require",
        "__commonJS",
        "__copyProps",
        "__toESM",
        "require_crypto",
        "require_nacl_fast",
        "gf",
        "i",
        "r",
        "randombytes",
        "_0",
        "_9",
        "gf0",
        "gf1",
        "_121665",
        "D",
        "D2",
        "X",
        "Y",
        "I",
        "i",
        "d",
        "j0",
        "j1",
        "j2",
        "j3",
        "j4",
        "j5",
        "j6",
        "j7",
        "j8",
        "j9",
        "j10",
        "j11",
        "j12",
        "j13",
        "j14",
        "j15",
        "x0",
        "j0",
        "x1",
        "j1",
        "x2",
        "j2",
        "x3",
        "j3",
        "x4",
        "j4",
        "x5",
        "j5",
        "x6",
        "j6",
        "x7",
        "j7",
        "x8",
        "j8",
        "x9",
        "j9",
        "x10",
        "j10",
        "x11",
        "j11",
        "x12",
        "j12",
        "x13",
        "j13",
        "x14",
        "j14",
        "x15",
        "j15",
        "u",
        "i",
        "j0",
        "j1",
        "j2",
        "j3",
        "j4",
        "j5",
        "j6",
        "j7",
        "j8",
        "j9",
        "j10",
        "j11",
        "j12",
        "j13",
        "j14",
        "j15",
        "x0",
        "j0",
        "x1",
        "j1",
        "x2",
        "j2",
        "x3",
        "j3",
        "x4",
        "j4",
        "x5",
        "j5",
        "x6",
        "j6",
        "x7",
        "j7",
        "x8",
        "j8",
        "x9",
        "j9",
        "x10",
        "j10",
        "x11",
        "j11",
        "x12",
        "j12",
        "x13",
        "j13",
        "x14",
        "j14",
        "x15",
        "j15",
        "u",
        "i",
        "sigma",
        "z",
        "x",
        "u",
        "i",
        "z",
        "x",
        "u",
        "i",
        "s",
        "sn",
        "i",
        "s",
        "sn",
        "i",
        "poly1305",
        "t0",
        "t1",
        "t2",
        "t3",
        "t4",
        "t5",
        "t6",
        "t7",
        "hibit",
        "t0",
        "t1",
        "t2",
        "t3",
        "t4",
        "t5",
        "t6",
        "t7",
        "c",
        "d0",
        "d1",
        "d2",
        "d3",
        "d4",
        "d5",
        "d6",
        "d7",
        "d8",
        "d9",
        "h0",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "h7",
        "h8",
        "h9",
        "r0",
        "r1",
        "r2",
        "r3",
        "r4",
        "r5",
        "r6",
        "r7",
        "r8",
        "r9",
        "g",
        "c",
        "mask",
        "f",
        "i",
        "i",
        "want",
        "s",
        "x",
        "i",
        "i",
        "x",
        "i",
        "i",
        "v",
        "c",
        "t",
        "c",
        "i",
        "i",
        "j",
        "b",
        "m",
        "t",
        "c",
        "d",
        "d",
        "i",
        "i",
        "i",
        "v",
        "c",
        "t0",
        "t1",
        "t2",
        "t3",
        "t4",
        "t5",
        "t6",
        "t7",
        "t8",
        "t9",
        "t10",
        "t11",
        "t12",
        "t13",
        "t14",
        "t15",
        "t16",
        "t17",
        "t18",
        "t19",
        "t20",
        "t21",
        "t22",
        "t23",
        "t24",
        "t25",
        "t26",
        "t27",
        "t28",
        "t29",
        "t30",
        "b0",
        "b1",
        "b2",
        "b3",
        "b4",
        "b5",
        "b6",
        "b7",
        "b8",
        "b9",
        "b10",
        "b11",
        "b12",
        "b13",
        "b14",
        "b15",
        "c",
        "a",
        "c",
        "a",
        "z",
        "x",
        "r",
        "i",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "x32",
        "x16",
        "s",
        "crypto_box_afternm",
        "crypto_secretbox",
        "crypto_box_open_afternm",
        "crypto_secretbox_open",
        "k",
        "k",
        "K",
        "wh",
        "wl",
        "bh0",
        "bh1",
        "bh2",
        "bh3",
        "bh4",
        "bh5",
        "bh6",
        "bh7",
        "bl0",
        "bl1",
        "bl2",
        "bl3",
        "bl4",
        "bl5",
        "bl6",
        "bl7",
        "th",
        "tl",
        "i",
        "j",
        "h",
        "l",
        "a",
        "b",
        "c",
        "d",
        "ah0",
        "ah1",
        "ah2",
        "ah3",
        "ah4",
        "ah5",
        "ah6",
        "ah7",
        "al0",
        "al1",
        "al2",
        "al3",
        "al4",
        "al5",
        "al6",
        "al7",
        "pos",
        "hh",
        "hl",
        "x",
        "i",
        "b",
        "n",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "t",
        "i",
        "tx",
        "ty",
        "zi",
        "b",
        "i",
        "q",
        "d",
        "p",
        "i",
        "L",
        "carry",
        "i",
        "j",
        "k",
        "x",
        "i",
        "d",
        "h",
        "r",
        "i",
        "j",
        "x",
        "p",
        "smlen",
        "t",
        "chk",
        "num",
        "den",
        "den2",
        "den4",
        "den6",
        "i",
        "t",
        "h",
        "p",
        "q",
        "crypto_secretbox_KEYBYTES",
        "crypto_secretbox_NONCEBYTES",
        "crypto_secretbox_ZEROBYTES",
        "crypto_secretbox_BOXZEROBYTES",
        "crypto_scalarmult_BYTES",
        "crypto_scalarmult_SCALARBYTES",
        "crypto_box_PUBLICKEYBYTES",
        "crypto_box_SECRETKEYBYTES",
        "crypto_box_BEFORENMBYTES",
        "crypto_box_NONCEBYTES",
        "crypto_secretbox_NONCEBYTES",
        "crypto_box_ZEROBYTES",
        "crypto_secretbox_ZEROBYTES",
        "crypto_box_BOXZEROBYTES",
        "crypto_secretbox_BOXZEROBYTES",
        "crypto_sign_BYTES",
        "crypto_sign_PUBLICKEYBYTES",
        "crypto_sign_SECRETKEYBYTES",
        "crypto_sign_SEEDBYTES",
        "crypto_hash_BYTES",
        "i",
        "i",
        "b",
        "m",
        "c",
        "i",
        "c",
        "m",
        "i",
        "q",
        "q",
        "k",
        "k",
        "k",
        "pk",
        "sk",
        "pk",
        "signedMsg",
        "tmp",
        "mlen",
        "m",
        "i",
        "signedMsg",
        "sig",
        "i",
        "sm",
        "m",
        "i",
        "pk",
        "sk",
        "pk",
        "i",
        "pk",
        "sk",
        "i",
        "h",
        "crypto2",
        "QUOTA",
        "i",
        "v",
        "i",
        "v",
        "require_buffer",
        "require_sha256",
        "ERROR",
        "WINDOW",
        "root",
        "WEB_WORKER",
        "NODE_JS",
        "COMMON_JS",
        "AMD",
        "ARRAY_BUFFER",
        "HEX_CHARS",
        "EXTRA",
        "SHIFT",
        "K",
        "OUTPUT_TYPES",
        "blocks",
        "createOutputMethod",
        "createMethod",
        "method",
        "i",
        "nodeWrap",
        "crypto2",
        "Buffer2",
        "algorithm",
        "bufferFrom",
        "nodeMethod",
        "createHmacOutputMethod",
        "createHmacMethod",
        "method",
        "i",
        "notString",
        "code",
        "index",
        "i",
        "length",
        "blocks2",
        "blocks2",
        "i",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "blocks2",
        "j",
        "s0",
        "s1",
        "maj",
        "t1",
        "t2",
        "ch",
        "ab",
        "da",
        "cd",
        "bc",
        "h0",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "h7",
        "hex",
        "h0",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "h7",
        "arr",
        "buffer",
        "dataView",
        "i",
        "length",
        "index",
        "code",
        "oKeyPad",
        "iKeyPad",
        "b",
        "innerHash",
        "exports2",
        "webcrypto_default",
        "crypto",
        "isCryptoKey",
        "encoder",
        "decoder",
        "MAX_INT32",
        "size",
        "buf",
        "i",
        "encodeBase64",
        "unencoded",
        "input",
        "CHUNK_SIZE",
        "arr",
        "i",
        "encode",
        "decodeBase64",
        "binary",
        "i",
        "decode",
        "encoded",
        "input",
        "JOSEError",
        "JWTClaimValidationFailed",
        "JWTExpired",
        "JOSEAlgNotAllowed",
        "JOSENotSupported",
        "JWEDecryptionFailed",
        "JWEInvalid",
        "JWSInvalid",
        "JWTInvalid",
        "JWKInvalid",
        "JWKSInvalid",
        "JWKSNoMatchingKey",
        "JWKSMultipleMatchingKeys",
        "JWKSTimeout",
        "JWSSignatureVerificationFailed",
        "msg",
        "last",
        "expected",
        "actual",
        "expected",
        "actual",
        "expected",
        "actual",
        "expected",
        "actual",
        "last",
        "invalid_key_input_default",
        "is_key_like_default",
        "types",
        "isDisjoint",
        "sources",
        "acc",
        "parameters",
        "is_disjoint_default",
        "isDisjoint",
        "proto",
        "input",
        "check_key_length_default",
        "algorithm",
        "keyUsages",
        "parse",
        "rest",
        "keyData",
        "jwk_to_key_default",
        "parse",
        "exportKeyValue",
        "privCache",
        "pubCache",
        "isKeyObject",
        "importAndCache",
        "cached",
        "cryptoKey",
        "normalizePublicKey",
        "jwk",
        "cryptoKey",
        "normalizePrivateKey",
        "jwk",
        "cryptoKey",
        "normalize_key_default",
        "tag",
        "jwkMatchesOp",
        "symmetricTypeCheck",
        "asymmetricTypeCheck",
        "symmetric",
        "check_key_type_default",
        "checkKeyTypeWithJwk",
        "recognized",
        "validate_crit_default",
        "validateCrit",
        "validateAlgorithms",
        "validate_algorithms_default",
        "validateAlgorithms",
        "hash",
        "verify",
        "cryptoKey",
        "algorithm",
        "verify_default",
        "verify",
        "parsedProt",
        "protectedHeader",
        "joseHeader",
        "extensions",
        "b64",
        "joseHeader",
        "algorithms",
        "resolvedKey",
        "data",
        "signature",
        "verified",
        "payload",
        "result",
        "protectedHeader",
        "payload",
        "signature",
        "verified",
        "result",
        "epoch_default",
        "minute",
        "hour",
        "day",
        "week",
        "year",
        "REGEX",
        "secs_default",
        "matched",
        "value",
        "unit",
        "numericDate",
        "normalizeTyp",
        "checkAudiencePresence",
        "jwt_claims_set_default",
        "payload",
        "options",
        "options",
        "presenceCheck",
        "tolerance",
        "options",
        "now",
        "age",
        "max",
        "verified",
        "payload",
        "result",
        "sign",
        "cryptoKey",
        "signature",
        "sign_default",
        "sign",
        "FlattenedSign",
        "joseHeader",
        "extensions",
        "b64",
        "joseHeader",
        "payload",
        "protectedHeader",
        "data",
        "signature",
        "jws",
        "CompactSign",
        "jws",
        "ProduceJWT",
        "SignJWT",
        "sig",
        "import_tweetnacl",
        "loginPage",
        "password",
        "savedPass",
        "secretKey",
        "secret",
        "jwtToken",
        "key",
        "secretKey",
        "secret",
        "cookie",
        "token",
        "auth",
        "oldPwd",
        "newPwd",
        "auth",
        "resolved",
        "defaultIPv6",
        "index",
        "warpConfig",
        "addressType",
        "result",
        "i",
        "result",
        "characters",
        "charactersLength",
        "i",
        "binaryString",
        "hexString",
        "decimalArray",
        "ipv4Pattern",
        "ipv6Pattern",
        "newUrl",
        "host",
        "isHostDomain",
        "import_tweetnacl2",
        "warpConfigs",
        "apiBaseUrl",
        "warpKeys",
        "commonPayload",
        "fetchAccount",
        "response",
        "accountData",
        "configs",
        "generateKeyPair",
        "base64Encode",
        "privateKey",
        "publicKey",
        "publicKeyBase64",
        "privateKeyBase64",
        "proxySettings",
        "warpConfigs",
        "newSettings",
        "isReset",
        "currentSettings",
        "udpNoises",
        "udpNoiseModes",
        "udpNoisePackets",
        "udpNoiseDelaysMin",
        "udpNoiseDelaysMax",
        "udpNoiseCount",
        "validateField",
        "fieldValue",
        "proxySettings",
        "configParams",
        "url",
        "protocol",
        "auth",
        "warpPlusError",
        "proxySettings",
        "activeProtocols",
        "httpPortsBlock",
        "httpsPortsBlock",
        "allPorts",
        "id",
        "isChecked",
        "portBlock",
        "udpNoiseBlocks",
        "supportedApps",
        "subQR",
        "url",
        "subURL",
        "url",
        "homePage",
        "uuidRegex",
        "dohURL",
        "dohURLv4",
        "dohURLv6",
        "ipv4Response",
        "ipv6Response",
        "ipv4Addresses",
        "ipv6Addresses",
        "ipv4",
        "ipv6",
        "domainPattern",
        "auth",
        "pwd",
        "isPassSet",
        "url",
        "newRequest",
        "ip",
        "response",
        "geoLocation",
        "auth",
        "proxySettings",
        "warpConfig",
        "warpConfig",
        "warpConfs",
        "warpConf",
        "proxyIPs",
        "url",
        "searchParams",
        "webSocketPair",
        "client",
        "webSocket",
        "address",
        "portWithRandomLog",
        "log",
        "earlyDataHeader",
        "readableWebSocketStream",
        "remoteSocketWapper",
        "udpStreamWrite",
        "isDns",
        "writer",
        "message2",
        "VLResponseHeader",
        "rawClientData",
        "apiResponse",
        "isUuidInResponse",
        "tcpSocket2",
        "writer",
        "panelProxyIP",
        "panelProxyIPs",
        "finalProxyIP",
        "tcpSocket2",
        "tcpSocket",
        "readableStreamCancel",
        "stream",
        "message2",
        "version",
        "isValidUser",
        "isUDP",
        "slicedBuffer",
        "slicedBufferString",
        "uuids",
        "checkUuidInApi",
        "optLength",
        "command",
        "portIndex",
        "portBuffer",
        "portRemote",
        "addressIndex",
        "addressBuffer",
        "addressType",
        "addressLength",
        "addressValueIndex",
        "addressValue",
        "dataView",
        "ipv6",
        "i",
        "remoteChunkCount",
        "chunks",
        "VLHeader",
        "VLResponseHeader",
        "hasIncomingData",
        "decode2",
        "arryBuffer",
        "WS_READY_STATE_OPEN",
        "WS_READY_STATE_CLOSING",
        "byteToHex",
        "i",
        "uuid",
        "isVLHeaderSent",
        "transformStream",
        "index",
        "lengthBuffer",
        "udpPakcetLength",
        "udpData",
        "resp",
        "dnsQueryResult",
        "udpSize",
        "udpSizeBuffer",
        "writer",
        "import_js_sha256",
        "webSocketPair",
        "client",
        "webSocket",
        "address",
        "portWithRandomLog",
        "log",
        "earlyDataHeader",
        "readableWebSocketStream",
        "remoteSocketWapper",
        "udpStreamWrite",
        "writer",
        "message2",
        "crLfIndex",
        "password",
        "socks5DataBuffer",
        "view",
        "cmd",
        "atype",
        "addressLength",
        "addressIndex",
        "address",
        "dataView",
        "ipv6",
        "i",
        "portIndex",
        "portBuffer",
        "portRemote",
        "tcpSocket2",
        "writer",
        "panelProxyIP",
        "panelProxyIPs",
        "finalProxyIP",
        "tcpSocket2",
        "tcpSocket",
        "readableStreamCancel",
        "stream",
        "message2",
        "hasIncomingData",
        "decode2",
        "arryBuffer",
        "WS_READY_STATE_OPEN2",
        "WS_READY_STATE_CLOSING2",
        "errorPage",
        "proxySettings",
        "bypassRules",
        "blockRules",
        "isFakeDNS",
        "isIPv62",
        "outboundDomains",
        "customBypassRulesDomains",
        "customBlockRulesDomains",
        "uniqueOutboundDomains",
        "isDomainRule",
        "isBypass",
        "isBlock",
        "finalRemoteDNS",
        "dnsHost",
        "staticIPs",
        "domains",
        "resolved",
        "hostIPv4",
        "hostIPv6",
        "hosts",
        "dnsObject",
        "dohHost",
        "outboundDomainRules",
        "bypassDomainRules",
        "localDNSServer",
        "fakeDNSServer",
        "proxySettings",
        "geoRules",
        "outboundDomains",
        "customBypassRulesTotal",
        "customBlockRulesTotal",
        "customBypassRulesDomains",
        "isDomainRule",
        "isBlock",
        "isBypass",
        "finallOutboundTag",
        "dohHost",
        "isRemoteDnsDomain",
        "remoteDNSHosts",
        "rules",
        "port",
        "ipDomain",
        "outboundType",
        "tag2",
        "createRule",
        "domainDirectRule",
        "ipDirectRule",
        "domainBlockRule",
        "ipBlockRule",
        "userID2",
        "globalThis",
        "outbound",
        "sockopt",
        "globalThis",
        "outbound",
        "sockopt",
        "proxySettings",
        "isWoW",
        "outbound",
        "server2",
        "port2",
        "chainProxyParams",
        "chainProxyParams",
        "proxyOutbound",
        "tlsAlpns",
        "httpPaths",
        "httpHosts",
        "proxySettings",
        "outbound",
        "count",
        "proxySettings",
        "isFakeDNS",
        "config",
        "interval",
        "remark",
        "config",
        "bestFragValues",
        "config",
        "bestFragOutbounds",
        "freedomOutbound",
        "chainOutbound",
        "proxyOutbound",
        "fragmentOutbound",
        "config",
        "fragmentOutbound",
        "fakeOutbound",
        "hostName2",
        "globalThis",
        "configs",
        "outbounds",
        "protocols",
        "chainProxy",
        "proxySettings",
        "proxyParams",
        "Addresses",
        "customCdnAddresses",
        "totalAddresses",
        "totalPorts",
        "proxyIndex",
        "freedomOutbound",
        "protocolIndex",
        "isCustomAddr",
        "configType",
        "sni",
        "host",
        "remark",
        "customConfig",
        "outbound",
        "chainOutbound",
        "bestPing",
        "finalConfigs",
        "bestFragment",
        "workerLessConfig",
        "proxySettings",
        "xrayWarpConfigs",
        "xrayWoWConfigs",
        "xrayWarpOutbounds",
        "xrayWoWOutbounds",
        "outboundDomains",
        "proIndicator",
        "xrayWarpChain",
        "freedomOutbound",
        "index",
        "endpoint",
        "endpointHost",
        "warpConfig",
        "WoWConfig",
        "warpOutbound",
        "WoWOutbound",
        "proxyOutbound",
        "chainOutbound",
        "dnsObject",
        "xrayWarpBestPing",
        "xrayWoWBestPing",
        "configs",
        "xrayConfigTemp",
        "proxySettings",
        "fakeip",
        "dohHost",
        "isFakeDNS",
        "isIPv62",
        "customBypassRulesDomains",
        "customBlockRulesDomains",
        "geoRules",
        "servers",
        "outboundRule",
        "outboundDomains",
        "uniqueDomains",
        "rules",
        "blockRule",
        "createRule",
        "domainDirectRule",
        "domainBlockRule",
        "proxySettings",
        "customBypassRulesTotal",
        "customBlockRulesTotal",
        "defaultRules",
        "geoRules",
        "directDomainRules",
        "directIPRules",
        "blockDomainRules",
        "blockIPRules",
        "ruleSets",
        "createRule",
        "routingRuleSet",
        "directDomainRule",
        "directIPRule",
        "blockDomainRule",
        "blockIPRule",
        "ruleSet",
        "isDirect",
        "domainRule",
        "ipRule",
        "pushRuleIfNotEmpty",
        "processRules",
        "domainRule",
        "ipRule",
        "ip",
        "rules",
        "userID2",
        "globalThis",
        "proxySettings",
        "path",
        "tls",
        "outbound",
        "globalThis",
        "proxySettings",
        "path",
        "tls",
        "outbound",
        "ipv6Regex",
        "portRegex",
        "endpointServer",
        "endpointPort",
        "server",
        "port",
        "proxySettings",
        "outbound",
        "server2",
        "port2",
        "chainProxyParams",
        "chainOutbound2",
        "chainProxyParams",
        "chainOutbound",
        "tlsAlpns",
        "httpHosts",
        "wsPath",
        "earlyData",
        "proxySettings",
        "config",
        "dnsObject",
        "selector",
        "warpUrlTest",
        "WoWUrlTest",
        "warpRemarks",
        "WoWRemarks",
        "warpRemark",
        "WoWRemark",
        "warpOutbound",
        "WoWOutbound",
        "hostName2",
        "globalThis",
        "chainProxy",
        "proxySettings",
        "proxyParams",
        "Addresses",
        "customCdnAddresses",
        "totalAddresses",
        "config",
        "dnsObject",
        "selector",
        "urlTest",
        "proxyIndex",
        "protocols",
        "protocolIndex",
        "VLOutbound",
        "TROutbound",
        "isCustomAddr",
        "configType",
        "sni",
        "host",
        "remark",
        "chain",
        "singboxConfigTemp",
        "proxySettings",
        "warpRemoteDNS",
        "isFakeDNS",
        "isIPv62",
        "customBypassRulesDomains",
        "isBypass",
        "bypassRules",
        "dns",
        "chainOutboundServer",
        "geosites",
        "dohHost",
        "proxySettings",
        "customBypassRulesTotal",
        "customBlockRulesTotal",
        "geoRules",
        "fileExtension",
        "directDomainRules",
        "directIPRules",
        "blockDomainRules",
        "blockIPRules",
        "ruleProviders",
        "ruleProvider",
        "targetRules",
        "ruleProvider2",
        "targetRules",
        "ruleProvider2",
        "generateRule",
        "ip",
        "cidr",
        "isDirectRule",
        "action",
        "targetRules",
        "rules",
        "userID2",
        "globalThis",
        "tls",
        "addr",
        "outbound",
        "addr",
        "ipv6Regex",
        "portRegex",
        "endpointServer",
        "endpointPort",
        "outbound",
        "server2",
        "port2",
        "chainProxyParams",
        "proxyType",
        "chainProxyParams",
        "chainOutbound",
        "tlsAlpns",
        "httpPaths",
        "wsPath",
        "earlyData",
        "proxySettings",
        "config",
        "selector",
        "warpUrlTest",
        "WoWUrlTest",
        "warpRemarks",
        "WoWRemarks",
        "warpRemark",
        "WoWRemark",
        "warpOutbound",
        "WoWOutbound",
        "hostName2",
        "globalThis",
        "chainProxy",
        "proxySettings",
        "proxyParams",
        "config",
        "selector",
        "urlTest",
        "Addresses",
        "customCdnAddresses",
        "totalAddresses",
        "proxyIndex",
        "path",
        "protocols",
        "protocolIndex",
        "VLOutbound",
        "TROutbound",
        "isCustomAddr",
        "configType",
        "sni",
        "host",
        "remark",
        "chain",
        "clashConfigTemp",
        "hostName2",
        "userID2",
        "globalThis",
        "proxySettings",
        "VLConfs",
        "TRConfs",
        "chainProxy",
        "proxyIndex",
        "Addresses",
        "customCdnAddresses",
        "totalAddresses",
        "alpn",
        "TRPass",
        "earlyData",
        "isCustomAddr",
        "configType",
        "sni",
        "host",
        "path",
        "VLRemark",
        "TRRemark",
        "tlsFields",
        "hiddifyFragment",
        "chainRemark",
        "regex",
        "isUserPass",
        "userPass",
        "configs",
        "headers",
        "proxySettings",
        "configs",
        "secretsPage",
        "worker_default",
        "pathName2",
        "globalThis",
        "upgradeHeader"
    ],
    "comments": [
        "@__PURE__",
        "If the importer is in node compatibility mode or this is not an ESM",
        "file that has been converted to a CommonJS file using a Babel-",
        "compatible transform (i.e. \"__esModule\" has not been set), then set",
        "\"default\" to the CommonJS \"module.exports\" for node compatibility.",
        "(disabled):crypto",
        "node_modules/tweetnacl/nacl-fast.js",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "(disabled):buffer",
        "node_modules/js-sha256/src/sha256.js",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "node_modules/jose/dist/browser/runtime/webcrypto.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/lib/buffer_utils.js",
        "node_modules/jose/dist/browser/runtime/base64url.js",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "node_modules/jose/dist/browser/util/errors.js",
        "node_modules/jose/dist/browser/lib/crypto_key.js",
        "node_modules/jose/dist/browser/lib/invalid_key_input.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/runtime/is_key_like.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/lib/is_disjoint.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/lib/is_object.js",
        "node_modules/jose/dist/browser/runtime/check_key_length.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/lib/is_jwk.js",
        "node_modules/jose/dist/browser/runtime/jwk_to_key.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/runtime/normalize_key.js",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "node_modules/jose/dist/browser/key/import.js",
        "node_modules/jose/dist/browser/lib/check_key_type.js",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "node_modules/jose/dist/browser/lib/validate_crit.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/lib/validate_algorithms.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/runtime/subtle_dsa.js",
        "node_modules/jose/dist/browser/runtime/get_sign_verify_key.js",
        "node_modules/jose/dist/browser/runtime/verify.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/jws/flattened/verify.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/jws/compact/verify.js",
        "node_modules/jose/dist/browser/lib/epoch.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/lib/secs.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/lib/jwt_claims_set.js",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "node_modules/jose/dist/browser/jwt/verify.js",
        "node_modules/jose/dist/browser/runtime/sign.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/jws/flattened/sign.js",
        "@__PURE__",
        "node_modules/jose/dist/browser/jws/compact/sign.js",
        "node_modules/jose/dist/browser/jwt/produce.js",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "node_modules/jose/dist/browser/jwt/sign.js",
        "src/authentication/auth.js",
        "src/pages/login.js",
        "src/authentication/auth.js",
        "src/cores-configs/helpers.js",
        "src/protocols/warp.js",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "src/kv/handlers.js",
        "@__PURE__",
        "src/pages/home.js",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "src/helpers/helpers.js",
        "src/helpers/init.js",
        "src/protocols/vless.js",
        "@__PURE__",
        "@ts-ignore",
        "dns server url",
        "src/protocols/trojan.js",
        "@__PURE__",
        "@ts-ignore",
        "src/pages/error.js",
        "src/cores-configs/xray.js",
        "@__PURE__",
        "src/cores-configs/sing-box.js",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "@__PURE__",
        "src/cores-configs/clash.js",
        "@__PURE__",
        "src/cores-configs/normalConfigs.js",
        "src/pages/secrets.js",
        "src/worker.js",
        "! Bundled license information:\n\njs-sha256/src/sha256.js:\n  (**\n   * [js-sha256]{@link https://github.com/emn178/js-sha256}\n   *\n   * @version 0.11.0\n   * @author Chen, Yi-Cyuan [emn178@gmail.com]\n   * @copyright Chen, Yi-Cyuan 2014-2024\n   * @license MIT\n   *)",
        "# sourceMappingURL=worker.js.map"
    ],
    "docstrings": [
        "*\n       * @param {Uint8Array} chunk\n       * @param {*} controller",
        "*\n     * @param {Uint8Array} chunk",
        "*\n       * @param {Uint8Array} chunk\n       * @param {*} controller"
    ],
    "functions": [
        "ts64",
        "vn",
        "crypto_verify_16",
        "crypto_verify_32",
        "core_salsa20",
        "core_hsalsa20",
        "crypto_core_salsa20",
        "crypto_core_hsalsa20",
        "crypto_stream_salsa20_xor",
        "crypto_stream_salsa20",
        "crypto_stream",
        "crypto_stream_xor",
        "crypto_onetimeauth",
        "crypto_onetimeauth_verify",
        "crypto_secretbox",
        "crypto_secretbox_open",
        "set25519",
        "car25519",
        "sel25519",
        "pack25519",
        "neq25519",
        "par25519",
        "unpack25519",
        "A",
        "Z",
        "M",
        "S",
        "inv25519",
        "pow2523",
        "crypto_scalarmult",
        "crypto_scalarmult_base",
        "crypto_box_keypair",
        "crypto_box_beforenm",
        "crypto_box",
        "crypto_box_open",
        "crypto_hashblocks_hl",
        "crypto_hash",
        "add",
        "cswap",
        "pack",
        "scalarmult",
        "scalarbase",
        "crypto_sign_keypair",
        "modL",
        "reduce",
        "crypto_sign",
        "unpackneg",
        "crypto_sign_open",
        "checkLengths",
        "checkBoxLengths",
        "checkArrayTypes",
        "cleanup",
        "Sha256",
        "HmacSha256",
        "concat",
        "unusable",
        "isAlgorithm",
        "getHashLength",
        "getNamedCurve",
        "checkUsage",
        "checkSigCryptoKey",
        "message",
        "withAlg",
        "isObjectLike",
        "isObject",
        "isJWK",
        "isPrivateJWK",
        "isPublicJWK",
        "isSecretJWK",
        "subtleMapping",
        "importJWK",
        "checkKeyType",
        "validateCrit",
        "subtleDsa",
        "getCryptoKey",
        "flattenedVerify",
        "compactVerify",
        "jwtVerify",
        "setProtectedHeader",
        "setUnprotectedHeader",
        "sign",
        "setProtectedHeader",
        "sign",
        "validateInput",
        "setIssuer",
        "setSubject",
        "setAudience",
        "setJti",
        "setNotBefore",
        "setExpirationTime",
        "setIssuedAt",
        "setProtectedHeader",
        "sign",
        "renderLoginPage",
        "generateJWTToken",
        "generateSecretKey",
        "Authenticate",
        "logout",
        "resetPassword",
        "login",
        "getConfigAddresses",
        "extractWireguardParams",
        "generateRemark",
        "randomUpperCase",
        "getRandomPath",
        "base64ToDecimal",
        "isIPv4",
        "isIPv6",
        "getDomain",
        "fetchWarpConfigs",
        "getDataset",
        "updateDataset",
        "extractChainProxyParams",
        "updateWarpConfigs",
        "renderHomePage",
        "isValidUUID",
        "resolveDNS",
        "isDomain",
        "handlePanel",
        "fallback",
        "getMyIP",
        "getWarpConfigFiles",
        "initializeParams",
        "VLOverWSHandler",
        "write",
        "close",
        "abort",
        "checkUuidInApiResponse",
        "handleTCPOutBound",
        "connectAndWrite",
        "retry",
        "makeReadableWebSocketStream",
        "start",
        "pull",
        "cancel",
        "processVLHeader",
        "VLRemoteSocketToWS",
        "start",
        "write",
        "close",
        "abort",
        "base64ToArrayBuffer",
        "safeCloseWebSocket",
        "unsafeStringify",
        "stringify",
        "handleUDPOutBound",
        "start",
        "transform",
        "flush",
        "write",
        "write",
        "TROverWSHandler",
        "write",
        "close",
        "abort",
        "parseTRHeader",
        "handleTCPOutBound2",
        "connectAndWrite",
        "retry",
        "makeReadableWebSocketStream2",
        "start",
        "pull",
        "cancel",
        "TRRemoteSocketToWS",
        "start",
        "write",
        "close",
        "abort",
        "base64ToArrayBuffer2",
        "safeCloseWebSocket2",
        "renderErrorPage",
        "buildXrayDNS",
        "buildXrayRoutingRules",
        "buildXrayVLOutbound",
        "buildXrayTROutbound",
        "buildXrayWarpOutbound",
        "buildXrayChainOutbound",
        "buildFreedomOutbound",
        "buildXrayConfig",
        "buildXrayBestPingConfig",
        "buildXrayBestFragmentConfig",
        "buildXrayWorkerLessConfig",
        "getXrayCustomConfigs",
        "getXrayWarpConfigs",
        "buildSingBoxDNS",
        "buildSingBoxRoutingRules",
        "buildSingBoxVLOutbound",
        "buildSingBoxTROutbound",
        "buildSingBoxWarpOutbound",
        "buildSingBoxChainOutbound",
        "getSingBoxWarpConfig",
        "getSingBoxCustomConfig",
        "buildClashDNS",
        "buildClashRoutingRules",
        "buildRuleProvider",
        "buildClashVLOutbound",
        "buildClashTROutbound",
        "buildClashWarpOutbound",
        "buildClashChainOutbound",
        "getClashWarpConfig",
        "getClashNormalConfig",
        "getNormalConfigs",
        "getHiddifyWarpConfigs",
        "renderSecretsPage",
        "fetch"
    ],
    "classes": []
}