{
    "identifiers": [
        "Decimal",
        "equals",
        "isNil",
        "RawVault",
        "VaultState",
        "VaultEvent",
        "VaultEventName",
        "getUpdatedVaults",
        "currentVaults",
        "previousVaults",
        "currentVaults",
        "currentVault",
        "previousVaults",
        "previousVault",
        "k",
        "currentVault",
        "k",
        "previousVault",
        "k",
        "getVaultEvent",
        "previousVault",
        "vault",
        "isNil",
        "previousVault",
        "VaultEvent",
        "VaultEventName",
        "vault",
        "vault",
        "equals",
        "previousVault",
        "vault",
        "VaultState",
        "previousVault",
        "previousVault",
        "VaultEvent",
        "VaultEventName",
        "vault",
        "Decimal",
        "previousVault",
        "vault",
        "VaultEvent",
        "VaultEventName",
        "vault",
        "vault",
        "VaultState",
        "equals",
        "vault",
        "vault",
        "VaultEvent",
        "VaultEventName",
        "vault",
        "Decimal",
        "previousVault",
        "vault",
        "VaultEvent",
        "VaultEventName",
        "vault",
        "vault",
        "VaultState",
        "VaultState",
        "equals",
        "previousVault",
        "vault",
        "VaultEvent",
        "VaultEventName",
        "vault",
        "Decimal",
        "previousVault",
        "vault",
        "getVaultEvents",
        "vaults",
        "previousVaults",
        "getUpdatedVaults",
        "vaults",
        "previousVaults",
        "vault",
        "getVaultEvent",
        "previousVaults",
        "prev",
        "prev",
        "vault",
        "vault"
    ],
    "literals": [
        "'decimal.js'",
        "'ramda'",
        "'../../models/ethereum-models.js'",
        "'../../models/vault-event.models.js'",
        "'uuid'",
        "'status'",
        "'valueLocked'",
        "'valueMinted'",
        "'Invalid Vault State Change'"
    ],
    "variables": [
        "getUpdatedVaults",
        "getVaultEvent",
        "getVaultEvents"
    ],
    "comments": [
        "prettier-ignore",
        "TODO: Replace hardcoded 0 with actual pending mint value",
        "Requires:",
        "1. Creating vaultMultisig object",
        "2. Fetching transaction data",
        "3. Using getValueOutput() to calculate the real value"
    ],
    "docstrings": [
        "* Filters an array of vaults to return only those that have changed compared to their previous state.\n * A vault is considered \"changed\" if its status, uuid, valueLocked, or valueMinted properties differ\n * from any matching vault in the previous state.\n *\n * @param currentVaults - The current array of vault objects to check for changes\n * @param previousVaults - The array of vault objects from the previous state to compare against\n * @returns An array of vault objects that have changed since their previous state",
        "* Determines and creates the appropriate vault event based on changes between previous and current vault states.\n *\n * @param previousVault - The previous state of the vault, undefined if this is a new vault\n * @param vault - The current state of the vault\n * @returns The appropriate vault event payload based on the state change:\n *   - Returns SETUP_COMPLETE event if this is a new vault (no previous state)\n *   - For status changes:\n *     - When changing to FUNDED: Returns WITHDRAW_COMPLETE if previous minted value was less than previous locked value,\n *       otherwise returns MINT_COMPLETE\n *     - When changing to PENDING: Returns WITHDRAW_PENDING if locked value differs from minted value,\n *       otherwise returns MINT_PENDING\n *   - Returns BURN_COMPLETE event if only the minted value has changed\n * @throws {Error} Throws 'Invalid Vault State Change' if the state change doesn't match any expected patterns",
        "* Generates an array of vault events by comparing current and previous vault states.\n * Only processes vaults that have had meaningful changes in their state.\n *\n * @param vaults - Array of current vault states\n * @param previousVaults - Array of previous vault states to compare against\n * @returns Array of vault events representing all state changes that occurred\n *\n * @see getUpdatedVaults - Used to filter vaults that have changed\n * @see getVaultEvent - Used to determine the specific event for each vault change"
    ],
    "functions": [],
    "classes": []
}