{
    "identifiers": [
        "asyncio",
        "aiohttp",
        "time",
        "logging",
        "Decimal",
        "datetime",
        "datetime",
        "typing",
        "Dict",
        "abc",
        "ABC",
        "abstractmethod",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "INFO",
        "format",
        "logging",
        "getLogger",
        "ABC",
        "name",
        "name",
        "abstractmethod",
        "Dict",
        "Exchange",
        "Dict",
        "aiohttp",
        "ClientSession",
        "session",
        "session",
        "post",
        "endpoint",
        "json",
        "query",
        "response",
        "response",
        "json",
        "data",
        "get",
        "get",
        "token",
        "lower",
        "token",
        "token",
        "tokens",
        "token",
        "get",
        "Exchange",
        "Dict",
        "aiohttp",
        "ClientSession",
        "session",
        "session",
        "post",
        "endpoint",
        "json",
        "query",
        "response",
        "response",
        "json",
        "data",
        "get",
        "get",
        "token",
        "lower",
        "token",
        "token",
        "tokens",
        "token",
        "get",
        "UniswapDEX",
        "SushiSwapDEX",
        "Dict",
        "Dict",
        "Dict",
        "Dict",
        "Decimal",
        "Dict",
        "exchange",
        "exchanges",
        "exchange",
        "fetch_tokens",
        "tokens",
        "keys",
        "exchange",
        "name",
        "token_ids",
        "logger",
        "info",
        "len",
        "token_ids",
        "exchange",
        "name",
        "token_symbols",
        "tokens",
        "tid",
        "token",
        "tokens",
        "items",
        "token_symbols",
        "token",
        "get",
        "tid",
        "e",
        "logger",
        "error",
        "exchange",
        "name",
        "e",
        "exchange",
        "name",
        "all_tokens",
        "logger",
        "error",
        "intersection",
        "all_tokens",
        "values",
        "logger",
        "info",
        "len",
        "common_tokens",
        "token_id",
        "common_tokens",
        "price_matrix",
        "exchange",
        "name",
        "exchange",
        "exchanges",
        "common_tokens",
        "exchange",
        "Exchange",
        "exchange",
        "fetch_tokens",
        "token_id",
        "token",
        "tokens",
        "items",
        "token_id",
        "price_matrix",
        "Decimal",
        "token",
        "time",
        "time",
        "price_matrix",
        "token_id",
        "exchange",
        "name",
        "price",
        "timestamp",
        "check_arbitrage_opportunities",
        "token_id",
        "e",
        "logger",
        "error",
        "exchange",
        "name",
        "e",
        "asyncio",
        "sleep",
        "token_id",
        "price_matrix",
        "get",
        "token_id",
        "ex",
        "data",
        "ex",
        "data",
        "prices",
        "items",
        "data",
        "len",
        "valid_prices",
        "min",
        "valid_prices",
        "items",
        "key",
        "x",
        "x",
        "max",
        "valid_prices",
        "items",
        "key",
        "x",
        "x",
        "max_price",
        "min_price",
        "min_price",
        "Decimal",
        "profit_pct",
        "min_profit_threshold",
        "token_id",
        "token_symbols",
        "get",
        "token_id",
        "token_id",
        "min_exchange",
        "max_exchange",
        "min_price",
        "max_price",
        "profit_pct",
        "datetime",
        "now",
        "strftime",
        "log_opportunity",
        "opportunity",
        "opportunity",
        "opportunities_found",
        "last_opportunities",
        "append",
        "opportunity",
        "len",
        "last_opportunities",
        "max_opportunity_history",
        "last_opportunities",
        "pop",
        "logger",
        "info",
        "opportunities_found",
        "logger",
        "info",
        "opportunity",
        "opportunity",
        "logger",
        "info",
        "opportunity",
        "opportunity",
        "logger",
        "info",
        "opportunity",
        "opportunity",
        "logger",
        "info",
        "opportunity",
        "logger",
        "info",
        "asyncio",
        "sleep",
        "opportunities_found",
        "logger",
        "info",
        "logger",
        "info",
        "opportunities_found",
        "last_opportunities",
        "last_opportunities",
        "sum",
        "op",
        "op",
        "recent_ops",
        "len",
        "recent_ops",
        "max",
        "op",
        "op",
        "recent_ops",
        "logger",
        "info",
        "avg_profit",
        "logger",
        "info",
        "max_profit",
        "logger",
        "info",
        "common_tokens",
        "exchange",
        "exchanges",
        "tasks",
        "append",
        "asyncio",
        "create_task",
        "poll_exchange",
        "exchange",
        "tasks",
        "append",
        "asyncio",
        "create_task",
        "print_statistics",
        "asyncio",
        "gather",
        "tasks",
        "logger",
        "info",
        "initialize",
        "common_tokens",
        "logger",
        "error",
        "logger",
        "info",
        "len",
        "common_tokens",
        "len",
        "exchanges",
        "logger",
        "info",
        "min_profit_threshold",
        "start_polling",
        "common_tokens",
        "e",
        "logger",
        "error",
        "e",
        "MultiExchangeArbitrage",
        "asyncio",
        "run",
        "scanner",
        "run",
        "KeyboardInterrupt",
        "logger",
        "info",
        "e",
        "logger",
        "error",
        "e",
        "main"
    ],
    "literals": [
        "'%(asctime)s - %(levelname)s - %(message)s'",
        "\"Uniswap\"",
        "\"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\"",
        "'query'",
        "'data'",
        "'tokens'",
        "'id'",
        "'derivedETH'",
        "\"SushiSwap\"",
        "\"https://api.thegraph.com/subgraphs/name/sushiswap/exchange\"",
        "'query'",
        "'data'",
        "'tokens'",
        "'id'",
        "'derivedETH'",
        "'1'",
        "f\"Fetched {len(token_ids)} tokens from {exchange.name}\"",
        "'symbol'",
        "f\"Error fetching tokens from {exchange.name}: {e}\"",
        "\"No tokens fetched from any exchange.\"",
        "f\"Found {len(common_tokens)} common tokens across exchanges\"",
        "'price'",
        "'timestamp'",
        "'derivedETH'",
        "'price'",
        "'timestamp'",
        "f\"Error polling {exchange.name}: {e}\"",
        "'price'",
        "'price'",
        "'100'",
        "'type'",
        "'direct'",
        "'token_id'",
        "'symbol'",
        "'buy_exchange'",
        "'sell_exchange'",
        "'buy_price'",
        "'sell_price'",
        "'profit_pct'",
        "'timestamp'",
        "'%Y-%m-%d %H:%M:%S.%f'",
        "f\"\\nArbitrage Opportunity #{self.opportunities_found}\"",
        "f\"Token: {opportunity['symbol']} (ID: {opportunity['token_id']})\"",
        "'symbol'",
        "'token_id'",
        "f\"Buy at {opportunity['buy_exchange']}: {opportunity['buy_price']:.8f} ETH\"",
        "'buy_exchange'",
        "'buy_price'",
        "f\"Sell at {opportunity['sell_exchange']}: {opportunity['sell_price']:.8f} ETH\"",
        "'sell_exchange'",
        "'sell_price'",
        "f\"Potential Profit: {opportunity['profit_pct']:.4f}%\"",
        "'profit_pct'",
        "\"-\"",
        "\"\\n=== Arbitrage Statistics ===\"",
        "f\"Total Opportunities Found: {self.opportunities_found}\"",
        "'profit_pct'",
        "'profit_pct'",
        "f\"Average Profit: {avg_profit:.4f}%\"",
        "f\"Max Profit: {max_profit:.4f}%\"",
        "\"=\"",
        "\"Initializing Decentralized Exchange Arbitrage Scanner...\"",
        "\"No common tokens found across exchanges. Exiting...\"",
        "f\"Monitoring {len(common_tokens)} tokens across {len(self.exchanges)} exchanges\"",
        "f\"Minimum profit threshold: {self.min_profit_threshold}%\"",
        "f\"Error in main execution: {e}\"",
        "\"Shutting down gracefully...\"",
        "f\"Fatal error: {e}\"",
        "\"__main__\""
    ],
    "variables": [
        "logger",
        "name",
        "endpoint",
        "query",
        "data",
        "tokens",
        "endpoint",
        "query",
        "data",
        "tokens",
        "exchanges",
        "price_matrix",
        "token_symbols",
        "min_profit_threshold",
        "opportunities_found",
        "last_opportunities",
        "max_opportunity_history",
        "all_tokens",
        "tokens",
        "token_ids",
        "all_tokens",
        "tid",
        "all_tokens",
        "common_tokens",
        "token_id",
        "tokens",
        "price",
        "timestamp",
        "prices",
        "valid_prices",
        "min_exchange",
        "min_price",
        "max_exchange",
        "max_price",
        "profit_pct",
        "opportunity",
        "recent_ops",
        "avg_profit",
        "max_profit",
        "tasks",
        "common_tokens",
        "scanner"
    ],
    "comments": [
        "Configure logging",
        "",
        "Base Exchange Class",
        "",
        "",
        "Uniswap DEX (via The Graph)",
        "",
        "Return a dict keyed by token id (lowercase) for consistency",
        "",
        "SushiSwap DEX (via The Graph)",
        "",
        "",
        "Multi-Exchange Arbitrage Scanner for DEXes",
        "",
        "Use our two DEXes",
        "Price matrix: {token_id: {exchange_name: {'price': Decimal, 'timestamp': int}}}",
        "For display, map a token id to its symbol (using the first exchange’s data)",
        "Set the minimum arbitrage threshold (in percent)",
        "1% threshold",
        "Save the token symbols from the first exchange we can fetch from.",
        "Compute the intersection of token IDs across all exchanges.",
        "Initialize the price matrix for each common token.",
        "Only update if this token is common to all exchanges.",
        "Poll every 10 seconds",
        "Need at least two valid prices to compare.",
        "Identify the exchange with the lowest and highest price.",
        "Calculate the potential profit percentage.",
        "Every 5 minutes",
        "",
        "Entry Point",
        ""
    ],
    "docstrings": [
        "\"\"\"\n        Fetch token data from the exchange.\n        Returns a dict mapping token id (lowercase) to a token dict.\n        Each token dict should at least contain a symbol and a derivedETH price.\n        \"\"\"",
        "\"\"\"\n        {\n          tokens(first: 1000) {\n            id\n            symbol\n            derivedETH\n          }\n        }\n        \"\"\"",
        "\"\"\"\n        {\n          tokens(first: 1000) {\n            id\n            symbol\n            derivedETH\n          }\n        }\n        \"\"\"",
        "\"\"\"\n        Fetch tokens from each DEX and determine the set of tokens common\n        to all exchanges.\n        \"\"\"",
        "\"\"\"\n        Periodically poll a DEX for token prices and update the price matrix.\n        \"\"\"",
        "\"\"\"\n        Check for a direct arbitrage opportunity on a token between the two DEXes.\n        \"\"\"",
        "\"\"\"\n        Log (and keep a history of) arbitrage opportunities.\n        \"\"\"",
        "\"\"\"\n        Periodically print statistics about the arbitrage opportunities.\n        \"\"\"",
        "\"\"\"\n        Start the polling tasks for all exchanges.\n        \"\"\"",
        "\"\"\"\n        Main execution function.\n        \"\"\""
    ],
    "functions": [
        "fetch_tokens",
        "fetch_tokens",
        "fetch_tokens",
        "initialize",
        "poll_exchange",
        "check_arbitrage_opportunities",
        "log_opportunity",
        "print_statistics",
        "start_polling",
        "run",
        "main"
    ],
    "classes": [
        "Exchange",
        "UniswapDEX",
        "SushiSwapDEX",
        "MultiExchangeArbitrage"
    ]
}