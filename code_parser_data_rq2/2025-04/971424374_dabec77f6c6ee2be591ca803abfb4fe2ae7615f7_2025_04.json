{
    "identifiers": [
        "timer",
        "io",
        "timer",
        "timer",
        "response",
        "response",
        "response",
        "response",
        "message",
        "message",
        "status",
        "status",
        "timer",
        "response",
        "response",
        "err",
        "err",
        "io",
        "data",
        "data",
        "io",
        "data",
        "data",
        "err",
        "err"
    ],
    "literals": [
        "\"./timer.js\"",
        "\"./io.js\"",
        "'5 secondes se sont écoulées !'",
        "pause de ${response.time / 1000} secondes : ${response.message}",
        "message recu de premier then :",
        "${response.message} apres ${response.time / 1000} secondes",
        "'erreur : '",
        "'data/test.txt'",
        "'---- donnees lues : ------'",
        "'--- Fin fichier -----'",
        "'data/tesst.txt'",
        "'---- donnees lues : ------'",
        "'--- Fin fichier -----'",
        "'erreur de lecture : '"
    ],
    "variables": [
        "response"
    ],
    "comments": [
        "export != export default (pas de {timer}) import timer , {p1, p2}",
        "calback imbriquee",
        "pas time mais reponse d objet {time, message}",
        "syntaxe async/await",
        "resolve(response)",
        "reject(err)",
        "fct return promiss et daans la fct de resolution on a param boolean",
        "=> await async wait : blockage async  , apres await on a tjrs promese",
        "garantie que tu lance le traitement o matsnahach itssala",
        "synchrone => fct bloquante",
        "async elle meme promisse",
        "fct ordinaire se sont des fcts pas asynchrone",
        "executeur comme fct callback : executeur resolve reject : sont 3fct callback :",
        "traitement plutiot sequentiel",
        "je suis sur avec then que le deuxieme ne s execute que le 1er est execute => async",
        "then c est aussi une promise elle meme poura realiser trait asyn ou retour appele autre fct async appel fct et return ce que va retourn \ntraitement declaratique de meme niv pas hierchique then return qlq chose et en le recupere dans .then",
        "le reject : une seul sol : try catch"
    ],
    "docstrings": [],
    "functions": [
        "exp01",
        "exp02",
        "exp03",
        "exp04",
        "exp05"
    ],
    "classes": []
}