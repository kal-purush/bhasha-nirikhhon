{
    "identifiers": [
        "managers",
        "tasks",
        "tasks",
        "Epic",
        "tasks",
        "Subtask",
        "tasks",
        "Status",
        "org",
        "junit",
        "jupiter",
        "api",
        "BeforeEach",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "java",
        "time",
        "Duration",
        "java",
        "time",
        "LocalDateTime",
        "java",
        "util",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "taskManager",
        "baseTime",
        "BeforeEach",
        "Test",
        "task",
        "Status",
        "NEW",
        "taskManager",
        "addTask",
        "task",
        "retrieved",
        "taskManager",
        "getTask",
        "task",
        "getId",
        "assertEquals",
        "task",
        "retrieved",
        "Test",
        "task",
        "Status",
        "NEW",
        "taskManager",
        "addTask",
        "task",
        "task",
        "setName",
        "taskManager",
        "updateTask",
        "task",
        "retrieved",
        "taskManager",
        "getTask",
        "task",
        "getId",
        "assertEquals",
        "retrieved",
        "getName",
        "Test",
        "task",
        "Status",
        "NEW",
        "taskManager",
        "addTask",
        "task",
        "taskManager",
        "removeTaskById",
        "task",
        "getId",
        "assertNull",
        "taskManager",
        "getTask",
        "task",
        "getId",
        "Test",
        "epic",
        "Status",
        "NEW",
        "taskManager",
        "addEpic",
        "epic",
        "retrieved",
        "getEpicById",
        "epic",
        "getId",
        "assertEquals",
        "epic",
        "retrieved",
        "Test",
        "epic",
        "Status",
        "NEW",
        "taskManager",
        "addEpic",
        "epic",
        "subtask",
        "Status",
        "NEW",
        "epic",
        "getId",
        "taskManager",
        "addSubtask",
        "subtask",
        "subtasks",
        "taskManager",
        "getEpicSubtasks",
        "epic",
        "getId",
        "assertFalse",
        "subtasks",
        "isEmpty",
        "assertEquals",
        "subtask",
        "subtasks",
        "get",
        "Test",
        "subtask",
        "Status",
        "NEW",
        "assertThrows",
        "taskManager",
        "addSubtask",
        "subtask",
        "Test",
        "epic",
        "Status",
        "NEW",
        "taskManager",
        "addEpic",
        "epic",
        "subtask1",
        "Status",
        "NEW",
        "epic",
        "getId",
        "subtask2",
        "Status",
        "NEW",
        "epic",
        "getId",
        "taskManager",
        "addSubtask",
        "subtask1",
        "taskManager",
        "addSubtask",
        "subtask2",
        "updatedEpic",
        "getEpicById",
        "epic",
        "getId",
        "assertEquals",
        "Status",
        "NEW",
        "updatedEpic",
        "getStatus",
        "subtask1",
        "setStatus",
        "Status",
        "DONE",
        "subtask2",
        "setStatus",
        "Status",
        "DONE",
        "taskManager",
        "updateSubtask",
        "subtask1",
        "taskManager",
        "updateSubtask",
        "subtask2",
        "updatedEpic",
        "getEpicById",
        "epic",
        "getId",
        "assertEquals",
        "Status",
        "DONE",
        "updatedEpic",
        "getStatus",
        "subtask1",
        "setStatus",
        "Status",
        "NEW",
        "taskManager",
        "updateSubtask",
        "subtask1",
        "updatedEpic",
        "getEpicById",
        "epic",
        "getId",
        "assertEquals",
        "Status",
        "IN_PROGRESS",
        "updatedEpic",
        "getStatus",
        "subtask2",
        "setStatus",
        "Status",
        "IN_PROGRESS",
        "taskManager",
        "updateSubtask",
        "subtask2",
        "updatedEpic",
        "getEpicById",
        "epic",
        "getId",
        "assertEquals",
        "Status",
        "IN_PROGRESS",
        "updatedEpic",
        "getStatus",
        "Test",
        "baseTime",
        "LocalDateTime",
        "of",
        "task1",
        "Status",
        "NEW",
        "Duration",
        "ofMinutes",
        "baseTime",
        "task2",
        "Status",
        "NEW",
        "Duration",
        "ofMinutes",
        "baseTime",
        "plusMinutes",
        "taskManager",
        "addTask",
        "task1",
        "assertThrows",
        "taskManager",
        "addTask",
        "task2",
        "id",
        "taskManager",
        "getAllEpic",
        "stream",
        "epic",
        "epic",
        "getId",
        "id",
        "findFirst",
        "orElse"
    ],
    "literals": [
        "\"Таск\"",
        "\"Описание\"",
        "\"Задача должна быть доступна по ID\"",
        "\"Таск\"",
        "\"Описание\"",
        "\"Обновленное название\"",
        "\"Обновленное название\"",
        "\"Имя задачи должно быть обновлено\"",
        "\"Таск\"",
        "\"Описание\"",
        "\"Задача должна быть удалена\"",
        "\"Эпик\"",
        "\"Описание\"",
        "\"Эпик должен быть доступен по ID\"",
        "\"Эпик\"",
        "\"Описание\"",
        "\"Сабтаска\"",
        "\"Описание\"",
        "\"Сабтаска должна быть добавлена к эпику\"",
        "\"Сабтаска должна быть корректно связана с эпиком\"",
        "\"Сабтаска\"",
        "\"Описание\"",
        "\"Добавление подзадачи с несуществующим ID эпика\"",
        "\"Эпик\"",
        "\"Описание\"",
        "\"Сабтаска1\"",
        "\"Описание\"",
        "\"Сабтаска2\"",
        "\"Описание\"",
        "\"Статус должен быть NEW, если все подзадачи NEW\"",
        "\"Статус должен быть DONE, если все подзадачи DONE\"",
        "\"Статус должен быть IN_PROGRESS, если статусы NEW и DONE\"",
        "\"Статус олжен быть IN_PROGRESS, если есть подзадача IN_PROGRESS\"",
        "\"Таск1\"",
        "\"Описание\"",
        "\"Таск2\"",
        "\"Описание\"",
        "\"Добавление задачи с пересекающимся временным интервалом должно вызывать исключение\""
    ],
    "variables": [
        "taskManager",
        "baseTime"
    ],
    "comments": [
        "Несуществующий ID у Эпика"
    ],
    "docstrings": [],
    "functions": [
        "setUp",
        "testAddAndGetTask",
        "testUpdateTask",
        "testDeleteTask",
        "testAddAndGetEpic",
        "testAddSubtaskToEpic",
        "testSubtaskRequiresValidEpic",
        "testEpicStatusCalculation",
        "testTaskIntervalOverlap",
        "Epic",
        "getEpicById"
    ],
    "classes": [
        "TaskManagerTest"
    ]
}