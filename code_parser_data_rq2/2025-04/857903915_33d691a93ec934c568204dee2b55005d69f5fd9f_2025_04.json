{
    "identifiers": [
        "os",
        "re",
        "requests",
        "bs4",
        "BeautifulSoup",
        "collections",
        "defaultdict",
        "stop_words",
        "STOP_WORDS",
        "defaultdict",
        "IndexNode",
        "word",
        "filename",
        "root",
        "word",
        "node",
        "children",
        "node",
        "children",
        "IndexNode",
        "node",
        "children",
        "node",
        "files",
        "filename",
        "word",
        "root",
        "word",
        "node",
        "children",
        "node",
        "children",
        "node",
        "files",
        "text",
        "re",
        "sub",
        "text",
        "text",
        "lower",
        "split",
        "word",
        "word",
        "words",
        "word",
        "STOP_WORDS",
        "source",
        "source",
        "startswith",
        "requests",
        "get",
        "source",
        "BeautifulSoup",
        "response",
        "content",
        "open",
        "source",
        "encoding",
        "f",
        "BeautifulSoup",
        "f",
        "soup",
        "get_text",
        "source_file",
        "Index",
        "open",
        "source_file",
        "f",
        "f",
        "read",
        "splitlines",
        "src",
        "sources",
        "extract_text",
        "src",
        "preprocess_text",
        "text",
        "word",
        "words",
        "index",
        "add_word",
        "word",
        "src",
        "e",
        "src",
        "e",
        "index",
        "create_index",
        "source_file",
        "open",
        "result_file",
        "input",
        "split",
        "query",
        "queries",
        "index",
        "find_word",
        "query",
        "sorted",
        "results",
        "items",
        "key",
        "x",
        "x",
        "reverse",
        "write",
        "query",
        "doc",
        "freq",
        "ranked",
        "write",
        "doc",
        "freq",
        "write",
        "search_engine"
    ],
    "literals": [
        "r'[^a-zA-Z0-9\\s]'",
        "''",
        "\"http\"",
        "\"html.parser\"",
        "\"r\"",
        "\"utf-8\"",
        "\"html.parser\"",
        "\"r\"",
        "f\"Error processing {src}: {e}\"",
        "\"input.txt\"",
        "\"output.txt\"",
        "\"w\"",
        "\"Enter your search queries separated by commas: \"",
        "\",\"",
        "f\"Search results for '{query}':\\n\"",
        "f\"  {doc} (frequency: {freq})\\n\"",
        "\"\\n\"",
        "\"__main__\""
    ],
    "variables": [
        "children",
        "files",
        "root",
        "node",
        "node",
        "node",
        "node",
        "text",
        "words",
        "response",
        "soup",
        "soup",
        "index",
        "sources",
        "text",
        "words",
        "source_file",
        "result_file",
        "index",
        "queries",
        "results",
        "ranked"
    ],
    "comments": [
        "Class representing a single node in the Trie",
        "Dictionary to store child nodes",
        "Dictionary to store document frequencies (filename -> frequency)",
        "Class representing the Trie data structure",
        "Initialize the root node",
        "Method to insert a word into the Index",
        "Traverse or create child nodes for each character in the word",
        "Increment the frequency of the word in the given document",
        "Method to search for a word in the Index",
        "Traverse the Index for each character in the word",
        "Return empty if the word is not found",
        "Return the dictionary of documents containing the word",
        "Function to clean and preprocess text",
        "Remove non-alphanumeric characters",
        "Convert text to lowercase and split into words",
        "Remove stop words",
        "Function to parse HTML content from a file or URL",
        "If the input is a URL, fetch the content using requests",
        "If the input is a file, read and parse its content",
        "Extract and return the text content from the HTML",
        "Function to build the search index using an Index",
        "Initialize the Index",
        "Read the list of sources (URLs or file paths) from the input file",
        "Parse and clean the text from each source",
        "Insert each word into the Index with the source as the document",
        "Handle errors during processing",
        "Function to run the search engine",
        "File containing the list of sources",
        "File to write the search results",
        "Build the search index",
        "Prompt the user for search queries",
        "Search for each query in the Index",
        "Rank the results by frequency in descending order",
        "Write the search results to the output file",
        "Entry point of the program"
    ],
    "docstrings": [],
    "functions": [
        "add_word",
        "find_word",
        "preprocess_text",
        "extract_text",
        "create_index",
        "search_engine"
    ],
    "classes": [
        "IndexNode",
        "Index"
    ]
}