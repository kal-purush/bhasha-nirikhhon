{
    "identifiers": [
        "json",
        "os",
        "time",
        "requests",
        "urllib",
        "parse",
        "urljoin",
        "urlparse",
        "dotenv",
        "load_dotenv",
        "os",
        "github",
        "Github",
        "zipfile",
        "load_dotenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "requests",
        "Session",
        "session",
        "headers",
        "update",
        "open",
        "__FILE_ENDPOINT",
        "file",
        "json",
        "load",
        "file",
        "json",
        "dumps",
        "data",
        "e",
        "e",
        "url",
        "urlparse",
        "url",
        "parsed_url",
        "netloc",
        "__DOMAIN_FILE",
        "ValueError",
        "urljoin",
        "__DOMAIN_FILE",
        "url",
        "urlparse",
        "url",
        "platform",
        "parsed_url",
        "netloc",
        "platform",
        "video_platforms",
        "os",
        "makedirs",
        "__TEMPORARY_FOLDER",
        "exist_ok",
        "os",
        "path",
        "basename",
        "parsed_url",
        "path",
        "filename",
        "time",
        "time",
        "os",
        "path",
        "join",
        "__TEMPORARY_FOLDER",
        "filename",
        "session",
        "get",
        "url",
        "stream",
        "timeout",
        "response",
        "raise_for_status",
        "open",
        "file_path",
        "f",
        "chunk",
        "response",
        "iter_content",
        "chunk_size",
        "f",
        "write",
        "chunk",
        "requests",
        "exceptions",
        "RequestException",
        "e",
        "url",
        "e",
        "IOError",
        "e",
        "file_path",
        "e",
        "__TEMPORARY_FOLDER",
        "zipfile",
        "ZipFile",
        "zip_path",
        "zipf",
        "root",
        "_",
        "files",
        "os",
        "walk",
        "__TEMPORARY_FOLDER",
        "file",
        "files",
        "file",
        "os",
        "path",
        "join",
        "root",
        "file",
        "os",
        "path",
        "relpath",
        "file_path",
        "__TEMPORARY_FOLDER",
        "zipf",
        "write",
        "file_path",
        "arc_name",
        "Github",
        "__GITHUB_TOKEN",
        "github",
        "get_repo",
        "__GITHUB_REPO",
        "open",
        "zip_path",
        "f",
        "repo",
        "create_file",
        "f",
        "read",
        "root",
        "dirs",
        "files",
        "os",
        "walk",
        "__TEMPORARY_FOLDER",
        "file",
        "files",
        "os",
        "path",
        "join",
        "root",
        "file",
        "os",
        "remove",
        "file_path",
        "e",
        "file",
        "e",
        "json",
        "loads",
        "get_json_data",
        "len",
        "data",
        "idx",
        "entry",
        "data",
        "download_file",
        "entry",
        "e",
        "idx",
        "e",
        "create_and_upload_zip"
    ],
    "literals": [
        "\"TEMPORARY_FOLDER\"",
        "\"FILE_ENDPOINT\"",
        "\"DOMAIN_FILE\"",
        "\"GITHUB_TOKEN\"",
        "\"GITHUB_REPO_NAME\"",
        "'User-Agent'",
        "'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36'",
        "'Accept'",
        "'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'",
        "'Accept-Language'",
        "'it-IT,it;q=0.9,en-US;q=0.8,en;q=0.7'",
        "'Accept-Encoding'",
        "'gzip, deflate, br'",
        "'Connection'",
        "'keep-alive'",
        "'Referer'",
        "'https://www.regione.marche.it/'",
        "'DNT'",
        "'1'",
        "'r'",
        "f\"Errore nella lettura del file JSON: {str(e)}\"",
        "\"ENDPOINT_PDF_URL non è configurato nell'ambiente.\"",
        "\"youtube.com\"",
        "\"youtu.be\"",
        "\"vimeo.com\"",
        "\"dailymotion.com\"",
        "f\"downloaded_file_{int(time.time())}\"",
        "'wb'",
        "f\"Error downloading file from {url}: {str(e)}\"",
        "f\"Error saving file to {file_path}: {str(e)}\"",
        "f\"{self.__TEMPORARY_FOLDER}/files.zip\"",
        "\"w\"",
        "\"files.zip\"",
        "\"rb\"",
        "\"downloads/files.zip\"",
        "\"Add batch\"",
        "\"main\"",
        "\"Cleaning up temporary files...\"",
        "f\"Error deleting {file}: {str(e)}\"",
        "f\"Trovati {len(data['values'])} elementi\"",
        "'values'",
        "'values'",
        "f\"Errore durante il download del file. Indice {idx}: {str(e)}\""
    ],
    "variables": [
        "__TEMPORARY_FOLDER",
        "__FILE_ENDPOINT",
        "__DOMAIN_FILE",
        "__GITHUB_TOKEN",
        "__GITHUB_REPO",
        "session",
        "data",
        "parsed_url",
        "url",
        "parsed_url",
        "video_platforms",
        "filename",
        "filename",
        "file_path",
        "response",
        "zip_path",
        "file_path",
        "arc_name",
        "github",
        "repo",
        "file_path",
        "data"
    ],
    "comments": [
        "Aggiunto per il delay",
        "Caricamento delle variabili d'ambiente",
        "Configurazione headers per evitare rilevamento bot",
        "response = requests.get(self.__FILE_ENDPOINT, headers=self.session.headers)",
        "if response.status_code == 200:",
        "return response.content",
        "else:",
        "raise Exception(f\"Errore nella richiesta: {response.status_code} - {response.text}\")",
        "Se l'URL è relativo, aggiunge il dominio ENDPOINT_PDF_URL",
        "Check if it's a YouTube or video platform link",
        "Create temporary folder if it doesn't exist",
        "Get filename from URL",
        "If filename is empty or invalid, create a unique filename",
        "Full path for saving the file",
        "Download file with timeout and stream to handle large files",
        "Save file to disk",
        "List all files in the temporary folder",
        "Skip the zip file itself to avoid recursion",
        "Create relative path for the zip structure",
        "Add file to the zip",
        "Carica l'ZIP (usando PyGithub o Git)",
        "Clean up temporary files after successful upload"
    ],
    "docstrings": [
        "\"\"\"Recupera i dati JSON dall'endpoint configurato\"\"\"",
        "\"\"\"Scarica un file da un URL e lo salva in una cartella temporanea\"\"\"",
        "\"\"\"Metodo principale per l'esecuzione dello script\"\"\""
    ],
    "functions": [
        "get_json_data",
        "download_file",
        "create_and_upload_zip",
        "entry_point"
    ],
    "classes": [
        "Scraper"
    ]
}