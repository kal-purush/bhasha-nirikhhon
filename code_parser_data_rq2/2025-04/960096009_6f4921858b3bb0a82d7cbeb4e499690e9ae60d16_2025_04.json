{
    "identifiers": [
        "argparse",
        "os",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "args",
        "dst_dir",
        "args",
        "src_dir",
        "prefix_text",
        "prefix_text",
        "Enum",
        "filename",
        "args",
        "src_files",
        "filename",
        "cmake_src_list",
        "append",
        "filename",
        "filename",
        "filename",
        "os",
        "path",
        "join",
        "args",
        "src_dir",
        "filename",
        "open",
        "full_filename",
        "infile",
        "infile",
        "readlines",
        "sum",
        "line",
        "lines",
        "line",
        "ntest",
        "args",
        "max_tests_per_file",
        "cmake_src_list",
        "append",
        "filename",
        "ParseState",
        "Filler",
        "text",
        "filler_text",
        "filler_text",
        "text",
        "i",
        "len",
        "tests",
        "tests",
        "i",
        "completed",
        "tests",
        "i",
        "suffix",
        "text",
        "line",
        "lines",
        "state",
        "ParseState",
        "Filler",
        "line",
        "line",
        "split",
        "len",
        "splits",
        "len",
        "splits",
        "splits",
        "isspace",
        "filler_text",
        "splits",
        "splits",
        "tests",
        "append",
        "Testcase",
        "filler_text",
        "ParseState",
        "TestDeclaredWaitingStart",
        "add_filler_text",
        "line",
        "state",
        "ParseState",
        "TestDeclaredWaitingStart",
        "line",
        "ParseState",
        "InTest",
        "tests",
        "test",
        "line",
        "state",
        "ParseState",
        "InTest",
        "line",
        "tests",
        "completed",
        "tests",
        "test",
        "tests",
        "curly_bracket_balance",
        "tests",
        "curly_bracket_balance",
        "tests",
        "curly_bracket_balance",
        "tests",
        "filler_text_to_add",
        "filler_text_to_add",
        "filler_text_to_add",
        "isspace",
        "filler_text_to_add",
        "add_filler_text",
        "filler_text_to_add",
        "tests",
        "completed",
        "ParseState",
        "Filler",
        "filename",
        "split",
        "i",
        "test",
        "tests",
        "test",
        "completed",
        "filename_prefix",
        "i",
        "zfill",
        "filename_suffix",
        "os",
        "path",
        "join",
        "args",
        "dst_dir",
        "new_filename",
        "full_new_filename",
        "replace",
        "open",
        "full_new_filename",
        "outfile",
        "outfile",
        "write",
        "test",
        "prefix",
        "test",
        "test",
        "test",
        "suffix",
        "cmake_src_list",
        "append",
        "full_new_filename",
        "cmake_file",
        "cmake_src_list",
        "cmake_file"
    ],
    "literals": [
        "\"cmake_target\"",
        "\"Name of the CMake target being generated.\"",
        "\"src_dir\"",
        "\"Path to the directory containing test files.\"",
        "\"--src_files\"",
        "'+'",
        "\"Files containing TEST instances to split.\"",
        "\"--max_tests_per_file\"",
        "\"Maximum number of TEST instances per file.\"",
        "\"--dst_dir\"",
        "\"Path to the directory to which to write new test files. If not set, uses src_dir.\"",
        "\"\"",
        "\"\"",
        "'.'",
        "'/'",
        "f\"Source files passed to {__file__} must be within the same directory \"",
        "\"as the CMakeLists defining the target using the files. \"",
        "f\"Provided path {filename} is in a different directory.\"",
        "'r'",
        "\"TEST(\"",
        "\"\"",
        "'TEST('",
        "'TEST'",
        "'TEST'",
        "'{'",
        "\"\"",
        "'{'",
        "'}'",
        "\"\"",
        "'\\n'",
        "'\\n'",
        "'.'",
        "'_'",
        "'.'",
        "'\\\\'",
        "'/'",
        "'w'"
    ],
    "variables": [
        "parser",
        "args",
        "args",
        "dst_dir",
        "prefix",
        "test",
        "suffix",
        "completed",
        "curly_bracket_balance",
        "Filler",
        "InTest",
        "TestDeclaredWaitingStart",
        "cmake_src_list",
        "full_filename",
        "lines",
        "ntest",
        "state",
        "tests",
        "filler_text",
        "splits",
        "line",
        "state",
        "state",
        "filler_text_to_add",
        "completed",
        "state",
        "filename_prefix",
        "filename_suffix",
        "new_filename",
        "full_new_filename",
        "full_new_filename"
    ],
    "comments": [
        "",
        "",
        "Copyright (c) 2017 - 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.",
        "SPDX-License-Identifier: BSD-3-Clause",
        "",
        "Redistribution and use in source and binary forms, with or without",
        "modification, are permitted provided that the following conditions are met:",
        "",
        "1. Redistributions of source code must retain the above copyright notice, this",
        "list of conditions and the following disclaimer.",
        "",
        "2. Redistributions in binary form must reproduce the above copyright notice,",
        "this list of conditions and the following disclaimer in the documentation",
        "and/or other materials provided with the distribution.",
        "",
        "3. Neither the name of the copyright holder nor the names of its",
        "contributors may be used to endorse or promote products derived from",
        "this software without specific prior written permission.",
        "",
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
        "AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
        "IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE",
        "DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE",
        "FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL",
        "DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR",
        "SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER",
        "CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,",
        "OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
        "OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "",
        "",
        "Any text that preceded the TEST definition that was",
        "not part of another TEST definition",
        "Any text within the TEST definition",
        "Any text that follows the completion of the TEST definition",
        "and is not included in other TEST definitions",
        "Whether the test's definition has concluded",
        "Current balance of opening and closing curly brackets in",
        "the TEST definition. '{' increments the count and '}' decrements it.",
        "A value of 0 (when self.completed == False) indicates that the test",
        "has completed.",
        "Any text that is not part of a TEST case",
        "Processing text within the first { of the TEST case",
        "and before the en of the final } of the TEST case",
        "Processing text from the start of the TEST definition",
        "but before the first {. This could occur if the opening {",
        "occurs on a separate line than the TEST definition.",
        "Add any non-filename arguments to the command list by default",
        "Find the number of instances of \"TEST(\"",
        "File contains fewer than max_tests_per_file TEST instances. It does",
        "not need to be split",
        "Current state of the parsing state machine. We start with filler text",
        "List of individual TESTs found",
        "Ongoing text that is not included in a TEST definition. This will serve",
        "as the prefix for any yet-to-be encountered TEST definitions.",
        "Add new text to the ongoing filler text and to the suffixes of",
        "any completed tests",
        "We are not currently within a TEST definition.",
        "We have encountered a new TEST( case. Any text preceding this",
        "must be added to the filler text (e.g., if we have a line of the form:",
        "\"static constexpr int Val = 4; TEST(blah) {\"",
        "then \"static constexpr int Val = 4;\" needs to be included in filler",
        "text, as it could be used by subsequent tests.)",
        "There should not be more than one TEST definition on a given line",
        "Only add text to filler if there are non-whitespace charcters",
        "preceding the TEST definition in the line",
        "The new line is just the TEST-related line",
        "Add tests and transtion to TestDeclaredWaitingStart state.",
        "Do not add the line to the test text of the new test case; this",
        "will be done in either the TestDeclaredWaitingStart state processing",
        "below or in the InTest state processing below.",
        "Any remaining filler text is added to the running filler_text",
        "which will be used as the prefix for any new tests, and to the",
        "suffix of any completed tests",
        "We have seen a TEST definition but have not yet seen its opening {.",
        "The first curly bracket for the TEST definition has been found.",
        "Advance to state InTests. Do not add the line to the test's text",
        "or change the curly-brace balance of the test; these will be done",
        "when processing the state == ParseState.InTest condition below.",
        "We are currently within a TEST definition.",
        "Process lines character-by-character looking for opening and closing",
        "braces. If we reach parity between opening and closing braces, the",
        "test is considered done.",
        "Write out the new files for tests",
        "Replace any '\\' with '/'. CMake doesn't like '\\'."
    ],
    "docstrings": [
        "\"\"\"\nGiven a set of test files to be included in a CMake target, this script extracts\nthe TEST definitions from each file, writes them into new files, and prints the names\nof the new files so that they can be processed as part of a new CMake target.\n\nFor example, given a set of --src_files test_a.cu test_b.cu containing 3 and 2 TEST\ndefinitions, respectively, this script would produce:\n    test_a_000.cu\n    test_a_001.cu\n    test_a_002.cu\n    test_b_000.cu\n    test_b_001.cu\n\nThe splitting follows a fairly rudimentary algorithm that does not support all valid C++ programs.\nWe walk through a given input test file line by line. Any lines that are not within a TEST definition is added to a running\n\"filler\" text. When a TEST definition is encountered, the current filler text becomes the prefix\nfor that test. All subsequent lines are considered to be part of the TEST definition until the\nnumber of starting function braces ('{') match the number of closing function braces ('}'). When\nthese counts are equal, the TEST definition is considered to be completed. At this point, we return\nto adding lines to the \"filler\" text until a new TEST definition is encountered. Any \"filler\" text\nfollowing a TEST definition is added to the suffix of that TEST definition (this is useful for finishing\noff #if statements, as is common in unit tests.).\n\nA state machine illustrating this algorithm at a high level is provided in the source below.\n\nExample: Suppose an input test `test.cu` has the following source:\n    // COPYRIGHT\n    #include <iostream>\n\n    #if defined(CUTLASS_ARCH_MMA_SM90_SUPPORTED)\n\n    // Test #1\n    TEST(SM90_a, 256x128x64_2x2x1) {\n        std::cout << \"Test #1\" << std::endl;\n    }\n\n    // Test #2\n    TEST(SM90_b, 256x128x64_1x1x1) {\n        std::cout << \"Test #2\" << std::endl;\n    }\n\n    #endif defined(CUTLASS_ARCH_MMA_SM90_SUPPORTED)\n\nThe contents of the two resulting test files will be:\n  $ cat test_000.cu\n    // COPYRIGHT\n    #include <iostream>\n\n    #if defined(CUTLASS_ARCH_MMA_SM90_SUPPORTED)\n\n    // Test #1\n    TEST(SM90_a, 256x128x64_2x2x1) {\n        std::cout << \"Test #1\" << std::endl;\n    }\n\n    // Test #2\n\n    #endif defined(CUTLASS_ARCH_MMA_SM90_SUPPORTED)\n  $ cat test_001.cu\n    // COPYRIGHT\n    #include <iostream>\n\n    #if defined(CUTLASS_ARCH_MMA_SM90_SUPPORTED)\n\n    // Test #1\n\n    // Test #2\n    TEST(SM90_b, 256x128x64_1x1x1) {\n        std::cout << \"Test #2\" << std::endl;\n    }\n\n    #endif defined(CUTLASS_ARCH_MMA_SM90_SUPPORTED)\n\nNotice that each of test_000.cu and test_001.cu contain comments that appear outside\nthe TEST definitions not included in each file. This is by design, as these\nwould be considered \"filler\" text.\n\nAs expected, some cases can't be handled. Below is a non-exhaustive list:\n    1. New TEST following the closing '}' of a TEST case on the same line:\n        TEST(x, y) {\n            // Do stuff\n        } TEST(a, b) {\n\n        In this case, \"TEST(a, b) {\" will be ignored\n\n    2. Preprocessor macros that occur midway through a test case and extend\n       beyond the conclusion of a testcase\n\n       Example:\n            TEST(a, b) {\n                // Do stuff\n        #if X\n                // Do more stuff\n            }\n        #else\n                // Do other stuff\n            }\n        #endif\n\"\"\"",
        "\"\"\"\n    Lightweight tracker of test-case processing status\n    \"\"\"",
        "\"\"\"\n      State machine for processing.\n      Transitions occur on each line encountered in the soruce file\n\n\n      Line does not contain 'TEST('\n                 +----+\n                 |    |\n                 |    v          'TEST('\n               +--------+      encountered         +--------------------------+\n        ------>| Filler | -----------------------> | TestDeclaredWaitingStart |\n               +--------+                          +--------------------------+\n                   ^                                         |\n Number of '{'     |                                         | First '{' encountered\n equals number of  |           +--------+                    |\n '}' encountered   +-----------| InTest | <------------------+\n                               +--------+\n                                 |    ^\n                                 |    |\n                                 +----+\n                      Number of '{' encountered\n                      exceeds number of '}' encountered\n    \"\"\""
    ],
    "functions": [
        "add_filler_text"
    ],
    "classes": [
        "Testcase",
        "ParseState"
    ]
}