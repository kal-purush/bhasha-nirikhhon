{
    "identifiers": [
        "useEffect",
        "useRef",
        "useState",
        "useLocation",
        "gsap",
        "ScrollTrigger",
        "ScrollToPlugin",
        "gsap",
        "ScrollTrigger",
        "ScrollToPlugin",
        "useLocation",
        "useState",
        "location",
        "useRef",
        "gsap",
        "useRef",
        "location",
        "scrollToSection",
        "sectionId",
        "offset",
        "autoKill",
        "forceUpdate",
        "scrollTween",
        "scrollTween",
        "gsap",
        "sectionId",
        "offset",
        "setActiveSection",
        "sectionId",
        "forceUpdate",
        "scrollTween",
        "useEffect",
        "scrollToRef",
        "scrollToRef",
        "element",
        "scrollToSection",
        "scrollToRef",
        "scrollToRef",
        "location",
        "useEffect",
        "isHomePage",
        "setActiveSection",
        "gsap",
        "sections",
        "section",
        "ScrollTrigger",
        "section",
        "setActiveSection",
        "section",
        "ScrollTrigger",
        "setActiveSection",
        "setActiveSection",
        "observers",
        "homeObserver",
        "obs",
        "obs",
        "isHomePage",
        "useEffect",
        "isHomePage",
        "handleWheel",
        "e",
        "isScrolling",
        "e",
        "e",
        "isScrolling",
        "e",
        "scrollToSection",
        "setTimeout",
        "isScrolling",
        "handleWheel",
        "handleWheel",
        "isHomePage"
    ],
    "literals": [
        "\"react\"",
        "\"react-router\"",
        "\"gsap\"",
        "\"gsap/ScrollTrigger\"",
        "\"gsap/ScrollToPlugin\"",
        "\"\"",
        "\"/\"",
        "string",
        "string",
        "#${sectionId}",
        "\"power2.inOut\"",
        "\"\"",
        "\"\"",
        "\"[data-section]\"",
        "\"top center\"",
        "\"bottom center\"",
        "\"body\"",
        "\"top top\"",
        "\"home\"",
        "\"home\"",
        "\"features\"",
        "\"wheel\"",
        "\"wheel\""
    ],
    "variables": [
        "location",
        "activeSection",
        "setActiveSection",
        "isHomePage",
        "scrollTween",
        "scrollToRef",
        "scrollToSection",
        "element",
        "sections",
        "observers",
        "homeObserver",
        "isScrolling",
        "handleWheel"
    ],
    "comments": [
        "import { useEffect, useRef, useCallback, useState } from \"react\";",
        "import { useLocation } from \"react-router\";",
        "import { gsap } from \"gsap\";",
        "import { ScrollToPlugin } from \"gsap/ScrollToPlugin\";",
        "gsap.registerPlugin(ScrollToPlugin);",
        "export function useScrollHandler() {",
        "const location = useLocation();",
        "const [activeSection, setActiveSection] = useState(\"\");",
        "const scrollStartY = useRef(0);",
        "const scrollTimeout = useRef<ReturnType<typeof setTimeout> | null>(null);",
        "const isHomePage = location.pathname === \"/\";",
        "const scrollToSection = useCallback(",
        "(",
        "sectionId: string,",
        "offset = 120,",
        "autoKill = true,",
        "onComplete?: () => void",
        ") => {",
        "gsap.to(window, {",
        "duration: 1.5,",
        "scrollTo: { y: `#${sectionId}`, offsetY: offset, autoKill },",
        "ease: \"power3.inOut\",",
        "onComplete: () => {",
        "setActiveSection(sectionId);",
        "onComplete?.();",
        "},",
        "});",
        "},",
        "[]",
        ");",
        "// Handle auto-scroll on homepage",
        "useEffect(() => {",
        "if (!isHomePage) return;",
        "const handleScroll = (e: WheelEvent) => {",
        "if (window.scrollY > 300) return;",
        "if (Math.abs(e.deltaY) < Math.abs(e.deltaX)) return;",
        "if (scrollTimeout.current) {",
        "clearTimeout(scrollTimeout.current);",
        "}",
        "if (scrollStartY.current === 0) {",
        "scrollStartY.current = window.scrollY;",
        "}",
        "const scrollThreshold = 100;",
        "const currentScroll = window.scrollY;",
        "const scrollDiff = currentScroll - scrollStartY.current;",
        "if (Math.abs(scrollDiff) >= scrollThreshold) {",
        "scrollToSection(\"features\", 280, false);",
        "scrollStartY.current = 0;",
        "} else {",
        "scrollTimeout.current = setTimeout(() => {",
        "scrollStartY.current = 0;",
        "}, 300);",
        "}",
        "};",
        "window.addEventListener(\"wheel\", handleScroll, { passive: false });",
        "return () => {",
        "window.removeEventListener(\"wheel\", handleScroll);",
        "if (scrollTimeout.current) {",
        "clearTimeout(scrollTimeout.current);",
        "}",
        "};",
        "}, [isHomePage, scrollToSection]);",
        "return { isHomePage, activeSection, scrollToSection };",
        "}",
        "TYPE 2",
        "Smooth scroll function",
        "Handle scroll target from navigation",
        "useEffect(() => {",
        "if (!isHomePage) return;",
        "const sections = gsap.utils.toArray<HTMLElement>(\"[data-section]\");",
        "sections.forEach((section) => {",
        "ScrollTrigger.create({",
        "trigger: section,",
        "start: \"top center\",",
        "end: \"bottom center\",",
        "onEnter: () => setActiveSection(section.id),",
        "onEnterBack: () => setActiveSection(section.id),",
        "});",
        "});",
        "// Handle home section (when scrolled to top)",
        "ScrollTrigger.create({",
        "trigger: \"body\",",
        "start: \"top top\",",
        "end: \"max\",",
        "onUpdate: (self) => {",
        "if (self.scroll() === 0) setActiveSection(\"home\");",
        "},",
        "});",
        "return () => {",
        "ScrollTrigger.getAll().forEach((trigger) => trigger.kill());",
        "};",
        "}, [isHomePage]);",
        "Section detection setup",
        "Home section detection"
    ],
    "docstrings": [],
    "functions": [
        "useSmoothScroll"
    ],
    "classes": []
}