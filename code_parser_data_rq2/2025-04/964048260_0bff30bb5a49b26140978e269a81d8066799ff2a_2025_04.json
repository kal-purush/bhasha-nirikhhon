{
    "identifiers": [
        "Domain",
        "Tests",
        "TestClass",
        "TestMethod",
        "contractor",
        "Contractor",
        "Assert",
        "IsNotNull",
        "contractor",
        "TestMethod",
        "ExpectedException",
        "ArgumentException",
        "contractor",
        "Contractor",
        "TestMethod",
        "ExpectedException",
        "ArgumentException",
        "contractor",
        "Contractor",
        "TestMethod",
        "contractor",
        "Contractor",
        "Assert",
        "AreEqual",
        "contractor",
        "Name",
        "TestMethod",
        "ExpectedException",
        "ArgumentException",
        "contractor",
        "Contractor",
        "TestMethod",
        "contractor",
        "Contractor",
        "Assert",
        "AreEqual",
        "contractor",
        "Age",
        "TestMethod",
        "ExpectedException",
        "ArgumentException",
        "contractor",
        "Contractor",
        "TestMethod",
        "contractor",
        "Contractor",
        "Assert",
        "AreEqual",
        "contractor",
        "BaseSalary",
        "TestMethod",
        "ExpectedException",
        "ArgumentException",
        "contractor",
        "Contractor",
        "TestMethod",
        "contractor",
        "Contractor",
        "Assert",
        "AreEqual",
        "contractor",
        "HourlyRate",
        "TestMethod",
        "contractor",
        "Contractor",
        "Assert",
        "AreEqual",
        "contractor",
        "WorkedHours",
        "TestMethod",
        "Contractor",
        "contractor",
        "CalculateSalary",
        "Assert",
        "AreEqual",
        "result"
    ],
    "literals": [
        "\"Hilary\"",
        "\"\"",
        "\"Sophia\"",
        "\"Sophia\"",
        "\"Sophie\"",
        "\"Sophie\"",
        "\"Sophie\"",
        "\"Sophie\"",
        "\"Sophie\"",
        "\"Sophie\"",
        "\"Sophie\"",
        "\"Sophie\""
    ],
    "variables": [
        "Contractor",
        "contractor",
        "Contractor",
        "contractor",
        "Contractor",
        "contractor",
        "Contractor",
        "contractor",
        "Contractor",
        "contractor",
        "Contractor",
        "contractor",
        "Contractor",
        "contractor",
        "Contractor",
        "contractor",
        "Contractor",
        "contractor",
        "Contractor",
        "contractor",
        "Contractor",
        "contractor",
        "Contractor",
        "contractor",
        "result"
    ],
    "comments": [
        "arrange",
        "act",
        "assert",
        "arrange",
        "act",
        "arrange",
        "act",
        "arrange",
        "act",
        "assert",
        "arrange",
        "act",
        "arrange",
        "act",
        "assert",
        "arrange",
        "act",
        "arrange",
        "act",
        "assert",
        "arrange",
        "act",
        "arrange",
        "act",
        "assert",
        "arrange",
        "act",
        "assert",
        "arrange",
        "act",
        "assert"
    ],
    "docstrings": [],
    "functions": [
        "NewContractor_WhenConstructorIsNotNull_ThenContractorIsCreated",
        "NewContractor_WhenNameIsNull_ThenThrowException",
        "NewContractor_WhenNameIsEmpty_ThenThrowException",
        "NewContractor_WhenNameIsNotNullOrEmpty_ThenNameShouldBeAssigned",
        "NewContractor_WhenAgeIsBelowEighteen_ThenThrowException",
        "NewContractor_WhenAgeIsAboveEighteen_ThenAgeShouldBeAssigned",
        "NewContractor_WhenBaseSalaryIsCeroOrNegative_ThenThrowException",
        "NewContractor_WhenBaseSalaryIsAboveCero_ThenBaseSalaryShouldBeAssigned",
        "NewContractor_WhenHourlyRateIsCeroOrBelow_ThenThrowException",
        "NewContractor_WhenHourlyRateIsAboveCero_ThenHourlyRateShouldBeAssigned",
        "NewContractor_WhenWorkedHoursAreGiven_ThenWorkedHoursShouldBeAssigned",
        "Contractor_WhenInvokeCalculateSalary_ThenReturnSuccessfully"
    ],
    "classes": [
        "ContractorTests"
    ]
}