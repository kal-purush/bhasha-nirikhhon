{
    "identifiers": [
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "a",
        "b",
        "c",
        "d",
        "e",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "inf",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "a",
        "b",
        "c",
        "e",
        "f",
        "b",
        "c",
        "a",
        "b",
        "c",
        "f",
        "inf",
        "c",
        "d",
        "e",
        "f",
        "a",
        "b",
        "f",
        "a",
        "f",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "den_zero_found",
        "den_negative_found",
        "big",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "den",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "structural_condtitions_satisfied",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "big_local",
        "den_local",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "big_local",
        "den_local",
        "big_local",
        "den_local",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "check_den_zero_or_negative",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "den_zero_found",
        "den_negative_found",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "big",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "den",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "den",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "diff",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "res",
        "den",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "diff",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "den_local",
        "diff_local",
        "ineq_local",
        "structural_condtitions_satisfied",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "den_local",
        "diff_local",
        "den_local",
        "diff_local",
        "den_local",
        "res",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "m",
        "inf",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "check_candidate",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "inf",
        "x",
        "res",
        "x",
        "m",
        "max_m",
        "m",
        "x",
        "res",
        "x",
        "m_list",
        "m",
        "x",
        "len",
        "res",
        "m_list",
        "x",
        "res",
        "x",
        "a",
        "res_models",
        "x",
        "alpha",
        "x",
        "e",
        "a",
        "e",
        "alpha",
        "alpha_low",
        "alpha_high",
        "res_models",
        "x",
        "alpha",
        "x",
        "res_models",
        "x",
        "x",
        "x",
        "f",
        "beta",
        "f",
        "a",
        "beta",
        "res_models_two",
        "x",
        "beta",
        "e",
        "a",
        "beta",
        "res_models_two",
        "x",
        "beta",
        "e",
        "f",
        "beta",
        "res_models_two",
        "x",
        "beta",
        "res_models_two",
        "x",
        "beta",
        "beta",
        "res_models_two",
        "x",
        "beta",
        "res_models_two",
        "x",
        "beta",
        "y",
        "res_models_two",
        "y",
        "y",
        "y",
        "y",
        "y",
        "y",
        "y",
        "y",
        "y",
        "y",
        "len",
        "res_models_two",
        "open",
        "f",
        "f",
        "write",
        "y",
        "res_models_two",
        "f",
        "write",
        "y",
        "y",
        "y",
        "y",
        "y",
        "y",
        "y",
        "y",
        "y",
        "y",
        "f",
        "write"
    ],
    "literals": [
        "\"Found config with denominator zero.\"",
        "\"Found config with negative denominator\"",
        "\"Solutions found:\"",
        "\"Distribution of m:\"",
        "\"parameters = (\"",
        "\",\"",
        "\")\"",
        "\"Problems found:\"",
        "'model-parameters-infty.m2'",
        "'w'",
        "\"parameters = (\\n\"",
        "\",\\n\"",
        "\")\\n\""
    ],
    "variables": [
        "den_zero_found",
        "den_negative_found",
        "big_local",
        "den_local",
        "den_zero_found",
        "den_negative_found",
        "res",
        "den_local",
        "diff_local",
        "ineq_local",
        "m",
        "max_m",
        "m",
        "max_m",
        "m_list",
        "m",
        "res_models",
        "a",
        "alpha",
        "e",
        "alpha_low",
        "alpha_high",
        "res_models_two",
        "a",
        "e",
        "f",
        "beta"
    ],
    "comments": [
        "a = free points",
        "b = third collinear points",
        "c = fourth collinear points",
        "d = free lines",
        "e = lines incident to one point",
        "f = lines incident to two points",
        "m = number of cameras",
        "inf = whether we know (1) the point at infinity or not (0)",
        "initial equation is big = m*den, where big and den contain no m.",
        "then write m = big/den = 1 + diff/den, with diff = big-den",
        "divisibility condition: diff % den == 0.",
        "in particular, den <= diff.",
        "structural conditions are conditions that must be satisfied for the",
        "tuple (a, b, ..., inf) to make geometric sense. we derived the list of",
        "structural conditions by inspecting all solutions found by the",
        "program until we encountered one that doesn't make geometric sense, at",
        "which point we added a new structural condition to exclude that",
        "solution. We repeated this process until all solutions made sense.",
        "If we have no free points, then there cannot be any other points",
        "or lines incident to points.",
        "No 3rd collinear points implies no 4th collinear points.",
        "If we have only one free point, then we cannot have any other",
        "point, or lines incident to two points.",
        "The existence of third collinear points or of any lines means that",
        "we know the point at infinity.",
        "There has to be room for 'f' lines. Here only coded for a = 2",
        "since that's the only case that appears.",
        "Exclude empty configuration, even if point at infinity is known.",
        "It's balanced if m = 1, but consider it trivial.",
        "have to check first that den cannot be zero or negative. if so, then",
        "necess. that condition also holds for big. exclude those cases.",
        "integer inequality: we have 0 >= ineq, i.e. den - diff <= 0.",
        "build list of balanced problems by checking each tuple for the integer",
        "equality. The above inequality ineq ensures that the number of tuples",
        "to check is finite.",
        "// is integer division in python3.",
        "collect statistics on the distribution of the m.",
        "calculate maximum m occurring",
        "list distribution of the m",
        "now we need to split up the combinatorially ambiguous tuples into",
        "combinatorially unambiguous ones. Since there are only 3, we could do",
        "it by hand. but we use instead a semi-automated system.",
        "represent the additional combinatorial datum gamma (the max number",
        "of lines adjacent to a point) as alpha + beta, according to which",
        "lines are 'E' lines (alpha) and which are 'F' lines (beta).",
        "alpha = maximal number of 'E' lines adjacent to a point.",
        "ceiling of e/a.",
        "beta = number of 'F' lines adjacent to the first 'A' point",
        "in the found solutions, f ranges from 1 to 2.",
        "if f = 2 then one line will go through A_0 A_2.",
        "if a = 2 then one line will go through A_0 A_1.",
        "if e = 0, then the 'A' points are not distinguished.",
        "in that case, if a = 3 then we can pick any point to be A_0.",
        "same goes if e = 0 and f = 1.",
        "now an A_0 is distinguished and there are multiple choices",
        "to put the remaining line.",
        "last, if f == 0 then there's no lines to put.",
        "print found solutions in Macaulay2 format, summing alpha and beta",
        "for the simpler combinatorial parameter gamma.",
        "now do the same, but print to a file the final answer to use later."
    ],
    "docstrings": [],
    "functions": [
        "big",
        "den",
        "structural_condtitions_satisfied",
        "check_den_zero_or_negative",
        "diff",
        "ineq",
        "check_candidate"
    ],
    "classes": []
}