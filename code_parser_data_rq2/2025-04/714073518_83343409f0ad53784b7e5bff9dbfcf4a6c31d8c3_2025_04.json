{
    "identifiers": [
        "typing",
        "Optional",
        "Union",
        "torch",
        "torch",
        "Tensor",
        "torchao",
        "quantization",
        "quant_primitives",
        "_DTYPE_TO_BIT_WIDTH",
        "_DTYPE_TO_QVALUE_BOUNDS",
        "MappingType",
        "ZeroPointDomain",
        "choose_qparams_affine",
        "dequantize_affine",
        "quantize_affine",
        "quantizer",
        "Quantizer",
        "v",
        "k",
        "k",
        "v",
        "_DTYPE_TO_BIT_WIDTH",
        "items",
        "Quantizer",
        "mapping_type",
        "MappingType",
        "MappingType",
        "SYMMETRIC",
        "target_dtype",
        "torch",
        "dtype",
        "torch",
        "int8",
        "quant_min",
        "Optional",
        "Union",
        "quant_max",
        "Optional",
        "Union",
        "eps",
        "Optional",
        "preserve_zero",
        "zero_point_domain",
        "ZeroPointDomain",
        "ZeroPointDomain",
        "INT",
        "center",
        "mapping_type",
        "target_dtype",
        "quant_min",
        "quant_max",
        "eps",
        "preserve_zero",
        "zero_point_domain",
        "b",
        "quant_min",
        "quant_max",
        "b",
        "_BIT_WIDTH_TO_DTYPE",
        "b",
        "quant_min",
        "quant_max",
        "_DTYPE_TO_QVALUE_BOUNDS",
        "_BIT_WIDTH_TO_DTYPE",
        "b",
        "b",
        "_init_quant_min_max",
        "b",
        "quant_max",
        "quant_min",
        "p",
        "Tensor",
        "b",
        "dim",
        "Optional",
        "Tensor",
        "Tensor",
        "_init_quant_min_max",
        "b",
        "eps",
        "torch",
        "finfo",
        "p",
        "dtype",
        "eps",
        "p",
        "size",
        "dim",
        "p",
        "size",
        "choose_qparams_affine",
        "p",
        "mapping_type",
        "block_size",
        "target_dtype",
        "eps",
        "eps",
        "preserve_zero",
        "preserve_zero",
        "quant_min",
        "quant_min",
        "quant_max",
        "quant_max",
        "zero_point_domain",
        "zero_point_domain",
        "block_size",
        "s",
        "zero_point",
        "target_dtype",
        "quantize_affine",
        "p",
        "q_args",
        "quant_min",
        "quant_min",
        "quant_max",
        "quant_max",
        "zero_point_domain",
        "zero_point_domain",
        "dequantize_affine",
        "q",
        "q_args",
        "output_dtype",
        "p",
        "dtype",
        "quant_min",
        "quant_min",
        "quant_max",
        "quant_max",
        "zero_point_domain",
        "zero_point_domain",
        "torch",
        "arange",
        "quant_min",
        "quant_max",
        "dtype",
        "target_dtype",
        "device",
        "p",
        "device",
        "dim",
        "Q",
        "view",
        "expand",
        "q",
        "size",
        "Q",
        "size",
        "Q",
        "shape",
        "dequantize_affine",
        "Q",
        "block_size",
        "q_args",
        "output_dtype",
        "p",
        "dtype",
        "quant_min",
        "quant_min",
        "quant_max",
        "quant_max",
        "zero_point_domain",
        "zero_point_domain",
        "q",
        "Q",
        "UnifTorchaoQuantizer",
        "mapping_type",
        "MappingType",
        "ASYMMETRIC",
        "target_dtype",
        "torch",
        "int32",
        "quant_min",
        "quant_max",
        "eps",
        "preserve_zero",
        "zero_point_domain",
        "ZeroPointDomain",
        "FLOAT"
    ],
    "literals": [
        "f\"Unsupported bitwidth {b}\""
    ],
    "variables": [
        "_BIT_WIDTH_TO_DTYPE",
        "mapping_type",
        "target_dtype",
        "quant_min",
        "quant_max",
        "eps",
        "preserve_zero",
        "zero_point_domain",
        "eps",
        "block_size",
        "s",
        "zero_point",
        "q_args",
        "q",
        "q",
        "Q",
        "Q",
        "block_size",
        "block_size",
        "Q"
    ],
    "comments": [
        "Copyright (c) Meta Platforms, Inc. and affiliates.",
        "All rights reserved.",
        "",
        "This source code is licensed under the BSD 3-Clause license found in the",
        "LICENSE file in the root directory of this source tree.",
        "assume that p has already been grouped in QuantOptimizer.step"
    ],
    "docstrings": [
        "\"\"\"Uniform quantizer that uses torchao's quantization primitives\"\"\"",
        "\"\"\"Based on torchao.quantization.quant_api._int4_weight_only_transform\"\"\""
    ],
    "functions": [
        "_init_quant_min_max",
        "get_quant_size",
        "quantize"
    ],
    "classes": [
        "UnifTorchaoQuantizer",
        "Int4UnifTorchaoQuantizer"
    ]
}