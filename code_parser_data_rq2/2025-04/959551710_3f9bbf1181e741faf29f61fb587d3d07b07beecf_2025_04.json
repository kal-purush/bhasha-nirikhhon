{
    "identifiers": [
        "transformers",
        "configuration_utils",
        "PretrainedConfig",
        "transformers",
        "utils",
        "logging",
        "logging",
        "get_logger",
        "PretrainedConfig",
        "vocab_size",
        "hidden_size",
        "intermediate_size",
        "num_hidden_layers",
        "num_attention_heads",
        "num_key_value_heads",
        "hidden_act",
        "max_position_embeddings",
        "initializer_range",
        "rms_norm_eps",
        "use_cache",
        "tie_word_embeddings",
        "rope_theta",
        "use_sliding_window",
        "sliding_window",
        "max_window_layers",
        "attention_dropout",
        "decoder_sparse_step",
        "moe_intermediate_size",
        "shared_expert_intermediate_size",
        "num_experts_per_tok",
        "num_experts",
        "norm_topk_prob",
        "output_router_logits",
        "router_aux_loss_coef",
        "mlp_only_layers",
        "kwargs",
        "vocab_size",
        "max_position_embeddings",
        "hidden_size",
        "intermediate_size",
        "num_hidden_layers",
        "num_attention_heads",
        "use_sliding_window",
        "sliding_window",
        "use_sliding_window",
        "max_window_layers",
        "num_key_value_heads",
        "hidden_act",
        "initializer_range",
        "rms_norm_eps",
        "use_cache",
        "rope_theta",
        "attention_dropout",
        "decoder_sparse_step",
        "moe_intermediate_size",
        "shared_expert_intermediate_size",
        "num_experts_per_tok",
        "num_experts",
        "norm_topk_prob",
        "output_router_logits",
        "router_aux_loss_coef",
        "mlp_only_layers",
        "mlp_only_layers",
        "tie_word_embeddings",
        "tie_word_embeddings",
        "kwargs"
    ],
    "literals": [
        "r\"\"\"\n    This is the configuration class to store the configuration of a [`Qwen2MoeModel`]. It is used to instantiate a\n    Qwen2MoE model according to the specified arguments, defining the model architecture. Instantiating a configuration\n    with the defaults will yield a similar configuration to that of\n    Qwen1.5-MoE-A2.7B\" [Qwen/Qwen1.5-MoE-A2.7B\"](https://huggingface.co/Qwen/Qwen1.5-MoE-A2.7B\").\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 151936):\n            Vocabulary size of the Qwen2MoE model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`Qwen2MoeModel`]\n        hidden_size (`int`, *optional*, defaults to 2048):\n            Dimension of the hidden representations.\n        intermediate_size (`int`, *optional*, defaults to 5632):\n            Dimension of the MLP representations.\n        num_hidden_layers (`int`, *optional*, defaults to 24):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 16):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        num_key_value_heads (`int`, *optional*, defaults to 16):\n            This is the number of key_value heads that should be used to implement Grouped Query Attention. If\n            `num_key_value_heads=num_attention_heads`, the model will use Multi Head Attention (MHA), if\n            `num_key_value_heads=1` the model will use Multi Query Attention (MQA) otherwise GQA is used. When\n            converting a multi-head checkpoint to a GQA checkpoint, each group key and value head should be constructed\n            by meanpooling all the original heads within that group. For more details checkout [this\n            paper](https://arxiv.org/pdf/2305.13245.pdf). If it is not specified, will default to `32`.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"silu\"`):\n            The non-linear activation function (function or string) in the decoder.\n        max_position_embeddings (`int`, *optional*, defaults to 32768):\n            The maximum sequence length that this model might ever be used with.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        rms_norm_eps (`float`, *optional*, defaults to 1e-06):\n            The epsilon used by the rms normalization layers.\n        use_cache (`bool`, *optional*, defaults to `True`):\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        tie_word_embeddings (`bool`, *optional*, defaults to `False`):\n            Whether the model's input and output word embeddings should be tied.\n        rope_theta (`float`, *optional*, defaults to 10000.0):\n            The base period of the RoPE embeddings.\n        use_sliding_window (`bool`, *optional*, defaults to `False`):\n            Whether to use sliding window attention.\n        sliding_window (`int`, *optional*, defaults to 4096):\n            Sliding window attention (SWA) window size. If not specified, will default to `4096`.\n        max_window_layers (`int`, *optional*, defaults to 28):\n            The number of layers that use SWA (Sliding Window Attention). The bottom layers use SWA while the top use full attention.\n        attention_dropout (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        decoder_sparse_step (`int`, *optional*, defaults to 1):\n            The frequency of the MoE layer.\n        moe_intermediate_size (`int`, *optional*, defaults to 1408):\n            Intermediate size of the routed expert.\n        shared_expert_intermediate_size (`int`, *optional*, defaults to 5632):\n            Intermediate size of the shared expert.\n        num_experts_per_tok (`int`, *optional*, defaults to 4):\n            Number of selected experts.\n        num_experts (`int`, *optional*, defaults to 60):\n            Number of routed experts.\n        norm_topk_prob (`bool`, *optional*, defaults to `False`):\n            Whether to normalize the topk probabilities.\n        output_router_logits (`bool`, *optional*, defaults to `False`):\n            Whether or not the router logits should be returned by the model. Enabeling this will also\n            allow the model to output the auxiliary loss, including load balancing loss and router z-loss.\n        router_aux_loss_coef (`float`, *optional*, defaults to 0.001):\n            The aux loss factor for the total loss.\n        mlp_only_layers (`List[int]`, *optional*, defaults to `[]`):\n            Indicate which layers use Qwen2MoeMLP rather than Qwen2MoeSparseMoeBlock\n            The list contains layer index, from 0 to num_layers-1 if we have num_layers layers\n            If `mlp_only_layers` is empty, `decoder_sparse_step` is used to determine the sparsity.\n\n    ```python\n    >>> from transformers import Qwen2MoeModel, Qwen2MoeConfig\n\n    >>> # Initializing a Qwen2MoE style configuration\n    >>> configuration = Qwen2MoeConfig()\n\n    >>> # Initializing a model from the Qwen1.5-MoE-A2.7B\" style configuration\n    >>> model = Qwen2MoeModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"",
        "\"qwen2_moe\"",
        "\"past_key_values\"",
        "\"silu\""
    ],
    "variables": [
        "logger",
        "model_type",
        "keys_to_ignore_at_inference",
        "vocab_size",
        "max_position_embeddings",
        "hidden_size",
        "intermediate_size",
        "num_hidden_layers",
        "num_attention_heads",
        "use_sliding_window",
        "sliding_window",
        "max_window_layers",
        "num_key_value_heads",
        "hidden_act",
        "initializer_range",
        "rms_norm_eps",
        "use_cache",
        "rope_theta",
        "attention_dropout",
        "decoder_sparse_step",
        "moe_intermediate_size",
        "shared_expert_intermediate_size",
        "num_experts_per_tok",
        "num_experts",
        "norm_topk_prob",
        "output_router_logits",
        "router_aux_loss_coef",
        "mlp_only_layers"
    ],
    "comments": [
        "coding=utf-8",
        "Copyright 2024 The Qwen team, Alibaba Group and the HuggingFace Inc. team. All rights reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "MoE arguments"
    ],
    "docstrings": [
        "\"\"\"Qwen2MoE model configuration\"\"\""
    ],
    "functions": [],
    "classes": [
        "Qwen2MoeConfig"
    ]
}