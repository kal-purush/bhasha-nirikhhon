{
    "identifiers": [],
    "literals": [
        "string",
        "''"
    ],
    "variables": [],
    "comments": [
        "Matches any non-empty string.\n\nThis is useful when you need a string that is not empty, for example, as a function parameter.\n\nNOTE:\n- This returns `never` not just when instantiated with an empty string, but also when an empty string is a subtype of the instantiated type, like `string` or `Uppercase<string>`.\n\n@example\n```\nimport type {NonEmptyString} from 'type-fest';\n\ndeclare function foo<T extends string>(string: NonEmptyString<T>): void;\n\nfoo('a');\n//=> OK\n\nfoo('');\n//=> Error: Argument of type '\"\"' is not assignable to parameter of type 'never'.\n\ndeclare const someString: string\nfoo(someString);\n//=> Error: Argument of type 'string' is not assignable to parameter of type 'never'.\n```\n\n@category String"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}