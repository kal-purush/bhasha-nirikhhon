{
    "identifiers": [
        "logging",
        "time",
        "pydragonfly",
        "Dragonfly",
        "DragonflyException",
        "TParams",
        "api_app",
        "analyzers_manager",
        "classes",
        "FileAnalyzer",
        "api_app",
        "exceptions",
        "AnalyzerRunException",
        "tests",
        "mock_utils",
        "if_mock_connections",
        "patch",
        "MockResponse",
        "logging",
        "getLogger",
        "FileAnalyzer",
        "get",
        "get",
        "os",
        "os",
        "get",
        "get",
        "get",
        "_secrets",
        "_secrets",
        "Dragonfly",
        "api_key",
        "api_key",
        "api_url",
        "df",
        "api_url",
        "logger",
        "info",
        "repr",
        "__upload",
        "logger",
        "info",
        "repr",
        "analysis_id",
        "__poll_status",
        "analysis_id",
        "logger",
        "info",
        "repr",
        "analysis_id",
        "__fetch_and_build_result",
        "analysis_id",
        "result",
        "DragonflyException",
        "exc",
        "AnalyzerRunException",
        "exc",
        "df",
        "Analysis",
        "create",
        "data",
        "df",
        "Analysis",
        "CreateAnalysisRequestBody",
        "analysis_options",
        "sample_name",
        "filename",
        "sample_buffer",
        "read_file_bytes",
        "response",
        "data",
        "analysis_id",
        "chance",
        "max_tries",
        "time",
        "sleep",
        "poll_distance",
        "logger",
        "info",
        "__repr__",
        "chance",
        "df",
        "Analysis",
        "retrieve",
        "object_id",
        "analysis_id",
        "TParams",
        "fields",
        "response",
        "data",
        "get",
        "logger",
        "info",
        "__repr__",
        "chance",
        "status",
        "status",
        "analysis_id",
        "df",
        "Analysis",
        "retrieve",
        "object_id",
        "analysis_id",
        "TParams",
        "fields",
        "expand",
        "response",
        "data",
        "copy",
        "idx",
        "len",
        "analysis",
        "analysis",
        "idx",
        "df",
        "Report",
        "matched_rules",
        "object_id",
        "report_id",
        "analysis",
        "idx",
        "field",
        "rule",
        "field",
        "field",
        "rule",
        "_resp",
        "data",
        "analysis",
        "classmethod",
        "cls",
        "if_mock_connections",
        "patch",
        "side_effect",
        "MockResponse",
        "MockResponse",
        "MockResponse",
        "MockResponse",
        "_monkeypatch",
        "patches",
        "patches"
    ],
    "literals": [
        "\"operating_system\"",
        "\"profiles\"",
        "\"profiles\"",
        "\"os\"",
        "\"WINDOWS\"",
        "\"LINUX\"",
        "\"root\"",
        "\"root\"",
        "\"allow_actions\"",
        "\"allow_actions\"",
        "\"private\"",
        "\"private\"",
        "\"api_key_name\"",
        "\"url_key_name\"",
        "f\"({repr(self)}) -> uploading file...\"",
        "f\"({repr(self)}) -> analysis_id: #{analysis_id} -> starting polling...\"",
        "f\"({repr(self)}) -> analysis_id: #{analysis_id} -> fetching report...\"",
        "\"id\"",
        "f\"({self.__repr__()}) -> POLLING: try#{chance + 1}.\"",
        "f\"...starting the query...\"",
        "\"id\"",
        "\"status\"",
        "\"status\"",
        "f\"({self.__repr__()}) -> POLLING: try#{chance + 1}.\"",
        "f\"...status: '{status}'\"",
        "\"FAILED\"",
        "\"ANALYZED\"",
        "\"REVOKED\"",
        "\"id\"",
        "\"created_at\"",
        "\"evaluation\"",
        "\"status\"",
        "\"weight\"",
        "\"malware_families\"",
        "\"malware_behaviours\"",
        "\"api_url\"",
        "\"gui_url\"",
        "\"sample\"",
        "\"reports.id\"",
        "\"reports.weight\"",
        "\"reports.status\"",
        "\"reports.evaluation\"",
        "\"reports.error\"",
        "\"reports.profile\"",
        "\"reports\"",
        "\"reports.profile\"",
        "\"reports\"",
        "\"reports\"",
        "\"id\"",
        "\"reports\"",
        "\"matched_rules\"",
        "\"id\"",
        "\"rule\"",
        "\"weight\"",
        "\"matches\"",
        "\"requests.Session.request\"",
        "\"id\"",
        "\"id\"",
        "\"status\"",
        "\"ANALYZED\"",
        "\"id\"",
        "\"status\"",
        "\"ANALYZED\"",
        "\"reports\"",
        "\"id\"",
        "\"id\"",
        "\"rule\"",
        "\"testrule\"",
        "\"weight\"",
        "\"matches\""
    ],
    "variables": [
        "logger",
        "max_tries",
        "poll_distance",
        "os",
        "analysis_options",
        "api_key",
        "api_url",
        "df",
        "_server_url",
        "analysis_id",
        "result",
        "response",
        "response",
        "status",
        "response",
        "analysis",
        "report_id",
        "_resp",
        "patches"
    ],
    "comments": [
        "max no. of tries when polling for result",
        "max 5 minutes waiting",
        "build analysis options",
        "get secrets",
        "init Dragonfly client instance",
        "1. upload sample for analysis",
        "2. wait for analysis to finish",
        "3. fetch and build full report",
        "fetch analysis object",
        "fetch matched_rules for corresponding report objects",
        "fetch matched_rules",
        "filter out the fields we need",
        "__upload",
        "__poll_status",
        "__fetch_and_build_result",
        "__fetch_and_build_result"
    ],
    "docstrings": [
        "\"\"\"\n        Submit sample for analysis and return analysis_id\n        \"\"\"",
        "\"\"\"\n        Poll for analysis status until it finishes.\n        \"\"\"",
        "\"\"\"\n        Retrieve analysis and corresponding report objects\n        \"\"\""
    ],
    "functions": [
        "set_params",
        "run",
        "__upload",
        "__poll_status",
        "__fetch_and_build_result",
        "_monkeypatch"
    ],
    "classes": [
        "DragonflyEmulation"
    ]
}