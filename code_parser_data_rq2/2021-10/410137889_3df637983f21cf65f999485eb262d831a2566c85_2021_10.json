{
    "identifiers": [
        "com",
        "pi4j",
        "example",
        "com",
        "pi4j",
        "Pi4J",
        "com",
        "pi4j",
        "io",
        "gpio",
        "digital",
        "DigitalInput",
        "com",
        "pi4j",
        "io",
        "gpio",
        "digital",
        "DigitalOutput",
        "com",
        "pi4j",
        "io",
        "gpio",
        "digital",
        "DigitalState",
        "com",
        "pi4j",
        "io",
        "gpio",
        "digital",
        "PullResistance",
        "com",
        "pi4j",
        "util",
        "PIN_BUTTON",
        "PIN_LED",
        "pressCount",
        "args",
        "title",
        "pi4j",
        "Pi4J",
        "newAutoContext",
        "PrintInfo",
        "printLoadedPlatforms",
        "pi4j",
        "PrintInfo",
        "printDefaultPlatform",
        "pi4j",
        "PrintInfo",
        "printProviders",
        "pi4j",
        "ledConfig",
        "DigitalOutput",
        "newConfigBuilder",
        "pi4j",
        "id",
        "name",
        "address",
        "PIN_LED",
        "shutdown",
        "DigitalState",
        "LOW",
        "initial",
        "DigitalState",
        "LOW",
        "provider",
        "led",
        "pi4j",
        "create",
        "ledConfig",
        "buttonConfig",
        "DigitalInput",
        "newConfigBuilder",
        "pi4j",
        "id",
        "name",
        "address",
        "PIN_BUTTON",
        "pull",
        "PullResistance",
        "PULL_DOWN",
        "debounce",
        "provider",
        "button",
        "pi4j",
        "create",
        "buttonConfig",
        "button",
        "addListener",
        "e",
        "e",
        "state",
        "DigitalState",
        "LOW",
        "pressCount",
        "pressCount",
        "PrintInfo",
        "printRegistry",
        "pi4j",
        "pressCount",
        "led",
        "equals",
        "DigitalState",
        "HIGH",
        "led",
        "low",
        "led",
        "high",
        "sleep",
        "pressCount",
        "pi4j",
        "shutdown"
    ],
    "literals": [
        "\"<-- The Pi4J Project -->\"",
        "\"Minimal Example project\"",
        "\"led\"",
        "\"LED Flasher\"",
        "\"pigpio-digital-output\"",
        "\"button\"",
        "\"Press button\"",
        "\"pigpio-digital-input\"",
        "\"Button was pressed for the \"",
        "\"th time\"",
        "\"LED low\"",
        "\"LED high\""
    ],
    "variables": [],
    "comments": [
        "PIN 18 = BCM 24",
        "PIN 15 = BCM 22",
        "Create Pi4J console wrapper/helper",
        "(This is a utility class to abstract some of the boilerplate stdin/stdout code)",
        "Print program title/header",
        "",
        "WELCOME TO Pi4J:",
        "",
        "Here we will use this getting started example to",
        "demonstrate the basic fundamentals of the Pi4J library.",
        "",
        "This example is to introduce you to the boilerplate",
        "logic and concepts required for all applications using",
        "the Pi4J library.  This example will do use some basic I/O.",
        "Check the pi4j-examples project to learn about all the I/O",
        "functions of Pi4J.",
        "",
        "------------------------------------------------------------",
        "Initialize the Pi4J Runtime Context",
        "------------------------------------------------------------",
        "Before you can use Pi4J you must initialize a new runtime",
        "context.",
        "",
        "The 'Pi4J' static class includes a few helper context",
        "creators for the most common use cases.  The 'newAutoContext()'",
        "method will automatically load all available Pi4J",
        "extensions found in the application's classpath which",
        "may include 'Platforms' and 'I/O Providers'",
        "------------------------------------------------------------",
        "Output Pi4J Context information",
        "------------------------------------------------------------",
        "The created Pi4J Context initializes platforms, providers",
        "and the I/O registry. To help you to better understand this",
        "approach, we print out the info of these. This can be removed",
        "from your own application.",
        "OPTIONAL",
        "Here we will create I/O interfaces for a (GPIO) digital output",
        "and input pin. Since no specific 'provider' is defined, Pi4J will",
        "use the default `DigitalOutputProvider` for the current default platform.",
        "OPTIONAL: print the registry",
        "------------------------------------------------------------",
        "Terminate the Pi4J library",
        "------------------------------------------------------------",
        "We we are all done and want to exit our application, we must",
        "call the 'shutdown()' function on the Pi4J static helper class.",
        "This will ensure that all I/O instances are properly shutdown,",
        "released by the the system and shutdown in the appropriate",
        "manner. Terminate will also ensure that any background",
        "threads/processes are cleanly shutdown and any used memory",
        "is returned to the system.",
        "Shutdown Pi4J"
    ],
    "docstrings": [
        "* #%L\n * **********************************************************************\n * ORGANIZATION  :  Pi4J\n * PROJECT       :  Pi4J :: EXAMPLE  :: Sample Code\n * FILENAME      :  MinimalExample.java\n *\n * This file is part of the Pi4J project. More information about\n * this project can be found here:  https://pi4j.com/\n * **********************************************************************\n * %%\n * Copyright (C) 2012 - 2021 Pi4J\n * %%\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * #L%",
        "* <p>This example fully describes the base usage of Pi4J by providing extensive comments in each step.</p>\n *\n * @author Frank Delporte (<a href=\"https://www.webtechie.be\">https://www.webtechie.be</a>)\n * @version $Id: $Id",
        "* This application blinks a led and counts the number the button is pressed. The blink speed increases with each\n     * button press, and after 5 presses the application finishes.\n     *\n     * @param args an array of {@link java.lang.String} objects.\n     * @throws java.lang.Exception if any.",
        "************************************************************",
        "************************************************************"
    ],
    "functions": [
        "main"
    ],
    "classes": [
        "MinimalExample"
    ]
}