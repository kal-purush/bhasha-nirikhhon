{
    "identifiers": [
        "Runtime",
        "CompilerServices",
        "Threading",
        "Tasks",
        "Threading",
        "REGEXGENERATOR",
        "RuntimeHelpers",
        "EnsureSufficientExecutionStack",
        "RuntimeHelpers",
        "TryEnsureSufficientExecutionStack",
        "TArg1",
        "Action",
        "TArg1",
        "action",
        "TArg1",
        "arg1",
        "Run",
        "action",
        "arg1",
        "ContinueWith",
        "t",
        "GetAwaiter",
        "GetResult",
        "CancellationToken",
        "TaskContinuationOptions",
        "ExecuteSynchronously",
        "TaskScheduler",
        "Default",
        "GetAwaiter",
        "GetResult",
        "TArg1",
        "TArg2",
        "TArg3",
        "Action",
        "TArg1",
        "TArg2",
        "TArg3",
        "action",
        "TArg1",
        "arg1",
        "TArg2",
        "arg2",
        "TArg3",
        "arg3",
        "Run",
        "action",
        "arg1",
        "arg2",
        "arg3",
        "ContinueWith",
        "t",
        "GetAwaiter",
        "GetResult",
        "CancellationToken",
        "TaskContinuationOptions",
        "ExecuteSynchronously",
        "TaskScheduler",
        "Default",
        "GetAwaiter",
        "GetResult",
        "TArg1",
        "TArg2",
        "TResult",
        "Func",
        "TArg1",
        "TArg2",
        "TResult",
        "func",
        "TArg1",
        "arg1",
        "TArg2",
        "arg2",
        "Run",
        "func",
        "arg1",
        "arg2",
        "ContinueWith",
        "t",
        "GetAwaiter",
        "GetResult",
        "CancellationToken",
        "TaskContinuationOptions",
        "ExecuteSynchronously",
        "TaskScheduler",
        "Default",
        "GetAwaiter",
        "GetResult",
        "TArg1",
        "TArg2",
        "TArg3",
        "TResult",
        "Func",
        "TArg1",
        "TArg2",
        "TArg3",
        "TResult",
        "func",
        "TArg1",
        "arg1",
        "TArg2",
        "arg2",
        "TArg3",
        "arg3",
        "Run",
        "func",
        "arg1",
        "arg2",
        "arg3",
        "ContinueWith",
        "t",
        "GetAwaiter",
        "GetResult",
        "CancellationToken",
        "TaskContinuationOptions",
        "ExecuteSynchronously",
        "TaskScheduler",
        "Default",
        "GetAwaiter",
        "GetResult"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "Licensed to the .NET Foundation under one or more agreements.",
        "The .NET Foundation licenses this file to you under the MIT license.",
        "Queues the supplied delegate to the thread pool, then block waiting for it to complete.",
        "It does so in a way that prevents task inlining (which would defeat the purpose) but that",
        "also plays nicely with the thread pool's sync-over-async aggressive thread injection policies.",
        "<typeparam name=\"TArg1\">The type of the first argument to pass to the function.</typeparam>",
        "<param name=\"action\">The action to invoke.</param>",
        "<param name=\"arg1\">The first argument to pass to the action.</param>",
        "<typeparam name=\"TArg1\">The type of the first argument to pass to the function.</typeparam>",
        "<typeparam name=\"TArg2\">The type of the second argument to pass to the function.</typeparam>",
        "<typeparam name=\"TArg3\">The type of the third argument to pass to the function.</typeparam>",
        "<param name=\"action\">The action to invoke.</param>",
        "<param name=\"arg1\">The first argument to pass to the action.</param>",
        "<param name=\"arg2\">The second argument to pass to the action.</param>",
        "<param name=\"arg3\">The second argument to pass to the action.</param>",
        "<typeparam name=\"TArg1\">The type of the first argument to pass to the function.</typeparam>",
        "<typeparam name=\"TArg2\">The type of the second argument to pass to the function.</typeparam>",
        "<typeparam name=\"TResult\">The return type of the function.</typeparam>",
        "<param name=\"func\">The function to invoke.</param>",
        "<param name=\"arg1\">The first argument to pass to the function.</param>",
        "<param name=\"arg2\">The second argument to pass to the function.</param>",
        "<typeparam name=\"TArg1\">The type of the first argument to pass to the function.</typeparam>",
        "<typeparam name=\"TArg2\">The type of the second argument to pass to the function.</typeparam>",
        "<typeparam name=\"TArg3\">The type of the third argument to pass to the function.</typeparam>",
        "<typeparam name=\"TResult\">The return type of the function.</typeparam>",
        "<param name=\"func\">The function to invoke.</param>",
        "<param name=\"arg1\">The first argument to pass to the function.</param>",
        "<param name=\"arg2\">The second argument to pass to the function.</param>",
        "<param name=\"arg3\">The third argument to pass to the function.</param>"
    ],
    "docstrings": [
        "<summary>Provides tools for avoiding stack overflows.</summary>",
        "<summary>Tries to ensure there is sufficient stack to execute the average .NET function.</summary>",
        "<summary>Calls the provided action on the stack of a different thread pool thread.</summary>",
        "<summary>Calls the provided action on the stack of a different thread pool thread.</summary>",
        "<summary>Calls the provided function on the stack of a different thread pool thread.</summary>",
        "<summary>Calls the provided function on the stack of a different thread pool thread.</summary>"
    ],
    "functions": [
        "TryEnsureSufficientExecutionStack",
        "CallOnEmptyStack",
        "CallOnEmptyStack",
        "TResult",
        "CallOnEmptyStack",
        "TResult",
        "CallOnEmptyStack"
    ],
    "classes": [
        "StackHelper"
    ]
}