{
    "identifiers": [
        "torch",
        "torchvision",
        "transforms",
        "transforms",
        "torch",
        "utils",
        "data",
        "DataLoader",
        "torch",
        "utils",
        "data",
        "dataset",
        "Dataset",
        "torchvision",
        "torchvision",
        "transforms",
        "transforms",
        "random",
        "tifffile",
        "TiffFile",
        "numpy",
        "np",
        "cv2",
        "tensorflow",
        "tf",
        "Dataset",
        "image_paths",
        "mask_paths",
        "train",
        "image_paths",
        "mask_paths",
        "transforms",
        "ToTensor",
        "idx",
        "torch",
        "is_tensor",
        "idx",
        "idx",
        "tolist",
        "TiffFile",
        "image_paths",
        "idx",
        "tif",
        "tif",
        "asarray",
        "img",
        "dtype",
        "np",
        "uint16",
        "img",
        "scale",
        "byte_im",
        "clip",
        "astype",
        "np",
        "uint8",
        "byte_im",
        "TiffFile",
        "mask_paths",
        "idx",
        "tif",
        "tif",
        "asarray",
        "transforms",
        "image",
        "torch",
        "tensor",
        "mask",
        "dtype",
        "torch",
        "image_paths",
        "idx",
        "t_image",
        "t_mask",
        "ID",
        "len",
        "image_paths",
        "Dataset",
        "image_paths",
        "train",
        "image_paths",
        "transforms",
        "ToTensor",
        "idx",
        "torch",
        "is_tensor",
        "idx",
        "idx",
        "tolist",
        "TiffFile",
        "image_paths",
        "idx",
        "tif",
        "tif",
        "asarray",
        "img",
        "dtype",
        "np",
        "uint16",
        "img",
        "scale",
        "byte_im",
        "clip",
        "astype",
        "np",
        "uint8",
        "byte_im",
        "transforms",
        "image",
        "image_paths",
        "idx",
        "t_image",
        "ID",
        "len",
        "image_paths",
        "Dataset",
        "image_paths",
        "mask_paths",
        "train",
        "image_paths",
        "mask_paths",
        "transforms",
        "ToTensor",
        "idx",
        "torch",
        "is_tensor",
        "idx",
        "idx",
        "tolist",
        "TiffFile",
        "image_paths",
        "idx",
        "tif",
        "tif",
        "asarray",
        "img",
        "dtype",
        "np",
        "uint16",
        "img",
        "scale",
        "byte_im",
        "clip",
        "astype",
        "np",
        "uint8",
        "byte_im",
        "TiffFile",
        "mask_paths",
        "idx",
        "tif",
        "tif",
        "asarray",
        "mask",
        "mask",
        "mask",
        "mask",
        "transforms",
        "image",
        "torch",
        "tensor",
        "mask",
        "dtype",
        "torch",
        "image_paths",
        "idx",
        "t_image",
        "t_mask",
        "ID",
        "len",
        "image_paths",
        "c",
        "np",
        "asarray",
        "color",
        "c",
        "color",
        "CLASSES_COLORPALETTE",
        "items",
        "np",
        "array",
        "np",
        "array",
        "np",
        "array",
        "image_path",
        "Path",
        "decode",
        "image_path",
        "image_path",
        "parent",
        "parent",
        "image_path",
        "name",
        "TiffFile",
        "image_path",
        "tifi",
        "TiffFile",
        "mask_path",
        "tifm",
        "tifi",
        "asarray",
        "tifm",
        "asarray",
        "mask",
        "image",
        "mask",
        "tf",
        "input_signature",
        "tf",
        "TensorSpec",
        "tf",
        "image_path",
        "tf",
        "numpy_function",
        "numpy_parse_image",
        "image_path",
        "tf",
        "uint16",
        "tf",
        "uint8",
        "image",
        "set_shape",
        "LandCoverData",
        "IMG_SIZE",
        "LandCoverData",
        "IMG_SIZE",
        "LandCoverData",
        "N_CHANNELS",
        "mask",
        "set_shape",
        "LandCoverData",
        "IMG_SIZE",
        "LandCoverData",
        "IMG_SIZE",
        "image",
        "mask",
        "tf",
        "input_image",
        "input_mask",
        "tf",
        "cast",
        "input_image",
        "tf",
        "float32",
        "LandCoverData",
        "TRAIN_PIXELS_MAX",
        "image",
        "input_mask",
        "tf",
        "input_image",
        "input_mask",
        "input_image",
        "input_mask",
        "tf",
        "random",
        "uniform",
        "tf",
        "image",
        "flip_left_right",
        "image",
        "tf",
        "image",
        "flip_left_right",
        "mask",
        "tf",
        "random",
        "uniform",
        "tf",
        "image",
        "flip_up_down",
        "image",
        "tf",
        "image",
        "flip_up_down",
        "mask",
        "tf",
        "random",
        "uniform",
        "tf",
        "image",
        "rot90",
        "image",
        "tf",
        "image",
        "rot90",
        "mask",
        "tf",
        "random",
        "uniform",
        "tf",
        "image",
        "rot90",
        "image",
        "k",
        "tf",
        "image",
        "rot90",
        "mask",
        "k",
        "normalize",
        "image",
        "mask",
        "image",
        "mask",
        "tf",
        "input_image",
        "input_mask",
        "normalize",
        "input_image",
        "input_mask",
        "image",
        "mask",
        "mon_image",
        "a",
        "a",
        "mon_image",
        "a",
        "cv2",
        "rotate",
        "mon_image",
        "cv2",
        "ROTATE_90_CLOCKWISE",
        "a",
        "cv2",
        "rotate",
        "mon_image",
        "cv2",
        "ROTATE_180",
        "a",
        "cv2",
        "rotate",
        "mon_image",
        "cv2",
        "ROTATE_90_COUNTERCLOCKWISE",
        "image",
        "mon_masque",
        "a",
        "a",
        "mon_masque",
        "a",
        "cv2",
        "rotate",
        "mon_masque",
        "cv2",
        "ROTATE_90_CLOCKWISE",
        "a",
        "cv2",
        "rotate",
        "mon_masque",
        "cv2",
        "ROTATE_180",
        "a",
        "cv2",
        "rotate",
        "mon_masque",
        "cv2",
        "ROTATE_90_COUNTERCLOCKWISE",
        "masques",
        "Dataset",
        "image_paths",
        "mask_paths",
        "train",
        "image_paths",
        "mask_paths",
        "transforms",
        "ToTensor",
        "train",
        "idx",
        "torch",
        "is_tensor",
        "idx",
        "idx",
        "tolist",
        "random",
        "randint",
        "train",
        "TiffFile",
        "image_paths",
        "idx",
        "tif",
        "tif",
        "asarray",
        "Data_augmentation_image",
        "imag",
        "a",
        "images",
        "dtype",
        "np",
        "uint16",
        "images",
        "scale",
        "byte_im",
        "clip",
        "astype",
        "np",
        "uint8",
        "byte_im",
        "TiffFile",
        "mask_paths",
        "idx",
        "tif",
        "tif",
        "asarray",
        "Data_augmentation_mask",
        "mask",
        "a",
        "transforms",
        "image",
        "torch",
        "tensor",
        "masks",
        "dtype",
        "torch",
        "image_paths",
        "idx",
        "t_image",
        "t_mask",
        "ID",
        "len",
        "image_paths"
    ],
    "literals": [
        "\"image\"",
        "\"masque\"",
        "\"id\"",
        "\"image\"",
        "\"id\"",
        "\"image\"",
        "\"masque\"",
        "\"id\"",
        "'no_data'",
        "'clouds'",
        "'artificial'",
        "'cultivated'",
        "'broadleaf'",
        "'coniferous'",
        "'herbaceous'",
        "'natural'",
        "'snow'",
        "'water'",
        "'masks'",
        "\"image\"",
        "\"masque\"",
        "\"id\""
    ],
    "variables": [
        "image_paths",
        "mask_paths",
        "transforms",
        "idx",
        "img",
        "scale",
        "byte_im",
        "byte_im",
        "image",
        "mask",
        "t_image",
        "t_mask",
        "ID",
        "image_paths",
        "transforms",
        "idx",
        "img",
        "scale",
        "byte_im",
        "byte_im",
        "image",
        "t_image",
        "ID",
        "image_paths",
        "mask_paths",
        "transforms",
        "idx",
        "img",
        "scale",
        "byte_im",
        "byte_im",
        "image",
        "mask",
        "mask",
        "mask",
        "t_image",
        "t_mask",
        "ID",
        "IMG_SIZE",
        "N_CHANNELS",
        "N_CLASSES",
        "CLASSES",
        "IGNORED_CLASSES_IDX",
        "TRAINSET_SIZE",
        "TESTSET_SIZE",
        "CLASSES_COLORPALETTE",
        "CLASSES_COLORPALETTE",
        "TRAIN_CLASS_COUNTS",
        "MEAN_CHANNEL",
        "STD_CHANNEL",
        "WEIGHT_CLASS",
        "WEIGHT_CLASS_TEST_CLOUDS_SNOW",
        "TRAIN_PIXELS_MIN",
        "TRAIN_PIXELS_MAX",
        "image_path",
        "mask_path",
        "image",
        "mask",
        "mask",
        "image",
        "mask",
        "image",
        "image",
        "mask",
        "image",
        "mask",
        "image",
        "mask",
        "image",
        "mask",
        "image",
        "mask",
        "image",
        "mask",
        "image",
        "mask",
        "image",
        "image",
        "image",
        "image",
        "masques",
        "masques",
        "masques",
        "masques",
        "image_paths",
        "mask_paths",
        "transforms",
        "train",
        "idx",
        "a",
        "a",
        "imag",
        "images",
        "scale",
        "byte_im",
        "byte_im",
        "image",
        "mask",
        "masks",
        "t_image",
        "t_mask",
        "ID"
    ],
    "comments": [
        "import tensorflow_io as tfio",
        "Classe Dataset",
        "initial logic happens like transform",
        "tmask = np.empty((0,65536))",
        "retourne un dictionnaire avec comme paramètre image, mask et ID image.",
        "rajouté",
        "return count of sample we have",
        "initial logic happens like transform",
        "retourne un dictionnaire avec comme paramètre image, mask et ID image.",
        "rajouté",
        "return count of sample we have",
        "initial logic happens like transform",
        "tmask = np.empty((0,65536))",
        "retourne un dictionnaire avec comme paramètre image, mask et ID image.",
        "rajouté",
        "return count of sample we have",
        "image size of the images and label masks",
        "the images are RGB+NIR (4 channels)",
        "we have 9 classes + a 'no_data' class for pixels with no labels (absent in the dataset)",
        "classes to ignore because they are not relevant. \"no_data\" refers to pixels without",
        "a proper class, but it is absent in the dataset; \"clouds\" class is not relevant, it",
        "is not a proper land cover type and images and masks do not exactly match in time.",
        "The training dataset contains 18491 images and masks",
        "The test dataset contains 5043 images and masks",
        "for visualization of the masks: classes indices and RGB colors",
        "statistics",
        "the pixel class counts in the training set",
        "the minimum and maximum value of image pixels in the training set",
        "get mask path from image path:",
        "image should be in a images/<image_id>.tif subfolder, while the mask is at masks/<image_id>.tif",
        "add channel dimension to mask: (256, 256, 1)",
        "Classe Dataset",
        "initial logic happens like transform",
        "tmask = np.empty((0,65536))",
        "retourne un dictionnaire avec comme paramètre image, mask et ID image.",
        "rajouté",
        "return count of sample we have"
    ],
    "docstrings": [
        "\"\"\"\nClasses and functions to handle data\n\"\"\"",
        "\"\"\"Class to represent the S2GLC Land Cover Dataset for the challenge,\n    with useful metadata and statistics.\n    \"\"\"",
        "\"\"\"Load an image and its segmentation mask as numpy arrays and returning a tuple\n    Args:\n        image_path (bytes): path to image\n    Returns:\n        (numpy.array[uint16], numpy.array[uint8]): the image and mask arrays\n    \"\"\"",
        "\"\"\"Wraps the parse_image function as a TF function\"\"\"",
        "\"\"\"Rescale the pixel values of the images between 0.0 and 1.0\"\"\"",
        "\"\"\"Apply optional augmentations and normalize a train image and its label mask.\"\"\"",
        "\"\"\"Normalize test image and its label mask.\"\"\""
    ],
    "functions": [
        "__getitem__",
        "__len__",
        "__getitem__",
        "__len__",
        "__getitem__",
        "__len__",
        "numpy_parse_image",
        "parse_image",
        "normalize",
        "load_image_train",
        "load_image_test",
        "Data_augmentation_image",
        "Data_augmentation_mask",
        "__getitem__",
        "__len__"
    ],
    "classes": [
        "CustomDataset",
        "CustomTestDataset",
        "CustomDatasetSnow",
        "LandCoverData",
        "CustomDatasetaugmentation"
    ]
}