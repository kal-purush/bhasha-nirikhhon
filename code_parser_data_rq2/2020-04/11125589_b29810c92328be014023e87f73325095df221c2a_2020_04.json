{
    "identifiers": [
        "org",
        "keycloak",
        "testsuite",
        "model",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicReference",
        "java",
        "util",
        "BiFunction",
        "org",
        "junit",
        "Assert",
        "org",
        "junit",
        "Test",
        "org",
        "keycloak",
        "component",
        "ComponentModel",
        "org",
        "keycloak",
        "models",
        "AuthenticationExecutionModel",
        "org",
        "keycloak",
        "models",
        "AuthenticationFlowModel",
        "org",
        "keycloak",
        "models",
        "AuthenticatorConfigModel",
        "org",
        "keycloak",
        "models",
        "ClientInitialAccessModel",
        "org",
        "keycloak",
        "models",
        "KeycloakSession",
        "org",
        "keycloak",
        "models",
        "ModelException",
        "org",
        "keycloak",
        "models",
        "RealmModel",
        "org",
        "keycloak",
        "models",
        "RealmProvider",
        "org",
        "keycloak",
        "models",
        "RequiredActionProviderModel",
        "org",
        "keycloak",
        "models",
        "RoleModel",
        "org",
        "keycloak",
        "models",
        "UserModel",
        "org",
        "keycloak",
        "models",
        "UserSessionModel",
        "org",
        "keycloak",
        "models",
        "utils",
        "DefaultAuthenticationFlows",
        "org",
        "keycloak",
        "models",
        "utils",
        "KeycloakModelUtils",
        "org",
        "keycloak",
        "representations",
        "idm",
        "RealmRepresentation",
        "org",
        "keycloak",
        "representations",
        "idm",
        "UserRepresentation",
        "org",
        "keycloak",
        "testsuite",
        "AbstractKeycloakTest",
        "org",
        "keycloak",
        "testsuite",
        "arquillian",
        "annotation",
        "AuthServerContainerExclude",
        "org",
        "keycloak",
        "testsuite",
        "arquillian",
        "annotation",
        "ModelTest",
        "org",
        "keycloak",
        "testsuite",
        "util",
        "RealmBuilder",
        "org",
        "keycloak",
        "testsuite",
        "util",
        "UserBuilder",
        "org",
        "keycloak",
        "testsuite",
        "admin",
        "AbstractAdminTest",
        "loadJson",
        "AuthServerContainerExclude",
        "AuthServerContainerExclude",
        "AuthServer",
        "REMOTE",
        "Override",
        "testRealms",
        "log",
        "debug",
        "testRealm",
        "loadJson",
        "getClass",
        "getResourceAsStream",
        "testRealms",
        "add",
        "testRealm",
        "user",
        "UserBuilder",
        "create",
        "username",
        "email",
        "password",
        "build",
        "realm2",
        "RealmBuilder",
        "create",
        "name",
        "user",
        "user",
        "build",
        "realm2",
        "setId",
        "testRealms",
        "add",
        "realm2",
        "Test",
        "ModelTest",
        "session1",
        "doTest",
        "session1",
        "session",
        "realm1",
        "components",
        "realm1",
        "getComponents",
        "components",
        "get",
        "getId",
        "session",
        "realm2",
        "realm1ComponentId",
        "component",
        "realm2",
        "getComponent",
        "realm1ComponentId",
        "Assert",
        "assertNull",
        "component",
        "session",
        "realm1",
        "realm2",
        "realm1ComponentId",
        "component",
        "realm1",
        "getComponent",
        "realm1ComponentId",
        "component",
        "put",
        "realm2",
        "updateComponent",
        "component",
        "session",
        "realm1",
        "realm1ComponentId",
        "component",
        "realm1",
        "getComponent",
        "realm1ComponentId",
        "Assert",
        "assertNull",
        "component",
        "get",
        "session",
        "realm1",
        "realm2",
        "realm1ComponentId",
        "component",
        "realm1",
        "getComponent",
        "realm1ComponentId",
        "realm2",
        "removeComponent",
        "component",
        "session",
        "realm1",
        "realm1ComponentId",
        "component",
        "realm1",
        "getComponent",
        "realm1ComponentId",
        "Assert",
        "assertNotNull",
        "component",
        "Test",
        "ModelTest",
        "session1",
        "doTest",
        "session1",
        "session",
        "realm1",
        "reqActions",
        "realm1",
        "getRequiredActionProviders",
        "reqActions",
        "get",
        "getId",
        "session",
        "realm2",
        "realm1ReqActionId",
        "reqAction",
        "realm2",
        "getRequiredActionProviderById",
        "realm1ReqActionId",
        "Assert",
        "assertNull",
        "reqAction",
        "session",
        "realm1",
        "realm2",
        "realm1ReqActionId",
        "reqAction",
        "realm1",
        "getRequiredActionProviderById",
        "realm1ReqActionId",
        "reqAction",
        "getConfig",
        "put",
        "realm2",
        "updateRequiredActionProvider",
        "reqAction",
        "session",
        "realm1",
        "realm1ReqActionId",
        "reqAction",
        "realm1",
        "getRequiredActionProviderById",
        "realm1ReqActionId",
        "Assert",
        "assertNull",
        "reqAction",
        "getConfig",
        "get",
        "session",
        "realm1",
        "realm2",
        "realm1ReqActionId",
        "reqAction",
        "realm1",
        "getRequiredActionProviderById",
        "realm1ReqActionId",
        "realm2",
        "removeRequiredActionProvider",
        "reqAction",
        "session",
        "realm1",
        "realm1ReqActionId",
        "reqAction",
        "realm1",
        "getRequiredActionProviderById",
        "realm1ReqActionId",
        "Assert",
        "assertNotNull",
        "reqAction",
        "Test",
        "ModelTest",
        "session1",
        "doTest",
        "session1",
        "session",
        "realm1",
        "flow",
        "realm1",
        "getFlowByAlias",
        "DefaultAuthenticationFlows",
        "BROWSER_FLOW",
        "flow",
        "getId",
        "session",
        "realm2",
        "realm1FlowId",
        "flow",
        "realm2",
        "getAuthenticationFlowById",
        "realm1FlowId",
        "Assert",
        "assertNull",
        "flow",
        "session",
        "realm1",
        "realm2",
        "realm1FlowId",
        "flow",
        "realm1",
        "getAuthenticationFlowById",
        "realm1FlowId",
        "flow",
        "setDescription",
        "realm2",
        "updateAuthenticationFlow",
        "flow",
        "session",
        "realm1",
        "realm1FlowId",
        "flow",
        "realm1",
        "getAuthenticationFlowById",
        "realm1FlowId",
        "Assert",
        "assertNotEquals",
        "flow",
        "getDescription",
        "session",
        "realm1",
        "realm2",
        "realm1FlowId",
        "flow",
        "realm1",
        "getAuthenticationFlowById",
        "realm1FlowId",
        "realm2",
        "removeAuthenticationFlow",
        "flow",
        "session",
        "realm1",
        "realm1FlowId",
        "flow",
        "realm1",
        "getAuthenticationFlowById",
        "realm1FlowId",
        "Assert",
        "assertNotNull",
        "flow",
        "Test",
        "ModelTest",
        "session1",
        "doTest",
        "session1",
        "session",
        "realm1",
        "flow",
        "realm1",
        "getFlowByAlias",
        "DefaultAuthenticationFlows",
        "BROWSER_FLOW",
        "executions",
        "realm1",
        "getAuthenticationExecutions",
        "flow",
        "getId",
        "executions",
        "get",
        "getId",
        "session",
        "realm2",
        "realm1ExecutionId",
        "execution",
        "realm2",
        "getAuthenticationExecutionById",
        "realm1ExecutionId",
        "Assert",
        "assertNull",
        "execution",
        "session",
        "realm1",
        "realm2",
        "realm1ExecutionId",
        "execution",
        "realm1",
        "getAuthenticationExecutionById",
        "realm1ExecutionId",
        "execution",
        "setPriority",
        "realm2",
        "updateAuthenticatorExecution",
        "execution",
        "session",
        "realm1",
        "realm1ExecutionId",
        "execution",
        "realm1",
        "getAuthenticationExecutionById",
        "realm1ExecutionId",
        "Assert",
        "assertNotEquals",
        "execution",
        "getPriority",
        "session",
        "realm1",
        "realm2",
        "realm1ExecutionId",
        "execution",
        "realm1",
        "getAuthenticationExecutionById",
        "realm1ExecutionId",
        "realm2",
        "removeAuthenticatorExecution",
        "execution",
        "session",
        "realm1",
        "realm1ExecutionId",
        "execution",
        "realm1",
        "getAuthenticationExecutionById",
        "realm1ExecutionId",
        "Assert",
        "assertNotNull",
        "execution",
        "Test",
        "ModelTest",
        "session1",
        "doTest",
        "session1",
        "session",
        "realm1",
        "configs",
        "realm1",
        "getAuthenticatorConfigs",
        "configs",
        "get",
        "getId",
        "session",
        "realm2",
        "realm1AuthConfigId",
        "config",
        "realm2",
        "getAuthenticatorConfigById",
        "realm1AuthConfigId",
        "Assert",
        "assertNull",
        "config",
        "session",
        "realm1",
        "realm2",
        "realm1AuthConfigId",
        "config",
        "realm1",
        "getAuthenticatorConfigById",
        "realm1AuthConfigId",
        "config",
        "getConfig",
        "put",
        "realm2",
        "updateAuthenticatorConfig",
        "config",
        "session",
        "realm1",
        "realm1AuthConfigId",
        "config",
        "realm1",
        "getAuthenticatorConfigById",
        "realm1AuthConfigId",
        "Assert",
        "assertNull",
        "config",
        "getConfig",
        "get",
        "session",
        "realm1",
        "realm2",
        "realm1AuthConfigId",
        "config",
        "realm1",
        "getAuthenticatorConfigById",
        "realm1AuthConfigId",
        "realm2",
        "removeAuthenticatorConfig",
        "config",
        "session",
        "realm1",
        "realm1AuthConfigId",
        "config",
        "realm1",
        "getAuthenticatorConfigById",
        "realm1AuthConfigId",
        "Assert",
        "assertNotNull",
        "config",
        "Test",
        "ModelTest",
        "session1",
        "doTest",
        "session1",
        "session",
        "realm1",
        "clientInitialAccess",
        "session",
        "getProvider",
        "createClientInitialAccessModel",
        "realm1",
        "clientInitialAccess",
        "getId",
        "session",
        "realm2",
        "realm1ClientInitialAccessId",
        "clientInitialAccess",
        "session",
        "getProvider",
        "getClientInitialAccessModel",
        "realm2",
        "realm1ClientInitialAccessId",
        "Assert",
        "assertNull",
        "clientInitialAccess",
        "session",
        "realm1",
        "realm2",
        "realm1ClientInitialAccessId",
        "session",
        "realm1",
        "realm1ClientInitialAccessId",
        "session",
        "realm1",
        "realm2",
        "realm1ClientInitialAccessId",
        "session",
        "getProvider",
        "removeClientInitialAccessModel",
        "realm2",
        "realm1ClientInitialAccessId",
        "session",
        "realm1",
        "realm1ClientInitialAccessId",
        "clientInitialAccess",
        "session",
        "getProvider",
        "getClientInitialAccessModel",
        "realm1",
        "realm1ClientInitialAccessId",
        "Assert",
        "assertNotNull",
        "clientInitialAccess",
        "Test",
        "ModelTest",
        "session1",
        "doTest",
        "session1",
        "session",
        "realm1",
        "role",
        "session",
        "getProvider",
        "addRealmRole",
        "realm1",
        "realm1",
        "addDefaultRole",
        "role",
        "getId",
        "session",
        "realm2",
        "realm1RoleId",
        "role",
        "session",
        "getProvider",
        "getRoleById",
        "realm1RoleId",
        "realm2",
        "Assert",
        "assertNull",
        "role",
        "session",
        "realm1",
        "realm2",
        "realm1RoleId",
        "session",
        "realm1",
        "realm1RoleId",
        "session",
        "realm1",
        "realm2",
        "realm1RoleId",
        "role",
        "session",
        "getProvider",
        "getRoleById",
        "realm1RoleId",
        "realm1",
        "session",
        "getProvider",
        "removeRole",
        "realm2",
        "role",
        "session",
        "realm1",
        "realm1RoleId",
        "role",
        "session",
        "getProvider",
        "getRoleById",
        "realm1RoleId",
        "realm1",
        "Assert",
        "assertNotNull",
        "role",
        "Assert",
        "assertTrue",
        "realm1",
        "getDefaultRoles",
        "contains",
        "Test",
        "ModelTest",
        "session1",
        "doTest",
        "session1",
        "session",
        "realm1",
        "user",
        "session",
        "users",
        "getUserByUsername",
        "realm1",
        "userSession",
        "session",
        "sessions",
        "createUserSession",
        "realm1",
        "user",
        "user",
        "getUsername",
        "userSession",
        "getId",
        "session",
        "realm2",
        "realm1SessionId",
        "userSession",
        "session",
        "sessions",
        "getUserSession",
        "realm2",
        "realm1SessionId",
        "Assert",
        "assertNull",
        "userSession",
        "session",
        "realm1",
        "realm2",
        "realm1SessionId",
        "session",
        "realm1",
        "realm1SessionId",
        "session",
        "realm1",
        "realm2",
        "realm1SessionId",
        "userSession",
        "session",
        "sessions",
        "getUserSession",
        "realm1",
        "realm1SessionId",
        "session",
        "sessions",
        "removeUserSession",
        "realm2",
        "userSession",
        "session",
        "realm1",
        "realm1SessionId",
        "userSession",
        "session",
        "sessions",
        "getUserSession",
        "realm1",
        "realm1SessionId",
        "Assert",
        "assertNotNull",
        "userSession",
        "session1",
        "realm1ObjectIdProducer",
        "testLookupRealm1ObjectInRealm2",
        "updaterRealm1ObjectInRealm2",
        "testUpdateFailed",
        "removeRealm1ObjectInRealm2",
        "testRemoveFailed",
        "realm1ObjectId",
        "KeycloakModelUtils",
        "runJobInTransaction",
        "session1",
        "getKeycloakSessionFactory",
        "session",
        "realm1",
        "session",
        "getProvider",
        "getRealm",
        "realm1ObjectId",
        "realm1ObjectIdProducer",
        "apply",
        "session",
        "realm1",
        "KeycloakModelUtils",
        "runJobInTransaction",
        "session1",
        "getKeycloakSessionFactory",
        "session",
        "realm1",
        "session",
        "getProvider",
        "getRealm",
        "realm2",
        "session",
        "getProvider",
        "getRealm",
        "testLookupRealm1ObjectInRealm2",
        "accept",
        "session",
        "realm2",
        "realm1ObjectId",
        "get",
        "updaterRealm1ObjectInRealm2",
        "accept",
        "session",
        "realm1",
        "realm2",
        "realm1ObjectId",
        "get",
        "KeycloakModelUtils",
        "runJobInTransaction",
        "session1",
        "getKeycloakSessionFactory",
        "session",
        "realm1",
        "session",
        "getProvider",
        "getRealm",
        "testUpdateFailed",
        "accept",
        "session",
        "realm1",
        "realm1ObjectId",
        "get",
        "KeycloakModelUtils",
        "runJobInTransaction",
        "session1",
        "getKeycloakSessionFactory",
        "session",
        "realm1",
        "session",
        "getProvider",
        "getRealm",
        "realm2",
        "session",
        "getProvider",
        "getRealm",
        "removeRealm1ObjectInRealm2",
        "accept",
        "session",
        "realm1",
        "realm2",
        "realm1ObjectId",
        "get",
        "e",
        "KeycloakModelUtils",
        "runJobInTransaction",
        "session1",
        "getKeycloakSessionFactory",
        "session",
        "realm1",
        "session",
        "getProvider",
        "getRealm",
        "testRemoveFailed",
        "accept",
        "session",
        "realm1",
        "realm1ObjectId",
        "get",
        "FunctionalInterface",
        "TriConsumer",
        "var1",
        "var2",
        "var3",
        "FunctionalInterface",
        "TetraConsumer",
        "var1",
        "var2",
        "var3",
        "var4"
    ],
    "literals": [
        "\"Adding test realm for import from testrealm.json\"",
        "\"/testrealm.json\"",
        "\"foo@user\"",
        "\"foo@user.com\"",
        "\"password\"",
        "\"foo\"",
        "\"foo\"",
        "\"key1\"",
        "\"Val1\"",
        "\"key1\"",
        "\"key1\"",
        "\"Val1\"",
        "\"key1\"",
        "\"foo\"",
        "\"foo\"",
        "\"key1\"",
        "\"val1\"",
        "\"key1\"",
        "\"foo\"",
        "\"foo\"",
        "\"foo\"",
        "\"test-user@localhost\"",
        "\"1.2.3.4\"",
        "\"bar\"",
        "\"test\"",
        "\"test\"",
        "\"foo\"",
        "\"test\"",
        "\"test\"",
        "\"foo\"",
        "\"test\""
    ],
    "variables": [],
    "comments": [
        "Get ID of some component from realm1",
        "Test lookup realm1 component in realm2 should not work",
        "Try to update some component in realm1 through the realm2",
        "Test update from above was not successful",
        "Try remove component from realm1 in the context of realm2",
        "Test remove from above was not successful",
        "Get ID of some object from realm1",
        "Test lookup realm1 object in realm2 should not work",
        "Try to update some object in realm1 through the realm2",
        "Test update from above was not successful",
        "Try remove object from realm1 in the context of realm2",
        "Test remove from above was not successful",
        "Get ID of some object from realm1",
        "Test lookup realm1 object in realm2 should not work",
        "Try to update some object in realm1 through the realm2",
        "Test update from above was not successful",
        "Try remove object from realm1 in the context of realm2",
        "Test remove from above was not successful",
        "Get ID of some object from realm1",
        "Test lookup realm1 object in realm2 should not work",
        "Try to update some object in realm1 through the realm2",
        "Test update from above was not successful",
        "Try remove object from realm1 in the context of realm2",
        "Test remove from above was not successful",
        "Get ID of some object from realm1",
        "Test lookup realm1 object in realm2 should not work",
        "Try to update some object in realm1 through the realm2",
        "Test update from above was not successful",
        "Try remove object from realm1 in the context of realm2",
        "Test remove from above was not successful",
        "Get ID of some object from realm1",
        "Test lookup realm1 object in realm2 should not work",
        "Try to update some object in realm1 through the realm2",
        "No-op, update not supported for clientInitialAccessModel",
        "Test update from above was not successful",
        "No-op, update not supported for clientInitialAccessModel",
        "Try remove object from realm1 in the context of realm2",
        "Test remove from above was not successful",
        "Get ID of some object from realm1",
        "Test lookup realm1 object in realm2 should not work",
        "Try to update some object in realm1 through the realm2",
        "No-op, update done directly by calling operations on RoleModel. No explicit updateRole method on the RealmModel",
        "Test update from above was not successful",
        "No-op, update done directly by calling operations on RoleModel. No explicit updateRole method on the RealmModel",
        "Try remove object from realm1 in the context of realm2",
        "Test remove from above was not successful",
        "Get ID of some object from realm1",
        "Test lookup realm1 object in realm2 should not work",
        "Try to update some object in realm1 through the realm2",
        "No-op, update done directly by calling operations on UserSessionModel. No explicit update method",
        "Test update from above was not successful",
        "No-op, update done directly by calling operations on UserSessionModel. No explicit update method.",
        "Try remove object from realm1 in the context of realm2",
        "Test remove from above was not successful",
        "Transaction 1 - Lookup object of realm1",
        "Transaction 2",
        "Transaction 3",
        "Transaction 4",
        "This is fine. Attempt to remove on incorrect object can throw an exception in some cases, which will enforce transaction rollback",
        "Transaction 5"
    ],
    "docstrings": [
        "* Copyright 2019 Red Hat, Inc. and/or its affiliates\n * and other contributors as indicated by the @author tags.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *",
        "* Test for the CRUD scenarios when the operation is called on the object, which is owned by different realm\n *\n * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>"
    ],
    "functions": [
        "addTestRealms",
        "componentsTest",
        "requiredActionProvidersTest",
        "authenticationFlowsTest",
        "authenticationExecutionsTest",
        "authenticationConfigsTest",
        "clientInitialAccessTest",
        "rolesTest",
        "userSessionsTest",
        "doTest",
        "accept",
        "accept"
    ],
    "classes": [
        "OwnerReplacementTest"
    ]
}