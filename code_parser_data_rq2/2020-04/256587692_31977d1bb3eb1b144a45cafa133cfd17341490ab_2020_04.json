{
    "identifiers": [
        "TopLevelType",
        "canUseDOM",
        "TOP_BLUR",
        "TOP_COMPOSITION_START",
        "TOP_COMPOSITION_END",
        "TOP_COMPOSITION_UPDATE",
        "TOP_KEY_DOWN",
        "TOP_KEY_PRESS",
        "TOP_KEY_UP",
        "TOP_MOUSE_DOWN",
        "TOP_TEXT_INPUT",
        "TOP_PASTE",
        "getData",
        "FallbackCompositionStateGetData",
        "initialize",
        "FallbackCompositionStateInitialize",
        "reset",
        "FallbackCompositionStateReset",
        "SyntheticCompositionEvent",
        "SyntheticInputEvent",
        "accumulateTwoPhaseListeners",
        "canUseDOM",
        "canUseDOM",
        "documentMode",
        "canUseDOM",
        "documentMode",
        "canUseDOM",
        "canUseCompositionEvent",
        "documentMode",
        "documentMode",
        "documentMode",
        "SPACEBAR_CODE",
        "TOP_COMPOSITION_END",
        "TOP_KEY_PRESS",
        "TOP_TEXT_INPUT",
        "TOP_PASTE",
        "TOP_BLUR",
        "TOP_COMPOSITION_END",
        "TOP_KEY_DOWN",
        "TOP_KEY_PRESS",
        "TOP_KEY_UP",
        "TOP_MOUSE_DOWN",
        "TOP_BLUR",
        "TOP_COMPOSITION_START",
        "TOP_KEY_DOWN",
        "TOP_KEY_PRESS",
        "TOP_KEY_UP",
        "TOP_MOUSE_DOWN",
        "TOP_BLUR",
        "TOP_COMPOSITION_UPDATE",
        "TOP_KEY_DOWN",
        "TOP_KEY_PRESS",
        "TOP_KEY_UP",
        "TOP_MOUSE_DOWN",
        "nativeEvent",
        "nativeEvent",
        "nativeEvent",
        "nativeEvent",
        "nativeEvent",
        "nativeEvent",
        "topLevelType",
        "topLevelType",
        "TOP_COMPOSITION_START",
        "eventTypes",
        "TOP_COMPOSITION_END",
        "eventTypes",
        "TOP_COMPOSITION_UPDATE",
        "eventTypes",
        "topLevelType",
        "nativeEvent",
        "topLevelType",
        "TOP_KEY_DOWN",
        "nativeEvent",
        "START_KEYCODE",
        "topLevelType",
        "nativeEvent",
        "topLevelType",
        "TOP_KEY_UP",
        "END_KEYCODES",
        "nativeEvent",
        "TOP_KEY_DOWN",
        "nativeEvent",
        "START_KEYCODE",
        "TOP_KEY_PRESS",
        "TOP_MOUSE_DOWN",
        "TOP_BLUR",
        "nativeEvent",
        "nativeEvent",
        "detail",
        "detail",
        "detail",
        "nativeEvent",
        "nativeEvent",
        "topLevelType",
        "targetInst",
        "nativeEvent",
        "nativeEventTarget",
        "canUseCompositionEvent",
        "eventType",
        "getCompositionEventType",
        "topLevelType",
        "isComposing",
        "isFallbackCompositionStart",
        "topLevelType",
        "nativeEvent",
        "eventType",
        "eventTypes",
        "isFallbackCompositionEnd",
        "topLevelType",
        "nativeEvent",
        "eventType",
        "eventTypes",
        "eventType",
        "useFallbackCompositionData",
        "isUsingKoreanIME",
        "nativeEvent",
        "isComposing",
        "eventType",
        "eventTypes",
        "isComposing",
        "FallbackCompositionStateInitialize",
        "nativeEventTarget",
        "eventType",
        "eventTypes",
        "isComposing",
        "fallbackData",
        "FallbackCompositionStateGetData",
        "SyntheticCompositionEvent",
        "eventType",
        "targetInst",
        "nativeEvent",
        "nativeEventTarget",
        "fallbackData",
        "fallbackData",
        "getDataFromCustomEvent",
        "nativeEvent",
        "customData",
        "customData",
        "accumulateTwoPhaseListeners",
        "topLevelType",
        "TopLevelType",
        "nativeEvent",
        "topLevelType",
        "TOP_COMPOSITION_END",
        "getDataFromCustomEvent",
        "nativeEvent",
        "TOP_KEY_PRESS",
        "nativeEvent",
        "which",
        "SPACEBAR_CODE",
        "hasSpaceKeypress",
        "SPACEBAR_CHAR",
        "TOP_TEXT_INPUT",
        "nativeEvent",
        "chars",
        "SPACEBAR_CHAR",
        "hasSpaceKeypress",
        "chars",
        "topLevelType",
        "TopLevelType",
        "nativeEvent",
        "isComposing",
        "topLevelType",
        "TOP_COMPOSITION_END",
        "canUseCompositionEvent",
        "isFallbackCompositionEnd",
        "topLevelType",
        "nativeEvent",
        "FallbackCompositionStateGetData",
        "FallbackCompositionStateReset",
        "isComposing",
        "chars",
        "topLevelType",
        "TOP_PASTE",
        "TOP_KEY_PRESS",
        "isKeypressCommand",
        "nativeEvent",
        "nativeEvent",
        "nativeEvent",
        "nativeEvent",
        "nativeEvent",
        "nativeEvent",
        "TOP_COMPOSITION_END",
        "useFallbackCompositionData",
        "isUsingKoreanIME",
        "nativeEvent",
        "nativeEvent",
        "topLevelType",
        "targetInst",
        "nativeEvent",
        "nativeEventTarget",
        "canUseTextInputEvent",
        "chars",
        "getNativeBeforeInputChars",
        "topLevelType",
        "nativeEvent",
        "chars",
        "getFallbackBeforeInputChars",
        "topLevelType",
        "nativeEvent",
        "chars",
        "SyntheticInputEvent",
        "eventTypes",
        "targetInst",
        "nativeEvent",
        "nativeEventTarget",
        "chars",
        "accumulateTwoPhaseListeners",
        "eventTypes",
        "topLevelType",
        "targetInst",
        "nativeEvent",
        "nativeEventTarget",
        "eventSystemFlags",
        "extractCompositionEvent",
        "topLevelType",
        "targetInst",
        "nativeEvent",
        "nativeEventTarget",
        "extractBeforeInputEvent",
        "topLevelType",
        "targetInst",
        "nativeEvent",
        "nativeEventTarget",
        "composition",
        "beforeInput",
        "beforeInput",
        "composition",
        "composition",
        "beforeInput",
        "BeforeInputEventPlugin"
    ],
    "literals": [
        "'legacy-events/TopLevelEventTypes'",
        "'shared/ExecutionEnvironment'",
        "'../DOMTopLevelEventTypes'",
        "'../FallbackCompositionState'",
        "'../SyntheticCompositionEvent'",
        "'../SyntheticInputEvent'",
        "'../accumulateTwoPhaseListeners'",
        "'CompositionEvent'",
        "'documentMode'",
        "'TextEvent'",
        "'onBeforeInput'",
        "'onBeforeInputCapture'",
        "'onCompositionEnd'",
        "'onCompositionEndCapture'",
        "'onCompositionStart'",
        "'onCompositionStartCapture'",
        "'onCompositionUpdate'",
        "'onCompositionUpdateCapture'",
        "'object'",
        "'data'",
        "'ko'"
    ],
    "variables": [
        "END_KEYCODES",
        "START_KEYCODE",
        "canUseCompositionEvent",
        "documentMode",
        "canUseTextInputEvent",
        "useFallbackCompositionData",
        "SPACEBAR_CODE",
        "SPACEBAR_CHAR",
        "eventTypes",
        "hasSpaceKeypress",
        "detail",
        "isComposing",
        "eventType",
        "fallbackData",
        "customData",
        "which",
        "chars",
        "chars",
        "chars",
        "BeforeInputEventPlugin",
        "composition",
        "beforeInput"
    ],
    "comments": [
        "Tab, Return, Esc, Space",
        "Webkit offers a very useful `textInput` event that can be used to",
        "directly represent `beforeInput`. The IE `textinput` event is not as",
        "useful, so we don't use it.",
        "In IE9+, we have access to composition events, but the data supplied",
        "by the native compositionend event may be incorrect. Japanese ideographic",
        "spaces, for instance (\\u3000) are not recorded correctly.",
        "Events and their corresponding property names.",
        "Track whether we've ever handled a keypress on the space key.",
        "ctrlKey && altKey is equivalent to AltGr, and is not a command.",
        "Command keys insert or clear IME input.",
        "Expect IME keyCode on each keydown. If we get any other",
        "code we must have exited earlier.",
        "Events are not possible without cancelling IME.",
        "Track the current IME composition status, if any.",
        "The current composition is stored statically and must not be",
        "overwritten while composition continues.",
        "Inject data generated from fallback path into the synthetic event.",
        "This matches the property of native CompositionEventInterface.",
        "Record the characters to be added to the DOM.",
        "If it's a spacebar character, assume that we have already handled",
        "it at the keypress level and bail immediately. Android Chrome",
        "doesn't give us keycodes, so we need to ignore it.",
        "For other native event types, do nothing.",
        "If we are currently composing (IME) and using a fallback to do so,",
        "try to extract the composed characters from the fallback object.",
        "If composition event is available, we extract a string only at",
        "compositionevent, otherwise extract it at fallback events.",
        "If a paste event occurs after a keypress, throw out the input",
        "chars. Paste events should not lead to BeforeInput events.",
        "IE fires the `keypress` event when a user types an emoji via",
        "Touch keyboard of Windows.  In such a case, the `char` property",
        "holds an emoji character like `\\uD83D\\uDE0A`.  Because its length",
        "is 2, the property `which` does not represent an emoji correctly.",
        "In such a case, we directly return the `char` property instead of",
        "using `which`.",
        "If no characters are being inserted, no BeforeInput event should",
        "be fired."
    ],
    "docstrings": [
        "* Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.",
        "* Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.",
        "* Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}",
        "* Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}",
        "* Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}",
        "* Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}",
        "* Check if a composition event was triggered by Korean IME.\n * Our fallback mode does not work well with IE's Korean IME,\n * so just use native composition events when Korean IME is used.\n * Although CompositionEvent.locale property is deprecated,\n * it is available in IE, where our fallback mode is enabled.\n *\n * @param {object} nativeEvent\n * @return {boolean}",
        "* @return {?object} A SyntheticCompositionEvent.",
        "* @param {TopLevelType} topLevelType Number from `TopLevelType`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.",
        "* If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.",
        "* For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {number} topLevelType Number from `TopLevelEventTypes`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.",
        "* As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.",
        "* Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @return {?object} A SyntheticInputEvent.",
        "* Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types."
    ],
    "functions": [
        "isKeypressCommand",
        "getCompositionEventType",
        "isFallbackCompositionStart",
        "isFallbackCompositionEnd",
        "getDataFromCustomEvent",
        "isUsingKoreanIME",
        "extractCompositionEvent",
        "getNativeBeforeInputChars",
        "getFallbackBeforeInputChars",
        "extractBeforeInputEvent"
    ],
    "classes": []
}