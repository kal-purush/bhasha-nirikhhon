{
    "identifiers": [
        "numpy",
        "np",
        "numpy",
        "random",
        "sklearn",
        "datasets",
        "fetch_openml",
        "sklearn",
        "preprocessing",
        "fetch_openml",
        "mnist",
        "mnist",
        "numpy",
        "random",
        "RandomState",
        "permutation",
        "np",
        "where",
        "labels",
        "neg",
        "labels",
        "pos",
        "numpy",
        "random",
        "RandomState",
        "permutation",
        "np",
        "where",
        "labels",
        "neg",
        "labels",
        "pos",
        "data",
        "train_idx",
        "astype",
        "labels",
        "train_idx",
        "pos",
        "data",
        "train_idx",
        "astype",
        "labels",
        "train_idx",
        "pos",
        "data",
        "test_idx",
        "astype",
        "labels",
        "test_idx",
        "pos",
        "sklearn",
        "preprocessing",
        "scale",
        "train_data_unscaled",
        "axis",
        "with_std",
        "sklearn",
        "preprocessing",
        "scale",
        "validation_data_unscaled",
        "axis",
        "with_std",
        "sklearn",
        "preprocessing",
        "scale",
        "test_data_unscaled",
        "axis",
        "with_std",
        "train_data",
        "train_labels",
        "validation_data",
        "validation_labels",
        "test_data",
        "test_labels",
        "fetch_openml",
        "mnist",
        "mnist",
        "numpy",
        "random",
        "RandomState",
        "permutation",
        "np",
        "where",
        "labels",
        "numpy",
        "random",
        "RandomState",
        "permutation",
        "np",
        "where",
        "labels",
        "data",
        "train_idx",
        "astype",
        "labels",
        "train_idx",
        "data",
        "train_idx",
        "astype",
        "labels",
        "train_idx",
        "data",
        "test_idx",
        "astype",
        "labels",
        "test_idx",
        "sklearn",
        "preprocessing",
        "scale",
        "train_data_unscaled",
        "axis",
        "with_std",
        "sklearn",
        "preprocessing",
        "scale",
        "validation_data_unscaled",
        "axis",
        "with_std",
        "sklearn",
        "preprocessing",
        "scale",
        "test_data_unscaled",
        "axis",
        "with_std",
        "train_data",
        "train_labels",
        "validation_data",
        "validation_labels",
        "test_data",
        "test_labels",
        "data",
        "labels",
        "C",
        "eta_0",
        "T",
        "data",
        "labels",
        "eta_0",
        "T",
        "expected",
        "result",
        "max",
        "expected",
        "result"
    ],
    "literals": [
        "'mnist_784'",
        "'data'",
        "'target'",
        "\"0\"",
        "\"8\"",
        "'mnist_784'",
        "'data'",
        "'target'",
        "'a'",
        "'a'"
    ],
    "variables": [
        "mnist",
        "data",
        "labels",
        "neg",
        "pos",
        "train_idx",
        "test_idx",
        "train_data_unscaled",
        "train_labels",
        "validation_data_unscaled",
        "validation_labels",
        "test_data_unscaled",
        "test_labels",
        "train_data",
        "validation_data",
        "test_data",
        "mnist",
        "data",
        "labels",
        "train_idx",
        "test_idx",
        "train_data_unscaled",
        "train_labels",
        "validation_data_unscaled",
        "validation_labels",
        "test_data_unscaled",
        "test_labels",
        "train_data",
        "validation_data",
        "test_data"
    ],
    "comments": [
        "",
        "Your name: Nadav Benyamini",
        "",
        "Please import and use stuff only from the packages numpy, sklearn, matplotlib",
        "Preprocessing",
        "Preprocessing",
        "TODO: Implement me",
        "TODO: Implement me",
        "",
        ""
    ],
    "docstrings": [
        "\"\"\"\nAssignment 4 question 2 skeleton.\n\nPlease use the provided function signature for the SGD implementation.\nFeel free to add functions and other code, and submit this file with the name sgd.py\n\"\"\"",
        "\"\"\"\n    Implements Hinge loss using SGD.\n    \"\"\"",
        "\"\"\"\n    Implements multi-class cross entropy loss using SGD.\n    \"\"\""
    ],
    "functions": [
        "helper_hinge",
        "helper_ce",
        "SGD_hinge",
        "SGD_ce",
        "hing_loss"
    ],
    "classes": []
}