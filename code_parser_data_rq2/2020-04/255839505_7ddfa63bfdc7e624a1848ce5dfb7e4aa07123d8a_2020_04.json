{
    "identifiers": [
        "re",
        "cmd",
        "copy",
        "random",
        "numpy",
        "np",
        "libdw",
        "sm",
        "pyreadline",
        "Readline",
        "cmd",
        "Cmd",
        "sm",
        "SM",
        "App",
        "argv",
        "Game",
        "game",
        "cmdloop",
        "App",
        "App",
        "create_map",
        "np",
        "ndarray",
        "size",
        "size",
        "dtype",
        "i",
        "random",
        "randint",
        "size",
        "random",
        "randint",
        "size",
        "mmap",
        "coins",
        "row",
        "mmap",
        "end",
        "col",
        "row",
        "col",
        "end",
        "direction_steps",
        "direction_steps",
        "split",
        "lst",
        "_available_directions",
        "format",
        "join",
        "_available_directions",
        "len",
        "lst",
        "lst",
        "append",
        "len",
        "lst",
        "direction_steps",
        "lst",
        "steps",
        "dig",
        "direction",
        "steps",
        "direction",
        "steps",
        "position",
        "direction",
        "position",
        "steps",
        "copy",
        "deepcopy",
        "mmap",
        "row",
        "position",
        "col",
        "mmap",
        "position",
        "col",
        "direction",
        "position",
        "steps",
        "copy",
        "deepcopy",
        "mmap",
        "row",
        "col",
        "position",
        "mmap",
        "col",
        "position",
        "direction",
        "position",
        "steps",
        "copy",
        "deepcopy",
        "mmap",
        "position",
        "row",
        "col",
        "mmap",
        "position",
        "row",
        "direction",
        "position",
        "steps",
        "copy",
        "deepcopy",
        "mmap",
        "row",
        "position",
        "col",
        "mmap",
        "row",
        "position",
        "addcoins",
        "path",
        "mmap",
        "position",
        "mmap",
        "display_map",
        "path",
        "i",
        "path",
        "coins",
        "_coins_type",
        "i",
        "text",
        "line",
        "begidx",
        "endidx",
        "i",
        "i",
        "_available_directions",
        "i",
        "startswith",
        "text",
        "format",
        "arr",
        "format",
        "arr",
        "join",
        "_available_directions",
        "format",
        "arr",
        "App",
        "cmdloop"
    ],
    "literals": [
        "\"Readline module part of the python standard library, but it does not work in windows. \"",
        "\"Hence, to enable TAB completion features, run the command:\\n\"",
        "\"pip install pyreadline\"",
        "\"__Welcome message here__\"",
        "\"(Menu) \"",
        "\"(Minilode) \"",
        "\"\"",
        "\"left\"",
        "\"right\"",
        "\"up\"",
        "\"down\"",
        "' '",
        "'#'",
        "'G'",
        "\"__Intro message here__\"",
        "'<U1'",
        "' '",
        "'#'",
        "'H'",
        "'M'",
        "'G'",
        "f\"Cash: ${self.coins}\"",
        "'\\t'",
        "' '",
        "' '",
        "''",
        "' '",
        "\"*** commands should be either {}\"",
        "', '",
        "\"*** Unknown syntax:\"",
        "\"Type 'help dig' for more info\"",
        "\"*** You need to type in an integer after the direction\"",
        "'left'",
        "' '",
        "\"right\"",
        "' '",
        "\"up\"",
        "' '",
        "\"down\"",
        "' '",
        "' '",
        "'M'",
        "' '",
        "\"-->\"",
        "\"\\t{: <13} {: <7} dig <direction> <steps>\"",
        "\"format\"",
        "\"\\t{: <13} {: <7} {}\"",
        "\"direction\"",
        "', '",
        "\"\\t{: <13} {: <7} needs to be an integer.\"",
        "\"steps\""
    ],
    "variables": [
        "intro",
        "prompt",
        "game",
        "game",
        "prompt",
        "mmap",
        "_available_directions",
        "_coins_type",
        "position",
        "points",
        "intro",
        "size",
        "mmap",
        "mmap",
        "mmap",
        "mmap",
        "mmap",
        "position",
        "coins",
        "row",
        "col",
        "mmap",
        "row",
        "col",
        "mmap",
        "lst",
        "direction",
        "steps",
        "steps",
        "row",
        "col",
        "path",
        "row",
        "path",
        "row",
        "path",
        "col",
        "path",
        "col",
        "row",
        "col",
        "row",
        "col",
        "row",
        "col",
        "arr"
    ],
    "comments": [
        "IMPLEMENT STATEMACHINESSSSS",
        "15*15 digging ground",
        "First 2 rows are for ground level",
        "Rest are digging ground",
        "home",
        "Minilode",
        "Starting points",
        "Gold",
        "Gold",
        "TODO",
        "Get a random int --> number of gunk",
        "random choices of 5*5 area matrix for i for j in range(-2,3) a.append((i,j)) --> relative position of gunk",
        "These values + row/col values to get the final position of gunk",
        "Parse input",
        "\"dig\" --> [''], \"dig <word>\" --> ['<word>']",
        "if steps is not provided, it defaults to 1",
        "Run dig function to move and add coins",
        "Adjust minilode's position",
        "Change position",
        "Get what's in between",
        "Erase what's in between",
        "needs to add 1 to exclude it's current location",
        "Add coins",
        "Update the position marking",
        "Display map",
        "text is the string we are matching against, all returned matches must begin with it",
        "line is is the current input line",
        "begidx is the beginning index in the line of the text being matched",
        "endidx is the end index in the line of the text being matched"
    ],
    "docstrings": [
        "'''\n# TODO\n# Game mechanic: Anyway to add spaces after do_dig, so that it will be dig .\n# Game mechanic: Set boundary of travallable area to exclude the first row (so that H won't get eaten up)\n# Game mechanic: Show what has been excavated so that users would know\n# Intro message: type <help or ?> followed by <command> to get more info on the command\n# Intro message: when an empty line is entered, the previous input would be run. So becareful on that!\n# Intro message: use up down keys to cycle through command history\n# Intro message: press <tab> to auto complete input or to show list of commands available\n# State machine: implement nested interpreters when changing from different states\n'''",
        "''' Get the points in the path '''",
        "''' Gains coins '''"
    ],
    "functions": [
        "do_play",
        "create_map",
        "display_map",
        "do_dig",
        "dig",
        "addcoins",
        "complete_dig",
        "help_dig"
    ],
    "classes": [
        "App",
        "Game"
    ]
}