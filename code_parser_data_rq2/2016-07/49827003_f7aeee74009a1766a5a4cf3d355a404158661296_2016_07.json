{
    "identifiers": [
        "Eventful",
        "Loadable",
        "Savable",
        "autobind",
        "proto",
        "throttle",
        "ids",
        "Savable",
        "Loadable",
        "props",
        "arguments",
        "item",
        "item",
        "children",
        "children",
        "children",
        "children",
        "children",
        "childId",
        "ids",
        "childId",
        "childId",
        "indexJSON",
        "indexJSON",
        "indexJSON",
        "indexJSON",
        "indexJSON",
        "indexJSON",
        "indexJSON",
        "index"
    ],
    "literals": [
        "\"oak-roots/Eventful\"",
        "\"oak-roots/Loadable\"",
        "\"oak-roots/Savable\"",
        "\"oak-roots/util/decorators\"",
        "\"oak-roots/util/ids\"",
        "\"You must implement _makeChildIndex()\"",
        "\"You must implement getChildPath()\"",
        "\"string\"",
        "\"  \""
    ],
    "variables": [
        "children",
        "children"
    ],
    "comments": [
        "",
        "",
        "Generic ChildController class",
        "",
        "A `childController` manages a set of `children`, which are generally themselves `Loadable`s.",
        "Assumes you will create a `LoadableIndex` in `_makeChildIndex` to manage list of children.",
        "",
        "There's also stuff in here about managing `parent` and parent properties.",
        "REFACTOR: move parent stuff into separate class?",
        "",
        "",
        "",
        "Child Index and accessors",
        "",
        "Given a possible childId, modify it (minmally) to make sure it's unique",
        "within our current children's ids.",
        "NOTE: its possible that you will still get a colision on the server... ????",
        "",
        "Parents & Paths",
        "",
        "Return our parent's index, which will include us.",
        "Position (index) of this page in its section's `pages` list",
        "Returns `undefined` if we don't parent or parent has no childIndex.",
        "Are we the first or last item in our parent's list?",
        "Return the next item in our parent's list.",
        "",
        "Loading",
        "",
        "By default, loading simply causes our `childIndex` to load.",
        "Your subclass may load a bundle with this info,",
        "or load the data some other way and call `_loadedIndex()` to update the index.",
        "",
        "Saving",
        "",
        "By default, saveing simply causes our `childIndex` to save.",
        "Your subclass may save a bundle with this info,",
        "calling `_getIndexData()` to get the index data to save.",
        "Return the data to save for the index, only necessary if you're saving in a bundle or something."
    ],
    "docstrings": [],
    "functions": [
        "_makeChildIndex",
        "childIndex",
        "childIds",
        "children",
        "firstChild",
        "lastChild",
        "uniquifyChildId",
        "getChildPath",
        "path",
        "parentIndex",
        "position",
        "isFirst",
        "isLast",
        "previous",
        "next",
        "loadData",
        "onLoaded",
        "_loadedIndex",
        "saveData",
        "onSaved",
        "_getIndexData"
    ],
    "classes": [
        "ChildController"
    ]
}