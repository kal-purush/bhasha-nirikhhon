{
    "identifiers": [
        "cubicchunks",
        "server",
        "chunkio",
        "cubicchunks",
        "CubicChunks",
        "cubicchunks",
        "util",
        "AddressTools",
        "cubicchunks",
        "util",
        "ConcurrentBatchedQueue",
        "cubicchunks",
        "world",
        "ICubicWorldServer",
        "cubicchunks",
        "world",
        "column",
        "Column",
        "cubicchunks",
        "world",
        "cube",
        "Cube",
        "net",
        "minecraft",
        "nbt",
        "CompressedStreamTools",
        "net",
        "minecraft",
        "nbt",
        "NBTTagCompound",
        "net",
        "minecraft",
        "world",
        "WorldProvider",
        "net",
        "minecraft",
        "world",
        "storage",
        "IThreadedFileIO",
        "net",
        "minecraft",
        "world",
        "storage",
        "ThreadedFileIOBase",
        "org",
        "apache",
        "logging",
        "log4j",
        "Logger",
        "org",
        "mapdb",
        "DB",
        "org",
        "mapdb",
        "DBMaker",
        "org",
        "mapdb",
        "Serializer",
        "java",
        "io",
        "ByteArrayInputStream",
        "java",
        "io",
        "File",
        "java",
        "io",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "ConcurrentNavigableMap",
        "cubicchunks",
        "util",
        "AddressTools",
        "getX",
        "cubicchunks",
        "util",
        "AddressTools",
        "getY",
        "cubicchunks",
        "util",
        "AddressTools",
        "getZ",
        "LOGGER",
        "CubicChunks",
        "LOGGER",
        "address",
        "nbt",
        "address",
        "nbt",
        "address",
        "address",
        "nbt",
        "nbt",
        "saveFile",
        "dimension",
        "LOGGER",
        "info",
        "file",
        "saveFile",
        "format",
        "dimension",
        "getDimension",
        "LOGGER",
        "info",
        "file",
        "file",
        "getParentFile",
        "mkdirs",
        "db",
        "DBMaker",
        "fileDB",
        "file",
        "transactionEnable",
        "make",
        "db",
        "world",
        "db",
        "columns",
        "cubes",
        "columnsToSave",
        "cubesToSave",
        "theShutdownHook",
        "world",
        "world",
        "world",
        "db",
        "initializeDBConnection",
        "world",
        "getSaveHandler",
        "getWorldDirectory",
        "world",
        "getProvider",
        "Runtime",
        "getRuntime",
        "addShutdownHook",
        "theShutdownHook",
        "ThreadedFileIOBase",
        "getThreadedIOInstance",
        "waitForFinish",
        "e",
        "e",
        "printStackTrace",
        "CubeIO",
        "db",
        "isClosed",
        "CubeIO",
        "db",
        "close",
        "columns",
        "db",
        "treeMap",
        "Serializer",
        "LONG",
        "Serializer",
        "BYTE_ARRAY",
        "createOrOpen",
        "cubes",
        "db",
        "treeMap",
        "Serializer",
        "LONG",
        "Serializer",
        "BYTE_ARRAY",
        "createOrOpen",
        "columnsToSave",
        "cubesToSave",
        "columnsToSave",
        "size",
        "cubesToSave",
        "size",
        "err",
        "writeNextIO",
        "Runtime",
        "getRuntime",
        "removeShutdownHook",
        "theShutdownHook",
        "err",
        "err",
        "err",
        "db",
        "isClosed",
        "db",
        "close",
        "err",
        "chunkX",
        "chunkZ",
        "address",
        "AddressTools",
        "getAddress",
        "chunkX",
        "chunkZ",
        "data",
        "columns",
        "get",
        "address",
        "data",
        "nbt",
        "CompressedStreamTools",
        "readCompressed",
        "data",
        "IONbtReader",
        "readColumn",
        "world",
        "chunkX",
        "chunkZ",
        "nbt",
        "column",
        "address",
        "data",
        "cubes",
        "get",
        "address",
        "data",
        "nbt",
        "CompressedStreamTools",
        "readCompressed",
        "data",
        "cubeX",
        "getX",
        "address",
        "cubeY",
        "getY",
        "address",
        "cubeZ",
        "getZ",
        "address",
        "IONbtReader",
        "readCube",
        "column",
        "cubeX",
        "cubeY",
        "cubeZ",
        "nbt",
        "column",
        "columnsToSave",
        "add",
        "column",
        "getAddress",
        "IONbtWriter",
        "write",
        "column",
        "column",
        "markSaved",
        "ThreadedFileIOBase",
        "getThreadedIOInstance",
        "queueIO",
        "cube",
        "cubesToSave",
        "add",
        "cube",
        "getAddress",
        "IONbtWriter",
        "write",
        "cube",
        "cube",
        "markSaved",
        "ThreadedFileIOBase",
        "getThreadedIOInstance",
        "queueIO",
        "Override",
        "ColumnsBatchSize",
        "CubesBatchSize",
        "numColumnsSaved",
        "numColumnsRemaining",
        "numColumnBytesSaved",
        "numCubesSaved",
        "numCubesRemaining",
        "numCubeBytesSaved",
        "start",
        "currentTimeMillis",
        "entries",
        "max",
        "ColumnsBatchSize",
        "CubesBatchSize",
        "hasMoreColumns",
        "columnsToSave",
        "getBatch",
        "entries",
        "ColumnsBatchSize",
        "entry",
        "entries",
        "data",
        "IONbtWriter",
        "writeNbtBytes",
        "entry",
        "nbt",
        "columns",
        "put",
        "entry",
        "address",
        "data",
        "numColumnsSaved",
        "numColumnBytesSaved",
        "data",
        "length",
        "t",
        "err",
        "format",
        "getX",
        "entry",
        "address",
        "getZ",
        "entry",
        "address",
        "t",
        "entries",
        "clear",
        "hasMoreCubes",
        "cubesToSave",
        "getBatch",
        "entries",
        "CubesBatchSize",
        "entry",
        "entries",
        "data",
        "IONbtWriter",
        "writeNbtBytes",
        "entry",
        "nbt",
        "cubes",
        "put",
        "entry",
        "address",
        "data",
        "numCubesSaved",
        "numCubeBytesSaved",
        "data",
        "length",
        "t",
        "err",
        "format",
        "getX",
        "entry",
        "address",
        "getY",
        "entry",
        "address",
        "getZ",
        "entry",
        "address",
        "t",
        "entries",
        "clear",
        "numColumnsRemaining",
        "columnsToSave",
        "size",
        "numCubesRemaining",
        "cubesToSave",
        "size",
        "db",
        "commit",
        "diff",
        "currentTimeMillis",
        "start",
        "LOGGER",
        "debug",
        "numColumnsSaved",
        "numColumnsRemaining",
        "numColumnBytesSaved",
        "numCubesSaved",
        "numCubesRemaining",
        "numCubeBytesSaved",
        "diff",
        "hasMoreColumns",
        "hasMoreCubes",
        "t",
        "err",
        "t",
        "cubesToSave",
        "size",
        "columnsToSave",
        "size",
        "message",
        "LOGGER",
        "isErrorEnabled",
        "err",
        "message",
        "LOGGER",
        "error",
        "message",
        "message",
        "t",
        "LOGGER",
        "isErrorEnabled",
        "err",
        "message",
        "t",
        "printStackTrace",
        "LOGGER",
        "error",
        "message",
        "t"
    ],
    "literals": [
        "\"Initializing db connection...\"",
        "\"cubes.dim%d.db\"",
        "\"Connected to db at {}\"",
        "\"columns\"",
        "\"chunks\"",
        "\"Attempt to flush() CubeIO when there are remaining cubes to save! Saving remaining cubes to avoid corruption\"",
        "\"WARNING!!!\"",
        "\"Shutdown hook removing failed!\"",
        "\"This may cause memory leak and/or crash\"",
        "\"DB already closed!\"",
        "\"Unable to write column (%d, %d)\"",
        "\"Unable to write cube %d, %d, %d\"",
        "\"Wrote {} columns ({} remaining) ({}k) and {} cubes ({} remaining) ({}k) in {} ms\"",
        "\"Exception occurred when saving cubes\""
    ],
    "variables": [
        "address",
        "nbt",
        "world",
        "db",
        "columns",
        "cubes",
        "columnsToSave",
        "cubesToSave",
        "theShutdownHook"
    ],
    "comments": [
        "init database connection",
        "NOTE: could set different cache settings",
        "the default is a hash map cache with 32768 entries",
        "see: http://www.mapdb.org/features.html",
        "we can't use closeOnJvmShutdown() because Minecraft saves all unsaved things on shutdown",
        "so the DB will be closed while we are still saving.",
        "also we need to save the thread into field because in client environment we need to remove the shutdown hook",
        "init chunk save queue",
        "does the database have the column?",
        "returning null tells the world to generate a new column",
        "read the NBT",
        "restore the column",
        "does the database have the cube?",
        "restore the cube",
        "NOTE: this function blocks the world thread",
        "make it as fast as possible by offloading processing to the IO thread",
        "except we have to write the NBT in this thread to avoid problems",
        "with concurrent access to world data structures",
        "add the column to the save queue",
        "signal the IO thread to process the save queue",
        "NOTE: this function blocks the world thread, so make it fast",
        "signal the IO thread to process the save queue",
        "NOTE: return true to redo this call (used for batching)",
        "save a batch of columns",
        "save the column",
        "save a batch of cubes",
        "save the cube",
        "flush changes to disk"
    ],
    "docstrings": [
        "*  This file is part of Cubic Chunks Mod, licensed under the MIT License (MIT).\n *\n *  Copyright (c) 2015 contributors\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"Software\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.",
        "* Method that prints error message even when shutting down (ie. LOGGER is disabled)",
        "* Method that prints error message even when shutting down (ie. LOGGER is disabled)"
    ],
    "functions": [
        "SaveEntry",
        "DB",
        "initializeDBConnection",
        "CubeIO",
        "run",
        "flush",
        "Column",
        "loadColumn",
        "Cube",
        "loadCubeAndAddToColumn",
        "saveColumn",
        "saveCube",
        "writeNextIO",
        "err",
        "err"
    ],
    "classes": [
        "CubeIO",
        "SaveEntry"
    ]
}