{
    "identifiers": [
        "ora4mas",
        "nopl",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileNotFoundException",
        "java",
        "io",
        "FileReader",
        "java",
        "io",
        "StringReader",
        "java",
        "util",
        "logging",
        "Logger",
        "org",
        "w3c",
        "dom",
        "Document",
        "org",
        "w3c",
        "dom",
        "Element",
        "cartago",
        "OPERATION",
        "jason",
        "asSyntax",
        "ASSyntax",
        "jason",
        "util",
        "Config",
        "moise",
        "common",
        "MoiseException",
        "npl",
        "NPLInterpreter",
        "npl",
        "NormativeFailureException",
        "npl",
        "NormativeProgram",
        "npl",
        "parser",
        "ParseException",
        "npl",
        "parser",
        "nplp",
        "obsPropBoards",
        "logger",
        "Logger",
        "getLogger",
        "getName",
        "oeId",
        "getCreatorId",
        "getWorkspaceId",
        "getName",
        "nbId",
        "getId",
        "getName",
        "nengine",
        "nengine",
        "init",
        "installNormativeSignaler",
        "equals",
        "Config",
        "get",
        "getProperty",
        "Config",
        "START_WEB_OI",
        "w",
        "WebInterface",
        "get",
        "w",
        "registerOEBrowserView",
        "oeId",
        "nbId",
        "e",
        "e",
        "printStackTrace",
        "OPERATION",
        "nplProgram",
        "p",
        "f",
        "nplProgram",
        "f",
        "exists",
        "nplProgram",
        "program",
        "p",
        "nplProgram",
        "program",
        "p",
        "nengine",
        "loadNP",
        "p",
        "getRoot",
        "gui",
        "gui",
        "setNormativeProgram",
        "getNPLSrc",
        "OPERATION",
        "kind",
        "schId",
        "getId",
        "getName",
        "kind",
        "equals",
        "gui",
        "GUIInterface",
        "add",
        "schId",
        "schId",
        "nengine",
        "updateGUIThread",
        "updateGUIThread",
        "start",
        "updateGuiOE",
        "gui",
        "setNormativeProgram",
        "getNPLSrc",
        "kind",
        "equals",
        "OPERATION",
        "f",
        "nengine",
        "addFact",
        "ASSyntax",
        "parseLiteral",
        "f",
        "nengine",
        "verifyNorms",
        "updateGuiOE",
        "OPERATION",
        "f",
        "nengine",
        "removeFact",
        "ASSyntax",
        "parseLiteral",
        "f",
        "nengine",
        "verifyNorms",
        "updateGuiOE",
        "Override",
        "nengine",
        "getNormsString",
        "nengine",
        "getAsDOM"
    ],
    "literals": [
        "\"fact_provider\"",
        "\"false\"",
        "\"/norm/\"",
        "\"inspector_gui(on)\"",
        "\"... Norm Board \"",
        "\" ...\"",
        "\"inspector_gui(off)\"",
        "\"not implemented yet, ask the developers to do so.\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Artifact to manage a normative program (NPL)\n * <br/><br/>\n * \n * <b>Operations</b> (see details in the methods list below):\n * <ul>\n * <li>commitMission\n * <li>leaveMission\n * <li>goalAchieved\n * <li>setArgumentValue\n * <li>resetGoal\n * <li>destroy\n * </ul>\n * \n * <b>Observable properties</b>:\n * <ul>\n * <li>commitment(ag,mission,sch): agent ag is committed to the mission in the scheme (we have as many obs prop as commitments).</br>\n *     e.g. <code>commitment(bob,mission1,s1)</code>\n * <li>groups: a list of groups responsible for the scheme.</br>\n *     e.g. <code>groups([g1])</code>\n * <li>goalState(schId, goal, list of committed agents, list of agents that performed the goal, state); where states are: waiting, enabled, satisfied).</br>\n *     e.g. <code>goalState(s1,g5,[alice,bob],[alice],satisfied)</code>\n * <li>specification: the specification of the scheme in the OS (a prolog like representation).\n * <li>obligation(ag,reason,goal,deadline): current active obligations.</br>\n *     e.g. <code>obligation(bob,ngoal(s1,mission1,g5),done(s1,bid,bob),1475417322254)</code>\n * <li>goalArgument(schemeId, goalId, argId, value): value of goals' arguments, defined by the operation setArgumentValue</br>\n *     e.g. <code>goalArgument(sch1, winner, \"W\", \"Bob\")</code>\n * </ul>\n * \n * <b>Signals</b> (obligation o has the form: obligation(to whom, maintenance condition, what, deadline)):\n * <ul>\n * <li>oblCreated(o): the obligation <i>o</i> is created.\n * <li>oblFulfilled(o): the obligation <i>o</i> is fulfilled\n * <li>oblUnfulfilled(o): the obligation <i>o</i> is unfulfilled (e.g. by timeout).\n * <li>oblInactive(o): the obligation <i>o</i> is inactive (e.g. its maintenance condition does not hold anymore).</br>\n *    e.g. <code>o = obligation(Ag,_,done(Sch,bid,Ag), TTF)</code> if the <code>bid</code> is a performance goal and\n *         <code>o = obligation(Ag,_,satisfied(Sch,bid), TTF)</code> if the <code>bid</code> is an achievement goal.\n * <li>normFailure(f): the failure <i>f</i> has happened (e.g. due some regimentation).</br>\n *    e.g. <code>f = fail(mission_permission(Ag,M,Sch))</code>. The f comes from the normative program.\n * </ul>\n * \n * @author Jomi",
        "* Initialises the normative artifact",
        "* Loads a normative program\n     * \n     * @param nplProgram       a string with the NPL program (or a file name)\n     *\n     * @throws ParseException  if the OS file is not correct\n     * @throws MoiseException  if schType was not specified"
    ],
    "functions": [
        "init",
        "load",
        "debug",
        "addFact",
        "removeFact",
        "getNPLSrc",
        "getStyleSheetName",
        "Element",
        "getAsDOM"
    ],
    "classes": [
        "NormativeBoard"
    ]
}