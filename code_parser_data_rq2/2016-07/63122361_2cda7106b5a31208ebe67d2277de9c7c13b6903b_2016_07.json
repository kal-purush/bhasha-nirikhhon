{
    "identifiers": [
        "os",
        "sys",
        "json",
        "time",
        "datetime",
        "networkx",
        "nx",
        "nx",
        "Graph",
        "datetime",
        "datetime",
        "fromtimestamp",
        "line",
        "json",
        "loads",
        "line",
        "node_0",
        "node_1",
        "data",
        "data",
        "data",
        "datetime",
        "datetime",
        "strptime",
        "time_str",
        "TIME_FORMAT",
        "node_0",
        "node_1",
        "time",
        "e",
        "time",
        "time_max",
        "time",
        "time_elapsed",
        "datetime",
        "timedelta",
        "seconds",
        "TIME_WINDOW",
        "time_max",
        "time",
        "time",
        "within_time_window",
        "time",
        "graph",
        "add_edge",
        "node_0",
        "node_1",
        "time",
        "time_updated",
        "edge",
        "graph",
        "edges",
        "data",
        "edge",
        "edge",
        "edge",
        "within_time_window",
        "time",
        "graph",
        "remove_edge",
        "node_0",
        "node_1",
        "len",
        "graph",
        "neighbors",
        "node_0",
        "graph",
        "remove_node",
        "node_0",
        "len",
        "graph",
        "neighbors",
        "node_1",
        "graph",
        "remove_node",
        "node_1",
        "sorted",
        "len",
        "graph",
        "neighbors",
        "node",
        "node",
        "graph",
        "nodes",
        "len",
        "degrees",
        "len",
        "degrees",
        "degrees",
        "mid",
        "degrees",
        "mid",
        "degrees",
        "mid",
        "round",
        "median",
        "file_path",
        "open",
        "file_path",
        "f",
        "f",
        "write",
        "format",
        "median",
        "path_input",
        "path_output",
        "os",
        "path",
        "isfile",
        "path_output",
        "os",
        "remove",
        "path_output",
        "ProcessPayment",
        "open",
        "path_input",
        "f",
        "line",
        "f",
        "payment",
        "check_input",
        "line",
        "payment",
        "process_payment",
        "payment",
        "prune_payments",
        "payment",
        "get_median_degree",
        "payment",
        "save_to_file",
        "path_output",
        "len",
        "sys",
        "argv",
        "main",
        "sys",
        "argv",
        "sys",
        "argv"
    ],
    "literals": [
        "\"%Y-%m-%dT%H:%M:%SZ\"",
        "'target'",
        "'actor'",
        "'created_time'",
        "'Incomplete payment data'",
        "'created_time'",
        "'created_time'",
        "'a'",
        "'{:.2f}\\n'",
        "'r'",
        "'__main__'",
        "'Usage: python ./src/rolling_median.py ./venmo_input/venmo-trans.txt ./venmo_output/output.txt'"
    ],
    "variables": [
        "TIME_FORMAT",
        "TIME_WINDOW",
        "graph",
        "time_updated",
        "time_max",
        "time",
        "node_0",
        "node_1",
        "data",
        "time_str",
        "time",
        "time_elapsed",
        "time_updated",
        "time_max",
        "time_updated",
        "node_0",
        "node_1",
        "time",
        "degrees",
        "mid",
        "median",
        "median",
        "median",
        "payment"
    ],
    "comments": [
        "non-standard library",
        "Parameters",
        "initialize to Jan 1st 1970",
        "load data",
        "parse time into datetime object",
        "check for complete payment info",
        "I would print error to debug if necessary",
        "check time_max has been changed and update time_max",
        "add to graph and return true if its time is within window",
        "add_edge() updates edge if it already exists and creates new nodes if they don't exist",
        "also remove nodes if they no longer have any neighbors",
        "get list of all degrees (number of neighbors) and sort in ascending order",
        "handle even or odd number list of degrees",
        "even",
        "odd",
        "round to 2 decimal places",
        "delete existing output file",
        "instantiate class object",
        "process input file line by line",
        "process rest of methods only if input is valid"
    ],
    "docstrings": [
        "'''\nInsight Data Science Coding Challenge Solution\nAuthor: Jiyoung Park\n'''",
        "'''\nclass to process venmo payments and calculate median degree\n'''",
        "'''\n\tinstantiate graph class and instance attributes\n\t'''",
        "'''\n\tcheck and update attributes if data entry is valid\n\t'''",
        "'''\n\tcheck if current time is within time window of maximum running time\n\t'''",
        "'''\n\tadd or update existing payment to graph if payment is valid\n\t'''",
        "'''\n\tprune outdated payments from graph\n\t'''",
        "'''\n\tcalculate median degree\n\t'''",
        "'''\n\tsave median degree to file\n\t'''"
    ],
    "functions": [
        "check_input",
        "within_time_window",
        "process_payment",
        "prune_payments",
        "get_median_degree",
        "save_to_file",
        "main"
    ],
    "classes": [
        "ProcessPayment"
    ]
}