{
    "identifiers": [
        "io",
        "vertx",
        "core",
        "net",
        "impl",
        "io",
        "netty",
        "channel",
        "EventLoop",
        "io",
        "vertx",
        "core",
        "streams",
        "impl",
        "OutboundWriteQueue",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicInteger",
        "java",
        "util",
        "Predicate",
        "io",
        "vertx",
        "core",
        "streams",
        "impl",
        "OutboundWriteQueue",
        "numberOfUnwritableSignals",
        "eventLoop",
        "numberOfUnwritableSignals",
        "writeQueue",
        "overflow",
        "eventLoop",
        "predicate",
        "eventLoop",
        "eventLoop",
        "writeQueue",
        "predicate",
        "eventLoop",
        "eventLoop",
        "eventLoop",
        "writeQueue",
        "Override",
        "t",
        "numberOfUnwritableSignals",
        "get",
        "message",
        "inEventLoop",
        "eventLoop",
        "inEventLoop",
        "flags",
        "inEventLoop",
        "flags",
        "writeQueue",
        "add",
        "message",
        "overflow",
        "flags",
        "OutboundWriteQueue",
        "DRAIN_REQUIRED_MASK",
        "flags",
        "OutboundWriteQueue",
        "QUEUE_WRITABLE_MASK",
        "handleWriteQueueDrained",
        "numberOfUnwritableSignals",
        "flags",
        "flags",
        "writeQueue",
        "submit",
        "message",
        "flags",
        "OutboundWriteQueue",
        "DRAIN_REQUIRED_MASK",
        "eventLoop",
        "execute",
        "drainWriteQueue",
        "flags",
        "OutboundWriteQueue",
        "QUEUE_UNWRITABLE_MASK",
        "val",
        "numberOfUnwritableSignals",
        "incrementAndGet",
        "val",
        "numberOfUnwritableSignals",
        "get",
        "eventLoop",
        "inEventLoop",
        "overflow",
        "startDraining",
        "flags",
        "writeQueue",
        "drain",
        "overflow",
        "flags",
        "OutboundWriteQueue",
        "DRAIN_REQUIRED_MASK",
        "flags",
        "OutboundWriteQueue",
        "QUEUE_WRITABLE_MASK",
        "handleWriteQueueDrained",
        "numberOfUnwritableSignals",
        "flags",
        "stopDraining",
        "startDraining",
        "flags",
        "writeQueue",
        "drain",
        "overflow",
        "flags",
        "OutboundWriteQueue",
        "DRAIN_REQUIRED_MASK",
        "flags",
        "OutboundWriteQueue",
        "QUEUE_WRITABLE_MASK",
        "handleWriteQueueDrained",
        "numberOfUnwritableSignals",
        "flags",
        "stopDraining",
        "numberOfSignals",
        "val",
        "numberOfUnwritableSignals",
        "addAndGet",
        "numberOfSignals",
        "val",
        "numberOfSignals",
        "val",
        "writeQueueDrained",
        "eventLoop",
        "inEventLoop",
        "writeQueue",
        "clear"
    ],
    "literals": [],
    "variables": [
        "eventLoop",
        "writeQueue",
        "overflow",
        "flags"
    ],
    "comments": [
        "State accessed exclusively by the event loop thread",
        "Can be negative temporarily"
    ],
    "docstrings": [
        "* Outbound write queue for event-loop and channel like structures.",
        "* Create a queue.\n   *\n   * @param eventLoop the queue event-loop",
        "* Create a queue.\n   *\n   * @param eventLoop the queue event-loop",
        "* @return whether the queue is writable, this can be called from any thread",
        "* Write a {@code message} to the queue\n   *\n   * @param message the message to be written\n   * @return whether the writer can continue/stop writing to the queue",
        "* Attempt to drain the queue Drain the queue.",
        "* Clear the queue.\n   *\n   * @return the pending writes",
        "* Called when the queue becomes writable again."
    ],
    "functions": [
        "OutboundMessageQueue",
        "OutboundMessageQueue",
        "test",
        "isWritable",
        "write",
        "drain",
        "drainWriteQueue",
        "handleWriteQueueDrained",
        "clear",
        "writeQueueDrained",
        "startDraining",
        "stopDraining"
    ],
    "classes": [
        "OutboundMessageQueue"
    ]
}