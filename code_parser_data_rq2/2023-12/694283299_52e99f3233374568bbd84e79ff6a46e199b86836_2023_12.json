{
    "identifiers": [
        "com",
        "myproject",
        "bikereviewapp",
        "service",
        "impl",
        "com",
        "myproject",
        "bikereviewapp",
        "entity",
        "Role",
        "com",
        "myproject",
        "bikereviewapp",
        "entity",
        "User",
        "com",
        "myproject",
        "bikereviewapp",
        "exceptionhandler",
        "exception",
        "EntityNotFoundException",
        "com",
        "myproject",
        "bikereviewapp",
        "exceptionhandler",
        "exception",
        "UserDuplicationException",
        "com",
        "myproject",
        "bikereviewapp",
        "repository",
        "UserRepository",
        "com",
        "myproject",
        "bikereviewapp",
        "service",
        "abstraction",
        "UserService",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Autowired",
        "org",
        "springframework",
        "boot",
        "test",
        "context",
        "SpringBootTest",
        "org",
        "springframework",
        "boot",
        "test",
        "mock",
        "mockito",
        "MockBean",
        "org",
        "springframework",
        "security",
        "crypto",
        "password",
        "PasswordEncoder",
        "java",
        "util",
        "Optional",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "org",
        "mockito",
        "ArgumentMatchers",
        "org",
        "mockito",
        "Mockito",
        "SpringBootTest",
        "classes",
        "MockBean",
        "userRepository",
        "MockBean",
        "passwordEncoder",
        "Autowired",
        "userService",
        "Test",
        "id",
        "user",
        "id",
        "Role",
        "CLIENT",
        "when",
        "userRepository",
        "findById",
        "id",
        "thenReturn",
        "Optional",
        "of",
        "user",
        "assertEquals",
        "user",
        "userService",
        "getById",
        "id",
        "verify",
        "userRepository",
        "findById",
        "id",
        "Test",
        "id",
        "when",
        "userRepository",
        "findById",
        "id",
        "thenReturn",
        "Optional",
        "empty",
        "assertThrows",
        "userService",
        "getById",
        "id",
        "verify",
        "userRepository",
        "findById",
        "id",
        "Test",
        "id",
        "username",
        "user",
        "id",
        "username",
        "Role",
        "CLIENT",
        "when",
        "userRepository",
        "findByUsername",
        "username",
        "thenReturn",
        "Optional",
        "of",
        "user",
        "assertEquals",
        "user",
        "userService",
        "getByUsername",
        "username",
        "verify",
        "userRepository",
        "findByUsername",
        "username",
        "Test",
        "username",
        "when",
        "userRepository",
        "findByUsername",
        "username",
        "thenReturn",
        "Optional",
        "empty",
        "assertThrows",
        "userService",
        "getByUsername",
        "username",
        "verify",
        "userRepository",
        "findByUsername",
        "username",
        "Test",
        "username",
        "user",
        "username",
        "Role",
        "CLIENT",
        "when",
        "userRepository",
        "existsUserByUsername",
        "username",
        "thenReturn",
        "userService",
        "create",
        "user",
        "verify",
        "userRepository",
        "existsUserByUsername",
        "username",
        "verify",
        "userRepository",
        "save",
        "Test",
        "username",
        "rawPassword",
        "encodedPassword",
        "user",
        "username",
        "rawPassword",
        "Role",
        "CLIENT",
        "expectedUser",
        "user",
        "getId",
        "user",
        "getUsername",
        "encodedPassword",
        "user",
        "isEnabled",
        "user",
        "getRole",
        "user",
        "getPublicName",
        "when",
        "userRepository",
        "existsUserByUsername",
        "username",
        "thenReturn",
        "when",
        "passwordEncoder",
        "encode",
        "rawPassword",
        "thenReturn",
        "encodedPassword",
        "when",
        "userRepository",
        "save",
        "expectedUser",
        "thenReturn",
        "expectedUser",
        "assertEquals",
        "expectedUser",
        "userService",
        "create",
        "user",
        "verify",
        "userRepository",
        "existsUserByUsername",
        "username",
        "verify",
        "passwordEncoder",
        "encode",
        "rawPassword",
        "verify",
        "userRepository",
        "save",
        "expectedUser",
        "Test",
        "username",
        "user",
        "username",
        "Role",
        "CLIENT",
        "when",
        "userRepository",
        "existsUserByUsername",
        "username",
        "thenReturn",
        "assertThrows",
        "userService",
        "create",
        "user",
        "verify",
        "userRepository",
        "existsUserByUsername",
        "username",
        "verify",
        "userRepository",
        "save"
    ],
    "literals": [
        "\"someUsername\"",
        "\"somePassword\"",
        "\"somePublicName\"",
        "\"someUsername\"",
        "\"somePassword\"",
        "\"somePublicName\"",
        "\"someUsername\"",
        "\"someUsername\"",
        "\"somePassword\"",
        "\"somePublicName\"",
        "\"someUsername\"",
        "\"rawPassword\"",
        "\"encodedPassword\"",
        "\"somePublicName\"",
        "\"someUsername\"",
        "\"somePassword\"",
        "\"somePublicName\""
    ],
    "variables": [
        "userRepository",
        "passwordEncoder",
        "userService"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "getById_shouldReturnUser_whenUserWasFound",
        "getById_shouldThrowException_whenUserWasNotFound",
        "getByUsername_shouldReturnUser_whenUserWasFound",
        "getByUsername_shouldThrowException_whenUserWasNotFound",
        "create_shouldSaveUser_ifUserIsUnique",
        "create_shouldSaveAndReturnUserWithEncodedPassword_ifUserIsUnique",
        "create_shouldThrowException_ifUserIsDuplicated"
    ],
    "classes": [
        "UserServiceImplTest"
    ]
}