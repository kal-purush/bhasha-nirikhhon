{
    "identifiers": [
        "i",
        "len",
        "i",
        "c",
        "i",
        "c",
        "utf8CharCodes",
        "c",
        "c",
        "utf8CharCodes",
        "c",
        "c",
        "utf8CharCodes",
        "c",
        "c",
        "c",
        "utf8CharCodes",
        "i",
        "i",
        "crc",
        "i",
        "j",
        "j",
        "crc",
        "crc",
        "crc",
        "crc",
        "table",
        "i",
        "crc",
        "table",
        "cachedCrcTable",
        "cachedCrcTable",
        "buildCRCTable",
        "cachedCrcTable",
        "utf8encode",
        "getCrcTable",
        "utf8CharCodes",
        "i",
        "len",
        "i",
        "y",
        "crc",
        "utf8CharCodes",
        "i",
        "crc",
        "crc",
        "crcTable",
        "y",
        "crc",
        "node",
        "infoParts",
        "node",
        "node",
        "children",
        "nodeType",
        "node",
        "childCount",
        "nodeType",
        "start",
        "escapeTextForHtml",
        "node",
        "start",
        "escapeTextForHtml",
        "node",
        "start",
        "nodeInfo",
        "end",
        "start",
        "infoParts",
        "start",
        "i",
        "childCount",
        "i",
        "nodeToInfoString",
        "children",
        "i",
        "infoParts",
        "end",
        "infoParts",
        "end",
        "infoParts",
        "el",
        "nodeToInfoString",
        "el",
        "crc32",
        "info"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "\"&lt;\"",
        "\"&gt;\"",
        "string",
        "\":\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"<!--\"",
        "\"\"",
        "\"-->\"",
        "\"<\"",
        "\">\"",
        "\"</>\"",
        "string",
        "\"\""
    ],
    "variables": [
        "crc32",
        "utf8CharCodes",
        "i",
        "len",
        "c",
        "cachedCrcTable",
        "table",
        "i",
        "j",
        "crc",
        "utf8CharCodes",
        "crc",
        "crcTable",
        "i",
        "len",
        "y",
        "nodeType",
        "children",
        "childCount",
        "nodeInfo",
        "start",
        "end",
        "i",
        "info"
    ],
    "comments": [
        "Stripped-down and adapted Rangy library\n\nOriginal: https://github.com/timdown/rangy/ (MIT license)\n\nPorted because\n\n- we only need modern browsers due to requiring the CSS Highlight API\n  (the original works to support IE6+, which we don't need)\n- there's a lot of other code we're not using\n- we want to use Typescript and the standard Web API as much as possible\n- the original Rangy loads slowly, and we don't want to have to defer\n  loading the Highlights system\n\nNeed to port:\n\n- checksum = rangy.getElementChecksum(el)\n- range = rangy.deserializeRange(serialized, containerEl)\n- ranges = selection.getAllRanges()\n- selection.isCollapsed\n- rangy.dom.isAncestorOf(el, range.commonAncestorContainer)\n- selection = rangy.getSelection\n- serialized = rangy.serializeSelection(selection, false [no checksum], containerEl)",
        "From rangy/lib/range-serializer.js",
        "Text node",
        "Comment",
        "Creates a string representation of the specified element's contents that is similar to innerHTML but omits all",
        "attributes and comments and includes child node counts. This is done instead of using innerHTML to work around",
        "IE <= 8's policy of including element properties in attributes, which ruins things by changing an element's",
        "innerHTML whenever the user changes an input within the element."
    ],
    "docstrings": [],
    "functions": [
        "utf8encode",
        "buildCRCTable",
        "getCrcTable",
        "escapeTextForHtml",
        "nodeToInfoString",
        "getElementChecksum"
    ],
    "classes": []
}