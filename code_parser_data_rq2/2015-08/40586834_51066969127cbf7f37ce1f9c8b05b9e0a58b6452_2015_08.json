{
    "identifiers": [
        "Utils",
        "element",
        "angular",
        "element",
        "Utils",
        "element",
        "child",
        "element",
        "child",
        "Utils",
        "sourceElement",
        "targetElement",
        "sourceElement",
        "i",
        "arr",
        "i",
        "arr",
        "i",
        "item",
        "item",
        "item",
        "targetElement",
        "key",
        "sourceVal",
        "targetVal",
        "targetVal",
        "sourceVal",
        "sourceVal",
        "targetVal",
        "targetElement",
        "key",
        "newVal",
        "angular",
        "app",
        "$",
        "$",
        "$",
        "viewportCenterX",
        "viewportCenterY",
        "item",
        "viewportCenterX",
        "viewportCenterX",
        "viewportCenterY",
        "viewportCenterY",
        "element",
        "element",
        "offset",
        "viewportCenterX",
        "viewportCenterX",
        "offset",
        "element",
        "offset",
        "element",
        "viewportCenterY",
        "viewportCenterY",
        "offset",
        "dx",
        "dx",
        "dy",
        "dy",
        "distance",
        "item",
        "delta",
        "viewportRadius",
        "item",
        "item",
        "distance",
        "item",
        "delta",
        "viewportRadius",
        "item",
        "item",
        "loadList",
        "item",
        "item",
        "item",
        "i",
        "loadList",
        "loadList",
        "i",
        "item",
        "item",
        "count",
        "item",
        "check",
        "viewportCenterX",
        "viewportCenterY",
        "item",
        "count",
        "clock",
        "clock",
        "val",
        "val",
        "loadList",
        "clock",
        "clock",
        "tick",
        "val",
        "clock",
        "clock",
        "cUrl",
        "url",
        "cUrl",
        "val",
        "Suspend",
        "val",
        "$http",
        "$q",
        "item",
        "CryptoJS",
        "item",
        "hash",
        "CryptoJS",
        "cache",
        "$http",
        "url",
        "$q",
        "req",
        "data",
        "data",
        "key",
        "data",
        "cache",
        "key",
        "data",
        "key",
        "defer",
        "defer",
        "item",
        "$q",
        "Suspend",
        "defer",
        "CryptoJS",
        "item",
        "item",
        "hash",
        "CryptoJS",
        "item",
        "cache",
        "defer",
        "cache",
        "item",
        "$http",
        "url",
        "item",
        "req",
        "data",
        "data",
        "key",
        "data",
        "cache",
        "key",
        "data",
        "key",
        "defer",
        "data",
        "item",
        "req",
        "defer",
        "defer",
        "el",
        "cb",
        "LoadListIdx",
        "loadList",
        "t",
        "el",
        "cb",
        "t",
        "el",
        "t",
        "clock",
        "clock",
        "tick",
        "id",
        "loadList",
        "id",
        "loadList",
        "clock",
        "clock",
        "scale",
        "app",
        "$parse",
        "slyCtrl",
        "$http",
        "$compile",
        "$scope",
        "$element",
        "$attrs",
        "$attrs",
        "url",
        "$",
        "$element",
        "i",
        "attrs",
        "i",
        "attrs",
        "i",
        "attrs",
        "i",
        "attrs",
        "i",
        "newElment",
        "name",
        "val",
        "$element",
        "newElment",
        "$compile",
        "newElment",
        "$scope",
        "$scope",
        "$element",
        "$attrs",
        "Image",
        "$element",
        "$element",
        "img",
        "$element",
        "$element",
        "img",
        "$element",
        "img",
        "ctx",
        "img",
        "img",
        "img",
        "$element",
        "img",
        "$element",
        "$attrs",
        "slyCtrl",
        "url",
        "meta",
        "meta",
        "height",
        "meta",
        "width",
        "meta",
        "meta",
        "divisor",
        "meta",
        "divisor",
        "meta",
        "dimSet",
        "$element",
        "meta",
        "$element",
        "meta",
        "$element",
        "slyCtrl",
        "$element",
        "$element",
        "$element",
        "img",
        "$element",
        "$element",
        "$element",
        "hasImage",
        "dimSet",
        "height",
        "img",
        "width",
        "img",
        "$element",
        "img",
        "$element",
        "img",
        "setImage",
        "img",
        "dimSet",
        "slyCtrl",
        "$element",
        "$element",
        "height",
        "vHeight",
        "width",
        "vWidth",
        "divisor",
        "el",
        "el",
        "scale",
        "el",
        "deltas",
        "deltas",
        "a",
        "b",
        "a",
        "b",
        "i",
        "deltas",
        "i",
        "height",
        "deltas",
        "i",
        "vHeight",
        "width",
        "deltas",
        "i",
        "vWidth",
        "deltas",
        "i",
        "url",
        "scale",
        "url",
        "deltas",
        "i",
        "url",
        "img",
        "url",
        "img",
        "url",
        "$element",
        "slyCtrl",
        "loadId"
    ],
    "literals": [
        "' '",
        "'sly'",
        "'slyCtrl'",
        "\"\"",
        "'$http'",
        "'$q'",
        "'*'",
        "'delay-load'",
        "'slySrc'",
        "'$parse'",
        "'slyCtrl'",
        "'$http'",
        "'$compile'",
        "'A'",
        "'<canvas></canvas>'",
        "'slySrc'",
        "'image format not supported by canvas. Switching back to normal img tag and disabling.'",
        "'<img/>'",
        "'sly-src'",
        "'ng-src'",
        "'opacity'",
        "'transition'",
        "'opacity 0.25s'",
        "'2d'",
        "'opacity'",
        "'img'",
        "'canvas has been swapped back to normal image'",
        "'slySrc'",
        "'height'",
        "'width'",
        "'sly-unloaded'",
        "'sly-unloaded'",
        "'sly-loading'",
        "'sly-unloaded'",
        "'sly-loading'",
        "'sly-loaded'",
        "'height'",
        "'width'",
        "'$1['",
        "']$2'",
        "'$destroy'"
    ],
    "variables": [
        "Utils",
        "child",
        "arr",
        "i",
        "item",
        "key",
        "sourceVal",
        "targetVal",
        "newVal",
        "app",
        "cache",
        "url",
        "Suspend",
        "loadList",
        "LoadListIdx",
        "clock",
        "scale",
        "tickCount",
        "viewportCenterX",
        "viewportCenterY",
        "count",
        "viewportRadius",
        "offset",
        "dx",
        "dy",
        "delta",
        "delta",
        "item",
        "element",
        "hash",
        "req",
        "defer",
        "item",
        "defer",
        "hash",
        "req",
        "item",
        "t",
        "url",
        "newElment",
        "attrs",
        "i",
        "name",
        "val",
        "height",
        "width",
        "divisor",
        "dimSet",
        "img",
        "hasImage",
        "ctx",
        "url",
        "loadId",
        "vHeight",
        "vWidth",
        "scale",
        "deltas",
        "i"
    ],
    "comments": [
        "Replace element with it's first child",
        "Copy attributes from sourceElement to targetElement, merging their values if the attribute is already present",
        "The distance from a corner of the viewport to the center multiplied by 125%",
        "Find the distance for a given element on the page from the center of the browesrs viewport",
        "If the element is less than viewportRadius check to see if the image needs to be loaded",
        "Make sure the element isn't in motion and has a chance of leaving the viewport before loading",
        "scan the queue of elements that maybe loaded",
        "enable checking for loadable elements",
        "Url for looking up an images dimensions",
        "check if other queries are happen at the same time and wait",
        "switch back to the img tag if the format is not able to be drawn into a canvas",
        "swap the slySrc directive to the angular src",
        "draw the image into the canvas",
        "find the cloesest image that fits the display size of the image on screen"
    ],
    "docstrings": [
        "* Released under the MIT license by James Schroer, August 2015."
    ],
    "functions": [
        "tick",
        "check",
        "distance",
        "setImage"
    ],
    "classes": []
}