{
    "identifiers": [
        "createStore",
        "combineReducers",
        "combineReducers",
        "state",
        "action",
        "state",
        "action",
        "action",
        "state",
        "action",
        "state",
        "createStore",
        "reducer",
        "message",
        "store_0",
        "sayActionCreator",
        "store_0",
        "message",
        "setTimeout",
        "message",
        "dispatch",
        "setTimeout",
        "dispatch"
    ],
    "literals": [
        "'redux'",
        "'speaker was called with state'",
        "'and action'",
        "'SAY'",
        "'SAY'",
        "\"\\n\"",
        "'Running our normal action creator:'",
        "\"\\n\"",
        "'Hi'",
        "'store_0 state after action SET_NAME:'",
        "'SAY'",
        "'SAY'"
    ],
    "variables": [
        "reducer",
        "store_0",
        "sayActionCreator",
        "asyncSayActionCreator_0",
        "asyncSayActionCreator_1"
    ],
    "comments": [
        "Tutorial 8 - dispatch-async-action-1.js",
        "We saw previously how we could dispatch actions and how thoses actions will modify",
        "the state of our application thanks to reducers.",
        "But so far we've only considered synchronous actions, or more exactly actions creators",
        "that produce an action synchronously: when called, an action is returned immediately.",
        "Let's now imagine a simple asynchronous use-case:",
        "1) user click on button \"Say Hi in 2 second\"",
        "2) When button \"A\" is clicked, we'd like to show message \"Hi\" after 2 second elapsed",
        "3) 2 seconds later, our view is updated with the message \"Hi\"",
        "Of course this message is part of our application state so we have to save it",
        "in Redux store. But what we want, is to have our store to save the message",
        "only 2 second after the action creator is called.",
        "And if we were to call an action creator like we did until now...",
        "Output (skipping initialization output):",
        "Sun Aug 02 2015 01:03:05 GMT+0200 (CEST)",
        "speaker was called with state {} and action { type: 'SAY', message: 'Hi' }",
        "Sun Aug 02 2015 01:03:05 GMT+0200 (CEST)",
        "store_0 state after action SET_NAME: { speaker: { message: 'Hi' } }",
        "... then we see that our store is updated immediately.",
        "What we'd like instead is an action creator that looks a bit like this:",
        "But then our action creator would not return an action, it would return \"undefined\". So this is not",
        "quite the solution we're looking for.",
        "Here's the trick: instead of returning an action, we'll return a function. And this function will be the",
        "one to dispatch the action when it seems appropriate to do so. But if we want our function to be able to",
        "dispatch the action it should be given the dispatch function. Then, this should look like this:",
        "Again you'll notice that our action creator is not returning an action, it is returning a function.",
        "So there are high chances that our reducers won't know what to do with it. But we never know, so let's",
        "try it out and find out what would happen...",
        "Go to next tutorial: dispatch_action_creator-2.js"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}