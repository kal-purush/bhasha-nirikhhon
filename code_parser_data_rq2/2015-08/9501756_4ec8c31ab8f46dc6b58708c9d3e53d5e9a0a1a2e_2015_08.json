{
    "identifiers": [
        "NET40",
        "SL5",
        "Catel",
        "Threading",
        "Collections",
        "Generic",
        "Threading",
        "Threading",
        "Tasks",
        "USE_TASKEX",
        "Microsoft",
        "Runtime",
        "CompilerServices",
        "Runtime",
        "CompilerServices",
        "Action",
        "action",
        "USE_TASKEX",
        "TaskEx",
        "Run",
        "action",
        "Run",
        "action",
        "Action",
        "action",
        "CancellationToken",
        "cancellationToken",
        "USE_TASKEX",
        "TaskEx",
        "Run",
        "action",
        "cancellationToken",
        "Run",
        "action",
        "Func",
        "USE_TASKEX",
        "TaskEx",
        "Run",
        "Run",
        "Func",
        "CancellationToken",
        "cancellationToken",
        "USE_TASKEX",
        "TaskEx",
        "Run",
        "cancellationToken",
        "Run",
        "cancellationToken",
        "TResult",
        "TResult",
        "Func",
        "TResult",
        "USE_TASKEX",
        "TaskEx",
        "Run",
        "Run",
        "TResult",
        "TResult",
        "Func",
        "TResult",
        "CancellationToken",
        "cancellationToken",
        "USE_TASKEX",
        "TaskEx",
        "Run",
        "cancellationToken",
        "Run",
        "cancellationToken",
        "TResult",
        "TResult",
        "Func",
        "TResult",
        "USE_TASKEX",
        "TaskEx",
        "Run",
        "Run",
        "TResult",
        "TResult",
        "Func",
        "TResult",
        "CancellationToken",
        "cancellationToken",
        "USE_TASKEX",
        "TaskEx",
        "Run",
        "cancellationToken",
        "Run",
        "cancellationToken",
        "TResult",
        "TResult",
        "TResult",
        "result",
        "USE_TASKEX",
        "TaskEx",
        "FromResult",
        "result",
        "FromResult",
        "result",
        "TResult",
        "TResult",
        "TResult",
        "tasks",
        "USE_TASKEX",
        "TaskEx",
        "WhenAll",
        "tasks",
        "WhenAll",
        "tasks",
        "TResult",
        "TResult",
        "TResult",
        "tasks",
        "USE_TASKEX",
        "TaskEx",
        "WhenAll",
        "tasks",
        "WhenAll",
        "tasks",
        "tasks",
        "USE_TASKEX",
        "TaskEx",
        "WhenAll",
        "tasks",
        "WhenAll",
        "tasks",
        "tasks",
        "USE_TASKEX",
        "TaskEx",
        "WhenAll",
        "tasks",
        "WhenAll",
        "tasks",
        "USE_TASKEX",
        "TaskEx",
        "Yield",
        "Yield",
        "millisecondsDelay",
        "USE_TASKEX",
        "TaskEx",
        "Delay",
        "millisecondsDelay",
        "Delay",
        "millisecondsDelay",
        "tasks",
        "USE_TASKEX",
        "TaskEx",
        "WhenAny",
        "tasks",
        "WhenAny",
        "tasks",
        "tasks",
        "USE_TASKEX",
        "TaskEx",
        "WhenAny",
        "tasks",
        "WhenAny",
        "tasks",
        "TResult",
        "TResult",
        "TResult",
        "tasks",
        "USE_TASKEX",
        "TaskEx",
        "WhenAny",
        "tasks",
        "WhenAny",
        "tasks",
        "TResult",
        "TResult",
        "TResult",
        "tasks",
        "USE_TASKEX",
        "TaskEx",
        "WhenAny",
        "tasks",
        "WhenAny",
        "tasks"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "--------------------------------------------------------------------------------------------------------------------",
        "<copyright file=\"TaskShim.cs\" company=\"Catel development team\">",
        "Copyright (c) 2008 - 2015 Catel development team. All rights reserved.",
        "</copyright>",
        "--------------------------------------------------------------------------------------------------------------------",
        "Task wrapper so it works on all platforms.",
        "</summary>",
        "<remarks>This code originally comes from https://github.com/StephenCleary/AsyncEx/blob/77b9711c2c5fd4ca28b220ce4c93d209eeca2b4a/Source/Unit%20Tests/Tests%20(NET40)/Internal/TaskShim.cs.</remarks>",
        "Queues the specified work to run on the ThreadPool and returns a task handle for that work.",
        "</summary>",
        "<param name=\"action\">The work to execute asynchronously.</param>",
        "<returns>A task that represents the work queued to execute in the ThreadPool.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"action\" /> parameter was null.</exception>",
        "Queues the specified work to run on the ThreadPool and returns a task handle for that work.",
        "</summary>",
        "<param name=\"action\">The work to execute asynchronously.</param>",
        "<param name=\"cancellationToken\">The cancellation token.</param>",
        "<returns>A task that represents the work queued to execute in the ThreadPool.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"action\" /> parameter was null.</exception>",
        "Queues the specified work to run on the ThreadPool and returns a proxy for the  task returned by <paramref name=\"function\" />.",
        "</summary>",
        "<param name=\"function\">The work to execute asynchronously.</param>",
        "<returns>A task that represents a proxy for the task returned by <paramref name=\"function\" />.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"function\" /> parameter was null.</exception>",
        "Queues the specified work to run on the ThreadPool and returns a proxy for the  task returned by <paramref name=\"function\" />.",
        "</summary>",
        "<param name=\"function\">The work to execute asynchronously.</param>",
        "<param name=\"cancellationToken\">The cancellation token.</param>",
        "<returns>A task that represents a proxy for the task returned by <paramref name=\"function\" />.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"function\" /> parameter was null.</exception>",
        "Queues the specified work to run on the ThreadPool and returns a Task(TResult) handle for that work.",
        "</summary>",
        "<typeparam name=\"TResult\">The result type of the task.</typeparam>",
        "<param name=\"function\">The work to execute asynchronously.</param>",
        "<returns>A Task(TResult) that represents the work queued to execute in the ThreadPool.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"function\" /> parameter was null.</exception>",
        "Queues the specified work to run on the ThreadPool and returns a Task(TResult) handle for that work.",
        "</summary>",
        "<typeparam name=\"TResult\">The result type of the task.</typeparam>",
        "<param name=\"function\">The work to execute asynchronously.</param>",
        "<param name=\"cancellationToken\">The cancellation token.</param>",
        "<returns>A Task(TResult) that represents the work queued to execute in the ThreadPool.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"function\" /> parameter was null.</exception>",
        "Queues the specified work to run on the ThreadPool and returns a proxy for the  Task(TResult) returned by <paramref name=\"function\" />.",
        "</summary>",
        "<typeparam name=\"TResult\">The type of the result returned by the proxy task.</typeparam>",
        "<param name=\"function\">The work to execute asynchronously</param>",
        "<returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by <paramref name=\"function\" />.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"function\" /> parameter was null.</exception>",
        "Queues the specified work to run on the ThreadPool and returns a proxy for the  Task(TResult) returned by <paramref name=\"function\" />.",
        "</summary>",
        "<typeparam name=\"TResult\">The type of the result returned by the proxy task.</typeparam>",
        "<param name=\"function\">The work to execute asynchronously</param>",
        "<param name=\"cancellationToken\">The cancellation token.</param>",
        "<returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by <paramref name=\"function\" />.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"function\" /> parameter was null.</exception>",
        "Creates a <see cref=\"T:System.Threading.Tasks.Task`1\" /> that's completed successfully with the specified result.",
        "</summary>",
        "<typeparam name=\"TResult\">The type of the result returned by the task.</typeparam>",
        "<param name=\"result\">The result to store into the completed task.</param>",
        "<returns>The successfully completed task.</returns>",
        "Creates a task that will complete when all of the supplied tasks have completed.",
        "</summary>",
        "<typeparam name=\"TResult\">The type of the completed task.</typeparam>",
        "<param name=\"tasks\">The tasks to wait on for completion.</param>",
        "<returns>A task that represents the completion of all of the supplied tasks.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"tasks\" /> argument was null.</exception>",
        "<exception cref=\"T:System.ArgumentException\">The <paramref name=\"tasks\" /> collection contained a null task.</exception>",
        "Creates a task that will complete when all of the supplied tasks have completed.",
        "</summary>",
        "<typeparam name=\"TResult\">The type of the completed task.</typeparam>",
        "<param name=\"tasks\">The tasks to wait on for completion.</param>",
        "<returns>A task that represents the completion of all of the supplied tasks.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"tasks\" /> argument was null.</exception>",
        "<exception cref=\"T:System.ArgumentException\">The <paramref name=\"tasks\" /> array contained a null task.</exception>",
        "Creates a task that will complete when all of the supplied tasks have completed.",
        "</summary>",
        "<param name=\"tasks\">The tasks to wait on for completion.</param>",
        "<returns>A task that represents the completion of all of the supplied tasks.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"tasks\" /> argument was null.</exception>",
        "<exception cref=\"T:System.ArgumentException\">The <paramref name=\"tasks\" /> collection contained a null task.</exception>",
        "Creates a task that will complete when all of the supplied tasks have completed.",
        "</summary>",
        "<param name=\"tasks\">The tasks to wait on for completion.</param>",
        "<returns>A task that represents the completion of all of the supplied tasks.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"tasks\" /> argument was null.</exception>",
        "<exception cref=\"T:System.ArgumentException\">The <paramref name=\"tasks\" /> array contained a null task.</exception>",
        "Creates an awaitable task that asynchronously yields back to the current context when awaited.",
        "</summary>",
        "<returns>A context that, when awaited, will asynchronously transition back into the current context at the time of the await. If the current <see cref=\"T:System.Threading.SynchronizationContext\" /> is non-null, it is treated as the current context. Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</returns>",
        "Creates a task that will complete after a time delay.",
        "</summary>",
        "<param name=\"millisecondsDelay\">The number of milliseconds to wait before completing the returned task</param>",
        "<returns>A task that represents the time delay</returns>",
        "<exception cref=\"T:System.ArgumentOutOfRangeException\">The <paramref name=\"millisecondsDelay\" /> is less than -1.</exception>",
        "Creates a task that will complete when any of the supplied tasks have completed.",
        "</summary>",
        "<param name=\"tasks\">The tasks to wait on for completion.</param>",
        "<returns>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"tasks\" /> argument was null.</exception>",
        "<exception cref=\"T:System.ArgumentException\">The <paramref name=\"tasks\" /> array contained a null task, or was empty.</exception>",
        "Creates a task that will complete when any of the supplied tasks have completed.",
        "</summary>",
        "<param name=\"tasks\">The tasks to wait on for completion.</param>",
        "<returns>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"tasks\" /> argument was null.</exception>",
        "<exception cref=\"T:System.ArgumentException\">The <paramref name=\"tasks\" /> array contained a null task, or was empty.</exception>",
        "Creates a task that will complete when any of the supplied tasks have completed.",
        "</summary>",
        "<typeparam name=\"TResult\">The type of the completed task.</typeparam>",
        "<param name=\"tasks\">The tasks to wait on for completion.</param>",
        "<returns>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"tasks\" /> argument was null.</exception>",
        "<exception cref=\"T:System.ArgumentException\">The <paramref name=\"tasks\" /> array contained a null task, or was empty.</exception>",
        "Creates a task that will complete when any of the supplied tasks have completed.",
        "</summary>",
        "<typeparam name=\"TResult\">The type of the completed task.</typeparam>",
        "<param name=\"tasks\">The tasks to wait on for completion.</param>",
        "<returns>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</returns>",
        "<exception cref=\"T:System.ArgumentNullException\">The <paramref name=\"tasks\" /> argument was null.</exception>",
        "<exception cref=\"T:System.ArgumentException\">The <paramref name=\"tasks\" /> array contained a null task, or was empty.</exception>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "Run",
        "Run",
        "Run",
        "Run",
        "Run",
        "Run",
        "Run",
        "Run",
        "FromResult",
        "WhenAll",
        "WhenAll",
        "WhenAll",
        "WhenAll",
        "YieldAwaitable",
        "Yield",
        "Delay",
        "WhenAny",
        "WhenAny",
        "WhenAny",
        "WhenAny"
    ],
    "classes": [
        "TaskShim"
    ]
}