{
    "identifiers": [
        "Definition",
        "FactoryMethod",
        "DefinitionObjectType",
        "allow",
        "allow",
        "definition",
        "implementationOrConstructorArgs",
        "constructorArgs",
        "implementationOrConstructorArgs",
        "definition",
        "Definition",
        "definition",
        "definition",
        "definition",
        "implementationOrConstructorArgs",
        "Definition",
        "definition",
        "definition",
        "implementationOrConstructorArgs",
        "implementationOrConstructorArgs",
        "Definition",
        "definition",
        "implementationOrConstructorArgs",
        "FactoryMethod",
        "Definition",
        "definition",
        "implementationOrConstructorArgs",
        "constructorArgs",
        "implementationOrConstructorArgs",
        "Definition",
        "definition",
        "implementationOrConstructorArgs",
        "constructorArgs",
        "Definition",
        "definition",
        "implementationOrConstructorArgs",
        "FactoryMethod",
        "definition",
        "definition",
        "callable",
        "Definition",
        "definition",
        "callable",
        "FactoryMethod",
        "DefinitionObjectType",
        "definition",
        "definition",
        "method",
        "definition",
        "internalDefinition",
        "definition",
        "definition",
        "definition",
        "internalDefinition",
        "definition",
        "internalDefinition",
        "internalDefinition",
        "method",
        "resolveMethod",
        "method",
        "resolveMethod",
        "FactoryMethod",
        "internalDefinition",
        "internalDefinition",
        "DefinitionObjectType",
        "internalDefinition",
        "obj",
        "internalDefinition",
        "obj",
        "internalDefinition",
        "FactoryMethod",
        "internalDefinition",
        "DefinitionObjectType",
        "obj",
        "obj",
        "FactoryMethod",
        "definition",
        "definition",
        "DefinitionObjectType",
        "definition",
        "FactoryMethod",
        "definition",
        "definition",
        "dependencies",
        "dep",
        "dependencies",
        "resolvedDeps",
        "dep",
        "constructorArguments",
        "resolvedDeps",
        "constructorArguments",
        "definition",
        "constructorArguments",
        "constructorArguments",
        "constructorArguments",
        "newConstructor",
        "newConstructor",
        "key",
        "key",
        "key",
        "key",
        "paramType",
        "method",
        "key",
        "resolvedObj",
        "definition",
        "definition",
        "definition",
        "definition",
        "definition",
        "constructorArgs",
        "definition",
        "definition",
        "definition",
        "constructorArgs",
        "definition",
        "constructorArgs"
    ],
    "literals": [
        "'es6-collections'",
        "'reflect-metadata'",
        "'./definition'",
        "string",
        "string",
        "string",
        "\"string\"",
        "\"Can't register just symbol\"",
        "\"function\"",
        "\"object\"",
        "\"function\"",
        "string",
        "string",
        "\"function\"",
        "Unknown definition ${definition.toString()}",
        "\"function\"",
        "'undefined'",
        "\"inject:constructor\"",
        "\"design:paramtypes\"",
        "\"inject:property\"",
        "\"inject:property\"",
        "\"design:type\""
    ],
    "variables": [
        "internalDefinition",
        "resolveMethod",
        "obj",
        "obj",
        "constructorArguments",
        "dependencies",
        "resolvedDeps",
        "newConstructor",
        "test",
        "method",
        "paramType",
        "resolvedObj",
        "constructorArgs"
    ],
    "comments": [
        "<reference path=\"../typings/tsd.d.ts\" />",
        "<reference path=\"../node_modules/reflect-metadata/reflect-metadata.d.ts\" />",
        "specific case: register(Class)",
        "Cases:",
        "1. register(Class, Class)",
        "2. register(Class, [constructorArgs])",
        "3. register(Class, Class, [constructorArgs])",
        "4. register(Class, object)",
        "Case 2.",
        "Case 4",
        "Cases 1, 3",
        "Cases:",
        "1. register('string', Class)",
        "2. register('string', Class, [constructorArgs])",
        "4. register('string', 'number|string|object|boolean')",
        "Case  1,2",
        "Case 3",
        "Resolve constructor dependencies",
        "No constructor injection, lookup for constructor arguments in definition"
    ],
    "docstrings": [
        "* DI Container class",
        "* Definition map\n     * @type {Map}",
        "* Singleton objects\n     * @type {WeakMap<Definition, Object>}",
        "* If true allows to resolve unregistered definitions\n     * @type {boolean}",
        "* @constructor",
        "* Sets if unregistered definitions are allowed to be resolved\n     * This is useful to avoid many stub container.register(Class) class, but you need to be careful to not create\n     * interface instead of implementation or use abstract classes (available from typescript 1.6) as interface classes\n     * @param allow true to allow, false to disallow\n     * @example\n     *      import Service from './service'\n     *\n     *      @ConstructorInject\n     *      class Controller {\n     *          private service: Service;\n     *          public constructor(myService: Service} {\n     *              this.service = myService\n     *          }\n     *      }\n     *\n     *      let controller = container.resolve(Controller);",
        "* Register implementation to interface object\n     * @param definition\n     * @param implementationOrConstructorArgs\n     * @param constructorArgs",
        "* Register definition as callable. The callable will be invoked instead calling via new()",
        "* Resolves definition\n     * @param definition\n     * @param method",
        "* Resolves definition\n     * @private\n     * @param definition",
        "* Injects parameters into object\n     * @param object",
        "* Resolves constructor by looking in definition chain\n     * @private\n     * @param definition",
        "* Resolves constructor arguments from definition chain\n     * @private\n     * @param definition\n     * @returns {Array<any>}"
    ],
    "functions": [
        "setAllowUnregisteredResolving",
        "register",
        "registerCallable",
        "resolve",
        "resolveDefinition",
        "resolveParameters",
        "resolveConstructor",
        "resolveConstructorArguments"
    ],
    "classes": [
        "Container"
    ]
}