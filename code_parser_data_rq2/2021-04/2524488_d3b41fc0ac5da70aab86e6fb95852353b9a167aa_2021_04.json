{
    "identifiers": [
        "org",
        "apache",
        "accumulo",
        "core",
        "data",
        "constraints",
        "java",
        "util",
        "org",
        "apache",
        "accumulo",
        "core",
        "data",
        "Mutation",
        "org",
        "apache",
        "accumulo",
        "core",
        "data",
        "TabletId",
        "org",
        "apache",
        "accumulo",
        "core",
        "security",
        "AuthorizationContainer",
        "Constraint",
        "Environment",
        "violationCode",
        "env",
        "mutation"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.",
        "* Constraint objects are used to determine if mutations will be applied to a table.\n *\n * <p>\n * This interface expects implementers to return violation codes. The reason codes are returned\n * instead of arbitrary strings to encourage conciseness. Conciseness is needed because violations\n * are aggregated. If a user sends a batch of 10,000 mutations to Accumulo, only aggregated counts\n * about which violations occurred are returned. If the constraint implementer were allowed to\n * return arbitrary violation strings like the following:\n *\n * <p>\n * Value \"abc\" is not a number<br>\n * Value \"vbg\" is not a number\n *\n * <p>\n * This would not aggregate very well, because the same violation is represented with two different\n * strings.\n *\n * @since 2.1.0 Replaces interface in org.apache.accumulo.core.constraints package",
        "* The environment within which a constraint exists.\n   *\n   * @since 2.1.0",
        "* Gets the tablet Id of the environment.\n     *\n     * @return TabletId",
        "* Gets the user within the environment.\n     *\n     * @return user",
        "* Gets the authorizations in the environment.\n     *\n     * @return authorizations",
        "* Gets a short, one-sentence description of what a given violation code means.\n   *\n   * @param violationCode\n   *          numeric violation code\n   * @return matching violation description",
        "* Checks a mutation for constraint violations. If the mutation contains no violations, returns\n   * null. Otherwise, returns a list of violation codes.\n   *\n   * Violation codes must be non-negative. Negative violation codes are reserved for system use.\n   *\n   * New API equivalent of\n   * {@link org.apache.accumulo.core.constraints.Constraint#check(org.apache.accumulo.core.constraints.Constraint.Environment, Mutation)}\n   * but renamed to prevent ambiguous method call errors.\n   *\n   * @param env\n   *          constraint environment\n   * @param mutation\n   *          mutation to check\n   * @return list of violation codes, or null if none"
    ],
    "functions": [
        "TabletId",
        "getTablet",
        "getUser",
        "AuthorizationContainer",
        "getAuthorizationsContainer",
        "getViolationDescription",
        "check"
    ],
    "classes": []
}