{
    "identifiers": [
        "Expert",
        "MeanReversion",
        "YesterdaysNews",
        "ExpectationExpert",
        "VolumeWeightedCloseTrend",
        "MutiplicativeWeights1",
        "MultiplicativeWeights1",
        "MW1",
        "MultiplicativeWeights2",
        "MultiplicativeWeights2",
        "MW2",
        "MultWeights",
        "get_data_in_range",
        "numpy",
        "np",
        "np",
        "load",
        "path_to_data",
        "allow_pickle",
        "item",
        "min",
        "starting_day",
        "experts",
        "append",
        "YesterdaysNews",
        "min",
        "max_window",
        "min",
        "max_window",
        "MeanReversion",
        "sign",
        "ExpectationExpert",
        "sign",
        "VolumeWeightedCloseTrend",
        "experts",
        "e1",
        "e2",
        "e3",
        "MW1",
        "mw",
        "add_experts",
        "experts",
        "stock_data",
        "get_data_in_range",
        "temp",
        "end_day",
        "mw",
        "alg",
        "data",
        "start_day",
        "starting_day",
        "len",
        "experts",
        "reward",
        "mistakes",
        "mistakes",
        "len",
        "decisions",
        "np",
        "min",
        "expert_mistakes"
    ],
    "literals": [
        "'./data/stock_data.npy'",
        "'MSFT'",
        "'num experts :'",
        "'reward :'",
        "'mistakes :'",
        "'percentage of mistakes'",
        "'min of expert mistakes'"
    ],
    "variables": [
        "path_to_data",
        "stock_data",
        "starting_day",
        "max_window",
        "experts",
        "e1",
        "e2",
        "e3",
        "mw",
        "end_day",
        "temp",
        "data",
        "decisions",
        "expert_mistakes",
        "mistakes",
        "reward"
    ],
    "comments": [
        "setup data",
        "add experts to multiplicative weights algorithm",
        "mw = MW2()"
    ],
    "docstrings": [
        "\"\"\"\nExample code for adding experts and running the multiplicative weights algorithm\n\"\"\"",
        "\"\"\"\nLoad the data\n\"\"\"",
        "\"\"\"\ncreate experts considering data from various previous time frames\n\"\"\"",
        "\"\"\"\nFor the time period of choice (3000 days), the algorithms perform as follows:\n\nMW1:\nnum experts : 78\nreward : 98.06658172607422\nmistakes : 361\npercentage of mistakes 61.499148211243615\nmin of expert mistakes 245.0\n\nMW2:\nreward : 103.94658660888672\nmistakes : 361\npercentage of mistakes 61.499148211243615\nmin of expert mistakes 245.0\n\nThe two algorithms made the exact same number of mistakes over this time period.\nHowever, the second variant achieved a greater reward.\n\nSurprising - pretty nice.\n\"\"\""
    ],
    "functions": [],
    "classes": []
}