{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "http",
        "request",
        "response",
        "request",
        "request",
        "serveMethods",
        "request",
        "request",
        "filePath",
        "totalPoints",
        "questionNumber",
        "filePath",
        "path",
        "filePath",
        "mimeTypes",
        "extname",
        "fs",
        "filePath",
        "error",
        "content",
        "error",
        "error",
        "fs",
        "error",
        "content",
        "response",
        "response",
        "content",
        "response",
        "response",
        "error",
        "response",
        "contentType",
        "response",
        "content",
        "request",
        "err",
        "err",
        "chunk",
        "body",
        "chunk",
        "body",
        "Buffer",
        "body",
        "response",
        "err",
        "err",
        "request",
        "request",
        "body",
        "body",
        "totalPoints",
        "jsonObject",
        "resBody",
        "body",
        "totalPoints",
        "request",
        "request",
        "resBody",
        "totalPoints",
        "totalPoints",
        "request",
        "request",
        "resBody",
        "questionNumber",
        "questionNumber",
        "request",
        "request",
        "body",
        "body",
        "questionNumber",
        "jsonObject",
        "resBody",
        "body",
        "questionNumber",
        "response",
        "response",
        "response",
        "responseBody",
        "response",
        "port",
        "hostname"
    ],
    "literals": [
        "'http'",
        "'fs'",
        "'path'",
        "\"url\"",
        "'127.0.0.1'",
        "'/updatePoints'",
        "'/getPoints'",
        "'/getQuestionNumber'",
        "'/putQuestionNumber'",
        "'request '",
        "' method '",
        "'.'",
        "'./'",
        "'./views/home.html'",
        "'.html'",
        "'text/html'",
        "'.js'",
        "'text/javascript'",
        "'.css'",
        "'text/css'",
        "'.json'",
        "'application/json'",
        "'.png'",
        "'image/png'",
        "'.jpg'",
        "'image/jpg'",
        "'.gif'",
        "'image/gif'",
        "'.svg'",
        "'image/svg+xml'",
        "'.wav'",
        "'audio/wav'",
        "'.mp4'",
        "'video/mp4'",
        "'.woff'",
        "'application/font-woff'",
        "'.ttf'",
        "'application/font-ttf'",
        "'.eot'",
        "'application/vnd.ms-fontobject'",
        "'.otf'",
        "'application/font-otf'",
        "'.wasm'",
        "'application/wasm'",
        "'application/octet-stream'",
        "'ENOENT'",
        "'./404.html'",
        "'Content-Type'",
        "'text/html'",
        "'utf-8'",
        "'Sorry, check with the site admin for error: '",
        "' ..\\n'",
        "'Content-Type'",
        "'utf-8'",
        "'error'",
        "'data'",
        "'end'",
        "'error'",
        "'PATCH'",
        "'/updatePoints'",
        "'body: '",
        "'points: '",
        "'GET'",
        "'/getPoints'",
        "'totalPoints: '",
        "'GET'",
        "'/getQuestionNumber'",
        "'questionNumber: '",
        "'PUT'",
        "'/putQuestionNumber'",
        "'body: '",
        "'questionNumber: '",
        "'Content-Type'",
        "'application/json'"
    ],
    "variables": [
        "http",
        "fs",
        "path",
        "url",
        "hostname",
        "port",
        "totalPoints",
        "questionNumber",
        "serveMethods",
        "server",
        "filePath",
        "extname",
        "mimeTypes",
        "contentType",
        "resBody",
        "request",
        "body",
        "jsonObject",
        "jsonObject",
        "responseBody"
    ],
    "comments": [
        "BEGINNING OF NEW STUFF",
        "Note: the 2 lines above could be replaced with this next one:",
        "response.writeHead(200, {'Content-Type': 'application/json'})",
        "Note: the 2 lines above could be replaced with this next one:",
        "response.end(JSON.stringify(responseBody))",
        "END OF NEW STUFF",
        "server.on('request', function (request, response) {",
        "if (request.url.includes('/updatePoints') || request.url.includes('/getPoints')) {",
        "var resBody;",
        "const { headers, method, url } = request;",
        "let body = [];",
        "request.on('error', (err) => {",
        "console.error(err);",
        "}).on('data', (chunk) => {",
        "body.push(chunk);",
        "}).on('end', () => {",
        "body = Buffer.concat(body).toString();",
        "// BEGINNING OF NEW STUFF",
        "response.on('error', (err) => {",
        "console.error(err);",
        "});",
        "if (request.method === 'PATCH' && request.url.includes('/updatePoints')) {",
        "totalPoints += parseInt(JSON.parse(body).points);",
        "resBody = body;",
        "} else if (request.method === 'GET' && request.url.includes('/getPoints')) {",
        "resBody = totalPoints;",
        "}",
        "response.statusCode = 200;",
        "response.setHeader('Content-Type', 'application/json');",
        "// Note: the 2 lines above could be replaced with this next one:",
        "// response.writeHead(200, {'Content-Type': 'application/json'})",
        "const responseBody = { headers, method, url, resBody };",
        "response.write(JSON.stringify(responseBody));",
        "response.end();",
        "// Note: the 2 lines above could be replaced with this next one:",
        "// response.end(JSON.stringify(responseBody))",
        "// END OF NEW STUFF",
        "});",
        "}",
        "});",
        "console.log('Server running at ' + hostname + '/' + port);",
        "http.createServer((request, response) => {",
        "var resBody;",
        "const { headers, method, url } = request;",
        "let body = [];",
        "request.on('error', (err) => {",
        "console.error(err);",
        "}).on('data', (chunk) => {",
        "body.push(chunk);",
        "}).on('end', () => {",
        "body = Buffer.concat(body).toString();",
        "// BEGINNING OF NEW STUFF",
        "response.on('error', (err) => {",
        "console.error(err);",
        "});",
        "if (request.method === 'PATCH' && request.url.includes('/updatePoints')) {",
        "totalPoints += parseInt(JSON.parse(body).points);",
        "resBody = body;",
        "} else if (request.method === 'GET' && request.url.includes('/getPoints')) {",
        "resBody = totalPoints;",
        "}",
        "response.statusCode = 200;",
        "response.setHeader('Content-Type', 'application/json');",
        "// Note: the 2 lines above could be replaced with this next one:",
        "// response.writeHead(200, {'Content-Type': 'application/json'})",
        "const responseBody = { headers, method, url, resBody };",
        "response.write(JSON.stringify(responseBody));",
        "response.end();",
        "// Note: the 2 lines above could be replaced with this next one:",
        "// response.end(JSON.stringify(responseBody))",
        "// END OF NEW STUFF",
        "});",
        "}).listen(8080, hostname); // Activates this server, listening on port 8080.",
        "console.log('Server running at ' + hostname + '/' + 8080);",
        "function setupResponse(code, body) {",
        "}"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}