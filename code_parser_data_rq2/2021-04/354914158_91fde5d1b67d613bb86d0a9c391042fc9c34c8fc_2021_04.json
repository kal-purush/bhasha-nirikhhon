{
    "identifiers": [
        "config",
        "pyspark",
        "sql",
        "types",
        "pyspark",
        "sql",
        "functions",
        "functools",
        "wraps",
        "pyspark",
        "sql",
        "SQLContext",
        "SparkSession",
        "Window",
        "DataFrame",
        "meta",
        "title",
        "meta",
        "title",
        "meta",
        "title",
        "upper",
        "meta",
        "title",
        "recsys_date",
        "path_suffix",
        "path_suffix",
        "dsi_window",
        "path_suffix",
        "dsi_window",
        "path_suffix",
        "s3_pcas_",
        "s3_covs_",
        "s3_rois_",
        "s3_hvas_",
        "step",
        "message",
        "total",
        "title",
        "step",
        "title",
        "dsi_window",
        "trt_window",
        "join",
        "DR_covs",
        "join",
        "DR_covs",
        "step",
        "total",
        "step",
        "message",
        "udf",
        "value",
        "value",
        "item",
        "FloatType",
        "udf",
        "value",
        "value",
        "item",
        "FloatType",
        "cls",
        "func",
        "wraps",
        "func",
        "args",
        "kwargs",
        "func",
        "args",
        "kwargs",
        "f",
        "setattr",
        "cls",
        "func",
        "_wrapper",
        "func",
        "decorator",
        "add_attr",
        "custom",
        "df2",
        "dsi_window",
        "join",
        "df2",
        "on",
        "how",
        "withColumn",
        "col",
        "withColumnRenamed",
        "withColumnRenamed",
        "dsi_window",
        "na",
        "fill",
        "dsi_window",
        "dsi_window",
        "dsi_window",
        "join",
        "df2",
        "on",
        "how",
        "withColumn",
        "col",
        "withColumnRenamed",
        "withColumnRenamed",
        "dsi_window",
        "withColumnRenamed",
        "dsi_window",
        "withColumnRenamed",
        "dsi_window",
        "withColumn",
        "dsi_window",
        "coalesce",
        "col",
        "lit",
        "coalesce",
        "col",
        "lit",
        "withColumn",
        "dsi_window",
        "coalesce",
        "col",
        "lit",
        "coalesce",
        "col",
        "lit",
        "withColumnRenamed",
        "dsi_window",
        "na",
        "fill",
        "dsi_window",
        "dsi_window",
        "dsi_window",
        "dsi_window",
        "dsi_window",
        "dsi_window",
        "dsi_window",
        "add_attr",
        "custom",
        "df2",
        "join",
        "df2",
        "on",
        "how",
        "na",
        "fill",
        "add_attr",
        "custom",
        "T6M_active_thres_secs",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "when",
        "col",
        "col",
        "col",
        "T6M_active_thres_secs",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "when",
        "col",
        "col",
        "col",
        "T6M_active_thres_secs",
        "otherwise",
        "add_attr",
        "custom",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "col",
        "otherwise",
        "withColumn",
        "when",
        "col",
        "col",
        "col",
        "col",
        "col",
        "col",
        "otherwise",
        "add_attr",
        "custom",
        "col_list",
        "num_buckets",
        "pyspark",
        "ml",
        "feature",
        "QuantileDiscretizer",
        "c",
        "col_list",
        "c",
        "df",
        "schema",
        "names",
        "df",
        "select",
        "c",
        "where",
        "col",
        "c",
        "QuantileDiscretizer",
        "numBuckets",
        "num_buckets",
        "inputCol",
        "c",
        "outputCol",
        "c",
        "fit",
        "non_zero_values",
        "setHandleInvalid",
        "bucketizer",
        "transform",
        "df",
        "drop",
        "c",
        "df",
        "add_attr",
        "custom",
        "cat_cols",
        "ctn_cols",
        "thres",
        "pyspark",
        "sql",
        "functions",
        "stddev",
        "countDistinct",
        "col",
        "col",
        "cat_cols",
        "col",
        "schema",
        "names",
        "col",
        "col",
        "ctn_cols",
        "col",
        "schema",
        "names",
        "cat_cols",
        "ctn_cols",
        "drop_cols",
        "cat_cols",
        "agg",
        "countDistinct",
        "c",
        "alias",
        "c",
        "c",
        "select",
        "cat_cols",
        "columns",
        "collect",
        "drop_cols",
        "c",
        "c",
        "constant_categorical_cols",
        "asDict",
        "constant_categorical_cols",
        "c",
        "ctn_cols",
        "agg",
        "stddev",
        "c",
        "alias",
        "c",
        "c",
        "select",
        "ctn_cols",
        "columns",
        "collect",
        "drop_cols",
        "c",
        "c",
        "constant_continuous_cols",
        "asDict",
        "constant_continuous_cols",
        "c",
        "drop_cols",
        "drop",
        "drop_cols",
        "add_attr",
        "custom",
        "pca_cols",
        "c",
        "pca_cols",
        "c",
        "df",
        "schema",
        "names",
        "df",
        "withColumnRenamed",
        "c",
        "c",
        "replace",
        "replace",
        "df",
        "add_attr",
        "custom",
        "col_list",
        "c",
        "col_list",
        "c",
        "schema",
        "names",
        "df",
        "withColumn",
        "c",
        "col",
        "c",
        "cast",
        "df",
        "add_attr",
        "custom",
        "cols_dict",
        "to_print",
        "cols_dict",
        "k",
        "col_list",
        "cols_dict",
        "items",
        "k",
        "startswith",
        "col",
        "col",
        "col_list",
        "col",
        "schema",
        "names",
        "cols_in_df",
        "include_cols",
        "union",
        "cols_in_df",
        "schema",
        "names",
        "include_cols",
        "exclude_cols",
        "cols_dcit_copy",
        "drop",
        "exclude_cols",
        "add_attr",
        "custom",
        "include",
        "agg",
        "avg",
        "c",
        "alias",
        "c",
        "c",
        "columns",
        "c",
        "include",
        "na",
        "fill",
        "inclusive_means",
        "first",
        "asDict",
        "custom",
        "property",
        "custom",
        "df",
        "DataFrame",
        "lhs",
        "rhs",
        "ps_col",
        "regParam",
        "pyspark",
        "ml",
        "classification",
        "LogisticRegression",
        "pyspark",
        "ml",
        "feature",
        "RFormula",
        "RFormula",
        "formula",
        "lhs",
        "join",
        "rhs",
        "featuresCol",
        "labelCol",
        "PS_formula",
        "fit",
        "df",
        "transform",
        "df",
        "select",
        "lhs",
        "rhs",
        "select",
        "LogisticRegression",
        "featuresCol",
        "labelCol",
        "tol",
        "regParam",
        "regParam",
        "elasticNetParam",
        "lr",
        "fit",
        "PS_df",
        "transform",
        "PS_df",
        "select",
        "withColumn",
        "ps_col",
        "split2_udf",
        "drop",
        "preds",
        "rollup",
        "mean",
        "ps_col",
        "alias",
        "collect",
        "x",
        "asDict",
        "x",
        "mean_PS",
        "preds",
        "rollup",
        "count",
        "collect",
        "x",
        "asDict",
        "x",
        "mean_trt",
        "df",
        "join",
        "preds",
        "drop",
        "on",
        "how",
        "df",
        "mean_PS",
        "mean_trt",
        "df",
        "DataFrame",
        "dsi",
        "trt",
        "ps",
        "cov_list",
        "regParam",
        "pyspark",
        "ml",
        "regression",
        "LinearRegression",
        "pyspark",
        "ml",
        "feature",
        "RFormula",
        "ps",
        "trt",
        "ps",
        "cov_list",
        "trt",
        "cov_list",
        "RFormula",
        "formula",
        "dsi",
        "join",
        "rhs_ls",
        "featuresCol",
        "labelCol",
        "dsi_formula",
        "fit",
        "df",
        "transform",
        "df",
        "select",
        "dsi",
        "rhs_ls",
        "select",
        "df",
        "col",
        "trt",
        "select",
        "mean",
        "col",
        "alias",
        "count",
        "lit",
        "alias",
        "collect",
        "asDict",
        "LinearRegression",
        "featuresCol",
        "labelCol",
        "tol",
        "regParam",
        "regParam",
        "elasticNetParam",
        "lr",
        "fit",
        "dsi_df",
        "lrm",
        "coefficients",
        "df_stats",
        "df",
        "DataFrame",
        "dsi",
        "trt",
        "ps",
        "cov_list",
        "regParam",
        "max_iptw",
        "pyspark",
        "ml",
        "regression",
        "LinearRegression",
        "pyspark",
        "ml",
        "feature",
        "RFormula",
        "dsi",
        "trt",
        "ps",
        "df",
        "custom",
        "drop_const_cols",
        "cov_list",
        "cov_list",
        "cov_list",
        "x",
        "sublist",
        "cov_list",
        "x",
        "sublist",
        "c",
        "c",
        "flat_cov_list",
        "c",
        "df",
        "schema",
        "names",
        "df",
        "withColumn",
        "col",
        "trt",
        "col",
        "ps",
        "col",
        "trt",
        "col",
        "ps",
        "withColumn",
        "col",
        "ps",
        "cache",
        "trt",
        "flat_cov_list",
        "RFormula",
        "formula",
        "dsi",
        "join",
        "rhs_ls",
        "featuresCol",
        "labelCol",
        "fit",
        "df",
        "transformer",
        "transform",
        "df",
        "select",
        "dsi",
        "rhs_ls",
        "select",
        "LinearRegression",
        "featuresCol",
        "labelCol",
        "tol",
        "regParam",
        "regParam",
        "elasticNetParam",
        "lr",
        "fit",
        "dsi_df",
        "lrm",
        "transform",
        "transformer",
        "transform",
        "df",
        "col",
        "trt",
        "select",
        "dsi",
        "rhs_ls",
        "select",
        "select",
        "col",
        "alias",
        "lrm",
        "transform",
        "transformer",
        "transform",
        "df",
        "col",
        "trt",
        "withColumn",
        "trt",
        "col",
        "trt",
        "drop",
        "withColumnRenamed",
        "select",
        "dsi",
        "rhs_ls",
        "select",
        "select",
        "col",
        "alias",
        "dsi_1",
        "join",
        "dsi_0",
        "on",
        "how",
        "withColumn",
        "col",
        "col",
        "agg",
        "mean",
        "col",
        "alias",
        "expr",
        "alias",
        "stddev",
        "col",
        "alias",
        "count",
        "col",
        "alias",
        "collect",
        "estimates",
        "df",
        "dsi_list",
        "hva",
        "df",
        "col",
        "hva",
        "cache",
        "df_hva",
        "count",
        "hva",
        "result",
        "dsi",
        "dsi_list",
        "dr_regression",
        "df_hva",
        "dsi",
        "DR_covs",
        "est",
        "asDict",
        "df_hva",
        "unpersist",
        "hva",
        "result"
    ],
    "literals": [
        "'premiere'",
        "'tconst'",
        "'premiere'",
        "'01'",
        "\"s3://studiosresearch-projects/recsys_customer_embeddings_pca10pc/date=%s/mkt1/\"",
        "'s3://research-tmp-test/Portfolio_Optimization_CEM_PS_MKT1_US-%s-%s/'",
        "'s3://research-tmp-test/CEM_Samples/Customers_Watched_%s-%s/'",
        "'F12M'",
        "'s3://research-tmp-test/CEM_Samples/financials/revenue_profit_extended_F12M_%s-%s/'",
        "'F3M'",
        "'s3://research-tmp-test/CEM_Samples/revenue_profit_F3M_%s-%s/'",
        "\"\"",
        "''",
        "'%s: estimating [%s] DSI of title viewing [%s] post premiere'",
        "' -- DR categorical --  :'",
        "', '",
        "' -- DR continuous  --  :'",
        "', '",
        "'==='",
        "'   '",
        "': '",
        "'F3M'",
        "'customer_id'",
        "'left'",
        "'total_hours'",
        "'total_seconds'",
        "'hours'",
        "'hours_wbr'",
        "'overall_profit'",
        "'Overall_Profit_%s'",
        "'Outcome_Hours_%s'",
        "'Overall_Profit_%s'",
        "'total_hours'",
        "'F12M'",
        "'customer_id'",
        "'left'",
        "'total_hours'",
        "'total_seconds'",
        "'hours'",
        "'hours_wbr'",
        "'overall_profit'",
        "'Overall_Profit_%s'",
        "'retail_profit'",
        "'Retail_Profit_%s'",
        "'sub_profit'",
        "'Subs_Profit_%s'",
        "'Subs_AIVchan_Profit_%s'",
        "'aiv_channels_revenue'",
        "'aiv_channels_cost'",
        "'Subs_Prime_Profit_%s'",
        "'prime_revenue'",
        "'prime_cost'",
        "'display_ads_revenue'",
        "'DisplayAds_Revenue_%s'",
        "'Outcome_Hours_%s'",
        "'Overall_Profit_%s'",
        "'Retail_Profit_%s'",
        "'Subs_Profit_%s'",
        "'Subs_AIVchan_Profit_%s'",
        "'Subs_Prime_Profit_%s'",
        "'DisplayAds_Revenue_%s'",
        "'customer_id'",
        "'left'",
        "'title_fs'",
        "'customer_status'",
        "'prime_sub_type'",
        "'NPA'",
        "'prime_sub_type'",
        "'None'",
        "'cas_segment'",
        "'Never Streamer'",
        "'cas_segment'",
        "'None'",
        "'total_secs_T6M'",
        "'Non-Prime Never Streamer'",
        "'prime_sub_type'",
        "'NPA'",
        "'prime_sub_type'",
        "'None'",
        "'cas_segment'",
        "'Never Streamer'",
        "'cas_segment'",
        "'None'",
        "'total_secs_T6M'",
        "'Non-Prime Lapsed'",
        "'prime_sub_type'",
        "'NPA'",
        "'prime_sub_type'",
        "'None'",
        "'total_secs_T6M'",
        "'Non-Prime Active'",
        "'prime_sub_type'",
        "'NPA'",
        "'prime_sub_type'",
        "'None'",
        "'cas_segment'",
        "'Never Streamer'",
        "'cas_segment'",
        "'None'",
        "'total_secs_T6M'",
        "'Prime Never Streamer'",
        "'prime_sub_type'",
        "'NPA'",
        "'prime_sub_type'",
        "'None'",
        "'cas_segment'",
        "'Never Streamer'",
        "'cas_segment'",
        "'None'",
        "'total_secs_T6M'",
        "'Prime Lapsed'",
        "'prime_sub_type'",
        "'NPA'",
        "'prime_sub_type'",
        "'None'",
        "'total_secs_T6M'",
        "'Prime Active'",
        "'Not Categorized'",
        "'Cops_Crime_Capers'",
        "'segment_genre_id'",
        "'9900'",
        "'World_Creation_Action'",
        "'segment_genre_id'",
        "'9901'",
        "'Reality_Game'",
        "'segment_genre_id'",
        "'9902'",
        "'Lit_Based_Soaps'",
        "'segment_genre_id'",
        "'9903'",
        "'Big_City_Rel_Drama_Comedy'",
        "'segment_genre_id'",
        "'9904'",
        "'Family_Anim_Adventure'",
        "'segment_genre_id'",
        "'9905'",
        "'Preschool_Anim'",
        "'segment_genre_id'",
        "'9906'",
        "'Mystery_Drama'",
        "'segment_genre_id'",
        "'9907'",
        "'Supnatual_Hor_Myst'",
        "'segment_genre_id'",
        "'9908'",
        "'Age_18_24'",
        "'Max_prob_age'",
        "'prob_age1'",
        "'Age_25_34'",
        "'Max_prob_age'",
        "'prob_age2'",
        "'Age_35_44'",
        "'Max_prob_age'",
        "'prob_age3'",
        "'Age_45_54'",
        "'Max_prob_age'",
        "'prob_age4'",
        "'Age_55_64'",
        "'Max_prob_age'",
        "'prob_age5'",
        "'Age_65+'",
        "'Max_prob_age'",
        "'prob_age6'",
        "'CREAM_0_Active'",
        "'CREAM_Hours'",
        "'customer_status'",
        "'Non-Prime Never Streamer'",
        "'customer_status'",
        "'Non-Prime Lapsed'",
        "'customer_status'",
        "'Prime Lapsed'",
        "'customer_status'",
        "'Prime Never Streamer'",
        "'CREAM_1_to_4'",
        "'CREAM_Hours'",
        "'CREAM_Hours'",
        "'Prime_NSFS_total'",
        "'customer_status'",
        "'Prime Never Streamer'",
        "'title_fs'",
        "'treated'",
        "'treated'",
        "'Prime_CREAM1_NS_Lapsed'",
        "'customer_status'",
        "'Prime Never Streamer'",
        "'customer_status'",
        "'Prime Lapsed'",
        "'title_fs'",
        "'treated'",
        "'treated'",
        "'Prime_NSFS_incre'",
        "'customer_status'",
        "'Prime Never Streamer'",
        "'title_fs'",
        "'treated'",
        "'treated'",
        "'Outcome_Hours_F1M'",
        "'Prime_NSFS_non_incre'",
        "'customer_status'",
        "'Prime Never Streamer'",
        "'title_fs'",
        "'treated'",
        "'treated'",
        "'Outcome_Hours_F1M'",
        "'Prime_Lapse_RE_total'",
        "'customer_status'",
        "'Prime Lapsed'",
        "'title_fs'",
        "'treated'",
        "'treated'",
        "'Prime_Lapse_RE_incre'",
        "'customer_status'",
        "'Prime Lapsed'",
        "'title_fs'",
        "'treated'",
        "'treated'",
        "'Outcome_Hours_F1M'",
        "'Prime_Lapse_RE_non_incre'",
        "'customer_status'",
        "'Prime Lapsed'",
        "'title_fs'",
        "'treated'",
        "'treated'",
        "'Outcome_Hours_F1M'",
        "'NonPrime_TPS_total'",
        "'customer_status'",
        "'Non-Prime Never Streamer'",
        "'customer_status'",
        "'Non-Prime Lapsed'",
        "'title_fs'",
        "'treated'",
        "'treated'",
        "'NonPrime_CREAM1_NS_Lapsed'",
        "'customer_status'",
        "'Non-Prime Never Streamer'",
        "'customer_status'",
        "'Non-Prime Lapsed'",
        "'title_fs'",
        "'treated'",
        "'treated'",
        "'NonPrime_TPS_incre'",
        "'customer_status'",
        "'Non-Prime Never Streamer'",
        "'customer_status'",
        "'Non-Prime Lapsed'",
        "'title_fs'",
        "'treated'",
        "'treated'",
        "'Outcome_Hours_F1M'",
        "'NonPrime_TPS_non_incre'",
        "'customer_status'",
        "'Non-Prime Never Streamer'",
        "'customer_status'",
        "'Non-Prime Lapsed'",
        "'title_fs'",
        "'treated'",
        "'treated'",
        "'Outcome_Hours_F1M'",
        "\"_bucket\"",
        "'keep'",
        "'['",
        "''",
        "']'",
        "''",
        "'string'",
        "'drop'",
        "'dropped_no_use'",
        "'%s ~ %s'",
        "' + '",
        "\"features\"",
        "\"label\"",
        "'customer_id'",
        "'customer_id'",
        "'features'",
        "'label'",
        "'features'",
        "'label'",
        "'customer_id'",
        "'probability'",
        "'label'",
        "'probability'",
        "'probability'",
        "'label'",
        "'mean_ps'",
        "'label'",
        "'label'",
        "'customer_id'",
        "'inner'",
        "'%s ~ %s'",
        "' + '",
        "\"features\"",
        "\"label\"",
        "'customer_id'",
        "'customer_id'",
        "'features'",
        "'label'",
        "'Treated_F1M'",
        "'mean_dosage'",
        "'total_treated'",
        "'features'",
        "'label'",
        "'iptw'",
        "'ipt0'",
        "'iptw'",
        "'%s ~ %s'",
        "' + '",
        "\"features\"",
        "\"label\"",
        "'customer_id'",
        "'customer_id'",
        "'features'",
        "'label'",
        "'features'",
        "'label'",
        "'customer_id'",
        "'customer_id'",
        "'features'",
        "'label'",
        "'customer_id'",
        "'prediction'",
        "'dsi_1'",
        "'iptw'",
        "'ipt0'",
        "'iptw'",
        "'customer_id'",
        "'customer_id'",
        "'features'",
        "'label'",
        "'customer_id'",
        "'prediction'",
        "'dsi_0'",
        "'customer_id'",
        "'inner'",
        "'effect'",
        "'dsi_1'",
        "'dsi_0'",
        "'effect'",
        "'att_mean'",
        "'percentile(effect, array(0.5))'",
        "'att_median'",
        "'effect'",
        "'att_std'",
        "'customer_id'",
        "'total_trt'",
        "'treated'",
        "'ps_treated'"
    ],
    "variables": [
        "path_suffix",
        "recsys_date",
        "s3_pcas_",
        "s3_covs_",
        "s3_hvas_",
        "s3_rois_",
        "s3_rois_",
        "s3_rois_",
        "split1_udf",
        "split2_udf",
        "f",
        "df",
        "non_zero_values",
        "bucketizer",
        "df",
        "cat_cols",
        "ctn_cols",
        "drop_cols",
        "constant_categorical_cols",
        "constant_continuous_cols",
        "df",
        "df",
        "df",
        "df",
        "cols_dcit_copy",
        "include_cols",
        "cols_in_df",
        "cols_dcit_copy",
        "k",
        "include_cols",
        "exclude_cols",
        "cols_dcit_copy",
        "inclusive_means",
        "DataFrame",
        "custom",
        "PS_formula",
        "PS_df",
        "lr",
        "preds",
        "mean_PS",
        "mean_PS",
        "mean_trt",
        "mean_trt",
        "df",
        "rhs_ls",
        "rhs_ls",
        "dsi_formula",
        "dsi_df",
        "df_stats",
        "lr",
        "lrm",
        "_",
        "df",
        "flat_cov_list",
        "flat_cov_list",
        "df",
        "rhs_ls",
        "transformer",
        "dsi_df",
        "lr",
        "lrm",
        "dsi_1",
        "dsi_0",
        "estimates",
        "df_hva",
        "result",
        "est",
        "result",
        "dsi",
        "df_hva"
    ],
    "comments": [
        "1. Utility Functions",
        "s3_rois_ = 's3://research-tmp-test/CEM_Samples/revenue_profit_%s-%s/' % path_suffix[::-1]",
        "not doing CEM filtering anymore",
        "def remove_homogeneous_strata(data_frame, strata_label, HVA_indicator):",
        "\"\"\"",
        "Removes strata where high value action is 0 for all customers",
        "PARAMETERS:",
        "data_frame - dataframe that has already been labeled",
        "strata_label - column name for CEM strata label",
        "HVA_indicator - column name for high value action indicator",
        "RETURN:",
        "result_list - CEM stratas that were dropped",
        "data_frame_filtered - dataframe where strata with all 0's or 1's for high value action removed",
        "\"\"\"",
        "result_list = data_frame\\",
        ".groupBy([strata_label])\\",
        ".agg(",
        "sum(HVA_indicator).alias('strata_sum'),",
        "count(lit(1)).alias('strata_count')",
        ")\\",
        ".where((col('strata_sum') == 0) | (col('strata_sum') == col('strata_count')))\\",
        ".select(strata_label)\\",
        ".collect()",
        "result_list = [result_list[i][0] for i in range(len(result_list))]",
        "data_frame_filtered = data_frame.where(~col(strata_label).isin(result_list))",
        "return result_list, data_frame_filtered",
        "2. DataFrame UDF's",
        "Split and add probability of watching show to dataframe",
        "3. DataFrame custom methods",
        "decorator to attach a function to an attribute",
        "custom functions",
        "constant categorical when distinct value = 1",
        "constant continuous when stddev <= thres (default 1e-2)",
        "attach custom methods to DataFrame",
        "4. Estimator Functions",
        "Propensity model",
        "DSI Regression model: Y ~ trt + PS + covs",
        "Doubly robust Regression model: Y ~ trt + iptw + covs",
        "if df.count() < 1000:",
        "return"
    ],
    "docstrings": [],
    "functions": [
        "get_s3_paths_all",
        "progress",
        "add_attr",
        "decorator",
        "_wrapper",
        "custom",
        "join_rois",
        "join_hvas",
        "add_cust_status",
        "add_hva_binary",
        "quantile_bucketize",
        "drop_const_cols",
        "rename_pcas",
        "multi_category_to_string",
        "cols_calibrate",
        "fill_with_mean_inclusive",
        "add_propensity",
        "dsi_regression",
        "dr_regression",
        "hva_estimate"
    ],
    "classes": []
}