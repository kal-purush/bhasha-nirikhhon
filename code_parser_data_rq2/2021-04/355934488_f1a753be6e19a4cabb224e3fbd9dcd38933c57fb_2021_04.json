{
    "identifiers": [
        "argparse",
        "collections",
        "datetime",
        "math",
        "numpy",
        "os",
        "pickle",
        "random",
        "subprocess",
        "sys",
        "time",
        "os",
        "path",
        "join",
        "os",
        "path",
        "dirname",
        "sys",
        "path",
        "append",
        "os",
        "path",
        "abspath",
        "LIBLINEAR_PATH",
        "liblinearutil",
        "given_data",
        "collections",
        "Counter",
        "collections",
        "Counter",
        "isinstance",
        "given_data",
        "__initialize_sequence_pairs_from_file",
        "given_data",
        "isinstance",
        "given_data",
        "__initialize_sequence_pairs_from_list",
        "given_data",
        "__initialize_attributes",
        "observation_sequence",
        "_",
        "sequence_pairs",
        "length_sum",
        "len",
        "observation_sequence",
        "length_sum",
        "len",
        "sequence_pairs",
        "data_path",
        "data_path",
        "open",
        "data_path",
        "infile",
        "line",
        "infile",
        "line",
        "split",
        "len",
        "toks",
        "toks",
        "toks",
        "len",
        "toks",
        "toks",
        "label",
        "observation_sequence",
        "append",
        "observation",
        "label_sequence",
        "append",
        "label",
        "observation_sequence",
        "sequence_pairs",
        "append",
        "observation_sequence",
        "label_sequence",
        "observation_sequence",
        "sequence_pairs",
        "append",
        "observation_sequence",
        "label_sequence",
        "sequence_list",
        "sequence_pair",
        "sequence_list",
        "len",
        "sequence_pair",
        "sequence_pair",
        "sequence_pair",
        "len",
        "observation_sequence",
        "len",
        "label_sequence",
        "sequence_pairs",
        "append",
        "observation_sequence",
        "label_sequence",
        "observation_sequence",
        "label_sequence",
        "sequence_pairs",
        "i",
        "len",
        "observation_sequence",
        "observation_sequence",
        "i",
        "num_instances",
        "observation_count",
        "observation",
        "label_sequence",
        "i",
        "label",
        "num_labeled_instances",
        "label_count",
        "label",
        "observation",
        "observation_label_count",
        "observation_label_count",
        "collections",
        "Counter",
        "observation_label_count",
        "observation",
        "label",
        "observation",
        "observation_label_count",
        "observation_label_count",
        "sorted",
        "observation_label_count",
        "observation",
        "items",
        "key",
        "pair",
        "pair",
        "reverse",
        "sequence_num",
        "observation_sequence",
        "label_sequence",
        "sequence_pairs",
        "position",
        "len",
        "observation_sequence",
        "string_rep",
        "observation_sequence",
        "position",
        "label_sequence",
        "position",
        "string_rep",
        "label_sequence",
        "position",
        "string_rep",
        "sequence_num",
        "len",
        "sequence_pairs",
        "string_rep",
        "string_rep",
        "data_path",
        "open",
        "data_path",
        "infile",
        "line",
        "infile",
        "line",
        "split",
        "toks",
        "len",
        "toks",
        "len",
        "toks",
        "is_prediction",
        "is_not_prediction",
        "is_prediction",
        "is_not_prediction",
        "is_prediction",
        "open",
        "data_path",
        "infile",
        "line",
        "infile",
        "line",
        "split",
        "toks",
        "num_labels",
        "toks",
        "toks",
        "toks",
        "pred_label",
        "gold_label",
        "num_correct_labels",
        "observation_sequence",
        "append",
        "observation",
        "gold_label_sequence",
        "append",
        "gold_label",
        "pred_label_sequence",
        "append",
        "pred_label",
        "num_sequences",
        "observation_sequence",
        "sequence_pairs",
        "append",
        "observation_sequence",
        "gold_label_sequence",
        "pred_label_sequence",
        "gold_label_sequence",
        "num_correct_sequences",
        "observation_sequence",
        "num_sequences",
        "sequence_pairs",
        "append",
        "observation_sequence",
        "gold_label_sequence",
        "pred_label_sequence",
        "gold_label_sequence",
        "num_correct_sequences",
        "num_correct_labels",
        "num_labels",
        "num_correct_sequences",
        "num_sequences",
        "SequenceData",
        "sequence_pairs",
        "is_prediction",
        "SequenceData",
        "data_path",
        "is_prediction",
        "data_path",
        "data_path",
        "format",
        "len",
        "data",
        "sequence_pairs",
        "data",
        "get_average_length",
        "format",
        "data",
        "num_instances",
        "format",
        "data",
        "num_labeled_instances",
        "format",
        "len",
        "data",
        "observation_count",
        "format",
        "len",
        "data",
        "label_count",
        "is_prediction",
        "format",
        "per_instance_accuracy",
        "format",
        "per_sequence_accuracy",
        "word_sequence",
        "position",
        "position",
        "FRONT_BUFFER_SYMBOL",
        "position",
        "len",
        "word_sequence",
        "END_BUFFER_SYMBOL",
        "word_sequence",
        "position",
        "word",
        "word",
        "isupper",
        "word",
        "length",
        "i",
        "length",
        "i",
        "len",
        "word",
        "prefix",
        "word",
        "i",
        "prefix",
        "prefix",
        "word",
        "length",
        "i",
        "length",
        "i",
        "len",
        "word",
        "word",
        "i",
        "suffix",
        "suffix",
        "suffix",
        "word",
        "word",
        "isalnum",
        "word",
        "word",
        "ValueError",
        "SPELLING_FEATURE_CACHE",
        "SPELLING_FEATURE_CACHE",
        "word",
        "relative_position",
        "word",
        "relative_position",
        "SPELLING_FEATURE_CACHE",
        "format",
        "relative_position",
        "word",
        "format",
        "relative_position",
        "is_capitalized",
        "word",
        "length",
        "format",
        "length",
        "relative_position",
        "get_prefix",
        "word",
        "length",
        "format",
        "length",
        "relative_position",
        "get_suffix",
        "word",
        "length",
        "format",
        "relative_position",
        "is_all_nonalphanumeric",
        "word",
        "format",
        "relative_position",
        "is_float",
        "word",
        "word",
        "relative_position",
        "features",
        "SPELLING_FEATURE_CACHE",
        "word",
        "relative_position",
        "copy",
        "word_sequence",
        "position",
        "get_word",
        "word_sequence",
        "position",
        "get_word",
        "word_sequence",
        "position",
        "get_word",
        "word_sequence",
        "position",
        "get_word",
        "word_sequence",
        "position",
        "get_word",
        "word_sequence",
        "position",
        "spelling_features",
        "word",
        "format",
        "word_left1",
        "format",
        "word_left2",
        "format",
        "word_right1",
        "format",
        "word_right2",
        "features",
        "word_sequence",
        "position",
        "gaze_dictionary",
        "get_baseline_features",
        "word_sequence",
        "position",
        "math",
        "sqrt",
        "len",
        "features",
        "feature",
        "features",
        "features",
        "feature",
        "norm_features",
        "word_sequence",
        "position",
        "word",
        "gaze_dictionary",
        "gaze_dictionary",
        "word",
        "gaze_dictionary",
        "UNKNOWN_SYMBOL",
        "i",
        "value",
        "word_gaze",
        "format",
        "i",
        "value",
        "position",
        "word_sequence",
        "position",
        "word",
        "gaze_dictionary",
        "gaze_dictionary",
        "word",
        "gaze_dictionary",
        "UNKNOWN_SYMBOL",
        "i",
        "value",
        "word_gaze",
        "format",
        "i",
        "value",
        "position",
        "len",
        "word_sequence",
        "word_sequence",
        "position",
        "word",
        "gaze_dictionary",
        "gaze_dictionary",
        "word",
        "gaze_dictionary",
        "UNKNOWN_SYMBOL",
        "i",
        "value",
        "word_gaze",
        "format",
        "i",
        "value",
        "features",
        "word_sequence",
        "position",
        "bitstring_dictionary",
        "get_baseline_features",
        "word_sequence",
        "position",
        "word_sequence",
        "position",
        "word",
        "bitstring_dictionary",
        "bitstring_dictionary",
        "word",
        "bitstring_dictionary",
        "UNKNOWN_SYMBOL",
        "i",
        "len",
        "word_bitstring",
        "format",
        "i",
        "word_bitstring",
        "i",
        "format",
        "word_bitstring",
        "position",
        "word_sequence",
        "position",
        "word",
        "bitstring_dictionary",
        "bitstring_dictionary",
        "word",
        "bitstring_dictionary",
        "UNKNOWN_SYMBOL",
        "i",
        "len",
        "word_bitstring",
        "format",
        "i",
        "word_bitstring",
        "i",
        "format",
        "word_bitstring",
        "position",
        "len",
        "word_sequence",
        "word_sequence",
        "position",
        "word",
        "bitstring_dictionary",
        "bitstring_dictionary",
        "word",
        "bitstring_dictionary",
        "UNKNOWN_SYMBOL",
        "i",
        "len",
        "word_bitstring",
        "format",
        "i",
        "word_bitstring",
        "i",
        "format",
        "word_bitstring",
        "features",
        "feature_template",
        "clear_spelling_feature_cache",
        "feature_template",
        "len",
        "__map_feature_str2num",
        "feature_number",
        "feature_number",
        "__map_feature_num2str",
        "__map_feature_num2str",
        "feature_number",
        "label_number",
        "label_number",
        "__map_label_num2str",
        "__map_label_num2str",
        "label_number",
        "feature_string",
        "feature_string",
        "__map_feature_str2num",
        "__map_feature_str2num",
        "feature_string",
        "label_string",
        "label_string",
        "__map_label_str2num",
        "__map_label_str2num",
        "label_string",
        "sequence_data",
        "extract_all",
        "skip_list",
        "sequence_data",
        "data_path",
        "sequence_num",
        "observation_sequence",
        "label_sequence",
        "sequence_data",
        "sequence_pairs",
        "position",
        "label",
        "label_sequence",
        "skip_list",
        "skip_list",
        "sequence_num",
        "position",
        "label",
        "extract_all",
        "label_list",
        "append",
        "__get_label",
        "label",
        "features_list",
        "append",
        "__get_features",
        "observation_sequence",
        "position",
        "location_list",
        "append",
        "sequence_num",
        "position",
        "label_list",
        "features_list",
        "location_list",
        "label",
        "is_training",
        "label",
        "__map_label_str2num",
        "len",
        "__map_label_str2num",
        "__map_label_str2num",
        "label_number",
        "__map_label_num2str",
        "label",
        "__map_label_str2num",
        "label",
        "label",
        "__map_label_str2num",
        "__map_label_str2num",
        "label",
        "observation_sequence",
        "position",
        "feature_template",
        "get_baseline_features",
        "observation_sequence",
        "position",
        "feature_template",
        "__word_gaze",
        "get_gaze_features",
        "observation_sequence",
        "position",
        "__word_gaze",
        "feature_template",
        "__word_bitstring",
        "get_bitstring_features",
        "observation_sequence",
        "position",
        "__word_bitstring",
        "feature_template",
        "__word_bitstring",
        "__word_gaze",
        "get_bitstring_features",
        "observation_sequence",
        "position",
        "__word_bitstring",
        "get_gaze_features",
        "observation_sequence",
        "position",
        "__word_gaze",
        "raw_features_bitstrings",
        "update",
        "raw_features_gaze",
        "format",
        "feature_template",
        "raw_feature",
        "raw_features",
        "is_training",
        "raw_feature",
        "__map_feature_str2num",
        "len",
        "__map_feature_str2num",
        "__map_feature_str2num",
        "feature_number",
        "__map_feature_num2str",
        "raw_feature",
        "__map_feature_str2num",
        "raw_feature",
        "raw_features",
        "raw_feature",
        "raw_feature",
        "__map_feature_str2num",
        "__map_feature_str2num",
        "raw_feature",
        "raw_features",
        "raw_feature",
        "numeric_features",
        "gaze_path",
        "open",
        "gaze_path",
        "infile",
        "line",
        "infile",
        "line",
        "split",
        "len",
        "toks",
        "__word_gaze",
        "toks",
        "numpy",
        "array",
        "tok",
        "tok",
        "toks",
        "__word_gaze",
        "toks",
        "numpy",
        "linalg",
        "norm",
        "__word_gaze",
        "toks",
        "UNKNOWN_SYMBOL",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "__word_gaze",
        "bitstring_path",
        "open",
        "bitstring_path",
        "infile",
        "line",
        "infile",
        "line",
        "split",
        "len",
        "toks",
        "__word_bitstring",
        "toks",
        "toks",
        "UNKNOWN_SYMBOL",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "__word_bitstring",
        "feature_extractor",
        "feature_extractor",
        "data_train",
        "data_dev",
        "time",
        "time",
        "__feature_extractor",
        "is_training",
        "__feature_extractor",
        "extract_features",
        "data_train",
        "quiet",
        "format",
        "len",
        "label_list",
        "data_train",
        "num_instances",
        "format",
        "len",
        "data_train",
        "label_count",
        "format",
        "len",
        "data_train",
        "observation_count",
        "format",
        "__feature_extractor",
        "feature_template",
        "format",
        "__feature_extractor",
        "num_feature_types",
        "liblinearutil",
        "problem",
        "label_list",
        "features_list",
        "liblinearutil",
        "train",
        "problem",
        "liblinearutil",
        "parameter",
        "__feature_extractor",
        "quiet",
        "math",
        "ceil",
        "time",
        "time",
        "start_time",
        "format",
        "datetime",
        "timedelta",
        "seconds",
        "num_seconds",
        "data_dev",
        "quiet",
        "predict",
        "data_dev",
        "quiet_value",
        "format",
        "acc",
        "data_train",
        "data_dev",
        "data_train",
        "is_partially_labeled",
        "_",
        "label_sequence",
        "data_train",
        "sequence_pairs",
        "__skip_extraction",
        "append",
        "_",
        "label_sequence",
        "os",
        "path",
        "exists",
        "active_output_path",
        "subprocess",
        "check_output",
        "active_output_path",
        "os",
        "makedirs",
        "active_output_path",
        "open",
        "os",
        "path",
        "join",
        "active_output_path",
        "locations",
        "collections",
        "defaultdict",
        "sequence_num",
        "position",
        "locations",
        "selected_positions",
        "sequence_num",
        "append",
        "position",
        "sequence_num",
        "selected_positions",
        "data_train",
        "sequence_pairs",
        "sequence_num",
        "_",
        "len",
        "word_sequence",
        "position",
        "selected_positions",
        "sequence_num",
        "label_sequence",
        "position",
        "__skip_extraction",
        "sequence_num",
        "sequence_list",
        "append",
        "word_sequence",
        "selected_labels",
        "SequenceData",
        "sequence_list",
        "selected_data",
        "data_selected",
        "__feature_extractor",
        "quiet",
        "train",
        "data_selected",
        "quiet_value",
        "data_selected",
        "data_selected",
        "num_labeled_instances",
        "active_output_interval",
        "data_dev",
        "quiet",
        "predict",
        "data_dev",
        "quiet_value",
        "format",
        "data_selected",
        "num_labeled_instances",
        "acc",
        "message",
        "logfile",
        "write",
        "message",
        "logfile",
        "flush",
        "os",
        "path",
        "join",
        "active_output_path",
        "data_selected",
        "num_labeled_instances",
        "open",
        "file_name",
        "outfile",
        "outfile",
        "write",
        "data_selected",
        "__str__",
        "sorted",
        "data_train",
        "observation_count",
        "items",
        "key",
        "type_count",
        "type_count",
        "reverse",
        "wordtype",
        "wordtype",
        "_",
        "sorted_wordcount_pairs",
        "active_seed_size",
        "collections",
        "defaultdict",
        "sequence_num",
        "observation_sequence",
        "_",
        "data_train",
        "sequence_pairs",
        "position",
        "word",
        "observation_sequence",
        "word",
        "seed_wordtypes",
        "occurring_locations",
        "word",
        "append",
        "sequence_num",
        "position",
        "random",
        "sample",
        "occurring_locations",
        "wordtype",
        "wordtype",
        "seed_wordtypes",
        "__make_data_from_locations",
        "locations",
        "__train_silently",
        "data_selected",
        "__interval_report",
        "data_selected",
        "len",
        "locations",
        "data_train",
        "num_labeled_instances",
        "__feature_extractor",
        "extract_features",
        "data_train",
        "__skip_extraction",
        "liblinearutil",
        "predict",
        "label_list",
        "features_list",
        "__liblinear_model",
        "index",
        "scores",
        "scores_list",
        "sorted",
        "scores",
        "reverse",
        "sorted_scores",
        "sorted_scores",
        "len",
        "scores",
        "abs",
        "scores",
        "confidence_index_pairs",
        "append",
        "confidence",
        "index",
        "confidence_index_pairs",
        "sort",
        "_",
        "index",
        "confidence_index_pairs",
        "active_step_size",
        "locations",
        "append",
        "location_list",
        "index",
        "__make_data_from_locations",
        "locations",
        "__train_silently",
        "data_selected",
        "__interval_report",
        "data_selected",
        "logfile",
        "close",
        "model_path",
        "os",
        "path",
        "exists",
        "model_path",
        "subprocess",
        "check_output",
        "model_path",
        "os",
        "makedirs",
        "model_path",
        "pickle",
        "dump",
        "__feature_extractor",
        "open",
        "os",
        "path",
        "join",
        "model_path",
        "protocol",
        "pickle",
        "HIGHEST_PROTOCOL",
        "liblinearutil",
        "save_model",
        "os",
        "path",
        "join",
        "model_path",
        "__liblinear_model",
        "model_path",
        "pickle",
        "load",
        "open",
        "os",
        "path",
        "join",
        "model_path",
        "liblinearutil",
        "load_model",
        "os",
        "path",
        "join",
        "model_path",
        "data_test",
        "time",
        "time",
        "__feature_extractor",
        "is_training",
        "__feature_extractor",
        "extract_features",
        "data_test",
        "acc",
        "_",
        "_",
        "liblinearutil",
        "predict",
        "label_list",
        "features_list",
        "__liblinear_model",
        "quiet",
        "math",
        "ceil",
        "time",
        "time",
        "start_time",
        "format",
        "datetime",
        "timedelta",
        "seconds",
        "num_seconds",
        "data_test",
        "is_partially_labeled",
        "format",
        "acc",
        "i",
        "label",
        "pred_labels",
        "__feature_extractor",
        "get_label_string",
        "label",
        "pred_labels",
        "acc",
        "args",
        "args",
        "analyze",
        "analyze_data",
        "args",
        "data_path",
        "Minitagger",
        "args",
        "quiet",
        "SequenceData",
        "args",
        "data_path",
        "args",
        "train",
        "SequenceDataFeatureExtractor",
        "args",
        "feature_template",
        "args",
        "gaze_path",
        "feature_extractor",
        "load_word_gazes",
        "args",
        "gaze_path",
        "args",
        "bitstring_path",
        "feature_extractor",
        "load_word_bitstrings",
        "args",
        "bitstring_path",
        "minitagger",
        "equip_feature_extractor",
        "feature_extractor",
        "SequenceData",
        "args",
        "dev_path",
        "args",
        "dev_path",
        "data_dev",
        "data_dev",
        "is_partially_labeled",
        "args",
        "active",
        "args",
        "model_path",
        "minitagger",
        "train",
        "sequence_data",
        "data_dev",
        "minitagger",
        "save",
        "args",
        "model_path",
        "args",
        "active_output_path",
        "args",
        "active_output_path",
        "args",
        "active_seed_size",
        "args",
        "active_step_size",
        "args",
        "active_output_interval",
        "minitagger",
        "train_actively",
        "sequence_data",
        "data_dev",
        "args",
        "model_path",
        "minitagger",
        "load",
        "args",
        "model_path",
        "minitagger",
        "predict",
        "sequence_data",
        "args",
        "prediction_path",
        "open",
        "args",
        "prediction_path",
        "outfile",
        "sequence_num",
        "word_sequence",
        "label_sequence",
        "sequence_data",
        "sequence_pairs",
        "position",
        "word",
        "word_sequence",
        "label_sequence",
        "position",
        "label_sequence",
        "position",
        "ABSENT_GOLD_LABEL",
        "outfile",
        "write",
        "word",
        "gold_label",
        "pred_labels",
        "label_index",
        "label_index",
        "sequence_num",
        "len",
        "sequence_data",
        "sequence_pairs",
        "outfile",
        "write",
        "argparse",
        "ArgumentParser",
        "argparser",
        "add_argument",
        "help",
        "argparser",
        "add_argument",
        "action",
        "help",
        "argparser",
        "add_argument",
        "help",
        "argparser",
        "add_argument",
        "help",
        "argparser",
        "add_argument",
        "action",
        "help",
        "argparser",
        "add_argument",
        "help",
        "argparser",
        "add_argument",
        "help",
        "argparser",
        "add_argument",
        "help",
        "argparser",
        "add_argument",
        "action",
        "help",
        "argparser",
        "add_argument",
        "help",
        "argparser",
        "add_argument",
        "action",
        "help",
        "argparser",
        "add_argument",
        "help",
        "argparser",
        "add_argument",
        "help",
        "argparser",
        "add_argument",
        "help",
        "argparser",
        "add_argument",
        "help",
        "argparser",
        "parse_args",
        "main",
        "parsed_args"
    ],
    "literals": [
        "\"liblinear-1.96/python\"",
        "\"A sequence data can be constructed from either a \"",
        "\"string (file path) or a list\"",
        "\"r\"",
        "\"\"",
        "\"\\t\"",
        "\"\\n\"",
        "\"\\n\"",
        "\"r\"",
        "\"r\"",
        "\"A prediction data file:\"",
        "\"A non-prediction data file:\"",
        "\"{0} sequences (average length: {1:.1f})\"",
        "\"{0} instances\"",
        "\"{0} labeled instances\"",
        "\"{0} observation types\"",
        "\"{0} label types\"",
        "\"Per-instance accuracy: {0:.3f}%\"",
        "\"Per-sequence accuracy: {0:.3f}%\"",
        "\"_START_\"",
        "\"_END_\"",
        "\"<?>\"",
        "\"\"",
        "\"*\"",
        "\"\"",
        "\"*\"",
        "\"word({0})={1}\"",
        "'is_capitalized({0})={1}'",
        "\"prefix{0}({1})={2}\"",
        "\"suffix{0}({1})={2}\"",
        "\"is_all_nonalphanumeric({0})={1}\"",
        "\"is_float({0})={1}\"",
        "\"word(-1)={0}\"",
        "\"word(-2)={0}\"",
        "\"word(+1)={0}\"",
        "\"word(+2)={0}\"",
        "\"gaze(0)_at({0})\"",
        "\"gaze(-1)_at({0})\"",
        "\"gaze(+1)_at({0})\"",
        "\"bitstring(0)_prefix({0})={1}\"",
        "\"bitstring(0)_all={0}\"",
        "\"bitstring(-1)_prefix({0})={1}\"",
        "\"bitstring(-1)_all={0}\"",
        "\"bitstring(+1)_prefix({0})={1}\"",
        "\"bitstring(+1)_all={0}\"",
        "\"baseline\"",
        "\"gaze\"",
        "\"bitstring\"",
        "\"combo\"",
        "\"Unsupported feature templat {0}\"",
        "\"r\"",
        "\"(\"",
        "\"-LCB-\"",
        "\"(\"",
        "\"-LRB-\"",
        "\"(\"",
        "\"*LCB*\"",
        "\"(\"",
        "\"*LRB*\"",
        "\"(\"",
        "\")\"",
        "\"-RCB-\"",
        "\")\"",
        "\"-RRB-\"",
        "\")\"",
        "\"*RCB*\"",
        "\")\"",
        "\"*RRB*\"",
        "\")\"",
        "\"\\\"\"",
        "\"``\"",
        "\"\\\"\"",
        "\"''\"",
        "\"\\\"\"",
        "\"`\"",
        "\"\\\"\"",
        "\"'\"",
        "\"\\\"\"",
        "\"r\"",
        "\"(\"",
        "\"-LCB-\"",
        "\"(\"",
        "\"-LRB-\"",
        "\"(\"",
        "\"*LCB*\"",
        "\"(\"",
        "\"*LRB*\"",
        "\"(\"",
        "\")\"",
        "\"-RCB-\"",
        "\")\"",
        "\"-RRB-\"",
        "\")\"",
        "\"*RCB*\"",
        "\")\"",
        "\"*RRB*\"",
        "\")\"",
        "\"\\\"\"",
        "\"``\"",
        "\"\\\"\"",
        "\"''\"",
        "\"\\\"\"",
        "\"`\"",
        "\"\\\"\"",
        "\"'\"",
        "\"\\\"\"",
        "\"\"",
        "\"{0} labeled instances (out of {1})\"",
        "\"{0} label types\"",
        "\"{0} observation types\"",
        "\"\\\"{0}\\\" feature template\"",
        "\"{0} feature types\"",
        "\"-q\"",
        "\"Training time: {0}\"",
        "\"Dev accuracy: {0:.3f}%\"",
        "\"rm\"",
        "\"-rf\"",
        "\"log\"",
        "\"w\"",
        "\"{0} labels: {1:.3f}%\"",
        "\"\\n\"",
        "\"example\"",
        "\"w\"",
        "\"-q\"",
        "\"rm\"",
        "\"-rf\"",
        "\"feature_extractor\"",
        "\"wb\"",
        "\"liblinear_model\"",
        "\"feature_extractor\"",
        "\"rb\"",
        "\"liblinear_model\"",
        "\"-q\"",
        "\"Prediction time: {0}\"",
        "\"Per-instance accuracy: {0:.3f}%\"",
        "\"Not reporting accuracy: test data missing gold labels\"",
        "\"<NO_GOLD_LABEL>\"",
        "\"w\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\n\"",
        "\"\\n\"",
        "\"__main__\"",
        "\"data_path\"",
        "\"path to data (used for \"",
        "\"training/testing)\"",
        "\"--analyze\"",
        "\"store_true\"",
        "\"Analyze \"",
        "\"given data and return\"",
        "\"--model_path\"",
        "\"path to model \"",
        "\"directory\"",
        "\"--prediction_path\"",
        "\"path to output \"",
        "\"file of prediction\"",
        "\"--train\"",
        "\"store_true\"",
        "\"train the \"",
        "\"tagger on the given data\"",
        "\"--feature_template\"",
        "\"baseline\"",
        "\"feature template\"",
        "\" (default: %(default)s)\"",
        "\"--gaze_path\"",
        "\"path to word \"",
        "\"gazes\"",
        "\"--bitstring_path\"",
        "\"path to word \"",
        "\"bit strings (from a hierarchy of word types)\"",
        "\"--quiet\"",
        "\"store_true\"",
        "\"no messages\"",
        "\"--dev_path\"",
        "\"path to development \"",
        "\"data (used for training)\"",
        "\"--active\"",
        "\"store_true\"",
        "\"perform \"",
        "\"active learning on the given data\"",
        "\"--active_output_path\"",
        "\"path to \"",
        "\"output directory for active learning\"",
        "\"--active_seed_size\"",
        "\"number of seed examples \"",
        "\"for active learning (default: %(default)d)\"",
        "\"--active_step_size\"",
        "\"number of examples for \"",
        "\"labeling at each iteration in active learning \"",
        "\"(default: %(default)d)\"",
        "\"--active_output_interval\"",
        "\"output actively \"",
        "\"selected examples every time this value divides \"",
        "\"their number (default: %(default)d)\""
    ],
    "variables": [
        "LIBLINEAR_PATH",
        "data_path",
        "sequence_pairs",
        "num_instances",
        "num_labeled_instances",
        "observation_count",
        "label_count",
        "observation_label_count",
        "is_partially_labeled",
        "length_sum",
        "data_path",
        "observation_sequence",
        "label_sequence",
        "toks",
        "observation",
        "label",
        "is_partially_labeled",
        "observation_sequence",
        "label_sequence",
        "observation_sequence",
        "label_sequence",
        "observation",
        "label",
        "observation",
        "observation",
        "string_rep",
        "is_prediction",
        "is_not_prediction",
        "toks",
        "is_not_prediction",
        "is_prediction",
        "sequence_pairs",
        "per_instance_accuracy",
        "per_sequence_accuracy",
        "num_labels",
        "num_sequences",
        "num_correct_labels",
        "num_correct_sequences",
        "observation_sequence",
        "gold_label_sequence",
        "pred_label_sequence",
        "toks",
        "observation",
        "gold_label",
        "pred_label",
        "observation_sequence",
        "gold_label_sequence",
        "pred_label_sequence",
        "per_instance_accuracy",
        "per_sequence_accuracy",
        "data",
        "FRONT_BUFFER_SYMBOL",
        "END_BUFFER_SYMBOL",
        "UNKNOWN_SYMBOL",
        "prefix",
        "suffix",
        "suffix",
        "suffix",
        "SPELLING_FEATURE_CACHE",
        "SPELLING_FEATURE_CACHE",
        "features",
        "features",
        "features",
        "features",
        "features",
        "features",
        "features",
        "SPELLING_FEATURE_CACHE",
        "word",
        "word_left1",
        "word_left2",
        "word_right1",
        "word_right2",
        "features",
        "features",
        "features",
        "features",
        "features",
        "features",
        "norm_features",
        "word",
        "word_gaze",
        "word_gaze",
        "features",
        "word",
        "word_gaze",
        "word_gaze",
        "features",
        "word",
        "word_gaze",
        "word_gaze",
        "features",
        "features",
        "word",
        "word_bitstring",
        "word_bitstring",
        "features",
        "features",
        "word",
        "word_bitstring",
        "word_bitstring",
        "features",
        "features",
        "word",
        "word_bitstring",
        "word_bitstring",
        "features",
        "features",
        "feature_template",
        "data_path",
        "is_training",
        "__map_feature_str2num",
        "__map_feature_num2str",
        "__map_label_str2num",
        "__map_label_num2str",
        "__word_gaze",
        "__word_bitstring",
        "label_list",
        "features_list",
        "location_list",
        "data_path",
        "label_number",
        "label",
        "label_number",
        "raw_features",
        "raw_features",
        "raw_features",
        "raw_features_bitstrings",
        "raw_features_gaze",
        "raw_features",
        "numeric_features",
        "feature_number",
        "raw_feature",
        "feature_number",
        "numeric_features",
        "numeric_features",
        "__word_gaze",
        "toks",
        "__word_bitstring",
        "toks",
        "__feature_extractor",
        "__liblinear_model",
        "quiet",
        "active_output_path",
        "active_seed_size",
        "active_step_size",
        "active_output_interval",
        "__feature_extractor",
        "start_time",
        "label_list",
        "features_list",
        "_",
        "problem",
        "__liblinear_model",
        "is_training",
        "num_seconds",
        "quiet_value",
        "quiet",
        "_",
        "acc",
        "quiet",
        "__skip_extraction",
        "logfile",
        "selected_positions",
        "sequence_list",
        "word_sequence",
        "label_sequence",
        "selected_labels",
        "selected_labels",
        "position",
        "position",
        "selected_data",
        "is_training",
        "quiet_value",
        "quiet",
        "quiet",
        "quiet_value",
        "quiet",
        "_",
        "acc",
        "quiet",
        "message",
        "file_name",
        "sorted_wordcount_pairs",
        "seed_wordtypes",
        "occurring_locations",
        "locations",
        "data_selected",
        "label_list",
        "features_list",
        "location_list",
        "_",
        "_",
        "scores_list",
        "confidence_index_pairs",
        "sorted_scores",
        "confidence",
        "data_selected",
        "__feature_extractor",
        "__liblinear_model",
        "start_time",
        "label_list",
        "features_list",
        "_",
        "pred_labels",
        "_",
        "num_seconds",
        "pred_labels",
        "i",
        "ABSENT_GOLD_LABEL",
        "minitagger",
        "minitagger",
        "quiet",
        "sequence_data",
        "feature_extractor",
        "data_dev",
        "minitagger",
        "active_output_path",
        "minitagger",
        "active_seed_size",
        "minitagger",
        "active_step_size",
        "minitagger",
        "active_output_interval",
        "pred_labels",
        "_",
        "label_index",
        "gold_label",
        "gold_label",
        "argparser",
        "parsed_args"
    ],
    "comments": [
        "Author: Karl Stratos (stratos@cs.columbia.edu)",
        "Specify where to find liblinear.",
        "code about data ##################################",
        "\"set\" => {\"verb\":10, \"noun\":8}",
        "Establish whether this data is a prediction file or not.",
        "If prediction, recover the original data and also compute accuracy.",
        "Construct sequence data.",
        "code about features ##############################",
        "For sentence boundaries",
        "For sentence boundaries",
        "For unknown observation types at test time",
        "FEATURE_CACHE[(word, relative_position)] stores the features extracted for the",
        "word at the relative position so that the features can be immediate retrieved",
        "if requested again.",
        "Return a copy so that modifying that object doesn't modify the cache.",
        "Compute the baseline feature vector and normalize its length to 1.",
        "Assumes binary feature values",
        "Add the gaze features. (with embeddings, it was assumed that they were normalized first)",
        "current word",
        "word to the left",
        "word to the right",
        "Compute the baseline feature vector.",
        "Add the bit string features.",
        "current word",
        "word to the left",
        "word to the right",
        "If this example is in the skip list, ignore.",
        "Only use labeled instances unless extract_all=True.",
        "If training, add unknown label types to the dictionary.",
        "index from 1",
        "If predicting, consult the trained dictionary.",
        "Unknown label",
        "Extract raw features.",
        "Convert raw features into integer IDs.",
        "If training, add unknown feature types to the dictionary.",
        "Note: Feature index has to starts from 1 in liblinear.",
        "if predicting, only consider known feature types.",
        "toks = [count] [type] [value_1] ... [value_m]",
        "Always normalize word gazes. <-- do we want to do this? try with and without",
        "Assert that the token for unknown word types is present.",
        "Address some treebank token conventions.",
        "toks = [bitstring] [type] [count]",
        "Assert that the token for unknown word types is present.",
        "Address some treebank token replacement conventions.",
        "code about model  ################################",
        "Assert untrained",
        "Extract features (only labeled instances) and pass them to liblinear.",
        "We will assume that we can label every example.",
        "Keep track of which examples can be still selected for labeling.",
        "Create an output directory.",
        "This example will not be selected again.",
        "Reset for training.",
        "No need for development here.",
        "Only report at each interval.",
        "Test on the development data if we have it.",
        "Output the selected labeled examples so far.",
        "Compute the (active_seed_size) most frequent word types in data_train.",
        "Select a random occurrence of each selected type for a seed example.",
        "Train for the first time.",
        "Make predictions on the remaining (i.e., not on the skip list)",
        "labeled examples.",
        "Compute \"confidence\" of each prediction:",
        "max_{y} score(x,y) - max_{y'!=argmax_{y} score(x,y)} score(x,y')",
        "Handle the binary case: liblinear gives only 1 score whose",
        "sign indicates the class (+ versus -).",
        "Select least confident examples for next labeling.",
        "Train from scratch.",
        "Assert trained",
        "Extract features (on all instances, labeled or unlabeled) and pass",
        "them to liblinear for prediction.",
        "Convert predicted labels from integer IDs to strings.",
        "script for command line usage  ########################",
        "Used for instances without gold labels.",
        "If specified, just analyze the given data and return. This data can be",
        "a prediction output file.",
        "Otherwise, either train or use a tagger model on the given data.",
        "Development data should be fully labeled.",
        "Do active learning on the training data",
        "Predict labels in the given data.",
        "Optional prediciton output."
    ],
    "docstrings": [
        "\"\"\"\nThis module contains the code to train and use Minitagger.\n\nCode has been modified by MP on 4/14/2021 to utilize gaze features. Much of the code for\nword embeddings was repurposed for gaze features. An option to use both bitstrings and \ngaze features together was also added. Comments throughout indicate where new code was \nadded. In order to run this file, use the base code provided at \nhttps://github.com/karlstratos/minitagger and insert this file (use in place of \nminitagger.py file) - MP\n\n\"\"\"",
        "\"\"\"\n    Represents a dataset of sequences. The sequences can be partially labeled.\n    They can be loaded from a text file or a list.\n    \"\"\"",
        "\"\"\"Calculates the average length of the sequences.\"\"\"",
        "\"\"\"\n        Initializes sequences from a text file. The format is:\n        [observation] [optional: label]\n        Empty lines indicate sequence boundaries.\n        \"\"\"",
        "\"\"\"\n        Initializes sequences from the given list. The i-th element of the given\n        list should have the following form:\n        sequence_list[i] = [observation_sequence, label_sequence]\n        A label absence is denoted with None.\n        \"\"\"",
        "\"\"\"\n        Initializes the dataset attributes from the loaded sequences.\n        \"\"\"",
        "\"\"\"String representation of sequence pairs\"\"\"",
        "\"\"\"Analyzes the given data file.\"\"\"",
        "\"\"\"Gets the word at the specified position.\"\"\"",
        "\"\"\"Is the word capitalized?\"\"\"",
        "\"\"\"Gets a padded prefix of the word up to the given length.\"\"\"",
        "\"\"\"Gets a padded suffix of the word up to the given length.\"\"\"",
        "\"\"\"Is the word all nonalphanumeric?\"\"\"",
        "\"\"\"Can the word be converted to a float (i.e., numeric value)?\"\"\"",
        "\"\"\"Clears the global spelling feature cache.\"\"\"",
        "\"\"\"\n    Extracts spelling features about the given word. Also considers the word's\n    relative position.\n    \"\"\"",
        "\"\"\"\n    Baseline features: spelling of the word at the position, identities of\n    2 words left and right of the word.\n    \"\"\"",
        "\"\"\"\n    gaze features: normalized baseline features + (normalized) gazes\n    of current, left, and right words.\n    \"\"\"",
        "\"\"\"\n    Bit string features: baseline features + bit strings of current, left, and\n    right words.\n    \"\"\"",
        "\"\"\"Extracts features from sequence data.\"\"\"",
        "\"\"\"Returns the number of distinct feature types.\"\"\"",
        "\"\"\"Converts a numeric feature ID to a string.\"\"\"",
        "\"\"\"Converts a numeric label ID to a string.\"\"\"",
        "\"\"\"Converts a feature string to a numeric ID.\"\"\"",
        "\"\"\"Converts a label string to a numeric ID.\"\"\"",
        "\"\"\"\n        Extracts features from the given sequence data. Also returns the\n        sequence-position indices of the extracted instances. Unless specified\n        extract_all=True, it extracts features only from labeled instances.\n\n        It also skips extracting features from examples specified by skip_list.\n        This is used for active learning. (Pass [] to not skip any example.)\n        \"\"\"",
        "\"\"\"Returns the integer ID of the given label.\"\"\"",
        "\"\"\"\n        Returns the integer IDs of the extracted features for observation at the\n        given position in the sequence.\n        \"\"\"",
        "\"\"\"Loads word gazes from a file in the given path.\"\"\"",
        "\"\"\"Loads word bitstrings from a file in the given path.\"\"\"",
        "\"\"\"Main tagger model\"\"\"",
        "\"\"\"Equips Minitagger with a feature extractor.\"\"\"",
        "\"\"\"Trains Minitagger on the given data.\"\"\"",
        "\"\"\"Does margin-based active learning on the given data.\"\"\"",
        "\"\"\"\n            Makes SequenceData out of a subset of data_train from given\n            location=(sequence_num, position) pairs.\n            \"\"\"",
        "\"\"\"Trains on the argument data in silent mode.\"\"\"",
        "\"\"\"Saves the model as a directory at the given path.\"\"\"",
        "\"\"\"Loads the model from the directory at the given path.\"\"\"",
        "\"\"\"\n        Predicts tags in the given data. If the data is fully labeled, reports\n        the accuracy.\n        \"\"\"",
        "\"\"\"Runs the main function.\"\"\""
    ],
    "functions": [
        "get_average_length",
        "__initialize_sequence_pairs_from_file",
        "__initialize_sequence_pairs_from_list",
        "__initialize_attributes",
        "__str__",
        "analyze_data",
        "get_word",
        "is_capitalized",
        "get_prefix",
        "get_suffix",
        "is_all_nonalphanumeric",
        "is_float",
        "clear_spelling_feature_cache",
        "spelling_features",
        "get_baseline_features",
        "get_gaze_features",
        "get_bitstring_features",
        "num_feature_types",
        "get_feature_string",
        "get_label_string",
        "get_feature_number",
        "get_label_number",
        "extract_features",
        "__get_label",
        "__get_features",
        "load_word_gazes",
        "load_word_bitstrings",
        "equip_feature_extractor",
        "train",
        "train_actively",
        "__make_data_from_locations",
        "__train_silently",
        "__interval_report",
        "save",
        "load",
        "predict",
        "main"
    ],
    "classes": [
        "SequenceData",
        "SequenceDataFeatureExtractor",
        "Minitagger"
    ]
}