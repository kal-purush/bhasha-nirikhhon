{
    "identifiers": [
        "statesFilename",
        "interactionFilename",
        "clickableLayoutFilename",
        "color",
        "loadTable",
        "statesFilename",
        "loadTable",
        "interactionFilename",
        "createVector",
        "width",
        "height",
        "clickableLayoutFilename",
        "loadTable",
        "clickableLayoutFilename",
        "i",
        "i",
        "i",
        "className",
        "i",
        "validStateCount",
        "eval",
        "className",
        "validStateCount",
        "i",
        "validStateCount",
        "i",
        "i",
        "validStateCount",
        "validStateCount",
        "validStateCount",
        "s",
        "s",
        "cm",
        "cm",
        "background",
        "background",
        "keyChar",
        "i",
        "i",
        "i",
        "i",
        "keyChar",
        "i",
        "clickableName",
        "i",
        "i",
        "i",
        "i",
        "clickableName",
        "i",
        "mouseStr",
        "i",
        "i",
        "i",
        "i",
        "mouseStr",
        "i",
        "callbackFunction",
        "callbackFunction",
        "newStateStr",
        "bypassComparison",
        "newStateStr",
        "newStateNum",
        "bypassComparison",
        "newStateNum",
        "bypassComparison",
        "newStateNum",
        "newStateNum",
        "newStateNum",
        "bypassComparison",
        "newStateNum",
        "newStateNum",
        "newStateNum",
        "newStateNum",
        "stateStr",
        "i",
        "i",
        "stateStr",
        "i",
        "i",
        "stateStr",
        "stateNum",
        "stateNum",
        "direction",
        "i",
        "i",
        "i",
        "direction",
        "i",
        "i",
        "stateChanged",
        "stateChanged",
        "width",
        "height",
        "width",
        "width",
        "height",
        "height",
        "width",
        "width",
        "height",
        "height",
        "longFilename",
        "longFilename",
        "newStateName",
        "i",
        "clickableStateArray",
        "i",
        "clickableStateArray",
        "i",
        "clickableStateArray",
        "i",
        "clickableStateArray",
        "i",
        "newStateName",
        "i",
        "i",
        "i",
        "PNGRoomPushedThisArray",
        "i",
        "PNGRoomPushedThisArray",
        "i",
        "PNGRoomPushedThisArray",
        "i",
        "PNGRoomFindTheThis",
        "pThis",
        "pThis",
        "pThis",
        "pThis",
        "i",
        "pThis",
        "i",
        "pThis",
        "i",
        "pThis",
        "i",
        "pThis",
        "i",
        "pThis",
        "i",
        "pThis",
        "i",
        "pThis",
        "i",
        "pThis",
        "i",
        "pThis",
        "i",
        "pThis",
        "s",
        "s",
        "_imagePath",
        "_collisionPath",
        "_imagePath",
        "_imagePath",
        "_collisionPath",
        "PNGRoomPushedThisArray",
        "loadTable",
        "_collisionPath",
        "PNGCollisionTableLoaded",
        "_collisionPath",
        "loadImage",
        "background",
        "push",
        "imageMode",
        "CENTER",
        "image",
        "width",
        "height",
        "pop",
        "ps",
        "ps",
        "i",
        "i",
        "ps",
        "i",
        "ps",
        "i",
        "ps",
        "i",
        "ps",
        "i",
        "s",
        "s"
    ],
    "literals": [
        "\"#000000\"",
        "\"\"",
        "'csv'",
        "'header'",
        "'csv'",
        "'header'",
        "'csv'",
        "'header'",
        "'ClassName'",
        "\"\"",
        "\"empty className field in line #\"",
        "\" of states file\"",
        "\"new \"",
        "'StateName'",
        "'PNGFilename'",
        "'CollisionFilename'",
        "'StateName'",
        "'CurrentState'",
        "'KeyTyped'",
        "'NextState'",
        "\"mouseReleased\"",
        "'CurrentState'",
        "'ClickableName'",
        "'NextState'",
        "'CurrentState'",
        "'MouseEvent'",
        "'NextState'",
        "\"passed new state num = \"",
        "\"invalid statenum, exiting\"",
        "\"Going to state: \"",
        "'StateName'",
        "\"Can't find stateStr, \"",
        "'StateName'",
        "'ClassName'",
        "\"\"",
        "'CurrentState'",
        "'MapDirection'",
        "'NextState'",
        "\"W\"",
        "\"E\"",
        "\"N\"",
        "\"S\"",
        "\"\"",
        "'PNGFilename'",
        "'/'",
        "'State'",
        "\"\"",
        "\"PNGCollisionTableLoaded() callback\"",
        "\"Couldn't find the This\"",
        "\"pThis.stateName = \"",
        "\"Collision table row count = \"",
        "'sx'",
        "'sy'",
        "'ex'",
        "'ey'",
        "\"No collision table loaded\"",
        "\"\"",
        "\"\"",
        "\"PNGRoom.setup(): imagePath =\"",
        "\"\"",
        "'csv'",
        "'header'",
        "\"PNGRoom.setup(): loading collisionTable: \"",
        "\"load() for: \"",
        "\"Collision table row count = \""
    ],
    "variables": [
        "validStateCount",
        "i",
        "className",
        "i",
        "i",
        "i",
        "newStateNum",
        "i",
        "direction",
        "stateChanged",
        "i",
        "longFilename",
        "clickableStateArray",
        "i",
        "PNGRoomPushedThisArray",
        "i",
        "pThis",
        "i",
        "i"
    ],
    "comments": [
        "Clickable layout table is an OPTIONAL parameter",
        "expects as .csv file with the format as outlined in the readme file",
        "For each row, allocate a clickable object",
        "if we have an image, we will call setImage() to load that image into that p5.clickable",
        "this is the allocator itself",
        "store name of the state in the PNGRoom",
        "All classes (for now) have a PNGFilename, could add a blank room",
        "accessor for the state name",
        "from the p5.play class",
        "clickable manager for turning visibility on/off for buttons based on their states",
        "call on every draw loop from the p5 sketch",
        "this will reset the player position, if we go outside of a collision rect",
        "set to last good position",
        "save the last poisition for checkCollision in the future",
        "move to interation table!",
        "go through each row, look for a match to the current state",
        "the .name property of a function will convert function to string for comparison",
        "now, look for a match with the key typed, converting it to a string",
        "if a match, set the drawFunction to the next state, eval() converts",
        "string to function",
        "Right now, just support for mouse released, but in future will have",
        "other events like mouse pressed or moved, etc.",
        "a clickable was pressed, look for it in the interaction table",
        "this will be = the clickable pressed",
        "go through each row, look for a match to the current state",
        "the .name property of a function will convert function to string for comparison",
        "now, look for a match with the key typed, converting it to a string",
        "if a match, set the drawFunction to the next state, eval() converts",
        "string to function",
        "-- PRIVATE FUNCTIONS: don't call these --//",
        "Called essentially as a private function for mouseReleased(), mousePressed(), etc to",
        "process the mouseEvent column interaction table",
        "go through each row, look for a match to the current state",
        "the .name property of a function will convert function to string for comparison",
        "now, look for a match with the key typed, converting it to a string",
        "if a match, set the drawFunction to the next state, eval() converts",
        "string to function",
        "OPTIMIZATION: load all the state/interaction tables etc into an array with just",
        "those state entries for faster navigation",
        "newState is a STRING;",
        "2nd param is a flag to bypass the comparison to currentStateNum, usually used at startup",
        "default is by string",
        "if( this.currentState === newStateNum ) {",
        "print( \"same state num, no change\")",
        "return;",
        "}",
        "activate callback hander",
        "store new state name from states table",
        "error!!",
        "returns class name of current state",
        "empty string returned if we are in the room still",
        "go through each row, look for a match to the current state",
        "the .name property of a function will convert function to string for comparison",
        "now, look for a match with the direction, converting it to a string",
        "if a match, set the drawFunction to the next state, eval() converts",
        "string to function",
        "state never changed, so we stick at edge",
        "return direction we are out of bounds to match interaction map",
        "no room, constrain to edges",
        "returns the \"short\" filename (no precesing directory for the current state)",
        "logic here is this (1) look at the clickables table to find the state name",
        "(2) look for a match in the clickables array, (3) turn visibility on/off accordingly",
        "EVERY clickable either has ONE state that corresponds to it or NO states",
        "this is the array where the button is VISIBLE for that state",
        "OPTIMIZATION: store this in setup somethwere",
        "if there is no column called 'State' then the array is a proper",
        "length, but each entry is undefined, just continue then",
        "if an empty string, then we are not binding this button to a state",
        "Otherwise, we are binding, so turn button on/off accordingly",
        "print(\"set to visible\");",
        "print(\"set to hide\");",
        "this will be used with the loadTable() callback for the collision table",
        "class variables are not available for callbacks",
        "need a global variable with a ridiculous name to avoid name conflicts",
        "save the this data",
        "do stuff",
        "test return",
        "Image stuff",
        "collision stuff",
        "flag for first-time load for collision table proper loading",
        "filepath to PNG is 1st variable",
        "file to collision CSV is 2nd variable (may be empty string)",
        "use for callbacks",
        "PNGRoomPushedNameList.push(this.stateName);",
        "PNGRoomPushedThis.push(this);",
        "PNGRoomPushedThis = this;",
        "empty, sublcasses can override",
        "this loads the collision table, we use the flag b/c loadTable needs",
        "time to load the data and won't work properly for a few cycles",
        "if( this.loaded === false ) {",
        "// load the collisions",
        "this.loaded = true;",
        "}",
        "imageMode(CORNER);",
        "fill(255,0,0);",
        "draw rects to see...",
        "Go through our array and ook to see if we are in bounds anywhere",
        "print(\"collsion at shape \" + i);",
        "output to DebugScreen or console window, if we have no debug object"
    ],
    "docstrings": [
        "*****************************************************************************************************************\n//\n//  p5.2DAdventure\n//  for P5.js\n//\n//  Written by Scott Kildall\n//\n//  Very Much in Progress\n********************************************************************************************************************"
    ],
    "functions": [
        "setup",
        "getStateName",
        "setPlayerSprite",
        "setClickableManager",
        "draw",
        "keyPressed",
        "mouseReleased",
        "clickablePressed",
        "mouseEvent",
        "setChangedStateCallback",
        "changeState",
        "changeStateByNum",
        "getNumStates",
        "getCurrentStateNum",
        "getStateNumFromString",
        "getStateStrFromNum",
        "getClassName",
        "checkPlayerSprite",
        "checkSpriteBounds",
        "adjustSpriteForRoom",
        "constrainSpriteBounds",
        "getPNGFilename",
        "changeButtonsVisibilityFromState",
        "PNGRoomFindTheThis",
        "PNGCollisionTableLoaded",
        "setName",
        "setup",
        "preload",
        "load",
        "unload",
        "draw",
        "checkForCollision",
        "output"
    ],
    "classes": [
        "AdventureManager",
        "PNGRoom"
    ]
}