{
    "identifiers": [
        "DiagnosticSeverity",
        "chalk",
        "sortResults",
        "pretty",
        "sortResults",
        "require",
        "sortResults",
        "require",
        "width",
        "func",
        "process",
        "process",
        "width",
        "func",
        "width",
        "process",
        "og",
        "s",
        "wrapType",
        "wrapType",
        "s",
        "s",
        "wrapType",
        "s",
        "s",
        "s",
        "s",
        "describe",
        "test",
        "setColumnWidth",
        "pretty",
        "oas3SchemaErrors",
        "DiagnosticSeverity",
        "expect",
        "result",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "expect",
        "result",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "expect",
        "result",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "expect",
        "result",
        "chalk",
        "test",
        "setColumnWidth",
        "pretty",
        "oas3SchemaErrors",
        "DiagnosticSeverity",
        "expect",
        "result",
        "chalk",
        "chalk",
        "forceWrapped",
        "chalk",
        "chalk",
        "chalk",
        "forceWrapped",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "forceWrapped",
        "chalk",
        "chalk",
        "chalk",
        "forceWrapped",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "forceWrapped",
        "chalk",
        "chalk",
        "chalk",
        "forceWrapped",
        "chalk",
        "chalk",
        "chalk",
        "test",
        "setColumnWidth",
        "pretty",
        "mixedErrors",
        "DiagnosticSeverity",
        "expect",
        "result",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk",
        "chalk"
    ],
    "literals": [
        "'@stoplight/types'",
        "'chalk'",
        "'../../../utils'",
        "'../pretty'",
        "'./__fixtures__/oas3-schema-errors.json'",
        "'./__fixtures__/mixed-errors.json'",
        "string",
        "string",
        "'Pretty formatter'",
        "'should not wrap when terminal width is wide enough'",
        "${chalk.red('36:22')}       ${chalk.red.inverse('ERROR')}        ${chalk.red.bold(\n          'oas3-schema',\n        )}                     ${chalk.gray(\n          'should NOT have additional properties: type',\n        )}                      ${chalk.cyan('paths./pets.get.responses[200].headers.header-1')}",
        "'36:22'",
        "'ERROR'",
        "'oas3-schema'",
        "'should NOT have additional properties: type'",
        "'paths./pets.get.responses[200].headers.header-1'",
        "${chalk.red('36:22')}       ${chalk.red.inverse('ERROR')}        ${chalk.red.bold(\n          'oas3-schema',\n        )}                     ${chalk.gray(\n          'should match exactly one schema in oneOf',\n        )}                         ${chalk.cyan('paths./pets.get.responses[200].headers.header-1')}",
        "'36:22'",
        "'ERROR'",
        "'oas3-schema'",
        "'should match exactly one schema in oneOf'",
        "'paths./pets.get.responses[200].headers.header-1'",
        "${chalk.red('36:22')}       ${chalk.red.inverse('ERROR')}        ${chalk.red.bold(\n          'oas3-schema',\n        )}                     ${chalk.gray(\n          \"should have required property '$ref'\",\n        )}                             ${chalk.cyan('paths./pets.get.responses[200].headers.header-1')}",
        "'36:22'",
        "'ERROR'",
        "'oas3-schema'",
        "\"should have required property '$ref'\"",
        "'paths./pets.get.responses[200].headers.header-1'",
        "'1 Unique Issue(s)'",
        "'should wrap when terminal width is very small'",
        "File:   /home/Stoplight/spectral/src/__tests__/__fixtures__/petstore.invalid-schema.oas3.yaml\n${chalk.red(\n  '36:22',\n)}       ${chalk.red.inverse('ERROR')}        ${forceWrapped(chalk.red.bold('oas3-sch'), 0)}  ${chalk.gray('should NOT have')}       ${chalk.cyan('paths./pets.get.responses[200].headers.header-1')}\n                         ${forceWrapped(chalk.red.bold('ema'), 2)}       ${chalk.gray('additional')}\n                                   ${chalk.gray('properties: type')}\n\n${chalk.red(\n  '36:22',\n)}       ${chalk.red.inverse('ERROR')}        ${forceWrapped(chalk.red.bold('oas3-sch'), 0)}  ${chalk.gray('should match exactly')}  ${chalk.cyan('paths./pets.get.responses[200].headers.header-1')}\n                         ${forceWrapped(chalk.red.bold('ema'), 2)}       ${chalk.gray('one schema in oneOf')}\n\n${chalk.red(\n  '36:22',\n)}       ${chalk.red.inverse('ERROR')}        ${forceWrapped(chalk.red.bold('oas3-sch'), 0)}  ${chalk.gray('should have required')}  ${chalk.cyan('paths./pets.get.responses[200].headers.header-1')}\n                         ${forceWrapped(chalk.red.bold('ema'), 2)}       ${chalk.gray(\"property '$ref'\")}\n\n${chalk.red.bold('1 Unique Issue(s)')}\\n",
        "'36:22'",
        "'ERROR'",
        "'oas3-sch'",
        "'should NOT have'",
        "'paths./pets.get.responses[200].headers.header-1'",
        "'ema'",
        "'additional'",
        "'properties: type'",
        "'36:22'",
        "'ERROR'",
        "'oas3-sch'",
        "'should match exactly'",
        "'paths./pets.get.responses[200].headers.header-1'",
        "'ema'",
        "'one schema in oneOf'",
        "'36:22'",
        "'ERROR'",
        "'oas3-sch'",
        "'should have required'",
        "'paths./pets.get.responses[200].headers.header-1'",
        "'ema'",
        "\"property '$ref'\"",
        "'1 Unique Issue(s)'",
        "'should display proper severity level'",
        "${chalk.white('3:10')}        ${chalk.white.inverse('HINT')}         ${chalk.white.bold('info-contact')}                    ${chalk.gray('Info object should contain `contact` object.')}                     ${chalk.cyan('info')}\n\n${chalk.yellow(\n  '3:10',\n)}        ${chalk.yellow.inverse('WARNING')}      ${chalk.yellow.bold('info-description')}                ${chalk.gray('OpenAPI object info `description` must be present and non-empty')}  ${chalk.cyan('info')}\n                                                         ${chalk.gray('string.')}\n\n${chalk.red(\n  '5:14',\n)}        ${chalk.red.inverse('ERROR')}        ${chalk.red.bold('info-matches-stoplight')}          ${chalk.gray('Info must contain Stoplight')}                                      ${chalk.cyan('info.title')}\n\n${chalk.blue(\n  '17:13',\n)}       ${chalk.blue.inverse('INFORMATION')}  ${chalk.blue.bold('operation-description')}           ${chalk.gray('Operation `description` must be present and non-empty string.')}    ${chalk.cyan('paths./pets.get')}\n\n${chalk.blue(\n  '64:14',\n)}       ${chalk.blue.inverse('INFORMATION')}  ${chalk.blue.bold('operation-description')}           ${chalk.gray('Operation `description` must be present and non-empty string.')}    ${chalk.cyan('paths./pets.post')}\n\n${chalk.blue(\n  '86:13',\n)}       ${chalk.blue.inverse('INFORMATION')}  ${chalk.blue.bold('operation-description')}           ${chalk.gray('Operation `description` must be present and non-empty string.')}    ${chalk.cyan('paths./pets/{petId}.get')}\n\n${chalk.red.bold('4 Unique Issue(s)')}\\n",
        "'3:10'",
        "'HINT'",
        "'info-contact'",
        "'Info object should contain `contact` object.'",
        "'info'",
        "'3:10'",
        "'WARNING'",
        "'info-description'",
        "'OpenAPI object info `description` must be present and non-empty'",
        "'info'",
        "'string.'",
        "'5:14'",
        "'ERROR'",
        "'info-matches-stoplight'",
        "'Info must contain Stoplight'",
        "'info.title'",
        "'17:13'",
        "'INFORMATION'",
        "'operation-description'",
        "'Operation `description` must be present and non-empty string.'",
        "'paths./pets.get'",
        "'64:14'",
        "'INFORMATION'",
        "'operation-description'",
        "'Operation `description` must be present and non-empty string.'",
        "'paths./pets.post'",
        "'86:13'",
        "'INFORMATION'",
        "'operation-description'",
        "'Operation `description` must be present and non-empty string.'",
        "'paths./pets/{petId}.get'",
        "'4 Unique Issue(s)'"
    ],
    "variables": [
        "oas3SchemaErrors",
        "mixedErrors",
        "og",
        "result",
        "result",
        "result"
    ],
    "comments": [
        "Occurs when line is wrapped at non-whitespace character",
        "first line",
        "middle line",
        "end line"
    ],
    "docstrings": [],
    "functions": [
        "setColumnWidth",
        "forceWrapped"
    ],
    "classes": []
}