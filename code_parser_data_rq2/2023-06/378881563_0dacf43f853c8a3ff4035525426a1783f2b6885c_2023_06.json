{
    "identifiers": [
        "useEffect",
        "FieldValues",
        "UseFieldArrayReturn",
        "useFormContext",
        "get",
        "useRecordContext",
        "InputProps",
        "useApplyArrayInputDefaultValues",
        "inputProps",
        "fieldArrayInputControl",
        "useRecordContext",
        "inputProps",
        "useFormContext",
        "get",
        "record",
        "source",
        "get",
        "getValues",
        "source",
        "getFieldState",
        "source",
        "formState",
        "useEffect",
        "defaultValue",
        "formValue",
        "recordValue",
        "isDirty",
        "source",
        "pathPart",
        "numericRegex",
        "pathPart",
        "pathContainsIndex",
        "source",
        "get",
        "getValues",
        "parentPath",
        "parentValue",
        "fieldArrayInputControl",
        "defaultValue",
        "reset"
    ],
    "literals": [
        "'react'",
        "'react-hook-form'",
        "'lodash/get'",
        "'../controller'",
        "'./useInput'",
        "string",
        "string",
        "'id'",
        "'.'",
        "'.'",
        "'.'"
    ],
    "variables": [
        "useApplyArrayInputDefaultValues",
        "inputProps",
        "record",
        "recordValue",
        "formValue",
        "pathContainsIndex",
        "parentPath",
        "parentValue",
        "numericRegex"
    ],
    "comments": [
        "Since we use get(record, source), if source is like foo.23.bar,",
        "this effect will run. However we only want to set the default value",
        "for the subfield bar if the record actually has a value for foo.23",
        "the parent is undefined, so we don't want to set the default value",
        "We need to update inputs nested in array using react hook forms",
        "own array controller rather then the generic reset to prevent control losing",
        "context of the nested inputs",
        "resets the form so that control no longer sees the form as dirty after",
        "defaults applied"
    ],
    "docstrings": [
        "* This hook updates the array input with the default value if default value is present\n * and field input is not already populated or dirty"
    ],
    "functions": [],
    "classes": []
}