{
    "identifiers": [
        "com",
        "google",
        "idea",
        "blaze",
        "qsync",
        "query",
        "com",
        "google",
        "common",
        "truth",
        "Truth",
        "assertThat",
        "java",
        "nio",
        "file",
        "Path",
        "org",
        "junit",
        "Test",
        "org",
        "junit",
        "runner",
        "RunWith",
        "org",
        "junit",
        "runners",
        "JUnit4",
        "RunWith",
        "Test",
        "qs",
        "QuerySpec",
        "builder",
        "workspaceRoot",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "build",
        "assertThat",
        "qs",
        "getQueryExpression",
        "isEqualTo",
        "Test",
        "qs",
        "QuerySpec",
        "builder",
        "workspaceRoot",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "build",
        "assertThat",
        "qs",
        "getQueryExpression",
        "isEqualTo",
        "Test",
        "qs",
        "QuerySpec",
        "builder",
        "workspaceRoot",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "excludePath",
        "Path",
        "of",
        "excludePath",
        "Path",
        "of",
        "build",
        "assertThat",
        "qs",
        "getQueryExpression",
        "isEqualTo",
        "Test",
        "qs",
        "QuerySpec",
        "builder",
        "workspaceRoot",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "excludePath",
        "Path",
        "of",
        "excludePath",
        "Path",
        "of",
        "build",
        "assertThat",
        "format",
        "qs",
        "isEqualTo",
        "qs",
        "toString",
        "Test",
        "qs",
        "QuerySpec",
        "builder",
        "workspaceRoot",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "excludePath",
        "Path",
        "of",
        "excludePath",
        "Path",
        "of",
        "build",
        "assertThat",
        "format",
        "qs",
        "isEqualTo",
        "Test",
        "qs",
        "QuerySpec",
        "builder",
        "workspaceRoot",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "excludePath",
        "Path",
        "of",
        "excludePath",
        "Path",
        "of",
        "build",
        "assertThat",
        "format",
        "qs",
        "isEqualTo",
        "Test",
        "qs",
        "QuerySpec",
        "builder",
        "workspaceRoot",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "includePath",
        "Path",
        "of",
        "excludePath",
        "Path",
        "of",
        "excludePath",
        "Path",
        "of",
        "build",
        "assertThat",
        "format",
        "qs",
        "isEqualTo",
        "qs",
        "toString"
    ],
    "literals": [
        "\"/workspace/\"",
        "\"some/included/path\"",
        "\"(//some/included/path/...:*)\"",
        "\"/workspace/\"",
        "\"some/included/path\"",
        "\"another/included/path\"",
        "\"(//some/included/path/...:* + //another/included/path/...:*)\"",
        "\"/workspace/\"",
        "\"some/included/path\"",
        "\"another/included/path\"",
        "\"some/included/path/excluded\"",
        "\"another/included/path/excluded\"",
        "\"(//some/included/path/...:* + //another/included/path/...:* -\"",
        "\" //some/included/path/excluded/...:* - //another/included/path/excluded/...:*)\"",
        "\"/workspace/\"",
        "\"some/included/path\"",
        "\"another/included/path\"",
        "\"some/included/path/excluded\"",
        "\"another/included/path/excluded\"",
        "\"%s\"",
        "\"/workspace/\"",
        "\"some/included/path\"",
        "\"another/included/path\"",
        "\"some/included/path/excluded\"",
        "\"another/included/path/excluded\"",
        "\"%.5s\"",
        "\"query\"",
        "\"/workspace/\"",
        "\"some/included/path\"",
        "\"another/included/path\"",
        "\"some/included/path/excluded\"",
        "\"another/included/path/excluded\"",
        "\"%.16s\"",
        "\"query<truncated>\"",
        "\"/workspace/\"",
        "\"some/included/path\"",
        "\"another/included/path\"",
        "\"some/included/path/excluded\"",
        "\"another/included/path/excluded\"",
        "\"%.200s\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Copyright 2023 The Bazel Authors. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License."
    ],
    "functions": [
        "testGetQueryExpression_includes_singlePath",
        "testGetQueryExpression_includes_multiplePaths",
        "testGetQueryExpression_includes_and_excludes",
        "testFormat_noPrecision",
        "testFormat_shortPrecision",
        "testFormat_longPrecision",
        "testFormat_veryLongPrecision"
    ],
    "classes": [
        "QuerySpecTest"
    ]
}