{
    "identifiers": [
        "createCollection",
        "PineconeArgumentError",
        "PineconeBadRequestError",
        "PineconeInternalServerError",
        "PineconeNotFoundError",
        "IndexOperationsApi",
        "CreateCollectionOperationRequest",
        "CCOR",
        "setOpenAPIResponse",
        "fakeCreateCollectionResponse",
        "req",
        "jest",
        "fakeCreateCollectionResponse",
        "jest",
        "fakeCreateCollection",
        "fakeListIndexes",
        "IOA",
        "describe",
        "describe",
        "test",
        "setOpenAPIResponse",
        "toThrow",
        "createCollection",
        "IOA",
        "expect",
        "toThrow",
        "PineconeArgumentError",
        "expect",
        "toThrow",
        "test",
        "setOpenAPIResponse",
        "toThrow",
        "createCollection",
        "IOA",
        "expect",
        "toThrow",
        "PineconeArgumentError",
        "expect",
        "toThrow",
        "test",
        "setOpenAPIResponse",
        "toThrow",
        "createCollection",
        "IOA",
        "expect",
        "toThrow",
        "PineconeArgumentError",
        "expect",
        "toThrow",
        "test",
        "setOpenAPIResponse",
        "toThrow",
        "createCollection",
        "IOA",
        "expect",
        "toThrow",
        "PineconeArgumentError",
        "expect",
        "toThrow",
        "test",
        "setOpenAPIResponse",
        "toThrow",
        "createCollection",
        "IOA",
        "expect",
        "toThrow",
        "PineconeArgumentError",
        "expect",
        "toThrow",
        "test",
        "setOpenAPIResponse",
        "toThrow",
        "createCollection",
        "IOA",
        "expect",
        "toThrow",
        "PineconeArgumentError",
        "expect",
        "toThrow",
        "test",
        "setOpenAPIResponse",
        "toThrow",
        "createCollection",
        "IOA",
        "expect",
        "toThrow",
        "PineconeArgumentError",
        "expect",
        "toThrow",
        "test",
        "setOpenAPIResponse",
        "toThrow",
        "createCollection",
        "IOA",
        "expect",
        "toThrow",
        "PineconeArgumentError",
        "expect",
        "toThrow",
        "test",
        "setOpenAPIResponse",
        "createCollection",
        "IOA",
        "expect",
        "returned",
        "expect",
        "IOA",
        "describe",
        "test",
        "setOpenAPIResponse",
        "toThrow",
        "createCollection",
        "IOA",
        "expect",
        "toThrow",
        "PineconeInternalServerError",
        "test",
        "setOpenAPIResponse",
        "toThrow",
        "createCollection",
        "IOA",
        "expect",
        "toThrow",
        "PineconeBadRequestError",
        "expect",
        "toThrow",
        "test",
        "setOpenAPIResponse",
        "toThrow",
        "createCollection",
        "IOA",
        "expect",
        "toThrow",
        "PineconeNotFoundError",
        "expect",
        "toThrow"
    ],
    "literals": [
        "'../createCollection'",
        "'../../errors'",
        "'../../pinecone-generated-ts-fetch'",
        "'../../pinecone-generated-ts-fetch'",
        "string",
        "string",
        "'foo'",
        "'bar'",
        "'createCollection'",
        "'argument validations'",
        "'throws if no arguments are provided'",
        "''",
        "'Argument to createCollection has a problem. The argument must be object.'",
        "'throws if argument is not an object'",
        "''",
        "'not an object'",
        "'Argument to createCollection has a problem. The argument must be object.'",
        "'throws if empty object'",
        "''",
        "\"Argument to createCollection has a problem. The argument must have required property 'name'. The argument must have required property 'source'.\"",
        "'throws if name is not provided'",
        "''",
        "''",
        "'index-name'",
        "\"Argument to createCollection has a problem. The property 'name' must not be blank.\"",
        "'throws if name is not a string'",
        "''",
        "'index-name'",
        "\"Argument to createCollection has a problem. The property 'name' must be string.\"",
        "'throws if source is not provided'",
        "''",
        "'collection-name'",
        "\"Argument to createCollection has a problem. The argument must have required property 'source'.\"",
        "'throws if source is not a string'",
        "''",
        "'foo'",
        "\"Argument to createCollection has a problem. The property 'source' must be string.\"",
        "'throws if source is blank'",
        "''",
        "'collection-name'",
        "''",
        "\"Argument to createCollection has a problem. The property 'source' must not be blank.\"",
        "'calls the openapi create collection endpoint'",
        "''",
        "'collection-name'",
        "'index-name'",
        "'collection-name'",
        "'index-name'",
        "'http error mapping'",
        "'when 500 occurs'",
        "'backend error message'",
        "'collection-name'",
        "'index-name'",
        "'when 400 occurs, displays server message'",
        "'backend error message'",
        "'collection-name'",
        "'index-name'",
        "'backend error message'",
        "'when 404 occurs, show available indexes'",
        "'not found'",
        "'collection-name'",
        "'index-name'",
        "\"Index 'index-name' does not exist. Valid index names: ['foo', 'bar']\""
    ],
    "variables": [
        "setOpenAPIResponse",
        "fakeCreateCollection",
        "fakeListIndexes",
        "IOA",
        "IOA",
        "toThrow",
        "IOA",
        "toThrow",
        "IOA",
        "toThrow",
        "IOA",
        "toThrow",
        "IOA",
        "toThrow",
        "IOA",
        "toThrow",
        "IOA",
        "toThrow",
        "IOA",
        "toThrow",
        "IOA",
        "returned",
        "IOA",
        "toThrow",
        "IOA",
        "toThrow",
        "IOA",
        "toThrow"
    ],
    "comments": [
        "@ts-ignore",
        "@ts-ignore",
        "@ts-ignore",
        "@ts-ignore",
        "@ts-ignore",
        "@ts-ignore"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}