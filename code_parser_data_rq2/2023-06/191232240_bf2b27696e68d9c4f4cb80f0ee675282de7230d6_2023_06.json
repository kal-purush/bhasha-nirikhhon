{
    "identifiers": [
        "Collections",
        "Collections",
        "Generic",
        "IO",
        "Linq",
        "Runtime",
        "InteropServices",
        "JetBrains",
        "Annotations",
        "Nuke",
        "Common",
        "Nuke",
        "Common",
        "CI",
        "GitHubActions",
        "Nuke",
        "Common",
        "Git",
        "Nuke",
        "Common",
        "IO",
        "Nuke",
        "Common",
        "Tooling",
        "Nuke",
        "Common",
        "Tools",
        "DotNet",
        "Nuke",
        "Common",
        "Tools",
        "Git",
        "Octokit",
        "Octokit",
        "Internal",
        "Nuke",
        "Common",
        "IO",
        "CompressionTasks",
        "Nuke",
        "Common",
        "IO",
        "FileSystemTasks",
        "Nuke",
        "Common",
        "IO",
        "HttpTasks",
        "Nuke",
        "Common",
        "Tooling",
        "ProcessTasks",
        "Nuke",
        "Common",
        "Tools",
        "DotNet",
        "DotNetTasks",
        "Nuke",
        "Common",
        "Tools",
        "Git",
        "GitTasks",
        "Nuke",
        "Common",
        "Tools",
        "GitHub",
        "GitHubTasks"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "Licensed to the .NET Foundation under one or more agreements.",
        "The .NET Foundation licenses this file to you under the MIT license.",
        "NOTE: Disabled until space issues are resolved! If you are a user who needs this please submit a PR!",
        "AbsolutePath AnglePath => RootDirectory / \"build\" / \"submodules\" / \"ANGLE\";",
        "Target Angle => CommonTarget",
        "(",
        "x => x.Before(Compile)",
        ".After(Clean)",
        ".Executes",
        "(",
        "() =>",
        "{",
        "var @out = AnglePath / \"out\" / \"Release\";",
        "EnsureCleanDirectory(@out);",
        "var zip = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());",
        "var unzip = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());",
        "HttpDownloadFile(\"https://storage.googleapis.com/chrome-infra/depot_tools.zip\", zip);",
        "UncompressZip(zip, unzip);",
        "if (OperatingSystem.IsLinux() || OperatingSystem.IsMacOS())",
        "{",
        "InheritedShell($\"chmod -R 777 \\\"{unzip}\\\"\");",
        "}",
        "AddToPath(unzip);",
        "if (OperatingSystem.IsWindows())",
        "{",
        "Environment.SetEnvironmentVariable(\"DEPOT_TOOLS_WIN_TOOLCHAIN\", \"0\");",
        "}",
        "InheritedShell(\"python scripts/bootstrap.py\", AnglePath).AssertZeroExitCode();",
        "InheritedShell(\"gclient sync\", AnglePath).AssertZeroExitCode();",
        "if (OperatingSystem.IsLinux())",
        "{",
        "InheritedShell(\"sudo ./build/install-build-deps.sh\", AnglePath).AssertZeroExitCode();",
        "}",
        "var runtimes = RootDirectory / \"src\" / \"Native\" / \"Silk.NET.OpenGLES.ANGLE.Native\" / \"runtimes\";",
        "if (OperatingSystem.IsWindows())",
        "{",
        "InheritedShell",
        "(",
        "\"gn gen out/Release \" +",
        "\"--args='is_component_build=false target_cpu=\\\"\\\"x86\\\"\\\" is_debug=false'\",",
        "AnglePath",
        ")",
        ".AssertZeroExitCode();",
        "InheritedShell($\"autoninja -C \\\"{@out}\\\"\", AnglePath).AssertZeroExitCode();",
        "CopyAll",
        "(",
        "// libANGLE might not exist, this is fine",
        "@out.GlobFiles(\"libGLESv2.dll\", \"libEGL.dll\", \"libANGLE.dll\"),",
        "runtimes / \"win-x64\" / \"native\"",
        ");",
        "CopyAll",
        "(",
        "@out.GlobFiles(\"libGLESv2.dll\", \"libEGL.dll\", \"libANGLE.dll\"),",
        "runtimes / \"win-x86\" / \"native\"",
        ");",
        "}",
        "else",
        "{",
        "InheritedShell",
        "(",
        "$\"gn gen \\\"{@out}\\\" \" +",
        "\"--args=\\\"is_component_build=false is_debug=false\\\"\",",
        "AnglePath",
        ")",
        ".AssertZeroExitCode();",
        "InheritedShell($\"autoninja -C \\\"{@out}\\\"\", AnglePath).AssertZeroExitCode();",
        "CopyAll",
        "(",
        "@out.GlobFiles",
        "(",
        "\"libGLESv2.so\", \"libEGL.so\", \"libANGLE.so\",",
        "\"libGLESv2.dylib\", \"libEGL.dylib\", \"libANGLE.dylib\"",
        "),",
        "runtimes / (OperatingSystem.IsMacOS() ? \"osx-x64\" : \"linux-x64\") / \"native\"",
        ");",
        "}",
        "PrUpdatedNativeBinary(\"ANGLE\");",
        "}",
        ")",
        ");"
    ],
    "docstrings": [],
    "functions": [],
    "classes": [
        "Build"
    ]
}