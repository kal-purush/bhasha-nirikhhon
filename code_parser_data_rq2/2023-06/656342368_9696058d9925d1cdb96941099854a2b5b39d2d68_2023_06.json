{
    "identifiers": [
        "account1",
        "account2",
        "account3",
        "account4",
        "movements",
        "sort",
        "containerMovements",
        "sort",
        "movements",
        "a",
        "b",
        "a",
        "b",
        "movements",
        "movs",
        "mov",
        "i",
        "mov",
        "i",
        "mov",
        "containerMovements",
        "html",
        "acc",
        "acc",
        "acc",
        "acc",
        "mov",
        "acc",
        "mov",
        "labelBalance",
        "acc",
        "acc",
        "acc",
        "mov",
        "mov",
        "acc",
        "mov",
        "acc",
        "mov",
        "labelSumIn",
        "incomes",
        "acc",
        "mov",
        "mov",
        "acc",
        "mov",
        "acc",
        "mov",
        "labelSumOut",
        "acc",
        "mov",
        "mov",
        "deposit",
        "deposit",
        "acc",
        "i",
        "arr",
        "acc",
        "acc",
        "labelSumInterest",
        "interest",
        "accs",
        "accs",
        "acc",
        "acc",
        "acc",
        "name",
        "name",
        "createUsernames",
        "accounts",
        "acc",
        "displayMovements",
        "acc",
        "calcDisplayBalance",
        "acc",
        "calcDisplaySummary",
        "acc",
        "btnLogin",
        "e",
        "e",
        "currentAccount",
        "accounts",
        "acc",
        "acc",
        "inputLoginUsername",
        "currentAccount",
        "currentAccount",
        "inputLoginPin",
        "labelWelcome",
        "currentAccount",
        "containerApp",
        "inputLoginUsername",
        "inputLoginPin",
        "inputLoginPin",
        "updateUI",
        "currentAccount",
        "btnTransfer",
        "e",
        "e",
        "inputTransferAmount",
        "accounts",
        "acc",
        "acc",
        "inputTransferTo",
        "inputTransferAmount",
        "inputTransferTo",
        "amount",
        "receiverAcc",
        "currentAccount",
        "amount",
        "receiverAcc",
        "currentAccount",
        "currentAccount",
        "amount",
        "receiverAcc",
        "amount",
        "updateUI",
        "currentAccount",
        "btnLoan",
        "e",
        "e",
        "inputLoanAmount",
        "amount",
        "currentAccount",
        "mov",
        "mov",
        "amount",
        "currentAccount",
        "amount",
        "updateUI",
        "currentAccount",
        "inputLoanAmount",
        "btnClose",
        "e",
        "e",
        "inputCloseUsername",
        "currentAccount",
        "inputClosePin",
        "currentAccount",
        "accounts",
        "acc",
        "acc",
        "currentAccount",
        "index",
        "accounts",
        "index",
        "containerApp",
        "inputCloseUsername",
        "inputClosePin",
        "btnSort",
        "e",
        "e",
        "displayMovements",
        "currentAccount",
        "sorted",
        "sorted",
        "sorted",
        "accounts",
        "acc",
        "acc",
        "mov",
        "mov",
        "sum",
        "cur",
        "sum",
        "cur",
        "bankDepositSum",
        "accounts",
        "acc",
        "acc",
        "count",
        "cur",
        "cur",
        "count",
        "count",
        "numDeposits1000",
        "a",
        "a",
        "accounts",
        "acc",
        "acc",
        "sums",
        "cur",
        "sums",
        "cur",
        "cur",
        "sums",
        "deposits",
        "withdrawals",
        "title",
        "capitzalize",
        "title",
        "word",
        "exceptions",
        "word",
        "word",
        "capitzalize",
        "word",
        "capitzalize",
        "titleCase",
        "convertTitleCase",
        "convertTitleCase",
        "convertTitleCase"
    ],
    "literals": [
        "'use strict'",
        "'Jonas Schmedtmann'",
        "'Jessica Davis'",
        "'Steven Thomas Williams'",
        "'Sarah Smith'",
        "'.welcome'",
        "'.date'",
        "'.balance__value'",
        "'.summary__value--in'",
        "'.summary__value--out'",
        "'.summary__value--interest'",
        "'.timer'",
        "'.app'",
        "'.movements'",
        "'.login__btn'",
        "'.form__btn--transfer'",
        "'.form__btn--loan'",
        "'.form__btn--close'",
        "'.btn--sort'",
        "'.login__input--user'",
        "'.login__input--pin'",
        "'.form__input--to'",
        "'.form__input--amount'",
        "'.form__input--loan-amount'",
        "'.form__input--user'",
        "'.form__input--pin'",
        "''",
        "'deposit'",
        "'withdrawal'",
        "<div class=\"movements__row\">\n        <div class=\"movements__type movements__type--${type}\">${\n      i + 1\n    } ${type}</div>\n        <div class=\"movements__value\">${mov}€</div>\n      </div>",
        "'afterbegin'",
        "${acc.balance}€",
        "${incomes}€",
        "${Math.abs(out)}€",
        "${interest}€",
        "' '",
        "''",
        "'click'",
        "Welcome back, ${\n      currentAccount.owner.split(' ')[0]\n    }",
        "' '",
        "''",
        "'click'",
        "''",
        "'click'",
        "''",
        "'click'",
        "''",
        "'click'",
        "'deposits'",
        "'withdrawals'",
        "'a'",
        "'an'",
        "'and'",
        "'the'",
        "'but'",
        "'or'",
        "'on'",
        "'in'",
        "'with'",
        "' '",
        "' '",
        "'this is a nice title'",
        "'this is a LONG title but not too long'",
        "'and here is another title with an EXAMPLE'"
    ],
    "variables": [
        "account1",
        "account2",
        "account3",
        "account4",
        "accounts",
        "labelWelcome",
        "labelDate",
        "labelBalance",
        "labelSumIn",
        "labelSumOut",
        "labelSumInterest",
        "labelTimer",
        "containerApp",
        "containerMovements",
        "btnLogin",
        "btnTransfer",
        "btnLoan",
        "btnClose",
        "btnSort",
        "inputLoginUsername",
        "inputLoginPin",
        "inputTransferTo",
        "inputTransferAmount",
        "inputLoanAmount",
        "inputCloseUsername",
        "inputClosePin",
        "displayMovements",
        "movs",
        "html",
        "calcDisplayBalance",
        "calcDisplaySummary",
        "incomes",
        "interest",
        "createUsernames",
        "updateUI",
        "currentAccount",
        "amount",
        "receiverAcc",
        "amount",
        "index",
        "sorted",
        "movements",
        "bankDepositSum",
        "numDeposits1000",
        "a",
        "convertTitleCase",
        "capitzalize",
        "exceptions",
        "titleCase"
    ],
    "comments": [
        "",
        "",
        "BANKIST APP",
        "",
        "Data",
        "%",
        "",
        "Elements",
        "",
        "Functions",
        "console.log(arr);",
        "Display movements",
        "Display balance",
        "Display summary",
        "",
        "Event handlers",
        "Prevent form from submitting",
        "Display UI and message",
        "Clear input fields",
        "Update UI",
        "Doing the transfer",
        "Update UI",
        "Add movement",
        "Update UI",
        ".indexOf(23)",
        "Delete account",
        "Hide UI",
        "",
        "",
        "LECTURES",
        "/////////////////////////////////////////////////\n// Simple Array Methods\nlet arr = ['a', 'b', 'c', 'd', 'e'];\n\n// SLICE\nconsole.log(arr.slice(2));\nconsole.log(arr.slice(2, 4));\nconsole.log(arr.slice(-2));\nconsole.log(arr.slice(-1));\nconsole.log(arr.slice(1, -2));\nconsole.log(arr.slice());\nconsole.log([...arr]);\n\n// SPLICE\n// console.log(arr.splice(2));\narr.splice(-1);\nconsole.log(arr);\narr.splice(1, 2);\nconsole.log(arr);\n\n// REVERSE\narr = ['a', 'b', 'c', 'd', 'e'];\nconst arr2 = ['j', 'i', 'h', 'g', 'f'];\nconsole.log(arr2.reverse());\nconsole.log(arr2);\n\n// CONCAT\nconst letters = arr.concat(arr2);\nconsole.log(letters);\nconsole.log([...arr, ...arr2]);\n\n// JOIN\nconsole.log(letters.join(' - '));\n\n\n///////////////////////////////////////\n// The new at Method\nconst arr = [23, 11, 64];\nconsole.log(arr[0]);\nconsole.log(arr.at(0));\n\n// getting last array element\nconsole.log(arr[arr.length - 1]);\nconsole.log(arr.slice(-1)[0]);\nconsole.log(arr.at(-1));\n\nconsole.log('jonas'.at(0));\nconsole.log('jonas'.at(-1));\n\n\n///////////////////////////////////////\n// Looping Arrays: forEach\nconst movements = [200, 450, -400, 3000, -650, -130, 70, 1300];\n\n// for (const movement of movements) {\nfor (const [i, movement] of movements.entries()) {\n  if (movement > 0) {\n    console.log(`Movement ${i + 1}: You deposited ${movement}`);\n  } else {\n    console.log(`Movement ${i + 1}: You withdrew ${Math.abs(movement)}`);\n  }\n}\n\nconsole.log('---- FOREACH ----');\nmovements.forEach(function (mov, i, arr) {\n  if (mov > 0) {\n    console.log(`Movement ${i + 1}: You deposited ${mov}`);\n  } else {\n    console.log(`Movement ${i + 1}: You withdrew ${Math.abs(mov)}`);\n  }\n});\n// 0: function(200)\n// 1: function(450)\n// 2: function(400)\n// ...\n\n\n///////////////////////////////////////\n// forEach With Maps and Sets\n// Map\nconst currencies = new Map([\n  ['USD', 'United States dollar'],\n  ['EUR', 'Euro'],\n  ['GBP', 'Pound sterling'],\n]);\n\ncurrencies.forEach(function (value, key, map) {\n  console.log(`${key}: ${value}`);\n});\n\n// Set\nconst currenciesUnique = new Set(['USD', 'GBP', 'USD', 'EUR', 'EUR']);\nconsole.log(currenciesUnique);\ncurrenciesUnique.forEach(function (value, _, map) {\n  console.log(`${value}: ${value}`);\n});",
        "",
        "Coding Challenge #1",
        "Julia and Kate are doing a study on dogs. So each of them asked 5 dog owners about their dog's age, and stored the data into an array (one array for each). For now, they are just interested in knowing whether a dog is an adult or a puppy. A dog is an adult if it is at least 3 years old, and it's a puppy if it's less than 3 years old.\n\nCreate a function 'checkDogs', which accepts 2 arrays of dog's ages ('dogsJulia' and 'dogsKate'), and does the following things:\n\n1. Julia found out that the owners of the FIRST and the LAST TWO dogs actually have cats, not dogs! So create a shallow copy of Julia's array, and remove the cat ages from that copied array (because it's a bad practice to mutate function parameters)\n2. Create an array with both Julia's (corrected) and Kate's data\n3. For each remaining dog, log to the console whether it's an adult (\"Dog number 1 is an adult, and is 5 years old\") or a puppy (\"Dog number 2 is still a puppy 🐶\")\n4. Run the function for both test datasets\n\nHINT: Use tools from all lectures in this section so far 😉\n\nTEST DATA 1: Julia's data [3, 5, 2, 12, 7], Kate's data [4, 1, 15, 8, 3]\nTEST DATA 2: Julia's data [9, 16, 6, 8, 3], Kate's data [10, 5, 6, 1, 4]\n\nGOOD LUCK 😀",
        "const checkDogs = function (dogsJulia, dogsKate) {\n  const dogsJuliaCorrected = dogsJulia.slice();\n  dogsJuliaCorrected.splice(0, 1);\n  dogsJuliaCorrected.splice(-2);\n  // dogsJulia.slice(1, 3);\n  const dogs = dogsJuliaCorrected.concat(dogsKate);\n  console.log(dogs);\n\n  dogs.forEach(function (dog, i) {\n    if (dog >= 3) {\n      console.log(`Dog number ${i + 1} is an adult, and is ${dog} years old`);\n    } else {\n      console.log(`Dog number ${i + 1} is still a puppy 🐶`);\n    }\n  });\n};\n// checkDogs([3, 5, 2, 12, 7], [4, 1, 15, 8, 3]);\ncheckDogs([9, 16, 6, 8, 3], [10, 5, 6, 1, 4]);\n\n\n///////////////////////////////////////\n// The map Method\nconst eurToUsd = 1.1;\n\n// const movementsUSD = movements.map(function (mov) {\n//   return mov * eurToUsd;\n// });\n\nconst movementsUSD = movements.map(mov => mov * eurToUsd);\n\nconsole.log(movements);\nconsole.log(movementsUSD);\n\nconst movementsUSDfor = [];\nfor (const mov of movements) movementsUSDfor.push(mov * eurToUsd);\nconsole.log(movementsUSDfor);\n\nconst movementsDescriptions = movements.map(\n  (mov, i) =>\n    `Movement ${i + 1}: You ${mov > 0 ? 'deposited' : 'withdrew'} ${Math.abs(\n      mov\n    )}`\n);\nconsole.log(movementsDescriptions);\n\n\n///////////////////////////////////////\n// The filter Method\nconst deposits = movements.filter(function (mov, i, arr) {\n  return mov > 0;\n});\nconsole.log(movements);\nconsole.log(deposits);\n\nconst depositsFor = [];\nfor (const mov of movements) if (mov > 0) depositsFor.push(mov);\nconsole.log(depositsFor);\n\nconst withdrawals = movements.filter(mov => mov < 0);\nconsole.log(withdrawals);\n\n\n///////////////////////////////////////\n// The reduce Method\nconsole.log(movements);\n\n// accumulator -> SNOWBALL\n// const balance = movements.reduce(function (acc, cur, i, arr) {\n//   console.log(`Iteration ${i}: ${acc}`);\n//   return acc + cur;\n// }, 0);\nconst balance = movements.reduce((acc, cur) => acc + cur, 0);\nconsole.log(balance);\n\nlet balance2 = 0;\nfor (const mov of movements) balance2 += mov;\nconsole.log(balance2);\n\n// Maximum value\nconst max = movements.reduce((acc, mov) => {\n  if (acc > mov) return acc;\n  else return mov;\n}, movements[0]);\nconsole.log(max);",
        "",
        "Coding Challenge #2",
        "Let's go back to Julia and Kate's study about dogs. This time, they want to convert dog ages to human ages and calculate the average age of the dogs in their study.\n\nCreate a function 'calcAverageHumanAge', which accepts an arrays of dog's ages ('ages'), and does the following things in order:\n\n1. Calculate the dog age in human years using the following formula: if the dog is <= 2 years old, humanAge = 2 * dogAge. If the dog is > 2 years old, humanAge = 16 + dogAge * 4.\n2. Exclude all dogs that are less than 18 human years old (which is the same as keeping dogs that are at least 18 years old)\n3. Calculate the average human age of all adult dogs (you should already know from other challenges how we calculate averages 😉)\n4. Run the function for both test datasets\n\nTEST DATA 1: [5, 2, 4, 1, 15, 8, 3]\nTEST DATA 2: [16, 6, 10, 5, 6, 1, 4]\n\nGOOD LUCK 😀",
        "const calcAverageHumanAge = function (ages) {\n  const humanAges = ages.map(age => (age <= 2 ? 2 * age : 16 + age * 4));\n  const adults = humanAges.filter(age => age >= 18);\n  console.log(humanAges);\n  console.log(adults);\n\n  // const average = adults.reduce((acc, age) => acc + age, 0) / adults.length;\n\n  const average = adults.reduce(\n    (acc, age, i, arr) => acc + age / arr.length,\n    0\n  );\n\n  // 2 3. (2+3)/2 = 2.5 === 2/2+3/2 = 2.5\n\n  return average;\n};\nconst avg1 = calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]);\nconst avg2 = calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]);\nconsole.log(avg1, avg2);\n\n\n///////////////////////////////////////\n// The Magic of Chaining Methods\nconst eurToUsd = 1.1;\nconsole.log(movements);\n\n// PIPELINE\nconst totalDepositsUSD = movements\n  .filter(mov => mov > 0)\n  .map((mov, i, arr) => {\n    // console.log(arr);\n    return mov * eurToUsd;\n  })\n  // .map(mov => mov * eurToUsd)\n  .reduce((acc, mov) => acc + mov, 0);\nconsole.log(totalDepositsUSD);",
        "",
        "Coding Challenge #3",
        "Rewrite the 'calcAverageHumanAge' function from the previous challenge, but this time as an arrow function, and using chaining!\n\nTEST DATA 1: [5, 2, 4, 1, 15, 8, 3]\nTEST DATA 2: [16, 6, 10, 5, 6, 1, 4]\n\nGOOD LUCK 😀",
        "const calcAverageHumanAge = ages =>\n  ages\n    .map(age => (age <= 2 ? 2 * age : 16 + age * 4))\n    .filter(age => age >= 18)\n    .reduce((acc, age, i, arr) => acc + age / arr.length, 0);\n// adults.length\n\nconst avg1 = calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]);\nconst avg2 = calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]);\nconsole.log(avg1, avg2);\n\n\n///////////////////////////////////////\n// The find Method\nconst firstWithdrawal = movements.find(mov => mov < 0);\nconsole.log(movements);\nconsole.log(firstWithdrawal);\n\nconsole.log(accounts);\n\nconst account = accounts.find(acc => acc.owner === 'Jessica Davis');\nconsole.log(account);\n\n\n///////////////////////////////////////\n// some and every\nconsole.log(movements);\n\n// EQUALITY\nconsole.log(movements.includes(-130));\n\n// SOME: CONDITION\nconsole.log(movements.some(mov => mov === -130));\n\nconst anyDeposits = movements.some(mov => mov > 0);\nconsole.log(anyDeposits);\n\n// EVERY\nconsole.log(movements.every(mov => mov > 0));\nconsole.log(account4.movements.every(mov => mov > 0));\n\n// Separate callback\nconst deposit = mov => mov > 0;\nconsole.log(movements.some(deposit));\nconsole.log(movements.every(deposit));\nconsole.log(movements.filter(deposit));\n\n\n///////////////////////////////////////\n// flat and flatMap\nconst arr = [[1, 2, 3], [4, 5, 6], 7, 8];\nconsole.log(arr.flat());\n\nconst arrDeep = [[[1, 2], 3], [4, [5, 6]], 7, 8];\nconsole.log(arrDeep.flat(2));\n\n// flat\nconst overalBalance = accounts\n  .map(acc => acc.movements)\n  .flat()\n  .reduce((acc, mov) => acc + mov, 0);\nconsole.log(overalBalance);\n\n// flatMap\nconst overalBalance2 = accounts\n  .flatMap(acc => acc.movements)\n  .reduce((acc, mov) => acc + mov, 0);\nconsole.log(overalBalance2);\n\n\n///////////////////////////////////////\n// Sorting Arrays\n\n// Strings\nconst owners = ['Jonas', 'Zach', 'Adam', 'Martha'];\nconsole.log(owners.sort());\nconsole.log(owners);\n\n// Numbers\nconsole.log(movements);\n\n// return < 0, A, B (keep order)\n// return > 0, B, A (switch order)\n\n// Ascending\n// movements.sort((a, b) => {\n//   if (a > b) return 1;\n//   if (a < b) return -1;\n// });\nmovements.sort((a, b) => a - b);\nconsole.log(movements);\n\n// Descending\n// movements.sort((a, b) => {\n//   if (a > b) return -1;\n//   if (a < b) return 1;\n// });\nmovements.sort((a, b) => b - a);\nconsole.log(movements);\n\n\n///////////////////////////////////////\n// More Ways of Creating and Filling Arrays\nconst arr = [1, 2, 3, 4, 5, 6, 7];\nconsole.log(new Array(1, 2, 3, 4, 5, 6, 7));\n\n// Emprty arrays + fill method\nconst x = new Array(7);\nconsole.log(x);\n// console.log(x.map(() => 5));\nx.fill(1, 3, 5);\nx.fill(1);\nconsole.log(x);\n\narr.fill(23, 2, 6);\nconsole.log(arr);\n\n// Array.from\nconst y = Array.from({ length: 7 }, () => 1);\nconsole.log(y);\n\nconst z = Array.from({ length: 7 }, (_, i) => i + 1);\nconsole.log(z);\n\nlabelBalance.addEventListener('click', function () {\n  const movementsUI = Array.from(\n    document.querySelectorAll('.movements__value'),\n    el => Number(el.textContent.replace('€', ''))\n  );\n  console.log(movementsUI);\n\n  const movementsUI2 = [...document.querySelectorAll('.movements__value')];\n});",
        "",
        "Array Methods Practice",
        "1.",
        "2.",
        "const numDeposits1000 = accounts",
        ".flatMap(acc => acc.movements)",
        ".filter(mov => mov >= 1000).length;",
        "Prefixed ++ oeprator",
        "3.",
        "cur > 0 ? (sums.deposits += cur) : (sums.withdrawals += cur);",
        "4.",
        "this is a nice title -> This Is a Nice Title",
        "",
        "Coding Challenge #4",
        "Julia and Kate are still studying dogs, and this time they are studying if dogs are eating too much or too little.\nEating too much means the dog's current food portion is larger than the recommended portion, and eating too little is the opposite.\nEating an okay amount means the dog's current food portion is within a range 10% above and 10% below the recommended portion (see hint).\n\n1. Loop over the array containing dog objects, and for each dog, calculate the recommended food portion and add it to the object as a new property. Do NOT create a new array, simply loop over the array. Forumla: recommendedFood = weight ** 0.75 * 28. (The result is in grams of food, and the weight needs to be in kg)\n2. Find Sarah's dog and log to the console whether it's eating too much or too little. HINT: Some dogs have multiple owners, so you first need to find Sarah in the owners array, and so this one is a bit tricky (on purpose) 🤓\n3. Create an array containing all owners of dogs who eat too much ('ownersEatTooMuch') and an array with all owners of dogs who eat too little ('ownersEatTooLittle').\n4. Log a string to the console for each array created in 3., like this: \"Matilda and Alice and Bob's dogs eat too much!\" and \"Sarah and John and Michael's dogs eat too little!\"\n5. Log to the console whether there is any dog eating EXACTLY the amount of food that is recommended (just true or false)\n6. Log to the console whether there is any dog eating an OKAY amount of food (just true or false)\n7. Create an array containing the dogs that are eating an OKAY amount of food (try to reuse the condition used in 6.)\n8. Create a shallow copy of the dogs array and sort it by recommended food portion in an ascending order (keep in mind that the portions are inside the array's objects)\n\nHINT 1: Use many different tools to solve these challenges, you can use the summary lecture to choose between them 😉\nHINT 2: Being within a range 10% above and below the recommended portion means: current > (recommended * 0.90) && current < (recommended * 1.10). Basically, the current portion should be between 90% and 110% of the recommended portion.\n\nTEST DATA:\nconst dogs = [\n  { weight: 22, curFood: 250, owners: ['Alice', 'Bob'] },\n  { weight: 8, curFood: 200, owners: ['Matilda'] },\n  { weight: 13, curFood: 275, owners: ['Sarah', 'John'] },\n  { weight: 32, curFood: 340, owners: ['Michael'] }\n];\n\nGOOD LUCK 😀",
        "const dogs = [\n  { weight: 22, curFood: 250, owners: ['Alice', 'Bob'] },\n  { weight: 8, curFood: 200, owners: ['Matilda'] },\n  { weight: 13, curFood: 275, owners: ['Sarah', 'John'] },\n  { weight: 32, curFood: 340, owners: ['Michael'] },\n];\n\n// 1.\ndogs.forEach(dog => (dog.recFood = Math.trunc(dog.weight ** 0.75 * 28)));\n\n// 2.\nconst dogSarah = dogs.find(dog => dog.owners.includes('Sarah'));\nconsole.log(dogSarah);\nconsole.log(\n  `Sarah's dog is eating too ${\n    dogSarah.curFood > dogSarah.recFood ? 'much' : 'little'\n  } `\n);\n\n// 3.\nconst ownersEatTooMuch = dogs\n  .filter(dog => dog.curFood > dog.recFood)\n  .flatMap(dog => dog.owners);\n// .flat();\nconsole.log(ownersEatTooMuch);\n\nconst ownersEatTooLittle = dogs\n  .filter(dog => dog.curFood < dog.recFood)\n  .flatMap(dog => dog.owners);\nconsole.log(ownersEatTooLittle);\n\n// 4.\n// \"Matilda and Alice and Bob's dogs eat too much!\"\n//  \"Sarah and John and Michael's dogs eat too little!\"\nconsole.log(`${ownersEatTooMuch.join(' and ')}'s dogs eat too much!`);\nconsole.log(`${ownersEatTooLittle.join(' and ')}'s dogs eat too little!`);\n\n// 5.\nconsole.log(dogs.some(dog => dog.curFood === dog.recFood));\n\n// 6.\n// current > (recommended * 0.90) && current < (recommended * 1.10)\nconst checkEatingOkay = dog =>\n  dog.curFood > dog.recFood * 0.9 && dog.curFood < dog.recFood * 1.1;\n\nconsole.log(dogs.some(checkEatingOkay));\n\n// 7.\nconsole.log(dogs.filter(checkEatingOkay));\n\n// 8.\n// sort it by recommended food portion in an ascending order [1,2,3]\nconst dogsSorted = dogs.slice().sort((a, b) => a.recFood - b.recFood);\nconsole.log(dogsSorted);"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}