{
    "identifiers": [
        "re",
        "INFO",
        "WARNING",
        "ERROR",
        "open",
        "filename",
        "f",
        "write",
        "f",
        "close",
        "ERROR",
        "staticmethod",
        "level",
        "level",
        "ValueError",
        "level",
        "staticmethod",
        "filename",
        "filename",
        "open",
        "filename",
        "close",
        "open",
        "filename",
        "f",
        "f",
        "write",
        "staticmethod",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "staticmethod",
        "locator",
        "message",
        "Logger",
        "__show_message__",
        "Logger",
        "INFO",
        "locator",
        "message",
        "staticmethod",
        "locator",
        "message",
        "Logger",
        "__show_message__",
        "Logger",
        "WARNING",
        "locator",
        "message",
        "staticmethod",
        "locator",
        "message",
        "Logger",
        "__show_message__",
        "Logger",
        "ERROR",
        "locator",
        "message",
        "staticmethod",
        "severity",
        "locator",
        "message",
        "Logger",
        "__STATUS",
        "severity",
        "locator",
        "message",
        "Logger",
        "filename",
        "Logger",
        "save",
        "msg",
        "Logger",
        "filename",
        "severity",
        "Logger",
        "level",
        "msg",
        "staticmethod",
        "message",
        "filename",
        "message",
        "open",
        "filename",
        "f",
        "f",
        "write",
        "msg_log",
        "regex",
        "text",
        "re",
        "search",
        "regex",
        "text",
        "match",
        "group",
        "match",
        "match",
        "staticmethod",
        "program_list",
        "label_dict",
        "assembler",
        "command",
        "p_addr",
        "assembler",
        "command",
        "command",
        "command",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "command",
        "command",
        "p_addr",
        "command",
        "command",
        "assembler",
        "assembler",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "command",
        "command",
        "command",
        "assembler",
        "command",
        "assembler",
        "command",
        "assembler",
        "command",
        "command",
        "assembler",
        "assembler",
        "label_dict",
        "keys",
        "label_dict",
        "values",
        "address",
        "command",
        "program_list",
        "start",
        "program_list",
        "program_list",
        "address",
        "address",
        "PADDR",
        "val_list",
        "key_list",
        "val_list",
        "index",
        "PADDR",
        "label",
        "label",
        "assembler_code",
        "label",
        "process_command",
        "assembler_code",
        "command",
        "address",
        "line_number",
        "command",
        "program_list",
        "command",
        "command",
        "label_dict",
        "label_dict",
        "command",
        "Logger",
        "error",
        "command",
        "line_number",
        "assembler_code",
        "staticmethod",
        "filename",
        "open",
        "filename",
        "f",
        "line",
        "f",
        "readlines",
        "line",
        "find",
        "comment",
        "line",
        "comment",
        "parsed_file",
        "append",
        "line",
        "strip",
        "Assembler",
        "get_list",
        "parsed_file",
        "program_list",
        "label_dict",
        "asm_str",
        "asm_str",
        "splitlines",
        "line",
        "x",
        "line",
        "find",
        "comment",
        "line",
        "comment",
        "parsed_asm",
        "append",
        "line",
        "strip",
        "Assembler",
        "get_list",
        "parsed_asm",
        "program_list",
        "label_dict",
        "asm_str",
        "file_lines",
        "line_number",
        "command",
        "file_lines",
        "start",
        "find_pattern",
        "regex",
        "command",
        "find_pattern",
        "regex",
        "command",
        "find_pattern",
        "regex",
        "command",
        "label",
        "label",
        "label_dict",
        "label",
        "Logger",
        "error",
        "line_number",
        "Logger",
        "error",
        "label",
        "line_number",
        "mem_addr",
        "label_line_idxs",
        "append",
        "line_number",
        "directive",
        "directive",
        "re",
        "findall",
        "regex",
        "command",
        "directives",
        "directives",
        "directives",
        "re",
        "findall",
        "comp_PARAM",
        "Register",
        "alias_reg",
        "Alias_List",
        "update",
        "Name",
        "RegEx",
        "Register",
        "Logger",
        "info",
        "Register",
        "RegEx",
        "Logger",
        "error",
        "directive",
        "re",
        "findall",
        "regex",
        "command",
        "directives",
        "directives",
        "directives",
        "re",
        "findall",
        "comp_PARAM",
        "Value",
        "cons_val",
        "Alias_List",
        "update",
        "Name",
        "RegEx",
        "Value",
        "Logger",
        "info",
        "Value",
        "RegEx",
        "Logger",
        "error",
        "directive",
        "mem_addr",
        "instruction",
        "instruction",
        "instList",
        "keys",
        "mem_addr",
        "Logger",
        "error",
        "line_number",
        "show_info",
        "show_info",
        "key",
        "Alias_List",
        "show_info",
        "Alias_List",
        "key",
        "Alias_List",
        "key",
        "show_info",
        "Logger",
        "info",
        "show_info",
        "show_info",
        "show_info",
        "key",
        "label_dict",
        "key",
        "show_info",
        "key",
        "label_dict",
        "key",
        "show_info",
        "Logger",
        "info",
        "show_info",
        "error",
        "label_dict",
        "file_lines",
        "label_dict",
        "line_number",
        "command",
        "file_lines",
        "start",
        "find_pattern",
        "regex",
        "command",
        "find_pattern",
        "regex",
        "command",
        "command",
        "line_number",
        "label_line_idxs",
        "directive",
        "directive",
        "mem_addr",
        "line_number",
        "mem_addr",
        "mem_addr",
        "program_list",
        "append",
        "command_info",
        "Logger",
        "info",
        "instruction",
        "instruction",
        "instList",
        "keys",
        "mem_addr",
        "mem_addr",
        "re",
        "findall",
        "regex",
        "command",
        "LIT",
        "len",
        "LIT",
        "LIT",
        "LIT",
        "Logger",
        "error",
        "line_number",
        "key",
        "Alias_List",
        "find_pattern",
        "Alias_List",
        "key",
        "command",
        "command",
        "replace",
        "CHANGE",
        "Alias_List",
        "key",
        "CHANGE",
        "command",
        "error",
        "line_number",
        "key",
        "Param_List",
        "re",
        "findall",
        "Param_List",
        "key",
        "command",
        "PARAM",
        "len",
        "PARAM",
        "Logger",
        "error",
        "key",
        "line_number",
        "PARAM",
        "strip",
        "Param_List",
        "key",
        "PARAM",
        "Param_List",
        "key",
        "command",
        "replace",
        "aux",
        "error",
        "re",
        "findall",
        "regex",
        "command",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "Logger",
        "error",
        "line_number",
        "CMD_DEST_SOURCE",
        "command_info",
        "Logger",
        "error",
        "line_number",
        "CMD_DEST_SOURCE",
        "command_info",
        "command_info",
        "Logger",
        "error",
        "line_number",
        "CMD_DEST_SOURCE",
        "command_info",
        "command_info",
        "Logger",
        "error",
        "line_number",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "command_info",
        "Logger",
        "error",
        "line_number",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "command_info",
        "Logger",
        "error",
        "line_number",
        "command_info",
        "Logger",
        "error",
        "line_number",
        "error",
        "re",
        "findall",
        "regex",
        "command",
        "CMD_DEST_SOURCE",
        "len",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "len",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "len",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "len",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "Logger",
        "error",
        "line_number",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "label_dict",
        "label_dict",
        "CMD_DEST_SOURCE",
        "Logger",
        "info",
        "CMD_DEST_SOURCE",
        "command_info",
        "line_number",
        "Logger",
        "error",
        "CMD_DEST_SOURCE",
        "line_number",
        "Logger",
        "error",
        "line_number",
        "len",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "Logger",
        "error",
        "line_number",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "command_info",
        "Logger",
        "error",
        "line_number",
        "command_info",
        "command_info",
        "pop",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "Logger",
        "error",
        "line_number",
        "len",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "command_info",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "command_info",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "command_info",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "Logger",
        "error",
        "line_number",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "command_info",
        "Logger",
        "error",
        "line_number",
        "command_info",
        "command_info",
        "pop",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "label_dict",
        "CMD_DEST_SOURCE",
        "Logger",
        "info",
        "line_number",
        "Logger",
        "info",
        "CMD_DEST_SOURCE",
        "label_dict",
        "CMD_DEST_SOURCE",
        "line_number",
        "label_dict",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "mem_addr",
        "CMD_DEST_SOURCE",
        "mem_addr",
        "CMD_DEST_SOURCE",
        "mem_addr",
        "CMD_DEST_SOURCE",
        "mem_addr",
        "Logger",
        "error",
        "line_number",
        "Logger",
        "error",
        "line_number",
        "len",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "command_info",
        "command_info",
        "Logger",
        "error",
        "line_number",
        "command_info",
        "command_info",
        "pop",
        "Logger",
        "error",
        "line_number",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "command_info",
        "command_info",
        "command_info",
        "pop",
        "Logger",
        "error",
        "line_number",
        "CMD_DEST_SOURCE",
        "CMD_DEST_SOURCE",
        "command_info",
        "CMD_DEST_SOURCE",
        "command_info",
        "Logger",
        "error",
        "line_number",
        "CMD_DEST_SOURCE",
        "Logger",
        "info",
        "mem_addr",
        "CMD_DEST_SOURCE",
        "mem_addr",
        "Logger",
        "error",
        "line_number",
        "Logger",
        "error",
        "line_number",
        "error",
        "program_list",
        "append",
        "command_info",
        "Logger",
        "error",
        "instruction",
        "line_number",
        "Logger",
        "error",
        "line_number",
        "error",
        "program_list",
        "Logger",
        "info",
        "label_recognition",
        "asm_str",
        "error",
        "Logger",
        "warning",
        "Logger",
        "info",
        "command_recognition",
        "asm_str",
        "label_dict",
        "error",
        "Logger",
        "warning",
        "program_list",
        "label_dict",
        "staticmethod",
        "program_list",
        "label_dict",
        "save_unparsed_filename",
        "program_list",
        "label_dict",
        "line_number",
        "command",
        "program_list",
        "start",
        "command",
        "command",
        "label_dict",
        "command",
        "label_dict",
        "command",
        "command",
        "line_number",
        "Logger",
        "info",
        "parse_lines_and_labels",
        "program_list",
        "label_dict",
        "command",
        "program_list",
        "command",
        "command",
        "command",
        "command",
        "Instruction",
        "REG_WR",
        "command",
        "command",
        "Instruction",
        "DMEM_WR",
        "command",
        "command",
        "Instruction",
        "WMEM_WR",
        "command",
        "command",
        "Instruction",
        "BRANCH",
        "command",
        "command",
        "command",
        "command",
        "Instruction",
        "CFG",
        "command",
        "error",
        "binary_program_list",
        "append",
        "CODE",
        "Instruction",
        "BRANCH",
        "command",
        "command",
        "Instruction",
        "BRANCH",
        "command",
        "command",
        "Instruction",
        "BRANCH",
        "command",
        "command",
        "command",
        "command",
        "Instruction",
        "PORT_WR",
        "command",
        "command",
        "Instruction",
        "PORT_WR",
        "command",
        "command",
        "Instruction",
        "CTRL",
        "command",
        "command",
        "Instruction",
        "CFG",
        "command",
        "command",
        "Instruction",
        "CTRL",
        "command",
        "command",
        "Instruction",
        "CTRL",
        "command",
        "command",
        "Instruction",
        "CTRL",
        "command",
        "command",
        "Instruction",
        "CTRL",
        "command",
        "command",
        "Instruction",
        "ARITH",
        "command",
        "Logger",
        "error",
        "command",
        "Logger",
        "error",
        "command",
        "CODE",
        "count",
        "CODE",
        "count",
        "length",
        "Logger",
        "error",
        "CODE",
        "length",
        "command",
        "error",
        "binary_program_list",
        "append",
        "CODE",
        "save_unparsed_filename",
        "open",
        "save_unparsed_filename",
        "f",
        "line",
        "binary_program_list",
        "f",
        "write",
        "line",
        "line_bin",
        "binary_program_list",
        "line_bin",
        "replace",
        "tmp",
        "b0",
        "tmp",
        "b1",
        "tmp",
        "b2",
        "n0",
        "n1",
        "n2",
        "binary_array",
        "append",
        "binary_line",
        "binary_program_list",
        "binary_array",
        "filename",
        "save_unparsed_filename",
        "Assembler",
        "file_asm2list",
        "filename",
        "program_list",
        "Assembler",
        "list2bin",
        "program_list",
        "save_unparsed_filename",
        "Logger",
        "error",
        "binary_program_list",
        "str_asm",
        "save_unparsed_filename",
        "Assembler",
        "str_asm2list",
        "str_asm",
        "program_list",
        "Assembler",
        "list2bin",
        "program_list",
        "save_unparsed_filename",
        "Logger",
        "error",
        "binary_program_list",
        "strin",
        "bits",
        "bits",
        "bits",
        "re",
        "search",
        "strin",
        "flags",
        "re",
        "MULTILINE",
        "m",
        "strin",
        "bits",
        "fmt",
        "format",
        "dec",
        "binv",
        "strin",
        "dec",
        "minv",
        "Logger",
        "error",
        "dec",
        "minv",
        "dec",
        "maxv",
        "Logger",
        "error",
        "dec",
        "maxv",
        "dec",
        "dec",
        "bits",
        "bits",
        "fmt",
        "format",
        "dec",
        "binv",
        "reg",
        "Type",
        "re",
        "findall",
        "reg",
        "REG",
        "REG",
        "Type",
        "REG",
        "integer2bin",
        "REG",
        "REG",
        "integer2bin",
        "REG",
        "REG",
        "integer2bin",
        "REG",
        "Type",
        "REG",
        "integer2bin",
        "REG",
        "REG",
        "integer2bin",
        "REG",
        "REG",
        "integer2bin",
        "REG",
        "Type",
        "REG",
        "integer2bin",
        "REG",
        "REG",
        "REG",
        "Logger",
        "error",
        "Logger",
        "error",
        "error",
        "reg_addr",
        "staticmethod",
        "command",
        "command",
        "command",
        "condList",
        "condList",
        "command",
        "Logger",
        "error",
        "join",
        "condList",
        "keys",
        "command",
        "error",
        "cond",
        "staticmethod",
        "command",
        "command",
        "re",
        "findall",
        "regex_inside_parenthesis",
        "command",
        "len",
        "DEST_SOURCE",
        "DEST_SOURCE",
        "command",
        "Logger",
        "error",
        "command",
        "DEST_SOURCE",
        "command",
        "Logger",
        "error",
        "command",
        "Logger",
        "error",
        "command",
        "Logger",
        "error",
        "command",
        "get_reg_addr",
        "DEST_SOURCE",
        "error",
        "Wr",
        "Rdi",
        "RD",
        "staticmethod",
        "command",
        "command",
        "command",
        "integer2bin",
        "command",
        "command",
        "command",
        "Logger",
        "error",
        "command",
        "Logger",
        "error",
        "command",
        "error",
        "Wp",
        "Sp",
        "Dp",
        "staticmethod",
        "command",
        "command",
        "command",
        "command",
        "re",
        "findall",
        "comp_OP_PARAM",
        "command",
        "len",
        "param_op",
        "command",
        "integer2bin",
        "command",
        "FULL",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "param_op",
        "Logger",
        "error",
        "Logger",
        "error",
        "len",
        "param_op",
        "param_op",
        "FULL",
        "operation",
        "aluList_op",
        "aluList",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "param_op",
        "Logger",
        "error",
        "command",
        "Logger",
        "error",
        "command",
        "Logger",
        "error",
        "command",
        "command",
        "param_op",
        "rsD0",
        "len",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "param_op",
        "Logger",
        "error",
        "Logger",
        "error",
        "error",
        "param_op",
        "param_op",
        "param_op",
        "command",
        "Logger",
        "info",
        "command",
        "command",
        "Logger",
        "error",
        "command",
        "Logger",
        "info",
        "command",
        "integer2bin",
        "command",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "param_op",
        "integer2bin",
        "literal",
        "Logger",
        "error",
        "command",
        "error",
        "param_op",
        "FULL",
        "operation",
        "aluList",
        "aluList",
        "operation",
        "Logger",
        "error",
        "command",
        "operation",
        "aluList_s",
        "aluList_s",
        "operation",
        "Logger",
        "error",
        "command",
        "command",
        "integer2bin",
        "command",
        "rsD0",
        "rsD1",
        "DataImm",
        "error",
        "Data_Source",
        "alu_op",
        "df",
        "staticmethod",
        "ADDR_CMD",
        "re",
        "findall",
        "comp_ADDR_FMT",
        "ADDR_CMD",
        "len",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "Logger",
        "error",
        "len",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "Logger",
        "error",
        "error",
        "param_op",
        "integer2bin",
        "param_op",
        "param_op",
        "integer2bin",
        "param_op",
        "error",
        "param_op",
        "Logger",
        "error",
        "Logger",
        "error",
        "error",
        "RsF",
        "RsE",
        "AI",
        "staticmethod",
        "current",
        "Instruction",
        "__PROCESS_CONDITION",
        "current",
        "error",
        "current",
        "current",
        "Instruction",
        "__PROCESS_SOURCE",
        "current",
        "current",
        "alu_op",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "Instruction",
        "__PROCESS_SOURCE",
        "current",
        "current",
        "alu_op",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "re",
        "findall",
        "comp_addr",
        "current",
        "address",
        "integer2bin",
        "address",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "Instruction",
        "__PROCESS_SOURCE",
        "current",
        "current",
        "alu_op",
        "error",
        "Instruction",
        "__PROCESS_MEM_ADDR",
        "current",
        "RsF",
        "RsE",
        "current",
        "alu_op",
        "current",
        "current",
        "COND",
        "Logger",
        "error",
        "current",
        "current",
        "Instruction",
        "__PROCESS_WP",
        "current",
        "WW",
        "Sp",
        "WP",
        "error",
        "Instruction",
        "__PROCESS_WR",
        "current",
        "error",
        "Instruction",
        "__PROCESS_SOURCE",
        "current",
        "error",
        "current",
        "Instruction",
        "__PROCESS_MEM_ADDR",
        "current",
        "RsE",
        "Logger",
        "error",
        "current",
        "RsF",
        "RdP",
        "Logger",
        "error",
        "current",
        "Logger",
        "error",
        "current",
        "Logger",
        "error",
        "current",
        "error",
        "re",
        "findall",
        "comp_OP_PARAM",
        "current",
        "RD",
        "current",
        "RD",
        "Logger",
        "warning",
        "current",
        "RD",
        "integer2bin",
        "RD",
        "RD",
        "integer2bin",
        "RD",
        "RD",
        "integer2bin",
        "RD",
        "RD",
        "current",
        "Instruction",
        "__PROCESS_WR",
        "current",
        "current",
        "Wr",
        "Rdi",
        "alu_op",
        "Logger",
        "error",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "error",
        "AI",
        "DF",
        "COND",
        "CFG",
        "ADDR",
        "DATA",
        "RD",
        "error",
        "CODE",
        "staticmethod",
        "current",
        "Instruction",
        "__PROCESS_CONDITION",
        "current",
        "error",
        "Instruction",
        "__PROCESS_WR",
        "current",
        "error",
        "Instruction",
        "__PROCESS_SOURCE",
        "current",
        "error",
        "Instruction",
        "__PROCESS_MEM_ADDR",
        "current",
        "RsF",
        "RsE",
        "error",
        "current",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "Logger",
        "error",
        "current",
        "Logger",
        "error",
        "current",
        "error",
        "current",
        "Wr",
        "Rdi",
        "alu_op",
        "AI",
        "DF",
        "COND",
        "DI",
        "CFG",
        "ADDR",
        "DATA",
        "RD",
        "error",
        "CODE",
        "staticmethod",
        "current",
        "current",
        "Instruction",
        "__PROCESS_MEM_ADDR",
        "current",
        "RsE",
        "Logger",
        "error",
        "current",
        "Logger",
        "error",
        "current",
        "error",
        "Instruction",
        "__PROCESS_WR",
        "current",
        "error",
        "Instruction",
        "__PROCESS_WP",
        "current",
        "error",
        "Instruction",
        "__PROCESS_SOURCE",
        "current",
        "error",
        "current",
        "integer2bin",
        "current",
        "TI",
        "current",
        "Wr",
        "Rdi",
        "alu_op",
        "AI",
        "DF",
        "Sp",
        "Wp",
        "CFG",
        "RsF",
        "Dp",
        "DATA",
        "RD",
        "Logger",
        "error",
        "current",
        "error",
        "CODE",
        "staticmethod",
        "current",
        "Instruction",
        "__PROCESS_CONDITION",
        "current",
        "Instruction",
        "__PROCESS_WR",
        "current",
        "error",
        "Instruction",
        "__PROCESS_SOURCE",
        "current",
        "error",
        "current",
        "Wr",
        "Rdi",
        "alu_op",
        "AI",
        "DF",
        "COND",
        "SO",
        "TO",
        "CFG",
        "ADDR",
        "DATA",
        "RD",
        "error",
        "CODE",
        "staticmethod",
        "current",
        "cj",
        "Instruction",
        "__PROCESS_CONDITION",
        "current",
        "error",
        "error",
        "Instruction",
        "__PROCESS_WR",
        "current",
        "error",
        "Instruction",
        "__PROCESS_SOURCE",
        "current",
        "error",
        "cj",
        "re",
        "findall",
        "comp_addr",
        "current",
        "addr",
        "integer2bin",
        "addr",
        "addr",
        "Logger",
        "error",
        "IndexError",
        "Logger",
        "error",
        "current",
        "error",
        "current",
        "Wr",
        "Rdi",
        "alu_op",
        "AI",
        "DF",
        "COND",
        "cj",
        "CFG",
        "ADDR",
        "DATA",
        "RD",
        "Logger",
        "error",
        "current",
        "error",
        "CODE",
        "staticmethod",
        "current",
        "current",
        "current",
        "current",
        "error",
        "error",
        "Instruction",
        "__PROCESS_WR",
        "current",
        "error",
        "Instruction",
        "__PROCESS_SOURCE",
        "current",
        "current",
        "current",
        "current",
        "current",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "integer2bin",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "re",
        "findall",
        "comp_REG_FMT",
        "current",
        "param_op",
        "integer2bin",
        "param_op",
        "Logger",
        "error",
        "current",
        "Logger",
        "error",
        "current",
        "Logger",
        "error",
        "current",
        "error",
        "current",
        "current",
        "Instruction",
        "__PROCESS_MEM_ADDR",
        "current",
        "RsE",
        "Logger",
        "error",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "current",
        "Instruction",
        "__PROCESS_MEM_ADDR",
        "current",
        "RsE",
        "Logger",
        "error",
        "current",
        "Logger",
        "error",
        "current",
        "Logger",
        "error",
        "current",
        "error",
        "current",
        "integer2bin",
        "current",
        "SO",
        "TO",
        "current",
        "Logger",
        "error",
        "current",
        "Logger",
        "info",
        "current",
        "error",
        "Instruction",
        "__PROCESS_WR",
        "current",
        "error",
        "Instruction",
        "__PROCESS_SOURCE",
        "current",
        "SO",
        "TO",
        "current",
        "Wr",
        "Rdi",
        "alu_op",
        "error",
        "current",
        "integer2bin",
        "current",
        "Logger",
        "error",
        "current",
        "error",
        "Ww",
        "PS",
        "Wp",
        "RsF",
        "RsE",
        "AI",
        "DF",
        "COND",
        "CFG",
        "ADDR",
        "DATA",
        "RD",
        "Logger",
        "error",
        "current",
        "error",
        "CODE",
        "staticmethod",
        "current",
        "current",
        "current",
        "current",
        "current",
        "current",
        "current",
        "Logger",
        "error",
        "current",
        "integer2bin",
        "current",
        "current",
        "get_reg_addr",
        "current",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "get_reg_addr",
        "current",
        "error",
        "current",
        "re",
        "findall",
        "comp_den",
        "current",
        "den",
        "integer2bin",
        "current",
        "den",
        "get_reg_addr",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "current",
        "current",
        "current",
        "current",
        "Logger",
        "error",
        "current",
        "integer2bin",
        "current",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "Logger",
        "error",
        "error",
        "Logger",
        "error",
        "current",
        "DF",
        "OPERATION",
        "CTRL",
        "RA0",
        "RA1",
        "RD0",
        "RD1",
        "RE",
        "error",
        "CODE",
        "staticmethod",
        "current",
        "current",
        "Logger",
        "error",
        "current",
        "Logger",
        "error",
        "current",
        "arithList",
        "arithList",
        "current",
        "current",
        "current",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "current",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "Logger",
        "error",
        "current",
        "current",
        "current",
        "current",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "get_reg_addr",
        "current",
        "Logger",
        "error",
        "Logger",
        "error",
        "error",
        "ARITH_OP",
        "RsC",
        "RsD",
        "RsA",
        "RsB",
        "Logger",
        "error",
        "current",
        "error",
        "CODE"
    ],
    "literals": [
        "'NOP'",
        "'000 - No Operation'",
        "'TEST'",
        "'000 - Update ALU Flags with an Operation'",
        "'REG_WR'",
        "'100 - Register Write'",
        "'DMEM_WR'",
        "'101 - Data Memory Write'",
        "'WMEM_WR'",
        "'101 - WaveParam Memory Write'",
        "'DPORT_WR'",
        "'110 - Data Port Write'",
        "'TRIG'",
        "'110 - Trigger Set'",
        "'DPORT_RD'",
        "'110 - Data Port Read'",
        "'WPORT_WR'",
        "'110 - WaveParam Port Write'",
        "'JUMP'",
        "'001 - Branch to a Specific Address'",
        "'CALL'",
        "'001 - Function Call'",
        "'RET'",
        "'001 - Function Return'",
        "'FLAG'",
        "'111 - FLAG set / reset'",
        "'TIME'",
        "'111 - Time Instruction'",
        "'ARITH'",
        "'111 - Opeates (A+/-B)*C+/-D'",
        "'DIV'",
        "'111 - Opeates (A/B) Return Quotient and Reminder'",
        "'NET'",
        "'111 - Net Instruction'",
        "'CUSTOM'",
        "'111 - Cutsom Peripheral Instruction'",
        "'WAIT'",
        "'001 - Jump [HERE] Until time value arrives.'",
        "'COPRO'",
        "'100 -'",
        "'+'",
        "'0000'",
        "'-'",
        "'0010'",
        "'AND'",
        "'0100'",
        "'&'",
        "'0100'",
        "'MSK'",
        "'0100'",
        "'ASR'",
        "'0110'",
        "'ABS'",
        "'1000'",
        "'MSH'",
        "'1010'",
        "'LSH'",
        "'1100'",
        "'SWP'",
        "'1110'",
        "'NOT'",
        "'0001'",
        "'!'",
        "'0001'",
        "'OR'",
        "'0011'",
        "'|'",
        "'0011'",
        "'XOR'",
        "'0101'",
        "'^'",
        "'0101'",
        "'CAT'",
        "'0111'",
        "'::'",
        "'0111'",
        "'RFU'",
        "'1001'",
        "'PAR'",
        "'1011'",
        "'SL'",
        "'1101'",
        "'<<'",
        "'1101'",
        "'SR'",
        "'1111'",
        "'>>'",
        "'1111'",
        "'+'",
        "'00'",
        "'-'",
        "'01'",
        "'AND'",
        "'10'",
        "'ASR'",
        "'11'",
        "'ABS'",
        "'MSH'",
        "'LSH'",
        "'SWP'",
        "'PAR'",
        "'NOT'",
        "'T'",
        "'00000'",
        "'TP'",
        "'00001'",
        "'TM'",
        "'00010'",
        "'PT'",
        "'00011'",
        "'PTP'",
        "'00100'",
        "'PTM'",
        "'00101'",
        "'1'",
        "'000'",
        "'Z'",
        "'001'",
        "'S'",
        "'010'",
        "'NZ'",
        "'011'",
        "'NS'",
        "'100'",
        "'F'",
        "'101'",
        "'NF'",
        "'110'",
        "'0'",
        "'111'",
        "'TIME'",
        "'RegEx'",
        "r'(?<=@)[0-9]+'",
        "'RL'",
        "'@'",
        "'RR'",
        "''",
        "'ADDR'",
        "'RegEx'",
        "r'\\[(.*)\\]'",
        "'RL'",
        "'['",
        "'RR'",
        "']'",
        "'UF'",
        "'RegEx'",
        "r'-uf'",
        "'RL'",
        "''",
        "'RR'",
        "''",
        "'WW'",
        "'RegEx'",
        "r'-ww'",
        "'RL'",
        "''",
        "'RR'",
        "''",
        "'WP'",
        "'RegEx'",
        "r'-wp\\(([_a-z\\s]*)\\)'",
        "'RL'",
        "'-wp('",
        "'RR'",
        "')'",
        "'OP'",
        "'RegEx'",
        "r'-op\\(([\\s#a-zA-Z0-9+\\-<>]*)\\)'",
        "'RL'",
        "'-op('",
        "'RR'",
        "')'",
        "'IF'",
        "'RegEx'",
        "r'-if\\(([A-Z\\s]*)\\)'",
        "'RL'",
        "'-if('",
        "'RR'",
        "')'",
        "'WR'",
        "'RegEx'",
        "r'-wr\\(([a-z\\s0-9]*)\\)'",
        "'RL'",
        "'-wr('",
        "'RR'",
        "')'",
        "'PORT'",
        "'RegEx'",
        "r'p([0-9]+)'",
        "'RL'",
        "'p'",
        "'RR'",
        "''",
        "'LIT'",
        "'RegEx'",
        "r'(?<=#)[b0-9\\-]+'",
        "'RL'",
        "'#'",
        "'RR'",
        "''",
        "'W_FREQ'",
        "'RegEx'",
        "r'w_freq|r_freq'",
        "'R'",
        "'w0'",
        "'W_PHASE'",
        "'RegEx'",
        "r'w_phase|r_phase'",
        "'R'",
        "'w1'",
        "'W_ENV'",
        "'RegEx'",
        "r'w_env|r_env'",
        "'R'",
        "'w2'",
        "'W_GAIN'",
        "'RegEx'",
        "r'w_gain|r_gain'",
        "'R'",
        "'w3'",
        "'W_LENGHT'",
        "'RegEx'",
        "r'w_length|r_length'",
        "'R'",
        "'w4'",
        "'W_CONF'",
        "'RegEx'",
        "r'w_conf|r_conf'",
        "'R'",
        "'w5'",
        "'ZERO'",
        "'RegEx'",
        "r'zero'",
        "'R'",
        "'s0'",
        "'RAND'",
        "'RegEx'",
        "r'rand'",
        "'R'",
        "'s1'",
        "'CONF'",
        "'RegEx'",
        "r's_conf|r_conf'",
        "'R'",
        "'s2'",
        "'STATUS'",
        "'RegEx'",
        "r's_status|r_status'",
        "'R'",
        "'s3'",
        "'DIVQ'",
        "'RegEx'",
        "r'div_q'",
        "'R'",
        "'s4'",
        "'DIVR'",
        "'RegEx'",
        "r'div_r'",
        "'R'",
        "'s5'",
        "'ARITHL'",
        "'RegEx'",
        "r'arith_l'",
        "'R'",
        "'s6'",
        "'CORE_R1'",
        "'RegEx'",
        "r'core_r1'",
        "'R'",
        "'s7'",
        "'CORE_R2'",
        "'RegEx'",
        "r'core_r2'",
        "'R'",
        "'s8'",
        "'PORTL'",
        "'RegEx'",
        "r'port_l'",
        "'R'",
        "'s9'",
        "'PORTH'",
        "'RegEx'",
        "r'port_h'",
        "'R'",
        "'s10'",
        "'TUSER'",
        "'RegEx'",
        "r'tuser'",
        "'R'",
        "'s11'",
        "'CORE_W1'",
        "'RegEx'",
        "r'core_w1'",
        "'R'",
        "'s12'",
        "'CORE_W2'",
        "'RegEx'",
        "r'core_w2'",
        "'R'",
        "'s13'",
        "'TIME'",
        "'RegEx'",
        "r's_time|r_time'",
        "'R'",
        "'s14'",
        "'ADDR'",
        "'RegEx'",
        "r's_addr|r_addr'",
        "'R'",
        "'s15'",
        "'LABEL'",
        "r'[A-Za-z0-9_]+(?=\\:)'",
        "'CMD'",
        "r'^[A-Z_]+'",
        "'DIRECTIVE'",
        "r'(?<=\\.)[A-Z]+'",
        "'LIT'",
        "r'(?<=#)[0-9]+'",
        "'CDS'",
        "r'\\s*([\\w&\\+\\']+)'",
        "'INFO'",
        "'WARNING'",
        "'ERROR'",
        "\"assembler.log\"",
        "\"w\"",
        "\"-- Assembler LOG-- \\n\\n\"",
        "f\"Logger.setLevel: show_level must be samller than 2 (0-INFO, 1-WARNINGS, 2-ERRORS)\"",
        "\"w+\"",
        "'a'",
        "\"-- Assembler LOG-- \\n\\n\"",
        "f\"{Logger.__STATUS[severity]} : [{locator}] > {message}\"",
        "'\\n'",
        "'a'",
        "\"RET\\n\"",
        "'CMD'",
        "'RET'",
        "f\"     {command['CMD']} \"",
        "'CMD'",
        "'CMD'",
        "'DPORT_WR'",
        "'CMD'",
        "'WPORT_WR'",
        "'CMD'",
        "'TRIG'",
        "'p'",
        "'DST'",
        "' '",
        "'DST'",
        "'DST'",
        "' '",
        "f\"{command['SRC']} \"",
        "'SRC'",
        "'SRC'",
        "''",
        "f\"{command['DATA']} \"",
        "'DATA'",
        "'DATA'",
        "''",
        "f\"{command['C_OP']} \"",
        "'C_OP'",
        "'C_OP'",
        "''",
        "f\"{command['R1']} \"",
        "'R1'",
        "'R1'",
        "''",
        "f\"{command['R2']} \"",
        "'R2'",
        "'R2'",
        "''",
        "f\"{command['R3']} \"",
        "'R3'",
        "'R3'",
        "''",
        "f\"{command['R4']} \"",
        "'R4'",
        "'R4'",
        "''",
        "'ADDR'",
        "'LABEL'",
        "f\"&{p_addr}\"",
        "'ADDR'",
        "'CMD'",
        "'JUMP'",
        "\"HERE \"",
        "f\"[{command['ADDR']}] \"",
        "'ADDR'",
        "f\"{command['LABEL'] } \"",
        "'LABEL'",
        "'LABEL'",
        "''",
        "f\"-if({command['IF']}) \"",
        "'IF'",
        "'IF'",
        "''",
        "f\"-wr({command['WR']}) \"",
        "'WR'",
        "'WR'",
        "''",
        "f\"#{command['LIT']} \"",
        "'LIT'",
        "'LIT'",
        "''",
        "f\"-op({command['OP']}) \"",
        "'OP'",
        "'OP'",
        "''",
        "f\"-reg({command['REG']}) \"",
        "'REG'",
        "'REG'",
        "''",
        "f\"@{command['TIME']} \"",
        "'TIME'",
        "'TIME'",
        "''",
        "f\"{command['NUM']} \"",
        "'NUM'",
        "'NUM'",
        "''",
        "'DEN'",
        "'#'",
        "'DEN'",
        "'r'",
        "''",
        "f\"{command['DEN']} \"",
        "'DEN'",
        "\"-uf\"",
        "'UF'",
        "'UF'",
        "'1'",
        "''",
        "'\\n'",
        "''",
        "'P_ADDR'",
        "'P_ADDR'",
        "'&'",
        "'F_'",
        "'\\n'",
        "':\\n'",
        "'LABEL'",
        "'LABEL'",
        "'ADDR'",
        "'LABEL'",
        "'LABEL: '",
        "'Label '",
        "'LABEL'",
        "' not recognized'",
        "'LINE'",
        "'r'",
        "\"//\"",
        "\"//\"",
        "'s15'",
        "'s15'",
        "'LABEL'",
        "'DIRECTIVE'",
        "'CMD'",
        "'reg'",
        "'LABEL_RECOGNITION'",
        "'reg is not a valid label in line > '",
        "'LABEL_RECOGNITION'",
        "'Redefinition of LABEL \"'",
        "'\" in line > '",
        "'&'",
        "'ALIAS'",
        "'CDS'",
        "'ALIAS_'",
        "\"r(\\d+)|s(\\d+)|w(\\d+)\"",
        "'RegEx'",
        "'R'",
        "\"ALIAS_RECOGNITION\"",
        "' > '",
        "' is called '",
        "'ALIAS_RECOGNITION'",
        "'Alias Register not recognized.'",
        "'CONST'",
        "'CDS'",
        "'CONS_'",
        "r'[0-9]+'",
        "'RegEx'",
        "'R'",
        "'#'",
        "\"CONSTANT_RECOGNITION\"",
        "' > '",
        "' is called '",
        "'CONSTANT_RECOGNITION'",
        "'CONST Value not recognized.'",
        "'END'",
        "'LABEL_RECOGNITION'",
        "'Command Not Recognized in Line >'",
        "'\\n## ALIAS LIST'",
        "'\\n'",
        "'###############################'",
        "'\\n'",
        "'REG  > ALIAS NAME\\n-----|-------------'",
        "'\\n'",
        "f\"{Alias_List[key]['R']:<3}\"",
        "'R'",
        "' > '",
        "'RegEx'",
        "'\\n'",
        "'###############################'",
        "\"ALIAS_RECOGNITION\"",
        "'\\n## LABEL LIST '",
        "'\\n'",
        "'###############################'",
        "'\\n'",
        "'LABEL NAME       > PMEM ADDRESS\\n-----------------|-------------  '",
        "'s15'",
        "'\\n'",
        "f\"{key:<15}\"",
        "' > '",
        "'\\n'",
        "'###############################'",
        "\"LABEL_RECOGNITION\"",
        "'CMD'",
        "'DIRECTIVE'",
        "'END'",
        "'LINE'",
        "'P_ADDR'",
        "'ADDR'",
        "F\"&{str(mem_addr)}\"",
        "'UF'",
        "'0'",
        "'CMD'",
        "'JUMP'",
        "\"COMMAND_RECOGNITION\"",
        "'END OF PROGRAM '",
        "'P_ADDR'",
        "'LIT'",
        "'COMMAND_RECOGNITION'",
        "'Literals not equals in Line >'",
        "'RegEx'",
        "'R'",
        "'LINE'",
        "'RegEx'",
        "'COMMAND_RECOGNITION'",
        "'Duplicated Parameter '",
        "' in line > '",
        "'RL'",
        "'RR'",
        "''",
        "'CDS'",
        "'LIT'",
        "'LIT'",
        "'b'",
        "'LIT'",
        "'LIT'",
        "'UF'",
        "'UF'",
        "'1'",
        "'OP'",
        "\"COMMAND_RECOGNITION\"",
        "\"No Operation < -op() > set for Flag Update < -uf > in Line \"",
        "'DMEM_WR'",
        "'ADDR'",
        "\"COMMAND_RECOGNITION\"",
        "\"Memory Address < [] > not set in Line \"",
        "'WMEM_WR'",
        "'PORT'",
        "'DST'",
        "'PORT'",
        "\"COMMAND_RECOGNITION\"",
        "\"No Port Address < -p() > in Line \"",
        "'WMEM_WR'",
        "'WP'",
        "'PORT'",
        "\"COMMAND_RECOGNITION\"",
        "\"No Port Address < -p() > in Line \"",
        "'DPORT_WR'",
        "'WPORT_WR'",
        "'TRIG'",
        "'PORT'",
        "\"COMMAND_RECOGNITION\"",
        "\"No port in PORT_WR Instruction in line \"",
        "'OUT_DATA'",
        "'OUT_WAVE'",
        "'IF'",
        "\"COMMAND_RECOGNITION\"",
        "\"Not allowed Conditional < -if() > with Port Writting cmd in Line \"",
        "'WR'",
        "\"COMMAND_RECOGNITION\"",
        "\"Not allowed Write Register < -wr() > with Port Writting cmd in Line \"",
        "'CDS'",
        "'CMD'",
        "'ARITH'",
        "'C_OP'",
        "'R1'",
        "'R2'",
        "'R3'",
        "'R4'",
        "'CUSTOM'",
        "'C_OP'",
        "'R1'",
        "'R2'",
        "'R3'",
        "'R4'",
        "\"COMMAND_RECOGNITION\"",
        "\"CUSTOM Command Should have Op and 4 parameters in line \"",
        "\" (possible missing [])\"",
        "'REG_WR'",
        "'label'",
        "'DST'",
        "'SRC'",
        "'ADDR'",
        "'COMMAND_RECOGNITION'",
        "'REG_WR command source label: '",
        "' replaced by value '",
        "'ADDR'",
        "'  in line '",
        "'COMMAND_RECOGNITION'",
        "'Label: '",
        "' Not defined in line '",
        "\"COMMAND_RECOGNITION\"",
        "\"Parameter Error (More than 3) in line \"",
        "\" (possible missing [])\"",
        "'REG_WR'",
        "'label'",
        "\"COMMAND_RECOGNITION\"",
        "\"Missing label in line \"",
        "'DST'",
        "'SRC'",
        "'DPORT_WR'",
        "'PORT'",
        "\"COMMAND_RECOGNITION\"",
        "\"Data Port Read max value is 3 in line \"",
        "'DST'",
        "'PORT'",
        "'PORT'",
        "'SRC'",
        "'DATA'",
        "'TIME'",
        "'OUT_DATA'",
        "'DST'",
        "'SRC'",
        "'DIV'",
        "'NUM'",
        "'DEN'",
        "\"COMMAND_RECOGNITION\"",
        "\"Parameter Error in line \"",
        "\" Check for .ALIAS\"",
        "'DMEM_WR'",
        "'SRC'",
        "'DST'",
        "'['",
        "'ADDR'",
        "']'",
        "'WPORT_WR'",
        "'SRC'",
        "'DST'",
        "'PORT'",
        "'FLAG'",
        "'SRC'",
        "'NET'",
        "'SRC'",
        "'TIME'",
        "'CMD'",
        "'DST'",
        "'DIV'",
        "'LIT'",
        "'CMD'",
        "'NUM'",
        "\"COMMAND_RECOGNITION\"",
        "\"Parameter Error in line \"",
        "'TRIG'",
        "'CMD'",
        "'SRC'",
        "'PORT'",
        "\"COMMAND_RECOGNITION\"",
        "\"Trigger Port max value is 7 in line \"",
        "'DST'",
        "'PORT'",
        "'PORT'",
        "'JUMP'",
        "'CALL'",
        "'CMD'",
        "'s15'",
        "\"COMMAND_RECOGNITION\"",
        "\"BRANCH to r_addr  > line \"",
        "\"COMMAND_RECOGNITION\"",
        "\"BRANCH to label : \"",
        "\" is done to address \"",
        "\"  > line \"",
        "'ADDR'",
        "'LABEL'",
        "'PREV'",
        "'ADDR'",
        "'&'",
        "'HERE'",
        "'ADDR'",
        "'&'",
        "'NEXT'",
        "'ADDR'",
        "'&'",
        "'SKIP'",
        "'ADDR'",
        "'&'",
        "\"COMMAND_RECOGNITION\"",
        "\"Branch Address ERROR (Should be a label) in line \"",
        "\"COMMAND_RECOGNITION\"",
        "\"Parameter Error (2 Parameters) in line \"",
        "'NOP'",
        "'ARITH'",
        "'TEST'",
        "'RET'",
        "'CMD'",
        "'DPORT_RD'",
        "'CMD'",
        "'PORT'",
        "'PORT'",
        "\"COMMAND_RECOGNITION\"",
        "\"Data Port Read max value is 7 in line \"",
        "'DST'",
        "'PORT'",
        "'PORT'",
        "\"COMMAND_RECOGNITION\"",
        "\"No Port for DPORT_RD in line \"",
        "'WMEM_WR'",
        "'CMD'",
        "'ADDR'",
        "'DST'",
        "'ADDR'",
        "'ADDR'",
        "\"COMMAND_RECOGNITION\"",
        "\"No Address for WMEM_WR in line \"",
        "'JUMP'",
        "'CALL'",
        "'ADDR'",
        "'CMD'",
        "'ADDR'",
        "'ADDR'",
        "\"COMMAND_RECOGNITION\"",
        "\"Parameter Error in line \"",
        "'WAIT'",
        "\"COMMAND_RECOGNITION\"",
        "\"IS WAIT adding Instruction\"",
        "'CMD'",
        "'ADDR'",
        "'&'",
        "\"COMMAND_RECOGNITION\"",
        "\"Parameter Error (0 Parameter ) in line \"",
        "\"COMMAND_RECOGNITION\"",
        "\"Error Processing Line \"",
        "\". Command not recognized.\"",
        "\"COMMAND_RECOGNITION\"",
        "f\"< {instruction} > is not a Recognized Command in Line \"",
        "\"COMMAND_RECOGNITION\"",
        "\"Not a Command in Line >\"",
        "\"ASM2LIST\"",
        "\"##### STEP_1 - LABEL RECOGNITION\"",
        "\"LABEL_RECOGNITION\"",
        "\"Errors found!\"",
        "\"ASM2LIST\"",
        "\"##### STEP_2 - COMMAND RECOGNITION\"",
        "\"COMMAND_RECOGNITION\"",
        "\"Errors found!\"",
        "\"\"",
        "'LABEL'",
        "'LABEL'",
        "'ADDR'",
        "'ADDR'",
        "'LABEL'",
        "'LINE'",
        "'LINE'",
        "\"LIST2BIN\"",
        "\"##### LIST 2 BIN\"",
        "'000_000__000___00__0_00_00______00000000000_000000_________00000000000000000000000000000000_0000000'",
        "'x'",
        "'CMD'",
        "'UF'",
        "'UF'",
        "'0'",
        "'CMD'",
        "'NOP'",
        "'000_000__000___00__0_00_00______00000000000_000000_________00000000000000000000000000000000_0000000'",
        "'CMD'",
        "'REG_WR'",
        "'CMD'",
        "'DMEM_WR'",
        "'CMD'",
        "'WMEM_WR'",
        "'CMD'",
        "'JUMP'",
        "'00'",
        "'CMD'",
        "'WAIT'",
        "'TIME'",
        "'TIME'",
        "'UF'",
        "'1'",
        "'IF'",
        "'1'",
        "'OP'",
        "'s11-#'",
        "'TIME'",
        "'IF'",
        "'S'",
        "'00'",
        "'CMD'",
        "'CALL'",
        "'10'",
        "'CMD'",
        "'RET'",
        "'11'",
        "'CMD'",
        "'DPORT_WR'",
        "'CMD'",
        "'DPORT_RD'",
        "'CMD'",
        "'WPORT_WR'",
        "'CMD'",
        "'TRIG'",
        "'CMD'",
        "'TIME'",
        "'CMD'",
        "'TEST'",
        "'UF'",
        "'1'",
        "'CMD'",
        "'DIV'",
        "'CMD'",
        "'FLAG'",
        "'CMD'",
        "'NET'",
        "'CMD'",
        "'CUSTOM'",
        "'CMD'",
        "'ARITH'",
        "\"COMMAND_TRANSLATION\"",
        "\"Command Listed but not programmed > \"",
        "'CMD'",
        "\"COMMAND_TRANSLATION\"",
        "\"No Command at line \"",
        "'LINE'",
        "'0'",
        "'1'",
        "\"COMMAND_TRANSLATION\"",
        "f\"{CODE}\\nINSTRUCTION LENGTH > {length} at line {command['LINE']}\"",
        "'LINE'",
        "\"w+\"",
        "f\"{line}\\n\"",
        "'_'",
        "''",
        "'0b'",
        "'0b'",
        "'0b'",
        "\"\"",
        "\"ASM2BIN\"",
        "\"Program list with errors.\"",
        "\"\"",
        "\"ASM2BIN\"",
        "\"Program list with errors.\"",
        "\"^0x\"",
        "\"{0:0\"",
        "\"b}\"",
        "\"integer2bin\"",
        "\"number %d is smaller than %d\"",
        "\"number %d is bigger than %d\"",
        "\"{0:0\"",
        "\"b}\"",
        "'r(\\d+)|s(\\d+)|w(\\d+)'",
        "'Source'",
        "'0_00'",
        "'0_10'",
        "'0_01'",
        "'Dest'",
        "'00'",
        "'10'",
        "'01'",
        "'Addr'",
        "'0'",
        "'get_reg_addr'",
        "'Address format error, should be Data Register (Starts with r)'",
        "'X'",
        "'get_reg_addr'",
        "'Register not Recognized (Registers Starts with r, s or w) '",
        "''",
        "'IF'",
        "'IF'",
        "'IF'",
        "'Parameter.IF'",
        "'Posible CONDITIONS are ('",
        "', '",
        "') in instruction '",
        "'LINE'",
        "'000'",
        "'0000000'",
        "'0'",
        "'WR'",
        "'1'",
        "r'\\s*([\\w]+)'",
        "'WR'",
        "'op'",
        "'OP'",
        "'0'",
        "'Parameter.WR'",
        "'Pperation < -op() > option not found in instruction '",
        "'LINE'",
        "'imm'",
        "'LIT'",
        "'1'",
        "'Parameter.WR'",
        "'Literal Value not found in instruction '",
        "'LINE'",
        "'Parameter.WR'",
        "'Posible Source Dest for <-wr(reg source)> are (op, imm) in instruction '",
        "'LINE'",
        "'Parameter.WR'",
        "'Write Register error <-wr(reg source) in instruction '",
        "'LINE'",
        "'Dest'",
        "'0'",
        "'000000'",
        "'WP'",
        "'PORT'",
        "'1'",
        "'PORT'",
        "'WP'",
        "'r_wave'",
        "'1'",
        "'WP'",
        "'wmem'",
        "'0'",
        "'Parameter.WP'",
        "'Source Wave Port not recognized (wreg, r_wave) '",
        "'LINE'",
        "'Parameter.WP'",
        "'Port Address not recognized < pX > '",
        "'LINE'",
        "'X'",
        "''",
        "'CMD'",
        "'REG_WR'",
        "'SRC'",
        "'op'",
        "'OP'",
        "\"r(\\d+)|s(\\d+)|w(\\d+)|#(-?\\d+)|#b(\\d+)|\\s*([A-Z]{3}|[A-Z><]{2}|\\+|\\-)\"",
        "'OP'",
        "''",
        "'01'",
        "'0_1000000'",
        "'LIT'",
        "'_'",
        "'LIT'",
        "'0000000000000000'",
        "'0000'",
        "'00'",
        "'0_00'",
        "'0_10'",
        "'0_01'",
        "'Parameter.SRC'",
        "'Operand can not be a Literal.'",
        "'Parameter.SRC'",
        "'Operand not recognized.'",
        "'10'",
        "'000000000000000000000000'",
        "'0_00'",
        "'0_10'",
        "'0_01'",
        "'Parameter.SRC'",
        "'Operand can not be a Literal in instruction '",
        "'LINE'",
        "'Parameter.SRC'",
        "'Operantion Not Recognized > '",
        "'OP'",
        "'Parameter.SRC'",
        "'1-Operantion Not Allowed > '",
        "'OP'",
        "' in instruction '",
        "'LINE'",
        "'ABS'",
        "'01'",
        "'0_0000000'",
        "'0000000000000000'",
        "'0_00'",
        "'0_10'",
        "'0_01'",
        "'Parameter.SRC'",
        "'First Operand can not be a Literal.'",
        "'Parameter.SRC'",
        "'First Operand not recognized.'",
        "'LIT'",
        "'Parameter.SRC'",
        "'With < -op() > imm value should be 16 Bits in instruction '",
        "'LINE'",
        "'LIT'",
        "'Parameter.SRC'",
        "'Literal '",
        "'LIT'",
        "' should be 16 Bits.'",
        "\"Parameter.SRC\"",
        "\"[OK] Literal \"",
        "'LIT'",
        "\" can be represented with 16 Bits.\"",
        "'01'",
        "'_'",
        "'LIT'",
        "'0000000000000000'",
        "'01'",
        "'0_00'",
        "'01'",
        "'0_10'",
        "'01'",
        "'0_01'",
        "'10'",
        "'_'",
        "'10'",
        "'_'",
        "'Parameter.SRC'",
        "'Second Operand not recognized in instruction '",
        "'LINE'",
        "'Parameter.SRC'",
        "'ALU {Full List} Operation Not Recognized in instruction '",
        "'LINE'",
        "'Parameter.SRC'",
        "'ALU {Reduced List} Operation Not Recognized in instruction '",
        "'LINE'",
        "'LIT'",
        "'11'",
        "'00'",
        "'__'",
        "'LIT'",
        "'11'",
        "'00'",
        "'__00000000000000000000000000000000'",
        "'_'",
        "'_'",
        "'0'",
        "'x'",
        "\"r(\\d+)|&(\\d+)|\\s*([A-Z]{3}|[A-Z]{2}|\\+|\\-)\"",
        "'000000'",
        "'00000_'",
        "'_'",
        "'1'",
        "'Parameter.MEM_ADDR'",
        "'First Operand not recognized.'",
        "'Parameter.MEM_ADDR'",
        "'First Operand can not be a Literal.'",
        "'00000_'",
        "'_'",
        "'1'",
        "'+'",
        "'Parameter.MEM_ADDR'",
        "'Address Operand should be < + >.'",
        "'Parameter.MEM_ADDR'",
        "'Address format error, should be Data Register(r) or Literal(&)'",
        "'0'",
        "'000000'",
        "'SRC'",
        "'op'",
        "'OP'",
        "'00__'",
        "'UF'",
        "'__'",
        "'_00000000000_000000'",
        "'Instruction.REG_WR'",
        "'No < -op() > for Operation Writting in instruction '",
        "'LINE'",
        "'SRC'",
        "'imm'",
        "'LIT'",
        "'11__'",
        "'UF'",
        "'_00_'",
        "'_00000000000_000000'",
        "'Instruction.REG_WR'",
        "'No Literal value for immediate Assignation (#) in instruction '",
        "'LINE'",
        "'SRC'",
        "'label'",
        "'ADDR'",
        "\"&(\\d+)\"",
        "'ADDR'",
        "'_00000000000_000000'",
        "'0000000000000000_'",
        "'11'",
        "'11__'",
        "'UF'",
        "'_00_00'",
        "'Instruction.REG_WR'",
        "'No Literal value for immediate Assignation (#) in instruction '",
        "'LINE'",
        "'SRC'",
        "'dmem'",
        "'01__'",
        "'UF'",
        "'_00_'",
        "'ADDR'",
        "'_'",
        "'01__'",
        "'UF'",
        "'_00_'",
        "'SRC'",
        "'wmem'",
        "'DST'",
        "'r_wave'",
        "'000'",
        "'Instruction.REG_WR'",
        "'Wave Register Write is not conditional < -if() >  in instruction '",
        "'LINE'",
        "'0'",
        "'WW'",
        "'1'",
        "'0'",
        "'ADDR'",
        "'ADDR'",
        "'000000'",
        "'Instruction.REG_WR'",
        "'Wave Memory Addres Error Source Should be LIT or Reg in instruction '",
        "'LINE'",
        "'_'",
        "'Instruction.REG_WR'",
        "'No addres for <wmem> source in instruction '",
        "'LINE'",
        "'Instruction.REG_WR'",
        "'Wave Memory Source Should have a Wave Register <r_wave> Destination '",
        "'LINE'",
        "'Instruction.REG_WR'",
        "'Posible REG_WR sources are (op, imm, dmem, wmem, label ) in instruction '",
        "'LINE'",
        "\"r(\\d+)|s(\\d+)|w(\\d+)|(r_wave)\"",
        "'DST'",
        "'SRC'",
        "'label'",
        "'15'",
        "'Instruction.REG_WR'",
        "'Register used to BRANCH should be s15 in instruction '",
        "'LINE'",
        "'00'",
        "'10'",
        "'01'",
        "'SRC'",
        "'wmem'",
        "'0'",
        "'10__'",
        "'UF'",
        "'_'",
        "'_'",
        "'Instruction.REG_WR'",
        "'Wave Register Destination Should have a Wave Memory <wmem> Source '",
        "'LINE'",
        "\" (possible missing alias)\"",
        "'Instruction.REG_WR'",
        "'Destination Register '",
        "'DST'",
        "' not Recognized in instruction '",
        "'LINE'",
        "'100_'",
        "'__'",
        "'___'",
        "'_____'",
        "'_____'",
        "'_'",
        "'X'",
        "'000'",
        "'0'",
        "'DST'",
        "'_'",
        "'SRC'",
        "'op'",
        "'OP'",
        "'0'",
        "'Instruction.MEM_WR'",
        "'>  -op() option not found in instruction '",
        "'LINE'",
        "'SRC'",
        "'imm'",
        "'LIT'",
        "'1'",
        "'Instruction.MEM_WR'",
        "'No Literal value found in instruction '",
        "'LINE'",
        "'Instruction.MEM_WR'",
        "'Posible MEM_WR sources are (op, imm) in instruction '",
        "'LINE'",
        "'UF'",
        "'_'",
        "'_'",
        "'101_'",
        "'__'",
        "'_0_'",
        "'__'",
        "\"_____\"",
        "'_____'",
        "'_'",
        "'X'",
        "'0'",
        "'DST'",
        "'DST'",
        "'000000'",
        "'Instruction.REG_WR'",
        "'Wave Memory Addres Error Source Should be LIT or Reg in line '",
        "'LINE'",
        "'Instruction.WMEM_WR'",
        "'No address specified in line '",
        "'LINE'",
        "'0'",
        "'TIME'",
        "'1'",
        "'TIME'",
        "'1_'",
        "'__'",
        "'UF'",
        "'_'",
        "'_'",
        "'101_'",
        "'__1'",
        "'__'",
        "\"_____\"",
        "'_'",
        "'____'",
        "'_'",
        "'Instruction.WMEM_WR'",
        "'Error in line '",
        "'LINE'",
        "'X'",
        "'0'",
        "'00000000000_000000'",
        "'000'",
        "'0'",
        "'UF'",
        "'_'",
        "'_'",
        "'000_'",
        "'__'",
        "'_'",
        "'__'",
        "\"_____\"",
        "'_____'",
        "'_'",
        "'X'",
        "'000'",
        "'0'",
        "'11'",
        "'UF'",
        "'0'",
        "'0'",
        "'_00000000000_000000'",
        "\"&(\\d+)|s(\\d+)\"",
        "'ADDR'",
        "'_'",
        "'_000000'",
        "'1'",
        "'15'",
        "'_00000000000_000000'",
        "'0'",
        "\"Instruction.BRANCH\"",
        "\"JUMP Memory Address not recognized (imm or s15)\"",
        "\"COMMAND RECOGNITION\"",
        "f\"for address at line {current['LINE']}. (possible extra [])\"",
        "'LINE'",
        "'UF'",
        "'_'",
        "'_'",
        "'001_'",
        "'__'",
        "'__'",
        "'___'",
        "\"_____\"",
        "'____'",
        "\"_\"",
        "\"Instruction.BRANCH\"",
        "\"Exit with Error in instruction \"",
        "'LINE'",
        "'X'",
        "'CMD'",
        "'DPORT_WR'",
        "'CMD'",
        "'DPORT_RD'",
        "'CMD'",
        "'TRIG'",
        "'0'",
        "'00000000000'",
        "'0'",
        "'CMD'",
        "'TRIG'",
        "'SRC'",
        "'set'",
        "'1'",
        "'1'",
        "'_00000000001'",
        "'DST'",
        "'DST'",
        "'SRC'",
        "'clr'",
        "'1'",
        "'1'",
        "'_00000000000'",
        "'DST'",
        "'DST'",
        "'Instruction.CTRL'",
        "'Posible options for TRIG command are (set, clr)'",
        "'CMD'",
        "'DPORT_WR'",
        "'1'",
        "'SRC'",
        "'imm'",
        "'DATA'",
        "'1'",
        "'_'",
        "'DATA'",
        "'Instruction.PORT_WR'",
        "'No Port Data value found in line '",
        "'LINE'",
        "'SRC'",
        "'reg'",
        "'DATA'",
        "'0'",
        "\"r(\\d+)\"",
        "'DATA'",
        "'00000_'",
        "'Instruction.PORT_WR'",
        "'Register Selection Error, should be r in line '",
        "'LINE'",
        "'Instruction.PORT_WR'",
        "'No Port Register found in line '",
        "'LINE'",
        "'Instruction.PORT_WR'",
        "'Posible DPORT_WR sources are (imm, reg) in line '",
        "'LINE'",
        "'0'",
        "'0'",
        "'1'",
        "'SRC'",
        "'wmem'",
        "'0'",
        "'ADDR'",
        "'ADDR'",
        "'000000'",
        "'Instruction.REG_WR'",
        "'Wave Memory Addres Error Source Should be LIT or Reg in line '",
        "'LINE'",
        "'Instruction.PORT_WR'",
        "'No address specified for < wmem > in line '",
        "'LINE'",
        "'SRC'",
        "'r_wave'",
        "'1'",
        "'WW'",
        "'ADDR'",
        "'1'",
        "'ADDR'",
        "'000000'",
        "'Instruction.REG_WR'",
        "'Wave Memory Addres Error Source Should be LIT or Reg in line '",
        "'LINE'",
        "'Instruction.PORT_WR'",
        "'No address specified for < -ww > in line '",
        "'LINE'",
        "'0'",
        "'_00000000000'",
        "'Instruction.PORT_WR'",
        "'Posible wave sources are (wmem, r_wave) in line '",
        "'LINE'",
        "'11'",
        "'TIME'",
        "'1'",
        "'11'",
        "'____'",
        "'TIME'",
        "'____00000'",
        "'0000000'",
        "'WR'",
        "'Instruction.PORT_WR'",
        "'If time specified, Not allowed SDI <-wr()> in line '",
        "'LINE'",
        "'0'",
        "'Instruction.PORT_WR'",
        "'No time specified for command will use r_time in line '",
        "'LINE'",
        "'0'",
        "'__'",
        "'UF'",
        "'_'",
        "'_'",
        "'DST'",
        "'DST'",
        "'Instruction.PORT_WR'",
        "'No Destination Port in line '",
        "'LINE'",
        "'_'",
        "'110'",
        "'_'",
        "'__'",
        "'___'",
        "'_____'",
        "'__'",
        "'_'",
        "\"Instruction.PORT_WR\"",
        "\"Exit with Error in line \"",
        "'LINE'",
        "'X'",
        "'000000'",
        "'0_0000000'",
        "'0000000000000000'",
        "'10'",
        "'CMD'",
        "'TIME'",
        "'00001'",
        "'DST'",
        "'rst'",
        "'00001'",
        "'DST'",
        "'updt'",
        "'00010'",
        "'DST'",
        "'set_ref'",
        "'00100'",
        "'DST'",
        "'inc_ref'",
        "'01000'",
        "'DST'",
        "'set_cmp'",
        "'10000'",
        "'Instruction.CTRL'",
        "'Posible Operations for TIME command are (rst, set_ref, inc_ref, set_cmp)'",
        "'LIT'",
        "'11'",
        "'_'",
        "'LIT'",
        "''",
        "'SRC'",
        "'SRC'",
        "'Source'",
        "'DST'",
        "'rst'",
        "'Instruction.CTRL'",
        "'No Data'",
        "'CMD'",
        "'FLAG'",
        "'00010'",
        "'SRC'",
        "'set'",
        "'00001'",
        "'SRC'",
        "'clr'",
        "'00010'",
        "'Instruction.CTRL'",
        "'Posible Operations for FLAG command are (set, clr)'",
        "'CMD'",
        "'DIV'",
        "'01000'",
        "'00001'",
        "'NUM'",
        "'NUM'",
        "'Source'",
        "'DEN'",
        "\"(\\d+)|r(\\d+)\"",
        "'DEN'",
        "'11'",
        "'_'",
        "'DEN'",
        "''",
        "'DEN'",
        "'Source'",
        "\"Instruction.CTRL\"",
        "\"JUMP Memory Address not recognized (imm or s15)\"",
        "'CMD'",
        "'NET'",
        "'10001'",
        "'SRC'",
        "'get_net'",
        "'00001'",
        "'SRC'",
        "'set_net'",
        "'00010'",
        "'SRC'",
        "'sync_net'",
        "'01000'",
        "'SRC'",
        "'updt_offset'",
        "'01001'",
        "'SRC'",
        "'set_dt'",
        "'01010'",
        "'SRC'",
        "'get_dt'",
        "'01011'",
        "'Instruction.CTRL'",
        "'Posible Operations for FLAG command are (set, clr)'",
        "'CMD'",
        "'CUSTOM'",
        "'10010'",
        "'C_OP'",
        "'LIT'",
        "'Instruction.CTRL'",
        "'No Immediate value allowed in CUSTOM'",
        "'R1'",
        "'R2'",
        "'R3'",
        "'R4'",
        "'R1'",
        "'Source'",
        "'R2'",
        "'Addr'",
        "'R3'",
        "'Source'",
        "'R4'",
        "'Addr'",
        "'Instruction.CTRL'",
        "'Few Sources > Need Four Source Register for CUSTOM operation'",
        "\"Instruction.CTRL\"",
        "\"Error in instruction \"",
        "'LINE'",
        "'X'",
        "'111_0'",
        "'______'",
        "'___'",
        "'_____00000___'",
        "'_'",
        "'__'",
        "'__'",
        "'_'",
        "'_0000000'",
        "'000000'",
        "'LIT'",
        "'Instruction.ARITH'",
        "'No Immediate value allowed '",
        "'C_OP'",
        "'Instruction.ARITH'",
        "'No ARITH Operation '",
        "'C_OP'",
        "'C_OP'",
        "'C_OP'",
        "'T'",
        "'R1'",
        "'R2'",
        "'R1'",
        "'Source'",
        "'R2'",
        "'Source'",
        "'Instruction.ARITH'",
        "'Few Sources > Need Two Source Register for T operation'",
        "'C_OP'",
        "'TP'",
        "'R1'",
        "'R2'",
        "'R3'",
        "'R1'",
        "'Source'",
        "'R2'",
        "'Source'",
        "'R3'",
        "'Addr'",
        "'Instruction.ARITH'",
        "'Few Sources > Need three Source Register for TP operation'",
        "'C_OP'",
        "'TM'",
        "'R1'",
        "'R2'",
        "'R3'",
        "'R1'",
        "'Source'",
        "'R2'",
        "'Source'",
        "'R3'",
        "'Addr'",
        "'Instruction.ARITH'",
        "'Few Sources > Need three Source Register for TM operation'",
        "'C_OP'",
        "'PT'",
        "'R1'",
        "'R2'",
        "'R3'",
        "'R1'",
        "'Source'",
        "'R2'",
        "'Addr'",
        "'R3'",
        "'Source'",
        "'Instruction.ARITH'",
        "'Few Sources > Need three Source Register for PT operation'",
        "'C_OP'",
        "'PTP'",
        "'R1'",
        "'R2'",
        "'R3'",
        "'R4'",
        "'R1'",
        "'Source'",
        "'R2'",
        "'Addr'",
        "'R3'",
        "'Source'",
        "'R4'",
        "'Addr'",
        "'Instruction.ARITH'",
        "'Few Sources > Need Four Source Register for PTP operation'",
        "'C_OP'",
        "'PTM'",
        "'R1'",
        "'R2'",
        "'R3'",
        "'R4'",
        "'R1'",
        "'Source'",
        "'R2'",
        "'Addr'",
        "'R3'",
        "'Source'",
        "'R4'",
        "'Addr'",
        "'Instruction.ARITH'",
        "'Few Sources > Need Four Source Register for PTM operation'",
        "'Instruction.ARITH'",
        "'No Recognized Operation'",
        "'111_000______'",
        "'___00100_____00000___'",
        "'__'",
        "'__'",
        "'__'",
        "'___0000000000000000_0000000'",
        "\"Instruction.ARITH\"",
        "\"Exit with Error in line \"",
        "'LINE'",
        "'X'"
    ],
    "variables": [
        "instList",
        "aluList",
        "aluList_s",
        "aluList_op",
        "arithList",
        "condList",
        "Param_List",
        "Alias_List",
        "regex",
        "INFO",
        "WARNING",
        "ERROR",
        "__STATUS",
        "filename",
        "f",
        "level",
        "Logger",
        "level",
        "Logger",
        "filename",
        "msg",
        "msg_log",
        "match",
        "match",
        "assembler_code",
        "key_list",
        "val_list",
        "address",
        "PADDR",
        "label",
        "label",
        "assembler_code",
        "command",
        "command",
        "parsed_file",
        "comment",
        "line",
        "program_list",
        "label_dict",
        "x",
        "parsed_asm",
        "comment",
        "line",
        "program_list",
        "label_dict",
        "label_line_idxs",
        "label_dict",
        "error",
        "mem_addr",
        "label",
        "directive",
        "instruction",
        "error",
        "error",
        "label_dict",
        "label",
        "directives",
        "Name",
        "RegEx",
        "Register",
        "comp_PARAM",
        "alias_reg",
        "error",
        "directives",
        "Name",
        "RegEx",
        "Value",
        "comp_PARAM",
        "cons_val",
        "error",
        "error",
        "show_info",
        "show_info",
        "program_list",
        "error",
        "mem_addr",
        "command_info",
        "instruction",
        "directive",
        "command_info",
        "command_info",
        "LIT",
        "error",
        "CHANGE",
        "command",
        "command_info",
        "PARAM",
        "error",
        "command_info",
        "key",
        "aux",
        "command",
        "CMD_DEST_SOURCE",
        "command_info",
        "command_info",
        "error",
        "error",
        "command_info",
        "error",
        "error",
        "error",
        "error",
        "error",
        "CMD_DEST_SOURCE",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "error",
        "command_info",
        "command_info",
        "command_info",
        "error",
        "error",
        "error",
        "error",
        "command_info",
        "command_info",
        "error",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "error",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "error",
        "command_info",
        "command_info",
        "error",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "command_info",
        "error",
        "error",
        "command_info",
        "command_info",
        "error",
        "command_info",
        "error",
        "command_info",
        "command_info",
        "error",
        "command_info",
        "command_info",
        "error",
        "mem_addr",
        "command_info",
        "command_info",
        "error",
        "error",
        "error",
        "error",
        "error",
        "label_dict",
        "error",
        "program_list",
        "command",
        "command",
        "binary_program_list",
        "error",
        "CODE",
        "command",
        "CODE",
        "error",
        "CODE",
        "error",
        "CODE",
        "error",
        "CODE",
        "error",
        "CODE",
        "command",
        "command",
        "command",
        "command",
        "error",
        "CODE",
        "command",
        "error",
        "CODE",
        "error",
        "CODE",
        "error",
        "CODE",
        "error",
        "CODE",
        "error",
        "CODE",
        "error",
        "CODE",
        "command",
        "error",
        "CODE",
        "error",
        "CODE",
        "error",
        "CODE",
        "error",
        "CODE",
        "error",
        "CODE",
        "error",
        "CODE",
        "error",
        "error",
        "length",
        "error",
        "binary_array",
        "tmp",
        "b0",
        "n0",
        "b1",
        "n1",
        "b2",
        "n2",
        "binary_line",
        "program_list",
        "label_dict",
        "binary_program_list",
        "binary_program_list",
        "program_list",
        "label_dict",
        "binary_program_list",
        "binary_program_list",
        "minv",
        "maxv",
        "m",
        "dec",
        "fmt",
        "binv",
        "dec",
        "dec",
        "fmt",
        "binv",
        "error",
        "REG",
        "REG",
        "reg_addr",
        "reg_addr",
        "reg_addr",
        "reg_addr",
        "reg_addr",
        "reg_addr",
        "reg_addr",
        "error",
        "reg_addr",
        "error",
        "error",
        "cond",
        "cond",
        "error",
        "cond",
        "error",
        "RD",
        "Rdi",
        "Wr",
        "Wr",
        "regex_inside_parenthesis",
        "DEST_SOURCE",
        "Rdi",
        "error",
        "Rdi",
        "error",
        "error",
        "error",
        "error",
        "RD",
        "error",
        "Wp",
        "Sp",
        "Dp",
        "Wp",
        "Dp",
        "Sp",
        "Sp",
        "error",
        "error",
        "error",
        "df",
        "alu_op",
        "rsD0",
        "rsD1",
        "DataImm",
        "FULL",
        "error",
        "comp_OP_PARAM",
        "param_op",
        "DataImm",
        "rsD1",
        "df",
        "rsD1",
        "DataImm",
        "DataImm",
        "alu_op",
        "alu_op",
        "rsD0",
        "rsD0",
        "rsD0",
        "error",
        "error",
        "operation",
        "df",
        "alu_op",
        "DataImm",
        "rsD0",
        "rsD0",
        "rsD0",
        "error",
        "error",
        "error",
        "df",
        "rsD1",
        "rsD0",
        "DataImm",
        "rsD0",
        "rsD0",
        "rsD0",
        "error",
        "error",
        "error",
        "df",
        "DataImm",
        "DataImm",
        "df",
        "rsD1",
        "df",
        "rsD1",
        "df",
        "rsD1",
        "df",
        "DataImm",
        "df",
        "literal",
        "DataImm",
        "error",
        "operation",
        "alu_op",
        "error",
        "alu_op",
        "error",
        "df",
        "alu_op",
        "DataImm",
        "df",
        "alu_op",
        "DataImm",
        "Data_Source",
        "error",
        "AI",
        "RsF",
        "RsE",
        "comp_ADDR_FMT",
        "param_op",
        "RsE",
        "RsF",
        "RsF",
        "AI",
        "error",
        "RsE",
        "error",
        "RsF",
        "RsF",
        "AI",
        "error",
        "error",
        "AI",
        "error",
        "RdP",
        "error",
        "COND",
        "error",
        "DATA",
        "alu_op",
        "DF",
        "CFG",
        "ADDR",
        "error",
        "error",
        "DATA",
        "alu_op",
        "DF",
        "CFG",
        "ADDR",
        "error",
        "comp_addr",
        "address",
        "ADDR",
        "DATA",
        "DF",
        "CFG",
        "error",
        "error",
        "DATA",
        "alu_op",
        "DF",
        "CFG",
        "error",
        "RsF",
        "RsE",
        "AI",
        "ADDR",
        "CFG",
        "error",
        "WW",
        "WP",
        "WW",
        "error",
        "WP",
        "Sp",
        "RdP",
        "COND",
        "Wr",
        "Rdi",
        "error",
        "Wr",
        "Rdi",
        "RD",
        "error",
        "DATA",
        "alu_op",
        "DF",
        "error",
        "RsF",
        "RsE",
        "AI",
        "error",
        "ADDR",
        "error",
        "error",
        "error",
        "comp_OP_PARAM",
        "RD",
        "error",
        "RD",
        "RD",
        "RD",
        "Wr",
        "Rdi",
        "error",
        "Wr",
        "Rdi",
        "RD",
        "CFG",
        "error",
        "error",
        "CODE",
        "CODE",
        "error",
        "COND",
        "error",
        "COND",
        "Wr",
        "Rdi",
        "error",
        "Wr",
        "Rdi",
        "RD",
        "error",
        "DATA",
        "alu_op",
        "DF",
        "error",
        "RsF",
        "RsE",
        "AI",
        "ADDR",
        "DI",
        "error",
        "DI",
        "error",
        "error",
        "CFG",
        "CODE",
        "CODE",
        "error",
        "AI",
        "Wp",
        "TI",
        "error",
        "RsF",
        "RsE",
        "AI",
        "error",
        "error",
        "Wr",
        "Rdi",
        "error",
        "Wr",
        "Rdi",
        "RD",
        "error",
        "Wp",
        "Sp",
        "Dp",
        "error",
        "DATA",
        "alu_op",
        "DF",
        "TI",
        "DATA",
        "CFG",
        "CODE",
        "error",
        "CODE",
        "error",
        "AI",
        "SO",
        "TO",
        "ADDR",
        "COND",
        "error",
        "COND",
        "Wr",
        "Rdi",
        "error",
        "Wr",
        "Rdi",
        "RD",
        "error",
        "DATA",
        "alu_op",
        "DF",
        "CFG",
        "CODE",
        "CODE",
        "error",
        "COND",
        "error",
        "COND",
        "Wr",
        "Rdi",
        "error",
        "Wr",
        "Rdi",
        "RD",
        "error",
        "DATA",
        "alu_op",
        "DF",
        "current",
        "AI",
        "ADDR",
        "comp_addr",
        "addr",
        "ADDR",
        "AI",
        "ADDR",
        "AI",
        "error",
        "error",
        "CFG",
        "CODE",
        "CODE",
        "error",
        "SO",
        "AI",
        "Ww",
        "PS",
        "RsF",
        "Wr",
        "Rdi",
        "error",
        "Wr",
        "Rdi",
        "RD",
        "error",
        "DATA",
        "alu_op",
        "DF",
        "Wp",
        "AI",
        "PS",
        "RsF",
        "current",
        "Wp",
        "AI",
        "PS",
        "RsF",
        "current",
        "error",
        "Wp",
        "AI",
        "PS",
        "RsF",
        "error",
        "AI",
        "PS",
        "comp_REG_FMT",
        "param_op",
        "RsF",
        "error",
        "error",
        "error",
        "TO",
        "Wp",
        "AI",
        "Ww",
        "PS",
        "SO",
        "Wp",
        "PS",
        "error",
        "RsF",
        "RsE",
        "AI",
        "error",
        "error",
        "PS",
        "Ww",
        "error",
        "RsF",
        "RsE",
        "AI",
        "error",
        "error",
        "Ww",
        "RsF",
        "error",
        "DF",
        "TO",
        "DF",
        "DATA",
        "CFG",
        "RD",
        "error",
        "TO",
        "error",
        "Wr",
        "Rdi",
        "error",
        "Wr",
        "Rdi",
        "RD",
        "error",
        "DATA",
        "alu_op",
        "DF",
        "CFG",
        "RsE",
        "error",
        "COND",
        "ADDR",
        "CODE",
        "CODE",
        "error",
        "RA0",
        "RA1",
        "RD0",
        "RD1",
        "RE",
        "DF",
        "CTRL",
        "OPERATION",
        "OPERATION",
        "OPERATION",
        "OPERATION",
        "OPERATION",
        "error",
        "DF",
        "RD1",
        "RE",
        "error",
        "RD1",
        "error",
        "CTRL",
        "OPERATION",
        "OPERATION",
        "error",
        "CTRL",
        "OPERATION",
        "error",
        "RD0",
        "comp_den",
        "den",
        "DF",
        "RD1",
        "RE",
        "error",
        "RD1",
        "error",
        "CTRL",
        "OPERATION",
        "OPERATION",
        "OPERATION",
        "OPERATION",
        "OPERATION",
        "OPERATION",
        "error",
        "CTRL",
        "OPERATION",
        "error",
        "error",
        "RsA",
        "error",
        "RsD",
        "error",
        "RsB",
        "error",
        "RsC",
        "error",
        "CODE",
        "CODE",
        "error",
        "RsC",
        "RsD",
        "error",
        "error",
        "ARITH_OP",
        "error",
        "RsA",
        "error",
        "RsB",
        "error",
        "error",
        "RsA",
        "error",
        "RsB",
        "error",
        "RsC",
        "error",
        "error",
        "RsA",
        "error",
        "RsB",
        "error",
        "RsC",
        "error",
        "error",
        "RsA",
        "error",
        "RsD",
        "error",
        "RsB",
        "error",
        "error",
        "RsA",
        "error",
        "RsD",
        "error",
        "RsB",
        "error",
        "RsC",
        "error",
        "error",
        "RsA",
        "error",
        "RsD",
        "error",
        "RsB",
        "error",
        "RsC",
        "error",
        "error",
        "CODE",
        "CODE"
    ],
    "comments": [
        "DEFINITIONS",
        "",
        "Instructions.",
        "ALU OPERATIONS",
        "List with Commands for -op()",
        "List with Commands with one parameter",
        "A*B",
        "A*B+C",
        "A*B-C",
        "(A+D)*B",
        "(A+D)*B+C",
        "(A+D)*B-C",
        "CONDITIONALS",
        "REGULAR EXPRESSIONS",
        "",
        "LIT SHOULD BE LAST",
        "'COMMENT'   : {'RegEx' : r'//(.*)'                       , 'RL': '//'       , 'RR': ''   },",
        "'REG'       : {'RegEx' : r'-reg\\(([a-z\\s0-9]*)\\)'        , 'RL': '-reg('    , 'RR': ')'  },",
        "CUSTOM LOGGER ###",
        "__STATUS = [Logger.__dict__]",
        "set correct instruction address in memory.",
        "LABEL in the Correct Line",
        "ADD Address to commands with LABEL",
        "print('Label <'+command['LABEL'] +'> changed by address '+command['ADDR'])",
        "register 15 predefinition.",
        "address 0 goes NOP",
        "Check if LABEL< DIRETIVE OR INSTRUCTION",
        "add label to label_dict if not already registered.",
        "identify Aliases and adds them to Alias_List.",
        "comp_PARAM = r'(?<=#)[0-9]+'",
        "Identify instructions to correctly set addresses.",
        "CHECK for Literal Values",
        "",
        "CHANGE ALIAS",
        "",
        "Extract PARAMETERS",
        "",
        "Stores Line Number for ERROR Messages",
        "COMMANDS PARAMETERS CHECK",
        "",
        "",
        "LITERAL CHECK",
        "",
        "else:",
        "command_info['UF'] = '0'",
        "",
        "if (CMD_DEST_SOURCE[0] == 'REG_WR'):",
        "if ( 'WR' in command_info  ):",
        "if (command_info['DST'] != 'r_wave'):",
        "error = Logger.error(\"COMMAND_RECOGNITION\", \"No <-wr()> allowed when Writting Data Register in Line \" + str(line_number))",
        "",
        "",
        "",
        "",
        "GET COMMAND DESTINATION SOURCE",
        "",
        "MORE THAN ONE SOURCE",
        "ONE SOURCE",
        "NO SOURCE OR -- SOURCE IN EXTRACTED PARAMETER",
        "command_info.pop('ADDR')",
        "DST is ADDR",
        "NO DESTINATION OR -- DESTINATION / SOURCE IN EXTRACTED PARAMETER",
        "ADD CMD TO PROGRAM",
        "",
        "START ASSEMBLER TO LIST",
        "first line is NOP",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "Check if hex string.",
        "Special case for hex number.",
        "Convert to binary.",
        "Check max.",
        "Check max.",
        "Check if number is negative.",
        "Convert to binary.",
        "is R_Reg",
        "is S_Reg",
        "is W_Reg",
        "is Data Register",
        "is Special Register",
        "is WaveForm Register",
        "is R_Reg",
        "is S_Reg or W_Reg",
        "",
        "BASIC COMANDS",
        "",
        "PROCESSING",
        "Get WR",
        "SOURCE",
        "DESTINATION REGISTER",
        "WRITE PORT",
        "DESTINATION PORT",
        "COPY REG",
        "CHECK FOR ONLY OPERAND (COPY REG) (ADD S0)",
        "is R_Reg",
        "is S_Reg",
        "is W_Reg",
        "is Decimal or Binary",
        "ALU LIST ONE PARAMETER",
        "CHECK FOR OPERAND (ALU_IN_A > rsD)",
        "is R_Reg",
        "is S_Reg",
        "is W_Reg",
        "is Decimal or Binary",
        "ABS Should be on rsD1",
        "CHECK FOR FIRST OPERAND (ALU_IN_A > rsD)",
        "is R_Reg",
        "is S_Reg",
        "is W_Reg",
        "is Decimal or Binary",
        "CHECK FOR SECOND OPERAND (ALU_IN_B > Imm|rsC)",
        "REG OP REG",
        "is R_Reg",
        "is S_Reg",
        "is W_Reg",
        "is Decimal",
        "is Binary",
        "CHECK FOR OPERATION",
        "LITERAL and NO OP",
        "CHECK FOR OPERAND",
        "is R_Reg",
        "is Literal",
        "CHECK FOR FIRST OPERAND",
        "is R_Reg",
        "is Literal",
        "CHECK FOR SECOND OPERAND",
        "is R_Reg",
        "is Literal",
        "CHECK FOR PLUS",
        "is R_Reg",
        "INSTRUCTIONS",
        "CONDITIONAL",
        "SOURCES",
        "SOURCE ALU",
        "17 Bits 11 + 6",
        "SOURCE IMM",
        "Get Data Source",
        "17 Bits 11 + 6",
        "SOURCE LABEL",
        "Get Data Source",
        "LITERAL",
        "17 Bits 11 + 6",
        "SOURCE DATA MEMORY",
        "Get Data Source",
        "Get ADDRESS",
        "SOURCE WAVE MEM",
        "WRITE PORT",
        "WRITE REGISTER",
        "Get Data Source",
        "Get ADDRESS",
        "DESTINATION REGISTER",
        "CONDITIONAL",
        "WRITE REGISTER",
        "DATA SOURCE",
        "ADDRESS",
        "SOURCE",
        "WMEM ADDRESS",
        "WRITE REGISTER",
        "WRITE PORT",
        "DATA SOURCE",
        "CONDITIONAL",
        "WRITE REGISTER",
        "DATA SOURCE",
        "CONDITIONAL",
        "WRITE REGISTER",
        "DATA SOURCE",
        "DESTINATION MEMORY ADDRESS",
        "RET Instruction. ADDR came from STACK",
        "addr?",
        "LITERAL",
        "REGISTER",
        "WRITE REGISTER",
        "DATA SOURCE",
        "DPORT_RD",
        "SOURCE",
        "WRITE WAVE MEMORY",
        "OUT TIME",
        "WRITE REGISTER",
        "DATA SOURCE",
        "OUT PORT",
        "TO UPDATE CODE HERE. NOT LAST VERSION",
        "TIME",
        "FLAG",
        "DIVISION",
        "LITERAL",
        "REGISTER",
        "NET",
        "QNET ADDRESS",
        "CUSTOM",
        "CUSTOM PERIPHERAL",
        "A*B",
        "A*B+C",
        "A*B-C",
        "(A+D)*B",
        "(A+D)*B+C",
        "(A+D)*B-C"
    ],
    "docstrings": [
        "\"\"\"\nAssembler for Qick Time Processor QTP\n\n###################################\n###      UNDER DEVELOPMENT      ###\n###################################\n\"\"\"",
        "\"\"\"\n            translates a program list to assembly.\n            \n            :program_list (list): each element is a dictionary with all the commands and instructions.\n            :label_dict (dictionary): dictionary with all labels information found. ({'P_ADDR': 0,'LINE': 0, 'ADDR': 0})\n            :returns (str): assembly as a string.\n        \"\"\"",
        "\"\"\"\n                processes one command from program list and adds adds it to the assembler string as an instruction.\n                \n                :assembler (str): assembler instructions as a string\n                :command (dict): current instruction from program_list to add in assembler\n                :p_addr (int): program address of the command in memory. // p_addr stands for program address.\n                :returns (str): returns the assembler with extra information\n            \"\"\"",
        "\"\"\"\n            takes in a filename to open it and remove all comments.\n            returns it as a list of strings containing each line parsed.\n            \n            :filename (str): file to open and parse\n            :returns (list): list with all lines of the original file stripped except comments (//).\n        \"\"\"",
        "\"\"\"\n            opens file with assembler and returns the program instructions as a list of dictionaries.\n            :filename (str): file containing ASM.\n            :returns (tuple): (program_list, label_dict)\n            :program_list (list): program instructions as a list of dictionaries.\n            :label_dict (dict): dictionary with all labels found plus their memory address in program memory. ({'LABEL': '&0'})\n        \"\"\"",
        "\"\"\"\n                gets and returns all labels from file.\n                IMPORTANT: This function updates 'Alias_List'.\n                \n                :file_lines (list): file as a list of strings, each element represents a new line. (should be stripped)\n                :returns (tuple): (error, label_dictionary)\n                :error (int): if function succeeds error is 0, else it is nonzero.\n                :label_dictionary (dict): dictionary with all labels found plus their memory address in program memory. ({'LABEL': '&0'})\n            \"\"\"",
        "\"\"\"\n                gets and returns all commands from file.\n                IMPORTANT: Uses 'Alias_List', 'Param_List'.\n                \n                :file_lines (list): file as a list of strings, each element represents a new line. (should be stripped)\n                :label_dict (dict): dictionary with all labels found plus their memory address in program memory. ({'LABEL': '&0'}). see ' label_recognition() '\n                :returns (tuple): (error, program_list)\n                :error (int): if function succeeds error is 0, else it is nonzero.\n                :program_list (list): program instructions as a list of dictionaries.\n                \n            \"\"\"",
        "\"\"\"\n            translates a program list to binary form.\n            :program_list (list): each element is a dictionary with all the commands and instructions. see ' asm2list() '\n            :label_dict (dict): dictionary with label information only if program_list contains labels.\n            :save_unparsed_filename (str): if not null, opens this file and saves unparsed binary ('_' not removed).\n            :returns (tuple): (error, binary_program)\n            :error (int):  if function succeeds error is 0, else it is nonzero.\n            :binary_program_list (list): each element is a string with 0s and 1s representing the binary program\n        \"\"\"",
        "\"\"\"  opens file with assembler and returns the binary\n        \n        :filename (str): file containing ASM.\n        :save_unparsed_filename (str): if not null, opens this file and saves unparsed binary ('_' not removed).\n        \n        \"\"\"",
        "\"\"\"  get STR with assembler and returns the binary\n        \n        :asm_str (str): string ASM.\n        :save_unparsed_filename (str): if not null, opens this file and saves unparsed binary ('_' not removed).\n        \n        \"\"\"",
        "\"\"\"\n        receives an integer in str format and returns their bits as a string.\n        \n    :strin (str): string with an integer\n    :bits (int): number of bits to return\n    :returns (str): bits as a string\n    \"\"\"",
        "\"\"\"\n    :returns (tuple): (error, register_address).\n    \"\"\""
    ],
    "functions": [
        "setLevel",
        "setFile",
        "log",
        "info",
        "warning",
        "error",
        "__show_message__",
        "save",
        "find_pattern",
        "list2asm",
        "process_command",
        "file_asm2list",
        "str_asm2list",
        "get_list",
        "label_recognition",
        "command_recognition",
        "list2bin",
        "parse_lines_and_labels",
        "file_asm2bin",
        "str_asm2bin",
        "integer2bin",
        "get_reg_addr",
        "__PROCESS_CONDITION",
        "__PROCESS_WR",
        "__PROCESS_WP",
        "__PROCESS_SOURCE",
        "__PROCESS_MEM_ADDR",
        "REG_WR",
        "DMEM_WR",
        "WMEM_WR",
        "CFG",
        "BRANCH",
        "PORT_WR",
        "CTRL",
        "ARITH"
    ],
    "classes": [
        "Logger",
        "Assembler",
        "Instruction"
    ]
}