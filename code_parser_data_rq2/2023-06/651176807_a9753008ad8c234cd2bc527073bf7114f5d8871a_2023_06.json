{
    "identifiers": [
        "root",
        "factory",
        "define",
        "define",
        "define",
        "factory",
        "exports",
        "exports",
        "factory",
        "exports",
        "factory",
        "exp",
        "root",
        "exp",
        "exports",
        "cooked",
        "raw",
        "cooked",
        "raw",
        "cooked",
        "raw",
        "cooked",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "PacketKind",
        "AnsiUp",
        "arg",
        "arg",
        "AnsiUp",
        "arg",
        "arg",
        "AnsiUp",
        "arg",
        "arg",
        "AnsiUp",
        "palette",
        "palette",
        "rec",
        "_this",
        "rec",
        "r",
        "r",
        "g",
        "g",
        "b",
        "b",
        "levels",
        "r",
        "levels",
        "g",
        "levels",
        "b",
        "col",
        "i",
        "i",
        "grey_level",
        "grey_level",
        "grey_level",
        "grey_level",
        "gry",
        "AnsiUp",
        "txt",
        "txt",
        "AnsiUp",
        "txt",
        "txt",
        "AnsiUp",
        "PacketKind",
        "len",
        "pkt",
        "pos",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "pos",
        "pkt",
        "PacketKind",
        "pkt",
        "pos",
        "pos",
        "pkt",
        "pos",
        "len",
        "pkt",
        "PacketKind",
        "pkt",
        "next_char",
        "next_char",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "next_char",
        "rgx",
        "__makeTemplateObject",
        "match",
        "pkt",
        "PacketKind",
        "pkt",
        "match",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "match",
        "match",
        "pkt",
        "PacketKind",
        "pkt",
        "PacketKind",
        "pkt",
        "match",
        "match",
        "rpos",
        "pkt",
        "next_char",
        "len",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "rgxG",
        "__makeTemplateObject",
        "match_1",
        "pkt",
        "PacketKind",
        "pkt",
        "match_1",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "match_2",
        "pkt",
        "PacketKind",
        "pkt",
        "match_2",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "rgx",
        "__makeTemplateObject",
        "match",
        "pkt",
        "PacketKind",
        "pkt",
        "pkt",
        "pkt",
        "PacketKind",
        "pkt",
        "match",
        "pkt",
        "match",
        "match",
        "rpos",
        "pkt",
        "AnsiUp",
        "txt",
        "txt",
        "packet",
        "PacketKind",
        "packet",
        "PacketKind",
        "packet",
        "PacketKind",
        "packet",
        "PacketKind",
        "packet",
        "PacketKind",
        "blocks",
        "packet",
        "packet",
        "PacketKind",
        "packet",
        "packet",
        "PacketKind",
        "blocks",
        "packet",
        "blocks",
        "AnsiUp",
        "pkt",
        "pkt",
        "AnsiUp",
        "pkt",
        "pkt",
        "sgr_cmds",
        "sgr_cmds",
        "parseInt",
        "sgr_cmd_str",
        "isNaN",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "num",
        "sgr_cmds",
        "num",
        "sgr_cmds",
        "mode_cmd",
        "sgr_cmds",
        "parseInt",
        "sgr_cmds",
        "palette_index",
        "palette_index",
        "is_foreground",
        "palette_index",
        "palette_index",
        "mode_cmd",
        "sgr_cmds",
        "parseInt",
        "sgr_cmds",
        "parseInt",
        "sgr_cmds",
        "parseInt",
        "sgr_cmds",
        "r",
        "r",
        "g",
        "g",
        "b",
        "b",
        "r",
        "g",
        "b",
        "is_foreground",
        "c",
        "c",
        "AnsiUp",
        "fragment",
        "fragment",
        "txt",
        "txt",
        "txt",
        "txt",
        "fragment",
        "fragment",
        "fragment",
        "txt",
        "fragment",
        "fragment",
        "fragment",
        "styles",
        "fg",
        "styles",
        "fg",
        "bg",
        "styles",
        "bg",
        "fg",
        "fg",
        "classes",
        "fg",
        "styles",
        "fg",
        "bg",
        "bg",
        "classes",
        "bg",
        "styles",
        "bg",
        "classes",
        "class_string",
        "classes",
        "styles",
        "style_string",
        "styles",
        "style_string",
        "class_string",
        "txt",
        "AnsiUp",
        "pkt",
        "pkt",
        "parts",
        "parts",
        "pkt",
        "pkt",
        "result",
        "AnsiUp",
        "tmplObj",
        "_i",
        "arguments",
        "_i",
        "subst",
        "_i",
        "arguments",
        "_i",
        "tmplObj",
        "regexText",
        "wsrgx",
        "txt2",
        "tmplObj",
        "_i",
        "arguments",
        "_i",
        "subst",
        "_i",
        "arguments",
        "_i",
        "tmplObj",
        "regexText",
        "wsrgx",
        "txt2",
        "exports",
        "exports",
        "AnsiUp"
    ],
    "literals": [
        "'function'",
        "'exports'",
        "'object'",
        "'string'",
        "\"use strict\"",
        "\"raw\"",
        "\"EOS\"",
        "\"EOS\"",
        "\"Text\"",
        "\"Text\"",
        "\"Incomplete\"",
        "\"Incomplete\"",
        "\"ESC\"",
        "\"ESC\"",
        "\"Unknown\"",
        "\"Unknown\"",
        "\"SGR\"",
        "\"SGR\"",
        "\"OSCURL\"",
        "\"OSCURL\"",
        "\"4.0.3\"",
        "''",
        "'http'",
        "'https'",
        "\"use_classes\"",
        "\"escape_for_html\"",
        "\"url_whitelist\"",
        "\"ansi-black\"",
        "\"ansi-red\"",
        "\"ansi-green\"",
        "\"ansi-yellow\"",
        "\"ansi-blue\"",
        "\"ansi-magenta\"",
        "\"ansi-cyan\"",
        "\"ansi-white\"",
        "\"ansi-bright-black\"",
        "\"ansi-bright-red\"",
        "\"ansi-bright-green\"",
        "\"ansi-bright-yellow\"",
        "\"ansi-bright-blue\"",
        "\"ansi-bright-magenta\"",
        "\"ansi-bright-cyan\"",
        "\"ansi-bright-white\"",
        "'truecolor'",
        "'truecolor'",
        "\"&\"",
        "\"&amp;\"",
        "\"<\"",
        "\"&lt;\"",
        "\">\"",
        "\"&gt;\"",
        "''",
        "''",
        "\"\\x1B\"",
        "''",
        "'['",
        "']'",
        "'['",
        "\"\\n                        ^                           # beginning of line\\n                                                    #\\n                                                    # First attempt\\n                        (?:                         # legal sequence\\n                          \\u001B[                      # CSI\\n                          ([<-?]?)              # private-mode char\\n                          ([d;]*)                    # any digits or semicolons\\n                          ([ -/]?               # an intermediate modifier\\n                          [@-~])                # the command\\n                        )\\n                        |                           # alternate (second attempt)\\n                        (?:                         # illegal sequence\\n                          \\u001B[                      # CSI\\n                          [ -~]*                # anything legal\\n                          ([\\0-\\u001F:])              # anything illegal\\n                        )\\n                    \"",
        "\"\\n                        ^                           # beginning of line\\n                                                    #\\n                                                    # First attempt\\n                        (?:                         # legal sequence\\n                          \\\\x1b\\\\[                      # CSI\\n                          ([\\\\x3c-\\\\x3f]?)              # private-mode char\\n                          ([\\\\d;]*)                    # any digits or semicolons\\n                          ([\\\\x20-\\\\x2f]?               # an intermediate modifier\\n                          [\\\\x40-\\\\x7e])                # the command\\n                        )\\n                        |                           # alternate (second attempt)\\n                        (?:                         # illegal sequence\\n                          \\\\x1b\\\\[                      # CSI\\n                          [\\\\x20-\\\\x7e]*                # anything legal\\n                          ([\\\\x00-\\\\x1f:])              # anything illegal\\n                        )\\n                    \"",
        "''",
        "'m'",
        "']'",
        "'8'",
        "';'",
        "\"\\n                        (?:                         # legal sequence\\n                          (\\u001B\\\\)                    # ESC                           |                           # alternate\\n                          (\\u0007)                      # BEL (what xterm did)\\n                        )\\n                        |                           # alternate (second attempt)\\n                        (                           # illegal sequence\\n                          [\\0-\\u0006]                 # anything illegal\\n                          |                           # alternate\\n                          [\\b-\\u001A]                 # anything illegal\\n                          |                           # alternate\\n                          [\\u001C-\\u001F]                 # anything illegal\\n                        )\\n                    \"",
        "\"\\n                        (?:                         # legal sequence\\n                          (\\\\x1b\\\\\\\\)                    # ESC \\\\\\n                          |                           # alternate\\n                          (\\\\x07)                      # BEL (what xterm did)\\n                        )\\n                        |                           # alternate (second attempt)\\n                        (                           # illegal sequence\\n                          [\\\\x00-\\\\x06]                 # anything illegal\\n                          |                           # alternate\\n                          [\\\\x08-\\\\x1a]                 # anything illegal\\n                          |                           # alternate\\n                          [\\\\x1c-\\\\x1f]                 # anything illegal\\n                        )\\n                    \"",
        "\"\\n                        ^                           # beginning of line\\n                                                    #\\n                        \\u001B]8;                    # OSC Hyperlink\\n                        [ -:<-~]*       # params (excluding ;)\\n                        ;                           # end of params\\n                        ([!-~]{0,512})        # URL capture\\n                        (?:                         # ST\\n                          (?:\\u001B\\\\)                  # ESC                           |                           # alternate\\n                          (?:\\u0007)                    # BEL (what xterm did)\\n                        )\\n                        ([!-~]+)              # TEXT capture\\n                        \\u001B]8;;                   # OSC Hyperlink End\\n                        (?:                         # ST\\n                          (?:\\u001B\\\\)                  # ESC                           |                           # alternate\\n                          (?:\\u0007)                    # BEL (what xterm did)\\n                        )\\n                    \"",
        "\"\\n                        ^                           # beginning of line\\n                                                    #\\n                        \\\\x1b\\\\]8;                    # OSC Hyperlink\\n                        [\\\\x20-\\\\x3a\\\\x3c-\\\\x7e]*       # params (excluding ;)\\n                        ;                           # end of params\\n                        ([\\\\x21-\\\\x7e]{0,512})        # URL capture\\n                        (?:                         # ST\\n                          (?:\\\\x1b\\\\\\\\)                  # ESC \\\\\\n                          |                           # alternate\\n                          (?:\\\\x07)                    # BEL (what xterm did)\\n                        )\\n                        ([\\\\x21-\\\\x7e]+)              # TEXT capture\\n                        \\\\x1b\\\\]8;;                   # OSC Hyperlink End\\n                        (?:                         # ST\\n                          (?:\\\\x1b\\\\\\\\)                  # ESC \\\\\\n                          |                           # alternate\\n                          (?:\\\\x07)                    # BEL (what xterm did)\\n                        )\\n                    \"",
        "\"\"",
        "';'",
        "'5'",
        "'2'",
        "'truecolor'",
        "'font-weight:bold'",
        "\"color:rgb(\"",
        "','",
        "\")\"",
        "\"background-color:rgb(\"",
        "\")\"",
        "'truecolor'",
        "\"-fg\"",
        "\"color:rgb(\"",
        "','",
        "\")\"",
        "'truecolor'",
        "\"-bg\"",
        "\"background-color:rgb(\"",
        "','",
        "\")\"",
        "''",
        "''",
        "\" class=\\\"\"",
        "' '",
        "\"\\\"\"",
        "\" style=\\\"\"",
        "';'",
        "\"\\\"\"",
        "\"<span\"",
        "\">\"",
        "\"</span>\"",
        "':'",
        "''",
        "''",
        "\"<a href=\\\"\"",
        "\"\\\">\"",
        "\"</a>\"",
        "''",
        "''",
        "'g'",
        "\"__esModule\""
    ],
    "variables": [
        "exp",
        "__makeTemplateObject",
        "PacketKind",
        "AnsiUp",
        "_this",
        "levels",
        "r",
        "g",
        "b",
        "col",
        "grey_level",
        "i",
        "gry",
        "pkt",
        "len",
        "pos",
        "next_char",
        "match",
        "rpos",
        "match_1",
        "match_2",
        "match",
        "rpos",
        "blocks",
        "packet",
        "sgr_cmds",
        "sgr_cmd_str",
        "num",
        "is_foreground",
        "mode_cmd",
        "palette_index",
        "r",
        "g",
        "b",
        "c",
        "txt",
        "styles",
        "classes",
        "fg",
        "bg",
        "class_string",
        "style_string",
        "parts",
        "result",
        "subst",
        "_i",
        "regexText",
        "wsrgx",
        "txt2",
        "subst",
        "_i",
        "regexText",
        "wsrgx",
        "txt2"
    ],
    "comments": [
        "ansi_up.js\n *  author : Dru Nelson\n *  license : MIT\n *  http://github.com/drudru/ansi_up",
        "AMD. Register as an anonymous module.",
        "CommonJS",
        "Browser globals",
        "# sourceMappingURL=ansi_up.js.map"
    ],
    "docstrings": [],
    "functions": [
        "AnsiUp",
        "rgx",
        "rgxG"
    ],
    "classes": []
}