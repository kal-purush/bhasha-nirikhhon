{
    "identifiers": [
        "require",
        "require",
        "require",
        "RESSEND",
        "res",
        "e",
        "res",
        "e",
        "refererOrigin",
        "req",
        "res",
        "req",
        "origin",
        "origin",
        "req",
        "origin",
        "allowOriginType",
        "origin",
        "res",
        "res",
        "origin",
        "res",
        "res",
        "res",
        "res",
        "goAhead",
        "preflight",
        "req",
        "res",
        "req",
        "app",
        "cors",
        "allowedOrigins",
        "req",
        "req",
        "RESSEND",
        "res",
        "req",
        "allowOriginType",
        "req",
        "res",
        "RESSEND",
        "res",
        "res",
        "RESSEND",
        "res",
        "standardCatch",
        "res",
        "e",
        "extra",
        "name",
        "RESSEND",
        "res",
        "e",
        "require",
        "require",
        "require",
        "express",
        "express",
        "express",
        "express",
        "express",
        "express",
        "express",
        "require",
        "require",
        "process",
        "app",
        "timeout",
        "process",
        "exitHandler",
        "process",
        "exitHandler",
        "process",
        "exitHandler",
        "express",
        "req",
        "res",
        "res",
        "preflight",
        "app",
        "express",
        "app",
        "express",
        "attach",
        "req",
        "res",
        "refererOrigin",
        "req",
        "res",
        "req",
        "allowOriginType",
        "origin",
        "res",
        "RESSEND",
        "res",
        "OAuthClient",
        "process",
        "process",
        "origin",
        "oauthClient",
        "RESSEND",
        "res",
        "oauthClient",
        "OAuthClient",
        "authUri",
        "RESSEND",
        "res",
        "RESSEND",
        "res",
        "req",
        "res",
        "refererOrigin",
        "req",
        "res",
        "req",
        "allowOriginType",
        "origin",
        "res",
        "RESSEND",
        "res",
        "Configuration",
        "PlaidEnvironments",
        "process",
        "process",
        "PlaidApi",
        "configuration",
        "plaidClient",
        "process",
        "e",
        "standardCatch",
        "res",
        "e",
        "response",
        "RESSEND",
        "res",
        "RESSEND",
        "res",
        "response",
        "req",
        "res",
        "refererOrigin",
        "req",
        "res",
        "req",
        "allowOriginType",
        "origin",
        "res",
        "RESSEND",
        "res",
        "Configuration",
        "PlaidEnvironments",
        "process",
        "process",
        "PlaidApi",
        "configuration",
        "plaidClient",
        "req",
        "response",
        "plaidClient",
        "accounts_response",
        "accounts",
        "RESSEND",
        "res",
        "RESSEND",
        "res",
        "app",
        "attach",
        "app",
        "port",
        "port",
        "process",
        "exited",
        "exitCode",
        "exited",
        "exitCode",
        "exitCode",
        "exitCode",
        "exited",
        "process",
        "process",
        "exitHandler",
        "process",
        "exitHandler",
        "err",
        "req",
        "res",
        "next",
        "err",
        "app",
        "errorHandler"
    ],
    "literals": [
        "\"plaid\"",
        "\"dotenv\"",
        "\"intuit-oauth\"",
        "\"https://sausage.saltbank.org\"",
        "\"https://i7l8qe.csb.app\"",
        "\"https://vau.money\"",
        "\"https://jwi5k.csb.app\"",
        "\"https://se1dt7.csb.app\"",
        "\"Access-Control-Allow-Origin\"",
        "\"Access-Control-Allow-Methods\"",
        "\"POST\"",
        "\"OPTIONS\"",
        "\"GET\"",
        "\"Access-Control-Allow-Headers\"",
        "\"Content-Type\"",
        "\"Access-Control-Request-Method\"",
        "\"Access-Control-Request-Methods\"",
        "\"Access-Control-Request-Headers\"",
        "\"Allow\"",
        "\"POST\"",
        "\"OPTIONS\"",
        "\"GET\"",
        "\"Content-Type\"",
        "\"Application/JSON\"",
        "\"no access for this origin- \"",
        "\"not a secure origin-referer-to-host protocol\"",
        "\"no caught\"",
        "\"connect-timeout\"",
        "\"node-fetch\"",
        "\"express\"",
        "\"cors\"",
        "\"stripe\"",
        "\"5s\"",
        "\"SIGINT\"",
        "\"SIGUSR1\"",
        "\"SIGUSR2\"",
        "\"/\"",
        "\"shove it\"",
        "\"/*\"",
        "\"ok\"",
        "\"/quickbooks\"",
        "\"yet to surname factor digit counts..\"",
        "\"sandbox\"",
        "\"no go oauthClient new\"",
        "\"intuit-test\"",
        "\"no go authUri by oauth\"",
        "\"/link\"",
        "\"yet to surname factor digit counts..\"",
        "\"PLAID-CLIENT-ID\"",
        "\"PLAID-SECRET\"",
        "\"QuickNet\"",
        "\"auth\"",
        "\"transactions\"",
        "\"US\"",
        "\"en\"",
        "\"https://sample-web-hook.com\"",
        "\"https://quick.net.co\"",
        "\"checking\"",
        "\"savings\"",
        "\"setup intents (create callback)\"",
        "\"no go linkToken by plaidClient\"",
        "\"/plaid\"",
        "\"yet to surname factor digit counts..\"",
        "\"PLAID-CLIENT-ID\"",
        "\"PLAID-SECRET\"",
        "\"no go authUri by oauth\"",
        "localhost:${port}",
        "\"clean\"",
        "\"uncaughtException\"",
        "\"exit\"",
        "\"Oops\""
    ],
    "variables": [
        "PLAID",
        "PLAID",
        "OAuthClient",
        "port",
        "allowedOrigins",
        "RESSEND",
        "refererOrigin",
        "origin",
        "allowOriginType",
        "goAhead",
        "preflight",
        "origin",
        "standardCatch",
        "timeout",
        "fetch",
        "express",
        "app",
        "fill",
        "issue",
        "attach",
        "report",
        "disburse",
        "database",
        "cors",
        "stripe",
        "nonbody",
        "statusCode",
        "statusText",
        "origin",
        "oauthClient",
        "authUri",
        "origin",
        "configuration",
        "plaidClient",
        "response",
        "origin",
        "configuration",
        "plaidClient",
        "response",
        "access_token",
        "accounts_response",
        "accounts"
    ],
    "comments": [
        "Origin: <scheme>://<hostname>:<port>",
        "res.end();",
        "\"no newaccount made body\",  //...printObject(req) //: origin + \" \" + (storeId ? \"storeId\" : \"\")",
        "if (res.secure) return null;",
        "allowedOrigins[allowedOrigins.indexOf(origin)]",
        "if (!res.secure) return true;",
        "https://stackoverflow.com/questions/12027187/difference-between-allow-and-access-control-allow-methods-in-http-response-h",
        "https://stackoverflow.com/questions/36554375/getting-the-req-origin-in-express",
        "\"Cannot setHeader headers after they are sent to the client\"",
        "res.sendStatus(200);",
        "const printObject = (o) => Object.keys(o).map((x) => {return {[x]: !o[x] ? {} : o[x].constructor === Object ? printObject(o[x]) : o[x] };});",
        "FIREBASEADMIN = FIREBASEADMIN.toSource(); //https://dashboard.stripe.com/account/apikeys",
        "catches ctrl+c event",
        "catches \"kill pid\" (for example: nodemon restart)",
        "https://stackoverflow.com/questions/14031763/doing-a-cleanup-action-just-before-node-js-exits",
        "http://johnzhang.io/options-req-in-express",
        "var origin = req.get('origin');",
        "https://support.stripe.com/questions/know-your-customer-(kyc)-requirements-for-connected-accounts",
        "\"https://scopes.cc\"",
        "logging: true",
        "res.send(authUri);",
        "https://stackoverflow.com/questions/31928417/chaining-multiple-pieces-of-middleware-for-specific-route-in-expressjs",
        "methods on express.Router() or use a scoped instance",
        "so the program will not close instantly",
        "bind-only not during declaration",
        "bind declare (this,update) when listened on:"
    ],
    "docstrings": [],
    "functions": [
        "exitHandler",
        "errorHandler"
    ],
    "classes": []
}