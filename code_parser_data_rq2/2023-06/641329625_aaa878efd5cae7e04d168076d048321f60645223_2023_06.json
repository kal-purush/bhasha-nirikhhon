{
    "identifiers": [
        "executor",
        "resolve",
        "data",
        "FULFILLED",
        "data",
        "reject",
        "err",
        "REJECTED",
        "err",
        "executor",
        "resolve",
        "reject",
        "val",
        "val",
        "val",
        "val",
        "val",
        "func",
        "setTimeout",
        "func",
        "process",
        "process",
        "process",
        "func",
        "callback",
        "resolve",
        "reject",
        "callback",
        "callback",
        "callback",
        "FULFILLED",
        "resolve",
        "reject",
        "settled",
        "settled",
        "callback",
        "data",
        "data",
        "resolve",
        "reject",
        "resolve",
        "data",
        "err",
        "reject",
        "err",
        "PENDING",
        "FULFILLED",
        "onFulfilled",
        "resolve",
        "reject",
        "REJECTED",
        "onRejected",
        "resolve",
        "reject",
        "state",
        "result",
        "PENDING",
        "state",
        "result",
        "onFulfilled",
        "onRejected",
        "newPromise",
        "resolve",
        "reject"
    ],
    "literals": [
        "'pending'",
        "'fulfilled'",
        "'rejected'",
        "'pending'",
        "'object'",
        "'function'",
        "'function'",
        "'object'",
        "'function'",
        "'function'",
        "'+++++++++++++'"
    ],
    "variables": [
        "PENDING",
        "FULFILLED",
        "REJECTED",
        "resolve",
        "reject",
        "settled",
        "data"
    ],
    "comments": [
        "原生Promise的状态",
        "console.log(this.#handlers)",
        "console.log(onFulfilled.onRejected,resolve.reject)",
        "console.log(FULFILLED)",
        "this.#state 改变时调用",
        "互动性",
        "const p = new newPromise((resolve, reject) => {",
        "// 异步状态不会影响Promise状态",
        "// resolve(1)",
        "setTimeout(() => {",
        "// reject(123)",
        "resolve(123)",
        "}, 1000);",
        "})",
        "p.then(res => {",
        "console.log('ok1', res)",
        "return new Promise((resolve, reject) => {",
        "setTimeout(() => {",
        "resolve(res * 2)",
        "}, 1000)",
        "}).then(res => {",
        "console.log('ok2', res)",
        "})",
        "})"
    ],
    "docstrings": [],
    "functions": [
        "then"
    ],
    "classes": [
        "newPromise"
    ]
}