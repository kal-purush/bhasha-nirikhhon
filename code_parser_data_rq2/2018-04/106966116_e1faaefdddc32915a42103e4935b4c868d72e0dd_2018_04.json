{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "os",
        "re",
        "sys",
        "tarfile",
        "six",
        "moves",
        "urllib",
        "tensorflow",
        "tf",
        "cifar10_input",
        "tf",
        "app",
        "flags",
        "FLAGS",
        "tf",
        "app",
        "flags",
        "DEFINE_integer",
        "tf",
        "app",
        "flags",
        "DEFINE_string",
        "tf",
        "app",
        "flags",
        "DEFINE_boolean",
        "cifar10_input",
        "IMAGE_SIZE",
        "cifar10_input",
        "NUM_CLASSES",
        "cifar10_input",
        "NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN",
        "cifar10_input",
        "NUM_EXAMPLES_PER_EPOCH_FOR_EVAL",
        "x",
        "re",
        "sub",
        "TOWER_NAME",
        "x",
        "op",
        "name",
        "tf",
        "summary",
        "histogram",
        "tensor_name",
        "x",
        "tf",
        "summary",
        "scalar",
        "tensor_name",
        "tf",
        "nn",
        "zero_fraction",
        "x",
        "name",
        "shape",
        "initializer",
        "tf",
        "device",
        "tf",
        "float16",
        "FLAGS",
        "use_fp16",
        "tf",
        "float32",
        "tf",
        "get_variable",
        "name",
        "shape",
        "initializer",
        "initializer",
        "dtype",
        "dtype",
        "name",
        "shape",
        "stddev",
        "wd",
        "tf",
        "float16",
        "FLAGS",
        "use_fp16",
        "tf",
        "float32",
        "_variable_on_cpu",
        "name",
        "shape",
        "tf",
        "truncated_normal_initializer",
        "stddev",
        "stddev",
        "dtype",
        "dtype",
        "wd",
        "tf",
        "multiply",
        "tf",
        "nn",
        "l2_loss",
        "wd",
        "name",
        "tf",
        "add_to_collection",
        "weight_decay",
        "FLAGS",
        "data_dir",
        "ValueError",
        "os",
        "path",
        "join",
        "FLAGS",
        "data_dir",
        "cifar10_input",
        "distorted_inputs",
        "data_dir",
        "data_dir",
        "batch_size",
        "FLAGS",
        "batch_size",
        "FLAGS",
        "use_fp16",
        "tf",
        "cast",
        "images",
        "tf",
        "float16",
        "tf",
        "cast",
        "labels",
        "tf",
        "float16",
        "images",
        "labels",
        "eval_data",
        "FLAGS",
        "data_dir",
        "ValueError",
        "os",
        "path",
        "join",
        "FLAGS",
        "data_dir",
        "cifar10_input",
        "inputs",
        "eval_data",
        "eval_data",
        "data_dir",
        "data_dir",
        "batch_size",
        "FLAGS",
        "batch_size",
        "FLAGS",
        "use_fp16",
        "tf",
        "cast",
        "images",
        "tf",
        "float16",
        "tf",
        "cast",
        "labels",
        "tf",
        "float16",
        "images",
        "labels",
        "images",
        "tf",
        "variable_scope",
        "scope",
        "_variable_with_weight_decay",
        "shape",
        "stddev",
        "wd",
        "tf",
        "nn",
        "conv2d",
        "images",
        "kernel",
        "padding",
        "_variable_on_cpu",
        "tf",
        "constant_initializer",
        "tf",
        "nn",
        "bias_add",
        "conv",
        "biases",
        "tf",
        "nn",
        "relu",
        "pre_activation",
        "name",
        "scope",
        "name",
        "_activation_summary",
        "conv1",
        "tf",
        "nn",
        "max_pool",
        "conv1",
        "ksize",
        "strides",
        "padding",
        "name",
        "tf",
        "nn",
        "lrn",
        "pool1",
        "bias",
        "alpha",
        "beta",
        "name",
        "tf",
        "variable_scope",
        "scope",
        "_variable_with_weight_decay",
        "shape",
        "stddev",
        "wd",
        "tf",
        "nn",
        "conv2d",
        "norm1",
        "kernel",
        "padding",
        "_variable_on_cpu",
        "tf",
        "constant_initializer",
        "tf",
        "nn",
        "bias_add",
        "conv",
        "biases",
        "tf",
        "nn",
        "relu",
        "pre_activation",
        "name",
        "scope",
        "name",
        "_activation_summary",
        "conv2",
        "tf",
        "nn",
        "lrn",
        "conv2",
        "bias",
        "alpha",
        "beta",
        "name",
        "tf",
        "nn",
        "max_pool",
        "norm2",
        "ksize",
        "strides",
        "padding",
        "name",
        "tf",
        "variable_scope",
        "scope",
        "tf",
        "reshape",
        "pool2",
        "images",
        "get_shape",
        "as_list",
        "reshape",
        "get_shape",
        "value",
        "_variable_with_weight_decay",
        "shape",
        "dim",
        "stddev",
        "wd",
        "_variable_on_cpu",
        "tf",
        "constant_initializer",
        "tf",
        "nn",
        "relu",
        "tf",
        "matmul",
        "reshape",
        "weights",
        "biases",
        "name",
        "scope",
        "name",
        "_activation_summary",
        "local3",
        "tf",
        "variable_scope",
        "scope",
        "_variable_with_weight_decay",
        "shape",
        "stddev",
        "wd",
        "_variable_on_cpu",
        "tf",
        "constant_initializer",
        "tf",
        "nn",
        "relu",
        "tf",
        "matmul",
        "local3",
        "weights",
        "biases",
        "name",
        "scope",
        "name",
        "_activation_summary",
        "local4",
        "tf",
        "variable_scope",
        "scope",
        "_variable_with_weight_decay",
        "NUM_CLASSES",
        "stddev",
        "wd",
        "_variable_on_cpu",
        "NUM_CLASSES",
        "tf",
        "constant_initializer",
        "tf",
        "add",
        "tf",
        "matmul",
        "local4",
        "weights",
        "biases",
        "name",
        "scope",
        "name",
        "_activation_summary",
        "softmax_linear",
        "softmax_linear",
        "logits",
        "labels",
        "tf",
        "cast",
        "labels",
        "tf",
        "int64",
        "tf",
        "nn",
        "sparse_softmax_cross_entropy_with_logits",
        "labels",
        "labels",
        "logits",
        "logits",
        "name",
        "tf",
        "reduce_mean",
        "cross_entropy",
        "name",
        "tf",
        "add_to_collection",
        "cross_entropy_mean",
        "tf",
        "add_n",
        "tf",
        "get_collection",
        "name",
        "total_loss",
        "tf",
        "train",
        "ExponentialMovingAverage",
        "name",
        "tf",
        "get_collection",
        "loss_averages",
        "apply",
        "losses",
        "total_loss",
        "l",
        "losses",
        "total_loss",
        "tf",
        "summary",
        "scalar",
        "l",
        "op",
        "name",
        "l",
        "tf",
        "summary",
        "scalar",
        "l",
        "op",
        "name",
        "loss_averages",
        "average",
        "l",
        "loss_averages_op",
        "total_loss",
        "global_step",
        "NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN",
        "FLAGS",
        "batch_size",
        "num_batches_per_epoch",
        "NUM_EPOCHS_PER_DECAY",
        "tf",
        "train",
        "exponential_decay",
        "INITIAL_LEARNING_RATE",
        "global_step",
        "decay_steps",
        "LEARNING_RATE_DECAY_FACTOR",
        "staircase",
        "tf",
        "summary",
        "scalar",
        "lr",
        "_add_loss_summaries",
        "total_loss",
        "tf",
        "control_dependencies",
        "loss_averages_op",
        "tf",
        "train",
        "GradientDescentOptimizer",
        "lr",
        "opt",
        "compute_gradients",
        "total_loss",
        "opt",
        "apply_gradients",
        "grads",
        "global_step",
        "global_step",
        "tf",
        "trainable_variables",
        "tf",
        "summary",
        "histogram",
        "op",
        "name",
        "grad",
        "grads",
        "grad",
        "tf",
        "summary",
        "histogram",
        "op",
        "name",
        "grad",
        "tf",
        "train",
        "ExponentialMovingAverage",
        "MOVING_AVERAGE_DECAY",
        "global_step",
        "variable_averages",
        "apply",
        "tf",
        "trainable_variables",
        "tf",
        "control_dependencies",
        "apply_gradient_op",
        "variables_averages_op",
        "tf",
        "no_op",
        "name",
        "train_op",
        "FLAGS",
        "data_dir",
        "os",
        "path",
        "exists",
        "dest_directory",
        "os",
        "makedirs",
        "dest_directory",
        "DATA_URL",
        "split",
        "os",
        "path",
        "join",
        "dest_directory",
        "filename",
        "os",
        "path",
        "exists",
        "filepath",
        "count",
        "block_size",
        "total_size",
        "sys",
        "stdout",
        "write",
        "filename",
        "count",
        "block_size",
        "total_size",
        "sys",
        "stdout",
        "flush",
        "urllib",
        "request",
        "urlretrieve",
        "DATA_URL",
        "filepath",
        "_progress",
        "os",
        "stat",
        "filepath",
        "filename",
        "statinfo",
        "st_size",
        "os",
        "path",
        "join",
        "dest_directory",
        "os",
        "path",
        "exists",
        "extracted_dir_path",
        "tarfile",
        "open",
        "filepath",
        "extractall",
        "dest_directory"
    ],
    "literals": [
        "'batch_size'",
        "'data_dir'",
        "'/tmp/cifar10_data'",
        "'use_fp16'",
        "'tower'",
        "'https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz'",
        "'%s_[0-9]*/'",
        "''",
        "'/activations'",
        "'/sparsity'",
        "'/cpu:0'",
        "'weight_loss'",
        "'losses'",
        "'Please supply a data_dir'",
        "'cifar-10-batches-bin'",
        "'Please supply a data_dir'",
        "'cifar-10-batches-bin'",
        "'conv1'",
        "'weights'",
        "'SAME'",
        "'biases'",
        "'SAME'",
        "'pool1'",
        "'norm1'",
        "'conv2'",
        "'weights'",
        "'SAME'",
        "'biases'",
        "'norm2'",
        "'SAME'",
        "'pool2'",
        "'local3'",
        "'weights'",
        "'biases'",
        "'local4'",
        "'weights'",
        "'biases'",
        "'softmax_linear'",
        "'weights'",
        "'biases'",
        "'cross_entropy_per_example'",
        "'cross_entropy'",
        "'losses'",
        "'losses'",
        "'total_loss'",
        "'avg'",
        "'losses'",
        "' (raw)'",
        "'learning_rate'",
        "'/gradients'",
        "'train'",
        "'/'",
        "'\\r>> Downloading %s %.1f%%'",
        "'Successfully downloaded'",
        "'bytes.'",
        "'cifar-10-batches-bin'",
        "'r:gz'"
    ],
    "variables": [
        "FLAGS",
        "IMAGE_SIZE",
        "NUM_CLASSES",
        "NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN",
        "NUM_EXAMPLES_PER_EPOCH_FOR_EVAL",
        "MOVING_AVERAGE_DECAY",
        "NUM_EPOCHS_PER_DECAY",
        "LEARNING_RATE_DECAY_FACTOR",
        "INITIAL_LEARNING_RATE",
        "TOWER_NAME",
        "DATA_URL",
        "tensor_name",
        "dtype",
        "dtype",
        "weight_decay",
        "data_dir",
        "images",
        "labels",
        "images",
        "labels",
        "data_dir",
        "images",
        "labels",
        "images",
        "labels",
        "kernel",
        "conv",
        "biases",
        "pre_activation",
        "conv1",
        "pool1",
        "norm1",
        "kernel",
        "conv",
        "biases",
        "pre_activation",
        "conv2",
        "norm2",
        "pool2",
        "reshape",
        "dim",
        "weights",
        "biases",
        "local3",
        "weights",
        "biases",
        "local4",
        "weights",
        "biases",
        "softmax_linear",
        "labels",
        "cross_entropy",
        "cross_entropy_mean",
        "loss_averages",
        "losses",
        "loss_averages_op",
        "num_batches_per_epoch",
        "decay_steps",
        "lr",
        "loss_averages_op",
        "opt",
        "grads",
        "apply_gradient_op",
        "variable_averages",
        "variables_averages_op",
        "train_op",
        "dest_directory",
        "filename",
        "filepath",
        "filepath",
        "_",
        "statinfo",
        "extracted_dir_path"
    ],
    "comments": [
        "Copyright 2015 The TensorFlow Authors. All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "==============================================================================",
        "pylint: disable=missing-docstring",
        "Basic model parameters.",
        "Global constants describing the CIFAR-10 data set.",
        "Constants describing the training process.",
        "The decay to use for the moving average.",
        "Epochs after which learning rate decays.",
        "Learning rate decay factor.",
        "Initial learning rate.",
        "If a model is trained with multiple GPUs, prefix all Op names with tower_name",
        "to differentiate the operations. Note that this prefix is removed from the",
        "names of the summaries when visualizing a model.",
        "Remove 'tower_[0-9]/' from the name in case this is a multi-GPU training",
        "session. This helps the clarity of presentation on tensorboard.",
        "We instantiate all variables using tf.get_variable() instead of",
        "tf.Variable() in order to share variables across multiple GPU training runs.",
        "If we only ran this model on a single GPU, we could simplify this function",
        "by replacing all instances of tf.get_variable() with tf.Variable().",
        "",
        "conv1",
        "pool1",
        "norm1",
        "conv2",
        "norm2",
        "pool2",
        "local3",
        "Move everything into depth so we can perform a single matrix multiply.",
        "local4",
        "linear layer(WX + b),",
        "We don't apply softmax here because",
        "tf.nn.sparse_softmax_cross_entropy_with_logits accepts the unscaled logits",
        "and performs the softmax internally for efficiency.",
        "Calculate the average cross entropy loss across the batch.",
        "The total loss is defined as the cross entropy loss plus all of the weight",
        "decay terms (L2 loss).",
        "Compute the moving average of all individual losses and the total loss.",
        "Attach a scalar summary to all individual losses and the total loss; do the",
        "same for the averaged version of the losses.",
        "Name each loss as '(raw)' and name the moving average version of the loss",
        "as the original loss name.",
        "Variables that affect learning rate.",
        "Decay the learning rate exponentially based on the number of steps.",
        "Generate moving averages of all losses and associated summaries.",
        "Compute gradients.",
        "Apply gradients.",
        "Add histograms for trainable variables.",
        "Add histograms for gradients.",
        "Track the moving averages of all trainable variables."
    ],
    "docstrings": [
        "\"\"\"Builds the CIFAR-10 network.\nSummary of available functions:\n # Compute input images and labels for training. If you would like to run\n # evaluations, use inputs() instead.\n inputs, labels = distorted_inputs()\n # Compute inference on the model inputs to make a prediction.\n predictions = inference(inputs)\n # Compute the total loss of the prediction with respect to the labels.\n loss = loss(predictions, labels)\n # Create a graph to run one step of training with respect to the loss.\n train_op = train(loss, global_step)\n\"\"\"",
        "\"\"\"Number of images to process in a batch.\"\"\"",
        "\"\"\"Path to the CIFAR-10 data directory.\"\"\"",
        "\"\"\"Train the model using fp16.\"\"\"",
        "\"\"\"Helper to create summaries for activations.\n  Creates a summary that provides a histogram of activations.\n  Creates a summary that measures the sparsity of activations.\n  Args:\n    x: Tensor\n  Returns:\n    nothing\n  \"\"\"",
        "\"\"\"Helper to create a Variable stored on CPU memory.\n  Args:\n    name: name of the variable\n    shape: list of ints\n    initializer: initializer for Variable\n  Returns:\n    Variable Tensor\n  \"\"\"",
        "\"\"\"Helper to create an initialized Variable with weight decay.\n  Note that the Variable is initialized with a truncated normal distribution.\n  A weight decay is added only if one is specified.\n  Args:\n    name: name of the variable\n    shape: list of ints\n    stddev: standard deviation of a truncated Gaussian\n    wd: add L2Loss weight decay multiplied by this float. If None, weight\n        decay is not added for this Variable.\n  Returns:\n    Variable Tensor\n  \"\"\"",
        "\"\"\"Construct distorted input for CIFAR training using the Reader ops.\n  Returns:\n    images: Images. 4D tensor of [batch_size, IMAGE_SIZE, IMAGE_SIZE, 3] size.\n    labels: Labels. 1D tensor of [batch_size] size.\n  Raises:\n    ValueError: If no data_dir\n  \"\"\"",
        "\"\"\"Construct input for CIFAR evaluation using the Reader ops.\n  Args:\n    eval_data: bool, indicating if one should use the train or eval data set.\n  Returns:\n    images: Images. 4D tensor of [batch_size, IMAGE_SIZE, IMAGE_SIZE, 3] size.\n    labels: Labels. 1D tensor of [batch_size] size.\n  Raises:\n    ValueError: If no data_dir\n  \"\"\"",
        "\"\"\"Build the CIFAR-10 model.\n  Args:\n    images: Images returned from distorted_inputs() or inputs().\n  Returns:\n    Logits.\n  \"\"\"",
        "\"\"\"Add L2Loss to all the trainable variables.\n  Add summary for \"Loss\" and \"Loss/avg\".\n  Args:\n    logits: Logits from inference().\n    labels: Labels from distorted_inputs or inputs(). 1-D tensor\n            of shape [batch_size]\n  Returns:\n    Loss tensor of type float.\n  \"\"\"",
        "\"\"\"Add summaries for losses in CIFAR-10 model.\n  Generates moving average for all losses and associated summaries for\n  visualizing the performance of the network.\n  Args:\n    total_loss: Total loss from loss().\n  Returns:\n    loss_averages_op: op for generating moving averages of losses.\n  \"\"\"",
        "\"\"\"Train CIFAR-10 model.\n  Create an optimizer and apply to all trainable variables. Add moving\n  average for all trainable variables.\n  Args:\n    total_loss: Total loss from loss().\n    global_step: Integer Variable counting the number of training steps\n      processed.\n  Returns:\n    train_op: op for training.\n  \"\"\"",
        "\"\"\"Download and extract the tarball from Alex's website.\"\"\""
    ],
    "functions": [
        "_activation_summary",
        "_variable_on_cpu",
        "_variable_with_weight_decay",
        "distorted_inputs",
        "inputs",
        "inference",
        "loss",
        "_add_loss_summaries",
        "train",
        "maybe_download_and_extract",
        "_progress"
    ],
    "classes": []
}