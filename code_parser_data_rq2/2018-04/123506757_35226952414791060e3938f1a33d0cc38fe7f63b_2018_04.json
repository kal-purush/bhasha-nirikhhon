{
    "identifiers": [
        "front",
        "rear",
        "nItems",
        "qArray",
        "queueName",
        "maxSize",
        "queueName",
        "maxSize",
        "qArray",
        "getMaxSize",
        "front",
        "rear",
        "nItems",
        "item",
        "isFull",
        "rear",
        "getMaxSize",
        "rear",
        "qArray",
        "rear",
        "item",
        "nItems",
        "item",
        "qArray",
        "front",
        "front",
        "getMaxSize",
        "front",
        "nItems",
        "item",
        "qArray",
        "front",
        "nItems",
        "nItems",
        "getMaxSize",
        "nItems",
        "i",
        "front",
        "i",
        "rear",
        "qArray",
        "i",
        "toString",
        "i",
        "getMaxSize",
        "i",
        "i"
    ],
    "literals": [
        "\"Display queue front to back:\"",
        "\"-\""
    ],
    "variables": [
        "front",
        "rear",
        "nItems",
        "qArray"
    ],
    "comments": [
        "check for wraparound",
        "increment rear and insert",
        "add count of items",
        "get item and increment front",
        "check for wraparound",
        "decrease count of items",
        "true if queue is empty",
        "true if queue is full"
    ],
    "docstrings": [
        "* @author Amy Larson amlarson10@dmacc.edu 2018-03-15 updated 4/2/18CIS152 This\n *         class creates a queue array that uses queue methods",
        "*Constructor for ArrayQueue\n\t * @param queueName The name that will appear in instructions and on buttons. No\n\t *            spaces before or after. May include \"The \" at the start.\n\t * @param maxSize  must be greater than 0",
        "* adds a new item to the queue, queue is modified.\n\t * @see Queue#enqueue(JobListing)\n\t * @param item\n\t * @return",
        "removes and returns an item, queue is modified.\n\t * @see Queue#dequeue()\n\t * @return",
        "* prints the front element, queue is not modified.\n\t * @see Queue#peek()\n\t * @return item at front of queue",
        "* returns a boolean and tests for an empty queue, queue is not modified.\n\t * @see Queue#isEmpty()\n\t * @return",
        "* checks if queue is full\n\t * @see Queue#isFull()\n\t * @return true if full",
        "* returns the int size of the queue, queue is not modified\n\t * @see Queue#size()\n\t * @return",
        "* prints the queue from front to rear, queue is not modified.\n\t * @see Queue#print()"
    ],
    "functions": [
        "ArrayQueue",
        "enqueue",
        "JobListing",
        "dequeue",
        "JobListing",
        "peek",
        "isEmpty",
        "isFull",
        "size"
    ],
    "classes": [
        "ArrayQueue"
    ]
}