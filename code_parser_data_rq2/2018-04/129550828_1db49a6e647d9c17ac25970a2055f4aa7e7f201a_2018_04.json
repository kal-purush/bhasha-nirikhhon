{
    "identifiers": [
        "fs",
        "path",
        "os",
        "cp",
        "utility",
        "filePath",
        "filePath",
        "path",
        "filePath",
        "utility",
        "fs",
        "path",
        "fs",
        "err",
        "err",
        "deferred",
        "err",
        "deferred",
        "os",
        "fileExtension",
        "os",
        "fileExtension",
        "utility",
        "fileExtension",
        "command",
        "command",
        "command",
        "cp",
        "command",
        "error",
        "stdout",
        "stderr",
        "error",
        "promise",
        "error",
        "stdout",
        "validationString",
        "promise",
        "promise",
        "promise",
        "utility"
    ],
    "literals": [
        "'fs'",
        "'path'",
        "'os'",
        "'child_process'",
        "'./utility'",
        "string",
        "string",
        "'File/Directory path should be non empty'",
        "'darwin'",
        "'win32'",
        "'Linux is not supported'",
        "string",
        "spctl --assess -vv ${this.filePath} --type",
        "${this.filePath}: accepted",
        "'.pkg'",
        "'.dmg'",
        "'install'",
        "'exec'",
        "Executing command - ${command}",
        "'no signature'",
        "spctl --assess -vv ${this.filePath} --type",
        "'.'"
    ],
    "variables": [
        "deferred",
        "fileExtension",
        "promise",
        "command",
        "validationString",
        "promise",
        "command"
    ],
    "comments": [
        "Check if path exists,",
        "fs.accessSync throws error if path doesn't exist/can't be read.",
        "await this.validateWindowsSignature(fileExtension);",
        "Linux is not implemented.",
        "For PKG installer, spctl --assess --type install -vv <file_path>",
        "For execute/opening file, spctl --assess --type exec -vv <file_path>"
    ],
    "docstrings": [],
    "functions": [
        "check",
        "validateSignature",
        "validateMacSignature",
        "validateWinSignature",
        "getFileExtension"
    ],
    "classes": [
        "CodeSignValidator"
    ]
}