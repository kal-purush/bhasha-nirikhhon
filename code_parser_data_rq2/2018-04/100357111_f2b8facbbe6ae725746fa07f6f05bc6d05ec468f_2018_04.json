{
    "identifiers": [
        "os",
        "re",
        "re",
        "compile",
        "re",
        "MULTILINE",
        "re",
        "compile",
        "re",
        "IGNORECASE",
        "re",
        "DOTALL",
        "re",
        "MULTILINE",
        "re",
        "compile",
        "re",
        "IGNORECASE",
        "re",
        "DOTALL",
        "re",
        "MULTILINE",
        "re",
        "compile",
        "re",
        "IGNORECASE",
        "re",
        "DOTALL",
        "re",
        "compile",
        "re",
        "IGNORECASE",
        "re",
        "DOTALL",
        "prefix",
        "t",
        "endswith",
        "t",
        "t",
        "t",
        "t",
        "skiplist",
        "t",
        "strip",
        "t",
        "types",
        "types",
        "t",
        "prefix",
        "t",
        "endswith",
        "t",
        "t",
        "match",
        "match",
        "group",
        "match",
        "group",
        "GetType",
        "match",
        "group",
        "GetType",
        "match",
        "group",
        "match",
        "group",
        "name",
        "match",
        "group",
        "split",
        "result",
        "name",
        "strip",
        "result",
        "re",
        "compile",
        "re",
        "DOTALL",
        "fileName",
        "open",
        "fileName",
        "file",
        "read",
        "REdefine",
        "findall",
        "text",
        "define",
        "defs",
        "REdesc",
        "sub",
        "define",
        "RErpcom",
        "sub",
        "desc",
        "defines",
        "desc",
        "len",
        "define",
        "strip",
        "define",
        "defines",
        "define",
        "define",
        "REstructs",
        "finditer",
        "text",
        "os",
        "path",
        "basename",
        "fileName",
        "fileName",
        "r",
        "rs",
        "r",
        "group",
        "r",
        "group",
        "name",
        "skiplist",
        "r",
        "group",
        "REdesc",
        "sub",
        "desc",
        "fileName",
        "RErmifdef",
        "sub",
        "text",
        "text",
        "find",
        "RErestruc",
        "sub",
        "restructure",
        "text",
        "RErpcom",
        "sub",
        "text",
        "text",
        "replace",
        "text",
        "replace",
        "join",
        "l",
        "l",
        "text",
        "splitlines",
        "l",
        "strip",
        "endswith",
        "text",
        "find",
        "name",
        "name",
        "line",
        "desc",
        "split",
        "description",
        "line",
        "strip",
        "description",
        "rstrip",
        "line",
        "text",
        "split",
        "fields",
        "line",
        "strip",
        "fields",
        "strip",
        "selfreferencing",
        "templateSR",
        "template",
        "templ",
        "replace",
        "name",
        "text",
        "replace",
        "description",
        "text",
        "replace",
        "fields",
        "name",
        "lower",
        "fileName",
        "split",
        "lower",
        "name",
        "name",
        "text",
        "replace",
        "defines",
        "text",
        "replace",
        "result",
        "append",
        "primitive",
        "selfreferencing",
        "text",
        "result",
        "text",
        "os",
        "listdir",
        "path",
        "fileName",
        "files",
        "fileName",
        "endswith",
        "Structify",
        "os",
        "path",
        "join",
        "path",
        "fileName",
        "primitive",
        "structs1",
        "sr",
        "structs2",
        "structs4",
        "structs3",
        "text",
        "structs1",
        "structs2",
        "structs3",
        "structs4",
        "open",
        "file",
        "write",
        "text",
        "file",
        "close"
    ],
    "literals": [
        "r''",
        "r'(?P<desc>)'",
        "r'#\\s*define\\s(?P<name>[^(\\n]+?)\\s(?P<code>.+)$'",
        "r''",
        "r'//\\s?[\\-]*\\s(?P<desc>.*?)\\*/\\W*?'",
        "r'struct\\s(?:ASSIMP_API\\s)?(?P<name>[a-z][a-z0-9_]\\w+\\b)'",
        "r'[^{]*?\\{'",
        "r'(?P<code>.*?)'",
        "r'\\}\\s*(PACK_STRUCT)?;'",
        "r''",
        "r'^\\s*?([*]|/\\*\\*)(?P<line>.*?)'",
        "r''",
        "r'#ifdef __cplusplus'",
        "r'(?P<code>.*)'",
        "r'#endif(\\s*//\\s*!?\\s*__cplusplus)*'",
        "r''",
        "r'\\s*(/\\*+\\s|\\*+/|\\B\\*\\s|///?!?)'",
        "r'(?P<line>.*?)'",
        "'c_'",
        "'*'",
        "'const'",
        "'unsigned int'",
        "'uint'",
        "'unsigned char'",
        "'ubyte'",
        "'*'",
        "\"POINTER(\"",
        "\")\"",
        "\"type\"",
        "\"struct\"",
        "\"\"",
        "\"struct\"",
        "\"C_ENUM \"",
        "\"c_uint\"",
        "''",
        "''",
        "\"index\"",
        "\"*\"",
        "\"index\"",
        "\"\"",
        "\"name\"",
        "','",
        "\"(\\\"\"",
        "\"\\\", \"",
        "\"),\"",
        "r''",
        "r'(?P<struct>C_STRUCT\\s|C_ENUM\\s|)'",
        "r'(?P<type>\\w+\\s?\\w+?[*]*)\\s'",
        "r'(?P<name>\\w+|[a-z0-9_, ]+)'",
        "r'(:?\\[(?P<index>\\w+)\\])?;'",
        "\"FileIO\"",
        "\"File\"",
        "\"locateFromAssimpHeap\"",
        "'LogStream'",
        "'MeshAnim'",
        "'AnimMesh'",
        "'r'",
        "\"\\n\"",
        "''",
        "'#\\g<line>'",
        "\" \"",
        "\" = \"",
        "\"\\n\"",
        "'name'",
        "'desc'",
        "'code'",
        "''",
        "\"See '\"",
        "\"' for details.\"",
        "''",
        "'C_STRUCT'",
        "'# \\g<line>'",
        "\"),#\"",
        "\"),\\n#\"",
        "\"#\"",
        "\"\\n#\"",
        "\"\"",
        "\"#\"",
        "'POINTER('",
        "')'",
        "\"Scene\"",
        "\"\"",
        "'\\n'",
        "\" \"",
        "\"\\n\"",
        "\"\"",
        "'\\n'",
        "\" \"",
        "\"\\n\"",
        "'$NAME$'",
        "'$DESCRIPTION$'",
        "'$FIELDS$'",
        "'.'",
        "'Material'",
        "\"String\"",
        "'$DEFINES$'",
        "'$DEFINES$'",
        "''",
        "\"#-*- coding: UTF-8 -*-\\n\\n\"",
        "\"from ctypes import POINTER, c_int, c_uint, c_size_t, c_char, c_float, Structure, c_char_p, c_double, c_ubyte\\n\\n\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "'../../../include/assimp'",
        "'.h'",
        "'structs.py'",
        "'w'",
        "\"Generation done. You can now review the file 'structs.py' and merge it.\""
    ],
    "variables": [
        "REdefine",
        "REstructs",
        "REdesc",
        "RErmifdef",
        "RErpcom",
        "t",
        "t",
        "t",
        "t",
        "types",
        "t",
        "t",
        "t",
        "result",
        "RErestruc",
        "template",
        "templateSR",
        "skiplist",
        "file",
        "text",
        "result",
        "defs",
        "defines",
        "desc",
        "desc",
        "rs",
        "fileName",
        "name",
        "desc",
        "text",
        "desc",
        "desc",
        "text",
        "primitive",
        "text",
        "text",
        "text",
        "text",
        "text",
        "selfreferencing",
        "description",
        "description",
        "fields",
        "fields",
        "templ",
        "templ",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "structs1",
        "structs2",
        "structs3",
        "structs4",
        "path",
        "files",
        "primitive",
        "sr",
        "file"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- Coding: UTF-8 -*-",
        "---------------------------------------------------------------------------",
        "Open Asset Import Library (ASSIMP)",
        "---------------------------------------------------------------------------",
        "",
        "Copyright (c) 2006-2010, ASSIMP Development Team",
        "",
        "All rights reserved.",
        "",
        "Redistribution and use of this software in source and binary forms,",
        "with or without modification, are permitted provided that the following",
        "conditions are met:",
        "",
        "copyright notice, this list of conditions and the",
        "following disclaimer.",
        "",
        "copyright notice, this list of conditions and the",
        "following disclaimer in the documentation and/or other",
        "materials provided with the distribution.",
        "",
        "contributors may be used to endorse or promote products",
        "derived from this software without specific prior",
        "written permission of the ASSIMP Development Team.",
        "",
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
        "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
        "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
        "A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
        "OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
        "SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
        "LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",
        "DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY",
        "THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
        "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
        "OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "---------------------------------------------------------------------------",
        "==[regexps]=================================================",
        "Clean desc",
        "/** *desc */",
        "#define name value",
        "Get structs",
        "r'//\\s?[\\-]*\\s(?P<desc>.*?)\\*/\\s'           # /** *desc */",
        "r'//\\s?[\\-]*(?P<desc>.*?)\\*/(?:.*?)'            # garbage",
        "/** *desc */",
        "struct name",
        "{",
        "code",
        "};",
        "Clean desc",
        "Remove #ifdef __cplusplus",
        "#ifdef __cplusplus",
        "code",
        "#endif",
        "Replace comments",
        "/**",
        "Restructure",
        "skip some types",
        "[C_STRUCT]",
        "type",
        "r'(?P<name>\\w+)'                                       #  name",
        "name",
        "[]; (optional)",
        "==[template]================================================",
        "============================================================",
        "Get defines.",
        "Create defines",
        "Clean desc",
        "Replace comments",
        "skip non-integral defines, we can support them right now",
        "Get structs",
        "Skip some structs",
        "Clean desc",
        "TODO",
        "Remove #ifdef __cplusplus",
        "Whether the struct contains more than just POD",
        "Restructure",
        "Replace comments",
        "remove empty comment lines",
        "Whether it's selfreferencing: ex. struct Node { Node* parent; };",
        "Create description",
        "Create fields",
        "Put it all together",
        "files = [\"aiScene.h\", \"aiTypes.h\"]"
    ],
    "docstrings": [
        "* Redistributions of source code must retain the above",
        "* Redistributions in binary form must reproduce the above",
        "* Neither the name of the ASSIMP team, nor the names of its",
        "\"\"\"Update PyAssimp's data structures to keep up with the\nC/C++ headers.\n\nThis script is meant to be executed in the source tree, directly from\nport/PyAssimp/gen\n\"\"\"",
        "* line",
        "* line",
        "\"\"\"\nclass $NAME$(Structure):\n    \\\"\\\"\\\"\n$DESCRIPTION$\n    \\\"\\\"\\\" \n$DEFINES$\n    _fields_ = [\n            $FIELDS$\n        ]\n\"\"\"",
        "\"\"\"\nclass $NAME$(Structure):\n    \\\"\\\"\\\"\n$DESCRIPTION$\n    \\\"\\\"\\\" \n$DEFINES$\n\n$NAME$._fields_ = [\n            $FIELDS$\n        ]\n\"\"\""
    ],
    "functions": [
        "GetType",
        "restructure",
        "Structify"
    ],
    "classes": []
}