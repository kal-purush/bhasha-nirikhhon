{
    "identifiers": [
        "com",
        "worthent",
        "foundation",
        "util",
        "state",
        "provider",
        "com",
        "worthent",
        "foundation",
        "util",
        "annotation",
        "NotNull",
        "com",
        "worthent",
        "foundation",
        "util",
        "annotation",
        "com",
        "worthent",
        "foundation",
        "util",
        "state",
        "StateEvent",
        "com",
        "worthent",
        "foundation",
        "util",
        "state",
        "StateExeException",
        "com",
        "worthent",
        "foundation",
        "util",
        "state",
        "StateTable",
        "com",
        "worthent",
        "foundation",
        "util",
        "state",
        "StateTableControl",
        "com",
        "worthent",
        "foundation",
        "util",
        "state",
        "StateTableData",
        "com",
        "worthent",
        "foundation",
        "util",
        "state",
        "impl",
        "StateEngine",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "java",
        "io",
        "Closeable",
        "java",
        "io",
        "java",
        "util",
        "concurrent",
        "LinkedBlockingDeque",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicInteger",
        "com",
        "worthent",
        "foundation",
        "util",
        "condition",
        "Preconditions",
        "checkNotNull",
        "LOGGER",
        "LoggerFactory",
        "getLogger",
        "MSG_STATE_TABLE_SHUT_DOWN",
        "DEFAULT_THREAD_GROUP_NAME",
        "instance_count",
        "engine",
        "stateTblInstance",
        "eventQueue",
        "stopping",
        "thread",
        "NotNull",
        "stateTblInstance",
        "threadGroup",
        "threadGrp",
        "threadGroup",
        "DEFAULT_THREAD_GROUP_NAME",
        "threadGroup",
        "engine",
        "stateTblInstance",
        "checkNotNull",
        "stateTblInstance",
        "thread",
        "threadGroup",
        "processEvents",
        "threadGrp",
        "getName",
        "instance_count",
        "incrementAndGet",
        "thread",
        "setDaemon",
        "eventQueue",
        "NotNull",
        "stateTblInstance",
        "stateTblInstance",
        "Override",
        "stop",
        "Override",
        "stateTblInstance",
        "getStateTableDataManager",
        "initializeStateTableData",
        "exc",
        "name",
        "stateTblInstance",
        "getStateTableName",
        "name",
        "thread",
        "start",
        "Override",
        "stopping",
        "thread",
        "interrupt",
        "Override",
        "NotNull",
        "checkNotNull",
        "thread",
        "isAlive",
        "MSG_STATE_TABLE_SHUT_DOWN",
        "eventQueue",
        "add",
        "NotNull",
        "checkNotNull",
        "thread",
        "isAlive",
        "MSG_STATE_TABLE_SHUT_DOWN",
        "eventQueue",
        "addFirst",
        "stopping",
        "eventQueue",
        "take",
        "LOGGER",
        "debug",
        "engine",
        "processEvent",
        "stateTblInstance",
        "exc",
        "LOGGER",
        "info",
        "exc",
        "LOGGER",
        "error",
        "exc",
        "LOGGER",
        "info"
    ],
    "literals": [
        "\"State Table is shut down\"",
        "\"single-thread-state-table\"",
        "\"stateTblInstance must not be null\"",
        "\"Error initializing state table history for state table, \"",
        "\"event must not be null\"",
        "\"event must not be null\"",
        "\"Process event: {}\"",
        "\"State Table Thread interrupted\"",
        "\"Error processing event \"",
        "\"State Table thread has stopped.\""
    ],
    "variables": [
        "engine",
        "stateTblInstance",
        "eventQueue",
        "thread"
    ],
    "comments": [
        "do not prevent the process from shutting down",
        "",
        "Closeable Interface",
        "",
        "",
        "StateTableControl Interface",
        ""
    ],
    "docstrings": [
        "* Implements the {@link StateTableControl} interface to provide a single-threaded implementation of the state table.\n * The state table transition actions are all conducted asynchronously on the same single thread in the order they arrive.\n *\n * @author Erik K. Worth",
        "Logger for this class",
        "Exception message when attempting to submit an event when the state table is shut down",
        "The default thread group name when a thread group is not provided in the constructor",
        "Counts the number of instances of this class to use as the name of the single thread for this state table",
        "The state table engine that processes events",
        "The state table instance",
        "The event queue",
        "Set to <code>true</code> when the state table is stopping",
        "The single thread used to process all events",
        "* Construct with the state table instance and an optional thread group for the single thread.\n     *\n     * @param stateTblInstance the state table to be fed events from the single thread in the order the events are signaled\n     * @param threadGroup the optional thread group",
        "* Construct with the state table instance.\n     *\n     * @param stateTblInstance the state table to be fed events from the single thread in the order the events are signaled",
        "* Injects an event into the front of the queue submitted to the state table.\n     *\n     * @param event the event to inject into the front of the queue",
        "The method run from within the single thread that processes events"
    ],
    "functions": [
        "SingleThreadConsumerStateTableControl",
        "SingleThreadConsumerStateTableControl",
        "close",
        "start",
        "stop",
        "signalEvent",
        "injectEvent",
        "processEvents"
    ],
    "classes": [
        "SingleThreadConsumerStateTableControl"
    ]
}