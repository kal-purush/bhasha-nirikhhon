{
    "identifiers": [
        "json",
        "numpy",
        "np",
        "os",
        "requests",
        "textacy",
        "tensorflow",
        "tf",
        "tflearn",
        "data_utils",
        "to_categorical",
        "tflearn",
        "sva_rule_based",
        "check_agreement",
        "os",
        "environ",
        "get",
        "deflated_vector",
        "json",
        "loads",
        "deflated_vector",
        "np",
        "zeros",
        "n",
        "dv",
        "n",
        "dv",
        "n",
        "result",
        "sent_str",
        "requests",
        "get",
        "format",
        "VECTORIZE_API",
        "sent_str",
        "inflate",
        "r",
        "text",
        "tf",
        "reset_default_graph",
        "tflearn",
        "input_data",
        "vector_len",
        "tflearn",
        "fully_connected",
        "net",
        "activation",
        "tflearn",
        "fully_connected",
        "net",
        "activation",
        "tflearn",
        "fully_connected",
        "net",
        "activation",
        "tflearn",
        "regression",
        "net",
        "optimizer",
        "learning_rate",
        "loss",
        "tflearn",
        "DNN",
        "net",
        "model",
        "build_model",
        "model",
        "load",
        "sentence",
        "textacy",
        "Doc",
        "sentence",
        "lang",
        "textacy",
        "extract",
        "pos_regex_matches",
        "doc",
        "pattern",
        "METHOD",
        "len",
        "x",
        "x",
        "vps",
        "METHOD",
        "check_agreement",
        "sentence",
        "model",
        "predict",
        "text_to_vector",
        "sentence",
        "positive_prob"
    ],
    "literals": [
        "\"loading libraries...\"",
        "'COMBINED'",
        "'VECTORIZE_API_URI'",
        "'http://localhost:10200'",
        "'indices'",
        "'indices'",
        "\"{}/sva/vector\"",
        "'s'",
        "\"Setting up tensorflow...\"",
        "'ReLU'",
        "'ReLU'",
        "'softmax'",
        "'sgd'",
        "'categorical_crossentropy'",
        "\"Building TF model...\"",
        "\"Loading TF model...\"",
        "'./models/subject_verb_agreement_model.tfl'",
        "'COMBINED'",
        "r'<VERB>?<ADV>*<VERB>+'",
        "'en_core_web_lg'",
        "'COMBINED'",
        "'RULE_BASED'",
        "\"Simple sentence, using rule based checker\""
    ],
    "variables": [
        "METHOD",
        "VECTORIZE_API",
        "dv",
        "result",
        "result",
        "r",
        "vector_len",
        "net",
        "net",
        "net",
        "net",
        "net",
        "model",
        "model",
        "correct",
        "METHOD",
        "pattern",
        "doc",
        "vps",
        "positive_prob"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "from __future__ import unicode_literals",
        "Constants",
        "TODO: move this into a shared module -- it's shared accross build, eval, and",
        "others maybe.",
        "result = np.zeros(dv['reductions']) # some claim vector length 5555, others",
        "5530. this could have occurred doing remote computations? or something.",
        "anyhow, we will use 5555.  Let's just hard code it.  Gosh darnit.",
        "some claim vector length 5555, others",
        "print(\"Inflated vector. Length\", len(result))",
        "Building TF Model #######################################################",
        "TODO: this probably really should not be hardcoded",
        "This resets all parameters and variables, leave this here",
        "Your code ####",
        "Input",
        "Hidden",
        "Hidden",
        "Output",
        "Loading TF Model #####################################################",
        "see number of verb phrases",
        "if len([x for x in vps]) < 2:",
        "Use ML on more complex sentences"
    ],
    "docstrings": [
        "\"\"\"Generate a model capable of detecting subject-verb agreement errors\"\"\"",
        "\"\"\"Given a defalated vector, inflate it into a np array and return it\"\"\"",
        "\"\"\"Given a string, get it's defalted vector, inflate it, then return the\n    inflated vector\"\"\"",
        "\"\"\"Returns False when subject and verb disagree (or probably disagree)\"\"\""
    ],
    "functions": [
        "inflate",
        "text_to_vector",
        "build_model",
        "check_agreement2"
    ],
    "classes": []
}