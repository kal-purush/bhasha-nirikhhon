{
    "identifiers": [
        "edu",
        "wpi",
        "first",
        "wpilibj",
        "geometry",
        "m_translation",
        "m_rotation",
        "m_translation",
        "m_rotation",
        "translation",
        "rotation",
        "m_translation",
        "translation",
        "m_rotation",
        "rotation",
        "SuppressWarnings",
        "x",
        "y",
        "rotation",
        "m_translation",
        "x",
        "y",
        "m_rotation",
        "rotation",
        "other",
        "transformBy",
        "other",
        "m_translation",
        "m_rotation",
        "other",
        "m_translation",
        "plus",
        "other",
        "getTranslation",
        "rotateBy",
        "m_rotation",
        "m_rotation",
        "plus",
        "other",
        "getRotation",
        "other",
        "transform",
        "other",
        "transform",
        "getTranslation",
        "transform",
        "getRotation",
        "SuppressWarnings",
        "twist",
        "dx",
        "twist",
        "dx",
        "dy",
        "twist",
        "dy",
        "dtheta",
        "twist",
        "dtheta",
        "sinTheta",
        "sin",
        "dtheta",
        "cosTheta",
        "cos",
        "dtheta",
        "s",
        "c",
        "abs",
        "dtheta",
        "s",
        "dtheta",
        "dtheta",
        "c",
        "dtheta",
        "s",
        "sinTheta",
        "dtheta",
        "c",
        "cosTheta",
        "dtheta",
        "transform",
        "dx",
        "s",
        "dy",
        "c",
        "dx",
        "c",
        "dy",
        "s",
        "cosTheta",
        "sinTheta",
        "plus",
        "transform"
    ],
    "literals": [
        "\"ParameterName\"",
        "\"LocalVariableName\""
    ],
    "variables": [
        "m_translation",
        "m_rotation",
        "s",
        "c"
    ],
    "comments": [],
    "docstrings": [
        "---------------------------------------------------------------------------",
        "Copyright (c) 2019 FIRST. All Rights Reserved.",
        "Open Source Software - may be modified and shared by FRC teams. The code",
        "must be accompanied by the FIRST BSD license file in the root directory of",
        "the project.",
        "---------------------------------------------------------------------------",
        "* Represents a 2d pose containing translational and rotational elements.",
        "* Constructs a pose at the origin facing toward the positive X axis.\n   * (Translation2d{0, 0} and Rotation{0})",
        "* Constructs a pose with the specified translation and rotation.\n   *\n   * @param translation The translational component of the pose.\n   * @param rotation    The rotational component of the pose.",
        "* Convenience constructors that takes in x and y values directly instead of\n   * having to construct a Translation2d.\n   *\n   * @param x        The x component of the translational component of the pose.\n   * @param y        The y component of the translational component of the pose.\n   * @param rotation The rotational component of the pose.",
        "* Transforms the pose by the given transformation and returns the new\n   * transformed pose.\n   *\n   * <p>The matrix multiplication is as follows\n   * [x_new]    [cos, -sin, 0][transform.x]\n   * [y_new] += [sin,  cos, 0][transform.y]\n   * [t_new]    [0,    0,   1][transform.t]\n   *\n   * @param other The transform to transform the pose by.\n   * @return The transformed pose.",
        "* Returns the translation component of the transformation.\n   *\n   * @return The translational component of the pose.",
        "* Returns the rotational component of the transformation.\n   *\n   * @return The rotational component of the pose.",
        "* Transforms the pose by the given transformation and returns the new pose.\n   * See + operator for the matrix multiplication performed.\n   *\n   * @param other The transform to transform the pose by.\n   * @return The transformed pose.",
        "* Returns the other pose relative to the current pose.\n   *\n   * <p>This function can often be used for trajectory tracking or pose\n   * stabilization algorithms to get the error between the reference and the\n   * current pose.\n   *\n   * @param other The pose that is the origin of the new coordinate frame that\n   *              the current pose will be converted into.\n   * @return The current pose relative to the new origin pose.",
        "* Obtain a new Pose2d from a (constant curvature) velocity.\n   *\n   * <p>See <a href=\"https://file.tavsys.net/control/state-space-guide.pdf\">\n   * Controls Engineering in the FIRST Robotics Competition</a>\n   * section on nonlinear pose estimation for derivation.\n   *\n   * <p>The twist is a change in pose in the robot's coordinate frame since the\n   * previous pose update. When the user runs exp() on the previous known\n   * field-relative pose with the argument being the twist, the user will\n   * receive the new field-relative pose.\n   *\n   * <p>\"Exp\" represents the pose exponential, which is solving a differential\n   * equation moving the pose forward in time.\n   *\n   * @param twist The change in pose in the robot's coordinate frame since the\n   *              previous pose update. For example, if a non-holonomic robot moves forward\n   *              0.01 meters and changes angle by .5 degrees since the previous pose update,\n   *              the twist would be Twist2d{0.01, 0.0, toRadians(0.5)}\n   * @return The new pose of the robot."
    ],
    "functions": [
        "Pose2d",
        "Pose2d",
        "Pose2d",
        "Pose2d",
        "plus",
        "Translation2d",
        "getTranslation",
        "Rotation2d",
        "getRotation",
        "Pose2d",
        "transformBy",
        "Pose2d",
        "relativeTo",
        "Pose2d",
        "exp"
    ],
    "classes": [
        "Pose2d"
    ]
}