{
    "identifiers": [
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "begin",
        "exp",
        "ch",
        "exp",
        "toCharArray",
        "stack",
        "convertToPostfix",
        "size",
        "ch",
        "length",
        "begin",
        "i",
        "i",
        "size",
        "i",
        "ch",
        "i",
        "stack",
        "push",
        "ch",
        "i",
        "ch",
        "i",
        "popValue",
        "stack",
        "pop",
        "convertToPostfix",
        "convertToPostfix",
        "concat",
        "valueOf",
        "popValue",
        "popValue",
        "stack",
        "pop",
        "stack",
        "isEmpty",
        "popValue",
        "checkOperator",
        "ch",
        "i",
        "stack",
        "isEmpty",
        "stack",
        "push",
        "ch",
        "i",
        "popValue",
        "stack",
        "pop",
        "checkPriority",
        "popValue",
        "ch",
        "i",
        "convertToPostfix",
        "convertToPostfix",
        "concat",
        "valueOf",
        "popValue",
        "stack",
        "isEmpty",
        "popValue",
        "stack",
        "pop",
        "checkPriority",
        "popValue",
        "ch",
        "i",
        "stack",
        "push",
        "popValue",
        "stack",
        "push",
        "ch",
        "i",
        "checkDigital",
        "ch",
        "i",
        "i",
        "size",
        "i",
        "checkDigital",
        "ch",
        "i",
        "checkDigital",
        "ch",
        "i",
        "end",
        "i",
        "j",
        "end",
        "checkDigital",
        "ch",
        "j",
        "j",
        "j",
        "elements",
        "elements",
        "add",
        "valueOf",
        "ch",
        "j",
        "j",
        "j",
        "end",
        "begin",
        "join",
        "elements",
        "begin",
        "begin",
        "convertToPostfix",
        "convertToPostfix",
        "concat",
        "valueOf",
        "ch",
        "i",
        "stack",
        "isEmpty",
        "popValue",
        "stack",
        "pop",
        "convertToPostfix",
        "convertToPostfix",
        "concat",
        "valueOf",
        "popValue",
        "convertToPostfix",
        "computeResult",
        "convertToPostfix",
        "convertToPostfix",
        "index",
        "i",
        "i",
        "begin",
        "i",
        "index",
        "i",
        "convertToPostfix",
        "indexOf",
        "i",
        "index",
        "i",
        "ch",
        "convertToPostfix",
        "toCharArray",
        "stack",
        "result",
        "i",
        "i",
        "ch",
        "length",
        "i",
        "checkOperator",
        "ch",
        "i",
        "num2",
        "stack",
        "pop",
        "num2",
        "num1",
        "stack",
        "pop",
        "num1",
        "ch",
        "i",
        "result",
        "num2",
        "num1",
        "result",
        "num1",
        "num2",
        "result",
        "num1",
        "num2",
        "result",
        "num1",
        "num2",
        "result",
        "stack",
        "push",
        "result",
        "stop",
        "j",
        "j",
        "begin",
        "j",
        "i",
        "index",
        "j",
        "start",
        "i",
        "elements",
        "elements",
        "add",
        "valueOf",
        "ch",
        "i",
        "i",
        "i",
        "j",
        "length",
        "start",
        "i",
        "test",
        "join",
        "elements",
        "stack",
        "push",
        "valueOf",
        "test",
        "stop",
        "stop",
        "stack",
        "push",
        "ch",
        "i",
        "result",
        "result",
        "c",
        "result",
        "c",
        "result",
        "result",
        "result",
        "c",
        "num",
        "c",
        "num",
        "num",
        "num",
        "popOne",
        "checkOne",
        "popOne",
        "popOne",
        "checkOne",
        "checkOne",
        "popOne",
        "checkOne"
    ],
    "literals": [
        "\"\"",
        "\"num2\"",
        "\"\\n\"",
        "\"num1\"",
        "\"\\n\"",
        "\"\"",
        "\"\\n\""
    ],
    "variables": [
        "begin",
        "result"
    ],
    "comments": [
        "遇到左括号直接入栈",
        "遇到右括号出栈(追加到后缀表达式), 直到出栈的元素为左括号或为0",
        "第一遍结束后把栈中剩下的操作符依次出栈（追加到后缀表达式）",
        "如果是运算符，pop出栈顶的两个元素，记住先进后出"
    ],
    "docstrings": [
        "* @author Hephaest\n * @since  2019/07/02\n * JDK 1.6",
        "* 中缀表达式转换成后缀表达式\n\t * @param exp 在计算器上显示的文本 中缀表达式\n\t * @return 正确的计算结果",
        "* 遇到运算符需要判断：\n\t\t\t\t * 1.是否为空栈，是的话直接入栈\n\t\t\t\t * 2.即将入栈的运算符是否比栈顶元素优先级高\n\t\t\t\t *     是，直接入栈\n\t\t\t\t *    否，栈顶元素出栈（追加到后缀表达式），当前运算符入栈",
        "* 单个数字直接追加到后缀表达式\n\t\t\t\t * 含有不止一个数字的操作符需要做记录：\n\t\t\t\t *     1.计算该操作符的起始位置和终止位置\n\t\t\t\t *     2.把数字传到字符串数组里（全局变量，下一步需要用到）",
        "* 计算后缀表达式\n\t * @param convertToPostfix 后缀表达式的字符串\n\t * @return 计算结果",
        "* 判断是否有多位数的操作符，有的话找到在后缀表达式的初始位置\n\t\t * 如果没有的话就不会执行",
        "* 对于多位操作符，需要把单个字符连接起来然后作为一个双精度数放入栈中\n\t\t\t\t * 一位数的操作符直接放入栈即可，注意从字符变成数字时要减去48(0的字符型数据)",
        "* 判断是否是运算符\n\t * @param c 当前字符\n\t * @return 布尔型结果",
        "* 判断是否是数字\n\t * @param c 当前字符\n\t * @return 布尔型结果",
        "* 判断即将入栈的优先级是否更高\n\t * @param popOne 栈顶元素\n\t * @param checkOne 即将入栈元素\n\t * @return 布尔型结果"
    ],
    "functions": [
        "compute",
        "computeResult",
        "checkOperator",
        "checkDigital",
        "checkPriority"
    ],
    "classes": []
}