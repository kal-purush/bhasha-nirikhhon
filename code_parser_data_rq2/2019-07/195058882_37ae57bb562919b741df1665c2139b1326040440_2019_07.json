{
    "identifiers": [
        "require",
        "http",
        "req",
        "res",
        "res",
        "res",
        "res",
        "mymessage",
        "process",
        "require",
        "mymessage",
        "require",
        "Base",
        "util",
        "Sub",
        "Base",
        "Base",
        "objBase",
        "objBase",
        "objBase",
        "Sub",
        "objSub",
        "objSub",
        "require",
        "Person",
        "util",
        "obj",
        "util",
        "obj",
        "require",
        "EventEmitter",
        "setTimeout",
        "require",
        "fs",
        "err",
        "data",
        "err",
        "err",
        "data",
        "require",
        "fs",
        "data",
        "require",
        "somepackage",
        "require",
        "Hello",
        "hello",
        "hello",
        "require",
        "Hello",
        "hello",
        "hello",
        "thyName",
        "name",
        "thyName",
        "name",
        "exports",
        "Hello",
        "thyName",
        "name",
        "thyName",
        "name",
        "Hello",
        "x",
        "x",
        "a",
        "c",
        "b",
        "Hello",
        "thyName",
        "name",
        "thyName",
        "name",
        "exports",
        "exports"
    ],
    "literals": [
        "\"HelloWorld\"",
        "'%s: %d'",
        "'Hello'",
        "\"http\"",
        "'Content-Type'",
        "\"text/html\"",
        "'<h1>Node.js</h1>'",
        "\"<p>Hello World</p>\"",
        "\"HTTP server is listening at port 3000.\"",
        "\"Hello\"",
        "\"World\"",
        "\"./global\"",
        "'util'",
        "'base'",
        "'Hello '",
        "'sub'",
        "'util'",
        "'byvoid'",
        "'events'",
        "'some_event'",
        "'some_event occured.'",
        "'some_event'",
        "\"fs\"",
        "\"testIO.txt\"",
        "\"utf-8\"",
        "\"end1.\"",
        "\"fs\"",
        "\"testIO.txt\"",
        "\"utf-8\"",
        "\"end1.\"",
        "'./somepackage'",
        "\"./module1\"",
        "\"lihua\"",
        "\"./module2\"",
        "'BYVoid'",
        "'Hello '",
        "'Hello '",
        "'world'",
        "'hello '",
        "'Hello '",
        "\"Hello\"",
        "\"interface\""
    ],
    "variables": [
        "http",
        "util",
        "objBase",
        "objSub",
        "util",
        "obj",
        "EventEmitter",
        "fs",
        "fs",
        "data",
        "somepackage",
        "Hello",
        "hello",
        "Hello",
        "hello",
        "name",
        "name",
        "a",
        "b",
        "c",
        "name"
    ],
    "comments": [
        "node建一个简单的服务器",
        "1.执行脚本  node app.js",
        "2.访问 http://127.0.0.1:3000/",
        "node app.js",
        "实时监听修改 suervisor app.js",
        "默认全局对象是global,在global里定义属性就是全局属性，尽量不要使用全局属性，否则会污染其他变量",
        "process  是一个全局变量，即  global 对象的属性。它用于描述当前 Node.js 进程状态 的对象，提供了一个与操作系统的简单接口。",
        "node process.js 1991 name=byvoid --v \"Carbo Kuo\"",
        "util.inherits(constructor, superConstructor) 是一个实现对象间原型继承\n的函数。JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有\n提供对象继承的语言级别特性，而是通过原型复制来实现的",
        "objSub.sayHello();",
        "注意， Sub  仅仅继承了 Base  在原型中定义的函数，而构造函数内部创造的  base  属\n性和  sayHello  函数都没有被  Sub  继承。",
        "util.inspect(object,[showHidden],[depth],[colors]) 是一个将任意对象转换\n为字符串的方法，通常用于调试和错误输出。它至少接受一个参数  object ，即要转换的对象。\nshowHidden  是一个可选参数，如果值为  true ，将会输出更多隐藏信息。\ndepth  表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多\n少。如果不指定 depth ，默认会递归2层，指定为  null  表示将不限递归层数完整遍历对象。\n如果 color 值为  true ，输出格式将会以 ANSI 颜色编码，通常用于在终端显示更漂亮\n的效果。\n特别要指出的是， util.inspect  并不会简单地直接把对象转换为字符串，即使该对\n象定义了 toString  方法也不会调用。",
        "node inspect.js",
        "Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。",
        "异步读取文件",
        "再输出这个，说明读取文件是异步的方式",
        "先输出这个,这个可能有点违反直觉",
        "异步读取文件",
        "阻塞等待读取完成后，将文件的内容作为函数的返回值赋给 data 变量",
        "node getPackage.js",
        "node importModules1.js",
        "node importModules2.js",
        "注意，模块接口的唯一变化是使用  module.exports = Hello 代替了  exports.Hello=\nHello 。在外部引用该模块时，其接口对象就是要输出的  Hello 对象本身，而不是原先的\nexports 。",
        "事实上， exports  本身仅仅是一个普通的空对象，即 {} ，它专门用来声明接口，本\n质上是通过它为模块闭包\n① 的内部建立了一个有限的访问接口。因为它没有任何特殊的地方，\n所以可以用其他东西来代替，譬如我们上面例子中的 Hello  对象。"
    ],
    "docstrings": [],
    "functions": [
        "Base",
        "Sub",
        "Person",
        "Hello",
        "Hello"
    ],
    "classes": []
}