{
    "identifiers": [
        "flask",
        "Flask",
        "render_template",
        "request",
        "json",
        "Response",
        "jsonify",
        "jieba",
        "sqlite3",
        "csv",
        "Terry_toolkit",
        "tkit",
        "libs",
        "random",
        "choice",
        "random",
        "fun",
        "Flask",
        "request",
        "content_type",
        "startswith",
        "request",
        "get_data",
        "json",
        "loads",
        "data",
        "key",
        "value",
        "request",
        "form",
        "items",
        "key",
        "endswith",
        "key",
        "request",
        "form",
        "getlist",
        "key",
        "value",
        "data",
        "app",
        "route",
        "render_template",
        "app",
        "route",
        "sqlite3",
        "connect",
        "conn",
        "cursor",
        "c",
        "execute",
        "conn",
        "commit",
        "conn",
        "close",
        "app",
        "route",
        "methods",
        "tkit",
        "Text",
        "get_post_data",
        "data",
        "data",
        "t_text",
        "sentence_segmentation",
        "text",
        "jsonify",
        "text_array",
        "app",
        "route",
        "render_template",
        "app",
        "route",
        "request",
        "args",
        "get",
        "request",
        "args",
        "get",
        "libs",
        "Text",
        "text_part_pseg",
        "text1",
        "libs",
        "Text",
        "text_part_pseg",
        "text2",
        "open",
        "text1_pseg",
        "text2_pseg",
        "file_pseg_write_obj",
        "writelines",
        "text_pseg",
        "file_pseg_write_obj",
        "close",
        "open",
        "text1",
        "text2",
        "file_write_obj",
        "writelines",
        "text",
        "add_sentence_one",
        "text2",
        "file_write_obj",
        "close",
        "jsonify",
        "app",
        "route",
        "tkit",
        "File",
        "tfile",
        "file_List",
        "file_path",
        "choice",
        "file_list",
        "tfile",
        "open_file",
        "f",
        "jsonify",
        "text",
        "app",
        "route",
        "request",
        "args",
        "get",
        "yuce",
        "text",
        "seg_list",
        "text",
        "jsonify",
        "data",
        "app",
        "run"
    ],
    "literals": [
        "'application/json'",
        "'[]'",
        "\"/\"",
        "\"index.html\"",
        "\"/install\"",
        "'terry.db'",
        "'install end'",
        "\"/json/text_list_update\"",
        "'GET'",
        "'POST'",
        "'data'",
        "'text'",
        "\"/fenci\"",
        "\"fenci.html\"",
        "\"/json/fenci_update\"",
        "'text1'",
        "'text2'",
        "\"corpus_pseg.txt\"",
        "'a'",
        "\"\\n\"",
        "\"\\n\\n\"",
        "\"corpus.txt\"",
        "'a'",
        "\"\\n\"",
        "\"\\n\\n\"",
        "''",
        "\"/json/text_get\"",
        "\"/home/terry/pan/github/ai_writer/ai_writer/data/kw2text_mini/\"",
        "\"/json/sentence/fenci\"",
        "'text'",
        "'seg_list'",
        "'text'",
        "\"__main__\""
    ],
    "variables": [
        "app",
        "data",
        "data",
        "data",
        "data",
        "data",
        "key",
        "conn",
        "c",
        "t_text",
        "data",
        "text",
        "text_array",
        "text1",
        "text2",
        "text1_pseg",
        "text2_pseg",
        "file_pseg_write_obj",
        "text_pseg",
        "file_write_obj",
        "text",
        "tfile",
        "file_path",
        "file_list",
        "f",
        "text",
        "text",
        "seg_list",
        "data"
    ],
    "comments": [
        "print(config.get('site', 'name'))",
        "print(config.get('site', 'name'))",
        "#句子",
        "paragraph = request.args.get('text')",
        "previous_line=request.args.get('sentence')",
        "text = request.args.get('text')",
        "print(text)",
        "#python2可以用file替代open",
        "with open(\"text.csv\",\"a\") as csvfile:",
        "writer = csv.writer(csvfile)",
        "# #先写入columns_name",
        "# writer.writerow([\"index\",\"a_name\",\"b_name\"])",
        "#写入多行用writerows",
        "writer.writerows([text_array])",
        "print(config.get('site', 'name'))",
        "@app.route(\"/jianxie\")",
        "def fenci():",
        "# print(config.get('site', 'name'))",
        "return render_template(\"jianxie.html\")",
        "data= get_post_data()",
        "print('data',data)",
        "previous_line=request.args.get('sentence')",
        "text = data['text']",
        "text2 = data['text2']",
        "seg_list=[]",
        "for it in jieba.cut(text, cut_all=False):",
        "# print(\"Default Mode: \" + \"/ \".join(seg_list))  # 精确模式",
        "# print()",
        "seg_list.append(it)",
        "保存词性训练数据",
        "libs_text= libs.Text()",
        "python2可以用file替代open",
        "for var in mylist:",
        "保存训练数据",
        "python2可以用file替代open",
        "for var in mylist:",
        "创建bert使用的训练数据",
        "#随机产生一条",
        "random_sentence_one()",
        "添加一条标记数据",
        "先写入columns_name",
        "writer.writerow([\"index\",\"a_name\",\"b_name\"])",
        "写入多行用writerows",
        "writer.writerows([[text1,text2]])",
        "text1 = request.args.get('text1')",
        "text2 = request.args.get('text2')",
        "data= get_post_data()",
        "print('data',data)",
        "previous_line=request.args.get('sentence')",
        "text = data['text']",
        "text2 = data['text2']",
        "seg_list=[]",
        "# n=text.split()",
        "# print('text',n)",
        "s = text",
        "L= []",
        "for ch in s:",
        "L.append(ch)",
        "# print (L)",
        "# for it in L:",
        "for it in jieba.cut(text, cut_all=False):",
        "# print(\"Default Mode: \" + \"/ \".join(seg_list))  # 精确模式",
        "# print()",
        "seg_list.append(it)"
    ],
    "docstrings": [
        "\"\"\"\n    从请求中获取参数\n    :return:\n    \"\"\"",
        "'''CREATE TABLE COMPANY\n        (ID INT PRIMARY KEY     NOT NULL,\n        TEXT           TEXT    NOT NULL,\n        SIMPLE           TEXT    NOT NULL'''",
        "\"\"\"\n    执行提交后处理提交\n    \"\"\"",
        "\"\"\"\n    获取随机文件\n    \"\"\"",
        "\"\"\"\n    获取分词\n    \n    \"\"\""
    ],
    "functions": [
        "get_post_data",
        "home",
        "install",
        "json_text_list_update",
        "fenci",
        "json_sentence_fenci_update",
        "json_text_get",
        "json_sentence_fenci"
    ],
    "classes": []
}