{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "re",
        "copy",
        "ansible",
        "module_utils",
        "k8s",
        "common",
        "AUTH_ARG_SPEC",
        "COMMON_ARG_SPEC",
        "KubernetesAnsibleModule",
        "openshift",
        "dynamic",
        "exceptions",
        "DynamicApiError",
        "ImportError",
        "exc",
        "conditions",
        "re",
        "compile",
        "re",
        "compile",
        "condition",
        "isinstance",
        "condition",
        "ValueError",
        "isinstance",
        "condition",
        "get",
        "condition",
        "key",
        "condition",
        "keys",
        "key",
        "VALID_KEYS",
        "ValueError",
        "format",
        "key",
        "VALID_KEYS",
        "key",
        "REQUIRED",
        "condition",
        "get",
        "key",
        "ValueError",
        "format",
        "key",
        "condition",
        "ValueError",
        "format",
        "condition",
        "condition",
        "get",
        "re",
        "match",
        "CAMEL_CASE",
        "condition",
        "ValueError",
        "key",
        "condition",
        "get",
        "key",
        "re",
        "match",
        "RFC3339_datetime",
        "condition",
        "key",
        "ValueError",
        "format",
        "key",
        "condition",
        "validate_condition",
        "c",
        "c",
        "conditions",
        "condition_array",
        "KubernetesAnsibleStatusModule",
        "execute_module",
        "KubernetesAnsibleModule",
        "args",
        "kwargs",
        "KubernetesAnsibleModule",
        "args",
        "supports_check_mode",
        "kwargs",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "conditions",
        "status",
        "status",
        "get",
        "ValueError",
        "conditions",
        "status",
        "conditions",
        "get_api_client",
        "find_resource",
        "kind",
        "api_version",
        "fail",
        "resource",
        "subresources",
        "fail_json",
        "msg",
        "format",
        "resource",
        "api_version",
        "resource",
        "kind",
        "resource",
        "get",
        "name",
        "name",
        "to_dict",
        "DynamicApiError",
        "exc",
        "fail_json",
        "msg",
        "format",
        "exc",
        "error",
        "exc",
        "summary",
        "instance",
        "get",
        "force",
        "exit_json",
        "replace",
        "resource",
        "instance",
        "exit_json",
        "patch",
        "resource",
        "instance",
        "resource",
        "instance",
        "status",
        "instance",
        "instance",
        "status",
        "resource",
        "status",
        "replace",
        "body",
        "instance",
        "to_dict",
        "DynamicApiError",
        "exc",
        "fail_json",
        "msg",
        "format",
        "exc",
        "error",
        "exc",
        "summary",
        "result",
        "resource",
        "instance",
        "object_contains",
        "instance",
        "status",
        "instance",
        "merge_status",
        "instance",
        "status",
        "resource",
        "status",
        "patch",
        "body",
        "instance",
        "content_type",
        "to_dict",
        "DynamicApiError",
        "exc",
        "fail_json",
        "msg",
        "format",
        "exc",
        "error",
        "exc",
        "summary",
        "result",
        "old",
        "old",
        "get",
        "get",
        "old_conditions",
        "new_conditions",
        "copy",
        "deepcopy",
        "old_conditions",
        "condition",
        "new_conditions",
        "get_condition_idx",
        "merged",
        "condition",
        "idx",
        "condition",
        "merged",
        "append",
        "condition",
        "merged",
        "conditions",
        "name",
        "i",
        "condition",
        "conditions",
        "condition",
        "get",
        "name",
        "i",
        "obj",
        "subset",
        "obj",
        "subset",
        "all",
        "mapping",
        "get",
        "obj",
        "get",
        "k",
        "mapping",
        "obj",
        "get",
        "k",
        "v",
        "k",
        "v",
        "subset",
        "items",
        "obj",
        "subset",
        "all",
        "item",
        "obj",
        "item",
        "subset",
        "obj",
        "subset",
        "obj",
        "subset",
        "dict_is_subset",
        "list_is_subset",
        "list_is_subset",
        "values_match",
        "dict_is_subset",
        "obj",
        "subset",
        "property",
        "copy",
        "deepcopy",
        "COMMON_ARG_SPEC",
        "args",
        "pop",
        "args",
        "pop",
        "args",
        "pop",
        "args",
        "update",
        "AUTH_ARG_SPEC",
        "args",
        "update",
        "STATUS_ARG_SPEC",
        "args",
        "main"
    ],
    "literals": [
        "'metadata_version'",
        "'1.1'",
        "'status'",
        "'preview'",
        "'supported_by'",
        "'community'",
        "'type'",
        "'status'",
        "'reason'",
        "'message'",
        "'lastHeartbeatTime'",
        "'lastTransitionTime'",
        "'type'",
        "'status'",
        "r'^(?:[A-Z]*[a-z]*)+$'",
        "r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d(:\\d\\d)?(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)$'",
        "'`conditions` must be a list of objects'",
        "'status'",
        "'status'",
        "'True'",
        "'status'",
        "'False'",
        "'{} is not a valid field for a condition, accepted fields are {}'",
        "'Condition `{}` must be set'",
        "'status'",
        "'True'",
        "'False'",
        "'Unknown'",
        "'Condition `status` must be one of [\"True\", \"False\", \"Unknown\"], not {}'",
        "'status'",
        "'reason'",
        "'reason'",
        "'Condition `reason` must be a single, CamelCase word'",
        "'lastHeartBeatTime'",
        "'lastTransitionTime'",
        "'`{}` must be a RFC3339 compliant datetime string'",
        "'status'",
        "'type'",
        "'dict'",
        "'required'",
        "'conditions'",
        "'type'",
        "'required'",
        "'kind'",
        "'api_version'",
        "'name'",
        "'namespace'",
        "'force'",
        "'status'",
        "'conditions'",
        "'conditions'",
        "\"You cannot specify conditions in both the `status` and `conditions` parameters\"",
        "'conditions'",
        "'status'",
        "'Resource {}.{} does not support the status subresource'",
        "'Failed to retrieve requested object: {0}'",
        "'status'",
        "'status'",
        "'status'",
        "'result'",
        "'changed'",
        "'status'",
        "'Failed to replace status: {}'",
        "'result'",
        "'changed'",
        "'status'",
        "'result'",
        "'changed'",
        "'status'",
        "'status'",
        "'application/merge-patch+json'",
        "'Failed to replace status: {}'",
        "'result'",
        "'changed'",
        "'conditions'",
        "'conditions'",
        "'type'",
        "'conditions'",
        "'type'",
        "'default'",
        "'default'",
        "'state'",
        "'resource_definition'",
        "'src'",
        "'__main__'"
    ],
    "variables": [
        "__metaclass__",
        "ANSIBLE_METADATA",
        "DOCUMENTATION",
        "EXAMPLES",
        "RETURN",
        "VALID_KEYS",
        "REQUIRED",
        "CAMEL_CASE",
        "RFC3339_datetime",
        "condition",
        "STATUS_ARG_SPEC",
        "kind",
        "api_version",
        "name",
        "force",
        "status",
        "conditions",
        "client",
        "resource",
        "instance",
        "instance",
        "instance",
        "result",
        "instance",
        "result",
        "old_conditions",
        "new_conditions",
        "merged",
        "idx",
        "merged",
        "idx",
        "mapping",
        "args"
    ],
    "comments": [
        "!/usr/bin/python",
        "-*- coding: utf-8 -*-",
        "Make sure status is at least initialized to an empty dict"
    ],
    "docstrings": [
        "'''\n\nmodule: k8s_status\n\nshort_description: Update the status for a Kubernetes API resource\n\nversion_added: \"2.7\"\n\nauthor: \"Fabian von Feilitzsch (@fabianvf)\"\n\ndescription:\n  - Sets the status field on a Kubernetes API resource. Only should be used if you are using Ansible to\n    implement a controller for the resource being modified.\n\noptions:\n  status:\n    type: dict\n    description:\n    - A object containing `key: value` pairs that will be set on the status object of the specified resource.\n    - One of I(status) or I(conditions) is required.\n  conditions:\n    type: list\n    description:\n    - A list of condition objects that will be set on the status.conditions field of the specified resource.\n    - Unless I(force) is C(true) the specified conditions will be merged with the conditions already set on the status field of the specified resource.\n    - Each element in the list will be validated according to the conventions specified in the\n      [Kubernetes API conventions document](https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#spec-and-status).\n    - 'The fields supported for each condition are:\n      `type` (required),\n      `status` (required, one of \"True\", \"False\", \"Unknown\"),\n      `reason` (single CamelCase word),\n      `message`,\n      `lastHeartbeatTime` (RFC3339 datetime string), and\n      `lastTransitionTime` (RFC3339 datetime string).'\n    - One of I(status) or I(conditions) is required.'\n  api_version:\n    description:\n    - Use to specify the API version. Use in conjunction with I(kind), I(name), and I(namespace) to identify a\n      specific object.\n    required: yes\n    aliases:\n    - api\n    - version\n  kind:\n    description:\n    - Use to specify an object model. Use in conjunction with I(api_version), I(name), and I(namespace) to identify a\n      specific object.\n    required: yes\n  name:\n    description:\n    - Use to specify an object name. Use in conjunction with I(api_version), I(kind) and I(namespace) to identify a\n      specific object.\n    required: yes\n  namespace:\n    description:\n    - Use to specify an object namespace. Use in conjunction with I(api_version), I(kind), and I(name)\n      to identify a specific object.\n  force:\n    description:\n    - If set to C(True), the status will be set using `PUT` rather than `PATCH`, replacing the full status object.\n    default: false\n    type: bool\n  host:\n    description:\n    - Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable.\n  api_key:\n    description:\n    - Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable.\n  kubeconfig:\n    description:\n    - Path to an instance Kubernetes config file. If not provided, and no other connection\n      options are provided, the openshift client will attempt to load the default\n      configuration file from I(~/.kube/config.json). Can also be specified via K8S_AUTH_KUBECONFIG environment\n      variable.\n  context:\n    description:\n    - The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable.\n  username:\n    description:\n    - Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment\n      variable.\n  password:\n    description:\n    - Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment\n      variable.\n  cert_file:\n    description:\n    - Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment\n      variable.\n  key_file:\n    description:\n    - Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment\n      variable.\n  ssl_ca_cert:\n    description:\n    - Path to a CA certificate used to authenticate with the API. Can also be specified via K8S_AUTH_SSL_CA_CERT\n      environment variable.\n  verify_ssl:\n    description:\n    - \"Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL\n      environment variable.\"\n    type: bool\n\nrequirements:\n    - \"python >= 2.7\"\n    - \"openshift >= 0.8.1\"\n    - \"PyYAML >= 3.11\"\n'''",
        "'''\n- name: Set custom status fields on TestCR\n  k8s_status:\n    api_version: apps.example.com/v1alpha1\n    kind: TestCR\n    name: my-test\n    namespace: testing\n    status:\n        hello: world\n        custom: entries\n\n- name: Update the standard condition of an Ansible Operator\n  k8s_status:\n    api_version: apps.example.com/v1alpha1\n    kind: TestCR\n    name: my-test\n    namespace: testing\n    conditions:\n    - type: Running\n      status: \"True\"\n      reason: MigrationStarted\n      message: \"Migration from v2 to v3 has begun\"\n      lastTransitionTime: \"{{ ansible_date_time.iso8601 }}\"\n\n- name: |\n    Create custom conditions. WARNING: The default Ansible Operator status management\n    will never overwrite custom conditions, so they will persist indefinitely. If you\n    want the values to change or be removed, you will need to clean them up manually.\n  k8s_status:\n    conditions:\n    - type: Available\n      status: \"False\"\n      reason: PingFailed\n      message: \"The service did not respond to a ping\"\n\n'''",
        "'''\nresult:\n  description:\n  - If a change was made, will return the patched object, otherwise returns the instance object.\n  returned: success\n  type: complex\n  contains:\n     api_version:\n       description: The versioned schema of this representation of an object.\n       returned: success\n       type: str\n     kind:\n       description: Represents the REST resource this object represents.\n       returned: success\n       type: str\n     metadata:\n       description: Standard object metadata. Includes name, namespace, annotations, labels, etc.\n       returned: success\n       type: complex\n     spec:\n       description: Specific attributes of the object. Will vary based on the I(api_version) and I(kind).\n       returned: success\n       type: complex\n     status:\n       description: Current status details for the object.\n       returned: success\n       type: complex\n'''"
    ],
    "functions": [
        "condition_array",
        "validate_condition",
        "main",
        "execute_module",
        "replace",
        "patch",
        "merge_status",
        "get_condition_idx",
        "object_contains",
        "dict_is_subset",
        "list_is_subset",
        "values_match",
        "argspec"
    ],
    "classes": [
        "KubernetesException",
        "KubernetesAnsibleStatusModule"
    ]
}