{
    "identifiers": [
        "S3",
        "existsSync",
        "readdirSync",
        "join",
        "DataTypes",
        "Sequelize",
        "checkExtraneousTables",
        "checkModel",
        "getNumberedList",
        "Migration",
        "MigrationLock",
        "DEFAULT_NAMING_CONVENTIONS",
        "MAX_MIGRATION_DISPLAY",
        "DefaultModelNames",
        "Logger",
        "verboseLoggerDefault",
        "MigrationConfig",
        "ModelDefinition",
        "SequelizeMigrator",
        "DEFAULT_NAMING_CONVENTIONS",
        "DefaultModelNames",
        "directory",
        "getNumberedList",
        "readdirSync",
        "directory",
        "fil",
        "fil",
        "files",
        "fileName",
        "parseInt",
        "fileName",
        "fileName",
        "fileName",
        "fileName",
        "join",
        "__dirname",
        "fileName",
        "DefaultModelNames",
        "S3",
        "Logger",
        "verboseLoggerDefault",
        "DefaultModelNames",
        "MAX_MIGRATION_DISPLAY",
        "db",
        "db",
        "modelNames",
        "databaseUri",
        "ignoredTableNames",
        "forceUnlock",
        "logger",
        "verboseLogger",
        "DEFAULT_NAMING_CONVENTIONS",
        "namingConventions",
        "directory",
        "Wildebeest",
        "directory",
        "schemaDirectory",
        "restoreSchemaOnEmpty",
        "restoreSchemaOnEmpty",
        "restoreSchemaOnEmpty",
        "restoreSchemaOnEmpty",
        "maxMigrationDisplay",
        "s3",
        "Migration",
        "MigrationLock",
        "MigrationLock",
        "models",
        "models",
        "model",
        "checkModel",
        "model",
        "checkExtraneousTables",
        "models",
        "tableName",
        "results",
        "synced",
        "synced",
        "schemaName",
        "existsSync",
        "schemaName",
        "schemaName",
        "join",
        "schemaName"
    ],
    "literals": [
        "'aws-sdk'",
        "'fs'",
        "'path'",
        "'sequelize'",
        "'@wildebeest/checks'",
        "'@wildebeest/utils/getNumberedList'",
        "'@wildebeest/models/migration/Migration'",
        "'@wildebeest/models/migrationLock/MigrationLock'",
        "'./constants'",
        "'./enums'",
        "'./Logger'",
        "'./types'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'.'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "The schema definition provided does not exist: ${restoreSchemaOnEmpty}: ${this.getSchemaFile(\n          restoreSchemaOnEmpty,\n        )}",
        "string",
        "string",
        "string",
        "${schemaName}.dump"
    ],
    "variables": [
        "files",
        "results"
    ],
    "comments": [
        "external modules",
        "utils",
        "models",
        "local",
        "The database to migrate against",
        "Needed to restore schema dumps using pg_restore and pg_dump",
        "The path to the folder where the migrations themselves are defined",
        "The directory that holds schemas dump",
        "The name of the schehma file to be used to restore the database to when it is completed empty",
        "A logger that that should always log results. This is used mainly for logging errors and critical information",
        "A logger that that should only log when verbose is true",
        "Override the names of the db models",
        "One can override the naming conventions",
        "The maximum number of migrations to display on a page when rendered",
        "Blacklisted tables that should be ignored when syncing table",
        "The default AWS s3 instance to run s3 migrations against",
        "Can forcefully unlock the migration lock table (useful in testing or auto-reloading environment)",
        "Get and validate the migrations",
        "Convert to migration configurations",
        "// //",
        "Db //",
        "// //",
        "The database to migrate against",
        "Needed to restore schema dumps using pg_restore and pg_dump",
        "Override the naming conventions",
        "Names of the db models",
        "The name of the schehma file to be used to restore the database to when it is completed empty",
        "Can forcefully unlock the migration lock table (useful in testing or auto-reloading environment)",
        "/////////// //",
        "Directories //",
        "/////////// //",
        "The path to the folder where the migrations themselves are defined",
        "The directory that holds schemas dump",
        "/////// //",
        "Loggers //",
        "/////// //",
        "A logger that that should always log results. This is used mainly for logging errors and critical information",
        "A logger that that should only log when verbose is true",
        "///////////////// //",
        "Controller Routes //",
        "///////////////// //",
        "Maximum number of migrations to display on a single page",
        "// //",
        "S3 //",
        "// //",
        "The default connection to s3",
        "//// //",
        "Misc //",
        "//// //",
        "The list of migrations to run",
        "Blacklisted tables that should be ignored when syncing table",
        "The db as a sequelize migrator",
        "Save the loggers",
        "The naming conventions",
        "Index the migrations",
        "schema",
        "Controller routes",
        "The default s3",
        "Ensure the migrations table it setup",
        "Unlock if force is un",
        "Run the new migrations if auto migrate is on",
        "Check that each model is in sync",
        "Check for extra tables"
    ],
    "docstrings": [
        "*\n * ## Wildebeest Class Definition\n * The main migration runner and checking class definition\n *\n * @module Wildebeest",
        "* Only a subset of the naming conventions need to be overwritten",
        "* The opitons needed to configure a wildebeest",
        "* A migration runner interface\n * TODO move to own file",
        "* Index the migrations and validate that the numbering is correct",
        "* Initialize a wildebeest migration runner",
        "* Ensure migration tables are setup and run migrations all of the way forward\n   *\n   * @returns The schema written",
        "* Test whether the sequelize definitions are in sync with postgres\n   *\n   * @param models - The model definitions to check for\n   * @returns True if the model definitions are exactly defined in the db",
        "* Validate whether a schema exists\n   *\n   * @param schemaName - The name of the schema to checl\n   * @returns True if it exists",
        "* Validate whether a schema exists\n   *\n   * @param schemaName - The name of the schema to checl\n   * @returns The absolute path to the schema"
    ],
    "functions": [
        "indexMigrations",
        "migrate",
        "isSynced",
        "schemaExists",
        "getSchemaFile"
    ],
    "classes": [
        "Wildebeest"
    ]
}