{
    "identifiers": [
        "os",
        "re",
        "sys",
        "yaml",
        "timeit",
        "datetime",
        "uproot",
        "colorpicker",
        "tqdm",
        "tqdm",
        "timeit",
        "default_timer",
        "argparse",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "required",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "parse_args",
        "path",
        "directoryName",
        "os",
        "path",
        "isdir",
        "args",
        "eosstring",
        "path",
        "directoryName",
        "colorpicker",
        "CRED",
        "path",
        "directoryName",
        "colorpicker",
        "CEND",
        "os",
        "system",
        "path",
        "directoryName",
        "os",
        "system",
        "args",
        "eosstring",
        "path",
        "directoryName",
        "os",
        "system",
        "path",
        "directoryName",
        "os",
        "system",
        "path",
        "directoryName",
        "path",
        "fileExtension",
        "root",
        "dirs",
        "filenames",
        "os",
        "walk",
        "args",
        "eosstring",
        "path",
        "f",
        "filenames",
        "f",
        "filepath",
        "endswith",
        "fileExtension",
        "Arrayfilepath",
        "append",
        "filepath",
        "Arrayfilepath",
        "filename",
        "open",
        "filename",
        "yaml",
        "load",
        "file",
        "file",
        "close",
        "ymload",
        "YamlFileContent",
        "Array_FileNameWithFullPath",
        "path",
        "sample",
        "YamlFileContent",
        "temp",
        "append",
        "sample",
        "colorpicker",
        "CBOLD",
        "sample",
        "colorpicker",
        "CEND",
        "i",
        "files",
        "Array_FileNameWithFullPath",
        "files",
        "find",
        "sample",
        "args",
        "eosstring",
        "path",
        "files",
        "os",
        "path",
        "isfile",
        "args",
        "eosstring",
        "path",
        "files",
        "uproot",
        "open",
        "args",
        "eosstring",
        "path",
        "files",
        "keys",
        "colorpicker",
        "CGREEN",
        "files",
        "colorpicker",
        "CEND",
        "uproot",
        "open",
        "args",
        "eosstring",
        "path",
        "files",
        "otree",
        "arrays",
        "len",
        "InputArrays",
        "files",
        "find",
        "ifhaddOnly",
        "nEvents",
        "InputArrays",
        "nNegEvents",
        "InputArrays",
        "temp",
        "append",
        "files",
        "files",
        "nEvents",
        "nNegEvents",
        "colorpicker",
        "CRED",
        "files",
        "colorpicker",
        "CEND",
        "len",
        "temp",
        "append",
        "temp",
        "ListnEvents",
        "append",
        "nEvents",
        "ListnNegEvents",
        "append",
        "nNegEvents",
        "ListnEvents",
        "ListnNegEvents",
        "ListOfListsHavingRootFiles",
        "ArrayOfRootFiles",
        "ListOfListsHavingRootFiles",
        "RootFiles",
        "len",
        "ArrayOfRootFiles",
        "RootFiles",
        "temp",
        "samples",
        "i",
        "temp",
        "args",
        "eosstring",
        "path",
        "samples",
        "i",
        "temp",
        "os",
        "system",
        "temp",
        "sampleInfo",
        "append",
        "samples",
        "sampleInfo",
        "args",
        "eosstring",
        "path",
        "split",
        "args",
        "eosstring",
        "path",
        "split",
        "args",
        "eosstring",
        "path",
        "split",
        "open",
        "OutPutFile",
        "outScript",
        "write",
        "i",
        "files",
        "sampleInfo",
        "sample",
        "ymload",
        "files",
        "find",
        "sample",
        "ymload",
        "sample",
        "files",
        "ymload",
        "sample",
        "ListnEvents",
        "i",
        "ListnNegEvents",
        "i",
        "ymload",
        "sample",
        "ymload",
        "sample",
        "outScript",
        "write",
        "ymload",
        "sample",
        "StoreAreaHadd",
        "files",
        "ymload",
        "sample",
        "ListnEvents",
        "i",
        "ListnNegEvents",
        "i",
        "ymload",
        "sample",
        "ymload",
        "sample",
        "outScript",
        "close",
        "OutPutFile",
        "open",
        "SortedOutPutFile",
        "strings",
        "searchString",
        "open",
        "OutPutFile",
        "lines",
        "infile",
        "re",
        "match",
        "strings",
        "lines",
        "outScript2",
        "write",
        "lines",
        "outScript2",
        "close",
        "CheckDirectory",
        "args",
        "path",
        "args",
        "outdir",
        "GetFileNameWithPathInArray",
        "args",
        "path",
        "Array_FileNameWithFullPath",
        "LoadYamlFile",
        "YamlFileContent",
        "GetFileNeventsNnegativeEvents",
        "YamlFileContent",
        "Array_FileNameWithFullPath",
        "args",
        "path",
        "fileName",
        "nEvents",
        "nNegEvents",
        "main"
    ],
    "literals": [
        "'User inputs'",
        "'-d'",
        "'--hadd'",
        "'store_false'",
        "'Tell if you need to perform only hadd on the similar root files or not (default: False, it means it will perform hadd as well as it will generate the text file.)'",
        "'-p'",
        "'--path'",
        "'store'",
        "'/store/user/rasharma/SecondStep/Run_2017/Frameworkupdate/WWTree_2019_05_01_14h50/'",
        "'Path of store are where it will find the input root file (default = /store/user/rasharma/SecondStep/Run_2017/Frameworkupdate/WWTree_2019_05_01_14h50/).'",
        "'-s'",
        "'--save'",
        "'store'",
        "'/uscms_data/d3/rasharma/aQGC_analysis/PlottingMacros/CMSSW_9_0_1/src/PlottingCodes2017/ControlPlots/SampleFiles/'",
        "'Add path of plotting code direcotory. After making the text file it will copy the same to this directory (default = /uscms_data/d3/rasharma/aQGC_analysis/PlottingMacros/CMSSW_9_0_1/src/PlottingCodes2017/ControlPlots/SampleFiles/).'",
        "'-a'",
        "'--arrange'",
        "'store'",
        "'# name'",
        "'data'",
        "'Data'",
        "'WV_EWK'",
        "'aQGC'",
        "'Diboson'",
        "'VV'",
        "'W\\+jets'",
        "'Z\\+jets'",
        "'top'",
        "'QCD'",
        "\"Arrange the each line of the generated text file in the given order (default = ['# name', 'data', 'Data', 'WV_EWK', 'aQGC', 'Diboson', 'VV', 'W\\+jets', 'Z\\+jets', 'top', 'QCD'])\"",
        "'-o'",
        "'--outdir'",
        "'store'",
        "'HaddedFiles'",
        "'Name of output directory where it will place the hadd-ed root files (default = HaddedFiles)'",
        "'-e'",
        "'--eosstring'",
        "'store'",
        "'/eos/uscms'",
        "'Add the store area initials using which one can access it locally (default = /eos/uscms).'",
        "\"\\t\"",
        "\"#\"",
        "\"\\tDirectory \"",
        "' found. Delete it...'",
        "'eos root://cmseos.fnal.gov/ rm -r '",
        "\"\\t# list all file in main directory: Just to check if directory HaddedFiles_Test does not exists\"",
        "'ls '",
        "\"\\tCreate the directory\"",
        "'eos root://cmseos.fnal.gov/ mkdir '",
        "\"\\t\"",
        "\"#\"",
        "\"Create the directory\"",
        "'eos root://cmseos.fnal.gov/ mkdir '",
        "\"r\"",
        "\".root\"",
        "\"====================> \"",
        "\"DEBUG: 1: \"",
        "\"/\"",
        "\"/\"",
        "\"/\"",
        "\"\\nskip file: \"",
        "\"\\n\"",
        "\"/\"",
        "\"otree\"",
        "\"nEvents\"",
        "\"nNegEvents\"",
        "\"nEvents\"",
        "'Single'",
        "\"nEvents\"",
        "\"nNegEvents\"",
        "\"skip...\"",
        "\"\\nFile Not Found: \"",
        "\"\\n\"",
        "\"hadd -f \"",
        "' '",
        "\"/\"",
        "\" \"",
        "\"\"",
        "\"=============  MAKE SUMMARY    ================\"",
        "\"DibosonBoostedElMuSamples13TeV_\"",
        "\"/\"",
        "\"_\"",
        "\"/\"",
        "\"_\"",
        "\"/\"",
        "\".txt\"",
        "\"w\"",
        "\"# name           file_location  xspb/lumipb  otherscale nMCevents       nMCNegEvents    colorcode       stackit\\n\"",
        "\"name\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"CrossSection\"",
        "\"\\t1\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"ColorCode\"",
        "\"\\t\"",
        "\"StackIt\"",
        "\"name\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"CrossSection\"",
        "\"\\t1\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"ColorCode\"",
        "\"\\t\"",
        "\"StackIt\"",
        "\"\\n\"",
        "\"Sorted_\"",
        "'w'",
        "\"r\"",
        "\"Step: 1: Make list of all root files in eos.\"",
        "\"Step: 2: Get list of file names\"",
        "\".root\"",
        "\"\\n\\n\"",
        "\"DataMCInfo.yml\"",
        "\"\\n\\nYaml File content:\\n\"",
        "\"\\n\\n\"",
        "\"fileName , nEvents , nNegEvents = \"",
        "\"Step: 2: Read each root file and saves its number of events and number of negative events in each file.\"",
        "\"Step: 3: Club the root files based on the keys given in the yaml file\"",
        "\"Step: 4: Do the hadd for each clubbed list.\"",
        "\"Step: 5: Create the text file that contains all info for the plotting.\"",
        "\"__main__\""
    ],
    "variables": [
        "start",
        "parser",
        "args",
        "Arrayfilepath",
        "filepath",
        "file",
        "ymload",
        "ifhaddOnly",
        "ListnEvents",
        "ListnNegEvents",
        "temp",
        "nEvents",
        "nNegEvents",
        "otree",
        "InputArrays",
        "nEvents",
        "nNegEvents",
        "sampleInfo",
        "temp",
        "OutPutFile",
        "outScript",
        "SortedOutPutFile",
        "outScript2",
        "infile",
        "Array_FileNameWithFullPath",
        "YamlFileContent",
        "fileName",
        "nEvents",
        "nNegEvents"
    ],
    "comments": [
        "!/usr/bin/python",
        "use of uproot package. This improves the running time by more than factor of 10",
        "from colorpicker import *",
        "start timer",
        "ifhaddOnly",
        "StoreArea",
        "PlottingDirectoryPath",
        "searchString",
        "StoreAreaHadd = StoreArea+'HaddedFiles_Test/'",
        "source = \"/eos/uscms\"+StoreArea",
        "print args",
        "temp+=args.eosstring+path+'HaddedFiles_Test/'+samples[i]+' '",
        "",
        "",
        "Sort the file manually",
        "",
        "",
        "print lines,",
        "",
        "copy the created text file to the respective directory",
        "os.system('xrdcp -f '+OutPutFile+'  root://cmseos.fnal.gov/'+ StoreAreaHadd)",
        "os.system('xrdcp -f '+SortedOutPutFile+'  root://cmseos.fnal.gov/'+ StoreAreaHadd)",
        "os.system('cp '+OutPutFile+' '+ SortedOutPutFile + ' ' +PlottingDirectoryPath)",
        "Stop timer",
        "stop = timeit.default_timer()",
        "Print total time to run in minutes",
        "print 'Run Time: ',round((stop - start)/60.0,2),'min'"
    ],
    "docstrings": [],
    "functions": [
        "CheckDirectory",
        "GetFileNameWithPathInArray",
        "LoadYamlFile",
        "GetFileNeventsNnegativeEvents",
        "haddFilesInListofLists",
        "CreatePlottingTextFile",
        "SortPlottingTextFile",
        "main"
    ],
    "classes": []
}