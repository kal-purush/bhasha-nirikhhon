{
    "identifiers": [
        "com",
        "snowflake",
        "kafka",
        "connector",
        "com",
        "snowflake",
        "kafka",
        "connector",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_FLUSH_TIME_SEC_MIN",
        "com",
        "snowflake",
        "kafka",
        "connector",
        "streaming",
        "StreamingUtils",
        "STREAMING_BUFFER_FLUSH_TIME_MINIMUM_SEC",
        "com",
        "snowflake",
        "kafka",
        "connector",
        "SnowflakeSinkConnectorConfig",
        "com",
        "snowflake",
        "kafka",
        "connector",
        "streaming",
        "IngestionMethodConfig",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "org",
        "apache",
        "kafka",
        "connect",
        "sink",
        "SinkRecord",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "LOGGER",
        "LoggerFactory",
        "getLogger",
        "ingestionMethodConfig",
        "flushTimeThresholdSeconds",
        "bufferSizeThresholdBytes",
        "bufferKafkaRecordCountThreshold",
        "SECOND_TO_MILLIS",
        "TimeUnit",
        "SECONDS",
        "toMillis",
        "ingestionMethodConfig",
        "flushTimeThresholdSeconds",
        "bufferSizeThresholdBytes",
        "bufferKafkaRecordCountThreshold",
        "ingestionMethodConfig",
        "ingestionMethodConfig",
        "flushTimeThresholdSeconds",
        "flushTimeThresholdSeconds",
        "bufferSizeThresholdBytes",
        "bufferSizeThresholdBytes",
        "bufferKafkaRecordCountThreshold",
        "bufferKafkaRecordCountThreshold",
        "currentBufferSizeInBytes",
        "currentBufferSizeInBytes",
        "bufferSizeThresholdBytes",
        "currentBufferedRecordCount",
        "currentBufferedRecordCount",
        "currentBufferedRecordCount",
        "bufferKafkaRecordCountThreshold",
        "previousFlushTimeStampMs",
        "currentTimeMs",
        "currentTimeMillis",
        "currentTimeMs",
        "previousFlushTimeStampMs",
        "flushTimeThresholdSeconds",
        "SECOND_TO_MILLIS",
        "flushTimeThresholdSeconds",
        "providedSFConnectorConfig",
        "ingestionMethodConfig",
        "verifyBufferFlushTimeThreshold",
        "providedSFConnectorConfig",
        "ingestionMethodConfig",
        "verifyBufferCountThreshold",
        "providedSFConnectorConfig",
        "verifyBufferBytesThreshold",
        "providedSFConnectorConfig",
        "providedSFConnectorConfig",
        "ingestionMethodConfig",
        "providedSFConnectorConfig",
        "containsKey",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_FLUSH_TIME_SEC",
        "LOGGER",
        "error",
        "Logging",
        "logMessage",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_FLUSH_TIME_SEC",
        "providedFlushTimeSecondsInStr",
        "providedSFConnectorConfig",
        "get",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_FLUSH_TIME_SEC",
        "providedFlushTimeSecondsInConfig",
        "parseLong",
        "providedFlushTimeSecondsInStr",
        "thresholdTimeToCompare",
        "ingestionMethodConfig",
        "equals",
        "IngestionMethodConfig",
        "SNOWPIPE",
        "BUFFER_FLUSH_TIME_SEC_MIN",
        "STREAMING_BUFFER_FLUSH_TIME_MINIMUM_SEC",
        "providedFlushTimeSecondsInConfig",
        "thresholdTimeToCompare",
        "LOGGER",
        "error",
        "Logging",
        "logMessage",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_FLUSH_TIME_SEC",
        "providedFlushTimeSecondsInConfig",
        "thresholdTimeToCompare",
        "e",
        "LOGGER",
        "error",
        "Logging",
        "logMessage",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_FLUSH_TIME_SEC",
        "providedFlushTimeSecondsInStr",
        "providedSFConnectorConfig",
        "providedSFConnectorConfig",
        "containsKey",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_SIZE_BYTES",
        "LOGGER",
        "error",
        "Logging",
        "logMessage",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_COUNT_RECORDS",
        "providedBufferSizeBytesStr",
        "providedSFConnectorConfig",
        "get",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_SIZE_BYTES",
        "providedBufferSizeBytesConfig",
        "parseLong",
        "providedBufferSizeBytesStr",
        "providedBufferSizeBytesConfig",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_SIZE_BYTES_MIN",
        "LOGGER",
        "error",
        "Logging",
        "logMessage",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_SIZE_BYTES",
        "providedBufferSizeBytesConfig",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_SIZE_BYTES_MIN",
        "e",
        "LOGGER",
        "error",
        "Logging",
        "logMessage",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_SIZE_BYTES",
        "providedBufferSizeBytesStr",
        "providedSFConnectorConfig",
        "providedSFConnectorConfig",
        "containsKey",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_COUNT_RECORDS",
        "LOGGER",
        "error",
        "Logging",
        "logMessage",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_COUNT_RECORDS",
        "providedBufferCountRecordsStr",
        "providedSFConnectorConfig",
        "get",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_COUNT_RECORDS",
        "providedBufferCountRecords",
        "parseLong",
        "providedBufferCountRecordsStr",
        "providedBufferCountRecords",
        "LOGGER",
        "error",
        "Logging",
        "logMessage",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_COUNT_RECORDS",
        "providedBufferCountRecords",
        "e",
        "LOGGER",
        "error",
        "Logging",
        "logMessage",
        "SnowflakeSinkConnectorConfig",
        "BUFFER_COUNT_RECORDS",
        "providedBufferCountRecordsStr"
    ],
    "literals": [
        "\"Config {} is empty\"",
        "\"{} is {}, it should be greater than {}\"",
        "\"{} should be an integer. Invalid integer was provided:{}\"",
        "\"Config {} is empty\"",
        "\"{} is too low at {}. It must be {} or greater.\"",
        "\"Config {} should be an integer. Provided:{}\"",
        "\"Config {} is empty\"",
        "\"Config {} is {}, it should at least 1\"",
        "\"Config {} should be a positive integer. Provided:{}\""
    ],
    "variables": [
        "ingestionMethodConfig",
        "flushTimeThresholdSeconds",
        "bufferSizeThresholdBytes",
        "bufferKafkaRecordCountThreshold"
    ],
    "comments": [
        "What ingestion method is defined in connector.",
        "select appropriate threshold based on ingestion method.",
        "verify buffer.size.bytes",
        "1 byte",
        "verify buffer.count.records"
    ],
    "docstrings": [
        "* Helper class associated to runtime of Kafka Connect which can help to identify if there is a need\n * to flush the buffered records.",
        "* Set in config (Time based flush) in seconds\n   *\n   * <p>Config parameter: {@link\n   * com.snowflake.kafka.connector.SnowflakeSinkConnectorConfig#BUFFER_FLUSH_TIME_SEC}",
        "* Set in config (buffer size based flush) in bytes\n   *\n   * <p>Config parameter: {@link\n   * com.snowflake.kafka.connector.SnowflakeSinkConnectorConfig#BUFFER_SIZE_BYTES}",
        "* Set in config (Threshold before we call insertRows API) corresponds to # of records in kafka\n   *\n   * <p>Config parameter: {@link\n   * com.snowflake.kafka.connector.SnowflakeSinkConnectorConfig#BUFFER_COUNT_RECORDS}",
        "* Public constructor\n   *\n   * @param ingestionMethodConfig enum accepting ingestion method (selected in config json)\n   * @param flushTimeThresholdSeconds flush time threshold in seconds given in connector config\n   * @param bufferSizeThresholdBytes buffer size threshold in bytes given in connector config\n   * @param bufferKafkaRecordCountThreshold buffer size threshold in # of kafka records given in\n   *     connector config",
        "* Returns true if size of current buffer is more than threshold provided (Both in bytes).\n   *\n   * <p>Threshold is config parameter: {@link\n   * com.snowflake.kafka.connector.SnowflakeSinkConnectorConfig#BUFFER_SIZE_BYTES}\n   *\n   * @param currentBufferSizeInBytes current size of buffer in bytes\n   * @return true if bytes threshold has reached.",
        "* Returns true if number of ({@link SinkRecord})s in current buffer is more than threshold\n   * provided.\n   *\n   * <p>Threshold is config parameter: {@link\n   * com.snowflake.kafka.connector.SnowflakeSinkConnectorConfig#BUFFER_COUNT_RECORDS}\n   *\n   * @param currentBufferedRecordCount current size of buffer in terms of number of kafka records\n   * @return true if number of kafka threshold has reached in buffer.",
        "* If difference between current time and previous flush time is more than threshold return true.\n   *\n   * @param previousFlushTimeStampMs when were previous buffered records were flushed into internal\n   *     stage for snowpipe based implementation or previous buffered records were sent in\n   *     insertRows API of Streaming Snowpipe.\n   * @return true if time based threshold has reached.",
        "Get flush time threshold in seconds",
        "* Check if provided snowflake kafka connector buffer properties are within permissible values.\n   *\n   * <p>This method invokes three verifiers - Time based threshold, buffer size and buffer count\n   * threshold.\n   *\n   * @param providedSFConnectorConfig provided by customer\n   * @param ingestionMethodConfig ingestion method used. Check {@link IngestionMethodConfig}\n   * @return true if all thresholds are valid."
    ],
    "functions": [
        "BufferThreshold",
        "isFlushBufferedBytesBased",
        "isFlushBufferedRecordCountBased",
        "isFlushTimeBased",
        "getFlushTimeThresholdSeconds",
        "validateBufferThreshold",
        "verifyBufferFlushTimeThreshold",
        "verifyBufferBytesThreshold",
        "verifyBufferCountThreshold"
    ],
    "classes": [
        "BufferThreshold"
    ]
}