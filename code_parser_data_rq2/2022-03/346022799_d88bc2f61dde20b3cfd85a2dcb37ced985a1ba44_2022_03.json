{
    "identifiers": [
        "z3",
        "seed",
        "seed2",
        "seed",
        "seed2",
        "seed",
        "s0",
        "s1",
        "staticmethod",
        "x",
        "k",
        "x",
        "k",
        "x",
        "k",
        "Xoroshiro",
        "ulongmask",
        "seed",
        "s0",
        "s1",
        "Xoroshiro",
        "ulongmask",
        "s1",
        "s0",
        "Xoroshiro",
        "rotl",
        "s0",
        "s1",
        "s1",
        "Xoroshiro",
        "ulongmask",
        "Xoroshiro",
        "rotl",
        "s1",
        "result",
        "seed",
        "Xoroshiro",
        "rotl",
        "s1",
        "s0",
        "s1",
        "s1",
        "Xoroshiro",
        "ulongmask",
        "Xoroshiro",
        "rotl",
        "s0",
        "s1",
        "s0",
        "s0",
        "s1",
        "s0",
        "s1",
        "Xoroshiro",
        "ulongmask",
        "next",
        "Xoroshiro",
        "uintmask",
        "staticmethod",
        "x",
        "x",
        "i",
        "x",
        "x",
        "i",
        "x",
        "N",
        "uintmask",
        "Xoroshiro",
        "getMask",
        "N",
        "next",
        "mask",
        "res",
        "N",
        "next",
        "mask",
        "res",
        "mask",
        "next",
        "mask",
        "max",
        "mask",
        "next",
        "mask",
        "res",
        "max",
        "next",
        "mask",
        "res",
        "sym_s0",
        "sym_s1",
        "result",
        "sym_s0",
        "sym_s1",
        "sym_r",
        "result",
        "sym_xoroshiro128plusadvance",
        "sym_s0",
        "sym_s1",
        "sym_s0",
        "sym_s1",
        "condition",
        "sym_s0",
        "sym_s1",
        "result",
        "sym_s0",
        "sym_s1",
        "result",
        "sym_xoroshiro128plusadvance",
        "sym_s0",
        "sym_s1",
        "sym_s0",
        "sym_s1",
        "condition",
        "sym_s0",
        "sym_s1",
        "sym_s0",
        "sym_s1",
        "s1",
        "s0",
        "z3",
        "RotateLeft",
        "s0",
        "s1",
        "s1",
        "z3",
        "RotateLeft",
        "s1",
        "sym_s0",
        "sym_s1",
        "s",
        "s",
        "check",
        "z3",
        "sat",
        "s",
        "model",
        "m",
        "result",
        "append",
        "m",
        "m",
        "d",
        "s",
        "add",
        "c",
        "m",
        "d",
        "result",
        "seed",
        "rolls",
        "guaranteed_ivs",
        "Xoroshiro",
        "seed",
        "rng",
        "rand",
        "rng",
        "rand",
        "_",
        "rolls",
        "rng",
        "rand",
        "pid",
        "sidtid",
        "pid",
        "sidtid",
        "shiny",
        "i",
        "guaranteed_ivs",
        "rng",
        "rand",
        "ivs",
        "index",
        "rng",
        "rand",
        "i",
        "ivs",
        "i",
        "rng",
        "rand",
        "rng",
        "rand",
        "rng",
        "rand",
        "rng",
        "rand",
        "ec",
        "pid",
        "ivs",
        "ability",
        "gender",
        "nature",
        "shiny",
        "ec",
        "pid",
        "rolls",
        "z3",
        "Solver",
        "z3",
        "BitVecs",
        "start_s0",
        "ec",
        "sym_xoroshiro128plus",
        "sym_s0",
        "sym_s1",
        "result",
        "solver",
        "add",
        "condition",
        "sym_xoroshiro128plusadvance",
        "sym_s0",
        "sym_s1",
        "_",
        "rolls",
        "sym_xoroshiro128plus",
        "sym_s0",
        "sym_s1",
        "result",
        "pid",
        "sym_xoroshiro128plus",
        "sym_s0",
        "sym_s1",
        "result",
        "solver",
        "add",
        "condition",
        "get_models",
        "solver",
        "model",
        "start_s0",
        "as_long",
        "model",
        "models",
        "fixed_seed",
        "z3",
        "Solver",
        "z3",
        "BitVecs",
        "start_s0",
        "sym_xoroshiro128plusadvance",
        "sym_s0",
        "sym_s1",
        "fixed_seed",
        "sym_xoroshiro128plus64bit",
        "sym_s0",
        "sym_s1",
        "result",
        "solver",
        "add",
        "condition",
        "get_models",
        "solver",
        "model",
        "start_s0",
        "as_long",
        "model",
        "models",
        "shiny_rolls",
        "ec_0",
        "pid_0",
        "ivs_0",
        "ec_1",
        "pid_1",
        "ivs_1",
        "ec_0",
        "pid_0",
        "join",
        "iv",
        "iv",
        "ivs_0",
        "z3",
        "Solver",
        "z3",
        "BitVecs",
        "start_s0",
        "ec_0",
        "sym_xoroshiro128plus",
        "sym_s0",
        "sym_s1",
        "result",
        "solver",
        "add",
        "condition",
        "sym_xoroshiro128plusadvance",
        "sym_s0",
        "sym_s1",
        "_",
        "shiny_rolls",
        "sym_xoroshiro128plusadvance",
        "sym_s0",
        "sym_s1",
        "pid_0",
        "sym_xoroshiro128plus",
        "sym_s0",
        "sym_s1",
        "result",
        "solver",
        "add",
        "condition",
        "solver",
        "check",
        "z3",
        "sat",
        "solver",
        "model",
        "m",
        "start_s0",
        "as_long",
        "test_seed",
        "generate_from_seed",
        "test_seed",
        "shiny_rolls",
        "guaranteed_ivs",
        "pred_ivs",
        "ivs_0",
        "test_seed",
        "result",
        "append",
        "m",
        "m",
        "d",
        "solver",
        "add",
        "c",
        "m",
        "d",
        "group_seed",
        "rolls",
        "guaranteed_ivs",
        "Xoroshiro",
        "group_seed",
        "main_rng",
        "next",
        "main_rng",
        "next",
        "Xoroshiro",
        "main_rng",
        "next",
        "adv",
        "main_rng",
        "next",
        "main_rng",
        "next",
        "Xoroshiro",
        "generator_seed",
        "rng",
        "next",
        "generate_from_seed",
        "rng",
        "next",
        "rolls",
        "guaranteed_ivs",
        "shiny",
        "Xoroshiro",
        "main_rng",
        "next",
        "adv",
        "ec",
        "pid",
        "ivs",
        "ability",
        "gender",
        "nature",
        "Xoroshiro",
        "group_seed",
        "Xoroshiro",
        "group_rng",
        "next",
        "spawner_rng",
        "next",
        "spawner_rng",
        "next",
        "generate_from_seed",
        "fixed_seed",
        "shiny_rolls",
        "group_rng",
        "next",
        "Xoroshiro",
        "group_rng",
        "next",
        "Xoroshiro",
        "group_rng",
        "next",
        "spawner_rng",
        "next",
        "spawner_rng",
        "next",
        "generate_from_seed",
        "fixed_seed",
        "shiny_rolls",
        "find_seed",
        "shiny_rolls",
        "ec_0",
        "pid_0",
        "ivs_0",
        "ec_1",
        "pid_1",
        "ivs_1"
    ],
    "literals": [
        "\"Hardy\"",
        "\"Lonely\"",
        "\"Brave\"",
        "\"Adamant\"",
        "\"Naughty\"",
        "\"Bold\"",
        "\"Docile\"",
        "\"Relaxed\"",
        "\"Impish\"",
        "\"Lax\"",
        "\"Timid\"",
        "\"Hasty\"",
        "\"Serious\"",
        "\"Jolly\"",
        "\"Naive\"",
        "\"Modest\"",
        "\"Mild\"",
        "\"Quiet\"",
        "\"Bashful\"",
        "\"Rash\"",
        "\"Calm\"",
        "\"Gentle\"",
        "\"Sassy\"",
        "\"Careful\"",
        "\"Quirky\"",
        "'start_s0'",
        "'start_s0'",
        "f\"Pokemon 1 EC: {ec_0:08X} PID: {pid_0:08X} IVs: {'/'.join(str(iv) for iv in ivs_0)}\"",
        "'/'",
        "\"Finding possible fixed seeds based on Pokemon 1's EC/PID\"",
        "'start_s0'",
        "f\"testing: {test_seed:X}\"",
        "f\"test passed: {test_seed:X}\"",
        "\"test not passed\"",
        "\"__main__\""
    ],
    "variables": [
        "natures",
        "ulongmask",
        "uintmask",
        "seed",
        "s0",
        "s1",
        "s0",
        "s1",
        "result",
        "seed",
        "s0",
        "s1",
        "s1",
        "s0",
        "s0",
        "seed",
        "mask",
        "res",
        "res",
        "res",
        "res",
        "sym_r",
        "condition",
        "sym_s0",
        "sym_s1",
        "condition",
        "sym_s0",
        "sym_s1",
        "s0",
        "s1",
        "sym_s0",
        "sym_s1",
        "result",
        "m",
        "d",
        "c",
        "rng",
        "ec",
        "sidtid",
        "pid",
        "shiny",
        "ivs",
        "index",
        "index",
        "ivs",
        "index",
        "ivs",
        "i",
        "ability",
        "gender",
        "nature",
        "solver",
        "start_s0",
        "sym_s0",
        "sym_s1",
        "result",
        "sym_s0",
        "sym_s1",
        "condition",
        "sym_s0",
        "sym_s1",
        "sym_s0",
        "sym_s1",
        "condition",
        "result",
        "sym_s0",
        "sym_s1",
        "condition",
        "models",
        "solver",
        "start_s0",
        "sym_s0",
        "sym_s1",
        "sym_s0",
        "sym_s1",
        "result",
        "sym_s0",
        "sym_s1",
        "condition",
        "models",
        "solver",
        "start_s0",
        "sym_s0",
        "sym_s1",
        "result",
        "sym_s0",
        "sym_s1",
        "condition",
        "sym_s0",
        "sym_s1",
        "sym_s0",
        "sym_s1",
        "result",
        "sym_s0",
        "sym_s1",
        "condition",
        "result",
        "m",
        "test_seed",
        "_",
        "_",
        "pred_ivs",
        "_",
        "_",
        "_",
        "_",
        "d",
        "c",
        "main_rng",
        "main_rng",
        "generator_seed",
        "rng",
        "ec",
        "pid",
        "ivs",
        "ability",
        "gender",
        "nature",
        "shiny",
        "main_rng",
        "shiny_rolls",
        "group_seed",
        "group_rng",
        "spawner_rng",
        "slot",
        "fixed_seed",
        "ec_0",
        "pid_0",
        "ivs_0",
        "_",
        "_",
        "_",
        "_",
        "group_rng",
        "spawner_rng",
        "slot",
        "fixed_seed",
        "ec_1",
        "pid_1",
        "ivs_1",
        "_",
        "_",
        "_",
        "_"
    ],
    "comments": [
        "0~mask rand(mask + 1)",
        "0~max-1 rand(max)",
        "Constraint that makes current answer invalid",
        "rand(3) if ha possible?",
        "if set gender then dont roll",
        "EC call",
        "SIDTID call",
        "Initial PID rolls",
        "PID call",
        "Blank call",
        "Fixed Seed call",
        "EC call",
        "SIDTID call",
        "Initial PID rolls",
        "PID call",
        "models = get_models(solver)",
        "print(pred_ivs)",
        "Constraint that makes current answer invalid",
        "return result",
        "pid_ec_seeds = find_fixed_seeds(ec,pid,shiny_rolls)",
        "print(\"Possible fixed seeds:\")",
        "print(\", \".join(hex(seed) for seed in pid_ec_seeds))",
        "print()",
        "print(\"Narrowing down results based on Pokemon 1's IVs\")",
        "fixed_seed = None",
        "for seed in pid_ec_seeds:",
        "_,_,pred_ivs,_,_,_,_ = generate_from_seed(seed,shiny_rolls,guaranteed_ivs=3)",
        "if ivs == pred_ivs:",
        "print(\"Fixed seed found:\")",
        "fixed_seed = seed",
        "print(hex(fixed_seed))",
        "break",
        "if fixed_seed is None:",
        "raise Exception(\"Could not deduce fixed seed from the provided information\")",
        "_,_,_,ability,gender,nature,_ = generate_from_seed(seed,shiny_rolls)",
        "print()",
        "print(\"Predicted information for Pokemon 1\")",
        "print(f\"Fixed Seed: {seed:X}\")",
        "print(f\"EC: {ec:X} PID: {pid:X}\")",
        "print(f\"Nature: {natures[nature]} Ability: {ability+1} Gender: {gender}\")",
        "print(ivs)",
        "print()",
        "print(\"Finding possible generator seeds based on Pokemon 1's fixed seed\")",
        "generator_seeds = find_generator_seed(fixed_seed)",
        "print(\"Possible generator seeds:\")",
        "print(\", \".join(hex(seed) for seed in generator_seeds))",
        "print()",
        "print(\"Narrowing down results based on Pokemon 2\")",
        "generator_seed = None",
        "for seed in generator_seeds:",
        "group_seed = (seed - 0x82A2B175229D6A5B) & Xoroshiro.ulongmask",
        "rng = Xoroshiro(group_seed)",
        "rng.next()",
        "rng.next()",
        "rng = Xoroshiro(rng.next())",
        "rng = Xoroshiro(rng.next())",
        "rng.next()",
        "fixed_seed = rng.next()",
        "p_ec,p_pid,p_ivs,p_ability,p_gender,p_nature,p_shiny = generate_from_seed(fixed_seed,shiny_rolls,guaranteed_ivs=3)",
        "if p_ec == ec_2 and p_pid == pid_2 and p_ivs == ivs_2:",
        "print(\"Generator seed found:\")",
        "generator_seed = seed",
        "print(hex(generator_seed))",
        "print(\"Group seed:\")",
        "print(hex(group_seed))",
        "break",
        "if generator_seed is None:",
        "raise Exception(\"Could not deduce generator seed from the provided information\")",
        "print()",
        "print(\"Predicted information for Pokemon 2\")",
        "print(f\"Fixed Seed: {fixed_seed:X}\")",
        "print(f\"EC: {p_ec:X} PID: {p_pid:X}\")",
        "print(f\"Nature: {natures[p_nature]} Ability: {p_ability+1} Gender: {p_gender}\")",
        "print(p_ivs)",
        "print()",
        "adv,ec,pid,ivs,ability,gender,nature = generate_next_shiny(group_seed,shiny_rolls,3)",
        "print(f\"Next Shiny: {adv}\",",
        "f\"EC: {ec:X} PID: {pid:X}\",",
        "f\"Nature: {natures[nature]} Ability: {ability} Gender: {gender}\",",
        "f\"{'/'.join(str(iv) for iv in ivs)}\",sep=\"\\n\")",
        "advance once",
        "spawner 0",
        "spawner 1",
        "spawner 1's seed, unused",
        "shiny_rolls = int(input(\"Shiny Rolls: \"))",
        "print(\"Pokemon 1\")",
        "ec_0 = int(input(\"Encryption Constant: 0x\"),16)",
        "pid_0 = int(input(\"PID: 0x\"),16)",
        "ivs_0 = [int(iv) for iv in input(\"IVs split by '/' (ex. 31/31/31/31/31/31): \").split(\"/\")]",
        "print()",
        "print(\"Pokemon 2\")",
        "ec_1 = int(input(\"Encryption Constant: 0x\"),16)",
        "pid_1 = int(input(\"PID: 0x\"),16)",
        "ivs_1 = [int(iv) for iv in input(\"IVs split by '/' (ex. 31/31/31/31/31/31): \").split(\"/\")]"
    ],
    "docstrings": [],
    "functions": [
        "state",
        "rotl",
        "next",
        "previous",
        "nextuint",
        "getMask",
        "rand",
        "quickrand1",
        "quickrand2",
        "sym_xoroshiro128plus",
        "sym_xoroshiro128plus64bit",
        "sym_xoroshiro128plusadvance",
        "get_models",
        "generate_from_seed",
        "find_fixed_seeds",
        "find_generator_seed",
        "find_seed",
        "generate_next_shiny"
    ],
    "classes": [
        "Xoroshiro"
    ]
}