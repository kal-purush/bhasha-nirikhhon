{
    "identifiers": [
        "fastai",
        "fastai",
        "vision",
        "fastai",
        "metrics",
        "error_rate",
        "cv2",
        "torchvision",
        "transforms",
        "T",
        "PIL",
        "Image",
        "pil_img",
        "numpy",
        "np",
        "flask",
        "flask",
        "render_template",
        "flask",
        "request",
        "io",
        "pdb",
        "flask",
        "Flask",
        "app",
        "route",
        "methods",
        "request",
        "method",
        "request",
        "files",
        "image",
        "load_model",
        "image_file",
        "result",
        "render_template",
        "pred",
        "format",
        "pred",
        "render_template",
        "prediction",
        "image",
        "model",
        "load_learner",
        "model",
        "predict",
        "image",
        "app",
        "run",
        "port",
        "debug"
    ],
    "literals": [
        "\"/\"",
        "\"GET\"",
        "\"POST\"",
        "\"POST\"",
        "\"image\"",
        "'Predection = '",
        "\"index.html\"",
        "'{}'",
        "\"index.html\"",
        "''",
        "'Model_densenet121_new.pkl'",
        "\"__main__\""
    ],
    "variables": [
        "app",
        "model",
        "image_file",
        "result",
        "pred",
        "model"
    ],
    "comments": [
        "initialize our Flask application and the Keras model",
        "image = pil_img.open(io.BytesIO(image_file))",
        "image = T.ToTensor()(image)",
        "image = Image(image)",
        "CLI = cli.Prediction(image_file,paper_size).pred_result()",
        "@app.route(\"/predict\", methods=[\"POST\"])",
        "def predict():",
        "# ensure an image was properly uploaded to our endpoint",
        "if flask.request.method == \"POST\":",
        "if flask.request.files.get(\"image\"):",
        "read the image in PIL format",
        "image = flask.request.files[\"image\"].read()",
        "image = pil_img.open(io.BytesIO(image))",
        "image = T.ToTensor()(image)",
        "image = Image(image)",
        "data[\"prediction\"] = []",
        "data[\"prediction\"].append(str(model.predict(image)[0]))",
        "data[\"success\"] = True",
        "# return the data dictionary as a JSON response",
        "return flask.jsonify(data)",
        "if this is the main thread of execution first load the model and",
        "then start the server",
        "if __name__ == \"__main__\":",
        "print((\"* Flask starting server...\"",
        "\"please wait until server has fully started\"))",
        "load_model()",
        "app.run()"
    ],
    "docstrings": [],
    "functions": [
        "upload_predict",
        "load_model"
    ],
    "classes": []
}