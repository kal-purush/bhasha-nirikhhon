{
    "identifiers": [
        "WalletConnectProvider",
        "chainByID",
        "chainByNetworkId",
        "isInjected",
        "attemptInjectedChainData",
        "isInjected",
        "chainByID",
        "chainByID",
        "addNetworkProviders",
        "chainData",
        "chainData",
        "chainData",
        "providersToAdd",
        "allProviders",
        "chainData",
        "WalletConnectProvider",
        "process",
        "process",
        "allProviders",
        "getProviderOptions",
        "addNetworkProviders",
        "attemptInjectedChainData",
        "deriveChainId",
        "provider",
        "provider",
        "provider",
        "provider",
        "chainByNetworkId",
        "provider",
        "deriveSelectedAddress",
        "provider",
        "provider",
        "provider",
        "provider",
        "provider"
    ],
    "literals": [
        "\"@walletconnect/web3-provider\"",
        "\"./chain\"",
        "\"0x1\"",
        "\"walletconnect\"",
        "https://mainnet.infura.io/v3/${process.env.RPC_KEY}",
        "https://kovan.infura.io/v3/${process.env.RPC_KEY}"
    ],
    "variables": [
        "isInjected",
        "attemptInjectedChainData",
        "addNetworkProviders",
        "allProviders",
        "providersToAdd",
        "getProviderOptions",
        "deriveChainId",
        "deriveSelectedAddress"
    ],
    "comments": [
        "this will fire if window.ethereum exists, but the user is on the wrong chain",
        "if (providersToAdd.includes('portis')) {",
        "allProviders.portis = {",
        "package: Portis,",
        "options: {",
        "id: process.env.REACT_APP_PORTIS_ID || '',",
        "},",
        "};",
        "}",
        "if (providersToAdd.includes('fortmatic')) {",
        "allProviders.fortmatic = {",
        "package: Fortmatic, // required",
        "options: {",
        "key: process.env.REACT_APP_FORTMATIC_KEY || '', // required",
        "},",
        "};",
        "}",
        "else if (provider.isPortis) {",
        "return chainByNetworkId(provider._portis.config.network.chainId).chain_id;",
        "}",
        "else if (provider.isPortis) {",
        "return provider._portis._selectedAddress;",
        "}"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}