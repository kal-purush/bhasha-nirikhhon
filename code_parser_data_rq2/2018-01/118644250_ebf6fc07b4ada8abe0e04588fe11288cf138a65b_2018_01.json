{
    "identifiers": [
        "MS_IN_SEC",
        "MS_IN_MIN",
        "MS_IN_HR",
        "elementID",
        "startTime",
        "startTime",
        "time",
        "MS_IN_DAY",
        "time",
        "days",
        "MS_IN_DAY",
        "time",
        "MS_IN_HR",
        "time",
        "hours",
        "MS_IN_HR",
        "time",
        "MS_IN_MIN",
        "time",
        "minutes",
        "MS_IN_MIN",
        "time",
        "MS_IN_SEC",
        "clock",
        "days",
        "hours",
        "minutes",
        "seconds",
        "setTime",
        "setInterval",
        "setTime",
        "elementID",
        "clock",
        "createCountdown",
        "createCountdown"
    ],
    "literals": [
        "\"use strict;\"",
        "'div'",
        "\"In \"",
        "\" days \"",
        "\" hours \"",
        "\" minutes \"",
        "\" seconds\"",
        "'all-university'",
        "'2018-4-7'",
        "'engineering'",
        "'2018-4-6'"
    ],
    "variables": [
        "MS_IN_SEC",
        "MS_IN_MIN",
        "MS_IN_HR",
        "MS_IN_DAY",
        "clock",
        "time",
        "days",
        "hours",
        "minutes",
        "seconds"
    ],
    "comments": [
        "We need to know how many milliseconds are in",
        "different time units to perform our time calculations.",
        "Since these don't change, we'll save them as constants.",
        "@function createCountdown \n * This function creates a dynamic countdown clock and \n * attaches it to the DOM.\n * @param {String} elementID - the id attribute of the \n * DOM node to append the clock to\n * @param {Date} startTime - the date to count down to",
        "We create a new element (in this case, a div)",
        "to be our clock on the page.",
        "@function setTime\n     * This helper function sets the contents of our \n     * div declared above.  Because we declared it within\n     * the scope of createCountdown, a new copy of setTime \n     * is created every time createCountdown is called,  \n     * tied to different clock variables.\n     * We wouldn't want to use this pattern if createCountdown \n     * is called a lot... but since we're only doing it twice, \n     * this works well to separate the countdown process for \n     * the two clocks.",
        "We can access the clock variable from the outer",
        "scope",
        "We call setTime immediately to publish the countdown",
        "And then we call it every 1000ms to advance the clock",
        "Finally, we append our clock to the DOM node passed into",
        "us to render the clock on the page.",
        "Now that we've defined createCountdown, we need to",
        "invoke it for each countdown clock we want to create."
    ],
    "docstrings": [],
    "functions": [
        "createCountdown",
        "setTime"
    ],
    "classes": []
}