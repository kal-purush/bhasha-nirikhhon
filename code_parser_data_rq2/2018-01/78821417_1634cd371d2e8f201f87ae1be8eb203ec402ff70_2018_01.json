{
    "identifiers": [
        "os",
        "subprocess",
        "pygments",
        "highlight",
        "pygments",
        "formatters",
        "get_formatter_by_name",
        "pygments",
        "lexers",
        "get_lexer_by_name",
        "common",
        "commoncls",
        "SampleBase",
        "common",
        "commonfunc",
        "pr",
        "SampleBase",
        "get_lexer_by_name",
        "get_formatter_by_name",
        "linenos",
        "full",
        "encoding",
        "highlight",
        "code",
        "lexer",
        "formatter",
        "hasattr",
        "html",
        "html",
        "decode",
        "pr",
        "html",
        "open",
        "file_path",
        "out_fp",
        "out_fp",
        "write",
        "html",
        "subprocess",
        "check_call",
        "file_path",
        "shell",
        "preserve_file",
        "os",
        "unlink",
        "file_path",
        "Sample",
        "obj",
        "exec",
        "go"
    ],
    "literals": [
        "'python3'",
        "'html'",
        "'utf-8'",
        "'decode'",
        "'utf-8'",
        "'pygments.html'",
        "'/tmp/pygments_test.html'",
        "'w'",
        "'__main__'"
    ],
    "variables": [
        "code",
        "lexer",
        "formatter",
        "html",
        "html",
        "file_path",
        "preserve_file",
        "obj"
    ],
    "comments": [
        "--------------------------------------------------------------------------------",
        "pygments の基本的な使い方",
        "- http://pygments.org/",
        "",
        "pygments を利用する場合、必要なオブジェクトは以下の3つ",
        "- コード： ハイライト表示対象のコード",
        "- 解析器(lexer)： コードを解析するためのオブジェクト",
        "- フォーマッタ： 最終的な出力を担当するオブジェクト",
        "",
        "lexer と formatter は、各実装クラスを直接つかってもいいが",
        "以下のヘルパー関数を使用しても取得できる",
        "- pygments.lexers.get_lexer_by_name()",
        "- 例えば、言語が python の場合は、\"python\" or \"python3\" となる",
        "- http://pygments.org/docs/lexers/",
        "- pygments.formatters.get_formatter_by_name()",
        "- 例えば、HTMLで出力したい場合は \"html\" となる",
        "- http://pygments.org/docs/formatters/",
        "- HtmlFormatterは便利だが、残念な事にHTML4形式で現状出力されてしまう。",
        "",
        "必要なオブジェクトが揃ったら、後は pygments.highlight() に渡すと",
        "整形データが取得できる",
        "--------------------------------------------------------------------------------",
        "formatter に対して, 共通パラメータ [encoding] を指定した場合",
        "結果として受け取るデータの型は、bytes になる。指定していない場合、str となる。",
        "HtmlFormatter にて encoding を指定しない場合、 charset の値が None となることに注意。",
        "--------------------------------------------------------------------------------",
        "pygmentize コマンドの利用",
        "pygments をインストールすると pygmentize という専用コマンドもインストールされる。",
        "このコマンドを利用すると、pythonスクリプトを書かなくてもハイライト付きのデータが取得できる。",
        "",
        "上のコードと同じような出力を得る場合は以下のようにする",
        "$ pygmentize -f html -O linenos,full -o /tmp/pygments_test.html hello.py",
        "--------------------------------------------------------------------------------"
    ],
    "docstrings": [
        "\"\"\"\npygments に関するサンプルです。\n最も基本的な使い方を記載しています。\n\n- pythonからpygmentsの操作方法\n- pygmentize コマンドの使い方（コメントで）\n\"\"\"",
        "\"\"\"\n    pygmentsのサンプルです。\n    pythonのコードをハイライト付きでhtmlに出力します。\n    \"\"\"",
        "\"\"\"処理を実行します。\"\"\"",
        "\"\"\"\\\ndef hello():\n    print('world')\n    results = []\n    for x in range(10):\n        ressults.append(i for i in x)\n        \"\"\"",
        "\"\"\"サンプルを実行します。\"\"\""
    ],
    "functions": [
        "exec",
        "go"
    ],
    "classes": [
        "Sample"
    ]
}