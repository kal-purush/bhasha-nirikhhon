{
    "identifiers": [
        "division",
        "os",
        "os",
        "path",
        "sys",
        "json",
        "torch",
        "torch",
        "utils",
        "data",
        "data",
        "torchvision",
        "transforms",
        "transforms",
        "PIL",
        "Image",
        "ImageDraw",
        "ImageFont",
        "collections",
        "defaultdict",
        "cv2",
        "numpy",
        "np",
        "cats_id",
        "len",
        "cats_id",
        "len",
        "cats_id",
        "cats_id",
        "data",
        "Dataset",
        "root",
        "image_sets",
        "transform",
        "target_transform",
        "dataset_name",
        "root",
        "image_sets",
        "transform",
        "target_transform",
        "dataset_name",
        "os",
        "path",
        "join",
        "root",
        "os",
        "path",
        "join",
        "defaultdict",
        "os",
        "path",
        "join",
        "root",
        "image_sets",
        "open",
        "_annopath",
        "image_sets",
        "f",
        "json",
        "load",
        "f",
        "dataset",
        "keys",
        "i",
        "len",
        "anno_ID",
        "dataset",
        "anno_ID",
        "i",
        "anno",
        "anno",
        "anno",
        "anno",
        "annos",
        "anno",
        "append",
        "temp",
        "dataset",
        "keys",
        "i",
        "len",
        "img_ID",
        "dataset",
        "img_ID",
        "i",
        "img",
        "img",
        "img",
        "img",
        "img",
        "imgs",
        "img",
        "temp",
        "root_path",
        "img_id",
        "img_id",
        "annos",
        "keys",
        "index",
        "pull_item",
        "index",
        "im",
        "gt",
        "len",
        "ids",
        "index",
        "ids",
        "index",
        "annos",
        "img_id",
        "imgs",
        "img_id",
        "cv2",
        "imread",
        "_imgpath",
        "root_path",
        "img",
        "target_transform",
        "anno_transform",
        "anno",
        "img",
        "img",
        "img_id",
        "transform",
        "transform",
        "img_data",
        "bboxes",
        "labels",
        "img_data",
        "np",
        "hstack",
        "bboxes",
        "np",
        "expand_dims",
        "labels",
        "axis",
        "torch",
        "from_numpy",
        "img_data",
        "permute",
        "target",
        "img",
        "img",
        "anno",
        "height",
        "width",
        "img_id",
        "item",
        "anno",
        "bboxes",
        "append",
        "item",
        "labels",
        "append",
        "id_to_idx",
        "item",
        "np",
        "array",
        "bboxes",
        "dtype",
        "np",
        "float32",
        "np",
        "array",
        "labels",
        "bboxes",
        "width",
        "bboxes",
        "height",
        "bboxes",
        "bboxes",
        "bboxes",
        "labels",
        "index",
        "ids",
        "index",
        "imgs",
        "img_id",
        "cv2",
        "imread",
        "_imgpath",
        "root_path",
        "img",
        "cv2",
        "IMREAD_COLOR",
        "index",
        "ids",
        "index",
        "annos",
        "img_id",
        "imgs",
        "img_id",
        "anno_transform",
        "anno",
        "img",
        "img",
        "np",
        "hstack",
        "bboxes",
        "np",
        "expand_dims",
        "labels",
        "axis",
        "img_id",
        "target",
        "index",
        "torch",
        "Tensor",
        "pull_image",
        "index",
        "unsqueeze_"
    ],
    "literals": [
        "'english'",
        "'not english'",
        "'na'",
        "'english'",
        "'not english'",
        "'na'",
        "'COCO_Text'",
        "'annotations'",
        "'%s.json'",
        "'%s'",
        "'%s'",
        "'r'",
        "'anns'",
        "'anns'",
        "'id'",
        "'id'",
        "'image_id'",
        "'image_id'",
        "'category_id'",
        "'language'",
        "'bbox'",
        "'bbox'",
        "'image_id'",
        "'imgs'",
        "'imgs'",
        "'id'",
        "'id'",
        "'file_name'",
        "'file_name'",
        "'width'",
        "'width'",
        "'height'",
        "'height'",
        "'set'",
        "'set'",
        "'id'",
        "'file_name'",
        "'height'",
        "'width'",
        "'height'",
        "'width'",
        "'bbox'",
        "'category_id'",
        "'file_name'",
        "'height'",
        "'width'"
    ],
    "variables": [
        "COCO_CLASSES",
        "cats_id",
        "id_to_idx",
        "idx_to_id",
        "root",
        "image_set",
        "transform",
        "target_transform",
        "name",
        "_annopath",
        "_imgpath",
        "ids",
        "test",
        "imgs",
        "annos",
        "root_path",
        "dataset",
        "anno_ID",
        "anno",
        "temp",
        "temp",
        "temp",
        "temp",
        "temp",
        "img_ID",
        "img",
        "temp",
        "temp",
        "temp",
        "temp",
        "temp",
        "temp",
        "ids",
        "im",
        "gt",
        "h",
        "w",
        "root_path",
        "img_id",
        "anno",
        "img",
        "img_data",
        "bboxes",
        "labels",
        "bboxes",
        "labels",
        "img_data",
        "bboxes",
        "labels",
        "img_data",
        "target",
        "bboxes",
        "labels",
        "bboxes",
        "labels",
        "bboxes",
        "bboxes",
        "bboxes",
        "root_path",
        "img_id",
        "img",
        "root_path",
        "img_id",
        "anno",
        "img",
        "bboxes",
        "labels",
        "target"
    ],
    "comments": [
        "https://github.com/zhangkaij/ssd300_coco/blob/master/data/coco.py",
        "self.ids.append((root_path, img['id']))",
        "print(\"None: \", img_id, bboxes)",
        "print(img_id, bboxes)",
        "to rgb",
        "bboxes = np.array(bboxes)",
        "print(\"before /width: \", img_id, bboxes)",
        "bboxes[:, 0] = bboxes[:, 0] / width",
        "bboxes[:, 2] = bboxes[:, 2] / width",
        "bboxes[:, 1] = bboxes[:, 1] / height",
        "bboxes[:, 3] = bboxes[:, 3] / height",
        "print(\"after /width: \", img_id, bboxes, width, height)",
        "bboxes[:, 0::2] = bboxes[:, 0::2] / float(width)",
        "bboxes[:, 1::2] = bboxes[:, 1::2] / float(height)",
        "convert (x_min, y_min, w, h) to (x_min, y_min, x_max, y_max)"
    ],
    "docstrings": [
        "\"\"\"\ncats_id = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n           22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, \n           46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, \n           67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]\n\"\"\"",
        "\"\"\"COCO Detection Dataset Object\n    input is image, target is annotation\n    Arguments:\n        root (string): filepath to COCO folder.\n        image_set (string): imageset to use (eg. 'train', 'val', 'test')\n        transform (callable, optional): transformation to perform on the\n            input image\n        target_transform (callable, optional): transformation to perform on the\n            target `annotation`\n            (eg: take in caption string, return tensor of word indices)\n        dataset_name (string, optional): which dataset to load\n            (default: 'VOC2007')\n    \"\"\"",
        "'''Returns the original image at an index in tensor form\n        Note: not using self.__getitem__(), as any transformations passed in\n        could mess up this functionality.\n        Argument:\n            index (int): index of img to show\n        Return:\n            tensorized version of img, squeezed\n        '''"
    ],
    "functions": [
        "__getitem__",
        "__len__",
        "pull_item",
        "anno_transform",
        "pull_image",
        "pull_anno",
        "pull_tensor"
    ],
    "classes": [
        "CocoTextDetection"
    ]
}