{
    "identifiers": [
        "json",
        "requests",
        "time",
        "datetime",
        "datetime",
        "timedelta",
        "future",
        "standard_library",
        "install_aliases",
        "install_aliases",
        "urllib",
        "parse",
        "urljoin",
        "urllib",
        "quote",
        "ansible",
        "module_utils",
        "basic",
        "AnsibleModule",
        "message",
        "ProvisionerError",
        "message",
        "url",
        "token",
        "machine_name",
        "token",
        "format",
        "quote",
        "machine_name",
        "urljoin",
        "url",
        "format",
        "q",
        "requests",
        "get",
        "url",
        "headers",
        "headers",
        "r",
        "status_code",
        "ProvisionerError",
        "format",
        "url",
        "r",
        "status_code",
        "r",
        "reason",
        "len",
        "r",
        "json",
        "ProvisionerError",
        "format",
        "machine_name",
        "len",
        "r",
        "json",
        "ProvisionerError",
        "format",
        "machine_name",
        "r",
        "json",
        "r",
        "json",
        "url",
        "token",
        "machine_id",
        "token",
        "urljoin",
        "url",
        "format",
        "machine_id",
        "requests",
        "get",
        "url",
        "headers",
        "headers",
        "r",
        "status_code",
        "ProvisionerError",
        "format",
        "url",
        "r",
        "status_code",
        "r",
        "reason",
        "r",
        "json",
        "url",
        "token",
        "machine_id",
        "state",
        "token",
        "urljoin",
        "url",
        "format",
        "machine_id",
        "json",
        "dumps",
        "state",
        "requests",
        "post",
        "url",
        "headers",
        "headers",
        "data",
        "data",
        "r",
        "status_code",
        "ProvisionerError",
        "format",
        "url",
        "r",
        "status_code",
        "r",
        "reason",
        "machine_name",
        "required",
        "url",
        "required",
        "token",
        "required",
        "wait_for_power",
        "choices",
        "required",
        "timeout",
        "sleep",
        "force_power",
        "changed",
        "debug",
        "power_state",
        "force_powered",
        "AnsibleModule",
        "argument_spec",
        "module_args",
        "supports_check_mode",
        "check_mode",
        "result",
        "get_machine_by_name",
        "ProvisionerError",
        "e",
        "fail_json",
        "msg",
        "e",
        "result",
        "result",
        "machine",
        "datetime",
        "utcnow",
        "timedelta",
        "seconds",
        "datetime",
        "utcnow",
        "max_end_time",
        "get_power_state",
        "machine_id",
        "machine",
        "ProvisionerError",
        "e",
        "fail_json",
        "msg",
        "e",
        "result",
        "power_state",
        "power_state",
        "exit_json",
        "result",
        "time",
        "sleep",
        "change_power_state",
        "machine_id",
        "machine",
        "state",
        "ProvisionerError",
        "e",
        "fail_json",
        "msg",
        "e",
        "result",
        "i",
        "time",
        "sleep",
        "get_power_state",
        "machine_id",
        "machine",
        "ProvisionerError",
        "e",
        "fail_json",
        "msg",
        "e",
        "result",
        "power_state",
        "power_state",
        "exit_json",
        "result",
        "power_state",
        "fail_json",
        "msg",
        "format",
        "result",
        "power_state",
        "fail_json",
        "msg",
        "format",
        "result",
        "run_module",
        "main"
    ],
    "literals": [
        "'metadata_version'",
        "'1.1'",
        "'status'",
        "'preview'",
        "'supported_by'",
        "'community'",
        "'Authorization'",
        "'(= name \"{}\")'",
        "\"/api/v1/machine?q={}&show_all=false\"",
        "'Error fetching {}, HTTP {} {}'",
        "'Error no assigned machine found with name \"{}\"'",
        "'Error more than one machine found with name \"{}\", {}'",
        "'Authorization'",
        "\"/api/v1/machine/{}/power\"",
        "'Error posting {}, HTTP {} {}'",
        "'Authorization'",
        "\"/api/v1/machine/{}/power\"",
        "'state'",
        "'Error posting {}, HTTP {} {}'",
        "'str'",
        "'str'",
        "'str'",
        "'str'",
        "'on'",
        "'off'",
        "'int'",
        "'int'",
        "'bool'",
        "'url'",
        "'token'",
        "'machine_name'",
        "'debug'",
        "'machine'",
        "'timeout'",
        "'url'",
        "'token'",
        "'id'",
        "'state'",
        "'wait_for_power'",
        "'power_state'",
        "'sleep'",
        "'force_power'",
        "'url'",
        "'token'",
        "'id'",
        "'wait_for_power'",
        "'url'",
        "'token'",
        "'id'",
        "'state'",
        "'wait_for_power'",
        "'changed'",
        "'force_powered'",
        "'power_state'",
        "'power_state'",
        "'Failed to force power {} after 60 seconds.'",
        "'wait_for_power'",
        "'power_state'",
        "'Wait for power {} timed out after {} seconds.'",
        "'wait_for_power'",
        "'timeout'",
        "'__main__'"
    ],
    "variables": [
        "ANSIBLE_METADATA",
        "DOCUMENTATION",
        "EXAMPLES",
        "RETURN",
        "headers",
        "q",
        "url",
        "r",
        "headers",
        "url",
        "r",
        "headers",
        "url",
        "data",
        "r",
        "module_args",
        "result",
        "machine",
        "max_end_time",
        "power_state",
        "result",
        "power_state",
        "result",
        "result",
        "result",
        "result",
        "result"
    ],
    "comments": [
        "!/usr/bin/python",
        "nopep8",
        "nopep8",
        "nopep8",
        "Look up machine, verify assignment",
        "Wait for power on/off state with timeout.",
        "Check if power state changed correctly."
    ],
    "docstrings": [
        "'''\n---\nmodule: mr-provisioner-power\n\nshort_description: Wait for power on/off.\n\ndescription:\n    - Wait for power on/off.\n    - Suppot to force power on/off when timeout reached.\n\noptions:\n    machine_name:\n        description: Machine name\n        required: true\n    url:\n        description: url to provisioner instance in the form of http://172.27.80.1:5000/\n        required: true\n    token:\n        description: Mr. Provisioner auth token\n        required: true\n    wait_for_power:\n        description: Desired power state\n        required: true\n        choices:\n            - on: wait for system power on\n            - off: wait for system power off\n    timeout:\n        description: Maximum number of seconds before interrupt request.\n        required: false\n        default: 21600\n    sleep:\n        description:  Number of seconds to sleep between checks.\n        required: false\n        default: 300\n    force_power:\n        description: Force power to the state defined in wait_for_power.\n        required: false\n        choices: ['true', 'false']\n        default: false\n\nauthor:\n    - Dan Rue <dan.rue@linaro.org>\n    - Chase Qi <chase.qi@linaro.org>\n'''",
        "'''\n# Wait until machine is powered off.\n- name: Wait for power off\ndelegate_to: localhost\nmr_provisioner_power:\n  machine_name: \"{{ inventory_hostname }}\"\n  url: \"{{ mr_provisioner_url }}\"\n  token: \"{{ mr_provisioner_auth_token }}\"\n  wait_for_power: off\n  timeout: 3600\n  sleep: 300\n  force_power: true\nregister: result\n- debug: var=result\n'''",
        "'''\n\n'''",
        "\"\"\" Look up machine by name \"\"\"",
        "\"\"\" Look up power state by machine ID \"\"\"",
        "\"\"\" Change power state by machine ID \"\"\""
    ],
    "functions": [
        "get_machine_by_name",
        "get_power_state",
        "change_power_state",
        "run_module",
        "main"
    ],
    "classes": [
        "ProvisionerError"
    ]
}