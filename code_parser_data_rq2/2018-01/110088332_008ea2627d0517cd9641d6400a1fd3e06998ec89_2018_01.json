{
    "identifiers": [
        "java",
        "awt",
        "java",
        "awt",
        "javax",
        "swing",
        "java",
        "util",
        "javax",
        "xml",
        "parsers",
        "org",
        "w3c",
        "dom",
        "java",
        "io",
        "args",
        "content",
        "setContentPane",
        "content",
        "pack",
        "screenSize",
        "Toolkit",
        "getDefaultToolkit",
        "getScreenSize",
        "setLocation",
        "screenSize",
        "width",
        "getWidth",
        "screenSize",
        "height",
        "getHeight",
        "setDefaultCloseOperation",
        "JFrame",
        "EXIT_ON_CLOSE",
        "setResizable",
        "setVisible",
        "newButton",
        "resignButton",
        "saveButton",
        "loadButton",
        "message",
        "setLayout",
        "setPreferredSize",
        "setBackground",
        "board",
        "add",
        "board",
        "add",
        "newButton",
        "add",
        "resignButton",
        "add",
        "saveButton",
        "add",
        "loadButton",
        "add",
        "message",
        "board",
        "setBounds",
        "newButton",
        "setBounds",
        "resignButton",
        "setBounds",
        "saveButton",
        "setBounds",
        "loadButton",
        "setBounds",
        "message",
        "setBounds",
        "fromRow",
        "fromCol",
        "toRow",
        "toCol",
        "r1",
        "c1",
        "r2",
        "c2",
        "fromRow",
        "r1",
        "fromCol",
        "c1",
        "toRow",
        "r2",
        "toCol",
        "c2",
        "fromRow",
        "toRow",
        "fromRow",
        "toRow",
        "board",
        "gameInProgress",
        "currentPlayer",
        "selectedRow",
        "selectedCol",
        "legalMoves",
        "setBackground",
        "Color",
        "BLACK",
        "addMouseListener",
        "newButton",
        "newButton",
        "addActionListener",
        "resignButton",
        "resignButton",
        "addActionListener",
        "saveButton",
        "saveButton",
        "addActionListener",
        "loadButton",
        "loadButton",
        "addActionListener",
        "message",
        "JLabel",
        "CENTER",
        "message",
        "setFont",
        "Font",
        "BOLD",
        "message",
        "setForeground",
        "Color",
        "GREEN",
        "board",
        "doNewGame",
        "e",
        "src",
        "e",
        "getSource",
        "src",
        "newButton",
        "doNewGame",
        "src",
        "resignButton",
        "doResign",
        "src",
        "saveButton",
        "doSave",
        "src",
        "loadButton",
        "doLoad",
        "gameInProgress",
        "message",
        "setText",
        "board",
        "setUpGame",
        "currentPlayer",
        "Data",
        "RED",
        "legalMoves",
        "board",
        "getLegalMoves",
        "Data",
        "RED",
        "selectedRow",
        "message",
        "setText",
        "gameInProgress",
        "newButton",
        "setEnabled",
        "resignButton",
        "setEnabled",
        "saveButton",
        "setEnabled",
        "loadButton",
        "setEnabled",
        "repaint",
        "gameInProgress",
        "message",
        "setText",
        "currentPlayer",
        "Data",
        "RED",
        "gameOver",
        "gameOver",
        "saveDir",
        "getProperty",
        "saveFile",
        "saveDir",
        "saveDir",
        "exists",
        "saveDir",
        "mkdir",
        "e",
        "message",
        "setText",
        "e",
        "saveFile",
        "currentPlayer",
        "row",
        "row",
        "row",
        "col",
        "col",
        "col",
        "row",
        "col",
        "board",
        "board",
        "row",
        "col",
        "flush",
        "e",
        "e",
        "e",
        "e",
        "loadButton",
        "setEnabled",
        "loadDir",
        "getProperty",
        "loadFile",
        "loadDir",
        "newBoard",
        "loadFile",
        "exists",
        "message",
        "setText",
        "message",
        "setText",
        "loadFile",
        "getName",
        "reader",
        "DocumentBuilderFactory",
        "newInstance",
        "newDocumentBuilder",
        "xmldoc",
        "reader",
        "parse",
        "loadFile",
        "root",
        "xmldoc",
        "getDocumentElement",
        "root",
        "getTagName",
        "equals",
        "nodes",
        "root",
        "getChildNodes",
        "i",
        "i",
        "nodes",
        "getLength",
        "i",
        "nodes",
        "item",
        "i",
        "data",
        "nodes",
        "item",
        "i",
        "data",
        "getTagName",
        "equals",
        "currentPlayer",
        "parseInt",
        "data",
        "getAttribute",
        "data",
        "getTagName",
        "equals",
        "children",
        "data",
        "getChildNodes",
        "j",
        "j",
        "children",
        "getLength",
        "j",
        "children",
        "item",
        "j",
        "square",
        "children",
        "item",
        "j",
        "square",
        "getTagName",
        "equals",
        "row",
        "parseInt",
        "square",
        "getAttribute",
        "col",
        "parseInt",
        "square",
        "getAttribute",
        "value",
        "parseInt",
        "square",
        "getAttribute",
        "newBoard",
        "board",
        "row",
        "col",
        "value",
        "e",
        "message",
        "setText",
        "e",
        "player",
        "currentPlayer",
        "board",
        "BLACK",
        "player",
        "player",
        "board",
        "newBoard",
        "legalMoves",
        "board",
        "getLegalMoves",
        "currentPlayer",
        "selectedRow",
        "gameInProgress",
        "newButton",
        "setEnabled",
        "resignButton",
        "setEnabled",
        "saveButton",
        "setEnabled",
        "loadButton",
        "setEnabled",
        "message",
        "setText",
        "player",
        "repaint",
        "message",
        "setText",
        "newButton",
        "setEnabled",
        "resignButton",
        "setEnabled",
        "saveButton",
        "setEnabled",
        "loadButton",
        "setEnabled",
        "gameInProgress",
        "row",
        "col",
        "i",
        "i",
        "legalMoves",
        "length",
        "i",
        "legalMoves",
        "i",
        "fromRow",
        "row",
        "legalMoves",
        "i",
        "fromCol",
        "col",
        "selectedRow",
        "row",
        "selectedCol",
        "col",
        "currentPlayer",
        "Data",
        "RED",
        "message",
        "setText",
        "message",
        "setText",
        "repaint",
        "selectedRow",
        "message",
        "setText",
        "i",
        "i",
        "legalMoves",
        "length",
        "i",
        "legalMoves",
        "i",
        "fromRow",
        "selectedRow",
        "legalMoves",
        "i",
        "fromCol",
        "selectedCol",
        "legalMoves",
        "i",
        "toRow",
        "row",
        "legalMoves",
        "i",
        "toCol",
        "col",
        "doMakeMove",
        "legalMoves",
        "i",
        "message",
        "setText",
        "move",
        "board",
        "makeMove",
        "move",
        "move",
        "isJump",
        "legalMoves",
        "board",
        "getLegalJumpsFrom",
        "currentPlayer",
        "move",
        "toRow",
        "move",
        "toCol",
        "legalMoves",
        "currentPlayer",
        "Data",
        "RED",
        "message",
        "setText",
        "message",
        "setText",
        "selectedRow",
        "move",
        "toRow",
        "selectedCol",
        "move",
        "toCol",
        "repaint",
        "currentPlayer",
        "Data",
        "RED",
        "currentPlayer",
        "Data",
        "BLACK",
        "legalMoves",
        "board",
        "getLegalMoves",
        "Data",
        "BLACK",
        "legalMoves",
        "gameOver",
        "legalMoves",
        "isJump",
        "message",
        "setText",
        "message",
        "setText",
        "currentPlayer",
        "Data",
        "RED",
        "legalMoves",
        "board",
        "getLegalMoves",
        "Data",
        "RED",
        "legalMoves",
        "gameOver",
        "legalMoves",
        "isJump",
        "message",
        "setText",
        "message",
        "setText",
        "selectedRow",
        "legalMoves",
        "sameStartSquare",
        "i",
        "i",
        "legalMoves",
        "length",
        "i",
        "legalMoves",
        "i",
        "fromRow",
        "legalMoves",
        "fromRow",
        "legalMoves",
        "i",
        "fromCol",
        "legalMoves",
        "fromCol",
        "sameStartSquare",
        "sameStartSquare",
        "selectedRow",
        "legalMoves",
        "fromRow",
        "selectedCol",
        "legalMoves",
        "fromCol",
        "repaint",
        "g",
        "g2",
        "g",
        "g2",
        "setRenderingHint",
        "RenderingHints",
        "KEY_ANTIALIASING",
        "RenderingHints",
        "VALUE_ANTIALIAS_ON",
        "g",
        "setFont",
        "Font",
        "PLAIN",
        "g",
        "setColor",
        "Color",
        "BLACK",
        "g",
        "drawRect",
        "getSize",
        "width",
        "getSize",
        "height",
        "g",
        "drawRect",
        "getSize",
        "width",
        "getSize",
        "height",
        "row",
        "row",
        "row",
        "col",
        "col",
        "col",
        "row",
        "col",
        "g",
        "setColor",
        "Color",
        "LIGHT_GRAY",
        "g",
        "setColor",
        "Color",
        "GRAY",
        "g",
        "fillRect",
        "col",
        "row",
        "board",
        "pieceAt",
        "row",
        "col",
        "Data",
        "RED",
        "g",
        "setColor",
        "Color",
        "RED",
        "g",
        "fillOval",
        "col",
        "row",
        "Data",
        "BLACK",
        "g",
        "setColor",
        "Color",
        "BLACK",
        "g",
        "fillOval",
        "col",
        "row",
        "Data",
        "RED_KING",
        "g",
        "setColor",
        "Color",
        "RED",
        "g",
        "fillOval",
        "col",
        "row",
        "g",
        "setColor",
        "Color",
        "WHITE",
        "g",
        "drawString",
        "col",
        "row",
        "Data",
        "BLACK_KING",
        "g",
        "setColor",
        "Color",
        "BLACK",
        "g",
        "fillOval",
        "col",
        "row",
        "g",
        "setColor",
        "Color",
        "WHITE",
        "g",
        "drawString",
        "col",
        "row",
        "gameInProgress",
        "g",
        "setColor",
        "Color",
        "CYAN",
        "i",
        "i",
        "legalMoves",
        "length",
        "i",
        "g",
        "drawRect",
        "legalMoves",
        "i",
        "fromCol",
        "legalMoves",
        "i",
        "fromRow",
        "g",
        "drawRect",
        "legalMoves",
        "i",
        "fromCol",
        "legalMoves",
        "i",
        "fromRow",
        "selectedRow",
        "g",
        "setColor",
        "Color",
        "WHITE",
        "g",
        "drawRect",
        "selectedCol",
        "selectedRow",
        "g",
        "drawRect",
        "selectedCol",
        "selectedRow",
        "g",
        "setColor",
        "Color",
        "GREEN",
        "i",
        "i",
        "legalMoves",
        "length",
        "i",
        "legalMoves",
        "i",
        "fromCol",
        "selectedCol",
        "legalMoves",
        "i",
        "fromRow",
        "selectedRow",
        "g",
        "drawRect",
        "legalMoves",
        "i",
        "toCol",
        "legalMoves",
        "i",
        "toRow",
        "g",
        "drawRect",
        "legalMoves",
        "i",
        "toCol",
        "legalMoves",
        "i",
        "toRow",
        "e",
        "gameInProgress",
        "message",
        "setText",
        "col",
        "e",
        "getX",
        "row",
        "e",
        "getY",
        "col",
        "col",
        "row",
        "row",
        "doClickSquare",
        "row",
        "col",
        "e",
        "e",
        "e",
        "e",
        "EMPTY",
        "RED",
        "RED_KING",
        "BLACK",
        "BLACK_KING",
        "board",
        "board",
        "setUpGame",
        "row",
        "row",
        "row",
        "col",
        "col",
        "col",
        "row",
        "col",
        "row",
        "board",
        "row",
        "col",
        "BLACK",
        "row",
        "board",
        "row",
        "col",
        "RED",
        "board",
        "row",
        "col",
        "EMPTY",
        "board",
        "row",
        "col",
        "EMPTY",
        "row",
        "col",
        "board",
        "row",
        "col",
        "move",
        "makeMove",
        "move",
        "fromRow",
        "move",
        "fromCol",
        "move",
        "toRow",
        "move",
        "toCol",
        "fromRow",
        "fromCol",
        "toRow",
        "toCol",
        "board",
        "toRow",
        "toCol",
        "board",
        "fromRow",
        "fromCol",
        "board",
        "fromRow",
        "fromCol",
        "EMPTY",
        "fromRow",
        "toRow",
        "fromRow",
        "toRow",
        "jumpRow",
        "fromRow",
        "toRow",
        "jumpCol",
        "fromCol",
        "toCol",
        "board",
        "jumpRow",
        "jumpCol",
        "EMPTY",
        "toRow",
        "board",
        "toRow",
        "toCol",
        "RED",
        "board",
        "toRow",
        "toCol",
        "RED_KING",
        "toRow",
        "board",
        "toRow",
        "toCol",
        "BLACK",
        "board",
        "toRow",
        "toCol",
        "BLACK_KING",
        "player",
        "player",
        "RED",
        "player",
        "BLACK",
        "playerKing",
        "player",
        "RED",
        "playerKing",
        "RED_KING",
        "playerKing",
        "BLACK_KING",
        "moves",
        "row",
        "row",
        "row",
        "col",
        "col",
        "col",
        "board",
        "row",
        "col",
        "player",
        "board",
        "row",
        "col",
        "playerKing",
        "canJump",
        "player",
        "row",
        "col",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "add",
        "row",
        "col",
        "row",
        "col",
        "canJump",
        "player",
        "row",
        "col",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "add",
        "row",
        "col",
        "row",
        "col",
        "canJump",
        "player",
        "row",
        "col",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "add",
        "row",
        "col",
        "row",
        "col",
        "canJump",
        "player",
        "row",
        "col",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "add",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "size",
        "row",
        "row",
        "row",
        "col",
        "col",
        "col",
        "board",
        "row",
        "col",
        "player",
        "board",
        "row",
        "col",
        "playerKing",
        "canMove",
        "player",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "add",
        "row",
        "col",
        "row",
        "col",
        "canMove",
        "player",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "add",
        "row",
        "col",
        "row",
        "col",
        "canMove",
        "player",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "add",
        "row",
        "col",
        "row",
        "col",
        "canMove",
        "player",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "add",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "size",
        "moveArray",
        "moves",
        "size",
        "i",
        "i",
        "moves",
        "size",
        "i",
        "moveArray",
        "i",
        "moves",
        "get",
        "i",
        "moveArray",
        "player",
        "row",
        "col",
        "player",
        "RED",
        "player",
        "BLACK",
        "playerKing",
        "player",
        "RED",
        "playerKing",
        "RED_KING",
        "playerKing",
        "BLACK_KING",
        "moves",
        "board",
        "row",
        "col",
        "player",
        "board",
        "row",
        "col",
        "playerKing",
        "canJump",
        "player",
        "row",
        "col",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "add",
        "row",
        "col",
        "row",
        "col",
        "canJump",
        "player",
        "row",
        "col",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "add",
        "row",
        "col",
        "row",
        "col",
        "canJump",
        "player",
        "row",
        "col",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "add",
        "row",
        "col",
        "row",
        "col",
        "canJump",
        "player",
        "row",
        "col",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "add",
        "row",
        "col",
        "row",
        "col",
        "moves",
        "size",
        "moveArray",
        "moves",
        "size",
        "i",
        "i",
        "moves",
        "size",
        "i",
        "moveArray",
        "i",
        "moves",
        "get",
        "i",
        "moveArray",
        "player",
        "r1",
        "c1",
        "r2",
        "c2",
        "r3",
        "c3",
        "r3",
        "r3",
        "c3",
        "c3",
        "board",
        "r3",
        "c3",
        "EMPTY",
        "player",
        "RED",
        "board",
        "r1",
        "c1",
        "RED",
        "r3",
        "r1",
        "board",
        "r2",
        "c2",
        "BLACK",
        "board",
        "r2",
        "c2",
        "BLACK_KING",
        "board",
        "r1",
        "c1",
        "BLACK",
        "r3",
        "r1",
        "board",
        "r2",
        "c2",
        "RED",
        "board",
        "r2",
        "c2",
        "RED_KING",
        "player",
        "r1",
        "c1",
        "r2",
        "c2",
        "r2",
        "r2",
        "c2",
        "c2",
        "board",
        "r2",
        "c2",
        "EMPTY",
        "player",
        "RED",
        "board",
        "r1",
        "c1",
        "RED",
        "r2",
        "r1",
        "board",
        "r1",
        "c1",
        "BLACK",
        "r2",
        "r1"
    ],
    "literals": [
        "\"chp11_6\"",
        "\"New Game\"",
        "\"Resign\"",
        "\"Save Game\"",
        "\"Load Game\"",
        "\"\"",
        "\"Serif\"",
        "\"You must finish the current game first!\"",
        "\"Red, make your move.\"",
        "\"There is no game in progress!\"",
        "\"Red resigns, Black wins.\"",
        "\"Black resigns, Red wins.\"",
        "\"user.dir\"",
        "\"/saves\"",
        "\"save_file.xml\"",
        "\"Could not save game: \"",
        "\"<?xml version=\\\"1.0\\\"?>\"",
        "\"<checkers_save_file>\"",
        "\"  <player value='\"",
        "\"'/>\"",
        "\"  <board>\"",
        "\"    <square row='\"",
        "\"' \"",
        "\"col='\"",
        "\"' \"",
        "\"data='\"",
        "\"'/>\"",
        "\"  </board>\"",
        "\"</checkers_save_file>\"",
        "\"An error occurred while saving: \"",
        "\"An error occurred while saving: \"",
        "\"user.dir\"",
        "\"/saves\"",
        "\"save_file.xml\"",
        "\"No save file found...\"",
        "\"Loading saved game from \"",
        "\"checkers_save_file\"",
        "\"player\"",
        "\"value\"",
        "\"board\"",
        "\"square\"",
        "\"row\"",
        "\"col\"",
        "\"data\"",
        "\"Error loading game: \"",
        "\"Black\"",
        "\"Red\"",
        "\"Game loaded, it is \"",
        "\"'s turn\"",
        "\"Red, make your move.\"",
        "\"Black, make your move.\"",
        "\"Click the piece you want to move.\"",
        "\"Click the square you want to move to.\"",
        "\"Red, you must continue jumping.\"",
        "\"Black, you must continue jumping\"",
        "\"Black has no moves, Red wins.\"",
        "\"Black, you must jump.\"",
        "\"Black, make your move.\"",
        "\"Red has no moves, Black wins.\"",
        "\"Red, you must jump.\"",
        "\"Red, make your move.\"",
        "\"Times New Roman\"",
        "\"K\"",
        "\"K\"",
        "\"Click 'New game' to start a new game.\""
    ],
    "variables": [
        "newButton",
        "resignButton",
        "saveButton",
        "loadButton",
        "message",
        "fromRow",
        "fromCol",
        "toRow",
        "toCol",
        "board",
        "gameInProgress",
        "currentPlayer",
        "selectedRow",
        "selectedCol",
        "legalMoves",
        "player",
        "board",
        "playerKing",
        "playerKing"
    ],
    "comments": [
        "end main",
        "---------------------------------------------------------------------",
        "end constructor",
        "--------------------  Nested Classes -------------------------------",
        "end Move",
        "The data for the checkers board is kept here.",
        "This board is also responsible for generating",
        "lists of legal moves",
        "end doNewGame()",
        "end doResign()",
        "custom message for this case?",
        "end doSave()",
        "end doLoad()",
        "end gameOver()",
        "end doClickSquare()",
        "end doMakeMove()",
        "end paintComponent()",
        "end mousePressed()",
        "end Board",
        "end setUpGame()",
        "end pieceAt()",
        "end makeMove()",
        "The move is a jump",
        "end makeMove()",
        "end getLegalMoves()",
        "end getLegalJumpsFrom()",
        "end canJump()",
        "end canMove()",
        "end Data",
        "end class chp11_6"
    ],
    "docstrings": [
        "* This panel lets two users play checkers against each other.\n * Red always starts the game.  If a player can jump an opponent's\n * piece, then the player must jump.  When a player can make no more\n * moves, the game ends.\n *\n * The class has a main() routine that lets it be run as a stand-alone\n * application.",
        "* Main routine makes it possible to run Checkers as a stand-alone\n   * application.  Opens a window showing a Checkers panel; the program\n   * ends when the user closes the window.",
        "* The constructor creates the Board (which in turn creates and manages\n   * the buttons and message label), adds all the components, and sets\n   * the bounds of the components.  A null layout is used.  (This is\n   * the only thing that is done in the main Checkers class.)",
        "Create the components and add them to the panel.",
        "Set the position and size of each component by calling\n    its setBounds() method.",
        "* A Move object represents a move in the game of Checkers.\n   * It holds the row and column of the piece that is to be moved\n   * and the row and column of the square to which it is to be moved.\n   * (This class makes no guarantee that the move is legal.)",
        "* Test whether this move is a jump.  It is assumed that\n       * the move is legal.  In a jump, the piece moves two\n       * rows.  (In a regular move, it only moves one row.)",
        "* This panel displays a 320-by-320 checkerboard pattern with\n   * a 2-pixel black border.  It is assumed that the size of the\n   * panel is set to exactly 328-by-328 pixels.  This class does\n   * the work of letting the users play checkers, and it displays\n   * the checkerboard.",
        "The next three variables are valid only when the game is in progress.",
        "* Constructor.  Create the buttons and label.  Listens for mouse\n     * clicks and for clicks on the buttons.  Create the board and\n     * start the first game.",
        "* Respond to user's click on one of the two buttons.",
        "* Start a new game",
        "* Current player resigns.  Game ends.  Opponent wins.",
        "* The game ends.  The parameter, str, is displayed as a message\n     * to the user.  The states of the buttons are adjusted so players\n     * can start a new game.  This method is called when the game\n     * ends at any point in this class.",
        "* This is called by mousePressed() when a player clicks on the\n     * square in the specified row and col.  It has already been checked\n     * that a game is, in fact, in progress.",
        "If the player clicked on one of the pieces that the player\n         can move, mark this row and col as selected and return.  (This\n         might change a previous selection.)  Reset the message, in\n         case it was previously displaying an error message.",
        "If no piece has been selected to be moved, the user must first\n          select a piece.  Show an error message and return.",
        "If the user clicked on a square where the selected piece can be\n           legally moved, then make the move and return.",
        "If we get to this point, there is a piece selected, and the square where\n           the user just clicked is not one where that piece can be legally moved.\n           Show an error message.",
        "* This is called when the current player has chosen the specified\n     * move.  Make the move, and then either end or continue the game\n     * appropriately.",
        "If the move was a jump, it's possible that the player has another\n         jump.  Check for legal jumps starting from the square that the player\n         just moved to.  If there are any, the player must jump.  The same\n         player continues moving.",
        "The current player's turn is ended, so change to the other player.\n         Get that player's legal moves.  If the player has no legal moves,\n         then the game ends.",
        "Set selectedRow = -1 to record that the player has not yet selected\n         a piece to move.",
        "As a courtesy to the user, if all legal moves use the same piece, then\n         select that piece automatically so the user won't have to click on it\n         to select it.",
        "* Draw a checkerboard pattern in gray and lightGray.  Draw the\n     * checkers.  If a game is in progress, highlight the legal moves.",
        "Draw a two-pixel black border around the edges of the canvas.",
        "Draw the squares of the checkerboard and the checkers.",
        "If a game is in progress, highlight the legal moves.   Note that legalMoves\n         is never null while a game is in progress.",
        "If a piece is selected for moving (i.e. if selectedRow >= 0), then\n           draw a 2-pixel white border around that piece and draw green borders\n           around each square that that piece can be moved to.",
        "* Respond to a user click on the board.  If no game is in progress, show\n     * an error message.  Otherwise, find the row and column that the user\n     * clicked and call doClickSquare() to handle it.",
        "* An object of this class holds data about a game of checkers.\n   * It knows what kind of piece is on each square of the checkerboard.\n   * Note that RED moves \"up\" the board (i.e. row number decreases)\n   * while BLACK moves \"down\" the board (i.e. row number increases).\n   * Methods are provided to return lists of available legal moves.",
        "The following constants represent the possible contents of a square\n       on the board.  The constants RED and BLACK also represent players\n       in the game.",
        "* Constructor.  Create the board and set it up for a new game.",
        "* Set up the board with checkers in position for the beginning\n     * of a game.  Note that checkers can only be found in squares\n     * that satisfy  row % 2 == col % 2.  At the start of the game,\n     * all such squares in the first three rows contain black squares\n     * and all such squares in the last three rows contain red squares.",
        "* Return the contents of the square in the specified row and column.",
        "* Make the specified move.  It is assumed that move\n     * is non-null and that the move it represents is legal.",
        "* Make the move from (fromRow,fromCol) to (toRow,toCol).  It is\n     * assumed that this move is legal.  If the move is a jump, the\n     * jumped piece is removed from the board.  If a piece moves to\n     * the last row on the opponent's side of the board, the\n     * piece becomes a king.",
        "* Return an array containing all the legal CheckersMoves\n     * for the specified player on the current board.  If the player\n     * has no legal moves, null is returned.  The value of player\n     * should be one of the constants RED or BLACK; if not, null\n     * is returned.  If the returned value is non-null, it consists\n     * entirely of jump moves or entirely of regular moves, since\n     * if the player can jump, only jumps are legal moves.",
        "First, check for any possible jumps.  Look at each square on the board.\n         If that square contains one of the player's pieces, look at a possible\n         jump in each of the four directions from that square.  If there is\n         a legal jump in that direction, put it in the moves ArrayList.",
        "If any jump moves were found, then the user must jump, so we don't\n         add any regular moves.  However, if no jumps were found, check for\n         any legal regular moves.  Look at each square on the board.\n         If that square contains one of the player's pieces, look at a possible\n         move in each of the four directions from that square.  If there is\n         a legal move in that direction, put it in the moves ArrayList.",
        "If no legal moves have been found, return null.  Otherwise, create\n         an array just big enough to hold all the legal moves, copy the\n         legal moves from the ArrayList into the array, and return the array.",
        "* Return a list of the legal jumps that the specified player can\n     * make starting from the specified row and column.  If no such\n     * jumps are possible, null is returned.  The logic is similar\n     * to the logic of the getLegalMoves() method.",
        "* This is called by the two previous methods to check whether the\n     * player can legally jump from (r1,c1) to (r3,c3).  It is assumed\n     * that the player has a piece at (r1,c1), that (r3,c3) is a position\n     * that is 2 rows and 2 columns distant from (r1,c1) and that\n     * (r2,c2) is the square between (r1,c1) and (r3,c3).",
        "* This is called by the getLegalMoves() method to determine whether\n     * the player can legally move from (r1,c1) to (r2,c2).  It is\n     * assumed that (r1,r2) contains one of the player's pieces and\n     * that (r2,c2) is a neighboring square."
    ],
    "functions": [
        "main",
        "chp11_6",
        "Move",
        "isJump",
        "Board",
        "actionPerformed",
        "doNewGame",
        "doResign",
        "doSave",
        "doLoad",
        "gameOver",
        "doClickSquare",
        "doMakeMove",
        "paintComponent",
        "mousePressed",
        "mouseReleased",
        "mouseClicked",
        "mouseEntered",
        "mouseExited",
        "Data",
        "setUpGame",
        "pieceAt",
        "makeMove",
        "makeMove",
        "getLegalMoves",
        "getLegalJumpsFrom",
        "canJump",
        "canMove"
    ],
    "classes": [
        "chp11_6",
        "Move",
        "Board",
        "Data"
    ]
}