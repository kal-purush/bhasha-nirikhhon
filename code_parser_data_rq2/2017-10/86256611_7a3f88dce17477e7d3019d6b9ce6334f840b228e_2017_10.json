{
    "identifiers": [
        "EventEmitter",
        "format",
        "Transport",
        "key",
        "EventEmitter",
        "name",
        "options",
        "name",
        "options",
        "options",
        "options",
        "levels",
        "level",
        "levels",
        "level",
        "level",
        "level",
        "level",
        "levels",
        "level",
        "level",
        "messageOrData",
        "data",
        "level",
        "messageOrData",
        "data",
        "levels",
        "child",
        "child",
        "levels",
        "level",
        "message",
        "data",
        "message",
        "level",
        "data",
        "entry",
        "data",
        "entry",
        "options",
        "options",
        "i",
        "options",
        "options",
        "i",
        "options",
        "options",
        "options",
        "options",
        "child",
        "child",
        "options",
        "name",
        "options",
        "options",
        "options",
        "options",
        "options",
        "Logger",
        "name",
        "options",
        "logger",
        "logger",
        "name",
        "i",
        "i",
        "name",
        "i",
        "level",
        "messageOrData",
        "data",
        "level",
        "level",
        "messageOrData",
        "message",
        "format",
        "messageOrData",
        "data",
        "messageOrData",
        "message",
        "messageOrData",
        "level",
        "message",
        "data",
        "level",
        "entry",
        "entry",
        "transport",
        "entry",
        "transport",
        "transport",
        "entry",
        "name",
        "name",
        "result",
        "name",
        "result",
        "logger",
        "logger",
        "child",
        "child",
        "logger",
        "logger",
        "logger",
        "transport",
        "transport",
        "transport",
        "transport",
        "transport",
        "transport",
        "child",
        "child",
        "transport",
        "Logger"
    ],
    "literals": [
        "'nomatic-events'",
        "'string-format'",
        "'./transports'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'root'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'Invalid level: '",
        "'string'",
        "'`message` is not specified and `template` is not defined'",
        "'entry'",
        "string",
        "'Child already exists with name \"'",
        "'\"'",
        "'Transport specifies invalid `level`: '"
    ],
    "variables": [
        "entry",
        "logger",
        "message",
        "entry",
        "result"
    ],
    "comments": [],
    "docstrings": [
        "* A specification of log level names and their associated priority. A lower number is given higher priority.\n * Example:\n *  ```typescript\n *  const levels: Levels = {\n *    error: 0,\n *    warn: 1,\n *    info: 2,\n *    debug: 3\n *  };\n *  ```\n *\n *  `info` has a higher priority than `debug`, but not as high as `warn`. A `Transport` with a level of `info` will\n *  execute log entries on `info`, `warn`, and `error` levels, but not on `debug`.",
        "* Options associated with a `Logger` instance. Each property is optional, and as such, have sensible defaults.",
        "* When a log message is not defined, the data associated with it can be used to create the message.\n     * For example:\n     * ```javascript\n     * const logger = require('nomatic-logging');\n     * logger.template = '{method} {url} ==> {status} {length} bytes';\n     * logger.log('info', {\n   *  method: 'GET',\n   *  url: '/api/v1/users?page=1',\n   *  status: 200,\n   *  length: 1203\n   * };\n     * ```\n     * The `LoggerEntry` (sent on `execute` of each associated transport) would include a `message` property set to\n     * `GET /api/v1/users?page=1 ==> 200 1203 bytes`.",
        "* Transports to associated with the `Logger` instance.",
        "* Default:\n     * ```typescript\n     * { trace: 50, debug: 40, info: 30, warn: 20, error: 10 }\n     * ```",
        "* `Transport` instances which are triggered in the `log` method (or a method associated with a log\n     * level).\n     * @type {Array}",
        "* Child `Logger` instances.",
        "* The name of a logging subject that the instance represents.",
        "* The template to be used when parsing `LoggerEntry.data` for an `LoggerEntry.message`.\n     * When a log message is not defined, the data associated with it can be used to create the message.\n     *\n     * For example:\n     * ```javascript\n     * const logger = require('nomatic-logging');\n     * logger.template = '{method} {url} ==> {status} {length} bytes';\n     * logger.log('info', {\n     *  method: 'GET',\n     *  url: '/api/v1/users?page=1',\n     *  status: 200,\n     *  length: 1203\n     * };\n     * ```\n     * The `LoggerEntry` (sent on `execute` of each associated transport) would include a `message`\n     * property set to`GET /api/v1/users?page=1 ==> 200 1203 bytes`.\n     *\n     * When defining a template, variables from the log LoggerEntry's data object are used. The name of\n     * the variable should be contained within curly braces, i.e. '{key}' would be replaced with `value`\n     * if data has a property of `key` with value of `value`.\n     *\n     * By default, a template is not used, so a message must be specified when calling `log` (or a method\n     * associated with a log level). If `template` is defined, a message is optional, and `template` will\n     * not be used if a message is defined.",
        "* Representation of a logging subject.\n     * @param name        The name of the logging subject.\n     * @param options     Options to apply to instance.",
        "* Return the log levels available and their associated priority.\n     * @returns {LoggerLevels}",
        "* Set the levels available for this instance. When levels are set, methods are created\n     * for new levels, while levels not specified on assignment are deleted.\n     * @param levels",
        "* Prepares an object with all data associated with a log entry.\n     * @param level     The log level associated with the LoggerEntry.\n     * @param message   The message associated with the LoggerEntry.\n     * @param data      Optional data to associate with the LoggerEntry.\n     * @returns {LoggerEntry}",
        "* Configure the instance at or after instantiation. All child instances will\n     * also be configured with the options specified.\n     * @param options: These options are the same as those accepted on instantiation.",
        "* Create a child `Logger` instance.\n     * @param name: The name of the child instance.\n     * @param options: The options for the child instance.\n     * @returns {Logger}",
        "* Parse, validate, and pass a log entry to all associated transports.\n     * @param level: The level of the log entry.\n     * @param messageOrData: Either the message (string) or data (Object) for the log entry. Data can be parsed into a\n     * message if `template` is defined on the instance.\n     * @param data: Data for log entry (if no `message` is specified). Required if a message is not specified and\n     * `template` is defined on the instance.",
        "* Find or create a child instance. If child instance has not already been created, `options` is inherited from\n     * this instance.\n     * @param name: The name of the child instance.\n     * @returns {Logger}",
        "* Register a child instance.\n     * @param logger: The child logger.\n     * @returns {boolean}: If `false`, child is already registered, else returns `true`.",
        "* Associate a transport to the instance. Transports are executed from `log` method.\n     * @param transport"
    ],
    "functions": [
        "levels",
        "levels",
        "serialize",
        "configure",
        "create",
        "find",
        "log",
        "get",
        "register",
        "use"
    ],
    "classes": [
        "Logger"
    ]
}