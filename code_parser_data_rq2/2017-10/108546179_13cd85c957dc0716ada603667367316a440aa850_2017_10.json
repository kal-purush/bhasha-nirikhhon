{
    "identifiers": [
        "require",
        "require",
        "chai",
        "require",
        "chai",
        "chaiHttp",
        "require",
        "require",
        "describe",
        "before",
        "done",
        "Product_Ingredient",
        "Product",
        "Ingredient",
        "Category",
        "User",
        "done",
        "describe",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "describe",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "describe",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "describe",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "describe",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "describe",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "describe",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "describe",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "describe",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "describe",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "describe",
        "it",
        "done",
        "chai",
        "server",
        "err",
        "res",
        "should",
        "err",
        "res",
        "res",
        "res",
        "done",
        "after",
        "process"
    ],
    "literals": [
        "'dotenv'",
        "'./server/tests/test.env'",
        "'chai'",
        "'chai-http'",
        "'../../bin/www'",
        "'../models'",
        "'Mocha'",
        "'chachachaMO'",
        "'Mocha Tester'",
        "'tester@mocha.me'",
        "'Routes: '",
        "'POST /user/register'",
        "'should not accept invalid username input'",
        "'/user/register'",
        "'Mocha 23'",
        "'chachachaMO'",
        "'Mocha Tester'",
        "'tester@mocha.me'",
        "'should not accept invalid password input'",
        "'/user/register'",
        "'Mocha'",
        "'{$or: {$gt:1}}'",
        "'Mocha Tester'",
        "'tester@mocha.me'",
        "'should not accept invalid name input'",
        "'/user/register'",
        "'Mocha'",
        "'chahcha'",
        "'Mocha Tester (M@D D0LLA $!GN)'",
        "'tester@mocha.me'",
        "'should not accept invalid email input'",
        "'/user/register'",
        "'Mocha'",
        "'chahcha'",
        "'Mocha Tester'",
        "'come@me@your.peril'",
        "'GET /category'",
        "'should return failure - no auth'",
        "'/api/category'",
        "'POST /category'",
        "'should return failure - no auth'",
        "'/api/category'",
        "'GET /category/:id'",
        "'should return failure - no auth'",
        "'/api/category/1'",
        "'PUT /category/:id'",
        "'should return failure - no auth'",
        "'/api/category/1'",
        "'DELETE /category/:id'",
        "'should return failure - no auth'",
        "'/api/category/1'",
        "'GET /ingredient'",
        "'should return failure - no auth'",
        "'/api/ingredient'",
        "'POST /ingredient'",
        "'should return failure - no auth'",
        "'/api/ingredient'",
        "'GET /ingredient/:id'",
        "'should return failure - no auth'",
        "'/api/ingredient/1'",
        "'PUT /ingredient/:id'",
        "'should return failure - no auth'",
        "'/api/ingredient/1'",
        "'DELETE /ingredient/:id'",
        "'should return failure - no auth'",
        "'/api/ingredient/1'"
    ],
    "variables": [
        "chai",
        "should",
        "chaiHttp",
        "server",
        "user",
        "pwd",
        "name",
        "email",
        "token"
    ],
    "comments": [
        "this.setTimeout(0);",
        "return sequelize.sync({force:true, logging: console.log})",
        ".then( ()=> { return Product_Ingredient.destroy({where: {}}); })",
        ".then( ()=> { return Product.destroy({where: {}}); } )",
        ".then( ()=> { return Ingredient.destroy({where: {}}); } )",
        ".then( ()=> { return Category.destroy({where: {}});} )",
        ".then( ()=> { return User.destroy({where: {}}); })",
        ".then( ()=> setTimeout(done, 0))",
        ".catch( err => console.log(\"Something\") )",
        "it('should register user with valid information', (done) => {",
        "chai.request(server)",
        ".post('/user/register')",
        ".send({",
        "username: user,",
        "password: pwd,",
        "name: name,",
        "email: email",
        "})",
        ".end( (err, res) => {",
        "should.not.exist(err);",
        "res.status.should.eql(201);",
        "res.should.be.json;",
        "res.body.success.should.eql(true);",
        "// res.body.data.username.should.eql(user);",
        "// res.body.data.name.should.eql(name);",
        "// res.body.data.email.should.eql(email);",
        "// should.not.exist(res.body.data.password);",
        "done();",
        "})",
        "})",
        "it('should not register user with same information', (done) => {",
        "chai.request(server)",
        ".post('/user/register')",
        ".send({",
        "username: user,",
        "password: pwd,",
        "name: name,",
        "email: email",
        "})",
        ".end( (err, res) => {",
        "should.exist(err);",
        "res.status.should.eql(400);",
        "res.should.be.json;",
        "res.body.success.should.eql(false);",
        "done();",
        "})",
        "})"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}