{
    "identifiers": [
        "textGraph",
        "java",
        "util",
        "n",
        "names",
        "nameMap",
        "input_n",
        "n",
        "input_n",
        "n",
        "n",
        "i",
        "i",
        "n",
        "i",
        "j",
        "j",
        "n",
        "j",
        "i",
        "j",
        "names",
        "n",
        "u",
        "s",
        "names",
        "u",
        "s",
        "nameMap",
        "put",
        "s",
        "u",
        "u",
        "v",
        "d",
        "u",
        "v",
        "d",
        "u",
        "v",
        "u",
        "v",
        "s",
        "nameMap",
        "containsKey",
        "s",
        "nameMap",
        "get",
        "s",
        "u",
        "names",
        "u",
        "word1",
        "word2",
        "u",
        "getIndex",
        "word1",
        "v",
        "getIndex",
        "word2",
        "bridgeList",
        "x",
        "x",
        "n",
        "x",
        "x",
        "u",
        "x",
        "v",
        "queryWeight",
        "u",
        "x",
        "queryWeight",
        "x",
        "v",
        "bridgeList",
        "add",
        "x",
        "bridgeList",
        "u",
        "distance",
        "n",
        "visit",
        "n",
        "i",
        "i",
        "n",
        "i",
        "distance",
        "i",
        "postNode",
        "n",
        "n",
        "distance",
        "u",
        "i",
        "i",
        "n",
        "i",
        "minimalDistance",
        "minimalNode",
        "v",
        "v",
        "n",
        "v",
        "distance",
        "v",
        "minimalDistance",
        "visit",
        "v",
        "minimalDistance",
        "distance",
        "v",
        "minimalNode",
        "v",
        "visit",
        "minimalNode",
        "v",
        "v",
        "n",
        "v",
        "v",
        "minimalNode",
        "minimalNode",
        "v",
        "distance",
        "minimalNode",
        "minimalNode",
        "v",
        "distance",
        "v",
        "distance",
        "v",
        "distance",
        "minimalNode",
        "minimalNode",
        "v",
        "w",
        "w",
        "n",
        "w",
        "postNode",
        "w",
        "v",
        "postNode",
        "minimalNode",
        "v",
        "distance",
        "minimalNode",
        "minimalNode",
        "v",
        "distance",
        "v",
        "postNode",
        "minimalNode",
        "v",
        "i",
        "i",
        "n",
        "i",
        "postNode",
        "i",
        "i",
        "distance",
        "i",
        "postNode",
        "u",
        "v",
        "shortestPaths",
        "alreadyVisited",
        "postNode",
        "alreadyVisited",
        "add",
        "u",
        "u",
        "v",
        "path",
        "path",
        "add",
        "postNode",
        "v",
        "v",
        "length",
        "alreadyVisited",
        "size",
        "i",
        "i",
        "length",
        "i",
        "path",
        "add",
        "alreadyVisited",
        "get",
        "i",
        "shortestPaths",
        "add",
        "path",
        "alreadyVisited",
        "remove",
        "alreadyVisited",
        "size",
        "i",
        "i",
        "n",
        "i",
        "i",
        "u",
        "postNode",
        "u",
        "i",
        "findPaths",
        "i",
        "v",
        "shortestPaths",
        "alreadyVisited",
        "postNode",
        "alreadyVisited",
        "remove",
        "alreadyVisited",
        "size",
        "u",
        "v",
        "postNode",
        "Q",
        "visit",
        "n",
        "visit",
        "v",
        "Q",
        "offer",
        "v",
        "Q",
        "isEmpty",
        "w",
        "Q",
        "poll",
        "x",
        "x",
        "n",
        "x",
        "postNode",
        "x",
        "w",
        "x",
        "w",
        "postNode",
        "x",
        "w",
        "visit",
        "x",
        "visit",
        "x",
        "Q",
        "offer",
        "x",
        "i",
        "i",
        "n",
        "i",
        "j",
        "j",
        "n",
        "j",
        "i",
        "j",
        "postNode",
        "i",
        "j",
        "postNode",
        "i",
        "j",
        "postNode",
        "i",
        "j",
        "postNode",
        "i",
        "j",
        "u",
        "v",
        "postNode",
        "_getShortestPath",
        "u",
        "getShortestPathBetweenTwoNode",
        "u",
        "v",
        "postNode",
        "shortestPaths",
        "alreadyVisited",
        "findPaths",
        "u",
        "v",
        "shortestPaths",
        "alreadyVisited",
        "postNode",
        "shortestPaths",
        "u",
        "v",
        "postNode",
        "_getShortestPath",
        "u",
        "temp",
        "getShortestPathBetweenTwoNode",
        "u",
        "v",
        "postNode",
        "path",
        "u",
        "v",
        "path",
        "add",
        "u",
        "temp",
        "u",
        "flag",
        "i",
        "i",
        "n",
        "i",
        "i",
        "u",
        "postNode",
        "u",
        "i",
        "temp",
        "i",
        "flag",
        "u",
        "temp",
        "flag",
        "path",
        "add",
        "path"
    ],
    "literals": [],
    "variables": [
        "n",
        "map",
        "names",
        "temp"
    ],
    "comments": [
        "",
        "if (distance[v] < minimalDistance && visit[minimalNode] == 0) {",
        "minimalNode = u;"
    ],
    "docstrings": [
        "n is the number of nodes in the graph",
        "map is the adjacent matrix for graph",
        "names is the word for a specific node",
        "nameMap is the map between words to indexes",
        "* @param input_n number of nodes in the graph",
        "* naming a node of index u a specific string s.\n\t * @param u the index of node in the graph\n\t * @param s the name for the index",
        "* add weight d to arc (u,v)\n\t * @param u head of the arc\n\t * @param v tail of the arc\n\t * @param d weight added to the graph",
        "* give the weight of arc (u,v). 0 means there's no such arc.\n\t * @param u head of the arc\n\t * @param v tail of the arc\n\t * @return weight of the arc",
        "* return the index of word s, if s is not a word in graph, return -1.\n\t * @param s word\n\t * @return index of word s",
        "* return the name of index u\n\t * @param u index\n\t * @return word of index u",
        "* get a list of indexes of bridge words from word1 to word2.\n\t * @param word1 word1\n\t * @param word2 word2\n\t * @return a list of indexes of bridge words from word1 to word2",
        "* calculate the SSSP DAG using Dijkstra's Algorithm.\n\t * @param u single source.\n\t * @return SSSP DAG adjacent matrix.",
        "* findPaths generates the shortest paths from u to v.\n\t * @param u the start node\n\t * @param v the end node\n\t * @param shortestPaths store found paths\n\t * @param alreadyVisited record nodes which have been used\n\t * @param postNode the DAG generated by node u",
        "* get shortest paths from u to v and store this messages in the postNode list\n\t * @param u the start node\n\t * @param v the end node\n\t * @param postNode the DAG generated by u as input",
        "* calculate all shortest paths from u to v\n\t * @param u start node\n\t * @param v end node\n\t * @return an object of class ArrayList<ArrayList<Integer>>, each dimension is a shortest path from u to v",
        "* calculate a single shortest path from u to v\n\t * @param u start node\n\t * @param v end node\n\t * @return an object of class ArrayList<Integer> storing one shortest path from u to v"
    ],
    "functions": [
        "Graph",
        "namingNode",
        "addEdge",
        "queryWeight",
        "getIndex",
        "getName",
        "getBridges",
        "_getShortestPath",
        "findPaths",
        "getShortestPathBetweenTwoNode",
        "getShortestPathList",
        "getShortestPath"
    ],
    "classes": [
        "Graph"
    ]
}