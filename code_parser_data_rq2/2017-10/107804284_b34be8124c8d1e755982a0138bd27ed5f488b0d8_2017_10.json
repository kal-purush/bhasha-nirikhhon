{
    "identifiers": [
        "Geohash",
        "Geohash",
        "lat",
        "lon",
        "precision",
        "precision",
        "p",
        "p",
        "Geohash",
        "lat",
        "lon",
        "p",
        "Geohash",
        "hash",
        "posn",
        "lat",
        "posn",
        "lon",
        "hash",
        "precision",
        "lat",
        "lat",
        "lon",
        "lon",
        "precision",
        "precision",
        "isNaN",
        "lat",
        "isNaN",
        "lon",
        "isNaN",
        "precision",
        "geohash",
        "precision",
        "evenBit",
        "lonMin",
        "lonMax",
        "lon",
        "lonMid",
        "idx",
        "idx",
        "lonMin",
        "lonMid",
        "idx",
        "idx",
        "lonMax",
        "lonMid",
        "latMin",
        "latMax",
        "lat",
        "latMid",
        "idx",
        "idx",
        "latMin",
        "latMid",
        "idx",
        "idx",
        "latMax",
        "latMid",
        "evenBit",
        "evenBit",
        "bit",
        "geohash",
        "Geohash",
        "idx",
        "bit",
        "idx",
        "geohash",
        "Geohash",
        "geohash",
        "Geohash",
        "geohash",
        "bounds",
        "bounds",
        "bounds",
        "bounds",
        "latMin",
        "latMax",
        "lonMin",
        "lonMax",
        "lat",
        "lat",
        "latMax",
        "latMin",
        "lon",
        "lon",
        "lonMax",
        "lonMin",
        "lat",
        "lon",
        "Geohash",
        "geohash",
        "geohash",
        "geohash",
        "geohash",
        "i",
        "geohash",
        "i",
        "geohash",
        "i",
        "Geohash",
        "chr",
        "idx",
        "n",
        "n",
        "idx",
        "n",
        "evenBit",
        "lonMin",
        "lonMax",
        "bitN",
        "lonMin",
        "lonMid",
        "lonMax",
        "lonMid",
        "latMin",
        "latMax",
        "bitN",
        "latMin",
        "latMid",
        "latMax",
        "latMid",
        "evenBit",
        "evenBit",
        "latMin",
        "lonMin",
        "latMax",
        "lonMax",
        "bounds",
        "Geohash",
        "geohash",
        "direction",
        "geohash",
        "geohash",
        "direction",
        "direction",
        "geohash",
        "direction",
        "geohash",
        "geohash",
        "geohash",
        "border",
        "direction",
        "lastCh",
        "parent",
        "parent",
        "Geohash",
        "parent",
        "direction",
        "parent",
        "Geohash",
        "neighbour",
        "direction",
        "lastCh",
        "Geohash",
        "geohash",
        "Geohash",
        "geohash",
        "Geohash",
        "Geohash",
        "geohash",
        "Geohash",
        "geohash",
        "Geohash",
        "Geohash",
        "geohash",
        "Geohash",
        "geohash",
        "Geohash",
        "Geohash",
        "geohash",
        "Geohash",
        "geohash",
        "Geohash",
        "Geohash",
        "geohash",
        "Geohash"
    ],
    "literals": [
        "'use strict'",
        "'0123456789bcdefghjkmnpqrstuvwxyz'",
        "'undefined'",
        "'Invalid geohash'",
        "''",
        "'Invalid geohash'",
        "'Invalid geohash'",
        "'Invalid geohash'",
        "'nsew'",
        "'Invalid direction'",
        "'p0r21436x8zb9dcf5h7kjnmqesgutwvy'",
        "'bc01fg45238967deuvhjyznpkmstqrwx'",
        "'14365h7k9dcfesgujnmqp0r2twvyx8zb'",
        "'238967debc01fg45kmstqrwxuvhjyznp'",
        "'bc01fg45238967deuvhjyznpkmstqrwx'",
        "'p0r21436x8zb9dcf5h7kjnmqesgutwvy'",
        "'238967debc01fg45kmstqrwxuvhjyznp'",
        "'14365h7k9dcfesgujnmqp0r2twvyx8zb'",
        "'prxz'",
        "'bcfguvyz'",
        "'028b'",
        "'0145hjnp'",
        "'bcfguvyz'",
        "'prxz'",
        "'0145hjnp'",
        "'028b'",
        "''",
        "'n'",
        "'n'",
        "'ne'",
        "'n'",
        "'e'",
        "'e'",
        "'e'",
        "'se'",
        "'s'",
        "'e'",
        "'s'",
        "'s'",
        "'sw'",
        "'s'",
        "'w'",
        "'w'",
        "'w'",
        "'nw'",
        "'n'",
        "'w'",
        "'undefined'"
    ],
    "variables": [
        "Geohash",
        "p",
        "hash",
        "posn",
        "idx",
        "bit",
        "evenBit",
        "geohash",
        "latMin",
        "latMax",
        "lonMin",
        "lonMax",
        "lonMid",
        "latMid",
        "bounds",
        "latMin",
        "lonMin",
        "latMax",
        "lonMax",
        "lat",
        "lon",
        "evenBit",
        "latMin",
        "latMax",
        "lonMin",
        "lonMax",
        "i",
        "chr",
        "idx",
        "n",
        "bitN",
        "lonMid",
        "latMid",
        "bounds",
        "neighbour",
        "border",
        "lastCh",
        "parent"
    ],
    "comments": [
        "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -",
        "Geohash encoding/decoding and associated functions   (c) Chris Veness 2014-2016 / MIT Licence",
        "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -",
        "(Geohash-specific) Base32 map",
        "infer precision?",
        "refine geohash until it matches precision of supplied lat/lon",
        "set to maximum",
        "index into base32 map",
        "each char holds 5 bits",
        "bisect E-W longitude",
        "bisect N-S latitude",
        "5 bits gives us a character: append it and start over",
        "<-- the hard work",
        "now just determine the centre of the cell...",
        "cell centre",
        "round to close to centre without excessive precision: ⌊2-log10(Δ°)⌋ decimal places",
        "longitude",
        "latitude",
        "based on github.com/davetroy/geohash-js",
        "last character of hash",
        "hash without last character",
        "check for edge-cases which don't share common prefix",
        "append letter for direction to parent",
        "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -",
        "CommonJS, node.js"
    ],
    "docstrings": [
        "* Geohash encode, decode, bounds, neighbours.\n *\n * @namespace",
        "* Encodes latitude/longitude to geohash, either to specified precision or to automatically\n * evaluated precision.\n *\n * @param   {number} lat - Latitude in degrees.\n * @param   {number} lon - Longitude in degrees.\n * @param   {number} [precision] - Number of characters in resulting geohash.\n * @returns {string} Geohash of supplied latitude/longitude.\n * @throws  Invalid geohash.\n *\n * @example\n *     var geohash = Geohash.encode(52.205, 0.119, 7); // geohash: 'u120fxw'",
        "* Decode geohash to latitude/longitude (location is approximate centre of geohash cell,\n *     to reasonable precision).\n *\n * @param   {string} geohash - Geohash string to be converted to latitude/longitude.\n * @returns {{lat:number, lon:number}} (Center of) geohashed location.\n * @throws  Invalid geohash.\n *\n * @example\n *     var latlon = Geohash.decode('u120fxw'); // latlon: { lat: 52.205, lon: 0.1188 }",
        "* Returns SW/NE latitude/longitude bounds of specified geohash.\n *\n * @param   {string} geohash - Cell that bounds are required of.\n * @returns {{sw: {lat: number, lon: number}, ne: {lat: number, lon: number}}}\n * @throws  Invalid geohash.",
        "* Determines adjacent cell in given direction.\n *\n * @param   geohash - Cell to which adjacent cell is required.\n * @param   direction - Direction from geohash (N/S/E/W).\n * @returns {string} Geocode of adjacent cell.\n * @throws  Invalid geohash.",
        "* Returns all 8 adjacent cells to specified geohash.\n *\n * @param   {string} geohash - Geohash neighbours are required of.\n * @returns {{n,ne,e,se,s,sw,w,nw: string}}\n * @throws  Invalid geohash."
    ],
    "functions": [],
    "classes": []
}