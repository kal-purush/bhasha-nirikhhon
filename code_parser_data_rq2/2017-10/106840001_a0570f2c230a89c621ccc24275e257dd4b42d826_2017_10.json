{
    "identifiers": [
        "pylab",
        "numpy",
        "astropy",
        "io",
        "fits",
        "PIL",
        "Image",
        "numpy",
        "concatenate",
        "numpy",
        "interp",
        "numpy",
        "set_printoptions",
        "numpy",
        "arange",
        "numpy",
        "nan",
        "matplotlib",
        "pyplot",
        "plt",
        "os",
        "matplotlib",
        "ticker",
        "mtick",
        "numpy",
        "sqrt",
        "numpy",
        "ones",
        "numpy",
        "convolve",
        "matplotlib",
        "patches",
        "mpatches",
        "list_name",
        "xmin_indice",
        "xmax_indice",
        "replace_val",
        "i",
        "xmin_indice",
        "xmax_indice",
        "replace_val",
        "fits",
        "open",
        "fits",
        "open",
        "fits",
        "open",
        "fits",
        "open",
        "fits",
        "open",
        "fits",
        "open",
        "fits",
        "open",
        "fits",
        "open",
        "fits",
        "open",
        "fits",
        "open",
        "fits",
        "open",
        "fits",
        "open",
        "Data1",
        "header",
        "Data1",
        "header",
        "Data1",
        "data",
        "Data1",
        "close",
        "Data2",
        "header",
        "Data2",
        "header",
        "Data2",
        "data",
        "Data2",
        "close",
        "Data3",
        "header",
        "Data3",
        "header",
        "Data3",
        "data",
        "Data3",
        "close",
        "Data4",
        "header",
        "Data4",
        "header",
        "Data4",
        "data",
        "Data4",
        "close",
        "Data5",
        "header",
        "Data5",
        "header",
        "Data5",
        "data",
        "Data5",
        "close",
        "Data6",
        "header",
        "Data6",
        "header",
        "Data6",
        "data",
        "Data6",
        "close",
        "Data7",
        "header",
        "Data7",
        "header",
        "Data7",
        "data",
        "Data7",
        "close",
        "Data8",
        "header",
        "Data8",
        "header",
        "Data8",
        "data",
        "Data8",
        "close",
        "Data9",
        "header",
        "Data9",
        "header",
        "Data9",
        "data",
        "Data9",
        "close",
        "Data10",
        "header",
        "Data10",
        "header",
        "Data10",
        "data",
        "Data10",
        "close",
        "Data11",
        "header",
        "Data11",
        "header",
        "Data11",
        "data",
        "Data11",
        "close",
        "Data12",
        "header",
        "Data12",
        "header",
        "Data12",
        "data",
        "Data12",
        "close",
        "TbData1",
        "TbData1",
        "TbData1",
        "TbData2",
        "TbData2",
        "TbData2",
        "TbData3",
        "TbData3",
        "TbData3",
        "concatenate",
        "wavelength1",
        "wavelength1",
        "axis",
        "concatenate",
        "flux1",
        "flux1",
        "axis",
        "concatenate",
        "error1",
        "error1",
        "axis",
        "concatenate",
        "wavelength2",
        "wavelength2",
        "axis",
        "concatenate",
        "flux2",
        "flux2",
        "axis",
        "concatenate",
        "error2",
        "error2",
        "axis",
        "concatenate",
        "wavelength3",
        "wavelength3",
        "axis",
        "concatenate",
        "flux3",
        "flux3",
        "axis",
        "concatenate",
        "error3",
        "error3",
        "axis",
        "TbData4",
        "TbData4",
        "TbData4",
        "TbData5",
        "TbData5",
        "TbData5",
        "TbData6",
        "TbData6",
        "TbData6",
        "concatenate",
        "wavelength4",
        "wavelength4",
        "axis",
        "concatenate",
        "flux4",
        "flux4",
        "axis",
        "concatenate",
        "wavelength5",
        "wavelength5",
        "axis",
        "concatenate",
        "flux5",
        "flux5",
        "axis",
        "concatenate",
        "wavelength6",
        "wavelength6",
        "axis",
        "concatenate",
        "flux6",
        "flux6",
        "axis",
        "TbData7",
        "TbData7",
        "TbData7",
        "TbData8",
        "TbData8",
        "TbData8",
        "TbData9",
        "TbData9",
        "TbData9",
        "concatenate",
        "wavelength7",
        "wavelength7",
        "axis",
        "concatenate",
        "flux7",
        "flux7",
        "axis",
        "concatenate",
        "wavelength8",
        "wavelength8",
        "axis",
        "concatenate",
        "flux8",
        "flux8",
        "axis",
        "concatenate",
        "wavelength9",
        "wavelength9",
        "axis",
        "concatenate",
        "flux9",
        "flux9",
        "axis",
        "TbData10",
        "TbData10",
        "TbData10",
        "TbData11",
        "TbData11",
        "TbData11",
        "TbData12",
        "TbData12",
        "TbData12",
        "concatenate",
        "wavelength10",
        "wavelength10",
        "axis",
        "concatenate",
        "flux10",
        "flux10",
        "axis",
        "concatenate",
        "wavelength11",
        "wavelength11",
        "axis",
        "concatenate",
        "flux11",
        "flux11",
        "axis",
        "concatenate",
        "wavelength12",
        "wavelength12",
        "axis",
        "concatenate",
        "flux12",
        "flux12",
        "axis",
        "TWL2",
        "TWL1",
        "arange",
        "begin",
        "end",
        "interp",
        "array",
        "TWL2",
        "TF2",
        "left",
        "right",
        "interp",
        "array",
        "TWL2",
        "ER2",
        "left",
        "right",
        "interp",
        "array",
        "TWL1",
        "TF1",
        "left",
        "right",
        "interp",
        "array",
        "TWL1",
        "ER1",
        "left",
        "right",
        "i",
        "len",
        "Ierror1",
        "Ierror1",
        "i",
        "TME1",
        "append",
        "TME1",
        "append",
        "Ierror1",
        "i",
        "i",
        "len",
        "Ierror2",
        "Ierror2",
        "i",
        "TME2",
        "append",
        "TME2",
        "append",
        "Ierror2",
        "i",
        "i",
        "len",
        "array",
        "Iflux1",
        "i",
        "Iflux2",
        "i",
        "all",
        "TME2",
        "i",
        "TME1",
        "i",
        "Iflux2",
        "i",
        "Iflux1",
        "i",
        "output_array",
        "append",
        "weight",
        "spec",
        "weight2",
        "spec2",
        "weight",
        "weight2",
        "Iflux2",
        "i",
        "Iflux1",
        "all",
        "TME2",
        "i",
        "TME1",
        "i",
        "Iflux2",
        "i",
        "Iflux1",
        "i",
        "output_array",
        "append",
        "weight",
        "spec",
        "weight2",
        "spec2",
        "weight",
        "weight2",
        "Iflux2",
        "i",
        "Iflux1",
        "i",
        "all",
        "output_array",
        "append",
        "TME2",
        "i",
        "TME1",
        "i",
        "Iflux2",
        "i",
        "Iflux1",
        "i",
        "output_array",
        "append",
        "weight",
        "spec",
        "weight2",
        "spec2",
        "weight",
        "weight2",
        "badpix",
        "output_array",
        "output_array"
    ],
    "literals": [
        "\"../Data/lcn701010_x1dsum.fits\"",
        "\"../Data/lcn701020_x1dsum.fits\"",
        "\"../Data/lcn701030_x1dsum.fits\"",
        "\"../Data/lcbx01010_x1dsum.fits\"",
        "\"../Data/lcbx01020_x1dsum.fits\"",
        "\"../Data/lcbx01030_x1dsum.fits\"",
        "\"../Data/lcbx02010_x1dsum.fits\"",
        "\"../Data/lcbx02020_x1dsum.fits\"",
        "\"../Data/lcbx02030_x1dsum.fits\"",
        "\"../Data/lcbx03010_x1dsum.fits\"",
        "\"../Data/lcbx03020_x1dsum.fits\"",
        "\"../Data/lcbx03030_x1dsum.fits\"",
        "'wavelength'",
        "'flux'",
        "'error'",
        "'wavelength'",
        "'flux'",
        "'error'",
        "'wavelength'",
        "'flux'",
        "'error'",
        "'wavelength'",
        "'flux'",
        "'error'",
        "'wavelength'",
        "'flux'",
        "'error'",
        "'wavelength'",
        "'flux'",
        "'error'",
        "'wavelength'",
        "'flux'",
        "'error'",
        "'wavelength'",
        "'flux'",
        "'error'",
        "'wavelength'",
        "'flux'",
        "'error'",
        "'wavelength'",
        "'flux'",
        "'error'",
        "'wavelength'",
        "'flux'",
        "'error'",
        "'wavelength'",
        "'flux'",
        "'error'"
    ],
    "variables": [
        "list_name",
        "i",
        "Data1",
        "Data2",
        "Data3",
        "Data4",
        "Data5",
        "Data6",
        "Data7",
        "Data8",
        "Data9",
        "Data10",
        "Data11",
        "Data12",
        "head1a",
        "head1b",
        "TbData1",
        "head2a",
        "head2b",
        "TbData2",
        "head3a",
        "head3b",
        "TbData3",
        "head4a",
        "head4b",
        "TbData4",
        "head5a",
        "head5b",
        "TbData5",
        "head6a",
        "head6b",
        "TbData6",
        "head7a",
        "head7b",
        "TbData7",
        "head8a",
        "head8b",
        "TbData8",
        "head9a",
        "head9b",
        "TbData9",
        "head10a",
        "head10b",
        "TbData10",
        "head11a",
        "head11b",
        "TbData11",
        "head12a",
        "head12b",
        "TbData12",
        "wavelength1",
        "flux1",
        "error1",
        "wavelength2",
        "flux2",
        "error2",
        "wavelength3",
        "flux3",
        "error3",
        "TWL1",
        "TF1",
        "ER1",
        "TWL2",
        "TF2",
        "ER2",
        "TWL3",
        "TF3",
        "ER3",
        "wavelength4",
        "flux4",
        "error4",
        "wavelength5",
        "flux5",
        "error5",
        "wavelength6",
        "flux6",
        "error6",
        "TWL4",
        "TF4",
        "TWL5",
        "TF5",
        "TWL6",
        "TF6",
        "wavelength7",
        "flux7",
        "error7",
        "wavelength8",
        "flux8",
        "error8",
        "wavelength9",
        "flux9",
        "error9",
        "TWL7",
        "TF7",
        "TWL8",
        "TF8",
        "TWL9",
        "TF9",
        "wavelength10",
        "flux10",
        "error10",
        "wavelength11",
        "flux11",
        "error11",
        "wavelength12",
        "flux12",
        "error12",
        "TWL10",
        "TF10",
        "TWL11",
        "TF11",
        "TWL12",
        "TF12",
        "begin",
        "end",
        "array",
        "Iflux2",
        "Ierror2",
        "Iflux1",
        "Ierror1",
        "output_array",
        "TME1",
        "TME2",
        "weight",
        "weight2",
        "spec",
        "spec2",
        "weight",
        "weight2",
        "spec",
        "spec2",
        "weight",
        "weight2",
        "spec",
        "spec2",
        "PGflux_1and2"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "from Peak import *",
        "Fits files Opens",
        "UT date of start of observation",
        "------------------------------------------------------------------------------",
        "File says that the date obs was 6/14/15 7:15:17",
        "File says that the date obs was 6/14/15 7:47:56",
        "File says that the date obs was 6/14/15 9:12:04",
        "File says that the date obs was 6/1/14 3:05:15",
        "File says that the date obs was 6/1/14 3:37:30",
        "File says that the date obs was 6/1/14 5:01:22",
        "File says that the date obs was 6/12/14 16:19:16",
        "File says that the date obs was 6/12/14 16:51:31",
        "File says that the date obs was 6/12/14 18:14:30",
        "File says that the date obs was 6/28/14 11:25:07",
        "File says that the date obs was 6/28/14 11:57:22",
        "File says that the date obs was 6/28/14 13:21:29",
        "------------------------------------------------------------------------------",
        "Data Extraction Epoch 1",
        "------------------------------------------------------------------------------",
        "Grating type G130M for this file *CAN CHANGE WITH DIFFERENT Source FILE*",
        "G130M has low Resolving power with wavelengths below 1130 Angstroms",
        "Range 900A-1450A",
        "------------------------------------------------------------------------------",
        "Data Extraction Epoch 2",
        "------------------------------------------------------------------------------",
        "G130M",
        "------------------------------------------------------------------------------",
        "Data Extraction Epoch 3",
        "------------------------------------------------------------------------------",
        "------------------------------------------------------------------------------",
        "Data Extraction Epoch 4",
        "------------------------------------------------------------------------------",
        "------------------------------------------------------------------------------",
        "Printing Headers to learn more about file",
        "print(head12a)",
        "print(head2a)",
        "Data Set Epoch 1 Concatenated",
        "------------------------------------------------------------------------------",
        "1162.9A - 1479.5A",
        "892.4A-1208A",
        "1374.4A-1763.1A",
        "------------------------------------------------------------------------------",
        "Data Set Epoch 2 Concatenated",
        "------------------------------------------------------------------------------",
        "1162.9A - 1479.5A",
        "892.4A-1208.1A",
        "1374.4A-1763.1A",
        "------------------------------------------------------------------------------",
        "Data Set Epoch 3 Concatenated",
        "------------------------------------------------------------------------------",
        "1162.9A-1479.5A",
        "892.4A-1208.0A",
        "1374.4A-1763.1A",
        "------------------------------------------------------------------------------",
        "Data Set Epoch 4 Concatenated",
        "------------------------------------------------------------------------------",
        "1162.9A-1479.5A",
        "892.4A-1208.0A",
        "1374.4A-1763.1A",
        "------------------------------------------------------------------------------",
        "print(TWL10)",
        "print(TWL11)",
        "print(TWL12)",
        "------------------------------------------------------------------------------",
        "Interpolation setup from Mich code",
        "set_printoptions(threshold=nan) #Prints out entire array if you chose to print an array",
        "Beginning of the first grating",
        "End of the second grating",
        "This is the array that we are interpolating to.",
        "This is the flux interpolation for the first grating, we want zero for the left and right because if a point is outside of the wavelength range we are looking at we do not want to create data.",
        "This is the error interpolation for the first grating",
        "This is the flux interpolation for the second grating",
        "This is the error interpolation for the second grating",
        "Empty array to store the new list of flux values.",
        "print(Ierror1)",
        "------------------------------------------------------------------------------",
        "------------------------------------------------------------------------------",
        "Truncated form Mich code",
        "3/38 2-3?)",
        "stores value in array",
        "if both of the values are zero then return zero",
        "------------------------------------------------------------------------------",
        "------------------------------------------------------------------------------",
        "Interpolation",
        "From Mich's code",
        "4-6-17 1h)"
    ],
    "docstrings": [
        "\"\"\"\nCreated on Fri Feb 2 2017\nPlease leave comments on progress here, for others to use\nCurrently do to computer crash trying to replicate what was completed SP 17\n@author: Marcus\n\"\"\"",
        "\"\"\"--Epoch one--\"\"\"",
        "\"\"\"--Epoch two--\"\"\"",
        "\"\"\"-Epoch three-\"\"\"",
        "\"\"\"-Epoch four-\"\"\"",
        "\"\"\"CENTRWV = 1327\"\"\"",
        "\"\"\"CENTRWV = 1050\"\"\"",
        "\"\"\"CENTRWV = 1564\"\"\"",
        "\"\"\"CENTRWV = 1319\"\"\"",
        "\"\"\"CENTRWV = 1050\"\"\"",
        "\"\"\"CENTRWV = 1572\"\"\"",
        "\"\"\"CENTRWV = 1319\"\"\"",
        "\"\"\"CENTRWV = 1050\"\"\"",
        "\"\"\"CENTRWV = 1572\"\"\"",
        "\"\"\"CENTRWV = 1319\"\"\"",
        "\"\"\"CENTRWV = 1050\"\"\"",
        "\"\"\"CENTRWV = 1572\"\"\"",
        "\"\"\"\nprint(head11a)\nprint(head12a)\n\"\"\"",
        "\"\"\"\nprint(head11b)\nprint(head12b)\n\"\"\"",
        "\"\"\"--Set one--\"\"\"",
        "\"\"\"--Set two--\"\"\"",
        "\"\"\"--Set three--\"\"\"",
        "\"\"\"--Set two--\"\"\"",
        "\"\"\"--Set two--\"\"\"",
        "\"\"\"--Set three--\"\"\"",
        "\"\"\"--Set one--\"\"\"",
        "\"\"\"--Set two--\"\"\"",
        "\"\"\"--Set three--\"\"\"",
        "\"\"\"--Set one--\"\"\"",
        "\"\"\"--Set two--\"\"\"",
        "\"\"\"--Set three--\"\"\"",
        "\"\"\"\n#AN Should be fixing this- (scaling plots)\n#Graph Epoch One (Pre Norm)\n#------------------------------------------------------------------------------\nplt.figure(1)\nplt.title('Epoch 6/14/15')\nplt.xlabel('Wavelength(A)')\nplt.ylabel('Flux')\nplt.plot(TWL1,TF1)\nplt.plot(TWL2,TF2)\nplt.plot(TWL3,TF3)\nplt.axis([880,1780,0,1*10**-13])\nfig = matplotlib.pyplot.gcf()\nfig.set_size_inches(18.5, 10.5)\n#fig.savefig('June-14-2015.png', dpi=100)\n#------------------------------------------------------------------------------\n\n#Graph Epoch Two (Pre Norm)\n#------------------------------------------------------------------------------\nplt.figure(2)\nplt.title('Epoch 6/01/14')\nplt.xlabel('Wavelength')\nplt.ylabel('Flux')\nplt.plot(TWL4,TF4)\nplt.plot(TWL5,TF5)\nplt.plot(TWL6,TF6)\nplt.axis([880,1780,0,1*10**-13])\nfig = matplotlib.pyplot.gcf()\nfig.set_size_inches(18.5, 10.5)\n#fig.savefig('June-1-2014.png', dpi=100)\n#------------------------------------------------------------------------------\n\n#Graph Epoch Three (Pre Norm)\n#------------------------------------------------------------------------------\nplt.figure(3)\nplt.title('Epoch 6/12/14')\nplt.xlabel('Wavelength')\nplt.ylabel('Flux')\nplt.plot(TWL7,TF7)\nplt.plot(TWL8,TF8)\nplt.plot(TWL9,TF9)\nplt.axis([880,1780,0,1*10**-13])\nfig = matplotlib.pyplot.gcf()\nfig.set_size_inches(18.5, 10.5)\n#fig.savefig('June-12-2014.png', dpi=100)\n#------------------------------------------------------------------------------\n\n#Graph Epoch four (Pre Norm)\n#------------------------------------------------------------------------------\nplt.figure(4)\nplt.title('Epoch 6/28/14')\nplt.xlabel('Wavelength')\nplt.ylabel('Flux')\nplt.plot(TWL10,TF10)\nplt.plot(TWL11,TF11)\nplt.plot(TWL12,TF12)\nplt.axis([880,1780,0,1*10**-13])\nfig = matplotlib.pyplot.gcf()\nfig.set_size_inches(18.5, 10.5)\n#fig.savefig('June-28-2014.png', dpi=100)\n#------------------------------------------------------------------------------\n\"\"\"",
        "\"\"\"This is Marcus Method to remove 0 from error sample\"\"\"",
        "\"\"\"\nbegin2=TWL2[0]#Beginning of the first grating\nend2=TWL3[-1]#End of the *THIRD* grating\narrayn= arange(begin2,end2,.0122408)#This is the array that we are interpolating to.NEW STEP SIZE, NEW ARRAY NAME.\n\nIflux3=interp(arrayn,TWL3,TF3,left=0,right=0)#This is the flux interpolation for the THIRD grating\nIerror3=interp(arrayn,TWL3,ER3,left=0,right=0)#This is the error interpolation for the THIRD grating\n\nPGflux_1and2n=interp(arrayn,array,PGflux_1and2,left=0,right=0)\n\n#plt.plot(PGflux_1and2n)\n\nPGerror_1and2=[]\nfor i in range(len(array)):\n    if (PGerror_1n[i]==0 and PGerror_2n[i]!=0).all():#If the error value for the first grating is zero dont weight the corresponding flux value\n        PGerror_1and2.append(PGerror_2n[i])\n    elif (PGerror_2n[i]==0 and PGerror_1n[i]!=0).all():#If the error value for the first grating is zero dont weight the corresponding flux value\n        PGerror_1and2.append(PGerror_1n[i])\n    elif (PGerror_2n[i]==0 and PGerror_1n[i]==0).all():#if both error values are zero then dont weight the flux values\n        PGerror_1and2.append(0.0)            \n    else:#if neither of the error values are zero then take the weighted average of the flux values.\n        PGerror_1and2.append(sqrt((PGerror_1n[i])**2+(PGerror_2n[i])**2))#stores value in array      \nPGerror_1and2n=interp(arrayn,array,PGerror_1and2,left=0,right=0)\n\n#############AVERAGING NON ZERO POINTS#########################################\n\nnoutput_array=[]#Empty array to store the new list of flux values.\nfor i in range(0,len(arrayn)):#This is the for loop to calculate the weighted average for the points that overlap in the first and second grating.\n    if (PGflux_1and2n[i]==0 and PGflux_3n[i] !=0).all() :#If the flux value for the first grating is zero then use the data from the second grating\n        if (PGerror_1and2n[i]==0 and PGerror_3n[i]!=0).all():#If the error value for the first grating is zero dont weight the corresponding flux value\n            weight=(1)#Weight of 1=no weight\n            weight2=(1/PGerror_3n[i])\n            spec=PGflux_1and2n[i]\n            spec2=PGflux_3n[i]\n            noutput_array.append((weight*spec+weight2*spec2)/(weight+weight2))\n        elif (PGerror_3n[i]==0 and PGerror_1and2n[i]==0).all():#if both error values are zero then dont weight the flux values\n            noutput_array.append(0.0) \n        else:#if neither of the error values are zero then take the weighted average of the flux values.\n            weight=(1/PGerror_1and2n[i])\n            weight2=(1/PGerror_3n[i])\n            spec=PGflux_1and2n[i]\n            spec2=PGflux_3n[i]\n            noutput_array.append((weight*spec+weight2*spec2)/(weight+weight2))#stores value in array\n    elif (PGflux_3n[i]==0 and PGflux_1and2n !=0).all() :#if the flux value for the second grating is zero then use the data from the first grating\n        if (PGerror_3n[i]==0 and PGerror_1and2n[i]!=0).all():#If the error value for the first grating is zero dont weight the corresponding flux value\n            weight=(1/PGerror_1and2n[i])\n            weight2=(1)#Weight of 1=no weight\n            spec=PGflux_1and2n[i]\n            spec2=PGflux_3n[i]\n            noutput_array.append((weight*spec+weight2*spec2)/(weight+weight2))\n        elif (PGerror_3n[i]==0 and PGerror_1and2n[i]==0).all():#if both error values are zero then dont weight the flux values\n            noutput_array.append(0.0)            \n        else:#if neither of the error values are zero then take the weighted average of the flux values.\n            weight=(1/PGerror_1and2n[i])\n            weight2=(1/PGerror_3n[i])\n            spec=PGflux_1and2n[i]\n            spec2=PGflux_3n[i]\n            noutput_array.append((weight*spec+weight2*spec2)/(weight+weight2))#stores value in array\n    elif (PGflux_1and2n[i]==0 and PGflux_3n[i]==0).all():#if both of the values are zero then return zero\n        noutput_array.append(0.0)\n    else:#if neither of the flux values are zero then take the weighted average of the two flux values by using the error values.\n        if (PGerror_1and2n[i]==0 and PGerror_3n[i]!=0).all():#If the error value for the first grating is zero dont weight the corresponding flux value\n            weight=(1)#Weight of 1=no weight\n            weight2=(1/PGerror_3n[i])\n            spec=PGflux_1and2n[i]\n            spec2=PGflux_3n[i]\n            noutput_array.append((weight*spec+weight2*spec2)/(weight+weight2))\n        elif (PGerror_3n[i]==0 and PGerror_1and2n[i]!=0).all():#If the error value for the first grating is zero dont weight the corresponding flux value\n            weight=(1/PGerror_1and2n[i])\n            weight2=(1)#Weight of 1=no weight\n            spec=PGflux_1and2n[i]\n            spec2=PGflux_3n[i]\n            noutput_array.append((weight*spec+weight2*spec2)/(weight+weight2))\n        elif (PGerror_3n[i]==0 and PGerror_1and2n[i]==0).all():#if both error values are zero then dont weight the flux values\n            noutput_array.append(0.0)            \n        else:#if neither of the error values are zero then take the weighted average of the flux values.\n            weight=(1/PGerror_1and2n[i])\n            weight2=(1/PGerror_3n[i])\n            spec=PGflux_1and2n[i]\n            spec2=PGflux_3n[i]\n            noutput_array.append((weight*spec+weight2*spec2)/(weight+weight2))#stores value in arrray\n\n\"\"\""
    ],
    "functions": [
        "badpix"
    ],
    "classes": []
}