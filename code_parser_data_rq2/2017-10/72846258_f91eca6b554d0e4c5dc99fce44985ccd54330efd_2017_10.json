{
    "identifiers": [
        "org",
        "srcdeps",
        "core",
        "java",
        "io",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "nio",
        "file",
        "Path",
        "java",
        "nio",
        "file",
        "Paths",
        "java",
        "util",
        "java",
        "util",
        "javax",
        "inject",
        "Inject",
        "org",
        "eclipse",
        "sisu",
        "launch",
        "InjectedTest",
        "org",
        "junit",
        "Assert",
        "org",
        "junit",
        "BeforeClass",
        "org",
        "junit",
        "Rule",
        "org",
        "junit",
        "rules",
        "TestRule",
        "org",
        "junit",
        "rules",
        "TestWatcher",
        "org",
        "junit",
        "runner",
        "Description",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "org",
        "srcdeps",
        "core",
        "BuildRequest",
        "BuildRequestBuilder",
        "org",
        "srcdeps",
        "core",
        "config",
        "Maven",
        "org",
        "srcdeps",
        "core",
        "util",
        "SrcdepsCoreUtils",
        "BuilderTransformer",
        "builder",
        "log",
        "LoggerFactory",
        "getLogger",
        "mrmSettingsXmlPath",
        "getProperty",
        "mvnLocalRepo",
        "NO_TRANSFORMER",
        "Override",
        "builder",
        "builder",
        "projectsDirectory",
        "targetDirectory",
        "Paths",
        "get",
        "getProperty",
        "toAbsolutePath",
        "projectsDirectory",
        "targetDirectory",
        "resolve",
        "mvnLocalRepoPath",
        "targetDirectory",
        "resolve",
        "mvnLocalRepo",
        "mvnLocalRepoPath",
        "path",
        "Assert",
        "assertTrue",
        "format",
        "path",
        "toString",
        "Files",
        "exists",
        "path",
        "BeforeClass",
        "SrcdepsCoreUtils",
        "ensureDirectoryExistsAndEmpty",
        "mvnLocalRepo",
        "getRootDirectory",
        "setProperty",
        "Maven",
        "getSrcdepsMavenSettingsProperty",
        "mrmSettingsXmlPath",
        "srcVersion",
        "gavtcPatterns",
        "paths",
        "gavtcPatterns",
        "length",
        "gavtcPattern",
        "gavtcPatterns",
        "gavtcPattern",
        "gavtcPattern",
        "replace",
        "srcVersion",
        "gavtc",
        "Gavtc",
        "ofPattern",
        "gavtcPattern",
        "path",
        "mvnLocalRepo",
        "resolve",
        "gavtc",
        "paths",
        "add",
        "path",
        "paths",
        "Inject",
        "buildService",
        "currentTestName",
        "Rule",
        "watcher",
        "Override",
        "description",
        "AbstractBuildServiceTest",
        "currentTestName",
        "description",
        "getMethodName",
        "gitRepoUri",
        "srcVersion",
        "builderTransformer",
        "gavtcTemplates",
        "Assert",
        "assertNotNull",
        "buildService",
        "log",
        "info",
        "buildService",
        "getClass",
        "getName",
        "getName",
        "projectRoot",
        "projectsDirectory",
        "resolve",
        "currentTestName",
        "projectBuildDirectory",
        "projectRoot",
        "resolve",
        "paths",
        "resolve",
        "srcVersion",
        "gavtcTemplates",
        "SrcdepsCoreUtils",
        "deleteDirectory",
        "projectRoot",
        "path",
        "paths",
        "SrcdepsCoreUtils",
        "deleteDirectory",
        "path",
        "getParent",
        "request",
        "BuildRequest",
        "builder",
        "scmUrl",
        "gitRepoUri",
        "srcVersion",
        "SrcVersion",
        "parse",
        "srcVersion",
        "projectRootDirectory",
        "projectBuildDirectory",
        "buildArgument",
        "mvnLocalRepo",
        "getRootDirectory",
        "toString",
        "versionsMavenPluginVersion",
        "Maven",
        "getDefaultVersionsMavenPluginVersion",
        "build",
        "buildService",
        "build",
        "request",
        "path",
        "paths",
        "assertExists",
        "path",
        "gitRepoUri",
        "srcVersion",
        "gavtcTemplates",
        "assertBuild",
        "gitRepoUri",
        "srcVersion",
        "NO_TRANSFORMER",
        "gavtcTemplates"
    ],
    "literals": [
        "\"mrm.settings.xml\"",
        "\"project.build.directory\"",
        "\"target\"",
        "\"test-projects\"",
        "\"mvn-local-repo\"",
        "\"File or directory does not exist [%s]\"",
        "\"${version}\"",
        "\"buildService not injected\"",
        "\"Using {} as {}\"",
        "\"build\"",
        "\"-Dmaven.repo.local=\""
    ],
    "variables": [
        "mvnLocalRepo",
        "projectsDirectory",
        "gavtcPatterns",
        "buildService",
        "currentTestName",
        "gavtcTemplates",
        "gavtcTemplates"
    ],
    "comments": [
        "",
        "",
        "",
        "",
        ""
    ],
    "docstrings": [
        "* Copyright 2015-2017 Maven Source Dependencies\n * Plugin contributors as indicated by the @author tags.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @author <a href=\"https://github.com/ppalaga\">Peter Palaga</a>"
    ],
    "functions": [
        "BuildRequestBuilder",
        "transform",
        "BuildRequestBuilder",
        "transform",
        "assertExists",
        "beforeClass",
        "resolve",
        "starting",
        "assertBuild",
        "assertBuild"
    ],
    "classes": [
        "AbstractBuildServiceTest"
    ]
}