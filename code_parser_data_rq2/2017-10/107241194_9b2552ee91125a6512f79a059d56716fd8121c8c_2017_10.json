{
    "identifiers": [
        "numpy",
        "itertools",
        "shapely",
        "shapely",
        "geometry",
        "Polygon",
        "shapely",
        "geometry",
        "LineString",
        "shapely",
        "geometry",
        "Point",
        "queue",
        "Q",
        "pdb",
        "matplotlib",
        "pyplot",
        "plt",
        "id",
        "co_ords",
        "links",
        "id",
        "co_ords",
        "links",
        "origin",
        "destination",
        "destination",
        "origin",
        "destination",
        "origin",
        "d",
        "parent",
        "parent",
        "parent",
        "parent",
        "dist",
        "calc_dist",
        "parent",
        "co_ords",
        "co_ords",
        "dist",
        "calc_dist",
        "co_ords",
        "goal_co_ords",
        "priority",
        "id",
        "parent",
        "parent",
        "path",
        "path",
        "append",
        "co_ords",
        "node_list",
        "obstruction_list",
        "node",
        "node_list",
        "co_ords",
        "node",
        "co_ords",
        "LineString",
        "co_ords",
        "node",
        "co_ords",
        "obstruction",
        "obstruction_list",
        "line_attempt",
        "crosses",
        "obstruction",
        "polygon",
        "success",
        "links",
        "append",
        "node",
        "id",
        "nodes",
        "children",
        "links",
        "nodes",
        "x",
        "links",
        "nodes",
        "get_node",
        "x",
        "child",
        "update_dist",
        "child",
        "update_priority",
        "child",
        "update_path",
        "children",
        "append",
        "child",
        "id",
        "co_ords",
        "priority",
        "dist",
        "links",
        "append",
        "NodeState",
        "append",
        "NodeState",
        "append",
        "NodeState",
        "append",
        "NodeState",
        "append",
        "NodeState",
        "append",
        "NodeState",
        "id",
        "j",
        "j",
        "id",
        "id",
        "j",
        "join",
        "node_point",
        "id",
        "id",
        "count",
        "count",
        "id",
        "NodeState",
        "new_id",
        "node_point",
        "append",
        "new_node",
        "start",
        "goal",
        "nodes",
        "obstruction_list",
        "Q",
        "PriorityQueue",
        "start",
        "goal",
        "nodes",
        "obstruction_list",
        "nodes",
        "add_node",
        "start",
        "co_ords",
        "nodes",
        "add_node",
        "goal",
        "co_ords",
        "node",
        "nodes",
        "node",
        "update_links",
        "nodes",
        "obstruction_list",
        "goal",
        "co_ords",
        "nodes",
        "print_list",
        "goal",
        "co_ords",
        "start",
        "priority_queue",
        "put",
        "count",
        "start_state",
        "path",
        "priority_queue",
        "empty",
        "priority_queue",
        "get",
        "closest_child",
        "id",
        "closest_child",
        "closest_child",
        "create_children",
        "nodes",
        "join",
        "closest_child",
        "children",
        "visited_queue",
        "append",
        "closest_child",
        "id",
        "visited_queue",
        "closest_child",
        "dist",
        "child",
        "closest_child",
        "children",
        "child",
        "calc_dist",
        "child",
        "co_ords",
        "goal",
        "co_ords",
        "path",
        "append",
        "start",
        "co_ords",
        "path",
        "extend",
        "child",
        "path",
        "child",
        "dist",
        "child",
        "id",
        "visited_queue",
        "count",
        "priority_queue",
        "put",
        "child",
        "priority",
        "count",
        "child",
        "path",
        "print_impossible",
        "path",
        "dist",
        "path",
        "centroid",
        "vertices",
        "centroid",
        "vertices",
        "Polygon",
        "vertices",
        "centroid",
        "vertices",
        "obstruction_list",
        "obstruction_list",
        "i",
        "polygon",
        "exterior",
        "coords",
        "LineString",
        "i",
        "i",
        "new_line",
        "crosses",
        "polygon",
        "LineString",
        "i",
        "i",
        "x",
        "j",
        "obstruction_list",
        "new_line",
        "crosses",
        "j",
        "polygon",
        "LineString",
        "i",
        "new_line",
        "intersection",
        "j",
        "polygon",
        "boundary",
        "new_line",
        "interpolate",
        "normalized",
        "coords",
        "block_nodes",
        "append",
        "node_coords",
        "block_nodes",
        "pucks",
        "targets",
        "immovable_blocks",
        "movable_blocks",
        "pucks",
        "targets",
        "immovable_blocks",
        "movable_blocks",
        "NodeList",
        "blocks",
        "immovable_blocks",
        "blocks",
        "polygon",
        "buffer",
        "end_effector_r",
        "blocks",
        "movable_blocks",
        "blocks",
        "polygon",
        "buffer",
        "end_effector_r",
        "obstruction_list",
        "extend",
        "immovable_blocks",
        "obstruction_list",
        "extend",
        "movable_blocks",
        "block",
        "immovable_blocks",
        "block",
        "cell_decomp",
        "obstruction_list",
        "node",
        "nodes",
        "node_list",
        "add_node",
        "node",
        "block",
        "movable_blocks",
        "block",
        "cell_decomp",
        "obstruction_list",
        "node",
        "nodes",
        "node_list",
        "add_node",
        "node",
        "node",
        "node_list",
        "xlist",
        "extend",
        "node",
        "co_ords",
        "ylist",
        "extend",
        "node",
        "co_ords",
        "plt",
        "plot",
        "xlist",
        "ylist",
        "plt",
        "axis",
        "plt",
        "show",
        "AStarSolver",
        "pucks",
        "targets",
        "node_list",
        "obstruction_list",
        "solution",
        "solve",
        "AStarSolver",
        "holding_spot",
        "pucks",
        "node_list",
        "obstruction_list",
        "solution",
        "solve",
        "AStarSolver",
        "targets",
        "holding_spot",
        "node_list",
        "obstruction_list",
        "solution",
        "solve",
        "Block",
        "Point",
        "Block",
        "Block",
        "NodeState",
        "NodeState",
        "block1",
        "block2",
        "block3",
        "puck1",
        "target1",
        "Scene",
        "pucks",
        "targets",
        "i_blocks",
        "m_blocks",
        "scene",
        "expand_obstructions",
        "scene",
        "create_nodes",
        "scene",
        "node_list",
        "print_list",
        "scene",
        "solve_puck_paths"
    ],
    "literals": [
        "\"[Node\"",
        "\",\"",
        "\", priority \"",
        "\",\"",
        "\",\"",
        "\"]\"",
        "'[%s]'",
        "'\\n '",
        "\"Node List with updated links\"",
        "\"Goal of \"",
        "\"is not possible!\"",
        "'closest child is Node:'",
        "'with details'",
        "'Children of Closest Child are'",
        "'[%s]'",
        "', '",
        "'Nodes visited so far: '",
        "' Distance travelled so far: '",
        "'HOORAY ROBBIE! YOURE THE GREATEST!!! Final Path: '",
        "'Total Distance Travelled: '",
        "'ro'",
        "\"Node List to iterate through:\""
    ],
    "variables": [
        "path",
        "goal_co_ords",
        "parent",
        "id",
        "children",
        "co_ords",
        "links",
        "priority",
        "dist",
        "goal_co_ords",
        "d",
        "parent",
        "dist",
        "dist",
        "priority",
        "path",
        "line_attempt",
        "success",
        "success",
        "nodes",
        "child",
        "child",
        "parent",
        "count",
        "new_id",
        "new_id",
        "new_node",
        "path",
        "visited_queue",
        "priority_queue",
        "start",
        "goal",
        "nodes",
        "obstruction_list",
        "dist",
        "node",
        "goal_co_ords",
        "start_state",
        "start_state",
        "distance",
        "start_state",
        "priority",
        "count",
        "closest_child",
        "dist",
        "board",
        "boundaries",
        "centroid",
        "vertices",
        "polygon",
        "block_nodes",
        "obstrucion_list",
        "new_line",
        "new_line",
        "new_line",
        "node_coords",
        "end_effector_r",
        "holding_spot",
        "pucks",
        "targets",
        "immovable_blocks",
        "movable_blocks",
        "obstruction_list",
        "edges",
        "node_list",
        "nodes",
        "nodes",
        "xlist",
        "ylist",
        "solution",
        "puck_path",
        "solution",
        "initial_path",
        "solution",
        "initial_path",
        "block1",
        "block2",
        "block3",
        "puck1",
        "target1",
        "i_blocks",
        "m_blocks",
        "pucks",
        "targets",
        "scene"
    ],
    "comments": [
        "priority = 999999",
        "dist = 0",
        "self.parent = parent",
        "self.priority = self.calc_dist(self.co_ords, self.goal_co_ords)",
        "def get_priority(elem):",
        "return elem.priority",
        "print 'aafkjsdlfk'",
        "print 'Child Created: Node' + str(child.id)",
        "print ('with details', str(child))",
        "print str(child.id)",
        "self.children.sort(key=get_priority())",
        "for i in xrange(len(self.goal)-1):",
        "val = self.priority",
        "val = val[:i] + val[i+1] + val[i] + val[i+2]",
        "child = State_String(val, self)",
        "self.children.append(child)",
        "class SateString(state):",
        "def __init__(self, id, co_ords, priority, parent, distance, links):",
        "super(State_String, self).__init__(id, co_ords, priority, parent, distance, links)",
        "self.distance = self.GetDist()",
        "def get_dist(self):",
        "# if self.co_ords == self.goal:",
        "# \treturn 0",
        "dist = parent.getdist + ((self.co_ords[0]-parent.co_ords[0])**2+(self.co_ords[1]-parent.co_ords[1])**2)**(1/2.0)",
        "return dist",
        "for node in block.block_nodes",
        "print(str(new_node))",
        "print(str(self.node_list))",
        "self.nodes.print_list()",
        "pdb.set_trace()",
        "start_state = NodeState(0, self.start, 0, 0, 0, [1, 2])",
        "print str(closest_child.children)",
        "self.priority_queue.put((child.priority, count, child))",
        "class Point:",
        "def __init__(self,x,y):",
        "self.x = x",
        "self.y = y",
        "def ccw(A,B,C):",
        "return (C.y-A.y)*(B.x-A.x) > (B.y-A.y)*(C.x-A.x)",
        "def intersect(A,B,C,D):",
        "return ccw(A,C,D) != ccw(B,C,D) and ccw(A,B,C) != ccw(A,B,D)",
        "def expand_bbox(self, radius):",
        "\"\"\"Expands the bounding box of a block by the radius of the end effector\"\"\"",
        "new_vertices = []",
        "for i in self.vertices:",
        "# new_x = i[0] + (self.centroid[1]-i[1]/self.centroid[0]-i[0])*radius",
        "new_x = i[0] + numpy.sign(i[0]-self.centroid[0])*radius",
        "new_y = i[1] + numpy.sign(i[1]-self.centroid[1])*radius",
        "# new_y = i[1] + radius",
        "new_vertex = [new_x, new_y]",
        "new_vertices.append(new_vertex)",
        "self.vertices = new_vertices",
        "def get_edges(self):",
        "\"\"\"\tCreates and returns a list of edges for the block bounding box\"\"\"",
        "self.edges = []",
        "for i in range(0, len(self.vertices) -1):",
        "new_edge = [self.vertices[i], self.vertices[i+1]]",
        "self.edges.append(new_edge)",
        "new_edge = [self.vertices[-1], self.vertices[0]]",
        "self.edges.append(new_edge)",
        "# return list(self.edges)",
        "return self.edges",
        "self.bbox = box(self.polygon.bounds)",
        "print (\"node created at \" + str(node_coords))",
        "print (\"block nodes created:- \" + str(self.block_nodes))",
        "for i in range(0,1):",
        "new_line = lineString(self.polygon.bounds.xmin, (self.bbox[i].x, 0))",
        "# new_line = [[self.vertices[x], [self.vertices[x][0], 0]]",
        "for edge in self.obstrucion_edges:",
        "if new_line intersects",
        "new_line = [[self.vertices[x], intersecting point of line]",
        "node_co_ords = \t[self.vertices[x][0], average (self.vertices[x][1], intersecting point of line[1]]",
        "self.block_nodes.append(node_co_ords)",
        "for x in range(2,3):",
        "new_line = [[self.vertices[x], [self.vertices[x][0], 300]]",
        "for lines in global_lines:",
        "if new_line intersects",
        "new_line = [[self.vertices[x], intersecting point of line]",
        "node_co_ords = \t[self.vertices[x][0], average (self.vertices[x][1], intersecting point of line[1]]",
        "self.block_nodes.append(node_co_ords)",
        "def get_edges(self)",
        "for block in self.immovable_blocks:",
        "new_edges = block.get_edges()",
        "self.edges.extend(new_edges)",
        "for block in self.movable_blocks:",
        "new_edges = block.get_edges()",
        "self.edges.extend(new_edges)",
        "print (nodes)",
        "self.node_list.extend(nodes)",
        "print (self.node_list)",
        "print(\"Node from immovable_blocks added\" + str(node))",
        "print (nodes)",
        "self.node_list.extend(nodes)",
        "self.node_list.extend(self.node_list)",
        "end_effector_r = 5",
        "print (str(block1))",
        "print (str(block2))",
        "print (str(block3))",
        "print(scene.obstruction_list)",
        "scene.plot_nodes()",
        "scene.solve_initial_path()",
        "scene.solve_return_path()",
        "plt.plot([1,2,3,4], [1,4,9,16], 'ro')",
        "plt.axis([0, 6, 0, 20])",
        "plt.show()",
        "block1.expand_bbox(end_effector_r)",
        "print (str(block1))",
        "block2.expand_bbox(end_effector_r)",
        "print (str(block1))",
        "# block3.expand_bbox(end_effector_r)",
        "print (str(block3))",
        "print (str(block3.get_edges()))",
        "block1.get_lines()",
        "class NodeCreator:",
        "def __init__(self, block_list):",
        "self.block_list = block_list",
        "# def cell_decomp(self):",
        "# decomposes lines",
        "def solve(self):",
        "for i in block_list:",
        "for j in i.vertices",
        "# look at x co-ord and then see if any y vector woul"
    ],
    "docstrings": [
        "\"\"\"A class for the foam blocks\"\"\"",
        "\"\"\"Returns the string form of Block\"\"\"",
        "\"\"\"Performs trapezoidal cell decomposition for individual block\"\"\"",
        "'''A class to model the scene on a workspace'''",
        "\"\"\"initialises a scene ready for solving\"\"\""
    ],
    "functions": [
        "calc_dist",
        "update_dist",
        "update_priority",
        "get_priority",
        "get_id",
        "update_path",
        "update_links",
        "create_children",
        "__str__",
        "get_node",
        "print_list",
        "add_node",
        "print_impossible",
        "solve",
        "__str__",
        "cell_decomp",
        "expand_obstructions",
        "create_nodes",
        "plot_nodes",
        "solve_puck_paths",
        "solve_initial_path",
        "solve_return_path"
    ],
    "classes": [
        "NodeState",
        "NodeList",
        "AStarSolver",
        "Block",
        "Scene"
    ]
}