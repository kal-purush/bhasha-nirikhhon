{
    "identifiers": [
        "org",
        "squonk",
        "execution",
        "runners",
        "com",
        "github",
        "dockerjava",
        "api",
        "model",
        "AccessMode",
        "com",
        "github",
        "dockerjava",
        "api",
        "model",
        "Bind",
        "com",
        "github",
        "dockerjava",
        "api",
        "model",
        "Volume",
        "java",
        "io",
        "File",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "util",
        "Properties",
        "ContainerRunner",
        "fileName",
        "content",
        "executable",
        "filename",
        "filename",
        "content",
        "filename",
        "content",
        "cmd",
        "file",
        "Deprecated",
        "mountAs",
        "Deprecated",
        "hostDir",
        "volume",
        "mode"
    ],
    "literals": [],
    "variables": [
        "cmd"
    ],
    "comments": [
        "------------------------------------------------------------------------",
        "The following legacy methods, are currently only",
        "supported by the DockerRunner"
    ],
    "docstrings": [
        "* Copyright (c) 2017 Informatics Matters Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* All container runner classes must implement the ContainerRunner interface\n * or throw an UnsupportedExc exception.",
        "* Execute a command in the container. This method can only be called once\n     * for each containerRunner instance.\n     * <p/>\n     * The method runs to completion, returning the container execution\n     * state (exit code).\n     *\n     * @param cmd The command\n     * @return Container execution result. Non-zero on failure.",
        "* Returns the container's log content.\n     *\n     * @return The container log",
        "* Cleans up the running container. This method blocks\n     * until the action is complete. After this call the running container\n     * will have been removed from the container eco-system and can no-longer\n     * be used.",
        "* Adds a Volume to the (Docker) container.\n     *\n     * @param mountAs The path\n     * @return The mounted Volume\n     *\n     * @see #addBind(String, Volume, AccessMode)",
        "* Represents a host path being bind mounted as a Volume in a Docker\n     * container. The Bind can be in read only or read write access mode.\n     *\n     * @param hostDir The path\n     * @param volume The Volume\n     * @param mode The access mode\n     * @return The mounted Volume\n     *\n     * @see #addVolume(String)"
    ],
    "functions": [
        "File",
        "getHostWorkDir",
        "writeInput",
        "InputStream",
        "readOutput",
        "writeInput",
        "writeInput",
        "execute",
        "getLog",
        "cleanup",
        "Properties",
        "getFileAsProperties",
        "Volume",
        "addVolume",
        "Bind",
        "addBind"
    ],
    "classes": []
}