{
    "identifiers": [
        "_gen_default_descriptions",
        "_gen_default_print_order",
        "key",
        "_values",
        "key",
        "key",
        "value",
        "_values",
        "value",
        "key",
        "_values",
        "key",
        "key",
        "key",
        "_values",
        "_values",
        "__iter__",
        "_values",
        "keys",
        "_values",
        "values",
        "_values",
        "_values",
        "key",
        "value",
        "_values",
        "key",
        "value",
        "ScanMetadataBase",
        "print_order",
        "descriptions",
        "_values",
        "_values"
    ],
    "literals": [
        "\"\"",
        "f\"{key}: {value}\\n\"",
        "\"scan_id\"",
        "\"scan_uid\"",
        "\"scan_instrument_name\"",
        "\"scan_instrument_id\"",
        "\"scan_time_start\"",
        "\"\"",
        "\"sample_name\"",
        "\"sample.*\"",
        "\"\"",
        "\"proposal_num\"",
        "\"proposal_title\"",
        "\"proposal.*\"",
        "\"\"",
        "\"experiment.*\"",
        "\"\"",
        "\"instrument.*\"",
        "\"scan_id\"",
        "\"scan ID\"",
        "\"scan_uid\"",
        "\"scan Unique ID\"",
        "\"scan_time_start\"",
        "\"start time\"",
        "\"scan_instrument_id\"",
        "\"beamline ID\"",
        "\"scan_instrument_name\"",
        "\"beamline name\"",
        "\"instrument_mono_incident_energy\"",
        "\"incident energy\"",
        "\"instrument_beam_current\"",
        "\"beam current\"",
        "\"instrument_detectors\"",
        "\"detectors\"",
        "\"sample_name\"",
        "\"sample name\"",
        "\"experiment_plan_name\"",
        "\"plan name\"",
        "\"experiment_plan_type\"",
        "\"plan type\"",
        "\"proposal_num\"",
        "\"proposal #\"",
        "\"proposal_title\"",
        "\"proposal title\"",
        "\"proposal_PI_lastname\"",
        "\"PI last name\"",
        "\"proposal_saf_num\"",
        "\"proposal SAF #\"",
        "\"proposal_cycle\"",
        "\"cycle\"",
        "\"instrument_mono_incident_energy\"",
        "'instrument_mono_incident_energy'"
    ],
    "variables": [
        "_values",
        "descriptions",
        "_print_order",
        "key",
        "print_order",
        "descriptions"
    ],
    "comments": [
        "This dictionary contains key-value pairs that represent parameter values",
        "The following dictionary contains key-description pairs, that represent",
        "user-friendly description of each key, that may be used for printing.",
        "It is not assumed that there is one-to-one match for the keys",
        "in 'values' and 'key_description' dictionaries. The 'key_descriptions'",
        "should contain comprehensive list of keys. It is also assumed that",
        "some keys in 'values' dictionary may not have matching descriptions.",
        "'key_descriptions' dictionary set at the different place in the program.",
        "In principle the descriptions may not be set at all.",
        "The following methods override standard operators to enable direct access",
        "to ``self.values`` dictionary",
        "The descriptions are not capitalized. They can be capitalized",
        "before printing if needed."
    ],
    "docstrings": [
        "\"\"\"\n    This is a base class. Instances of classes should be created from\n    a child class, which has meaningful implementation of the ``_gen_default_descriptions``\n    and ``_gen_print_order`` functions.\n    \"\"\"",
        "\"\"\"\n        This function must have meaningful implementation in the child class\n        \"\"\"",
        "\"\"\"\n        This function must have meaningful implementation in the child class\n        \"\"\"",
        "\"\"\"\n        Returns reference to metadata dictionary ``self._values``\n        \"\"\"",
        "\"\"\"\n        Returns True if at least one metadata key:value pair is available.\n        Otherwise returns False.\n        \"\"\"",
        "\"\"\"\n        Returns formatted metadata in the form ready for printing.\n        Formatting is performed based on specifications located in ``self._print_order``\n        list. Key names are replaced by descriptions from ``self.descriptions`` if\n        the available.\n        \"\"\"",
        "\"\"\"\n        Generates a list of strings, used to determine printing order of metadata\n        The strings in the list are treated as regex strings:\n        the symbols ^ and $ are added at the beginning and the end of each string.\n        Empty string \"\" means that the empty string is inserted in the printout.\n        The metadata entries are never repeated in the printout, so in each group\n        the patterns are specified from more specific to more general.\n        \"\"\"",
        "\"\"\"\n        Returns True if data on monochromator incident energy is available.\n        Otherwise returns False\n        \"\"\"",
        "\"\"\"\n        Returns the value of the incident energy. Incident energy is an important\n        parameter used in processing, so a separate function is created to fetch it.\n        \"\"\""
    ],
    "functions": [
        "_gen_default_print_order",
        "_gen_default_descriptions",
        "__getitem__",
        "__setitem__",
        "__delitem__",
        "__contains__",
        "__iter__",
        "keys",
        "values",
        "get_metadata_dictionary",
        "is_metadata_available",
        "get_formatted_output",
        "_gen_default_print_order",
        "_gen_default_descriptions",
        "is_mono_incident_energy_available",
        "get_mono_incident_energy"
    ],
    "classes": [
        "ScanMetadataBase",
        "ScanMetadataXRF"
    ]
}