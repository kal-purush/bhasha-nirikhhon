{
    "identifiers": [
        "typing",
        "typing",
        "Tuple",
        "typing",
        "Union",
        "syft",
        "sy",
        "syft",
        "codes",
        "MSGTYPE",
        "syft",
        "generic",
        "frameworks",
        "types",
        "FrameworkTensor",
        "syft",
        "generic",
        "frameworks",
        "types",
        "FrameworkLayerModule",
        "syft",
        "generic",
        "AbstractObject",
        "syft",
        "generic",
        "object_storage",
        "ObjectStorage",
        "syft",
        "generic",
        "pointers",
        "pointer_plan",
        "PointerPlan",
        "syft",
        "messaging",
        "plan",
        "procedure",
        "Procedure",
        "syft",
        "messaging",
        "plan",
        "state",
        "State",
        "syft",
        "workers",
        "AbstractWorker",
        "args_shape",
        "state",
        "args_shape",
        "state",
        "state",
        "plan_blueprint",
        "Plan",
        "owner",
        "sy",
        "local_worker",
        "id",
        "sy",
        "ID_PROVIDER",
        "pop",
        "name",
        "plan_blueprint",
        "blueprint",
        "plan_blueprint",
        "state_tensors",
        "state_tensors",
        "include_state",
        "include_state",
        "args_shape",
        "Plan",
        "_create_placeholders",
        "args_shape",
        "plan",
        "build",
        "args",
        "plan",
        "args",
        "kwargs",
        "SyntaxError",
        "AbstractObject",
        "ObjectStorage",
        "name",
        "procedure",
        "Procedure",
        "state",
        "State",
        "include_state",
        "is_built",
        "state_ids",
        "Union",
        "arg_ids",
        "Union",
        "result_ids",
        "Union",
        "readable_plan",
        "blueprint",
        "state_tensors",
        "id",
        "Union",
        "owner",
        "tags",
        "description",
        "owner",
        "sy",
        "local_worker",
        "AbstractObject",
        "id",
        "owner",
        "tags",
        "description",
        "child",
        "ObjectStorage",
        "name",
        "__class__",
        "owner",
        "procedure",
        "Procedure",
        "readable_plan",
        "arg_ids",
        "result_ids",
        "state",
        "State",
        "owner",
        "owner",
        "plan",
        "state_ids",
        "state_ids",
        "state_tensors",
        "tensor",
        "state_tensors",
        "state",
        "state_ids",
        "append",
        "tensor",
        "id",
        "owner",
        "register_obj",
        "tensor",
        "include_state",
        "is_built",
        "blueprint",
        "blueprint",
        "is_built",
        "staticmethod",
        "args_shape",
        "shape",
        "args_shape",
        "x",
        "x",
        "shape",
        "ValueError",
        "format",
        "shape",
        "mapped_shapes",
        "append",
        "y",
        "y",
        "y",
        "shape",
        "sy",
        "framework",
        "hook",
        "create_zeros",
        "shape",
        "shape",
        "mapped_shapes",
        "property",
        "owner",
        "_known_workers",
        "property",
        "AttributeError",
        "property",
        "procedure",
        "operations",
        "state",
        "tensors",
        "args",
        "kwargs",
        "owner",
        "send_msg",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "owner",
        "request_obj",
        "args",
        "kwargs",
        "obj_id",
        "Union",
        "get_obj",
        "obj_id",
        "de_register_obj",
        "obj",
        "obj",
        "bin_message",
        "bin",
        "msg_type",
        "contents",
        "sy",
        "serde",
        "deserialize",
        "bin_message",
        "details",
        "msg_type",
        "MSGTYPE",
        "OBJ",
        "MSGTYPE",
        "OBJ_DEL",
        "MSGTYPE",
        "FORCE_OBJ_DEL",
        "is_built",
        "procedure",
        "operations",
        "append",
        "some_type",
        "msg_type",
        "contents",
        "msg_type",
        "MSGTYPE",
        "OBJ_REQ",
        "MSGTYPE",
        "IS_NONE",
        "MSGTYPE",
        "GET_SHAPE",
        "__call__",
        "sy",
        "serde",
        "serialize",
        "args",
        "arg",
        "send",
        "arg",
        "args",
        "state",
        "clone_state_dict",
        "state",
        "send_for_build",
        "location",
        "include_state",
        "forward",
        "build_args",
        "state",
        "forward",
        "build_args",
        "state",
        "set_",
        "cloned_state",
        "procedure",
        "update_worker_ids",
        "from_worker_id",
        "id",
        "to_worker_id",
        "owner",
        "id",
        "procedure",
        "arg",
        "id_at_location",
        "arg",
        "build_args",
        "procedure",
        "res_ptr",
        "id_at_location",
        "Plan",
        "name",
        "name",
        "procedure",
        "procedure",
        "copy",
        "state",
        "state",
        "copy",
        "include_state",
        "include_state",
        "is_built",
        "is_built",
        "id",
        "sy",
        "ID_PROVIDER",
        "pop",
        "owner",
        "owner",
        "tags",
        "tags",
        "description",
        "description",
        "plan",
        "state",
        "plan",
        "plan",
        "state",
        "set_",
        "state",
        "clone_state_dict",
        "plan",
        "procedure",
        "update_worker_ids",
        "id",
        "plan",
        "id",
        "plan",
        "name",
        "value",
        "__setattr__",
        "name",
        "value",
        "isinstance",
        "value",
        "FrameworkTensor",
        "state",
        "state_ids",
        "append",
        "value",
        "id",
        "owner",
        "register_obj",
        "value",
        "isinstance",
        "value",
        "FrameworkLayerModule",
        "tensor_name",
        "tensor",
        "value",
        "named_tensors",
        "__setattr__",
        "name",
        "tensor_name",
        "tensor",
        "args",
        "kwargs",
        "len",
        "kwargs",
        "ValueError",
        "sy",
        "ID_PROVIDER",
        "pop",
        "forward",
        "include_state",
        "args",
        "state",
        "forward",
        "args",
        "run",
        "args",
        "result_ids",
        "result_ids",
        "message",
        "procedure",
        "operations",
        "sy",
        "serde",
        "serialize",
        "message",
        "simplified",
        "owner",
        "recv_msg",
        "bin_message",
        "args",
        "Tuple",
        "result_ids",
        "Union",
        "is_built",
        "build",
        "args",
        "procedure",
        "update_args",
        "args",
        "result_ids",
        "execute_commands",
        "owner",
        "get_obj",
        "result_id",
        "result_id",
        "result_ids",
        "len",
        "responses",
        "responses",
        "responses",
        "locations",
        "force",
        "PointerPlan",
        "is_built",
        "force",
        "RuntimeError",
        "len",
        "locations",
        "locations",
        "procedure",
        "update_worker_ids",
        "owner",
        "id",
        "location",
        "id",
        "owner",
        "send",
        "workers",
        "location",
        "procedure",
        "update_worker_ids",
        "location",
        "id",
        "owner",
        "id",
        "location",
        "locations",
        "procedure",
        "update_worker_ids",
        "owner",
        "id",
        "location",
        "id",
        "owner",
        "send",
        "workers",
        "location",
        "procedure",
        "update_worker_ids",
        "location",
        "id",
        "owner",
        "id",
        "ids_at_location",
        "append",
        "pointer",
        "id_at_location",
        "sy",
        "PointerPlan",
        "location",
        "locations",
        "id_at_location",
        "ids_at_location",
        "pointer",
        "state",
        "get_",
        "get_",
        "args",
        "kwargs",
        "state",
        "fix_precision_",
        "args",
        "kwargs",
        "fix_precision_",
        "state",
        "float_precision_",
        "float_precision_",
        "args",
        "kwargs",
        "state",
        "share_",
        "args",
        "kwargs",
        "share_",
        "owner",
        "garbage_collect_data",
        "location",
        "id_at_location",
        "kwargs",
        "PointerPlan",
        "owner",
        "owner",
        "location",
        "location",
        "owner",
        "id_at_location",
        "id_at_location",
        "id",
        "garbage_collect_data",
        "garbage_collect_data",
        "split",
        "split",
        "name",
        "id",
        "owner",
        "id",
        "tags",
        "len",
        "tags",
        "tag",
        "tags",
        "tag",
        "is_built",
        "__str__",
        "staticmethod",
        "plan",
        "sy",
        "serde",
        "_simplify",
        "plan",
        "id",
        "sy",
        "serde",
        "_simplify",
        "plan",
        "procedure",
        "sy",
        "serde",
        "_simplify",
        "plan",
        "state",
        "sy",
        "serde",
        "_simplify",
        "plan",
        "include_state",
        "sy",
        "serde",
        "_simplify",
        "plan",
        "is_built",
        "sy",
        "serde",
        "_simplify",
        "plan",
        "name",
        "sy",
        "serde",
        "_simplify",
        "plan",
        "tags",
        "sy",
        "serde",
        "_simplify",
        "plan",
        "description",
        "staticmethod",
        "worker",
        "AbstractWorker",
        "plan_tuple",
        "plan_tuple",
        "sy",
        "serde",
        "_detail",
        "worker",
        "id",
        "sy",
        "serde",
        "_detail",
        "worker",
        "procedure",
        "sy",
        "serde",
        "_detail",
        "worker",
        "state",
        "sy",
        "Plan",
        "owner",
        "worker",
        "id",
        "id",
        "include_state",
        "include_state",
        "is_built",
        "is_built",
        "procedure",
        "state",
        "plan",
        "sy",
        "serde",
        "_detail",
        "worker",
        "name",
        "sy",
        "serde",
        "_detail",
        "worker",
        "tags",
        "sy",
        "serde",
        "_detail",
        "worker",
        "description",
        "plan"
    ],
    "literals": [
        "\"method2plan is not supported anymore. Consider instead subclassing your object from sy.Plan.\"",
        "\"sy.workers.BaseWorker\"",
        "\"Invalid shape {}\"",
        "\"Plan has no attribute location\"",
        "f\"{name}_{tensor_name}\"",
        "\"Kwargs are not supported for plan.\"",
        "\"A plan needs to be built before being sent to a worker.\"",
        "\"<\"",
        "\"'\"",
        "\".\"",
        "\" \"",
        "\" id:\"",
        "\" owner:\"",
        "\" Tags:\"",
        "\" \"",
        "\" built\"",
        "\">\"",
        "\"Plan\"",
        "\"Plan\""
    ],
    "variables": [
        "args_shape",
        "state_tensors",
        "include_state",
        "plan",
        "args",
        "owner",
        "name",
        "owner",
        "procedure",
        "state",
        "include_state",
        "is_built",
        "forward",
        "forward",
        "mapped_shapes",
        "obj",
        "some_type",
        "build_args",
        "cloned_state",
        "res_ptr",
        "res_ptr",
        "arg_ids",
        "result_ids",
        "is_built",
        "plan",
        "plan",
        "result_ids",
        "args",
        "bin_message",
        "_",
        "responses",
        "location",
        "pointer",
        "ids_at_location",
        "pointer",
        "pointer",
        "get",
        "fix_precision",
        "fix_prec_",
        "fix_prec",
        "float_precision",
        "float_prec_",
        "float_prec",
        "share",
        "id",
        "procedure",
        "state",
        "include_state",
        "is_built",
        "name",
        "tags",
        "description",
        "id",
        "procedure",
        "state",
        "plan",
        "plan",
        "procedure",
        "plan",
        "state",
        "state",
        "plan",
        "plan",
        "name",
        "plan",
        "tags",
        "plan",
        "description"
    ],
    "comments": [
        "include_state is used to distinguish if the initial plan is a function or a class:",
        "if it's a function, then the state should be provided in the args, so include_state",
        "will be true. And to know if it was indeed a function, we just need to see if a",
        "\"manual\" state was provided.",
        "Build the plan automatically",
        "Optional kwargs if commands or state are not provided",
        "General kwargs",
        "Plan instance info",
        "Info about the plan stored via the state and the procedure",
        "In order to support -1 value in shape to indicate any dimension",
        "we map -1 to 1 for shape dimensions.",
        "TODO: A more complex strategy could be used",
        "For backward compatibility",
        "we can't receive the results of a plan without",
        "executing it. So, execute the plan.",
        "Move the arguments of the first call to the plan",
        "Same for the state element: we send to the plan and keep a clone",
        "We usually have include_state==True for functions converted to plan",
        "using @func2plan and we need therefore to add the state manually",
        "We put back the clone of the original state",
        "The plan is now built, we hide the fact that it was run on",
        "the plan and not on the owner by replacing the workers ids",
        "Register the ids of the args used for building the plan: as they will be",
        "included in the commands, it should be updated when the function is called",
        "with new args, so that's why we keep the ref ids in self.procedure.arg_ids",
        "Also register the id where the result should be stored",
        "General kwargs",
        "Replace occurences of the old id to the new plan id",
        "We build the plan only if needed",
        "Send the Plan",
        "Revert ids",
        "Send the Plan",
        "Revert ids"
    ],
    "docstrings": [
        "\"\"\"Converts a function to a plan.\n\n    Converts a function containing sequential pytorch code into\n    a plan object which can be sent to any arbitrary worker.\n\n    This class should be used only as a decorator.\n    \"\"\"",
        "\"\"\"\n    A Plan stores a sequence of torch operations, just like a function.\n\n    A Plan is intended to store a sequence of torch operations, just like a function,\n    but it allows to send this sequence of operations to remote workers and to keep a\n    reference to it. This way, to compute remotely this sequence of operations on some remote\n    input referenced through pointers, instead of sending multiple messages you need now to send a\n    single message with the references of the plan and the pointers.\n\n    All arguments are optional.\n\n    Args:\n        name: the name of the name\n        procedure: stores and manages the plan's commands\n        state: store the plan tensors like model parameters\n        include_state: if true, implies that the plan is a function, else a class. If true, the\n            state is re-integrated in the args to be accessed within the function\n        is_built: state if the plan has already been built.\n        state_ids: ids of the state elements\n        arg_ids: ids of the last argument ids (present in the procedure commands)\n        result_ids: ids of the last result ids (present in the procedure commands)\n        readable_plan: list of commands\n        blueprint: the function to be transformed into a plan\n        state_tensors: a tuple of state elements. It can be used to populate a state\n        id: state id\n        owner: state owner\n        tags: state tags\n        description: state decription\n    \"\"\"",
        "\"\"\"\n        This is defined to match the torch api of nn.Module where .parameters() return the model tensors / parameters\n        \"\"\"",
        "\"\"\"Returns the deregistered object from registry.\n\n        Args:\n            obj_id: A string or integer id of an object to look up.\n        \"\"\"",
        "\"\"\"Upon reception, a Plan stores all commands which can be executed lazily.\n        Args:\n            bin_message: the message of a command received.\n        Returns:\n            The None message serialized to specify the command was received.\n        \"\"\"",
        "\"\"\"Builds the plan.\n\n        The build operation is done \"on\" the plan (which can be seen like a\n        worker), by running the forward function. The plan will therefore\n        execute each command of the function, will cache it using _recv_msg\n        and will use it to fill the plan.\n        To do so, all the arguments provided and the state elements should be\n        moved to the plan, using send().\n\n        Args:\n            args: Input data.\n        \"\"\"",
        "\"\"\"Creates a copy of a plan.\"\"\"",
        "\"\"\"Add new tensors or parameter attributes to the state and register them\n        in the owner's registry\n        \"\"\"",
        "\"\"\"Calls a plan.\n\n        Calls a plan execution with some arguments, and specify the ids where the result\n        should be stored.\n\n        Returns:\n            The pointer to the result of the execution if the plan was already sent,\n            else the None message serialized.\n        \"\"\"",
        "\"\"\"Controls local or remote plan execution.\n\n        If the plan doesn't have the plan built, first build it using the blueprint.\n        Then, update the plan with the result_ids and args ids given, run the plan\n        commands, build pointer(s) to the response(s) and return.\n\n        Args:\n            args: Arguments used to run plan.\n            result_ids: List of ids where the results will be stored.\n        \"\"\"",
        "\"\"\"Send plan to locations.\n\n        If the plan was not built locally it will raise an exception.\n        If `force` = true plan is going to be sent either way.\n\n        Args:\n            locations: List of workers.\n            force: A boolean indicating if this operation should be forced.\n        \"\"\"",
        "\"\"\"Returns the string representation of Plan.\"\"\"",
        "\"\"\"\n        This function takes the attributes of a Plan and saves them in a tuple\n        Args:\n            plan (Plan): a Plan object\n        Returns:\n            tuple: a tuple holding the unique attributes of the Plan object\n\n        \"\"\"",
        "\"\"\"This function reconstructs a Plan object given its attributes in the form of a tuple.\n        Args:\n            worker: the worker doing the deserialization\n            plan_tuple: a tuple holding the attributes of the Plan\n        Returns:\n            plan: a Plan object\n        \"\"\""
    ],
    "functions": [
        "__call__",
        "method2plan",
        "_create_placeholders",
        "_known_workers",
        "location",
        "readable_plan",
        "parameters",
        "send_msg",
        "request_obj",
        "respond_to_obj_req",
        "_recv_msg",
        "build",
        "copy",
        "__setattr__",
        "__call__",
        "execute_commands",
        "run",
        "send",
        "get_",
        "fix_precision_",
        "float_precision_",
        "share_",
        "create_pointer",
        "__str__",
        "__repr__",
        "simplify",
        "detail"
    ],
    "classes": [
        "func2plan",
        "Plan"
    ]
}