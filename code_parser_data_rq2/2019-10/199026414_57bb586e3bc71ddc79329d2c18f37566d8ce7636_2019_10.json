{
    "identifiers": [
        "com",
        "andre601",
        "javabotblockapi",
        "requests",
        "com",
        "andre601",
        "javabotblockapi",
        "BotBlockAPI",
        "com",
        "andre601",
        "javabotblockapi",
        "exceptions",
        "RatelimitedException",
        "net",
        "dv8tion",
        "jda",
        "api",
        "JDA",
        "net",
        "dv8tion",
        "jda",
        "api",
        "sharding",
        "ShardManager",
        "org",
        "jetbrains",
        "annotations",
        "NotNull",
        "org",
        "json",
        "JSONArray",
        "org",
        "json",
        "JSONObject",
        "java",
        "io",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "disableCache",
        "REQUEST_HANDLER",
        "disableCache",
        "disableCache",
        "disableCache",
        "disableCache",
        "NotNull",
        "jda",
        "NotNull",
        "botBlockAPI",
        "json",
        "put",
        "jda",
        "getGuilds",
        "size",
        "put",
        "jda",
        "getSelfUser",
        "getId",
        "jda",
        "getShardInfo",
        "getShardTotal",
        "json",
        "put",
        "jda",
        "getShardInfo",
        "getShardId",
        "put",
        "jda",
        "getShardInfo",
        "getShardTotal",
        "botBlockAPI",
        "getAuthTokens",
        "forEach",
        "json",
        "put",
        "REQUEST_HANDLER",
        "performPOST",
        "json",
        "botId",
        "guilds",
        "NotNull",
        "botBlockAPI",
        "postGuilds",
        "toString",
        "botId",
        "guilds",
        "botBlockAPI",
        "NotNull",
        "shardManager",
        "NotNull",
        "botBlockAPI",
        "jda",
        "shardManager",
        "getShardById",
        "jda",
        "json",
        "put",
        "shardManager",
        "getGuilds",
        "size",
        "put",
        "jda",
        "getSelfUser",
        "getId",
        "put",
        "shardManager",
        "getShardCache",
        "size",
        "shards",
        "shard",
        "shardManager",
        "getShards",
        "shards",
        "add",
        "shard",
        "getGuilds",
        "size",
        "json",
        "put",
        "Arrays",
        "deepToString",
        "shards",
        "toArray",
        "botBlockAPI",
        "getAuthTokens",
        "forEach",
        "json",
        "put",
        "REQUEST_HANDLER",
        "performPOST",
        "json",
        "NotNull",
        "botId",
        "guilds",
        "NotNull",
        "botBlockAPI",
        "json",
        "put",
        "guilds",
        "put",
        "botId",
        "botBlockAPI",
        "getAuthTokens",
        "forEach",
        "json",
        "put",
        "REQUEST_HANDLER",
        "performPOST",
        "json"
    ],
    "literals": [
        "\"server_count\"",
        "\"bot_id\"",
        "\"shard_id\"",
        "\"shard_count\"",
        "\"Received shard was null!\"",
        "\"server_count\"",
        "\"bot_id\"",
        "\"shard_count\"",
        "\"shards\"",
        "\"server_count\"",
        "\"bot_id\""
    ],
    "variables": [
        "disableCache"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright 2019 Andre601\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,\n * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or substantial\n * portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "* Posts the guild count provided through the {@link net.dv8tion.jda.api.JDA JDA instance}.\n     * <br><b>It's recommended to use {@link #postGuilds(ShardManager, BotBlockAPI) postGuilds(ShardManager, BotBlockAPI} \n     * if you're using a sharded bot.</b>\n     * \n     * <p>When the amount of shards a bot has is bigger than one will shard_id and shard_count be added.\n     * \n     * @param  jda\n     *         The {@link net.dv8tion.jda.api.JDA JDA instance}.\n     * @param  botBlockAPI\n     *         The {@link com.andre601.javabotblockapi.BotBlockAPI BotBlockAPI instance}.\n     *         \n     * @throws IOException\n     *         When the post request couldn't be performed.\n     * @throws RatelimitedException\n     *         When we exceed the rate-limit of the BotBlock API.",
        "* Posts the guild count with the provided bot id.\n     * \n     * @param  botId\n     *         The ID of the bot.\n     * @param  guilds\n     *         The guild count.\n     * @param  botBlockAPI\n     *         The {@link com.andre601.javabotblockapi.BotBlockAPI BotBlockAPI instance}.\n     *\n     * @throws IOException\n     *         When the post request couldn't be performed.\n     * @throws RatelimitedException\n     *         When we exceed the rate-limit of the BotBlock API.",
        "* Posts the guild count from the provided {@link net.dv8tion.jda.api.sharding.ShardManager ShardManager instance}.\n     * <br>The guild count of each shard will be added as an JSONArray.\n     * \n     * @param  shardManager\n     *         The {@link net.dv8tion.jda.api.sharding.ShardManager ShardManager instance}.\n     * @param  botBlockAPI\n     *         The {@link com.andre601.javabotblockapi.BotBlockAPI BotBlockAPI instance}.\n     *\n     * @throws IOException\n     *         When the post request couldn't be performed.\n     * @throws RatelimitedException\n     *         When we exceed the rate-limit of the BotBlock API.",
        "* Posts the guild count with the provided bot id.\n     *\n     * @param  botId\n     *         The ID of the bot.\n     * @param  guilds\n     *         The guild count.\n     * @param  botBlockAPI\n     *         The {@link com.andre601.javabotblockapi.BotBlockAPI BotBlockAPI instance}.\n     *\n     * @throws IOException\n     *         When the post request couldn't be performed.\n     * @throws RatelimitedException\n     *         When we exceed the rate-limit of the BotBlock API."
    ],
    "functions": [
        "PostAction",
        "PostAction",
        "postGuilds",
        "postGuilds",
        "postGuilds",
        "postGuilds"
    ],
    "classes": [
        "PostAction"
    ]
}