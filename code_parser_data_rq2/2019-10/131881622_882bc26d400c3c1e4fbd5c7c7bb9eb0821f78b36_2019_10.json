{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "os",
        "argparse",
        "pprint",
        "os",
        "environ",
        "tensorflow",
        "tf",
        "dllogger",
        "logger",
        "LOGGER",
        "model",
        "unet",
        "UNet_v1",
        "model",
        "blocks",
        "activation_blck",
        "authorized_activation_fn",
        "utils",
        "cmdline_helper",
        "_add_bool_argument",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "choices",
        "required",
        "help",
        "parser",
        "add_argument",
        "choices",
        "required",
        "help",
        "parser",
        "add_argument",
        "choices",
        "UNet_v1",
        "authorized_models_variants",
        "required",
        "help",
        "parser",
        "add_argument",
        "choices",
        "authorized_activation_fn",
        "required",
        "help",
        "_add_bool_argument",
        "parser",
        "parser",
        "name",
        "required",
        "help",
        "_add_bool_argument",
        "parser",
        "parser",
        "name",
        "required",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_known_args",
        "len",
        "unknown_args",
        "bad_arg",
        "unknown_args",
        "bad_arg",
        "ValueError",
        "FLAGS",
        "RUNNING_CONFIG",
        "RUNNING_CONFIG",
        "use_tf_amp",
        "os",
        "environ",
        "UNet_v1",
        "model_name",
        "input_format",
        "compute_format",
        "RUNNING_CONFIG",
        "data_format",
        "n_output_channels",
        "unet_variant",
        "RUNNING_CONFIG",
        "unet_variant",
        "weight_init_method",
        "activation_fn",
        "RUNNING_CONFIG",
        "activation_fn",
        "tf",
        "ConfigProto",
        "config_proto",
        "gpu_options",
        "RUNNING_CONFIG",
        "use_xla",
        "LOGGER",
        "log",
        "config_proto",
        "graph_options",
        "optimizer_options",
        "tf",
        "OptimizerOptions",
        "ON_1",
        "config_proto",
        "gpu_options",
        "tf",
        "estimator",
        "RunConfig",
        "model_dir",
        "tf_random_seed",
        "save_summary_steps",
        "save_checkpoints_steps",
        "save_checkpoints_secs",
        "session_config",
        "config_proto",
        "keep_checkpoint_max",
        "keep_checkpoint_every_n_hours",
        "log_step_count_steps",
        "train_distribute",
        "device_fn",
        "protocol",
        "eval_distribute",
        "experimental_distribute",
        "tf",
        "estimator",
        "Estimator",
        "model_fn",
        "model",
        "model_dir",
        "RUNNING_CONFIG",
        "model_checkpoint_path",
        "config",
        "run_config",
        "LOGGER",
        "log",
        "tf",
        "float32",
        "RUNNING_CONFIG",
        "input_dtype",
        "tf",
        "float16",
        "RUNNING_CONFIG",
        "batch_size",
        "tf",
        "placeholder",
        "dtype",
        "input_type",
        "shape",
        "input_shape",
        "name",
        "tf",
        "estimator",
        "TensorServingInputReceiver",
        "features",
        "features",
        "receiver_tensors",
        "features",
        "serving_input_receiver_fn",
        "estimator",
        "export_saved_model",
        "export_dir_base",
        "RUNNING_CONFIG",
        "export_dir",
        "serving_input_receiver_fn",
        "get_serving_input_receiver_fn",
        "checkpoint_path",
        "RUNNING_CONFIG",
        "model_checkpoint_path",
        "LOGGER",
        "log",
        "export_path",
        "decode",
        "tf",
        "logging",
        "set_verbosity",
        "tf",
        "logging",
        "ERROR",
        "tf",
        "disable_eager_execution",
        "get_export_flags",
        "endpattern",
        "flags",
        "model_checkpoint_path",
        "endpattern",
        "os",
        "path",
        "isfile",
        "file_to_check",
        "FileNotFoundError",
        "file_to_check",
        "pprint",
        "pprint",
        "flags",
        "_get_kwargs",
        "export_model",
        "flags"
    ],
    "literals": [
        "\"TF_CPP_MIN_LOG_LEVEL\"",
        "\"3\"",
        "\"JoC-UNet_v1-TF-ExportFlags\"",
        "'--export_dir'",
        "'The export directory.'",
        "'--model_checkpoint_path'",
        "'Checkpoint path.'",
        "'--data_format'",
        "'NHWC'",
        "'NCHW'",
        "\"NCHW\"",
        "'--input_dtype'",
        "'fp32'",
        "'fp16'",
        "\"fp32\"",
        "'--unet_variant'",
        "\"tinyUNet\"",
        "'--activation_fn'",
        "\"relu\"",
        "\"use_tf_amp\"",
        "\"Enable Automatic Mixed Precision Computation to maximise performance.\"",
        "\"use_xla\"",
        "\"Enable Tensorflow XLA to maximise performance.\"",
        "'--batch_size'",
        "'Evaluation batch size.'",
        "\"ERROR: Unknown command line arg: %s\"",
        "\"Invalid command line arg(s)\"",
        "\"TF_ENABLE_AUTO_MIXED_PRECISION_GRAPH_REWRITE\"",
        "\"1\"",
        "\"UNet_v1\"",
        "\"NHWC\"",
        "\"he_normal\"",
        "\"XLA is activated - Experimental Feature\"",
        "'debug_verbosity'",
        "'[*] Exporting the model ...'",
        "'input_tensor'",
        "'[*] Done! path: `%s`'",
        "'__main__'",
        "\".index\"",
        "\".meta\"",
        "\"The checkpoint file `%s` does not exist\"",
        "\" ========================= Export Flags =========================\\n\"",
        "\"\\n %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\""
    ],
    "variables": [
        "parser",
        "FLAGS",
        "unknown_args",
        "model",
        "config_proto",
        "config_proto",
        "allow_soft_placement",
        "config_proto",
        "log_device_placement",
        "allow_growth",
        "global_jit_level",
        "force_gpu_compatible",
        "run_config",
        "estimator",
        "input_type",
        "input_shape",
        "features",
        "export_path",
        "flags",
        "file_to_check"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "==============================================================================",
        "",
        "Copyright (c) 2019, NVIDIA CORPORATION. All rights reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "",
        "==============================================================================",
        "Only working on single GPU",
        "Force pinned memory",
        "disabled",
        "disabled"
    ],
    "docstrings": [
        "\"\"\"\nUsage:\n\n    python export_saved_model.py \\\n        --activation_fn='relu' \\\n        --batch_size=16 \\\n        --data_format='NCHW' \\\n        --input_dtype=\"fp32\" \\\n        --export_dir=\"exported_models\" \\\n        --model_checkpoint_path=\"path/to/checkpoint/model.ckpt-2500\" \\\n        --unet_variant='tinyUNet' \\\n        --use_xla \\\n        --use_tf_amp\n\"\"\"",
        "\"\"\"Which Tensor format is used for computation inside the mode\"\"\"",
        "\"\"\"Tensorflow dtype of the input tensor\"\"\"",
        "\"\"\"Which model size is used. This parameter control directly the size and the number of parameters\"\"\"",
        "\"\"\"Which activation function is used after the convolution layers\"\"\""
    ],
    "functions": [
        "get_export_flags",
        "export_model",
        "get_serving_input_receiver_fn",
        "serving_input_receiver_fn"
    ],
    "classes": []
}