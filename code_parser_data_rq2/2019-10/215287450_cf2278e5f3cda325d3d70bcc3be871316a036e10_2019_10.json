{
    "identifiers": [
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "i",
        "len",
        "t",
        "i",
        "i",
        "t",
        "i",
        "len",
        "t",
        "i",
        "i",
        "t",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "is_odd",
        "n",
        "is_even",
        "n",
        "n",
        "is_odd",
        "n",
        "is_even",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "x",
        "x",
        "x",
        "x",
        "factorial",
        "x",
        "x",
        "x",
        "x",
        "x",
        "factorial_2",
        "x",
        "n",
        "m",
        "n",
        "m",
        "ValueError",
        "factorial",
        "m",
        "factorial",
        "n",
        "factorial",
        "m",
        "n",
        "x",
        "x",
        "max_val",
        "min_val",
        "abs",
        "ans",
        "x",
        "ans",
        "ans",
        "x",
        "ans",
        "ans",
        "x",
        "ans",
        "x",
        "x",
        "x",
        "abs",
        "lastres",
        "res",
        "res",
        "res",
        "x",
        "res",
        "res",
        "x",
        "sqrt_newton",
        "x",
        "x",
        "x",
        "pi",
        "i",
        "temp",
        "i",
        "x",
        "i",
        "factorial",
        "i",
        "temp",
        "x",
        "x",
        "pi",
        "i",
        "temp",
        "i",
        "x",
        "i",
        "factorial",
        "i",
        "temp",
        "x",
        "sin",
        "x",
        "cos",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "n",
        "x",
        "n",
        "x",
        "ln",
        "x",
        "ln",
        "f",
        "a",
        "method",
        "h",
        "method",
        "f",
        "a",
        "h",
        "f",
        "a",
        "h",
        "h",
        "method",
        "f",
        "a",
        "h",
        "f",
        "a",
        "h",
        "method",
        "f",
        "a",
        "f",
        "a",
        "h",
        "h",
        "ValueError",
        "A",
        "precision",
        "i",
        "len",
        "A",
        "end",
        "j",
        "len",
        "A",
        "format",
        "A",
        "i",
        "j",
        "precision",
        "end",
        "A",
        "precision",
        "len",
        "A",
        "end",
        "j",
        "len",
        "A",
        "format",
        "A",
        "j",
        "precision",
        "end",
        "len",
        "A",
        "i",
        "len",
        "A",
        "format",
        "A",
        "i",
        "precision",
        "ValueError",
        "vec_tuple",
        "precision",
        "k",
        "len",
        "vec_tuple",
        "len",
        "vec_tuple",
        "k",
        "k",
        "end",
        "j",
        "len",
        "vec_tuple",
        "k",
        "format",
        "vec_tuple",
        "k",
        "j",
        "precision",
        "end",
        "len",
        "vec_tuple",
        "k",
        "k",
        "i",
        "len",
        "vec_tuple",
        "format",
        "vec_tuple",
        "k",
        "i",
        "precision",
        "ValueError",
        "row",
        "col",
        "i",
        "col",
        "i",
        "row",
        "row",
        "col",
        "i",
        "col",
        "i",
        "row",
        "n",
        "i",
        "n",
        "i",
        "n",
        "i",
        "n",
        "a",
        "i",
        "a",
        "A",
        "zeros",
        "len",
        "A",
        "len",
        "A",
        "i",
        "len",
        "A",
        "j",
        "len",
        "A",
        "B",
        "i",
        "A",
        "j",
        "i",
        "B",
        "A",
        "zeros",
        "len",
        "A",
        "len",
        "A",
        "i",
        "len",
        "A",
        "j",
        "len",
        "A",
        "B",
        "i",
        "A",
        "j",
        "i",
        "B",
        "A",
        "B",
        "len",
        "B",
        "len",
        "A",
        "ValueError",
        "len",
        "A",
        "len",
        "B",
        "i",
        "result_column",
        "j",
        "result_row",
        "len",
        "B",
        "i",
        "result_row",
        "j",
        "result_column",
        "k",
        "common_rowcol",
        "result",
        "i",
        "j",
        "A",
        "i",
        "k",
        "B",
        "k",
        "j",
        "result",
        "array",
        "len",
        "array",
        "i",
        "n",
        "j",
        "i",
        "n",
        "array",
        "i",
        "array",
        "j",
        "num",
        "is_even",
        "num",
        "is_odd",
        "num",
        "array",
        "len",
        "array",
        "i",
        "n",
        "j",
        "i",
        "n",
        "array",
        "i",
        "array",
        "j",
        "num",
        "num",
        "perm_num",
        "perm_list",
        "perm_count",
        "array",
        "k",
        "m",
        "perm_list",
        "perm_num",
        "perm_count",
        "perm_count",
        "k",
        "m",
        "perm_list",
        "append",
        "i",
        "m",
        "perm_list",
        "perm_num",
        "append",
        "array",
        "i",
        "perm_num",
        "i",
        "k",
        "m",
        "array",
        "k",
        "array",
        "i",
        "array",
        "i",
        "array",
        "k",
        "perm",
        "array",
        "k",
        "m",
        "array",
        "k",
        "array",
        "i",
        "array",
        "i",
        "array",
        "k",
        "perm_list",
        "A",
        "len",
        "A",
        "len",
        "A",
        "n",
        "m",
        "ValueError",
        "i",
        "i",
        "n",
        "reset_perm",
        "perm",
        "row",
        "n",
        "k",
        "factorial",
        "n",
        "i",
        "j",
        "transpose",
        "row",
        "col",
        "k",
        "p",
        "A",
        "i",
        "j",
        "s",
        "permutation_sign",
        "col",
        "k",
        "p",
        "s",
        "A",
        "zeros",
        "len",
        "A",
        "len",
        "A",
        "i",
        "len",
        "A",
        "j",
        "len",
        "A",
        "B",
        "i",
        "A",
        "i",
        "j",
        "B",
        "A",
        "row",
        "col",
        "deepcopy",
        "A",
        "i",
        "len",
        "B",
        "B",
        "i",
        "col",
        "B",
        "row",
        "row",
        "col",
        "det",
        "B",
        "A",
        "deepcopy",
        "A",
        "zeros",
        "len",
        "A",
        "len",
        "A",
        "len",
        "A",
        "len",
        "A",
        "i",
        "row",
        "j",
        "col",
        "C",
        "i",
        "minor",
        "B",
        "j",
        "i",
        "C",
        "A",
        "adjoint",
        "A",
        "i",
        "len",
        "B",
        "j",
        "len",
        "B",
        "B",
        "i",
        "B",
        "i",
        "j",
        "det",
        "A",
        "B",
        "B",
        "r1",
        "r2",
        "B",
        "r1",
        "B",
        "r2",
        "B",
        "r2",
        "B",
        "r1",
        "B",
        "B",
        "c1",
        "c2",
        "i",
        "len",
        "B",
        "B",
        "i",
        "c1",
        "B",
        "i",
        "c2",
        "B",
        "i",
        "c2",
        "B",
        "i",
        "c1",
        "B",
        "B",
        "r",
        "k",
        "i",
        "len",
        "A",
        "B",
        "r",
        "k",
        "B",
        "r",
        "i",
        "B",
        "B",
        "r1",
        "r2",
        "i",
        "len",
        "B",
        "B",
        "r1",
        "i",
        "B",
        "r2",
        "i",
        "B",
        "B",
        "r1",
        "k",
        "r2",
        "i",
        "len",
        "B",
        "B",
        "r1",
        "i",
        "k",
        "B",
        "r2",
        "i",
        "B",
        "matrices",
        "i",
        "len",
        "matrices",
        "M",
        "append",
        "k",
        "len",
        "matrices",
        "i",
        "len",
        "matrices",
        "M",
        "k",
        "extend",
        "matrices",
        "i",
        "k",
        "M",
        "matrices",
        "k",
        "len",
        "matrices",
        "i",
        "len",
        "matrices",
        "k",
        "M",
        "append",
        "matrices",
        "k",
        "i",
        "M",
        "A",
        "j",
        "len",
        "A",
        "i",
        "len",
        "A",
        "N",
        "append",
        "A",
        "i",
        "j",
        "M",
        "append",
        "N",
        "M",
        "A",
        "i",
        "len",
        "A",
        "M",
        "append",
        "A",
        "i",
        "M",
        "A",
        "i",
        "j",
        "k",
        "len",
        "A",
        "i",
        "A",
        "len",
        "A",
        "k",
        "j",
        "flag",
        "flag",
        "flag",
        "A",
        "itertools",
        "combinations",
        "i",
        "len",
        "A",
        "rows",
        "append",
        "i",
        "i",
        "len",
        "A",
        "cols",
        "append",
        "i",
        "min",
        "len",
        "A",
        "len",
        "A",
        "n",
        "combinations",
        "rows",
        "n",
        "combinations",
        "cols",
        "n",
        "zeros",
        "n",
        "n",
        "a",
        "len",
        "new_rows",
        "b",
        "len",
        "new_cols",
        "i",
        "n",
        "j",
        "n",
        "B",
        "i",
        "A",
        "new_rows",
        "a",
        "i",
        "new_cols",
        "b",
        "j",
        "B",
        "n",
        "A",
        "itertools",
        "combinations",
        "i",
        "len",
        "A",
        "rows",
        "append",
        "i",
        "i",
        "len",
        "A",
        "cols",
        "append",
        "i",
        "min",
        "len",
        "A",
        "len",
        "A",
        "n",
        "combinations",
        "rows",
        "n",
        "combinations",
        "cols",
        "n",
        "zeros",
        "n",
        "n",
        "a",
        "len",
        "new_rows",
        "b",
        "len",
        "new_cols",
        "i",
        "n",
        "j",
        "n",
        "B",
        "i",
        "A",
        "new_rows",
        "a",
        "i",
        "new_cols",
        "b",
        "j",
        "det",
        "B",
        "len",
        "B",
        "n",
        "n",
        "A",
        "row",
        "len",
        "A",
        "col",
        "len",
        "A",
        "is_nonzero",
        "A",
        "row",
        "col",
        "i",
        "row",
        "len",
        "A",
        "add_rows_by_factor",
        "A",
        "i",
        "A",
        "i",
        "col",
        "A",
        "row",
        "col",
        "row",
        "row",
        "col",
        "below_all_zero",
        "A",
        "row",
        "col",
        "col",
        "row",
        "col",
        "is_zero",
        "A",
        "i",
        "j",
        "i",
        "len",
        "A",
        "i",
        "exchange_rows",
        "A",
        "row",
        "i",
        "A",
        "A",
        "A",
        "len",
        "A",
        "len",
        "A",
        "A",
        "b",
        "multiply",
        "inv",
        "A",
        "b",
        "A",
        "deepcopy",
        "A",
        "zeros",
        "len",
        "A",
        "i",
        "len",
        "A",
        "b",
        "i",
        "A",
        "i",
        "len",
        "A",
        "B",
        "i",
        "pop",
        "solve_linear_equation",
        "B",
        "b",
        "a",
        "b",
        "matrix_shape",
        "a",
        "matrix_shape",
        "b",
        "ValueError",
        "len",
        "a",
        "len",
        "a",
        "ValueError",
        "len",
        "a",
        "j",
        "len",
        "a",
        "s",
        "a",
        "j",
        "b",
        "j",
        "s",
        "len",
        "a",
        "i",
        "len",
        "a",
        "s",
        "a",
        "i",
        "b",
        "i",
        "s",
        "A",
        "B",
        "matrix_shape",
        "A",
        "matrix_shape",
        "B",
        "ValueError",
        "zeros",
        "len",
        "A",
        "len",
        "A",
        "i",
        "len",
        "A",
        "j",
        "len",
        "A",
        "C",
        "i",
        "A",
        "i",
        "j",
        "B",
        "i",
        "j",
        "C",
        "A",
        "B",
        "matrix_shape",
        "A",
        "matrix_shape",
        "B",
        "ValueError",
        "zeros",
        "len",
        "A",
        "len",
        "A",
        "i",
        "len",
        "A",
        "j",
        "len",
        "A",
        "C",
        "i",
        "A",
        "i",
        "j",
        "B",
        "i",
        "j",
        "C",
        "k",
        "A",
        "zeros",
        "len",
        "A",
        "len",
        "A",
        "i",
        "len",
        "A",
        "j",
        "len",
        "A",
        "C",
        "i",
        "k",
        "A",
        "i",
        "j",
        "C",
        "vec",
        "len",
        "vec",
        "j",
        "len",
        "vec",
        "s",
        "vec",
        "j",
        "sqrt",
        "s",
        "len",
        "vec",
        "i",
        "len",
        "vec",
        "s",
        "vec",
        "i",
        "sqrt",
        "s",
        "vec",
        "times_const",
        "norm",
        "vec",
        "vec",
        "A",
        "len",
        "A",
        "len",
        "A",
        "ValueError",
        "split_col",
        "A",
        "zeros",
        "len",
        "A",
        "i",
        "len",
        "a",
        "zeros",
        "len",
        "a",
        "i",
        "a",
        "times_const",
        "norm",
        "b",
        "b",
        "j",
        "i",
        "matrix_add",
        "times_const",
        "dot",
        "b",
        "j",
        "a",
        "i",
        "dot",
        "b",
        "j",
        "b",
        "j",
        "b",
        "j",
        "s",
        "matrix_minus",
        "a",
        "i",
        "s",
        "unitize",
        "b",
        "i",
        "b",
        "vec_tuple",
        "zeros",
        "len",
        "vec_tuple",
        "len",
        "vec_tuple",
        "i",
        "len",
        "vec_tuple",
        "j",
        "len",
        "vec_tuple",
        "M",
        "i",
        "vec_tuple",
        "j",
        "i",
        "M",
        "vec",
        "schmidt_matrix",
        "grouptuple_2_matrix",
        "vec",
        "vecs_or_A",
        "len",
        "vecs_or_A",
        "vecs_or_A",
        "schmidt_matrix",
        "A",
        "vecs_or_A",
        "schmidt_matrix",
        "grouptuple_2_matrix",
        "vecs",
        "transpose",
        "solve_linear_equation",
        "A",
        "b"
    ],
    "literals": [
        "\"the first num must be LESS than of EQUAL to the second num\"",
        "'central'",
        "'central'",
        "'forward'",
        "'backward'",
        "\"Method must be 'central', 'forward' or 'backward'.\"",
        "\"Matrix[\"",
        "\"\\t\"",
        "''",
        "\".\"",
        "\"f\"",
        "'\\t'",
        "']'",
        "\"Row Vector[\"",
        "\"\\t\"",
        "''",
        "\".\"",
        "\"f\"",
        "'\\t'",
        "\"\\n]\"",
        "\"Column Vector[\"",
        "\"\\t\"",
        "\".\"",
        "\"f\"",
        "\"]\"",
        "\"NOT a vector!\"",
        "\"Row Vector(%d)[\"",
        "\"\\t\"",
        "''",
        "\".\"",
        "\"f\"",
        "'\\t'",
        "\"\\n]\"",
        "\"Column Vector(%d)[\"",
        "\"\\t\"",
        "\".\"",
        "\"f\"",
        "\"]\"",
        "\"NOT a vector!\"",
        "\"COLUMN of first matrix must be EQUAL to the ROW of second matrix!\"",
        "\"input NOT SQUARE matrix!\"",
        "\"inputs should be VECTORS of SAME TYPE!\"",
        "\"inputs should be VECTORS!\"",
        "\"inputs should be in SAME SHAPE!\"",
        "\"inputs should be in SAME SHAPE!\"",
        "\"num of vectors should be at least equal to the dimension of vectors! (make sure cols>=rows)\"",
        "'__main__'"
    ],
    "variables": [
        "pi",
        "e",
        "t",
        "t",
        "t",
        "t",
        "min_val",
        "max_val",
        "i",
        "ans",
        "max_val",
        "min_val",
        "res",
        "lastres",
        "lastres",
        "res",
        "x",
        "temp",
        "temp",
        "x",
        "temp",
        "temp",
        "n",
        "a",
        "i",
        "B",
        "j",
        "B",
        "j",
        "result_row",
        "result_column",
        "result",
        "common_rowcol",
        "n",
        "num",
        "i",
        "j",
        "n",
        "num",
        "i",
        "j",
        "perm_num",
        "perm_list",
        "perm_count",
        "perm_num",
        "perm_list",
        "perm_count",
        "n",
        "m",
        "row",
        "col",
        "p",
        "s",
        "p",
        "B",
        "j",
        "B",
        "B",
        "C",
        "row",
        "col",
        "j",
        "B",
        "j",
        "i",
        "M",
        "M",
        "M",
        "N",
        "M",
        "flag",
        "rows",
        "cols",
        "n",
        "new_rows",
        "new_cols",
        "B",
        "j",
        "rows",
        "cols",
        "n",
        "new_rows",
        "new_cols",
        "B",
        "j",
        "row",
        "col",
        "i",
        "j",
        "B",
        "b",
        "s",
        "s",
        "C",
        "j",
        "C",
        "j",
        "C",
        "j",
        "s",
        "s",
        "a",
        "b",
        "s",
        "b",
        "b",
        "s",
        "b",
        "i",
        "b",
        "i",
        "M",
        "j",
        "A",
        "vecs",
        "A",
        "b"
    ],
    "comments": [
        "-*- coding: UTF-8 -*-",
        "basics mathematics ######",
        "absolute values",
        "some is—functions###",
        "some basic functions ######",
        "隔项阶乘",
        "order: selet_item,total_item",
        "开根号，二分法",
        "print(ans,max_val,min_val)",
        "开根号，牛顿迭代法，更快",
        "暂且把牛顿迭代法作为官方迭代法",
        "trigonomitry functions ######",
        "sin(x) using Taylor expansions",
        "transform any value into [0,2pi] to avoid loss in precision in finite Taylor expansions",
        "float(\"%.3f\"%temp)",
        "exponential and logarithm",
        "数大了能算准，但是画图出现锯齿",
        "float(\"%.3f\" % ((f(a + h) - f(a - h))/(2*h)))",
        "float(\"%.3f\" % ((f(a + h) - f(a))/h))",
        "float(\"%.3f\" % ((f(a) - f(a - h))/h))",
        "linear algebra ######",
        "print matrix in a more readable way",
        "auto judge row vector and column vector and print",
        "print vector group",
        "generates matrix with all zeros",
        "generates matrix with all ones",
        "generates identity matrix",
        "这种转置方式有问题",
        "print(\"after_shape:\",len(A[0]),len(A))",
        "print(\"i:\",i)",
        "print(\"j:\",j)",
        "perform matrix muliplication",
        "check if col of A is equal to row of B",
        "use traditional row times columns;",
        "but other ways can perform this like MIT 16.04 Gilbert Strang",
        "calculates the permutation of a set, used for calculating determinants",
        "return num",
        "计算排列的逆序数，用于线性代数元素的符号判定",
        "返回一个数组的全排列，形式为二维数组，具体算法原理改日探讨",
        "next time use perm, remember to reset the variables",
        "make a copy of the perm_list before reset",
        "用于生成给定元素的全排列",
        "每次递归调用一套perm生成全排列之前，手动调用一下reset_perm()，不然上次全排列的结果会遗留",
        "For the 1st time, use directly without reset,",
        "but do use for the next time, otherwise newly generated one appended to the original one",
        "if(perm_count > factorial(len(array))):",
        "pass#reset_perm()#想办法自动重置一下，但是找不到自动重置的时机，没有切入点",
        "print(\"permutation\",perm_num+1)",
        "print(\"%d  \"%array[i],end='');",
        "print(\"\\n\\n\");",
        "calculates the determinant of the matrix",
        "the third method is preferred as computer programs.",
        "method 1",
        "行数",
        "列数",
        "生成从0到n-1的列表，用于固定行标",
        "每次递归生成perm之前，手动清零一次",
        "用于每一小项累乘",
        "行列式多项式求和",
        "print(\"term\",k+1)",
        "这种来自不同行不同列的算法有点问题",
        "print(\"item_\",i,j)",
        "print(\"permutation_sign:\",permutation_sign(col[k]))",
        "diy a function like copy.deepcopy()",
        "import copy  #自己写一个deepcopy函数，这样就不用调用这唯一的库函数了",
        "如果直接复制，会把传进来的A给修改了 浅复制二维数组的每个元素指向的行向量是一个地址",
        "calculates the adjoint of a given matrix",
        "calculates the inverse of a given matrix",
        "functions below changes the original input matrix, copy if necessary ###",
        "exchange two certain rows of a given matrix",
        "B=deepcopy(A)",
        "exchange two certain columns of a given matrix",
        "B=deepcopy(A)",
        "multiply a certain row by a given factor",
        "r the row number, k the factor",
        "adds r2 to r1",
        "r1,r2 start from 1 as in linear algebra",
        "r1+k*r2 adds k*r2 to r1",
        "r1-=1",
        "r2-=1",
        "end section ################",
        "to form augmented matrix using this",
        "改进：维数不同时可以自动填零",
        "接受之后，matrices是一个三维列表",
        "把原来各自矩阵的一行转换成完整的二维矩阵",
        "返回tuple,这样看起来像返回多个值，而不是三层list",
        "check i elements under a_ij is all zeros (a_ij included)",
        "包含了行所有的可能",
        "包含了列所有的可能",
        "print(new_rows)",
        "print(new_cols)",
        "if det(B) != 0:",
        "return len(B)",
        "if n==0:",
        "return 0",
        "convert to row echelon is complex, thus use direct calculation of the 最高阶非零子式",
        "包含了行所有的可能",
        "包含了列所有的可能",
        "print(new_rows)",
        "print(new_cols)",
        "print_matrix(B,0)",
        "print(\"det:\",det(B))",
        "print()",
        "print()",
        "pass",
        "写一个模拟人工化简矩阵的函数，可能超长",
        "用递归试一下",
        "row,col 用于定位非零首元",
        "row = 0",
        "col = 0",
        "print(\"r%d+(%d)r%d\"%(i,-A[i][col]/A[row][col],row)) 把具体操作用自然语言描述出来",
        "加到最后会溢出，不满足行列判断条件，跳出循环",
        "",
        "如果这个元素之下全都是0，就开始看下一列",
        "",
        "print(row,col)",
        "化row echelon的过程，可以改装一下row_echelon(A)",
        "rref 是唯一的，有时候非常重要，把它实现出来",
        "as for return value, the first index refers to num of rows; the second num of cols",
        "等时机合适，引入矩阵对象，自带shape，维度，行列式，逆等特征",
        "raise error when infinite solutions",
        "print(B)",
        "print(b)",
        "点积，自适应行向量and列向量",
        "说明是行向量",
        "说明是列向量",
        "说明是行向量",
        "说明是列向量",
        "Gram Schmidt Orthogonalization 接收的是矩阵，一般来讲，向量组中向量的个数应等于向量的维数",
        "理论上来讲应该接收向量组",
        "col_vec_group",
        "orth_vec_group",
        "还得写一个矩阵对应元素相加",
        "正交化",
        "print_vector(b[i])",
        "b[i] = times_const(1/norm(b[i]),b[i])   # 单位化",
        "单位化",
        "返回向量组",
        "剥一层tuple皮，然后把列向量转换成矩阵, 功能等同于comb_col, 但传入的是tuple, 传入一堆可变参数和传入一个tuple，效果是一样的",
        "自适应输入向量组和矩阵",
        "PLAYGROUND. run and play, which is the fun part!",
        "Tips: row vectors should be written as [[1,2]]; column vectors written as [[1],[2]]",
        "约定：矩阵和向量都二维list，向量组是在tuple套着几个二维list，看起来是三维",
        "挖一个大坑：把矩阵用类表示，重写整个mathy程序，用类表示的矩阵含有propety，在一些问题上比较好处理",
        "写一个把向量画出来的函数,像3B1B那样数形结合",
        "import matplotlib.pyplot as plt",
        "修改意见：传进去的矩阵返回的时候不要把原矩阵改了，看看指针引用的问题",
        "matrix_shape 只是看第一行元素来数，最好写一个check_matrix看看传入的到底是不是",
        "print_matrix(grouptuple_2_matrix(schmidt(a_1,a_2,a_3)))"
    ],
    "docstrings": [
        "\"\"\"\nPython Basic Math Libraries\nDavid L. Xu\nVersion 1.0.0\nAdapt Python Version 3.7+\nStarted From July 7, 2019\nFirst uploaded on my Github acount on Oct 15, 2019\nThere are alreay bunch of math libraries using C\nBut how can we implement it ourselves?\nWritten Purely in Python from Ground up\nFor recreational use in summer holidays\n\nNOTICE: This library is only for entertainment and \ndoes not ensure the precision to be tolerated\n\nSimply use basic operations(+-*/) and some language\nproperties to achieve most of the functions;\nMath is magic!\n\nTips:\n1.In Python2, divide(/) two numbers get an integer\n2.To avoid ambiquity, please run the script in Python3\n\"\"\"",
        "'''\n用泰勒展开求根号没有希望，因为后来误差会越来越大\ndef sqrt(x):\n    temp = 1\n    fac_odd = 1\n    fac_even = 1\n    for n in range(1,30):\n        #fac_odd = fac_odd*(2*n-1)\n        #print(\"odd\",fac_odd)\n        #print(\"even\",fac_even)\n        #fac_even = fac_even*2*n\n        temp = temp + (-1)**(n+1)*(factorial_2(2*n-1)/factorial_2(2*n))*x**n\n    return temp\n'''",
        "'''\ndef sqrt(x):\n\n    temp=1\n    temp_n = 1\n    for i in range(1,20):\n        if i == 1:\n            temp_n = 1\n        else:\n            temp_n=temp_n*(2*i-3)\n        temp = temp + (-1)**(i+1)*(temp_n)/(2**i)/factorial(i)*(x-1)**i\n    return temp\n'''",
        "'''Compute the difference formula for f'(a) with step size h.\n\n    Parameters\n    ----------\n    f : function\n        Vectorized function of one variable\n    a : number\n        Compute derivative at x = a\n    method : string\n        Difference formula: 'forward', 'backward' or 'central'\n    h : number\n        Step size in difference formula\n\n    Returns\n    -------\n    float\n        Difference formula:\n            central: f(a+h) - f(a-h))/2h\n            forward: f(a+h) - f(a))/h\n            backward: f(a) - f(a-h))/h            \n    '''",
        "'''\n    a=[]\n    for i in range(row):\n        a.append([])\n        for j in range(col):\n            a[i].append(0)\n    return a\n    '''",
        "'''\n    a=[]\n    for i in range(row):\n        a.append([])\n        for j in range(col):\n            a[i].append(1)\n    return a\n    '''",
        "\"\"\"\n自己写的函数，代替方案是现成库函数\nfrom itertools import combinations, permutations\nprint(list(permutations([1,2,3],3)))\n\"\"\"",
        "'''\n    there are several ways to calculate the determinant\n    1.use permutations denote the sign and product of deferent rows and columns\n    2.transform into upper triangular matrix, get the product of the diagonal\n    3.expand determinant recursively\n    '''",
        "\"\"\"\n    C = A\n    print(A,id(A),id(A[0]),id(A[0][0]))\n    print(B,id(B),id(B[0]),id(B[0][0]))\n    print(C,id(C),id(C[0]),id(C[0][0]))\n    \"\"\""
    ],
    "functions": [
        "abs",
        "floor",
        "ceil",
        "round",
        "min",
        "max",
        "is_even",
        "is_odd",
        "is_prime",
        "is_decimal",
        "is_integer",
        "is_zero",
        "is_one",
        "is_nonzero",
        "is_positive",
        "is_negative",
        "is_nonnegative",
        "is_nonpositive",
        "factorial",
        "factorial_2",
        "combination",
        "sqrt_binarysearch",
        "sqrt_newton",
        "sqrt",
        "sin",
        "cos",
        "tan",
        "arcsin",
        "arccos",
        "arctan",
        "exp",
        "ln",
        "log10",
        "derivative",
        "print_matrix",
        "print_vector",
        "print_group",
        "zeros",
        "ones",
        "eyes",
        "transpose",
        "transpose_square",
        "multiply",
        "permutation_sign",
        "permutation",
        "reset_perm",
        "perm",
        "det",
        "deepcopy",
        "minor",
        "adjoint",
        "inv",
        "exchange_rows",
        "exchange_cols",
        "multiply_row",
        "add_rows",
        "add_rows_by_factor",
        "comb_col",
        "comb_row",
        "split_col",
        "split_row",
        "below_all_zero",
        "打印子式",
        "rank",
        "row_echelon",
        "rank_display_process",
        "rref",
        "matrix_shape",
        "solve_linear_equation",
        "solve_augmented_mat",
        "dot",
        "matrix_add",
        "matrix_minus",
        "times_const",
        "norm",
        "unitize",
        "schmidt_matrix",
        "grouptuple_2_matrix",
        "schmidt_vec_group",
        "schmidt"
    ],
    "classes": []
}