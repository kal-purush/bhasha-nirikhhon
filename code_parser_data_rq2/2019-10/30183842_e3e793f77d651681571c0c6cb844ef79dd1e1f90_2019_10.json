{
    "identifiers": [
        "org",
        "opentripplanner",
        "routing",
        "impl",
        "com",
        "fasterxml",
        "jackson",
        "databind",
        "JsonNode",
        "org",
        "opentripplanner",
        "routing",
        "graph",
        "Graph",
        "org",
        "opentripplanner",
        "standalone",
        "Router",
        "org",
        "opentripplanner",
        "standalone",
        "config",
        "GraphConfig",
        "org",
        "opentripplanner",
        "standalone",
        "config",
        "OTPConfiguration",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "InputStream",
        "GRAPH_FILENAME",
        "LOG",
        "LoggerFactory",
        "getLogger",
        "config",
        "graphFile",
        "config",
        "getPath",
        "GRAPH_FILENAME",
        "LOG",
        "info",
        "graphFile",
        "getPath",
        "graphFile",
        "newGraph",
        "Graph",
        "load",
        "jsonConfig",
        "config",
        "routerConfig",
        "newGraph",
        "routerConfig",
        "newRouter",
        "newGraph",
        "newRouter",
        "startup",
        "jsonConfig",
        "newRouter",
        "e",
        "LOG",
        "error",
        "e"
    ],
    "literals": [
        "\"Graph.obj\"",
        "\"Loading graph from file '{}'\"",
        "\"Exception while loading graph: {}\""
    ],
    "variables": [],
    "comments": [
        "Load configuration from disk or use the embedded configuration as fallback."
    ],
    "docstrings": [
        "* Load a graph from the filesystem. Counterpart to the GraphBuilder for pre-built graphs.\n * TODO OTP2 reframe this as a Provider and wire it into the application.",
        "* Do the actual operation of graph loading. Load configuration if present, and startup the\n     * router with the help of the router lifecycle manager."
    ],
    "functions": [
        "Router",
        "loadGraph"
    ],
    "classes": [
        "GraphLoader"
    ]
}