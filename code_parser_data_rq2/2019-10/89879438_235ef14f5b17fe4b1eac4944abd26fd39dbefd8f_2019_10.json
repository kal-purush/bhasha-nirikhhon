{
    "identifiers": [
        "io",
        "vertx",
        "pgclient",
        "junit",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "InputStream",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "nio",
        "file",
        "Path",
        "java",
        "nio",
        "file",
        "StandardCopyOption",
        "org",
        "junit",
        "rules",
        "ExternalResource",
        "org",
        "testcontainers",
        "containers",
        "PostgreSQLContainer",
        "org",
        "testcontainers",
        "utility",
        "MountableFile",
        "io",
        "vertx",
        "pgclient",
        "PgConnectOptions",
        "connectionUri",
        "getProperty",
        "tlsConnectionUri",
        "getProperty",
        "server",
        "options",
        "databaseVersion",
        "ssl",
        "minimumV10",
        "ssl",
        "ssl",
        "ssl",
        "minimumV10",
        "minimumV10",
        "minimumV10",
        "options",
        "version",
        "setupFile",
        "getTestResource",
        "File",
        "separator",
        "server",
        "version",
        "withDatabaseName",
        "withUsername",
        "withPassword",
        "withCopyFileToContainer",
        "MountableFile",
        "forHostPath",
        "setupFile",
        "toPath",
        "ssl",
        "server",
        "withCopyFileToContainer",
        "MountableFile",
        "forHostPath",
        "getTestResource",
        "File",
        "separator",
        "toPath",
        "withCopyFileToContainer",
        "MountableFile",
        "forHostPath",
        "getTestResource",
        "File",
        "separator",
        "toPath",
        "withCopyFileToContainer",
        "MountableFile",
        "forHostPath",
        "getTestResource",
        "toPath",
        "name",
        "file",
        "File",
        "separator",
        "File",
        "separator",
        "name",
        "path",
        "Files",
        "createTempFile",
        "Files",
        "copy",
        "path",
        "StandardCopyOption",
        "REPLACE_EXISTING",
        "file",
        "path",
        "toFile",
        "file",
        "deleteOnExit",
        "file",
        "isSystemPropertyValid",
        "connectionUri",
        "isSystemPropertyValid",
        "tlsConnectionUri",
        "systemProperty",
        "systemProperty",
        "systemProperty",
        "isEmpty",
        "databaseVersion",
        "initServer",
        "databaseVersion",
        "server",
        "start",
        "setPort",
        "server",
        "getMappedPort",
        "PostgreSQLContainer",
        "POSTGRESQL_PORT",
        "setHost",
        "server",
        "getContainerIpAddress",
        "setDatabase",
        "setUser",
        "setPassword",
        "specifiedVersion",
        "getProperty",
        "version",
        "specifiedVersion",
        "specifiedVersion",
        "isEmpty",
        "version",
        "version",
        "specifiedVersion",
        "version",
        "server",
        "server",
        "stop",
        "server",
        "Override",
        "isTestingWithExternalDatabase",
        "ssl",
        "options",
        "PgConnectOptions",
        "fromUri",
        "tlsConnectionUri",
        "options",
        "PgConnectOptions",
        "fromUri",
        "connectionUri",
        "server",
        "databaseVersion",
        "getPostgresVersion",
        "options",
        "startServer",
        "databaseVersion",
        "getPostgresVersion",
        "startsWith",
        "Override",
        "isTestingWithExternalDatabase",
        "stopServer",
        "e",
        "e",
        "printStackTrace"
    ],
    "literals": [
        "\"connection.uri\"",
        "\"tls.connection.uri\"",
        "\"resources\"",
        "\"create-postgres.sql\"",
        "\"postgres:\"",
        "\"postgres\"",
        "\"postgres\"",
        "\"postgres\"",
        "\"/docker-entrypoint-initdb.d/create-postgres.sql\"",
        "\"resources\"",
        "\"server.crt\"",
        "\"/server.crt\"",
        "\"resources\"",
        "\"server.key\"",
        "\"/server.key\"",
        "\"ssl.sh\"",
        "\"/docker-entrypoint-initdb.d/ssl.sh\"",
        "\"docker\"",
        "\"postgres\"",
        "\"pg-client\"",
        "\".tmp\"",
        "\"postgres\"",
        "\"postgres\"",
        "\"postgres\"",
        "\"embedded.postgres.version\"",
        "\"10.10\"",
        "\"9.\""
    ],
    "variables": [
        "server",
        "options",
        "databaseVersion",
        "ssl",
        "minimumV10",
        "version"
    ],
    "comments": [
        "if version is not specified then V10.10 will be used by default",
        "use an external database for testing",
        "We do not need to launch another server if it's a shared instance",
        "hackish ;-)"
    ],
    "docstrings": [
        "* Copyright (C) 2017 Julien Viet\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *"
    ],
    "functions": [
        "ContainerPgRule",
        "ssl",
        "ContainerPgRule",
        "minimumV10",
        "PgConnectOptions",
        "options",
        "initServer",
        "File",
        "getTestResource",
        "isTestingWithExternalDatabase",
        "isSystemPropertyValid",
        "PgConnectOptions",
        "startServer",
        "getPostgresVersion",
        "stopServer",
        "before",
        "isAtLeastPg10",
        "after"
    ],
    "classes": [
        "ContainerPgRule"
    ]
}