{
    "identifiers": [
        "sys",
        "re",
        "subprocess",
        "os",
        "copy",
        "copy",
        "argparse",
        "pprint",
        "pformat",
        "pprint",
        "textwrap",
        "collections",
        "OrderedDict",
        "io",
        "StringIO",
        "distutils",
        "spawn",
        "find_executable",
        "osaca",
        "api",
        "KerncraftAPI",
        "kerncraft",
        "iaca_get",
        "__version__",
        "lst",
        "lst",
        "lst",
        "isa",
        "isa",
        "IncoreModel",
        "IncoreModel",
        "IncoreModel",
        "staticmethod",
        "isa",
        "isa",
        "x86",
        "isa",
        "AArch64",
        "staticmethod",
        "asm_lines",
        "NotImplementedError",
        "staticmethod",
        "asm_lines",
        "NotImplementedError",
        "staticmethod",
        "asm_lines",
        "NotImplementedError",
        "staticmethod",
        "blocks",
        "NotImplementedError",
        "staticmethod",
        "asm_lines",
        "start_line",
        "end_line",
        "NotImplementedError",
        "ISA",
        "staticmethod",
        "asm_lines",
        "line",
        "asm_lines",
        "asm_stripped",
        "append",
        "line",
        "split",
        "strip",
        "asm_stripped",
        "staticmethod",
        "asm_lines",
        "line",
        "asm_lines",
        "re",
        "match",
        "line",
        "line",
        "line",
        "find",
        "re",
        "match",
        "re",
        "escape",
        "label",
        "l",
        "l",
        "asm_lines",
        "asm_stripped",
        "append",
        "line",
        "asm_stripped",
        "staticmethod",
        "asm_lines",
        "OrderedDict",
        "i",
        "line",
        "asm_lines",
        "zmm_references",
        "re",
        "findall",
        "line",
        "ymm_references",
        "re",
        "findall",
        "line",
        "xmm_references",
        "re",
        "findall",
        "line",
        "gp_references",
        "re",
        "findall",
        "line",
        "re",
        "search",
        "line",
        "re",
        "search",
        "line",
        "mem_references",
        "append",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "re",
        "match",
        "line",
        "line",
        "startswith",
        "avx_ctr",
        "packed_ctr",
        "re",
        "match",
        "line",
        "line",
        "line",
        "find",
        "i",
        "re",
        "match",
        "line",
        "line",
        "find",
        "line",
        "reg_start",
        "re",
        "match",
        "line",
        "line",
        "find",
        "line",
        "const_start",
        "find",
        "const_start",
        "line",
        "find",
        "line",
        "reg_start",
        "line",
        "const_start",
        "const_end",
        "re",
        "match",
        "line",
        "line",
        "find",
        "line",
        "reg_start",
        "re",
        "match",
        "line",
        "line",
        "find",
        "line",
        "const_start",
        "find",
        "const_start",
        "line",
        "find",
        "line",
        "reg_start",
        "line",
        "const_start",
        "const_end",
        "last_labels",
        "re",
        "match",
        "line",
        "label_name",
        "label_line",
        "last_labels",
        "items",
        "re",
        "match",
        "re",
        "escape",
        "label_name",
        "line",
        "label_name",
        "label_line",
        "last_labels",
        "keys",
        "last_label",
        "mem_references",
        "mref",
        "mref",
        "mem_references",
        "mref",
        "store_references",
        "mem_references",
        "increments",
        "keys",
        "intersection",
        "r",
        "r",
        "refs",
        "r",
        "r",
        "r",
        "refs",
        "r",
        "mref",
        "refs",
        "reg",
        "possible_idx_regs",
        "mref",
        "reg",
        "mref",
        "reg",
        "mref",
        "possible_idx_regs",
        "remove",
        "reg",
        "len",
        "possible_idx_regs",
        "possible_idx_regs",
        "possible_idx_regs",
        "itemsEqual",
        "increments",
        "pidxreg",
        "pidxreg",
        "possible_idx_regs",
        "possible_idx_regs",
        "idx_reg",
        "mref",
        "mref",
        "refs",
        "idx_reg",
        "mref",
        "idx_reg",
        "mref",
        "itemsEqual",
        "mem_scales",
        "mem_scales",
        "increments",
        "idx_reg",
        "pformat",
        "labels",
        "labels",
        "index",
        "last_label",
        "pformat",
        "asm_lines",
        "last_label_line",
        "i",
        "increments",
        "pformat",
        "mem_references",
        "idx_reg",
        "mem_scales",
        "blocks",
        "append",
        "last_label_line",
        "i",
        "i",
        "last_label_line",
        "labels",
        "labels",
        "index",
        "last_label",
        "packed_ctr",
        "avx_ctr",
        "len",
        "xmm_references",
        "len",
        "xmm_references",
        "len",
        "ymm_references",
        "len",
        "ymm_references",
        "len",
        "zmm_references",
        "len",
        "zmm_references",
        "len",
        "gp_references",
        "len",
        "gp_references",
        "len",
        "xmm_references",
        "len",
        "ymm_references",
        "len",
        "zmm_references",
        "len",
        "gp_references",
        "len",
        "xmm_references",
        "len",
        "ymm_references",
        "len",
        "zmm_references",
        "len",
        "gp_references",
        "pointer_increment",
        "asm_lines",
        "last_label_line",
        "i",
        "possible_idx_regs",
        "mem_references",
        "increments",
        "OrderedDict",
        "blocks",
        "staticmethod",
        "blocks",
        "blocks",
        "ValueError",
        "max",
        "blocks",
        "key",
        "b",
        "b",
        "best_block",
        "max",
        "blocks",
        "key",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "best_block",
        "staticmethod",
        "asm_lines",
        "start_line",
        "end_line",
        "asm_lines",
        "start_line",
        "START_MARKER",
        "asm_lines",
        "start_line",
        "end_line",
        "END_MARKER",
        "asm_lines",
        "end_line",
        "asm_lines",
        "ISA",
        "staticmethod",
        "asm_lines",
        "line",
        "asm_lines",
        "asm_stripped",
        "append",
        "line",
        "split",
        "strip",
        "asm_stripped",
        "staticmethod",
        "asm_lines",
        "line",
        "asm_lines",
        "re",
        "match",
        "line",
        "line",
        "line",
        "find",
        "re",
        "match",
        "re",
        "escape",
        "label",
        "l",
        "l",
        "asm_lines",
        "asm_stripped",
        "append",
        "line",
        "asm_stripped",
        "staticmethod",
        "asm_lines",
        "OrderedDict",
        "i",
        "line",
        "asm_lines",
        "zmm_references",
        "re",
        "findall",
        "line",
        "ymm_references",
        "re",
        "findall",
        "line",
        "xmm_references",
        "re",
        "findall",
        "line",
        "gp_references",
        "re",
        "findall",
        "line",
        "re",
        "search",
        "line",
        "re",
        "search",
        "line",
        "mem_references",
        "append",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "re",
        "match",
        "line",
        "line",
        "startswith",
        "avx_ctr",
        "packed_ctr",
        "re",
        "match",
        "line",
        "line",
        "line",
        "find",
        "i",
        "re",
        "match",
        "line",
        "line",
        "find",
        "line",
        "reg_start",
        "re",
        "match",
        "line",
        "line",
        "find",
        "line",
        "const_start",
        "find",
        "const_start",
        "line",
        "find",
        "line",
        "reg_start",
        "line",
        "const_start",
        "const_end",
        "re",
        "match",
        "line",
        "line",
        "find",
        "line",
        "reg_start",
        "re",
        "match",
        "line",
        "line",
        "find",
        "line",
        "const_start",
        "find",
        "const_start",
        "line",
        "find",
        "line",
        "reg_start",
        "line",
        "const_start",
        "const_end",
        "last_labels",
        "re",
        "match",
        "line",
        "label_name",
        "label_line",
        "last_labels",
        "items",
        "re",
        "match",
        "re",
        "escape",
        "label_name",
        "line",
        "label_name",
        "label_line",
        "last_labels",
        "keys",
        "last_label",
        "mem_references",
        "mref",
        "mref",
        "mem_references",
        "mref",
        "store_references",
        "mem_references",
        "increments",
        "keys",
        "intersection",
        "r",
        "r",
        "refs",
        "r",
        "r",
        "r",
        "refs",
        "r",
        "mref",
        "refs",
        "reg",
        "possible_idx_regs",
        "mref",
        "reg",
        "mref",
        "reg",
        "mref",
        "possible_idx_regs",
        "remove",
        "reg",
        "len",
        "possible_idx_regs",
        "possible_idx_regs",
        "possible_idx_regs",
        "itemsEqual",
        "increments",
        "pidxreg",
        "pidxreg",
        "possible_idx_regs",
        "possible_idx_regs",
        "idx_reg",
        "mref",
        "mref",
        "refs",
        "idx_reg",
        "mref",
        "idx_reg",
        "mref",
        "itemsEqual",
        "mem_scales",
        "mem_scales",
        "increments",
        "idx_reg",
        "pformat",
        "labels",
        "labels",
        "index",
        "last_label",
        "pformat",
        "asm_lines",
        "last_label_line",
        "i",
        "increments",
        "pformat",
        "mem_references",
        "idx_reg",
        "mem_scales",
        "blocks",
        "append",
        "last_label_line",
        "i",
        "i",
        "last_label_line",
        "labels",
        "labels",
        "index",
        "last_label",
        "packed_ctr",
        "avx_ctr",
        "len",
        "xmm_references",
        "len",
        "xmm_references",
        "len",
        "ymm_references",
        "len",
        "ymm_references",
        "len",
        "zmm_references",
        "len",
        "zmm_references",
        "len",
        "gp_references",
        "len",
        "gp_references",
        "len",
        "xmm_references",
        "len",
        "ymm_references",
        "len",
        "zmm_references",
        "len",
        "gp_references",
        "len",
        "xmm_references",
        "len",
        "ymm_references",
        "len",
        "zmm_references",
        "len",
        "gp_references",
        "pointer_increment",
        "asm_lines",
        "last_label_line",
        "i",
        "possible_idx_regs",
        "mem_references",
        "increments",
        "OrderedDict",
        "blocks",
        "staticmethod",
        "blocks",
        "blocks",
        "ValueError",
        "max",
        "blocks",
        "key",
        "b",
        "b",
        "best_block",
        "max",
        "blocks",
        "key",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "best_block",
        "staticmethod",
        "asm_lines",
        "start_line",
        "end_line",
        "asm_lines",
        "start_line",
        "START_MARKER",
        "asm_lines",
        "start_line",
        "end_line",
        "END_MARKER",
        "asm_lines",
        "end_line",
        "asm_lines",
        "block",
        "join",
        "block",
        "increment",
        "input",
        "increment",
        "ValueError",
        "increment",
        "increment",
        "blocks",
        "debug",
        "idx",
        "b",
        "blocks",
        "format",
        "idx",
        "b",
        "b",
        "debug",
        "b",
        "l",
        "b",
        "format",
        "ln",
        "l",
        "ln",
        "textwrap",
        "indent",
        "pformat",
        "k",
        "v",
        "k",
        "v",
        "b",
        "items",
        "k",
        "block_idx",
        "len",
        "blocks",
        "input",
        "block_idx",
        "ValueError",
        "block_idx",
        "input_file",
        "output_file",
        "block_selection",
        "pointer_increment",
        "debug",
        "input_file",
        "readlines",
        "input_file",
        "output_file",
        "output_file",
        "seek",
        "output_file",
        "truncate",
        "debug",
        "x86",
        "strip_and_uncomment",
        "copy",
        "assembly_orig",
        "x86",
        "strip_unreferenced_labels",
        "assembly",
        "x86",
        "find_asm_blocks",
        "assembly",
        "block_selection",
        "x86",
        "select_best_block",
        "blocks",
        "block_selection",
        "userselect_block",
        "blocks",
        "x86",
        "select_best_block",
        "blocks",
        "debug",
        "debug",
        "isinstance",
        "block_selection",
        "block_selection",
        "ValueError",
        "blocks",
        "block_idx",
        "pointer_increment",
        "block",
        "RuntimeError",
        "pointer_increment",
        "block",
        "userselect_increment",
        "block",
        "pointer_increment",
        "userselect_increment",
        "block",
        "isinstance",
        "pointer_increment",
        "pointer_increment",
        "ValueError",
        "x86",
        "insert_markers",
        "assembly_orig",
        "block",
        "block",
        "output_file",
        "writelines",
        "instrumented_asm",
        "block",
        "instrumented_assembly_file",
        "micro_architecture",
        "open",
        "instrumented_assembly_file",
        "f",
        "f",
        "read",
        "KerncraftAPI",
        "micro_architecture",
        "code",
        "osaca",
        "create_output",
        "OrderedDict",
        "osaca",
        "get_port_occupation_cycles",
        "osaca",
        "get_total_throughput",
        "osaca",
        "get_unmatched_instruction_ratio",
        "unmatched_ratio",
        "format",
        "unmatched_ratio",
        "file",
        "sys",
        "stderr",
        "result",
        "instrumented_assembly_file",
        "micro_architecture",
        "open",
        "instrumented_assembly_file",
        "f",
        "osaca",
        "osaca",
        "extract_marked_section",
        "f",
        "read",
        "subprocess",
        "check_output",
        "micro_architecture",
        "split",
        "input",
        "assembly_section",
        "encode",
        "decode",
        "output",
        "OrderedDict",
        "re",
        "search",
        "output",
        "m",
        "re",
        "finditer",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "OrderedDict",
        "re",
        "search",
        "output",
        "m",
        "group",
        "split",
        "port",
        "cycles",
        "port_cycle_lines",
        "split",
        "port_cycle_lines",
        "split",
        "cycles",
        "port_names",
        "port",
        "cycles",
        "port_cycles",
        "max",
        "port_cycles",
        "values",
        "re",
        "search",
        "output",
        "group",
        "l",
        "uops_raw",
        "strip",
        "split",
        "uops",
        "l",
        "strip",
        "split",
        "uops",
        "result",
        "instrumented_binary_file",
        "micro_architecture",
        "micro_architecture",
        "arch_map",
        "ValueError",
        "format",
        "micro_architecture",
        "join",
        "arch_map",
        "keys",
        "iaca_get",
        "find_iaca",
        "os",
        "environ",
        "iaca_path",
        "arch_map",
        "micro_architecture",
        "find_executable",
        "iaca_exec",
        "RuntimeError",
        "format",
        "iaca_exec",
        "iaca_path",
        "iaca_exec",
        "base_args",
        "micro_architecture",
        "instrumented_binary_file",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "iaca_output",
        "OSError",
        "e",
        "RuntimeError",
        "join",
        "cmd",
        "e",
        "subprocess",
        "CalledProcessError",
        "e",
        "RuntimeError",
        "e",
        "re",
        "search",
        "iaca_output",
        "re",
        "MULTILINE",
        "match",
        "match",
        "groups",
        "throughput",
        "l",
        "l",
        "iaca_output",
        "split",
        "l",
        "startswith",
        "l",
        "l",
        "iaca_output",
        "split",
        "l",
        "startswith",
        "ports",
        "cycles",
        "p",
        "strip",
        "p",
        "ports",
        "split",
        "c",
        "strip",
        "c",
        "cycles",
        "split",
        "i",
        "len",
        "ports",
        "ports",
        "i",
        "cycles",
        "i",
        "p",
        "strip",
        "p",
        "ports",
        "i",
        "split",
        "c",
        "c",
        "cycles",
        "i",
        "split",
        "c",
        "port_cycles",
        "append",
        "subports",
        "subcycles",
        "port_cycles",
        "append",
        "subports",
        "subports",
        "subcycles",
        "ports",
        "i",
        "cycles",
        "i",
        "port_cycles",
        "append",
        "ports",
        "i",
        "cycles",
        "i",
        "OrderedDict",
        "port_cycles",
        "re",
        "search",
        "iaca_output",
        "re",
        "MULTILINE",
        "match",
        "match",
        "groups",
        "result",
        "argparse",
        "ArgumentParser",
        "description",
        "epilog",
        "parser",
        "add_argument",
        "action",
        "version",
        "format",
        "__version__",
        "parser",
        "add_argument",
        "argparse",
        "FileType",
        "nargs",
        "sys",
        "stdin",
        "help",
        "parser",
        "add_argument",
        "argparse",
        "FileType",
        "nargs",
        "sys",
        "stdout",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "parse_args",
        "asm_instrumentation",
        "input_file",
        "args",
        "source",
        "output_file",
        "args",
        "outfile",
        "block_selection",
        "pointer_increment",
        "debug",
        "args",
        "debug",
        "main"
    ],
    "literals": [
        "'        movl      $111, %ebx # INSERTED BY KERNCRAFT IACA MARKER UTILITY\\n'",
        "'        .byte     100        # INSERTED BY KERNCRAFT IACA MARKER UTILITY\\n'",
        "'        .byte     103        # INSERTED BY KERNCRAFT IACA MARKER UTILITY\\n'",
        "'        .byte     144        # INSERTED BY KERNCRAFT IACA MARKER UTILITY\\n'",
        "'        movl      $222, %ebx # INSERTED BY KERNCRAFT IACA MARKER UTILITY\\n'",
        "'        .byte     100        # INSERTED BY KERNCRAFT IACA MARKER UTILITY\\n'",
        "'        .byte     103        # INSERTED BY KERNCRAFT IACA MARKER UTILITY\\n'",
        "'        .byte     144        # INSERTED BY KERNCRAFT IACA MARKER UTILITY\\n'",
        "'x86'",
        "'x86'",
        "'x86'",
        "'AArch64'",
        "'#'",
        "r'^\\S+:'",
        "':'",
        "r'^[^#]*\\s'",
        "'[\\s,]?.*$'",
        "''",
        "'%zmm[0-9]+'",
        "'%ymm[0-9]+'",
        "'%xmm[0-9]+'",
        "'%r[a-z0-9]+'",
        "r'\\d*\\(%\\w+(,%\\w+)?(,\\d)?\\)'",
        "r'(?P<off>[-]?\\d*)\\(%(?P<basep>\\w+)(,%(?P<idx>\\w+))?(?:,(?P<scale>\\d))?\\)'",
        "r'(?P<eol>$)?'",
        "'off'",
        "'off'",
        "'basep'",
        "'idx'",
        "'scale'",
        "'scale'",
        "'load'",
        "'eol'",
        "'store'",
        "r\"^[v]?(mul|add|sub|div|fmadd(132|213|231)?)[h]?p[ds]\"",
        "'v'",
        "r'^\\S+:'",
        "':'",
        "r'^inc[bwlq]?\\s+%[a-z0-9]+'",
        "'%'",
        "r'^add[bwlq]?\\s+\\$[0-9]+,\\s*%[a-z0-9]+'",
        "'$'",
        "','",
        "'%'",
        "r'^dec[bwlq]?'",
        "'%'",
        "r'^sub[bwlq]?\\s+\\$[0-9]+,'",
        "'$'",
        "','",
        "'%'",
        "r'^j[a-z]+\\s+\\S+\\s*'",
        "r'^j[a-z]+\\s+'",
        "r'\\s*'",
        "'store'",
        "\"labels\"",
        "\"lines\"",
        "\"increments\"",
        "\"mem_references\"",
        "\"idx_reg\"",
        "\"mem_scales\"",
        "'first_line'",
        "'last_line'",
        "'ops'",
        "'labels'",
        "'packed_instr'",
        "'avx_instr'",
        "'XMM'",
        "'YMM'",
        "'ZMM'",
        "'GP'",
        "'regs'",
        "'pointer_increment'",
        "'lines'",
        "'possible_idx_regs'",
        "'mem_references'",
        "'increments'",
        "\"No suitable blocks were found in assembly.\"",
        "'packed_instr'",
        "'packed_instr'",
        "'ops'",
        "'packed_instr'",
        "'avx_instr'",
        "'ZMM'",
        "'YMM'",
        "'XMM'",
        "'#'",
        "r'^\\S+:'",
        "':'",
        "r'^[^#]*\\s'",
        "'[\\s,]?.*$'",
        "''",
        "'%zmm[0-9]+'",
        "'%ymm[0-9]+'",
        "'%xmm[0-9]+'",
        "'%r[a-z0-9]+'",
        "r'\\d*\\(%\\w+(,%\\w+)?(,\\d)?\\)'",
        "r'(?P<off>[-]?\\d*)\\(%(?P<basep>\\w+)(,%(?P<idx>\\w+))?(?:,(?P<scale>\\d))?\\)'",
        "r'(?P<eol>$)?'",
        "'off'",
        "'off'",
        "'basep'",
        "'idx'",
        "'scale'",
        "'scale'",
        "'load'",
        "'eol'",
        "'store'",
        "r\"^[v]?(mul|add|sub|div|fmadd(132|213|231)?)[h]?p[ds]\"",
        "'v'",
        "r'^\\S+:'",
        "':'",
        "r'^inc[bwlq]?\\s+%[a-z0-9]+'",
        "'%'",
        "r'^add[bwlq]?\\s+\\$[0-9]+,\\s*%[a-z0-9]+'",
        "'$'",
        "','",
        "'%'",
        "r'^dec[bwlq]?'",
        "'%'",
        "r'^sub[bwlq]?\\s+\\$[0-9]+,'",
        "'$'",
        "','",
        "'%'",
        "r'^j[a-z]+\\s+\\S+\\s*'",
        "r'^j[a-z]+\\s+'",
        "r'\\s*'",
        "'store'",
        "\"labels\"",
        "\"lines\"",
        "\"increments\"",
        "\"mem_references\"",
        "\"idx_reg\"",
        "\"mem_scales\"",
        "'first_line'",
        "'last_line'",
        "'ops'",
        "'labels'",
        "'packed_instr'",
        "'avx_instr'",
        "'XMM'",
        "'YMM'",
        "'ZMM'",
        "'GP'",
        "'regs'",
        "'pointer_increment'",
        "'lines'",
        "'possible_idx_regs'",
        "'mem_references'",
        "'increments'",
        "\"No suitable blocks were found in assembly.\"",
        "'packed_instr'",
        "'packed_instr'",
        "'ops'",
        "'packed_instr'",
        "'avx_instr'",
        "'ZMM'",
        "'YMM'",
        "'XMM'",
        "\"Selected block:\"",
        "'\\n    '",
        "'\\n    '",
        "'lines'",
        "\"Choose store pointer increment (number of bytes): \"",
        "'pointer_increment'",
        "\"Blocks found in assembly file:\"",
        "\"      block     | OPs | pck. | AVX || Registers |    ZMM   |    YMM   |    XMM   |\"",
        "\"GP   ||ptr.inc|\\n\"",
        "\"----------------+-----+------+-----++-----------+----------+----------+----------+\"",
        "\"---------++-------|\"",
        "'{:>2} {b[labels]!r:>12} | {b[ops]:>3} | {b[packed_instr]:>4} | {b[avx_instr]:>3} |'",
        "'| {b[regs][0]:>3} ({b[regs][1]:>3}) | {b[ZMM][0]:>3} ({b[ZMM][1]:>2}) | '",
        "'{b[YMM][0]:>3} ({b[YMM][1]:>2}) | '",
        "'{b[XMM][0]:>3} ({b[XMM][1]:>2}) | {b[GP][0]:>2} ({b[GP][1]:>2}) || '",
        "'{b[pointer_increment]!s:>5} |'",
        "'first_line'",
        "' '",
        "'Code:'",
        "'lines'",
        "' '",
        "'{:>5} | {}'",
        "' '",
        "'Metadata:'",
        "'lines'",
        "' '",
        "\"Choose block to be marked [\"",
        "\"]: \"",
        "'auto'",
        "'auto_with_manual_fallback'",
        "'manual'",
        "'auto'",
        "'manual'",
        "\"block_selection has to be an integer, 'auto' or 'manual' \"",
        "'auto'",
        "'pointer_increment'",
        "\"pointer_increment could not be detected automatically. Use \"",
        "\"--pointer-increment to set manually to byte offset of store \"",
        "\"pointer address between consecutive assembly block iterations.\"",
        "'auto_with_manual_fallback'",
        "'pointer_increment'",
        "'pointer_increment'",
        "'manual'",
        "'pointer_increment'",
        "'pointer_increment'",
        "\"pointer_increment has to be an integer, 'auto', 'manual' or  \"",
        "\"'auto_with_manual_fallback' \"",
        "'first_line'",
        "'last_line'",
        "'output'",
        "'port cycles'",
        "'throughput'",
        "'uops'",
        "'WARNING: {:.0%} of the instruction could not be matched during incore analysis '",
        "'with OSACA. Fix this by extending OSACAs instruction form database with the '",
        "'required instructions.'",
        "'llvm-mca'",
        "' '",
        "'utf-8'",
        "'utf-8'",
        "'output'",
        "r'Resources:\\n(?:[^\\n]+\\n)+'",
        "r'(\\[[0-9]+\\])\\s+-\\s+([a-zA-Z0-9]+)'",
        "r'Resource pressure per iteration:\\n[^\\n]+\\n[^\\n]+'",
        "'\\n'",
        "'-'",
        "'port cycles'",
        "'throughput'",
        "r'\\n\\[1\\](\\s+\\[[0-9]+\\]\\s+)+Instructions:\\n(:?\\s*[0-9]+\\s+[^\\n]+\\n)+'",
        "'\\n'",
        "' '",
        "'uops'",
        "'NHM'",
        "'iaca2.2'",
        "'v2.2'",
        "'-64'",
        "'WSM'",
        "'iaca2.2'",
        "'v2.2'",
        "'-64'",
        "'SNB'",
        "'iaca2.3'",
        "'v2.3'",
        "'-64'",
        "'IVB'",
        "'iaca2.3'",
        "'v2.3'",
        "'-64'",
        "'HSW'",
        "'iaca3.0'",
        "'v3.0'",
        "'BDW'",
        "'iaca3.0'",
        "'v3.0'",
        "'SKL'",
        "'iaca3.0'",
        "'v3.0'",
        "'SKX'",
        "'iaca3.0'",
        "'v3.0'",
        "'Invalid micro_architecture selected ({}), valid options are {}'",
        "', '",
        "'PATH'",
        "':'",
        "\"{0} executable was not found. Make sure that {0} is found in \"",
        "\"{1}. Install using iaca_get.\"",
        "'-arch'",
        "'utf-8'",
        "'output'",
        "\"IACA execution failed:\"",
        "' '",
        "'\\n'",
        "\"IACA throughput analysis failed:\"",
        "r'^Block Throughput: ([0-9.]+) Cycles'",
        "\"Could not find Block Throughput in IACA output.\"",
        "'throughput'",
        "'\\n'",
        "'|  Port  |'",
        "'\\n'",
        "'| Cycles |'",
        "\"Could not find ports/cycles lines in IACA output.\"",
        "'|'",
        "'|'",
        "'-'",
        "' '",
        "'-'",
        "' '",
        "'port cycles'",
        "r'^Total Num Of Uops: ([0-9]+)'",
        "\"Could not find Uops in IACA output.\"",
        "'uops'",
        "'Find and analyze basic loop blocks and mark for IACA.'",
        "'For help, examples, documentation and bug reports go to:\\nhttps://github.com'",
        "'/RRZE-HPC/kerncraft\\nLicense: AGPLv3'",
        "'--version'",
        "'version'",
        "'%(prog)s {}'",
        "'source'",
        "'?'",
        "'assembly file to analyze (default: stdin)'",
        "'--outfile'",
        "'-o'",
        "'w'",
        "'?'",
        "'output file location (default: stdout)'",
        "'--debug'",
        "'store_true'",
        "'Output nternal analysis information for debugging.'",
        "'manual'",
        "'__main__'"
    ],
    "variables": [
        "START_MARKER",
        "END_MARKER",
        "asm_stripped",
        "asm_stripped",
        "label",
        "line",
        "blocks",
        "last_labels",
        "packed_ctr",
        "avx_ctr",
        "xmm_references",
        "ymm_references",
        "zmm_references",
        "gp_references",
        "mem_references",
        "increments",
        "m",
        "last_labels",
        "packed_ctr",
        "avx_ctr",
        "xmm_references",
        "ymm_references",
        "zmm_references",
        "gp_references",
        "mem_references",
        "increments",
        "reg_start",
        "increments",
        "const_start",
        "const_end",
        "reg_start",
        "increments",
        "reg_start",
        "increments",
        "const_start",
        "const_end",
        "reg_start",
        "increments",
        "last_label",
        "last_label_line",
        "last_label",
        "last_label_line",
        "labels",
        "pointer_increment",
        "possible_idx_regs",
        "store_references",
        "refs",
        "possible_idx_regs",
        "idx_reg",
        "idx_reg",
        "idx_reg",
        "mem_scales",
        "pointer_increment",
        "packed_ctr",
        "avx_ctr",
        "xmm_references",
        "ymm_references",
        "zmm_references",
        "gp_references",
        "mem_references",
        "increments",
        "last_labels",
        "best_block",
        "best_block",
        "asm_lines",
        "asm_stripped",
        "asm_stripped",
        "label",
        "line",
        "blocks",
        "last_labels",
        "packed_ctr",
        "avx_ctr",
        "xmm_references",
        "ymm_references",
        "zmm_references",
        "gp_references",
        "mem_references",
        "increments",
        "m",
        "last_labels",
        "packed_ctr",
        "avx_ctr",
        "xmm_references",
        "ymm_references",
        "zmm_references",
        "gp_references",
        "mem_references",
        "increments",
        "reg_start",
        "increments",
        "const_start",
        "const_end",
        "reg_start",
        "increments",
        "reg_start",
        "increments",
        "const_start",
        "const_end",
        "reg_start",
        "increments",
        "last_label",
        "last_label_line",
        "last_label",
        "last_label_line",
        "labels",
        "pointer_increment",
        "possible_idx_regs",
        "store_references",
        "refs",
        "possible_idx_regs",
        "idx_reg",
        "idx_reg",
        "idx_reg",
        "mem_scales",
        "pointer_increment",
        "packed_ctr",
        "avx_ctr",
        "xmm_references",
        "ymm_references",
        "zmm_references",
        "gp_references",
        "mem_references",
        "increments",
        "last_labels",
        "best_block",
        "best_block",
        "asm_lines",
        "increment",
        "increment",
        "increment",
        "increment",
        "block",
        "ln",
        "block_idx",
        "block_idx",
        "block_idx",
        "block_idx",
        "assembly_orig",
        "block_selection",
        "assembly",
        "assembly",
        "blocks",
        "block_idx",
        "block_idx",
        "block_idx",
        "block",
        "block",
        "block",
        "block",
        "instrumented_asm",
        "code",
        "osaca",
        "result",
        "result",
        "result",
        "result",
        "result",
        "unmatched_ratio",
        "result",
        "assembly_section",
        "output",
        "result",
        "port_names",
        "m",
        "port_names",
        "port_cycles",
        "m",
        "port_cycle_lines",
        "cycles",
        "port_cycles",
        "result",
        "result",
        "uops",
        "uops_raw",
        "result",
        "arch_map",
        "iaca_path",
        "iaca_exec",
        "iaca_version",
        "base_args",
        "result",
        "cmd",
        "iaca_output",
        "result",
        "match",
        "throughput",
        "result",
        "ports",
        "cycles",
        "ports",
        "cycles",
        "port_cycles",
        "subports",
        "subcycles",
        "result",
        "match",
        "result",
        "parser",
        "args"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "Version check",
        "Within loop",
        "After loop",
        "Strip comments and whitespaces",
        "Found label",
        "Search for references to current label",
        "Skip labels without seen reference",
        "Register access counts",
        "last_labels[label_name] = line_number",
        "Reset counters",
        "End of block(s) due to jump",
        "Check if jump target matches any previously recoded label",
        "matched",
        "deduce loop increment from memory index register",
        "default -> can not decide, let user choose",
        "we found memory references to work with",
        "If store accesses exist, consider only those",
        "Only consider references with two registers, where one could be an",
        "index",
        "One needs to mach, other registers will be excluded",
        "reg can not be it",
        "good, exactly one register was found",
        "multiple were option found, but all have the same increment",
        "use first match:",
        "good, all scales are equal",
        "Reset counters",
        "TODO make this cleverer with more stats",
        "Strip comments and whitespaces",
        "Found label",
        "Search for references to current label",
        "Skip labels without seen reference",
        "Register access counts",
        "last_labels[label_name] = line_number",
        "Reset counters",
        "End of block(s) due to jump",
        "Check if jump target matches any previously recoded label",
        "matched",
        "deduce loop increment from memory index register",
        "default -> can not decide, let user choose",
        "we found memory references to work with",
        "If store accesses exist, consider only those",
        "Only consider references with two registers, where one could be an",
        "index",
        "One needs to mach, other registers will be excluded",
        "reg can not be it",
        "good, exactly one register was found",
        "multiple were option found, but all have the same increment",
        "use first match:",
        "good, all scales are equal",
        "Reset counters",
        "TODO make this cleverer with more stats",
        "Let user select block:",
        "block = blocks[block_idx][1]",
        "If input and output files are the same, overwrite with output",
        "Not given by OSACA",
        "Extract port names",
        "Extract cycles per port",
        "Extract uops",
        "Select IACA version and executable based on micro_architecture:",
        "arch: (binary name, version string, required additional arguments)",
        "Throws exception if not found",
        "Get total cycles per loop iteration",
        "Find ports and cycles per port",
        "pointer_increment is given, since it makes no difference on the command lien and requires",
        "less user input"
    ],
    "docstrings": [
        "\"\"\"Helper functions to instrument assembly code for and analyze with IACA.\"\"\"",
        "\"\"\"Strip whitespaces and comments from asm lines.\"\"\"",
        "\"\"\"Strip all labels, which are never referenced.\"\"\"",
        "\"\"\"Find blocks probably corresponding to loops in assembly.\"\"\"",
        "\"\"\"Return best block selected based on simple heuristic.\"\"\"",
        "\"\"\"Insert marker into list of ASM instructions at given indices.\"\"\"",
        "\"\"\"Strip whitespaces and comments from asm lines.\"\"\"",
        "\"\"\"Strip all labels, which are never referenced.\"\"\"",
        "\"\"\"Find blocks probably corresponding to loops in assembly.\"\"\"",
        "\"\"\"Return best block selected based on simple heuristic.\"\"\"",
        "\"\"\"Insert marker into list of ASM instructions at given indices.\"\"\"",
        "\"\"\"Strip whitespaces and comments from asm lines.\"\"\"",
        "\"\"\"Strip all labels, which are never referenced.\"\"\"",
        "\"\"\"Find blocks probably corresponding to loops in assembly.\"\"\"",
        "\"\"\"Return best block selected based on simple heuristic.\"\"\"",
        "\"\"\"Insert marker into list of ASM instructions at given indices.\"\"\"",
        "\"\"\"Let user interactively select byte increment.\"\"\"",
        "\"\"\"Let user interactively select block.\"\"\"",
        "\"\"\"\n    Add markers to an assembly file.\n\n    If instrumentation fails because loop increment could not determined automatically, a ValueError\n    is raised.\n\n    :param input_file: file-like object to read from\n    :param output_file: file-like object to write to\n    :param block_selection: index of the assembly block to instrument, or 'auto' for automatically\n                            using block with the\n                            most vector instructions, or 'manual' to read index to prompt user\n    :param pointer_increment: number of bytes the pointer is incremented after the loop or\n                              - 'auto': automatic detection, otherwise RuntimeError is raised\n                              - 'auto_with_manual_fallback': like auto with fallback to manual input\n                              - 'manual': prompt user\n    :param debug: output additional internal analysis information. Only works with manual selection.\n    :return: the instrumented assembly block\n    \"\"\"",
        "\"\"\"\n    Run OSACA analysis on an instrumented assembly.\n\n    :param instrumented_assembly_file: path of assembly that was built with markers\n    :param micro_architecture: micro architecture string as taken by OSACA.\n                               one of: SNB, IVB, HSW, BDW, SKL\n    :return: a dictionary with the following keys:\n        - 'output': the output of the iaca executable\n        - 'throughput': the block throughput in cycles for one possibly vectorized loop iteration\n        - 'port cycles': dict, mapping port name to number of active cycles\n        - 'uops': total number of Uops\n    \"\"\"",
        "\"\"\"\n    Run LLVM-MCA analysis on an instrumented assembly.\n\n    :param instrumented_assembly_file: path of assembly that was built with markers\n    :param micro_architecture: micro architecture string as taken by OSACA.\n                               one of: SNB, IVB, HSW, BDW, SKL\n    :return: a dictionary with the following keys:\n        - 'output': the output of the iaca executable\n        - 'throughput': the block throughput in cycles for one possibly vectorized loop iteration\n        - 'port cycles': dict, mapping port name to number of active cycles\n        - 'uops': total number of Uops\n    \"\"\"",
        "\"\"\"\n    Run IACA analysis on an instrumented binary.\n\n    :param instrumented_binary_file: path of binary that was built with IACA markers\n    :param micro_architecture: micro architecture string as taken by IACA.\n                               one of: NHM, WSM, SNB, IVB, HSW, BDW\n    :return: a dictionary with the following keys:\n        - 'output': the output of the iaca executable\n        - 'throughput': the block throughput in cycles for one possibly vectorized loop iteration\n        - 'port cycles': dict, mapping port name to number of active cycles\n        - 'uops': total number of Uops\n    \"\"\"",
        "\"\"\"Execute command line interface.\"\"\""
    ],
    "functions": [
        "itemsEqual",
        "get_isa",
        "strip_and_uncomment",
        "strip_unreferenced_labels",
        "find_asm_blocks",
        "select_best_block",
        "insert_markers",
        "strip_and_uncomment",
        "strip_unreferenced_labels",
        "find_asm_blocks",
        "select_best_block",
        "insert_markers",
        "strip_and_uncomment",
        "strip_unreferenced_labels",
        "find_asm_blocks",
        "select_best_block",
        "insert_markers",
        "userselect_increment",
        "userselect_block",
        "asm_instrumentation",
        "osaca_analyse_instrumented_assembly",
        "llvm_mca_analyse_instrumented_assembly",
        "iaca_analyse_instrumented_binary",
        "main"
    ],
    "classes": [
        "IncoreModel",
        "IACA",
        "OSACA",
        "LlvmMCA",
        "ISA",
        "x86",
        "AArch64"
    ]
}