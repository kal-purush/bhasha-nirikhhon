{
    "identifiers": [
        "com",
        "seagate",
        "kinetic",
        "simulator",
        "client",
        "sanity",
        "com",
        "seagate",
        "kinetic",
        "KineticTestHelpers",
        "toByteArray",
        "org",
        "testng",
        "AssertJUnit",
        "assertEquals",
        "org",
        "testng",
        "AssertJUnit",
        "assertTrue",
        "java",
        "nio",
        "charset",
        "Charset",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "logging",
        "Level",
        "java",
        "util",
        "logging",
        "Logger",
        "kinetic",
        "admin",
        "ACL",
        "kinetic",
        "admin",
        "AdminClientConfiguration",
        "kinetic",
        "admin",
        "Capacity",
        "kinetic",
        "admin",
        "Configuration",
        "kinetic",
        "admin",
        "Device",
        "kinetic",
        "admin",
        "Domain",
        "kinetic",
        "admin",
        "Interface",
        "kinetic",
        "admin",
        "KineticAdminClient",
        "kinetic",
        "admin",
        "KineticAdminClientFactory",
        "kinetic",
        "admin",
        "KineticLog",
        "kinetic",
        "admin",
        "KineticLogType",
        "kinetic",
        "admin",
        "Limits",
        "kinetic",
        "admin",
        "Role",
        "kinetic",
        "admin",
        "Statistics",
        "kinetic",
        "admin",
        "Temperature",
        "kinetic",
        "admin",
        "Utilization",
        "kinetic",
        "client",
        "EntryNotFoundException",
        "kinetic",
        "client",
        "KineticException",
        "org",
        "testng",
        "Assert",
        "com",
        "seagate",
        "kinetic",
        "IntegrationTestLoggerFactory",
        "logger",
        "IntegrationTestLoggerFactory",
        "getLogger",
        "getName",
        "acconfig",
        "kac",
        "host",
        "getProperty",
        "port",
        "parseInt",
        "getProperty",
        "sslPort",
        "parseInt",
        "getProperty",
        "useSsl",
        "parseBoolean",
        "getProperty",
        "acconfig",
        "acconfig",
        "setHost",
        "host",
        "acconfig",
        "setPort",
        "sslPort",
        "useSsl",
        "acconfig",
        "setUseSsl",
        "acconfig",
        "setPort",
        "port",
        "kac",
        "KineticAdminClientFactory",
        "createInstance",
        "acconfig",
        "newClusterVersion",
        "kac",
        "setClusterVersion",
        "newClusterVersion",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "kac",
        "instantErase",
        "getBytes",
        "Charset",
        "forName",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "kac",
        "secureErase",
        "getBytes",
        "Charset",
        "forName",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "log",
        "log",
        "kac",
        "getLog",
        "assertTrue",
        "log",
        "getTemperature",
        "size",
        "assertTrue",
        "log",
        "getUtilization",
        "size",
        "assertTrue",
        "log",
        "getStatistics",
        "size",
        "assertTrue",
        "log",
        "getMessages",
        "length",
        "assertTrue",
        "log",
        "getCapacity",
        "getPortionFull",
        "assertTrue",
        "log",
        "getCapacity",
        "getNominalCapacityInBytes",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "name",
        "sname",
        "sname2",
        "name2",
        "name",
        "toByteArray",
        "sname",
        "name2",
        "toByteArray",
        "sname2",
        "device",
        "kac",
        "getVendorSpecificDeviceLog",
        "name",
        "logger",
        "info",
        "sname",
        "device",
        "getValue",
        "length",
        "enfe",
        "logger",
        "info",
        "sname",
        "e",
        "logger",
        "log",
        "Level",
        "WARNING",
        "e",
        "getMessage",
        "e",
        "kac",
        "getVendorSpecificDeviceLog",
        "name2",
        "Assert",
        "fail",
        "enfe",
        "logger",
        "info",
        "sname2",
        "e",
        "logger",
        "log",
        "Level",
        "WARNING",
        "e",
        "getMessage",
        "e",
        "Assert",
        "fail",
        "acls",
        "roles",
        "roles",
        "add",
        "Role",
        "DELETE",
        "roles",
        "add",
        "Role",
        "GETLOG",
        "roles",
        "add",
        "Role",
        "READ",
        "roles",
        "add",
        "Role",
        "RANGE",
        "roles",
        "add",
        "Role",
        "SECURITY",
        "roles",
        "add",
        "Role",
        "SETUP",
        "roles",
        "add",
        "Role",
        "WRITE",
        "roles",
        "add",
        "Role",
        "P2POP",
        "domain",
        "domain",
        "setRoles",
        "roles",
        "domains",
        "domains",
        "add",
        "domain",
        "acl1",
        "acl1",
        "setDomains",
        "domains",
        "acl1",
        "setUserId",
        "acl1",
        "setKey",
        "acls",
        "add",
        "acl1",
        "kac",
        "setAcl",
        "acls",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "erasePin",
        "erasePinB",
        "toByteArray",
        "erasePin",
        "kac",
        "setErasePin",
        "getBytes",
        "Charset",
        "forName",
        "erasePinB",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "kac",
        "secureErase",
        "erasePinB",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "lockPin",
        "lockPinB",
        "toByteArray",
        "lockPin",
        "kac",
        "setLockPin",
        "getBytes",
        "Charset",
        "forName",
        "lockPinB",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "kac",
        "secureErase",
        "getBytes",
        "Charset",
        "forName",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "lockPinB",
        "toByteArray",
        "kac",
        "setLockPin",
        "getBytes",
        "Charset",
        "forName",
        "lockPinB",
        "e1",
        "Assert",
        "fail",
        "e1",
        "getMessage",
        "kac",
        "lockDevice",
        "lockPinB",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "kac",
        "unLockDevice",
        "lockPinB",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "kac",
        "secureErase",
        "getBytes",
        "Charset",
        "forName",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "lockPinB",
        "toByteArray",
        "kac",
        "setLockPin",
        "getBytes",
        "Charset",
        "forName",
        "lockPinB",
        "e1",
        "Assert",
        "fail",
        "e1",
        "getMessage",
        "kac",
        "lockDevice",
        "lockPinB",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "kac",
        "unLockDevice",
        "lockPinB",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "kac",
        "secureErase",
        "getBytes",
        "Charset",
        "forName",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "listOfLogType",
        "listOfLogType",
        "add",
        "KineticLogType",
        "CAPACITIES",
        "listOfLogType",
        "add",
        "KineticLogType",
        "CONFIGURATION",
        "listOfLogType",
        "add",
        "KineticLogType",
        "MESSAGES",
        "listOfLogType",
        "add",
        "KineticLogType",
        "STATISTICS",
        "listOfLogType",
        "add",
        "KineticLogType",
        "TEMPERATURES",
        "listOfLogType",
        "add",
        "KineticLogType",
        "UTILIZATIONS",
        "listOfLogType",
        "add",
        "KineticLogType",
        "LIMITS",
        "log",
        "log",
        "kac",
        "getLog",
        "listOfLogType",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "capacity",
        "capacity",
        "log",
        "getCapacity",
        "assertTrue",
        "capacity",
        "getPortionFull",
        "assertTrue",
        "capacity",
        "getNominalCapacityInBytes",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "configuration",
        "configuration",
        "log",
        "getConfiguration",
        "assertTrue",
        "configuration",
        "getCompilationDate",
        "length",
        "assertTrue",
        "configuration",
        "getModel",
        "length",
        "assertTrue",
        "configuration",
        "getPort",
        "assertTrue",
        "configuration",
        "getTlsPort",
        "assertTrue",
        "configuration",
        "getSerialNumber",
        "length",
        "assertTrue",
        "configuration",
        "getWorldWideName",
        "length",
        "assertTrue",
        "configuration",
        "getSourceHash",
        "length",
        "assertTrue",
        "configuration",
        "getVendor",
        "length",
        "assertTrue",
        "configuration",
        "getVersion",
        "length",
        "interfaceOfList",
        "configuration",
        "getInterfaces",
        "interfaces",
        "interfaceOfList",
        "assertTrue",
        "interfaces",
        "getName",
        "length",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "messages",
        "messages",
        "log",
        "getMessages",
        "assertTrue",
        "messages",
        "length",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "statisticsOfList",
        "statisticsOfList",
        "log",
        "getStatistics",
        "statistics",
        "statisticsOfList",
        "assertTrue",
        "statistics",
        "getBytes",
        "assertTrue",
        "statistics",
        "getCount",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "tempOfList",
        "tempOfList",
        "log",
        "getTemperature",
        "temperature",
        "tempOfList",
        "assertTrue",
        "temperature",
        "getCurrent",
        "assertTrue",
        "temperature",
        "getMax",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "utilOfList",
        "utilOfList",
        "log",
        "getUtilization",
        "util",
        "utilOfList",
        "assertTrue",
        "util",
        "getUtility",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "logTypes",
        "logTypes",
        "log",
        "getContainedLogTypes",
        "assertEquals",
        "listOfLogType",
        "size",
        "logTypes",
        "length",
        "i",
        "i",
        "logTypes",
        "length",
        "i",
        "assertTrue",
        "listOfLogType",
        "contains",
        "logTypes",
        "i",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "limits",
        "limits",
        "log",
        "getLimits",
        "assertTrue",
        "limits",
        "getMaxKeySize",
        "assertTrue",
        "limits",
        "getMaxValueSize",
        "assertTrue",
        "limits",
        "getMaxVersionSize",
        "assertTrue",
        "limits",
        "getMaxKeyRangeCount",
        "e",
        "Assert",
        "fail",
        "e",
        "getMessage",
        "kac",
        "close",
        "args",
        "example",
        "example",
        "test_setClusterVersion",
        "example",
        "test_getLog",
        "example",
        "test_getLog_withLogType",
        "example",
        "test_getVendorSpecificDeviceLog_ForDrive",
        "example",
        "test_setAcl",
        "example",
        "close"
    ],
    "literals": [
        "\"KINETIC_HOST\"",
        "\"127.0.0.1\"",
        "\"KINEITC_PORT\"",
        "\"8123\"",
        "\"KINEITC_SSL_PORT\"",
        "\"8443\"",
        "\"RUN_SSL_TEST\"",
        "\"true\"",
        "\"NULL\"",
        "\"UTF-8\"",
        "\"instant erase throw exception: \"",
        "\"NULL\"",
        "\"UTF-8\"",
        "\"secure erase throw exception: \"",
        "\"getLog throw exception: \"",
        "\"com.Seagate.Kinetic.HDD.Gen1\"",
        "\"com.seagate.Kinetic.HDD.badName\"",
        "\"got vendor specific log., name = \"",
        "\", log size=\"",
        "\"device log name not found for name: \"",
        "\"should have caught EntryNotFoundException\"",
        "\"device log name not found for name: \"",
        "\"should have caught EntryNotFoundException\"",
        "\"asdfasdf\"",
        "\"Set Security throw exception\"",
        "\"erasePin\"",
        "\"\"",
        "\"UTF-8\"",
        "\"Set erase pin throw exception\"",
        "\"secure erase throw exception\"",
        "\"lockPin\"",
        "\"\"",
        "\"UTF-8\"",
        "\"Set erase pin throw exception\"",
        "\"123\"",
        "\"UTF-8\"",
        "\"secure erase throw exception\"",
        "\"lockpin\"",
        "\"\"",
        "\"UTF-8\"",
        "\"set lock pin throw exception: \"",
        "\"Lock device with correct pin failed: \"",
        "\"unLock device with correct pin failed: \"",
        "\"NULL\"",
        "\"UTF-8\"",
        "\"secure erase throw exception\"",
        "\"lockpin\"",
        "\"\"",
        "\"UTF-8\"",
        "\"set lock pin throw exception: \"",
        "\"Lock device with correct pin failed: \"",
        "\"unLock device with correct pin failed: \"",
        "\"NULL\"",
        "\"UTF-8\"",
        "\"secure erase throw exception\"",
        "\"getLog throw exception: \"",
        "\"get capacity throw exception: \"",
        "\"get configuration throw exception: \"",
        "\"get message throw exception: \"",
        "\"get statistics throw exception: \"",
        "\"get temperature throw exception: \"",
        "\"get utilization throw exception: \"",
        "\"get containedLogTypes throw exception: \"",
        "\"get limits throw exception: \""
    ],
    "variables": [
        "acconfig",
        "kac",
        "log",
        "capacity",
        "configuration",
        "messages",
        "statisticsOfList",
        "tempOfList",
        "utilOfList",
        "logTypes",
        "limits"
    ],
    "comments": [
        "modify cluster version.",
        "name supported by the simulator only",
        "name not supported by anyone",
        "could happen if this the service is not simulator",
        "could happen if this the service is not simulator",
        "all pins set the same",
        "clean pin",
        "clean pin",
        "set a lock pin",
        "unlock device",
        "clean pin",
        "set a lock pin",
        "clean pin"
    ],
    "docstrings": [
        "* \n * Copyright (C) 2014 Seagate Technology.\n * \n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *",
        "* Kinetic Administrator Client Basic API Test.\n * <p>\n * Kinetic admin API include:\n * <p>\n * setup(byte[] pin, byte[] setPin, long newClusterVersion, boolean secureErase)\n * <p>\n * firmwareDownload(byte[] pin, byte[] bytes)\n * <p>\n * getLog()\n * <p>\n * getLog(List<KineticLogType> listOfLogType)\n * <p>\n * setSecurity(List<ACL> acls)\n * <p>\n * \n * @see KineticAdminClient\n *",
        "* Test setClusterVersion API, set cluster version for simulator/drive. The\n     * result should be true.\n     * <p>",
        "* Test instantErase API, erase data in simulator/drive. The result should\n     * be true.\n     * <p>\n     * \n     * @throws KineticException\n     *             if any internal error occurred.",
        "* Test secureErase API, erase data in simulator/drive. The result should be\n     * true.\n     * <p>\n     * \n     * @throws KineticException\n     *             if any internal error occurred.",
        "* Test get log API. The result should be success.\n     * <p>",
        "* Test getVendorSpecificDeviceLog API. The device name is drive's name.\n     * <p>",
        "* Test set security API. The result should be success. If failed, throw\n     * KineticException.\n     * <p>",
        "* Test set security, set erase pin.\n     * <p>",
        "* Test set security, set lock pin.\n     * <p>",
        "* Test lock device with correct lock pin, should lock the device.\n     * <p>",
        "* Test unlock device with correct unlock pin, should unlock the device.\n     * <p>",
        "* Test get log API. Check every log field value whether valid.\n     * <p>"
    ],
    "functions": [
        "AdminAPISanityExample",
        "test_setClusterVersion",
        "test_instanErase",
        "test_secureErase",
        "test_getLog",
        "test_getVendorSpecificDeviceLog_ForDrive",
        "test_setAcl",
        "test_setErasePin",
        "test_setLockPin",
        "test_lockDevice",
        "test_unLockDevice",
        "test_getLog_withLogType",
        "close",
        "main"
    ],
    "classes": [
        "AdminAPISanityExample"
    ]
}