{
    "identifiers": [
        "ts",
        "index",
        "SyntaxKind",
        "NodeFlags",
        "ParserContextFlags",
        "position",
        "line",
        "character",
        "filename",
        "sourceFile",
        "fullTypeCheckMode",
        "EmitReturnStatus",
        "sourceFile",
        "sourceFile",
        "targetSourceFile",
        "symbol",
        "node",
        "symbol",
        "propertyName",
        "kind",
        "kind",
        "signature",
        "location",
        "meaning",
        "node",
        "location",
        "node",
        "enclosingDeclaration",
        "flags",
        "symbol",
        "enclosingDeclaration",
        "meaning",
        "symbol",
        "symbol",
        "node",
        "node",
        "candidatesOutArray",
        "declaration",
        "node",
        "symbol",
        "symbol",
        "sourceFile",
        "node",
        "node",
        "propertyName",
        "symbol",
        "writer",
        "enclosingDeclaration",
        "flags",
        "symbol",
        "writer",
        "enclosingDeclaration",
        "meaning",
        "flags",
        "signatures",
        "writer",
        "enclosingDeclaration",
        "flags",
        "parameter",
        "writer",
        "enclosingDeclaration",
        "flags",
        "tp",
        "writer",
        "enclosingDeclaration",
        "flags",
        "symbol",
        "writer",
        "enclosingDeclaraiton",
        "flags",
        "parameters",
        "writer",
        "enclosingDeclaration",
        "flags",
        "typeParameters",
        "writer",
        "enclosingDeclaration",
        "flags",
        "signature",
        "writer",
        "enclosingDeclaration",
        "flags",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "symbol",
        "symbol",
        "enclosingDeclaration",
        "meaning",
        "TypeFormatFlags",
        "SymbolFormatFlags",
        "SymbolAccessibility",
        "container",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "sourceFile",
        "node",
        "node",
        "declaration",
        "enclosingDeclaration",
        "flags",
        "writer",
        "signatureDeclaration",
        "enclosingDeclaration",
        "flags",
        "writer",
        "symbol",
        "enclosingDeclaration",
        "meaning",
        "entityName",
        "enclosingDeclaration",
        "node",
        "sourceFile",
        "SymbolFlags",
        "index",
        "NodeCheckFlags",
        "TypeFlags",
        "SignatureKind",
        "IndexKind",
        "t",
        "DiagnosticCategory",
        "option",
        "ModuleKind",
        "ScriptTarget",
        "CharacterCodes",
        "filename",
        "languageVersion",
        "onError",
        "message",
        "options",
        "filename",
        "data",
        "writeByteOrderMark",
        "onError",
        "message",
        "fileName",
        "ts",
        "message",
        "pos",
        "end",
        "text",
        "textPos",
        "callback",
        "callback",
        "tokenToString",
        "t",
        "computeLineStarts",
        "text",
        "getPositionFromLineAndCharacter",
        "lineStarts",
        "line",
        "character",
        "getLineAndCharacterOfPosition",
        "lineStarts",
        "position",
        "positionToLineAndCharacter",
        "text",
        "pos",
        "isWhiteSpace",
        "ch",
        "isLineBreak",
        "ch",
        "isOctalDigit",
        "ch",
        "skipTrivia",
        "text",
        "pos",
        "stopAfterLineBreak",
        "getLeadingCommentRanges",
        "text",
        "pos",
        "getTrailingCommentRanges",
        "text",
        "pos",
        "isIdentifierStart",
        "ch",
        "languageVersion",
        "isIdentifierPart",
        "ch",
        "languageVersion",
        "createScanner",
        "languageVersion",
        "skipTrivia",
        "text",
        "onError",
        "ts",
        "getNodeConstructor",
        "kind",
        "forEachChild",
        "node",
        "cbNode",
        "node",
        "cbNodes",
        "nodes",
        "createCompilerHost",
        "options",
        "createSourceFile",
        "filename",
        "sourceText",
        "languageVersion",
        "version",
        "isOpen",
        "createProgram",
        "rootNames",
        "options",
        "host",
        "ts",
        "createTypeChecker",
        "program",
        "fullTypeCheck",
        "ts",
        "sourceFile",
        "index",
        "sourceFile",
        "sourceFile",
        "sourceFile",
        "sourceFile",
        "sourceFile",
        "sourceFile",
        "sourceFile",
        "sourceFile",
        "sourceFile",
        "propertyName",
        "scriptSnapshot",
        "version",
        "isOpen",
        "textChangeRange",
        "start",
        "end",
        "oldSnapshot",
        "ScriptSnapshot",
        "fromString",
        "text",
        "s",
        "fileName",
        "fileName",
        "fileName",
        "options",
        "fileName",
        "fileName",
        "fileName",
        "span",
        "fileName",
        "span",
        "fileName",
        "position",
        "fileName",
        "position",
        "entryName",
        "fileName",
        "position",
        "fileName",
        "startPos",
        "endPos",
        "fileName",
        "position",
        "fileName",
        "position",
        "fileName",
        "position",
        "fileName",
        "position",
        "findInStrings",
        "findInComments",
        "fileName",
        "position",
        "fileName",
        "position",
        "fileName",
        "position",
        "searchValue",
        "fileName",
        "fileName",
        "fileName",
        "descriptors",
        "fileName",
        "position",
        "fileName",
        "position",
        "options",
        "fileName",
        "start",
        "end",
        "options",
        "fileName",
        "options",
        "fileName",
        "position",
        "key",
        "options",
        "fileName",
        "filename",
        "start",
        "length",
        "key",
        "position",
        "span",
        "span",
        "span",
        "span",
        "start",
        "length",
        "position",
        "span",
        "start",
        "end",
        "span",
        "newLength",
        "changes",
        "SymbolDisplayPartKind",
        "OutputFileType",
        "EndOfLineState",
        "TokenClass",
        "text",
        "lexState",
        "classifyKeywordsInGenerics",
        "filename",
        "compilationSettings",
        "scriptSnapshot",
        "version",
        "isOpen",
        "sourceFile",
        "filename",
        "compilationSettings",
        "scriptSnapshot",
        "version",
        "isOpen",
        "textChangeRange",
        "filename",
        "compilationSettings",
        "displayPartsToString",
        "displayParts",
        "getDefaultCompilerOptions",
        "cancellationToken",
        "createDocumentRegistry",
        "preProcessFile",
        "sourceText",
        "readImportFiles",
        "createLanguageService",
        "host",
        "documentRegistry",
        "createClassifier",
        "host"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "servicesVersion"
    ],
    "comments": [
        "! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved. \nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \n \nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \nMERCHANTABLITY OR NON-INFRINGEMENT. \n \nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n*****************************************************************************",
        "Gets a portion of the script snapshot specified by [start, end).",
        "Gets the length of this script snapshot.",
        "The span of the document to actually collapse.",
        "The span of the document to display when the user hovers over the collapsed span.",
        "The text to display in the editor for the collapsed region."
    ],
    "docstrings": [
        "* Several node kinds share function-like features such as a signature,\n     * a name, and a body. These nodes should extend FunctionLikeDeclaration.\n     * Examples:\n     *  FunctionDeclaration\n     *  MethodDeclaration\n     *  AccessorDeclaration",
        "* Early error - any error (can be produced at parsing\\binding\\typechecking step) that blocks emit",
        "* Represents an immutable snapshot of a script at a specified time.Once acquired, the\n     * snapshot is observably immutable. i.e. the same calls with the same parameters will return\n     * the same values.",
        "* This call returns the array containing the start position of every line.\n         * i.e.\"[0, 10, 55]\".  TODO: consider making this optional.  The language service could\n         * always determine this (albeit in a more expensive manner).",
        "* Gets the TextChangeRange that describe how the text changed between this text and\n         * an older version.  This information is used by the incremental parser to determine\n         * what sections of the script need to be re-parsed.  'undefined' can be returned if the\n         * change range cannot be determined.  However, in that case, incremental parsing will\n         * not happen and the entire document will be re - parsed.",
        "* Creates a TextSpan instance beginning with the position Start and having the Length\n            * specified with length.",
        "* Determines whether the position lies within the span. Returns true if the position is greater than or equal to Start and strictly less\n            * than End, otherwise false.\n            * @param position The position to check.",
        "* Determines whether span falls completely within this span. Returns true if the specified span falls completely within this span, otherwise false.\n            * @param span The span to check.",
        "* Determines whether the given span overlaps this span. Two spans are considered to overlap\n            * if they have positions in common and neither is empty. Empty spans do not overlap with any\n            * other span. Returns true if the spans overlap, false otherwise.\n            * @param span The span to check.",
        "* Returns the overlap with the given span, or undefined if there is no overlap.\n            * @param span The span to check.",
        "* Determines whether span intersects this span. Two spans are considered to\n            * intersect if they have positions in common or the end of one span\n            * coincides with the start of the other span. Returns true if the spans intersect, false otherwise.\n            * @param The span to check.",
        "* Determines whether the given position intersects this span.\n            * A position is considered to intersect if it is between the start and\n            * end positions (inclusive) of this span. Returns true if the position intersects, false otherwise.\n            * @param position The position to check.",
        "* Returns the intersection with the given span, or undefined if there is no intersection.\n            * @param span The span to check.",
        "* Creates a new TextSpan from the given start and end positions\n            * as opposed to a position and length.",
        "* Initializes a new instance of TextChangeRange.",
        "* The span of text before the edit which is being changed",
        "* Width of the span after the edit.  A 0 here would represent a delete",
        "* Called to merge all the changes that occurred across several versions of a script snapshot\n            * into a single change.  i.e. if a user keeps making successive edits to a script we will\n            * have a text change from V1 to V2, V2 to V3, ..., Vn.\n            *\n            * This function will then merge those changes into a single change range valid between V1 and\n            * Vn.",
        "* Represents a single signature to show in signature help.\n     * The id is used for subsequent calls into the language service to ask questions about the\n     * signature help item in the context of any documents that have been updated.  i.e. after\n     * an edit has happened, while signature help is still active, the host can ask important\n     * questions like 'what parameter is the user currently contained within?'.",
        "* Represents a set of signature help items, and the preferred item that should be selected.",
        "* Whether or not this region should be automatically collapsed when\n          * the 'Collapse to Definitions' command is invoked."
    ],
    "functions": [],
    "classes": [
        "TextSpan",
        "TextChangeRange",
        "TextChange",
        "ScriptElementKind",
        "ScriptElementKindModifier",
        "ClassificationTypeNames",
        "OperationCanceledException",
        "CancellationTokenObject"
    ]
}