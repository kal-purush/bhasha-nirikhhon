{
    "identifiers": [
        "java",
        "io",
        "java",
        "util",
        "java",
        "util",
        "regex",
        "Pattern",
        "org",
        "apache",
        "commons",
        "lang",
        "math",
        "RandomUtils",
        "nextInt",
        "DOT_DIGRAPH_HEADER",
        "DOT_BLOCK_OPEN",
        "DOT_BLOCK_CLOSE",
        "DOT_OUT_EDGE",
        "DOT_FILL_COLOR_OPEN",
        "DOT_FILL_COLOR_CLOSE",
        "DOT_LINE_ENDING",
        "colorMap",
        "graph",
        "created",
        "matched",
        "LINE_TOKEN_SEPARATOR",
        "fileWriter",
        "colorMap",
        "graph",
        "path",
        "pattern",
        "br",
        "path",
        "LINE_TOKEN_SEPARATOR",
        "Pattern",
        "compile",
        "pattern",
        "line",
        "line",
        "br",
        "readLine",
        "lineTokens",
        "LINE_TOKEN_SEPARATOR",
        "split",
        "line",
        "ID",
        "parseInt",
        "lineTokens",
        "edges",
        "i",
        "i",
        "lineTokens",
        "length",
        "i",
        "edges",
        "add",
        "parseInt",
        "lineTokens",
        "i",
        "graph",
        "put",
        "ID",
        "edges",
        "destpath",
        "fileWriter",
        "destpath",
        "entry",
        "graph",
        "entrySet",
        "colorMap",
        "containsKey",
        "entry",
        "getKey",
        "r",
        "nextInt",
        "g",
        "nextInt",
        "b",
        "nextInt",
        "color",
        "toString",
        "r",
        "toString",
        "g",
        "toString",
        "b",
        "colorMap",
        "put",
        "entry",
        "getKey",
        "color",
        "created",
        "colorMap",
        "isEmpty",
        "entry",
        "colorMap",
        "entrySet",
        "fileWriter",
        "write",
        "format",
        "LINE_TOKEN_SEPARATOR",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "fileWriter",
        "newLine",
        "fileWriter",
        "close",
        "inputGraph",
        "pattern",
        "matched",
        "fileWriter",
        "inputGraph",
        "fileWriter",
        "inputGraph",
        "readGraph",
        "inputGraph",
        "pattern",
        "graph",
        "isEmpty",
        "fileWriter",
        "close",
        "fileWriter",
        "write",
        "format",
        "DOT_DIGRAPH_HEADER",
        "DOT_BLOCK_OPEN",
        "fileWriter",
        "newLine",
        "graphEntry",
        "graph",
        "entrySet",
        "writeNodes",
        "graphEntry",
        "getKey",
        "inputGraph",
        "graphEntry",
        "graph",
        "entrySet",
        "writeEdges",
        "graphEntry",
        "getKey",
        "graphEntry",
        "getValue",
        "fileWriter",
        "write",
        "DOT_BLOCK_CLOSE",
        "fileWriter",
        "newLine",
        "fileWriter",
        "close",
        "node",
        "cmPath",
        "created",
        "fileWriter",
        "write",
        "format",
        "node",
        "DOT_FILL_COLOR_OPEN",
        "colorMap",
        "get",
        "node",
        "DOT_FILL_COLOR_CLOSE",
        "DOT_LINE_ENDING",
        "fileWriter",
        "newLine",
        "br",
        "cmPath",
        "line",
        "line",
        "br",
        "readLine",
        "lineTokens",
        "LINE_TOKEN_SEPARATOR",
        "split",
        "line",
        "ID",
        "parseInt",
        "lineTokens",
        "color",
        "lineTokens",
        "colorMap",
        "put",
        "ID",
        "color",
        "fileWriter",
        "write",
        "format",
        "node",
        "DOT_FILL_COLOR_OPEN",
        "colorMap",
        "get",
        "node",
        "DOT_FILL_COLOR_CLOSE",
        "DOT_LINE_ENDING",
        "fileWriter",
        "newLine",
        "key",
        "nodes",
        "nodeID",
        "nodes",
        "fileWriter",
        "write",
        "format",
        "key",
        "DOT_OUT_EDGE",
        "nodeID",
        "DOT_LINE_ENDING",
        "fileWriter",
        "newLine",
        "graphInput",
        "pattern",
        "partitionedInput",
        "cmPath",
        "readGraph",
        "graphInput",
        "pattern",
        "matched",
        "br",
        "cmPath",
        "oldCM",
        "line",
        "line",
        "br",
        "readLine",
        "lineTokens",
        "LINE_TOKEN_SEPARATOR",
        "split",
        "line",
        "ID",
        "parseInt",
        "lineTokens",
        "color",
        "lineTokens",
        "oldCM",
        "put",
        "ID",
        "color",
        "br",
        "close",
        "output",
        "br2",
        "partitionedInput",
        "line2",
        "line2",
        "br2",
        "readLine",
        "lineTokens",
        "LINE_TOKEN_SEPARATOR",
        "split",
        "line2",
        "ID",
        "parseInt",
        "lineTokens",
        "value",
        "parseInt",
        "lineTokens",
        "output",
        "put",
        "ID",
        "value",
        "br2",
        "close",
        "entry",
        "output",
        "entrySet",
        "colorMap",
        "put",
        "entry",
        "getKey",
        "oldCM",
        "get",
        "entry",
        "getValue",
        "created",
        "input",
        "pattern",
        "kway_input",
        "readGraph",
        "input",
        "pattern",
        "cutEdges",
        "output",
        "br2",
        "kway_input",
        "line2",
        "line2",
        "br2",
        "readLine",
        "lineTokens",
        "LINE_TOKEN_SEPARATOR",
        "split",
        "line2",
        "ID",
        "parseInt",
        "lineTokens",
        "value",
        "parseInt",
        "lineTokens",
        "output",
        "put",
        "ID",
        "value",
        "br2",
        "close",
        "graphMap",
        "graph",
        "entrySet",
        "partition",
        "output",
        "get",
        "graphMap",
        "getKey",
        "cutEdges",
        "containsKey",
        "partition",
        "cutEdges",
        "put",
        "partition",
        "edgeTo",
        "graphMap",
        "getValue",
        "partitionTo",
        "output",
        "get",
        "edgeTo",
        "partition",
        "partitionTo",
        "cutEdges",
        "put",
        "partition",
        "cutEdges",
        "get",
        "partition",
        "cuts",
        "cutEdges",
        "entrySet",
        "cuts",
        "getKey",
        "cuts",
        "getValue"
    ],
    "literals": [
        "\"digraph\"",
        "\"{\"",
        "\"}\"",
        "\"->\"",
        "\"[fillcolor =\\\"\"",
        "\"\\\"]\"",
        "\";\"",
        "\"Graph stored\"",
        "\"_cm\"",
        "\",\"",
        "\",\"",
        "\"graph is empty\"",
        "\"%s\"",
        "\"%s\"",
        "\"_matched.dot\"",
        "\".dot\"",
        "\"Map is empty!\"",
        "\"%s %s %s\"",
        "\"dg\"",
        "\"\\t%s %s%s%s%s\"",
        "\"_cm\"",
        "\"\\t%s %s %s %s%s\"",
        "\"\\t%s%s%s%s\"",
        "\"_cm\"",
        "\" \""
    ],
    "variables": [
        "colorMap",
        "graph",
        "LINE_TOKEN_SEPARATOR",
        "fileWriter",
        "line",
        "line",
        "line",
        "line2",
        "line2"
    ],
    "comments": [
        "digraph header",
        "nodes",
        "edges",
        "digraph footer",
        "if the color map was created just now",
        "if the colorMap exist in a file",
        "writes",
        "0 [fillcolor =\"r,g,b\"];",
        "writes",
        "0 -> 1;",
        "0 -> 2;"
    ],
    "docstrings": [
        "* Class to create .dot output of the given graph.\n * Create by Galpha",
        "* Constructor",
        "* Method to read the given graph\n   *\n   * @param path    path to the given graph\n   * @param pattern how the given graph is structured e.g {tab \\t or space \" \"}\n   * @throws IOException",
        "* Method to create a color map\n   *\n   * @param destpath destination path to the color_map file\n   * @throws IOException",
        "* Write the .dot format of the given graph\n   *\n   * @param inputGraph destination path to the .dot file\n   * @throws IOException",
        "* Writes the nodes\n   *\n   * @param node   vertex\n   * @param cmPath path to the given color map\n   * @throws IOException",
        "* Write edges\n   *\n   * @param key   Vertex ID\n   * @param nodes all edges between vertexID and the nodes\n   * @throws IOException",
        "* Matches the start graph and the calculated partitioning input\n   *\n   * @param partitionedInput partitioning\n   * @param cmPath\n   * @throws IOException"
    ],
    "functions": [
        "DotCreator",
        "readGraph",
        "createColorMap",
        "createDot",
        "writeNodes",
        "writeEdges",
        "matchGraph",
        "countCutEdges"
    ],
    "classes": [
        "DotCreator"
    ]
}