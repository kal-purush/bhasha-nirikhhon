{
    "identifiers": [
        "os",
        "sys",
        "nolearn",
        "cache",
        "numpy",
        "np",
        "sklearn",
        "BaseEstimator",
        "X",
        "len",
        "X",
        "cache",
        "DontCache",
        "join",
        "X",
        "len",
        "X",
        "sorted",
        "get_params",
        "items",
        "BaseEstimator",
        "feature_layer",
        "pretrained_params",
        "pretrained_meta",
        "center_only",
        "classify_direct",
        "verbose",
        "feature_layer",
        "pretrained_params",
        "pretrained_meta",
        "center_only",
        "classify_direct",
        "os",
        "path",
        "exists",
        "pretrained_params",
        "os",
        "path",
        "exists",
        "pretrained_meta",
        "ValueError",
        "format",
        "__class__",
        "X",
        "y",
        "decaf",
        "scripts",
        "imagenet",
        "DecafNet",
        "net_",
        "DecafNet",
        "pretrained_params",
        "pretrained_meta",
        "cache",
        "cached",
        "_transform_cache_key",
        "X",
        "img",
        "X",
        "classify_direct",
        "net_",
        "oversample",
        "img",
        "center_only",
        "center_only",
        "net_",
        "classify_direct",
        "images",
        "isinstance",
        "img",
        "Image",
        "np",
        "array",
        "Image",
        "open",
        "img",
        "net_",
        "classify",
        "img",
        "center_only",
        "center_only",
        "layer",
        "feature_layer",
        "split",
        "net_",
        "feature",
        "layer",
        "feat",
        "val",
        "np",
        "hstack",
        "feat",
        "val",
        "center_only",
        "feat",
        "flatten",
        "features",
        "append",
        "feat",
        "verbose",
        "sys",
        "stdout",
        "write",
        "len",
        "features",
        "len",
        "X",
        "sys",
        "stdout",
        "flush",
        "verbose",
        "sys",
        "stdout",
        "write",
        "np",
        "vstack",
        "features",
        "image",
        "decaf",
        "util",
        "transform",
        "transform",
        "scale_and_extract",
        "transform",
        "as_rgb",
        "image",
        "image",
        "astype",
        "np",
        "float32",
        "_JEFFNET_FLIP",
        "image",
        "copy",
        "image",
        "net_",
        "_data_mean",
        "image"
    ],
    "literals": [
        "','",
        "'fc7_cudanet_out'",
        "'imagenet.decafnet.epoch90'",
        "'imagenet.decafnet.meta'",
        "\"Pre-trained ConvNet parameters not found.  You may\"",
        "\"need to download the files from \"",
        "\"http://www.eecs.berkeley.edu/~jiayq/decaf_pretrained/ and \"",
        "\"pass the path to the two files as `pretrained_params` and \"",
        "\"`pretrained_meta` to the `{}` estimator.\"",
        "','",
        "\"\\r[ConvNet] %d%%\"",
        "'\\n'"
    ],
    "variables": [
        "verbose",
        "feature_layer",
        "pretrained_params",
        "pretrained_meta",
        "center_only",
        "classify_direct",
        "net_",
        "net_",
        "features",
        "images",
        "img",
        "feat",
        "val",
        "feat",
        "feat",
        "feat",
        "_JEFFNET_FLIP",
        "image",
        "image",
        "image"
    ],
    "comments": [
        "soft dep",
        "soft dep",
        "soft dep",
        "first, extract the 256x256 center.",
        "convert to [0,255] float32",
        "Flip the image if necessary, maintaining the c_contiguous order",
        "subtract the mean"
    ],
    "docstrings": [
        "\"\"\"Extract features from images using a pretrained ConvNet.\n\n    Based on Yangqing Jia and Jeff Donahue's `DeCAF\n    <https://github.com/UCB-ICSI-Vision-Group/decaf-release/wiki>`_.\n    Please make sure you read and accept DeCAF's license before you\n    use this class.\n\n    If ``classify_direct=False``, expects its input X to be a list of\n    image filenames or arrays as produced by\n    `np.array(Image.open(filename))`.\n    \"\"\"",
        "\"\"\"\n        :param feature_layer: The ConvNet layer that's used for\n                              feature extraction.  Defaults to\n                              `fc7_cudanet_out`.  A description of all\n                              available layers for the\n                              ImageNet-1k-pretrained ConvNet is found\n                              in the DeCAF wiki.  They are:\n\n                                - `pool5_cudanet_out`\n                                - `fc6_cudanet_out`\n                                - `fc6_neuron_cudanet_out`\n                                - `fc7_cudanet_out`\n                                - `fc7_neuron_cudanet_out`\n                                - `probs_cudanet_out`\n\n        :param pretrained_params: This must point to the file with the\n                                  pretrained parameters.  Defaults to\n                                  `imagenet.decafnet.epoch90`.  For\n                                  the ImageNet-1k-pretrained ConvNet\n                                  this file can be obtained from here:\n                                  http://www.eecs.berkeley.edu/~jiayq/decaf_pretrained/\n\n        :param pretrained_meta: Similar to `pretrained_params`, this\n                                must file to the file with the\n                                pretrained parameters' metadata.\n                                Defaults to `imagenet.decafnet.meta`.\n\n        :param center_only: Use the center patch of the image only\n                            when extracting features.  If `False`, use\n                            four corners, the image center and flipped\n                            variants and average a total of 10 feature\n                            vectors, which will usually yield better\n                            results.  Defaults to `True`.\n\n        :param classify_direct: When `True`, assume that input X is an\n                                array of shape (num x 256 x 256 x 3)\n                                as returned by `prepare_image`.\n        \"\"\"",
        "\"\"\"Returns image of shape `(256, 256, 3)`, as expected by\n        `transform` when `classify_direct = True`.\n        \"\"\""
    ],
    "functions": [
        "_transform_cache_key",
        "fit",
        "transform",
        "prepare_image"
    ],
    "classes": [
        "ConvNetFeatures"
    ]
}