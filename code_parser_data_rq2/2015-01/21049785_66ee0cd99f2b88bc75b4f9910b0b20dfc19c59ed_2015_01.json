{
    "identifiers": [
        "pyparam",
        "fractions",
        "Fraction",
        "itertools",
        "vector",
        "itertools",
        "product",
        "repeat",
        "pyparam",
        "ParameterVector",
        "from_py_params",
        "vector",
        "mfe_scores",
        "append",
        "pyparam",
        "get_mfe_scores",
        "seqfile",
        "outfile",
        "pv",
        "as_fractions",
        "mfe_scores"
    ],
    "literals": [
        "\"test_data/test_tRNA.fasta\"",
        "\"test.ct\"",
        "\"All done!\""
    ],
    "variables": [
        "seqfile",
        "outfile",
        "mfe_scores",
        "pv"
    ],
    "comments": [
        "This example shows how we can run gtmfe iteratively on a large collection of scores",
        "For this example, we'll use the \"test_tRNA.fasta\" sequence in the \"test_data\" folder",
        "and write the result to \"test.ct\" in the base directory",
        "We use itertools.product to generate all 4-vectors with coordinates in [-1, 0, 1]",
        "For each of these vectors, we generate the corresponding ParameterVector",
        "and then call mfe_scores with it",
        "The .as_fractions() method gets the result as a list of instances of Python's Fraction, a numeric type. A .as_rational() method is also available which gives instances of Sage's Rational class instead.",
        "In this case, printing all 81 results isn't super informative, but what the heck?",
        "In general, you'll probably have a more useful idea of what to do with these results (such as checking whether they lie inside a pre-generated polytope)"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}