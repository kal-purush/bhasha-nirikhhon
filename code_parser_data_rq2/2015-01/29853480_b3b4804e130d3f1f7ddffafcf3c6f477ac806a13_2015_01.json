{
    "identifiers": [
        "me",
        "vancexu",
        "sunshine",
        "service",
        "android",
        "app",
        "IntentService",
        "android",
        "content",
        "BroadcastReceiver",
        "android",
        "content",
        "ContentUris",
        "android",
        "content",
        "ContentValues",
        "android",
        "content",
        "Context",
        "android",
        "content",
        "Intent",
        "android",
        "database",
        "Cursor",
        "android",
        "net",
        "Uri",
        "android",
        "util",
        "Log",
        "org",
        "json",
        "JSONArray",
        "org",
        "json",
        "JSONException",
        "org",
        "json",
        "JSONObject",
        "java",
        "io",
        "BufferedReader",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "io",
        "InputStreamReader",
        "java",
        "net",
        "HttpURLConnection",
        "java",
        "net",
        "URL",
        "java",
        "util",
        "java",
        "util",
        "me",
        "vancexu",
        "sunshine",
        "data",
        "WeatherContract",
        "LOCATION_QUERY_EXTRA",
        "LOG_TAG",
        "getSimpleName",
        "Override",
        "intent",
        "locationQuery",
        "intent",
        "getStringExtra",
        "LOCATION_QUERY_EXTRA",
        "urlConnection",
        "reader",
        "forecastJsonStr",
        "format",
        "units",
        "numDays",
        "FORECAST_BASE_URL",
        "QUERY_PARAM",
        "FORMAT_PARAM",
        "UNITS_PARAM",
        "DAYS_PARAM",
        "builtUri",
        "Uri",
        "parse",
        "FORECAST_BASE_URL",
        "buildUpon",
        "appendQueryParameter",
        "QUERY_PARAM",
        "locationQuery",
        "appendQueryParameter",
        "FORMAT_PARAM",
        "format",
        "appendQueryParameter",
        "UNITS_PARAM",
        "units",
        "appendQueryParameter",
        "DAYS_PARAM",
        "toString",
        "numDays",
        "build",
        "url",
        "builtUri",
        "toString",
        "urlConnection",
        "url",
        "openConnection",
        "urlConnection",
        "setRequestMethod",
        "urlConnection",
        "connect",
        "inputStream",
        "urlConnection",
        "getInputStream",
        "buffer",
        "inputStream",
        "reader",
        "inputStream",
        "line",
        "line",
        "reader",
        "readLine",
        "buffer",
        "append",
        "line",
        "buffer",
        "append",
        "buffer",
        "length",
        "forecastJsonStr",
        "buffer",
        "toString",
        "e",
        "Log",
        "e",
        "LOG_TAG",
        "e",
        "urlConnection",
        "urlConnection",
        "disconnect",
        "reader",
        "reader",
        "close",
        "e",
        "Log",
        "e",
        "LOG_TAG",
        "e",
        "OWM_CITY",
        "OWM_CITY_NAME",
        "OWM_COORD",
        "OWM_LATITUDE",
        "OWM_LONGITUDE",
        "OWM_LIST",
        "OWM_DATETIME",
        "OWM_PRESSURE",
        "OWM_HUMIDITY",
        "OWM_WINDSPEED",
        "OWM_WIND_DIRECTION",
        "OWM_TEMPERATURE",
        "OWM_MAX",
        "OWM_MIN",
        "OWM_WEATHER",
        "OWM_DESCRIPTION",
        "OWM_WEATHER_ID",
        "forecastJson",
        "forecastJsonStr",
        "weatherArray",
        "forecastJson",
        "getJSONArray",
        "OWM_LIST",
        "cityJson",
        "forecastJson",
        "getJSONObject",
        "OWM_CITY",
        "cityName",
        "cityJson",
        "getString",
        "OWM_CITY_NAME",
        "cityCoord",
        "cityJson",
        "getJSONObject",
        "OWM_COORD",
        "cityLatitude",
        "cityCoord",
        "getDouble",
        "OWM_LATITUDE",
        "cityLongitude",
        "cityCoord",
        "getDouble",
        "OWM_LONGITUDE",
        "locationId",
        "addLocation",
        "locationQuery",
        "cityName",
        "cityLatitude",
        "cityLongitude",
        "cVVector",
        "weatherArray",
        "length",
        "i",
        "i",
        "weatherArray",
        "length",
        "i",
        "dateTime",
        "pressure",
        "humidity",
        "windSpeed",
        "windDirection",
        "high",
        "low",
        "description",
        "weatherId",
        "dayForecast",
        "weatherArray",
        "getJSONObject",
        "i",
        "dateTime",
        "dayForecast",
        "getLong",
        "OWM_DATETIME",
        "pressure",
        "dayForecast",
        "getDouble",
        "OWM_PRESSURE",
        "humidity",
        "dayForecast",
        "getInt",
        "OWM_HUMIDITY",
        "windSpeed",
        "dayForecast",
        "getDouble",
        "OWM_WINDSPEED",
        "windDirection",
        "dayForecast",
        "getDouble",
        "OWM_WIND_DIRECTION",
        "weatherObject",
        "dayForecast",
        "getJSONArray",
        "OWM_WEATHER",
        "getJSONObject",
        "description",
        "weatherObject",
        "getString",
        "OWM_DESCRIPTION",
        "weatherId",
        "weatherObject",
        "getInt",
        "OWM_WEATHER_ID",
        "temperatureObject",
        "dayForecast",
        "getJSONObject",
        "OWM_TEMPERATURE",
        "high",
        "temperatureObject",
        "getDouble",
        "OWM_MAX",
        "low",
        "temperatureObject",
        "getDouble",
        "OWM_MIN",
        "weatherValues",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_LOC_KEY",
        "locationId",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_DATETEXT",
        "WeatherContract",
        "getDbDateString",
        "dateTime",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_HUMIDITY",
        "humidity",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_PRESSURE",
        "pressure",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_WIND_SPEED",
        "windSpeed",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_DEGREES",
        "windDirection",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_MAX_TEMP",
        "high",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_MIN_TEMP",
        "low",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_SHORT_DESC",
        "description",
        "weatherValues",
        "put",
        "WeatherContract",
        "WeatherEntry",
        "COLUMN_WEATHER_ID",
        "weatherId",
        "cVVector",
        "add",
        "weatherValues",
        "cVVector",
        "size",
        "cvArray",
        "cVVector",
        "size",
        "cVVector",
        "toArray",
        "cvArray",
        "getContentResolver",
        "bulkInsert",
        "WeatherContract",
        "WeatherEntry",
        "CONTENT_URI",
        "cvArray",
        "Log",
        "d",
        "LOG_TAG",
        "cVVector",
        "size",
        "e",
        "Log",
        "e",
        "LOG_TAG",
        "e",
        "getMessage",
        "e",
        "e",
        "printStackTrace",
        "locationSetting",
        "cityName",
        "lat",
        "lon",
        "locationId",
        "Log",
        "v",
        "LOG_TAG",
        "cityName",
        "lat",
        "lon",
        "locationCursor",
        "getContentResolver",
        "query",
        "WeatherContract",
        "LocationEntry",
        "CONTENT_URI",
        "WeatherContract",
        "LocationEntry",
        "_ID",
        "WeatherContract",
        "LocationEntry",
        "COLUMN_LOCATION_SETTING",
        "locationSetting",
        "locationCursor",
        "moveToFirst",
        "locationIdIndex",
        "locationCursor",
        "getColumnIndex",
        "WeatherContract",
        "LocationEntry",
        "_ID",
        "locationId",
        "locationCursor",
        "getLong",
        "locationIdIndex",
        "locationValues",
        "locationValues",
        "put",
        "WeatherContract",
        "LocationEntry",
        "COLUMN_CITY_NAME",
        "cityName",
        "locationValues",
        "put",
        "WeatherContract",
        "LocationEntry",
        "COLUMN_LOCATION_SETTING",
        "locationSetting",
        "locationValues",
        "put",
        "WeatherContract",
        "LocationEntry",
        "COLUMN_COORD_LAT",
        "lat",
        "locationValues",
        "put",
        "WeatherContract",
        "LocationEntry",
        "COLUMN_COORD_LONG",
        "lon",
        "insertedUri",
        "getContentResolver",
        "insert",
        "WeatherContract",
        "LocationEntry",
        "CONTENT_URI",
        "locationValues",
        "locationId",
        "ContentUris",
        "parseId",
        "insertedUri",
        "locationCursor",
        "locationCursor",
        "close",
        "locationId",
        "Override",
        "context",
        "intent",
        "sendIntent",
        "context",
        "sendIntent",
        "putExtra",
        "LOCATION_QUERY_EXTRA",
        "intent",
        "getStringExtra",
        "LOCATION_QUERY_EXTRA",
        "context",
        "startService",
        "sendIntent"
    ],
    "literals": [
        "\"lqe\"",
        "\"Sunshine\"",
        "\"json\"",
        "\"metric\"",
        "\"http://api.openweathermap.org/data/2.5/forecast/daily?\"",
        "\"q\"",
        "\"mode\"",
        "\"units\"",
        "\"cnt\"",
        "\"GET\"",
        "\"\\n\"",
        "\"Error \"",
        "\"Error closing stream\"",
        "\"city\"",
        "\"name\"",
        "\"coord\"",
        "\"lat\"",
        "\"lon\"",
        "\"list\"",
        "\"dt\"",
        "\"pressure\"",
        "\"humidity\"",
        "\"speed\"",
        "\"deg\"",
        "\"temp\"",
        "\"max\"",
        "\"min\"",
        "\"weather\"",
        "\"main\"",
        "\"id\"",
        "\"Sunshine Service Complete. \"",
        "\" Inserted\"",
        "\"inserting \"",
        "\", with coord: \"",
        "\", \"",
        "\" = ?\""
    ],
    "variables": [
        "line",
        "dateTime",
        "pressure",
        "humidity",
        "windSpeed",
        "windDirection",
        "high",
        "low",
        "description",
        "weatherId",
        "locationId"
    ],
    "comments": [
        "These two need to be declared outside the try/catch",
        "so that they can be closed in the finally block.",
        "Will contain the raw JSON response as a string.",
        "Construct the URL for the OpenWeatherMap query",
        "Possible parameters are avaiable at OWM's forecast API page, at",
        "http://openweathermap.org/API#forecast",
        "Create the request to OpenWeatherMap, and open the connection",
        "Read the input stream into a String",
        "Nothing to do.",
        "Since it's JSON, adding a newline isn't necessary (it won't affect parsing)",
        "But it does make debugging a *lot* easier if you print out the completed",
        "buffer for debugging.",
        "Stream was empty.  No point in parsing.",
        "If the code didn't successfully get the weather data, there's no point in attempting",
        "to parse it.",
        "Now we have a String representing the complete forecast in JSON Format.",
        "Fortunately parsing is easy:  constructor takes the JSON string and converts it",
        "into an Object hierarchy for us.",
        "These are the names of the JSON objects that need to be extracted.",
        "Location information",
        "Location coordinate",
        "Weather information.  Each day's forecast info is an element of the \"list\" array.",
        "All temperatures are children of the \"temp\" object.",
        "Insert the new weather information into the database",
        "These are the values that will be collected.",
        "Get the JSON object representing the day",
        "The date/time is returned as a long.  We need to convert that",
        "into something human-readable, since most people won't read \"1400356800\" as",
        "\"this saturday\".",
        "Description is in a child array called \"weather\", which is 1 element long.",
        "That element also contains a weather code.",
        "Temperatures are in a child object called \"temp\".  Try not to name variables",
        "\"temp\" when working with temperature.  It confuses everybody.",
        "First, check if the location with this city name exists in the db",
        "Now that the content provider is set up, inserting rows of data is pretty simple.",
        "First create a ContentValues object to hold the data you want to insert.",
        "Then add the data, along with the corresponding name of the data type,",
        "so the content provider knows what kind of value is being inserted.",
        "Finally, insert location data into the database.",
        "The resulting URI contains the ID for the row.  Extract the locationId from the Uri.",
        "Always close our cursor",
        "Wait, that worked?  Yes!"
    ],
    "docstrings": [
        "* Created by vancexu on 1/29/15.",
        "* Helper method to handle insertion of a new location in the weather database.\n     *\n     * @param locationSetting The location string used to request updates from the server.\n     * @param cityName A human-readable city name, e.g \"Mountain View\"\n     * @param lat the latitude of the city\n     * @param lon the longitude of the city\n     * @return the row ID of the added location."
    ],
    "functions": [
        "SunshineService",
        "onHandleIntent",
        "addLocation",
        "onReceive"
    ],
    "classes": [
        "SunshineService",
        "AlarmReceiver"
    ]
}