{
    "identifiers": [
        "usb",
        "core",
        "usb",
        "backend",
        "libusb1",
        "array",
        "time",
        "datetime",
        "datetime",
        "action",
        "rawAction",
        "action",
        "rawAction",
        "array",
        "array",
        "array",
        "array",
        "datetime",
        "fromtimestamp",
        "usb",
        "core",
        "find",
        "idVendor",
        "idProduct",
        "ValueError",
        "usb",
        "backend",
        "libusb1",
        "get_backend",
        "find_library",
        "x",
        "usb",
        "core",
        "find",
        "idVendor",
        "idProduct",
        "backend",
        "backend",
        "dev",
        "dev",
        "set_configuration",
        "dev",
        "get_active_configuration",
        "cfg",
        "usb",
        "util",
        "find_descriptor",
        "intf",
        "custom_match",
        "e",
        "usb",
        "util",
        "endpoint_direction",
        "e",
        "bEndpointAddress",
        "usb",
        "util",
        "ENDPOINT_OUT",
        "tx_endpoint",
        "usb",
        "util",
        "find_descriptor",
        "intf",
        "custom_match",
        "e",
        "usb",
        "util",
        "endpoint_direction",
        "e",
        "bEndpointAddress",
        "usb",
        "util",
        "ENDPOINT_IN",
        "rx_endpoint",
        "request",
        "timeout",
        "tx_endpoint",
        "write",
        "request",
        "timeout",
        "time",
        "sleep",
        "rx_endpoint",
        "read",
        "timeout",
        "raw_data",
        "_req_clock",
        "time",
        "time",
        "TIME_OFFSET",
        "_req_clock",
        "array",
        "array",
        "pack",
        "ts",
        "send_and_receive",
        "_req_clock",
        "tx_endpoint",
        "connect",
        "datetime",
        "now",
        "_last_time_sync",
        "total_seconds",
        "set_clock",
        "datetime",
        "now",
        "_req_data",
        "receiving_data",
        "send_and_receive",
        "_req_data",
        "raw_data",
        "receiving_data",
        "rawAction",
        "rawAction",
        "raw_data",
        "_processed_data",
        "raw_data",
        "action",
        "action",
        "data",
        "time",
        "sleep",
        "max_errors",
        "errors",
        "max_errors",
        "read_data_buffer",
        "time",
        "sleep",
        "e",
        "e",
        "errors",
        "raw_data",
        "raw_data",
        "raw_data",
        "raw_data",
        "raw_data",
        "raw_data",
        "raw_data",
        "raw_data",
        "raw_data",
        "datetime",
        "fromtimestamp",
        "clock_raw",
        "TIME_OFFSET",
        "valueRaw",
        "clock",
        "sensor",
        "valueRaw",
        "value",
        "data",
        "join",
        "i",
        "i",
        "data",
        "Multilogger",
        "action",
        "log",
        "tl500",
        "collect_data"
    ],
    "literals": [
        "\"You need pyusb-1 to run this script!\"",
        "'B'",
        "'B'",
        "\"/usr/lib/libusb-1.0.so\"",
        "\"Arexx Multilogger not found!\"",
        "\"Could'n get tx endpoint\"",
        "\"Could'n get rx endpoint\"",
        "'B'",
        "\"I\"",
        "\"__main__\"",
        "\"\\t\""
    ],
    "variables": [
        "tx_endpoint",
        "action",
        "rawAction",
        "_req_clock",
        "_req_data",
        "_last_time_sync",
        "dev",
        "backend",
        "dev",
        "cfg",
        "intf",
        "tx_endpoint",
        "rx_endpoint",
        "raw_data",
        "TIME_OFFSET",
        "ts",
        "_last_time_sync",
        "receiving_data",
        "raw_data",
        "receiving_data",
        "data",
        "errors",
        "sensor",
        "valueRaw",
        "clock_raw",
        "clock",
        "value",
        "tl500"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "",
        "multilogger - AREXX Multilogger communication library",
        "Copyright (c) 2014 Pirmin Kalberer",
        "",
        "This file is part of arexx-multilogger-collectd-plugin.",
        "arexx-multilogger-collectd-plugin is free software: you can",
        "redistribute it and/or modify it under the terms of the GNU General Public",
        "License as published by the Free Software Foundation, version 2.",
        "",
        "This program is distributed in the hope that it will be useful, but WITHOUT",
        "ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS",
        "FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more",
        "details.",
        "",
        "You should have received a copy of the GNU General Public License along with",
        "this program; if not, see <http://www.gnu.org/licenses/>.",
        "import os",
        "os.environ['PYUSB_DEBUG'] = 'debug'",
        "Backend isn't found when called from collectd",
        "(at least libusb-1.0 on Arch)",
        "So we set it manually",
        "set the active configuration. With no arguments, the first",
        "configuration will be the active one",
        "get an endpoint instance",
        "match the first OUT endpoint",
        "match the first IN endpoint",
        "TODO: handle timeout/error",
        "TODO: handle timeout/error",
        "Timestamp of 2000-01-01 00:00:00",
        "request data",
        "From arexxd.c:",
        "The raw values are transformed this way:",
        "- sign-extend if signed",
        "- apply the transformation polynomial",
        "- apply the scaling function",
        "- drop if outside the interval [vLo,vUp]",
        "double z = raw;",
        "double hi, lo;",
        "char *unit;",
        "int idhi = id & 0xf000;",
        "",
        "if (idhi == 0x1000) {",
        "z = 0.02*z - 273.15;",
        "lo = -200;",
        "hi = 600;",
        "unit = \"C\";",
        "} else if (idhi == 0x2000) {",
        "if (raw >= 0x8000)",
        "z -= 0x10000;",
        "z /= 128;",
        "lo = -60;",
        "hi = 125;",
        "unit = \"C\";",
        "} else if (idhi == 0x4000) {",
        "if (!(id & 1)) {",
        "z = z/100 - 39.6;",
        "lo = -60;",
        "hi = 125;",
        "unit = \"C\";",
        "} else {",
        "z = -2.8e-6*z*z + 0.0405*z - 4;",
        "lo = 0;",
        "hi = 100.1;",
        "unit = \"%RH\";",
        "}",
        "} else if (idhi == 0x6000) {",
        "if (!(id & 1)) {",
        "if (raw >= 0x8000)",
        "z -= 0x10000;",
        "z /= 128;",
        "lo = -60;",
        "hi = 125;",
        "unit = \"C\";",
        "} else {",
        "z = -3.8123e-11*z;",
        "z = (z + 1.9184e-7) * z;",
        "z = (z - 1.0998e-3) * z;",
        "z += 6.56;",
        "z = pow(10, z);",
        "lo = 0;",
        "hi = 1e6;",
        "unit = \"ppm\";",
        "}",
        "} else {",
        "log_error(\"Unknown sensor type 0x%04x\", id);",
        "return;",
        "}",
        "if (z < lo || z > hi) {",
        "log_error(\"Sensor %d: value %f out of range\", id, z);",
        "return;",
        "}"
    ],
    "docstrings": [
        "\"\"\" Extract data from byte array \"\"\""
    ],
    "functions": [
        "connect",
        "send_and_receive",
        "set_clock",
        "read_data_buffer",
        "collect_data",
        "_processed_data",
        "log"
    ],
    "classes": [
        "Multilogger"
    ]
}