{
    "identifiers": [
        "e",
        "exports",
        "e",
        "define",
        "define",
        "define",
        "e",
        "f",
        "f",
        "f",
        "f",
        "e",
        "e",
        "t",
        "n",
        "r",
        "o",
        "u",
        "n",
        "o",
        "t",
        "o",
        "require",
        "require",
        "u",
        "a",
        "a",
        "o",
        "i",
        "i",
        "o",
        "o",
        "f",
        "f",
        "n",
        "o",
        "t",
        "o",
        "l",
        "e",
        "t",
        "o",
        "e",
        "s",
        "n",
        "n",
        "e",
        "l",
        "l",
        "e",
        "t",
        "n",
        "r",
        "n",
        "o",
        "require",
        "require",
        "o",
        "r",
        "o",
        "s",
        "r",
        "o",
        "s",
        "require",
        "exports",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "exports",
        "require",
        "opts",
        "Utils",
        "opts",
        "options",
        "options",
        "CacheStore",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "opts",
        "opts",
        "Utils",
        "opts",
        "name",
        "data",
        "data",
        "gateway",
        "gateway",
        "data",
        "data",
        "newData",
        "name",
        "newData",
        "cacheOpts",
        "opts",
        "args",
        "opts",
        "args",
        "originalProcessor",
        "newData",
        "gateway",
        "wrappedProcessor",
        "hasProcessor",
        "gateway",
        "gateway",
        "opts",
        "gateway",
        "data",
        "name",
        "callback",
        "Utils",
        "name",
        "data",
        "opts",
        "doneCallback",
        "Utils",
        "name",
        "doneCallback",
        "Utils",
        "doneCallback",
        "Utils",
        "doneCallback",
        "Utils",
        "CacheStore",
        "require",
        "exports",
        "require",
        "Mappersmith",
        "require",
        "methods",
        "CacheStore",
        "arguments",
        "newCacheStore",
        "Utils",
        "CacheStore",
        "methods",
        "newCacheStore",
        "require",
        "exports",
        "require",
        "Mappersmith",
        "require",
        "TransportGateway",
        "CacheStore",
        "cacheStoreOpts",
        "TransportGateway",
        "cacheStoreOpts",
        "TransportGateway",
        "TransportGateway",
        "CacheStore",
        "cacheStoreOpts",
        "CacheStore",
        "CacheStore",
        "TransportGateway",
        "TransportGateway",
        "Mappersmith",
        "CacheStore",
        "CacheStore",
        "LocalStorageCacheStore",
        "cacheStoreOpts",
        "Utils",
        "cacheStoreOpts",
        "CacheStore",
        "cacheStoreOpts",
        "Mappersmith",
        "Utils",
        "TransportGateway",
        "Utils",
        "store",
        "TransportGateway",
        "cacheOpts",
        "require",
        "exports",
        "require",
        "require",
        "CreateCacheStore",
        "name",
        "callback",
        "name",
        "data",
        "callback",
        "data",
        "name",
        "callback",
        "callback",
        "data",
        "name",
        "data",
        "opts",
        "doneCallback",
        "opts",
        "doneCallback",
        "opts",
        "opts",
        "name",
        "data",
        "opts",
        "doneCallback",
        "doneCallback",
        "data",
        "name",
        "doneCallback",
        "name",
        "doneCallback",
        "doneCallback",
        "doneCallback",
        "cacheKey",
        "cacheKey",
        "data",
        "cacheKey",
        "doneCallback",
        "doneCallback",
        "doneCallback",
        "cacheKey",
        "cacheKey",
        "doneCallback",
        "doneCallback",
        "name",
        "name",
        "cacheKey",
        "name",
        "name",
        "cacheKey",
        "rawData",
        "rawData",
        "name",
        "data",
        "opts",
        "Utils",
        "opts",
        "name",
        "parseInt",
        "options",
        "isNaN",
        "ttl",
        "ttl",
        "cacheKey",
        "ttl",
        "data",
        "eachCallback",
        "key",
        "key",
        "eachCallback",
        "callback",
        "setTimeout",
        "callback",
        "LocalStorageCacheStore",
        "require",
        "exports",
        "require",
        "require",
        "require",
        "CreateCacheStore",
        "Utils",
        "LocalStorageCacheStore",
        "SessionStorageCacheStore"
    ],
    "literals": [
        "\"object\"",
        "\"undefined\"",
        "\"function\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"function\"",
        "\"Cannot find module '\"",
        "\"'\"",
        "\"MODULE_NOT_FOUND\"",
        "\"function\"",
        "'./src/cache-store'",
        "'./src/local-storage-cache-store'",
        "'./src/session-storage-cache-store'",
        "'./src/create-cached-gateway'",
        "'./src/create-cache-store'",
        "\"./src/cache-store\"",
        "\"./src/create-cache-store\"",
        "\"./src/create-cached-gateway\"",
        "\"./src/local-storage-cache-store\"",
        "\"./src/session-storage-cache-store\"",
        "'mappersmith'",
        "'mappersmith_cache'",
        "'^'",
        "':'",
        "':'",
        "'CacheStore#read not implemented'",
        "'CacheStore#write not implemented'",
        "'CacheStore#delete not implemented'",
        "'CacheStore#cleanup not implemented'",
        "'CacheStore#clear not implemented'",
        "\"mappersmith\"",
        "\"mappersmith\"",
        "'mappersmith'",
        "'./cache-store'",
        "\"./cache-store\"",
        "\"mappersmith\"",
        "\"mappersmith\"",
        "'mappersmith'",
        "'./local-storage-cache-store'",
        "'object'",
        "'object'",
        "\"./local-storage-cache-store\"",
        "\"mappersmith\"",
        "\"mappersmith\"",
        "'mappersmith'",
        "'./create-cache-store'",
        "'function'",
        "\"./create-cache-store\"",
        "\"mappersmith\"",
        "\"mappersmith\"",
        "'mappersmith'",
        "'./local-storage-cache-store'",
        "'./create-cache-store'",
        "\"./create-cache-store\"",
        "\"./local-storage-cache-store\"",
        "\"mappersmith\"",
        "\"mappersmith\""
    ],
    "variables": [
        "f",
        "define",
        "exports",
        "a",
        "f",
        "l",
        "n",
        "i",
        "o",
        "Utils",
        "CacheStore",
        "options",
        "gateway",
        "cacheOpts",
        "hasProcessor",
        "originalProcessor",
        "wrappedProcessor",
        "args",
        "Mappersmith",
        "Utils",
        "CacheStore",
        "newCacheStore",
        "Mappersmith",
        "Utils",
        "LocalStorageCacheStore",
        "store",
        "cacheOpts",
        "Utils",
        "CreateCacheStore",
        "LocalStorageCacheStore",
        "data",
        "data",
        "cacheKey",
        "cacheKey",
        "rawData",
        "options",
        "cacheKey",
        "ttl",
        "Utils",
        "LocalStorageCacheStore",
        "CreateCacheStore",
        "SessionStorageCacheStore"
    ],
    "comments": [],
    "docstrings": [
        "* Creates a new gateway based on the informed transportGateway that will\n   * use the informed cacheStore to cache the data.\n   *\n   * args:\n   * @param TransportGateway {Mappersmith.Gateway}.\n   *  Default: Mappersmith.VanillaGateway\n   * @param CacheStore {MappersmithCachedGateway.CacheStore}.\n   *  Default: MappersmithCachedGateway.LocalstorageCacheStore\n   *\n   * The new gateway will accept the following opts:\n   *  cache - an object with the key ttl in seconds\n   *  writeCallback - callback to be used as write doneCallback",
        "* An abstract cache store class. There are multiple cache store\n * implementations, each having its own additional features.\n *\n * @param opts {Object} - accepted keys:\n *  - namespace {String}, default: 'mappersmith_cache'\n *  - ttl {int}, default: 300 (5 minutes)",
        "* Generates a key with the configured namespace.\n   *\n   * @param name {String}",
        "* Fetches data from the cache, using the given key. If there is data in\n   * the cache with the given key, then that data is returned.\n   *\n   * If there is no such data in the cache (a cache miss), then null will be\n   * returned. However, if a block has been passed, that block will be passed\n   * the key and executed in the event of a cache miss. The return value of the\n   * block will be written to the cache under the given cache key, and that\n   * return value will be returned.\n   *\n   * @param name {String}\n   * @param opts {Object} - with:\n   *  - request: callback to fetch the data\n   *  - gatewayInstance\n   *  - writeCallback: callback to be used as write doneCallback\n   *  - cacheOpts: options for cache store",
        "* Fetches data from the cache, using the given key. If there is data in\n   * the cache with the given key, then that data is returned. Otherwise,\n   * null is returned.\n   *\n   * @param name {String} - cache key\n   * @param callback {Function} - receives data",
        "* Writes the value to the cache, with the key.\n   *\n   * @param name {String} - cache key\n   * @param data\n   * @param opts {Object} - Accepts ttl {int}\n   * @param doneCallback {Function} - receives data\n   *\n   * This method can be called in two ways:\n   *  write(name, data, opts, doneCallback);\n   *  write(name, data, doneCallback);",
        "* Deletes an entry in the cache. Returns true if an entry is deleted.\n   *\n   * @param name {String} - cache key\n   * @param doneCallback {Function}",
        "* Cleanup the cache by removing expired entries.\n   *\n   * @param doneCallback {Function}",
        "* Clear the entire cache.\n   *\n   * @param doneCallback {Function}"
    ],
    "functions": [
        "s"
    ],
    "classes": []
}