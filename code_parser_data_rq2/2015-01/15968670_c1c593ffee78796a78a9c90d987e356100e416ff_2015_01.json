{
    "identifiers": [
        "name",
        "methods",
        "name"
    ],
    "literals": [
        "\"use strict\"",
        "\"undefined\"",
        "\"Spec_\"",
        "\"Spec_\"",
        "\"Spec\"",
        "\"prototype\""
    ],
    "variables": [
        "methods"
    ],
    "comments": [
        "{@spec_canvas",
        "--- dependency modules ----------------------------------",
        "--- define / local variables ----------------------------",
        "var _isNodeOrNodeWebKit = !!global.global;",
        "var _runOnNodeWebKit =  _isNodeOrNodeWebKit && /native/.test(setTimeout);",
        "var _runOnNode       =  _isNodeOrNodeWebKit && !/native/.test(setTimeout);",
        "var _runOnWorker     = !_isNodeOrNodeWebKit && \"WorkerLocation\" in global;",
        "var _runOnBrowser    = !_isNodeOrNodeWebKit && \"document\" in global;",
        "--- class / interfaces ----------------------------------",
        "--- implements ------------------------------------------",
        "--- validate / assertions -------------------------------",
        "{@dev",
        "function $valid(val, fn, hint) { if (global[\"Valid\"]) { global[\"Valid\"](val, fn, hint); } }",
        "function $type(obj, type) { return global[\"Valid\"] ? global[\"Valid\"].type(obj, type) : true; }",
        "function $keys(obj, str) { return global[\"Valid\"] ? global[\"Valid\"].keys(obj, str) : true; }",
        "function $some(val, str, ignore) { return global[\"Valid\"] ? global[\"Valid\"].some(val, str, ignore) : true; }",
        "function $args(fn, args) { if (global[\"Valid\"]) { global[\"Valid\"].args(fn, args); } }",
        "}@dev",
        "--- exports ---------------------------------------------",
        "WebModule idiom. http://git.io/WebModule",
        "}@spec_canvas"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}