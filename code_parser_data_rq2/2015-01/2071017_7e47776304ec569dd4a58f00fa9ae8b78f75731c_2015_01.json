{
    "identifiers": [
        "Collections",
        "Generic",
        "IO",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "Couchbase",
        "N1QL",
        "Newtonsoft",
        "Json",
        "NUnit",
        "Framework",
        "Couchbase",
        "Tests",
        "N1QL",
        "TestFixture",
        "SetUp",
        "QueryRequest",
        "ClearCache",
        "Test",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "query",
        "GetRequestUri",
        "Assert",
        "IsTrue",
        "uri",
        "ToString",
        "Contains",
        "WriteLine",
        "uri",
        "Test",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "ClientContextId",
        "query",
        "GetRequestUri",
        "WriteLine",
        "uri",
        "Assert",
        "IsTrue",
        "uri",
        "ToString",
        "Contains",
        "Test",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "ClientContextId",
        "Pretty",
        "query",
        "GetRequestUri",
        "WriteLine",
        "uri",
        "Assert",
        "IsTrue",
        "uri",
        "ToString",
        "Contains",
        "Test",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "AddPositionalParameter",
        "query",
        "GetRequestUri",
        "WriteLine",
        "uri",
        "Assert",
        "IsTrue",
        "uri",
        "ToString",
        "Contains",
        "Test",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "AddPositionalParameter",
        "AddPositionalParameter",
        "query",
        "GetRequestUri",
        "WriteLine",
        "uri",
        "Assert",
        "IsTrue",
        "uri",
        "ToString",
        "Contains",
        "Test",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "AddNamedParameter",
        "AddNamedParameter",
        "query",
        "GetRequestUri",
        "WriteLine",
        "uri",
        "Assert",
        "IsTrue",
        "uri",
        "ToString",
        "Contains",
        "Test",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "AddCredentials",
        "query",
        "GetRequestUri",
        "WriteLine",
        "uri",
        "Assert",
        "IsTrue",
        "uri",
        "ToString",
        "Contains",
        "Test",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "AddCredentials",
        "query",
        "GetRequestUri",
        "WriteLine",
        "uri",
        "Assert",
        "IsTrue",
        "uri",
        "ToString",
        "Contains",
        "Test",
        "Assert",
        "Throws",
        "ArgumentOutOfRangeException",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "AddCredentials",
        "Assert",
        "That",
        "ex",
        "Message",
        "Is",
        "EqualTo",
        "Test",
        "Assert",
        "Throws",
        "ArgumentOutOfRangeException",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "AddCredentials",
        "Assert",
        "That",
        "ex",
        "Message",
        "Is",
        "EqualTo",
        "Test",
        "Assert",
        "Throws",
        "ArgumentOutOfRangeException",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "AddCredentials",
        "Assert",
        "That",
        "ex",
        "Message",
        "Is",
        "EqualTo",
        "Test",
        "QueryRequest",
        "Metrics",
        "HttpMethod",
        "Method",
        "Post",
        "Statement",
        "Pretty",
        "ReadOnly",
        "ScanConsistency",
        "ScanConsistency",
        "RequestPlus",
        "ScanVector",
        "ScanWait",
        "TimeSpan",
        "Signature",
        "Timeout",
        "TimeSpan",
        "Compression",
        "Compression",
        "RLE",
        "AddCredentials",
        "AddPositionalParameter",
        "request",
        "GetFormValues",
        "Assert",
        "AreEqual",
        "values",
        "Assert",
        "AreEqual",
        "values",
        "Assert",
        "AreEqual",
        "values",
        "Assert",
        "AreEqual",
        "values",
        "Assert",
        "AreEqual",
        "Uri",
        "EscapeDataString",
        "JsonConvert",
        "SerializeObject",
        "values",
        "Assert",
        "AreEqual",
        "values",
        "Assert",
        "AreEqual",
        "values",
        "Assert",
        "AreEqual",
        "values",
        "Assert",
        "AreEqual",
        "Uri",
        "EscapeDataString",
        "JsonConvert",
        "SerializeObject",
        "values",
        "Assert",
        "AreEqual",
        "Uri",
        "EscapeDataString",
        "values",
        "Assert",
        "AreEqual",
        "values",
        "Assert",
        "AreEqual",
        "values",
        "Test",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "Timeout",
        "TimeSpan",
        "query",
        "GetRequestUri",
        "WriteLine",
        "uri",
        "Assert",
        "IsTrue",
        "uri",
        "ToString",
        "Contains",
        "Test",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "Prepared",
        "query",
        "GetRequestUri",
        "WriteLine",
        "uri",
        "Assert",
        "IsTrue",
        "uri",
        "ToString",
        "Contains",
        "Test",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "Prepared",
        "query",
        "GetRequestUri",
        "query",
        "IPreparable",
        "Assert",
        "IsNotNull",
        "preparable",
        "Assert",
        "IsFalse",
        "preparable",
        "HasPrepared",
        "Test",
        "QueryRequest",
        "BaseUri",
        "Uri",
        "Statement",
        "Prepared",
        "query",
        "GetRequestUri",
        "JsonConvert",
        "DeserializeObject",
        "dynamic",
        "File",
        "ReadAllText",
        "response",
        "results",
        "ToString",
        "Replace",
        "query",
        "IPreparable",
        "Assert",
        "IsNotNull",
        "preparable",
        "preparable",
        "CachePreparedStatement",
        "preparedStatement",
        "Assert",
        "IsTrue",
        "preparable",
        "HasPrepared"
    ],
    "literals": [
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM default\"",
        "\":8093/query?statement=SELECT * FROM default\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM default\"",
        "\"somecontextlessthanorequalto64chars\"",
        "\":8093/query?statement=SELECT * FROM default&client_context_id=somecontextlessthanorequalto64chars\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM default\"",
        "\"somecontextlessthanorequalto64chars\"",
        "\":8093/query?statement=SELECT * FROM default&pretty=true&client_context_id=somecontextlessthanorequalto64chars\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM default WHERE type=$1\"",
        "\"dog\"",
        "\":8093/query?statement=SELECT * FROM default WHERE type=$1&args=[\\\"dog\\\"]\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM default WHERE type=$1 OR type=$2\"",
        "\"dog\"",
        "\"cat\"",
        "\":8093/query?statement=SELECT * FROM default WHERE type=$1 OR type=$2&args=[\\\"dog\\\"%2C\\\"cat\\\"]\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM default WHERE type=$canine OR type=$feline\"",
        "\"canine\"",
        "\"dog\"",
        "\"feline\"",
        "\"cat\"",
        "\":8093/query?statement=SELECT * FROM default WHERE type=$canine OR type=$feline&$canine=\\\"dog\\\"&$feline=\\\"cat\\\"\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM authenticated\"",
        "\"authenticated\"",
        "\"secret\"",
        "\":8093/query?statement=SELECT * FROM authenticated&creds=[{\\\"user\\\":\\\"admin:authenticated\\\"%2C\\\"pass\\\":\\\"secret\\\"}]\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM authenticated\"",
        "\"authenticated\"",
        "\"secret\"",
        "\":8093/query?statement=SELECT * FROM authenticated&creds=[{\\\"user\\\":\\\"local:authenticated\\\"%2C\\\"pass\\\":\\\"secret\\\"}]\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM authenticated\"",
        "\"\"",
        "\"secret\"",
        "\"cannot be null, empty or whitespace.\\r\\nParameter name: username\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM authenticated\"",
        "\" \"",
        "\"secret\"",
        "\"cannot be null, empty or whitespace.\\r\\nParameter name: username\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM authenticated\"",
        "\"secret\"",
        "\"cannot be null, empty or whitespace.\\r\\nParameter name: username\"",
        "\"SELECT * from Who WHERE $1\"",
        "\"100\"",
        "\"authenticated\"",
        "\"secret\"",
        "\"boo\"",
        "\"true\"",
        "\"metrics\"",
        "\"SELECT * from Who WHERE $1\"",
        "\"statement\"",
        "\"true\"",
        "\"pretty\"",
        "\"false\"",
        "\"readonly\"",
        "\"request_plus\"",
        "\"scan_consistency\"",
        "\"100\"",
        "\"scan_vector\"",
        "\"100\"",
        "\"scan_wait\"",
        "\"true\"",
        "\"signature\"",
        "\"RLE\"",
        "\"compression\"",
        "\"[{\\\"user\\\":\\\"local:authenticated\\\",\\\"pass\\\":\\\"secret\\\"}]\"",
        "\"creds\"",
        "\"[\\\"boo\\\"]\"",
        "\"args\"",
        "\"10000ms\"",
        "\"timeout\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM `beer-sample`\"",
        "\":8093/query?statement=SELECT * FROM `beer-sample`&timeout=5ms\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM `beer-sample`\"",
        "\":8093/query?statement=PREPARE SELECT * FROM `beer-sample`\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM `beer-sample`\"",
        "\"http://192.168.30.101:8093/query\"",
        "\"SELECT * FROM `beer-sample`\"",
        "\"\\r\\n\"",
        "\"\""
    ],
    "variables": [
        "query",
        "uri",
        "query",
        "uri",
        "query",
        "uri",
        "query",
        "uri",
        "query",
        "uri",
        "query",
        "uri",
        "query",
        "uri",
        "query",
        "uri",
        "ex",
        "ex",
        "ex",
        "request",
        "values",
        "query",
        "uri",
        "query",
        "uri",
        "query",
        "uri",
        "preparable",
        "query",
        "uri",
        "response",
        "preparedStatement",
        "preparable"
    ],
    "comments": [
        "need to run this once",
        "need to run this once"
    ],
    "docstrings": [],
    "functions": [
        "SetUp",
        "Test_Statement",
        "Test_Statement_ClientContextId",
        "Test_Statement_ClientContextId_Pretty",
        "Test_Positional_Parameters",
        "Test_Positional_Parameters_Two_Arguments",
        "Test_Named_Parameters_Two_Arguments",
        "When_isAdmin_Is_True_Credentials_Contains_admin",
        "When_isAdmin_Is_False_Credentials_Contains_local",
        "When_Username_Is_Empty_AddCredentials_Throws_AOOE",
        "When_Username_Is_Whitespace_AddCredentials_Throws_AOOE",
        "When_Username_Is_Null_AddCredentials_Throws_AOOE",
        "Test_GetFormValues",
        "When_Timeout_Set_Query_Contains_Milliseconds_With_Unit",
        "When_Prepared_True_And_No_Cached_Prepared_Statement_Exists_Return_Append_Prepare",
        "When_Prepared_True_And_No_Cached_Prepared_Statement_Exists_IPreparable_HasPrepared_Is_False",
        "When_Prepared_True_And_Cached_Prepared_Statement_Exists_IPreparable_HasPrepared_Is_True"
    ],
    "classes": [
        "QueryRequestTests"
    ]
}