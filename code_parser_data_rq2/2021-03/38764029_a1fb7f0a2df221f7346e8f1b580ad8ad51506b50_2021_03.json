{
    "identifiers": [
        "org",
        "springframework",
        "cloud",
        "stream",
        "binder",
        "kafka",
        "streams",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "CountDownLatch",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "BiConsumer",
        "java",
        "util",
        "BiFunction",
        "java",
        "util",
        "org",
        "apache",
        "kafka",
        "clients",
        "consumer",
        "Consumer",
        "org",
        "apache",
        "kafka",
        "clients",
        "consumer",
        "ConsumerConfig",
        "org",
        "apache",
        "kafka",
        "clients",
        "consumer",
        "ConsumerRecord",
        "org",
        "apache",
        "kafka",
        "clients",
        "consumer",
        "ConsumerRecords",
        "org",
        "apache",
        "kafka",
        "streams",
        "KeyValue",
        "org",
        "apache",
        "kafka",
        "streams",
        "kstream",
        "KStream",
        "org",
        "junit",
        "AfterClass",
        "org",
        "junit",
        "BeforeClass",
        "org",
        "junit",
        "ClassRule",
        "org",
        "junit",
        "Test",
        "org",
        "springframework",
        "boot",
        "SpringApplication",
        "org",
        "springframework",
        "boot",
        "WebApplicationType",
        "org",
        "springframework",
        "boot",
        "autoconfigure",
        "EnableAutoConfiguration",
        "org",
        "springframework",
        "context",
        "ConfigurableApplicationContext",
        "org",
        "springframework",
        "kafka",
        "core",
        "DefaultKafkaConsumerFactory",
        "org",
        "springframework",
        "kafka",
        "core",
        "DefaultKafkaProducerFactory",
        "org",
        "springframework",
        "kafka",
        "core",
        "KafkaTemplate",
        "org",
        "springframework",
        "kafka",
        "test",
        "EmbeddedKafkaBroker",
        "org",
        "springframework",
        "kafka",
        "test",
        "rule",
        "EmbeddedKafkaRule",
        "org",
        "springframework",
        "kafka",
        "test",
        "utils",
        "KafkaTestUtils",
        "org",
        "springframework",
        "stereotype",
        "Component",
        "org",
        "springframework",
        "util",
        "Assert",
        "org",
        "assertj",
        "core",
        "api",
        "Assertions",
        "assertThat",
        "ClassRule",
        "embeddedKafkaRule",
        "embeddedKafka",
        "embeddedKafkaRule",
        "getEmbeddedKafka",
        "consumer1",
        "consumer2",
        "consumer3",
        "LATCH_1",
        "LATCH_2",
        "LATCH_3",
        "BeforeClass",
        "consumerProps",
        "KafkaTestUtils",
        "consumerProps",
        "embeddedKafka",
        "consumerProps",
        "put",
        "ConsumerConfig",
        "AUTO_OFFSET_RESET_CONFIG",
        "consumerProps",
        "put",
        "ConsumerConfig",
        "KEY_DESERIALIZER_CLASS_CONFIG",
        "cf",
        "consumerProps",
        "consumer1",
        "cf",
        "createConsumer",
        "embeddedKafka",
        "consumeFromEmbeddedTopics",
        "consumer1",
        "consumerProps1",
        "KafkaTestUtils",
        "consumerProps",
        "embeddedKafka",
        "consumerProps1",
        "put",
        "ConsumerConfig",
        "AUTO_OFFSET_RESET_CONFIG",
        "consumerProps1",
        "put",
        "ConsumerConfig",
        "KEY_DESERIALIZER_CLASS_CONFIG",
        "cf1",
        "consumerProps1",
        "consumer2",
        "cf1",
        "createConsumer",
        "embeddedKafka",
        "consumeFromEmbeddedTopics",
        "consumer2",
        "consumerProps2",
        "KafkaTestUtils",
        "consumerProps",
        "embeddedKafka",
        "consumerProps2",
        "put",
        "ConsumerConfig",
        "AUTO_OFFSET_RESET_CONFIG",
        "consumerProps2",
        "put",
        "ConsumerConfig",
        "KEY_DESERIALIZER_CLASS_CONFIG",
        "cf2",
        "consumerProps2",
        "consumer3",
        "cf2",
        "createConsumer",
        "embeddedKafka",
        "consumeFromEmbeddedTopics",
        "consumer3",
        "AfterClass",
        "consumer1",
        "close",
        "consumer2",
        "close",
        "consumer3",
        "close",
        "Test",
        "app",
        "app",
        "setWebApplicationType",
        "WebApplicationType",
        "NONE",
        "ignored",
        "app",
        "run",
        "embeddedKafka",
        "getBrokersAsString",
        "senderProps",
        "KafkaTestUtils",
        "producerProps",
        "embeddedKafka",
        "pf",
        "senderProps",
        "template",
        "pf",
        "template",
        "setDefaultTopic",
        "template",
        "sendDefault",
        "cr",
        "KafkaTestUtils",
        "getSingleRecord",
        "consumer1",
        "assertThat",
        "cr",
        "value",
        "contains",
        "isTrue",
        "pf",
        "destroy",
        "Test",
        "app",
        "app",
        "setWebApplicationType",
        "WebApplicationType",
        "NONE",
        "context",
        "app",
        "run",
        "embeddedKafka",
        "getBrokersAsString",
        "senderProps",
        "KafkaTestUtils",
        "producerProps",
        "embeddedKafka",
        "pf",
        "senderProps",
        "template",
        "pf",
        "template",
        "setDefaultTopic",
        "template",
        "sendDefault",
        "Assert",
        "isTrue",
        "LATCH_1",
        "await",
        "TimeUnit",
        "SECONDS",
        "pf",
        "destroy",
        "Test",
        "app",
        "app",
        "setWebApplicationType",
        "WebApplicationType",
        "NONE",
        "ignored",
        "app",
        "run",
        "embeddedKafka",
        "getBrokersAsString",
        "senderProps",
        "KafkaTestUtils",
        "producerProps",
        "embeddedKafka",
        "pf",
        "senderProps",
        "template",
        "pf",
        "template",
        "setDefaultTopic",
        "template",
        "sendDefault",
        "template",
        "setDefaultTopic",
        "template",
        "sendDefault",
        "records",
        "KafkaTestUtils",
        "getRecords",
        "consumer2",
        "assertThat",
        "records",
        "count",
        "isEqualTo",
        "records",
        "forEach",
        "stringStringConsumerRecord",
        "assertThat",
        "stringStringConsumerRecord",
        "value",
        "contains",
        "isTrue",
        "pf",
        "destroy",
        "Test",
        "app",
        "app",
        "setWebApplicationType",
        "WebApplicationType",
        "NONE",
        "context",
        "app",
        "run",
        "embeddedKafka",
        "getBrokersAsString",
        "senderProps",
        "KafkaTestUtils",
        "producerProps",
        "embeddedKafka",
        "pf",
        "senderProps",
        "template",
        "pf",
        "template",
        "setDefaultTopic",
        "template",
        "sendDefault",
        "template",
        "setDefaultTopic",
        "template",
        "sendDefault",
        "Assert",
        "isTrue",
        "LATCH_2",
        "await",
        "TimeUnit",
        "SECONDS",
        "pf",
        "destroy",
        "Test",
        "app",
        "app",
        "setWebApplicationType",
        "WebApplicationType",
        "NONE",
        "context",
        "app",
        "run",
        "embeddedKafka",
        "getBrokersAsString",
        "senderProps",
        "KafkaTestUtils",
        "producerProps",
        "embeddedKafka",
        "pf",
        "senderProps",
        "template",
        "pf",
        "template",
        "setDefaultTopic",
        "template",
        "sendDefault",
        "template",
        "setDefaultTopic",
        "template",
        "sendDefault",
        "template",
        "setDefaultTopic",
        "template",
        "sendDefault",
        "Assert",
        "isTrue",
        "LATCH_3",
        "await",
        "TimeUnit",
        "SECONDS",
        "pf",
        "destroy",
        "Test",
        "app",
        "app",
        "setWebApplicationType",
        "WebApplicationType",
        "NONE",
        "context",
        "app",
        "run",
        "embeddedKafka",
        "getBrokersAsString",
        "senderProps",
        "KafkaTestUtils",
        "producerProps",
        "embeddedKafka",
        "pf",
        "senderProps",
        "template",
        "pf",
        "template",
        "setDefaultTopic",
        "template",
        "sendDefault",
        "template",
        "setDefaultTopic",
        "template",
        "sendDefault",
        "template",
        "setDefaultTopic",
        "template",
        "sendDefault",
        "records",
        "KafkaTestUtils",
        "getRecords",
        "consumer3",
        "assertThat",
        "records",
        "count",
        "isEqualTo",
        "records",
        "forEach",
        "stringStringConsumerRecord",
        "assertThat",
        "stringStringConsumerRecord",
        "value",
        "contains",
        "isTrue",
        "pf",
        "destroy",
        "Component",
        "EnableAutoConfiguration",
        "Override",
        "stringIntegerKStream",
        "stringIntegerKStream",
        "integer",
        "s",
        "s",
        "s",
        "s",
        "Component",
        "EnableAutoConfiguration",
        "Override",
        "integerStringKStream",
        "integerStringKStream",
        "integer",
        "s",
        "LATCH_1",
        "countDown",
        "Component",
        "EnableAutoConfiguration",
        "Override",
        "stringStringKStream",
        "stringStringKStream2",
        "stringStringKStream",
        "merge",
        "stringStringKStream2",
        "Component",
        "EnableAutoConfiguration",
        "Override",
        "stringStringKStream",
        "stringStringKStream2",
        "merged",
        "stringStringKStream",
        "merge",
        "stringStringKStream2",
        "merged",
        "s",
        "s2",
        "LATCH_2",
        "countDown",
        "Component",
        "EnableAutoConfiguration",
        "Override",
        "stringStringKStream",
        "stringStringKStream1",
        "stringStringKStream2",
        "merge1",
        "stringStringKStream",
        "merge",
        "stringStringKStream1",
        "merged2",
        "merge1",
        "merge",
        "stringStringKStream2",
        "merged2",
        "s1",
        "s2",
        "LATCH_3",
        "countDown",
        "Component",
        "EnableAutoConfiguration",
        "Override",
        "stringStringKStream",
        "stringStringKStream1",
        "stringStringKStream2",
        "merge1",
        "stringStringKStream",
        "merge",
        "stringStringKStream1",
        "merge1",
        "merge",
        "stringStringKStream2"
    ],
    "literals": [
        "\"testFunctionComponent-out\"",
        "\"testBiFunctionComponent-out\"",
        "\"testCurriedFunctionWithFunctionTerminal-out\"",
        "\"group\"",
        "\"false\"",
        "\"earliest\"",
        "\"org.apache.kafka.common.serialization.StringDeserializer\"",
        "\"testFunctionComponent-out\"",
        "\"group-x\"",
        "\"false\"",
        "\"earliest\"",
        "\"org.apache.kafka.common.serialization.StringDeserializer\"",
        "\"testBiFunctionComponent-out\"",
        "\"group-y\"",
        "\"false\"",
        "\"earliest\"",
        "\"org.apache.kafka.common.serialization.StringDeserializer\"",
        "\"testCurriedFunctionWithFunctionTerminal-out\"",
        "\"--server.port=0\"",
        "\"--spring.jmx.enabled=false\"",
        "\"--spring.cloud.stream.bindings.foo-in-0.destination=testFunctionComponent-in\"",
        "\"--spring.cloud.stream.bindings.foo-out-0.destination=testFunctionComponent-out\"",
        "\"--spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000\"",
        "\"--spring.cloud.stream.kafka.streams.binder.brokers=\"",
        "\"testFunctionComponent-in\"",
        "\"foobar\"",
        "\"testFunctionComponent-out\"",
        "\"foobarfoobar\"",
        "\"--server.port=0\"",
        "\"--spring.jmx.enabled=false\"",
        "\"--spring.cloud.stream.bindings.bar-in-0.destination=testConsumerComponent-in\"",
        "\"--spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000\"",
        "\"--spring.cloud.stream.kafka.streams.binder.brokers=\"",
        "\"testConsumerComponent-in\"",
        "\"foobar\"",
        "\"bar\"",
        "\"--server.port=0\"",
        "\"--spring.jmx.enabled=false\"",
        "\"--spring.cloud.stream.bindings.bazz-in-0.destination=testBiFunctionComponent-in-0\"",
        "\"--spring.cloud.stream.bindings.bazz-in-1.destination=testBiFunctionComponent-in-1\"",
        "\"--spring.cloud.stream.bindings.bazz-out-0.destination=testBiFunctionComponent-out\"",
        "\"--spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000\"",
        "\"--spring.cloud.stream.kafka.streams.binder.brokers=\"",
        "\"testBiFunctionComponent-in-0\"",
        "\"foobar\"",
        "\"testBiFunctionComponent-in-1\"",
        "\"foobar\"",
        "\"foobar\"",
        "\"--server.port=0\"",
        "\"--spring.jmx.enabled=false\"",
        "\"--spring.cloud.stream.bindings.buzz-in-0.destination=testBiConsumerComponent-in-0\"",
        "\"--spring.cloud.stream.bindings.buzz-in-1.destination=testBiConsumerComponent-in-1\"",
        "\"--spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000\"",
        "\"--spring.cloud.stream.kafka.streams.binder.brokers=\"",
        "\"testBiConsumerComponent-in-0\"",
        "\"foobar\"",
        "\"testBiConsumerComponent-in-1\"",
        "\"foobar\"",
        "\"bar\"",
        "\"--server.port=0\"",
        "\"--spring.jmx.enabled=false\"",
        "\"--spring.cloud.stream.bindings.curriedConsumer-in-0.destination=testCurriedFunctionWithConsumerTerminal-in-0\"",
        "\"--spring.cloud.stream.bindings.curriedConsumer-in-1.destination=testCurriedFunctionWithConsumerTerminal-in-1\"",
        "\"--spring.cloud.stream.bindings.curriedConsumer-in-2.destination=testCurriedFunctionWithConsumerTerminal-in-2\"",
        "\"--spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000\"",
        "\"--spring.cloud.stream.kafka.streams.binder.brokers=\"",
        "\"testCurriedFunctionWithConsumerTerminal-in-0\"",
        "\"foobar\"",
        "\"testCurriedFunctionWithConsumerTerminal-in-1\"",
        "\"foobar\"",
        "\"testCurriedFunctionWithConsumerTerminal-in-2\"",
        "\"foobar\"",
        "\"bar\"",
        "\"--server.port=0\"",
        "\"--spring.jmx.enabled=false\"",
        "\"--spring.cloud.stream.bindings.curriedFunction-in-0.destination=testCurriedFunctionWithFunctionTerminal-in-0\"",
        "\"--spring.cloud.stream.bindings.curriedFunction-in-1.destination=testCurriedFunctionWithFunctionTerminal-in-1\"",
        "\"--spring.cloud.stream.bindings.curriedFunction-in-2.destination=testCurriedFunctionWithFunctionTerminal-in-2\"",
        "\"--spring.cloud.stream.bindings.curriedFunction-out-0.destination=testCurriedFunctionWithFunctionTerminal-out\"",
        "\"--spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000\"",
        "\"--spring.cloud.stream.kafka.streams.binder.brokers=\"",
        "\"testCurriedFunctionWithFunctionTerminal-in-0\"",
        "\"foobar\"",
        "\"testCurriedFunctionWithFunctionTerminal-in-1\"",
        "\"foobar\"",
        "\"testCurriedFunctionWithFunctionTerminal-in-2\"",
        "\"foobar\"",
        "\"foobar\"",
        "\"foo\"",
        "\"bar\"",
        "\"bazz\"",
        "\"buzz\"",
        "\"curriedConsumer\"",
        "\"curriedFunction\""
    ],
    "variables": [
        "consumer1",
        "consumer2",
        "consumer3"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright 2021-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @author Soby Chacko"
    ],
    "functions": [
        "setUp",
        "tearDown",
        "testFunctionComponent",
        "testConsumerComponent",
        "testBiFunctionComponent",
        "testBiConsumerComponent",
        "testCurriedFunctionWithConsumerTerminal",
        "testCurriedFunctionWithFunctionTerminal",
        "apply",
        "accept",
        "apply",
        "accept",
        "apply",
        "apply"
    ],
    "classes": [
        "KafkaStreamsComponentBeansTests",
        "FunctionAsComponent",
        "ConsumerAsComponent",
        "BiFunctionAsComponent",
        "BiConsumerAsComponent",
        "CurriedFunctionWithConsumerTerminal",
        "CurriedFunctionWithFunctionTerminal"
    ]
}