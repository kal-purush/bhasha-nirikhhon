{
    "identifiers": [
        "indexedDB",
        "request",
        "db",
        "request",
        "db",
        "navigator",
        "uploadTransaction",
        "request",
        "record",
        "db",
        "transaction",
        "transactionObjectStore",
        "record",
        "db",
        "transaction",
        "transactionObjectStore",
        "getAll",
        "getAll",
        "fetch",
        "getAll",
        "response",
        "response",
        "serverResponse",
        "serverResponse",
        "serverResponse",
        "db",
        "transaction",
        "transactionObjectStore",
        "alert",
        "err",
        "err",
        "uploadTransaction"
    ],
    "literals": [
        "'budget_tracker'",
        "'new_transaction'",
        "'new_transaction'",
        "'readwrite'",
        "'new_transaction'",
        "'new_transaction'",
        "'readwrite'",
        "'new_transaction'",
        "'/api/transaction'",
        "'POST'",
        "'application/json, text/plain, */*'",
        "'Content-Type'",
        "'application/json'",
        "'new_transaction'",
        "'readwrite'",
        "'new_transaction'",
        "'All deposits and withdrawals have been submitted!'",
        "'online'"
    ],
    "variables": [
        "db",
        "request",
        "db",
        "transaction",
        "transactionObjectStore",
        "transaction",
        "transactionObjectStore",
        "getAll",
        "transaction",
        "transactionObjectStore"
    ],
    "comments": [
        "create variable to hold db connection",
        "establish a connection to IndexDB database called 'budget_tracker' and set it to verion 1",
        "this event will emit if the database version changes (nonexistant to version 1, v1 to v2, etc.)",
        "save a reference to the database",
        "create an object store (table) called `new_transaction`, set it to have an auto incrementing primary key of sorts",
        "upon a successful",
        "when db is successfully created with its object store (from onupgradedneeded event above) or simply established a connection, save reference to db in global variable",
        "check if app is online, if yes run uploadTransaction() function to send all local db data to api",
        "log error here",
        "This function will be executed if we attempt to submit a new withdrawal/deposit transaction there's no internet connection",
        "open a new transaction with the database with read and write permissions",
        "access the object store for `new_transaction`",
        "add record to your store with add method",
        "open a transaction on your db",
        "access your object store",
        "get all records from store and set to a variable",
        "if there was data in indexedDb's store, let's send it to the api server",
        "open one more transaction",
        "access the new_transaction object store",
        "clear all items in your store",
        "event listener to check for network status change"
    ],
    "docstrings": [],
    "functions": [
        "saveRecord",
        "uploadTransaction"
    ],
    "classes": []
}