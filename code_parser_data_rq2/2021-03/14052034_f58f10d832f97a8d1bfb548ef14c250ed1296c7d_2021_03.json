{
    "identifiers": [
        "datalad",
        "tests",
        "utils",
        "assert_is_instance",
        "logging",
        "os",
        "os",
        "path",
        "op",
        "sys",
        "datalad",
        "utils",
        "chpwd",
        "Path",
        "datalad",
        "tests",
        "utils",
        "assert_cwd_unchanged",
        "assert_equal",
        "assert_false",
        "assert_in",
        "assert_not_in",
        "assert_raises",
        "eq_",
        "neq_",
        "ok_",
        "swallow_logs",
        "with_tempfile",
        "with_tree",
        "SkipTest",
        "datalad",
        "dataset",
        "gitrepo",
        "GitRepo",
        "datalad",
        "support",
        "exceptions",
        "CommandError",
        "PathKnownToRepositoryError",
        "with_tempfile",
        "mkdir",
        "path",
        "chpwd",
        "path",
        "assert_raises",
        "ValueError",
        "GitRepo",
        "path",
        "ok_",
        "op",
        "exists",
        "op",
        "join",
        "path",
        "assert_raises",
        "ValueError",
        "GitRepo",
        "path",
        "ok_",
        "op",
        "exists",
        "op",
        "join",
        "path",
        "assert_cwd_unchanged",
        "with_tempfile",
        "path",
        "GitRepo",
        "path",
        "init",
        "GitRepo",
        "path",
        "assert_is_instance",
        "gr",
        "GitRepo",
        "ok_",
        "op",
        "exists",
        "op",
        "join",
        "path",
        "assert_cwd_unchanged",
        "with_tempfile",
        "with_tempfile",
        "path",
        "path2",
        "GitRepo",
        "path",
        "assert_false",
        "op",
        "exists",
        "path",
        "os",
        "mkdir",
        "path",
        "ok_",
        "op",
        "exists",
        "path",
        "GitRepo",
        "path",
        "assert_false",
        "op",
        "exists",
        "op",
        "join",
        "path",
        "GitRepo",
        "path2",
        "init",
        "assert_is_instance",
        "gr",
        "GitRepo",
        "ok_",
        "op",
        "exists",
        "op",
        "join",
        "path2",
        "GitRepo",
        "path",
        "init",
        "assert_is_instance",
        "gr",
        "GitRepo",
        "ok_",
        "op",
        "exists",
        "op",
        "join",
        "path",
        "with_tempfile",
        "path",
        "GitRepo",
        "path",
        "init",
        "init_options",
        "ok_",
        "gr",
        "cfg",
        "getbool",
        "section",
        "option",
        "with_tree",
        "tree",
        "path",
        "GitRepo",
        "path",
        "init",
        "repo",
        "call_git",
        "op",
        "join",
        "assert_raises",
        "PathKnownToRepositoryError",
        "cme",
        "GitRepo",
        "op",
        "join",
        "path",
        "init",
        "assert_in",
        "cme",
        "exception",
        "repo",
        "call_git",
        "assert_raises",
        "PathKnownToRepositoryError",
        "cme",
        "GitRepo",
        "op",
        "join",
        "path",
        "init",
        "GitRepo",
        "op",
        "join",
        "path",
        "init",
        "sanity_checks",
        "with_tempfile",
        "with_tempfile",
        "path1",
        "path2",
        "GitRepo",
        "path1",
        "GitRepo",
        "path1",
        "ok_",
        "repo1",
        "repo2",
        "eq_",
        "repo1",
        "repo2",
        "GitRepo",
        "path2",
        "neq_",
        "repo1",
        "repo2",
        "ok_",
        "repo1",
        "repo2",
        "with_tempfile",
        "mkdir",
        "with_tempfile",
        "mkdir",
        "path1",
        "path2",
        "gc",
        "GitRepo",
        "path1",
        "init",
        "assert_is_instance",
        "repo1",
        "GitRepo",
        "gc",
        "collect",
        "assert_equal",
        "sys",
        "getrefcount",
        "repo1",
        "GitRepo",
        "path1",
        "init",
        "assert_is_instance",
        "repo2",
        "GitRepo",
        "ok_",
        "repo1",
        "repo2",
        "chpwd",
        "path1",
        "GitRepo",
        "op",
        "relpath",
        "path1",
        "start",
        "path2",
        "ok_",
        "repo1",
        "repo3",
        "ok_",
        "repo1",
        "repo3",
        "id",
        "repo1",
        "assert_equal",
        "len",
        "o",
        "o",
        "gc",
        "get_objects",
        "isinstance",
        "o",
        "GitRepo",
        "o",
        "pathobj",
        "Path",
        "path1",
        "gc",
        "collect",
        "repo1",
        "ok_",
        "repo2",
        "ok_",
        "repo2",
        "repo3",
        "ok_",
        "repo2",
        "repo3",
        "GitRepo",
        "path1",
        "assert_equal",
        "orig_id",
        "id",
        "repo1",
        "repo1",
        "repo2",
        "swallow_logs",
        "new_level",
        "cml",
        "repo3",
        "gc",
        "collect",
        "cml",
        "assert_logged",
        "msg",
        "path1",
        "level",
        "regex",
        "assert_not_in",
        "path1",
        "GitRepo",
        "_unique_instances",
        "keys",
        "assert_equal",
        "o",
        "o",
        "gc",
        "get_objects",
        "isinstance",
        "o",
        "GitRepo",
        "o",
        "pathobj",
        "Path",
        "path1",
        "GitRepo",
        "path1",
        "assert_equal",
        "len",
        "o",
        "o",
        "gc",
        "get_objects",
        "isinstance",
        "o",
        "GitRepo",
        "o",
        "pathobj",
        "Path",
        "path1",
        "with_tree",
        "path",
        "GitRepo",
        "path",
        "init",
        "gr",
        "call_git",
        "gr",
        "call_git",
        "gr",
        "call_git",
        "files",
        "ok_",
        "gr",
        "pathobj",
        "exists",
        "expect_fail",
        "check",
        "assert_in",
        "assert_not_in",
        "swallow_logs",
        "new_level",
        "logging",
        "DEBUG",
        "cml",
        "assert_raises",
        "CommandError",
        "gr",
        "call_git",
        "files",
        "expect_fail",
        "expect_fail",
        "check",
        "cml",
        "eq_",
        "gr",
        "call_git_items_",
        "read_only",
        "eq_",
        "gr",
        "call_git_items_",
        "sep",
        "read_only",
        "assert_raises",
        "AssertionError",
        "gr",
        "call_git_oneline",
        "read_only",
        "eq_",
        "gr",
        "call_git_oneline",
        "files",
        "read_only",
        "ok_",
        "gr",
        "call_git_success",
        "read_only",
        "swallow_logs",
        "new_level",
        "logging",
        "DEBUG",
        "cml",
        "assert_false",
        "gr",
        "call_git_success",
        "read_only",
        "assert_not_in",
        "cml",
        "with_tree",
        "tree",
        "path",
        "SkipTest",
        "GitRepo",
        "path",
        "init",
        "gr",
        "cfg",
        "gr",
        "call_git",
        "gr",
        "call_git",
        "gr",
        "cfg",
        "obtain",
        "eq_",
        "seconds_initial",
        "gr",
        "format_commit",
        "gr",
        "call_git",
        "gr",
        "call_git",
        "eq_",
        "seconds_initial",
        "gr",
        "format_commit",
        "gr",
        "call_git",
        "open",
        "op",
        "join",
        "path",
        "ofh",
        "ofh",
        "write",
        "gr",
        "call_git",
        "gr",
        "call_git",
        "eq_",
        "gr",
        "get_active_branch",
        "eq_",
        "seconds_initial",
        "gr",
        "format_commit"
    ],
    "literals": [
        "\"git://some/url\"",
        "\"git:\"",
        "\"file://some/relative/path\"",
        "\"file:\"",
        "\"GitRepo was not created.\"",
        "'.git'",
        "'.git'",
        "\"GitRepo was not created.\"",
        "'.git'",
        "\"GitRepo was not created.\"",
        "'.git'",
        "'--bare'",
        "\"core\"",
        "\"bare\"",
        "'subds'",
        "'file_name'",
        "''",
        "'add'",
        "'subds'",
        "'file_name'",
        "'subds'",
        "\"file_name\"",
        "'commit'",
        "'-m'",
        "\"added file\"",
        "'subds'",
        "'subds'",
        "\"Finalizer called on: GitRepo(%s)\"",
        "\"Level 1\"",
        "\"foo\"",
        "\"foo\"",
        "\"bar\"",
        "\"bar\"",
        "'add'",
        "\"foo\"",
        "\"bar\"",
        "'commit'",
        "'-m'",
        "\"foobar\"",
        "\"mv\"",
        "\"foo\"",
        "\"foo.txt\"",
        "'foo.txt'",
        "\"mv\"",
        "\"notthere\"",
        "\"dest\"",
        "\"fatal: bad source\"",
        "\"ls-files\"",
        "\"bar\"",
        "\"foo.txt\"",
        "\"ls-files\"",
        "\"-z\"",
        "\"\\0\"",
        "\"bar\"",
        "\"foo.txt\"",
        "\"\"",
        "\"ls-files\"",
        "\"ls-files\"",
        "\"bar\"",
        "\"bar\"",
        "\"rev-parse\"",
        "\"HEAD^{commit}\"",
        "\"rev-parse\"",
        "\"HEAD^{blob}\"",
        "\"expected blob type\"",
        "\"foo\"",
        "\"foo content\"",
        "\"bar\"",
        "\"bar content\"",
        "\"Core GitRepo class does not have format_commit() yet\"",
        "'datalad.fake-dates'",
        "'true'",
        "'add'",
        "\"foo\"",
        "'commit'",
        "'-m'",
        "'some'",
        "\"foo\"",
        "\"datalad.fake-dates-start\"",
        "'%at'",
        "'add'",
        "\"bar\"",
        "'commit'",
        "'-m'",
        "'some'",
        "\"bar\"",
        "'%at'",
        "'checkout'",
        "\"--orphan\"",
        "'other'",
        "\"baz\"",
        "\"w\"",
        "\"baz content\"",
        "'add'",
        "\"baz\"",
        "'commit'",
        "'-m'",
        "'some'",
        "\"baz\"",
        "\"other\"",
        "'%at'"
    ],
    "variables": [
        "gr",
        "repo",
        "repo",
        "gr",
        "gr",
        "gr",
        "repo",
        "repo1",
        "repo2",
        "repo2",
        "repo1",
        "repo2",
        "repo3",
        "orig_id",
        "repo1",
        "repo1",
        "gr",
        "gr",
        "seconds_initial"
    ],
    "comments": [
        "emacs: -*- mode: python; py-indent-offset: 4; tab-width: 4; indent-tabs-mode: nil -*-",
        "ex: set sts=4 ts=4 sw=4 noet:",
        "## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##",
        "",
        "See COPYING file distributed along with the datalad package for the",
        "copyright and license terms.",
        "",
        "## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##",
        "1. create=False and path doesn't exist:",
        "2. create=False, path exists, but no git repo:",
        "3. create=True, path doesn't exist:",
        "reenable from core GitRepo has a status() method",
        "assert_repo_status(path2, annex=False)",
        "4. create=True, path exists, but no git repo:",
        "reenable from core GitRepo has a status() method",
        "assert_repo_status(path, annex=False)",
        "passing an option, not explicitly defined in GitRepo class:",
        "Should fail even if we do not commit but only add to index:",
        "we provide a list of offenders",
        "and after we commit - the same story",
        "But it would succeed if we disable the checks",
        "Due to issue 4862, we currently still require gc.collect() under unclear",
        "circumstances to get rid of an exception traceback when creating in an",
        "existing directory. That traceback references the respective function",
        "frames which in turn reference the repo instance (they are methods).",
        "Doesn't happen on all systems, though. Eventually we need to figure that",
        "out.",
        "However, still test for the refcount after gc.collect() to ensure we don't",
        "introduce new circular references and make the issue worse!",
        "As long as we don't reintroduce any circular references or produce",
        "garbage during instantiation that isn't picked up immediately, `repo1`",
        "should be the only counted reference to this instance.",
        "Note, that sys.getrefcount reports its own argument and therefore one",
        "reference too much.",
        "instantiate again:",
        "the very same object:",
        "reference the same in a different way:",
        "it's the same object:",
        "and realpath attribute is the same, so they are still equal:",
        "Be sure we have exactly one object in memory:",
        "deleting one reference doesn't change anything - we still get the same",
        "thing:",
        "TODO: see first comment above",
        "re-requesting still delivers the same thing:",
        "killing all references should result in the instance being gc'd and",
        "re-request yields a new object:",
        "Killing last reference will lead to garbage collection which will call",
        "GitRepo's finalizer:",
        "TODO: see first comment above",
        "Flyweight is gone:",
        "gc doesn't know any instance anymore:",
        "new object is created on re-request:",
        "Note: The custom separator has trailing empty item, but this is an",
        "arbitrary command with unknown output it isn't safe to trim it.",
        "First commit is incremented by 1 second.",
        "The second commit by 2.",
        "If we checkout another branch, its time is still based on the latest",
        "timestamp in any local branch."
    ],
    "docstrings": [
        "\"\"\"Test implementation of class GitRepo\n\n\"\"\""
    ],
    "functions": [
        "test_GitRepo_invalid_path",
        "test_GitRepo_instance_from_existing",
        "test_GitRepo_instance_from_not_existing",
        "test_GitRepo_init_options",
        "test_init_fail_under_known_subdir",
        "test_GitRepo_equals",
        "test_GitRepo_flyweight",
        "test_gitrepo_call_git_methods",
        "test_fake_dates"
    ],
    "classes": []
}