{
    "identifiers": [
        "Express",
        "CORS",
        "http",
        "nanoid",
        "AddressInfo",
        "TownsServiceClient",
        "TownListResponse",
        "addTownRoutes",
        "towns",
        "town",
        "towns",
        "townInfo",
        "townInfo",
        "town",
        "town",
        "expect",
        "matching",
        "matching",
        "expect",
        "matching",
        "town",
        "expect",
        "matching",
        "describe",
        "http",
        "friendlyNameToUse",
        "isPublic",
        "friendlyNameToUse",
        "friendlyNameToUse",
        "isPublic",
        "nanoid",
        "apiClient",
        "isPublic",
        "isPublic",
        "ret",
        "ret",
        "beforeAll",
        "Express",
        "app",
        "CORS",
        "server",
        "http",
        "app",
        "addTownRoutes",
        "server",
        "app",
        "server",
        "server",
        "apiClient",
        "TownsServiceClient",
        "address",
        "afterAll",
        "server",
        "describe",
        "it",
        "createTownForTesting",
        "createTownForTesting",
        "firstTown",
        "expect",
        "firstTown",
        "secondTown",
        "it",
        "createTownForTesting",
        "fail",
        "err",
        "describe",
        "it",
        "createTownForTesting",
        "createTownForTesting",
        "createTownForTesting",
        "createTownForTesting",
        "apiClient",
        "expectTownListMatches",
        "towns",
        "pubTown1",
        "expectTownListMatches",
        "towns",
        "pubTown2",
        "expectTownListMatches",
        "towns",
        "privTown1",
        "expectTownListMatches",
        "towns",
        "privTown2",
        "it",
        "createTownForTesting",
        "createTownForTesting",
        "pubTown1",
        "createTownForTesting",
        "pubTown1",
        "createTownForTesting",
        "pubTown1",
        "apiClient",
        "expectTownListMatches",
        "towns",
        "pubTown1",
        "expectTownListMatches",
        "towns",
        "pubTown2",
        "expectTownListMatches",
        "towns",
        "privTown1",
        "expectTownListMatches",
        "towns",
        "privTown2",
        "describe",
        "it",
        "createTownForTesting",
        "apiClient",
        "nanoid",
        "fail",
        "e",
        "it",
        "createTownForTesting",
        "apiClient",
        "nanoid",
        "townUpdatePassword",
        "fail",
        "e",
        "it",
        "createTownForTesting",
        "apiClient",
        "townUpdatePassword",
        "apiClient",
        "nanoid",
        "fail",
        "e",
        "apiClient",
        "listedTowns",
        "r",
        "r",
        "coveyTownID",
        "fail",
        "describe",
        "it",
        "createTownForTesting",
        "expectTownListMatches",
        "apiClient",
        "pubTown1",
        "apiClient",
        "pubTown1",
        "pubTown1",
        "fail",
        "err",
        "expectTownListMatches",
        "apiClient",
        "pubTown1",
        "it",
        "createTownForTesting",
        "expectTownListMatches",
        "apiClient",
        "pubTown1",
        "apiClient",
        "pubTown1",
        "pubTown1",
        "pubTown1",
        "pubTown1",
        "expectTownListMatches",
        "apiClient",
        "pubTown1",
        "it",
        "createTownForTesting",
        "expectTownListMatches",
        "apiClient",
        "pubTown1",
        "apiClient",
        "pubTown1",
        "pubTown1",
        "pubTown1",
        "expectTownListMatches",
        "apiClient",
        "pubTown1",
        "describe",
        "it",
        "createTownForTesting",
        "apiClient",
        "nanoid",
        "nanoid",
        "fail",
        "err",
        "it",
        "createTownForTesting",
        "createTownForTesting",
        "apiClient",
        "nanoid",
        "pubTown1",
        "expect",
        "res",
        "expect",
        "res",
        "apiClient",
        "nanoid",
        "privTown1",
        "expect",
        "res2",
        "expect",
        "res2"
    ],
    "literals": [
        "'express'",
        "'cors'",
        "'http'",
        "'nanoid'",
        "'assert'",
        "'net'",
        "'./TownsServiceClient'",
        "'../router/towns'",
        "string",
        "string",
        "string",
        "'TownsServiceAPIREST'",
        "string",
        "${isPublic ? 'Public' : 'Private'}TestingTown=${nanoid()}",
        "'Public'",
        "'Private'",
        "http://127.0.0.1:${address.port}",
        "'CoveyTownCreateAPI'",
        "'Allows for multiple towns with the same friendlyName'",
        "'Prohibits a blank friendlyName'",
        "''",
        "'createTown should throw an error if friendly name is empty string'",
        "'CoveyTownListAPI'",
        "'Lists public towns, but not private towns'",
        "'Allows for multiple towns with the same friendlyName'",
        "'CoveyTownDeleteAPI'",
        "'Throws an error if the password is invalid'",
        "'Expected deleteTown to throw an error'",
        "'Throws an error if the townID is invalid'",
        "'Expected deleteTown to throw an error'",
        "'Deletes a town if given a valid password and town, no longer allowing it to be joined or listed'",
        "'Expected joinTown to throw an error'",
        "'Expected the deleted town to no longer be listed'",
        "'CoveyTownUpdateAPI'",
        "'Checks the password before updating any values'",
        "${pubTown1.townUpdatePassword}*",
        "'broken'",
        "'updateTown with an invalid password should throw an error'",
        "'Updates the friendlyName and visbility as requested'",
        "'newName'",
        "'newName'",
        "'Does not update the visibility if visibility is undefined'",
        "'newName2'",
        "'newName2'",
        "'CoveyMemberAPI'",
        "'Throws an error if the town does not exist'",
        "'Expected an error to be thrown by joinTown but none thrown'",
        "'Admits a user to a valid public or private town'"
    ],
    "variables": [
        "matching",
        "server",
        "apiClient",
        "friendlyName",
        "ret",
        "app",
        "address",
        "firstTown",
        "secondTown",
        "pubTown1",
        "privTown1",
        "pubTown2",
        "privTown2",
        "towns",
        "pubTown1",
        "privTown1",
        "pubTown2",
        "privTown2",
        "towns",
        "listedTowns",
        "pubTown1",
        "pubTown1",
        "pubTown1",
        "pubTown1",
        "privTown1",
        "res",
        "res2"
    ],
    "comments": [
        "OK",
        "Expected error",
        "Expected error",
        "Expected",
        "err expected",
        "TODO this should really check to make sure it's the *right* error, but we didn't specify",
        "the format of the exception :(",
        "Make sure name or vis didn't change",
        "OK, expected an error",
        "TODO this should really check to make sure it's the *right* error, but we didn't specify",
        "the format of the exception :("
    ],
    "docstrings": [],
    "functions": [
        "expectTownListMatches",
        "createTownForTesting"
    ],
    "classes": []
}