{
    "identifiers": [
        "factory",
        "exports",
        "factory",
        "exports",
        "require",
        "require",
        "require",
        "define",
        "define",
        "define",
        "factory",
        "factory",
        "exports",
        "React",
        "redux",
        "reactDom",
        "React",
        "React",
        "React",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "fn",
        "fn",
        "createCommonjsModule",
        "exports",
        "exports",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "hasSymbol",
        "REACT_FRAGMENT_TYPE",
        "REACT_CONCURRENT_MODE_TYPE",
        "REACT_PROFILER_TYPE",
        "REACT_STRICT_MODE_TYPE",
        "REACT_SUSPENSE_TYPE",
        "REACT_SUSPENSE_LIST_TYPE",
        "REACT_LAZY_TYPE",
        "REACT_MEMO_TYPE",
        "REACT_PROVIDER_TYPE",
        "REACT_CONTEXT_TYPE",
        "REACT_FORWARD_REF_TYPE",
        "REACT_FUNDAMENTAL_TYPE",
        "REACT_RESPONDER_TYPE",
        "format",
        "arguments",
        "_len",
        "_len",
        "_key",
        "_len",
        "_key",
        "args",
        "_key",
        "arguments",
        "_key",
        "format",
        "args",
        "argIndex",
        "message",
        "message",
        "x",
        "lowPriorityWarning",
        "condition",
        "format",
        "format",
        "condition",
        "arguments",
        "_len2",
        "_len2",
        "_key2",
        "_len2",
        "_key2",
        "args",
        "_key2",
        "arguments",
        "_key2",
        "printWarning",
        "format",
        "args",
        "$$typeof",
        "REACT_ELEMENT_TYPE",
        "REACT_ASYNC_MODE_TYPE",
        "REACT_CONCURRENT_MODE_TYPE",
        "REACT_FRAGMENT_TYPE",
        "REACT_PROFILER_TYPE",
        "REACT_STRICT_MODE_TYPE",
        "REACT_SUSPENSE_TYPE",
        "$$typeofType",
        "REACT_CONTEXT_TYPE",
        "REACT_FORWARD_REF_TYPE",
        "REACT_PROVIDER_TYPE",
        "$$typeofType",
        "$$typeof",
        "REACT_LAZY_TYPE",
        "REACT_MEMO_TYPE",
        "REACT_PORTAL_TYPE",
        "$$typeof",
        "hasWarnedAboutDeprecatedIsAsyncMode",
        "hasWarnedAboutDeprecatedIsAsyncMode",
        "lowPriorityWarning$1",
        "isConcurrentMode",
        "typeOf",
        "REACT_ASYNC_MODE_TYPE",
        "typeOf",
        "REACT_CONCURRENT_MODE_TYPE",
        "typeOf",
        "REACT_CONTEXT_TYPE",
        "typeOf",
        "REACT_PROVIDER_TYPE",
        "REACT_ELEMENT_TYPE",
        "typeOf",
        "REACT_FORWARD_REF_TYPE",
        "typeOf",
        "REACT_FRAGMENT_TYPE",
        "typeOf",
        "REACT_LAZY_TYPE",
        "typeOf",
        "REACT_MEMO_TYPE",
        "typeOf",
        "REACT_PORTAL_TYPE",
        "typeOf",
        "REACT_PROFILER_TYPE",
        "typeOf",
        "REACT_STRICT_MODE_TYPE",
        "typeOf",
        "REACT_SUSPENSE_TYPE",
        "exports",
        "typeOf",
        "exports",
        "AsyncMode",
        "exports",
        "ConcurrentMode",
        "exports",
        "ContextConsumer",
        "exports",
        "ContextProvider",
        "exports",
        "Element",
        "exports",
        "ForwardRef",
        "exports",
        "Fragment",
        "exports",
        "Lazy",
        "exports",
        "Memo",
        "exports",
        "Portal",
        "exports",
        "Profiler",
        "exports",
        "StrictMode",
        "exports",
        "Suspense",
        "exports",
        "isValidElementType",
        "exports",
        "isAsyncMode",
        "exports",
        "isConcurrentMode",
        "exports",
        "isContextConsumer",
        "exports",
        "isContextProvider",
        "exports",
        "isElement",
        "exports",
        "isForwardRef",
        "exports",
        "isFragment",
        "exports",
        "isLazy",
        "exports",
        "isMemo",
        "exports",
        "isPortal",
        "exports",
        "isProfiler",
        "exports",
        "isStrictMode",
        "exports",
        "isSuspense",
        "unwrapExports",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "reactIs_development",
        "createCommonjsModule",
        "reactIs_development",
        "reactIs",
        "reactIs",
        "val",
        "val",
        "val",
        "val",
        "test1",
        "test1",
        "i",
        "i",
        "test2",
        "i",
        "i",
        "test2",
        "n",
        "test2",
        "n",
        "order2",
        "letter",
        "test3",
        "letter",
        "letter",
        "test3",
        "err",
        "shouldUseNative",
        "target",
        "source",
        "toObject",
        "target",
        "s",
        "arguments",
        "s",
        "arguments",
        "s",
        "key",
        "hasOwnProperty",
        "key",
        "to",
        "key",
        "key",
        "getOwnPropertySymbols",
        "symbols",
        "getOwnPropertySymbols",
        "i",
        "symbols",
        "i",
        "propIsEnumerable",
        "symbols",
        "i",
        "to",
        "symbols",
        "i",
        "symbols",
        "i",
        "to",
        "printWarning",
        "text",
        "text",
        "message",
        "message",
        "x",
        "typeSpecs",
        "values",
        "location",
        "componentName",
        "getStack",
        "typeSpecName",
        "typeSpecs",
        "has",
        "typeSpecs",
        "typeSpecName",
        "typeSpecs",
        "typeSpecName",
        "componentName",
        "location",
        "typeSpecName",
        "typeSpecs",
        "typeSpecName",
        "err",
        "err",
        "error",
        "typeSpecs",
        "typeSpecName",
        "values",
        "typeSpecName",
        "componentName",
        "location",
        "ReactPropTypesSecret$1",
        "ex",
        "error",
        "ex",
        "error",
        "error",
        "printWarning",
        "componentName",
        "location",
        "typeSpecName",
        "error",
        "error",
        "error",
        "loggedTypeFailures",
        "loggedTypeFailures",
        "error",
        "getStack",
        "getStack",
        "printWarning",
        "location",
        "error",
        "stack",
        "stack",
        "checkPropTypes",
        "loggedTypeFailures",
        "printWarning$1",
        "text",
        "text",
        "message",
        "message",
        "x",
        "isValidElement",
        "throwOnDirectAccess",
        "maybeIterable",
        "maybeIterable",
        "ITERATOR_SYMBOL",
        "maybeIterable",
        "ITERATOR_SYMBOL",
        "maybeIterable",
        "FAUX_ITERATOR_SYMBOL",
        "iteratorFn",
        "iteratorFn",
        "createPrimitiveTypeChecker",
        "createPrimitiveTypeChecker",
        "createPrimitiveTypeChecker",
        "createPrimitiveTypeChecker",
        "createPrimitiveTypeChecker",
        "createPrimitiveTypeChecker",
        "createPrimitiveTypeChecker",
        "createAnyTypeChecker",
        "createArrayOfTypeChecker",
        "createElementTypeChecker",
        "createElementTypeTypeChecker",
        "createInstanceTypeChecker",
        "createNodeChecker",
        "createObjectOfTypeChecker",
        "createEnumTypeChecker",
        "createUnionTypeChecker",
        "createShapeTypeChecker",
        "createStrictShapeTypeChecker",
        "x",
        "y",
        "x",
        "y",
        "x",
        "x",
        "y",
        "x",
        "x",
        "y",
        "y",
        "message",
        "message",
        "PropTypeError",
        "validate",
        "isRequired",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "secret",
        "componentName",
        "componentName",
        "ANONYMOUS",
        "propFullName",
        "propFullName",
        "propName",
        "secret",
        "ReactPropTypesSecret_1",
        "throwOnDirectAccess",
        "err",
        "err",
        "componentName",
        "propName",
        "manualPropTypeCallCache",
        "cacheKey",
        "manualPropTypeWarningCount",
        "printWarning$1",
        "propFullName",
        "componentName",
        "manualPropTypeCallCache",
        "cacheKey",
        "manualPropTypeWarningCount",
        "props",
        "propName",
        "isRequired",
        "props",
        "propName",
        "PropTypeError",
        "location",
        "propFullName",
        "componentName",
        "PropTypeError",
        "location",
        "propFullName",
        "componentName",
        "validate",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "checkType",
        "chainedCheckType",
        "checkType",
        "chainedCheckType",
        "expectedType",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "secret",
        "props",
        "propName",
        "getPropType",
        "propValue",
        "propType",
        "expectedType",
        "getPreciseType",
        "propValue",
        "PropTypeError",
        "location",
        "propFullName",
        "preciseType",
        "componentName",
        "expectedType",
        "createChainableTypeChecker",
        "validate",
        "createChainableTypeChecker",
        "emptyFunctionThatReturnsNull",
        "typeChecker",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "typeChecker",
        "PropTypeError",
        "propFullName",
        "componentName",
        "props",
        "propName",
        "propValue",
        "getPropType",
        "propValue",
        "PropTypeError",
        "location",
        "propFullName",
        "propType",
        "componentName",
        "i",
        "propValue",
        "i",
        "typeChecker",
        "propValue",
        "i",
        "componentName",
        "location",
        "propFullName",
        "i",
        "ReactPropTypesSecret_1",
        "error",
        "error",
        "createChainableTypeChecker",
        "validate",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "props",
        "propName",
        "isValidElement",
        "propValue",
        "getPropType",
        "propValue",
        "PropTypeError",
        "location",
        "propFullName",
        "propType",
        "componentName",
        "createChainableTypeChecker",
        "validate",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "props",
        "propName",
        "reactIs",
        "propValue",
        "getPropType",
        "propValue",
        "PropTypeError",
        "location",
        "propFullName",
        "propType",
        "componentName",
        "createChainableTypeChecker",
        "validate",
        "expectedClass",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "props",
        "propName",
        "expectedClass",
        "expectedClass",
        "ANONYMOUS",
        "getClassName",
        "props",
        "propName",
        "PropTypeError",
        "location",
        "propFullName",
        "actualClassName",
        "componentName",
        "expectedClassName",
        "createChainableTypeChecker",
        "validate",
        "expectedValues",
        "expectedValues",
        "arguments",
        "printWarning$1",
        "arguments",
        "printWarning$1",
        "emptyFunctionThatReturnsNull",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "props",
        "propName",
        "i",
        "expectedValues",
        "i",
        "propValue",
        "expectedValues",
        "i",
        "expectedValues",
        "replacer",
        "key",
        "value",
        "getPreciseType",
        "value",
        "value",
        "value",
        "PropTypeError",
        "location",
        "propFullName",
        "propValue",
        "componentName",
        "valuesString",
        "createChainableTypeChecker",
        "validate",
        "typeChecker",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "typeChecker",
        "PropTypeError",
        "propFullName",
        "componentName",
        "props",
        "propName",
        "getPropType",
        "propValue",
        "propType",
        "PropTypeError",
        "location",
        "propFullName",
        "propType",
        "componentName",
        "key",
        "propValue",
        "has$1",
        "propValue",
        "key",
        "typeChecker",
        "propValue",
        "key",
        "componentName",
        "location",
        "propFullName",
        "key",
        "ReactPropTypesSecret_1",
        "error",
        "error",
        "createChainableTypeChecker",
        "validate",
        "arrayOfTypeCheckers",
        "arrayOfTypeCheckers",
        "printWarning$1",
        "emptyFunctionThatReturnsNull",
        "i",
        "arrayOfTypeCheckers",
        "i",
        "arrayOfTypeCheckers",
        "i",
        "checker",
        "printWarning$1",
        "getPostfixForTypeWarning",
        "checker",
        "i",
        "emptyFunctionThatReturnsNull",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "i",
        "arrayOfTypeCheckers",
        "i",
        "arrayOfTypeCheckers",
        "i",
        "checker",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "ReactPropTypesSecret_1",
        "PropTypeError",
        "location",
        "propFullName",
        "componentName",
        "createChainableTypeChecker",
        "validate",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "isNode",
        "props",
        "propName",
        "PropTypeError",
        "location",
        "propFullName",
        "componentName",
        "createChainableTypeChecker",
        "validate",
        "shapeTypes",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "props",
        "propName",
        "getPropType",
        "propValue",
        "propType",
        "PropTypeError",
        "location",
        "propFullName",
        "propType",
        "componentName",
        "key",
        "shapeTypes",
        "shapeTypes",
        "key",
        "checker",
        "checker",
        "propValue",
        "key",
        "componentName",
        "location",
        "propFullName",
        "key",
        "ReactPropTypesSecret_1",
        "error",
        "error",
        "createChainableTypeChecker",
        "validate",
        "shapeTypes",
        "props",
        "propName",
        "componentName",
        "location",
        "propFullName",
        "props",
        "propName",
        "getPropType",
        "propValue",
        "propType",
        "PropTypeError",
        "location",
        "propFullName",
        "propType",
        "componentName",
        "objectAssign",
        "props",
        "propName",
        "shapeTypes",
        "key",
        "allKeys",
        "shapeTypes",
        "key",
        "checker",
        "PropTypeError",
        "location",
        "propFullName",
        "key",
        "componentName",
        "props",
        "propName",
        "shapeTypes",
        "checker",
        "propValue",
        "key",
        "componentName",
        "location",
        "propFullName",
        "key",
        "ReactPropTypesSecret_1",
        "error",
        "error",
        "createChainableTypeChecker",
        "validate",
        "propValue",
        "propValue",
        "propValue",
        "propValue",
        "propValue",
        "isNode",
        "propValue",
        "isValidElement",
        "propValue",
        "getIteratorFn",
        "propValue",
        "iteratorFn",
        "iteratorFn",
        "propValue",
        "iteratorFn",
        "propValue",
        "step",
        "iterator",
        "isNode",
        "step",
        "step",
        "iterator",
        "step",
        "entry",
        "isNode",
        "entry",
        "propType",
        "propValue",
        "propType",
        "propValue",
        "propValue",
        "propValue",
        "propValue",
        "propValue",
        "propValue",
        "propValue",
        "isSymbol",
        "propType",
        "propValue",
        "propType",
        "propValue",
        "propValue",
        "propValue",
        "propValue",
        "getPropType",
        "propValue",
        "propType",
        "propValue",
        "propValue",
        "propType",
        "value",
        "getPreciseType",
        "value",
        "propValue",
        "propValue",
        "propValue",
        "ANONYMOUS",
        "propValue",
        "ReactPropTypes",
        "checkPropTypes_1",
        "ReactPropTypes",
        "checkPropTypes_1",
        "ReactPropTypes",
        "ReactPropTypes",
        "ReactPropTypes",
        "createCommonjsModule",
        "factoryWithTypeCheckers",
        "ReactIs",
        "throwOnDirectAccess",
        "React__default",
        "ReactReduxContext",
        "callback",
        "callback",
        "setBatch",
        "newBatch",
        "batch",
        "newBatch",
        "getBatch",
        "batch",
        "notify",
        "getBatch",
        "clear",
        "first",
        "last",
        "notify",
        "batch",
        "listener",
        "listener",
        "listener",
        "listener",
        "get",
        "listener",
        "listeners",
        "listener",
        "listener",
        "listener",
        "listeners",
        "subscribe",
        "callback",
        "last",
        "callback",
        "last",
        "listener",
        "listener",
        "listener",
        "first",
        "listener",
        "unsubscribe",
        "isSubscribed",
        "first",
        "isSubscribed",
        "listener",
        "listener",
        "listener",
        "last",
        "listener",
        "listener",
        "listener",
        "listener",
        "first",
        "listener",
        "store",
        "parentSub",
        "store",
        "parentSub",
        "nullListeners",
        "Subscription",
        "_proto",
        "addNestedSub",
        "listener",
        "listener",
        "_proto",
        "notifyNestedSubs",
        "_proto",
        "handleChangeWrapper",
        "_proto",
        "isSubscribed",
        "_proto",
        "trySubscribe",
        "createListenerCollection",
        "_proto",
        "tryUnsubscribe",
        "nullListeners",
        "Subscription",
        "_ref",
        "_ref",
        "_ref",
        "_ref",
        "React",
        "Subscription",
        "store",
        "subscription",
        "subscription",
        "store",
        "subscription",
        "store",
        "React",
        "store",
        "store",
        "React",
        "contextValue",
        "subscription",
        "previousState",
        "store",
        "subscription",
        "subscription",
        "subscription",
        "contextValue",
        "previousState",
        "context",
        "ReactReduxContext",
        "React__default",
        "Context",
        "contextValue",
        "children",
        "Provider",
        "propTypes",
        "propTypes",
        "propTypes",
        "propTypes",
        "propTypes",
        "propTypes",
        "_extends",
        "target",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "key",
        "source",
        "source",
        "key",
        "target",
        "key",
        "source",
        "key",
        "target",
        "_extends",
        "arguments",
        "source",
        "excluded",
        "source",
        "source",
        "i",
        "i",
        "sourceKeys",
        "i",
        "key",
        "sourceKeys",
        "i",
        "excluded",
        "key",
        "target",
        "key",
        "source",
        "key",
        "target",
        "TYPE_STATICS",
        "reactIs",
        "FORWARD_REF_STATICS",
        "component",
        "reactIs",
        "component",
        "MEMO_STATICS",
        "TYPE_STATICS",
        "component",
        "REACT_STATICS",
        "targetComponent",
        "sourceComponent",
        "blacklist",
        "sourceComponent",
        "objectPrototype",
        "getPrototypeOf",
        "sourceComponent",
        "inheritedComponent",
        "inheritedComponent",
        "objectPrototype",
        "hoistNonReactStatics",
        "targetComponent",
        "inheritedComponent",
        "blacklist",
        "getOwnPropertyNames",
        "sourceComponent",
        "getOwnPropertySymbols$1",
        "keys",
        "keys",
        "getOwnPropertySymbols$1",
        "sourceComponent",
        "getStatics",
        "targetComponent",
        "getStatics",
        "sourceComponent",
        "i",
        "keys",
        "i",
        "keys",
        "i",
        "KNOWN_STATICS",
        "key",
        "blacklist",
        "blacklist",
        "key",
        "sourceStatics",
        "sourceStatics",
        "key",
        "targetStatics",
        "targetStatics",
        "key",
        "getOwnPropertyDescriptor",
        "sourceComponent",
        "key",
        "defineProperty",
        "targetComponent",
        "key",
        "descriptor",
        "e",
        "targetComponent",
        "targetComponent",
        "React",
        "React",
        "stringifyComponent",
        "Comp",
        "Comp",
        "err",
        "Comp",
        "state",
        "action",
        "state",
        "action",
        "updateCount",
        "effectFunc",
        "effectArgs",
        "dependencies",
        "useIsomorphicLayoutEffect",
        "effectFunc",
        "effectArgs",
        "dependencies",
        "lastWrapperProps",
        "lastChildProps",
        "renderIsScheduled",
        "wrapperProps",
        "actualChildProps",
        "childPropsFromStoreUpdate",
        "notifyNestedSubs",
        "lastWrapperProps",
        "wrapperProps",
        "lastChildProps",
        "actualChildProps",
        "renderIsScheduled",
        "childPropsFromStoreUpdate",
        "childPropsFromStoreUpdate",
        "notifyNestedSubs",
        "shouldHandleStateChanges",
        "store",
        "subscription",
        "childPropsSelector",
        "lastWrapperProps",
        "lastChildProps",
        "renderIsScheduled",
        "childPropsFromStoreUpdate",
        "notifyNestedSubs",
        "forceComponentUpdateDispatch",
        "shouldHandleStateChanges",
        "checkForUpdates",
        "didUnsubscribe",
        "store",
        "newChildProps",
        "childPropsSelector",
        "latestStoreState",
        "lastWrapperProps",
        "e",
        "error",
        "e",
        "lastThrownError",
        "e",
        "error",
        "lastThrownError",
        "newChildProps",
        "lastChildProps",
        "renderIsScheduled",
        "notifyNestedSubs",
        "lastChildProps",
        "newChildProps",
        "childPropsFromStoreUpdate",
        "newChildProps",
        "renderIsScheduled",
        "forceComponentUpdateDispatch",
        "error",
        "subscription",
        "checkForUpdates",
        "subscription",
        "checkForUpdates",
        "unsubscribeWrapper",
        "didUnsubscribe",
        "subscription",
        "subscription",
        "lastThrownError",
        "lastThrownError",
        "unsubscribeWrapper",
        "initStateUpdates",
        "selectorFactory",
        "_ref",
        "_ref",
        "_ref",
        "_ref2",
        "_ref2$getDisplayName",
        "name",
        "name",
        "_ref2$getDisplayName",
        "_ref2",
        "_ref2$methodName",
        "_ref2$methodName",
        "_ref2",
        "_ref2$renderCountProp",
        "_ref2$renderCountProp",
        "_ref2",
        "_ref2$shouldHandleSta",
        "_ref2$shouldHandleSta",
        "_ref2",
        "_ref2$storeKey",
        "_ref2$storeKey",
        "_ref2",
        "_ref2$withRef",
        "_ref2$withRef",
        "_ref2",
        "_ref2$forwardRef",
        "_ref2$forwardRef",
        "_ref2",
        "_ref2$context",
        "ReactReduxContext",
        "_ref2$context",
        "_objectWithoutPropertiesLoose",
        "_ref2",
        "renderCountProp",
        "withRef",
        "storeKey",
        "customStoreWarningMessage",
        "wrapWithConnect",
        "WrappedComponent",
        "reactIs_1",
        "WrappedComponent",
        "methodName",
        "stringifyComponent",
        "WrappedComponent",
        "WrappedComponent",
        "WrappedComponent",
        "getDisplayName",
        "wrappedComponentName",
        "_extends",
        "connectOptions",
        "getDisplayName",
        "methodName",
        "renderCountProp",
        "shouldHandleStateChanges",
        "storeKey",
        "displayName",
        "wrappedComponentName",
        "WrappedComponent",
        "connectOptions",
        "store",
        "selectorFactory",
        "store",
        "selectorFactoryOptions",
        "pure",
        "React",
        "callback",
        "callback",
        "props",
        "React",
        "props",
        "_objectWithoutPropertiesLoose",
        "props",
        "props",
        "reactReduxForwardedRef",
        "wrapperProps",
        "props",
        "_useMemo",
        "_useMemo",
        "_useMemo",
        "React",
        "propsContext",
        "propsContext",
        "reactIs_2",
        "React__default",
        "propsContext",
        "propsContext",
        "Context",
        "propsContext",
        "Context",
        "React",
        "ContextToUse",
        "props",
        "props",
        "props",
        "contextValue",
        "contextValue",
        "didStoreComeFromProps",
        "didStoreComeFromContext",
        "displayName",
        "displayName",
        "didStoreComeFromProps",
        "props",
        "contextValue",
        "React",
        "createChildSelector",
        "store",
        "store",
        "React",
        "shouldHandleStateChanges",
        "NO_SUBSCRIPTION_ARRAY",
        "Subscription",
        "store",
        "didStoreComeFromProps",
        "contextValue",
        "subscription",
        "subscription",
        "subscription",
        "notifyNestedSubs",
        "store",
        "didStoreComeFromProps",
        "contextValue",
        "_useMemo2",
        "_useMemo2",
        "React",
        "didStoreComeFromProps",
        "contextValue",
        "_extends",
        "contextValue",
        "subscription",
        "didStoreComeFromProps",
        "contextValue",
        "subscription",
        "React",
        "storeStateUpdatesReducer",
        "EMPTY_ARRAY",
        "initStateUpdates",
        "_useReducer",
        "_useReducer$",
        "_useReducer",
        "previousStateUpdateResult",
        "previousStateUpdateResult",
        "previousStateUpdateResult",
        "React",
        "React",
        "wrapperProps",
        "React",
        "React",
        "usePureOnlyMemo",
        "childPropsFromStoreUpdate",
        "wrapperProps",
        "lastWrapperProps",
        "childPropsFromStoreUpdate",
        "childPropsSelector",
        "store",
        "wrapperProps",
        "store",
        "previousStateUpdateResult",
        "wrapperProps",
        "useIsomorphicLayoutEffectWithArgs",
        "captureWrapperProps",
        "lastWrapperProps",
        "lastChildProps",
        "renderIsScheduled",
        "wrapperProps",
        "actualChildProps",
        "childPropsFromStoreUpdate",
        "notifyNestedSubs",
        "useIsomorphicLayoutEffectWithArgs",
        "subscribeUpdates",
        "shouldHandleStateChanges",
        "store",
        "subscription",
        "childPropsSelector",
        "lastWrapperProps",
        "lastChildProps",
        "renderIsScheduled",
        "childPropsFromStoreUpdate",
        "notifyNestedSubs",
        "forceComponentUpdateDispatch",
        "store",
        "subscription",
        "childPropsSelector",
        "React",
        "React__default",
        "WrappedComponent",
        "_extends",
        "actualChildProps",
        "reactReduxForwardedRef",
        "reactReduxForwardedRef",
        "WrappedComponent",
        "actualChildProps",
        "React",
        "shouldHandleStateChanges",
        "React__default",
        "ContextToUse",
        "overriddenContextValue",
        "renderedWrappedComponent",
        "renderedWrappedComponent",
        "ContextToUse",
        "renderedWrappedComponent",
        "overriddenContextValue",
        "renderedChild",
        "pure",
        "React__default",
        "ConnectFunction",
        "ConnectFunction",
        "Connect",
        "WrappedComponent",
        "Connect",
        "displayName",
        "forwardRef",
        "React__default",
        "forwardConnectRef",
        "props",
        "React__default",
        "Connect",
        "_extends",
        "props",
        "forwarded",
        "displayName",
        "forwarded",
        "WrappedComponent",
        "hoistNonReactStatics_cjs",
        "forwarded",
        "WrappedComponent",
        "hoistNonReactStatics_cjs",
        "Connect",
        "WrappedComponent",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "x",
        "x",
        "y",
        "y",
        "objA",
        "objB",
        "objA",
        "objB",
        "objA",
        "objA",
        "objB",
        "objB",
        "objA",
        "objB",
        "keysA",
        "keysB",
        "i",
        "keysA",
        "i",
        "objB",
        "keysA",
        "i",
        "objA",
        "keysA",
        "i",
        "objB",
        "keysA",
        "i",
        "obj",
        "obj",
        "obj",
        "obj",
        "proto",
        "baseProto",
        "baseProto",
        "baseProto",
        "proto",
        "baseProto",
        "message",
        "message",
        "message",
        "e",
        "value",
        "displayName",
        "methodName",
        "isPlainObject",
        "value",
        "warning",
        "methodName",
        "displayName",
        "value",
        "getConstant",
        "initConstantSelector",
        "dispatch",
        "options",
        "getConstant",
        "dispatch",
        "options",
        "constant",
        "constantSelector",
        "constantSelector",
        "mapToProps",
        "mapToProps",
        "mapToProps",
        "mapToProps",
        "mapToProps",
        "mapToProps",
        "methodName",
        "initProxySelector",
        "dispatch",
        "_ref",
        "_ref",
        "mapToPropsProxy",
        "stateOrDispatch",
        "ownProps",
        "proxy",
        "proxy",
        "stateOrDispatch",
        "ownProps",
        "proxy",
        "stateOrDispatch",
        "proxy",
        "proxy",
        "detectFactoryAndVerify",
        "stateOrDispatch",
        "ownProps",
        "proxy",
        "mapToProps",
        "proxy",
        "getDependsOnOwnProps",
        "mapToProps",
        "proxy",
        "stateOrDispatch",
        "ownProps",
        "props",
        "proxy",
        "props",
        "proxy",
        "getDependsOnOwnProps",
        "props",
        "props",
        "proxy",
        "stateOrDispatch",
        "ownProps",
        "verifyPlainObject",
        "props",
        "displayName",
        "methodName",
        "props",
        "proxy",
        "mapDispatchToProps",
        "mapDispatchToProps",
        "wrapMapToPropsFunc",
        "mapDispatchToProps",
        "mapDispatchToProps",
        "mapDispatchToProps",
        "wrapMapToPropsConstant",
        "dispatch",
        "dispatch",
        "mapDispatchToProps",
        "mapDispatchToProps",
        "mapDispatchToProps",
        "wrapMapToPropsConstant",
        "dispatch",
        "redux",
        "mapDispatchToProps",
        "dispatch",
        "whenMapDispatchToPropsIsFunction",
        "whenMapDispatchToPropsIsMissing",
        "whenMapDispatchToPropsIsObject",
        "mapStateToProps",
        "mapStateToProps",
        "wrapMapToPropsFunc",
        "mapStateToProps",
        "mapStateToProps",
        "mapStateToProps",
        "wrapMapToPropsConstant",
        "whenMapStateToPropsIsFunction",
        "whenMapStateToPropsIsMissing",
        "stateProps",
        "dispatchProps",
        "ownProps",
        "_extends",
        "ownProps",
        "stateProps",
        "dispatchProps",
        "mergeProps",
        "initMergePropsProxy",
        "dispatch",
        "_ref",
        "_ref",
        "_ref",
        "_ref",
        "mergePropsProxy",
        "stateProps",
        "dispatchProps",
        "ownProps",
        "mergeProps",
        "stateProps",
        "dispatchProps",
        "ownProps",
        "hasRunOnce",
        "pure",
        "areMergedPropsEqual",
        "nextMergedProps",
        "mergedProps",
        "mergedProps",
        "nextMergedProps",
        "hasRunOnce",
        "mergedProps",
        "nextMergedProps",
        "verifyPlainObject",
        "mergedProps",
        "displayName",
        "mergedProps",
        "mergeProps",
        "mergeProps",
        "wrapMergePropsFunc",
        "mergeProps",
        "mergeProps",
        "mergeProps",
        "defaultMergeProps",
        "whenMergePropsIsFunction",
        "whenMergePropsIsOmitted",
        "selector",
        "methodName",
        "displayName",
        "selector",
        "methodName",
        "displayName",
        "methodName",
        "methodName",
        "selector",
        "warning",
        "methodName",
        "displayName",
        "mapStateToProps",
        "mapDispatchToProps",
        "mergeProps",
        "displayName",
        "verify",
        "mapStateToProps",
        "displayName",
        "verify",
        "mapDispatchToProps",
        "displayName",
        "verify",
        "mergeProps",
        "displayName",
        "mapStateToProps",
        "mapDispatchToProps",
        "mergeProps",
        "dispatch",
        "impureFinalPropsSelector",
        "state",
        "ownProps",
        "mergeProps",
        "mapStateToProps",
        "state",
        "ownProps",
        "mapDispatchToProps",
        "dispatch",
        "ownProps",
        "ownProps",
        "mapStateToProps",
        "mapDispatchToProps",
        "mergeProps",
        "dispatch",
        "_ref",
        "_ref",
        "_ref",
        "_ref",
        "firstState",
        "firstOwnProps",
        "state",
        "firstState",
        "ownProps",
        "firstOwnProps",
        "stateProps",
        "mapStateToProps",
        "state",
        "ownProps",
        "dispatchProps",
        "mapDispatchToProps",
        "dispatch",
        "ownProps",
        "mergedProps",
        "mergeProps",
        "stateProps",
        "dispatchProps",
        "ownProps",
        "hasRunAtLeastOnce",
        "mergedProps",
        "stateProps",
        "mapStateToProps",
        "state",
        "ownProps",
        "mapDispatchToProps",
        "dispatchProps",
        "mapDispatchToProps",
        "dispatch",
        "ownProps",
        "mergedProps",
        "mergeProps",
        "stateProps",
        "dispatchProps",
        "ownProps",
        "mergedProps",
        "mapStateToProps",
        "stateProps",
        "mapStateToProps",
        "state",
        "ownProps",
        "mapDispatchToProps",
        "dispatchProps",
        "mapDispatchToProps",
        "dispatch",
        "ownProps",
        "mergedProps",
        "mergeProps",
        "stateProps",
        "dispatchProps",
        "ownProps",
        "mergedProps",
        "mapStateToProps",
        "state",
        "ownProps",
        "areStatePropsEqual",
        "nextStateProps",
        "stateProps",
        "stateProps",
        "nextStateProps",
        "statePropsChanged",
        "mergedProps",
        "mergeProps",
        "stateProps",
        "dispatchProps",
        "ownProps",
        "mergedProps",
        "nextState",
        "nextOwnProps",
        "areOwnPropsEqual",
        "nextOwnProps",
        "ownProps",
        "areStatesEqual",
        "nextState",
        "state",
        "state",
        "nextState",
        "ownProps",
        "nextOwnProps",
        "propsChanged",
        "stateChanged",
        "handleNewPropsAndNewState",
        "propsChanged",
        "handleNewProps",
        "stateChanged",
        "handleNewState",
        "mergedProps",
        "pureFinalPropsSelector",
        "nextState",
        "nextOwnProps",
        "hasRunAtLeastOnce",
        "handleSubsequentCalls",
        "nextState",
        "nextOwnProps",
        "handleFirstCall",
        "nextState",
        "nextOwnProps",
        "dispatch",
        "_ref2",
        "_ref2",
        "_ref2",
        "_ref2",
        "_objectWithoutPropertiesLoose",
        "_ref2",
        "initMapStateToProps",
        "dispatch",
        "options",
        "initMapDispatchToProps",
        "dispatch",
        "options",
        "initMergeProps",
        "dispatch",
        "options",
        "verifySubselectors",
        "mapStateToProps",
        "mapDispatchToProps",
        "mergeProps",
        "options",
        "options",
        "pureFinalPropsSelectorFactory",
        "impureFinalPropsSelectorFactory",
        "selectorFactory",
        "mapStateToProps",
        "mapDispatchToProps",
        "mergeProps",
        "dispatch",
        "options",
        "arg",
        "factories",
        "name",
        "factories",
        "i",
        "i",
        "factories",
        "i",
        "arg",
        "result",
        "result",
        "dispatch",
        "options",
        "arg",
        "name",
        "options",
        "a",
        "b",
        "a",
        "b",
        "_temp",
        "_temp",
        "_temp",
        "_ref",
        "_ref$connectHOC",
        "connectAdvanced",
        "_ref$connectHOC",
        "_ref",
        "_ref$mapStateToPropsF",
        "defaultMapStateToPropsFactories",
        "_ref$mapStateToPropsF",
        "_ref",
        "_ref$mapDispatchToPro",
        "defaultMapDispatchToPropsFactories",
        "_ref$mapDispatchToPro",
        "_ref",
        "_ref$mergePropsFactor",
        "defaultMergePropsFactories",
        "_ref$mergePropsFactor",
        "_ref",
        "_ref$selectorFactory",
        "finalPropsSelectorFactory",
        "_ref$selectorFactory",
        "connect",
        "mapStateToProps",
        "mapDispatchToProps",
        "mergeProps",
        "_ref2",
        "_ref2",
        "_ref2",
        "_ref3",
        "_ref3$pure",
        "_ref3$pure",
        "_ref3",
        "_ref3$areStatesEqual",
        "strictEqual",
        "_ref3$areStatesEqual",
        "_ref3",
        "_ref3$areOwnPropsEqua",
        "shallowEqual",
        "_ref3$areOwnPropsEqua",
        "_ref3",
        "_ref3$areStatePropsEq",
        "shallowEqual",
        "_ref3$areStatePropsEq",
        "_ref3",
        "_ref3$areMergedPropsE",
        "shallowEqual",
        "_ref3$areMergedPropsE",
        "_objectWithoutPropertiesLoose",
        "_ref3",
        "match",
        "mapStateToProps",
        "mapStateToPropsFactories",
        "match",
        "mapDispatchToProps",
        "mapDispatchToPropsFactories",
        "match",
        "mergeProps",
        "mergePropsFactories",
        "connectHOC",
        "selectorFactory",
        "_extends",
        "getDisplayName",
        "name",
        "name",
        "mapStateToProps",
        "initMapStateToProps",
        "initMapDispatchToProps",
        "initMergeProps",
        "pure",
        "areStatesEqual",
        "areOwnPropsEqual",
        "areStatePropsEqual",
        "areMergedPropsEqual",
        "extraOptions",
        "createConnect",
        "React",
        "ReactReduxContext",
        "contextValue",
        "contextValue",
        "context",
        "context",
        "context",
        "ReactReduxContext",
        "context",
        "ReactReduxContext",
        "useReduxContext",
        "React",
        "context",
        "useStore",
        "useReduxContext$1",
        "_useReduxContext",
        "store",
        "createStoreHook",
        "context",
        "context",
        "context",
        "ReactReduxContext",
        "context",
        "ReactReduxContext",
        "useStore",
        "createStoreHook",
        "context",
        "useDispatch",
        "useStore$1",
        "store",
        "createDispatchHook",
        "refEquality",
        "a",
        "b",
        "a",
        "b",
        "selector",
        "equalityFn",
        "store",
        "contextSub",
        "React",
        "s",
        "s",
        "_useReducer",
        "React",
        "Subscription",
        "store",
        "contextSub",
        "store",
        "contextSub",
        "React",
        "React",
        "React",
        "React",
        "store",
        "selector",
        "latestSelector",
        "storeState",
        "latestStoreState",
        "latestSubscriptionCallbackError",
        "selectedState",
        "selector",
        "storeState",
        "selectedState",
        "latestSelectedState",
        "err",
        "latestSubscriptionCallbackError",
        "err",
        "latestSubscriptionCallbackError",
        "err",
        "useIsomorphicLayoutEffect",
        "latestSelector",
        "selector",
        "latestStoreState",
        "storeState",
        "latestSelectedState",
        "selectedState",
        "latestSubscriptionCallbackError",
        "useIsomorphicLayoutEffect",
        "latestSelector",
        "store",
        "equalityFn",
        "newSelectedState",
        "latestSelectedState",
        "latestSelectedState",
        "newSelectedState",
        "err",
        "latestSubscriptionCallbackError",
        "err",
        "forceRender",
        "subscription",
        "checkForUpdates",
        "subscription",
        "checkForUpdates",
        "subscription",
        "store",
        "subscription",
        "selectedState",
        "context",
        "context",
        "context",
        "ReactReduxContext",
        "context",
        "ReactReduxContext",
        "useReduxContext",
        "React",
        "context",
        "useSelector",
        "selector",
        "equalityFn",
        "equalityFn",
        "equalityFn",
        "refEquality",
        "selector",
        "useReduxContext$1",
        "_useReduxContext",
        "_useReduxContext",
        "useSelectorWithStoreAndSubscription",
        "selector",
        "equalityFn",
        "store",
        "contextSub",
        "React",
        "selectedState",
        "selectedState",
        "createSelectorHook",
        "setBatch",
        "reactDom",
        "exports",
        "reactDom",
        "exports",
        "Provider",
        "exports",
        "ReactReduxContext",
        "exports",
        "connect",
        "exports",
        "connectAdvanced",
        "exports",
        "createDispatchHook",
        "exports",
        "createSelectorHook",
        "exports",
        "createStoreHook",
        "exports",
        "shallowEqual",
        "exports",
        "useDispatch",
        "exports",
        "useSelector",
        "exports",
        "useStore",
        "exports"
    ],
    "literals": [
        "'object'",
        "'undefined'",
        "'react'",
        "'redux'",
        "'react-dom'",
        "'function'",
        "'exports'",
        "'react'",
        "'redux'",
        "'react-dom'",
        "'use strict'",
        "'default'",
        "'default'",
        "'default'",
        "'default'",
        "'__esModule'",
        "'function'",
        "'react.element'",
        "'react.portal'",
        "'react.fragment'",
        "'react.strict_mode'",
        "'react.profiler'",
        "'react.provider'",
        "'react.context'",
        "'react.async_mode'",
        "'react.concurrent_mode'",
        "'react.forward_ref'",
        "'react.suspense'",
        "'react.suspense_list'",
        "'react.memo'",
        "'react.lazy'",
        "'react.fundamental'",
        "'react.responder'",
        "'string'",
        "'function'",
        "'object'",
        "'Warning: '",
        "'undefined'",
        "'`lowPriorityWarning(condition, format, ...args)` requires a warning '",
        "'message argument'",
        "'object'",
        "'The ReactIs.isAsyncMode() alias has been deprecated, '",
        "'and will be removed in React 17+. Update your code to use '",
        "'ReactIs.isConcurrentMode() instead. It has the exact same API.'",
        "'object'",
        "'Object.assign cannot be called with null or undefined'",
        "'abc'",
        "'de'",
        "'5'",
        "'_'",
        "''",
        "'0123456789'",
        "'abcdefghijklmnopqrst'",
        "''",
        "''",
        "'abcdefghijklmnopqrst'",
        "'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'",
        "'Warning: '",
        "'undefined'",
        "'function'",
        "'React class'",
        "': '",
        "' type `'",
        "'` is invalid; '",
        "'it must be a function, usually from the `prop-types` package, but received `'",
        "'`.'",
        "'Invariant Violation'",
        "'React class'",
        "': type specification of '",
        "' `'",
        "'` is invalid; the type checker '",
        "'function must return `null` or an `Error` but returned a '",
        "'. '",
        "'You may have forgotten to pass an argument to the type checker '",
        "'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and '",
        "'shape all require an argument).'",
        "''",
        "'Failed '",
        "' type: '",
        "''",
        "'Warning: '",
        "'undefined'",
        "'function'",
        "'@@iterator'",
        "'function'",
        "'<<anonymous>>'",
        "'array'",
        "'boolean'",
        "'function'",
        "'number'",
        "'object'",
        "'string'",
        "'symbol'",
        "''",
        "'Calling PropTypes validators directly is not supported by the `prop-types` package. '",
        "'Use `PropTypes.checkPropTypes()` to call them. '",
        "'Read more at http://fb.me/use-check-prop-types'",
        "'Invariant Violation'",
        "'undefined'",
        "':'",
        "'You are manually calling a React.PropTypes validation '",
        "'function for the `'",
        "'` prop on `'",
        "'`. This is deprecated '",
        "'and will throw in the standalone `prop-types` package. '",
        "'You may be seeing this warning due to a third-party PropTypes '",
        "'library. See https://fb.me/react-warning-dont-call-proptypes '",
        "'for details.'",
        "'The '",
        "' `'",
        "'` is marked as required '",
        "'in `'",
        "'`, but its value is `null`.'",
        "'The '",
        "' `'",
        "'` is marked as required in '",
        "'`'",
        "'`, but its value is `undefined`.'",
        "'Invalid '",
        "' `'",
        "'` of type '",
        "'`'",
        "'` supplied to `'",
        "'`, expected '",
        "'`'",
        "'`.'",
        "'function'",
        "'Property `'",
        "'` of component `'",
        "'` has invalid PropType notation inside arrayOf.'",
        "'Invalid '",
        "' `'",
        "'` of type '",
        "'`'",
        "'` supplied to `'",
        "'`, expected an array.'",
        "'['",
        "']'",
        "'Invalid '",
        "' `'",
        "'` of type '",
        "'`'",
        "'` supplied to `'",
        "'`, expected a single ReactElement.'",
        "'Invalid '",
        "' `'",
        "'` of type '",
        "'`'",
        "'` supplied to `'",
        "'`, expected a single ReactElement type.'",
        "'Invalid '",
        "' `'",
        "'` of type '",
        "'`'",
        "'` supplied to `'",
        "'`, expected '",
        "'instance of `'",
        "'`.'",
        "'Invalid arguments supplied to oneOf, expected an array, got '",
        "' arguments. '",
        "'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'",
        "'Invalid argument supplied to oneOf, expected an array.'",
        "'symbol'",
        "'Invalid '",
        "' `'",
        "'` of value `'",
        "'` '",
        "'supplied to `'",
        "'`, expected one of '",
        "'.'",
        "'function'",
        "'Property `'",
        "'` of component `'",
        "'` has invalid PropType notation inside objectOf.'",
        "'object'",
        "'Invalid '",
        "' `'",
        "'` of type '",
        "'`'",
        "'` supplied to `'",
        "'`, expected an object.'",
        "'.'",
        "'Invalid argument supplied to oneOfType, expected an instance of array.'",
        "'function'",
        "'Invalid argument supplied to oneOfType. Expected an array of check functions, but '",
        "'received '",
        "' at index '",
        "'.'",
        "'Invalid '",
        "' `'",
        "'` supplied to '",
        "'`'",
        "'`.'",
        "'Invalid '",
        "' `'",
        "'` supplied to '",
        "'`'",
        "'`, expected a ReactNode.'",
        "'object'",
        "'Invalid '",
        "' `'",
        "'` of type `'",
        "'` '",
        "'supplied to `'",
        "'`, expected `object`.'",
        "'.'",
        "'object'",
        "'Invalid '",
        "' `'",
        "'` of type `'",
        "'` '",
        "'supplied to `'",
        "'`, expected `object`.'",
        "'Invalid '",
        "' `'",
        "'` key `'",
        "'` supplied to `'",
        "'`.'",
        "'\\nBad object: '",
        "'  '",
        "'\\nValid keys: '",
        "'  '",
        "'.'",
        "'number'",
        "'string'",
        "'undefined'",
        "'boolean'",
        "'object'",
        "'symbol'",
        "'@@toStringTag'",
        "'Symbol'",
        "'function'",
        "'array'",
        "'object'",
        "'symbol'",
        "'undefined'",
        "''",
        "'object'",
        "'date'",
        "'regexp'",
        "'array'",
        "'object'",
        "'an '",
        "'boolean'",
        "'date'",
        "'regexp'",
        "'a '",
        "'ReactRedux'",
        "'$$typeof'",
        "'$$typeof'",
        "'$$typeof'",
        "'string'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'STORE_UPDATED'",
        "\"ConnectAdvanced(\"",
        "\")\"",
        "'connectAdvanced'",
        "'store'",
        "\"getDisplayName\"",
        "\"methodName\"",
        "\"renderCountProp\"",
        "\"shouldHandleStateChanges\"",
        "\"storeKey\"",
        "\"withRef\"",
        "\"forwardRef\"",
        "\"context\"",
        "\"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension\"",
        "'withRef is removed. To access the wrapped instance, use a ref on the connected component'",
        "'To use a custom Redux store for specific components, create a custom React context with '",
        "\"React.createContext(), and pass the context object to React Redux's Provider and specific components\"",
        "' like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. '",
        "'You may also pass a {context : MyContext} option to connect'",
        "'store'",
        "'storeKey has been removed and does not do anything. '",
        "\"You must pass a component to the function returned by \"",
        "\". Instead received \"",
        "'Component'",
        "\"reactReduxForwardedRef\"",
        "\"Could not find \\\"store\\\" in the context of \"",
        "\"\\\"\"",
        "\"\\\". Either wrap the root component in a <Provider>, \"",
        "\"or pass a custom React context provider to <Provider> and the corresponding \"",
        "\"React context consumer to \"",
        "\" in connect options.\"",
        "'object'",
        "'object'",
        "'object'",
        "'undefined'",
        "'function'",
        "\"() in \"",
        "\" must return a plain object. Instead received \"",
        "\".\"",
        "'function'",
        "'function'",
        "'mapDispatchToProps'",
        "'object'",
        "'function'",
        "'mapStateToProps'",
        "'mergeProps'",
        "'function'",
        "\"Unexpected value for \"",
        "\" in \"",
        "\".\"",
        "'mapStateToProps'",
        "'mapDispatchToProps'",
        "'dependsOnOwnProps'",
        "\"The selector for \"",
        "\" of \"",
        "\" did not specify a value for dependsOnOwnProps.\"",
        "'mapStateToProps'",
        "'mapDispatchToProps'",
        "'mergeProps'",
        "\"initMapStateToProps\"",
        "\"initMapDispatchToProps\"",
        "\"initMergeProps\"",
        "\"Invalid value of type \"",
        "\" for \"",
        "\" argument when connecting component \"",
        "\".\"",
        "\"pure\"",
        "\"areStatesEqual\"",
        "\"areOwnPropsEqual\"",
        "\"areStatePropsEqual\"",
        "\"areMergedPropsEqual\"",
        "'mapStateToProps'",
        "'mapDispatchToProps'",
        "'mergeProps'",
        "'connect'",
        "\"Connect(\"",
        "\")\"",
        "'could not find react-redux context value; please ensure the component is wrapped in a <Provider>'",
        "\"\\nThe error may be correlated with this previous error:\\n\"",
        "\"\\n\\n\"",
        "\"You must pass a selector to useSelector\"",
        "'batch'",
        "'__esModule'"
    ],
    "variables": [
        "React__default",
        "reactIs_development",
        "hasSymbol",
        "REACT_ELEMENT_TYPE",
        "REACT_PORTAL_TYPE",
        "REACT_FRAGMENT_TYPE",
        "REACT_STRICT_MODE_TYPE",
        "REACT_PROFILER_TYPE",
        "REACT_PROVIDER_TYPE",
        "REACT_CONTEXT_TYPE",
        "REACT_ASYNC_MODE_TYPE",
        "REACT_CONCURRENT_MODE_TYPE",
        "REACT_FORWARD_REF_TYPE",
        "REACT_SUSPENSE_TYPE",
        "REACT_SUSPENSE_LIST_TYPE",
        "REACT_MEMO_TYPE",
        "REACT_LAZY_TYPE",
        "REACT_FUNDAMENTAL_TYPE",
        "REACT_RESPONDER_TYPE",
        "lowPriorityWarning",
        "printWarning",
        "_len",
        "args",
        "_key",
        "argIndex",
        "message",
        "_len2",
        "args",
        "_key2",
        "lowPriorityWarning$1",
        "lowPriorityWarning",
        "$$typeof",
        "$$typeofType",
        "AsyncMode",
        "REACT_ASYNC_MODE_TYPE",
        "ConcurrentMode",
        "REACT_CONCURRENT_MODE_TYPE",
        "ContextConsumer",
        "REACT_CONTEXT_TYPE",
        "ContextProvider",
        "REACT_PROVIDER_TYPE",
        "Element",
        "REACT_ELEMENT_TYPE",
        "ForwardRef",
        "REACT_FORWARD_REF_TYPE",
        "Fragment",
        "REACT_FRAGMENT_TYPE",
        "Lazy",
        "REACT_LAZY_TYPE",
        "Memo",
        "REACT_MEMO_TYPE",
        "Portal",
        "REACT_PORTAL_TYPE",
        "Profiler",
        "REACT_PROFILER_TYPE",
        "StrictMode",
        "REACT_STRICT_MODE_TYPE",
        "Suspense",
        "REACT_SUSPENSE_TYPE",
        "hasWarnedAboutDeprecatedIsAsyncMode",
        "reactIs_development_1",
        "reactIs_development_2",
        "reactIs_development_3",
        "reactIs_development_4",
        "reactIs_development_5",
        "reactIs_development_6",
        "reactIs_development_7",
        "reactIs_development_8",
        "reactIs_development_9",
        "reactIs_development_10",
        "reactIs_development_11",
        "reactIs_development_12",
        "reactIs_development_13",
        "reactIs_development_14",
        "reactIs_development_15",
        "reactIs_development_16",
        "reactIs_development_17",
        "reactIs_development_18",
        "reactIs_development_19",
        "reactIs_development_20",
        "reactIs_development_21",
        "reactIs_development_22",
        "reactIs_development_23",
        "reactIs_development_24",
        "reactIs_development_25",
        "reactIs_development_26",
        "reactIs_development_27",
        "reactIs_development_28",
        "reactIs",
        "reactIs_1",
        "reactIs_2",
        "getOwnPropertySymbols",
        "hasOwnProperty",
        "propIsEnumerable",
        "test1",
        "test2",
        "i",
        "order2",
        "test3",
        "objectAssign",
        "to",
        "symbols",
        "s",
        "i",
        "ReactPropTypesSecret",
        "ReactPropTypesSecret_1",
        "ReactPropTypesSecret",
        "printWarning",
        "ReactPropTypesSecret$1",
        "ReactPropTypesSecret_1",
        "loggedTypeFailures",
        "has",
        "message",
        "error",
        "err",
        "stack",
        "checkPropTypes_1",
        "checkPropTypes",
        "has$1",
        "printWarning$1",
        "message",
        "factoryWithTypeCheckers",
        "ITERATOR_SYMBOL",
        "FAUX_ITERATOR_SYMBOL",
        "iteratorFn",
        "ANONYMOUS",
        "ReactPropTypes",
        "manualPropTypeCallCache",
        "manualPropTypeWarningCount",
        "err",
        "cacheKey",
        "chainedCheckType",
        "propValue",
        "propType",
        "preciseType",
        "propValue",
        "propType",
        "i",
        "error",
        "propValue",
        "propType",
        "propValue",
        "propType",
        "expectedClassName",
        "actualClassName",
        "propValue",
        "i",
        "valuesString",
        "propValue",
        "propType",
        "error",
        "i",
        "checker",
        "i",
        "checker",
        "propValue",
        "propType",
        "checker",
        "error",
        "propValue",
        "propType",
        "allKeys",
        "checker",
        "error",
        "iteratorFn",
        "iterator",
        "step",
        "entry",
        "propType",
        "propType",
        "propTypes",
        "ReactIs",
        "reactIs",
        "throwOnDirectAccess",
        "ReactReduxContext",
        "batch",
        "defaultNoopBatch",
        "setBatch",
        "getBatch",
        "nullListeners",
        "batch",
        "first",
        "last",
        "listener",
        "first",
        "listeners",
        "listener",
        "first",
        "isSubscribed",
        "listener",
        "Subscription",
        "_proto",
        "store",
        "context",
        "children",
        "contextValue",
        "subscription",
        "previousState",
        "subscription",
        "Context",
        "i",
        "source",
        "target",
        "sourceKeys",
        "key",
        "i",
        "REACT_STATICS",
        "KNOWN_STATICS",
        "FORWARD_REF_STATICS",
        "MEMO_STATICS",
        "TYPE_STATICS",
        "defineProperty",
        "getOwnPropertyNames",
        "getOwnPropertySymbols$1",
        "getOwnPropertyDescriptor",
        "getPrototypeOf",
        "objectPrototype",
        "inheritedComponent",
        "keys",
        "targetStatics",
        "sourceStatics",
        "i",
        "key",
        "descriptor",
        "hoistNonReactStatics_cjs",
        "hoistNonReactStatics",
        "useIsomorphicLayoutEffect",
        "EMPTY_ARRAY",
        "NO_SUBSCRIPTION_ARRAY",
        "stringifyComponent",
        "updateCount",
        "didUnsubscribe",
        "lastThrownError",
        "checkForUpdates",
        "latestStoreState",
        "newChildProps",
        "error",
        "unsubscribeWrapper",
        "initStateUpdates",
        "_ref2",
        "_ref",
        "_ref2$getDisplayName",
        "getDisplayName",
        "_ref2$methodName",
        "methodName",
        "_ref2$renderCountProp",
        "renderCountProp",
        "_ref2$shouldHandleSta",
        "shouldHandleStateChanges",
        "_ref2$storeKey",
        "storeKey",
        "_ref2$withRef",
        "withRef",
        "_ref2$forwardRef",
        "forwardRef",
        "_ref2$context",
        "context",
        "connectOptions",
        "customStoreWarningMessage",
        "Context",
        "context",
        "wrappedComponentName",
        "displayName",
        "selectorFactoryOptions",
        "pure",
        "usePureOnlyMemo",
        "_useMemo",
        "reactReduxForwardedRef",
        "wrapperProps",
        "propsContext",
        "reactReduxForwardedRef",
        "wrapperProps",
        "ContextToUse",
        "contextValue",
        "didStoreComeFromProps",
        "didStoreComeFromContext",
        "store",
        "childPropsSelector",
        "_useMemo2",
        "subscription",
        "notifyNestedSubs",
        "subscription",
        "notifyNestedSubs",
        "overriddenContextValue",
        "_useReducer",
        "_useReducer$",
        "previousStateUpdateResult",
        "forceComponentUpdateDispatch",
        "lastChildProps",
        "lastWrapperProps",
        "childPropsFromStoreUpdate",
        "renderIsScheduled",
        "actualChildProps",
        "renderedWrappedComponent",
        "renderedChild",
        "Connect",
        "forwarded",
        "keysA",
        "keysB",
        "i",
        "proto",
        "baseProto",
        "proto",
        "constant",
        "displayName",
        "proxy",
        "props",
        "defaultMapDispatchToPropsFactories",
        "defaultMapStateToPropsFactories",
        "displayName",
        "pure",
        "areMergedPropsEqual",
        "hasRunOnce",
        "mergedProps",
        "nextMergedProps",
        "defaultMergePropsFactories",
        "areStatesEqual",
        "areOwnPropsEqual",
        "areStatePropsEqual",
        "hasRunAtLeastOnce",
        "state",
        "ownProps",
        "stateProps",
        "dispatchProps",
        "mergedProps",
        "nextStateProps",
        "statePropsChanged",
        "propsChanged",
        "stateChanged",
        "initMapStateToProps",
        "initMapDispatchToProps",
        "initMergeProps",
        "options",
        "mapStateToProps",
        "mapDispatchToProps",
        "mergeProps",
        "selectorFactory",
        "i",
        "result",
        "_ref",
        "_ref$connectHOC",
        "connectHOC",
        "_ref$mapStateToPropsF",
        "mapStateToPropsFactories",
        "_ref$mapDispatchToPro",
        "mapDispatchToPropsFactories",
        "_ref$mergePropsFactor",
        "mergePropsFactories",
        "_ref$selectorFactory",
        "selectorFactory",
        "_ref3",
        "_ref2",
        "_ref3$pure",
        "pure",
        "_ref3$areStatesEqual",
        "areStatesEqual",
        "_ref3$areOwnPropsEqua",
        "areOwnPropsEqual",
        "_ref3$areStatePropsEq",
        "areStatePropsEqual",
        "_ref3$areMergedPropsE",
        "areMergedPropsEqual",
        "extraOptions",
        "initMapStateToProps",
        "initMapDispatchToProps",
        "initMergeProps",
        "connect",
        "contextValue",
        "useReduxContext$1",
        "_useReduxContext",
        "store",
        "useStore",
        "useStore$1",
        "store",
        "useDispatch",
        "refEquality",
        "_useReducer",
        "forceRender",
        "subscription",
        "latestSubscriptionCallbackError",
        "latestSelector",
        "latestStoreState",
        "latestSelectedState",
        "storeState",
        "selectedState",
        "newSelectedState",
        "useReduxContext$1",
        "_useReduxContext",
        "store",
        "contextSub",
        "selectedState",
        "useSelector"
    ],
    "comments": [
        "The Symbol used to tag the ReactElement-like types. If there is no native Symbol",
        "nor polyfill, then a plain number is used for performance.",
        "TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary",
        "(unstable) APIs that have been removed. Can we remove the symbols?",
        "Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.",
        "--- Welcome to debugging React ---",
        "This error was thrown as a convenience so that you can use this stack",
        "to find the callsite that caused this warning to fire.",
        "AsyncMode is deprecated along with isAsyncMode",
        "AsyncMode should be deprecated",
        "object-assign\n\t(c) Sindre Sorhus\n\t@license MIT",
        "eslint-disable no-unused-vars",
        "Detect buggy property enumeration order in older V8 versions.",
        "https://bugs.chromium.org/p/v8/issues/detail?id=4118",
        "eslint-disable-line no-new-wrappers",
        "https://bugs.chromium.org/p/v8/issues/detail?id=3056",
        "https://bugs.chromium.org/p/v8/issues/detail?id=3056",
        "We don't expect any of the above to throw, but better to be safe.",
        "--- Welcome to debugging React ---",
        "This error was thrown as a convenience so that you can use this stack",
        "to find the callsite that caused this warning to fire.",
        "Prop type validation may throw. In case they do, we don't want to",
        "fail the render phase where it didn't fail before. So we log it.",
        "After these have been cleaned up, we'll let them throw.",
        "This is intentionally an invariant that gets caught. It's the same",
        "behavior as without this statement except with a better message.",
        "Only monitor this failure once because there tends to be a lot of the",
        "same error.",
        "--- Welcome to debugging React ---",
        "This error was thrown as a convenience so that you can use this stack",
        "to find the callsite that caused this warning to fire.",
        "global Symbol",
        "Before Symbol spec.",
        "Important!",
        "Keep this list in sync with production version in `./factoryWithThrowingShims.js`.",
        "eslint-disable no-self-compare",
        "SameValue algorithm",
        "Steps 1-5, 7-10",
        "Steps 6.b-6.e: +0 != -0",
        "Step 6.a: NaN == NaN",
        "eslint-enable no-self-compare",
        "Make `instanceof Error` still work for returned errors.",
        "New behavior only for users of `prop-types` package",
        "Old behavior for people using React.PropTypes",
        "Avoid spamming the console because they are often not actionable except for lib authors",
        "`propValue` being instance of, say, date/regexp, pass the 'object'",
        "check, but we can offer a more precise error message here rather than",
        "'of type `object`'.",
        "We need to check all keys in case some are required but missing from",
        "props.",
        "Iterator will provide entry [k,v] tuples rather than values.",
        "Native Symbol.",
        "falsy value can't be a Symbol",
        "19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'",
        "Fallback for non-spec compliant Symbols which are polyfilled.",
        "Equivalent of `typeof` but with special handling for array and regexp.",
        "Old webkits (at least until Android 4.0) return 'function' rather than",
        "'object' for typeof a RegExp. We'll normalize this here so that /bla/",
        "passes PropTypes.object.",
        "This handles more types than `getPropType`. Only used for error messages.",
        "See `createPrimitiveTypeChecker`.",
        "Returns a string that is postfixed to a warning about an invalid type.",
        "For example, \"undefined\" or \"of type array\"",
        "Returns class name of the object, if any.",
        "By explicitly using `prop-types` you are opting into new development behavior.",
        "http://fb.me/prop-types-in-prod",
        "#__PURE__",
        "Default to a dummy \"batch\" implementation that just runs the callback",
        "Allow injecting another batching function later",
        "Supply a getter just to skip dealing with ESM bindings",
        "well as nesting subscriptions of descendant components, so that we can ensure the",
        "ancestor components re-render before descendants",
        "#__PURE__",
        "don't hoist over string (html) components",
        "Avoid failures from read-only properties",
        "To get around it, we can conditionally useEffect on the server (no-op) and",
        "useLayoutEffect in the browser. We need useLayoutEffect to ensure the store",
        "subscription callback always has the selector from the latest render commit",
        "available, otherwise a store update may happen between render and the effect,",
        "which may cause missed updates; we also must ensure the store subscription",
        "is created synchronously, otherwise a store update may occur before the",
        "subscription is created and an inconsistent state may be observed",
        "We want to capture the wrapper props and child props we used for later comparisons",
        "If the render was from a store update, clear out that reference and cascade the subscriber update",
        "If we're not subscribed to the store, nothing to do here",
        "Capture values for checking if and when this component unmounts",
        "We'll run this callback every time a store subscription update propagates to this component",
        "Don't run stale listeners.",
        "Redux doesn't guarantee unsubscriptions happen until next dispatch.",
        "Actually run the selector with the most recent store state and wrapper props",
        "to determine what the child props should be",
        "If the child props haven't changed, nothing to do here - cascade the subscription update",
        "Save references to the new child props.  Note that we track the \"child props from store update\"",
        "as a ref instead of a useState/useReducer because we need a way to determine if that value has",
        "been processed.  If this went into useState/useReducer, we couldn't clear out the value without",
        "forcing another re-render, which we don't want.",
        "If the child props _did_ change (or we caught an error), this wrapper component needs to re-render",
        "Actually subscribe to the nearest connected ancestor (or store)",
        "Pull data from the store after first render in case the store has",
        "changed since we began.",
        "It's possible that we caught an error due to a bad mapState function, but the",
        "parent re-rendered without this component and we're about to unmount.",
        "This shouldn't happen as long as we do top-down subscriptions correctly, but",
        "if we ever do those wrong, this throw will surface the error in our tests.",
        "In that case, throw the error from here so it doesn't get lost.",
        "selectorFactory is a func that is responsible for returning the selector function used to\n\t  compute new props from state, props, and dispatch. For example:\n\t      export default connectAdvanced((dispatch, options) => (state, props) => ({\n\t      thing: state.things[props.thingId],\n\t      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),\n\t    }))(YourComponent)\n\t    Access to dispatch is provided to the factory so selectorFactories can bind actionCreators\n\t  outside of their selector as an optimization. Options passed to connectAdvanced are passed to\n\t  the selectorFactory, along with displayName and WrappedComponent, as the second argument.\n\t    Note that selectorFactory is responsible for all caching/memoization of inbound and outbound\n\t  props. Do not use connectAdvanced directly without memoizing results between calls to your\n\t  selector, otherwise the Connect component will re-render on every state or props change.",
        "options object:",
        "If we aren't running in \"pure\" mode, we don't want to memoize values.",
        "To avoid conditionally calling hooks, we fall back to a tiny wrapper",
        "that just executes the given callback immediately.",
        "Distinguish between actual \"data\" props that were passed to the wrapper component,",
        "and values needed to control behavior (forwarded refs, alternate context instances).",
        "To maintain the wrapperProps object reference, memoize this destructuring.",
        "Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.",
        "Memoize the check that determines which context instance we should use.",
        "Retrieve the store and ancestor subscription via context, if available",
        "The store _must_ exist as either a prop or in context.",
        "We'll check to see if it _looks_ like a Redux store first.",
        "This allows us to pass through a `store` prop that is just a plain value.",
        "Based on the previous check, one of these must be true",
        "The child props selector needs the store reference as an input.",
        "Re-create this selector whenever the store changes.",
        "This Subscription's source should match where store came from: props vs. context. A component",
        "connected to the store via props shouldn't use subscription from context, or vice versa.",
        "`notifyNestedSubs` is duplicated to handle the case where the component is unmounted in",
        "the middle of the notification loop, where `subscription` will then be null. This can",
        "probably be avoided if Subscription's listeners logic is changed to not call listeners",
        "that have been unsubscribed in the  middle of the notification loop.",
        "Determine what {store, subscription} value should be put into nested context, if necessary,",
        "and memoize that value to avoid unnecessary context updates.",
        "This component is directly subscribed to a store from props.",
        "We don't want descendants reading from this store - pass down whatever",
        "the existing context value is from the nearest connected ancestor.",
        "Otherwise, put this component's subscription instance into context, so that",
        "connected descendants won't update until after this component is done",
        "We need to force this wrapper component to re-render whenever a Redux store update",
        "causes a change to the calculated child component props (or we caught an error in mapState)",
        "Propagate any mapState/mapDispatch errors upwards",
        "Set up refs to coordinate values between the subscription effect and the render logic",
        "Tricky logic here:",
        "- This render may have been triggered by a Redux store update that produced new child props",
        "- However, we may have gotten new wrapper props after that",
        "If we have new child props, and the same wrapper props, we know we should use the new child props as-is.",
        "But, if we have new wrapper props, those might change the child props, so we have to recalculate things.",
        "So, we'll use the child props from store update only if the wrapper props are the same as last time.",
        "TODO We're reading the store directly in render() here. Bad idea?",
        "This will likely cause Bad Things (TM) to happen in Concurrent Mode.",
        "Note that we do this because on renders _not_ caused by store updates, we need the latest store state",
        "to determine what the child props should be.",
        "We need this to execute synchronously every time we re-render. However, React warns",
        "about useLayoutEffect in SSR, so we try to detect environment and fall back to",
        "just useEffect instead to avoid the warning, since neither will run anyway.",
        "Our re-subscribe logic only runs when the store/subscription setup changes",
        "Now that all that's done, we can finally try to actually render the child component.",
        "We memoize the elements for the rendered child component as an optimization.",
        "If React sees the exact same element reference as last time, it bails out of re-rendering",
        "that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.",
        "If this component is subscribed to store updates, we need to pass its own",
        "subscription instance down to our descendants. That means rendering the same",
        "Context instance, and putting a different value into the context.",
        "If we're in \"pure\" mode, ensure our wrapper component only re-renders when incoming props have changed.",
        "eslint-disable no-console",
        "eslint-enable no-console",
        "This error was thrown as a convenience so that if you enable",
        "\"break on all exceptions\" in your console,",
        "it would pause the execution at this line.",
        "eslint-disable no-empty",
        "eslint-enable no-empty",
        "dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args",
        "to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine",
        "whether mapToProps needs to be invoked when props have changed.",
        "",
        "A length of one signals that mapToProps does not depend on props from the parent component.",
        "A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and",
        "therefore not reporting its length accurately..",
        "Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,",
        "this function wraps mapToProps in a proxy function which does several things:",
        "",
        "is used by selectorFactory to decide if it should reinvoke on props changes.",
        "",
        "new function as the true mapToProps for subsequent calls.",
        "",
        "the developer that their mapToProps function is not returning a valid result.",
        "",
        "allow detectFactoryAndVerify to get ownProps",
        "TODO: Add more comments",
        "If pure is true, the selector returned by selectorFactory will memoize its results,",
        "allowing connectAdvanced's shouldComponentUpdate to return false if final",
        "props have not changed. If false, the selector will always return a new",
        "object and shouldComponentUpdate will always return true.",
        "connect is a facade over connectAdvanced. It turns its args into a compatible\n\t  selectorFactory, which has the signature:\n\n\t    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps\n\t  \n\t  connect passes its args to connectAdvanced as options, which will in turn pass them to\n\t  selectorFactory each time a Connect component instance is instantiated or hot reloaded.\n\n\t  selectorFactory returns a final props selector from its mapStateToProps,\n\t  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,\n\t  mergePropsFactories, and pure args.\n\n\t  The resulting final props selector is called by the Connect component instance whenever\n\t  it receives new props or store state.",
        "createConnect with default args builds the 'official' connect behavior. Calling it with",
        "different options opens up some testing and extensibility scenarios",
        "used in error messages",
        "used to compute Connect's displayName from the wrapped component's displayName.",
        "if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes",
        "passed through to selectorFactory",
        "#__PURE__",
        "#__PURE__",
        "#__PURE__",
        "we ignore all errors here, since when the component",
        "is re-rendered, the selectors are called again, and",
        "will throw again, if neither props nor store state",
        "changed",
        "#__PURE__"
    ],
    "docstrings": [
        "* Forked from fbjs/warning:\n\t * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n\t *\n\t * Only change is we use console.warn instead of console.error,\n\t * and do nothing when 'console' is not supported.\n\t * This really simplifies the code.\n\t * ---\n\t * Similar to invariant but only logs a warning if the condition is not met.\n\t * This can be used to log issues in development environments in critical\n\t * paths. Removing the logging code for production environments will keep the\n\t * same logic and follow the same code paths.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.",
        "* Assert that the values match with the type specs.\n\t * Error messages are memorized and will only be shown once.\n\t *\n\t * @param {object} typeSpecs Map of name to a ReactPropType\n\t * @param {object} values Runtime values that need to be type-checked\n\t * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n\t * @param {string} componentName Name of the component for error messages.\n\t * @param {?Function} getStack Returns the component stack.\n\t * @private",
        "* Resets warning cache when testing.\n\t *\n\t * @private",
        "* Returns the iterator method function contained on the iterable object.\n\t   *\n\t   * Be sure to invoke the function with the iterable as context:\n\t   *\n\t   *     var iteratorFn = getIteratorFn(myIterable);\n\t   *     if (iteratorFn) {\n\t   *       var iterator = iteratorFn.call(myIterable);\n\t   *       ...\n\t   *     }\n\t   *\n\t   * @param {?object} maybeIterable\n\t   * @return {?function}",
        "* Collection of methods that allow declaration and validation of props that are\n\t   * supplied to React components. Example usage:\n\t   *\n\t   *   var Props = require('ReactPropTypes');\n\t   *   var MyArticle = React.createClass({\n\t   *     propTypes: {\n\t   *       // An optional string prop named \"description\".\n\t   *       description: Props.string,\n\t   *\n\t   *       // A required enum prop named \"category\".\n\t   *       category: Props.oneOf(['News','Photos']).isRequired,\n\t   *\n\t   *       // A prop named \"dialog\" that requires an instance of Dialog.\n\t   *       dialog: Props.instanceOf(Dialog).isRequired\n\t   *     },\n\t   *     render: function() { ... }\n\t   *   });\n\t   *\n\t   * A more formal specification of how these methods are used:\n\t   *\n\t   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n\t   *   decl := ReactPropTypes.{type}(.isRequired)?\n\t   *\n\t   * Each and every declaration produces a function with the same signature. This\n\t   * allows the creation of custom validation functions. For example:\n\t   *\n\t   *  var MyLink = React.createClass({\n\t   *    propTypes: {\n\t   *      // An optional string or URI prop named \"href\".\n\t   *      href: function(props, propName, componentName) {\n\t   *        var propValue = props[propName];\n\t   *        if (propValue != null && typeof propValue !== 'string' &&\n\t   *            !(propValue instanceof URI)) {\n\t   *          return new Error(\n\t   *            'Expected a string or an URI for ' + propName + ' in ' +\n\t   *            componentName\n\t   *          );\n\t   *        }\n\t   *      }\n\t   *    },\n\t   *    render: function() {...}\n\t   *  });\n\t   *\n\t   * @internal",
        "* inlined Object.is polyfill to avoid requiring consumers ship their own\n\t   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is",
        "* We use an Error-like object for backward compatibility as people may call\n\t   * PropTypes directly and inspect their output. However, we don't use real\n\t   * Errors anymore. We don't inspect their stack anyway, and creating them\n\t   * is prohibitively expensive if they are created too often, such as what\n\t   * happens in oneOfType() for any type before the one that matched.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.",
        "* Copyright 2015, Yahoo! Inc.\n\t * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.",
        "* @param {any} obj The object to inspect.\n\t * @returns {boolean} True if the argument appears to be a plain object.",
        "* Prints a warning in the console if it exists.\n\t *\n\t * @param {String} message The warning message.\n\t * @returns {void}",
        "* Detects whether the mapToProps function being called depends on props, which",
        "* On first call, handles mapToProps if returns another function, and treats that",
        "* On first call, verifies the first result is a plain object, in order to warn",
        "* A hook to access the value of the `ReactReduxContext`. This is a low-level\n\t * hook that you should usually not need to call directly.\n\t *\n\t * @returns {any} the value of the `ReactReduxContext`\n\t *\n\t * @example\n\t *\n\t * import React from 'react'\n\t * import { useReduxContext } from 'react-redux'\n\t *\n\t * export const CounterComponent = ({ value }) => {\n\t *   const { store } = useReduxContext()\n\t *   return <div>{store.getState()}</div>\n\t * }",
        "* Hook factory, which creates a `useStore` hook bound to a given context.\n\t *\n\t * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n\t * @returns {Function} A `useStore` hook bound to the specified context.",
        "* A hook to access the redux store.\n\t *\n\t * @returns {any} the redux store\n\t *\n\t * @example\n\t *\n\t * import React from 'react'\n\t * import { useStore } from 'react-redux'\n\t *\n\t * export const ExampleComponent = () => {\n\t *   const store = useStore()\n\t *   return <div>{store.getState()}</div>\n\t * }",
        "* Hook factory, which creates a `useDispatch` hook bound to a given context.\n\t *\n\t * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n\t * @returns {Function} A `useDispatch` hook bound to the specified context.",
        "* A hook to access the redux `dispatch` function.\n\t *\n\t * @returns {any|function} redux store's `dispatch` function\n\t *\n\t * @example\n\t *\n\t * import React, { useCallback } from 'react'\n\t * import { useDispatch } from 'react-redux'\n\t *\n\t * export const CounterComponent = ({ value }) => {\n\t *   const dispatch = useDispatch()\n\t *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n\t *   return (\n\t *     <div>\n\t *       <span>{value}</span>\n\t *       <button onClick={increaseCounter}>Increase counter</button>\n\t *     </div>\n\t *   )\n\t * }",
        "* Hook factory, which creates a `useSelector` hook bound to a given context.\n\t *\n\t * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n\t * @returns {Function} A `useSelector` hook bound to the specified context.",
        "* A hook to access the redux store's state. This hook takes a selector function\n\t * as an argument. The selector is called with the store state.\n\t *\n\t * This hook takes an optional equality comparison function as the second parameter\n\t * that allows you to customize the way the selected state is compared to determine\n\t * whether the component needs to be re-rendered.\n\t *\n\t * @param {Function} selector the selector function\n\t * @param {Function=} equalityFn the function that will be used to determine equality\n\t *\n\t * @returns {any} the selected state\n\t *\n\t * @example\n\t *\n\t * import React from 'react'\n\t * import { useSelector } from 'react-redux'\n\t *\n\t * export const CounterComponent = () => {\n\t *   const counter = useSelector(state => state.counter)\n\t *   return <div>{counter}</div>\n\t * }"
    ],
    "functions": [
        "unwrapExports",
        "createCommonjsModule",
        "isValidElementType",
        "typeOf",
        "isAsyncMode",
        "isConcurrentMode",
        "isContextConsumer",
        "isContextProvider",
        "isElement",
        "isForwardRef",
        "isFragment",
        "isLazy",
        "isMemo",
        "isPortal",
        "isProfiler",
        "isStrictMode",
        "isSuspense",
        "toObject",
        "shouldUseNative",
        "checkPropTypes",
        "emptyFunctionThatReturnsNull",
        "getIteratorFn",
        "PropTypeError",
        "createChainableTypeChecker",
        "checkType",
        "createPrimitiveTypeChecker",
        "validate",
        "createAnyTypeChecker",
        "createArrayOfTypeChecker",
        "validate",
        "createElementTypeChecker",
        "validate",
        "createElementTypeTypeChecker",
        "validate",
        "createInstanceTypeChecker",
        "validate",
        "createEnumTypeChecker",
        "validate",
        "createObjectOfTypeChecker",
        "validate",
        "createUnionTypeChecker",
        "validate",
        "createNodeChecker",
        "validate",
        "createShapeTypeChecker",
        "validate",
        "createStrictShapeTypeChecker",
        "validate",
        "isNode",
        "isSymbol",
        "getPropType",
        "getPreciseType",
        "getPostfixForTypeWarning",
        "getClassName",
        "defaultNoopBatch",
        "createListenerCollection",
        "Subscription",
        "Provider",
        "_extends",
        "_objectWithoutPropertiesLoose",
        "getStatics",
        "hoistNonReactStatics",
        "storeStateUpdatesReducer",
        "useIsomorphicLayoutEffectWithArgs",
        "captureWrapperProps",
        "subscribeUpdates",
        "connectAdvanced",
        "createChildSelector",
        "ConnectFunction",
        "shallowEqual",
        "isPlainObject",
        "warning",
        "verifyPlainObject",
        "wrapMapToPropsConstant",
        "constantSelector",
        "getDependsOnOwnProps",
        "wrapMapToPropsFunc",
        "whenMapDispatchToPropsIsFunction",
        "whenMapDispatchToPropsIsMissing",
        "whenMapDispatchToPropsIsObject",
        "whenMapStateToPropsIsFunction",
        "whenMapStateToPropsIsMissing",
        "defaultMergeProps",
        "wrapMergePropsFunc",
        "whenMergePropsIsFunction",
        "whenMergePropsIsOmitted",
        "verify",
        "verifySubselectors",
        "impureFinalPropsSelectorFactory",
        "pureFinalPropsSelectorFactory",
        "handleFirstCall",
        "handleNewPropsAndNewState",
        "handleNewProps",
        "handleNewState",
        "handleSubsequentCalls",
        "finalPropsSelectorFactory",
        "match",
        "strictEqual",
        "createConnect",
        "useReduxContext",
        "createStoreHook",
        "createDispatchHook",
        "useSelectorWithStoreAndSubscription",
        "checkForUpdates",
        "createSelectorHook"
    ],
    "classes": []
}