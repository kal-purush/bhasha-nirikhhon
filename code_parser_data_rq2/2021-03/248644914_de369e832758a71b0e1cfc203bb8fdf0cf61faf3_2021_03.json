{
    "identifiers": [
        "IO",
        "Text",
        "Threading",
        "Tasks",
        "Diary_Sample",
        "Models",
        "Microsoft",
        "AspNetCore",
        "Authorization",
        "Microsoft",
        "AspNetCore",
        "Identity",
        "Microsoft",
        "AspNetCore",
        "Mvc",
        "Microsoft",
        "Extensions",
        "Logging",
        "Diary_Sample",
        "Controllers",
        "Authorize",
        "Controller",
        "UserManager",
        "IdentityUser",
        "SignInManager",
        "IdentityUser",
        "ILogger",
        "UserAdminAccountController",
        "ILogger",
        "UserAdminAccountController",
        "logger",
        "SignInManager",
        "IdentityUser",
        "signInManager",
        "UserManager",
        "IdentityUser",
        "userManager",
        "_userManager",
        "userManager",
        "_signInManager",
        "signInManager",
        "_logger",
        "logger",
        "HttpGet",
        "IActionResult",
        "_userManager",
        "GetUserAsync",
        "User",
        "ConfigureAwait",
        "user",
        "_signInManager",
        "SignOutAsync",
        "ConfigureAwait",
        "RedirectToAction",
        "UserAdminAccountViewModel",
        "UserId",
        "user",
        "Id",
        "View",
        "userAdminAccountViewModel",
        "HttpGet",
        "IActionResult",
        "_userManager",
        "GetUserAsync",
        "User",
        "ConfigureAwait",
        "user",
        "UpadateError",
        "user",
        "Id",
        "DeleteNgMessage",
        "user",
        "Id",
        "user",
        "UserName",
        "user",
        "Email",
        "user",
        "EmailConfirmed",
        "user",
        "PhoneNumber",
        "user",
        "PhoneNumberConfirmed",
        "File",
        "MemoryStream",
        "Encoding",
        "UTF8",
        "GetBytes",
        "value",
        "filename",
        "userId",
        "message",
        "UserAdminAccountViewModel",
        "UserId",
        "userId",
        "Notification",
        "message",
        "UpdateResult",
        "View",
        "outUserAdminAccountViewModel"
    ],
    "literals": [
        "\"更新しました。\"",
        "\"削除しました。\"",
        "\"エラーが発生して更新できませんでした。\"",
        "\"エラーが発生して削除できませんでした。\"",
        "\"Index\"",
        "\"Auth\"",
        "\"Index\"",
        "\"{\\\"Id\\\":\"",
        "\",\\\"UserName\\\":\"",
        "\",\\\"Email\\\":\"",
        "\",\\\"EmailConfirmed\\\":\"",
        "\",\\\"PhoneNumber\\\":\"",
        "\",\\\"PhoneNumberConfirmed\\\":\"",
        "\"}\"",
        "\"PersonalData.json\"",
        "\"application/json\"",
        "\"Index\""
    ],
    "variables": [
        "_userManager",
        "_signInManager",
        "_logger",
        "EditOkMessage",
        "DeleteOkMessage",
        "EditNgMessage",
        "DeleteNgMessage",
        "user",
        "UserAdminAccountViewModel",
        "userAdminAccountViewModel",
        "user",
        "value",
        "filename",
        "UserAdminAccountViewModel",
        "outUserAdminAccountViewModel"
    ],
    "comments": [
        "ログイン画面に戻る",
        "[HttpPost]\n        public async Task<IActionResult> DeleteAccount(UserAdminAccountViewModel userAdminAccountViewModel)\n        {\n\n            string userId = userAdminAccountViewModel.UserId;\n            string password = userAdminAccountViewModel.Password;\n\n            if (!ModelState.IsValid)\n            {\n                return UpadateError(userId, DeleteNgMessage);\n            }\n            \n            if (userId == null)\n            {\n                return UpadateError(userId, DeleteNgMessage);\n            }\n\n            var user = await _userManager.FindByIdAsync(userId).ConfigureAwait(false);\n            if (user == null)\n            {\n                return UpadateError(userId, DeleteNgMessage);\n            }\n\n            bool retPassCheck = await _userManager.CheckPasswordAsync(user, password).ConfigureAwait(false);\n            if (!retPassCheck)\n            {\n                return UpadateError(userId, DeleteNgMessage);\n            }\n\n            var retDelete = await _userManager.DeleteAsync(user).ConfigureAwait(false);\n            if (!retDelete.Succeeded)\n            {\n                return UpadateError(userId, DeleteNgMessage);\n            }\n\n            await _signInManager.SignOutAsync().ConfigureAwait(false);\n            \n            return RedirectToAction(\"Index\", \"Auth\");\n        }"
    ],
    "docstrings": [],
    "functions": [
        "UserAdminAccountController",
        "Index",
        "Download",
        "IActionResult",
        "UpadateError"
    ],
    "classes": [
        "UserAdminAccountController"
    ]
}