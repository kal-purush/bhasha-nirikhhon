{
    "identifiers": [
        "Threading",
        "Tasks",
        "GraphQL",
        "Language",
        "AST",
        "GraphQL",
        "SystemTextJson",
        "GraphQL",
        "Types",
        "Xunit",
        "GraphQL",
        "Tests",
        "Bugs",
        "QueryTestBase",
        "Issue2387_OverrideBuiltInScalars",
        "MySchema",
        "Fact",
        "AssertQuerySuccess",
        "Fact",
        "AssertQuerySuccess",
        "Fact",
        "AssertQuerySuccess",
        "ToInputs",
        "Fact",
        "AssertQuerySuccess",
        "Fact",
        "AssertQuerySuccess",
        "Fact",
        "AssertQuerySuccess",
        "ToInputs",
        "Fact",
        "AssertQuerySuccess",
        "Fact",
        "AssertQuerySuccess",
        "Fact",
        "AssertQuerySuccess",
        "ToInputs",
        "Fact",
        "BuildSchemaFirst",
        "schema",
        "ExecuteAsync",
        "_",
        "Query",
        "json",
        "ShouldBeCrossPlatJson",
        "Fact",
        "BuildSchemaFirst",
        "schema",
        "ExecuteAsync",
        "_",
        "Query",
        "json",
        "ShouldBeCrossPlatJson",
        "Fact",
        "BuildSchemaFirst",
        "schema",
        "ExecuteAsync",
        "_",
        "Query",
        "_",
        "Inputs",
        "ToInputs",
        "json",
        "ShouldBeCrossPlatJson",
        "Fact",
        "BuildSchemaFirst",
        "schema",
        "ExecuteAsync",
        "_",
        "Query",
        "json",
        "ShouldBeCrossPlatJson",
        "Fact",
        "BuildSchemaFirst",
        "schema",
        "ExecuteAsync",
        "_",
        "Query",
        "json",
        "ShouldBeCrossPlatJson",
        "Fact",
        "BuildSchemaFirst",
        "schema",
        "ExecuteAsync",
        "_",
        "Query",
        "_",
        "Inputs",
        "ToInputs",
        "json",
        "ShouldBeCrossPlatJson",
        "GraphQL",
        "Types",
        "Schema",
        "For",
        "typeDefs",
        "config",
        "Types",
        "Include",
        "SchemaFirstRoot",
        "schema",
        "RegisterType",
        "MyIntGraphType",
        "schema",
        "RegisterType",
        "MyStringGraphType",
        "schema",
        "GraphQLMetadata",
        "IResolveFieldContext",
        "context",
        "context",
        "GetArgument",
        "ToString",
        "IResolveFieldContext",
        "context",
        "context",
        "GetArgument",
        "Schema",
        "Query",
        "MyQuery",
        "RegisterType",
        "MyIntGraphType",
        "RegisterType",
        "MyStringGraphType",
        "ObjectGraphType",
        "Field",
        "IntGraphType",
        "resolve",
        "Field",
        "IdGraphType",
        "arguments",
        "QueryArguments",
        "QueryArgument",
        "IntGraphType",
        "Name",
        "resolve",
        "context",
        "GetArgument",
        "ToString",
        "Field",
        "NonNullGraphType",
        "IntGraphType",
        "resolve",
        "Field",
        "IdGraphType",
        "arguments",
        "QueryArguments",
        "QueryArgument",
        "NonNullGraphType",
        "IntGraphType",
        "Name",
        "resolve",
        "context",
        "GetArgument",
        "ToString",
        "Field",
        "StringGraphType",
        "resolve",
        "Field",
        "IdGraphType",
        "arguments",
        "QueryArguments",
        "QueryArgument",
        "StringGraphType",
        "Name",
        "resolve",
        "context",
        "GetArgument",
        "IntGraphType",
        "Name",
        "IValue",
        "value",
        "ParseLiteral",
        "value",
        "ret",
        "i",
        "i",
        "ret",
        "value",
        "value",
        "i",
        "i",
        "ParseValue",
        "value",
        "value",
        "value",
        "i",
        "i",
        "Serialize",
        "value",
        "StringGraphType",
        "Name",
        "IValue",
        "value",
        "value",
        "StringValue",
        "s",
        "s",
        "Value",
        "ParseLiteral",
        "value",
        "value",
        "value",
        "s",
        "s",
        "ParseValue",
        "value",
        "value",
        "value",
        "s",
        "s",
        "Serialize",
        "value"
    ],
    "literals": [
        "\"{ testOutput }\"",
        "\"{\\\"testOutput\\\": 124}\"",
        "\"{ testInput(arg:123) }\"",
        "\"{\\\"testInput\\\": \\\"122\\\"}\"",
        "\"query ($arg: Int) { testInput(arg:$arg) }\"",
        "\"{\\\"testInput\\\": \\\"122\\\"}\"",
        "\"{\\\"arg\\\":123}\"",
        "\"{ testOutputString }\"",
        "\"{\\\"testOutputString\\\": \\\"output-hello\\\"}\"",
        "\"{ testInputString(arg:\\\"hello\\\") }\"",
        "\"{\\\"testInputString\\\": \\\"input-hello\\\"}\"",
        "\"query ($arg: String) { testInputString(arg:$arg) }\"",
        "\"{\\\"testInputString\\\": \\\"input-hello\\\"}\"",
        "\"{\\\"arg\\\":\\\"hello\\\"}\"",
        "\"{ testNonNullOutput }\"",
        "\"{\\\"testNonNullOutput\\\": 124}\"",
        "\"{ testNonNullInput(arg:123) }\"",
        "\"{\\\"testNonNullInput\\\": \\\"122\\\"}\"",
        "\"query ($arg: Int!) { testNonNullInput(arg:$arg) }\"",
        "\"{\\\"testNonNullInput\\\": \\\"122\\\"}\"",
        "\"{\\\"arg\\\":123}\"",
        "\"{ testOutput }\"",
        "\"{\\\"data\\\":{\\\"testOutput\\\": 124}}\"",
        "\"{ testInput(arg:123) }\"",
        "\"{\\\"data\\\":{\\\"testInput\\\": \\\"122\\\"}}\"",
        "\"query ($arg: Int!) { testInput(arg:$arg) }\"",
        "\"{\\\"arg\\\":123}\"",
        "\"{\\\"data\\\":{\\\"testInput\\\": \\\"122\\\"}}\"",
        "\"{ testOutputString }\"",
        "\"{\\\"data\\\":{\\\"testOutputString\\\": \\\"output-hello\\\"}}\"",
        "\"{ testInputString(arg:\\\"hello\\\") }\"",
        "\"{\\\"data\\\":{\\\"testInputString\\\": \\\"input-hello\\\"}}\"",
        "\"query ($arg: String!) { testInputString(arg:$arg) }\"",
        "\"{\\\"arg\\\":\\\"hello\\\"}\"",
        "\"{\\\"data\\\":{\\\"testInputString\\\": \\\"input-hello\\\"}}\"",
        "\"Query\"",
        "\"arg\"",
        "\"hello\"",
        "\"arg\"",
        "\"testOutput\"",
        "\"testInput\"",
        "\"arg\"",
        "\"arg\"",
        "\"testNonNullOutput\"",
        "\"testNonNullInput\"",
        "\"arg\"",
        "\"arg\"",
        "\"testOutputString\"",
        "\"hello\"",
        "\"testInputString\"",
        "\"arg\"",
        "\"arg\"",
        "\"Int\"",
        "\"String\"",
        "\"input-\"",
        "\"input-\"",
        "\"output-\""
    ],
    "variables": [
        "schema",
        "json",
        "schema",
        "json",
        "schema",
        "json",
        "schema",
        "json",
        "schema",
        "json",
        "schema",
        "json",
        "typeDefs",
        "schema",
        "ret"
    ],
    "comments": [
        "https://github.com/graphql-dotnet/graphql-dotnet/issues/2387"
    ],
    "docstrings": [],
    "functions": [
        "codefirst_output",
        "codefirst_parseliteral",
        "codefirst_parsevalue",
        "codefirst_output_string",
        "codefirst_parseliteral_string",
        "codefirst_parsevalue_string",
        "codefirst_nonnull_output",
        "codefirst_nonnull_parseliteral",
        "codefirst_nonnull_parsevalue",
        "schemafirst_output",
        "schemafirst_parseliteral",
        "schemafirst_parsevalue",
        "schemafirst_output_string",
        "schemafirst_parseliteral_string",
        "schemafirst_parsevalue_string",
        "Schema",
        "BuildSchemaFirst",
        "TestOutput",
        "TestInput",
        "TestOutputString",
        "TestInputString",
        "MySchema",
        "MyQuery",
        "MyIntGraphType",
        "ParseLiteral",
        "ParseValue",
        "Serialize",
        "MyStringGraphType",
        "ParseLiteral",
        "ParseValue",
        "Serialize"
    ],
    "classes": [
        "Issue2387_OverrideBuiltInScalars",
        "SchemaFirstRoot",
        "MySchema",
        "MyQuery",
        "MyIntGraphType",
        "MyStringGraphType"
    ]
}