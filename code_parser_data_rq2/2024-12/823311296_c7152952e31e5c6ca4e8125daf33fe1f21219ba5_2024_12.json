{
    "identifiers": [
        "typing",
        "cast",
        "numba",
        "core",
        "extending",
        "overload",
        "numba",
        "np",
        "ndarray",
        "to_fixed_tuple",
        "pytensor",
        "link",
        "numba",
        "dispatch",
        "basic",
        "numba_funcify",
        "numba_njit",
        "pytensor",
        "link",
        "numba",
        "dispatch",
        "vectorize_codegen",
        "_jit_options",
        "_vectorized",
        "encode_literals",
        "store_core_outputs",
        "pytensor",
        "link",
        "utils",
        "compile_function_src",
        "pytensor",
        "tensor",
        "TensorVariable",
        "get_vector_length",
        "pytensor",
        "tensor",
        "blockwise",
        "Blockwise",
        "BlockwiseWithCoreShape",
        "numba_funcify",
        "register",
        "op",
        "BlockwiseWithCoreShape",
        "node",
        "kwargs",
        "op",
        "fgraph",
        "apply_nodes",
        "Blockwise",
        "blockwise_node",
        "op",
        "blockwise_op",
        "core_op",
        "len",
        "blockwise_node",
        "inputs",
        "len",
        "blockwise_node",
        "outputs",
        "get_vector_length",
        "sh",
        "sh",
        "node",
        "inputs",
        "nin",
        "blockwise_op",
        "_create_dummy_core_node",
        "cast",
        "TensorVariable",
        "blockwise_node",
        "inputs",
        "numba_funcify",
        "core_op",
        "node",
        "core_node",
        "parent_node",
        "node",
        "fastmath",
        "_jit_options",
        "kwargs",
        "store_core_outputs",
        "core_op_fn",
        "nin",
        "nin",
        "nout",
        "nout",
        "blockwise_op",
        "batch_ndim",
        "node",
        "encode_literals",
        "inp",
        "broadcastable",
        "batch_ndim",
        "inp",
        "node",
        "inputs",
        "nin",
        "encode_literals",
        "broadcastable",
        "batch_ndim",
        "node",
        "outputs",
        "encode_literals",
        "dtype",
        "node",
        "outputs",
        "encode_literals",
        "i",
        "nout",
        "src",
        "i",
        "core_shapes_len",
        "i",
        "src",
        "numba_njit",
        "compile_function_src",
        "src",
        "global_env",
        "to_fixed_tuple",
        "inputs_and_core_shapes",
        "inputs_and_core_shapes",
        "nin",
        "inputs_and_core_shapes",
        "nin",
        "to_tuple",
        "core_shapes",
        "_vectorized",
        "core_op_fn",
        "input_bc_patterns",
        "output_bc_patterns",
        "output_dtypes",
        "inplace_pattern",
        "inputs",
        "tuple_core_shapes",
        "inputs_and_core_shapes",
        "NotImplementedError",
        "overload",
        "blockwise",
        "jit_options",
        "_jit_options",
        "inputs_and_core_shapes",
        "blockwise_wrapper",
        "blockwise"
    ],
    "literals": [
        "\"fastmath\"",
        "\"def to_tuple(core_shapes): return (\"",
        "f\"to_fixed_tuple(core_shapes[{i}], {core_shapes_len[i]}),\"",
        "\")\"",
        "\"to_tuple\"",
        "\"to_fixed_tuple\"",
        "\"Non-jitted BlockwiseWithCoreShape not implemented\""
    ],
    "variables": [
        "blockwise_node",
        "blockwise_op",
        "core_op",
        "nin",
        "nout",
        "core_shapes_len",
        "core_node",
        "core_op_fn",
        "core_op_fn",
        "batch_ndim",
        "input_bc_patterns",
        "output_bc_patterns",
        "output_dtypes",
        "inplace_pattern",
        "src",
        "to_tuple",
        "inputs",
        "core_shapes",
        "tuple_core_shapes"
    ],
    "comments": [
        "numba doesn't support nested literals right now...",
        "Numba does not allow a tuple generator in the Jitted function so we have to compile a helper to convert core_shapes into tuples",
        "Alternatively, add an Op that converts shape vectors into tuples, like we did for JAX",
        "constant_inputs",
        "size"
    ],
    "docstrings": [],
    "functions": [
        "numba_funcify_Blockwise",
        "blockwise_wrapper",
        "blockwise",
        "ov_blockwise"
    ],
    "classes": []
}