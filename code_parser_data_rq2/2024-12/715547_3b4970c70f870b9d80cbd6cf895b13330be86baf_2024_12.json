{
    "identifiers": [
        "DataEvent",
        "DataTable",
        "DataTableOptions",
        "U",
        "options",
        "options",
        "options",
        "uniqueKey",
        "uniqueKey",
        "objectEach",
        "options",
        "column",
        "columnName",
        "columnName",
        "column",
        "rowCount",
        "rowCount",
        "column",
        "rowCount",
        "DataTable",
        "rowCount",
        "rowCount",
        "objectEach",
        "column",
        "isArray",
        "column",
        "column",
        "rowCount",
        "columnName",
        "asReference",
        "DataTable",
        "columnName",
        "columnNames",
        "asReference",
        "DataTable",
        "columnNames",
        "columns",
        "columnName",
        "DataTable",
        "columns",
        "columnName",
        "columnName",
        "columns",
        "DataTable",
        "rowIndex",
        "columnNames",
        "DataTable",
        "columnNames",
        "key",
        "DataTableCore",
        "key",
        "rowIndex",
        "columnName",
        "column",
        "DataTable",
        "rowIndex",
        "eventDetail",
        "DataEvent",
        "columnName",
        "column",
        "rowIndex",
        "eventDetail",
        "columns",
        "DataTable",
        "rowIndex",
        "eventDetail",
        "DataEvent",
        "objectEach",
        "columns",
        "column",
        "columnName",
        "columnName",
        "column",
        "rowCount",
        "column",
        "rowCount",
        "eventDetail",
        "fireEvent",
        "uniqueKey",
        "row",
        "DataTable",
        "rowIndex",
        "insert",
        "eventDetail",
        "DataEvent",
        "insert",
        "rowIndex",
        "objectEach",
        "row",
        "cellValue",
        "columnName",
        "columns",
        "columnName",
        "eventDetail",
        "indexRowCount",
        "column",
        "insert",
        "column",
        "rowIndex",
        "cellValue",
        "column",
        "rowIndex",
        "cellValue",
        "columns",
        "columnName",
        "column",
        "indexRowCount",
        "indexRowCount",
        "eventDetail",
        "fireEvent",
        "uniqueKey",
        "DataTableCore",
        "DataTable",
        "index",
        "columnName",
        "index",
        "column",
        "DataTableCore"
    ],
    "literals": [
        "'use strict'",
        "'./DataEvent.js'",
        "'./DataTable.js'",
        "'./DataTableOptions.js'",
        "'../Core/Utilities.js'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'afterSetColumns'",
        "'afterSetRows'",
        "string",
        "string",
        "'deleteColumns'",
        "'afterDeleteColumns'",
        "'setColumns'",
        "'afterSetColumns'",
        "string",
        "'deleteRows'",
        "'afterDeleteRows'",
        "'setRows'",
        "'afterSetRows'",
        "string",
        "string",
        "''"
    ],
    "variables": [
        "U",
        "rowCount",
        "rowCount",
        "indexRowCount",
        "column"
    ],
    "comments": [
        "Not on typed array",
        "eslint-disable-next-line @typescript-eslint/no-unused-vars",
        "eslint-disable-next-line @typescript-eslint/no-unused-vars",
        "Keeps doclets above in JS file"
    ],
    "docstrings": [
        "*\n *\n *  (c) 2009-2024 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Authors:\n *  - Sophie Bremer\n *  - Gøran Slettemark\n *  - Torstein Hønsi\n *\n *",
        "*\n *\n *  Imports\n *\n *",
        "*\n *\n *  Class\n *\n *",
        "* Class to manage columns and rows in a table structure. It provides methods\n * to add, remove, and manipulate columns and rows, as well as to retrieve data\n * from specific cells.\n *\n * @class\n * @name Highcharts.DataTable\n *\n * @param {Highcharts.DataTableOptions} [options]\n * Options to initialize the new DataTable instance.",
        "* Constructs an instance of the DataTable class.\n     *\n     * @example\n     * const dataTable = new Highcharts.DataTableCore({\n     *   columns: {\n     *     year: [2020, 2021, 2022, 2023],\n     *     cost: [11, 13, 12, 14],\n     *     revenue: [12, 15, 14, 18]\n     *   }\n     * });\n\n     *\n     * @param {Highcharts.DataTableOptions} [options]\n     * Options to initialize the new DataTable instance.",
        "* Whether the ID was automatic generated or given in the constructor.\n         *\n         * @name Highcharts.DataTable#autoId\n         * @type {boolean}",
        "* ID of the table for indentification purposes.\n         *\n         * @name Highcharts.DataTable#id\n         * @type {string}",
        "*\n     *\n     *  Properties\n     *\n     *",
        "*\n     *\n     *  Functions\n     *\n     *",
        "* Applies a row count to the table by setting the `rowCount` property and\n     * adjusting the length of all columns.\n     *\n     * @private\n     * @param {number} rowCount The new row count.",
        "* Fetches the given column by the canonical column name. Simplified version\n     * of the full `DataTable.getRow` method, always returning by reference.\n     *\n     * @param {string} columnName\n     * Name of the column to get.\n     *\n     * @return {Highcharts.DataTableColumn|undefined}\n     * A copy of the column, or `undefined` if not found.",
        "* Retrieves all or the given columns. Simplified version of the full\n     * `DataTable.getColumns` method, always returning by reference.\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names to retrieve.\n     *\n     * @return {Highcharts.DataTableColumnCollection}\n     * Collection of columns. If a requested column was not found, it is\n     * `undefined`.",
        "* Retrieves the row at a given index.\n     *\n     * @param {number} rowIndex\n     * Row index to retrieve. First row has index 0.\n     *\n     * @param {Array<string>} [columnNames]\n     * Column names to retrieve.\n     *\n     * @return {Record<string, number|string|undefined>|undefined}\n     * Returns the row values, or `undefined` if not found.",
        "* Sets cell values for a column. Will insert a new column, if not found.\n     *\n     * @param {string} columnName\n     * Column name to set.\n     *\n     * @param {Highcharts.DataTableColumn} [column]\n     * Values to set in the column.\n     *\n     * @param {number} [rowIndex=0]\n     * Index of the first row to change. (Default: 0)\n     *\n     * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #setColumns\n     * @emits #afterSetColumns",
        "* * Sets cell values for multiple columns. Will insert new columns, if not\n     * found. Simplified version of the full `DataTable.setColumns`, limited to\n     * full replacement of the columns (undefined `rowIndex`).\n     *\n     * @param {Highcharts.DataTableColumnCollection} columns\n     * Columns as a collection, where the keys are the column names.\n     *\n     * @param {number} [rowIndex]\n     * Index of the first row to change. Keep undefined to reset.\n     *\n     * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #setColumns\n     * @emits #afterSetColumns",
        "* Sets cell values of a row. Will insert a new row if no index was\n     * provided, or if the index is higher than the total number of table rows.\n     * A simplified version of the full `DateTable.setRow`, limited to objects.\n     *\n     * @param {Record<string, number|string|undefined>} row\n     * Cell values to set.\n     *\n     * @param {number} [rowIndex]\n     * Index of the row to set. Leave `undefind` to add as a new row.\n     *\n     * @param {boolean} [insert]\n     * Whether to insert the row at the given index, or to overwrite the row.\n     *\n     * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n     * Custom information for pending events.\n     *\n     * @emits #afterSetRows",
        "*\n *\n *  Class Namespace\n *\n *",
        "* Additionally it provides necessary types for events.",
        "*\n     *\n     *  Declarations\n     *\n     *",
        "* Possible value types for a table cell.",
        "* Array of table cells in vertical expansion.",
        "* Collection of columns, where the key is the column name and\n     * the value is an array of column values.",
        "* Event object for column-related events.",
        "* All information objects of DataTable events.",
        "* Array of table cells in horizontal expansion. Index of the array is the\n     * index of the column names.",
        "* Event object for row-related events.",
        "* Object of row values, where the keys are the column names.",
        "*\n *\n *  Default Export\n *\n *",
        "*\n *\n *  API Declarations\n *\n *",
        "* A column of values in a data table.\n * @typedef {Array<boolean|null|number|string|undefined>} Highcharts.DataTableColumn",
        "* A collection of data table columns defined by a object where the key is the\n * column name and the value is an array of the column values.\n * @typedef {Record<string, Highcharts.DataTableColumn>} Highcharts.DataTableColumnCollection",
        "* Options for the `DataTable` or `DataTableCore` classes.\n * @interface Highcharts.DataTableOptions",
        "* The column options for the data table. The columns are defined by an object\n * where the key is the column ID and the value is an array of the column\n * values.\n *\n * @name Highcharts.DataTableOptions.columns\n * @type {Highcharts.DataTableColumnCollection|undefined}",
        "* Custom ID to identify the new DataTable instance.\n *\n * @name Highcharts.DataTableOptions.id\n * @type {string|undefined}"
    ],
    "functions": [
        "applyRowCount",
        "getColumn",
        "getColumns",
        "getRow",
        "setColumn",
        "setColumns",
        "setRow"
    ],
    "classes": [
        "DataTableCore"
    ]
}