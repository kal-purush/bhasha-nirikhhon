{
    "identifiers": [
        "annotations",
        "typing_extensions",
        "Annotated",
        "Self",
        "pydantic",
        "ConfigDict",
        "Field",
        "BaseModel",
        "BeforeValidator",
        "model_validator",
        "numpy",
        "np",
        "pandas",
        "pd",
        "torch",
        "loguru",
        "logger",
        "meteors",
        "exceptions",
        "ShapeMismatchError",
        "shap",
        "base_shap",
        "data",
        "np",
        "ndarray",
        "torch",
        "Tensor",
        "pd",
        "DataFrame",
        "np",
        "ndarray",
        "isinstance",
        "data",
        "np",
        "ndarray",
        "data",
        "isinstance",
        "data",
        "pd",
        "DataFrame",
        "isinstance",
        "data",
        "pd",
        "Series",
        "data",
        "to_numpy",
        "isinstance",
        "data",
        "torch",
        "Tensor",
        "data",
        "numpy",
        "np",
        "array",
        "data",
        "e",
        "data",
        "e",
        "np",
        "issubdtype",
        "converted_data",
        "dtype",
        "np",
        "number",
        "converted_data",
        "dtype",
        "np",
        "reshape",
        "converted_data",
        "len",
        "converted_data",
        "shape",
        "converted_data",
        "converted_data",
        "explanation",
        "base_shap",
        "Explanation",
        "base_shap",
        "Explanation",
        "np",
        "expand_dims",
        "explanation",
        "values",
        "axis",
        "np",
        "expand_dims",
        "explanation",
        "base_values",
        "axis",
        "np",
        "expand_dims",
        "explanation",
        "data",
        "axis",
        "explanation",
        "BaseModel",
        "Annotated",
        "np",
        "ndarray",
        "BeforeValidator",
        "ensure_data_type_and_reshape",
        "Field",
        "description",
        "Annotated",
        "base_shap",
        "Explanation",
        "Field",
        "description",
        "Annotated",
        "Field",
        "description",
        "ConfigDict",
        "arbitrary_types_allowed",
        "data",
        "shape",
        "explanations",
        "shape",
        "explanation_shape",
        "data_shape",
        "len",
        "explanation_shape",
        "len",
        "data_shape",
        "explanation_shape",
        "data_shape",
        "logger",
        "debug",
        "ShapeMismatchError",
        "data_shape",
        "explanations",
        "shape",
        "len",
        "explanation_shape",
        "len",
        "data_shape",
        "explanation_shape",
        "data_shape",
        "data_shape",
        "logger",
        "debug",
        "logger",
        "debug",
        "add_dimension_to_local_explanation",
        "explanations",
        "explanations",
        "shape",
        "data_shape",
        "len",
        "explanation_shape",
        "len",
        "data_shape",
        "logger",
        "debug",
        "add_dimension_to_local_explanation",
        "explanations",
        "explanations",
        "shape",
        "data_shape",
        "ShapeMismatchError",
        "data_shape",
        "explanation_shape",
        "model_validator",
        "mode",
        "Self",
        "_validate_shapes",
        "property",
        "explanations",
        "shape",
        "data",
        "shape",
        "explanations",
        "values",
        "shape",
        "property",
        "len",
        "data",
        "shape",
        "data",
        "shape",
        "property",
        "pd",
        "Index",
        "explanations",
        "feature_names"
    ],
    "literals": [
        "f\"Expected NumPy array | Torch Tensor | Pandas DataFrame as data, but got {type(data)} and failed to convert to NumPy array\"",
        "f\"Expected numeric data, but got {converted_data.dtype}\"",
        "\"A numpy array containing the input data.\"",
        "\"A numpy array containing the SHAP explanations.\"",
        "\"The method used to generate the explanation.\"",
        "\"Detected explanation for multiple targets based on the explanation shape validation.\"",
        "\"Shape of the explanations does not match the shape of the input data. \"",
        "f\"Expected {data_shape}, but got {self.explanations.shape}\"",
        "\"Detected explanation for multiple targets based on the explanation shape validation.\"",
        "\"This is a local explanation for multiple targets. Adding a new axis to the explanation.\"",
        "\"Detected local explanation for a single target. Removing the last axis from the explanation.\"",
        "\"Shape of the explanations does not match the shape of the input data. \"",
        "f\"Expected {data_shape}, but got {explanation_shape}\"",
        "\"after\""
    ],
    "variables": [
        "converted_data",
        "converted_data",
        "converted_data",
        "converted_data",
        "converted_data",
        "converted_data",
        "explanation",
        "values",
        "explanation",
        "base_values",
        "explanation",
        "data",
        "data",
        "explanations",
        "explanation_method",
        "model_config",
        "data_shape",
        "explanation_shape",
        "explanations",
        "explanations"
    ],
    "comments": [
        "",
        "VALIDATIONS ###########################",
        "",
        "reshaping the data if it is one-dimensional",
        "",
        "EXPLANATION ###########################",
        "",
        "no need to validate",
        "the explanation has one more dimension than the data - the multitarget explanation, no local explanation"
    ],
    "docstrings": [
        "\"\"\"\n    Ensures that the input data is converted to a NumPy ndarray.\n    If the input is one dimensional, it reshapes it to a two-dimensional array.\n\n    Args:\n        data (np.ndarray | torch.Tensor | pd.DataFrame): The input data which can be a NumPy ndarray,\n            a PyTorch tensor, or a Pandas DataFrame/Series. The data type should be numeric\n\n    Returns:\n        np.ndarray: The input data converted to a NumPy ndarray.\n\n    \"\"\"",
        "\"\"\"\n    Adds a new axis to the SHAP explanation for a local explanation\n    \"\"\"",
        "\"\"\"Represents an object that contains SHAP explanations for a model.\n\n    Args:\n        data (np.ndarray): a numpy array containing the input data.\n        explanations (np.ndarray): a numpy array containing the SHAP explanations.\n        If the model outputs a single value, the shape of the array should be equal to the shape of the input data.\n        In case the model outputs multiple values, the last dimension of the array should be equal to the number of\n        outputs and the rest of the dimensions should be equal to the input data.\n        explanation_method (str): the method used to generate the explanation.\n        feature_names (list[str]): a list of feature names.\n        aggregations (list[list[str]] | list[str]): a list of feature aggregations.\n    \"\"\"",
        "\"\"\"\n        Validates that the shape of the explanations matches the shape of the input data.\n\n        This method checks if the shape of `self.explanations` matches the shape of `self.data`.\n        If the shapes do not match, it checks if the explanation is multitarget - the last dimension of the\n        explanation will not match the data shape. In case the explanation is local - the explanation is one\n        axis shorter, it unsquezees it - adds a new axis in the beginning of the explanation.\n        Otherwise, it raises a `ShapeMismatchError`\n        Raises:\n            ShapeMismatchError: If the shape of the explanations does not match the shape of the input data,\n                the mismatch is not only in the last dimension and cannot unsqueeze the data,\n                in case the explanation is local.\n        \"\"\"",
        "\"\"\"\n        Validates the the explanations.\n\n        Returns:\n            Self: The instance of the class for method chaining.\n        \"\"\"",
        "\"\"\"\n        Number of target dimensions in the explanations. It is equal to the number of outputs of the model. For instance,\n        in scope of the HYPERVIEW Challenge, the EAGLEEYES model has 4 outputs - it predicts 4 different soil parameters.\n        For explanations of this model, the `num_target_outputs` property will equal to 4.\n        Returns:\n            int: number of target dimensions in the explanations.\n        \"\"\"",
        "\"\"\"check if the explanation is for a single observation - a local explanation.\n        Returns:\n            bool: True if the explanation is for a single observation, False otherwise.\n        \"\"\"",
        "\"\"\"List of feature names.\n\n        Returns:\n            list[str] | pd.Index | None: list of feature names.\n        \"\"\""
    ],
    "functions": [
        "ensure_data_type_and_reshape",
        "add_dimension_to_local_explanation",
        "_validate_shapes",
        "validate_explanations",
        "num_target_outputs",
        "is_local_explanation",
        "feature_names"
    ],
    "classes": [
        "SHAPExplanation"
    ]
}