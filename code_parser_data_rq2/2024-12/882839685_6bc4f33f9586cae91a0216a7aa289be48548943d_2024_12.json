{
    "identifiers": [
        "json",
        "sys",
        "solcx",
        "web3",
        "Web3",
        "HTTPProvider",
        "web3",
        "middleware",
        "ExtraDataToPOAMiddleware",
        "errors",
        "SolidityCompilationError",
        "SolidityDeploymentError",
        "solcx",
        "install_solc",
        "_solc_version",
        "solcx",
        "set_solc_version",
        "_solc_version",
        "blockchain_address",
        "gas_limit",
        "Web3",
        "HTTPProvider",
        "blockchain_address",
        "web3",
        "middleware_onion",
        "inject",
        "ExtraDataToPOAMiddleware",
        "layer",
        "gas_limit",
        "account_pk",
        "web3",
        "eth",
        "web3",
        "eth",
        "account",
        "from_key",
        "account_pk",
        "account_pk",
        "contract_path",
        "dump_compiled",
        "open",
        "contract_path",
        "file",
        "file",
        "read",
        "solcx",
        "compile_source",
        "contract_code",
        "output_values",
        "dump_compiled",
        "compiled_contract",
        "keys",
        "compiled_contract",
        "keys",
        "split",
        "compiled_contract",
        "popitem",
        "contract_interface",
        "json",
        "dumps",
        "abi",
        "open",
        "contract_path",
        "split",
        "abi_file",
        "abi_file",
        "write",
        "abi",
        "contract_interface",
        "open",
        "contract_path",
        "split",
        "bytecode_file",
        "bytecode_file",
        "write",
        "bytecode",
        "compiled_contract",
        "FileNotFoundError",
        "FileNotFoundError",
        "contract_path",
        "e",
        "SolidityCompilationError",
        "contract_path",
        "e",
        "contract_path",
        "args",
        "open",
        "contract_path",
        "split",
        "abi_file",
        "abi_file",
        "read",
        "open",
        "contract_path",
        "split",
        "bytecode_file",
        "bytecode_file",
        "read",
        "web3",
        "eth",
        "contract",
        "abi",
        "abi",
        "bytecode",
        "bytecode",
        "contract",
        "args",
        "build_transaction",
        "web3",
        "eth",
        "default_account",
        "address",
        "web3",
        "eth",
        "gas_price",
        "gas_limit",
        "web3",
        "eth",
        "get_transaction_count",
        "web3",
        "eth",
        "default_account",
        "address",
        "web3",
        "eth",
        "send_raw_transaction",
        "web3",
        "eth",
        "account",
        "sign_transaction",
        "tx",
        "account_private_key",
        "raw_transaction",
        "web3",
        "eth",
        "wait_for_transaction_receipt",
        "tx_hash",
        "tx_receipt",
        "FileNotFoundError",
        "FileNotFoundError",
        "contract_path",
        "e",
        "SolidityDeploymentError",
        "contract_path",
        "e",
        "sys",
        "argv",
        "SolidityDeployer",
        "deployer",
        "load_account",
        "user_pk",
        "deployer",
        "compile_contract",
        "dump_compiled",
        "deployer",
        "deploy_contract",
        "contract_address"
    ],
    "literals": [
        "\"0.8.17\"",
        "'r'",
        "'abi'",
        "'bin'",
        "':'",
        "'abi'",
        "f'{contract_path.split(\".\")[0]}.abi'",
        "\".\"",
        "'w'",
        "'bin'",
        "f'{contract_path.split(\".\")[0]}.bin'",
        "\".\"",
        "'w'",
        "f'Contract file {contract_path} not found'",
        "f'Error compiling contract {contract_path}: {e}'",
        "f'{contract_path.split(\".\")[0]}.abi'",
        "\".\"",
        "'r'",
        "f'{contract_path.split(\".\")[0]}.bin'",
        "\".\"",
        "'r'",
        "'from'",
        "'gasPrice'",
        "'gas'",
        "'nonce'",
        "'contractAddress'",
        "f'Contract file {contract_path} not found'",
        "f'Error deploying contract {contract_path}: {e}'",
        "\"__main__\"",
        "'http://localhost:8555'",
        "'contracts/KeycloakLogs.sol'",
        "\"Contract compiled\"",
        "'contracts/KeycloakLogs.sol'",
        "f'Contract deployed at address: {contract_address}'"
    ],
    "variables": [
        "_solc_version",
        "web3",
        "gas_limit",
        "account_private_key",
        "default_account",
        "account_private_key",
        "contract_code",
        "compiled_contract",
        "contract_raw_name",
        "contract_name",
        "contract_id",
        "contract_interface",
        "abi",
        "abi",
        "bytecode",
        "abi",
        "bytecode",
        "contract",
        "tx",
        "tx_hash",
        "tx_receipt",
        "user_pk",
        "deployer",
        "contract",
        "contract_address"
    ],
    "comments": [
        "dump json abi",
        "send transaction that deploys the contract signed with the account private key",
        "wait for the transaction to be mined",
        "get arguments"
    ],
    "docstrings": [
        "\"\"\"\n    Deploys a Solidity contract to the blockchain. generating the ABI and bytecode\n    \"\"\"",
        "\"\"\"\n        Loads an account to the Web3 instance.\n        :param account_pk: str - the private key of the account\n        \"\"\"",
        "\"\"\"\n        Compiles a Solidity contract to generate the ABI and bytecode.\n        Also, can save the contract's ABI and bytecode to the same directory as the contract.\n        :param contract_path: str - the path to the Solidity contract\n        :param dump_compiled: bool - whether to save the compiled contract to a file\n        :raises FileNotFoundError: if the contract file is not found\n        :raises SolidityCompilationError: if the contract compilation fails\n        :return: dict - the compiled contract containing the ABI and bytecode\n        \"\"\"",
        "\"\"\"\n        Deploys a Solidity contract to the blockchain.\n        :param contract_path: str - the path to the Solidity contract\n        :param args: the arguments to pass to the contract constructor\n        :return: str - the contract address\n        :raises FileNotFoundError: if the contract file is not found\n        :raises SolidityCompilationError: if the contract compilation fails\n        \"\"\""
    ],
    "functions": [
        "load_account",
        "compile_contract",
        "deploy_contract"
    ],
    "classes": [
        "SolidityDeployer"
    ]
}