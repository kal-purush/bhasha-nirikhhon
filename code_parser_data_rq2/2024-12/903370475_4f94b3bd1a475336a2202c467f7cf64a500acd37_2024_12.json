{
    "identifiers": [
        "numpy",
        "np",
        "pandas",
        "pd",
        "seaborn",
        "sns",
        "matplotlib",
        "pyplot",
        "plt",
        "sklearn",
        "metrics",
        "r2_score",
        "accuracy_score",
        "classification_report",
        "precision_recall_fscore_support",
        "scipy",
        "stats",
        "chi2_contingency",
        "statsmodels",
        "stats",
        "outliers_influence",
        "variance_inflation_factor",
        "sklearn",
        "model_selection",
        "train_test_split",
        "sklearn",
        "ensemble",
        "RandomForestClassifier",
        "warnings",
        "os",
        "pd",
        "read_excel",
        "pd",
        "read_excel",
        "col",
        "df1",
        "columns",
        "df1",
        "df1",
        "col",
        "shape",
        "col",
        "df1",
        "df1",
        "col",
        "shape",
        "KeyError",
        "col",
        "df1",
        "df1",
        "all",
        "axis",
        "col",
        "df2",
        "columns",
        "df2",
        "df2",
        "col",
        "shape",
        "col",
        "df2",
        "df2",
        "col",
        "shape",
        "col",
        "df2",
        "columns",
        "df2",
        "df2",
        "col",
        "shape",
        "cols_to_drop",
        "append",
        "col",
        "df2",
        "drop",
        "cols_to_drop",
        "axis",
        "col",
        "df2",
        "columns",
        "df2",
        "loc",
        "df2",
        "col",
        "pd",
        "merge",
        "df1",
        "df2",
        "how",
        "on",
        "col",
        "df",
        "columns",
        "df",
        "col",
        "dtype",
        "categorical_cols",
        "append",
        "col",
        "col",
        "value",
        "value",
        "categorical_cols",
        "value",
        "chi2_contingency",
        "pd",
        "crosstab",
        "df",
        "col",
        "df",
        "col",
        "p_val",
        "i",
        "df",
        "columns",
        "df",
        "i",
        "dtype",
        "i",
        "numerical_columns",
        "append",
        "i",
        "df",
        "numerical_columns",
        "vif_data",
        "shape",
        "i",
        "total_columns",
        "variance_inflation_factor",
        "vif_data",
        "column_index",
        "vif_data",
        "columns",
        "column_index",
        "vif_value",
        "vif_value",
        "columns_to_be_kept",
        "append",
        "numerical_columns",
        "i",
        "column_index",
        "vif_data",
        "drop",
        "numerical_columns",
        "i",
        "axis",
        "scipy",
        "stats",
        "f_oneway",
        "i",
        "columns_to_be_kept",
        "df",
        "i",
        "df",
        "value",
        "value",
        "group",
        "a",
        "b",
        "group",
        "value",
        "value",
        "group",
        "a",
        "b",
        "group",
        "value",
        "value",
        "group",
        "a",
        "b",
        "group",
        "value",
        "value",
        "group",
        "a",
        "b",
        "group",
        "f_oneway",
        "group_P1",
        "group_P2",
        "group_P3",
        "group_P4",
        "p_value",
        "columns_to_be_kept_after_anova",
        "append",
        "i",
        "len",
        "columns_to_be_kept_after_anova",
        "categorical_cols",
        "columns_to_be_kept_after_anova",
        "df",
        "features",
        "df",
        "apply",
        "x",
        "x",
        "x",
        "x",
        "x",
        "pd",
        "get_dummies",
        "df",
        "columns",
        "col",
        "col",
        "categorical_cols",
        "col",
        "df_encoded",
        "Approved_Flag",
        "df_encoded",
        "drop",
        "columns",
        "train_test_split",
        "x",
        "y",
        "test_size",
        "random_state",
        "RandomForestClassifier",
        "n_estimators",
        "random_state",
        "rf_classifier",
        "fit",
        "x_train",
        "y_train",
        "rf_classifier",
        "predict",
        "x_test",
        "accuracy_score",
        "y_test",
        "y_pred",
        "accuracy",
        "precision_recall_fscore_support",
        "y_test",
        "y_pred",
        "i",
        "v",
        "v",
        "precision",
        "i",
        "recall",
        "i",
        "f1_score",
        "i",
        "x_train",
        "columns",
        "rf_classifier",
        "feature_importances_",
        "sorted",
        "debug",
        "key",
        "x",
        "x",
        "reverse",
        "feature",
        "importance",
        "debug_sorted",
        "feature",
        "importance",
        "xgboost",
        "xgb",
        "sklearn",
        "preprocessing",
        "LabelEncoder",
        "xgb",
        "XGBClassifier",
        "objective",
        "num_class",
        "df_encoded",
        "df_encoded",
        "drop",
        "axis",
        "LabelEncoder",
        "label_encoder",
        "fit_transform",
        "y",
        "train_test_split",
        "x",
        "y_encoded",
        "test_size",
        "random_state",
        "xgb_classifier",
        "fit",
        "x_train",
        "y_train",
        "xgb_classifier",
        "predict",
        "x_test",
        "accuracy_score",
        "y_test",
        "y_pred",
        "accuracy",
        "precision_recall_fscore_support",
        "y_test",
        "y_pred",
        "i",
        "v",
        "v",
        "precision",
        "i",
        "recall",
        "i",
        "f1_score",
        "i",
        "sklearn",
        "tree",
        "DecisionTreeClassifier",
        "DecisionTreeClassifier",
        "dt_model",
        "fit",
        "x_train",
        "y_train",
        "dt_model",
        "predict",
        "x_test",
        "accuracy_score",
        "y_test",
        "y_pred",
        "accuracy",
        "precision_recall_fscore_support",
        "y_test",
        "y_pred",
        "i",
        "v",
        "v",
        "precision",
        "i",
        "recall",
        "i",
        "f1_score",
        "i",
        "sklearn",
        "model_selection",
        "GridSearchCV",
        "xgb",
        "XGBClassifier",
        "objective",
        "num_class",
        "GridSearchCV",
        "estimator",
        "model",
        "param_grid",
        "params_grid",
        "cv",
        "scoring",
        "verbose",
        "grid",
        "fit",
        "x_train",
        "y_train",
        "grid",
        "best_estimator_",
        "best_model",
        "predict",
        "x_test",
        "accuracy_score",
        "best_model",
        "predict",
        "x_train",
        "y_train",
        "accuracy",
        "accuracy_score",
        "y_test",
        "y_pred",
        "accuracy",
        "precision_recall_fscore_support",
        "y_test",
        "y_pred",
        "i",
        "v",
        "v",
        "precision",
        "i",
        "recall",
        "i",
        "f1_score",
        "i",
        "pd",
        "read_excel",
        "columns_to_be_kept_after_anova",
        "df_unseen",
        "features",
        "df_unseen",
        "apply",
        "x",
        "x",
        "x",
        "x",
        "x",
        "pd",
        "get_dummies",
        "df_unseen",
        "columns",
        "col",
        "col",
        "categorical_cols",
        "col",
        "best_model",
        "predict",
        "df_unseen_encoded"
    ],
    "literals": [
        "'/Users/propelld/Desktop/DS/Projects/Credit-Risk-Modelling/case_study1.xlsx'",
        "'/Users/propelld/Desktop/DS/Projects/Credit-Risk-Modelling/case_study2.xlsx'",
        "f\"{col} {df1[df1[col] == -99999].shape[0]}\"",
        "f\"Column '{col}' not found in df1.\"",
        "f\"{col} {df2[df2[col] == -99999].shape[0]}\"",
        "'inner'",
        "'PROSPECTID'",
        "'object'",
        "'Approved_Flag'",
        "'Approved_Flag'",
        "'---'",
        "'object'",
        "'PROSPECTID'",
        "'Approved_Flag'",
        "'-->'",
        "'Approved_Flag'",
        "'P1'",
        "'P2'",
        "'P3'",
        "'P4'",
        "'MARITALSTATUS'",
        "'EDUCATION'",
        "'GENDER'",
        "'last_prod_enq2'",
        "'first_prod_enq2'",
        "'Approved_Flag'",
        "'EDUCATION'",
        "'EDUCATION'",
        "'SSC'",
        "'OTHERS'",
        "'12TH'",
        "'GRADUATE'",
        "'UNDER GRADUATE'",
        "'PROFESSIONAL'",
        "'POST-GRADUATE'",
        "'EDUCATION'",
        "'Approved_Flag'",
        "'Approved_Flag'",
        "f\"Accuracy : {accuracy}\"",
        "'p1'",
        "'p2'",
        "'p3'",
        "'p4'",
        "f\"Class {v}\"",
        "f\"Precision - {precision[i]}\"",
        "f\"Recall - {recall[i]}\"",
        "f\"F1_Score - {f1_score[i]}\"",
        "f\"{feature}: {importance:.4f}\"",
        "'multi:softmax'",
        "'Approved_Flag'",
        "'Approved_Flag'",
        "f'Accuracy: {accuracy:.2f}'",
        "'p1'",
        "'p2'",
        "'p3'",
        "'p4'",
        "f\"Class {v}\"",
        "f\"Precision : {precision[i]}\"",
        "f\"Recall : {recall[i]}\"",
        "f\"F1 Score : {f1_score[i]}\"",
        "f'Accuracy: {accuracy:.2f}'",
        "'p1'",
        "'p2'",
        "'p3'",
        "'p4'",
        "f\"Class {v}\"",
        "f\"Precision : {precision[i]}\"",
        "f\"Recall : {recall[i]}\"",
        "f\"F1 Score : {f1_score[i]}\"",
        "'colsample_bytree'",
        "'learning_rate'",
        "'max_depth'",
        "'alpha'",
        "'n_estimators'",
        "'multi:softmax'",
        "'accuracy'",
        "f'Train Accuracy: {accuracy:.2f}'",
        "f'Test Accuracy: {accuracy:.2f}'",
        "'p1'",
        "'p2'",
        "'p3'",
        "'p4'",
        "f\"Class {v}\"",
        "f\"Precision : {precision[i]}\"",
        "f\"Recall : {recall[i]}\"",
        "f\"F1 Score : {f1_score[i]}\"",
        "'/Users/propelld/Desktop/DS/Projects/Credit-Risk-Modelling/Unseen_Dataset.xlsx'",
        "'MARITALSTATUS'",
        "'EDUCATION'",
        "'GENDER'",
        "'last_prod_enq2'",
        "'first_prod_enq2'",
        "'EDUCATION'",
        "'EDUCATION'",
        "'SSC'",
        "'OTHERS'",
        "'12TH'",
        "'GRADUATE'",
        "'UNDER GRADUATE'",
        "'PROFESSIONAL'",
        "'POST-GRADUATE'",
        "'EDUCATION'",
        "'Approved_Flag'"
    ],
    "variables": [
        "df1",
        "df2",
        "df1",
        "cols_to_drop",
        "df2",
        "df2",
        "df",
        "categorical_cols",
        "chi2",
        "p_val",
        "_",
        "_",
        "numerical_columns",
        "vif_data",
        "total_columns",
        "columns_to_be_kept",
        "column_index",
        "vif_value",
        "column_index",
        "vif_data",
        "columns_to_be_kept_after_anova",
        "a",
        "b",
        "group_P1",
        "group_P2",
        "group_P3",
        "group_P4",
        "f_statistic",
        "p_value",
        "features",
        "df",
        "df",
        "df_encoded",
        "y",
        "x",
        "x_train",
        "x_test",
        "y_train",
        "y_test",
        "rf_classifier",
        "y_pred",
        "accuracy",
        "precision",
        "recall",
        "f1_score",
        "_",
        "debug",
        "debug_sorted",
        "xgb_classifier",
        "y",
        "x",
        "label_encoder",
        "y_encoded",
        "x_train",
        "x_test",
        "y_train",
        "y_test",
        "y_pred",
        "accuracy",
        "precision",
        "recall",
        "f1_score",
        "_",
        "dt_model",
        "y_pred",
        "accuracy",
        "precision",
        "recall",
        "f1_score",
        "_",
        "params_grid",
        "model",
        "grid",
        "best_model",
        "y_pred",
        "accuracy",
        "accuracy",
        "precision",
        "recall",
        "f1_score",
        "_",
        "df_unseen",
        "features",
        "df_unseen",
        "df_unseen",
        "df_unseen_encoded",
        "df_unseen_predicted"
    ],
    "comments": [
        "Dropping columns",
        "Dropping rows",
        "Categorical and Numerical",
        "To find out which categorical variables are important",
        "Chi2 for categorical variable relationship with categorical variable",
        "All categorical variables have p_val <0.05 -> all are important",
        "NOW MOVING ON TO NUMERICAL FEATURES",
        "Before checking their dependency on dependent variable.",
        "First check if there is any multicollinearity in any of these variables? How to check",
        "VIF (Variation Inflation Factor)",
        "ANOVA TEST",
        "To check each numerical variable association with target variable",
        "Feature selection is done for categorical and numerical columns",
        "Listing all final features",
        "Only Education as ordinal",
        "Machine Learning model fitting",
        "Why not scaling?",
        "First build first model without scaling/standardization and see how model is performing, whether scaling is even needed",
        "1. Random Forrest",
        "Sort by importance",
        "Display the sorted feature importances",
        "2. XGBOOST",
        "3. Decision Tree",
        "Try Finetuning on XGBoost",
        "1. Feature Engineering",
        "2. Hyperparameter tuning",
        "Hyperparameter tuning",
        "Only Education as ordinal"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}