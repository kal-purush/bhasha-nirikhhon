{
    "identifiers": [
        "datetime",
        "os",
        "sys",
        "zipfile",
        "pathlib",
        "Path",
        "shutil",
        "make_archive",
        "unittest",
        "mock",
        "patch",
        "urllib",
        "parse",
        "unquote",
        "urlparse",
        "datalad",
        "consts",
        "PRE_INIT_COMMIT_SHA",
        "datalad",
        "core",
        "local",
        "repo",
        "repo_from_path",
        "datalad",
        "runner",
        "CommandError",
        "NoCapture",
        "StdOutCapture",
        "datalad",
        "support",
        "annexrepo",
        "AnnexRepo",
        "datalad",
        "support",
        "exceptions",
        "CapturedException",
        "datalad",
        "support",
        "gitrepo",
        "GitRepo",
        "datalad",
        "support",
        "constraints",
        "EnsureInt",
        "datalad",
        "utils",
        "rmtree",
        "refs_key",
        "prefix",
        "loc",
        "repo_export_key",
        "prefix",
        "loc",
        "EnsureInt",
        "gitdir",
        "remote",
        "url",
        "instream",
        "sys",
        "stdin",
        "outstream",
        "sys",
        "stdout",
        "errstream",
        "sys",
        "stderr",
        "GitRepo",
        "gitdir",
        "get_initremote_params_from_url",
        "url",
        "remote",
        "Path",
        "gitdir",
        "remote",
        "resolve",
        "workdir",
        "_repoannexdir",
        "exists",
        "rmtree",
        "_repoannexdir",
        "ignore_errors",
        "workdir",
        "instream",
        "outstream",
        "errstream",
        "workdir",
        "mkdir",
        "parents",
        "exist_ok",
        "property",
        "_repoannex",
        "_repoannex",
        "_ensure_workdir",
        "repo_from_path",
        "_repoannexdir",
        "ValueError",
        "GitRepo",
        "_repoannexdir",
        "create",
        "GitRepo",
        "is_valid",
        "_repoannexdir",
        "bare",
        "ra",
        "call_git",
        "ra",
        "call_git",
        "AnnexRepo",
        "_repoannexdir",
        "initremote_params",
        "v",
        "v",
        "initremote_params",
        "v",
        "startswith",
        "len",
        "baseurl",
        "ValueError",
        "all",
        "p",
        "p",
        "startswith",
        "p",
        "initremote_params",
        "ValueError",
        "baseurl",
        "key",
        "kinfo",
        "xdlra_key_locations",
        "items",
        "ra",
        "call_git",
        "key",
        "baseurl",
        "kinfo",
        "initremote_params",
        "baseurl",
        "kinfo",
        "key",
        "key",
        "ra",
        "call_annex",
        "p",
        "p",
        "initremote_params",
        "p",
        "startswith",
        "ip",
        "ip",
        "internal_parameters",
        "ra",
        "config",
        "reload",
        "initremote_params",
        "make_export_tree",
        "ra",
        "CommandError",
        "ValueError",
        "rmtree",
        "ra",
        "path",
        "ignore_errors",
        "ra",
        "ra",
        "property",
        "_mirrorrepo",
        "_mirrorrepo",
        "_ensure_workdir",
        "GitRepo",
        "is_valid",
        "_mirrorrepodir",
        "existing_repo",
        "GitRepo",
        "_mirrorrepodir",
        "bare",
        "mr",
        "replace_mirrorrepo_from_remote_deposit_if_needed",
        "get_remote_refs",
        "replace_mirrorrepo_from_remote_deposit",
        "GitRepo",
        "_mirrorrepodir",
        "create",
        "existing_repo",
        "bare",
        "log",
        "mr",
        "mr",
        "args",
        "level",
        "options",
        "get",
        "level",
        "args",
        "file",
        "errstream",
        "msg",
        "msg",
        "end",
        "file",
        "outstream",
        "flush",
        "log",
        "remote_name",
        "initremote_params",
        "line",
        "instream",
        "log",
        "repr",
        "line",
        "level",
        "line",
        "line",
        "send",
        "line",
        "log",
        "send",
        "sorted",
        "mirrorrepo",
        "for_each_ref_",
        "key",
        "x",
        "x",
        "mirrorrepo",
        "_git_runner",
        "run",
        "mirrorrepo",
        "path",
        "protocol",
        "NoCapture",
        "sorted",
        "mirrorrepo",
        "for_each_ref_",
        "key",
        "x",
        "x",
        "pre_refs",
        "post_refs",
        "post_refs",
        "get_remote_refs",
        "replace_remote_deposit_from_mirrorrepo",
        "log",
        "pre_refs",
        "mirrorrepo",
        "call_git",
        "repo",
        "call_git",
        "remote_name",
        "post_refs",
        "repo",
        "call_git",
        "remote_name",
        "line",
        "log",
        "send",
        "mirrorrepo",
        "_git_runner",
        "run",
        "mirrorrepo",
        "path",
        "protocol",
        "NoCapture",
        "line",
        "startswith",
        "line",
        "split",
        "maxsplit",
        "key",
        "support_githelper_options",
        "send",
        "options",
        "support_githelper_options",
        "key",
        "value",
        "rstrip",
        "send",
        "ValueError",
        "e",
        "e",
        "replace",
        "log",
        "line",
        "excstr",
        "send",
        "excstr",
        "log",
        "line",
        "log",
        "mirrorrepo",
        "repoannex",
        "mirrorrepo",
        "call_git",
        "log",
        "repoannex",
        "call_annex",
        "patch",
        "UncompressedZipFile",
        "initremote_params",
        "LZMAZipFile",
        "make_archive",
        "workdir",
        "root_dir",
        "mirrorrepo",
        "path",
        "base_dir",
        "os",
        "curdir",
        "repoannex",
        "call_annex",
        "archive_file",
        "workdir",
        "refs_file",
        "write_text",
        "_format_refs",
        "mirrorrepo",
        "log",
        "refs_file",
        "read_text",
        "log",
        "repoannex",
        "call_annex",
        "refs_key",
        "refs_file",
        "initremote_params",
        "log",
        "repoannex",
        "call_annex",
        "PRE_INIT_COMMIT_SHA",
        "e",
        "CapturedException",
        "e",
        "log",
        "repoannex",
        "call_annex",
        "exporttree",
        "log",
        "repoannex",
        "call_annex",
        "log",
        "repoannex",
        "call_annex",
        "get_mirror_refs",
        "log",
        "get_remote_refs",
        "get_mirror_refs",
        "remote_refs",
        "remote_refs",
        "mirror_refs",
        "log",
        "repr",
        "remote_refs",
        "repr",
        "mirror_refs",
        "replace_mirrorrepo_from_remote_deposit",
        "remote_refs",
        "mirror_refs",
        "log",
        "repoannex",
        "ra",
        "get_special_remotes",
        "len",
        "sremotes",
        "ra",
        "call_annex",
        "repo_export_key",
        "sremotes",
        "popitem",
        "log",
        "ra",
        "call_annex",
        "repo_export_key",
        "log",
        "ra",
        "call_annex",
        "repo_export_key",
        "ra",
        "call_annex_oneline",
        "repo_export_key",
        "ra",
        "dot_git",
        "repoexportkeyloc",
        "_mirrorrepodir",
        "exists",
        "rmtree",
        "_mirrorrepodir",
        "ignore_errors",
        "log",
        "zipfile",
        "ZipFile",
        "repoexportkeyloc",
        "extractall",
        "_mirrorrepodir",
        "members",
        "m",
        "m",
        "namelist",
        "m",
        "startswith",
        "prefix",
        "prefix",
        "safe_content",
        "_cached_remote_refs",
        "_cached_remote_refs",
        "log",
        "repoannex",
        "ra",
        "get_special_remotes",
        "len",
        "sremotes",
        "call_annex_success",
        "ra",
        "refs_key",
        "ra",
        "call_annex",
        "refs_key",
        "ra",
        "call_annex",
        "refs_key",
        "ra",
        "call_annex_oneline",
        "refs_key",
        "ra",
        "dot_git",
        "refskeyloc",
        "read_text",
        "refs",
        "refs",
        "log",
        "_format_refs",
        "mirrorrepo",
        "args",
        "files",
        "call_annex",
        "args",
        "files",
        "CommandError",
        "zipfile",
        "ZipFile",
        "args",
        "kwargs",
        "kwargs",
        "pop",
        "args",
        "compression",
        "zipfile",
        "ZIP_LZMA",
        "kwargs",
        "zipfile",
        "ZipFile",
        "args",
        "kwargs",
        "kwargs",
        "pop",
        "args",
        "compression",
        "zipfile",
        "ZIP_STORED",
        "kwargs",
        "repo",
        "refs",
        "refs",
        "repo",
        "for_each_ref_",
        "join",
        "format",
        "r",
        "r",
        "refs",
        "refstr",
        "refstr",
        "refstr",
        "format",
        "repo",
        "call_git",
        "strip",
        "refstr",
        "url",
        "url",
        "startswith",
        "url",
        "url",
        "ValueError",
        "urlparse",
        "url",
        "p",
        "getattr",
        "pu",
        "p",
        "p",
        "pu",
        "_replace",
        "query",
        "geturl",
        "unquote",
        "v",
        "format",
        "expansion",
        "v",
        "pu",
        "query",
        "split",
        "v",
        "all",
        "p",
        "startswith",
        "p",
        "url",
        "repo",
        "repo",
        "config",
        "get",
        "repo",
        "config",
        "get",
        "here",
        "origin",
        "os",
        "environ",
        "copy",
        "repo",
        "pathobj",
        "index_file",
        "key",
        "kinfo",
        "RepoAnnexGitRemote",
        "xdlra_key_locations",
        "items",
        "repo",
        "_git_runner",
        "run",
        "stdin",
        "kinfo",
        "key",
        "key",
        "protocol",
        "StdOutCapture",
        "strip",
        "repo",
        "_git_runner",
        "run",
        "linkhash",
        "kinfo",
        "protocol",
        "StdOutCapture",
        "env",
        "env",
        "repo",
        "_git_runner",
        "run",
        "protocol",
        "StdOutCapture",
        "env",
        "env",
        "strip",
        "exporttree",
        "index_file",
        "exists",
        "index_file",
        "unlink",
        "datetime",
        "datetime",
        "now",
        "timestamp",
        "repo",
        "_git_runner",
        "run",
        "stdin",
        "now_ts",
        "here",
        "origin",
        "exporttree",
        "protocol",
        "StdOutCapture",
        "strip",
        "repo",
        "_git_runner",
        "run",
        "env",
        "env",
        "repo",
        "_git_runner",
        "run",
        "exportlog",
        "protocol",
        "StdOutCapture",
        "env",
        "env",
        "repo",
        "_git_runner",
        "run",
        "protocol",
        "StdOutCapture",
        "env",
        "env",
        "strip",
        "repo",
        "_git_runner",
        "run",
        "gaupdate",
        "protocol",
        "StdOutCapture",
        "env",
        "env",
        "strip",
        "repo",
        "call_git",
        "gacommit",
        "index_file",
        "unlink",
        "exporttree",
        "operations",
        "o",
        "operations",
        "o",
        "ok_operations",
        "operations",
        "o",
        "operations",
        "o",
        "error_operations",
        "len",
        "sys",
        "argv",
        "ValueError",
        "sys",
        "argv",
        "os",
        "environ",
        "pop",
        "gitdir",
        "RuntimeError",
        "RepoAnnexGitRemote",
        "gitdir",
        "remote",
        "url",
        "remote",
        "communicate",
        "rmtree",
        "remote",
        "repoannex",
        "path",
        "ignore_errors",
        "e",
        "CapturedException",
        "e",
        "ce",
        "file",
        "sys",
        "stderr",
        "sys",
        "exit",
        "main"
    ],
    "literals": [
        "'RepoAnnexGitRemote'",
        "'XDLRA--refs'",
        "'XDLRA--repo-export'",
        "'3f7/4a3'",
        "'.datalad/dotgit/refs'",
        "'eb3/ca0'",
        "'.datalad/dotgit/repo.zip'",
        "'branches'",
        "'hooks'",
        "'info'",
        "'objects'",
        "'refs'",
        "'config'",
        "'packed-refs'",
        "'description'",
        "'HEAD'",
        "'verbosity'",
        "'dladotgit=uncompressed'",
        "'dl-repoannex'",
        "'repoannex'",
        "'mirrorrepo'",
        "'config'",
        "'annex.private'",
        "'true'",
        "'annex'",
        "'init'",
        "'type=web'",
        "'url='",
        "\"'web'-type remote requires 'url' parameter\"",
        "'type=web'",
        "'exporttree=yes'",
        "'url='",
        "\"'web'-type remote only supports 'url' \"",
        "\"and 'exporttree' parameters\"",
        "'annex'",
        "'registerurl'",
        "f'{baseurl}/{kinfo[\"loc\"]}'",
        "\"loc\"",
        "'exporttree=yes'",
        "f'{baseurl}/{kinfo[\"prefix\"]}/{key}/{key}'",
        "\"prefix\"",
        "'initremote'",
        "'origin'",
        "'exporttree=yes'",
        "'Established mirror'",
        "'verbosity'",
        "'[DATALAD-ANNEX]'",
        "''",
        "'Git remote startup: '",
        "f'{self.remote_name} [{self.initremote_params}]'",
        "f'Received Git remote command: {repr(line)}'",
        "'\\n'",
        "'capabilities\\n'",
        "'option\\n'",
        "'list\\n'",
        "'connect\\n'",
        "'\\n'",
        "'connect git-receive-pack\\n'",
        "'Connecting git-receive-pack\\n'",
        "'\\n'",
        "'refname'",
        "'git'",
        "'receive-pack'",
        "'refname'",
        "'Remote update failed, rolling back mirror refs'",
        "'update-ref'",
        "'refname'",
        "'objectname'",
        "'update-ref'",
        "f'refs/last-confirmed-state/{self.remote_name}/{ref[\"refname\"][11:]}'",
        "\"refname\"",
        "'objectname'",
        "'update-ref'",
        "'-d'",
        "f'refs/last-confirmed-state/{self.remote_name}/{ref[\"refname\"][11:]}'",
        "\"refname\"",
        "'connect git-upload-pack\\n'",
        "'Connecting git-upload-pack\\n'",
        "'\\n'",
        "'git'",
        "'upload-pack'",
        "'option '",
        "' '",
        "'unsupported\\n'",
        "'\\n'",
        "'ok\\n'",
        "'\\n'",
        "'\\\\n'",
        "f'Type-checking of \"{line[:-1]}\" failed: {excstr}'",
        "f'error {excstr}\\n'",
        "'UNKNOWN COMMAND'",
        "'Replace remote from mirror'",
        "'gc'",
        "'drop'",
        "'--force'",
        "'--all'",
        "'zipfile.ZipFile'",
        "'dladotgit=uncompressed'",
        "'repoarchive'",
        "'zip'",
        "'setkey'",
        "'XDLRA--repo-export'",
        "'reporefs'",
        "'setkey'",
        "'exporttree=yes'",
        "'export'",
        "'--to=origin'",
        "'export'",
        "'--to=origin'",
        "'drop'",
        "'--force'",
        "'-f'",
        "'origin'",
        "'--all'",
        "'copy'",
        "'--fast'",
        "'--to'",
        "'origin'",
        "'--all'",
        "\"Check if mirror needs to be replaced with remote state\"",
        "'Set mirror to remote state'",
        "'setpresentkey'",
        "'1'",
        "'drop'",
        "'--force'",
        "'--key'",
        "'get'",
        "'--key'",
        "'contentlocation'",
        "'Extracting repository archive'",
        "\"Get refs from remote\"",
        "'fsck'",
        "'-f'",
        "'origin'",
        "'--fast'",
        "'--key'",
        "'drop'",
        "'--force'",
        "'--key'",
        "'get'",
        "'--key'",
        "'contentlocation'",
        "\"Get refs from mirror\"",
        "'compression'",
        "'compression'",
        "'\\n'",
        "\"{objectname} {refname}\"",
        "'\\n'",
        "'@{} HEAD\\n'",
        "'symbolic-ref'",
        "'HEAD'",
        "'datalad-annex::'",
        "\"Given URL only contained 'datalad-annex::' prefix\"",
        "'scheme'",
        "'netloc'",
        "'path'",
        "'fragment'",
        "'username'",
        "'password'",
        "'hostname'",
        "'port'",
        "'noquery'",
        "''",
        "'&'",
        "'type='",
        "'type=web'",
        "'exporttree=yes'",
        "f'url={url}'",
        "'annex.uuid'",
        "'remote.origin.annex-uuid'",
        "'8249ffce-770a-11ec-9578-5f6af5e76eaa'",
        "\"No 'here'\"",
        "\"No 'origin'\"",
        "'datalad_tmp_index'",
        "'GIT_INDEX_FILE'",
        "'git'",
        "'hash-object'",
        "'-w'",
        "'--stdin'",
        "f'../../.git/annex/objects/{kinfo[\"prefix\"]}/{key}/{key}'",
        "\"prefix\"",
        "'utf-8'",
        "'stdout'",
        "'git'",
        "'update-index'",
        "'--add'",
        "'--cacheinfo'",
        "'120000'",
        "\"loc\"",
        "'git'",
        "'write-tree'",
        "'stdout'",
        "'7f0e7953e93b4c9920c2bff9534773394f3a5762'",
        "'git'",
        "'hash-object'",
        "'-w'",
        "'--stdin'",
        "f'{now_ts}s {here}:{origin} {exporttree}\\n'",
        "'utf-8'",
        "'stdout'",
        "'git'",
        "'read-tree'",
        "'git-annex'",
        "'git'",
        "'update-index'",
        "'--add'",
        "'--cacheinfo'",
        "'100644'",
        "'export.log'",
        "'git'",
        "'write-tree'",
        "'stdout'",
        "'git'",
        "'commit-tree'",
        "'-m'",
        "'Fake export'",
        "'-p'",
        "'git-annex'",
        "'stdout'",
        "'update-ref'",
        "'refs/heads/git-annex'",
        "'new-tag'",
        "'new-branch'",
        "'forced-update'",
        "'fast-forward'",
        "'deleted'",
        "'no-match'",
        "'rejected'",
        "'remote-rejected'",
        "'remote-failure'",
        "'error'",
        "\"Usage: git-remote-datalad-annex REMOTE-NAME URL\"",
        "'GIT_DIR'",
        "'GIT_DIR environment variable not defined'",
        "f\"fatal: {ce}\"",
        "'__main__'"
    ],
    "variables": [
        "__all__",
        "refs_key",
        "repo_export_key",
        "xdlra_key_locations",
        "safe_content",
        "support_githelper_options",
        "internal_parameters",
        "repo",
        "initremote_params",
        "remote_name",
        "workdir",
        "_repoannexdir",
        "_repoannex",
        "_mirrorrepodir",
        "_mirrorrepo",
        "_cached_remote_refs",
        "instream",
        "outstream",
        "errstream",
        "options",
        "exporttree",
        "ra",
        "ra",
        "ra",
        "baseurl",
        "baseurl",
        "exporttree",
        "_repoannex",
        "existing_repo",
        "mr",
        "_mirrorrepo",
        "mr",
        "_mirrorrepo",
        "pre_refs",
        "post_refs",
        "key",
        "value",
        "key",
        "excstr",
        "mirrorrepo",
        "repoannex",
        "archive_file",
        "refs_file",
        "_cached_remote_refs",
        "remote_refs",
        "mirror_refs",
        "ra",
        "sremotes",
        "repoexportkeyloc",
        "repoexportkeyloc",
        "_mirrorrepo",
        "ra",
        "sremotes",
        "refskeyloc",
        "refs",
        "_cached_remote_refs",
        "refs",
        "refstr",
        "url",
        "pu",
        "expansion",
        "expansion",
        "here",
        "origin",
        "env",
        "index_file",
        "env",
        "linkhash",
        "exporttree",
        "now_ts",
        "exportlog",
        "gaupdate",
        "gacommit",
        "ok_operations",
        "error_operations",
        "remote",
        "url",
        "gitdir",
        "remote",
        "ce"
    ],
    "comments": [
        "!/usr/bin/env python",
        "emacs: -*- mode: python; py-indent-offset: 4; tab-width: 4; indent-tabs-mode: nil -*-",
        "ex: set sts=4 ts=4 sw=4 noet:",
        "## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##",
        "",
        "See LICENSE file distributed along with the datalad package for the",
        "copyright and license terms.",
        "",
        "## ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##",
        "hard code relevant keynames for the XDLRA backend",
        "this will always have the refs list",
        "this will have the repository archive",
        "all top-level content in a repo archive",
        "this is used as a positive-filter when extracting downloaded",
        "archives (to avoid writing to undesirable locations from",
        "high-jacked archives)",
        "define all supported options, including their type-checker",
        "supported parameters that can come in via the URL, but must not",
        "be relayed to `git annex initremote`",
        "this is the key piece, take special remote params from",
        "URL",
        "internal logic relies on workdir to be an absolute path",
        "whatever existed here before is an undesirable",
        "leftover of a previous crash",
        "cache for remote refs, to avoid repeated queries",
        "options communicated by Git",
        "https://www.git-scm.com/docs/gitremote-helpers#_options",
        "ID of the tree to export, if needed",
        "check if there is one already, would only be due to a prior",
        "RUD (rapid unscheduled disassembly)",
        "funny dance to get to a bare annexrepo",
        "send annex into private mode, if supported",
        "this repo will never ever be shared",
        "for type=web we have to add URLs by hand",
        "validate the rest of the params, essentially there",
        "must not be any other",
        "let git-annex-initremote take over",
        "make the new remote config known in the repo instance",
        "conflicts with type=web, but we checked that above already.",
        "plant the to-be-exported tree, still leaving the underlying",
        "keys unfulfilled",
        "something blew up. clean up and blow again",
        "ensure we have a mirror repo, either fresh or existing",
        "create an instance, assume it is set up how we need it",
        "must also have bare=True, or the newly created one below",
        "will inherit the config",
        "https://github.com/datalad/datalad/issues/6347",
        "make sure any recursion back in here is prevented",
        "this will trigger a download if possible (remote has refs)",
        "we have nothing local, pull from the remote, because it",
        "reports stuff to exist",
        "(re-)create an instance",
        "if the remote had no refs, there would still be no repo",
        "A value of 0 for <n> means that processes operate quietly,",
        "and the helper produces only error output.",
        "1 is the default level of verbosity,",
        "and higher values of <n> correspond to the number of -v flags",
        "passed on the command line",
        "orderly exit command",
        "we assume the mirror repo is in-sync with the remote at",
        "this point",
        "must not capture -- git is talking to it directly from here",
        "there was a change in the refs of the mirror repo",
        "OR",
        "the mirror is out-of-sync with the remote (could be a",
        "slightly more expensive test)",
        "we must upload it.",
        "the bad thing is that we have no way of properly",
        "signaling to git that this happended,",
        "the refs for this remote will look as if the upload was",
        "successfull",
        "roll-back the refs in the repo and its mirror using",
        "info in `pre_refs`",
        "SADLY, the recovery below has no effect, because",
        "Git updates the remote refs only after this",
        "helper exists. while this crash causes",
        "'error: failed to push some refs to'",
        "and an exit 1",
        "the remote refs in the underlying repo still look",
        "like a success",
        "self.repo.call_git([",
        "'update-ref',",
        "# strip 'refs/heads/' from refname",
        "f'refs/remotes/{self.remote_name}/{ref[\"refname\"][11:]}',",
        "ref['objectname']])",
        "best MIH can think of is to leave behind another",
        "ref to indicate the unsuccessful upload",
        "strip 'refs/heads/' from refname",
        "clean-up potential upload failure markers",
        "`update-ref -d` should be safe to run on non-existing refs",
        "strip 'refs/heads/' from refname",
        "we do not need to update `self._cached_remote_refs`,",
        "because we end the remote-helper process here",
        "must not capture -- git is talking to it directly from here.",
        "the `self.mirrorrepo` access will ensure that the mirror",
        "is uptodate",
        "ensure no-multiline message",
        "git may not communicate reason for error, do log",
        "unrecoverable error",
        "trim it down, as much as possible",
        "update the repo state keys",
        "it is critical to drop the local keys first, otherwise",
        "`setkey` below will not replace them with new content",
        "use our zipfile wrapper to get an LZMA compressed archive",
        "via the shutil convenience layer",
        "TODO exclude hooks (the mirror is always plain-git),",
        "would we ever need any",
        "hand over archive to annex",
        "generate a list of refs",
        "write to file",
        "hand over reflist to annex",
        "we want to \"force\" an export, because the content of our",
        "keys can change, but this is not possible.",
        "we cheat be exporting \"nothing\" (an empty tree) first,",
        "and then reexport",
        "some remotes will error out if we unexport something that",
        "wasn't actually exported (e.g. webdav)",
        "it is critical to drop the keys from the remote first, otherwise",
        "`copy` below will fail to replace their content",
        "update remote refs from local ones",
        "we just updated the remote from local",
        "we must replace the local mirror with the",
        "state of the remote",
        "we have to get the key with the repo archive",
        "because the local repoannex is likely a freshly bootstrapped one",
        "without any remote awareness, claim that the remote has this key",
        "in case of the 'web' special remote, we have no actual special",
        "remote, but URLs for the two individual keys",
        "drop locally to ensure re-downlad, the keyname never changes,",
        "even when the content does",
        "download the repo archive",
        "locate it in the local annex, use annex function to do this in order",
        "to cope with any peculiar repo setups we might face across platforms",
        "if we extract, we cannot tollerate left-overs",
        "null the repohandle to be reconstructed later on-demand",
        "a bit of a safety-net, exclude all unexpected content",
        "this process already queried them once, return cache",
        "in case of the 'web' special remote, we have no actual special",
        "remote, but URLs for the two individual keys",
        "the remote reports nothing, we can exit",
        "we use `fsck`, rather than `whereis` to bypass",
        "the local state tracking",
        "we have to get the key, and report its content",
        "force redownload, by dropping the local content first",
        "read, cache, return",
        "TODO propose as addition to AnnexRepo",
        "https://github.com/datalad/datalad/issues/6316",
        "generate a list of refs",
        "we do not extract the 'query', because it is the very",
        "thing we iterate over below",
        "expand all parameters in the query",
        "unquote any string -- should be safe, because",
        "initremote parameter names should not have any special",
        "characters",
        "apply any expansion from the URL components",
        "nothing to pull from an empty string",
        "if there is no type declared, this is a plain type=web",
        "export using the full URL",
        "re-use existing, or go with fixed random one",
        "we need to force Git to use a throwaway index file to maintain",
        "the bare nature of the repoannex, git-annex would stop functioning",
        "properly otherwise",
        "create a blob for the annex link",
        "place link into a tree",
        "write the complete tree, and return ID",
        "this should always come out identically",
        "unless we made changes in the composition of the export tree",
        "clean slate",
        "fake export.log record",
        "<unixepoch>s <here>:<origin> <exporttree>",
        "provided by Git",
        "no fallback, must be present",
        "lock and load",
        "there is no value in keeping around the downloads",
        "we either have things in the mirror repo or have to",
        "redownload anyways",
        "leaving the table clean and always bootstrap from scratch",
        "has the advantage that we always automatically react to any",
        "git-remote reconfiguration between runs",
        "Receiving an exception here is \"fatal\" by definition.",
        "Mimicking git's error reporting style."
    ],
    "docstrings": [
        "\"\"\"git-remote-datalad-annex that fetches/pushes via a git-annex special remote\n\nIn essence, this git remote helper bootstraps a utility repository in order\nto push/fetch the state of a repository to any location accessible by any\ngit-annex special remote implementation. All information necessary for this\nbootstrapping is taken from the remote URL specification. The internal utility\nrepository is removed again after every invocation. Therefore changes to the\nremote access configuration can be made any time by simply modifying the\nconfigured remote URL.\n\nWhen installed, this remote helper is invoked for any \"URLs\" that start with\nthe prefix ``datalad-annex::``. Following this prefix, two types of\nspecifications are support.\n\n1. Plain parameters list::\n\n    datalad-annex::?type=<special-remote-type>&[...][exporttree=yes]\n\n   In this case the prefix is followed by a URL query string that comprises all\n   necessary (and optional) parameters that would be normally given to the\n   ``git annex initremote`` command. It is required to specify the special\n   remote ``type``, and it is possible to request \"export\" mode for any special\n   remote that supports it. Depending on the chosen special remote additional\n   parameters may be required or supported. Please consult the git-annex\n   documentation at https://git-annex.branchable.com/special_remotes/\n\n2. URL::\n\n    datalad-annex::<url>[?...]\n\n   Alternatively, an actual URL can be given after the prefix. In this case,\n   the, now optional, URL query string can still be used to specify arbitrary\n   parameters for special remote initialization. In addition, the query string\n   specification can use Python-format-style placeholder to reference\n   particular URL components as parameters values, in order to avoid\n   double-specification.\n\n   The list of supported placeholders is ``scheme``, ``netloc``, ``path``,\n   ``fragment``, ``username``, ``password``, ``hostname``, ``port``,\n   corresponding to the respective URL components. In addition, a ``noquery``\n   placeholder is supported, which resolves to the entire URL except any\n   query string. An example of such a URL specification is::\n\n    datalad-annex::file:///tmp/example?type=directory&directory={path}&encryption=none'\n\n   which would initialize a ``type=directory`` special remote pointing\n   at ``/tmp/example``.\n\nSpecial remote type support\n\nIn addition to the regular list of special remotes, plain http(s) access\nvia URLs is also supported via the 'web' special remote. For such cases,\nonly the base URL and the 'type=web' parameter needs to be given, e.g::\n\n    git clone 'datalad-annex::https://example.com?type=web&url={noquery}'\n\nWhen a plain URL is given, with no parameter specification in a query\nstring, the parameters ``type=web`` and ``exporttree=yes`` are added\nautomatically by default. This means that this remote helper can clone\nfrom any remote deposit accessible via ``http(s)`` that matches the layout\ndepicted in the next section.\n\nRemote layout\n\nThe representation of a repository at a remote depends on the chosen type of\nspecial remote. In general, two files will be deposited. One text file\ncontaining a list of Git ``refs`` contained in the deposit, and one ZIP file\nwith a (compressed) archive of a bare Git repository. Beside the idiosyncrasies\nof particular special remotes, to major modes determine the layout of a remote\ndeposit. In \"normal\" mode, two annex keys (``XDLRA--refs``,\n``XDLRA--repo-export``) will be deposited. In \"export\" mode, a directory tree is\ncreated that is designed to blend with arbitrary repository content, such that\na git remote and a git-annex export can be pushed to the same location without\nconflicting with each other. The aforementioned files will be represented like\nthis::\n\n    .datalad\n    └── dotgit  # named to not be confused with an actual Git repository\n        ├── refs\n        └── repo.zip\n\n\nImplementation details\n\nThis Git remote implementation uses *two* extra repositories, besides the\nrepository (R) it is used with, to do its work:\n\n(A) A tiny repository that is entirely bootstrapped from the remote URL,\n    and is used to retrieve/deposit a complete state of the actual repo\n    an a remote site, via a git-annex special remote setup.\n\n(B) A local, fully functional mirror repo of the remotely stored\n    repository state.\n\nOn fetch/push the existence of both additional repositories is ensured. The\nremote state of retrieved via repo (A), and unpacked to repo (B).  The actual\nfetch/push Git operations are performed locally between the repo (R) and\nrepo (B). On push, repo (B) is then packed up again, and deposited on the\nremote site via git-annex transfer in repo (A).\n\n.. note::\n\n   Confirmed to work with git-annex version 8.20211123 onwards.\n\n.. todo::\n\n   - recognize that a different repo is being pushed over an existing\n     one at the remote\n   - think about adding additional information into the header of `refs`\n     maybe give it some kind of stamp that also makes it easier to validate\n     by the XDLRA backend\n   - think about preventing duplication between the repo and its local\n     mirror could they safely share git objects? If so, in which direction?\n\"\"\"",
        "\"\"\"git-remote-helper implementation\n\n    ``communicate()`` is the entrypoint.\n    \"\"\"",
        "\"\"\"\n        Parameters\n        ----------\n        gitdir : str\n          Path to the GITDIR of the repository to operate on (provided\n          by Git).\n        remote : str\n          Remote label to use (provided by Git).\n        url : str\n          URL of the remote (provided by Git).\n        instream :\n          Stream to read communication from Git from.\n        outstream :\n          Stream to communicate outcomes to Git.\n        errstream :\n          Stream for logging.\n        \"\"\"",
        "\"\"\"Repo annex repository\n\n        If accessed when there is no repo annex, as new one is created\n        automatically. It is bootstrapped entirely from the parameters\n        encoded in the remote URL.\n\n        Returns\n        -------\n        AnnexRepo\n          This is always an annex repository. It is configured with\n          a single special remote, parameterized from the Git repo URL.\n\n        Raises\n        ------\n        CommandError\n        ValueError\n        \"\"\"",
        "\"\"\"Local remote mirror repository\n\n        If accessed when there is no local mirror repo, as new one\n        is created automatically, either from the remote state (if there is\n        any), or an empty one.\n\n        Returns\n        -------\n        GitRepo\n          This is always only a plain Git repository (bare).\n        \"\"\"",
        "\"\"\"Send log messages to the errstream\"\"\"",
        "\"\"\"Communicate with Git\"\"\"",
        "\"\"\"Implement the necessary pieces of the git-remote-helper protocol\n\n        Uses the input, output and error streams configured for the\n        class instance.\n        \"\"\"",
        "\"\"\"Package the local mirrorrepo up, and copy to the special remote\n\n        The mirror is assumed to be ready/complete. It will be cleaned with\n        `gc` to minimize the upload size. The mirrorrepo is then compressed\n        into an LZMA ZIP archive, and a separate refs list for it is created\n        in addition. Both are then copied to the special remote.\n        \"\"\"",
        "\"\"\"Replace the mirror if the remote has refs and they differ\n\n        Parameters\n        ----------\n        mirror_refs: str, optional\n          If given, must be formatted like get_mirror_refs() would do.\n        \"\"\"",
        "\"\"\"Replaces the local mirror repo with one obtained from the remote\n\n        This method assumes that the remote does have one. This should be\n        checked by inspecting `get_remote_refs()` before calling this method.\n        \"\"\"",
        "\"\"\"Report remote refs\n\n        The underlying special remote is asked whether it has the key\n        containing the refs list for the remote. If it does, it is retrieved\n        and reported.\n\n        Returns\n        -------\n        str or None\n          If the remote has refs, they are returned as a string, formatted like\n          a refs file in a Git directory. Otherwise, `None` is returned.\n        \"\"\"",
        "\"\"\"Return the refs of the current mirror repo\n\n        Returns\n        -------\n        str\n        \"\"\"",
        "\"\"\"Call git-annex and return true if the call exit code of 0.\n\n    All parameters match those described for `call_annex`.\n\n    Returns\n    -------\n    bool\n    \"\"\"",
        "\"\"\"Tiny wrapper to monkey-patch zipfile in order to have\n    shutil.make_archive produce an LZMA-compressed ZIP\"\"\"",
        "\"\"\"Tiny wrapper to monkey-patch zipfile in order to have\n    shutil.make_archive produce an uncompressed ZIP\"\"\"",
        "\"\"\"Helper to format a standard refs list from for_each_ref() output\n\n    Parameters\n    ----------\n    repo: GitRepo\n      Repo which to query for the 'HEAD' symbolic ref\n    refs: iterable or None\n      If `None`, `repo.for_each_ref()` is called. Otherwise, an iterable\n      from a previous `for_each_ref()` call is expected.\n\n    Returns\n    -------\n    str\n      Formatted refs list\n    \"\"\"",
        "\"\"\"Parse a remote URL for initremote parameters\n\n    Parameters are taken from a URL's query string. In the query\n    parameters can be defined directly, or via placeholder\n    for all URL components (using Python's format language).\n\n    The following placeholders are supported: 'scheme', 'netloc',\n    'path', 'fragment', 'username', 'password', 'hostname',\n    'port'. Their values are determined by urlparse(). There is\n    no placeholder for the 'query' component, but a 'noquery'\n    placeholder is supported, which provides the original\n    (reassembled) URL without the query string.\n\n    Parameters\n    ----------\n    url : str\n\n    Returns\n    -------\n    list\n      git-annex initremote parameter list. Each value string has the format\n      'key=value'.\n    \"\"\"",
        "\"\"\"Create an exportable tree\n\n    The function expects a clean (bare) repository. It requires no checkout,\n    and does not modify any branches or creates commits.\n\n    The tree is always the same, but still has to be create in the repoannex\n    to be accessible for git-annex. It looks like this::\n\n        .datalad\n        └── dotgit\n            ├── refs\n            └── repo.zip\n\n    where the two files under ``dotgit/`` link to the two critical keys. The\n    placement of the files under ``.datalad/`` is chosen so that the export can\n    blend with an export of the underlying dataset without conflict. The name\n    ``dotgit`` rather than ``.git`` is chosen to avoid confusing it with\n    an actual nested Git repo.\n\n    Parameters\n    ----------\n    repo: AnnexRepo\n      Repository instance to write to.\n\n    Returns\n    -------\n    str\n        ID of the tree object, suitable for `git-annex export`.\n    \"\"\"",
        "\"\"\"git-remote helper executable entrypoint\"\"\""
    ],
    "functions": [
        "_ensure_workdir",
        "repoannex",
        "mirrorrepo",
        "log",
        "send",
        "communicate",
        "replace_remote_deposit_from_mirrorrepo",
        "replace_mirrorrepo_from_remote_deposit_if_needed",
        "replace_mirrorrepo_from_remote_deposit",
        "get_remote_refs",
        "get_mirror_refs",
        "call_annex_success",
        "_format_refs",
        "get_initremote_params_from_url",
        "make_export_tree",
        "push_caused_change",
        "push_error",
        "main"
    ],
    "classes": [
        "RepoAnnexGitRemote",
        "LZMAZipFile",
        "UncompressedZipFile"
    ]
}