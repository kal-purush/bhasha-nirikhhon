{
    "identifiers": [
        "argparse",
        "json",
        "sys",
        "typing",
        "NamedTuple",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "KEYS_TO_COL",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "argparse",
        "FileType",
        "sys",
        "stdin",
        "help",
        "parser",
        "parse_args",
        "NamedTuple",
        "key_index",
        "keys",
        "num_cols",
        "col_fn",
        "KEYS_TO_COL",
        "key_index",
        "keys",
        "col_fn",
        "key_index",
        "Column",
        "col_num",
        "ends_side",
        "col_num",
        "num_cols",
        "ends_row",
        "keys",
        "key_index",
        "num_cols",
        "layers",
        "indent_level",
        "layer",
        "layers",
        "index",
        "keycode",
        "layer",
        "get_col",
        "index",
        "max_key_length",
        "get",
        "col",
        "num",
        "max_length",
        "len",
        "keycode",
        "max_length",
        "max_key_length",
        "update",
        "col",
        "num",
        "len",
        "keycode",
        "layer_index",
        "layer",
        "layers",
        "formatted",
        "indent_level",
        "formatted",
        "index",
        "keycode",
        "layer",
        "get_col",
        "index",
        "col",
        "num",
        "index",
        "formatted",
        "indent_level",
        "formatted",
        "json",
        "dumps",
        "keycode",
        "index",
        "LAST_KEY",
        "formatted",
        "col",
        "ends_side",
        "formatted",
        "max_key_length",
        "get_col",
        "index",
        "num",
        "len",
        "keycode",
        "formatted",
        "n_spaces",
        "formatted",
        "col",
        "ends_row",
        "formatted",
        "formatted",
        "indent_level",
        "layer_index",
        "len",
        "layers",
        "formatted",
        "formatted",
        "formatted",
        "indent_level",
        "formatted",
        "formatted",
        "keymap_json",
        "index",
        "k",
        "keymap_json",
        "k",
        "formatted",
        "format_layers",
        "keymap_json",
        "k",
        "formatted",
        "indent_level",
        "json",
        "dumps",
        "k",
        "json",
        "dumps",
        "keymap_json",
        "k",
        "index",
        "len",
        "keymap_json",
        "formatted",
        "formatted",
        "formatted",
        "formatted",
        "parse_cli",
        "json",
        "loads",
        "args",
        "input",
        "read",
        "format_keymap",
        "keymap_json",
        "main"
    ],
    "literals": [
        "'Hillside keymap formatter'",
        "\"--input\"",
        "'r'",
        "\"Input keymap \"",
        "\"(json file produced by qmk configurator)\"",
        "\" \"",
        "\"\\\"layers\\\": [\\n\"",
        "\" \"",
        "\"[\"",
        "\" \"",
        "\"\\n\"",
        "\",\\n\"",
        "\" \"",
        "\", \"",
        "\"\\n\"",
        "\" \"",
        "\"],\\n\"",
        "\"]\\n\"",
        "\" \"",
        "\"]\"",
        "\"{\"",
        "\"layers\"",
        "f\"{indent_level * ' '}{json.dumps(k)}: {json.dumps(keymap_json[k])}\"",
        "' '",
        "\",\"",
        "\"\\n\"",
        "\"}\""
    ],
    "variables": [
        "indent_level",
        "KEYS_TO_COL",
        "LAST_KEY",
        "parser",
        "num",
        "ends_side",
        "ends_row",
        "col_num",
        "formatted",
        "max_key_length",
        "col",
        "max_length",
        "col",
        "n_spaces",
        "formatted",
        "args",
        "keymap_json"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "Copyright 2020-2021 Pierre Viseu Chevalier, Michael McCoyd (@pierrechevalier83, @mmccoyd)",
        "SPDX-License-Identifier: GPL-2.0-or-later",
        "number of spaces of initial indent per output line",
        "The structure of the keymap",
        "[[Endpoint of sides with identical widths, side width, mapping to column],...]",
        "Find max key length per column",
        "Format each layer",
        "Opening [",
        "Split keys into pairs of left and right rows by key row length",
        "Indent for rows past first",
        "Print key",
        "End layer, or end side, or space to next key",
        "Split groups of row sides",
        "Closing ] with , or without"
    ],
    "docstrings": [
        "\"\"\"Pretty print keymap json in more readable row/side organized format.\"\"\"",
        "\"\"\"Print keymap json in row and side format, though as still re-readable json.\n\nFor example, for one layer:\n\n [\"KC_TAB\" , \"KC_Q\"   , \"KC_W\"   , \"KC_E\"   , \"KC_R\"   , \"KC_T\",\n  \"KC_Y\"   , \"KC_U\"   , \"KC_I\"   , \"KC_O\"   , \"KC_P\"   , \"KC_BSPC\",\n\n  \"KC_LCTL\", \"KC_A\"   , \"KC_S\"   , \"KC_D\"   , \"KC_F\"   , \"KC_G\",\n  \"KC_H\"   , \"KC_J\"   , \"KC_K\"   , \"KC_L\"   , \"KC_SCLN\", \"KC_QUOT\",\n\n  \"KC_LSFT\", \"KC_Z\"   , \"KC_X\"   , \"KC_C\"   , \"KC_V\"   , \"KC_B\"   , \"KC_GRV\",\n  \"KC_ESC\" , \"KC_N\"   , \"KC_M\"   , \"KC_COMM\", \"KC_DOT\" , \"KC_SLSH\", \"KC_RSFT\",\n\n  \"KC_ENT\" , \"KC_LGUI\", \"KC_LALT\", \"MO(5)\"  , \"MO(3)\",\n  \"MO(4)\"  , \"KC_SPC\" , \"KC_LALT\", \"KC_RGUI\", \"KC_APP\"\n ],\n\"\"\"",
        "\"\"\"Column number within keymap side, if it ends side, and ends row.\n\n    Position within a keyboard row runs from 0 to n and again 0 to n\"\"\"",
        "\"\"\"Return Column for key_index.\"\"\""
    ],
    "functions": [
        "parse_cli",
        "get_col",
        "format_layers",
        "format_keymap",
        "main"
    ],
    "classes": [
        "Column"
    ]
}