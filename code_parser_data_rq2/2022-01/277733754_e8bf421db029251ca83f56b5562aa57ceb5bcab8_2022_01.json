{
    "identifiers": [
        "Microsoft",
        "CodeAnalysis",
        "Microsoft",
        "CodeAnalysis",
        "CSharp",
        "Microsoft",
        "CodeAnalysis",
        "CSharp",
        "Syntax",
        "Microsoft",
        "CodeAnalysis",
        "Text",
        "Collections",
        "Collections",
        "Generic",
        "Linq",
        "Reflection",
        "Text",
        "Threading",
        "StrongInject",
        "Generator",
        "Generator",
        "IIncrementalGenerator",
        "IncrementalGeneratorInitializationContext",
        "context",
        "context",
        "SyntaxProvider",
        "CreateSyntaxProvider",
        "node",
        "_",
        "node",
        "ClassDeclarationSyntax",
        "ctx",
        "cancellationToken",
        "cancellationToken",
        "ThrowIfCancellationRequested",
        "ctx",
        "SemanticModel",
        "GetDeclaredSymbol",
        "ctx",
        "Node",
        "cancellationToken",
        "INamedTypeSymbol",
        "AllInterfaces",
        "Any",
        "x",
        "OriginalDefinition",
        "MetadataName",
        "WellKnownTypes",
        "ICONTAINER_MD_NAME",
        "WellKnownTypes",
        "IASYNC_CONTAINER_MD_NAME",
        "cancellationToken",
        "ThrowIfCancellationRequested",
        "isContainer",
        "GetAttributes",
        "Any",
        "WellKnownTypes",
        "IsClassAttribute",
        "x",
        "AttributeClass",
        "GetMembers",
        "Any",
        "x",
        "IFieldSymbol",
        "IPropertySymbol",
        "x",
        "GetAttributes",
        "Any",
        "WellKnownTypes",
        "IsInstanceAttribute",
        "x",
        "AttributeClass",
        "x",
        "IMethodSymbol",
        "x",
        "GetAttributes",
        "Any",
        "WellKnownTypes",
        "IsMethodAttribute",
        "x",
        "AttributeClass",
        "isContainer",
        "ctx",
        "Node",
        "context",
        "CompilationProvider",
        "Select",
        "x",
        "_",
        "CompilationWrapper",
        "x",
        "context",
        "RegisterSourceOutput",
        "trees",
        "Combine",
        "compilationWrapper",
        "context",
        "x",
        "isContainer",
        "node",
        "x",
        "Left",
        "node",
        "x",
        "Right",
        "Compilation",
        "context",
        "CancellationToken",
        "context",
        "ReportDiagnostic",
        "compilation",
        "GetSemanticModel",
        "node",
        "SyntaxTree",
        "GetDeclaredSymbol",
        "node",
        "cancellationToken",
        "INamedTypeSymbol",
        "InvalidOperationException",
        "node",
        "ToString",
        "IsInternal",
        "IsPublic",
        "reportDiagnostic",
        "ModuleNotPublicOrInternal",
        "TypeDeclarationSyntax",
        "node",
        "Identifier",
        "GetLocation",
        "cancellationToken",
        "ThrowIfCancellationRequested",
        "WellKnownTypes",
        "TryCreate",
        "compilation",
        "reportDiagnostic",
        "wellKnownTypes",
        "RegistrationCalculator",
        "compilation",
        "wellKnownTypes",
        "cancellationToken",
        "isContainer",
        "registrationCalculator",
        "ValidateModuleRegistrations",
        "reportDiagnostic",
        "ContainerGenerator",
        "GenerateContainerImplementations",
        "registrationCalculator",
        "GetContainerRegistrations",
        "reportDiagnostic",
        "wellKnownTypes",
        "reportDiagnostic",
        "cancellationToken",
        "CSharpSyntaxTree",
        "ParseText",
        "SourceText",
        "From",
        "file",
        "Encoding",
        "UTF8",
        "GetRoot",
        "NormalizeWhitespace",
        "SyntaxTree",
        "GetText",
        "context",
        "AddSource",
        "GenerateNameHint",
        "source",
        "INamedTypeSymbol",
        "container",
        "StringBuilder",
        "container",
        "ContainingNamespace",
        "FullName",
        "container",
        "GetContainingTypesAndThis",
        "Reverse",
        "stringBuilder",
        "Append",
        "stringBuilder",
        "Append",
        "Name",
        "TypeParameters",
        "Length",
        "stringBuilder",
        "Append",
        "stringBuilder",
        "Append",
        "TypeParameters",
        "Length",
        "stringBuilder",
        "Append",
        "stringBuilder",
        "ToString",
        "ITypeSymbol",
        "Location",
        "location",
        "Diagnostic",
        "Create",
        "DiagnosticDescriptor",
        "DiagnosticSeverity",
        "isEnabledByDefault",
        "location",
        "ToDisplayString",
        "IEquatable",
        "CompilationWrapper",
        "_lock",
        "_compilation",
        "Compilation",
        "compilation",
        "_compilation",
        "compilation",
        "_version",
        "Interlocked",
        "Increment",
        "_nextVersion",
        "CompilationWrapper",
        "other",
        "other",
        "_lock",
        "other",
        "_version",
        "_version",
        "_compilation",
        "_version",
        "other",
        "_compilation",
        "other",
        "_version",
        "other",
        "_compilation",
        "other",
        "_version",
        "_compilation",
        "_version",
        "obj",
        "Equals",
        "obj",
        "CompilationWrapper"
    ],
    "literals": [
        "\".\"",
        "\"_\"",
        "\".g.cs\"",
        "\"SI0401\"",
        "\"Module must be public or internal.\"",
        "\"Module '{0}' must be public or internal.\"",
        "\"StrongInject\""
    ],
    "variables": [
        "trees",
        "isContainer",
        "compilationWrapper",
        "compilation",
        "cancellationToken",
        "reportDiagnostic",
        "registrationCalculator",
        "file",
        "source",
        "stringBuilder",
        "_lock",
        "Compilation",
        "Compilation",
        "_version",
        "Compilation",
        "_compilation",
        "_nextVersion"
    ],
    "comments": [
        "We need to lock both this and other for Equals, which is difficult to do without risking a deadlock.",
        "Given how rarely Equals is likely to be called, just use a shared lock among all instances."
    ],
    "docstrings": [],
    "functions": [
        "Initialize",
        "GenerateNameHint",
        "Diagnostic",
        "ModuleNotPublicOrInternal",
        "CompilationWrapper",
        "Equals",
        "Equals",
        "GetHashCode"
    ],
    "classes": [
        "IncrementalGenerator",
        "CompilationWrapper"
    ]
}