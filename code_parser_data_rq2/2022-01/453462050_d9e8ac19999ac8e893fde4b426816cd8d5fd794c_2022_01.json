{
    "identifiers": [
        "PubSub",
        "PubSub",
        "types",
        "functions",
        "types",
        "types",
        "types",
        "functions",
        "functions",
        "functions",
        "i",
        "types",
        "i",
        "types",
        "i",
        "PubSub",
        "PubSub",
        "j",
        "j",
        "functions",
        "j",
        "functions",
        "j",
        "PubSub",
        "functions",
        "j",
        "PubSub",
        "types",
        "functions",
        "types",
        "types",
        "types",
        "functions",
        "functions",
        "functions",
        "i",
        "types",
        "i",
        "types",
        "i",
        "PubSub",
        "j",
        "j",
        "functions",
        "j",
        "index",
        "PubSub",
        "functions",
        "j",
        "PubSub",
        "index",
        "PubSub",
        "types",
        "data",
        "types",
        "types",
        "types",
        "i",
        "types",
        "i",
        "types",
        "i",
        "PubSub",
        "PubSub",
        "PubSub",
        "j",
        "j",
        "PubSub",
        "j",
        "PubSub",
        "j",
        "data",
        "PubSub",
        "define",
        "define",
        "define",
        "PubSub",
        "PubSub"
    ],
    "literals": [
        "'use strict'",
        "''",
        "'string'",
        "'function'",
        "'function'",
        "''",
        "'string'",
        "'Type '",
        "' does not exist.'",
        "''",
        "'string'",
        "'object'",
        "'object'",
        "'function'",
        "'PubSub'",
        "'object'",
        "'object'"
    ],
    "variables": [
        "PubSub",
        "i",
        "j",
        "index",
        "i",
        "j",
        "i",
        "j"
    ],
    "comments": [
        "If `types` is not an array, make it one",
        "If `functions` is not an array, make it one",
        "Add subsciption name to storage",
        "If `types` is not an array, make it one",
        "If `functions` is not an array, make it one",
        "If the type does not exist, throw an error",
        "If `types` is not an array, make it one",
        "Expose loaders that implement the Node module pattern.",
        "Register as an AMD module",
        "Export into global space"
    ],
    "docstrings": [
        "* PUBSUB\n *\n * PubSub is a JS implementation of a publication/subscription pattern in JS\n * using vanilla JS.\n *\n * Subscibe:\n *   PubSub.subscribe('App.loaded', function () {});\n *   PubSub.subscribe('App.done', [App.loadStack, App.clock]);\n *   PubSub.subscribe(['App.undo', 'App.redo'], App.change);\n *\n * Unsubscribe:\n *   PubSub.unsubscribe('App.done', App.loadStack);\n *   PubSub.unsubscribe(['App.undo', 'App.redo'], App.change);\n *\n * Publish:\n *   PubSub.publish('App.loaded');\n *   PubSub.publish('App.loaded', { data: App.data });\n *   PubSub.publish(['App.undo', 'App.redo']);\n *",
        "* Object to store all functions and data\n   * @type {Object}",
        "* Storage for functions and events\n   * @type {Object}",
        "* Public API",
        "* Subscribe funtions by mapping them to events\n   * @param  {String|Array}   types     Event type\n   * @param  {Function|Array} functions Function or array of functions to subscribe to event\n   * @return {void}",
        "* Unsubscribe functions from an event\n   * @param  {String|Array}   types     Event types\n   * @param  {Function|Array} functions Functions to unsubscribe from event\n   * @return {void}",
        "* Call functions subscribed to an event\n   * If you want to publish multiple events, call PubSub.publish multiple times.\n   *\n   * @param  {String|Array} types Event types to publish\n   * @param  {Object}       data  Data to send with publish event\n   * @return {void}",
        "* AMD, module loader, global registration"
    ],
    "functions": [],
    "classes": []
}