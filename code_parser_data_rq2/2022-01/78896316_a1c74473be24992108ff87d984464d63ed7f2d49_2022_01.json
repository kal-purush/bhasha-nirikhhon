{
    "identifiers": [
        "NodePluginArgs",
        "SetOptional",
        "visit",
        "Content",
        "Jsx",
        "LinkReference",
        "Parent",
        "Tsx",
        "key",
        "meta",
        "id",
        "plugin",
        "meta",
        "_",
        "isCodeOrDevtool",
        "shortcodeNames",
        "isLinkReference",
        "node",
        "node",
        "node",
        "isParent",
        "node",
        "node",
        "node",
        "isSoloChild",
        "node",
        "node",
        "isAllowedExt",
        "ext",
        "ext",
        "ALLOWED_EXT",
        "ext",
        "visit",
        "markdownAST",
        "paragraphNode",
        "idx",
        "promises",
        "isParent",
        "paragraphNode",
        "isSoloChild",
        "paragraphNode",
        "paragraphNode",
        "isLinkReference",
        "linkRefNode",
        "label",
        "label",
        "fnameWithQuery",
        "fname",
        "isCodeOrDevtool",
        "shortCodeType",
        "isAllowedExt",
        "ext",
        "fname",
        "moduleName",
        "guid",
        "moduleName",
        "guid",
        "importSymbol",
        "devtoolResult",
        "seen",
        "markdownAST",
        "node",
        "seen",
        "node",
        "guid",
        "importSymbol",
        "devtoolResult",
        "devtoolComponent",
        "node",
        "node",
        "node",
        "devtoolComponent",
        "linkRefNode",
        "seen",
        "moduleName",
        "importSymbol",
        "moduleName",
        "devtoolResult",
        "moduleName",
        "markdownAST",
        "node",
        "node",
        "seen",
        "moduleName",
        "promises",
        "markdownAST",
        "markdownAST",
        "plugin"
    ],
    "literals": [
        "'gatsby'",
        "'type-fest'",
        "'unist-util-visit'",
        "'./mdast'",
        "'devtool'",
        "'code'",
        "'children'",
        "string",
        "'File'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'internal'",
        "'File'",
        "string",
        "g${++id}",
        "string",
        "string",
        "'code'",
        "'devtool'",
        "'linkReference'",
        "'tsx'",
        "string",
        "'type'",
        "'paragraph'",
        "':'",
        "'?'",
        "'.'",
        "${fname} is not supported. Only jsx and tsx are supported.",
        "Component_${moduleName}_${guid()}",
        "Devtool_${moduleName}_${guid()}",
        "'DevTool'",
        "'import'",
        "import {DevTool} from '@devtool/react'",
        "'DevTool'",
        "Adding: ${node.value}",
        "<DevTool \n              prefix={${JSON.stringify(guid())}}\n              component={${importSymbol}}\n              meta={${devtoolResult}} \n            />",
        "'\\n'",
        "'jsx'",
        "converted node to runtime container",
        "'import'",
        "import ${importSymbol} from './${moduleName}'",
        "import ${devtoolResult} from '!!@devtool/loader!./${moduleName}'",
        "'\\n'",
        "Adding: ${node.value}"
    ],
    "variables": [
        "guid",
        "id",
        "plugin",
        "meta",
        "seen",
        "isCodeOrDevtool",
        "shortcodeNames",
        "isLinkReference",
        "isParent",
        "isSoloChild",
        "ALLOWED_EXT",
        "isAllowedExt",
        "promises",
        "linkRefNode",
        "linkRefNode",
        "shortCodeType",
        "fnameWithQuery",
        "fname",
        "querystring",
        "moduleName",
        "ext",
        "importSymbol",
        "devtoolResult",
        "node",
        "devtoolComponent",
        "node"
    ],
    "comments": [
        "console.log('options', _options)",
        "console.log({ meta })",
        "Only process paragraph nodes",
        "Only allow the shortcode by itself in a paragraph",
        "The [shortcode] syntax shows up as a linkReference node - filter out all others",
        "The 'label' is the shortcode. Filter out any empty links",
        "Shortcode format:  (devtool|code):fname.ext[?params...]",
        "Filter out any shortcode that is not ours",
        "Error on any file type not currently supported",
        "Wire up devtool harness",
        "Import the DevTool component",
        "Splice in a run container before the code listing, warn if in dev mode",
        "Typescript kung fu to convert to a Code node",
        "console.log(JSON.stringify(node, null, 2))",
        "Insert an import if this component hasn't been seen yet",
        "console.log('calling codesandbox', _options.codesandbox)"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}