{
    "identifiers": [
        "argparse",
        "contextlib",
        "copy",
        "fnmatch",
        "os",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "typing",
        "dirname",
        "dirname",
        "EXCLUDED_DIRS",
        "filename",
        "filename",
        "EXCLUDED_BASENAMES",
        "suffix",
        "EXCLUDED_SUFFIXES",
        "filename",
        "endswith",
        "suffix",
        "filename",
        "open",
        "filename",
        "f",
        "f",
        "read",
        "a",
        "b",
        "a",
        "b",
        "tempfile",
        "NamedTemporaryFile",
        "fa",
        "fa",
        "write",
        "a",
        "fa",
        "flush",
        "tempfile",
        "NamedTemporaryFile",
        "fb",
        "fb",
        "write",
        "b",
        "fb",
        "flush",
        "subprocess",
        "run",
        "fa",
        "name",
        "fb",
        "name",
        "stdout",
        "subprocess",
        "PIPE",
        "stderr",
        "subprocess",
        "DEVNULL",
        "stdout",
        "diff_bytes",
        "decode",
        "data",
        "typing",
        "Tuple",
        "typing",
        "Optional",
        "data",
        "data",
        "data",
        "find",
        "newline_idx",
        "len",
        "data",
        "newline_idx",
        "data",
        "end_idx",
        "data",
        "end_idx",
        "len",
        "line",
        "line",
        "NEWLINE",
        "line",
        "NEWLINE",
        "line",
        "data",
        "actual",
        "expect",
        "fnmatch",
        "fnmatchcase",
        "actual",
        "strip",
        "expect",
        "strip",
        "actual",
        "expect",
        "pop_line",
        "actual",
        "pop_line",
        "expect",
        "expect_line",
        "actual_line",
        "pop_line",
        "actual",
        "actual_line",
        "expect_line",
        "pop_line",
        "expect",
        "expect_line",
        "actual_line",
        "diff",
        "diff",
        "expect_line",
        "diff",
        "actual_line",
        "diff",
        "diff",
        "actual_line",
        "pop_line",
        "actual",
        "diff",
        "actual_line",
        "diff",
        "expect_line",
        "diff",
        "diff",
        "expect_line",
        "pop_line",
        "expect",
        "diff",
        "expect_line",
        "actual_line",
        "expect_line",
        "pop_line",
        "expect",
        "next_expect_line",
        "diff",
        "diff",
        "glob_line_matches",
        "actual_line",
        "next_expect_line",
        "pop_line",
        "actual",
        "actual_line",
        "diff",
        "diff",
        "diff",
        "next_expect_line",
        "diff",
        "next_expect_line",
        "glob_line_matches",
        "actual_line",
        "expect_line",
        "diff",
        "diff",
        "expect_line",
        "diff",
        "actual_line",
        "pop_line",
        "actual",
        "pop_line",
        "expect",
        "env",
        "typing",
        "Dict",
        "timeout",
        "typing",
        "Optional",
        "verbose",
        "preserve",
        "scratch_dir",
        "test_dir",
        "env",
        "timeout",
        "verbose",
        "preserve",
        "scratch_dir",
        "test_dir",
        "test_filename",
        "options",
        "Options",
        "options",
        "test_filename",
        "os",
        "path",
        "normpath",
        "os",
        "path",
        "relpath",
        "test_filename",
        "start",
        "_opts",
        "test_dir",
        "os",
        "path",
        "abspath",
        "os",
        "path",
        "join",
        "_opts",
        "scratch_dir",
        "_test_name",
        "property",
        "_test_name",
        "_launch_test",
        "_join_test",
        "_check_exit",
        "_check_stderr",
        "_check_stdout",
        "_analyze_results",
        "_succeeded",
        "launch",
        "analyze",
        "args",
        "kwargs",
        "file",
        "sys",
        "stdout",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "_opts",
        "verbose",
        "file",
        "sys",
        "stdout",
        "args",
        "kwargs",
        "typing",
        "Dict",
        "copy",
        "copy",
        "os",
        "environ",
        "k",
        "v",
        "_opts",
        "env",
        "items",
        "_vlog",
        "k",
        "v",
        "v",
        "os",
        "path",
        "abspath",
        "_test_file",
        "_test_file",
        "os",
        "path",
        "exists",
        "stdin_name",
        "open",
        "stdin_name",
        "_test_stdin",
        "subprocess",
        "DEVNULL",
        "_scratch_dir",
        "_test_environment",
        "subprocess",
        "Popen",
        "args",
        "args",
        "stdin",
        "stdin",
        "cwd",
        "cwd",
        "env",
        "env",
        "stderr",
        "subprocess",
        "PIPE",
        "stdout",
        "subprocess",
        "PIPE",
        "_test_process",
        "communicate",
        "timeout",
        "_opts",
        "timeout",
        "_output",
        "stdout",
        "_output",
        "stderr",
        "_test_process",
        "returncode",
        "_test_stdin",
        "_test_stdin",
        "close",
        "out_name",
        "expected",
        "out_name",
        "_output",
        "out_name",
        "actual",
        "expected",
        "_success",
        "_message",
        "out_name",
        "_success",
        "_message",
        "out_name",
        "diff",
        "expected",
        "actual",
        "out_name",
        "expected",
        "out_name",
        "_output",
        "out_name",
        "glob_diff",
        "actual",
        "expected",
        "diff",
        "_success",
        "_message",
        "out_name",
        "diff",
        "decode",
        "_success",
        "_message",
        "out_name",
        "utf8_diff",
        "out_name",
        "_opts",
        "preserve",
        "os",
        "path",
        "join",
        "_scratch_dir",
        "out_name",
        "open",
        "actual_name",
        "f",
        "f",
        "write",
        "_output",
        "out_name",
        "_test_file",
        "out_name",
        "_test_file",
        "out_name",
        "_test_file",
        "out_name",
        "os",
        "path",
        "exists",
        "exact_name",
        "_check_output_exact",
        "out_name",
        "read_file",
        "exact_name",
        "os",
        "path",
        "exists",
        "glob_name",
        "_check_output_glob",
        "out_name",
        "read_file",
        "glob_name",
        "os",
        "path",
        "exists",
        "ignore_name",
        "out_name",
        "_success",
        "_message",
        "out_name",
        "_check_output_exact",
        "out_name",
        "_check_output",
        "_check_output",
        "_opts",
        "preserve",
        "os",
        "path",
        "join",
        "_scratch_dir",
        "open",
        "exit_name",
        "f",
        "f",
        "write",
        "_exit_code",
        "_test_file",
        "os",
        "path",
        "exists",
        "exit_name",
        "read_file",
        "exit_name",
        "exit_code",
        "_exit_code",
        "_success",
        "_message",
        "_success",
        "_message",
        "exit_code",
        "_exit_code",
        "sorted",
        "_success",
        "keys",
        "all",
        "_success",
        "values",
        "_log",
        "STATUS",
        "_succeeded",
        "_test_name",
        "_succeeded",
        "_opts",
        "verbose",
        "check",
        "checks",
        "_opts",
        "verbose",
        "_success",
        "check",
        "_log",
        "STATUS",
        "_success",
        "check",
        "_test_name",
        "check",
        "_log",
        "_message",
        "check",
        "_log",
        "test_directory",
        "options",
        "Options",
        "options",
        "os",
        "path",
        "abspath",
        "test_directory",
        "os",
        "path",
        "relpath",
        "test_directory",
        "start",
        "_opts",
        "test_dir",
        "rel_test_dir",
        "startswith",
        "os",
        "path",
        "sep",
        "os",
        "path",
        "normpath",
        "os",
        "path",
        "join",
        "_opts",
        "scratch_dir",
        "rel_test_dir",
        "_setup_once",
        "_exc_type",
        "_exc_value",
        "_traceback",
        "_teardown_once",
        "contextlib",
        "contextmanager",
        "test_basename",
        "TestCase",
        "os",
        "path",
        "dirname",
        "test_basename",
        "_setup",
        "test_basename",
        "os",
        "path",
        "join",
        "_test_dir",
        "test_basename",
        "TestCase",
        "test_filename",
        "_opts",
        "_teardown",
        "test_basename",
        "dir",
        "dir",
        "dir",
        "startswith",
        "_scratch_dir",
        "os",
        "path",
        "exists",
        "dir",
        "shutil",
        "rmtree",
        "dir",
        "os",
        "path",
        "exists",
        "_scratch_dir",
        "_remove_scratch_dir",
        "_scratch_dir",
        "os",
        "makedirs",
        "_scratch_dir",
        "os",
        "path",
        "join",
        "_test_dir",
        "os",
        "path",
        "exists",
        "setup_script",
        "_run_script",
        "setup_script",
        "cwd",
        "_scratch_dir",
        "os",
        "path",
        "exists",
        "_scratch_dir",
        "os",
        "path",
        "join",
        "_test_dir",
        "os",
        "path",
        "exists",
        "teardown_script",
        "_run_script",
        "teardown_script",
        "cwd",
        "_scratch_dir",
        "_opts",
        "preserve",
        "_remove_scratch_dir",
        "_scratch_dir",
        "test_basename",
        "os",
        "path",
        "join",
        "_scratch_dir",
        "test_basename",
        "os",
        "path",
        "exists",
        "test_scratch_dir",
        "os",
        "makedirs",
        "test_scratch_dir",
        "os",
        "path",
        "join",
        "_test_dir",
        "os",
        "path",
        "exists",
        "setup_script",
        "_run_script",
        "setup_script",
        "cwd",
        "test_scratch_dir",
        "test_basename",
        "os",
        "path",
        "join",
        "_scratch_dir",
        "test_basename",
        "os",
        "path",
        "exists",
        "test_scratch_dir",
        "os",
        "path",
        "join",
        "_test_dir",
        "os",
        "path",
        "exists",
        "teardown_script",
        "_run_script",
        "teardown_script",
        "cwd",
        "test_scratch_dir",
        "_opts",
        "preserve",
        "_remove_scratch_dir",
        "test_scratch_dir",
        "script",
        "cwd",
        "copy",
        "copy",
        "os",
        "environ",
        "k",
        "v",
        "_opts",
        "env",
        "items",
        "v",
        "subprocess",
        "run",
        "args",
        "script",
        "stdin",
        "subprocess",
        "DEVNULL",
        "capture_output",
        "cwd",
        "cwd",
        "env",
        "env",
        "check",
        "subprocess",
        "CalledProcessError",
        "e",
        "script",
        "e",
        "returncode",
        "e",
        "stderr",
        "e",
        "stdout",
        "typing",
        "Dict",
        "typing",
        "options",
        "Options",
        "TestSuites",
        "root",
        "dirs",
        "files",
        "os",
        "walk",
        "options",
        "test_dir",
        "topdown",
        "d",
        "d",
        "dirs",
        "exclude_dir",
        "d",
        "file",
        "files",
        "exclude_file",
        "file",
        "test_cases",
        "append",
        "file",
        "root",
        "os",
        "path",
        "normpath",
        "root",
        "test_cases",
        "test_suites",
        "tests",
        "typing",
        "options",
        "Options",
        "TestSuites",
        "test",
        "tests",
        "os",
        "path",
        "exists",
        "test",
        "os",
        "path",
        "join",
        "options",
        "test_dir",
        "test",
        "os",
        "path",
        "exists",
        "test",
        "RuntimeError",
        "test",
        "os",
        "path",
        "normpath",
        "os",
        "path",
        "abspath",
        "test",
        "test",
        "startswith",
        "options",
        "test_dir",
        "os",
        "path",
        "dirname",
        "test",
        "os",
        "path",
        "basename",
        "test",
        "test_suites",
        "setdefault",
        "test_suite",
        "append",
        "test_case",
        "test_suites",
        "test_suites",
        "TestSuites",
        "options",
        "Options",
        "test_dir",
        "test_files",
        "test_suites",
        "items",
        "TestSuite",
        "test_dir",
        "options",
        "test_suite",
        "sorted",
        "test_files",
        "test_file",
        "test_files",
        "test_suite",
        "test_case",
        "test_file",
        "test_case",
        "test_case",
        "name",
        "test_case",
        "run",
        "test",
        "status",
        "tests",
        "items",
        "status",
        "successes",
        "test",
        "successes",
        "len",
        "tests",
        "len",
        "tests",
        "len",
        "tests",
        "successes",
        "len",
        "tests",
        "os",
        "path",
        "dirname",
        "sys",
        "argv",
        "os",
        "path",
        "join",
        "CLI_TEST_DIR",
        "os",
        "path",
        "join",
        "REPO_DIR",
        "os",
        "path",
        "join",
        "REPO_DIR",
        "os",
        "path",
        "join",
        "PROGRAMS_DIR",
        "os",
        "path",
        "join",
        "PROGRAMS_DIR",
        "os",
        "path",
        "join",
        "TESTS_DIR",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "ZSTD_PATH",
        "help",
        "parser",
        "add_argument",
        "ZSTDGREP_PATH",
        "help",
        "parser",
        "add_argument",
        "DATAGEN_PATH",
        "help",
        "parser",
        "add_argument",
        "CLI_TEST_DIR",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "parse_args",
        "args",
        "timeout",
        "os",
        "path",
        "normpath",
        "os",
        "path",
        "abspath",
        "args",
        "test_dir",
        "os",
        "path",
        "join",
        "args",
        "test_dir",
        "os",
        "path",
        "join",
        "args",
        "test_dir",
        "args",
        "exec_prefix",
        "args",
        "exec_prefix",
        "os",
        "path",
        "abspath",
        "args",
        "zstd",
        "os",
        "path",
        "abspath",
        "args",
        "datagen",
        "os",
        "path",
        "abspath",
        "args",
        "zstdgrep",
        "os",
        "path",
        "abspath",
        "os",
        "path",
        "join",
        "args",
        "test_dir",
        "os",
        "path",
        "abspath",
        "bin_dir",
        "os",
        "getenv",
        "Options",
        "env",
        "env",
        "timeout",
        "args",
        "timeout",
        "verbose",
        "args",
        "verbose",
        "preserve",
        "args",
        "preserve",
        "test_dir",
        "args",
        "test_dir",
        "scratch_dir",
        "scratch_dir",
        "len",
        "args",
        "tests",
        "get_all_tests",
        "opts",
        "resolve_listed_tests",
        "args",
        "tests",
        "opts",
        "run_tests",
        "tests",
        "opts",
        "success",
        "sys",
        "exit",
        "sys",
        "exit"
    ],
    "literals": [
        "\"bin\"",
        "\"common\"",
        "\"scratch\"",
        "\"setup\"",
        "\"setup_once\"",
        "\"teardown\"",
        "\"teardown_once\"",
        "\"README.md\"",
        "\"run.py\"",
        "\".gitignore\"",
        "\".exact\"",
        "\".glob\"",
        "\".ignore\"",
        "\".exit\"",
        "\"rb\"",
        "\"wb\"",
        "\"wb\"",
        "\"diff\"",
        "\"utf8\"",
        "b\"\\n\"",
        "b''",
        "b\"\\n\"",
        "b''",
        "b\"\\n\"",
        "b\"\\n\"",
        "b''",
        "b\"---\\n\"",
        "b\"> \"",
        "b\"---\\n\"",
        "b\"< \"",
        "b'...\\n'",
        "b''",
        "b\"---\\n\"",
        "b\"< \"",
        "b'---\\n'",
        "b'< '",
        "b'> '",
        "f\"${k}='{v}'\"",
        "f\"{self._test_file}.stdin\"",
        "\"rb\"",
        "\"stdout\"",
        "\"stderr\"",
        "f\"check_{out_name}\"",
        "f\"{out_name} matches!\"",
        "f\"{out_name} does not match!\\n> diff expected actual\\n{diff(expected, actual)}\"",
        "f\"check_{out_name}\"",
        "f\"{out_name} matches!\"",
        "'utf8'",
        "f\"{out_name} does not match!\\n> diff expected actual\\n{utf8_diff}\"",
        "f\"{out_name}\"",
        "\"wb\"",
        "f\"{self._test_file}.{out_name}.exact\"",
        "f\"{self._test_file}.{out_name}.glob\"",
        "f\"{self._test_file}.{out_name}.ignore\"",
        "f\"check_{out_name}\"",
        "f\"{out_name} ignored!\"",
        "\"stderr\"",
        "\"stdout\"",
        "\"exit\"",
        "\"w\"",
        "\"\\n\"",
        "f\"{self._test_file}.exit\"",
        "\"check_exit\"",
        "\"check_exit\"",
        "\"Exit code matches!\"",
        "\"check_exit\"",
        "\"check_exit\"",
        "f\"Exit code mismatch! Expected {exit_code} but got {self._exit_code}\"",
        "\"PASS\"",
        "\"FAIL\"",
        "f\"{STATUS[self._succeeded]}: {self._test_name}\"",
        "f\"{STATUS[self._success[check]]}: {self._test_name}.{check}\"",
        "\"----------------------------------------\"",
        "'TestSuite'",
        "\"\"",
        "\"scratch\"",
        "\"setup_once\"",
        "\"teardown_once\"",
        "\"setup\"",
        "\"teardown\"",
        "f\"{script} failed with exit code {e.returncode}!\"",
        "f\"stderr:\\n{e.stderr}\"",
        "f\"stdout:\\n{e.stdout}\"",
        "f\"Test {test} does not exist!\"",
        "f\"FAIL: {test}\"",
        "f\"PASSED all {len(tests)} tests!\"",
        "f\"FAILED {len(tests) - successes} / {len(tests)} tests!\"",
        "\"__main__\"",
        "\"..\"",
        "\"..\"",
        "\"programs\"",
        "\"tests\"",
        "\"zstd\"",
        "\"zstdgrep\"",
        "\"datagen\"",
        "\"Runs the zstd CLI tests. Exits nonzero on failure. Default arguments are\\n\"",
        "\"generally correct. Pass --preserve to preserve test output for debugging,\\n\"",
        "\"and --verbose to get verbose test output.\\n\"",
        "\"--preserve\"",
        "\"store_true\"",
        "\"Preserve the scratch directory TEST_DIR/scratch/ for debugging purposes.\"",
        "\"--verbose\"",
        "\"store_true\"",
        "\"Verbose test output.\"",
        "\"--timeout\"",
        "\"Test case timeout in seconds. Set to 0 to disable timeouts.\"",
        "\"--exec-prefix\"",
        "\"Sets the EXEC_PREFIX environment variable. Prefix to invocations of the zstd CLI.\"",
        "\"--zstd\"",
        "\"Sets the ZSTD_BIN environment variable. Path of the zstd CLI.\"",
        "\"--zstdgrep\"",
        "\"Sets the ZSTDGREP_BIN environment variable. Path of the zstdgrep CLI.\"",
        "\"--datagen\"",
        "\"Sets the DATAGEN_BIN environment variable. Path to the datagen CLI.\"",
        "\"--test-dir\"",
        "\"Runs the tests under this directory. \"",
        "\"Adds TEST_DIR/bin/ to path. \"",
        "\"Scratch directory located in TEST_DIR/scratch/.\"",
        "\"tests\"",
        "\"*\"",
        "\"Run only these test cases. Can either be paths or test names relative to TEST_DIR/\"",
        "\"bin\"",
        "\"scratch\"",
        "\"EXEC_PREFIX\"",
        "\"ZSTD_BIN\"",
        "\"DATAGEN_BIN\"",
        "\"ZSTDGREP_BIN\"",
        "\"COMMON\"",
        "\"common\"",
        "\"PATH\"",
        "\":\"",
        "\"PATH\"",
        "\"\""
    ],
    "variables": [
        "EXCLUDED_DIRS",
        "EXCLUDED_BASENAMES",
        "EXCLUDED_SUFFIXES",
        "diff_bytes",
        "NEWLINE",
        "newline_idx",
        "end_idx",
        "end_idx",
        "line",
        "data",
        "diff",
        "actual_line",
        "actual",
        "expect_line",
        "expect",
        "actual_line",
        "actual",
        "expect_line",
        "expect",
        "actual_line",
        "actual",
        "expect_line",
        "expect",
        "next_expect_line",
        "expect",
        "actual_line",
        "actual",
        "expect_line",
        "actual_line",
        "actual",
        "expect_line",
        "expect",
        "env",
        "timeout",
        "verbose",
        "preserve",
        "scratch_dir",
        "test_dir",
        "_opts",
        "_test_file",
        "_test_name",
        "_success",
        "_message",
        "_test_stdin",
        "_scratch_dir",
        "env",
        "env",
        "k",
        "args",
        "stdin_name",
        "_test_stdin",
        "stdin",
        "stdin",
        "cwd",
        "env",
        "_test_process",
        "stdout",
        "stderr",
        "_output",
        "_exit_code",
        "_test_process",
        "_test_stdin",
        "check_name",
        "actual",
        "check_name",
        "check_name",
        "check_name",
        "check_name",
        "check_name",
        "actual",
        "diff",
        "check_name",
        "check_name",
        "utf8_diff",
        "check_name",
        "check_name",
        "actual_name",
        "exact_name",
        "glob_name",
        "ignore_name",
        "check_name",
        "check_name",
        "check_name",
        "exit_name",
        "exit_name",
        "exit_code",
        "exit_code",
        "STATUS",
        "checks",
        "_succeeded",
        "_opts",
        "_test_dir",
        "rel_test_dir",
        "_scratch_dir",
        "test_filename",
        "setup_script",
        "teardown_script",
        "test_scratch_dir",
        "setup_script",
        "test_scratch_dir",
        "teardown_script",
        "env",
        "env",
        "k",
        "TestSuites",
        "test_suites",
        "dirs",
        "test_cases",
        "test_suites",
        "root",
        "test_suites",
        "test",
        "test",
        "test_suite",
        "test_case",
        "tests",
        "test_files",
        "tests",
        "successes",
        "CLI_TEST_DIR",
        "REPO_DIR",
        "PROGRAMS_DIR",
        "TESTS_DIR",
        "ZSTD_PATH",
        "ZSTDGREP_PATH",
        "DATAGEN_PATH",
        "parser",
        "args",
        "args",
        "timeout",
        "args",
        "test_dir",
        "bin_dir",
        "scratch_dir",
        "env",
        "env",
        "env",
        "env",
        "env",
        "env",
        "env",
        "opts",
        "tests",
        "tests",
        "success"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "################################################################",
        "Copyright (c) Facebook, Inc.",
        "All rights reserved.",
        "",
        "This source code is licensed under both the BSD-style license (found in the",
        "LICENSE file in the root directory of this source tree) and the GPLv2 (found",
        "in the COPYING file in the root directory of this source tree).",
        "You may select, at your option, one of the above-listed licenses.",
        "##########################################################################",
        "Handle end of file conditions - allow extra newlines",
        "Save the output to the scratch directory"
    ],
    "docstrings": [
        "\"\"\"\n    Should files under the directory :dirname: be excluded from the test runner?\n    \"\"\"",
        "\"\"\"Should the file :filename: be excluded from the test runner?\"\"\"",
        "\"\"\"Reads the file :filename: and returns the contents as bytes.\"\"\"",
        "\"\"\"Returns a diff between two different byte-strings :a: and :b:.\"\"\"",
        "\"\"\"\n    Pop the first line from :data: and returns the first line and the remainder\n    of the data as a tuple. If :data: is empty, returns :(None, data):. Otherwise\n    the first line always ends in a :\\n:, even if it is the last line and :data:\n    doesn't end in :\\n:.\n    \"\"\"",
        "\"\"\"\n    Does the `actual` line match the expected glob line `expect`?\n    \"\"\"",
        "\"\"\"\n    Returns None if the :actual: content matches the expected glob :expect:,\n    otherwise returns the diff bytes.\n    \"\"\"",
        "\"\"\"Options configuring how to run a :TestCase:.\"\"\"",
        "\"\"\"\n    Logic and state related to running a single test case.\n\n    1. Initialize the test case.\n    2. Launch the test case with :TestCase.launch():.\n       This will start the test execution in a subprocess, but\n       not wait for completion. So you could launch multiple test\n       cases in parallel. This will now print any test output.\n    3. Analyze the results with :TestCase.analyze():. This will\n       join the test subprocess, check the results against the\n       expectations, and print the results to stdout.\n\n    :TestCase.run(): is also provided which combines the launch & analyze\n    steps for single-threaded use-cases.\n\n    All other methods, prefixed with _, are private helper functions.\n    \"\"\"",
        "\"\"\"\n        Initialize the :TestCase: for the test located in :test_filename:\n        with the given :options:.\n        \"\"\"",
        "\"\"\"Returns the unique name for the test.\"\"\"",
        "\"\"\"\n        Launch the test case as a subprocess, but do not block on completion.\n        This allows users to run multiple tests in parallel. Results aren't yet\n        printed out.\n        \"\"\"",
        "\"\"\"\n        Must be called after :TestCase.launch():. Joins the test subprocess and\n        checks the results against expectations. Finally prints the results to\n        stdout and returns the success.\n        \"\"\"",
        "\"\"\"Shorthand for combining both :TestCase.launch(): and :TestCase.analyze():.\"\"\"",
        "\"\"\"Logs test output.\"\"\"",
        "\"\"\"Logs verbose test output.\"\"\"",
        "\"\"\"\n        Returns the environment to be used for the\n        test subprocess.\n        \"\"\"",
        "\"\"\"Launch the test subprocess, but do not join it.\"\"\"",
        "\"\"\"Join the test process and save stderr, stdout, and the exit code.\"\"\"",
        "\"\"\"\n        Check the output named :out_name: for an exact match against the :expected: content.\n        Saves the success and message.\n        \"\"\"",
        "\"\"\"\n        Check the output named :out_name: for a glob match against the :expected: glob.\n        Saves the success and message.\n        \"\"\"",
        "\"\"\"\n        Checks the output named :out_name: for a match against the expectation.\n        We check for a .exact, .glob, and a .ignore file. If none are found we\n        expect that the output should be empty.\n\n        If :Options.preserve: was set then we save the scratch directory and\n        save the stderr, stdout, and exit code to the scratch directory for\n        debugging.\n        \"\"\"",
        "\"\"\"Checks the stderr output against the expectation.\"\"\"",
        "\"\"\"Checks the stdout output against the expectation.\"\"\"",
        "\"\"\"\n        Checks the exit code against expectations. If a .exit file\n        exists, we expect that the exit code matches the contents.\n        Otherwise we expect the exit code to be zero.\n\n        If :Options.preserve: is set we save the exit code to the\n        scratch directory under the filename \"exit\".\n        \"\"\"",
        "\"\"\"\n        After all tests have been checked, collect all the successes\n        and messages, and print the results to stdout.\n        \"\"\"",
        "\"\"\"\n    Setup & teardown test suite & cases.\n    This class is intended to be used as a context manager.\n\n    TODO: Make setup/teardown failure emit messages, not throw exceptions.\n    \"\"\"",
        "\"\"\"\n        Context manager for a test case in the test suite.\n        Pass the basename of the test relative to the :test_directory:.\n        \"\"\"",
        "\"\"\"Helper to remove a scratch directory with sanity checks\"\"\"",
        "\"\"\"\n    Find all the test in the test directory and return the test suites.\n    \"\"\"",
        "\"\"\"\n    Resolve the list of tests passed on the command line into their\n    respective test suites. Tests can either be paths, or test names\n    relative to the test directory.\n    \"\"\"",
        "\"\"\"\n    Runs all the test in the :test_suites: with the given :options:.\n    Prints the results to stdout.\n    \"\"\""
    ],
    "functions": [
        "exclude_dir",
        "exclude_file",
        "read_file",
        "diff",
        "pop_line",
        "glob_line_matches",
        "glob_diff",
        "name",
        "launch",
        "analyze",
        "run",
        "_log",
        "_vlog",
        "_test_environment",
        "_launch_test",
        "_join_test",
        "_check_output_exact",
        "_check_output_glob",
        "_check_output",
        "_check_stderr",
        "_check_stdout",
        "_check_exit",
        "_analyze_results",
        "__enter__",
        "__exit__",
        "test_case",
        "_remove_scratch_dir",
        "_setup_once",
        "_teardown_once",
        "_setup",
        "_teardown",
        "_run_script",
        "get_all_tests",
        "resolve_listed_tests",
        "run_tests"
    ],
    "classes": [
        "Options",
        "TestCase",
        "TestSuite"
    ]
}