{
    "identifiers": [
        "express",
        "Action",
        "Page",
        "PageSet",
        "Query",
        "MyOwnJSON",
        "Files",
        "Folder",
        "Comment",
        "fs",
        "checkAuth",
        "checkAuth2",
        "generatedHash",
        "express",
        "router",
        "req",
        "res",
        "next",
        "Page",
        "pages",
        "pages",
        "page",
        "page",
        "newArray",
        "page",
        "page",
        "page",
        "res",
        "newArray",
        "router",
        "req",
        "res",
        "next",
        "Action",
        "req",
        "actions",
        "actions",
        "message",
        "message",
        "res",
        "message",
        "actions",
        "error",
        "res",
        "error",
        "router",
        "req",
        "res",
        "next",
        "Action",
        "req",
        "actions",
        "actions",
        "actions",
        "message",
        "exist",
        "message",
        "exist",
        "res",
        "message",
        "exist",
        "actions",
        "error",
        "res",
        "error",
        "router",
        "checkAuth",
        "req",
        "res",
        "next",
        "Action",
        "req",
        "req",
        "req",
        "resultAction",
        "resultAction",
        "res",
        "resultAction",
        "res",
        "error",
        "res",
        "pageObj",
        "Page",
        "pageObj",
        "page",
        "page",
        "page",
        "page",
        "page",
        "i",
        "subPagesResult",
        "i",
        "subPagesOfSubPage",
        "subPagesResult",
        "i",
        "getHierarchyOfPages",
        "subPagesResult",
        "i",
        "subPagesOfSubPage",
        "subPagesOfSubPage",
        "router",
        "checkAuth2",
        "req",
        "res",
        "next",
        "req",
        "Action",
        "req",
        "req",
        "actionResult",
        "actionResult",
        "actionResult",
        "pages",
        "i",
        "pages",
        "i",
        "hierarchyOfPages",
        "pages",
        "i",
        "getHierarchyOfPages",
        "pages",
        "i",
        "res",
        "actionResult",
        "hierarchyOfPages",
        "res",
        "actionResult",
        "res",
        "error",
        "res",
        "error",
        "req",
        "Action",
        "req",
        "result",
        "result",
        "result",
        "pages",
        "i",
        "pages",
        "i",
        "hierarchyOfPages",
        "pages",
        "i",
        "getHierarchyOfPages",
        "pages",
        "i",
        "res",
        "result",
        "hierarchyOfPages",
        "res",
        "result",
        "res",
        "error",
        "res",
        "error",
        "itemToSearch",
        "arrayOfItems",
        "arrayOfItems",
        "i",
        "arrayOfItems",
        "i",
        "arrayOfItems",
        "i",
        "itemToSearch",
        "i",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "req",
        "req",
        "oldHostUrl",
        "newHostUrl",
        "req",
        "filesJsonExported",
        "projectFiles",
        "filesJsonExported",
        "filesJsonExported",
        "file",
        "filesIndices",
        "file",
        "Files",
        "filesIndices",
        "foundFiles",
        "foundFiles",
        "item",
        "searchItemInArray",
        "item",
        "newFiles",
        "index",
        "newFiles",
        "index",
        "newFiles",
        "Files",
        "newFiles",
        "filesInserted",
        "projectFiles",
        "projectFiles",
        "file",
        "file",
        "Buffer",
        "file",
        "fs",
        "path",
        "buf",
        "err",
        "err",
        "err",
        "res",
        "file",
        "err",
        "counter",
        "setInterval",
        "counter",
        "clearInterval",
        "timeout",
        "foundFilesError",
        "res",
        "foundFilesError",
        "filesError",
        "res",
        "filesError",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "req",
        "req",
        "foldersJsonExported",
        "foldersJsonExported",
        "foldersJsonExported",
        "folder",
        "folderIndices",
        "folder",
        "Folder",
        "folderIndices",
        "foundFolders",
        "foundFolders",
        "item",
        "searchItemInArray",
        "item",
        "newFolders",
        "index",
        "newFolders",
        "index",
        "newFolders",
        "newFolders",
        "Folder",
        "newFolders",
        "foldersResults",
        "addFiles",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "foundFoldersError",
        "res",
        "foundFoldersError",
        "addFiles",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "foldersError",
        "res",
        "foldersError",
        "addFiles",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "req",
        "req",
        "oldHostUrl",
        "newHostUrl",
        "myOwnJsonExported",
        "myOwnJsonExported",
        "myOwnJsonExported",
        "myOwnJson",
        "myOwnJsonIndices",
        "myOwnJson",
        "MyOwnJSON",
        "myOwnJsonIndices",
        "foundJsons",
        "foundJsons",
        "item",
        "searchItemInArray",
        "item",
        "newMyOwnJsons",
        "index",
        "newMyOwnJsons",
        "index",
        "newMyOwnJsons",
        "newMyOwnJsons",
        "MyOwnJSON",
        "newMyOwnJsons",
        "jsonsInserted",
        "addFolders",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "jsonsInserted",
        "res",
        "jsonsInserted",
        "addFolders",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "jsonsSearchError",
        "res",
        "jsonsSearchError",
        "addFolders",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "req",
        "req",
        "oldHostUrl",
        "newHostUrl",
        "queriesExported",
        "queriesExported",
        "queriesExported",
        "item",
        "queriesIndices",
        "item",
        "Query",
        "queriesIndices",
        "foundQueries",
        "foundQueries",
        "item",
        "searchItemInArray",
        "item",
        "newQueries",
        "index",
        "newQueries",
        "index",
        "newQueries",
        "newQueries",
        "Query",
        "newQueries",
        "queriesInserted",
        "addMyOwnJsons",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "queriesInsertedError",
        "res",
        "queriesInsertedError",
        "addMyOwnJsons",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "queriesError",
        "res",
        "queriesError",
        "addMyOwnJsons",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "req",
        "oldHostUrl",
        "newHostUrl",
        "Page",
        "pagesExported",
        "pagesInserted",
        "addQueries",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "res",
        "pagesError",
        "res",
        "pagesError",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "req",
        "req",
        "oldHostUrl",
        "newHostUrl",
        "commentsExported",
        "commentsExported",
        "commentsExported",
        "item",
        "commentsIndices",
        "item",
        "Comment",
        "commentsIndices",
        "foundComments",
        "foundComments",
        "item",
        "searchItemInArray",
        "item",
        "newComments",
        "index",
        "newComments",
        "index",
        "newComments",
        "Comment",
        "newComments",
        "commentsInserted",
        "foundCommentsError",
        "res",
        "foundCommentsError",
        "addPages",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "commentsError",
        "res",
        "commentsError",
        "addPages",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "router",
        "checkAuth",
        "req",
        "res",
        "next",
        "req",
        "req",
        "req",
        "Action",
        "req",
        "oldHostUrl",
        "newHostUrl",
        "PageSet",
        "req",
        "oldHostUrl",
        "newHostUrl",
        "actionExported",
        "resultAction",
        "Action",
        "resultAction",
        "req",
        "updatedAction",
        "pageSetExported",
        "pageSetResult",
        "addComments",
        "req",
        "res",
        "oldHostUrl",
        "newHostUrl",
        "pageSetError",
        "res",
        "pageSetError",
        "updateActionError",
        "res",
        "updateActionError",
        "createActionError",
        "res",
        "createActionError",
        "router",
        "checkAuth",
        "req",
        "res",
        "next",
        "req",
        "Action",
        "PageSet",
        "pageSet_id",
        "pageSet",
        "Page",
        "pageSet",
        "mainPage",
        "newAction",
        "mainPage",
        "newAction",
        "mainPage",
        "newAction",
        "pageSet",
        "newAction",
        "mainPage",
        "Page",
        "pageSet",
        "allPages",
        "allPages",
        "i",
        "allPages",
        "i",
        "allPages",
        "i",
        "query",
        "queries",
        "query",
        "queries",
        "Query",
        "queries",
        "creatorResults",
        "newAction",
        "creatorResults",
        "newAction",
        "newActionCreated",
        "res",
        "newActionCreated",
        "newActionError",
        "res",
        "newActionError",
        "creatorError",
        "res",
        "creatorError",
        "allPagesError",
        "res",
        "allPagesError",
        "mainPageError",
        "res",
        "mainPageError",
        "pageSetErr",
        "res",
        "pageSetErr",
        "router",
        "checkAuth",
        "req",
        "res",
        "next",
        "req",
        "req",
        "res",
        "req",
        "messages",
        "req",
        "messages",
        "messages",
        "res",
        "messages",
        "Action",
        "req",
        "req",
        "req",
        "req",
        "req",
        "PageSet",
        "defaultTitle",
        "defaultDescription",
        "defaultLinkToImage",
        "generatedHash",
        "newPageSet",
        "resultPageSet",
        "newAction",
        "resultPageSet",
        "newAction",
        "newAction",
        "resultAction",
        "res",
        "resultAction",
        "errorAction",
        "PageSet",
        "resultPageSet",
        "res",
        "errorAction",
        "errorPageSet",
        "res",
        "resultPageSet",
        "errorPageSet",
        "error",
        "res",
        "error",
        "req",
        "Page",
        "defaultTitle",
        "defaultDescription",
        "newPage",
        "resultPage",
        "newAction",
        "resultPage",
        "newAction",
        "newAction",
        "resultAction",
        "res",
        "resultAction",
        "errorAction",
        "PageSet",
        "resultPage",
        "res",
        "errorAction",
        "error",
        "res",
        "resultPage",
        "error",
        "res",
        "error",
        "router",
        "checkAuth",
        "req",
        "res",
        "next",
        "req",
        "messages",
        "req",
        "messages",
        "messages",
        "res",
        "messages",
        "Action",
        "req",
        "req",
        "req",
        "req",
        "req",
        "req",
        "resultAction",
        "resultAction",
        "res",
        "resultAction",
        "res",
        "error",
        "res",
        "router",
        "checkAuth",
        "req",
        "res",
        "next",
        "Action",
        "req",
        "req",
        "resultAction",
        "resultAction",
        "res",
        "resultAction",
        "resultAction",
        "resultAction",
        "query",
        "query",
        "Query",
        "allQueries",
        "error",
        "error",
        "Page",
        "resultAction",
        "deletedPage",
        "deletedPage",
        "Action",
        "resultAction",
        "deletedAction",
        "deletedAction",
        "res",
        "res",
        "errorAction",
        "res",
        "errorAction",
        "res",
        "errorPage",
        "res",
        "errorPage",
        "resultAction",
        "resultAction",
        "amountPages",
        "resultAction",
        "accumulator",
        "page",
        "accumulator",
        "page",
        "query",
        "query",
        "resultAction",
        "page",
        "page",
        "Query",
        "allQueries",
        "error",
        "error",
        "Page",
        "allPages",
        "resultPages",
        "resultPages",
        "resultPages",
        "amountPages",
        "PageSet",
        "resultAction",
        "Action",
        "resultAction",
        "p1",
        "p2",
        "values",
        "values",
        "values",
        "values",
        "res",
        "res",
        "error",
        "res",
        "error",
        "res",
        "error",
        "res",
        "error",
        "PageSet",
        "resultAction",
        "Action",
        "resultAction",
        "p1",
        "p2",
        "values",
        "values",
        "values",
        "values",
        "res",
        "res",
        "error",
        "res",
        "error",
        "res",
        "error",
        "res",
        "router"
    ],
    "literals": [
        "'express'",
        "'../models/action'",
        "'../models/page'",
        "'../models/page-set'",
        "'../models/query'",
        "'../models/myOwnJson'",
        "'../models/files'",
        "'../models/folder'",
        "'../models/comment'",
        "'fs'",
        "'../middleware/check-auth'",
        "'../middleware/check-auth-without-immediate-response'",
        "'../middleware/hash-generator'",
        "'/featured'",
        "\"here are the featured responses\"",
        "'/allActionsAndItsPages/:userId'",
        "'hasPage'",
        "'hasPageSet'",
        "'hasPages'",
        "'No actions were found'",
        "'All actions were found'",
        "'Fetching all actions failed'",
        "'/checkIfShortNameExist/:shortName'",
        "'No actions were found'",
        "'All actions were found'",
        "'Checking shortname failed'",
        "'/setShortName/:shortName/:id'",
        "'Action was updated successfully'",
        "'Action cannot be updated'",
        "'Update action failed'",
        "'hasSubPages'",
        "'/:id'",
        "'hasPage'",
        "'hasPageSet'",
        "'hasPages'",
        "'Action was found'",
        "'Action was found'",
        "'Action was not found'",
        "'Fetching action failed'",
        "'hasPage'",
        "'hasPageSet'",
        "'hasPages'",
        "'Action was found'",
        "'Action was found'",
        "'Action was not found'",
        "'Fetching action failed'",
        "'backend/files/'",
        "'binary'",
        "'printing the error:  '",
        "'Adding file '",
        "\" failed\"",
        "'Something happened while searching for the files'",
        "'Something happened while Adding the Files to the database'",
        "'Something happened while Inserting the folders'",
        "'Something happened while Searching for the Folders'",
        "'Something happened while adding the jsons'",
        "'Something happened while searching for the jsons'",
        "'Something happened while adding the queries'",
        "'Something happened while searching for the queries'",
        "'Project created successfully'",
        "'Something happened while creating the pages'",
        "'Something happened while searching for the comments'",
        "'Something happened while creating the comments'",
        "'/createProject/'",
        "\"://\"",
        "\"host\"",
        "'Something happened while creating the pageSet'",
        "'a problem with the pageSet'",
        "'Action cannot be updated with the pageSet'",
        "'Action cannot be created '",
        "'/reloadProject/'",
        "''",
        "''",
        "'page-set'",
        "''",
        "'Action created successfully'",
        "'Error while saving new Action'",
        "'Error retrieving Creator'",
        "'Error retrieving All Pages'",
        "'Error retrieving main Page'",
        "'Error retrieving PageSet'",
        "''",
        "'page-set'",
        "'page'",
        "'Type is invalid'",
        "'Your title is invalid!'",
        "'Your description is invalid!'",
        "'page-set'",
        "'if req.body.type === page-set'",
        "'document index'",
        "'You can change the title of this inseri document '",
        "'as well as the description by clicking on the \\'change document title and description\\' button on the '",
        "'bottom right'",
        "'../../../../assets/img/pageset.png'",
        "'Action with PageSet was created successfully'",
        "'Action cannot be created'",
        "'Fatal error! Page set with ID: '",
        "' cannot be deleted'",
        "'Creating PageSet failed'",
        "'page'",
        "'req.body.type === page'",
        "'Title for the new Page'",
        "'Description for the new Page'",
        "'Action with Page was created successfully'",
        "'Action cannot be created'",
        "'Fatal error! Page with ID: '",
        "' cannot be deleted'",
        "'Creating Page failed'",
        "'/:id'",
        "'Your title is invalid!'",
        "'Your description is invalid!'",
        "'hasPage'",
        "'hasPageSet'",
        "'hasPages'",
        "'Action was updated successfully'",
        "'Action cannot be updated'",
        "'Update action failed'",
        "'/:id'",
        "'hasPage'",
        "'queries'",
        "'hasPageSet'",
        "'hasPages'",
        "'queries'",
        "'Action ID is not valid'",
        "'page'",
        "'Action deleted'",
        "'Action cannot be deleted'",
        "'Deleting Action failed'",
        "'Page cannot be deleted'",
        "'Deleting Page failed'",
        "'page-set'",
        "'Action, page set and pages were deleted'",
        "'Action or/and page set can\\'t be deleted'",
        "'Deleting action, page set and pages failed'",
        "'Pages can\\'t be deleted'",
        "'Deleting action, page set and pages failed'",
        "'Action and page set were deleted'",
        "'Action or/and page set can\\'t be deleted'",
        "'Deleting action and page set failed'",
        "'Type is invalid'",
        "'Fetching action failed'"
    ],
    "variables": [
        "router",
        "newArray",
        "message",
        "exist",
        "message",
        "page",
        "subPagesOfSubPage",
        "subPagesResult",
        "i",
        "hierarchyOfPages",
        "pages",
        "i",
        "hierarchyOfPages",
        "pages",
        "i",
        "i",
        "filesJsonExported",
        "projectFiles",
        "newFiles",
        "filesIndices",
        "index",
        "counter",
        "path",
        "buf",
        "timeout",
        "foldersJsonExported",
        "newFolders",
        "folderIndices",
        "index",
        "myOwnJsonExported",
        "newMyOwnJsons",
        "myOwnJsonIndices",
        "index",
        "queriesExported",
        "queriesIndices",
        "newQueries",
        "index",
        "pagesExported",
        "commentsExported",
        "newComments",
        "commentsIndices",
        "index",
        "oldHostUrl",
        "newHostUrl",
        "actionExported",
        "pageSetExported",
        "pageSet_id",
        "newAction",
        "queries",
        "i",
        "messages",
        "newAction",
        "defaultTitle",
        "defaultDescription",
        "defaultLinkToImage",
        "newPageSet",
        "defaultTitle",
        "defaultDescription",
        "newPage",
        "messages",
        "allQueries",
        "amountPages",
        "allQueries",
        "allPages",
        "p1",
        "p2",
        "p1",
        "p2"
    ],
    "comments": [
        "router.get('', checkAuth, (req, res, next) => {\n  Action.find()\n    .populate('creator')\n    .then(actions => {\n      let message;\n      if (actions.length === 0) {\n        message = 'No actions were found'\n      } else if (actions.length === 1) {\n        message = 'One action was found'\n      } else {\n        message = 'All actions were found'\n      }\n      res.status(200).json({\n        message: message,\n        actions: actions\n      });\n    })\n    .catch(error => {\n      res.status(500).json({\n        message: 'Fetching all actions failed',\n        error: error\n      })\n    })\n});",
        ".split();",
        "Authorisation (only if user is also the creator of the action)",
        "base64",
        "tempError=true;",
        "Checks if type is valid",
        "console.log('printing the action: ' + req.body);",
        "Tests if title is undefined, null or is empty string",
        "Tests if description is undefined, null or is empty string",
        "Attaches error messages to the response",
        "Case 1: action has a page set",
        "Default values for the pageset",
        "Case 2: action has a page",
        "Default values for the page",
        "Tests if title is undefined, null or is empty string",
        "Tests if description is undefined, null or is empty string",
        "Attaches error messages to the response",
        "Updates action and returns the updated action",
        "Checks if action ID is valid",
        "Case 1: action has a page",
        "Updates the query so it will not be bound to a page",
        "Array with all the queries in the page which belongs to the action",
        "Sets the queries to unbound",
        "Deletes the page of the action",
        "Deletes the action",
        "Case 2: action has a page set",
        "Checks if pageset has any pages",
        "Array with all the queries from all the pages in the pageset which belongs to the action",
        "Array with all the pages in the pageset which belongs to the action",
        "Sets the queries to unbound",
        "Deletes all the pages in the pageset",
        "Deletes the pageset and the action",
        "Deletes the pageset and the action"
    ],
    "docstrings": [
        "* Returns the hierarchy of pages and its subPages",
        "* Searched for an Item in an array, if found returns its index otherwise returns -1",
        "* Creates the Files extracted from the configuration files used to create a project --> Import project function",
        "* Creates the Folders extracted from the configuration files used to create a project --> Import project function",
        "* Creates the myOwnJsons extracted from the configuration files used to create a project --> Import project function",
        "* Creates the queries extracted from the configuration files used to create a project --> Import project function",
        "* Creates the pages extracted from the configuration files used to create a project --> Import project function",
        "* Creates the comments extracted from the configuration files used to create a project --> Import project function",
        "* Creates a project based on the imported configuration files."
    ],
    "functions": [
        "getHierarchyOfPages",
        "searchItemInArray",
        "addFiles",
        "addFolders",
        "addMyOwnJsons",
        "addQueries",
        "addPages",
        "addComments"
    ],
    "classes": []
}