{
    "identifiers": [
        "abc",
        "argparse",
        "binascii",
        "codecs",
        "collections",
        "ctypes",
        "functools",
        "hashlib",
        "importlib",
        "inspect",
        "itertools",
        "json",
        "os",
        "platform",
        "re",
        "shutil",
        "site",
        "socket",
        "subprocess",
        "sys",
        "tempfile",
        "time",
        "traceback",
        "configparser",
        "xmlrpc",
        "client",
        "xmlrpclib",
        "functools",
        "lru_cache",
        "io",
        "StringIO",
        "urllib",
        "request",
        "urlopen",
        "format",
        "GEF_PROMPT",
        "format",
        "GEF_PROMPT",
        "url",
        "urlopen",
        "url",
        "http",
        "getcode",
        "http",
        "read",
        "argv",
        "argv",
        "http_get",
        "format",
        "ver",
        "latest_gef_data",
        "tempfile",
        "mkstemp",
        "suffix",
        "os",
        "write",
        "fd",
        "latest_gef_data",
        "os",
        "close",
        "fd",
        "subprocess",
        "run",
        "fname",
        "ver",
        "stdout",
        "subprocess",
        "DEVNULL",
        "stderr",
        "subprocess",
        "DEVNULL",
        "returncode",
        "os",
        "unlink",
        "fname",
        "retcode",
        "gdb",
        "ImportError",
        "len",
        "sys",
        "argv",
        "sys",
        "argv",
        "lower",
        "sys",
        "exit",
        "update_gef",
        "sys",
        "argv",
        "sys",
        "exit",
        "DEFAULT_PAGE_ALIGN_SHIFT",
        "os",
        "getenv",
        "os",
        "path",
        "join",
        "os",
        "getenv",
        "os",
        "path",
        "join",
        "tempfile",
        "gettempdir",
        "re",
        "search",
        "gdb",
        "VERSION",
        "groups",
        "__gef_default_main_arena__",
        "mod",
        "dir",
        "sys",
        "modules",
        "getattr",
        "sys",
        "modules",
        "mod",
        "hasattr",
        "obj",
        "obj",
        "cache_clear",
        "text",
        "highlight_table",
        "text",
        "get_gef_setting",
        "match",
        "color",
        "highlight_table",
        "items",
        "re",
        "sub",
        "match",
        "Color",
        "colorify",
        "color",
        "text",
        "text",
        "re",
        "split",
        "ANSI_SPLIT_RE",
        "text",
        "match",
        "color",
        "highlight_table",
        "items",
        "index",
        "val",
        "ansiSplit",
        "val",
        "find",
        "match",
        "found",
        "val",
        "replace",
        "match",
        "Color",
        "colorify",
        "match",
        "color",
        "join",
        "ansiSplit",
        "re",
        "split",
        "ANSI_SPLIT_RE",
        "text",
        "join",
        "ansiSplit",
        "x",
        "args",
        "kwargs",
        "highlight_text",
        "x",
        "__gef_int_stream_buffer__",
        "is_debug",
        "__gef_int_stream_buffer__",
        "write",
        "x",
        "kwargs",
        "get",
        "x",
        "args",
        "kwargs",
        "f",
        "functools",
        "wraps",
        "f",
        "args",
        "kwargs",
        "__gef_int_stream_buffer__",
        "__gef_redirect_output_fd__",
        "__gef_int_stream_buffer__",
        "f",
        "args",
        "kwargs",
        "StringIO",
        "f",
        "args",
        "kwargs",
        "get_gef_setting",
        "redirect",
        "startswith",
        "__gef_redirect_output_fd__",
        "open",
        "redirect",
        "fd",
        "redirect",
        "__gef_redirect_output_fd__",
        "name",
        "__gef_redirect_output_fd__",
        "close",
        "open",
        "redirect",
        "fd",
        "__gef_redirect_output_fd__",
        "sys",
        "stdout",
        "__gef_redirect_output_fd__",
        "fd",
        "closed",
        "sys",
        "stdout",
        "set_gef_setting",
        "fd",
        "write",
        "__gef_int_stream_buffer__",
        "getvalue",
        "fd",
        "flush",
        "rv",
        "wrapper",
        "staticmethod",
        "msg",
        "Color",
        "colorify",
        "msg",
        "staticmethod",
        "msg",
        "Color",
        "colorify",
        "msg",
        "staticmethod",
        "msg",
        "Color",
        "colorify",
        "msg",
        "staticmethod",
        "msg",
        "Color",
        "colorify",
        "msg",
        "staticmethod",
        "msg",
        "Color",
        "colorify",
        "msg",
        "staticmethod",
        "msg",
        "Color",
        "colorify",
        "msg",
        "staticmethod",
        "msg",
        "Color",
        "colorify",
        "msg",
        "staticmethod",
        "msg",
        "Color",
        "colorify",
        "msg",
        "staticmethod",
        "msg",
        "Color",
        "colorify",
        "msg",
        "staticmethod",
        "msg",
        "Color",
        "colorify",
        "msg",
        "staticmethod",
        "msg",
        "Color",
        "colorify",
        "msg",
        "staticmethod",
        "msg",
        "Color",
        "colorify",
        "msg",
        "staticmethod",
        "text",
        "attrs",
        "get_gef_setting",
        "text",
        "Color",
        "colors",
        "colors",
        "attr",
        "attr",
        "attrs",
        "split",
        "attr",
        "colors",
        "msg",
        "append",
        "text",
        "colors",
        "msg",
        "msg",
        "append",
        "colors",
        "colors",
        "msg",
        "msg",
        "append",
        "colors",
        "colors",
        "msg",
        "msg",
        "append",
        "colors",
        "msg",
        "append",
        "colors",
        "join",
        "msg",
        "args",
        "kwargs",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "format_address",
        "value",
        "get_gef_setting",
        "get_gef_setting",
        "get_gef_setting",
        "is_in_text_segment",
        "Color",
        "colorify",
        "value",
        "code_color",
        "is_in_heap_segment",
        "Color",
        "colorify",
        "value",
        "heap_color",
        "is_in_stack_segment",
        "Color",
        "colorify",
        "value",
        "stack_color",
        "value",
        "hasattr",
        "info",
        "info",
        "name",
        "hasattr",
        "section",
        "get_filepath",
        "section",
        "path",
        "section",
        "is_executable",
        "hasattr",
        "section",
        "section",
        "path",
        "hasattr",
        "section",
        "section",
        "path",
        "align_address",
        "value",
        "dereference",
        "addr",
        "derefed",
        "derefed",
        "READ",
        "WRITE",
        "EXECUTE",
        "kwargs",
        "kwargs",
        "get",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "perm_str",
        "Permission",
        "READ",
        "perm_str",
        "Permission",
        "WRITE",
        "perm_str",
        "Permission",
        "EXECUTE",
        "perm_str",
        "staticmethod",
        "args",
        "Permission",
        "arg",
        "args",
        "arg",
        "perm",
        "value",
        "Permission",
        "READ",
        "arg",
        "perm",
        "value",
        "Permission",
        "WRITE",
        "arg",
        "perm",
        "value",
        "Permission",
        "EXECUTE",
        "perm",
        "staticmethod",
        "perm_str",
        "Permission",
        "perm_str",
        "perm",
        "value",
        "Permission",
        "READ",
        "perm_str",
        "perm",
        "value",
        "Permission",
        "WRITE",
        "perm_str",
        "perm",
        "value",
        "Permission",
        "EXECUTE",
        "perm",
        "args",
        "kwargs",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "permission",
        "value",
        "permission",
        "value",
        "Permission",
        "READ",
        "permission",
        "value",
        "permission",
        "value",
        "Permission",
        "WRITE",
        "permission",
        "value",
        "permission",
        "value",
        "Permission",
        "EXECUTE",
        "property",
        "page_end",
        "page_start",
        "page_end",
        "page_start",
        "property",
        "path",
        "__gef_remote__",
        "format",
        "__gef_remote__",
        "path",
        "collections",
        "namedtuple",
        "ELF_MAGIC",
        "ELF_32_BITS",
        "LITTLE_ENDIAN",
        "ET_EXEC",
        "X86_32",
        "elf",
        "minimalist",
        "minimalist",
        "os",
        "access",
        "elf",
        "os",
        "R_OK",
        "err",
        "format",
        "elf",
        "err",
        "open",
        "elf",
        "fd",
        "e_magic",
        "e_class",
        "e_endianness",
        "e_eiversion",
        "unpack",
        "fd",
        "read",
        "e_endianness",
        "Elf",
        "LITTLE_ENDIAN",
        "e_osabi",
        "e_abiversion",
        "unpack",
        "format",
        "endian",
        "fd",
        "read",
        "fd",
        "read",
        "e_type",
        "e_machine",
        "e_version",
        "unpack",
        "format",
        "endian",
        "fd",
        "read",
        "e_class",
        "Elf",
        "ELF_64_BITS",
        "e_entry",
        "e_phoff",
        "e_shoff",
        "unpack",
        "format",
        "endian",
        "fd",
        "read",
        "e_entry",
        "e_phoff",
        "e_shoff",
        "unpack",
        "format",
        "endian",
        "fd",
        "read",
        "e_flags",
        "e_ehsize",
        "e_phentsize",
        "e_phnum",
        "unpack",
        "format",
        "endian",
        "fd",
        "read",
        "e_shentsize",
        "e_shnum",
        "e_shstrndx",
        "unpack",
        "format",
        "endian",
        "fd",
        "read",
        "e_magic",
        "Elf",
        "ELF_MAGIC",
        "address",
        "location",
        "mnemo",
        "operands",
        "opcodes",
        "address",
        "location",
        "mnemonic",
        "operands",
        "opcodes",
        "address",
        "location",
        "mnemo",
        "operands",
        "opcodes",
        "format_spec",
        "len",
        "format_spec",
        "format_spec",
        "format_spec",
        "len",
        "opcodes",
        "format_spec",
        "join",
        "format",
        "b",
        "b",
        "opcodes",
        "opcodes_len",
        "opcodes_len",
        "len",
        "opcodes",
        "opcodes_text",
        "format",
        "address",
        "opcodes_text",
        "opcodes_len",
        "location",
        "mnemonic",
        "join",
        "operands",
        "format",
        "address",
        "location",
        "mnemonic",
        "join",
        "operands",
        "mnemonic",
        "lru_cache",
        "__gef_default_main_arena__",
        "to_unsigned_long",
        "gdb",
        "parse_and_eval",
        "is_x86",
        "align_address_to_size",
        "malloc_hook_addr",
        "current_arch",
        "ptrsize",
        "is_arch",
        "Elf",
        "AARCH64",
        "is_arch",
        "Elf",
        "ARM",
        "malloc_hook_addr",
        "current_arch",
        "ptrsize",
        "MallocStateStruct",
        "struct_size",
        "OSError",
        "format",
        "current_arch",
        "arch",
        "format",
        "addr",
        "addr",
        "addr",
        "to_unsigned_long",
        "gdb",
        "parse_and_eval",
        "format",
        "addr",
        "gdb",
        "error",
        "search_for_main_arena",
        "cached_lookup_type",
        "cached_lookup_type",
        "size_t",
        "current_arch",
        "ptrsize",
        "cached_lookup_type",
        "ptr_type",
        "get_libc_version",
        "align_address_to_size",
        "int_size",
        "int_size",
        "property",
        "__addr",
        "property",
        "__addr",
        "fastbin_offset",
        "property",
        "fastbins_addr",
        "num_fastbins",
        "current_arch",
        "ptrsize",
        "property",
        "top_addr",
        "current_arch",
        "ptrsize",
        "property",
        "last_remainder_addr",
        "current_arch",
        "ptrsize",
        "property",
        "bins_addr",
        "num_bins",
        "current_arch",
        "ptrsize",
        "int_size",
        "property",
        "next_addr",
        "current_arch",
        "ptrsize",
        "property",
        "next_free_addr",
        "current_arch",
        "ptrsize",
        "property",
        "system_mem_addr",
        "current_arch",
        "ptrsize",
        "__addr",
        "property",
        "get_size_t_array",
        "fastbins_addr",
        "num_fastbins",
        "property",
        "get_size_t_pointer",
        "top_addr",
        "property",
        "get_size_t_pointer",
        "last_remainder_addr",
        "property",
        "get_size_t_array",
        "bins_addr",
        "num_bins",
        "property",
        "get_size_t_pointer",
        "next_addr",
        "property",
        "get_size_t_pointer",
        "next_free_addr",
        "property",
        "get_size_t",
        "system_mem_addr",
        "addr",
        "dereference",
        "addr",
        "cast",
        "size_t",
        "addr",
        "size_t",
        "pointer",
        "dereference",
        "addr",
        "cast",
        "size_t_pointer",
        "addr",
        "length",
        "size_t",
        "array",
        "length",
        "dereference",
        "addr",
        "cast",
        "size_t_array",
        "item",
        "getattr",
        "item",
        "addr",
        "name",
        "name",
        "__gef_default_main_arena__",
        "gdb",
        "parse_and_eval",
        "addr",
        "cached_lookup_type",
        "arena",
        "cast",
        "malloc_state_t",
        "arena",
        "address",
        "MallocStateStruct",
        "addr",
        "__arena",
        "addr",
        "top",
        "last_remainder",
        "next",
        "next_free",
        "system_mem",
        "item",
        "__arena",
        "item",
        "item",
        "__arena",
        "item",
        "__addr",
        "i",
        "fastbinsY",
        "i",
        "addr",
        "GlibcChunk",
        "addr",
        "current_arch",
        "ptrsize",
        "i",
        "i",
        "bins",
        "idx",
        "bins",
        "idx",
        "fd",
        "bw",
        "next",
        "GlibcArena",
        "__name",
        "addr_next",
        "arena_main",
        "__addr",
        "GlibcArena",
        "format",
        "addr_next",
        "fmt",
        "format",
        "__addr",
        "top",
        "last_remainder",
        "n",
        "nfree",
        "sysmem",
        "addr",
        "from_base",
        "current_arch",
        "ptrsize",
        "from_base",
        "addr",
        "addr",
        "ptrsize",
        "addr",
        "ptrsize",
        "addr",
        "address",
        "ptrsize",
        "chunk_base_address",
        "read_int_from_memory",
        "size_addr",
        "property",
        "get_chunk_size",
        "get_chunk_size",
        "cursz",
        "cursz",
        "has_m_bit",
        "cursz",
        "ptrsize",
        "cursz",
        "ptrsize",
        "property",
        "get_usable_size",
        "read_int_from_memory",
        "prev_size_addr",
        "address",
        "get_chunk_size",
        "GlibcChunk",
        "addr",
        "sll",
        "sll",
        "get_libc_version",
        "read_int_from_memory",
        "address",
        "read_int_from_memory",
        "address",
        "address",
        "property",
        "get_fwd_ptr",
        "fwd",
        "read_int_from_memory",
        "address",
        "ptrsize",
        "property",
        "get_bkw_ptr",
        "bck",
        "read_int_from_memory",
        "size_addr",
        "read_int_from_memory",
        "size_addr",
        "read_int_from_memory",
        "size_addr",
        "has_m_bit",
        "get_next_chunk",
        "next_chunk",
        "has_p_bit",
        "msg",
        "append",
        "format",
        "Color",
        "greenify",
        "has_p_bit",
        "Color",
        "redify",
        "msg",
        "append",
        "format",
        "Color",
        "greenify",
        "has_m_bit",
        "Color",
        "redify",
        "msg",
        "append",
        "format",
        "Color",
        "greenify",
        "has_n_bit",
        "Color",
        "redify",
        "join",
        "msg",
        "msg",
        "append",
        "format",
        "get_chunk_size",
        "msg",
        "append",
        "format",
        "get_usable_size",
        "gdb",
        "MemoryError",
        "msg",
        "append",
        "format",
        "size_addr",
        "msg",
        "append",
        "format",
        "get_prev_chunk_size",
        "gdb",
        "MemoryError",
        "msg",
        "append",
        "format",
        "chunk_base_address",
        "failed",
        "msg",
        "append",
        "str_chunk_size_flag",
        "join",
        "msg",
        "address",
        "address",
        "ptrsize",
        "msg",
        "append",
        "format",
        "get_fwd_ptr",
        "gdb",
        "MemoryError",
        "msg",
        "append",
        "format",
        "fwd",
        "msg",
        "append",
        "format",
        "get_bkw_ptr",
        "gdb",
        "MemoryError",
        "msg",
        "append",
        "format",
        "bkw",
        "join",
        "msg",
        "_str_sizes",
        "format",
        "_str_sizes",
        "_str_pointers",
        "has_p_bit",
        "flags",
        "append",
        "Color",
        "colorify",
        "has_m_bit",
        "flags",
        "append",
        "Color",
        "colorify",
        "has_n_bit",
        "flags",
        "append",
        "Color",
        "colorify",
        "join",
        "flags",
        "format",
        "Color",
        "colorify",
        "address",
        "get_chunk_size",
        "flags_as_string",
        "msg",
        "msg",
        "append",
        "is_used",
        "msg",
        "append",
        "str_as_alloced",
        "msg",
        "append",
        "str_as_freed",
        "join",
        "msg",
        "re",
        "compile",
        "lru_cache",
        "get_process_maps",
        "section",
        "sections",
        "re",
        "search",
        "section",
        "path",
        "match",
        "_",
        "_",
        "match",
        "groups",
        "section",
        "path",
        "open",
        "section",
        "path",
        "f",
        "f",
        "read",
        "OSError",
        "re",
        "search",
        "pattern_libc_ver",
        "data",
        "match",
        "_",
        "_",
        "match",
        "groups",
        "GlibcArena",
        "__gef_default_main_arena__",
        "e",
        "err",
        "format",
        "e",
        "text",
        "color",
        "msg_color",
        "get_terminal_size",
        "cols",
        "len",
        "text",
        "color",
        "__config__",
        "get",
        "msg_color",
        "__config__",
        "get",
        "msg",
        "append",
        "Color",
        "colorify",
        "format",
        "HORIZONTAL_LINE",
        "nb",
        "color",
        "msg",
        "append",
        "Color",
        "colorify",
        "text",
        "msg_color",
        "msg",
        "append",
        "Color",
        "colorify",
        "format",
        "HORIZONTAL_LINE",
        "nb",
        "color",
        "join",
        "msg",
        "msg",
        "gef_print",
        "format",
        "Color",
        "colorify",
        "msg",
        "msg",
        "gef_print",
        "format",
        "Color",
        "colorify",
        "msg",
        "msg",
        "gef_print",
        "format",
        "Color",
        "colorify",
        "msg",
        "msg",
        "gef_print",
        "format",
        "Color",
        "colorify",
        "msg",
        "level",
        "message",
        "__context_messages__",
        "level",
        "err",
        "format",
        "level",
        "__context_messages__",
        "append",
        "level",
        "message",
        "fname",
        "idx",
        "os",
        "path",
        "expanduser",
        "os",
        "path",
        "expandvars",
        "fname",
        "open",
        "fname",
        "read",
        "splitlines",
        "__data",
        "idx",
        "idx",
        "len",
        "__data",
        "gef_print",
        "sys",
        "exc_info",
        "gef_print",
        "center",
        "HORIZONTAL_LINE",
        "gef_print",
        "format",
        "Color",
        "colorify",
        "exc_type",
        "exc_value",
        "gef_print",
        "center",
        "HORIZONTAL_LINE",
        "fs",
        "traceback",
        "extract_tb",
        "exc_traceback",
        "fs",
        "code",
        "code",
        "strip",
        "_show_code_line",
        "filename",
        "lineno",
        "gef_print",
        "format",
        "DOWN_ARROW",
        "Color",
        "yellowify",
        "filename",
        "lineno",
        "Color",
        "greenify",
        "method",
        "gef_print",
        "format",
        "RIGHT_ARROW",
        "code",
        "gef_print",
        "center",
        "HORIZONTAL_LINE",
        "gdb",
        "execute",
        "gef_print",
        "center",
        "HORIZONTAL_LINE",
        "gdb",
        "execute",
        "gef_print",
        "center",
        "HORIZONTAL_LINE",
        "gef_print",
        "format",
        "gdb",
        "VERSION",
        "gef_print",
        "format",
        "sys",
        "version_info",
        "major",
        "sys",
        "version_info",
        "minor",
        "sys",
        "version_info",
        "micro",
        "sys",
        "version_info",
        "releaselevel",
        "gef_print",
        "format",
        "platform",
        "system",
        "platform",
        "release",
        "platform",
        "machine",
        "which",
        "gdb",
        "execute",
        "format",
        "lsb_release",
        "FileNotFoundError",
        "gef_print",
        "gef_print",
        "HORIZONTAL_LINE",
        "gef_print",
        "x",
        "x",
        "encoding",
        "x",
        "y",
        "substs",
        "res",
        "replace",
        "x",
        "y",
        "res",
        "x",
        "x",
        "encoding",
        "lru_cache",
        "program",
        "fpath",
        "os",
        "path",
        "isfile",
        "fpath",
        "os",
        "access",
        "fpath",
        "os",
        "X_OK",
        "os",
        "path",
        "split",
        "program",
        "fpath",
        "is_exe",
        "program",
        "program",
        "path",
        "os",
        "environ",
        "split",
        "os",
        "pathsep",
        "path",
        "strip",
        "os",
        "path",
        "join",
        "path",
        "program",
        "is_exe",
        "exe_file",
        "exe_file",
        "FileNotFoundError",
        "format",
        "program",
        "b",
        "color",
        "format",
        "b",
        "color",
        "get_gef_setting",
        "style",
        "style",
        "chr",
        "b",
        "ascii_letters",
        "digits",
        "punctuation",
        "style",
        "get",
        "style",
        "get",
        "st",
        "Color",
        "colorify",
        "st",
        "source",
        "length",
        "separator",
        "show_raw",
        "show_symbol",
        "get_memory_alignment",
        "is_alive",
        "i",
        "len",
        "source",
        "length",
        "source",
        "i",
        "i",
        "length",
        "join",
        "style_byte",
        "b",
        "color",
        "show_raw",
        "b",
        "chunk",
        "show_raw",
        "result",
        "append",
        "hexa",
        "join",
        "chr",
        "b",
        "b",
        "separator",
        "b",
        "chunk",
        "show_symbol",
        "gdb_get_location_from_symbol",
        "i",
        "format",
        "sym",
        "sym",
        "result",
        "append",
        "format",
        "aw",
        "align",
        "addr",
        "i",
        "sym",
        "sym",
        "dw",
        "length",
        "data",
        "hexa",
        "text",
        "text",
        "join",
        "result",
        "get_gef_setting",
        "context_hidden",
        "context_hidden",
        "to_file",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "format",
        "to_file",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "lru_cache",
        "name",
        "__config__",
        "__config__",
        "get",
        "name",
        "setting",
        "setting",
        "name",
        "value",
        "_type",
        "_desc",
        "__config__",
        "name",
        "__config__",
        "_type",
        "_desc",
        "ValueError",
        "format",
        "name",
        "_type",
        "value",
        "_type",
        "_desc",
        "__config__",
        "name",
        "__config__",
        "name",
        "func",
        "value",
        "get_gef_setting",
        "cache_clear",
        "path",
        "mode",
        "os",
        "path",
        "expanduser",
        "path",
        "os",
        "path",
        "realpath",
        "abspath",
        "os",
        "path",
        "isdir",
        "abspath",
        "abspath",
        "os",
        "makedirs",
        "abspath",
        "mode",
        "mode",
        "exist_ok",
        "abspath",
        "lru_cache",
        "sym",
        "gdb",
        "decode_line",
        "sym",
        "gdb",
        "error",
        "lru_cache",
        "maxsize",
        "address",
        "gdb",
        "execute",
        "format",
        "address",
        "to_string",
        "sym",
        "startswith",
        "sym",
        "find",
        "sym",
        "i",
        "split",
        "sym",
        "len",
        "sym",
        "sym",
        "isdigit",
        "sym",
        "name",
        "offset",
        "start_pc",
        "kwargs",
        "gdb",
        "selected_frame",
        "frame",
        "architecture",
        "insn",
        "arch",
        "disassemble",
        "start_pc",
        "kwargs",
        "insn",
        "insn",
        "rstrip",
        "split",
        "len",
        "asm",
        "asm",
        "operands",
        "split",
        "asm",
        "gdb_get_location_from_symbol",
        "address",
        "format",
        "loc",
        "loc",
        "read_memory",
        "insn",
        "insn",
        "Instruction",
        "address",
        "location",
        "mnemo",
        "operands",
        "opcodes",
        "addr",
        "n",
        "current_arch",
        "instruction_length",
        "max",
        "addr",
        "n",
        "current_arch",
        "instruction_length",
        "gef_current_instruction",
        "addr",
        "address",
        "i",
        "n",
        "gdb_disassemble",
        "addr",
        "i",
        "end_pc",
        "cur_insn_addr",
        "gdb",
        "MemoryError",
        "len",
        "insns",
        "n",
        "insns",
        "n",
        "insns",
        "address",
        "cur_insn_addr",
        "all",
        "insn",
        "is_valid",
        "insn",
        "insns",
        "insns",
        "address",
        "addr",
        "n",
        "current_arch",
        "instruction_length",
        "addr",
        "n",
        "current_arch",
        "instruction_length",
        "gdb_disassemble",
        "addr",
        "count",
        "n",
        "insn",
        "address",
        "addr",
        "n",
        "gdb_disassemble",
        "addr",
        "count",
        "n",
        "n",
        "addr",
        "next",
        "gef_disassemble",
        "addr",
        "insn",
        "addr",
        "gef_instruction_n",
        "addr",
        "addr",
        "gef_instruction_n",
        "addr",
        "addr",
        "nb_insn",
        "nb_prev",
        "max",
        "nb_insn",
        "nb_insn",
        "nb_insn",
        "nb_insn",
        "nb_prev",
        "gdb_get_nth_previous_instruction_address",
        "addr",
        "nb_prev",
        "start_addr",
        "insn",
        "gdb_disassemble",
        "start_addr",
        "count",
        "nb_prev",
        "insn",
        "address",
        "addr",
        "insn",
        "insn",
        "gdb_disassemble",
        "addr",
        "count",
        "count",
        "insn",
        "location",
        "nb_insn",
        "kwargs",
        "cs_insn",
        "gdb_get_location_from_symbol",
        "cs_insn",
        "address",
        "format",
        "sym_info",
        "sym_info",
        "cs_insn",
        "op_str",
        "split",
        "Instruction",
        "cs_insn",
        "address",
        "loc",
        "cs_insn",
        "mnemonic",
        "ops",
        "cs_insn",
        "sys",
        "modules",
        "get_capstone_arch",
        "arch",
        "kwargs",
        "get",
        "mode",
        "kwargs",
        "get",
        "endian",
        "kwargs",
        "get",
        "capstone",
        "Cs",
        "arch",
        "mode",
        "align_address_to_page",
        "location",
        "location",
        "page_start",
        "current_arch",
        "pc",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "nb_prev",
        "gdb_get_nth_previous_instruction_address",
        "pc",
        "nb_prev",
        "nb_insn",
        "nb_prev",
        "kwargs",
        "get",
        "read_memory",
        "location",
        "gef_getpagesize",
        "offset",
        "code",
        "insn",
        "cs",
        "disasm",
        "code",
        "location",
        "skip",
        "skip",
        "nb_insn",
        "cs_insn_to_gef_insn",
        "insn",
        "nb_insn",
        "command",
        "as_list",
        "args",
        "kwargs",
        "subprocess",
        "check_output",
        "command",
        "stderr",
        "subprocess",
        "STDOUT",
        "shell",
        "kwargs",
        "get",
        "gef_pystring",
        "_",
        "_",
        "res",
        "splitlines",
        "as_list",
        "gef_pystring",
        "res",
        "commands",
        "tempfile",
        "mkstemp",
        "suffix",
        "prefix",
        "os",
        "fdopen",
        "fd",
        "f",
        "f",
        "write",
        "commands",
        "f",
        "flush",
        "os",
        "access",
        "fname",
        "os",
        "R_OK",
        "gdb",
        "execute",
        "format",
        "fname",
        "os",
        "unlink",
        "fname",
        "lru_cache",
        "filename",
        "is_macho",
        "filename",
        "which",
        "IOError",
        "err",
        "opt",
        "filename",
        "pattern",
        "readelf",
        "cmd",
        "opt",
        "split",
        "cmd",
        "filename",
        "gef_execute_external",
        "cmd",
        "as_list",
        "line",
        "lines",
        "re",
        "search",
        "pattern",
        "line",
        "collections",
        "OrderedDict",
        "__check_security_property",
        "filename",
        "__check_security_property",
        "filename",
        "has_gnu_stack",
        "__check_security_property",
        "filename",
        "__check_security_property",
        "filename",
        "__check_security_property",
        "filename",
        "__check_security_property",
        "filename",
        "results",
        "__check_security_property",
        "filename",
        "results",
        "lru_cache",
        "is_alive",
        "gdb",
        "selected_frame",
        "architecture",
        "arch",
        "name",
        "gdb",
        "execute",
        "to_string",
        "strip",
        "arch_str",
        "arch_str",
        "split",
        "arch_str",
        "split",
        "arch_str",
        "arch_str",
        "replace",
        "arch_str",
        "re",
        "findall",
        "arch_str",
        "RuntimeError",
        "format",
        "arch_str",
        "arch_str",
        "lru_cache",
        "gdb",
        "execute",
        "to_string",
        "strip",
        "lower",
        "endian",
        "Elf",
        "LITTLE_ENDIAN",
        "endian",
        "Elf",
        "BIG_ENDIAN",
        "EnvironmentError",
        "lru_cache",
        "line",
        "gdb",
        "execute",
        "to_string",
        "split",
        "line",
        "line",
        "strip",
        "split",
        "fpath",
        "checksec",
        "fpath",
        "get_endian",
        "Elf",
        "BIG_ENDIAN",
        "is_big_endian",
        "reg_value",
        "value_table",
        "i",
        "value_table",
        "Color",
        "boldify",
        "value_table",
        "i",
        "upper",
        "reg_value",
        "i",
        "value_table",
        "i",
        "lower",
        "flags",
        "append",
        "flag_str",
        "format",
        "join",
        "flags",
        "metaclass",
        "abc",
        "ABCMeta",
        "abc",
        "abstractproperty",
        "abc",
        "abstractproperty",
        "abc",
        "abstractproperty",
        "abc",
        "abstractproperty",
        "abc",
        "abstractproperty",
        "abc",
        "abstractproperty",
        "abc",
        "abstractproperty",
        "abc",
        "abstractmethod",
        "val",
        "abc",
        "abstractmethod",
        "insn",
        "abc",
        "abstractmethod",
        "insn",
        "abc",
        "abstractmethod",
        "insn",
        "abc",
        "abstractmethod",
        "insn",
        "abc",
        "abstractmethod",
        "insn",
        "frame",
        "property",
        "get_register",
        "property",
        "get_register",
        "property",
        "get_register",
        "property",
        "get_memory_alignment",
        "i",
        "in_func",
        "function_parameters",
        "i",
        "get_register",
        "reg",
        "reg",
        "key",
        "val",
        "Architecture",
        "property",
        "insn",
        "insn",
        "mnemonic",
        "insn",
        "insn",
        "mnemonic",
        "mnemo",
        "mnemo",
        "insn",
        "operands",
        "insn",
        "operands",
        "insn",
        "operands",
        "mnemo",
        "insn",
        "operands",
        "classmethod",
        "cls",
        "addr",
        "size",
        "perm",
        "OSError",
        "format",
        "cls",
        "arch",
        "insn",
        "insn",
        "mnemonic",
        "startswith",
        "insn",
        "v",
        "is_32bit",
        "v",
        "v",
        "is_64bit",
        "v",
        "v",
        "OSError",
        "v",
        "insn",
        "mnemonic",
        "mnemo",
        "condition",
        "endswith",
        "get_register",
        "insn",
        "operands",
        "get_register",
        "condition",
        "len",
        "insn",
        "operands",
        "get_register",
        "insn",
        "operands",
        "get_register",
        "insn",
        "operands",
        "OSError",
        "format",
        "insn",
        "condition",
        "endswith",
        "long_to_twos_complement",
        "rs2",
        "long_to_twos_complement",
        "rs1",
        "condition",
        "condition",
        "rs1",
        "rs2",
        "format",
        "rs1",
        "rs2",
        "format",
        "rs1",
        "rs2",
        "condition",
        "rs1",
        "rs2",
        "format",
        "rs1",
        "rs2",
        "format",
        "rs1",
        "rs2",
        "condition",
        "rs1",
        "rs2",
        "format",
        "rs1",
        "rs2",
        "format",
        "rs1",
        "rs2",
        "condition",
        "rs1",
        "rs2",
        "format",
        "rs1",
        "rs2",
        "format",
        "rs1",
        "rs2",
        "OSError",
        "format",
        "insn",
        "taken",
        "reason",
        "insn",
        "frame",
        "is_ret",
        "insn",
        "get_register",
        "frame",
        "older",
        "frame",
        "older",
        "pc",
        "ra",
        "Architecture",
        "is_alive",
        "get_register",
        "flag_register",
        "property",
        "get_register",
        "is_thumb",
        "pc",
        "pc",
        "property",
        "is_thumb",
        "property",
        "is_thumb",
        "insn",
        "insn",
        "mnemonic",
        "mnemo",
        "call_mnemos",
        "insn",
        "insn",
        "mnemonic",
        "pop_mnemos",
        "insn",
        "operands",
        "insn",
        "mnemonic",
        "branch_mnemos",
        "insn",
        "operands",
        "insn",
        "mnemonic",
        "write_mnemos",
        "insn",
        "operands",
        "val",
        "val",
        "flag_register",
        "get_register",
        "reg",
        "flags_to_human",
        "val",
        "flags_table",
        "insn",
        "insn",
        "mnemonic",
        "conditions",
        "insn",
        "insn",
        "mnemonic",
        "flags_table",
        "k",
        "k",
        "k",
        "flags_table",
        "get_register",
        "flag_register",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "mnemo",
        "endswith",
        "val",
        "flags",
        "taken",
        "reason",
        "insn",
        "frame",
        "is_ret",
        "insn",
        "insn",
        "mnemonic",
        "current_arch",
        "sp",
        "len",
        "insn",
        "operands",
        "get_memory_alignment",
        "to_unsigned_long",
        "dereference",
        "ra_addr",
        "insn",
        "mnemonic",
        "to_unsigned_long",
        "dereference",
        "current_arch",
        "sp",
        "get_register",
        "frame",
        "older",
        "frame",
        "older",
        "pc",
        "ra",
        "classmethod",
        "cls",
        "addr",
        "size",
        "perm",
        "format",
        "addr",
        "format",
        "size",
        "format",
        "perm",
        "format",
        "_NR_mprotect",
        "join",
        "insns",
        "ARM",
        "insn",
        "insn",
        "mnemonic",
        "mnemo",
        "call_mnemos",
        "val",
        "flag_register",
        "val",
        "get_register",
        "reg",
        "flags_to_human",
        "val",
        "flags_table",
        "classmethod",
        "cls",
        "addr",
        "size",
        "perm",
        "format",
        "_NR_mprotect",
        "format",
        "addr",
        "format",
        "addr",
        "format",
        "addr",
        "format",
        "addr",
        "format",
        "size",
        "format",
        "size",
        "format",
        "perm",
        "join",
        "insns",
        "insn",
        "insn",
        "mnemonic",
        "mnemo",
        "startswith",
        "mnemo",
        "branch_mnemos",
        "insn",
        "insn",
        "mnemonic",
        "insn",
        "operands",
        "mnemo",
        "format",
        "operands",
        "get_register",
        "reg",
        "mnemo",
        "op",
        "format",
        "reg",
        "format",
        "reg",
        "mnemo",
        "op",
        "format",
        "reg",
        "format",
        "reg",
        "mnemo",
        "operands",
        "strip",
        "lstrip",
        "op",
        "i",
        "format",
        "reg",
        "i",
        "format",
        "reg",
        "i",
        "mnemo",
        "operands",
        "strip",
        "lstrip",
        "op",
        "i",
        "format",
        "reg",
        "i",
        "format",
        "reg",
        "i",
        "reason",
        "is_branch_taken",
        "insn",
        "taken",
        "reason",
        "Architecture",
        "gpr_registers",
        "flag_register",
        "special_registers",
        "val",
        "flag_register",
        "val",
        "get_register",
        "reg",
        "flags_to_human",
        "val",
        "flags_table",
        "insn",
        "insn",
        "mnemonic",
        "mnemo",
        "call_mnemos",
        "insn",
        "insn",
        "mnemonic",
        "insn",
        "insn",
        "mnemonic",
        "mnemo",
        "branch_mnemos",
        "insn",
        "insn",
        "mnemonic",
        "flags_table",
        "k",
        "k",
        "k",
        "flags_table",
        "get_register",
        "flag_register",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "get_register",
        "mode",
        "get_register",
        "cx",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "taken",
        "reason",
        "insn",
        "frame",
        "is_ret",
        "insn",
        "to_unsigned_long",
        "dereference",
        "current_arch",
        "sp",
        "frame",
        "older",
        "frame",
        "older",
        "pc",
        "ra",
        "classmethod",
        "cls",
        "addr",
        "size",
        "perm",
        "format",
        "_NR_mprotect",
        "format",
        "addr",
        "format",
        "size",
        "format",
        "perm",
        "join",
        "insns",
        "i",
        "in_func",
        "in_func",
        "i",
        "current_arch",
        "sp",
        "current_arch",
        "ptrsize",
        "sp",
        "i",
        "sz",
        "read_int_from_memory",
        "loc",
        "format",
        "i",
        "sz",
        "key",
        "val",
        "X86",
        "gpr_registers",
        "X86",
        "flag_register",
        "X86",
        "special_registers",
        "Architecture",
        "get_ith_parameter",
        "classmethod",
        "cls",
        "addr",
        "size",
        "perm",
        "format",
        "_NR_mprotect",
        "format",
        "addr",
        "format",
        "size",
        "format",
        "perm",
        "join",
        "insns",
        "Architecture",
        "val",
        "val",
        "flag_register",
        "get_register",
        "reg",
        "flags_to_human",
        "val",
        "flags_table",
        "insn",
        "insn",
        "insn",
        "mnemonic",
        "insn",
        "insn",
        "mnemonic",
        "mnemo",
        "branch_mnemos",
        "insn",
        "insn",
        "mnemonic",
        "flags_table",
        "k",
        "k",
        "k",
        "flags_table",
        "get_register",
        "flag_register",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "taken",
        "reason",
        "insn",
        "frame",
        "is_ret",
        "insn",
        "get_register",
        "frame",
        "older",
        "frame",
        "older",
        "pc",
        "ra",
        "classmethod",
        "cls",
        "addr",
        "size",
        "perm",
        "format",
        "_NR_mprotect",
        "format",
        "addr",
        "format",
        "addr",
        "format",
        "size",
        "format",
        "size",
        "format",
        "perm",
        "join",
        "insns",
        "PowerPC",
        "Architecture",
        "val",
        "flag_register",
        "val",
        "get_register",
        "reg",
        "flags_to_human",
        "val",
        "flags_table",
        "insn",
        "insn",
        "insn",
        "mnemonic",
        "insn",
        "insn",
        "mnemonic",
        "mnemo",
        "branch_mnemos",
        "insn",
        "insn",
        "mnemonic",
        "flags_table",
        "k",
        "k",
        "k",
        "flags_table",
        "get_register",
        "flag_register",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "mnemo",
        "val",
        "flags",
        "taken",
        "reason",
        "insn",
        "frame",
        "is_ret",
        "insn",
        "get_register",
        "frame",
        "older",
        "frame",
        "older",
        "pc",
        "ra",
        "classmethod",
        "cls",
        "addr",
        "size",
        "perm",
        "addr",
        "addr",
        "format",
        "hi",
        "format",
        "lo",
        "format",
        "_NR_mprotect",
        "join",
        "insns",
        "SPARC",
        "classmethod",
        "cls",
        "addr",
        "size",
        "perm",
        "addr",
        "addr",
        "format",
        "hi",
        "format",
        "lo",
        "format",
        "_NR_mprotect",
        "join",
        "insns",
        "Architecture",
        "val",
        "Color",
        "colorify",
        "insn",
        "insn",
        "insn",
        "mnemonic",
        "insn",
        "operands",
        "insn",
        "insn",
        "mnemonic",
        "mnemo",
        "branch_mnemos",
        "insn",
        "insn",
        "mnemonic",
        "insn",
        "operands",
        "mnemo",
        "get_register",
        "ops",
        "get_register",
        "ops",
        "format",
        "ops",
        "mnemo",
        "get_register",
        "ops",
        "get_register",
        "ops",
        "format",
        "ops",
        "mnemo",
        "get_register",
        "ops",
        "format",
        "ops",
        "mnemo",
        "get_register",
        "ops",
        "format",
        "ops",
        "mnemo",
        "get_register",
        "ops",
        "format",
        "ops",
        "mnemo",
        "get_register",
        "ops",
        "format",
        "ops",
        "mnemo",
        "get_register",
        "ops",
        "format",
        "ops",
        "mnemo",
        "get_register",
        "ops",
        "format",
        "ops",
        "taken",
        "reason",
        "insn",
        "frame",
        "is_ret",
        "insn",
        "get_register",
        "frame",
        "older",
        "frame",
        "older",
        "pc",
        "ra",
        "classmethod",
        "cls",
        "addr",
        "size",
        "perm",
        "format",
        "_NR_mprotect",
        "format",
        "addr",
        "format",
        "size",
        "format",
        "perm",
        "join",
        "insns",
        "address",
        "buffer",
        "length",
        "gdb",
        "selected_inferior",
        "write_memory",
        "address",
        "buffer",
        "length",
        "lru_cache",
        "addr",
        "length",
        "gdb",
        "selected_inferior",
        "read_memory",
        "addr",
        "length",
        "tobytes",
        "addr",
        "current_arch",
        "ptrsize",
        "read_memory",
        "addr",
        "sz",
        "u32",
        "sz",
        "u64",
        "unpack",
        "mem",
        "address",
        "max_length",
        "GEF_MAX_STRING_LENGTH",
        "encoding",
        "encoding",
        "cached_lookup_type",
        "pointer",
        "min",
        "address",
        "DEFAULT_PAGE_SIZE",
        "max_length",
        "gdb",
        "Value",
        "address",
        "cast",
        "char_ptr",
        "encoding",
        "encoding",
        "length",
        "length",
        "strip",
        "gdb",
        "error",
        "read_memory",
        "address",
        "length",
        "decode",
        "res",
        "split",
        "res",
        "replace",
        "replace",
        "replace",
        "max_length",
        "len",
        "res",
        "max_length",
        "format",
        "ustr",
        "max_length",
        "ustr",
        "address",
        "read_cstring_from_memory",
        "address",
        "isinstance",
        "cstr",
        "cstr",
        "all",
        "x",
        "printable",
        "x",
        "cstr",
        "cstr",
        "x",
        "s",
        "pack",
        "format",
        "endian_str",
        "x",
        "s",
        "pack",
        "format",
        "endian_str",
        "x",
        "x",
        "s",
        "pack",
        "format",
        "endian_str",
        "x",
        "s",
        "pack",
        "format",
        "endian_str",
        "x",
        "x",
        "s",
        "pack",
        "format",
        "endian_str",
        "x",
        "s",
        "pack",
        "format",
        "endian_str",
        "x",
        "x",
        "s",
        "pack",
        "format",
        "endian_str",
        "x",
        "s",
        "pack",
        "format",
        "endian_str",
        "x",
        "x",
        "s",
        "unpack",
        "format",
        "endian_str",
        "x",
        "s",
        "unpack",
        "format",
        "endian_str",
        "x",
        "x",
        "s",
        "unpack",
        "format",
        "endian_str",
        "x",
        "s",
        "unpack",
        "format",
        "endian_str",
        "x",
        "x",
        "s",
        "unpack",
        "format",
        "endian_str",
        "x",
        "s",
        "unpack",
        "format",
        "endian_str",
        "x",
        "x",
        "s",
        "unpack",
        "format",
        "endian_str",
        "x",
        "s",
        "unpack",
        "format",
        "endian_str",
        "x",
        "address",
        "read_ascii_string",
        "address",
        "gdb",
        "selected_inferior",
        "pid",
        "f",
        "functools",
        "wraps",
        "f",
        "args",
        "kwargs",
        "is_alive",
        "f",
        "args",
        "kwargs",
        "warn",
        "wrapper",
        "f",
        "functools",
        "wraps",
        "f",
        "args",
        "kwargs",
        "is_remote_debug",
        "f",
        "args",
        "kwargs",
        "warn",
        "wrapper",
        "f",
        "functools",
        "wraps",
        "f",
        "args",
        "kwargs",
        "warn",
        "f",
        "args",
        "kwargs",
        "wrapper",
        "required_gdb_version",
        "f",
        "args",
        "kwargs",
        "GDB_VERSION",
        "required_gdb_version",
        "f",
        "args",
        "kwargs",
        "format",
        "required_gdb_version",
        "EnvironmentError",
        "reason",
        "inner_f",
        "wrapper",
        "args",
        "kwargs",
        "RuntimeWarning",
        "FakeExit",
        "required_arguments",
        "optional_arguments",
        "x",
        "x",
        "f",
        "args",
        "kwargs",
        "argparse",
        "ArgumentParser",
        "prog",
        "args",
        "_cmdline_",
        "add_help",
        "argname",
        "required_arguments",
        "required_arguments",
        "argname",
        "argvalue",
        "argtype",
        "int_wrapper",
        "isinstance",
        "argname",
        "isinstance",
        "argname",
        "argname_is_list",
        "argname",
        "startswith",
        "argtype",
        "parser",
        "add_argument",
        "argname",
        "action",
        "argvalue",
        "parser",
        "add_argument",
        "argname",
        "argtype",
        "required",
        "argvalue",
        "argtype",
        "argvalue",
        "parser",
        "add_argument",
        "argname",
        "argtype",
        "argvalue",
        "nargs",
        "nargs",
        "argname",
        "optional_arguments",
        "isinstance",
        "argname",
        "isinstance",
        "argname",
        "argname_is_list",
        "argname",
        "startswith",
        "optional_arguments",
        "argname",
        "argvalue",
        "argname_is_list",
        "argname",
        "argtype",
        "int_wrapper",
        "argtype",
        "parser",
        "add_argument",
        "argname",
        "action",
        "argvalue",
        "parser",
        "add_argument",
        "argname",
        "argtype",
        "argvalue",
        "parser",
        "parse_args",
        "args",
        "parsed_args",
        "f",
        "args",
        "kwargs",
        "wrapper",
        "decorator",
        "data",
        "sys",
        "platform",
        "which",
        "xclip",
        "sys",
        "platform",
        "which",
        "pbcopy",
        "NotImplementedError",
        "subprocess",
        "Popen",
        "prog",
        "stdin",
        "subprocess",
        "PIPE",
        "p",
        "p",
        "stdin",
        "write",
        "data",
        "p",
        "stdin",
        "close",
        "p",
        "wait",
        "is_32bit",
        "is_64bit",
        "is_32bit",
        "is_64bit",
        "is_32bit",
        "is_64bit",
        "is_32bit",
        "is_64bit",
        "v",
        "v",
        "cast",
        "gdb",
        "Value",
        "mask",
        "mask",
        "regname",
        "gdb",
        "selected_frame",
        "curframe",
        "pc",
        "curframe",
        "read_register",
        "__get_register_for_selected_frame",
        "regname",
        "key",
        "lru_cache",
        "regname",
        "hash_key",
        "gdb",
        "parse_and_eval",
        "regname",
        "to_unsigned_long",
        "value",
        "value",
        "code",
        "gdb",
        "TYPE_CODE_INT",
        "value",
        "gdb",
        "error",
        "regname",
        "regname",
        "gdb",
        "selected_frame",
        "read_register",
        "regname",
        "value",
        "ValueError",
        "gdb",
        "error",
        "x",
        "gdb",
        "execute",
        "to_string",
        "splitlines",
        "x",
        "startswith",
        "x",
        "split",
        "replace",
        "lru_cache",
        "platform",
        "system",
        "lower",
        "lru_cache",
        "gdb",
        "selected_inferior",
        "pid",
        "__gef_qemu_mode__",
        "gdb",
        "selected_thread",
        "ptid",
        "lru_cache",
        "gdb",
        "current_progspace",
        "filename",
        "is_remote_debug",
        "filename",
        "get_pid",
        "pid",
        "download_file",
        "format",
        "pid",
        "use_cache",
        "filename",
        "startswith",
        "filename",
        "len",
        "download_file",
        "fname",
        "use_cache",
        "local_name",
        "fname",
        "filename",
        "startswith",
        "filename",
        "len",
        "download_file",
        "fname",
        "use_cache",
        "local_name",
        "fname",
        "__gef_remote__",
        "format",
        "__gef_remote__",
        "get_path_from_info_proc",
        "filename",
        "filename",
        "filename",
        "get_path_from_info_proc",
        "lru_cache",
        "os",
        "path",
        "basename",
        "gdb",
        "current_progspace",
        "filename",
        "lru_cache",
        "x",
        "gdb",
        "execute",
        "to_string",
        "splitlines",
        "x",
        "lru_cache",
        "filename",
        "which",
        "file_bin",
        "filename",
        "gef_execute_external",
        "cmd",
        "target",
        "use_cache",
        "local_name",
        "os",
        "path",
        "sep",
        "join",
        "get_gef_setting",
        "get_pid",
        "local_name",
        "os",
        "path",
        "sep",
        "join",
        "local_root",
        "os",
        "path",
        "dirname",
        "target",
        "os",
        "path",
        "sep",
        "join",
        "local_path",
        "os",
        "path",
        "basename",
        "target",
        "os",
        "path",
        "sep",
        "join",
        "local_root",
        "os",
        "path",
        "dirname",
        "local_name",
        "os",
        "path",
        "sep",
        "join",
        "local_path",
        "os",
        "path",
        "basename",
        "local_name",
        "use_cache",
        "os",
        "access",
        "local_name",
        "os",
        "R_OK",
        "local_name",
        "gef_makedirs",
        "local_path",
        "gdb",
        "execute",
        "format",
        "target",
        "local_name",
        "gdb",
        "error",
        "open",
        "local_name",
        "f",
        "is_32bit",
        "f",
        "write",
        "format",
        "get_filepath",
        "f",
        "write",
        "format",
        "get_filepath",
        "e",
        "err",
        "format",
        "e",
        "local_name",
        "path",
        "use_cache",
        "is_remote_debug",
        "__gef_qemu_mode__",
        "download_file",
        "path",
        "use_cache",
        "lpath",
        "IOError",
        "format",
        "path",
        "lpath",
        "open",
        "path",
        "sym",
        "gdb",
        "execute",
        "format",
        "sym",
        "to_string",
        "splitlines",
        "dis",
        "split",
        "dis",
        "split",
        "end_addr",
        "start_addr",
        "proc_map_file",
        "line",
        "open_file",
        "proc_map_file",
        "use_cache",
        "line",
        "strip",
        "line",
        "split",
        "rest",
        "split",
        "len",
        "rest",
        "rest",
        "rest",
        "rest",
        "lstrip",
        "x",
        "x",
        "addr",
        "split",
        "off",
        "Permission",
        "from_process_maps",
        "perm",
        "Section",
        "page_start",
        "addr_start",
        "page_end",
        "addr_end",
        "offset",
        "off",
        "permission",
        "perm",
        "inode",
        "inode",
        "path",
        "pathname",
        "current_arch",
        "sp",
        "line",
        "gdb",
        "execute",
        "to_string",
        "splitlines",
        "line",
        "strip",
        "line",
        "split",
        "x",
        "x",
        "addr",
        "split",
        "Permission",
        "from_process_maps",
        "perm",
        "split",
        "file_lookup_address",
        "addr_start",
        "zone",
        "zone",
        "filename",
        "sp",
        "addr_start",
        "sp",
        "addr_end",
        "Section",
        "page_start",
        "addr_start",
        "page_end",
        "addr_end",
        "offset",
        "permission",
        "perm",
        "inode",
        "path",
        "path",
        "lru_cache",
        "inferior_is_macho",
        "get_mach_regions",
        "get_pid",
        "format",
        "pid",
        "get_process_maps_linux",
        "fpath",
        "FileNotFoundError",
        "e",
        "warn",
        "format",
        "e",
        "get_info_sections",
        "lru_cache",
        "StringIO",
        "gdb",
        "execute",
        "to_string",
        "line",
        "stream",
        "line",
        "x",
        "x",
        "line",
        "split",
        "x",
        "x",
        "parts",
        "split",
        "parts",
        "parts",
        "Permission",
        "from_info_sections",
        "parts",
        "Section",
        "page_start",
        "addr_start",
        "page_end",
        "addr_end",
        "offset",
        "off",
        "permission",
        "perm",
        "inode",
        "inode",
        "path",
        "path",
        "IndexError",
        "ValueError",
        "lru_cache",
        "gdb",
        "execute",
        "to_string",
        "splitlines",
        "len",
        "lines",
        "len",
        "__infos_files__",
        "__infos_files__",
        "line",
        "lines",
        "line",
        "strip",
        "line",
        "line",
        "startswith",
        "x",
        "strip",
        "x",
        "line",
        "split",
        "blobs",
        "blobs",
        "blobs",
        "len",
        "blobs",
        "blobs",
        "get_filepath",
        "Zone",
        "section_name",
        "addr_start",
        "addr_end",
        "filename",
        "__infos_files__",
        "append",
        "info",
        "__infos_files__",
        "address",
        "is_alive",
        "err",
        "is_x86",
        "is_in_x86_kernel",
        "address",
        "sect",
        "get_process_maps",
        "sect",
        "page_start",
        "address",
        "sect",
        "page_end",
        "sect",
        "lru_cache",
        "name",
        "perm",
        "Permission",
        "ALL",
        "is_alive",
        "err",
        "sect",
        "get_process_maps",
        "name",
        "sect",
        "path",
        "sect",
        "permission",
        "value",
        "perm",
        "sect",
        "lru_cache",
        "name",
        "path",
        "xfile",
        "get_info_files",
        "path",
        "xfile",
        "filename",
        "name",
        "xfile",
        "name",
        "xfile",
        "lru_cache",
        "address",
        "info",
        "get_info_files",
        "info",
        "zone_start",
        "address",
        "info",
        "zone_end",
        "info",
        "lru_cache",
        "address",
        "process_lookup_address",
        "address",
        "file_lookup_address",
        "address",
        "sect",
        "info",
        "Address",
        "value",
        "address",
        "valid",
        "Address",
        "value",
        "address",
        "section",
        "sect",
        "info",
        "info",
        "data",
        "key",
        "key",
        "lstrip",
        "binascii",
        "unhexlify",
        "key",
        "x",
        "y",
        "x",
        "y",
        "data",
        "itertools",
        "cycle",
        "key",
        "pattern",
        "pattern",
        "startswith",
        "pattern",
        "startswith",
        "len",
        "pattern",
        "all",
        "c",
        "hexdigits",
        "c",
        "pattern",
        "gdb",
        "execute",
        "from_tty",
        "reset_all_caches",
        "gdb",
        "execute",
        "reset_all_caches",
        "set_arch",
        "load_libc_args",
        "__gef_remote__",
        "__gef_qemu_mode__",
        "reset_all_caches",
        "__gef_remote__",
        "get_gef_setting",
        "shutil",
        "rmtree",
        "format",
        "__gef_remote__",
        "reset_all_caches",
        "reset_all_caches",
        "get_gef_setting",
        "get_gef_setting",
        "path",
        "warn",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "path",
        "os",
        "path",
        "isdir",
        "path",
        "warn",
        "format",
        "current_arch",
        "arch",
        "lower",
        "current_arch",
        "mode",
        "format",
        "path",
        "_arch_mode",
        "libc_args_definitions",
        "_arch_mode",
        "libc_args_definitions",
        "open",
        "_libc_args_file",
        "_libc_args",
        "json",
        "load",
        "_libc_args",
        "FileNotFoundError",
        "libc_args_definitions",
        "_arch_mode",
        "warn",
        "format",
        "_libc_args_file",
        "json",
        "decoder",
        "JSONDecodeError",
        "e",
        "libc_args_definitions",
        "_arch_mode",
        "warn",
        "format",
        "_libc_args_file",
        "e",
        "is_debug",
        "platform",
        "system",
        "ctypes",
        "windll",
        "create_string_buffer",
        "windll",
        "kernel32",
        "GetStdHandle",
        "hStdErr",
        "create_string_buffer",
        "windll",
        "kernel32",
        "GetConsoleScreenBufferInfo",
        "herr",
        "csbi",
        "res",
        "unpack",
        "csbi",
        "raw",
        "right",
        "left",
        "bottom",
        "top",
        "tty_rows",
        "tty_columns",
        "fcntl",
        "termios",
        "unpack",
        "fcntl",
        "ioctl",
        "termios",
        "TIOCGWINSZ",
        "tty_rows",
        "tty_columns",
        "OSError",
        "prefix",
        "arch",
        "mode",
        "big_endian",
        "to_string",
        "to_string",
        "format",
        "prefix",
        "arch",
        "mode",
        "format",
        "prefix",
        "mode",
        "is_big_endian",
        "mode",
        "format",
        "prefix",
        "mode",
        "format",
        "prefix",
        "getattr",
        "format",
        "prefix",
        "arch",
        "mode",
        "getattr",
        "format",
        "prefix",
        "mode",
        "big_endian",
        "mode",
        "getattr",
        "format",
        "prefix",
        "mode",
        "getattr",
        "format",
        "prefix",
        "arch",
        "mode",
        "prefix",
        "to_string",
        "is_alive",
        "current_arch",
        "current_arch",
        "arch",
        "current_arch",
        "mode",
        "OSError",
        "get_generic_arch",
        "prefix",
        "arch",
        "mode",
        "is_big_endian",
        "to_string",
        "arch",
        "mode",
        "endian",
        "to_string",
        "sys",
        "modules",
        "arch",
        "mode",
        "endian",
        "get_generic_running_arch",
        "unicorn",
        "to_string",
        "get_generic_arch",
        "unicorn",
        "arch",
        "mode",
        "endian",
        "to_string",
        "arch",
        "mode",
        "endian",
        "to_string",
        "sys",
        "modules",
        "is_arch",
        "Elf",
        "POWERPC64",
        "OSError",
        "is_alive",
        "is_arch",
        "Elf",
        "POWERPC",
        "is_big_endian",
        "get_generic_arch",
        "capstone",
        "arch",
        "current_arch",
        "arch",
        "mode",
        "current_arch",
        "mode",
        "endian",
        "is_big_endian",
        "to_string",
        "arch",
        "mode",
        "endian",
        "get_generic_running_arch",
        "capstone",
        "to_string",
        "get_generic_arch",
        "capstone",
        "arch",
        "current_arch",
        "arch",
        "mode",
        "current_arch",
        "mode",
        "endian",
        "is_big_endian",
        "to_string",
        "arch",
        "mode",
        "endian",
        "to_string",
        "sys",
        "modules",
        "arch",
        "mode",
        "endian",
        "get_generic_running_arch",
        "keystone",
        "to_string",
        "get_generic_arch",
        "keystone",
        "arch",
        "mode",
        "endian",
        "to_string",
        "to_string",
        "sys",
        "modules",
        "current_arch",
        "current_arch",
        "arch",
        "lower",
        "OSError",
        "getattr",
        "unicorn",
        "format",
        "arch",
        "reg",
        "current_arch",
        "all_registers",
        "format",
        "arch",
        "upper",
        "reg",
        "upper",
        "to_string",
        "format",
        "regname",
        "getattr",
        "regname",
        "regs",
        "code",
        "arch",
        "mode",
        "args",
        "kwargs",
        "sys",
        "modules",
        "gef_pybytes",
        "code",
        "kwargs",
        "get",
        "keystone",
        "Ks",
        "arch",
        "mode",
        "ks",
        "asm",
        "code",
        "addr",
        "keystone",
        "KsError",
        "e",
        "err",
        "format",
        "e",
        "cnt",
        "enc",
        "kwargs",
        "binascii",
        "hexlify",
        "enc",
        "join",
        "s",
        "i",
        "i",
        "i",
        "len",
        "s",
        "enc",
        "decode",
        "enc",
        "lru_cache",
        "filename",
        "filename",
        "get_filepath",
        "filename",
        "startswith",
        "warn",
        "Elf",
        "filename",
        "cached_lookup_type",
        "cached_lookup_type",
        "uintptr_t",
        "pointer",
        "lru_cache",
        "_ptr_width",
        "lru_cache",
        "_ptr_width",
        "lru_cache",
        "get_arch",
        "lru_cache",
        "get_arch",
        "lru_cache",
        "is_x86_32",
        "is_x86_64",
        "lru_cache",
        "arch",
        "current_elf",
        "get_elf_headers",
        "elf",
        "e_machine",
        "arch",
        "arch",
        "ARM",
        "Elf",
        "ARM",
        "ARM",
        "AARCH64",
        "AARCH64",
        "Elf",
        "AARCH64",
        "AARCH64",
        "X86",
        "Elf",
        "X86_32",
        "X86",
        "X86_64",
        "Elf",
        "X86_64",
        "X86_64",
        "X86_64",
        "PowerPC",
        "PowerPC",
        "Elf",
        "POWERPC",
        "PowerPC",
        "PowerPC64",
        "PowerPC64",
        "Elf",
        "POWERPC64",
        "PowerPC64",
        "RISCV",
        "Elf",
        "RISCV",
        "RISCV",
        "SPARC",
        "Elf",
        "SPARC",
        "SPARC",
        "SPARC64",
        "Elf",
        "SPARC64",
        "SPARC64",
        "MIPS",
        "Elf",
        "MIPS",
        "MIPS",
        "current_arch",
        "current_elf",
        "arch",
        "arches",
        "arch",
        "upper",
        "current_arch",
        "KeyError",
        "OSError",
        "format",
        "arch",
        "upper",
        "current_elf",
        "get_elf_headers",
        "elf",
        "elf",
        "is_valid",
        "current_elf",
        "e_machine",
        "current_elf",
        "get_arch",
        "arches",
        "arch_name",
        "KeyError",
        "arches",
        "upper",
        "KeyError",
        "OSError",
        "format",
        "upper",
        "OSError",
        "format",
        "get_arch",
        "current_arch",
        "lru_cache",
        "_type",
        "gdb",
        "lookup_type",
        "_type",
        "strip_typedefs",
        "RuntimeError",
        "lru_cache",
        "in_bits",
        "is_32bit",
        "in_bits",
        "is_64bit",
        "in_bits",
        "cached_lookup_type",
        "res",
        "res",
        "in_bits",
        "res",
        "gdb",
        "parse_and_eval",
        "EnvironmentError",
        "tty",
        "__gef_redirect_output_fd__",
        "tty",
        "gdb",
        "execute",
        "open",
        "tty",
        "f",
        "f",
        "write",
        "PermissionError",
        "set_gef_setting",
        "addr",
        "get_memory_alignment",
        "align_address",
        "addr",
        "memalign_size",
        "format",
        "addr",
        "format",
        "addr",
        "addr",
        "left",
        "get_memory_alignment",
        "align_address",
        "addr",
        "left",
        "format",
        "addr",
        "rjust",
        "width",
        "format",
        "addr",
        "ljust",
        "width",
        "address",
        "get_memory_alignment",
        "address",
        "address",
        "address",
        "align",
        "address",
        "align",
        "address",
        "align",
        "align",
        "address",
        "align_address",
        "address",
        "DEFAULT_PAGE_ALIGN_SHIFT",
        "a",
        "DEFAULT_PAGE_ALIGN_SHIFT",
        "address",
        "is_hex",
        "address",
        "address",
        "to_unsigned_long",
        "gdb",
        "parse_and_eval",
        "address",
        "address",
        "align_address",
        "address",
        "get_memory_alignment",
        "in_bits",
        "address",
        "memalign",
        "lru_cache",
        "is_little_endian",
        "lru_cache",
        "__gef_remote__",
        "gdb",
        "execute",
        "to_string",
        "alphabet",
        "n",
        "len",
        "alphabet",
        "k",
        "n",
        "t",
        "p",
        "t",
        "n",
        "n",
        "p",
        "j",
        "p",
        "alphabet",
        "a",
        "j",
        "a",
        "t",
        "p",
        "c",
        "db",
        "t",
        "p",
        "c",
        "j",
        "a",
        "t",
        "p",
        "k",
        "j",
        "c",
        "db",
        "t",
        "t",
        "c",
        "db",
        "length",
        "cycle",
        "itertools",
        "islice",
        "de_bruijn",
        "charset",
        "cycle",
        "length",
        "value",
        "gdb",
        "parse_and_eval",
        "value",
        "gdb",
        "error",
        "lru_cache",
        "addr",
        "cached_lookup_type",
        "use_stdtype",
        "cached_lookup_type",
        "use_default_type",
        "cached_lookup_type",
        "use_golang_type",
        "cached_lookup_type",
        "use_rust_type",
        "ulong_t",
        "pointer",
        "gdb",
        "Value",
        "addr",
        "cast",
        "unsigned_long_type",
        "dereference",
        "res",
        "fetch_lazy",
        "res",
        "gdb",
        "MemoryError",
        "value",
        "__gef_convenience_vars_index__",
        "format",
        "__gef_convenience_vars_index__",
        "__gef_convenience_vars_index__",
        "gdb",
        "execute",
        "format",
        "var_name",
        "value",
        "var_name",
        "s",
        "s",
        "split",
        "x",
        "x",
        "addrs",
        "lru_cache",
        "is_alive",
        "line",
        "gdb",
        "execute",
        "to_string",
        "splitlines",
        "line",
        "split",
        "tmp",
        "_type",
        "line",
        "rfind",
        "line",
        "idx",
        "split",
        "tmp",
        "res",
        "gef_get_auxiliary_values",
        "auxval",
        "auxval",
        "read_int_from_memory",
        "canary_location",
        "canary",
        "canary",
        "canary_location",
        "num",
        "__pie_breakpoints__",
        "__pie_breakpoints__",
        "num",
        "lru_cache",
        "gef_get_auxiliary_values",
        "auxval",
        "DEFAULT_PAGE_SIZE",
        "auxval",
        "event_type",
        "f",
        "args",
        "kwargs",
        "getattr",
        "gdb",
        "getattr",
        "gdb",
        "events",
        "event_type",
        "f",
        "args",
        "kwargs",
        "warn",
        "wrapped_f",
        "wrap",
        "only_if_events_supported",
        "func",
        "gdb",
        "events",
        "cont",
        "connect",
        "func",
        "only_if_events_supported",
        "func",
        "gdb",
        "events",
        "cont",
        "disconnect",
        "func",
        "only_if_events_supported",
        "func",
        "gdb",
        "events",
        "stop",
        "connect",
        "func",
        "only_if_events_supported",
        "func",
        "gdb",
        "events",
        "stop",
        "disconnect",
        "func",
        "only_if_events_supported",
        "func",
        "gdb",
        "events",
        "exited",
        "connect",
        "func",
        "only_if_events_supported",
        "func",
        "gdb",
        "events",
        "exited",
        "disconnect",
        "func",
        "only_if_events_supported",
        "func",
        "gdb",
        "events",
        "new_objfile",
        "connect",
        "func",
        "only_if_events_supported",
        "func",
        "gdb",
        "events",
        "new_objfile",
        "disconnect",
        "func",
        "only_if_events_supported",
        "func",
        "gdb",
        "events",
        "memory_changed",
        "connect",
        "func",
        "only_if_events_supported",
        "func",
        "gdb",
        "events",
        "memory_changed",
        "disconnect",
        "func",
        "only_if_events_supported",
        "func",
        "gdb",
        "events",
        "register_changed",
        "connect",
        "func",
        "only_if_events_supported",
        "func",
        "gdb",
        "events",
        "register_changed",
        "disconnect",
        "func",
        "set_func",
        "vbp_num",
        "addr",
        "set_func",
        "vbp_num",
        "isinstance",
        "addr",
        "hex",
        "addr",
        "addr",
        "bp_num",
        "destroy",
        "gdb",
        "execute",
        "set_func",
        "to_string",
        "gdb",
        "error",
        "e",
        "err",
        "e",
        "res",
        "err",
        "res",
        "res",
        "split",
        "res_list",
        "res_list",
        "bp_num",
        "err",
        "gdb",
        "execute",
        "format",
        "bp_num",
        "gdb",
        "Breakpoint",
        "spec",
        "num_args",
        "spec",
        "gdb",
        "BP_BREAKPOINT",
        "num_args",
        "reset_all_caches",
        "current_arch",
        "get_ith_parameter",
        "num_args",
        "lookup_address",
        "addr",
        "addr",
        "valid",
        "addr",
        "section",
        "permission",
        "value",
        "Permission",
        "WRITE",
        "read_cstring_from_memory",
        "addr",
        "value",
        "addr",
        "info",
        "name",
        "addr",
        "info",
        "addr",
        "section",
        "path",
        "msg",
        "append",
        "Color",
        "colorify",
        "msg",
        "append",
        "format",
        "location",
        "ptr",
        "RIGHT_ARROW",
        "addr",
        "value",
        "content",
        "msg",
        "append",
        "format",
        "location",
        "num_args",
        "addr",
        "section",
        "page_start",
        "name",
        "push_context_message",
        "join",
        "msg",
        "gdb",
        "Breakpoint",
        "func",
        "retval",
        "func",
        "gdb",
        "BP_BREAKPOINT",
        "func",
        "retval",
        "format",
        "func",
        "retval",
        "m",
        "format",
        "retval",
        "info",
        "m",
        "format",
        "func",
        "m",
        "format",
        "retval",
        "gdb",
        "execute",
        "format",
        "retval",
        "ok",
        "m",
        "gdb",
        "Breakpoint",
        "loc",
        "code",
        "pc",
        "loc",
        "gdb",
        "BP_BREAKPOINT",
        "code",
        "pc",
        "info",
        "write_memory",
        "original_pc",
        "original_code",
        "len",
        "original_code",
        "info",
        "gdb",
        "execute",
        "format",
        "original_pc",
        "gdb",
        "Breakpoint",
        "name",
        "name",
        "gdb",
        "BP_BREAKPOINT",
        "name",
        "reset_all_caches",
        "current_arch",
        "get_ith_parameter",
        "TraceMallocRetBreakpoint",
        "size",
        "name",
        "gdb",
        "FinishBreakpoint",
        "size",
        "name",
        "gdb",
        "newest_frame",
        "size",
        "name",
        "__heap_uaf_watchpoints__",
        "__heap_freed_list__",
        "__heap_allocated_list__",
        "return_value",
        "return_value",
        "to_unsigned_long",
        "gdb",
        "parse_and_eval",
        "current_arch",
        "return_register",
        "size",
        "ok",
        "format",
        "Color",
        "colorify",
        "name",
        "size",
        "loc",
        "get_gef_setting",
        "__heap_freed_list__",
        "item",
        "__heap_freed_list__",
        "item",
        "addr",
        "loc",
        "__heap_freed_list__",
        "remove",
        "item",
        "idx",
        "__heap_uaf_watchpoints__",
        "wp",
        "__heap_uaf_watchpoints__",
        "wp",
        "address",
        "loc",
        "wp_addr",
        "loc",
        "size",
        "__heap_uaf_watchpoints__",
        "remove",
        "wp",
        "idx",
        "loc",
        "size",
        "check_heap_overlap",
        "get_memory_alignment",
        "chunk_addr",
        "_",
        "__heap_allocated_list__",
        "GlibcChunk",
        "chunk_addr",
        "current_chunk",
        "get_chunk_size",
        "chunk_addr",
        "loc",
        "chunk_addr",
        "current_chunk_size",
        "loc",
        "chunk_addr",
        "align",
        "offset",
        "msg",
        "append",
        "Color",
        "colorify",
        "msg",
        "append",
        "msg",
        "append",
        "format",
        "RIGHT_ARROW",
        "loc",
        "size",
        "chunk_addr",
        "current_chunk_size",
        "msg",
        "append",
        "format",
        "offset",
        "chunk_addr",
        "loc",
        "msg",
        "append",
        "format",
        "loc",
        "chunk_addr",
        "msg",
        "append",
        "format",
        "offset",
        "align",
        "push_context_message",
        "join",
        "msg",
        "__heap_allocated_list__",
        "append",
        "item",
        "gdb",
        "Breakpoint",
        "gdb",
        "BP_BREAKPOINT",
        "current_arch",
        "get_ith_parameter",
        "current_arch",
        "get_ith_parameter",
        "TraceReallocRetBreakpoint",
        "ptr",
        "size",
        "gdb",
        "FinishBreakpoint",
        "ptr",
        "size",
        "gdb",
        "newest_frame",
        "ptr",
        "size",
        "__heap_uaf_watchpoints__",
        "__heap_freed_list__",
        "__heap_allocated_list__",
        "return_value",
        "return_value",
        "to_unsigned_long",
        "gdb",
        "parse_and_eval",
        "current_arch",
        "return_register",
        "newloc",
        "ok",
        "format",
        "Color",
        "colorify",
        "ptr",
        "size",
        "Color",
        "colorify",
        "format",
        "newloc",
        "ok",
        "format",
        "Color",
        "colorify",
        "ptr",
        "size",
        "Color",
        "colorify",
        "format",
        "newloc",
        "newloc",
        "size",
        "x",
        "x",
        "y",
        "__heap_allocated_list__",
        "index",
        "ptr",
        "__heap_allocated_list__",
        "pop",
        "idx",
        "ValueError",
        "is_debug",
        "warn",
        "format",
        "ptr",
        "__heap_allocated_list__",
        "append",
        "item",
        "gdb",
        "Breakpoint",
        "gdb",
        "BP_BREAKPOINT",
        "reset_all_caches",
        "current_arch",
        "get_ith_parameter",
        "get_gef_setting",
        "get_gef_setting",
        "get_gef_setting",
        "get_gef_setting",
        "ok",
        "format",
        "Color",
        "colorify",
        "addr",
        "addr",
        "check_free_null",
        "msg",
        "append",
        "Color",
        "colorify",
        "msg",
        "append",
        "format",
        "current_arch",
        "pc",
        "msg",
        "append",
        "push_context_message",
        "join",
        "msg",
        "addr",
        "x",
        "x",
        "y",
        "__heap_freed_list__",
        "check_double_free",
        "msg",
        "append",
        "Color",
        "colorify",
        "msg",
        "append",
        "format",
        "RIGHT_ARROW",
        "addr",
        "current_arch",
        "pc",
        "msg",
        "append",
        "push_context_message",
        "join",
        "msg",
        "x",
        "x",
        "y",
        "__heap_allocated_list__",
        "index",
        "addr",
        "__heap_allocated_list__",
        "pop",
        "idx",
        "ValueError",
        "check_weird_free",
        "msg",
        "append",
        "Color",
        "colorify",
        "msg",
        "append",
        "msg",
        "append",
        "format",
        "addr",
        "push_context_message",
        "join",
        "msg",
        "__heap_freed_list__",
        "append",
        "item",
        "check_uaf",
        "TraceFreeRetBreakpoint",
        "addr",
        "gdb",
        "FinishBreakpoint",
        "addr",
        "gdb",
        "newest_frame",
        "addr",
        "reset_all_caches",
        "UafWatchpoint",
        "addr",
        "__heap_uaf_watchpoints__",
        "append",
        "wp",
        "gdb",
        "Breakpoint",
        "addr",
        "format",
        "addr",
        "gdb",
        "BP_WATCHPOINT",
        "addr",
        "reset_all_caches",
        "gdb",
        "selected_frame",
        "frame",
        "name",
        "gdb_get_nth_previous_instruction_address",
        "current_arch",
        "pc",
        "gef_current_instruction",
        "pc",
        "msg",
        "append",
        "Color",
        "colorify",
        "msg",
        "append",
        "format",
        "get_filepath",
        "address",
        "pc",
        "msg",
        "append",
        "format",
        "insn",
        "address",
        "insn",
        "mnemonic",
        "Color",
        "yellowify",
        "join",
        "insn",
        "operands",
        "push_context_message",
        "join",
        "msg",
        "gdb",
        "Breakpoint",
        "location",
        "location",
        "gdb",
        "BP_BREAKPOINT",
        "temporary",
        "reset_all_caches",
        "gdb",
        "Breakpoint",
        "location",
        "name",
        "spec",
        "location",
        "gdb",
        "BP_BREAKPOINT",
        "temporary",
        "name",
        "location",
        "reset_all_caches",
        "push_context_message",
        "format",
        "loc",
        "Color",
        "colorify",
        "name",
        "obj",
        "__commands__",
        "__gef__",
        "obj",
        "__class__",
        "__commands__",
        "append",
        "cls",
        "__gef__",
        "load",
        "initial",
        "__gef__",
        "doc",
        "add_command_to_doc",
        "cls",
        "_cmdline_",
        "cls",
        "__gef__",
        "doc",
        "refresh",
        "cls",
        "cls",
        "__commands__",
        "__commands__",
        "append",
        "cls",
        "cls",
        "cls",
        "__commands__",
        "__commands__",
        "insert",
        "cls",
        "cls",
        "cls",
        "__functions__",
        "__functions__",
        "append",
        "cls",
        "cls",
        "gdb",
        "Command",
        "metaclass",
        "abc",
        "ABCMeta",
        "args",
        "kwargs",
        "pre_load",
        "Color",
        "yellowify",
        "_syntax_",
        "Color",
        "yellowify",
        "_example_",
        "_example_",
        "__doc__",
        "replace",
        "syntax",
        "example",
        "kwargs",
        "setdefault",
        "gdb",
        "COMMAND_OBSCURE",
        "kwargs",
        "setdefault",
        "gdb",
        "COMPLETE_NONE",
        "kwargs",
        "setdefault",
        "_cmdline_",
        "command_type",
        "complete_type",
        "prefix",
        "post_load",
        "args",
        "from_tty",
        "gdb",
        "string_to_argv",
        "args",
        "__set_repeat_count",
        "argv",
        "from_tty",
        "bufferize",
        "do_invoke",
        "argv",
        "e",
        "is_debug",
        "show_last_exception",
        "err",
        "format",
        "_cmdline_",
        "e",
        "err",
        "format",
        "_syntax_",
        "abc",
        "abstractproperty",
        "abc",
        "abstractproperty",
        "abc",
        "abstractproperty",
        "abc",
        "abstractmethod",
        "argv",
        "name",
        "clsname",
        "clsname",
        "clsname",
        "join",
        "clsname",
        "split",
        "__sanitize_class_name",
        "__class__",
        "_cmdline_",
        "format",
        "class_name",
        "name",
        "property",
        "x",
        "split",
        "x",
        "__config__",
        "x",
        "startswith",
        "format",
        "_cmdline_",
        "name",
        "__get_setting_name",
        "name",
        "__config__",
        "key",
        "setting",
        "setting",
        "name",
        "__get_setting_name",
        "name",
        "key",
        "__config__",
        "name",
        "value",
        "description",
        "x",
        "x",
        "__class__",
        "__bases__",
        "__get_setting_name",
        "name",
        "value",
        "value",
        "description",
        "get_gef_setting",
        "cache_clear",
        "name",
        "__get_setting_name",
        "name",
        "__config__",
        "key",
        "get_gef_setting",
        "cache_clear",
        "argv",
        "from_tty",
        "from_tty",
        "gdb",
        "execute",
        "to_string",
        "strip",
        "split",
        "__last_command",
        "command",
        "repeat_count",
        "repeat",
        "command",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "argv",
        "os",
        "path",
        "abspath",
        "os",
        "path",
        "expanduser",
        "inspect",
        "stack",
        "os",
        "path",
        "dirname",
        "gef_fpath",
        "hashlib",
        "sha1",
        "open",
        "gef_fpath",
        "read",
        "hexdigest",
        "os",
        "access",
        "format",
        "gef_dir",
        "os",
        "X_OK",
        "subprocess",
        "check_output",
        "cwd",
        "gef_dir",
        "shell",
        "decode",
        "strip",
        "len",
        "subprocess",
        "check_output",
        "cwd",
        "gef_dir",
        "shell",
        "decode",
        "strip",
        "gef_print",
        "format",
        "ver",
        "extra",
        "gef_print",
        "gef_print",
        "format",
        "gef_fpath",
        "gef_hash",
        "gef_print",
        "format",
        "gdb",
        "VERSION",
        "format",
        "sys",
        "version_info",
        "major",
        "sys",
        "version_info",
        "minor",
        "gef_print",
        "format",
        "py_ver",
        "argv",
        "gef_print",
        "format",
        "join",
        "__gef__",
        "loaded_command_names",
        "register_command",
        "GenericCommand",
        "endian_str",
        "endian_str",
        "endian_str",
        "endian_str",
        "format",
        "_cmdline_",
        "valid_formats",
        "format_matrix",
        "keys",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "kwargs",
        "args",
        "bitlen",
        "current_arch",
        "ptrsize",
        "format_matrix",
        "keys",
        "args",
        "bitlen",
        "valid_bitlens",
        "err",
        "format",
        "valid_bitlens",
        "args",
        "lang",
        "valid_formats",
        "err",
        "format",
        "valid_formats",
        "gdb",
        "parse_and_eval",
        "args",
        "location",
        "args",
        "bitlen",
        "start_addr",
        "args",
        "length",
        "size",
        "format_matrix",
        "args",
        "bitlen",
        "addr",
        "start_addr",
        "end_addr",
        "size",
        "unpack",
        "fmt",
        "read_memory",
        "addr",
        "size",
        "data",
        "value",
        "join",
        "hex",
        "data",
        "args",
        "lang",
        "format",
        "sdata",
        "args",
        "lang",
        "format_matrix",
        "args",
        "bitlen",
        "format",
        "c_type",
        "args",
        "length",
        "sdata",
        "args",
        "lang",
        "format",
        "sdata",
        "args",
        "lang",
        "format_matrix",
        "args",
        "bitlen",
        "format",
        "asm_type",
        "sdata",
        "args",
        "clip",
        "copy_to_clipboard",
        "gef_pybytes",
        "info",
        "warn",
        "gef_print",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "prefix",
        "argv",
        "argv",
        "usage",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "__pie_counter__",
        "__pie_breakpoints__",
        "len",
        "argv",
        "usage",
        "kwargs",
        "args",
        "expression",
        "args",
        "expression",
        "format",
        "args",
        "expression",
        "gdb",
        "parse_and_eval",
        "bp_expr",
        "set_pie_breakpoint",
        "format",
        "addr",
        "addr",
        "is_alive",
        "get_process_maps",
        "x",
        "page_start",
        "x",
        "vmmap",
        "x",
        "path",
        "get_filepath",
        "bp_ins",
        "__pie_breakpoints__",
        "values",
        "bp_ins",
        "instantiate",
        "base_address",
        "staticmethod",
        "set_func",
        "addr",
        "__pie_counter__",
        "__pie_breakpoints__",
        "PieVirtualBreakpoint",
        "set_func",
        "__pie_counter__",
        "addr",
        "__pie_counter__",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "__pie_breakpoints__",
        "kwargs",
        "args",
        "breakpoints",
        "__pie_breakpoints__",
        "x",
        "x",
        "__pie_breakpoints__",
        "__pie_breakpoints__",
        "x",
        "x",
        "args",
        "breakpoints",
        "lines",
        "append",
        "lines",
        "format",
        "x",
        "vbp_num",
        "x",
        "bp_num",
        "x",
        "bp_num",
        "x",
        "addr",
        "x",
        "bps",
        "gef_print",
        "join",
        "lines",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "__pie_breakpoints__",
        "kwargs",
        "args",
        "breakpoints",
        "__pie_breakpoints__",
        "x",
        "x",
        "__pie_breakpoints__",
        "delete_bp",
        "to_delete",
        "delete_bp",
        "__pie_breakpoints__",
        "x",
        "x",
        "args",
        "breakpoints",
        "staticmethod",
        "breakpoints",
        "__pie_breakpoints__",
        "bp",
        "breakpoints",
        "bp",
        "bp_num",
        "gdb",
        "execute",
        "format",
        "bp",
        "bp_num",
        "__pie_breakpoints__",
        "bp",
        "vbp_num",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "argv",
        "__pie_breakpoints__",
        "get_filepath",
        "fpath",
        "warn",
        "os",
        "access",
        "fpath",
        "os",
        "X_OK",
        "warn",
        "format",
        "fpath",
        "is_alive",
        "warn",
        "gdb",
        "execute",
        "hide_context",
        "gdb",
        "execute",
        "format",
        "join",
        "argv",
        "unhide_context",
        "gdb",
        "execute",
        "get_process_maps",
        "x",
        "page_start",
        "x",
        "vmmap",
        "x",
        "path",
        "get_filepath",
        "info",
        "format",
        "hex",
        "base_address",
        "bp_ins",
        "__pie_breakpoints__",
        "values",
        "bp_ins",
        "instantiate",
        "base_address",
        "gdb",
        "execute",
        "gdb",
        "error",
        "e",
        "err",
        "e",
        "gdb",
        "execute",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "argv",
        "gdb",
        "execute",
        "format",
        "join",
        "argv",
        "to_string",
        "gdb",
        "error",
        "e",
        "err",
        "e",
        "get_process_maps",
        "x",
        "page_start",
        "x",
        "vmmap",
        "x",
        "path",
        "get_filepath",
        "bp_ins",
        "__pie_breakpoints__",
        "values",
        "bp_ins",
        "instantiate",
        "base_address",
        "gdb",
        "execute",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "argv",
        "gdb",
        "execute",
        "format",
        "join",
        "argv",
        "gdb",
        "error",
        "e",
        "err",
        "e",
        "get_process_maps",
        "x",
        "page_start",
        "x",
        "vmmap",
        "x",
        "realpath",
        "get_filepath",
        "bp_ins",
        "__pie_breakpoints__",
        "values",
        "bp_ins",
        "instantiate",
        "base_address",
        "gdb",
        "execute",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "argv",
        "len",
        "argv",
        "argc",
        "evaluate",
        "argv",
        "argc",
        "distance",
        "argv",
        "expr",
        "i",
        "current_arch",
        "ptrsize",
        "x",
        "format",
        "x",
        "off",
        "off",
        "x",
        "format",
        "x",
        "off",
        "off",
        "comp2_x",
        "res",
        "s_i",
        "rjust",
        "len",
        "s_i",
        "len",
        "s_i",
        "s_i",
        "gef_print",
        "format",
        "i",
        "gef_print",
        "comp2_x",
        "res",
        "gef_print",
        "comp2_b",
        "res",
        "gef_print",
        "format",
        "binascii",
        "unhexlify",
        "s_i",
        "gef_print",
        "format",
        "binascii",
        "unhexlify",
        "s_i",
        "xp",
        "expr",
        "gdb",
        "parse_and_eval",
        "xp",
        "xp",
        "parsed_expr",
        "append",
        "format",
        "xp",
        "gdb",
        "error",
        "parsed_expr",
        "append",
        "xp",
        "eval",
        "join",
        "parsed_expr",
        "isinstance",
        "res",
        "show_as_int",
        "res",
        "gef_print",
        "format",
        "res",
        "SyntaxError",
        "gef_print",
        "join",
        "parsed_expr",
        "args",
        "args",
        "is_hex",
        "args",
        "args",
        "args",
        "is_hex",
        "args",
        "args",
        "gef_print",
        "format",
        "abs",
        "x",
        "y",
        "ValueError",
        "warn",
        "format",
        "_cmdline_",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "only_if_gdb_running",
        "argv",
        "dont_repeat",
        "checksec",
        "get_filepath",
        "has_canary",
        "warn",
        "gef_read_canary",
        "res",
        "err",
        "res",
        "info",
        "format",
        "location",
        "current_arch",
        "ptrsize",
        "info",
        "format",
        "get_pid",
        "canary",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_NONE",
        "only_if_gdb_running",
        "only_if_gdb_target_local",
        "argv",
        "show_info_proc",
        "show_ancestor",
        "show_descendants",
        "show_fds",
        "show_connections",
        "pid",
        "line",
        "open",
        "format",
        "pid",
        "line",
        "split",
        "key",
        "strip",
        "value",
        "strip",
        "res",
        "pid",
        "open",
        "format",
        "pid",
        "read",
        "replace",
        "strip",
        "pid",
        "os",
        "readlink",
        "format",
        "pid",
        "pid",
        "which",
        "ps",
        "format",
        "pid",
        "x",
        "x",
        "gef_execute_external",
        "cmd",
        "as_list",
        "info",
        "get_pid",
        "get_cmdline_of",
        "pid",
        "gef_print",
        "format",
        "RIGHT_ARROW",
        "pid",
        "gef_print",
        "format",
        "RIGHT_ARROW",
        "get_process_path_of",
        "pid",
        "gef_print",
        "format",
        "RIGHT_ARROW",
        "cmdline",
        "info",
        "get_state_of",
        "get_pid",
        "get_state_of",
        "ppid",
        "get_cmdline_of",
        "ppid",
        "gef_print",
        "format",
        "RIGHT_ARROW",
        "state",
        "gef_print",
        "format",
        "RIGHT_ARROW",
        "cmdline",
        "info",
        "get_children_pids",
        "get_pid",
        "children",
        "gef_print",
        "child_pid",
        "children",
        "get_state_of",
        "child_pid",
        "state",
        "gef_print",
        "format",
        "RIGHT_ARROW",
        "pid",
        "get_process_path_of",
        "pid",
        "get_cmdline_of",
        "pid",
        "get_pid",
        "format",
        "pid",
        "info",
        "os",
        "listdir",
        "path",
        "items",
        "gef_print",
        "fname",
        "items",
        "os",
        "path",
        "join",
        "path",
        "fname",
        "os",
        "path",
        "islink",
        "fullpath",
        "gef_print",
        "format",
        "fullpath",
        "RIGHT_ARROW",
        "os",
        "readlink",
        "fullpath",
        "pid",
        "format",
        "pid",
        "os",
        "listdir",
        "path",
        "fname",
        "items",
        "os",
        "path",
        "join",
        "path",
        "fname",
        "os",
        "path",
        "islink",
        "fullpath",
        "os",
        "readlink",
        "fullpath",
        "startswith",
        "os",
        "readlink",
        "fullpath",
        "replace",
        "sockets",
        "append",
        "p",
        "sockets",
        "addr",
        "addr",
        "split",
        "socket",
        "inet_ntoa",
        "pack",
        "ip",
        "port",
        "info",
        "get_pid",
        "list_sockets",
        "pid",
        "sockets",
        "gef_print",
        "x",
        "split",
        "x",
        "open",
        "format",
        "pid",
        "readlines",
        "x",
        "split",
        "x",
        "open",
        "format",
        "pid",
        "readlines",
        "proto",
        "entries",
        "entry",
        "entries",
        "proto",
        "entry",
        "entry",
        "inode",
        "sockets",
        "parse_ip_port",
        "local",
        "parse_ip_port",
        "remote",
        "state",
        "tcp_states_str",
        "state",
        "proto",
        "udp_states_str",
        "state",
        "gef_print",
        "format",
        "local",
        "local",
        "RIGHT_ARROW",
        "remote",
        "remote",
        "state_str",
        "register_priority_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "args",
        "kwargs",
        "_cmdline_",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "args",
        "dont_repeat",
        "len",
        "args",
        "argc",
        "setting",
        "sorted",
        "settings",
        "get_setting",
        "setting",
        "Color",
        "colorify",
        "value",
        "value",
        "gef_print",
        "format",
        "setting",
        "value",
        "args",
        "has_setting",
        "setting",
        "err",
        "argc",
        "get_setting",
        "setting",
        "Color",
        "colorify",
        "value",
        "value",
        "gef_print",
        "format",
        "setting",
        "value",
        "x",
        "x",
        "args",
        "x",
        "Color",
        "colors",
        "add_setting",
        "setting",
        "join",
        "val",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "prefix",
        "add_setting",
        "os",
        "sep",
        "join",
        "get_gef_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "argv",
        "len",
        "argv",
        "argc",
        "gdb",
        "execute",
        "get_modulename_structname_from_arg",
        "argv",
        "argc",
        "gdb",
        "execute",
        "format",
        "structname",
        "gdb",
        "parse_and_eval",
        "argv",
        "gdb",
        "error",
        "err",
        "format",
        "argv",
        "apply_structure_to_address",
        "modname",
        "structname",
        "address",
        "os",
        "path",
        "expanduser",
        "get_gef_setting",
        "os",
        "path",
        "realpath",
        "path",
        "os",
        "path",
        "isdir",
        "path",
        "RuntimeError",
        "path",
        "structure_name",
        "enumerate_structures",
        "fname",
        "structure_files",
        "structure_name",
        "structure_files",
        "fname",
        "fname",
        "fpath",
        "FileNotFoundError",
        "format",
        "structure_name",
        "fpath",
        "structure_name",
        "enumerate_structures",
        "fname",
        "structure_files",
        "all_structures",
        "structure_files",
        "fname",
        "structure_name",
        "all_structures",
        "arg",
        "arg",
        "split",
        "arg",
        "arg",
        "arg",
        "structname",
        "split",
        "structname",
        "structname",
        "modname",
        "structname",
        "data",
        "min",
        "len",
        "data",
        "ctypes",
        "ctypes",
        "memmove",
        "ctypes",
        "addressof",
        "data",
        "length",
        "modname",
        "classname",
        "get_pcustom_filepath_for_structure",
        "modname",
        "load_module",
        "_fpath",
        "getattr",
        "_mod",
        "classname",
        "_class",
        "_class",
        "only_if_gdb_running",
        "mod_name",
        "struct_name",
        "addr",
        "depth",
        "is_valid_struct",
        "mod_name",
        "err",
        "format",
        "struct_name",
        "depth",
        "get_setting",
        "warn",
        "get_structure_class",
        "mod_name",
        "struct_name",
        "read_memory",
        "addr",
        "ctypes",
        "_struct",
        "gdb",
        "MemoryError",
        "err",
        "format",
        "depth",
        "addr",
        "deserialize",
        "_struct",
        "data",
        "get_memory_alignment",
        "field",
        "_struct",
        "_fields_",
        "field",
        "getattr",
        "_struct",
        "_name",
        "getattr",
        "_class",
        "_name",
        "offset",
        "_regsize",
        "_type",
        "ctypes",
        "c_uint32",
        "_regsize",
        "_type",
        "ctypes",
        "c_uint64",
        "_regsize",
        "ctypes",
        "ctypes",
        "c_void_p",
        "_type",
        "ctypes",
        "c_void_p",
        "RIGHT_ARROW",
        "join",
        "dereference_from",
        "_value",
        "line",
        "depth",
        "line",
        "format",
        "addr",
        "_offset",
        "_name",
        "ljust",
        "line",
        "format",
        "_value",
        "_type",
        "get_ctypes_value",
        "_struct",
        "_name",
        "_value",
        "parsed_value",
        "line",
        "format",
        "RIGHT_ARROW",
        "parsed_value",
        "gef_print",
        "join",
        "line",
        "issubclass",
        "_type",
        "ctypes",
        "Structure",
        "apply_structure_to_address",
        "mod_name",
        "_type",
        "addr",
        "_offset",
        "depth",
        "_type",
        "startswith",
        "_type",
        "replace",
        "u64",
        "read_memory",
        "addr",
        "_offset",
        "apply_structure_to_address",
        "mod_name",
        "__sub_type_name",
        "__deref",
        "depth",
        "item",
        "value",
        "hasattr",
        "getattr",
        "name",
        "values",
        "values_list",
        "name",
        "item",
        "callable",
        "values",
        "values",
        "value",
        "val",
        "desc",
        "values",
        "value",
        "val",
        "desc",
        "val",
        "desc",
        "err",
        "format",
        "name",
        "get_pcustom_absolute_root_path",
        "filen",
        "os",
        "listdir",
        "root",
        "os",
        "path",
        "splitext",
        "filen",
        "ext",
        "name",
        "os",
        "sep",
        "join",
        "root",
        "filen",
        "module_files",
        "append",
        "os",
        "path",
        "realpath",
        "fpath",
        "module_files",
        "enumerate_structure_files",
        "module_path",
        "files",
        "load_module",
        "module_path",
        "enumerate_structures_from_module",
        "structures",
        "file_path",
        "file_path",
        "split",
        "os",
        "sep",
        "replace",
        "importlib",
        "util",
        "spec_from_file_location",
        "module_name",
        "file_path",
        "importlib",
        "util",
        "module_from_spec",
        "spec",
        "sys",
        "modules",
        "spec",
        "loader",
        "exec_module",
        "x",
        "x",
        "dir",
        "inspect",
        "isclass",
        "getattr",
        "x",
        "issubclass",
        "getattr",
        "x",
        "ctypes",
        "Structure",
        "_structs",
        "_invalid",
        "register_command",
        "PCustomCommand",
        "format",
        "_cmdline_",
        "argv",
        "__list_custom_structures",
        "get_pcustom_absolute_root_path",
        "info",
        "format",
        "path",
        "enumerate_structures",
        "get_gef_setting",
        "get_gef_setting",
        "filename",
        "structures",
        "join",
        "Color",
        "colorify",
        "x",
        "struct_color",
        "x",
        "structures",
        "filename",
        "Color",
        "colorify",
        "filename",
        "filename_color",
        "gef_print",
        "format",
        "RIGHT_ARROW",
        "__filename",
        "__modules",
        "register_command",
        "PCustomCommand",
        "format",
        "_cmdline_",
        "argv",
        "len",
        "argv",
        "usage",
        "get_modulename_structname_from_arg",
        "argv",
        "__dump_structure",
        "modname",
        "structname",
        "mod_name",
        "struct_name",
        "gdb",
        "execute",
        "format",
        "struct_name",
        "gdb",
        "error",
        "__dump_custom_structure",
        "mod_name",
        "struct_name",
        "mod_name",
        "struct_name",
        "is_valid_struct",
        "mod_name",
        "err",
        "format",
        "struct_name",
        "get_structure_class",
        "mod_name",
        "struct_name",
        "_name",
        "_type",
        "_struct",
        "_fields_",
        "ctypes",
        "_type",
        "Color",
        "colorify",
        "_name",
        "get_gef_setting",
        "Color",
        "colorify",
        "_type",
        "get_gef_setting",
        "Color",
        "colorify",
        "hex",
        "_size",
        "get_gef_setting",
        "Color",
        "boldify",
        "format",
        "getattr",
        "_class",
        "_name",
        "offset",
        "gef_print",
        "format",
        "__offset",
        "__name",
        "__type",
        "__size",
        "register_command",
        "PCustomCommand",
        "format",
        "_cmdline_",
        "argv",
        "len",
        "argv",
        "usage",
        "get_modulename_structname_from_arg",
        "argv",
        "__create_or_edit_structure",
        "modname",
        "structname",
        "mod_name",
        "struct_name",
        "get_pcustom_absolute_root_path",
        "root",
        "err",
        "get_pcustom_filepath_for_structure",
        "mod_name",
        "info",
        "format",
        "fullname",
        "FileNotFoundError",
        "os",
        "sep",
        "join",
        "root",
        "struct_name",
        "ok",
        "format",
        "fullname",
        "__create_new_structure_template",
        "struct_name",
        "fullname",
        "os",
        "getenv",
        "split",
        "cmd",
        "append",
        "fullname",
        "subprocess",
        "call",
        "cmd",
        "structname",
        "fullname",
        "structname",
        "open",
        "fullname",
        "f",
        "f",
        "write",
        "os",
        "sep",
        "join",
        "template",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "only_if_gdb_running",
        "only_if_gdb_target_local",
        "argv",
        "len",
        "argv",
        "usage",
        "os",
        "access",
        "format",
        "get_pid",
        "argv",
        "os",
        "R_OK",
        "usage",
        "argv",
        "argv",
        "new_output",
        "socket",
        "gethostbyname",
        "new_output",
        "split",
        "new_output",
        "split",
        "gdb",
        "execute",
        "format",
        "AF_INET",
        "SOCK_STREAM",
        "to_string",
        "get_fd_from_result",
        "res",
        "get_process_maps",
        "entry",
        "page_start",
        "entry",
        "vmmap",
        "entry",
        "path",
        "read_memory",
        "stack_addr",
        "write_memory",
        "stack_addr",
        "write_memory",
        "stack_addr",
        "pack",
        "socket",
        "htons",
        "port",
        "write_memory",
        "stack_addr",
        "socket",
        "inet_aton",
        "address",
        "info",
        "format",
        "new_output",
        "gdb",
        "execute",
        "format",
        "new_fd",
        "stack_addr",
        "to_string",
        "write_memory",
        "stack_addr",
        "original_contents",
        "get_fd_from_result",
        "res",
        "res",
        "err",
        "format",
        "address",
        "port",
        "info",
        "format",
        "new_output",
        "gdb",
        "execute",
        "format",
        "new_output",
        "to_string",
        "get_fd_from_result",
        "res",
        "info",
        "format",
        "new_output",
        "new_fd",
        "gdb",
        "execute",
        "format",
        "new_fd",
        "old_fd",
        "to_string",
        "info",
        "format",
        "new_fd",
        "RIGHT_ARROW",
        "old_fd",
        "gdb",
        "execute",
        "format",
        "new_fd",
        "to_string",
        "info",
        "format",
        "new_fd",
        "ok",
        "res",
        "res",
        "split",
        "gdb",
        "execute",
        "format",
        "res",
        "to_string",
        "res",
        "split",
        "res",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "prefix",
        "add_setting",
        "host",
        "add_setting",
        "port",
        "add_setting",
        "host",
        "port",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "s",
        "settimeout",
        "s",
        "connect",
        "host",
        "port",
        "s",
        "close",
        "socket",
        "error",
        "host",
        "port",
        "host",
        "get_setting",
        "port",
        "get_setting",
        "xmlrpclib",
        "ServerProxy",
        "format",
        "host",
        "port",
        "gef_on_stop_hook",
        "ida_synchronize_handler",
        "gef_on_continue_hook",
        "ida_synchronize_handler",
        "sock",
        "version",
        "ConnectionRefusedError",
        "err",
        "format",
        "host",
        "port",
        "sock",
        "gef_on_stop_unhook",
        "ida_synchronize_handler",
        "gef_on_continue_unhook",
        "ida_synchronize_handler",
        "argv",
        "arglist",
        "arg",
        "arglist",
        "gdb",
        "parse_and_eval",
        "arg",
        "argval",
        "fetch_lazy",
        "argval",
        "argval",
        "address",
        "argval",
        "address",
        "is_pie",
        "get_filepath",
        "main_base_address",
        "argval",
        "main_end_address",
        "argval",
        "main_base_address",
        "args",
        "append",
        "format",
        "argval",
        "args",
        "append",
        "arg",
        "args",
        "sock",
        "connect",
        "sock",
        "disconnect",
        "len",
        "argv",
        "argv",
        "argv",
        "len",
        "argv",
        "usage",
        "method_name",
        "argv",
        "lower",
        "method_name",
        "sock",
        "version",
        "info",
        "format",
        "Color",
        "greenify",
        "Color",
        "redify",
        "version",
        "Color",
        "yellowify",
        "version",
        "is_alive",
        "get_process_maps",
        "min",
        "x",
        "page_start",
        "x",
        "vmmap",
        "x",
        "realpath",
        "get_filepath",
        "max",
        "x",
        "page_end",
        "x",
        "vmmap",
        "x",
        "realpath",
        "get_filepath",
        "method_name",
        "synchronize",
        "getattr",
        "sock",
        "method_name",
        "len",
        "argv",
        "parsed_arglist",
        "argv",
        "method",
        "args",
        "method",
        "method_name",
        "import_structures",
        "res",
        "gef_print",
        "res",
        "get_setting",
        "getattr",
        "sock",
        "jump",
        "hex",
        "current_arch",
        "pc",
        "main_base_address",
        "socket",
        "error",
        "disconnect",
        "current_arch",
        "pc",
        "get_process_maps",
        "min",
        "x",
        "page_start",
        "x",
        "vmmap",
        "x",
        "path",
        "get_filepath",
        "max",
        "x",
        "page_end",
        "x",
        "vmmap",
        "x",
        "path",
        "get_filepath",
        "base_address",
        "pc",
        "end_address",
        "gdb",
        "breakpoints",
        "bp",
        "breakpoints",
        "bp",
        "enabled",
        "bp",
        "temporary",
        "bp",
        "location",
        "gdb",
        "parse_and_eval",
        "bp",
        "location",
        "gdb",
        "parse_and_eval",
        "bp",
        "location",
        "address",
        "base_address",
        "addr",
        "end_address",
        "gdb_bps",
        "add",
        "addr",
        "base_address",
        "gdb_bps",
        "old_bps",
        "old_bps",
        "gdb_bps",
        "gdb_bps",
        "sock",
        "sync",
        "format",
        "pc",
        "base_address",
        "added",
        "removed",
        "ConnectionRefusedError",
        "disconnect",
        "rc",
        "new_bp",
        "ida_added",
        "base_address",
        "new_bp",
        "gdb",
        "Breakpoint",
        "format",
        "location",
        "gdb",
        "BP_BREAKPOINT",
        "old_bps",
        "add",
        "location",
        "gdb",
        "breakpoints",
        "bp",
        "breakpoints",
        "bp",
        "enabled",
        "bp",
        "temporary",
        "bp",
        "location",
        "gdb",
        "parse_and_eval",
        "bp",
        "location",
        "gdb",
        "parse_and_eval",
        "bp",
        "location",
        "address",
        "base_address",
        "addr",
        "end_address",
        "addr",
        "base_address",
        "ida_removed",
        "addr",
        "base_address",
        "old_bps",
        "old_bps",
        "remove",
        "addr",
        "base_address",
        "bp",
        "meth",
        "sock",
        "meth",
        "gef_print",
        "titlify",
        "meth",
        "gef_print",
        "sock",
        "system",
        "methodHelp",
        "meth",
        "info",
        "m",
        "sock",
        "system",
        "listMethods",
        "m",
        "startswith",
        "gef_print",
        "titlify",
        "m",
        "gef_print",
        "sock",
        "system",
        "methodHelp",
        "m",
        "structs",
        "version",
        "get_gef_setting",
        "path",
        "os",
        "path",
        "isdir",
        "path",
        "gef_makedirs",
        "path",
        "struct_name",
        "structs",
        "os",
        "path",
        "join",
        "path",
        "format",
        "struct_name",
        "open",
        "fullpath",
        "f",
        "f",
        "write",
        "f",
        "write",
        "f",
        "write",
        "struct_name",
        "f",
        "write",
        "f",
        "write",
        "_",
        "name",
        "size",
        "structs",
        "struct_name",
        "name",
        "encoding",
        "size",
        "size",
        "size",
        "size",
        "format",
        "size",
        "format",
        "name",
        "csize",
        "f",
        "write",
        "m",
        "f",
        "write",
        "ok",
        "format",
        "len",
        "structs",
        "len",
        "structs",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "only_if_gdb_running",
        "argv",
        "len",
        "argv",
        "usage",
        "argv",
        "argv",
        "info",
        "format",
        "Color",
        "yellowify",
        "haystack",
        "Color",
        "yellowify",
        "needle",
        "haystack",
        "get_filepath",
        "needle",
        "get_filepath",
        "haystack",
        "parse_string_range",
        "haystack",
        "haystack_sections",
        "append",
        "start",
        "end",
        "needle",
        "parse_string_range",
        "needle",
        "needle_sections",
        "append",
        "start",
        "end",
        "sect",
        "get_process_maps",
        "haystack",
        "sect",
        "path",
        "haystack_sections",
        "append",
        "sect",
        "page_start",
        "sect",
        "page_end",
        "os",
        "path",
        "basename",
        "sect",
        "path",
        "needle",
        "sect",
        "path",
        "needle_sections",
        "append",
        "sect",
        "page_start",
        "sect",
        "page_end",
        "current_arch",
        "ptrsize",
        "u32",
        "step",
        "u64",
        "hstart",
        "hend",
        "hname",
        "haystack_sections",
        "read_memory",
        "hstart",
        "hend",
        "hstart",
        "gdb",
        "MemoryError",
        "i",
        "len",
        "mem",
        "step",
        "unpack",
        "mem",
        "i",
        "i",
        "step",
        "nstart",
        "nend",
        "needle_sections",
        "target",
        "nstart",
        "target",
        "nend",
        "DereferenceCommand",
        "pprint_dereferenced",
        "hstart",
        "i",
        "step",
        "hname",
        "Color",
        "colorify",
        "hname",
        "gef_print",
        "format",
        "name",
        "deref",
        "gef_print",
        "format",
        "deref",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "section",
        "section",
        "path",
        "title",
        "format",
        "Color",
        "blueify",
        "section",
        "path",
        "title",
        "format",
        "section",
        "page_start",
        "section",
        "page_end",
        "title",
        "format",
        "section",
        "permission",
        "ok",
        "title",
        "loc",
        "gef_print",
        "format",
        "loc",
        "loc",
        "RIGHT_ARROW",
        "Color",
        "pinkify",
        "loc",
        "pattern",
        "start_address",
        "end_address",
        "gef_pybytes",
        "pattern",
        "chunk_addr",
        "start_address",
        "end_address",
        "step",
        "chunk_addr",
        "step",
        "end_address",
        "end_address",
        "chunk_addr",
        "step",
        "read_memory",
        "chunk_addr",
        "chunk_size",
        "match",
        "re",
        "finditer",
        "pattern",
        "mem",
        "chunk_addr",
        "match",
        "start",
        "is_ascii_string",
        "start",
        "read_ascii_string",
        "start",
        "start",
        "len",
        "ustr",
        "gef_pystring",
        "pattern",
        "start",
        "len",
        "pattern",
        "locations",
        "append",
        "start",
        "end",
        "ustr",
        "mem",
        "locations",
        "pattern",
        "section_name",
        "section",
        "get_process_maps",
        "section",
        "permission",
        "Permission",
        "READ",
        "section",
        "path",
        "section_name",
        "section",
        "path",
        "section",
        "page_start",
        "section",
        "page_end",
        "loc",
        "search_pattern_by_address",
        "pattern",
        "start",
        "end",
        "lookup_address",
        "loc",
        "addr_loc_start",
        "addr_loc_start",
        "section",
        "old_section",
        "addr_loc_start",
        "section",
        "print_section",
        "addr_loc_start",
        "section",
        "addr_loc_start",
        "section",
        "print_loc",
        "loc",
        "only_if_gdb_running",
        "argv",
        "len",
        "argv",
        "argc",
        "usage",
        "argv",
        "get_endian",
        "argc",
        "argv",
        "lower",
        "Elf",
        "BIG_ENDIAN",
        "argv",
        "lower",
        "Elf",
        "LITTLE_ENDIAN",
        "is_hex",
        "pattern",
        "endian",
        "Elf",
        "BIG_ENDIAN",
        "join",
        "pattern",
        "i",
        "i",
        "i",
        "len",
        "pattern",
        "join",
        "pattern",
        "i",
        "i",
        "i",
        "len",
        "pattern",
        "argc",
        "info",
        "format",
        "Color",
        "yellowify",
        "pattern",
        "argv",
        "argv",
        "parse_string_range",
        "argv",
        "lookup_address",
        "start",
        "loc",
        "valid",
        "print_section",
        "loc",
        "section",
        "loc",
        "search_pattern_by_address",
        "pattern",
        "start",
        "end",
        "print_loc",
        "loc",
        "argv",
        "section_name",
        "get_filepath",
        "search_pattern",
        "pattern",
        "section_name",
        "info",
        "format",
        "Color",
        "yellowify",
        "pattern",
        "search_pattern",
        "pattern",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "argv",
        "flag",
        "argv",
        "len",
        "flag",
        "flag",
        "flag",
        "lower",
        "action",
        "err",
        "format",
        "flag",
        "name",
        "current_arch",
        "flags_table",
        "values",
        "err",
        "format",
        "flag",
        "off",
        "current_arch",
        "flags_table",
        "current_arch",
        "flags_table",
        "off",
        "name",
        "get_register",
        "current_arch",
        "flag_register",
        "action",
        "old_flag",
        "off",
        "action",
        "old_flag",
        "off",
        "old_flag",
        "off",
        "gdb",
        "execute",
        "format",
        "current_arch",
        "flag_register",
        "new_flags",
        "gef_print",
        "current_arch",
        "flag_register_to_human",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "__import__",
        "ImportError",
        "ImportWarning",
        "msg",
        "only_if_gdb_running",
        "argv",
        "len",
        "argv",
        "err",
        "usage",
        "len",
        "argv",
        "argv",
        "Permission",
        "READ",
        "Permission",
        "WRITE",
        "Permission",
        "EXECUTE",
        "safe_parse_and_eval",
        "argv",
        "loc",
        "err",
        "loc",
        "process_lookup_address",
        "loc",
        "sect",
        "err",
        "sect",
        "page_end",
        "sect",
        "page_start",
        "current_arch",
        "pc",
        "info",
        "format",
        "sect",
        "page_start",
        "size",
        "Permission",
        "value",
        "perm",
        "get_arch",
        "get_stub_by_arch",
        "sect",
        "page_start",
        "size",
        "perm",
        "stub",
        "err",
        "info",
        "read_memory",
        "original_pc",
        "len",
        "stub",
        "format",
        "original_pc",
        "len",
        "stub",
        "info",
        "format",
        "bp_loc",
        "ChangePermissionBreakpoint",
        "bp_loc",
        "original_code",
        "original_pc",
        "info",
        "format",
        "loc",
        "len",
        "stub",
        "write_memory",
        "original_pc",
        "stub",
        "len",
        "stub",
        "info",
        "gdb",
        "execute",
        "addr",
        "size",
        "perm",
        "current_arch",
        "mprotect_asm",
        "addr",
        "size",
        "perm",
        "get_keystone_arch",
        "keystone_assemble",
        "code",
        "arch",
        "mode",
        "raw",
        "raw_insns",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "add_setting",
        "add_setting",
        "__import__",
        "ImportError",
        "ImportWarning",
        "msg",
        "__import__",
        "ImportError",
        "ImportWarning",
        "msg",
        "only_if_gdb_running",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "kwargs",
        "args",
        "start",
        "current_arch",
        "pc",
        "args",
        "until",
        "get_unicorn_end_addr",
        "start_address",
        "args",
        "nb",
        "run_unicorn",
        "start_address",
        "end_address",
        "skip_emulation",
        "args",
        "skip_emulation",
        "to_file",
        "args",
        "output_file",
        "start_addr",
        "nb",
        "gef_disassemble",
        "start_addr",
        "nb",
        "dis",
        "last_insn",
        "address",
        "start_insn_addr",
        "end_insn_addr",
        "args",
        "kwargs",
        "get_setting",
        "kwargs",
        "get",
        "get_unicorn_arch",
        "to_string",
        "get_unicorn_registers",
        "to_string",
        "get_capstone_arch",
        "to_string",
        "get_filename",
        "kwargs",
        "get",
        "to_file",
        "to_file",
        "open",
        "to_file",
        "to_file",
        "fileno",
        "tempfile",
        "mkstemp",
        "suffix",
        "prefix",
        "is_x86",
        "which",
        "format",
        "pythonbin",
        "pythonbin",
        "fname",
        "fname",
        "start",
        "start_insn_addr",
        "end",
        "end_insn_addr",
        "regs",
        "join",
        "k",
        "strip",
        "unicorn_registers",
        "k",
        "k",
        "unicorn_registers",
        "verbose",
        "verbose",
        "syscall_reg",
        "current_arch",
        "syscall_register",
        "cs_arch",
        "cs_arch",
        "cs_mode",
        "cs_mode",
        "ptrsize",
        "current_arch",
        "ptrsize",
        "emu_block",
        "emulate_segmentation_block",
        "is_x86",
        "arch",
        "arch",
        "mode",
        "mode",
        "context_block",
        "context_segmentation_block",
        "is_x86",
        "verbose",
        "info",
        "r",
        "current_arch",
        "all_registers",
        "get_register",
        "r",
        "content",
        "format",
        "unicorn_registers",
        "r",
        "gregval",
        "get_process_maps",
        "vmmap",
        "warn",
        "verbose",
        "info",
        "sect",
        "vmmap",
        "sect",
        "path",
        "sect",
        "page_start",
        "sect",
        "page_end",
        "sect",
        "size",
        "sect",
        "permission",
        "content",
        "format",
        "sect",
        "path",
        "page_start",
        "page_end",
        "content",
        "format",
        "page_start",
        "size",
        "oct",
        "perm",
        "value",
        "perm",
        "Permission",
        "READ",
        "read_memory",
        "page_start",
        "size",
        "format",
        "fname",
        "page_start",
        "open",
        "loc",
        "f",
        "f",
        "write",
        "code",
        "content",
        "format",
        "page_start",
        "loc",
        "content",
        "content",
        "content",
        "is_x86_64",
        "content",
        "content",
        "content",
        "format",
        "start",
        "start_insn_addr",
        "end",
        "end_insn_addr",
        "os",
        "write",
        "tmp_fd",
        "gef_pybytes",
        "content",
        "os",
        "close",
        "tmp_fd",
        "kwargs",
        "get",
        "info",
        "format",
        "tmp_filename",
        "os",
        "chmod",
        "tmp_filename",
        "skip_emulation",
        "ok",
        "format",
        "start_insn_addr",
        "RIGHT_ARROW",
        "end_insn_addr",
        "which",
        "gef_execute_external",
        "pythonbin",
        "tmp_filename",
        "as_list",
        "gef_print",
        "join",
        "res",
        "kwargs",
        "get",
        "os",
        "unlink",
        "tmp_filename",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "prefix",
        "add_setting",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "__gef_remote__",
        "__gef_remote__",
        "err",
        "kwargs",
        "args",
        "target",
        "args",
        "target",
        "err",
        "args",
        "is_extended_remote",
        "args",
        "pid",
        "err",
        "args",
        "target",
        "args",
        "pid",
        "args",
        "is_extended_remote",
        "args",
        "pid",
        "get_pid",
        "args",
        "download_everything",
        "args",
        "qemu_mode",
        "prepare_qemu_stub",
        "target",
        "handler_connected",
        "gef_on_new_hook",
        "new_objfile_handler",
        "connect_target",
        "target",
        "args",
        "is_extended_remote",
        "args",
        "is_extended_remote",
        "ok",
        "format",
        "pid",
        "hide_context",
        "gdb",
        "execute",
        "format",
        "pid",
        "unhide_context",
        "setup_remote_environment",
        "pid",
        "args",
        "update_solib",
        "is_remote_debug",
        "err",
        "download_all_libs",
        "get_process_maps",
        "sect",
        "vmmap",
        "sect",
        "path",
        "startswith",
        "download_file",
        "sect",
        "path",
        "_file",
        "err",
        "format",
        "sect",
        "path",
        "success",
        "ok",
        "format",
        "success",
        "args",
        "download_lib",
        "download_file",
        "args",
        "download_lib",
        "_file",
        "err",
        "ok",
        "format",
        "args",
        "download_lib",
        "RIGHT_ARROW",
        "_file",
        "args",
        "update_solib",
        "refresh_shared_library_path",
        "set_arch",
        "pid",
        "is_remote_debug",
        "download_all_libs",
        "new_objfile",
        "filename",
        "startswith",
        "new_objfile",
        "filename",
        "len",
        "download_file",
        "remote_lib",
        "use_cache",
        "local_lib",
        "ok",
        "format",
        "remote_lib",
        "RIGHT_ARROW",
        "local_lib",
        "pid",
        "update_solib",
        "gdb",
        "execute",
        "i",
        "load_from_remote_proc",
        "pid",
        "i",
        "infos",
        "i",
        "err",
        "format",
        "i",
        "get_path_from_info_proc",
        "download_file",
        "format",
        "pid",
        "use_cache",
        "local_name",
        "exepath",
        "os",
        "access",
        "infos",
        "os",
        "R_OK",
        "err",
        "os",
        "path",
        "sep",
        "join",
        "get_gef_setting",
        "get_pid",
        "add_setting",
        "directory",
        "ok",
        "format",
        "directory",
        "target",
        "is_extended_remote",
        "hide_context",
        "format",
        "is_extended_remote",
        "target",
        "gdb",
        "execute",
        "cmd",
        "ok",
        "format",
        "target",
        "e",
        "err",
        "format",
        "target",
        "e",
        "unhide_context",
        "ret",
        "pid",
        "info",
        "format",
        "pid",
        "info",
        "download_file",
        "remote_name",
        "use_cache",
        "r",
        "r",
        "d",
        "f",
        "os",
        "walk",
        "get_setting",
        "join",
        "dirs",
        "gdb",
        "execute",
        "format",
        "path",
        "_syntax_",
        "h",
        "h",
        "h",
        "h",
        "h",
        "h",
        "h",
        "info",
        "h",
        "target",
        "current_arch",
        "current_elf",
        "__gef_qemu_mode__",
        "reset_all_caches",
        "get_arch",
        "Elf",
        "minimalist",
        "arch",
        "startswith",
        "Elf",
        "ARM",
        "ARM",
        "arch",
        "startswith",
        "Elf",
        "AARCH64",
        "AARCH64",
        "arch",
        "startswith",
        "Elf",
        "X86_32",
        "X86",
        "arch",
        "startswith",
        "Elf",
        "X86_64",
        "Elf",
        "ELF_64_BITS",
        "X86_64",
        "arch",
        "startswith",
        "Elf",
        "MIPS",
        "MIPS",
        "arch",
        "startswith",
        "Elf",
        "POWERPC",
        "PowerPC",
        "arch",
        "startswith",
        "Elf",
        "SPARC",
        "SPARC",
        "RuntimeError",
        "format",
        "arch",
        "ok",
        "format",
        "current_arch",
        "arch",
        "hide_context",
        "gdb",
        "execute",
        "format",
        "target",
        "unhide_context",
        "get_pid",
        "gdb",
        "execute",
        "to_string",
        "from_tty",
        "reset_all_caches",
        "info",
        "get_process_maps",
        "gdb",
        "execute",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "addr",
        "gef_current_instruction",
        "addr",
        "gef_instruction_n",
        "addr",
        "next_insn",
        "address",
        "cur_insn",
        "address",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "kwargs",
        "parse_address",
        "args",
        "address",
        "args",
        "address",
        "current_arch",
        "pc",
        "args",
        "nb",
        "nop_bytes",
        "address",
        "number_of_bytes",
        "only_if_gdb_running",
        "loc",
        "num_bytes",
        "get_insn_size",
        "loc",
        "num_bytes",
        "num_bytes",
        "current_arch",
        "nop_insn",
        "len",
        "nops",
        "size",
        "format",
        "loc",
        "len",
        "nops",
        "size",
        "err",
        "m",
        "len",
        "nops",
        "size",
        "nops",
        "current_arch",
        "nop_insn",
        "len",
        "nops",
        "size",
        "err",
        "format",
        "loc",
        "ok",
        "format",
        "size",
        "format_address",
        "loc",
        "write_memory",
        "loc",
        "nops",
        "size",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "kwargs",
        "args",
        "address",
        "args",
        "address",
        "format",
        "current_arch",
        "pc",
        "StubBreakpoint",
        "loc",
        "args",
        "retval",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "__import__",
        "ImportError",
        "ImportWarning",
        "msg",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "kwargs",
        "args",
        "show_opcodes",
        "args",
        "location",
        "args",
        "location",
        "current_arch",
        "pc",
        "args",
        "length",
        "get_gef_setting",
        "insn",
        "capstone_disassemble",
        "location",
        "length",
        "skip",
        "length",
        "repeat_count",
        "kwargs",
        "insns",
        "append",
        "insn",
        "max",
        "opcodes_len",
        "len",
        "insn",
        "opcodes",
        "insn",
        "insns",
        "format",
        "opcodes_len",
        "show_opcodes",
        "insn_fmt",
        "format",
        "insn",
        "insn",
        "address",
        "current_arch",
        "pc",
        "Color",
        "colorify",
        "format",
        "RIGHT_ARROW",
        "text_insn",
        "capstone_analyze_pc",
        "insn",
        "length",
        "reason",
        "gef_print",
        "msg",
        "gef_print",
        "reason",
        "format",
        "text_insn",
        "gef_print",
        "msg",
        "insn",
        "nb_insn",
        "current_arch",
        "is_conditional_branch",
        "insn",
        "current_arch",
        "is_branch_taken",
        "insn",
        "is_taken",
        "format",
        "reason",
        "reason",
        "Color",
        "colorify",
        "format",
        "reason",
        "format",
        "reason",
        "reason",
        "Color",
        "colorify",
        "format",
        "reason",
        "is_taken",
        "msg",
        "current_arch",
        "is_call",
        "insn",
        "insn",
        "operands",
        "split",
        "i",
        "new_insn",
        "capstone_disassemble",
        "target_address",
        "nb_insn",
        "msg",
        "append",
        "format",
        "DOWN_ARROW",
        "i",
        "new_insn",
        "join",
        "msg",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "prefix",
        "only_if_gdb_running",
        "argv",
        "usage",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "argv",
        "__gef_default_main_arena__",
        "argv",
        "ok",
        "format",
        "__gef_default_main_arena__",
        "safe_parse_and_eval",
        "argv",
        "new_arena",
        "err",
        "argv",
        "startswith",
        "Address",
        "value",
        "to_unsigned_long",
        "new_arena",
        "new_arena",
        "new_arena",
        "valid",
        "err",
        "format",
        "format_address",
        "new_arena",
        "value",
        "argv",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "only_if_gdb_running",
        "argv",
        "GlibcArena",
        "__gef_default_main_arena__",
        "gdb",
        "error",
        "err",
        "gef_print",
        "format",
        "arena",
        "arena",
        "get_next",
        "arena",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "argv",
        "argv",
        "err",
        "usage",
        "get_main_arena",
        "to_unsigned_long",
        "gdb",
        "parse_and_eval",
        "argv",
        "GlibcChunk",
        "addr",
        "gef_print",
        "chunk",
        "psprint",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "add_setting",
        "only_if_gdb_running",
        "argv",
        "argv",
        "HeapBaseFunction",
        "heap_base",
        "heap_section",
        "err",
        "argv",
        "get_main_arena",
        "arena",
        "err",
        "get_setting",
        "GlibcChunk",
        "heap_section",
        "from_base",
        "current_chunk",
        "chunk_base_address",
        "arena",
        "top",
        "gef_print",
        "format",
        "current_chunk",
        "LEFT_ARROW",
        "Color",
        "greenify",
        "current_chunk",
        "chunk_base_address",
        "arena",
        "top",
        "current_chunk",
        "size",
        "current_chunk",
        "nb",
        "line",
        "hexdump",
        "read_memory",
        "current_chunk",
        "address",
        "nb",
        "nb",
        "current_chunk",
        "address",
        "gef_print",
        "line",
        "current_chunk",
        "get_next_chunk",
        "next_chunk",
        "Address",
        "value",
        "next_chunk",
        "address",
        "next_chunk_addr",
        "valid",
        "next_chunk",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "join",
        "_bin_types_",
        "prefix",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "argv",
        "argv",
        "bin_t",
        "GlibcHeapBinsCommand",
        "_bin_types_",
        "gdb",
        "execute",
        "format",
        "bin_t",
        "argv",
        "bin_t",
        "GlibcHeapBinsCommand",
        "_bin_types_",
        "usage",
        "gdb",
        "execute",
        "format",
        "bin_t",
        "staticmethod",
        "arena_addr",
        "index",
        "_type",
        "GlibcArena",
        "arena_addr",
        "arena",
        "bin",
        "index",
        "bk",
        "fw",
        "warn",
        "GlibcChunk",
        "bk",
        "from_base",
        "fwd",
        "fw",
        "head",
        "nb_chunk",
        "ok",
        "format",
        "_type",
        "index",
        "fw",
        "bk",
        "fw",
        "head",
        "GlibcChunk",
        "fw",
        "from_base",
        "m",
        "append",
        "format",
        "RIGHT_ARROW",
        "chunk",
        "chunk",
        "fwd",
        "nb_chunk",
        "m",
        "gef_print",
        "join",
        "m",
        "nb_chunk",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "argv",
        "get_libc_version",
        "info",
        "gdb",
        "selected_thread",
        "current_thread",
        "err",
        "sorted",
        "gdb",
        "selected_inferior",
        "threads",
        "key",
        "t",
        "t",
        "num",
        "argv",
        "argv",
        "t",
        "num",
        "t",
        "threads",
        "check_thread_ids",
        "argv",
        "current_thread",
        "num",
        "thread",
        "threads",
        "thread",
        "num",
        "tids",
        "thread",
        "find_tcache",
        "tcache_addr",
        "info",
        "format",
        "thread",
        "num",
        "gef_print",
        "titlify",
        "format",
        "thread",
        "num",
        "i",
        "TCACHE_MAX_BINS",
        "tcachebin",
        "tcache_addr",
        "i",
        "chunk",
        "msg",
        "append",
        "format",
        "LEFT_ARROW",
        "chunk",
        "chunk",
        "address",
        "chunks",
        "msg",
        "append",
        "format",
        "RIGHT_ARROW",
        "chunks",
        "add",
        "chunk",
        "address",
        "chunk",
        "get_fwd_ptr",
        "next_chunk",
        "GlibcChunk",
        "next_chunk",
        "gdb",
        "MemoryError",
        "msg",
        "append",
        "format",
        "LEFT_ARROW",
        "chunk",
        "address",
        "msg",
        "gef_print",
        "format",
        "i",
        "i",
        "current_arch",
        "ptrsize",
        "count",
        "end",
        "gef_print",
        "join",
        "msg",
        "tcache_empty",
        "gef_print",
        "current_thread",
        "staticmethod",
        "gdb",
        "parse_and_eval",
        "gdb",
        "error",
        "HeapBaseFunction",
        "heap_base",
        "heap_base",
        "err",
        "heap_base",
        "tcache_addr",
        "staticmethod",
        "tids",
        "t",
        "num",
        "t",
        "gdb",
        "selected_inferior",
        "threads",
        "tid",
        "tids",
        "tid",
        "ValueError",
        "err",
        "format",
        "tid",
        "tid",
        "existing_tids",
        "valid_tids",
        "add",
        "tid",
        "err",
        "format",
        "tid",
        "valid_tids",
        "staticmethod",
        "tcache_base",
        "i",
        "i",
        "GlibcHeapTcachebinsCommand",
        "TCACHE_MAX_BINS",
        "GlibcChunk",
        "tcache_base",
        "GlibcHeapTcachebinsCommand",
        "TCACHE_MAX_BINS",
        "GlibcHeapTcachebinsCommand",
        "TCACHE_MAX_BINS",
        "current_arch",
        "ptrsize",
        "tcache_chunk",
        "usable_size",
        "new_tcache_min_size",
        "ord",
        "read_memory",
        "tcache_base",
        "tcache_count_size",
        "i",
        "u16",
        "read_memory",
        "tcache_base",
        "tcache_count_size",
        "i",
        "dereference",
        "tcache_base",
        "tcache_count_size",
        "GlibcHeapTcachebinsCommand",
        "TCACHE_MAX_BINS",
        "i",
        "current_arch",
        "ptrsize",
        "GlibcChunk",
        "chunk",
        "chunk",
        "chunk",
        "count",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "argv",
        "sz",
        "sz",
        "SIZE_SZ",
        "sz",
        "current_arch",
        "ptrsize",
        "SIZE_SZ",
        "fastbin_index",
        "MAX_FAST_SIZE",
        "GlibcArena",
        "format",
        "argv",
        "len",
        "argv",
        "get_main_arena",
        "arena",
        "err",
        "gef_print",
        "titlify",
        "format",
        "arena",
        "i",
        "NFASTBINS",
        "gef_print",
        "format",
        "i",
        "i",
        "SIZE_SZ",
        "end",
        "arena",
        "fastbin",
        "i",
        "chunk",
        "gef_print",
        "end",
        "gef_print",
        "format",
        "LEFT_ARROW",
        "chunk",
        "end",
        "chunk",
        "address",
        "chunks",
        "gef_print",
        "format",
        "RIGHT_ARROW",
        "end",
        "fastbin_index",
        "chunk",
        "get_chunk_size",
        "i",
        "gef_print",
        "end",
        "chunks",
        "add",
        "chunk",
        "address",
        "chunk",
        "get_fwd_ptr",
        "next_chunk",
        "GlibcChunk",
        "next_chunk",
        "from_base",
        "gdb",
        "MemoryError",
        "gef_print",
        "format",
        "LEFT_ARROW",
        "chunk",
        "address",
        "end",
        "gef_print",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "argv",
        "get_main_arena",
        "err",
        "format",
        "argv",
        "len",
        "argv",
        "__gef_default_main_arena__",
        "gef_print",
        "titlify",
        "format",
        "arena_addr",
        "GlibcHeapBinsCommand",
        "pprint_bin",
        "arena_addr",
        "nb_chunk",
        "info",
        "format",
        "nb_chunk",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "argv",
        "get_main_arena",
        "err",
        "format",
        "argv",
        "len",
        "argv",
        "__gef_default_main_arena__",
        "gef_print",
        "titlify",
        "format",
        "arena_addr",
        "i",
        "GlibcHeapBinsCommand",
        "pprint_bin",
        "arena_addr",
        "i",
        "nb_chunk",
        "nb_chunk",
        "nb_chunk",
        "info",
        "format",
        "sum",
        "bins",
        "values",
        "len",
        "bins",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "argv",
        "get_main_arena",
        "err",
        "format",
        "argv",
        "len",
        "argv",
        "__gef_default_main_arena__",
        "gef_print",
        "titlify",
        "format",
        "arena_addr",
        "i",
        "GlibcHeapBinsCommand",
        "pprint_bin",
        "arena_addr",
        "i",
        "nb_chunk",
        "nb_chunk",
        "nb_chunk",
        "info",
        "format",
        "sum",
        "bins",
        "values",
        "len",
        "bins",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "argv",
        "len",
        "argv",
        "usage",
        "argv",
        "open",
        "f",
        "line",
        "f",
        "line",
        "strip",
        "split",
        "symaddr",
        "symname",
        "sym",
        "ok",
        "format",
        "sym",
        "symaddr",
        "symtype",
        "sym",
        "symname",
        "warn",
        "format",
        "sym",
        "symaddr",
        "symtype",
        "symname",
        "ValueError",
        "found",
        "err",
        "format",
        "sym",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "only_if_gdb_running",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "get_gef_setting",
        "get_gef_setting",
        "get_gef_setting",
        "current_arch",
        "all_registers",
        "kwargs",
        "args",
        "registers",
        "args",
        "registers",
        "args",
        "registers",
        "reg",
        "reg",
        "current_arch",
        "all_registers",
        "reg",
        "required_regs",
        "valid_regs",
        "valid_regs",
        "current_arch",
        "ptrsize",
        "endian_str",
        "printable",
        "max",
        "len",
        "current_arch",
        "all_registers",
        "regname",
        "regs",
        "gdb",
        "parse_and_eval",
        "regname",
        "reg",
        "code",
        "gdb",
        "TYPE_CODE_VOID",
        "regname",
        "ljust",
        "widest",
        "reg",
        "format",
        "Color",
        "colorify",
        "padreg",
        "unchanged_color",
        "line",
        "Color",
        "colorify",
        "gef_print",
        "line",
        "align_address",
        "reg",
        "ContextCommand",
        "old_registers",
        "get",
        "regname",
        "value",
        "old_value",
        "unchanged_color",
        "changed_color",
        "regname",
        "current_arch",
        "special_registers",
        "special_line",
        "format",
        "Color",
        "colorify",
        "regname",
        "color",
        "special_line",
        "format",
        "get_register",
        "regname",
        "format",
        "Color",
        "colorify",
        "padreg",
        "color",
        "regname",
        "current_arch",
        "flag_register",
        "line",
        "current_arch",
        "flag_register_to_human",
        "gef_print",
        "line",
        "lookup_address",
        "align_address",
        "value",
        "addr",
        "valid",
        "line",
        "addr",
        "line",
        "format_address_spaces",
        "value",
        "dereference_from",
        "value",
        "len",
        "addrs",
        "format",
        "RIGHT_ARROW",
        "line",
        "sep",
        "line",
        "sep",
        "join",
        "addrs",
        "format",
        "endian",
        "memsize",
        "addrs",
        "gef_pystring",
        "pack",
        "fmt",
        "last_addr",
        "all",
        "_",
        "charset",
        "_",
        "val",
        "line",
        "format",
        "Color",
        "colorify",
        "val",
        "string_color",
        "ValueError",
        "gef_print",
        "line",
        "special_line",
        "gef_print",
        "special_line",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "prefix",
        "argv",
        "err",
        "usage",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "api_base",
        "argv",
        "argv",
        "err",
        "usage",
        "search_shellcode",
        "argv",
        "search_options",
        "join",
        "search_options",
        "http_get",
        "search_url",
        "args",
        "res",
        "err",
        "gef_pystring",
        "res",
        "ret",
        "split",
        "line",
        "split",
        "line",
        "lines",
        "refs",
        "info",
        "info",
        "join",
        "refs",
        "gef_print",
        "join",
        "sid",
        "arch",
        "cmd",
        "ValueError",
        "info",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "api_base",
        "argv",
        "len",
        "argv",
        "err",
        "usage",
        "argv",
        "isdigit",
        "err",
        "usage",
        "get_shellcode",
        "argv",
        "sid",
        "info",
        "format",
        "sid",
        "http_get",
        "get_url",
        "format",
        "sid",
        "res",
        "err",
        "format",
        "sid",
        "ok",
        "tempfile",
        "mkstemp",
        "suffix",
        "prefix",
        "text",
        "dir",
        "res",
        "splitlines",
        "join",
        "shellcode",
        "replace",
        "os",
        "write",
        "fd",
        "shellcode",
        "os",
        "close",
        "fd",
        "ok",
        "format",
        "fname",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_NONE",
        "__import__",
        "ImportError",
        "ImportWarning",
        "msg",
        "only_if_gdb_running",
        "argv",
        "sys",
        "modules",
        "argv",
        "get_filepath",
        "next",
        "x",
        "x",
        "path",
        "path",
        "get_process_maps",
        "argv",
        "append",
        "argv",
        "append",
        "path",
        "argv",
        "append",
        "argv",
        "append",
        "format",
        "sect",
        "page_start",
        "readline",
        "readline",
        "get_completer_delims",
        "readline",
        "get_completer",
        "ropper",
        "start",
        "argv",
        "readline",
        "set_completer",
        "old_completer",
        "readline",
        "set_completer_delims",
        "old_completer_delims",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "valid_arch_modes",
        "keys",
        "_",
        "sublist",
        "valid_arch_modes",
        "values",
        "_",
        "sublist",
        "add_setting",
        "add_setting",
        "__import__",
        "ImportError",
        "ImportWarning",
        "msg",
        "usage",
        "gef_print",
        "arch",
        "valid_arch_modes",
        "gef_print",
        "format",
        "arch",
        "gef_print",
        "format",
        "join",
        "valid_arch_modes",
        "arch",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "get_setting",
        "get_setting",
        "kwargs",
        "args",
        "instructions",
        "err",
        "is_alive",
        "current_arch",
        "arch",
        "current_arch",
        "mode",
        "is_big_endian",
        "args",
        "arch",
        "args",
        "arch",
        "args",
        "mode",
        "args",
        "mode",
        "args",
        "big_endian",
        "arch_s",
        "upper",
        "valid_archs",
        "mode_s",
        "upper",
        "valid_modes",
        "AttributeError",
        "get_keystone_arch",
        "arch",
        "arch_s",
        "upper",
        "mode",
        "mode_s",
        "upper",
        "endian",
        "endian_s",
        "upper",
        "x",
        "strip",
        "x",
        "join",
        "args",
        "instructions",
        "split",
        "x",
        "info",
        "format",
        "len",
        "insns",
        "arch_s",
        "mode_s",
        "args",
        "as_shellcode",
        "gef_print",
        "insn",
        "insns",
        "keystone_assemble",
        "insn",
        "arch",
        "mode",
        "raw",
        "res",
        "gef_print",
        "args",
        "overwrite_location",
        "raw",
        "res",
        "binascii",
        "hexlify",
        "res",
        "join",
        "s",
        "i",
        "i",
        "i",
        "len",
        "s",
        "res",
        "decode",
        "args",
        "as_shellcode",
        "format",
        "res",
        "gef_print",
        "format",
        "res",
        "insn",
        "args",
        "overwrite_location",
        "len",
        "raw",
        "info",
        "format",
        "l",
        "format_address",
        "args",
        "overwrite_location",
        "write_memory",
        "args",
        "overwrite_location",
        "raw",
        "l",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "which",
        "add_setting",
        "format",
        "ps",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "kwargs",
        "args",
        "attach",
        "args",
        "smart_scan",
        "args",
        "pattern",
        "re",
        "compile",
        "args",
        "re",
        "compile",
        "pattern",
        "process",
        "get_processes",
        "process",
        "process",
        "re",
        "search",
        "pattern",
        "command",
        "smart_scan",
        "command",
        "startswith",
        "command",
        "endswith",
        "command",
        "startswith",
        "command",
        "startswith",
        "command",
        "startswith",
        "args",
        "do_attach",
        "ok",
        "format",
        "process",
        "pid",
        "gdb",
        "execute",
        "format",
        "pid",
        "process",
        "i",
        "i",
        "gef_print",
        "join",
        "line",
        "gef_execute_external",
        "get_setting",
        "split",
        "x",
        "lower",
        "replace",
        "x",
        "output",
        "split",
        "line",
        "output",
        "line",
        "split",
        "i",
        "name",
        "names",
        "i",
        "len",
        "names",
        "join",
        "fields",
        "i",
        "fields",
        "i",
        "t",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "args",
        "kwargs",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "kwargs",
        "Elf",
        "ELF_32_BITS",
        "Elf",
        "ELF_64_BITS",
        "Elf",
        "LITTLE_ENDIAN",
        "Elf",
        "BIG_ENDIAN",
        "Elf",
        "OSABI_SYSTEMV",
        "Elf",
        "OSABI_HPUX",
        "Elf",
        "OSABI_NETBSD",
        "Elf",
        "OSABI_LINUX",
        "Elf",
        "OSABI_SOLARIS",
        "Elf",
        "OSABI_AIX",
        "Elf",
        "OSABI_IRIX",
        "Elf",
        "OSABI_FREEBSD",
        "Elf",
        "OSABI_OPENBSD",
        "Elf",
        "ET_RELOC",
        "Elf",
        "ET_EXEC",
        "Elf",
        "ET_DYN",
        "Elf",
        "ET_CORE",
        "Elf",
        "X86_64",
        "Elf",
        "X86_32",
        "Elf",
        "ARM",
        "Elf",
        "MIPS",
        "Elf",
        "POWERPC",
        "Elf",
        "POWERPC64",
        "Elf",
        "SPARC",
        "Elf",
        "SPARC64",
        "Elf",
        "AARCH64",
        "Elf",
        "RISCV",
        "Elf",
        "IA64",
        "args",
        "filename",
        "get_filepath",
        "filename",
        "get_elf_headers",
        "filename",
        "elf",
        "format",
        "hexdump",
        "pack",
        "elf",
        "e_magic",
        "show_raw",
        "format",
        "elf",
        "e_class",
        "classes",
        "elf",
        "e_class",
        "format",
        "elf",
        "e_endianness",
        "endianness",
        "elf",
        "e_endianness",
        "format",
        "elf",
        "e_eiversion",
        "format",
        "elf",
        "e_osabi",
        "osabi",
        "elf",
        "e_osabi",
        "format",
        "elf",
        "e_abiversion",
        "format",
        "elf",
        "e_type",
        "types",
        "elf",
        "e_type",
        "format",
        "elf",
        "e_machine",
        "machines",
        "elf",
        "e_machine",
        "format",
        "format_address",
        "elf",
        "e_phoff",
        "format",
        "format_address",
        "elf",
        "e_shoff",
        "format",
        "format_address",
        "elf",
        "e_phoff",
        "format",
        "elf",
        "e_version",
        "format",
        "elf",
        "e_ehsize",
        "format",
        "format_address",
        "elf",
        "e_entry",
        "title",
        "content",
        "data",
        "gef_print",
        "format",
        "Color",
        "boldify",
        "format",
        "title",
        "content",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "args",
        "kwargs",
        "add_setting",
        "argv",
        "get_filepath",
        "fpath",
        "warn",
        "os",
        "access",
        "fpath",
        "os",
        "X_OK",
        "warn",
        "format",
        "fpath",
        "is_alive",
        "__gef_qemu_mode__",
        "warn",
        "get_setting",
        "split",
        "sym",
        "entrypoints",
        "gdb",
        "parse_and_eval",
        "sym",
        "info",
        "format",
        "value",
        "EntryBreakBreakpoint",
        "sym",
        "gdb",
        "execute",
        "format",
        "join",
        "argv",
        "gdb",
        "error",
        "gdb_error",
        "gdb_error",
        "gdb",
        "execute",
        "bp",
        "bp",
        "get_entry_point",
        "entry",
        "is_pie",
        "fpath",
        "set_init_tbreak_pie",
        "entry",
        "argv",
        "gdb",
        "execute",
        "set_init_tbreak",
        "entry",
        "gdb",
        "execute",
        "format",
        "join",
        "argv",
        "addr",
        "info",
        "format",
        "addr",
        "EntryBreakBreakpoint",
        "format",
        "addr",
        "bp",
        "addr",
        "argv",
        "warn",
        "gdb",
        "execute",
        "hide_context",
        "gdb",
        "execute",
        "format",
        "join",
        "argv",
        "unhide_context",
        "gdb",
        "execute",
        "get_process_maps",
        "x",
        "page_start",
        "x",
        "vmmap",
        "x",
        "path",
        "get_filepath",
        "set_init_tbreak",
        "base_address",
        "addr",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "args",
        "kwargs",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "kwargs",
        "args",
        "name",
        "err",
        "usage",
        "args",
        "location",
        "format",
        "current_arch",
        "pc",
        "NamedBreakpoint",
        "location",
        "args",
        "name",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "sys",
        "modules",
        "keys",
        "add_setting",
        "show_legend",
        "context_regs",
        "context_stack",
        "context_code",
        "context_args",
        "context_memory",
        "context_source",
        "context_trace",
        "context_threads",
        "context_additional_information",
        "gef_on_continue_hook",
        "update_registers",
        "gef_on_continue_hook",
        "empty_extra_messages",
        "get_gef_setting",
        "get_gef_setting",
        "get_gef_setting",
        "get_gef_setting",
        "get_gef_setting",
        "get_gef_setting",
        "gef_print",
        "format",
        "Color",
        "colorify",
        "changed_register_color",
        "Color",
        "colorify",
        "code_addr_color",
        "Color",
        "colorify",
        "heap_addr_color",
        "Color",
        "colorify",
        "stack_addr_color",
        "Color",
        "colorify",
        "str_color",
        "only_if_gdb_running",
        "argv",
        "get_setting",
        "context_hidden",
        "all",
        "_",
        "layout_mapping",
        "_",
        "argv",
        "usage",
        "len",
        "argv",
        "argv",
        "get_setting",
        "strip",
        "split",
        "current_layout",
        "tty_rows",
        "tty_columns",
        "get_terminal_size",
        "get_setting",
        "redirect",
        "os",
        "access",
        "redirect",
        "os",
        "W_OK",
        "enable_redirect_output",
        "to_file",
        "redirect",
        "section",
        "current_layout",
        "section",
        "layout_mapping",
        "section",
        "gdb",
        "MemoryError",
        "e",
        "err",
        "e",
        "context_title",
        "get_setting",
        "len",
        "argv",
        "clear_screen",
        "redirect",
        "redirect",
        "os",
        "access",
        "redirect",
        "os",
        "W_OK",
        "disable_redirect_output",
        "m",
        "get_gef_setting",
        "get_gef_setting",
        "m",
        "gef_print",
        "Color",
        "colorify",
        "HORIZONTAL_LINE",
        "tty_columns",
        "line_color",
        "len",
        "m",
        "title",
        "Color",
        "colorify",
        "format",
        "width",
        "max",
        "tty_columns",
        "trail_len",
        "padd",
        "HORIZONTAL_LINE",
        "line_color",
        "title",
        "Color",
        "colorify",
        "m",
        "msg_color",
        "title",
        "Color",
        "colorify",
        "format",
        "padd",
        "HORIZONTAL_LINE",
        "line_color",
        "gef_print",
        "title",
        "context_title",
        "get_setting",
        "split",
        "get_setting",
        "current_arch",
        "all_registers",
        "join",
        "regs",
        "ignored_registers",
        "gdb",
        "execute",
        "format",
        "printable_registers",
        "max",
        "len",
        "current_arch",
        "all_registers",
        "l",
        "l",
        "current_arch",
        "ptrsize",
        "get_terminal_size",
        "l",
        "get_gef_setting",
        "get_gef_setting",
        "reg",
        "current_arch",
        "all_registers",
        "reg",
        "ignored_registers",
        "gdb",
        "parse_and_eval",
        "reg",
        "r",
        "code",
        "gdb",
        "TYPE_CODE_VOID",
        "r",
        "code",
        "gdb",
        "TYPE_CODE_FLAGS",
        "r",
        "gdb",
        "MemoryError",
        "gdb",
        "error",
        "get_register",
        "reg",
        "old_registers",
        "get",
        "reg",
        "reg",
        "ljust",
        "widest",
        "align_address",
        "new_value",
        "align_address",
        "old_value",
        "value",
        "old_value",
        "line",
        "format",
        "Color",
        "colorify",
        "padreg",
        "regname_color",
        "line",
        "format",
        "Color",
        "colorify",
        "padreg",
        "changed_color",
        "new_value_type_flag",
        "line",
        "format",
        "format_address_spaces",
        "value",
        "lookup_address",
        "align_address",
        "value",
        "addr",
        "valid",
        "line",
        "format",
        "addr",
        "line",
        "format",
        "format_address_spaces",
        "value",
        "i",
        "nb",
        "gef_print",
        "line",
        "i",
        "line",
        "gef_print",
        "line",
        "gef_print",
        "format",
        "current_arch",
        "flag_register_to_human",
        "context_title",
        "get_setting",
        "get_setting",
        "current_arch",
        "sp",
        "show_raw",
        "read_memory",
        "sp",
        "nb_lines",
        "gef_print",
        "hexdump",
        "mem",
        "sp",
        "gdb",
        "execute",
        "format",
        "sp",
        "nb_lines",
        "gdb",
        "MemoryError",
        "err",
        "address",
        "bp_locations",
        "hex",
        "address",
        "b",
        "b",
        "bp_locations",
        "get_setting",
        "get_setting",
        "has_setting",
        "get_setting",
        "has_setting",
        "get_setting",
        "get_gef_setting",
        "get_gef_setting",
        "current_arch",
        "pc",
        "gdb",
        "breakpoints",
        "b",
        "location",
        "b",
        "breakpoints",
        "b",
        "location",
        "b",
        "location",
        "startswith",
        "gdb",
        "selected_frame",
        "format",
        "current_arch",
        "arch",
        "lower",
        "current_arch",
        "mode",
        "context_title",
        "format",
        "arch_name",
        "capstone_disassemble",
        "use_capstone",
        "gef_disassemble",
        "insn",
        "instruction_iterator",
        "pc",
        "nb_insn",
        "nb_prev",
        "nb_insn_prev",
        "Color",
        "redify",
        "BP_GLYPH",
        "addr_has_breakpoint",
        "insn",
        "address",
        "bp_locations",
        "show_opcodes_size",
        "insn",
        "format",
        "show_opcodes_size",
        "insn_fmt",
        "format",
        "insn",
        "insn",
        "address",
        "pc",
        "line",
        "format",
        "bp_prefix",
        "Color",
        "colorify",
        "text",
        "past_insns_color",
        "insn",
        "address",
        "pc",
        "line",
        "format",
        "bp_prefix",
        "Color",
        "colorify",
        "format",
        "RIGHT_ARROW",
        "text",
        "cur_insn_color",
        "current_arch",
        "is_conditional_branch",
        "insn",
        "current_arch",
        "is_branch_taken",
        "insn",
        "is_taken",
        "insn",
        "operands",
        "split",
        "format",
        "reason",
        "reason",
        "line",
        "Color",
        "colorify",
        "format",
        "reason",
        "format",
        "reason",
        "reason",
        "line",
        "Color",
        "colorify",
        "format",
        "reason",
        "current_arch",
        "is_call",
        "insn",
        "get_setting",
        "insn",
        "operands",
        "split",
        "current_arch",
        "is_ret",
        "insn",
        "get_setting",
        "current_arch",
        "get_ra",
        "insn",
        "frame",
        "line",
        "format",
        "bp_prefix",
        "text",
        "gef_print",
        "join",
        "line",
        "target",
        "target",
        "ValueError",
        "i",
        "tinsn",
        "instruction_iterator",
        "target",
        "nb_insn",
        "format",
        "DOWN_ARROW",
        "i",
        "tinsn",
        "gef_print",
        "text",
        "gdb",
        "MemoryError",
        "err",
        "gef_current_instruction",
        "current_arch",
        "pc",
        "current_arch",
        "is_call",
        "insn",
        "insn",
        "operands",
        "startswith",
        "size2type",
        "current_arch",
        "ptrsize",
        "insn",
        "operands",
        "split",
        "insn",
        "operands",
        "current_arch",
        "all_registers",
        "format",
        "get_register",
        "insn",
        "operands",
        "join",
        "insn",
        "operands",
        "ops",
        "ops",
        "re",
        "sub",
        "ops",
        "re",
        "sub",
        "ops",
        "gdb",
        "lookup_global_symbol",
        "target",
        "sym",
        "print_guessed_arguments",
        "target",
        "sym",
        "code",
        "gdb",
        "TYPE_CODE_FUNC",
        "err",
        "format",
        "target",
        "sym",
        "code",
        "print_arguments_from_symbol",
        "target",
        "sym",
        "function_name",
        "symbol",
        "i",
        "f",
        "symbol",
        "fields",
        "current_arch",
        "get_ith_parameter",
        "i",
        "in_func",
        "RIGHT_ARROW",
        "join",
        "dereference_from",
        "_value",
        "f",
        "name",
        "format",
        "i",
        "f",
        "name",
        "size2type",
        "f",
        "args",
        "append",
        "format",
        "_type",
        "_name",
        "_value",
        "context_title",
        "args",
        "gef_print",
        "format",
        "function_name",
        "gef_print",
        "format",
        "function_name",
        "gef_print",
        "join",
        "args",
        "gef_print",
        "function_name",
        "current_arch",
        "pc",
        "gdb",
        "block_for_pc",
        "pc",
        "block",
        "start",
        "block",
        "gdb_get_nth_previous_instruction_address",
        "pc",
        "RuntimeError",
        "gdb_get_nth_previous_instruction_address",
        "pc",
        "block_start",
        "current_arch",
        "pc",
        "__get_current_block_start_address",
        "block_start",
        "has_setting",
        "get_setting",
        "capstone_disassemble",
        "use_capstone",
        "gef_disassemble",
        "current_arch",
        "function_parameters",
        "get_gef_setting",
        "insn",
        "instruction_iterator",
        "block_start",
        "pc",
        "block_start",
        "insn",
        "operands",
        "is_x86_32",
        "insn",
        "mnemonic",
        "parameter_set",
        "add",
        "insn",
        "operands",
        "insn",
        "operands",
        "op",
        "function_parameters",
        "parameter_set",
        "add",
        "op",
        "is_x86_64",
        "exreg",
        "extended_registers",
        "op",
        "extended_registers",
        "exreg",
        "parameter_set",
        "add",
        "exreg",
        "format",
        "current_arch",
        "arch",
        "lower",
        "current_arch",
        "mode",
        "function_name",
        "endswith",
        "function_name",
        "split",
        "len",
        "libc_args_definitions",
        "_arch_mode",
        "_function_name",
        "KeyError",
        "nb_argument",
        "is_x86_32",
        "len",
        "parameter_set",
        "max",
        "function_parameters",
        "index",
        "p",
        "p",
        "parameter_set",
        "i",
        "nb_argument",
        "current_arch",
        "get_ith_parameter",
        "i",
        "in_func",
        "RIGHT_ARROW",
        "join",
        "dereference_from",
        "_values",
        "args",
        "append",
        "format",
        "Color",
        "colorify",
        "_key",
        "arg_key_color",
        "_values",
        "libc_args_definitions",
        "_arch_mode",
        "_function_name",
        "_key",
        "KeyError",
        "args",
        "append",
        "format",
        "Color",
        "colorify",
        "_key",
        "arg_key_color",
        "_values",
        "context_title",
        "gef_print",
        "format",
        "function_name",
        "args",
        "gef_print",
        "join",
        "args",
        "gef_print",
        "file_name",
        "line_number",
        "bp_locations",
        "format",
        "file_name",
        "line_number",
        "filename_line",
        "loc",
        "loc",
        "bp_locations",
        "current_arch",
        "pc",
        "gdb",
        "find_pc_line",
        "pc",
        "symtabline",
        "symtab",
        "symtabline",
        "line",
        "symtab",
        "is_valid",
        "symtab",
        "fullname",
        "open",
        "fpath",
        "f",
        "l",
        "rstrip",
        "l",
        "f",
        "readlines",
        "os",
        "path",
        "basename",
        "symtab",
        "filename",
        "gdb",
        "breakpoints",
        "b",
        "location",
        "b",
        "breakpoints",
        "file_base_name",
        "b",
        "location",
        "get_gef_setting",
        "get_setting",
        "symtab",
        "filename",
        "len",
        "fn",
        "format",
        "fn",
        "os",
        "path",
        "splitext",
        "fn",
        "format",
        "fn",
        "line_num",
        "get_gef_setting",
        "context_title",
        "title",
        "get_setting",
        "i",
        "line_num",
        "nb_line",
        "line_num",
        "nb_line",
        "i",
        "Color",
        "redify",
        "BP_GLYPH",
        "line_has_breakpoint",
        "file_base_name",
        "i",
        "bp_locations",
        "i",
        "line_num",
        "gef_print",
        "format",
        "bp_prefix",
        "Color",
        "colorify",
        "format",
        "i",
        "lines",
        "i",
        "past_lines_color",
        "i",
        "line_num",
        "format",
        "bp_prefix",
        "RIGHT_ARROW",
        "i",
        "len",
        "lines",
        "i",
        "len",
        "lines",
        "i",
        "lstrip",
        "show_extra_info",
        "get_pc_context_info",
        "pc",
        "lines",
        "i",
        "extra_info",
        "gef_print",
        "format",
        "len",
        "prefix",
        "leading",
        "extra_info",
        "gef_print",
        "Color",
        "colorify",
        "format",
        "prefix",
        "lines",
        "i",
        "cur_line_color",
        "i",
        "line_num",
        "gef_print",
        "format",
        "bp_prefix",
        "i",
        "lines",
        "i",
        "IndexError",
        "pc",
        "line",
        "gdb",
        "block_for_pc",
        "pc",
        "current_block",
        "current_block",
        "is_valid",
        "collections",
        "OrderedDict",
        "current_block",
        "current_block",
        "is_static",
        "sym",
        "current_block",
        "sym",
        "name",
        "sym",
        "is_function",
        "re",
        "search",
        "format",
        "symbol",
        "line",
        "gdb",
        "parse_and_eval",
        "symbol",
        "val",
        "code",
        "gdb",
        "TYPE_CODE_PTR",
        "gdb",
        "TYPE_CODE_ARRAY",
        "val",
        "address",
        "dereference_from",
        "addr",
        "len",
        "addrs",
        "addrs",
        "addrs",
        "format",
        "RIGHT_ARROW",
        "f",
        "join",
        "addrs",
        "val",
        "code",
        "gdb",
        "TYPE_CODE_INT",
        "hex",
        "val",
        "symbol",
        "m",
        "val",
        "current_block",
        "superblock",
        "m",
        "join",
        "format",
        "Color",
        "yellowify",
        "a",
        "b",
        "a",
        "b",
        "m",
        "items",
        "context_title",
        "get_setting",
        "nb_backtrace",
        "hasattr",
        "gdb",
        "gdb",
        "execute",
        "format",
        "nb_backtrace",
        "gdb",
        "selected_frame",
        "gdb",
        "newest_frame",
        "current_frame",
        "current_frame",
        "orig_frame",
        "current_frame",
        "older",
        "frames",
        "append",
        "current_frame",
        "get_setting",
        "max",
        "len",
        "frames",
        "nb_backtrace_before",
        "frames",
        "level",
        "current_frame",
        "current_frame",
        "select",
        "current_frame",
        "is_valid",
        "current_frame",
        "pc",
        "current_frame",
        "name",
        "items",
        "append",
        "format",
        "pc",
        "name",
        "gdb",
        "FrameDecorator",
        "FrameDecorator",
        "current_frame",
        "frame_args",
        "format",
        "Color",
        "greenify",
        "name",
        "join",
        "format",
        "Color",
        "yellowify",
        "x",
        "sym",
        "x",
        "sym",
        "value",
        "current_frame",
        "x",
        "frame_args",
        "items",
        "append",
        "m",
        "next",
        "gef_disassemble",
        "pc",
        "gdb",
        "MemoryError",
        "items",
        "append",
        "Color",
        "redify",
        "format",
        "insn",
        "mnemonic",
        "join",
        "insn",
        "operands",
        "gef_print",
        "format",
        "Color",
        "colorify",
        "format",
        "level",
        "current_frame",
        "orig_frame",
        "RIGHT_ARROW",
        "join",
        "items",
        "current_frame",
        "older",
        "level",
        "nb_backtrace",
        "nb_backtrace",
        "orig_frame",
        "select",
        "gdb",
        "execute",
        "to_string",
        "splitlines",
        "res",
        "line",
        "res",
        "line",
        "strip",
        "line",
        "startswith",
        "line",
        "replace",
        "split",
        "line",
        "line",
        "line",
        "startswith",
        "line",
        "context_title",
        "gdb",
        "selected_inferior",
        "threads",
        "get_setting",
        "idx",
        "threads",
        "idx",
        "idx",
        "threads",
        "err",
        "gdb",
        "selected_thread",
        "gdb",
        "selected_frame",
        "i",
        "thread",
        "threads",
        "format",
        "Color",
        "colorify",
        "format",
        "i",
        "thread",
        "selected_thread",
        "thread",
        "num",
        "thread",
        "name",
        "line",
        "format",
        "thread",
        "name",
        "thread",
        "is_running",
        "line",
        "Color",
        "colorify",
        "thread",
        "is_stopped",
        "line",
        "Color",
        "colorify",
        "thread",
        "gdb",
        "selected_frame",
        "line",
        "format",
        "Color",
        "colorify",
        "format",
        "frame",
        "pc",
        "Color",
        "colorify",
        "frame",
        "name",
        "line",
        "format",
        "Color",
        "colorify",
        "reason",
        "thread",
        "is_exited",
        "line",
        "Color",
        "colorify",
        "gef_print",
        "line",
        "i",
        "selected_thread",
        "selected_frame",
        "select",
        "__context_messages__",
        "context_title",
        "level",
        "text",
        "__context_messages__",
        "level",
        "err",
        "text",
        "level",
        "warn",
        "text",
        "level",
        "ok",
        "text",
        "info",
        "text",
        "__watches__",
        "address",
        "opt",
        "sorted",
        "__watches__",
        "items",
        "opt",
        "context_title",
        "format",
        "address",
        "fmt",
        "gdb",
        "execute",
        "format",
        "address",
        "address",
        "size",
        "sz",
        "gdb",
        "execute",
        "format",
        "address",
        "address",
        "size",
        "sz",
        "fmt",
        "fmt",
        "classmethod",
        "cls",
        "reg",
        "current_arch",
        "all_registers",
        "cls",
        "old_registers",
        "get_register",
        "reg",
        "cls",
        "old_registers",
        "__context_messages__",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "prefix",
        "only_if_gdb_running",
        "argv",
        "usage",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "argv",
        "__watches__",
        "len",
        "argv",
        "usage",
        "to_unsigned_long",
        "gdb",
        "parse_and_eval",
        "argv",
        "to_unsigned_long",
        "gdb",
        "parse_and_eval",
        "argv",
        "len",
        "argv",
        "len",
        "argv",
        "argv",
        "lower",
        "group",
        "warn",
        "format",
        "group",
        "usage",
        "current_arch",
        "ptrsize",
        "current_arch",
        "ptrsize",
        "size",
        "group",
        "ok",
        "format",
        "address",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "argv",
        "__watches__",
        "argv",
        "usage",
        "to_unsigned_long",
        "gdb",
        "parse_and_eval",
        "argv",
        "__watches__",
        "pop",
        "address",
        "res",
        "warn",
        "format",
        "address",
        "ok",
        "format",
        "address",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "only_if_gdb_running",
        "argv",
        "__watches__",
        "__watches__",
        "clear",
        "ok",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "only_if_gdb_running",
        "argv",
        "__watches__",
        "__watches__",
        "info",
        "info",
        "address",
        "opt",
        "sorted",
        "__watches__",
        "items",
        "gef_print",
        "format",
        "address",
        "opt",
        "opt",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "prefix",
        "add_setting",
        "only_if_gdb_running",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "format",
        "format",
        "valid_formats",
        "err",
        "kwargs",
        "args",
        "address",
        "__last_target",
        "args",
        "size",
        "format",
        "to_unsigned_long",
        "gdb",
        "parse_and_eval",
        "target",
        "align_address",
        "start_addr",
        "format",
        "read_from",
        "repeat_count",
        "read_len",
        "read_memory",
        "read_from",
        "read_len",
        "hexdump",
        "mem",
        "read_from",
        "splitlines",
        "_hexdump",
        "read_from",
        "read_len",
        "format",
        "repeat_count",
        "read_len",
        "args",
        "reverse",
        "lines",
        "reverse",
        "target",
        "gef_print",
        "join",
        "lines",
        "start_addr",
        "length",
        "arrange_as",
        "offset",
        "endian_str",
        "get_gef_setting",
        "get_gef_setting",
        "formats",
        "arrange_as",
        "format",
        "v",
        "VERTICAL_LINE",
        "prec",
        "l",
        "endianness",
        "r",
        "i",
        "length",
        "start_addr",
        "i",
        "offset",
        "l",
        "gdb_get_location_from_symbol",
        "cur_addr",
        "format",
        "sym",
        "sym",
        "read_memory",
        "cur_addr",
        "l",
        "unpack",
        "fmt_pack",
        "mem",
        "show_ascii",
        "join",
        "chr",
        "b",
        "b",
        "b",
        "mem",
        "lines",
        "append",
        "fmt_str",
        "format",
        "Color",
        "colorify",
        "format_address",
        "cur_addr",
        "base_address_color",
        "offset",
        "i",
        "offset",
        "l",
        "sym",
        "sym",
        "val",
        "val",
        "text",
        "text",
        "i",
        "lines",
        "register_command",
        "HexdumpCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "register_command",
        "HexdumpCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "register_command",
        "HexdumpCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "register_command",
        "HexdumpCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "prefix",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "kwargs",
        "format",
        "format",
        "SUPPORTED_SIZES",
        "usage",
        "args",
        "location",
        "args",
        "values",
        "usage",
        "align_address",
        "gdb",
        "parse_and_eval",
        "args",
        "location",
        "SUPPORTED_SIZES",
        "format",
        "endian_str",
        "value",
        "args",
        "values",
        "parse_address",
        "value",
        "size",
        "pack",
        "d",
        "fcode",
        "value",
        "write_memory",
        "addr",
        "vstr",
        "length",
        "size",
        "addr",
        "size",
        "register_command",
        "PatchCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "register_command",
        "PatchCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "register_command",
        "PatchCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "register_command",
        "PatchCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "only_if_gdb_running",
        "argv",
        "len",
        "argv",
        "argc",
        "usage",
        "argv",
        "align_address",
        "gdb",
        "parse_and_eval",
        "location",
        "codecs",
        "escape_decode",
        "s",
        "binascii",
        "gef_print",
        "format",
        "s",
        "write_memory",
        "addr",
        "s",
        "len",
        "s",
        "lru_cache",
        "addr",
        "is_alive",
        "format_address",
        "addr",
        "get_gef_setting",
        "get_gef_setting",
        "get_gef_setting",
        "lookup_address",
        "align_address",
        "addr",
        "format_address",
        "addr",
        "value",
        "addr",
        "section",
        "max_recursion",
        "addr",
        "value",
        "seen_addrs",
        "msg",
        "append",
        "seen_addrs",
        "add",
        "addr",
        "value",
        "max_recursion",
        "addr",
        "dereference",
        "deref",
        "msg",
        "append",
        "addr",
        "lookup_address",
        "deref",
        "new_addr",
        "valid",
        "new_addr",
        "msg",
        "append",
        "addr",
        "addr",
        "section",
        "addr",
        "section",
        "is_executable",
        "addr",
        "is_in_text_segment",
        "is_ascii_string",
        "addr",
        "value",
        "gef_current_instruction",
        "addr",
        "value",
        "format",
        "insn",
        "location",
        "insn",
        "mnemonic",
        "join",
        "insn",
        "operands",
        "msg",
        "append",
        "Color",
        "colorify",
        "insn_str",
        "code_color",
        "addr",
        "section",
        "permission",
        "value",
        "Permission",
        "READ",
        "is_ascii_string",
        "addr",
        "value",
        "read_cstring_from_memory",
        "addr",
        "value",
        "len",
        "s",
        "get_memory_alignment",
        "format",
        "format_address",
        "deref",
        "Color",
        "colorify",
        "s",
        "string_color",
        "len",
        "s",
        "Color",
        "colorify",
        "format",
        "s",
        "string_color",
        "Color",
        "colorify",
        "format",
        "s",
        "string_color",
        "msg",
        "append",
        "txt",
        "format",
        "deref",
        "ma",
        "current_arch",
        "ptrsize",
        "msg",
        "append",
        "val",
        "msg",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "add_setting",
        "staticmethod",
        "addr",
        "off",
        "get_gef_setting",
        "get_gef_setting",
        "format",
        "RIGHT_ARROW",
        "current_arch",
        "ptrsize",
        "off",
        "memalign",
        "align_address",
        "addr",
        "offset",
        "dereference_from",
        "current_address",
        "format_address",
        "addrs",
        "l",
        "format",
        "Color",
        "colorify",
        "addr_l",
        "base_address_color",
        "VERTICAL_LINE",
        "offset",
        "sep",
        "join",
        "addrs",
        "ma",
        "memalign",
        "regname",
        "current_arch",
        "all_registers",
        "get_register",
        "regname",
        "current_address",
        "regvalue",
        "register_hints",
        "append",
        "regname",
        "register_hints",
        "format",
        "LEFT_ARROW",
        "join",
        "register_hints",
        "l",
        "Color",
        "colorify",
        "m",
        "registers_color",
        "offset",
        "memalign",
        "l",
        "only_if_gdb_running",
        "argv",
        "arg",
        "argv",
        "arg",
        "isdigit",
        "arg",
        "arg",
        "arg",
        "isdigit",
        "arg",
        "arg",
        "safe_parse_and_eval",
        "target",
        "addr",
        "err",
        "addr",
        "process_lookup_address",
        "addr",
        "err",
        "get_gef_setting",
        "nb",
        "repeat_count",
        "repeat_count",
        "nb",
        "repeat_count",
        "nb",
        "nb",
        "repeat_count",
        "align_address",
        "addr",
        "i",
        "from_insnum",
        "to_insnum",
        "insnum_step",
        "gef_print",
        "DereferenceCommand",
        "pprint_dereferenced",
        "start_address",
        "i",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "argv",
        "len",
        "argv",
        "argc",
        "gdb",
        "execute",
        "to_string",
        "ret",
        "find",
        "i",
        "ret",
        "i",
        "strip",
        "msg",
        "Color",
        "redify",
        "msg",
        "Color",
        "greenify",
        "gef_print",
        "msg",
        "argc",
        "argv",
        "info",
        "gdb",
        "execute",
        "argv",
        "info",
        "gdb",
        "execute",
        "warn",
        "usage",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "argv",
        "reset_all_caches",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "only_if_gdb_running",
        "argv",
        "get_process_maps",
        "vmmap",
        "err",
        "get_gef_setting",
        "show_legend",
        "get_gef_setting",
        "gef_print",
        "Color",
        "colorify",
        "format",
        "headers",
        "w",
        "get_memory_alignment",
        "color",
        "entry",
        "vmmap",
        "argv",
        "print_entry",
        "entry",
        "argv",
        "entry",
        "path",
        "print_entry",
        "entry",
        "is_integer",
        "argv",
        "argv",
        "addr",
        "entry",
        "page_start",
        "addr",
        "entry",
        "page_end",
        "print_entry",
        "entry",
        "entry",
        "entry",
        "path",
        "get_gef_setting",
        "entry",
        "path",
        "get_gef_setting",
        "entry",
        "permission",
        "value",
        "Permission",
        "READ",
        "entry",
        "permission",
        "value",
        "Permission",
        "EXECUTE",
        "get_gef_setting",
        "l",
        "append",
        "Color",
        "colorify",
        "format_address",
        "entry",
        "page_start",
        "line_color",
        "l",
        "append",
        "Color",
        "colorify",
        "format_address",
        "entry",
        "page_end",
        "line_color",
        "l",
        "append",
        "Color",
        "colorify",
        "format_address",
        "entry",
        "offset",
        "line_color",
        "entry",
        "permission",
        "value",
        "Permission",
        "READ",
        "Permission",
        "WRITE",
        "Permission",
        "EXECUTE",
        "l",
        "append",
        "Color",
        "colorify",
        "entry",
        "permission",
        "line_color",
        "l",
        "append",
        "Color",
        "colorify",
        "entry",
        "permission",
        "line_color",
        "l",
        "append",
        "Color",
        "colorify",
        "entry",
        "path",
        "line_color",
        "join",
        "l",
        "gef_print",
        "line",
        "get_gef_setting",
        "get_gef_setting",
        "get_gef_setting",
        "gef_print",
        "format",
        "Color",
        "colorify",
        "code_addr_color",
        "Color",
        "colorify",
        "heap_addr_color",
        "Color",
        "colorify",
        "stack_addr_color",
        "n",
        "n",
        "ValueError",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "only_if_gdb_running",
        "argv",
        "get_gef_setting",
        "gef_print",
        "Color",
        "colorify",
        "format",
        "headers",
        "w",
        "get_memory_alignment",
        "color",
        "argv",
        "argv",
        "argv",
        "argv",
        "len",
        "argv",
        "argv",
        "xfile",
        "get_info_files",
        "filter_by_file",
        "filter_by_file",
        "xfile",
        "filename",
        "filter_by_name",
        "filter_by_name",
        "xfile",
        "name",
        "l",
        "append",
        "format_address",
        "xfile",
        "zone_start",
        "l",
        "append",
        "format_address",
        "xfile",
        "zone_end",
        "l",
        "append",
        "format",
        "xfile",
        "name",
        "l",
        "append",
        "xfile",
        "filename",
        "gef_print",
        "join",
        "l",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "only_if_gdb_running",
        "argv",
        "argv",
        "err",
        "usage",
        "sym",
        "argv",
        "align_address",
        "parse_address",
        "sym",
        "gef_print",
        "titlify",
        "format",
        "addr",
        "infos",
        "addr",
        "gdb",
        "error",
        "gdb_err",
        "err",
        "format",
        "gdb_err",
        "address",
        "lookup_address",
        "address",
        "addr",
        "valid",
        "warn",
        "format",
        "address",
        "addr",
        "section",
        "addr",
        "info",
        "sect",
        "gef_print",
        "format",
        "format_address",
        "sect",
        "page_start",
        "RIGHT_ARROW",
        "format_address",
        "sect",
        "page_end",
        "sect",
        "page_end",
        "sect",
        "page_start",
        "gef_print",
        "format",
        "sect",
        "permission",
        "gef_print",
        "format",
        "sect",
        "path",
        "gef_print",
        "format",
        "addr",
        "value",
        "sect",
        "page_start",
        "gef_print",
        "format",
        "sect",
        "inode",
        "info",
        "gef_print",
        "format",
        "info",
        "name",
        "format_address",
        "info",
        "zone_start",
        "format_address",
        "info",
        "zone_end",
        "gef_print",
        "format",
        "addr",
        "value",
        "info",
        "zone_start",
        "gdb_get_location_from_symbol",
        "address",
        "sym",
        "sym",
        "format",
        "name",
        "offset",
        "msg",
        "format",
        "offset",
        "gef_print",
        "msg",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "prefix",
        "argv",
        "usage",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "only_if_gdb_running",
        "argv",
        "len",
        "argv",
        "usage",
        "gdb",
        "parse_and_eval",
        "argv",
        "argv",
        "argv",
        "read_memory",
        "address",
        "length",
        "info",
        "format",
        "address",
        "address",
        "len",
        "block",
        "repr",
        "key",
        "gef_print",
        "titlify",
        "gef_print",
        "hexdump",
        "block",
        "address",
        "gef_print",
        "titlify",
        "gef_print",
        "hexdump",
        "xor",
        "block",
        "key",
        "address",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "only_if_gdb_running",
        "argv",
        "len",
        "argv",
        "usage",
        "parse_address",
        "argv",
        "argv",
        "argv",
        "read_memory",
        "address",
        "length",
        "info",
        "format",
        "address",
        "address",
        "len",
        "block",
        "key",
        "xor",
        "block",
        "key",
        "write_memory",
        "address",
        "xored_block",
        "length",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_LOCATION",
        "add_setting",
        "add_setting",
        "only_if_gdb_running",
        "argv",
        "len",
        "argv",
        "usage",
        "len",
        "argv",
        "argv",
        "isdigit",
        "argv",
        "current_arch",
        "pc",
        "gdb",
        "parse_and_eval",
        "argv",
        "gdb",
        "error",
        "e",
        "err",
        "format",
        "e",
        "trace",
        "loc_start",
        "loc_end",
        "depth",
        "gdb",
        "newest_frame",
        "f",
        "n",
        "f",
        "older",
        "n",
        "loc_start",
        "loc_end",
        "depth",
        "info",
        "format",
        "loc_start",
        "loc_end",
        "depth",
        "format",
        "get_setting",
        "loc_start",
        "loc_end",
        "enable_redirect_output",
        "to_file",
        "logfile",
        "hide_context",
        "start_tracing",
        "loc_start",
        "loc_end",
        "depth",
        "unhide_context",
        "disable_redirect_output",
        "ok",
        "format",
        "logfile",
        "info",
        "loc_start",
        "loc_end",
        "depth",
        "loc_start",
        "get_frames_size",
        "gef_print",
        "gef_print",
        "format",
        "get_filepath",
        "gef_print",
        "format",
        "format_address",
        "loc_start",
        "gef_print",
        "format",
        "format_address",
        "loc_end",
        "gef_print",
        "format",
        "depth",
        "gef_print",
        "gef_print",
        "loc_cur",
        "loc_end",
        "get_frames_size",
        "frame_count_init",
        "delta",
        "depth",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "current_arch",
        "pc",
        "gdb",
        "flush",
        "gdb",
        "error",
        "e",
        "gef_print",
        "gef_print",
        "format",
        "format_address",
        "loc_cur",
        "gef_print",
        "format",
        "e",
        "gef_print",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "args",
        "kwargs",
        "prefix",
        "add_setting",
        "add_setting",
        "argv",
        "usage",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "kwargs",
        "args",
        "length",
        "get_gef_setting",
        "args",
        "period",
        "get_gef_setting",
        "info",
        "format",
        "length",
        "period",
        "gef_pystring",
        "generate_cyclic_pattern",
        "length",
        "period",
        "gef_print",
        "pattern_str",
        "ok",
        "format",
        "gef_convenience",
        "pattern_str",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "only_if_gdb_running",
        "parse_arguments",
        "argv",
        "args",
        "kwargs",
        "kwargs",
        "args",
        "length",
        "get_gef_setting",
        "args",
        "period",
        "get_gef_setting",
        "info",
        "format",
        "args",
        "pattern",
        "search",
        "args",
        "pattern",
        "length",
        "period",
        "pattern",
        "size",
        "period",
        "safe_parse_and_eval",
        "pattern",
        "symbol",
        "symbol",
        "dereference",
        "addr",
        "dereferenced_value",
        "dereferenced_value",
        "current_arch",
        "ptrsize",
        "pack",
        "addr",
        "pack",
        "addr",
        "pack",
        "addr",
        "pack",
        "addr",
        "gef_pybytes",
        "pattern",
        "gef_pybytes",
        "pattern",
        "generate_cyclic_pattern",
        "size",
        "period",
        "cyclic_pattern",
        "find",
        "pattern_le",
        "off",
        "ok",
        "format",
        "off",
        "Color",
        "colorify",
        "is_little_endian",
        "cyclic_pattern",
        "find",
        "pattern_be",
        "off",
        "ok",
        "format",
        "off",
        "Color",
        "colorify",
        "is_big_endian",
        "found",
        "err",
        "format",
        "pattern",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "complete",
        "gdb",
        "COMPLETE_FILENAME",
        "which",
        "argv",
        "len",
        "argv",
        "argc",
        "get_filepath",
        "filename",
        "warn",
        "argc",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "argv",
        "os",
        "access",
        "filename",
        "os",
        "R_OK",
        "err",
        "usage",
        "info",
        "format",
        "_cmdline_",
        "filename",
        "print_security_properties",
        "filename",
        "filename",
        "checksec",
        "filename",
        "prop",
        "sec",
        "prop",
        "sec",
        "prop",
        "Color",
        "greenify",
        "Color",
        "boldify",
        "TICK",
        "val",
        "Color",
        "redify",
        "Color",
        "boldify",
        "CROSS",
        "val",
        "prop",
        "is_alive",
        "gef_read_canary",
        "msg",
        "format",
        "canary",
        "gef_print",
        "format",
        "prop",
        "msg",
        "sec",
        "gef_print",
        "format",
        "Color",
        "greenify",
        "sec",
        "gef_print",
        "format",
        "Color",
        "yellowify",
        "gef_print",
        "format",
        "Color",
        "redify",
        "Color",
        "boldify",
        "CROSS",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "args",
        "kwargs",
        "add_setting",
        "add_setting",
        "which",
        "readelf",
        "filename",
        "readelf",
        "filename",
        "gef_execute_external",
        "cmd",
        "as_list",
        "line",
        "lines",
        "line",
        "output",
        "append",
        "line",
        "output",
        "only_if_gdb_running",
        "argv",
        "which",
        "IOError",
        "err",
        "argv",
        "argv",
        "get_process_maps",
        "min",
        "x",
        "page_start",
        "x",
        "vmmap",
        "x",
        "path",
        "get_filepath",
        "max",
        "x",
        "page_end",
        "x",
        "vmmap",
        "x",
        "path",
        "get_filepath",
        "checksec",
        "get_filepath",
        "checksec_status",
        "checksec_status",
        "full_relro",
        "checksec_status",
        "partial_relro",
        "get_jmp_slots",
        "readelf",
        "get_filepath",
        "gef_print",
        "format",
        "relro_status",
        "len",
        "jmpslots",
        "line",
        "jmpslots",
        "line",
        "split",
        "func_names_filter",
        "x",
        "x",
        "name",
        "func_names_filter",
        "address",
        "pie",
        "base_address",
        "address_val",
        "read_int_from_memory",
        "address_val",
        "base_address",
        "got_address",
        "end_address",
        "get_setting",
        "get_setting",
        "format",
        "hex",
        "address_val",
        "line",
        "Color",
        "colorify",
        "format",
        "name",
        "RIGHT_ARROW",
        "hex",
        "got_address",
        "color",
        "gef_print",
        "line",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "prefix",
        "add_setting",
        "argv",
        "usage",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "highlight_table",
        "err",
        "max",
        "len",
        "highlight_table",
        "keys",
        "match",
        "color",
        "sorted",
        "highlight_table",
        "items",
        "format",
        "Color",
        "colorify",
        "match",
        "ljust",
        "left_pad",
        "color",
        "VERTICAL_LINE",
        "Color",
        "colorify",
        "color",
        "color",
        "argv",
        "print_highlight_table",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "argv",
        "highlight_table",
        "clear",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "argv",
        "len",
        "argv",
        "usage",
        "argv",
        "color",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "argv",
        "argv",
        "usage",
        "highlight_table",
        "pop",
        "argv",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "argv",
        "enable_redirect_output",
        "func_name",
        "num_arg",
        "dangerous_functions",
        "items",
        "FormatStringBreakpoint",
        "func_name",
        "num_arg",
        "disable_redirect_output",
        "ok",
        "format",
        "len",
        "dangerous_functions",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "args",
        "kwargs",
        "complete",
        "gdb",
        "COMPLETE_NONE",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "add_setting",
        "only_if_gdb_running",
        "experimental_feature",
        "argv",
        "argv",
        "setup",
        "argv",
        "dump_tracked_allocations",
        "ok",
        "TraceMallocBreakpoint",
        "TraceMallocBreakpoint",
        "ok",
        "TraceFreeBreakpoint",
        "ok",
        "TraceReallocBreakpoint",
        "ok",
        "gdb",
        "execute",
        "info",
        "warn",
        "format",
        "Color",
        "colorify",
        "gef_on_exit_hook",
        "clean",
        "__heap_allocated_list__",
        "__heap_freed_list__",
        "__heap_uaf_watchpoints__",
        "__heap_allocated_list__",
        "ok",
        "addr",
        "sz",
        "__heap_allocated_list__",
        "gef_print",
        "format",
        "CROSS",
        "sz",
        "addr",
        "ok",
        "__heap_freed_list__",
        "ok",
        "addr",
        "sz",
        "__heap_freed_list__",
        "gef_print",
        "format",
        "TICK",
        "sz",
        "addr",
        "ok",
        "__heap_allocated_list__",
        "__heap_freed_list__",
        "__heap_uaf_watchpoints__",
        "ok",
        "format",
        "Color",
        "colorify",
        "bp",
        "bp_malloc",
        "bp_calloc",
        "bp_free",
        "bp_realloc",
        "hasattr",
        "bp",
        "bp",
        "retbp",
        "bp",
        "retbp",
        "RuntimeError",
        "bp",
        "wp",
        "__heap_uaf_watchpoints__",
        "wp",
        "ok",
        "format",
        "Color",
        "colorify",
        "gdb",
        "execute",
        "gef_on_exit_unhook",
        "clean",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "argv",
        "gef_current_instruction",
        "current_arch",
        "pc",
        "ok",
        "format",
        "is_syscall",
        "current_arch",
        "insn",
        "arch",
        "instruction",
        "instruction",
        "mnemonic",
        "join",
        "instruction",
        "operands",
        "insn_str",
        "strip",
        "arch",
        "syscall_instructions",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "add_setting",
        "os",
        "path",
        "join",
        "get_gef_setting",
        "argv",
        "get_gef_setting",
        "get_settings_path",
        "path",
        "err",
        "format",
        "get_setting",
        "info",
        "current_arch",
        "__class__",
        "get_syscall_table",
        "arch",
        "get_register",
        "current_arch",
        "syscall_register",
        "reg_value",
        "syscall_table",
        "warn",
        "format",
        "reg_value",
        "syscall_table",
        "reg_value",
        "param",
        "syscall_entry",
        "values",
        "append",
        "get_register",
        "param",
        "reg",
        "s",
        "param",
        "s",
        "syscall_entry",
        "s",
        "reg",
        "s",
        "syscall_entry",
        "info",
        "format",
        "Color",
        "colorify",
        "syscall_entry",
        "name",
        "color",
        "gef_print",
        "format",
        "syscall_entry",
        "name",
        "join",
        "parameters",
        "re",
        "split",
        "p",
        "p",
        "parameters",
        "info",
        "Color",
        "colorify",
        "format",
        "headers",
        "color",
        "name",
        "register",
        "value",
        "param_names",
        "registers",
        "values",
        "format",
        "name",
        "register",
        "value",
        "dereference_from",
        "value",
        "len",
        "addrs",
        "format",
        "RIGHT_ARROW",
        "line",
        "sep",
        "line",
        "sep",
        "join",
        "addrs",
        "gef_print",
        "line",
        "x",
        "get_settings_path",
        "p",
        "os",
        "path",
        "join",
        "p",
        "format",
        "x",
        "modname",
        "get_filepath",
        "modname",
        "importlib",
        "machinery",
        "SourceFileLoader",
        "modname",
        "_fullname",
        "load_module",
        "modname",
        "get_module",
        "modname",
        "getattr",
        "_mod",
        "os",
        "path",
        "expanduser",
        "get_setting",
        "os",
        "path",
        "realpath",
        "path",
        "path",
        "os",
        "path",
        "isdir",
        "path",
        "lru_cache",
        "name",
        "process_lookup_path",
        "name",
        "section",
        "section",
        "page_start",
        "lru_cache",
        "name",
        "file_lookup_name_path",
        "name",
        "get_filepath",
        "zone",
        "zone",
        "zone_start",
        "gdb",
        "metaclass",
        "abc",
        "ABCMeta",
        "abc",
        "abstractproperty",
        "property",
        "format",
        "_function_",
        "_function_",
        "args",
        "is_alive",
        "gdb",
        "GdbError",
        "do_invoke",
        "args",
        "args",
        "index",
        "args",
        "index",
        "addr",
        "addr",
        "address",
        "addr",
        "address",
        "IndexError",
        "abc",
        "abstractmethod",
        "args",
        "register_function",
        "GenericFunction",
        "args",
        "arg_to_long",
        "args",
        "get_section_base_address",
        "register_function",
        "GenericFunction",
        "args",
        "HeapBaseFunction",
        "heap_base",
        "gdb",
        "GdbError",
        "arg_to_long",
        "args",
        "staticmethod",
        "gdb",
        "parse_and_eval",
        "gdb",
        "error",
        "get_section_base_address",
        "register_function",
        "GenericFunction",
        "args",
        "args",
        "IndexError",
        "get_filename",
        "gdb",
        "error",
        "err",
        "format",
        "args",
        "get_section_base_address",
        "name",
        "err",
        "format",
        "name",
        "addr",
        "register_function",
        "GenericFunction",
        "args",
        "arg_to_long",
        "args",
        "get_zone_base_address",
        "register_function",
        "GenericFunction",
        "args",
        "arg_to_long",
        "args",
        "get_zone_base_address",
        "register_command",
        "GenericCommand",
        "_cmdline_",
        "setup",
        "__gef__",
        "__gef__",
        "loaded_functions",
        "add_function_to_doc",
        "join",
        "sorted",
        "docs",
        "getattr",
        "lstrip",
        "join",
        "doc",
        "split",
        "getattr",
        "lstrip",
        "format",
        "syntax",
        "syntax",
        "help",
        "Color",
        "greenify",
        "doc",
        "docs",
        "append",
        "msg",
        "argv",
        "dont_repeat",
        "gef_print",
        "titlify",
        "gef_print",
        "format",
        "Color",
        "colorify",
        "gef_print",
        "__doc__",
        "gdb",
        "Command",
        "format",
        "_cmdline_",
        "_cmdline_",
        "gdb",
        "COMMAND_SUPPORT",
        "gdb",
        "COMPLETE_NONE",
        "set_gef_setting",
        "set_gef_setting",
        "set_gef_setting",
        "set_gef_setting",
        "set_gef_setting",
        "set_gef_setting",
        "set_gef_setting",
        "GEF_TEMP_DIR",
        "load",
        "initial",
        "GefHelpCommand",
        "loaded_commands",
        "GefConfigCommand",
        "loaded_command_names",
        "GefSaveCommand",
        "GefRestoreCommand",
        "GefMissingCommand",
        "GefSetCommand",
        "GefRunCommand",
        "gdb",
        "execute",
        "__reload_auto_breakpoints",
        "__load_extra_plugins",
        "gdb",
        "execute",
        "__config__",
        "get",
        "bkp_fname",
        "bkp_fname",
        "bkp_fname",
        "os",
        "access",
        "bkp_fname",
        "os",
        "R_OK",
        "gdb",
        "execute",
        "format",
        "bkp_fname",
        "format",
        "bkp_fname",
        "gef_execute_gdb_script",
        "join",
        "source",
        "len",
        "loaded_commands",
        "get_gef_setting",
        "directories",
        "directory",
        "directories",
        "split",
        "os",
        "path",
        "realpath",
        "os",
        "path",
        "expanduser",
        "directory",
        "os",
        "path",
        "isdir",
        "directory",
        "sys",
        "path",
        "append",
        "directory",
        "fname",
        "os",
        "listdir",
        "directory",
        "fname",
        "endswith",
        "format",
        "directory",
        "fname",
        "os",
        "path",
        "isfile",
        "fpath",
        "gdb",
        "execute",
        "format",
        "fpath",
        "len",
        "loaded_commands",
        "nb_inital",
        "nb_added",
        "ok",
        "format",
        "Color",
        "colorify",
        "nb_added",
        "Color",
        "colorify",
        "directories",
        "gdb",
        "error",
        "e",
        "err",
        "format",
        "e",
        "nb_added",
        "property",
        "x",
        "x",
        "loaded_commands",
        "args",
        "from_tty",
        "dont_repeat",
        "gdb",
        "execute",
        "initial",
        "x",
        "_cmdline_",
        "x",
        "x",
        "__commands__",
        "function_class_name",
        "__functions__",
        "loaded_functions",
        "append",
        "function_class_name",
        "x",
        "u",
        "u",
        "loaded_commands",
        "x",
        "u",
        "cmd",
        "class_name",
        "commands",
        "is_loaded",
        "cmd",
        "loaded_commands",
        "append",
        "cmd",
        "class_name",
        "class_name",
        "hasattr",
        "class_name",
        "getattr",
        "class_name",
        "alias",
        "aliases",
        "GefAlias",
        "alias",
        "cmd",
        "reason",
        "missing_commands",
        "reason",
        "nb_missing",
        "sorted",
        "loaded_commands",
        "key",
        "x",
        "x",
        "_cmdline_",
        "initial",
        "gef_print",
        "format",
        "Color",
        "greenify",
        "get_os",
        "Color",
        "colorify",
        "Color",
        "colorify",
        "format",
        "sys",
        "version_info",
        "major",
        "sys",
        "version_info",
        "minor",
        "len",
        "loaded_commands",
        "gef_print",
        "format",
        "Color",
        "colorify",
        "nb_cmds",
        "Color",
        "colorify",
        "gdb",
        "VERSION",
        "Color",
        "colorify",
        "ver",
        "nb_missing",
        "warn",
        "format",
        "Color",
        "colorify",
        "nb_missing",
        "nb_missing",
        "Color",
        "colorify",
        "gdb",
        "Command",
        "_cmdline_",
        "commands",
        "args",
        "kwargs",
        "_cmdline_",
        "gdb",
        "COMMAND_SUPPORT",
        "gdb",
        "COMPLETE_NONE",
        "generate_help",
        "commands",
        "refresh",
        "args",
        "from_tty",
        "dont_repeat",
        "gef_print",
        "titlify",
        "gef_print",
        "__doc__",
        "commands",
        "command",
        "commands",
        "add_command_to_doc",
        "command",
        "command",
        "command",
        "cmd",
        "getattr",
        "class_name",
        "lstrip",
        "join",
        "doc",
        "split",
        "format",
        "join",
        "class_name",
        "_aliases_",
        "hasattr",
        "class_name",
        "format",
        "cmd",
        "cmd",
        "help",
        "doc",
        "aliases",
        "aliases",
        "docs",
        "append",
        "msg",
        "join",
        "sorted",
        "docs",
        "gdb",
        "Command",
        "format",
        "_cmdline_",
        "loaded_commands",
        "args",
        "kwargs",
        "_cmdline_",
        "gdb",
        "COMMAND_NONE",
        "prefix",
        "loaded_commands",
        "args",
        "from_tty",
        "dont_repeat",
        "gdb",
        "string_to_argv",
        "args",
        "len",
        "argv",
        "argc",
        "err",
        "argc",
        "gef_print",
        "titlify",
        "print_settings",
        "argc",
        "argv",
        "x",
        "x",
        "__config__",
        "keys",
        "x",
        "startswith",
        "prefix",
        "names",
        "len",
        "names",
        "gef_print",
        "titlify",
        "format",
        "names",
        "print_setting",
        "names",
        "verbose",
        "gef_print",
        "titlify",
        "format",
        "argv",
        "name",
        "names",
        "print_setting",
        "name",
        "set_setting",
        "argc",
        "argv",
        "plugin_name",
        "verbose",
        "__config__",
        "get",
        "plugin_name",
        "get_gef_setting",
        "get_gef_setting",
        "res",
        "res",
        "Color",
        "colorify",
        "plugin_name",
        "_type",
        "_type",
        "format",
        "Color",
        "colorify",
        "_value",
        "string_color",
        "Color",
        "colorify",
        "_value",
        "misc_color",
        "gef_print",
        "format",
        "_setting",
        "_type",
        "_value",
        "verbose",
        "gef_print",
        "Color",
        "colorify",
        "gef_print",
        "format",
        "_desc",
        "x",
        "sorted",
        "__config__",
        "print_setting",
        "x",
        "argc",
        "argv",
        "__gef__",
        "argv",
        "err",
        "x",
        "x",
        "__gef__",
        "loaded_commands",
        "argv",
        "split",
        "plugin_name",
        "loaded_commands",
        "err",
        "format",
        "plugin_name",
        "__config__",
        "get",
        "argv",
        "_type",
        "err",
        "format",
        "argv",
        "_type",
        "argv",
        "upper",
        "_type",
        "argv",
        "err",
        "format",
        "argv",
        "_type",
        "reset_all_caches",
        "__config__",
        "argv",
        "_newval",
        "get_gef_setting",
        "cache_clear",
        "text",
        "word",
        "sorted",
        "__config__",
        "text",
        "s",
        "s",
        "settings",
        "word",
        "s",
        "text",
        "s",
        "s",
        "settings",
        "s",
        "startswith",
        "text",
        "strip",
        "s",
        "split",
        "s",
        "settings",
        "s",
        "startswith",
        "text",
        "strip",
        "gdb",
        "Command",
        "_cmdline_",
        "args",
        "kwargs",
        "_cmdline_",
        "gdb",
        "COMMAND_SUPPORT",
        "gdb",
        "COMPLETE_NONE",
        "args",
        "from_tty",
        "dont_repeat",
        "configparser",
        "RawConfigParser",
        "key",
        "sorted",
        "__config__",
        "key",
        "split",
        "__config__",
        "get",
        "key",
        "value",
        "value",
        "old_sect",
        "sect",
        "cfg",
        "add_section",
        "sect",
        "sect",
        "cfg",
        "sect",
        "optname",
        "value",
        "cfg",
        "add_section",
        "alias",
        "__aliases__",
        "cfg",
        "alias",
        "_alias",
        "alias",
        "_command",
        "open",
        "GEF_RC",
        "fd",
        "cfg",
        "write",
        "fd",
        "ok",
        "format",
        "GEF_RC",
        "gdb",
        "Command",
        "_cmdline_",
        "args",
        "kwargs",
        "_cmdline_",
        "gdb",
        "COMMAND_SUPPORT",
        "gdb",
        "COMPLETE_NONE",
        "args",
        "from_tty",
        "dont_repeat",
        "os",
        "access",
        "GEF_RC",
        "os",
        "R_OK",
        "args",
        "lower",
        "configparser",
        "ConfigParser",
        "cfg",
        "read",
        "GEF_RC",
        "section",
        "cfg",
        "sections",
        "section",
        "key",
        "cfg",
        "options",
        "section",
        "GefAlias",
        "key",
        "cfg",
        "get",
        "section",
        "key",
        "optname",
        "cfg",
        "options",
        "section",
        "format",
        "section",
        "optname",
        "__config__",
        "get",
        "key",
        "cfg",
        "get",
        "section",
        "optname",
        "_type",
        "new_value",
        "_type",
        "new_value",
        "__config__",
        "key",
        "new_value",
        "gef_makedirs",
        "__config__",
        "quiet",
        "ok",
        "format",
        "Color",
        "colorify",
        "GEF_RC",
        "gdb",
        "Command",
        "_cmdline_",
        "args",
        "kwargs",
        "_cmdline_",
        "gdb",
        "COMMAND_SUPPORT",
        "gdb",
        "COMPLETE_NONE",
        "args",
        "from_tty",
        "dont_repeat",
        "__gef__",
        "missing_commands",
        "keys",
        "missing_commands",
        "ok",
        "missing_command",
        "missing_commands",
        "__gef__",
        "missing_commands",
        "missing_command",
        "warn",
        "format",
        "missing_command",
        "RIGHT_ARROW",
        "reason",
        "gdb",
        "Command",
        "format",
        "_cmdline_",
        "args",
        "kwargs",
        "_cmdline_",
        "gdb",
        "COMMAND_SUPPORT",
        "gdb",
        "COMPLETE_SYMBOL",
        "args",
        "from_tty",
        "dont_repeat",
        "args",
        "split",
        "args",
        "p",
        "args",
        "p",
        "startswith",
        "gdb",
        "parse_and_eval",
        "p",
        "cmd",
        "append",
        "c",
        "cmd",
        "append",
        "p",
        "gdb",
        "execute",
        "join",
        "cmd",
        "gdb",
        "Command",
        "format",
        "_cmdline_",
        "args",
        "kwargs",
        "_cmdline_",
        "gdb",
        "COMMAND_SUPPORT",
        "gdb",
        "COMPLETE_FILENAME",
        "args",
        "from_tty",
        "dont_repeat",
        "is_alive",
        "gdb",
        "execute",
        "args",
        "split",
        "gdb",
        "execute",
        "format",
        "join",
        "argv",
        "gdb",
        "execute",
        "gdb",
        "Command",
        "alias",
        "command",
        "completer_class",
        "gdb",
        "COMPLETE_NONE",
        "command_class",
        "gdb",
        "COMMAND_NONE",
        "command",
        "split",
        "p",
        "x",
        "x",
        "__aliases__",
        "x",
        "_alias",
        "alias",
        "command",
        "alias",
        "command",
        "split",
        "lookup_command",
        "c",
        "format",
        "Color",
        "greenify",
        "command",
        "r",
        "r",
        "__doc__",
        "format",
        "_instance",
        "__doc__",
        "hasattr",
        "_instance",
        "_instance",
        "complete",
        "alias",
        "command_class",
        "completer_class",
        "completer_class",
        "__aliases__",
        "append",
        "args",
        "from_tty",
        "gdb",
        "execute",
        "format",
        "_command",
        "args",
        "from_tty",
        "from_tty",
        "cmd",
        "__gef__",
        "_name",
        "_class",
        "_instance",
        "__gef__",
        "loaded_commands",
        "cmd",
        "_name",
        "_name",
        "_class",
        "_instance",
        "register_command",
        "GenericCommand",
        "format",
        "_cmdline_",
        "prefix",
        "argv",
        "usage",
        "register_command",
        "AliasesCommand",
        "format",
        "_cmdline_",
        "format",
        "_cmdline_",
        "argv",
        "len",
        "argv",
        "usage",
        "GefAlias",
        "argv",
        "join",
        "argv",
        "register_command",
        "AliasesCommand",
        "format",
        "_cmdline_",
        "argv",
        "__aliases__",
        "len",
        "argv",
        "usage",
        "next",
        "x",
        "x",
        "_alias",
        "argv",
        "__aliases__",
        "__aliases__",
        "remove",
        "alias_to_remove",
        "ValueError",
        "StopIteration",
        "err",
        "format",
        "argv",
        "gef_print",
        "register_command",
        "AliasesCommand",
        "_cmdline_",
        "argv",
        "ok",
        "a",
        "__aliases__",
        "gef_print",
        "format",
        "a",
        "_alias",
        "RIGHT_ARROW",
        "a",
        "_command",
        "gdb",
        "Command",
        "gdb",
        "COMMAND_NONE",
        "gdb",
        "COMPLETE_NONE",
        "GefAlias",
        "args",
        "from_tty",
        "dont_repeat",
        "os",
        "getenv",
        "tmux",
        "tmux_setup",
        "os",
        "getenv",
        "screen",
        "screen",
        "screen_setup",
        "warn",
        "which",
        "ok",
        "os",
        "listdir",
        "gdb",
        "execute",
        "format",
        "tmux",
        "gdb",
        "execute",
        "format",
        "tmux",
        "os",
        "listdir",
        "new_ptses",
        "old_ptses",
        "format",
        "pty",
        "ok",
        "format",
        "pty",
        "gdb",
        "execute",
        "format",
        "pty",
        "ok",
        "which",
        "os",
        "getenv",
        "ok",
        "tempfile",
        "mkstemp",
        "tempfile",
        "mkstemp",
        "os",
        "close",
        "fd_tty",
        "os",
        "fdopen",
        "fd_script",
        "f",
        "f",
        "write",
        "f",
        "write",
        "f",
        "write",
        "f",
        "write",
        "format",
        "tty_path",
        "f",
        "write",
        "gdb",
        "execute",
        "format",
        "screen",
        "sty",
        "script_path",
        "time",
        "sleep",
        "open",
        "tty_path",
        "f",
        "f",
        "read",
        "strip",
        "ok",
        "format",
        "pty",
        "gdb",
        "execute",
        "format",
        "pty",
        "ok",
        "os",
        "unlink",
        "script_path",
        "os",
        "unlink",
        "tty_path",
        "current_prompt",
        "get_gef_setting",
        "GEF_PROMPT",
        "get_gef_setting",
        "GEF_PROMPT",
        "is_alive",
        "GEF_PROMPT_ON",
        "GEF_PROMPT_OFF",
        "sys",
        "version_info",
        "err",
        "err",
        "GDB_VERSION",
        "GDB_MIN_VERSION",
        "err",
        "format",
        "join",
        "GDB_MIN_VERSION",
        "which",
        "gef_pystring",
        "subprocess",
        "check_output",
        "pyenv",
        "strip",
        "gef_pystring",
        "subprocess",
        "check_output",
        "pyenv",
        "strip",
        "os",
        "path",
        "join",
        "PYENV_ROOT",
        "PYENV_VERSION",
        "format",
        "PYENV_VERSION",
        "site",
        "addsitedir",
        "site_packages_dir",
        "FileNotFoundError",
        "which",
        "gef_pystring",
        "subprocess",
        "check_output",
        "pythonbin",
        "strip",
        "PREFIX",
        "sys",
        "base_prefix",
        "subprocess",
        "check_output",
        "pythonbin",
        "decode",
        "split",
        "sys",
        "path",
        "extend",
        "SITE_PACKAGES_DIRS",
        "__gef_prompt__",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "gdb",
        "execute",
        "gdb",
        "error",
        "gdb",
        "execute",
        "GefCommand",
        "__gef__",
        "setup",
        "gdb",
        "execute",
        "format",
        "get_gef_setting",
        "gef_on_continue_hook",
        "continue_handler",
        "gef_on_stop_hook",
        "hook_stop_handler",
        "gef_on_new_hook",
        "new_objfile_handler",
        "gef_on_exit_hook",
        "exit_handler",
        "gef_on_memchanged_hook",
        "memchanged_handler",
        "gef_on_regchanged_hook",
        "regchanged_handler",
        "gdb",
        "current_progspace",
        "filename",
        "new_objfile_handler",
        "GefTmuxSetup"
    ],
    "literals": [
        "\" \\u2190 \"",
        "\" \\u2192 \"",
        "\"\\u21b3\"",
        "\"\\u2500\"",
        "\"\\u2502\"",
        "\"\\u2718 \"",
        "\"\\u2713 \"",
        "\"\\u25cf\"",
        "\"gef\\u27a4  \"",
        "\"\\001\\033[1;32m\\002{0:s}\\001\\033[0m\\002\"",
        "\"\\001\\033[1;31m\\002{0:s}\\001\\033[0m\\002\"",
        "\"dev\"",
        "\"--dev\"",
        "\"master\"",
        "\"https://raw.githubusercontent.com/hugsy/gef/{}/scripts/gef.sh\"",
        "\"[-] Failed to get remote gef\"",
        "\".sh\"",
        "\"bash\"",
        "\"--update\"",
        "\"--upgrade\"",
        "\"[-] gef cannot run as standalone\"",
        "\"main_arena\"",
        "\"GEF_RC\"",
        "\"HOME\"",
        "\".gef.rc\"",
        "\"gef\"",
        "r\"(\\d+)[^\\d]+(\\d+)\"",
        "r\"(\\033\\[[\\d;]*m)\"",
        "\"__main__\"",
        "\"__main__\"",
        "\"cache_clear\"",
        "\"main_arena\"",
        "\"highlight.regex\"",
        "\"(\"",
        "\")\"",
        "\"\\\\1\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"end\"",
        "\"\\n\"",
        "\"context.redirect\"",
        "\"/dev/pts/\"",
        "\"wt\"",
        "\"wt\"",
        "\"context.redirect\"",
        "\"\"",
        "\"normal\"",
        "\"\\033[0m\"",
        "\"gray\"",
        "\"\\033[1;38;5;240m\"",
        "\"light_gray\"",
        "\"\\033[0;37m\"",
        "\"red\"",
        "\"\\033[31m\"",
        "\"green\"",
        "\"\\033[32m\"",
        "\"yellow\"",
        "\"\\033[33m\"",
        "\"blue\"",
        "\"\\033[34m\"",
        "\"pink\"",
        "\"\\033[35m\"",
        "\"cyan\"",
        "\"\\033[36m\"",
        "\"bold\"",
        "\"\\033[1m\"",
        "\"underline\"",
        "\"\\033[4m\"",
        "\"underline_off\"",
        "\"\\033[24m\"",
        "\"highlight\"",
        "\"\\033[3m\"",
        "\"highlight_off\"",
        "\"\\033[23m\"",
        "\"blink\"",
        "\"\\033[5m\"",
        "\"blink_off\"",
        "\"\\033[25m\"",
        "\"red\"",
        "\"green\"",
        "\"blue\"",
        "\"yellow\"",
        "\"gray\"",
        "\"light_gray\"",
        "\"pink\"",
        "\"cyan\"",
        "\"bold\"",
        "\"underline\"",
        "\"highlight\"",
        "\"blink\"",
        "\"gef.disable_color\"",
        "\"highlight\"",
        "\"highlight_off\"",
        "\"underline\"",
        "\"underline_off\"",
        "\"blink\"",
        "\"blink_off\"",
        "\"normal\"",
        "\"\"",
        "\"value\"",
        "\"section\"",
        "\"info\"",
        "\"valid\"",
        "\"theme.address_code\"",
        "\"theme.address_stack\"",
        "\"theme.address_heap\"",
        "\"name\"",
        "\".text\"",
        "\"path\"",
        "\"path\"",
        "\"[stack]\"",
        "\"path\"",
        "\"[heap]\"",
        "\"value\"",
        "\"\"",
        "\"r\"",
        "\"-\"",
        "\"w\"",
        "\"-\"",
        "\"x\"",
        "\"-\"",
        "\"READONLY\"",
        "\"DATA\"",
        "\"CODE\"",
        "\"r\"",
        "\"w\"",
        "\"x\"",
        "\"page_start\"",
        "\"page_end\"",
        "\"offset\"",
        "\"permission\"",
        "\"inode\"",
        "\"path\"",
        "\"/tmp/gef/{:d}/{:s}\"",
        "\"Zone\"",
        "\"name\"",
        "\"zone_start\"",
        "\"zone_end\"",
        "\"filename\"",
        "\"\"",
        "\"'{0}' not found/readable\"",
        "\"Failed to get file debug information, most of gef features will not work\"",
        "\"rb\"",
        "\">IBBB\"",
        "\"<\"",
        "\">\"",
        "\"{}BB\"",
        "\"{}HHI\"",
        "\"{}QQQ\"",
        "\"{}III\"",
        "\"{}HHHH\"",
        "\"{}HHH\"",
        "\"o\"",
        "\"o\"",
        "\"\"",
        "\"{:02x}\"",
        "\"...\"",
        "\"{:#10x} {:{:d}} {:16} {:6} {:s}\"",
        "\", \"",
        "\"{:#10x} {:16} {:6} {:s}\"",
        "\", \"",
        "\"(bad)\"",
        "\"(void *)&__malloc_hook\"",
        "\"*0\"",
        "\"Cannot find main_arena for {}\"",
        "\"*0x{:x}\"",
        "\"&{}\"",
        "\"int\"",
        "\"size_t\"",
        "\"unsigned long\"",
        "\"unsigned int\"",
        "\"struct malloc_state\"",
        "\"*{:#x} \"",
        "\"Arena (base={:#x}, top={:#x}, last_remainder={:#x}, next={:#x}, next_free={:#x}, system_mem={:#x})\"",
        "\"PREV_INUSE flag: {}\"",
        "\"On\"",
        "\"Off\"",
        "\"IS_MMAPPED flag: {}\"",
        "\"On\"",
        "\"Off\"",
        "\"NON_MAIN_ARENA flag: {}\"",
        "\"On\"",
        "\"Off\"",
        "\"\\n\"",
        "\"Chunk size: {0:d} ({0:#x})\"",
        "\"Usable size: {0:d} ({0:#x})\"",
        "\"Chunk size: Cannot read at {:#x} (corrupted?)\"",
        "\"Previous chunk size: {0:d} ({0:#x})\"",
        "\"Previous chunk size: Cannot read at {:#x} (corrupted?)\"",
        "\"\\n\"",
        "\"Forward pointer: {0:#x}\"",
        "\"Forward pointer: {0:#x} (corrupted?)\"",
        "\"Backward pointer: {0:#x}\"",
        "\"Backward pointer: {0:#x} (corrupted?)\"",
        "\"\\n\"",
        "\"{}\\n\\n{}\"",
        "\"PREV_INUSE\"",
        "\"red bold\"",
        "\"IS_MMAPPED\"",
        "\"red bold\"",
        "\"NON_MAIN_ARENA\"",
        "\"red bold\"",
        "\"|\"",
        "\"{:s}(addr={:#x}, size={:#x}, flags={:s})\"",
        "\"Chunk\"",
        "\"yellow bold underline\"",
        "\"\\n\"",
        "\"\\n\"",
        "rb\"glibc (\\d+)\\.(\\d+)\"",
        "r\"libc6?[-_](\\d+)\\.(\\d+)\\.so\"",
        "\"libc\"",
        "\"rb\"",
        "\"Failed to get the main arena, heap commands may not work properly: {}\"",
        "\"theme.default_title_line\"",
        "\"theme.default_title_message\"",
        "\"{} \"",
        "\" {}\"",
        "\"\"",
        "\"{} {}\"",
        "\"[!]\"",
        "\"bold red\"",
        "\"{} {}\"",
        "\"[*]\"",
        "\"bold yellow\"",
        "\"{} {}\"",
        "\"[+]\"",
        "\"bold green\"",
        "\"{} {}\"",
        "\"[+]\"",
        "\"bold blue\"",
        "\"error\"",
        "\"warn\"",
        "\"ok\"",
        "\"info\"",
        "\"Invalid level '{}', discarding message\"",
        "\"r\"",
        "\"\"",
        "\"\"",
        "\" Exception raised \"",
        "\"{}: {}\"",
        "\"bold underline red\"",
        "\" Detailed stacktrace \"",
        "\"   {}    {}\"",
        "\" Version \"",
        "\"version full\"",
        "\" Last 10 GDB commands \"",
        "\"show commands\"",
        "\" Runtime environment \"",
        "\"* GDB: {}\"",
        "\"* Python: {:d}.{:d}.{:d} - {:s}\"",
        "\"* OS: {:s} - {:s} ({:s})\"",
        "\"lsb_release\"",
        "\"!{} -a\"",
        "\"lsb_release is missing, cannot collect additional debug information\"",
        "\"\"",
        "\"utf-8\"",
        "\"\\n\"",
        "\"\\\\n\"",
        "\"\\r\"",
        "\"\\\\r\"",
        "\"\\t\"",
        "\"\\\\t\"",
        "\"\\v\"",
        "\"\\\\v\"",
        "\"\\b\"",
        "\"\\\\b\"",
        "\"utf-8\"",
        "\"PATH\"",
        "'\"'",
        "\"Missing file `{:s}`\"",
        "\"nonprintable\"",
        "\"yellow\"",
        "\"printable\"",
        "\"white\"",
        "\"00\"",
        "\"gray\"",
        "\"0a\"",
        "\"blue\"",
        "\"ff\"",
        "\"green\"",
        "\"{:02x}\"",
        "\"highlight.regex\"",
        "\" \"",
        "\"printable\"",
        "\"nonprintable\"",
        "\".\"",
        "\" \"",
        "\"\"",
        "\"<{:s}+{:04x}>\"",
        "\"\"",
        "\"\"",
        "\"{addr:#0{aw}x} {sym}    {data:<{dw}}    {text}\"",
        "\"\\n\"",
        "\"gef.debug\"",
        "\"/dev/null\"",
        "\"set logging overwrite\"",
        "\"set logging file {:s}\"",
        "\"set logging redirect on\"",
        "\"set logging on\"",
        "\"set logging off\"",
        "\"set logging redirect off\"",
        "\"Setting '{}' is undefined, need to provide type and description\"",
        "\"info symbol {:#x}\"",
        "\"No symbol matches\"",
        "\" in section \"",
        "\"addr\"",
        "\"asm\"",
        "\",\"",
        "\"<{}+{}>\"",
        "\"\"",
        "\"addr\"",
        "\"length\"",
        "\"<{}+{}>\"",
        "\"\"",
        "\", \"",
        "\"capstone\"",
        "\"arch\"",
        "\"mode\"",
        "\"endian\"",
        "\"skip\"",
        "\"nb_prev\"",
        "\"code\"",
        "\"shell\"",
        "\".gdb\"",
        "\"gef_\"",
        "\"w\"",
        "\"source {:s}\"",
        "\"Canary\"",
        "\"NX\"",
        "\"PIE\"",
        "\"Fortify\"",
        "\"Partial RelRO\"",
        "\"readelf\"",
        "\"Missing `readelf`\"",
        "\"Canary\"",
        "\"-s\"",
        "r\"__stack_chk_fail\"",
        "\"-W -l\"",
        "r\"GNU_STACK\"",
        "\"NX\"",
        "\"-W -l\"",
        "r\"GNU_STACK.*RWE\"",
        "\"NX\"",
        "\"PIE\"",
        "\"-h\"",
        "r\":.*EXEC\"",
        "\"Fortify\"",
        "\"-s\"",
        "r\"_chk@GLIBC\"",
        "\"Partial RelRO\"",
        "\"-l\"",
        "r\"GNU_RELRO\"",
        "\"Full RelRO\"",
        "\"Partial RelRO\"",
        "\"-d\"",
        "r\"BIND_NOW\"",
        "\"show architecture\"",
        "\"The target architecture is set automatically (currently \"",
        "\"(currently \"",
        "\")\"",
        "\"The target architecture is assumed to be \"",
        "\"The target architecture is assumed to be \"",
        "\"\"",
        "\"The target architecture is set to \"",
        "r\"\\\"(.+)\\\"\"",
        "\"Unknown architecture: {}\"",
        "\"show endian\"",
        "\"little endian\"",
        "\"big endian\"",
        "\"Invalid endianness\"",
        "\"info target\"",
        "\"\\n\"",
        "\"Entry point:\"",
        "\" \"",
        "\"PIE\"",
        "\"[{}]\"",
        "\" \"",
        "\"$pc\"",
        "\"$sp\"",
        "\"$fp\"",
        "\"RISCV\"",
        "\"RISCV\"",
        "\"$zero\"",
        "\"$ra\"",
        "\"$sp\"",
        "\"$gp\"",
        "\"$tp\"",
        "\"$t0\"",
        "\"$t1\"",
        "\"$t2\"",
        "\"$fp\"",
        "\"$s1\"",
        "\"$a0\"",
        "\"$a1\"",
        "\"$a2\"",
        "\"$a3\"",
        "\"$a4\"",
        "\"$a5\"",
        "\"$a6\"",
        "\"$a7\"",
        "\"$s2\"",
        "\"$s3\"",
        "\"$s4\"",
        "\"$s5\"",
        "\"$s6\"",
        "\"$s7\"",
        "\"$s8\"",
        "\"$s9\"",
        "\"$s10\"",
        "\"$s11\"",
        "\"$t3\"",
        "\"$t4\"",
        "\"$t5\"",
        "\"$t6\"",
        "\"$a0\"",
        "\"$a0\"",
        "\"$a1\"",
        "\"$a2\"",
        "\"$a3\"",
        "\"$a4\"",
        "\"$a5\"",
        "\"$a6\"",
        "\"$a7\"",
        "\"$a7\"",
        "\"ecall\"",
        "b\"\\x00\\x00\\x00\\x13\"",
        "\"call\"",
        "\"ret\"",
        "\"jalr\"",
        "\"zero\"",
        "\"ra\"",
        "\"c.jalr\"",
        "\"ra\"",
        "\"Architecture {:s} not supported yet\"",
        "\"b\"",
        "\"RISC-V: ELF file is not ELF32 or ELF64. This is not currently supported\"",
        "\"z\"",
        "\"$zero\"",
        "\"RISC-V: Failed to get rs1 and rs2 for instruction: `{}`\"",
        "\"u\"",
        "\"eq\"",
        "\"{}={}\"",
        "\"{}!={}\"",
        "\"ne\"",
        "\"{}!={}\"",
        "\"{}={}\"",
        "\"lt\"",
        "\"{}<{}\"",
        "\"{}>={}\"",
        "\"ge\"",
        "\"{}>={}\"",
        "\"{}<{}\"",
        "\"RISC-V: Conditional instruction `{:s}` not supported yet\"",
        "\"$ra\"",
        "\"ARM\"",
        "\"$r0\"",
        "\"$r1\"",
        "\"$r2\"",
        "\"$r3\"",
        "\"$r4\"",
        "\"$r5\"",
        "\"$r6\"",
        "\"$r7\"",
        "\"$r8\"",
        "\"$r9\"",
        "\"$r10\"",
        "\"$r11\"",
        "\"$r12\"",
        "\"$sp\"",
        "\"$lr\"",
        "\"$pc\"",
        "\"$cpsr\"",
        "b\"\\x01\\x10\\xa0\\xe1\"",
        "\"$r0\"",
        "\"$cpsr\"",
        "\"negative\"",
        "\"zero\"",
        "\"carry\"",
        "\"overflow\"",
        "\"interrupt\"",
        "\"fast\"",
        "\"thumb\"",
        "\"$r0\"",
        "\"$r1\"",
        "\"$r2\"",
        "\"$r3\"",
        "\"$r7\"",
        "\"swi 0x0\"",
        "\"swi NR\"",
        "\"$pc\"",
        "\"THUMB\"",
        "\"ARM\"",
        "\"bl\"",
        "\"blx\"",
        "\"pop\"",
        "\"bl\"",
        "\"bx\"",
        "\"ldr\"",
        "\"add\"",
        "\" pc}\"",
        "\"lr\"",
        "\"pc\"",
        "\"eq\"",
        "\"ne\"",
        "\"lt\"",
        "\"le\"",
        "\"gt\"",
        "\"ge\"",
        "\"vs\"",
        "\"vc\"",
        "\"mi\"",
        "\"pl\"",
        "\"hi\"",
        "\"ls\"",
        "\"cc\"",
        "\"cs\"",
        "\"\"",
        "\"eq\"",
        "\"zero\"",
        "\"Z\"",
        "\"ne\"",
        "\"zero\"",
        "\"!Z\"",
        "\"lt\"",
        "\"negative\"",
        "\"overflow\"",
        "\"N!=V\"",
        "\"le\"",
        "\"zero\"",
        "\"negative\"",
        "\"overflow\"",
        "\"Z || N!=V\"",
        "\"gt\"",
        "\"zero\"",
        "\"negative\"",
        "\"overflow\"",
        "\"!Z && N==V\"",
        "\"ge\"",
        "\"negative\"",
        "\"overflow\"",
        "\"N==V\"",
        "\"vs\"",
        "\"overflow\"",
        "\"V\"",
        "\"vc\"",
        "\"overflow\"",
        "\"!V\"",
        "\"mi\"",
        "\"negative\"",
        "\"N\"",
        "\"pl\"",
        "\"negative\"",
        "\"N==0\"",
        "\"hi\"",
        "\"carry\"",
        "\"zero\"",
        "\"C && !Z\"",
        "\"ls\"",
        "\"carry\"",
        "\"zero\"",
        "\"!C || Z\"",
        "\"cs\"",
        "\"carry\"",
        "\"C\"",
        "\"cc\"",
        "\"carry\"",
        "\"!C\"",
        "\"pop\"",
        "\"ldr\"",
        "\"$lr\"",
        "\"push {r0-r2, r7}\"",
        "\"mov r0, {:d}\"",
        "\"mov r1, {:d}\"",
        "\"mov r2, {:d}\"",
        "\"mov r7, {:d}\"",
        "\"svc 0\"",
        "\"pop {r0-r2, r7}\"",
        "\"; \"",
        "\"ARM64\"",
        "\"ARM\"",
        "\"$x0\"",
        "\"$x1\"",
        "\"$x2\"",
        "\"$x3\"",
        "\"$x4\"",
        "\"$x5\"",
        "\"$x6\"",
        "\"$x7\"",
        "\"$x8\"",
        "\"$x9\"",
        "\"$x10\"",
        "\"$x11\"",
        "\"$x12\"",
        "\"$x13\"",
        "\"$x14\"",
        "\"$x15\"",
        "\"$x16\"",
        "\"$x17\"",
        "\"$x18\"",
        "\"$x19\"",
        "\"$x20\"",
        "\"$x21\"",
        "\"$x22\"",
        "\"$x23\"",
        "\"$x24\"",
        "\"$x25\"",
        "\"$x26\"",
        "\"$x27\"",
        "\"$x28\"",
        "\"$x29\"",
        "\"$x30\"",
        "\"$sp\"",
        "\"$pc\"",
        "\"$cpsr\"",
        "\"$fpsr\"",
        "\"$fpcr\"",
        "\"$x0\"",
        "\"$cpsr\"",
        "\"negative\"",
        "\"zero\"",
        "\"carry\"",
        "\"overflow\"",
        "\"interrupt\"",
        "\"fast\"",
        "\"$x0\"",
        "\"$x1\"",
        "\"$x2\"",
        "\"$x3\"",
        "\"$x4\"",
        "\"$x5\"",
        "\"$x6\"",
        "\"$x7\"",
        "\"$x8\"",
        "\"svc $x0\"",
        "\"bl\"",
        "\"blr\"",
        "\"str x8, [sp, -16]!\"",
        "\"str x0, [sp, -16]!\"",
        "\"str x1, [sp, -16]!\"",
        "\"str x2, [sp, -16]!\"",
        "\"mov x8, {:d}\"",
        "\"movz x0, 0x{:x}\"",
        "\"movk x0, 0x{:x}, lsl 16\"",
        "\"movk x0, 0x{:x}, lsl 32\"",
        "\"movk x0, 0x{:x}, lsl 48\"",
        "\"movz x1, 0x{:x}\"",
        "\"movk x1, 0x{:x}, lsl 16\"",
        "\"mov x2, {:d}\"",
        "\"svc 0\"",
        "\"ldr x2, [sp], 16\"",
        "\"ldr x1, [sp], 16\"",
        "\"ldr x0, [sp], 16\"",
        "\"ldr x8, [sp], 16\"",
        "\"; \"",
        "\"cbnz\"",
        "\"cbz\"",
        "\"tbnz\"",
        "\"tbz\"",
        "\"b.\"",
        "\"\"",
        "\"cbnz\"",
        "\"cbz\"",
        "\"tbnz\"",
        "\"tbz\"",
        "\"${}\"",
        "\"cbnz\"",
        "\"{}!=0\"",
        "\"{}==0\"",
        "\"cbz\"",
        "\"{}==0\"",
        "\"{}!=0\"",
        "\"tbnz\"",
        "\"#\"",
        "\"{}&1<<{}!=0\"",
        "\"{}&1<<{}==0\"",
        "\"tbz\"",
        "\"#\"",
        "\"{}&1<<{}==0\"",
        "\"{}&1<<{}!=0\"",
        "\"X86\"",
        "\"32\"",
        "b\"\\x90\"",
        "\"$eflags\"",
        "\"$cs\"",
        "\"$ss\"",
        "\"$ds\"",
        "\"$es\"",
        "\"$fs\"",
        "\"$gs\"",
        "\"$eax\"",
        "\"$ebx\"",
        "\"$ecx\"",
        "\"$edx\"",
        "\"$esp\"",
        "\"$ebp\"",
        "\"$esi\"",
        "\"$edi\"",
        "\"$eip\"",
        "\"$eax\"",
        "\"$esp\"",
        "\"zero\"",
        "\"carry\"",
        "\"parity\"",
        "\"adjust\"",
        "\"sign\"",
        "\"trap\"",
        "\"interrupt\"",
        "\"direction\"",
        "\"overflow\"",
        "\"resume\"",
        "\"virtualx86\"",
        "\"identification\"",
        "\"$eax\"",
        "\"sysenter\"",
        "\"int 0x80\"",
        "\"call\"",
        "\"callq\"",
        "\"ret\"",
        "\"ja\"",
        "\"jnbe\"",
        "\"jae\"",
        "\"jnb\"",
        "\"jnc\"",
        "\"jb\"",
        "\"jc\"",
        "\"jnae\"",
        "\"jbe\"",
        "\"jna\"",
        "\"jcxz\"",
        "\"jecxz\"",
        "\"jrcxz\"",
        "\"je\"",
        "\"jz\"",
        "\"jg\"",
        "\"jnle\"",
        "\"jge\"",
        "\"jnl\"",
        "\"jl\"",
        "\"jnge\"",
        "\"jle\"",
        "\"jng\"",
        "\"jne\"",
        "\"jnz\"",
        "\"jno\"",
        "\"jnp\"",
        "\"jpo\"",
        "\"jns\"",
        "\"jo\"",
        "\"jp\"",
        "\"jpe\"",
        "\"js\"",
        "\"\"",
        "\"ja\"",
        "\"jnbe\"",
        "\"carry\"",
        "\"zero\"",
        "\"!C && !Z\"",
        "\"jae\"",
        "\"jnb\"",
        "\"jnc\"",
        "\"carry\"",
        "\"!C\"",
        "\"jb\"",
        "\"jc\"",
        "\"jnae\"",
        "\"carry\"",
        "\"C\"",
        "\"jbe\"",
        "\"jna\"",
        "\"carry\"",
        "\"zero\"",
        "\"C || Z\"",
        "\"jcxz\"",
        "\"jecxz\"",
        "\"jrcxz\"",
        "\"$rcx\"",
        "\"$ecx\"",
        "\"!$CX\"",
        "\"je\"",
        "\"jz\"",
        "\"zero\"",
        "\"Z\"",
        "\"jne\"",
        "\"jnz\"",
        "\"zero\"",
        "\"!Z\"",
        "\"jg\"",
        "\"jnle\"",
        "\"zero\"",
        "\"overflow\"",
        "\"sign\"",
        "\"!Z && S==O\"",
        "\"jge\"",
        "\"jnl\"",
        "\"sign\"",
        "\"overflow\"",
        "\"S==O\"",
        "\"jl\"",
        "\"jnge\"",
        "\"overflow\"",
        "\"sign\"",
        "\"S!=O\"",
        "\"jle\"",
        "\"jng\"",
        "\"zero\"",
        "\"overflow\"",
        "\"sign\"",
        "\"Z || S!=O\"",
        "\"jo\"",
        "\"overflow\"",
        "\"O\"",
        "\"jno\"",
        "\"overflow\"",
        "\"!O\"",
        "\"jpe\"",
        "\"jp\"",
        "\"parity\"",
        "\"P\"",
        "\"jnp\"",
        "\"jpo\"",
        "\"parity\"",
        "\"!P\"",
        "\"js\"",
        "\"sign\"",
        "\"S\"",
        "\"jns\"",
        "\"sign\"",
        "\"!S\"",
        "\"pushad\"",
        "\"mov eax, {:d}\"",
        "\"mov ebx, {:d}\"",
        "\"mov ecx, {:d}\"",
        "\"mov edx, {:d}\"",
        "\"int 0x80\"",
        "\"popad\"",
        "\"; \"",
        "\"[sp + {:#x}]\"",
        "\"X86\"",
        "\"64\"",
        "\"$rax\"",
        "\"$rbx\"",
        "\"$rcx\"",
        "\"$rdx\"",
        "\"$rsp\"",
        "\"$rbp\"",
        "\"$rsi\"",
        "\"$rdi\"",
        "\"$rip\"",
        "\"$r8\"",
        "\"$r9\"",
        "\"$r10\"",
        "\"$r11\"",
        "\"$r12\"",
        "\"$r13\"",
        "\"$r14\"",
        "\"$r15\"",
        "\"$rax\"",
        "\"$rdi\"",
        "\"$rsi\"",
        "\"$rdx\"",
        "\"$rcx\"",
        "\"$r8\"",
        "\"$r9\"",
        "\"$rax\"",
        "\"syscall\"",
        "\"push rax\"",
        "\"push rdi\"",
        "\"push rsi\"",
        "\"push rdx\"",
        "\"mov rax, {:d}\"",
        "\"mov rdi, {:d}\"",
        "\"mov rsi, {:d}\"",
        "\"mov rdx, {:d}\"",
        "\"syscall\"",
        "\"pop rdx\"",
        "\"pop rsi\"",
        "\"pop rdi\"",
        "\"pop rax\"",
        "\"; \"",
        "\"PPC\"",
        "\"PPC32\"",
        "\"$r0\"",
        "\"$r1\"",
        "\"$r2\"",
        "\"$r3\"",
        "\"$r4\"",
        "\"$r5\"",
        "\"$r6\"",
        "\"$r7\"",
        "\"$r8\"",
        "\"$r9\"",
        "\"$r10\"",
        "\"$r11\"",
        "\"$r12\"",
        "\"$r13\"",
        "\"$r14\"",
        "\"$r15\"",
        "\"$r16\"",
        "\"$r17\"",
        "\"$r18\"",
        "\"$r19\"",
        "\"$r20\"",
        "\"$r21\"",
        "\"$r22\"",
        "\"$r23\"",
        "\"$r24\"",
        "\"$r25\"",
        "\"$r26\"",
        "\"$r27\"",
        "\"$r28\"",
        "\"$r29\"",
        "\"$r30\"",
        "\"$r31\"",
        "\"$pc\"",
        "\"$msr\"",
        "\"$cr\"",
        "\"$lr\"",
        "\"$ctr\"",
        "\"$xer\"",
        "\"$trap\"",
        "b\"\\x60\\x00\\x00\\x00\"",
        "\"$r0\"",
        "\"$cr\"",
        "\"negative[0]\"",
        "\"positive[0]\"",
        "\"equal[0]\"",
        "\"overflow[0]\"",
        "\"less[7]\"",
        "\"greater[7]\"",
        "\"equal[7]\"",
        "\"overflow[7]\"",
        "\"$i0\"",
        "\"$i1\"",
        "\"$i2\"",
        "\"$i3\"",
        "\"$i4\"",
        "\"$i5\"",
        "\"$r0\"",
        "\"sc\"",
        "\"blr\"",
        "\"beq\"",
        "\"bne\"",
        "\"ble\"",
        "\"blt\"",
        "\"bgt\"",
        "\"bge\"",
        "\"\"",
        "\"beq\"",
        "\"equal[7]\"",
        "\"E\"",
        "\"bne\"",
        "\"equal[7]\"",
        "\"!E\"",
        "\"ble\"",
        "\"equal[7]\"",
        "\"less[7]\"",
        "\"E || L\"",
        "\"blt\"",
        "\"less[7]\"",
        "\"L\"",
        "\"bge\"",
        "\"equal[7]\"",
        "\"greater[7]\"",
        "\"E || G\"",
        "\"bgt\"",
        "\"greater[7]\"",
        "\"G\"",
        "\"$lr\"",
        "\"addi 1, 1, -16\"",
        "\"stw 0, 0(1)\"",
        "\"stw 3, 4(1)\"",
        "\"stw 4, 8(1)\"",
        "\"stw 5, 12(1)\"",
        "\"li 0, {:d}\"",
        "\"lis 3, {:#x}@h\"",
        "\"ori 3, 3, {:#x}@l\"",
        "\"lis 4, {:#x}@h\"",
        "\"ori 4, 4, {:#x}@l\"",
        "\"li 5, {:d}\"",
        "\"sc\"",
        "\"lwz 0, 0(1)\"",
        "\"lwz 3, 4(1)\"",
        "\"lwz 4, 8(1)\"",
        "\"lwz 5, 12(1)\"",
        "\"addi 1, 1, 16\"",
        "\";\"",
        "\"PPC\"",
        "\"PPC64\"",
        "\"SPARC\"",
        "\"\"",
        "\"$g0\"",
        "\"$g1\"",
        "\"$g2\"",
        "\"$g3\"",
        "\"$g4\"",
        "\"$g5\"",
        "\"$g6\"",
        "\"$g7\"",
        "\"$o0\"",
        "\"$o1\"",
        "\"$o2\"",
        "\"$o3\"",
        "\"$o4\"",
        "\"$o5\"",
        "\"$o7\"",
        "\"$l0\"",
        "\"$l1\"",
        "\"$l2\"",
        "\"$l3\"",
        "\"$l4\"",
        "\"$l5\"",
        "\"$l6\"",
        "\"$l7\"",
        "\"$i0\"",
        "\"$i1\"",
        "\"$i2\"",
        "\"$i3\"",
        "\"$i4\"",
        "\"$i5\"",
        "\"$i7\"",
        "\"$pc\"",
        "\"$npc\"",
        "\"$sp \"",
        "\"$fp \"",
        "\"$psr\"",
        "b\"\\x00\\x00\\x00\\x00\"",
        "\"$i0\"",
        "\"$psr\"",
        "\"negative\"",
        "\"zero\"",
        "\"overflow\"",
        "\"carry\"",
        "\"supervisor\"",
        "\"trap\"",
        "\"$o0 \"",
        "\"$o1 \"",
        "\"$o2 \"",
        "\"$o3 \"",
        "\"$o4 \"",
        "\"$o5 \"",
        "\"$o7 \"",
        "\"%g1\"",
        "\"t 0x10\"",
        "\"ret\"",
        "\"be\"",
        "\"bne\"",
        "\"bg\"",
        "\"bge\"",
        "\"bgeu\"",
        "\"bgu\"",
        "\"bl\"",
        "\"ble\"",
        "\"blu\"",
        "\"bleu\"",
        "\"bneg\"",
        "\"bpos\"",
        "\"bvs\"",
        "\"bvc\"",
        "\"bcs\"",
        "\"bcc\"",
        "\"\"",
        "\"be\"",
        "\"zero\"",
        "\"Z\"",
        "\"bne\"",
        "\"zero\"",
        "\"!Z\"",
        "\"bg\"",
        "\"zero\"",
        "\"negative\"",
        "\"overflow\"",
        "\"!Z && (!N || !O)\"",
        "\"bge\"",
        "\"negative\"",
        "\"overflow\"",
        "\"!N || !O\"",
        "\"bgu\"",
        "\"carry\"",
        "\"zero\"",
        "\"!C && !Z\"",
        "\"bgeu\"",
        "\"carry\"",
        "\"!C\"",
        "\"bl\"",
        "\"negative\"",
        "\"overflow\"",
        "\"N && O\"",
        "\"blu\"",
        "\"carry\"",
        "\"C\"",
        "\"ble\"",
        "\"zero\"",
        "\"negative\"",
        "\"overflow\"",
        "\"Z || (N || O)\"",
        "\"bleu\"",
        "\"carry\"",
        "\"zero\"",
        "\"C || Z\"",
        "\"bneg\"",
        "\"negative\"",
        "\"N\"",
        "\"bpos\"",
        "\"negative\"",
        "\"!N\"",
        "\"bvs\"",
        "\"overflow\"",
        "\"O\"",
        "\"bvc\"",
        "\"overflow\"",
        "\"!O\"",
        "\"bcs\"",
        "\"carry\"",
        "\"C\"",
        "\"bcc\"",
        "\"carry\"",
        "\"!C\"",
        "\"$o7\"",
        "\"add %sp, -16, %sp\"",
        "\"st %g1, [ %sp ]\"",
        "\"st %o0, [ %sp + 4 ]\"",
        "\"st %o1, [ %sp + 8 ]\"",
        "\"st %o2, [ %sp + 12 ]\"",
        "\"sethi  %hi({}), %o0\"",
        "\"or  %o0, {}, %o0\"",
        "\"clr  %o1\"",
        "\"clr  %o2\"",
        "\"mov  {}, %g1\"",
        "\"t 0x10\"",
        "\"ld [ %sp ], %g1\"",
        "\"ld [ %sp + 4 ], %o0\"",
        "\"ld [ %sp + 8 ], %o1\"",
        "\"ld [ %sp + 12 ], %o2\"",
        "\"add %sp, 16, %sp\"",
        "\"; \"",
        "\"SPARC\"",
        "\"V9\"",
        "\"$g0\"",
        "\"$g1\"",
        "\"$g2\"",
        "\"$g3\"",
        "\"$g4\"",
        "\"$g5\"",
        "\"$g6\"",
        "\"$g7\"",
        "\"$o0\"",
        "\"$o1\"",
        "\"$o2\"",
        "\"$o3\"",
        "\"$o4\"",
        "\"$o5\"",
        "\"$o7\"",
        "\"$l0\"",
        "\"$l1\"",
        "\"$l2\"",
        "\"$l3\"",
        "\"$l4\"",
        "\"$l5\"",
        "\"$l6\"",
        "\"$l7\"",
        "\"$i0\"",
        "\"$i1\"",
        "\"$i2\"",
        "\"$i3\"",
        "\"$i4\"",
        "\"$i5\"",
        "\"$i7\"",
        "\"$pc\"",
        "\"$npc\"",
        "\"$sp\"",
        "\"$fp\"",
        "\"$state\"",
        "\"$state\"",
        "\"negative\"",
        "\"zero\"",
        "\"overflow\"",
        "\"carry\"",
        "\"t 0x6d\"",
        "\"add %sp, -16, %sp\"",
        "\"st %g1, [ %sp ]\"",
        "\"st %o0, [ %sp + 4 ]\"",
        "\"st %o1, [ %sp + 8 ]\"",
        "\"st %o2, [ %sp + 12 ]\"",
        "\"sethi  %hi({}), %o0\"",
        "\"or  %o0, {}, %o0\"",
        "\"clr  %o1\"",
        "\"clr  %o2\"",
        "\"mov  {}, %g1\"",
        "\"t 0x6d\"",
        "\"ld [ %sp ], %g1\"",
        "\"ld [ %sp + 4 ], %o0\"",
        "\"ld [ %sp + 8 ], %o1\"",
        "\"ld [ %sp + 12 ], %o2\"",
        "\"add %sp, 16, %sp\"",
        "\"; \"",
        "\"MIPS\"",
        "\"MIPS32\"",
        "\"$zero\"",
        "\"$at\"",
        "\"$v0\"",
        "\"$v1\"",
        "\"$a0\"",
        "\"$a1\"",
        "\"$a2\"",
        "\"$a3\"",
        "\"$t0\"",
        "\"$t1\"",
        "\"$t2\"",
        "\"$t3\"",
        "\"$t4\"",
        "\"$t5\"",
        "\"$t6\"",
        "\"$t7\"",
        "\"$s0\"",
        "\"$s1\"",
        "\"$s2\"",
        "\"$s3\"",
        "\"$s4\"",
        "\"$s5\"",
        "\"$s6\"",
        "\"$s7\"",
        "\"$t8\"",
        "\"$t9\"",
        "\"$k0\"",
        "\"$k1\"",
        "\"$s8\"",
        "\"$pc\"",
        "\"$sp\"",
        "\"$hi\"",
        "\"$lo\"",
        "\"$fir\"",
        "\"$ra\"",
        "\"$gp\"",
        "b\"\\x00\\x00\\x00\\x00\"",
        "\"$v0\"",
        "\"$fcsr\"",
        "\"$a0\"",
        "\"$a1\"",
        "\"$a2\"",
        "\"$a3\"",
        "\"$v0\"",
        "\"syscall\"",
        "\"No flag register\"",
        "\"yellow underline\"",
        "\"jr\"",
        "\"ra\"",
        "\"beq\"",
        "\"bne\"",
        "\"beqz\"",
        "\"bnez\"",
        "\"bgtz\"",
        "\"bgez\"",
        "\"bltz\"",
        "\"blez\"",
        "\"\"",
        "\"beq\"",
        "\"{0[0]} == {0[1]}\"",
        "\"bne\"",
        "\"{0[0]} != {0[1]}\"",
        "\"beqz\"",
        "\"{0[0]} == 0\"",
        "\"bnez\"",
        "\"{0[0]} != 0\"",
        "\"bgtz\"",
        "\"{0[0]} > 0\"",
        "\"bgez\"",
        "\"{0[0]} >= 0\"",
        "\"bltz\"",
        "\"{0[0]} < 0\"",
        "\"blez\"",
        "\"{0[0]} <= 0\"",
        "\"$ra\"",
        "\"addi $sp, $sp, -16\"",
        "\"sw $v0, 0($sp)\"",
        "\"sw $a0, 4($sp)\"",
        "\"sw $a3, 8($sp)\"",
        "\"sw $a3, 12($sp)\"",
        "\"li $v0, {:d}\"",
        "\"li $a0, {:d}\"",
        "\"li $a1, {:d}\"",
        "\"li $a2, {:d}\"",
        "\"syscall\"",
        "\"lw $v0, 0($sp)\"",
        "\"lw $a1, 4($sp)\"",
        "\"lw $a3, 8($sp)\"",
        "\"lw $a3, 12($sp)\"",
        "\"addi $sp, $sp, 16\"",
        "\"; \"",
        "\"unicode_escape\"",
        "\"char\"",
        "\"utf-8\"",
        "\"\\x00\"",
        "\"\\n\"",
        "\"\\\\n\"",
        "\"\\r\"",
        "\"\\\\r\"",
        "\"\\t\"",
        "\"\\\\t\"",
        "\"{}[...]\"",
        "\"{}B\"",
        "\"{}b\"",
        "\"{}H\"",
        "\"{}h\"",
        "\"{}I\"",
        "\"{}i\"",
        "\"{}Q\"",
        "\"{}q\"",
        "\"{}B\"",
        "\"{}b\"",
        "\"{}H\"",
        "\"{}h\"",
        "\"{}I\"",
        "\"{}i\"",
        "\"{}Q\"",
        "\"{}q\"",
        "\"No debugging session active\"",
        "\"This command cannot work for remote sessions.\"",
        "\"This feature is under development, expect bugs and unstability...\"",
        "\"GDB >= {} for this command\"",
        "\"-\"",
        "\"store_true\"",
        "\"store_false\"",
        "'*'",
        "'?'",
        "\"-\"",
        "\"store_true\"",
        "\"store_false\"",
        "\"arguments\"",
        "\"linux\"",
        "\"xclip\"",
        "\"-selection\"",
        "\"clipboard\"",
        "\"-i\"",
        "\"darwin\"",
        "\"pbcopy\"",
        "\"copy: Unsupported OS\"",
        "\"uint32_t\"",
        "\"uint64_t\"",
        "\"uint16_t\"",
        "\"unsigned int\"",
        "\"unsigned long\"",
        "\"unsigned short\"",
        "\"uint32\"",
        "\"uint64\"",
        "\"uint16\"",
        "\"u32\"",
        "\"u64\"",
        "\"u16\"",
        "'sp'",
        "\"$\"",
        "\"info proc\"",
        "\"exe = \"",
        "\" = \"",
        "\"'\"",
        "\"\"",
        "\"/proc/{:d}/exe\"",
        "\"target:\"",
        "\"target:\"",
        "\".gnu_debugdata for target:\"",
        "\".gnu_debugdata for target:\"",
        "\"/tmp/gef/{:d}/{:s}\"",
        "\"info files\"",
        "\"file type mach-o\"",
        "\"file\"",
        "\"Mach-O\"",
        "\"gef.tempdir\"",
        "\"remote get {0:s} {1:s}\"",
        "\"w\"",
        "\"00000000-ffffffff rwxp 00000000 00:00 0                    {}\\n\"",
        "\"0000000000000000-ffffffffffffffff rwxp 00000000 00:00 0                    {}\\n\"",
        "\"download_file() failed: {}\"",
        "\"cannot open remote path {:s}\"",
        "\"r\"",
        "\"disassemble {:s}\"",
        "\" \"",
        "\" \"",
        "\"\"",
        "\"-\"",
        "\"info mach-regions\"",
        "\" \"",
        "\"-\"",
        "\"/\"",
        "\"[stack]\"",
        "\"\"",
        "\"/proc/{:d}/maps\"",
        "\"Failed to read /proc/<PID>/maps, using GDB sections info: {}\"",
        "\"maintenance info sections\"",
        "\"->\"",
        "\"\"",
        "\"info files\"",
        "\"0x\"",
        "\" \"",
        "\"Process is not running\"",
        "\"Process is not running\"",
        "\"0x\"",
        "\"0x\"",
        "\"0X\"",
        "\"ida-interact sync\"",
        "\"context\"",
        "\"gef-remote.clean_on_exit\"",
        "\"/tmp/gef/{:d}\"",
        "\"context.libc_args\"",
        "\"context.libc_args_path\"",
        "\"Config `context.libc_args_path` not set but `context.libc_args` is True. Make sure you have `gef-extras` installed\"",
        "\"Config `context.libc_args_path` set but it's not a directory\"",
        "\"{}_{}\"",
        "\"{}/{}.json\"",
        "\"Config context.libc_args is set but definition cannot be loaded: file {} not found\"",
        "\"Config context.libc_args is set but definition cannot be loaded from file {}: {}\"",
        "\"Windows\"",
        "\"hhhhHhhhhhh\"",
        "\"hh\"",
        "\"1234\"",
        "\"{:s}.{:s}_ARCH_{:s}\"",
        "\"{:s}.{:s}_MODE_{:s}\"",
        "\"\"",
        "\" + {:s}.{:s}_MODE_BIG_ENDIAN\"",
        "\" + {:s}.{:s}_MODE_LITTLE_ENDIAN\"",
        "\"{:s}_ARCH_{:s}\"",
        "\"{:s}_MODE_{:s}\"",
        "\"{:s}_MODE_BIG_ENDIAN\"",
        "\"{:s}_MODE_LITTLE_ENDIAN\"",
        "\"Emulation not supported for your OS\"",
        "\"unicorn\"",
        "\"UC\"",
        "\"UC\"",
        "\"capstone\"",
        "\"Capstone not supported for PPC64 yet.\"",
        "\"PPC\"",
        "\"32\"",
        "\"CS\"",
        "\"CS\"",
        "\"CS\"",
        "\"keystone\"",
        "\"KS\"",
        "\"KS\"",
        "\"Return a dict matching the Unicorn identifier for a specific register.\"",
        "\"unicorn\"",
        "\"Oops\"",
        "\"{}_const\"",
        "\"UC_{:s}_REG_{:s}\"",
        "\"{:s}.{:s}\"",
        "\"keystone\"",
        "\"addr\"",
        "\"Keystone assembler error: {:s}\"",
        "\"\"",
        "\"raw\"",
        "b\"\\\\x\"",
        "b\"\\\\x\"",
        "\"utf-8\"",
        "\"target:\"",
        "\"Your file is remote, you should try using `gef-remote` instead\"",
        "\"void\"",
        "\"uintptr_t\"",
        "\"i386:x86-64\"",
        "\"i386\"",
        "\"ARM\"",
        "\"AARCH64\"",
        "\"ARM64\"",
        "\"X86\"",
        "\"X86_64\"",
        "\"i386:x86-64\"",
        "\"PowerPC\"",
        "\"PPC\"",
        "\"PowerPC64\"",
        "\"PPC64\"",
        "\"RISCV\"",
        "\"SPARC\"",
        "\"SPARC64\"",
        "\"MIPS\"",
        "\"Specified arch {:s} is not supported\"",
        "\"CPU not supported, neither is default {:s}\"",
        "\"CPU type is currently not supported: {:s}\"",
        "\"size_t\"",
        "\"$pc\"",
        "\"GEF is running under an unsupported mode\"",
        "\"\"",
        "\"shell clear -x\"",
        "\"wt\"",
        "\"\\x1b[H\\x1b[J\"",
        "\"context.redirect\"",
        "\"\"",
        "\"0x{:08x}\"",
        "\"0x{:016x}\"",
        "\"0x{:x}\"",
        "\"0x{:x}\"",
        "\"<\"",
        "\">\"",
        "\"remote\"",
        "\"maintenance print target-stack\"",
        "b\"abcdefghijklmnopqrstuvwxyz\"",
        "\"$_gef{:d}\"",
        "\"-\"",
        "\"info auxv\"",
        "\"AT_PLATFORM\"",
        "\"AT_EXECFN\"",
        "'\"'",
        "\"AT_RANDOM\"",
        "\"AT_PAGESZ\"",
        "\"events\"",
        "\"GDB events cannot be set\"",
        "\"cont\"",
        "\"cont\"",
        "\"stop\"",
        "\"stop\"",
        "\"exited\"",
        "\"exited\"",
        "\"new_objfile\"",
        "\"new_objfile\"",
        "\"memory_changed\"",
        "\"memory_changed\"",
        "\"register_changed\"",
        "\"register_changed\"",
        "\"Breakpoint\"",
        "\"Destroy PIE breakpoint not even set\"",
        "\"delete {}\"",
        "\"Format string helper\"",
        "\"yellow bold\"",
        "\"Possible insecure format string: {:s}('{:s}' {:s} {:#x}: '{:s}')\"",
        "\"Reason: Call to '{:s}()' with format string argument in position \"",
        "\"#{:d} is in page {:#x} ({:s}) that has write permission\"",
        "\"warn\"",
        "\"\\n\"",
        "\"All calls to '{:s}' will be skipped\"",
        "\" (with return value set to {:#x})\"",
        "\"Ignoring call to '{:s}' \"",
        "\"(setting return value to {:#x})\"",
        "\"return (unsigned int){:#x}\"",
        "\"Restoring original context\"",
        "\"Restoring $pc\"",
        "\"set $pc = {:#x}\"",
        "\"{} - {}({})={:#x}\"",
        "\"Heap-Analysis\"",
        "\"yellow bold\"",
        "\"heap-analysis-helper.check_heap_overlap\"",
        "\"Heap-Analysis\"",
        "\"yellow bold\"",
        "\"Possible heap overlap detected\"",
        "\"Reason {} new allocated chunk {:#x} (of size {:d}) overlaps in-used chunk {:#x} (of size {:#x})\"",
        "\"Writing {0:d} bytes from {1:#x} will reach chunk {2:#x}\"",
        "\"Payload example for chunk {1:#x} (to overwrite {0:#x} headers):\"",
        "\"  data = 'A'*{0:d} + 'B'*{1:d} + 'C'*{1:d}\"",
        "\"warn\"",
        "\"\\n\"",
        "\"__libc_realloc\"",
        "\"{} - realloc({:#x}, {})={}\"",
        "\"Heap-Analysis\"",
        "\"yellow bold\"",
        "\"{:#x}\"",
        "\"green\"",
        "\"{} - realloc({:#x}, {})={}\"",
        "\"Heap-Analysis\"",
        "\"yellow bold\"",
        "\"{:#x}\"",
        "\"red\"",
        "\"Chunk {:#x} was not in tracking list\"",
        "\"__libc_free\"",
        "\"heap-analysis-helper.check_free_null\"",
        "\"heap-analysis-helper.check_double_free\"",
        "\"heap-analysis-helper.check_weird_free\"",
        "\"heap-analysis-helper.check_uaf\"",
        "\"{} - free({:#x})\"",
        "\"Heap-Analysis\"",
        "\"yellow bold\"",
        "\"Heap-Analysis\"",
        "\"yellow bold\"",
        "\"Attempting to free(NULL) at {:#x}\"",
        "\"Reason: if NULL page is allocatable, this can lead to code execution.\"",
        "\"warn\"",
        "\"\\n\"",
        "\"Heap-Analysis\"",
        "\"yellow bold\"",
        "\"Double-free detected {} free({:#x}) is called at {:#x} but is already in the free-ed list\"",
        "\"Execution will likely crash...\"",
        "\"warn\"",
        "\"\\n\"",
        "\"Heap-Analysis\"",
        "\"yellow bold\"",
        "\"Heap inconsistency detected:\"",
        "\"Attempting to free an unknown value: {:#x}\"",
        "\"warn\"",
        "\"\\n\"",
        "\"*{:#x}\"",
        "\"_int_malloc\"",
        "\"malloc_consolidate\"",
        "\"__libc_calloc\"",
        "\"Heap-Analysis\"",
        "\"yellow bold\"",
        "\"Possible Use-after-Free in '{:s}': pointer {:#x} was freed, but is attempted to be used at {:#x}\"",
        "\"{:#x}   {:s} {:s}\"",
        "\", \"",
        "\"warn\"",
        "\"\\n\"",
        "\"info\"",
        "\"Hit breakpoint {} ({})\"",
        "\"red bold\"",
        "\"\\nSyntax: \"",
        "\"\\nExample: \"",
        "\"\"",
        "\" \"",
        "\"\"",
        "\"command\"",
        "\"complete\"",
        "\"prefix\"",
        "\"Command '{:s}' failed to execute properly, reason: {:s}\"",
        "\"Syntax\\n{}\"",
        "\"\"",
        "\" \"",
        "\"-\"",
        "\"{:s}.{:s}\"",
        "\".\"",
        "\"{:s}.\"",
        "\"\"",
        "\"GenericCommand\"",
        "\"show commands\"",
        "\"\\n\"",
        "\"version\"",
        "\"{:s}\"",
        "\"{:s}\"",
        "\"rb\"",
        "\"{}/.git\"",
        "'git log --format=\"%H\" -n 1 HEAD'",
        "\"utf8\"",
        "\"dirty\"",
        "'git ls-files -m'",
        "\"utf8\"",
        "\"clean\"",
        "\"GEF: rev:{} (Git - {})\"",
        "\"GEF: (Standalone)\"",
        "\"SHA1({}): {}\"",
        "\"GDB: {}\"",
        "\"{:d}.{:d}\"",
        "\"GDB-Python: {}\"",
        "\"full\"",
        "\"Loaded commands: {}\"",
        "\", \"",
        "\"B\"",
        "\"char\"",
        "\"db\"",
        "\"H\"",
        "\"short\"",
        "\"dw\"",
        "\"I\"",
        "\"int\"",
        "\"dd\"",
        "\"Q\"",
        "\"long long\"",
        "\"dq\"",
        "\"py\"",
        "\"c\"",
        "\"js\"",
        "\"asm\"",
        "\"print-format\"",
        "\"pf\"",
        "\"{} --lang py -l 16 $rsp\"",
        "\"location\"",
        "\"$pc\"",
        "\"--length\"",
        "\"-l\"",
        "\"--bitlen\"",
        "\"--lang\"",
        "\"py\"",
        "\"--clip\"",
        "\"arguments\"",
        "\"Size of bit must be in: {}\"",
        "\"Language must be in: {}\"",
        "\", \"",
        "\"py\"",
        "\"buf = [{}]\"",
        "\"c\"",
        "\"unsigned {0} buf[{1}] = {{{2}}};\"",
        "\"js\"",
        "\"var buf = [{}]\"",
        "\"asm\"",
        "\"buf {0} {1}\"",
        "\"Copied to clipboard\"",
        "\"There's a problem while copying\"",
        "\"pie\"",
        "\"{:s} (breakpoint|info|delete|run|attach|remote)\"",
        "\"pie breakpoint\"",
        "\"{:s} BREAKPOINT\"",
        "\"expression\"",
        "\"\"",
        "\"arguments\"",
        "\"*\"",
        "\"&{}\"",
        "\"b *{}\"",
        "\"pie info\"",
        "\"{:s} BREAKPOINT\"",
        "\"breakpoints\"",
        "\"arguments\"",
        "\"VNum\\tNum\\tAddr\"",
        "\"{}\\t{}\\t{}\"",
        "\"N/A\"",
        "\"\\n\"",
        "\"pie delete\"",
        "\"{:s} [BREAKPOINT]\"",
        "\"breakpoints\"",
        "\"arguments\"",
        "\"delete {}\"",
        "\"pie run\"",
        "\"No executable to debug, use `file` to load a binary\"",
        "\"The file '{}' is not executable.\"",
        "\"gdb is already running. Restart process.\"",
        "\"set stop-on-solib-events 1\"",
        "\"run {}\"",
        "\" \"",
        "\"set stop-on-solib-events 0\"",
        "\"base address {}\"",
        "\"continue\"",
        "\"kill\"",
        "\"pie attach\"",
        "\"{:s} PID\"",
        "\"attach {}\"",
        "\" \"",
        "\"context\"",
        "\"pie remote\"",
        "\"{:s} REMOTE\"",
        "\"gef-remote {}\"",
        "\" \"",
        "\"context\"",
        "\"$\"",
        "\"{0:s} EXPR\\n{0:s} ADDRESS1 ADDRESS2\"",
        "\"\\n{0:s} $pc+1\\n{0:s} 0x00007ffff7a10000 0x00007ffff7bce000\"",
        "\"{:x}\"",
        "\"{:b}\"",
        "\"0\"",
        "\"{:d}\"",
        "\"0x\"",
        "\"0b\"",
        "\"{}\"",
        "\"{}\"",
        "\"{:d}\"",
        "\" \"",
        "\"{}\"",
        "\" \"",
        "\"{}\"",
        "\"Distance requires 2 numbers: {} 0 0xffff\"",
        "\"canary\"",
        "\"Canary\"",
        "\"This binary was not compiled with SSP.\"",
        "\"Failed to get the canary\"",
        "\"Found AT_RANDOM at {:#x}, reading {} bytes\"",
        "\"The canary of process {} is {:#x}\"",
        "\"process-status\"",
        "\"status\"",
        "\"/proc/{}/status\"",
        "\"r\"",
        "\":\"",
        "\"/proc/{}/cmdline\"",
        "\"r\"",
        "\"\\x00\"",
        "\"\\x20\"",
        "\"/proc/{}/exe\"",
        "\"ps\"",
        "\"-o\"",
        "\"pid\"",
        "\"--ppid\"",
        "\"{}\"",
        "\"--noheaders\"",
        "\"Process Information\"",
        "\"\\tPID {} {}\"",
        "\"\\tExecutable {} {}\"",
        "\"\\tCommand line {} '{}'\"",
        "\"Parent Process Information\"",
        "\"PPid\"",
        "\"\\tParent PID {} {}\"",
        "\"Pid\"",
        "\"\\tCommand line {} '{}'\"",
        "\"Children Process Information\"",
        "\"\\tNo child process\"",
        "\"Pid\"",
        "\"\\tPID {} {} (Name: '{}', CmdLine: '{}')\"",
        "\"/proc/{:d}/fd\"",
        "\"File Descriptors:\"",
        "\"\\tNo FD opened\"",
        "\"\\t{:s} {:s} {:s}\"",
        "\"/proc/{:d}/fd\"",
        "\"socket:\"",
        "\"socket:\"",
        "\"\"",
        "\":\"",
        "\"<I\"",
        "\"TCP_ESTABLISHED\"",
        "\"TCP_SYN_SENT\"",
        "\"TCP_SYN_RECV\"",
        "\"TCP_FIN_WAIT1\"",
        "\"TCP_FIN_WAIT2\"",
        "\"TCP_TIME_WAIT\"",
        "\"TCP_CLOSE\"",
        "\"TCP_CLOSE_WAIT\"",
        "\"TCP_LAST_ACK\"",
        "\"TCP_LISTEN\"",
        "\"TCP_CLOSING\"",
        "\"TCP_NEW_SYN_RECV\"",
        "\"UDP_LISTEN\"",
        "\"Network Connections\"",
        "\"\\tNo open connections\"",
        "\"TCP\"",
        "\"/proc/{:d}/net/tcp\"",
        "\"r\"",
        "\"UDP\"",
        "\"/proc/{:d}/net/udp\"",
        "\"r\"",
        "\"TCP\"",
        "\"\\t{}:{} {} {}:{} ({})\"",
        "\"theme\"",
        "\"{:s} [KEY [VALUE]]\"",
        "\"context_title_line\"",
        "\"gray\"",
        "\"Color of the borders in context window\"",
        "\"context_title_message\"",
        "\"cyan\"",
        "\"Color of the title in context window\"",
        "\"default_title_line\"",
        "\"gray\"",
        "\"Default color of borders\"",
        "\"default_title_message\"",
        "\"cyan\"",
        "\"Default color of title\"",
        "\"table_heading\"",
        "\"blue\"",
        "\"Color of the column headings to tables (e.g. vmmap)\"",
        "\"old_context\"",
        "\"gray\"",
        "\"Color to use to show things such as code that is not immediately relevant\"",
        "\"disassemble_current_instruction\"",
        "\"green\"",
        "\"Color to use to highlight the current $pc when disassembling\"",
        "\"dereference_string\"",
        "\"yellow\"",
        "\"Color of dereferenced string\"",
        "\"dereference_code\"",
        "\"gray\"",
        "\"Color of dereferenced code\"",
        "\"dereference_base_address\"",
        "\"cyan\"",
        "\"Color of dereferenced address\"",
        "\"dereference_register_value\"",
        "\"bold blue\"",
        "\"Color of dereferenced register\"",
        "\"registers_register_name\"",
        "\"blue\"",
        "\"Color of the register name in the register window\"",
        "\"registers_value_changed\"",
        "\"bold red\"",
        "\"Color of the changed register in the register window\"",
        "\"address_stack\"",
        "\"pink\"",
        "\"Color to use when a stack address is found\"",
        "\"address_heap\"",
        "\"green\"",
        "\"Color to use when a heap address is found\"",
        "\"address_code\"",
        "\"red\"",
        "\"Color to use when a code address is found\"",
        "\"source_current_line\"",
        "\"green\"",
        "\"Color to use for the current code line in the source window\"",
        "\"{:40s}: {:s}\"",
        "\"Invalid key\"",
        "\"{:40s}: {:s}\"",
        "\" \"",
        "\"pcustom\"",
        "\"{:s} [list|edit <StructureName>|show <StructureName>]|<StructureName> 0xADDRESS]\"",
        "\"struct_path\"",
        "\"gef.tempdir\"",
        "\"structs\"",
        "\"Path to store/load the structure ctypes files\"",
        "\"max_depth\"",
        "\"Maximum level of recursion supported\"",
        "\"structure_name\"",
        "\"bold blue\"",
        "\"Color of the structure name\"",
        "\"structure_type\"",
        "\"bold red\"",
        "\"Color of the attribute type\"",
        "\"structure_size\"",
        "\"green\"",
        "\"Color of the attribute size\"",
        "\"pcustom list\"",
        "\"pcustom show {}\"",
        "\"Failed to parse '{:s}'\"",
        "\"pcustom.struct_path\"",
        "\"setting `struct_path` must be set correctly\"",
        "\"no file for structure '{}'\"",
        "\":\"",
        "\":\"",
        "\".\"",
        "\".\"",
        "\"Invalid structure name '{:s}'\"",
        "\"max_depth\"",
        "\"maximum recursion level reached\"",
        "\"{}Cannot reach memory {:#x}\"",
        "\" \"",
        "\"  \"",
        "\"{:#x}+0x{:04x} {} : \"",
        "\"{} ({})\"",
        "\" {} {}\"",
        "\"\"",
        "\"LP_\"",
        "\"LP_\"",
        "\"\"",
        "\"_values_\"",
        "\"\"",
        "\"_values_\"",
        "\"\"",
        "\"Error while trying to obtain values from _values_[\\\"{}\\\"]\"",
        "\".py\"",
        "\"__init__\"",
        "\".py\"",
        "\"\"",
        "\"BigEndianStructure\"",
        "\"LittleEndianStructure\"",
        "\"Structure\"",
        "\"pcustom list\"",
        "\"{:s}\"",
        "\"Listing custom structures from '{:s}'\"",
        "\"pcustom.structure_type\"",
        "\"pcustom.structure_name\"",
        "\", \"",
        "\"{:s} {:s} ({:s})\"",
        "\"pcustom show\"",
        "\"{:s} StructureName\"",
        "\"pcustom create\"",
        "\"pcustom update\"",
        "\"ptype struct {:s}\"",
        "\"Invalid structure name '{:s}'\"",
        "\"pcustom.structure_name\"",
        "\"pcustom.structure_type\"",
        "\"pcustom.structure_size\"",
        "\"{:04x}\"",
        "\"{:s}   {:32s}   {:16s}  /* size={:s} */\"",
        "\"pcustom edit\"",
        "\"{:s} StructureName\"",
        "\"pcustom create\"",
        "\"pcustom new\"",
        "\"pcustom update\"",
        "\"Invalid struct path\"",
        "\"Editing '{:s}'\"",
        "\".py\"",
        "\"Creating '{:s}' from template\"",
        "\"EDITOR\"",
        "\"nano\"",
        "\"from ctypes import *\"",
        "\"\"",
        "\"class \"",
        "\"(Structure):\"",
        "\"    _fields_ = []\"",
        "\"\"",
        "\"    _values_ = []\"",
        "\"\"",
        "\"w\"",
        "\"hijack-fd\"",
        "\"{:s} FD_NUM NEW_OUTPUT\"",
        "\"{:s} 2 /tmp/stderr_output.txt\"",
        "\"/proc/{:d}/fd/{:s}\"",
        "\":\"",
        "\":\"",
        "\":\"",
        "\"[stack]\"",
        "\"\\x02\\x00\"",
        "\"<H\"",
        "\"Trying to connect to {}\"",
        "\"Failed to connect to {}:{}\"",
        "\"Connected to {}\"",
        "\"Opened '{:s}' as fd #{:d}\"",
        "\"Duplicated fd #{:d}{:s}#{:d}\"",
        "\"Closed extra fd #{:d}\"",
        "\"Success\"",
        "\"ida-interact\"",
        "\"{:s} METHOD [ARGS]\"",
        "\"binaryninja-interact\"",
        "\"bn\"",
        "\"binja\"",
        "\"\\n{0:s} Jump $pc\\n{0:s} SetColor $pc ff00ff\"",
        "\"127.0.0.1\"",
        "\"host\"",
        "\"IP address to use connect to IDA/Binary Ninja script\"",
        "\"port\"",
        "\"Port to use connect to IDA/Binary Ninja script\"",
        "\"sync_cursor\"",
        "\"Enable real-time $pc synchronisation\"",
        "\"\"",
        "\"\"",
        "\"host\"",
        "\"port\"",
        "\"http://{:s}:{:d}\"",
        "\"Failed to connect to '{:s}:{:d}'\"",
        "\"{:#x}\"",
        "\"-h\"",
        "\"--help\"",
        "\"version\"",
        "\"Enhancing {:s} with {:s} (SDK {:s})\"",
        "\"gef\"",
        "\"sync\"",
        "\"importstruct\"",
        "\"sync_cursor\"",
        "\"jump\"",
        "\"*\"",
        "\"{:#x}\"",
        "\"*{:#x}\"",
        "\"*\"",
        "\"Listing available methods and syntax examples: \"",
        "\"system.\"",
        "\"IDA Pro\"",
        "\"pcustom.struct_path\"",
        "\"{}.py\"",
        "\"w\"",
        "\"from ctypes import *\\n\\n\"",
        "\"class \"",
        "\"(Structure):\\n\"",
        "\"    _fields_ = [\\n\"",
        "\"utf-8\"",
        "\"c_uint8\"",
        "\"c_uint16\"",
        "\"c_uint32\"",
        "\"c_uint64\"",
        "\"c_byte * {}\"",
        "'        (\\\"{}\\\", {}),\\n'",
        "\"]\\n\"",
        "\"Success, {:d} structure{:s} imported\"",
        "\"s\"",
        "\"\"",
        "\"scan\"",
        "\"{:s} HAYSTACK NEEDLE\"",
        "\"lookup\"",
        "\"\\n{0:s} stack libc\"",
        "\"Searching for addresses in '{:s}' that point to '{:s}'\"",
        "\"binary\"",
        "\"binary\"",
        "\"0x\"",
        "\"\"",
        "\"0x\"",
        "\"\"",
        "\"yellow\"",
        "\"{:s}: {:s}\"",
        "\" {:s}\"",
        "\"search-pattern\"",
        "\"{:s} PATTERN [small|big] [section]\"",
        "\"grep\"",
        "\"xref\"",
        "\"\\n{0:s} AAAAAAAA\\n{0:s} 0x555555554000 little stack\\n{0:s}AAAA 0x600000-0x601000\"",
        "\"In \"",
        "\"'{}'\"",
        "\"({:#x}-{:#x})\"",
        "\", permission={}\"",
        "\"[...]\"",
        "\"[vvar]\"",
        "\"big\"",
        "\"small\"",
        "\"\"",
        "\"\\\\x\"",
        "\"\"",
        "\"\\\\x\"",
        "\"Searching '{:s}' in {:s}\"",
        "\"0x\"",
        "\"binary\"",
        "\"Searching '{:s}' in memory\"",
        "\"\"",
        "\"edit-flags\"",
        "\"{:s} [(+|-|~)FLAGNAME ...]\"",
        "\"flags\"",
        "\"\\n{0:s}\\n{0:s} +zero # sets ZERO flag\"",
        "\"+\"",
        "\"-\"",
        "\"~\"",
        "\"Invalid action for flag '{:s}'\"",
        "\"Invalid flag name '{:s}'\"",
        "\"+\"",
        "\"-\"",
        "\"set ({:s}) = {:#x}\"",
        "\"set-permission\"",
        "\"{:s} LOCATION [PERMISSION]\"",
        "\"mprotect\"",
        "\"{:s} $sp 7\"",
        "\"keystone\"",
        "\"Missing `keystone-engine` package, install with: `pip install keystone-engine`.\"",
        "\"Incorrect syntax\"",
        "\"Invalid address\"",
        "\"Unmapped address\"",
        "\"Generating sys_mprotect({:#x}, {:#x}, '{:s}') stub for arch {:s}\"",
        "\"Failed to generate mprotect opcodes\"",
        "\"Saving original code\"",
        "\"*{:#x}\"",
        "\"Setting a restore breakpoint at {:s}\"",
        "\"Overwriting current memory at {:#x} ({:d} bytes)\"",
        "\"Resuming execution\"",
        "\"continue\"",
        "\"unicorn-emulate\"",
        "\"emulate\"",
        "\"{0:s} --start $pc 10 --output-file /tmp/my-gef-emulation.py\"",
        "\"verbose\"",
        "\"Set unicorn-engine in verbose mode\"",
        "\"show_disassembly\"",
        "\"Show every instruction executed\"",
        "\"unicorn\"",
        "\"Missing `unicorn` package for Python. Install with `pip install unicorn`.\"",
        "\"capstone\"",
        "\"Missing `capstone` package for Python. Install with `pip install capstone`.\"",
        "\"nb\"",
        "\"--start\"",
        "\"--until\"",
        "\"--skip-emulation\"",
        "\"--output-file\"",
        "\"\"",
        "\"arguments\"",
        "\"verbose\"",
        "\"skip_emulation\"",
        "\"to_file\"",
        "\"\"",
        "\"\"",
        "\"w\"",
        "\".py\"",
        "\"gef-uc-\"",
        "\"python\"",
        "\",\"",
        "\"'%s': %s\"",
        "\"True\"",
        "\"False\"",
        "\"\"",
        "\"\"",
        "\"Duplicating registers\"",
        "\"    emu.reg_write({}, {:#x})\\n\"",
        "\"An error occurred when reading memory map.\"",
        "\"Duplicating memory map\"",
        "\"[vvar]\"",
        "\"    # Mapping {}: {:#x}-{:#x}\\n\"",
        "\"    emu.mem_map({:#x}, {:#x}, {})\\n\"",
        "\"/tmp/gef-{}-{:#x}.raw\"",
        "\"wb\"",
        "\"    emu.mem_write({:#x}, open('{}', 'rb').read())\\n\"",
        "\"\\n\"",
        "\"    emu.hook_add(unicorn.UC_HOOK_CODE, code_hook)\\n\"",
        "\"    emu.hook_add(unicorn.UC_HOOK_INTR, intr_hook)\\n\"",
        "\"    emu.hook_add(unicorn.UC_HOOK_INSN, syscall_hook, None, 1, 0, unicorn.x86_const.UC_X86_INS_SYSCALL)\\n\"",
        "\"    return emu\\n\"",
        "\"to_file\"",
        "\"Unicorn script generated as '{}'\"",
        "\"Starting emulation: {:#x} {} {:#x}\"",
        "\"python\"",
        "\"\\n\"",
        "\"to_file\"",
        "\"gef-remote\"",
        "\"{:s} [OPTIONS] TARGET\"",
        "\"\\n{0:s} -p 6789 localhost:1234\\n{0:s} -q localhost:4444 # when using qemu-user\"",
        "\"clean_on_exit\"",
        "\"Clean the temporary data downloaded when the session exits.\"",
        "\"target\"",
        "\"\"",
        "\"--update-solib\"",
        "\"--download-everything\"",
        "\"--download-lib\"",
        "\"\"",
        "\"--is-extended-remote\"",
        "\"--pid\"",
        "\"--qemu-mode\"",
        "\"You already are in remote session. Close it first before opening a new one...\"",
        "\"arguments\"",
        "\":\"",
        "\"A target (HOST:PORT) must always be provided.\"",
        "\"A PID (--pid) is required for extended remote debugging\"",
        "\"Attaching to {:d}\"",
        "\"attach {:d}\"",
        "\"Failed to establish remote target environment.\"",
        "\"/\"",
        "\"Failed to download {:s}\"",
        "\"Downloaded {:d} files\"",
        "\"Failed to download remote file\"",
        "\"Download success: {:s} {:s} {:s}\"",
        "\"target:\"",
        "\"target:\"",
        "\"Download success: {:s} {:s} {:s}\"",
        "\"reset-cache\"",
        "\"maps\"",
        "\"environ\"",
        "\"cmdline\"",
        "\"Failed to load memory map of '{:s}'\"",
        "\"exe\"",
        "\"/proc/{:d}/exe\"",
        "\"exe\"",
        "\"Source binary is not readable\"",
        "\"gef.tempdir\"",
        "\"root\"",
        "\"Path to store the remote data\"",
        "\"Remote information loaded to temporary path '{:s}'\"",
        "\"target {} {}\"",
        "\"extended-remote\"",
        "\"remote\"",
        "\"Connected to '{}'\"",
        "\"Failed to connect to {:s}: {:s}\"",
        "\"/proc/{:d}/{:s}\"",
        "\"root\"",
        "\":\"",
        "\"set solib-search-path {:s}\"",
        "\"\\n\\t   TARGET (mandatory) specifies the host:port, serial port or tty to connect to.\\n\"",
        "\"\\t-U will update gdb `solib-search-path` attribute to include the files downloaded from server (default: False).\\n\"",
        "\"\\t-A will download *ALL* the remote shared libraries and store them in the new environment. \"",
        "\"This command can take a few minutes to complete (default: False).\\n\"",
        "\"\\t-D LIB will download the remote library called LIB.\\n\"",
        "\"\\t-E Use 'extended-remote' to connect to the target.\\n\"",
        "\"\\t-p PID (mandatory if -E is used) specifies PID of the debugged process on gdbserver's end.\\n\"",
        "\"\\t-q Uses this option when connecting to a Qemu GDBserver.\\n\"",
        "\"arm\"",
        "\"aarch64\"",
        "\"i386:intel\"",
        "\"i386:x86-64\"",
        "\"mips\"",
        "\"powerpc\"",
        "\"sparc\"",
        "\"unsupported architecture: {}\"",
        "\"Setting Qemu-user stub for '{}' (memory mapping may be wrong)\"",
        "\"target remote {}\"",
        "\"ENABLE=1\"",
        "\"maintenance packet Qqemu.sstepbits\"",
        "\"Note: By using Qemu mode, GEF will display the memory mapping of the Qemu process where the emulated binary resides\"",
        "\"context\"",
        "\"nop\"",
        "\"{:s} $pc\"",
        "\"address\"",
        "\"--nb\"",
        "\"arguments\"",
        "\"Cannot patch instruction at {:#x} (nop_size is:{:d},insn_size is:{:d})\"",
        "\"Cannot patch instruction at {:#x} (nop instruction does not evenly fit in requested size)\"",
        "\"Patching {:d} bytes from {:s}\"",
        "\"stub\"",
        "\"{:s} --retval 0 fork\"",
        "\"address\"",
        "\"\"",
        "\"--retval\"",
        "\"arguments\"",
        "\"*{:#x}\"",
        "\"capstone-disassemble\"",
        "\"{:s} [LOCATION] [[length=LENGTH] [OPCODES] [option=VALUE]] \"",
        "\"cs-dis\"",
        "\"{:s} $pc length=50\"",
        "\"capstone\"",
        "\"Missing `capstone` package for Python. Install with `pip install capstone`.\"",
        "\"--location\"",
        "\"-l\"",
        "\"--show-opcodes\"",
        "\"-s\"",
        "\"--length\"",
        "\"arguments\"",
        "\"context.nb_lines_code\"",
        "\"{{:{}o}}\"",
        "\"{}\"",
        "\"\"",
        "\"{}   {}\"",
        "\"bold red\"",
        "\"{} {}\"",
        "\" \"",
        "\"[Reason: {:s}]\"",
        "\"\"",
        "\"\\tTAKEN {:s}\"",
        "\"bold green\"",
        "\"[Reason: !({:s})]\"",
        "\"\"",
        "\"\\tNOT taken {:s}\"",
        "\"bold red\"",
        "\"   {}  {}\"",
        "\" \"",
        "\"\\n\"",
        "\"\"",
        "\"heap\"",
        "\"{:s} (chunk|chunks|bins|arenas)\"",
        "\"heap set-arena\"",
        "\"{:s} LOCATION\"",
        "\"{:s} 0x001337001337\"",
        "\"Current main_arena set to: '{}'\"",
        "\"Invalid location\"",
        "\"0x\"",
        "\"Invalid location\"",
        "\"*{:s}\"",
        "\"heap arenas\"",
        "\"Could not find Glibc main arena\"",
        "\"{}\"",
        "\"heap chunk\"",
        "\"{:s} LOCATION\"",
        "\"Missing chunk address\"",
        "\"heap chunks\"",
        "\"{0} [LOCATION]\"",
        "\"\\n{0}\\n{0} 0x555555775000\"",
        "\"peek_nb_byte\"",
        "\"Hexdump N first byte(s) inside the chunk data (0 to disable)\"",
        "\"Heap not initialized\"",
        "\"No valid arena\"",
        "\"peek_nb_byte\"",
        "\"{} {} {}\"",
        "\"top chunk\"",
        "\"\\n    [\"",
        "\"]\"",
        "\"tcache\"",
        "\"fast\"",
        "\"unsorted\"",
        "\"small\"",
        "\"large\"",
        "\"heap bins\"",
        "\"{:s} [{:s}]\"",
        "\"|\"",
        "\"heap bins {:s}\"",
        "\"heap bins {}\"",
        "\"\"",
        "\"Invalid backward and forward bin pointers(fw==bk==NULL)\"",
        "\"{}bins[{:d}]: fw={:#x}, bk={:#x}\"",
        "\"{:s}  {:s}\"",
        "\"  \"",
        "\"heap bins tcache\"",
        "\"{:s} [all] [thread_ids...]\"",
        "\"No Tcache in this version of libc\"",
        "\"Couldn't find current thread\"",
        "\"all\"",
        "\"Uninitialized tcache for thread {:d}\"",
        "\"Tcachebins for thread {:d}\"",
        "\"{:s} {:s} \"",
        "\"{:s} [loop detected]\"",
        "\"{:s} [Corrupted chunk at {:#x}]\"",
        "\"Tcachebins[idx={:d}, size={:#x}] count={:d} \"",
        "\"\"",
        "\"\"",
        "\"All tcachebins are empty\"",
        "\"(void *) tcache\"",
        "\"No heap section\"",
        "\"Invalid thread id {:s}\"",
        "\"Unknown thread {}\"",
        "\"index should be less then TCACHE_MAX_BINS\"",
        "\"heap bins fast\"",
        "\"{:s} [ARENA_ADDRESS]\"",
        "\"*{:s}\"",
        "\"Invalid Glibc arena\"",
        "\"Fastbins for arena {:#x}\"",
        "\"Fastbins[idx={:d}, size={:#x}] \"",
        "\"\"",
        "\"0x00\"",
        "\"\"",
        "\"{:s} {:s} \"",
        "\"\"",
        "\"{:s} [loop detected]\"",
        "\"\"",
        "\"[incorrect fastbin_index] \"",
        "\"\"",
        "\"{:s} [Corrupted chunk at {:#x}]\"",
        "\"\"",
        "\"heap bins unsorted\"",
        "\"{:s} [ARENA_ADDRESS]\"",
        "\"Invalid Glibc arena\"",
        "\"*{:s}\"",
        "\"Unsorted Bin for arena '{:s}'\"",
        "\"unsorted_\"",
        "\"Found {:d} chunks in unsorted bin.\"",
        "\"heap bins small\"",
        "\"{:s} [ARENA_ADDRESS]\"",
        "\"Invalid Glibc arena\"",
        "\"*{:s}\"",
        "\"Small Bins for arena '{:s}'\"",
        "\"small_\"",
        "\"Found {:d} chunks in {:d} small non-empty bins.\"",
        "\"heap bins large\"",
        "\"{:s} [ARENA_ADDRESS]\"",
        "\"Invalid Glibc arena\"",
        "\"*{:s}\"",
        "\"Large Bins for arena '{:s}'\"",
        "\"large_\"",
        "\"Found {:d} chunks in {:d} large non-empty bins.\"",
        "\"ksymaddr\"",
        "\"{:s} SymbolToSearch\"",
        "\"{:s} prepare_creds\"",
        "\"/proc/kallsyms\"",
        "\"r\"",
        "\" \"",
        "\"Found matching symbol for '{:s}' at {:#x} (type={:s})\"",
        "\"Found partial match for '{:s}' at {:#x} (type={:s}): {:s}\"",
        "\"No match for '{:s}'\"",
        "\"registers\"",
        "\"{:s} [[Register1][Register2] ... [RegisterN]]\"",
        "\"\\n{0:s}\\n{0:s} $eax $eip $esp\"",
        "\"registers\"",
        "\"\"",
        "\"theme.registers_register_name\"",
        "\"theme.registers_value_changed\"",
        "\"theme.dereference_string\"",
        "\"arguments\"",
        "\"\"",
        "\" \"",
        "\"<unavailable>\"",
        "\"{}: \"",
        "\"no value\"",
        "\"yellow underline\"",
        "\"{}: \"",
        "\"0x{:04x} \"",
        "\"{}: \"",
        "\" {:s} \"",
        "\"{}{}\"",
        "\"I\"",
        "\"Q\"",
        "' (\"{:s}\"?)'",
        "\"shellcode\"",
        "\"{:s} (search|get)\"",
        "\"Missing sub-command (search|get)\"",
        "\"shellcode search\"",
        "\"{:s} PATTERN1 PATTERN2\"",
        "\"sc-search\"",
        "\"http://shell-storm.org\"",
        "\"{}/api/?s=\"",
        "\"Missing pattern to search\"",
        "\"*\"",
        "\"Could not query search page\"",
        "\"\\\\n\"",
        "\"::::\"",
        "\"Showing matching shellcodes\"",
        "\"\\t\"",
        "\"Id\"",
        "\"Platform\"",
        "\"Description\"",
        "\"\\t\"",
        "\"Use `shellcode get <id>` to fetch shellcode\"",
        "\"shellcode get\"",
        "\"{:s} SHELLCODE_ID\"",
        "\"sc-get\"",
        "\"http://shell-storm.org\"",
        "\"{}/shellcode/files/shellcode-{{:d}}.php\"",
        "\"Missing ID to download\"",
        "\"ID is not a number\"",
        "\"Downloading shellcode id={:d}\"",
        "\"Failed to fetch shellcode #{:d}\"",
        "\"Downloaded, written to disk...\"",
        "\".txt\"",
        "\"sc-\"",
        "\"/tmp\"",
        "b\"\\n\"",
        "b\"&quot;\"",
        "b'\"'",
        "\"Shellcode written to '{:s}'\"",
        "\"ropper\"",
        "\"{:s} [ROPPER_OPTIONS]\"",
        "\"ropper\"",
        "\"Missing `ropper` package for Python, install with: `pip install ropper`.\"",
        "\"ropper\"",
        "\"--file\"",
        "\"--file\"",
        "\"-I\"",
        "\"{:#x}\"",
        "\"assemble\"",
        "\"{:s} [-a ARCH] [-m MODE] [-e] [-s] [-l LOCATION] instruction;[instruction;...instruction;])\"",
        "\"asm\"",
        "\"\\n{0:s} -a x86 -m 32 nop ; nop ; inc eax ; int3\\n{0:s} -a arm -m arm add r0, r0, 1\"",
        "\"ARM\"",
        "\"ARM\"",
        "\"THUMB\"",
        "\"ARM64\"",
        "\"ARM\"",
        "\"THUMB\"",
        "\"V5\"",
        "\"V8\"",
        "\"MIPS\"",
        "\"MICRO\"",
        "\"MIPS3\"",
        "\"MIPS32\"",
        "\"MIPS32R6\"",
        "\"MIPS64\"",
        "\"PPC\"",
        "\"PPC32\"",
        "\"PPC64\"",
        "\"QPX\"",
        "\"SPARC\"",
        "\"SPARC32\"",
        "\"SPARC64\"",
        "\"V9\"",
        "\"SYSTEMZ\"",
        "\"32\"",
        "\"X86\"",
        "\"16\"",
        "\"32\"",
        "\"64\"",
        "\"default_architecture\"",
        "\"X86\"",
        "\"Specify the default architecture to use when assembling\"",
        "\"default_mode\"",
        "\"64\"",
        "\"Specify the default architecture to use when assembling\"",
        "\"keystone\"",
        "\"Missing `keystone-engine` package for Python, install with: `pip install keystone-engine`.\"",
        "\"\\nAvailable architectures/modes:\"",
        "\" - {} \"",
        "\"  * {}\"",
        "\" / \"",
        "\"instructions\"",
        "\"\"",
        "\"--mode\"",
        "\"\"",
        "\"--arch\"",
        "\"\"",
        "\"--overwrite-location\"",
        "\"--big-endian\"",
        "\"--as-shellcode\"",
        "\"default_architecture\"",
        "\"default_mode\"",
        "\"\"",
        "\"arguments\"",
        "\"No instruction given.\"",
        "\"big\"",
        "\"\"",
        "\"big\"",
        "\"invalid arch/mode\"",
        "\" \"",
        "\";\"",
        "\"Assembling {} instruction(s) for {}:{}\"",
        "b\"\"",
        "\"(Invalid)\"",
        "b\"\\\\x\"",
        "b\"\\\\x\"",
        "\"utf-8\"",
        "\"{0:60s} # {1}\"",
        "\"Overwriting {:d} bytes at {:s}\"",
        "\"process-search\"",
        "\"{:s} [REGEX_PATTERN]\"",
        "\"ps\"",
        "\"{:s} gdb.*\"",
        "\"ps\"",
        "\"ps_command\"",
        "\"{:s} auxww\"",
        "\"`ps` command to get process information\"",
        "\"pattern\"",
        "\"\"",
        "\"--attach\"",
        "\"--smart-scan\"",
        "\"arguments\"",
        "\"^.*$\"",
        "\"pid\"",
        "\"command\"",
        "\"[\"",
        "\"]\"",
        "\"socat \"",
        "\"grep \"",
        "\"gdb \"",
        "\"Attaching to process='{:s}' pid={:d}\"",
        "\"command\"",
        "\"attach {:d}\"",
        "\"pid\"",
        "\"user\"",
        "\"cpu\"",
        "\"mem\"",
        "\"tty\"",
        "\"command\"",
        "\"\\t\\t\"",
        "\"ps_command\"",
        "\"%\"",
        "\"\"",
        "\" \"",
        "\"elf-info\"",
        "\"{:s} [FILE]\"",
        "\"{:s} /bin/ls\"",
        "\"--filename\"",
        "\"\"",
        "\"arguments\"",
        "\"32-bit\"",
        "\"64-bit\"",
        "\"Little-Endian\"",
        "\"Big-Endian\"",
        "\"System V\"",
        "\"HP-UX\"",
        "\"NetBSD\"",
        "\"Linux\"",
        "\"Solaris\"",
        "\"AIX\"",
        "\"IRIX\"",
        "\"FreeBSD\"",
        "\"OpenBSD\"",
        "\"Relocatable\"",
        "\"Executable\"",
        "\"Shared\"",
        "\"Core\"",
        "\"x86-64\"",
        "\"x86\"",
        "\"ARM\"",
        "\"MIPS\"",
        "\"PowerPC\"",
        "\"PowerPC64\"",
        "\"SPARC\"",
        "\"SPARC64\"",
        "\"AArch64\"",
        "\"RISC-V\"",
        "\"IA-64\"",
        "\"Magic\"",
        "\"{0!s}\"",
        "\">I\"",
        "\"Class\"",
        "\"{0:#x} - {1}\"",
        "\"Endianness\"",
        "\"{0:#x} - {1}\"",
        "\"Version\"",
        "\"{:#x}\"",
        "\"OS ABI\"",
        "\"{0:#x} - {1}\"",
        "\"ABI Version\"",
        "\"{:#x}\"",
        "\"Type\"",
        "\"{0:#x} - {1}\"",
        "\"Machine\"",
        "\"{0:#x} - {1}\"",
        "\"Program Header Table\"",
        "\"{}\"",
        "\"Section Header Table\"",
        "\"{}\"",
        "\"Header Table\"",
        "\"{}\"",
        "\"ELF Version\"",
        "\"{:#x}\"",
        "\"Header size\"",
        "\"{0} ({0:#x})\"",
        "\"Entry point\"",
        "\"{}\"",
        "\"{}: {}\"",
        "\"{:<22}\"",
        "\"entry-break\"",
        "\"start\"",
        "\"entrypoint_symbols\"",
        "\"main _main __libc_start_main __uClibc_main start _start\"",
        "\"Possible symbols for entry points\"",
        "\"No executable to debug, use `file` to load a binary\"",
        "\"The file '{}' is not executable.\"",
        "\"gdb is already running\"",
        "\"entrypoint_symbols\"",
        "\"Breaking at '{:s}'\"",
        "\"run {}\"",
        "\" \"",
        "'The \"remote\" target does not support \"run\".'",
        "\"continue\"",
        "\"continue\"",
        "\"run {}\"",
        "\" \"",
        "\"Breaking at entry-point: {:#x}\"",
        "\"*{:#x}\"",
        "\"PIC binary detected, retrieving text base address\"",
        "\"set stop-on-solib-events 1\"",
        "\"run {}\"",
        "\" \"",
        "\"set stop-on-solib-events 0\"",
        "\"name-break\"",
        "\"{:s} NAME [LOCATION]\"",
        "\"nb\"",
        "\"{:s} main *0x4008a9\"",
        "\"name\"",
        "\"\"",
        "\"location\"",
        "\"\"",
        "\"arguments\"",
        "\"Missing name for breakpoint\"",
        "\"*{:#x}\"",
        "\"context\"",
        "\"{:s} [legend|regs|stack|code|args|memory|source|trace|threads|extra]\"",
        "\"ctx\"",
        "\"enable\"",
        "\"Enable/disable printing the context when breaking\"",
        "\"show_source_code_variable_values\"",
        "\"Show extra PC context info in the source code\"",
        "\"show_stack_raw\"",
        "\"Show the stack pane as raw hexdump (no dereference)\"",
        "\"show_registers_raw\"",
        "\"Show the registers pane with raw values (no dereference)\"",
        "\"show_opcodes_size\"",
        "\"Number of bytes of opcodes to display next to the disassembly\"",
        "\"peek_calls\"",
        "\"Peek into calls\"",
        "\"peek_ret\"",
        "\"Peek at return address\"",
        "\"nb_lines_stack\"",
        "\"Number of line in the stack pane\"",
        "\"grow_stack_down\"",
        "\"Order of stack downward starts at largest down to stack pointer\"",
        "\"nb_lines_backtrace\"",
        "\"Number of line in the backtrace pane\"",
        "\"nb_lines_backtrace_before\"",
        "\"Number of line in the backtrace pane before selected frame\"",
        "\"nb_lines_threads\"",
        "\"Number of line in the threads pane\"",
        "\"nb_lines_code\"",
        "\"Number of instruction after $pc\"",
        "\"nb_lines_code_prev\"",
        "\"Number of instruction before $pc\"",
        "\"ignore_registers\"",
        "\"\"",
        "\"Space-separated list of registers not to display (e.g. '$cs $ds $gs')\"",
        "\"clear_screen\"",
        "\"Clear the screen before printing the context\"",
        "\"layout\"",
        "\"legend regs stack code args source memory threads trace extra\"",
        "\"Change the order/presence of the context sections\"",
        "\"redirect\"",
        "\"\"",
        "\"Redirect the context information to another TTY\"",
        "\"libc_args\"",
        "\"Show libc function call args description\"",
        "\"libc_args_path\"",
        "\"\"",
        "\"Path to libc function call args json files, provided via gef-extras\"",
        "\"capstone\"",
        "\"use_capstone\"",
        "\"Use capstone as disassembler in the code pane (instead of GDB)\"",
        "\"legend\"",
        "\"regs\"",
        "\"stack\"",
        "\"code\"",
        "\"args\"",
        "\"memory\"",
        "\"source\"",
        "\"trace\"",
        "\"threads\"",
        "\"extra\"",
        "\"gef.disable_color\"",
        "\"theme.dereference_string\"",
        "\"theme.address_code\"",
        "\"theme.address_stack\"",
        "\"theme.address_heap\"",
        "\"theme.registers_value_changed\"",
        "\"[ Legend: {} | {} | {} | {} | {} ]\"",
        "\"Modified register\"",
        "\"Code\"",
        "\"Heap\"",
        "\"Stack\"",
        "\"String\"",
        "\"enable\"",
        "\"layout\"",
        "\"redirect\"",
        "\"-\"",
        "\"\"",
        "\"clear_screen\"",
        "\"theme.context_title_line\"",
        "\"theme.context_title_message\"",
        "\"\"",
        "\"{:{padd}<{width}} \"",
        "\"\"",
        "\" {:{padd}<4}\"",
        "\"\"",
        "\"registers\"",
        "\"ignore_registers\"",
        "\"show_registers_raw\"",
        "\" \"",
        "\"registers {}\"",
        "\"\"",
        "\"theme.registers_value_changed\"",
        "\"theme.registers_register_name\"",
        "\" \"",
        "\"{}: \"",
        "\"{}: \"",
        "\"{:s} \"",
        "\"{:s} \"",
        "\"{:s} \"",
        "\"\"",
        "\"Flags: {:s}\"",
        "\"stack\"",
        "\"show_stack_raw\"",
        "\"nb_lines_stack\"",
        "\"dereference {:#x} l{:d}\"",
        "\"Cannot read memory from $SP (corrupted stack pointer?)\"",
        "\"nb_lines_code\"",
        "\"nb_lines_code_prev\"",
        "\"use_capstone\"",
        "\"use_capstone\"",
        "\"show_opcodes_size\"",
        "\"show_opcodes_size\"",
        "\"theme.old_context\"",
        "\"theme.disassemble_current_instruction\"",
        "\"*\"",
        "\"{}:{}\"",
        "\"code:{}\"",
        "\" \"",
        "\"{{:{}o}}\"",
        "\"{}  {}\"",
        "\"{}{}\"",
        "\"{:s}{:s}\"",
        "\"[Reason: {:s}]\"",
        "\"\"",
        "\"\\tTAKEN {:s}\"",
        "\"bold green\"",
        "\"[Reason: !({:s})]\"",
        "\"\"",
        "\"\\tNOT taken {:s}\"",
        "\"bold red\"",
        "\"peek_calls\"",
        "\"peek_ret\"",
        "\"{}  {}\"",
        "\"\"",
        "\"   {}  {}\"",
        "\" \"",
        "\"Cannot disassemble from $PC\"",
        "\"BYTE\"",
        "\"WORD\"",
        "\"DWORD\"",
        "\"QWORD\"",
        "\" PTR\"",
        "\"*\"",
        "\"$\"",
        "\"*{:#x}\"",
        "\"$\"",
        "\" \"",
        "\"<\"",
        "\">\"",
        "r\".*<([^\\(> ]*).*\"",
        "r\"\\1\"",
        "r\".*(0x[a-fA-F0-9]*).*\"",
        "r\"\\1\"",
        "\"Symbol '{}' is not a function: type={}\"",
        "\"var_{}\"",
        "\"{} {} = {}\"",
        "\"arguments\"",
        "\"{} (<void>)\"",
        "\"{} (\"",
        "\"   \"",
        "\",\\n   \"",
        "\")\"",
        "\"use_capstone\"",
        "\"use_capstone\"",
        "\"theme.registers_register_name\"",
        "\"push\"",
        "\"$\"",
        "\"$rdi\"",
        "\"$edi\"",
        "\"$di\"",
        "\"$rsi\"",
        "\"$esi\"",
        "\"$si\"",
        "\"$rdx\"",
        "\"$edx\"",
        "\"$dx\"",
        "\"$rcx\"",
        "\"$ecx\"",
        "\"$cx\"",
        "\"{}_{}\"",
        "\"@plt\"",
        "\"@\"",
        "\"{} = {} (def: {})\"",
        "\"{} = {}\"",
        "\"arguments (guessed)\"",
        "\"{} (\"",
        "\"   \"",
        "\",\\n   \"",
        "\")\"",
        "\"{}:{}\"",
        "\"r\"",
        "\"theme.old_context\"",
        "\"nb_lines_code\"",
        "\"{}[...]{}\"",
        "\"source:{}+{}\"",
        "\"theme.source_current_line\"",
        "\"show_source_code_variable_values\"",
        "\" \"",
        "\"{}{}\"",
        "\"  {:4d}\\t {:s}\"",
        "\"{}{}{:4d}\\t \"",
        "\"{}{}\"",
        "\" \"",
        "\"{}{:s}\"",
        "\"{}  {:4d}\\t {:s}\"",
        "\"\"",
        "r\"\\W{}\\W\"",
        "\"[...]\"",
        "\" {:s} \"",
        "\"// \"",
        "\", \"",
        "\"{}={}\"",
        "\"\"",
        "\"trace\"",
        "\"nb_lines_backtrace\"",
        "\"FrameDecorator\"",
        "\"backtrace {:d}\"",
        "\"nb_lines_backtrace_before\"",
        "\"{:#x}\"",
        "\"{}({})\"",
        "\", \"",
        "\"{}={!s}\"",
        "\"{} {}\"",
        "\", \"",
        "\"[{}] {}\"",
        "\"#{}\"",
        "\"bold green\"",
        "\"bold pink\"",
        "\"info program\"",
        "\"NOT RUNNING\"",
        "\"It stopped with signal \"",
        "\"It stopped with signal \"",
        "\"\"",
        "\",\"",
        "\"The program being debugged is not being run.\"",
        "\"NOT RUNNING\"",
        "\"It stopped at a breakpoint that has since been deleted.\"",
        "\"TEMPORARY BREAKPOINT\"",
        "\"It stopped at breakpoint \"",
        "\"BREAKPOINT\"",
        "\"It stopped after being stepped.\"",
        "\"SINGLE STEP\"",
        "\"STOPPED\"",
        "\"threads\"",
        "\"nb_lines_threads\"",
        "\"No thread selected\"",
        "\"#{:d}\"",
        "\"bold green\"",
        "\"bold pink\"",
        "\"running\"",
        "\"bold green\"",
        "\"stopped\"",
        "\"bold red\"",
        "\" {:s} in {:s} ()\"",
        "\"{:#x}\"",
        "\"blue\"",
        "\"??\"",
        "\"bold yellow\"",
        "\", reason: {}\"",
        "\"bold pink\"",
        "\"exited\"",
        "\"bold yellow\"",
        "\"extra\"",
        "\"error\"",
        "\"warn\"",
        "\"success\"",
        "\"memory:{:#x}\"",
        "\"pointers\"",
        "\"dereference 0x{address:x} L{size:d}\"",
        "\"hexdump {fmt:s} 0x{address:x} {size:d}\"",
        "\"memory\"",
        "\"{:s} (watch|unwatch|reset|list)\"",
        "\"memory watch\"",
        "\"{:s} ADDRESS [SIZE] [(qword|dword|word|byte|pointers)]\"",
        "\"\\n\\t{0:s} 0x603000 0x100 byte\\n\\t{0:s} $sp\"",
        "\"byte\"",
        "\"qword\"",
        "\"dword\"",
        "\"word\"",
        "\"byte\"",
        "\"pointers\"",
        "\"Unexpected grouping '{}'\"",
        "\"dword\"",
        "\"qword\"",
        "\"Adding memwatch to {:#x}\"",
        "\"memory unwatch\"",
        "\"{:s} ADDRESS\"",
        "\"\\n\\t{0:s} 0x603000\\n\\t{0:s} $sp\"",
        "\"You weren't watching {:#x}\"",
        "\"Removed memwatch of {:#x}\"",
        "\"memory reset\"",
        "\"{:s}\"",
        "\"Memory watches cleared\"",
        "\"memory list\"",
        "\"{:s}\"",
        "\"No memory watches\"",
        "\"Memory watches:\"",
        "\"- {:#x} ({}, {})\"",
        "\"hexdump\"",
        "\"{:s} [ADDRESS] [[L][SIZE]] [REVERSE]\"",
        "\"{:s} byte $rsp L16 REVERSE\"",
        "\"always_show_ascii\"",
        "\"If true, hexdump will always display the ASCII dump\"",
        "\"$sp\"",
        "\"address\"",
        "\"\"",
        "\"--reverse\"",
        "\"-r\"",
        "\"--size\"",
        "\"-s\"",
        "\"byte\"",
        "\"word\"",
        "\"dword\"",
        "\"qword\"",
        "\"Invalid command\"",
        "\"arguments\"",
        "\"byte\"",
        "\"byte\"",
        "\"\\n\"",
        "\"theme.dereference_base_address\"",
        "\"hexdump.always_show_ascii\"",
        "\"qword\"",
        "\"Q\"",
        "\"dword\"",
        "\"I\"",
        "\"word\"",
        "\"H\"",
        "\"{{base}}{v}+{{offset:#06x}}   {{sym}}{{val:#0{prec}x}}   {{text}}\"",
        "\"\"",
        "\"<{:s}+{:04x}> \"",
        "\"\"",
        "\"\"",
        "\".\"",
        "\"hexdump qword\"",
        "\"{:s} [ADDRESS] [[L][SIZE]] [REVERSE]\"",
        "\"{:s} qword $rsp L16 REVERSE\"",
        "\"qword\"",
        "\"hexdump dword\"",
        "\"{:s} [ADDRESS] [[L][SIZE]] [REVERSE]\"",
        "\"{:s} $esp L16 REVERSE\"",
        "\"dword\"",
        "\"hexdump word\"",
        "\"{:s} [ADDRESS] [[L][SIZE]] [REVERSE]\"",
        "\"{:s} $esp L16 REVERSE\"",
        "\"word\"",
        "\"hexdump byte\"",
        "\"{:s} [ADDRESS] [[L][SIZE]] [REVERSE]\"",
        "\"{:s} $rsp L16\"",
        "\"byte\"",
        "\"patch\"",
        "\"{0:s} (qword|dword|word|byte) LOCATION VALUES\\n\"",
        "\"{0:s} string LOCATION \\\"double-escaped string\\\"\"",
        "\"qword\"",
        "\"Q\"",
        "\"dword\"",
        "\"L\"",
        "\"word\"",
        "\"H\"",
        "\"byte\"",
        "\"B\"",
        "\"location\"",
        "\"\"",
        "\"values\"",
        "\"\"",
        "\"arguments\"",
        "\"patch qword\"",
        "\"{0:s} LOCATION QWORD1 [QWORD2 [QWORD3..]]\"",
        "\"{:s} $rip 0x4141414141414141\"",
        "\"qword\"",
        "\"patch dword\"",
        "\"{0:s} LOCATION DWORD1 [DWORD2 [DWORD3..]]\"",
        "\"{:s} $rip 0x41414141\"",
        "\"dword\"",
        "\"patch word\"",
        "\"{0:s} LOCATION WORD1 [WORD2 [WORD3..]]\"",
        "\"{:s} $rip 0x4141\"",
        "\"word\"",
        "\"patch byte\"",
        "\"{0:s} LOCATION BYTE1 [BYTE2 [BYTE3..]]\"",
        "\"{:s} $rip 0x41 0x41 0x41 0x41 0x41\"",
        "\"byte\"",
        "\"patch string\"",
        "\"{:s} ADDRESS \\\"double backslash-escaped string\\\"\"",
        "\"{:s} $sp \\\"GEFROCKS\\\"\"",
        "\"Could not decode '\\\\xXX' encoded string \\\"{}\\\"\"",
        "\"theme.dereference_code\"",
        "\"theme.dereference_string\"",
        "\"dereference.max_recursion\"",
        "\"[loop detected]\"",
        "\"{} {} {}\"",
        "\", \"",
        "'{:s} (\"{:s}\"?)'",
        "'\"{:s}[...]\"'",
        "'\"{:s}\"'",
        "\"{:#0{ma}x}\"",
        "\"dereference\"",
        "\"{:s} [LOCATION] [l[NB]]\"",
        "\"telescope\"",
        "\"{:s} $sp l20\"",
        "\"max_recursion\"",
        "\"Maximum level of pointer recursion\"",
        "\"theme.dereference_base_address\"",
        "\"theme.dereference_register_value\"",
        "\" {:s} \"",
        "\"\"",
        "\"{:s}{:s}+{:#06x}: {:{ma}s}\"",
        "\"\\t{:s}{:s}\"",
        "\", \"",
        "\"$sp\"",
        "\"l\"",
        "\"L\"",
        "\"Invalid address\"",
        "\"Unmapped address\"",
        "\"context.grow_stack_down\"",
        "\"aslr\"",
        "\"{:s} (on|off)\"",
        "\"show disable-randomization\"",
        "\"virtual address space is \"",
        "\"ASLR is currently \"",
        "\"on.\"",
        "\"disabled\"",
        "\"enabled\"",
        "\"on\"",
        "\"Enabling ASLR\"",
        "\"set disable-randomization off\"",
        "\"off\"",
        "\"Disabling ASLR\"",
        "\"set disable-randomization on\"",
        "\"Invalid command\"",
        "\"reset-cache\"",
        "\"vmmap\"",
        "\"{:s} [FILTER]\"",
        "\"{:s} libc\"",
        "\"No address mapping information found\"",
        "\"gef.disable_color\"",
        "\"theme.table_heading\"",
        "\"Start\"",
        "\"End\"",
        "\"Offset\"",
        "\"Perm\"",
        "\"Path\"",
        "\"{:<{w}s}{:<{w}s}{:<{w}s}{:<4s} {:s}\"",
        "\"\"",
        "\"[stack]\"",
        "\"theme.address_stack\"",
        "\"[heap]\"",
        "\"theme.address_heap\"",
        "\"theme.address_code\"",
        "\"underline \"",
        "\" \"",
        "\"theme.address_code\"",
        "\"theme.address_stack\"",
        "\"theme.address_heap\"",
        "\"[ Legend:  {} | {} | {} ]\"",
        "\"Code\"",
        "\"Heap\"",
        "\"Stack\"",
        "\"xfiles\"",
        "\"{:s} [FILE [NAME]]\"",
        "\"\\n{0:s} libc\\n{0:s} libc IO_vtables\"",
        "\"theme.table_heading\"",
        "\"Start\"",
        "\"End\"",
        "\"Name\"",
        "\"File\"",
        "\"{:<{w}s}{:<{w}s}{:<21s} {:s}\"",
        "\"{:<21s}\"",
        "\" \"",
        "\"xinfo\"",
        "\"{:s} LOCATION\"",
        "\"{:s} $pc\"",
        "\"At least one valid address must be specified\"",
        "\"xinfo: {:#x}\"",
        "\"{:s}\"",
        "\"Cannot reach {:#x} in memory space\"",
        "\"Page: {:s} {:s} {:s} (size={:#x})\"",
        "\"Permissions: {}\"",
        "\"Pathname: {:s}\"",
        "\"Offset (from page): {:#x}\"",
        "\"Inode: {:s}\"",
        "\"Segment: {:s} ({:s}-{:s})\"",
        "\"Offset (from segment): {:#x}\"",
        "\"Symbol: {:s}\"",
        "\"+{:d}\"",
        "\"xor-memory\"",
        "\"{:s} (display|patch) ADDRESS SIZE KEY\"",
        "\"xor-memory display\"",
        "\"{:s} ADDRESS SIZE KEY\"",
        "\"{:s} $sp 16 41414141\"",
        "\"Displaying XOR-ing {:#x}-{:#x} with {:s}\"",
        "\"Original block\"",
        "\"XOR-ed block\"",
        "\"xor-memory patch\"",
        "\"{:s} ADDRESS SIZE KEY\"",
        "\"{:s} $sp 16 41414141\"",
        "\"Patching XOR-ing {:#x}-{:#x} with '{:s}'\"",
        "\"trace-run\"",
        "\"{:s} LOCATION [MAX_CALL_DEPTH]\"",
        "\"{:s} 0x555555554610\"",
        "\"max_tracing_recursion\"",
        "\"Maximum depth of tracing\"",
        "\"tracefile_prefix\"",
        "\"./gef-trace-\"",
        "\"Specify the tracing output file prefix\"",
        "\"Invalid location: {:s}\"",
        "\"Tracing from {:#x} to {:#x} (max depth={:d})\"",
        "\"{:s}{:#x}-{:#x}.txt\"",
        "\"tracefile_prefix\"",
        "\"Done, logfile stored as '{:s}'\"",
        "\"Hint: import logfile with `ida_color_gdb_trace.py` script in IDA to visualize path\"",
        "\"#\"",
        "\"# Execution tracing of {:s}\"",
        "\"# Start address: {:s}\"",
        "\"# End address: {:s}\"",
        "\"# Recursion level: {:d}\"",
        "\"# automatically generated by gef.py\"",
        "\"#\\n\"",
        "\"stepi\"",
        "\"finish\"",
        "\"#\"",
        "\"# Execution interrupted at address {:s}\"",
        "\"# Exception: {:s}\"",
        "\"#\\n\"",
        "\"pattern\"",
        "\"{:s} (create|search) ARGS\"",
        "\"length\"",
        "\"Default length of a cyclic buffer to generate\"",
        "\"period\"",
        "\"Default period\"",
        "\"pattern create\"",
        "\"{:s} [SIZE]\"",
        "\"{:s} 4096\"",
        "\"length\"",
        "\"--period\"",
        "\"arguments\"",
        "\"pattern.length\"",
        "\"pattern.period\"",
        "\"Generating a pattern of {:d} bytes (n={:d})\"",
        "\"Saved as '{:s}'\"",
        "\"pattern search\"",
        "\"{:s} PATTERN [SIZE]\"",
        "\"\\n{0:s} $pc\\n{0:s} 0x61616164\\n{0:s} aaab\"",
        "\"pattern offset\"",
        "\"pattern\"",
        "\"\"",
        "\"--period\"",
        "\"--length\"",
        "\"arguments\"",
        "\"pattern.length\"",
        "\"pattern.period\"",
        "\"Searching for '{:s}'\"",
        "\">I\"",
        "\"<I\"",
        "\">Q\"",
        "\"<Q\"",
        "\"Found at offset {:d} (little-endian search) {:s}\"",
        "\"likely\"",
        "\"bold red\"",
        "\"\"",
        "\"Found at offset {:d} (big-endian search) {:s}\"",
        "\"likely\"",
        "\"bold green\"",
        "\"\"",
        "\"Pattern '{}' not found\"",
        "\"checksec\"",
        "\"{:s} [FILENAME]\"",
        "\"{} /bin/ls\"",
        "\"readelf\"",
        "\"No executable/library specified\"",
        "\"Invalid filename\"",
        "\"{:s} for '{:s}'\"",
        "\"Partial RelRO\"",
        "\"Full RelRO\"",
        "\"Canary\"",
        "\"(value: {:#x})\"",
        "\"{:<30s}: {:s}\"",
        "\"Full RelRO\"",
        "\"{:<30s}: {:s}\"",
        "\"RelRO\"",
        "\"Full\"",
        "\"Partial RelRO\"",
        "\"{:<30s}: {:s}\"",
        "\"RelRO\"",
        "\"Partial\"",
        "\"{:<30s}: {:s}\"",
        "\"RelRO\"",
        "\"got\"",
        "\"{:s} [FUNCTION_NAME ...] \"",
        "\"got read printf exit\"",
        "\"function_resolved\"",
        "\"green\"",
        "\"Line color of the got command output if the function has \"",
        "\"been resolved\"",
        "\"function_not_resolved\"",
        "\"yellow\"",
        "\"Line color of the got command output if the function has \"",
        "\"not been resolved\"",
        "\"readelf\"",
        "\"--relocs\"",
        "\"JUMP\"",
        "\"readelf\"",
        "\"Missing `readelf`\"",
        "\"Full RelRO\"",
        "\"Full RelRO\"",
        "\"PIE\"",
        "\"Partial RelRO\"",
        "\"Partial RelRO\"",
        "\"No RelRO\"",
        "\"\\nGOT protection: {} | GOT functions: {}\\n \"",
        "\"function_not_resolved\"",
        "\"function_resolved\"",
        "\"[{}] \"",
        "\"{} {} {}\"",
        "\"highlight\"",
        "\"{} (add|remove|list|clear)\"",
        "\"hl\"",
        "\"regex\"",
        "\"Enable regex highlighting\"",
        "\"highlight list\"",
        "\"highlight ls\"",
        "\"hll\"",
        "\"no matches found\"",
        "\"{} {} {}\"",
        "\"highlight clear\"",
        "\"hlc\"",
        "\"highlight add\"",
        "\"{} MATCH COLOR\"",
        "\"highlight set\"",
        "\"hla\"",
        "\"{} 41414141 yellow\"",
        "\"highlight remove\"",
        "\"{} MATCH\"",
        "\"highlight delete\"",
        "\"highlight del\"",
        "\"highlight unset\"",
        "\"highlight rm\"",
        "\"hlr\"",
        "\"{} remove 41414141\"",
        "\"format-string-helper\"",
        "\"fmtstr-helper\"",
        "\"printf\"",
        "\"sprintf\"",
        "\"fprintf\"",
        "\"snprintf\"",
        "\"vsnprintf\"",
        "\"/dev/null\"",
        "\"Enabled {:d} FormatStringBreakpoint\"",
        "\"heap-analysis-helper\"",
        "\"check_free_null\"",
        "\"Break execution when a free(NULL) is encountered\"",
        "\"check_double_free\"",
        "\"Break execution when a double free is encountered\"",
        "\"check_weird_free\"",
        "\"Break execution when free() is called against a non-tracked pointer\"",
        "\"check_uaf\"",
        "\"Break execution when a possible Use-after-Free condition is found\"",
        "\"check_heap_overlap\"",
        "\"Break execution when a possible overlap in allocation is found\"",
        "\"show\"",
        "\"Tracking malloc() & calloc()\"",
        "\"__libc_malloc\"",
        "\"__libc_calloc\"",
        "\"Tracking free()\"",
        "\"Tracking realloc()\"",
        "\"Disabling hardware watchpoints (this may increase the latency)\"",
        "\"set can-use-hw-watchpoints 0\"",
        "\"Dynamic breakpoints correctly setup, GEF will break execution if a possible vulnerabity is found.\"",
        "\"{}: The heap analysis slows down the execution noticeably.\"",
        "\"Note\"",
        "\"bold underline yellow\"",
        "\"Tracked as in-use chunks:\"",
        "\"{} malloc({:d}) = {:#x}\"",
        "\"No malloc() chunk tracked\"",
        "\"Tracked as free-ed chunks:\"",
        "\"{}  free({:d}) = {:#x}\"",
        "\"No free() chunk tracked\"",
        "\"{} - Cleaning up\"",
        "\"Heap-Analysis\"",
        "\"yellow bold\"",
        "\"retbp\"",
        "\"{} - Re-enabling hardware watchpoints\"",
        "\"Heap-Analysis\"",
        "\"yellow bold\"",
        "\"set can-use-hw-watchpoints 1\"",
        "\"is-syscall\"",
        "\"Current instruction is{}a syscall\"",
        "\" \"",
        "\" not \"",
        "\" \"",
        "\", \"",
        "\"syscall-args\"",
        "\"path\"",
        "\"gef.tempdir\"",
        "\"syscall-tables\"",
        "\"Path to store/load the syscall tables files\"",
        "\"theme.table_heading\"",
        "\"Cannot open '{0}': check directory and/or `gef config {0}` setting, \"",
        "\"currently: '{1}'\"",
        "\"syscall-args.path\"",
        "\"path\"",
        "\"This setting can be configured by running gef-extras' install script.\"",
        "\"There is no system call for {:#x}\"",
        "\"Detected syscall {}\"",
        "\"    {}({})\"",
        "\", \"",
        "\"Parameter\"",
        "\"Register\"",
        "\"Value\"",
        "r\" |\\*\"",
        "\"{:<20} {:<20} {}\"",
        "\"    {:<20} {:<20} 0x{:x}\"",
        "\" {:s} \"",
        "\"{}.py\"",
        "\"syscall_table\"",
        "\"path\"",
        "\"${}([offset])\"",
        "\"No debugging session active\"",
        "\"_stack\"",
        "\"[stack]\"",
        "\"_heap\"",
        "\"Heap not found\"",
        "\"mp_->sbrk_base\"",
        "\"[heap]\"",
        "\"_base\"",
        "\"Invalid arg: {}\"",
        "\"Cannot find section {}\"",
        "\"_bss\"",
        "\".bss\"",
        "\"_got\"",
        "\".got\"",
        "\"functions\"",
        "\"\\n\"",
        "\"__doc__\"",
        "\"\"",
        "\"\\n                         \"",
        "\"\\n\"",
        "\"_syntax_\"",
        "\"\"",
        "\"{syntax:<25s} -- {help:s}\"",
        "\"GEF - Convenience Functions\"",
        "\"These functions can be used as arguments to other \"",
        "\"commands to dynamically calculate values, eg: {:s}\\n\"",
        "\"deref $_heap(0x20)\"",
        "\"yellow\"",
        "\"gef\"",
        "\"{:s} (missing|config|save|restore|set|run)\"",
        "\"gef.follow_child\"",
        "\"Automatically set GDB to follow child when forking\"",
        "\"gef.readline_compat\"",
        "\"Workaround for readline SOH/ETX issue (SEGV)\"",
        "\"gef.debug\"",
        "\"Enable debug mode for gef\"",
        "\"gef.autosave_breakpoints_file\"",
        "\"\"",
        "\"Automatically save and restore breakpoints\"",
        "\"gef.extra_plugins_dir\"",
        "\"\"",
        "\"Autoload additional GEF commands from external directory\"",
        "\"gef.disable_color\"",
        "\"Disable all colors in GEF\"",
        "\"gef.tempdir\"",
        "\"Directory to use for temporary/cache content\"",
        "\"gef restore\"",
        "\"gef restore quiet\"",
        "\"gef.autosave_breakpoints_file\"",
        "\"source {:s}\"",
        "\"define hook-quit\"",
        "\" save breakpoints {:s}\"",
        "\"end\"",
        "\"\\n\"",
        "\"\\n\"",
        "\"gef.extra_plugins_dir\"",
        "\";\"",
        "\".py\"",
        "\"{:s}/{:s}\"",
        "\"source {:s}\"",
        "\"{:s} extra commands added from '{:s}'\"",
        "\"bold green\"",
        "\"bold blue\"",
        "\"failed: {}\"",
        "\"gef help\"",
        "\"_aliases_\"",
        "\"_aliases_\"",
        "\"{:s} for {:s} ready, type `{:s}' to start, `{:s}' to configure\"",
        "\"GEF\"",
        "\"gef\"",
        "\"underline yellow\"",
        "\"gef config\"",
        "\"underline pink\"",
        "\"{:d}.{:d}\"",
        "\"{:s} commands loaded for GDB {:s} using Python engine {:s}\"",
        "\"bold green\"",
        "\"bold yellow\"",
        "\"bold red\"",
        "\"{:s} command{} could not be loaded, run `{:s}` to know why.\"",
        "\"bold red\"",
        "\"s\"",
        "\"\"",
        "\"gef missing\"",
        "\"underline pink\"",
        "\"gef help\"",
        "\"GEF - GDB Enhanced Features\"",
        "\" \"",
        "\"__doc__\"",
        "\"\"",
        "\"\\n                         \"",
        "\"\\n\"",
        "\" (alias: {:s})\"",
        "\", \"",
        "\"_aliases_\"",
        "\"\"",
        "\"{cmd:<25s} -- {help:s}{aliases:s}\"",
        "\"\\n\"",
        "\"gef config\"",
        "\"{:s} [setting_name] [setting_value]\"",
        "\"Invalid number of arguments\"",
        "\"GEF configuration settings\"",
        "\"GEF configuration setting: {:s}\"",
        "\"GEF configuration settings matching '{:s}'\"",
        "\"theme.dereference_string\"",
        "\"theme.dereference_base_address\"",
        "\"green\"",
        "\"str\"",
        "'\"{:s}\"'",
        "\"{:s} ({:s}) = {:s}\"",
        "\"\\nDescription:\"",
        "\"bold underline\"",
        "\"\\t{:s}\"",
        "\".\"",
        "\"Invalid command format\"",
        "\"gef\"",
        "\".\"",
        "\"Unknown plugin '{:s}'\"",
        "\"Failed to get '{:s}' config setting\"",
        "\"TRUE\"",
        "\"T\"",
        "\"1\"",
        "\"{} expects type '{}'\"",
        "\"\"",
        "\".\"",
        "\".\"",
        "\"gef save\"",
        "\".\"",
        "\"aliases\"",
        "\"aliases\"",
        "\"w\"",
        "\"Configuration saved to '{:s}'\"",
        "\"gef restore\"",
        "\"quiet\"",
        "\"aliases\"",
        "\"{:s}.{:s}\"",
        "\"True\"",
        "\"gef.tempdir\"",
        "\"Configuration from '{:s}' restored\"",
        "\"bold blue\"",
        "\"gef missing\"",
        "\"No missing command\"",
        "\"Command `{}` is missing, reason {} {}\"",
        "\"gef set\"",
        "\"{:s} [GDB_SET_ARGUMENTS]\"",
        "\"set\"",
        "\"$_gef\"",
        "\" \"",
        "\"gef run\"",
        "\"{:s} [GDB_RUN_ARGUMENTS]\"",
        "\"continue\"",
        "\"gef set args {:s}\"",
        "\" \"",
        "\"run\"",
        "\"Alias for '{}'\"",
        "\": {}\"",
        "\"complete\"",
        "\"{} {}\"",
        "\"aliases\"",
        "\"{:s} (add|rm|ls)\"",
        "\"aliases add\"",
        "\"{0} [ALIAS] [COMMAND]\"",
        "\"{0} scope telescope\"",
        "\" \"",
        "\"aliases rm\"",
        "\"{0} [ALIAS]\"",
        "\"{0} not found in aliases.\"",
        "\"You must reload GEF for alias removals to apply.\"",
        "\"aliases ls\"",
        "\"Aliases defined:\"",
        "\"{:30s} {} {}\"",
        "\"tmux-setup\"",
        "\"screen-setup\"",
        "\"tmux-setup\"",
        "\"TMUX\"",
        "\"TERM\"",
        "\"screen\"",
        "\"Not in a tmux/screen session\"",
        "\"tmux\"",
        "\"tmux session found, splitting window...\"",
        "\"/dev/pts\"",
        "\"! {} split-window -h 'clear ; cat'\"",
        "\"! {} select-pane -L\"",
        "\"/dev/pts\"",
        "\"/dev/pts/{}\"",
        "\"Setting `context.redirect` to '{}'...\"",
        "\"gef config context.redirect {}\"",
        "\"Done!\"",
        "\"screen\"",
        "\"STY\"",
        "\"screen session found, splitting window...\"",
        "\"w\"",
        "\"startup_message off\\n\"",
        "\"split -v\\n\"",
        "\"focus right\\n\"",
        "\"screen bash -c 'tty > {}; clear; cat'\\n\"",
        "\"focus left\\n\"",
        "\"r\"",
        "\"Setting `context.redirect` to '{}'...\"",
        "\"gef config context.redirect {}\"",
        "\"Done!\"",
        "\"gef.readline_compat\"",
        "\"gef.disable_color\"",
        "\"__main__\"",
        "\"GEF has dropped Python2 support for GDB when it reached EOL on 2020/01/01.\"",
        "\"If you require GEF for GDB+Python2, use https://github.com/hugsy/gef-legacy.\"",
        "\"You're using an old version of GDB. GEF will not work correctly. \"",
        "\"Consider updating to GDB {} or higher.\"",
        "\".\"",
        "\"pyenv\"",
        "\"root\"",
        "\"version-name\"",
        "\"versions\"",
        "\"lib\"",
        "\"python{}\"",
        "\"site-packages\"",
        "\"python3\"",
        "'-c'",
        "'import os, sys;print((sys.prefix))'",
        "\"\\\\n\"",
        "\"-c\"",
        "\"import os, sys;print(os.linesep.join(sys.path).strip())\"",
        "\"utf-8\"",
        "\"set confirm off\"",
        "\"set verbose off\"",
        "\"set pagination off\"",
        "\"set print elements 0\"",
        "\"set history save on\"",
        "\"set history filename ~/.gdb_history\"",
        "\"set output-radix 0x10\"",
        "\"set print pretty on\"",
        "\"set disassembly-flavor intel\"",
        "\"handle SIGALRM print nopass\"",
        "\"save gdb-index {}\"",
        "\"gef.tempdir\""
    ],
    "variables": [
        "LEFT_ARROW",
        "RIGHT_ARROW",
        "DOWN_ARROW",
        "HORIZONTAL_LINE",
        "VERTICAL_LINE",
        "CROSS",
        "TICK",
        "BP_GLYPH",
        "GEF_PROMPT",
        "GEF_PROMPT_ON",
        "GEF_PROMPT_OFF",
        "http",
        "ver",
        "latest_gef_data",
        "fd",
        "fname",
        "retcode",
        "__gef__",
        "__commands__",
        "__functions__",
        "__aliases__",
        "__config__",
        "__watches__",
        "__infos_files__",
        "__gef_convenience_vars_index__",
        "__context_messages__",
        "__heap_allocated_list__",
        "__heap_freed_list__",
        "__heap_uaf_watchpoints__",
        "__pie_breakpoints__",
        "__pie_counter__",
        "__gef_remote__",
        "__gef_qemu_mode__",
        "__gef_default_main_arena__",
        "__gef_int_stream_buffer__",
        "__gef_redirect_output_fd__",
        "DEFAULT_PAGE_ALIGN_SHIFT",
        "DEFAULT_PAGE_SIZE",
        "GEF_RC",
        "GEF_TEMP_DIR",
        "GEF_MAX_STRING_LENGTH",
        "GDB_MIN_VERSION",
        "GDB_VERSION",
        "current_elf",
        "current_arch",
        "libc_args_definitions",
        "highlight_table",
        "ANSI_SPLIT_RE",
        "obj",
        "__gef_default_main_arena__",
        "text",
        "ansiSplit",
        "found",
        "ansiSplit",
        "index",
        "text",
        "ansiSplit",
        "x",
        "__gef_int_stream_buffer__",
        "rv",
        "redirect",
        "fd",
        "__gef_redirect_output_fd__",
        "fd",
        "__gef_redirect_output_fd__",
        "fd",
        "fd",
        "__gef_redirect_output_fd__",
        "fd",
        "__gef_redirect_output_fd__",
        "__gef_int_stream_buffer__",
        "colors",
        "colors",
        "msg",
        "value",
        "section",
        "info",
        "valid",
        "value",
        "code_color",
        "stack_color",
        "heap_color",
        "addr",
        "derefed",
        "NONE",
        "READ",
        "WRITE",
        "EXECUTE",
        "ALL",
        "value",
        "perm_str",
        "perm",
        "perm",
        "page_start",
        "page_end",
        "offset",
        "permission",
        "inode",
        "path",
        "Zone",
        "LITTLE_ENDIAN",
        "BIG_ENDIAN",
        "ELF_32_BITS",
        "ELF_64_BITS",
        "ELF_MAGIC",
        "X86_64",
        "X86_32",
        "ARM",
        "MIPS",
        "POWERPC",
        "POWERPC64",
        "SPARC",
        "SPARC64",
        "AARCH64",
        "RISCV",
        "IA64",
        "ET_RELOC",
        "ET_EXEC",
        "ET_DYN",
        "ET_CORE",
        "OSABI_SYSTEMV",
        "OSABI_HPUX",
        "OSABI_NETBSD",
        "OSABI_LINUX",
        "OSABI_SOLARIS",
        "OSABI_AIX",
        "OSABI_IRIX",
        "OSABI_FREEBSD",
        "OSABI_OPENBSD",
        "e_magic",
        "e_class",
        "e_endianness",
        "e_eiversion",
        "e_osabi",
        "e_abiversion",
        "e_pad",
        "e_type",
        "e_machine",
        "e_version",
        "e_entry",
        "e_phoff",
        "e_shoff",
        "e_flags",
        "e_ehsize",
        "e_phentsize",
        "e_phnum",
        "e_shentsize",
        "e_shnum",
        "e_shstrndx",
        "endian",
        "e_pad",
        "opcodes_len",
        "opcodes_len",
        "opcodes_text",
        "malloc_hook_addr",
        "addr",
        "addr",
        "__gef_default_main_arena__",
        "__addr",
        "__addr",
        "num_fastbins",
        "num_bins",
        "int_size",
        "size_t",
        "ptr_type",
        "size_t",
        "fastbin_offset",
        "fastbin_offset",
        "size_t_pointer",
        "size_t_array",
        "__name",
        "arena",
        "malloc_state_t",
        "__arena",
        "__addr",
        "__arena",
        "__addr",
        "top",
        "last_remainder",
        "n",
        "nfree",
        "sysmem",
        "addr",
        "idx",
        "fd",
        "bw",
        "addr_next",
        "arena_main",
        "fmt",
        "ptrsize",
        "chunk_base_address",
        "address",
        "chunk_base_address",
        "address",
        "size_addr",
        "prev_size_addr",
        "cursz",
        "addr",
        "fd",
        "bk",
        "next_chunk",
        "msg",
        "msg",
        "failed",
        "failed",
        "failed",
        "fwd",
        "bkw",
        "msg",
        "flags",
        "msg",
        "msg",
        "pattern_libc_ver",
        "sections",
        "match",
        "data",
        "match",
        "cols",
        "nb",
        "color",
        "msg_color",
        "msg",
        "fname",
        "__data",
        "exc_type",
        "exc_value",
        "exc_traceback",
        "filename",
        "lineno",
        "method",
        "code",
        "code",
        "lsb_release",
        "res",
        "substs",
        "res",
        "fpath",
        "path",
        "exe_file",
        "style",
        "st",
        "st",
        "st",
        "result",
        "align",
        "chunk",
        "hexa",
        "text",
        "sym",
        "sym",
        "sym",
        "context_hidden",
        "context_hidden",
        "context_hidden",
        "setting",
        "__config__",
        "name",
        "func",
        "abspath",
        "abspath",
        "name",
        "sym",
        "i",
        "sym",
        "name",
        "offset",
        "offset",
        "frame",
        "arch",
        "address",
        "asm",
        "mnemo",
        "operands",
        "operands",
        "mnemo",
        "operands",
        "loc",
        "location",
        "opcodes",
        "cur_insn_addr",
        "insns",
        "insns",
        "insn",
        "insn",
        "nb_insn",
        "count",
        "start_addr",
        "sym_info",
        "loc",
        "ops",
        "capstone",
        "arch",
        "mode",
        "cs",
        "cs",
        "detail",
        "page_start",
        "offset",
        "pc",
        "skip",
        "nb_prev",
        "location",
        "code",
        "code",
        "res",
        "fd",
        "fname",
        "readelf",
        "cmd",
        "lines",
        "results",
        "results",
        "has_gnu_stack",
        "results",
        "results",
        "results",
        "results",
        "results",
        "results",
        "arch",
        "arch_str",
        "arch_str",
        "arch_str",
        "arch_str",
        "arch_str",
        "endian",
        "flags",
        "flag_str",
        "special_registers",
        "reg",
        "val",
        "key",
        "arch",
        "mode",
        "all_registers",
        "return_register",
        "function_parameters",
        "syscall_register",
        "syscall_instructions",
        "nop_insn",
        "flag_register",
        "flag_register_to_human",
        "flags_table",
        "mnemo",
        "mnemo",
        "condition",
        "rs1",
        "rs2",
        "condition",
        "rs1",
        "rs2",
        "rs2",
        "rs1",
        "condition",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "ra",
        "ra",
        "ra",
        "arch",
        "all_registers",
        "nop_insn",
        "return_register",
        "flag_register",
        "flags_table",
        "function_parameters",
        "syscall_register",
        "syscall_instructions",
        "pc",
        "mnemo",
        "call_mnemos",
        "pop_mnemos",
        "branch_mnemos",
        "write_mnemos",
        "reg",
        "val",
        "conditions",
        "mnemo",
        "flags",
        "val",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "ra",
        "ra_addr",
        "ra",
        "ra",
        "_NR_mprotect",
        "insns",
        "arch",
        "mode",
        "all_registers",
        "return_register",
        "flag_register",
        "flags_table",
        "function_parameters",
        "syscall_register",
        "syscall_instructions",
        "mnemo",
        "call_mnemos",
        "reg",
        "val",
        "_NR_mprotect",
        "insns",
        "mnemo",
        "branch_mnemos",
        "mnemo",
        "operands",
        "taken",
        "reason",
        "reg",
        "op",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "i",
        "taken",
        "reason",
        "taken",
        "reason",
        "i",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "arch",
        "mode",
        "nop_insn",
        "flag_register",
        "special_registers",
        "gpr_registers",
        "all_registers",
        "instruction_length",
        "return_register",
        "function_parameters",
        "flags_table",
        "syscall_register",
        "syscall_instructions",
        "reg",
        "val",
        "mnemo",
        "call_mnemos",
        "mnemo",
        "branch_mnemos",
        "mnemo",
        "flags",
        "val",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "cx",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "ra",
        "ra",
        "ra",
        "_NR_mprotect",
        "insns",
        "sp",
        "sz",
        "loc",
        "val",
        "key",
        "arch",
        "mode",
        "gpr_registers",
        "all_registers",
        "return_register",
        "function_parameters",
        "syscall_register",
        "syscall_instructions",
        "get_ith_parameter",
        "_NR_mprotect",
        "insns",
        "arch",
        "mode",
        "all_registers",
        "instruction_length",
        "nop_insn",
        "return_register",
        "flag_register",
        "flags_table",
        "function_parameters",
        "syscall_register",
        "syscall_instructions",
        "reg",
        "val",
        "mnemo",
        "branch_mnemos",
        "mnemo",
        "flags",
        "val",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "ra",
        "ra",
        "ra",
        "_NR_mprotect",
        "insns",
        "arch",
        "mode",
        "arch",
        "mode",
        "all_registers",
        "instruction_length",
        "nop_insn",
        "return_register",
        "flag_register",
        "flags_table",
        "function_parameters",
        "syscall_register",
        "syscall_instructions",
        "reg",
        "val",
        "mnemo",
        "branch_mnemos",
        "mnemo",
        "flags",
        "val",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "ra",
        "ra",
        "ra",
        "hi",
        "lo",
        "_NR_mprotect",
        "insns",
        "arch",
        "mode",
        "all_registers",
        "flag_register",
        "flags_table",
        "syscall_instructions",
        "hi",
        "lo",
        "_NR_mprotect",
        "insns",
        "arch",
        "mode",
        "all_registers",
        "instruction_length",
        "nop_insn",
        "return_register",
        "flag_register",
        "flags_table",
        "function_parameters",
        "syscall_register",
        "syscall_instructions",
        "mnemo",
        "branch_mnemos",
        "mnemo",
        "ops",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "taken",
        "reason",
        "ra",
        "ra",
        "ra",
        "_NR_mprotect",
        "insns",
        "sz",
        "mem",
        "unpack",
        "encoding",
        "char_ptr",
        "length",
        "res",
        "res",
        "res",
        "ustr",
        "cstr",
        "reason",
        "sys",
        "exit",
        "parser",
        "argvalue",
        "argtype",
        "argtype",
        "argname_is_list",
        "nargs",
        "argtype",
        "nargs",
        "argname_is_list",
        "argvalue",
        "argtype",
        "argname",
        "argtype",
        "parsed_args",
        "kwargs",
        "xclip",
        "prog",
        "pbcopy",
        "prog",
        "mask",
        "curframe",
        "key",
        "value",
        "regname",
        "value",
        "filename",
        "pid",
        "fname",
        "fname",
        "file_bin",
        "cmd",
        "local_root",
        "local_path",
        "local_name",
        "local_path",
        "local_name",
        "local_name",
        "lpath",
        "path",
        "dis",
        "start_addr",
        "end_addr",
        "line",
        "addr",
        "perm",
        "off",
        "_",
        "rest",
        "rest",
        "inode",
        "pathname",
        "inode",
        "pathname",
        "addr_start",
        "addr_end",
        "off",
        "perm",
        "sp",
        "line",
        "addr",
        "perm",
        "_",
        "addr_start",
        "addr_end",
        "perm",
        "zone",
        "path",
        "path",
        "pid",
        "fpath",
        "stream",
        "parts",
        "addr_start",
        "addr_end",
        "off",
        "path",
        "inode",
        "perm",
        "lines",
        "line",
        "blobs",
        "addr_start",
        "addr_end",
        "section_name",
        "filename",
        "filename",
        "info",
        "sect",
        "info",
        "key",
        "key",
        "__gef_qemu_mode__",
        "__gef_remote__",
        "path",
        "path",
        "_arch_mode",
        "_libc_args_file",
        "libc_args_definitions",
        "_arch_mode",
        "libc_args_definitions",
        "_arch_mode",
        "hStdErr",
        "herr",
        "csbi",
        "res",
        "_",
        "_",
        "_",
        "_",
        "_",
        "left",
        "top",
        "right",
        "bottom",
        "_",
        "_",
        "tty_columns",
        "tty_rows",
        "tty_rows",
        "tty_columns",
        "arch",
        "mode",
        "mode",
        "arch",
        "mode",
        "mode",
        "arch",
        "mode",
        "unicorn",
        "capstone",
        "arch",
        "mode",
        "endian",
        "keystone",
        "unicorn",
        "regs",
        "arch",
        "regname",
        "regs",
        "reg",
        "regs",
        "reg",
        "keystone",
        "code",
        "addr",
        "ks",
        "enc",
        "cnt",
        "enc",
        "s",
        "enc",
        "enc",
        "filename",
        "uintptr_t",
        "elf",
        "arches",
        "current_arch",
        "elf",
        "current_elf",
        "arch_name",
        "current_arch",
        "current_arch",
        "res",
        "__gef_redirect_output_fd__",
        "memalign_size",
        "addr",
        "width",
        "addr",
        "a",
        "address",
        "memalign",
        "k",
        "a",
        "a",
        "t",
        "a",
        "t",
        "charset",
        "ulong_t",
        "unsigned_long_type",
        "res",
        "var_name",
        "addrs",
        "res",
        "tmp",
        "_type",
        "idx",
        "tmp",
        "res",
        "_type",
        "auxval",
        "canary_location",
        "canary",
        "auxval",
        "set_func",
        "vbp_num",
        "bp_num",
        "bp_addr",
        "addr",
        "addr",
        "res",
        "res_list",
        "bp_num",
        "bp_addr",
        "bp_num",
        "num_args",
        "enabled",
        "msg",
        "ptr",
        "addr",
        "addr",
        "content",
        "name",
        "func",
        "retval",
        "m",
        "m",
        "original_code",
        "original_pc",
        "silent",
        "name",
        "_",
        "size",
        "retbp",
        "size",
        "name",
        "silent",
        "loc",
        "loc",
        "size",
        "check_heap_overlap",
        "idx",
        "addr",
        "idx",
        "wp_addr",
        "wp",
        "enabled",
        "item",
        "msg",
        "align",
        "current_chunk",
        "current_chunk_size",
        "offset",
        "silent",
        "_",
        "ptr",
        "_",
        "size",
        "retbp",
        "ptr",
        "size",
        "silent",
        "newloc",
        "newloc",
        "item",
        "idx",
        "item",
        "silent",
        "_",
        "addr",
        "msg",
        "check_free_null",
        "check_double_free",
        "check_weird_free",
        "check_uaf",
        "idx",
        "item",
        "retbp",
        "retbp",
        "silent",
        "addr",
        "wp",
        "address",
        "silent",
        "enabled",
        "frame",
        "pc",
        "insn",
        "msg",
        "silent",
        "name",
        "loc",
        "cls",
        "syntax",
        "example",
        "__doc__",
        "repeat",
        "repeat_count",
        "__last_command",
        "command_type",
        "complete_type",
        "prefix",
        "argv",
        "class_name",
        "key",
        "setting",
        "key",
        "key",
        "__config__",
        "key",
        "key",
        "repeat",
        "repeat_count",
        "command",
        "repeat",
        "repeat_count",
        "__last_command",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "gef_fpath",
        "gef_dir",
        "gef_hash",
        "ver",
        "extra",
        "py_ver",
        "format_matrix",
        "valid_formats",
        "_cmdline_",
        "_aliases_",
        "_syntax_",
        "_example_",
        "args",
        "args",
        "bitlen",
        "valid_bitlens",
        "start_addr",
        "size",
        "end_addr",
        "fmt",
        "data",
        "value",
        "sdata",
        "c_type",
        "asm_type",
        "_cmdline_",
        "_syntax_",
        "_cmdline_",
        "_syntax_",
        "args",
        "bp_expr",
        "addr",
        "vmmap",
        "base_address",
        "__pie_breakpoints__",
        "__pie_counter__",
        "_cmdline_",
        "_syntax_",
        "args",
        "bps",
        "bps",
        "lines",
        "_cmdline_",
        "_syntax_",
        "args",
        "to_delete",
        "_cmdline_",
        "_syntax_",
        "fpath",
        "vmmap",
        "base_address",
        "_cmdline_",
        "_syntax_",
        "vmmap",
        "base_address",
        "_cmdline_",
        "_syntax_",
        "vmmap",
        "base_address",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "argc",
        "off",
        "s_i",
        "s_i",
        "parsed_expr",
        "xp",
        "xp",
        "res",
        "x",
        "y",
        "_cmdline_",
        "_syntax_",
        "has_canary",
        "res",
        "canary",
        "location",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "res",
        "key",
        "value",
        "res",
        "ps",
        "cmd",
        "pid",
        "cmdline",
        "ppid",
        "state",
        "cmdline",
        "children",
        "state",
        "pid",
        "pid",
        "path",
        "items",
        "fullpath",
        "sockets",
        "path",
        "items",
        "fullpath",
        "p",
        "ip",
        "port",
        "tcp_states_str",
        "udp_states_str",
        "pid",
        "sockets",
        "entries",
        "entries",
        "entries",
        "local",
        "remote",
        "state",
        "inode",
        "local",
        "remote",
        "state",
        "state_str",
        "_cmdline_",
        "_syntax_",
        "argc",
        "value",
        "value",
        "setting",
        "value",
        "value",
        "val",
        "_cmdline_",
        "_syntax_",
        "argc",
        "modname",
        "structname",
        "address",
        "path",
        "path",
        "structure_files",
        "fpath",
        "fpath",
        "structure_files",
        "all_structures",
        "modname",
        "structname",
        "structname",
        "length",
        "_fpath",
        "_mod",
        "_class",
        "_class",
        "_struct",
        "data",
        "_regsize",
        "_name",
        "_type",
        "_value",
        "_offset",
        "_value",
        "line",
        "parsed_value",
        "__sub_type_name",
        "__deref",
        "values_list",
        "module_files",
        "root",
        "name",
        "ext",
        "fpath",
        "structures",
        "files",
        "structures",
        "module_path",
        "module_name",
        "spec",
        "module_name",
        "_invalid",
        "_structs",
        "_cmdline_",
        "_syntax_",
        "path",
        "structures",
        "struct_color",
        "filename_color",
        "__modules",
        "__filename",
        "_cmdline_",
        "_syntax_",
        "__aliases__",
        "modname",
        "structname",
        "_class",
        "_struct",
        "_size",
        "__name",
        "__type",
        "__size",
        "__offset",
        "_cmdline_",
        "_syntax_",
        "__aliases__",
        "modname",
        "structname",
        "root",
        "fullname",
        "fullname",
        "cmd",
        "template",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "old_fd",
        "new_output",
        "address",
        "port",
        "AF_INET",
        "SOCK_STREAM",
        "res",
        "new_fd",
        "vmmap",
        "stack_addr",
        "original_contents",
        "res",
        "res",
        "res",
        "new_fd",
        "res",
        "res",
        "res",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example_",
        "host",
        "port",
        "sock",
        "version",
        "old_bps",
        "s",
        "host",
        "port",
        "sock",
        "version",
        "sock",
        "sock",
        "sock",
        "args",
        "argval",
        "argval",
        "method_name",
        "method_name",
        "version",
        "main_base_address",
        "main_end_address",
        "vmmap",
        "main_base_address",
        "main_end_address",
        "method",
        "args",
        "res",
        "res",
        "jump",
        "pc",
        "vmmap",
        "base_address",
        "end_address",
        "breakpoints",
        "gdb_bps",
        "addr",
        "addr",
        "added",
        "removed",
        "old_bps",
        "rc",
        "ida_added",
        "ida_removed",
        "location",
        "breakpoints",
        "addr",
        "addr",
        "path",
        "fullpath",
        "name",
        "csize",
        "csize",
        "csize",
        "csize",
        "csize",
        "m",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example_",
        "haystack",
        "needle",
        "haystack",
        "needle",
        "needle_sections",
        "haystack_sections",
        "start",
        "end",
        "start",
        "end",
        "step",
        "unpack",
        "mem",
        "target",
        "deref",
        "name",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example_",
        "title",
        "pattern",
        "step",
        "locations",
        "chunk_size",
        "chunk_size",
        "mem",
        "start",
        "ustr",
        "end",
        "ustr",
        "end",
        "start",
        "end",
        "old_section",
        "addr_loc_start",
        "old_section",
        "argc",
        "pattern",
        "endian",
        "endian",
        "endian",
        "pattern",
        "pattern",
        "start",
        "end",
        "loc",
        "section_name",
        "section_name",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example_",
        "action",
        "name",
        "old_flag",
        "new_flags",
        "new_flags",
        "new_flags",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example_",
        "msg",
        "perm",
        "perm",
        "loc",
        "loc",
        "sect",
        "size",
        "original_pc",
        "stub",
        "original_code",
        "bp_loc",
        "code",
        "arch",
        "mode",
        "raw_insns",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example_",
        "msg",
        "msg",
        "args",
        "start_address",
        "end_address",
        "dis",
        "last_insn",
        "verbose",
        "skip_emulation",
        "arch",
        "mode",
        "unicorn_registers",
        "cs_arch",
        "cs_mode",
        "fname",
        "to_file",
        "emulate_segmentation_block",
        "context_segmentation_block",
        "tmp_filename",
        "to_file",
        "tmp_fd",
        "tmp_fd",
        "tmp_filename",
        "emulate_segmentation_block",
        "context_segmentation_block",
        "pythonbin",
        "content",
        "gregval",
        "vmmap",
        "page_start",
        "page_end",
        "size",
        "perm",
        "code",
        "loc",
        "pythonbin",
        "res",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "handler_connected",
        "args",
        "target",
        "pid",
        "download_all_libs",
        "handler_connected",
        "vmmap",
        "success",
        "_file",
        "_file",
        "__gef_remote__",
        "remote_lib",
        "local_lib",
        "infos",
        "infos",
        "i",
        "exepath",
        "infos",
        "directory",
        "cmd",
        "ret",
        "ret",
        "remote_name",
        "dirs",
        "path",
        "h",
        "arch",
        "current_elf",
        "current_elf",
        "e_machine",
        "current_arch",
        "current_elf",
        "e_machine",
        "current_arch",
        "current_elf",
        "e_machine",
        "current_arch",
        "current_elf",
        "e_machine",
        "current_elf",
        "e_class",
        "current_arch",
        "current_elf",
        "e_machine",
        "current_arch",
        "current_elf",
        "e_machine",
        "current_arch",
        "current_elf",
        "e_machine",
        "current_arch",
        "__gef_qemu_mode__",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "cur_insn",
        "next_insn",
        "args",
        "address",
        "number_of_bytes",
        "size",
        "nops",
        "m",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "args",
        "loc",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example_",
        "msg",
        "args",
        "show_opcodes",
        "location",
        "length",
        "insns",
        "opcodes_len",
        "opcodes_len",
        "insn_fmt",
        "text_insn",
        "msg",
        "msg",
        "reason",
        "msg",
        "is_taken",
        "reason",
        "reason",
        "msg",
        "reason",
        "msg",
        "target_address",
        "msg",
        "_cmdline_",
        "_syntax_",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "new_arena",
        "new_arena",
        "__gef_default_main_arena__",
        "__gef_default_main_arena__",
        "_cmdline_",
        "_syntax_",
        "arena",
        "arena",
        "_cmdline_",
        "_syntax_",
        "addr",
        "chunk",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "heap_section",
        "heap_section",
        "arena",
        "nb",
        "current_chunk",
        "line",
        "next_chunk",
        "next_chunk_addr",
        "current_chunk",
        "_bin_types_",
        "_cmdline_",
        "_syntax_",
        "bin_t",
        "arena",
        "fw",
        "bk",
        "nb_chunk",
        "head",
        "m",
        "chunk",
        "fw",
        "_cmdline_",
        "_syntax_",
        "TCACHE_MAX_BINS",
        "current_thread",
        "threads",
        "tids",
        "tids",
        "tids",
        "tcache_addr",
        "tcache_empty",
        "chunk",
        "count",
        "chunks",
        "msg",
        "next_chunk",
        "chunk",
        "tcache_empty",
        "tcache_addr",
        "heap_base",
        "tcache_addr",
        "existing_tids",
        "valid_tids",
        "tid",
        "tcache_chunk",
        "new_tcache_min_size",
        "tcache_count_size",
        "count",
        "tcache_count_size",
        "count",
        "chunk",
        "chunk",
        "_cmdline_",
        "_syntax_",
        "SIZE_SZ",
        "MAX_FAST_SIZE",
        "NFASTBINS",
        "arena",
        "chunk",
        "chunks",
        "next_chunk",
        "chunk",
        "_cmdline_",
        "_syntax_",
        "arena_addr",
        "nb_chunk",
        "_cmdline_",
        "_syntax_",
        "arena_addr",
        "bins",
        "nb_chunk",
        "bins",
        "i",
        "_cmdline_",
        "_syntax_",
        "arena_addr",
        "bins",
        "nb_chunk",
        "bins",
        "i",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "found",
        "sym",
        "symaddr",
        "symtype",
        "symname",
        "symaddr",
        "found",
        "found",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "unchanged_color",
        "changed_color",
        "string_color",
        "regs",
        "args",
        "required_regs",
        "valid_regs",
        "regs",
        "memsize",
        "endian",
        "charset",
        "widest",
        "special_line",
        "reg",
        "padreg",
        "line",
        "value",
        "old_value",
        "color",
        "color",
        "line",
        "addr",
        "addrs",
        "sep",
        "fmt",
        "last_addr",
        "val",
        "_cmdline_",
        "_syntax_",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "api_base",
        "search_url",
        "args",
        "res",
        "ret",
        "lines",
        "refs",
        "_",
        "arch",
        "cmd",
        "sid",
        "_",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "api_base",
        "get_url",
        "res",
        "fd",
        "fname",
        "shellcode",
        "shellcode",
        "_cmdline_",
        "_syntax_",
        "msg",
        "ropper",
        "path",
        "sect",
        "old_completer_delims",
        "old_completer",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example_",
        "valid_arch_modes",
        "valid_archs",
        "valid_modes",
        "msg",
        "arch_s",
        "mode_s",
        "endian_s",
        "args",
        "arch_s",
        "mode_s",
        "endian_s",
        "arch_s",
        "mode_s",
        "endian_s",
        "arch",
        "mode",
        "insns",
        "raw",
        "res",
        "s",
        "res",
        "res",
        "res",
        "l",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example_",
        "ps",
        "args",
        "do_attach",
        "smart_scan",
        "pattern",
        "pattern",
        "pid",
        "command",
        "line",
        "output",
        "names",
        "fields",
        "t",
        "t",
        "name",
        "t",
        "name",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "args",
        "classes",
        "endianness",
        "osabi",
        "types",
        "machines",
        "filename",
        "elf",
        "data",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "fpath",
        "bp",
        "entrypoints",
        "value",
        "bp",
        "entry",
        "bp",
        "vmmap",
        "base_address",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example",
        "args",
        "location",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "old_registers",
        "layout_mapping",
        "str_color",
        "code_addr_color",
        "stack_addr_color",
        "heap_addr_color",
        "changed_register_color",
        "current_layout",
        "current_layout",
        "redirect",
        "line_color",
        "msg_color",
        "trail_len",
        "title",
        "ignored_registers",
        "regs",
        "printable_registers",
        "widest",
        "l",
        "nb",
        "i",
        "line",
        "changed_color",
        "regname_color",
        "r",
        "new_value_type_flag",
        "new_value",
        "new_value",
        "new_value_type_flag",
        "new_value",
        "new_value_type_flag",
        "old_value",
        "padreg",
        "value",
        "old_value",
        "addr",
        "line",
        "show_raw",
        "nb_lines",
        "sp",
        "mem",
        "nb_insn",
        "nb_insn_prev",
        "use_capstone",
        "show_opcodes_size",
        "past_insns_color",
        "cur_insn_color",
        "pc",
        "breakpoints",
        "bp_locations",
        "frame",
        "arch_name",
        "instruction_iterator",
        "line",
        "is_taken",
        "target",
        "bp_prefix",
        "text",
        "insn_fmt",
        "text",
        "is_taken",
        "reason",
        "target",
        "reason",
        "reason",
        "target",
        "target",
        "target",
        "text",
        "insn",
        "size2type",
        "target",
        "target",
        "ops",
        "target",
        "target",
        "sym",
        "args",
        "_value",
        "_value",
        "_name",
        "_type",
        "pc",
        "block",
        "block_start",
        "block_start",
        "parameter_set",
        "pc",
        "block_start",
        "use_capstone",
        "instruction_iterator",
        "function_parameters",
        "arg_key_color",
        "op",
        "extended_registers",
        "nb_argument",
        "_arch_mode",
        "_function_name",
        "_function_name",
        "nb_argument",
        "nb_argument",
        "nb_argument",
        "args",
        "_key",
        "_values",
        "_values",
        "filename_line",
        "pc",
        "symtabline",
        "symtab",
        "line_num",
        "fpath",
        "lines",
        "file_base_name",
        "breakpoints",
        "bp_locations",
        "past_lines_color",
        "nb_line",
        "fn",
        "fn",
        "title",
        "cur_line_color",
        "show_extra_info",
        "bp_prefix",
        "prefix",
        "leading",
        "extra_info",
        "current_block",
        "m",
        "symbol",
        "val",
        "addr",
        "addrs",
        "addrs",
        "f",
        "val",
        "val",
        "m",
        "symbol",
        "current_block",
        "nb_backtrace",
        "orig_frame",
        "current_frame",
        "frames",
        "current_frame",
        "nb_backtrace_before",
        "level",
        "current_frame",
        "pc",
        "name",
        "items",
        "frame_args",
        "m",
        "insn",
        "current_frame",
        "res",
        "line",
        "threads",
        "idx",
        "threads",
        "selected_thread",
        "selected_frame",
        "line",
        "frame",
        "sz",
        "fmt",
        "reg",
        "reg",
        "__context_messages__",
        "_cmdline_",
        "_syntax_",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "address",
        "size",
        "group",
        "group",
        "group",
        "group",
        "__watches__",
        "address",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "address",
        "res",
        "_cmdline_",
        "_syntax_",
        "_cmdline_",
        "_syntax_",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "format",
        "__last_target",
        "valid_formats",
        "args",
        "target",
        "read_len",
        "start_addr",
        "read_from",
        "mem",
        "lines",
        "lines",
        "__last_target",
        "endianness",
        "base_address_color",
        "show_ascii",
        "formats",
        "r",
        "l",
        "fmt_str",
        "fmt_pack",
        "lines",
        "i",
        "text",
        "cur_addr",
        "sym",
        "sym",
        "mem",
        "val",
        "text",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "format",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "format",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "format",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "format",
        "_cmdline_",
        "_syntax_",
        "SUPPORTED_SIZES",
        "format",
        "args",
        "addr",
        "size",
        "fcode",
        "d",
        "value",
        "vstr",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "format",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "format",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "format",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "format",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "argc",
        "location",
        "s",
        "addr",
        "s",
        "code_color",
        "string_color",
        "max_recursion",
        "addr",
        "msg",
        "seen_addrs",
        "deref",
        "new_addr",
        "addr",
        "insn",
        "insn_str",
        "s",
        "txt",
        "txt",
        "txt",
        "val",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example_",
        "base_address_color",
        "registers_color",
        "sep",
        "memalign",
        "offset",
        "current_address",
        "addrs",
        "l",
        "addr_l",
        "register_hints",
        "regvalue",
        "m",
        "target",
        "nb",
        "nb",
        "nb",
        "target",
        "addr",
        "addr",
        "from_insnum",
        "to_insnum",
        "insnum_step",
        "from_insnum",
        "to_insnum",
        "insnum_step",
        "start_address",
        "_cmdline_",
        "_syntax_",
        "argc",
        "ret",
        "i",
        "msg",
        "_cmdline_",
        "_syntax_",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "vmmap",
        "color",
        "headers",
        "addr",
        "line_color",
        "line_color",
        "line_color",
        "line_color",
        "l",
        "line",
        "code_addr_color",
        "stack_addr_color",
        "heap_addr_color",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "color",
        "headers",
        "filter_by_file",
        "filter_by_name",
        "l",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "addr",
        "addr",
        "sect",
        "info",
        "sym",
        "name",
        "offset",
        "msg",
        "_cmdline_",
        "_syntax_",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "address",
        "length",
        "key",
        "block",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "address",
        "length",
        "key",
        "block",
        "xored_block",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "depth",
        "depth",
        "loc_start",
        "loc_end",
        "n",
        "f",
        "f",
        "logfile",
        "loc_cur",
        "frame_count_init",
        "delta",
        "loc_cur",
        "_cmdline_",
        "_syntax_",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "args",
        "length",
        "period",
        "pattern_str",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "_aliases_",
        "args",
        "length",
        "period",
        "pattern_be",
        "pattern_le",
        "symbol",
        "addr",
        "dereferenced_value",
        "addr",
        "pattern_be",
        "pattern_le",
        "pattern_be",
        "pattern_le",
        "pattern_be",
        "pattern_le",
        "cyclic_pattern",
        "found",
        "off",
        "found",
        "off",
        "found",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "argc",
        "filename",
        "filename",
        "sec",
        "val",
        "msg",
        "canary",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "output",
        "cmd",
        "lines",
        "readelf",
        "func_names_filter",
        "func_names_filter",
        "vmmap",
        "base_address",
        "end_address",
        "checksec_status",
        "relro_status",
        "full_relro",
        "pie",
        "relro_status",
        "partial_relro",
        "relro_status",
        "jmpslots",
        "address",
        "_",
        "_",
        "_",
        "name",
        "address_val",
        "address_val",
        "got_address",
        "color",
        "color",
        "line",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_cmdline_",
        "_aliases_",
        "_syntax_",
        "left_pad",
        "_cmdline_",
        "_aliases_",
        "_syntax_",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example_",
        "match",
        "color",
        "highlight_table",
        "match",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "_example_",
        "_cmdline_",
        "_syntax_",
        "_aliases_",
        "dangerous_functions",
        "_cmdline_",
        "_syntax_",
        "bp_malloc",
        "bp_calloc",
        "bp_free",
        "bp_realloc",
        "bp_malloc",
        "bp_calloc",
        "bp_free",
        "bp_realloc",
        "__heap_allocated_list__",
        "__heap_freed_list__",
        "__heap_uaf_watchpoints__",
        "_cmdline_",
        "_syntax_",
        "insn",
        "insn_str",
        "_cmdline_",
        "_syntax_",
        "color",
        "path",
        "arch",
        "syscall_table",
        "reg_value",
        "syscall_entry",
        "values",
        "parameters",
        "registers",
        "headers",
        "param_names",
        "line",
        "addrs",
        "sep",
        "p",
        "_fullname",
        "_mod",
        "path",
        "path",
        "section",
        "zone",
        "addr",
        "_function_",
        "_function_",
        "_function_",
        "name",
        "name",
        "addr",
        "_function_",
        "_function_",
        "_cmdline_",
        "_syntax_",
        "docs",
        "__doc__",
        "doc",
        "doc",
        "syntax",
        "msg",
        "_cmdline_",
        "_syntax_",
        "loaded_commands",
        "loaded_functions",
        "missing_commands",
        "doc",
        "cfg",
        "bkp_fname",
        "bkp_fname",
        "source",
        "nb_added",
        "nb_inital",
        "directories",
        "directory",
        "fpath",
        "nb_added",
        "nb_missing",
        "commands",
        "aliases",
        "cmd",
        "loaded_commands",
        "ver",
        "nb_cmds",
        "_cmdline_",
        "_syntax_",
        "docs",
        "cmd",
        "class_name",
        "_",
        "doc",
        "doc",
        "aliases",
        "msg",
        "__doc__",
        "_cmdline_",
        "_syntax_",
        "loaded_commands",
        "argv",
        "argc",
        "prefix",
        "names",
        "res",
        "string_color",
        "misc_color",
        "_value",
        "_type",
        "_desc",
        "_setting",
        "_type",
        "_value",
        "_value",
        "loaded_commands",
        "plugin_name",
        "_type",
        "_newval",
        "_newval",
        "settings",
        "_cmdline_",
        "_syntax_",
        "cfg",
        "old_sect",
        "sect",
        "optname",
        "value",
        "value",
        "old_sect",
        "_cmdline_",
        "_syntax_",
        "quiet",
        "cfg",
        "key",
        "_type",
        "new_value",
        "new_value",
        "new_value",
        "_cmdline_",
        "_syntax_",
        "missing_commands",
        "reason",
        "_cmdline_",
        "_syntax_",
        "args",
        "cmd",
        "c",
        "_cmdline_",
        "_syntax_",
        "argv",
        "p",
        "_command",
        "_alias",
        "c",
        "r",
        "__doc__",
        "_instance",
        "complete",
        "_cmdline_",
        "_syntax_",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "_cmdline_",
        "_syntax_",
        "alias_to_remove",
        "_cmdline_",
        "_syntax_",
        "tmux",
        "screen",
        "tmux",
        "old_ptses",
        "new_ptses",
        "pty",
        "pty",
        "screen",
        "sty",
        "fd_script",
        "script_path",
        "fd_tty",
        "tty_path",
        "pty",
        "pyenv",
        "PYENV_ROOT",
        "PYENV_VERSION",
        "site_packages_dir",
        "pythonbin",
        "PREFIX",
        "SITE_PACKAGES_DIRS",
        "gdb",
        "prompt_hook",
        "__gef__"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "",
        "",
        "",
        "GEF - Multi-Architecture GDB Enhanced Features for Exploiters & Reverse-Engineers",
        "",
        "by  @_hugsy_",
        "",
        "",
        "GEF is a kick-ass set of commands for X86, ARM, MIPS, PowerPC and SPARC to",
        "make GDB cool again for exploit dev. It is aimed to be used mostly by exploit",
        "devs and reversers, to provides additional features to GDB using the Python",
        "API to assist during the process of dynamic analysis.",
        "",
        "GEF fully relies on GDB API and other Linux-specific sources of information",
        "(such as /proc/<pid>). As a consequence, some of the features might not work",
        "on custom or hardened systems such as GrSec.",
        "",
        "Since January 2020, GEF solely support GDB compiled with Python3 and was tested on",
        "",
        "For GEF with Python2 (only) support was moved to the GEF-Legacy",
        "(https://github.com/hugsy/gef-legacy)",
        "",
        "To start: in gdb, type `source /path/to/gef.py`",
        "",
        "",
        "",
        "gef is distributed under the MIT License (MIT)",
        "Copyright (c) 2013-2021 crazy rabbidz",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to deal",
        "in the Software without restriction, including without limitation the rights",
        "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included in all",
        "copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
        "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
        "SOFTWARE.",
        "pylint: disable=",
        "if out of gdb, the only action allowed is to update gef.py",
        "if the FD has never been open, open it",
        "if the user has changed the redirect setting during runtime, update the state",
        "otherwise, keep using it",
        "if the tty was closed, revert back to stdout",
        "when in a `gef-remote` session, realpath returns the path to the binary on the local disk, not remote",
        "off 0x0",
        "adjust endianness in bin reading",
        "off 0x7",
        "off 0x9",
        "off 0x10",
        "off 0x18",
        "if arch 64bits",
        "else arch 32bits",
        "Allow formatting an instruction with {:o} to show opcodes.",
        "The number of bytes to display can be configured, e.g. {:4o} to only show 4 bytes of the opcodes",
        "struct offsets",
        "struct members",
        "helper methods",
        "https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L4537",
        "if free-ed functions",
        "Not a single-linked-list (sll) or no Safe-Linking support yet",
        "Unmask (\"reveal\") the Safe-Linking pointer",
        "for compat",
        "for compat",
        "endif free-ed functions",
        "create new setting",
        "set existing setting",
        "this is horrible, ugly hack and shitty perf...",
        "find a *clean* way to get gdb.Location from an address",
        "fixed-length ABI",
        "variable-length ABI",
        "we try to find a good set of previous instructions by \"guessing\" disassembling backwards",
        "the 15 comes from the longest instruction valid size",
        "this is because we can hit an unmapped page trying to read backward",
        "1. check that the disassembled instructions list size can satisfy",
        "we expect the current instruction plus the n before it",
        "If the list of instructions is longer than what we need, then we",
        "could get lucky and already have more than what we need, so slice down",
        "2. check that the sequence ends with the current address",
        "3. check all instructions are valid",
        "fixed-length ABI",
        "variable-length ABI",
        "GDB version >= 10.1",
        "Unknown, we throw an exception to be safe",
        "RISC-V has no flags registers",
        "r2 is the zero register if we are comparing to 0",
        "r2 is populated with the second operand",
        "If the conditional operation is not unsigned, convert the python long into",
        "its two's complement",
        "http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0041c/Caccegih.html",
        "mov r1, r1",
        "Thumb instructions have variable-length (2 or 4-byte)",
        "http://www.botskool.com/user-pages/tutorials/electronics/arm-7-tutorial-part-1",
        "ref: http://www.davespace.co.uk/arm/introduction-to-arm/conditional.html",
        "If it's a pop, we have to peek into the stack, otherwise use lr",
        "'bx lr' or 'add pc, lr, #0'",
        "http://events.linuxfoundation.org/sites/events/files/slides/KoreaLinuxForum-2014.pdf",
        "https://www.element14.com/community/servlet/JiveServlet/previewBody/41836-102-1-229511/ARM.Reference_Manual.pdf",
        "sect. 5.1.1",
        "operands[1] has one or more white spaces in front, then a #, then the number",
        "so we need to eliminate them",
        "operands[1] has one or more white spaces in front, then a #, then the number",
        "so we need to eliminate them",
        "all kudos to fG! (https://github.com/gdbinit/Gdbinit/blob/master/gdbinit#L1654)",
        "Account for RA being at the top of the stack",
        "We don't want to inherit x86's stack based param getter",
        "http://www.ibm.com/developerworks/library/l-ppc/index.html",
        "cr7",
        "http://www.cebix.net/downloads/bebox/pem32b.pdf (% 2.1.3)",
        "Ref: http://www.ibm.com/developerworks/library/l-ppc/index.html",
        "1 = r1 = sp",
        "r0 = syscall_code | r3, r4, r5 = args",
        "sethi 0, %g0",
        "http://www.gaisler.com/doc/sparcv8.pdf",
        "http://moss.csc.ncsu.edu/~mueller/codeopt/codeopt00/notes/condbranch.html",
        "sparcv9.pdf, 5.1.5.1 (ccr)",
        "http://vhouten.home.xs4all.nl/mipsel/r3000-isa.html",
        "sll $0,$0,0",
        "optional args",
        "positional args",
        "refuse positional arguments",
        "todo: check when/if gdb.Frame implements `level()`",
        "if no filename specified, try downloading target from /proc",
        "if target is remote file, download",
        "inferior probably did not have name, extract cmdline from info proc",
        "fallback memory view",
        "i.e. there is no info on this address",
        "load libc function arguments' definitions",
        "current arch and mode already loaded",
        "hacky patch to unify capstone/ppc syntax with keystone & unicorn:",
        "CS_MODE_PPC32 does not exist (but UC_MODE_32 & KS_MODE_32 do)",
        "Since the tty can be closed at any time, a PermissionError exception can",
        "occur when `clear_screen` is called. We handle this scenario properly",
        "GDB does lazy fetch by default so we need to force access to the value",
        "",
        "Event hooking",
        "",
        "",
        "Virtual breakpoints",
        "",
        "set_func(base): given a base address return a",
        "\"set breakpoint\" gdb command string",
        "breakpoint num, 0 represents not instantiated yet",
        "this address might be a symbol, just to know where to break",
        "",
        "Breakpoints",
        "",
        "pop from free-ed list if it was in it",
        "pop from uaf watchlist",
        "seek all the currently allocated chunks, read their effective size and check for overlap",
        "false positive, discard",
        "add it to alloc-ed list",
        "check if item was in alloc-ed list",
        "if so pop it out",
        "add new item to alloc-ed list",
        "if here, no error",
        "1. move alloc-ed item to free list",
        "pop from alloc-ed list",
        "2. add it to free-ed list",
        "3. (opt.) add a watchpoint on pointer",
        "software watchpoints stop after the next statement (see",
        "https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html)",
        "",
        "Commands",
        "",
        "Note: since we are intercepting cleaning exceptions here, commands preferably should avoid",
        "catching generic Exception, but rather specific ones. This is allows a much cleaner use.",
        "make sure settings are always associated to the root command (which derives from GenericCommand)",
        "Copy/paste this template for new command",
        "@register_command",
        "class TemplateCommand(GenericCommand):",
        "\"\"\"TemplateCommand: description here will be seen in the help menu for the command.\"\"\"",
        "_cmdline_ = \"template-fake\"",
        "_syntax_  = \"{:s}\".format(_cmdline_)",
        "_aliases_ = [\"tpl-fk\",]",
        "def __init__(self):",
        "super().__init__(complete=gdb.COMPLETE_FILENAME)",
        "return",
        "def do_invoke(self, argv):",
        "return",
        "When the process is already on, set real breakpoints immediately",
        "No breakpoint info needed",
        "no arg, delete all",
        "delete current real breakpoints if exists",
        "delete virtual breakpoints",
        "get base address",
        "modify all breakpoints",
        "after attach, we are stopped so that we can",
        "get base address to modify our breakpoint",
        "after remote attach, we are stopped so that we can",
        "get base address to modify our breakpoint",
        "https://github.com/torvalds/linux/blob/v4.7/include/net/tcp_states.h#L16",
        "try to dereference pointers",
        "hack",
        "If it's a builtin or defined in the ELF use gdb's `ptype`",
        "fill in memory with sockaddr_in struct contents",
        "we will do this in the stack, since connect() wants a pointer to a struct",
        "recover stack state",
        "Output example: $1 = 3",
        "try to solve the argument using gdb",
        "check if value is addressable",
        "if the bin is PIE, we need to subtract the base address",
        "if gdb can't parse the value, let ida deal with it",
        "trying to reconnect",
        "do not sync in library",
        "if it's an address i.e. location starts with \"*\"",
        "it is a symbol",
        "it is possible that the server was stopped between now and the last sync",
        "add new bp from IDA",
        "and remove the old ones",
        "if it's an address i.e. location starts with \"*\"",
        "it is a symbol",
        "need to handle segmentation (and pagination) via MSR",
        "this section is for GDB only, skip it",
        "argument check",
        "compat layer for qemu-user",
        "lazily install handler on first use",
        "refresh the architecture setting",
        "gdb.execute(\"file {:s}\".format(infos[\"exe\"]))",
        "EOF",
        "corrupted",
        "Determine if we are using libc with tcache built in (2.26+)",
        "As a nicety, we want to display threads in ascending order by gdb number",
        "Only print the entry if there are valid chunks. Don't trust count",
        "For multithreaded binaries, the tcache symbol (in thread local",
        "storage) will give us the correct address.",
        "In binaries not linked with pthread (and therefore there is only",
        "one thread), we can't use the tcache symbol, but we can guess the",
        "correct address because the tcache is consistently the first",
        "allocation in the main arena.",
        "Glibc changed the size of the tcache in version 2.30; this fix has",
        "been backported inconsistently between distributions. We detect the",
        "difference by checking the size of the allocated chunk for the",
        "tcache.",
        "Minimum usable size of allocated tcache chunk = ?",
        "For new tcache:",
        "TCACHE_MAX_BINS * _2_ + TCACHE_MAX_BINS * ptrsize",
        "For old tcache:",
        "TCACHE_MAX_BINS * _1_ + TCACHE_MAX_BINS * ptrsize",
        "Special (e.g. segment) registers go on their own line",
        "check to see if reg value is ascii",
        "API : http://shell-storm.org/shellcode/",
        "format: [author, OS/arch, cmd, id, link]",
        "ropper set up own autocompleter after which gdb/gef autocomplete don't work",
        "for updates, see https://github.com/keystone-engine/keystone/blob/master/include/keystone/keystone.h",
        "this is fire a ValueError if the arch/mode/endianess are invalid",
        "http://www.sco.com/developers/gabi/latest/ch4.eheader.html",
        "this case can happen when doing remote debugging",
        "if here, clear the breakpoint if any set",
        "break at entry point",
        "a MemoryError will happen when $pc is corrupted (invalid address)",
        "If this exception is triggered, it means that the current register",
        "is corrupted. Just use the register \"raw\" value (not eval-ed)",
        "Already an int",
        "If the operand isn't an address right now we can't parse it",
        "is there a symbol?",
        "extract it",
        "it's an address, just use as is",
        "also consider extended registers",
        "we subtract one because the line number returned by gdb start at 1",
        "backward compat for gdb (gdb < 7.10)",
        "Is this value a pointer or a value?",
        "-- If it's a pointer, dereference",
        "if here, dereferencing addr has triggered a MemoryError, no need to go further",
        "-- Otherwise try to parse the value",
        "if not able to parse cleanly, simply display and break",
        "1. check if it's a symbol (like \"$sp\" or \"0x1337\")",
        "1-bis. try to dereference",
        "2. assume it's a plain string",
        "get the filtering parameter.",
        "getting vmmap to understand the boundaries of the main binary",
        "we will use this info to understand if a function has been resolved or not.",
        "get the checksec output.",
        "if pie we will have offset instead of abs address.",
        "retrieve jump slots using readelf",
        "if we have a filter let's skip the entries that are not requested.",
        "address_val is an offset from the base_address if we have PIE.",
        "read the address of the function.",
        "for the swag: different colors if the function has been resolved or not.",
        "function hasn't already been resolved",
        "function has already been resolved",
        "when inferior quits, we need to clean everything for a next execution",
        "in some cases, gdb was found failing to correctly remove the retbp but they can be safely ignored since the debugging session is over",
        "loading GEF sub-commands",
        "load the saved settings",
        "restore the autosave/autoreload breakpoints policy (if any)",
        "load plugins from `extra_plugins_dir`",
        "if here, at least one extra plugin was loaded, so we need to restore",
        "the settings once more",
        "restore if existing",
        "add hook for autosave breakpoints on quit command",
        "load all of the functions",
        "sort by command name",
        "do not print subcommands in gef help",
        "no prefix: example: `gef config TAB`",
        "if looking for possible prefix",
        "finally, look for possible values for given prefix",
        "save the configuration",
        "save the aliases",
        "load the aliases",
        "load the other options",
        "ensure that the temporary directory always exists",
        "artificial delay to make sure `tty_path` is populated",
        "When using a Python virtual environment, GDB still loads the system-installed Python",
        "so GEF doesn't load site-packages dir from environment",
        "In order to fix it, from the shell with venv activated we run the python binary,",
        "take and parse its path, add the path to the current python process using sys.path.extend",
        "setup prompt",
        "setup config",
        "gdb history",
        "gdb input and output bases",
        "pretty print",
        "this will raise a gdb.error unless we're on x86",
        "we can safely ignore this",
        "SIGALRM will simply display a message, but gdb won't forward the signal to the process",
        "load GEF",
        "gdb events configuration",
        "if here, we are sourcing gef from a gdb session already attached",
        "we must force a call to the new_objfile handler (see issue #278)"
    ],
    "docstrings": [
        "* x86-32 & x86-64",
        "* arm v5,v6,v7",
        "* aarch64 (armv8)",
        "* mips & mips64",
        "* powerpc & powerpc64",
        "* sparc & sparc64(v9)",
        "\"\"\"Basic HTTP wrapper for GET request. Return the body of the page if HTTP code is OK,\n    otherwise return None.\"\"\"",
        "\"\"\"Try to update `gef` to the latest version pushed on GitHub master branch.\n    Return 0 on success, 1 on failure. \"\"\"",
        "\"\"\"Free all caches. If an object is cached, it will have a callable attribute `cache_clear`\n    which will be invoked to purge the function cache.\"\"\"",
        "\"\"\"\n    Highlight text using highlight_table { match -> color } settings.\n\n    If RegEx is enabled it will create a match group around all items in the\n    highlight_table and wrap the specified color in the highlight_table\n    around those matches.\n\n    If RegEx is disabled, split by ANSI codes and 'colorify' each match found\n    within the specified string.\n    \"\"\"",
        "\"\"\"Wrapper around print(), using string buffering feature.\"\"\"",
        "\"\"\"Store the content to be printed for a function in memory, and flush it on function exit.\"\"\"",
        "\"\"\"Used to colorify terminal output.\"\"\"",
        "\"\"\"Color text according to the given attributes.\"\"\"",
        "\"\"\"GEF representation of memory addresses.\"\"\"",
        "\"\"\"GEF representation of Linux permission.\"\"\"",
        "\"\"\"GEF representation of process memory sections.\"\"\"",
        "\"\"\"Basic ELF parsing.\n    Ref:\n    - http://www.skyfree.org/linux/references/ELF_Format.pdf\n    - http://refspecs.freestandards.org/elf/elfspec_ppc.pdf\n    - http://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi.html\n    \"\"\"",
        "\"\"\"\n        Instantiate an ELF object. The default behavior is to create the object by parsing the ELF file.\n        But in some cases (QEMU-stub), we may just want a simple minimal object with default values.\"\"\"",
        "\"\"\"GEF representation of a CPU instruction.\"\"\"",
        "\"\"\"GEF representation of malloc_state from https://github.com/bminor/glibc/blob/glibc-2.28/malloc/malloc.c#L1658\"\"\"",
        "\"\"\"Glibc arena class\n    Ref: https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1671\"\"\"",
        "\"\"\"Return head chunk in fastbinsY[i].\"\"\"",
        "\"\"\"Glibc chunk class.\n    Ref:  https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/.\"\"\"",
        "\"\"\"Check if the current block is used by:\n        - checking the M bit is true\n        - or checking that next chunk PREV_INUSE flag is true\"\"\"",
        "\"\"\"Print a centered title.\"\"\"",
        "\"\"\"Push the message to be displayed the next time the context is invoked.\"\"\"",
        "\"\"\"Display the last Python exception.\"\"\"",
        "\"\"\"{} File \"{}\", line {:d}, in {}()\"\"\"",
        "\"\"\"Returns a sanitized version as string of the bytes list given in input.\"\"\"",
        "\"\"\"Returns an immutable bytes list from the string given as input.\"\"\"",
        "\"\"\"Locate a command on the filesystem.\"\"\"",
        "\"\"\"Return the hexdump of `src` argument.\n    @param source *MUST* be of type bytes or bytearray\n    @param length is the length of items per line\n    @param separator is the default character to use if one byte is not printable\n    @param show_raw if True, do not add the line nor the text translation\n    @param base is the start address of the block being hexdump\n    @return a string with the hexdump\"\"\"",
        "\"\"\"Check if debug mode is enabled.\"\"\"",
        "\"\"\"Redirect all GDB output to `to_file` parameter. By default, `to_file` redirects to `/dev/null`.\"\"\"",
        "\"\"\"Disable the output redirection, if any.\"\"\"",
        "\"\"\"Read global gef settings.\n    Return None if not found. A valid config setting can never return None,\n    but False, 0 or \"\".\"\"\"",
        "\"\"\"Set global gef settings.\n    Raise ValueError if `name` doesn't exist and `type` and `desc`\n    are not provided.\"\"\"",
        "\"\"\"Recursive mkdir() creation. If successful, return the absolute path of the directory created.\"\"\"",
        "\"\"\"Fetch the proper symbol or None if not defined.\"\"\"",
        "\"\"\"Retrieve the location of the `address` argument from the symbol table.\n    Return a tuple with the name and offset if found, None otherwise.\"\"\"",
        "\"\"\"Disassemble instructions from `start_pc` (Integer). Accepts the following named parameters:\n    - `end_pc` (Integer) only instructions whose start address fall in the interval from start_pc to end_pc are returned.\n    - `count` (Integer) list at most this many disassembled instructions\n    If `end_pc` and `count` are not provided, the function will behave as if `count=1`.\n    Return an iterator of Instruction objects\n    \"\"\"",
        "\"\"\"Return the address (Integer) of the `n`-th instruction before `addr`.\"\"\"",
        "\"\"\"Return the address (Integer) of the `n`-th instruction after `addr`.\"\"\"",
        "\"\"\"Return the `n`-th instruction after `addr` as an Instruction object.\"\"\"",
        "\"\"\"Return the full Instruction found at the specified address.\"\"\"",
        "\"\"\"Return the current instruction as an Instruction object.\"\"\"",
        "\"\"\"Return the next instruction as an Instruction object.\"\"\"",
        "\"\"\"Disassemble `nb_insn` instructions after `addr` and `nb_prev` before `addr`.\n    Return an iterator of Instruction objects.\"\"\"",
        "\"\"\"Disassemble `nb_insn` instructions after `addr` and `nb_prev` before\n    `addr` using the Capstone-Engine disassembler, if available.\n    Return an iterator of Instruction objects.\"\"\"",
        "\"\"\"Execute an external command and return the result.\"\"\"",
        "\"\"\"Execute the parameter `source` as GDB command. This is done by writing `commands` to\n    a temporary file, which is then executed via GDB `source` command. The tempfile is then deleted.\"\"\"",
        "\"\"\"Check the security property of the ELF binary. The following properties are:\n    - Canary\n    - NX\n    - PIE\n    - Fortify\n    - Partial/Full RelRO.\n    Return a dict() with the different keys mentioned above, and the boolean\n    associated whether the protection was found.\"\"\"",
        "\"\"\"Return the binary's architecture.\"\"\"",
        "\"\"\"Return the binary endianness.\"\"\"",
        "\"\"\"Return the binary entry point.\"\"\"",
        "\"\"\"Return a human readable string showing the flag states.\"\"\"",
        "\"\"\"Generic metaclass for the architecture supported by GEF.\"\"\"",
        "\"\"\"Retrieves the correct parameter used for the current function call.\"\"\"",
        "\"\"\"Convert a python long value to its two's complement.\"\"\"",
        "\"\"\"Determine if the machine is currently in THUMB mode.\"\"\"",
        "\"\"\" Refs:\n    - http://www.cse.scu.edu/~atkinson/teaching/sp05/259/sparc.pdf\n    \"\"\"",
        "\"\"\"Refs:\n    - http://math-atlas.sourceforge.net/devel/assembly/abi_sysV_sparc.pdf\n    - https://cr.yp.to/2005-590/sparcv9.pdf\n    \"\"\"",
        "\"\"\"Write `buffer` at address `address`.\"\"\"",
        "\"\"\"Return a `length` long byte array with the copy of the process memory at `addr`.\"\"\"",
        "\"\"\"Return an integer read from memory.\"\"\"",
        "\"\"\"Return a C-string read from memory.\"\"\"",
        "\"\"\"Read an ASCII string from memory\"\"\"",
        "\"\"\"Pack one byte respecting the current architecture endianness.\"\"\"",
        "\"\"\"Pack one word respecting the current architecture endianness.\"\"\"",
        "\"\"\"Pack one dword respecting the current architecture endianness.\"\"\"",
        "\"\"\"Pack one qword respecting the current architecture endianness.\"\"\"",
        "\"\"\"Unpack one byte respecting the current architecture endianness.\"\"\"",
        "\"\"\"Unpack one word respecting the current architecture endianness.\"\"\"",
        "\"\"\"Unpack one dword respecting the current architecture endianness.\"\"\"",
        "\"\"\"Unpack one qword respecting the current architecture endianness.\"\"\"",
        "\"\"\"Helper function to determine if the buffer pointed by `address` is an ASCII string (in GDB)\"\"\"",
        "\"\"\"Check if GDB is running.\"\"\"",
        "\"\"\"Decorator wrapper to check if GDB is running.\"\"\"",
        "\"\"\"Decorator wrapper to check if GDB is running locally (target not remote).\"\"\"",
        "\"\"\"Decorator to add a warning when a feature is experimental.\"\"\"",
        "\"\"\"Decorator to check whether current GDB version requirements.\"\"\"",
        "\"\"\"Argument parsing decorator.\"\"\"",
        "\"\"\"Helper function to submit data to the clipboard\"\"\"",
        "\"\"\"Cast a gdb.Value to unsigned long.\"\"\"",
        "\"\"\"Return a register's value.\"\"\"",
        "\"\"\"Return the current OS.\"\"\"",
        "\"\"\"Return the PID of the debuggee process.\"\"\"",
        "\"\"\"Return the local absolute path of the file currently debugged.\"\"\"",
        "\"\"\"Return the full filename of the file currently debugged.\"\"\"",
        "\"\"\"Return True if the current file is a Mach-O binary.\"\"\"",
        "\"\"\"Return True if the specified file is a Mach-O binary.\"\"\"",
        "\"\"\"Download filename `target` inside the mirror tree inside the get_gef_setting(\"gef.tempdir\").\n    The tree architecture must be get_gef_setting(\"gef.tempdir\")/gef/<local_pid>/<remote_filepath>.\n    This allow a \"chroot-like\" tree format.\"\"\"",
        "\"\"\"Attempt to open the given file, if remote debugging is active, download\n    it first to the mirror in /tmp/.\"\"\"",
        "\"\"\"Attempt to get the length of the raw bytes of a function.\"\"\"",
        "\"\"\"Parse the Linux process `/proc/pid/maps` file.\"\"\"",
        "\"\"\"Return the mapped memory sections\"\"\"",
        "\"\"\"Retrieve the debuggee sections.\"\"\"",
        "\"\"\"Retrieve all the files loaded by debuggee.\"\"\"",
        "\"\"\"Look up for an address in memory.\n    Return an Address object if found, None otherwise.\"\"\"",
        "\"\"\"Look up for a path in the process memory mapping.\n    Return a Section object if found, None otherwise.\"\"\"",
        "\"\"\"Look up a file by name and path.\n    Return a Zone object if found, None otherwise.\"\"\"",
        "\"\"\"Look up for a file by its address.\n    Return a Zone object if found, None otherwise.\"\"\"",
        "\"\"\"Try to find the address in the process address space.\n    Return an Address object, with validity flag set based on success.\"\"\"",
        "\"\"\"Return `data` xor-ed with `key`.\"\"\"",
        "\"\"\"Return whether provided string is a hexadecimal value.\"\"\"",
        "\"\"\"GDB event handler for new object continue cases.\"\"\"",
        "\"\"\"GDB event handler for stop cases.\"\"\"",
        "\"\"\"GDB event handler for new object file cases.\"\"\"",
        "\"\"\"GDB event handler for exit cases.\"\"\"",
        "\"\"\"GDB event handler for mem changes cases.\"\"\"",
        "\"\"\"GDB event handler for reg changes cases.\"\"\"",
        "\"\"\"Return the current terminal size.\"\"\"",
        "\"\"\"\n    Retrieves architecture and mode from the arguments for use for the holy\n    {cap,key}stone/unicorn trinity.\n    \"\"\"",
        "\"\"\"\n    Retrieves architecture and mode from the current context.\n    \"\"\"",
        "\"\"\"Assembly encoding function based on keystone.\"\"\"",
        "\"\"\"Return an Elf object with info from `filename`. If not provided, will return\n    the currently debugged file.\"\"\"",
        "\"\"\"Checks if current target is 64bit.\"\"\"",
        "\"\"\"Checks if current target is 32bit.\"\"\"",
        "\"\"\"Checks if current target is x86-64\"\"\"",
        "\"\"\"Checks if current target is an x86-32\"\"\"",
        "\"\"\"Sets the current architecture.\n    If an arch is explicitly specified, use that one, otherwise try to parse it\n    out of the current target. If that fails, and default is specified, select and\n    set that arch.\n    Return the selected arch, or raise an OSError.\n    \"\"\"",
        "\"\"\"Try to determine the size of a pointer on this system.\n    First, try to parse it out of the ELF header.\n    Next, use the size of `size_t`.\n    Finally, try the size of $pc.\n    If `in_bits` is set to True, the result is returned in bits, otherwise in\n    bytes.\"\"\"",
        "\"\"\"Clear the screen.\"\"\"",
        "\"\"\"Format the address according to its size.\"\"\"",
        "\"\"\"Format the address according to its size, but with spaces instead of zeroes.\"\"\"",
        "\"\"\"Align the provided address to the process's native length.\"\"\"",
        "\"\"\"Align the address to the given size.\"\"\"",
        "\"\"\"Align the address to a page.\"\"\"",
        "\"\"\"Parse an address and return it as an Integer.\"\"\"",
        "\"\"\"\"Return True is the current debugging session is running through GDB remote session.\"\"\"",
        "\"\"\"De Bruijn sequence for alphabet and subsequences of length n (for compat. w/ pwnlib).\"\"\"",
        "\"\"\"Create a `length` byte bytearray of a de Bruijn cyclic pattern.\"\"\"",
        "\"\"\"GEF wrapper for gdb.parse_and_eval(): this function returns None instead of raising\n    gdb.error if the eval failed.\"\"\"",
        "\"\"\"GEF wrapper for gdb dereference function.\"\"\"",
        "\"\"\"Defines a new convenience value.\"\"\"",
        "\"\"\"set {:s} = \"{:s}\" \"\"\"",
        "\"\"\"Parses an address range (e.g. 0x400000-0x401000)\"\"\"",
        "\"\"\"Retrieves the auxiliary values of the current execution. Returns None if not running, or a dict()\n    of values.\"\"\"",
        "\"\"\"Read the canary of a running process using Auxiliary Vector. Return a tuple of (canary, location)\n    if found, None otherwise.\"\"\"",
        "\"\"\"Get the page size from auxiliary values.\"\"\"",
        "\"\"\"Checks if GDB supports events without crashing.\"\"\"",
        "\"\"\"PIE virtual breakpoint (not real breakpoint).\"\"\"",
        "\"\"\"Inspect stack for format string.\"\"\"",
        "\"\"\"Create a breakpoint to permanently disable a call (fork/alarm/signal/etc.).\"\"\"",
        "\"\"\"When hit, this temporary breakpoint will restore the original code, and position\n    $pc correctly.\"\"\"",
        "\"\"\"Track allocations done with malloc() or calloc().\"\"\"",
        "\"\"\"Internal temporary breakpoint to retrieve the return value of malloc().\"\"\"",
        "\"\"\"Track re-allocations done with realloc().\"\"\"",
        "\"\"\"Internal temporary breakpoint to retrieve the return value of realloc().\"\"\"",
        "\"\"\"Track calls to free() and attempts to detect inconsistencies.\"\"\"",
        "\"\"\"Internal temporary breakpoint to track free()d values.\"\"\"",
        "\"\"\"Custom watchpoints set TraceFreeBreakpoint() to monitor free()d pointers being used.\"\"\"",
        "\"\"\"If this method is triggered, we likely have a UaF. Break the execution and report it.\"\"\"",
        "\"\"\"Breakpoint used internally to stop execution at the most convenient entry point.\"\"\"",
        "\"\"\"Breakpoint which shows a specified name, when hit.\"\"\"",
        "\"\"\"Registering function for new GEF (sub-)command to GDB.\"\"\"",
        "\"\"\"Decorator for registering new GEF (sub-)command to GDB.\"\"\"",
        "\"\"\"Decorator for registering new command with priority, meaning that it must\n    loaded before the other generic commands.\"\"\"",
        "\"\"\"Decorator for registering a new convenience function to GDB.\"\"\"",
        "\"\"\"This is an abstract class for invoking commands, should not be instantiated.\"\"\"",
        "\"\"\"Return the list of settings for this command.\"\"\"",
        "\"\"\"Display GEF version info.\"\"\"",
        "\"\"\"Print bytes format in high level languages.\"\"\"",
        "\"\"\"{} [--lang LANG] [--bitlen SIZE] [(--length,-l) LENGTH] [--clip] LOCATION\n\\t--lang LANG specifies the output format for programming language (available: {}, default 'py').\n\\t--bitlen SIZE specifies size of bit (possible values: {}, default is 8).\n\\t--length LENGTH specifies length of array (default is 256).\n\\t--clip The output data will be copied to clipboard\n\\tLOCATION specifies where the address of bytes is stored.\"\"\"",
        "\"\"\"Default value for print-format command.\"\"\"",
        "\"\"\"PIE breakpoint support.\"\"\"",
        "\"\"\"Set a PIE breakpoint.\"\"\"",
        "\"\"\"Display breakpoint info.\"\"\"",
        "\"\"\"Delete a PIE breakpoint.\"\"\"",
        "\"\"\"Run process with PIE breakpoint support.\"\"\"",
        "\"\"\"Do attach with PIE breakpoint support.\"\"\"",
        "\"\"\"Attach to a remote connection with PIE breakpoint support.\"\"\"",
        "\"\"\"SmartEval: Smart eval (vague approach to mimic WinDBG `?`).\"\"\"",
        "\"\"\"Shows the canary value of the current process. Apply the techique detailed in\n    https://www.elttam.com.au/blog/playing-with-canaries/ to show the canary.\"\"\"",
        "\"\"\"Extends the info given by GDB `info proc`, by giving an exhaustive description of the\n    process status (file descriptors, ancestor, descendants, etc.).\"\"\"",
        "\"\"\"Customize GEF appearance.\"\"\"",
        "\"\"\"Dump user defined structure.\n    This command attempts to reproduce WinDBG awesome `dt` command for GDB and allows\n    to apply structures (from symbols or custom) directly to an address.\n    Custom structures can be defined in pure Python using ctypes, and should be stored\n    in a specific directory, whose path must be stored in the `pcustom.struct_path`\n    configuration setting.\"\"\"",
        "\"\"\"\n        Returns a tuple of (class, instance) if modname!classname exists\n        \"\"\"",
        "\"\"\"\n        Return a list of all the files in the pcustom directory\n        \"\"\"",
        "\"\"\"\n        Return a hash of all the structures, with the key set the to filepath\n        \"\"\"",
        "\"\"\"Load a custom module, and return it\"\"\"",
        "\"\"\"PCustom: list available structures\"\"\"",
        "\"\"\"Dump the list of all the structures and their respective.\"\"\"",
        "\"\"\"PCustom: show the content of a given structure\"\"\"",
        "\"\"\"PCustom: edit the content of a given structure\"\"\"",
        "\"\"\"ChangeFdCommand: redirect file descriptor during runtime.\"\"\"",
        "\"\"\"call (int)socket({}, {}, 0)\"\"\"",
        "\"\"\"call (int)connect({}, {}, {})\"\"\"",
        "\"\"\"call (int)open(\"{:s}\", 66, 0666)\"\"\"",
        "\"\"\"call (int)dup2({:d}, {:d})\"\"\"",
        "\"\"\"call (int)close({:d})\"\"\"",
        "\"\"\"p/d {}\"\"\"",
        "\"\"\"IDA Interact: set of commands to interact with IDA via a XML RPC service\n    deployed via the IDA script `ida_gef.py`. It should be noted that this command\n    can also be used to interact with Binary Ninja (using the script `binja_gef.py`)\n    using the same interface.\"\"\"",
        "\"\"\"Connect to the XML-RPC service.\"\"\"",
        "\"\"\"Submit all active breakpoint addresses to IDA/BN.\"\"\"",
        "\"\"\"Search for addresses that are located in a memory mapping (haystack) that belonging\n    to another (needle).\"\"\"",
        "\"\"\"SearchPatternCommand: search a pattern in memory. If given an hex value (starting with 0x)\n    the command will also try to look for upwards cross-references to this address.\"\"\"",
        "\"\"\"  {:#x} - {:#x} {}  \"{}\" \"\"\"",
        "\"\"\"Search a pattern within a range defined by arguments.\"\"\"",
        "\"\"\"Search a pattern within the whole userland memory.\"\"\"",
        "\"\"\"Edit flags in a human friendly way.\"\"\"",
        "\"\"\"Change a page permission. By default, it will change it to RWX.\"\"\"",
        "\"\"\"Use Unicorn-Engine to emulate the behavior of the binary, without affecting the GDB runtime.\n    By default the command will emulate only the next instruction, but location and number of\n    instruction can be changed via arguments to the command line. By default, it will emulate\n    the next instruction from current PC.\"\"\"",
        "\"\"\"{:s} [--start LOCATION] [--until LOCATION] [--skip-emulation] [--output-file PATH] [NB_INSTRUCTION]\n\\n\\t--start LOCATION specifies the start address of the emulated run (default $pc).\n\\t--until LOCATION specifies the end address of the emulated run.\n\\t--skip-emulation\\t do not execute the script once generated.\n\\t--output-file /PATH/TO/SCRIPT.py writes the persistent Unicorn script into this file.\n\\tNB_INSTRUCTION indicates the number of instructions to execute\n\\nAdditional options can be setup via `gef config unicorn-emulate`\n\"\"\"",
        "\"\"\"\n# from https://github.com/unicorn-engine/unicorn/blob/master/tests/regress/x86_64_msr.py\nSCRATCH_ADDR = 0xf000\nSEGMENT_FS_ADDR = 0x5000\nSEGMENT_GS_ADDR = 0x6000\nFSMSR = 0xC0000100\nGSMSR = 0xC0000101\n\ndef set_msr(uc, msr, value, scratch=SCRATCH_ADDR):\n    buf = b\"\\\\x0f\\\\x30\"  # x86: wrmsr\n    uc.mem_map(scratch, 0x1000)\n    uc.mem_write(scratch, buf)\n    uc.reg_write(unicorn.x86_const.UC_X86_REG_RAX, value & 0xFFFFFFFF)\n    uc.reg_write(unicorn.x86_const.UC_X86_REG_RDX, (value >> 32) & 0xFFFFFFFF)\n    uc.reg_write(unicorn.x86_const.UC_X86_REG_RCX, msr & 0xFFFFFFFF)\n    uc.emu_start(scratch, scratch+len(buf), count=1)\n    uc.mem_unmap(scratch, 0x1000)\n    return\n\ndef set_gs(uc, addr):    return set_msr(uc, GSMSR, addr)\ndef set_fs(uc, addr):    return set_msr(uc, FSMSR, addr)\n\n\"\"\"",
        "\"\"\"\n    emu.mem_map(SEGMENT_FS_ADDR-0x1000, 0x3000)\n    set_fs(emu, SEGMENT_FS_ADDR)\n    set_gs(emu, SEGMENT_GS_ADDR)\n\"\"\"",
        "\"\"\"#!{pythonbin} -i\n#\n# Emulation script for \"{fname}\" from {start:#x} to {end:#x}\n#\n# Powered by gef, unicorn-engine, and capstone-engine\n#\n# @_hugsy_\n#\nimport collections\nimport capstone, unicorn\n\nregisters = collections.OrderedDict(sorted({{{regs}}}.items(), key=lambda t: t[0]))\nuc = None\nverbose = {verbose}\nsyscall_register = \"{syscall_reg}\"\n\ndef disassemble(code, addr):\n    cs = capstone.Cs({cs_arch}, {cs_mode})\n    for i in cs.disasm(code, addr):\n        return i\n\ndef hook_code(emu, address, size, user_data):\n    code = emu.mem_read(address, size)\n    insn = disassemble(code, address)\n    print(\">>> {{:#x}}: {{:s}} {{:s}}\".format(insn.address, insn.mnemonic, insn.op_str))\n    return\n\ndef code_hook(emu, address, size, user_data):\n    code = emu.mem_read(address, size)\n    insn = disassemble(code, address)\n    print(\">>> {{:#x}}: {{:s}} {{:s}}\".format(insn.address, insn.mnemonic, insn.op_str))\n    return\n\ndef intr_hook(emu, intno, data):\n    print(\" \\\\-> interrupt={{:d}}\".format(intno))\n    return\n\ndef syscall_hook(emu, user_data):\n    sysno = emu.reg_read(registers[syscall_register])\n    print(\" \\\\-> syscall={{:d}}\".format(sysno))\n    return\n\ndef print_regs(emu, regs):\n    for i, r in enumerate(regs):\n        print(\"{{:7s}} = {{:#0{ptrsize}x}}  \".format(r, emu.reg_read(regs[r])), end=\"\")\n        if (i % 4 == 3) or (i == len(regs)-1): print(\"\")\n    return\n\n{emu_block}\n\ndef reset():\n    emu = unicorn.Uc({arch}, {mode})\n\n{context_block}\n\"\"\"",
        "\"\"\"\ndef emulate(emu, start_addr, end_addr):\n    print(\"========================= Initial registers =========================\")\n    print_regs(emu, registers)\n\n    try:\n        print(\"========================= Starting emulation =========================\")\n        emu.emu_start(start_addr, end_addr)\n    except Exception as e:\n        emu.emu_stop()\n        print(\"========================= Emulation failed =========================\")\n        print(\"[!] Error: {{}}\".format(e))\n\n    print(\"========================= Final registers =========================\")\n    print_regs(emu, registers)\n    return\n\n\nuc = reset()\nemulate(uc, {start:#x}, {end:#x})\n\n# unicorn-engine script generated by gef\n\"\"\"",
        "\"\"\"gef wrapper for the `target remote` command. This command will automatically\n    download the target binary in the local temporary directory (defaut /tmp) and then\n    source it. Additionally, it will fetch all the /proc/PID/maps and loads all its\n    information.\"\"\"",
        "\"\"\"Hook that handles new_objfile events, will update remote environment accordingly.\"\"\"",
        "\"\"\"Clone the remote environment locally in the temporary directory.\n        The command will duplicate the entries in the /proc/<pid> locally and then\n        source those information into the current gdb context to allow gef to use\n        all the extra commands as it was local debugging.\"\"\"",
        "\"\"\"Connect to remote target and get symbols. To prevent `gef` from requesting information\n        not fetched just yet, we disable the context disable when connection was successful.\"\"\"",
        "\"\"\"Download one item from /proc/pid.\"\"\"",
        "\"\"\"Patch the instruction(s) pointed by parameters with NOP. Note: this command is architecture\n    aware.\"\"\"",
        "\"\"\"{:s} [-nb NUM_BYTES] [LOCATION]\n  LOCATION\\taddress/symbol to patch\n    --nb NUM_BYTES\\tInstead of writing one instruction, patch the specified number of bytes\"\"\"",
        "\"\"\"Stub out the specified function. This function is useful when needing to skip one\n    function to be called and disrupt your runtime flow (ex. fork).\"\"\"",
        "\"\"\"{:s} [--retval RETVAL] [LOCATION]\n\\tLOCATION\\taddress/symbol to stub out\n\\t--retval RETVAL\\tSet the return value\"\"\"",
        "\"\"\"Use capstone disassembly framework to disassemble code.\"\"\"",
        "\"\"\"Base command to get information about the Glibc heap structure.\"\"\"",
        "\"\"\"Display information on a heap chunk.\"\"\"",
        "\"\"\"Display information on a heap chunk.\"\"\"",
        "\"\"\"Display information on a heap chunk.\n    See https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1123.\"\"\"",
        "\"\"\"Display information all chunks from main_arena heap. If a location is passed,\n    it must correspond to the base address of the first chunk.\"\"\"",
        "\"\"\"Display information on the bins on an arena (default: main_arena).\n    See https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1123.\"\"\"",
        "\"\"\"Display information on the Tcachebins on an arena (default: main_arena).\n    See https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc.\"\"\"",
        "\"\"\"Return the location of the current thread's tcache.\"\"\"",
        "\"\"\"Check the validity, dedup, and return all valid tids.\"\"\"",
        "\"\"\"Return the head chunk in tcache[i] and the number of chunks in the bin.\"\"\"",
        "\"\"\"Display information on the fastbinsY on an arena (default: main_arena).\n    See https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1123.\"\"\"",
        "\"\"\"Display information on the Unsorted Bins of an arena (default: main_arena).\n    See: https://github.com/sploitfun/lsploits/blob/master/glibc/malloc/malloc.c#L1689.\"\"\"",
        "\"\"\"Convenience command for viewing small bins.\"\"\"",
        "\"\"\"Convenience command for viewing large bins.\"\"\"",
        "\"\"\"Solve kernel symbols from kallsyms table.\"\"\"",
        "\"\"\"Display full details on one, many or all registers value from current architecture.\"\"\"",
        "\"\"\"ShellcodeCommand uses @JonathanSalwan simple-yet-awesome shellcode API to\n    download shellcodes.\"\"\"",
        "\"\"\"Search pattern in shell-storm's shellcode database.\"\"\"",
        "\"\"\"Download shellcode from shell-storm's shellcode database.\"\"\"",
        "\"\"\"Ropper (http://scoding.de/ropper) plugin.\"\"\"",
        "\"\"\"Inline code assemble. Architecture can be set in GEF runtime config. \"\"\"",
        "\"\"\"sc=\"\" \"\"\"",
        "\"\"\"sc+=\"{0:s}\" \"\"\"",
        "\"\"\"List and filter process. If a PATTERN is given as argument, results shown will be grepped\n    by this pattern.\"\"\"",
        "\"\"\"Display a limited subset of ELF header information. If no argument is provided, the command will\n    show information about the current ELF being debugged.\"\"\"",
        "\"\"\"Tries to find best entry point and sets a temporary breakpoint on it. The command will test for\n    well-known symbols for entry points, such as `main`, `_main`, `__libc_start_main`, etc. defined by\n    the setting `entrypoint_symbols`.\"\"\"",
        "\"\"\"Sets a breakpoint and assigns a name to it, which will be shown, when it's hit.\"\"\"",
        "\"\"\"Displays a comprehensive and modular summary of runtime context. Unless setting `enable` is\n    set to False, this command will be spawned automatically every time GDB hits a breakpoint, a\n    watchpoint, or any kind of interrupt. By default, it will show panes that contain the register\n    states, the stack, and the disassembly code around $pc.\"\"\"",
        "\"\"\"If symbols were found, parse them and print the argument adequately.\"\"\"",
        "\"\"\"When no symbol, read the current basic block and look for \"interesting\" instructions.\"\"\"",
        "\"\"\"[{:s}] Id {:d}, \"\"\"",
        "\"\"\"Name: \"{:s}\", \"\"\"",
        "\"\"\"Add or remove address ranges to the memory view.\"\"\"",
        "\"\"\"Adds address ranges to the memory view.\"\"\"",
        "\"\"\"Removes address ranges to the memory view.\"\"\"",
        "\"\"\"Removes all watchpoints.\"\"\"",
        "\"\"\"Lists all watchpoints to display in context layout.\"\"\"",
        "\"\"\"Display SIZE lines of hexdump from the memory location pointed by ADDRESS.\"\"\"",
        "\"\"\"Display SIZE lines of hexdump as QWORD from the memory location pointed by ADDRESS.\"\"\"",
        "\"\"\"Display SIZE lines of hexdump as DWORD from the memory location pointed by ADDRESS.\"\"\"",
        "\"\"\"Display SIZE lines of hexdump as WORD from the memory location pointed by ADDRESS.\"\"\"",
        "\"\"\"Display SIZE lines of hexdump as BYTE from the memory location pointed by ADDRESS.\"\"\"",
        "\"\"\"Write specified values to the specified address.\"\"\"",
        "\"\"\"Write specified QWORD to the specified address.\"\"\"",
        "\"\"\"Write specified DWORD to the specified address.\"\"\"",
        "\"\"\"Write specified WORD to the specified address.\"\"\"",
        "\"\"\"Write specified WORD to the specified address.\"\"\"",
        "\"\"\"Write specified string to the specified memory location pointed by ADDRESS.\"\"\"",
        "\"\"\"Dereference recursively from an address and display information. This acts like WinDBG `dps`\n    command.\"\"\"",
        "\"\"\"View/modify the ASLR setting of GDB. By default, GDB will disable ASLR when it starts the process. (i.e. not\n    attached). This command allows to change that setting.\"\"\"",
        "\"\"\"Reset cache of all stored data. This command is here for debugging and test purposes, GEF\n    handles properly the cache reset under \"normal\" scenario.\"\"\"",
        "\"\"\"Display a comprehensive layout of the virtual memory mapping. If a filter argument, GEF will\n    filter out the mapping whose pathname do not match that filter.\"\"\"",
        "\"\"\"Shows all libraries (and sections) loaded by binary. This command extends the GDB command\n    `info files`, by retrieving more information from extra sources, and providing a better\n    display. If an argument FILE is given, the output will grep information related to only that file.\n    If an argument name is also given, the output will grep to the name within FILE.\"\"\"",
        "\"\"\"Retrieve and display runtime information for the location(s) given as parameter.\"\"\"",
        "\"\"\"XOR a block of memory. The command allows to simply display the result, or patch it\n    runtime at runtime.\"\"\"",
        "\"\"\"Display a block of memory pointed by ADDRESS by xor-ing each byte with KEY. The key must be\n    provided in hexadecimal format.\"\"\"",
        "\"\"\"Patch a block of memory pointed by ADDRESS by xor-ing each byte with KEY. The key must be\n    provided in hexadecimal format.\"\"\"",
        "\"\"\"Create a runtime trace of all instructions executed from $pc to LOCATION specified. The\n    trace is stored in a text file that can be next imported in IDA Pro to visualize the runtime\n    path.\"\"\"",
        "\"\"\"This command will create or search a De Bruijn cyclic pattern to facilitate\n    determining the offset in memory. The algorithm used is the same as the one\n    used by pwntools, and can therefore be used in conjunction.\"\"\"",
        "\"\"\"Generate a de Bruijn cyclic pattern. It will generate a pattern long of SIZE,\n    incrementally varying of one byte at each generation. The pattern rotation period\n    is by default set to 4 for compatibility with pwntools, but can be adjusted.\"\"\"",
        "\"\"\"Search for the cyclic de Bruijn pattern generated by the `pattern create` command. The\n    PATTERN argument can be a GDB symbol (such as a register name) or an hexadecimal value.\"\"\"",
        "\"\"\"Checksec the security properties of the current executable or passed as argument. The\n    command checks for the following protections:\n    - PIE\n    - NX\n    - RelRO\n    - Glibc Stack Canaries\n    - Fortify Source\"\"\"",
        "\"\"\"Display current status of the got inside the process.\"\"\"",
        "\"\"\"Highlight user-defined text matches in GEF output universally.\"\"\"",
        "\"\"\"Show the current highlight table with matches to colors.\"\"\"",
        "\"\"\"Clear the highlight table, remove all matches.\"\"\"",
        "\"\"\"Add a match to the highlight table.\"\"\"",
        "\"\"\"Remove a match in the highlight table.\"\"\"",
        "\"\"\"Exploitable format-string helper: this command will set up specific breakpoints\n    at well-known dangerous functions (printf, snprintf, etc.), and check if the pointer\n    holding the format string is writable, and therefore susceptible to format string\n    attacks if an attacker can control its content.\"\"\"",
        "\"\"\"Heap vulnerability analysis helper: this command aims to track dynamic heap allocation\n    done through malloc()/free() to provide some insights on possible heap vulnerabilities. The\n    following vulnerabilities are checked:\n    - NULL free\n    - Use-after-Free\n    - Double Free\n    - Heap overlap\"\"\"",
        "\"\"\"Tells whether the next instruction is a system call.\"\"\"",
        "\"\"\"Gets the syscall name and arguments based on the register values in the current state.\"\"\"",
        "\"\"\"This is an abstract class for invoking convenience functions, should not be instantiated.\"\"\"",
        "\"\"\"Return the current stack base address plus an optional offset.\"\"\"",
        "\"\"\"Return the current heap base address plus an optional offset.\"\"\"",
        "\"\"\"Return the matching section's base address plus an optional offset.\"\"\"",
        "\"\"\"Return the current bss base address plus the given offset.\"\"\"",
        "\"\"\"Return the current bss base address plus the given offset.\"\"\"",
        "\"\"\"List the convenience functions provided by GEF.\"\"\"",
        "\"\"\"Add function to documentation.\"\"\"",
        "\"\"\"GEF main command: view all new commands by typing `gef`.\"\"\"",
        "\"\"\"Load all the commands and functions defined by GEF into GDB.\"\"\"",
        "\"\"\"GEF help sub-command.\"\"\"",
        "\"\"\"Generate builtin commands documentation.\"\"\"",
        "\"\"\"Add command to GEF documentation.\"\"\"",
        "\"\"\"Refresh the documentation.\"\"\"",
        "\"\"\"GEF configuration sub-command\n    This command will help set/view GEF settings for the current debugging session.\n    It is possible to make those changes permanent by running `gef save` (refer\n    to this command help), and/or restore previously saved settings by running\n    `gef restore` (refer help).\n    \"\"\"",
        "\"\"\"GEF save sub-command.\n    Saves the current configuration of GEF to disk (by default in file '~/.gef.rc').\"\"\"",
        "\"\"\"GEF restore sub-command.\n    Loads settings from file '~/.gef.rc' and apply them to the configuration of GEF.\"\"\"",
        "\"\"\"GEF missing sub-command\n    Display the GEF commands that could not be loaded, along with the reason of why\n    they could not be loaded.\n    \"\"\"",
        "\"\"\"Override GDB set commands with the context from GEF.\"\"\"",
        "\"\"\"Override GDB run commands with the context from GEF.\n    Simple wrapper for GDB run command to use arguments set from `gef set args`.\"\"\"",
        "\"\"\"Simple aliasing wrapper because GDB doesn't do what it should.\"\"\"",
        "\"\"\"Base command to add, remove, or list aliases.\"\"\"",
        "\"\"\"Command to add aliases.\"\"\"",
        "\"\"\"Command to remove aliases.\"\"\"",
        "\"\"\"Command to list aliases.\"\"\"",
        "\"\"\"Setup a confortable tmux debugging environment.\"\"\"",
        "\"\"\"Prepare the tmux environment by vertically splitting the current pane, and\n        forcing the context to be redirected there.\"\"\"",
        "\"\"\"Hackish equivalent of the tmux_setup() function for screen.\"\"\"",
        "\"\"\"! {} -r {} -m -d -X source {}\"\"\"",
        "\"\"\"GEF custom prompt function.\"\"\""
    ],
    "functions": [
        "http_get",
        "update_gef",
        "reset_all_caches",
        "highlight_text",
        "gef_print",
        "bufferize",
        "wrapper",
        "redify",
        "greenify",
        "blueify",
        "yellowify",
        "grayify",
        "light_grayify",
        "pinkify",
        "cyanify",
        "boldify",
        "underlinify",
        "highlightify",
        "blinkify",
        "colorify",
        "__str__",
        "is_in_text_segment",
        "is_in_stack_segment",
        "is_in_heap_segment",
        "dereference",
        "__or__",
        "__and__",
        "__xor__",
        "__eq__",
        "__ne__",
        "__str__",
        "from_info_sections",
        "from_process_maps",
        "is_readable",
        "is_writable",
        "is_executable",
        "size",
        "realpath",
        "is_valid",
        "__format__",
        "__str__",
        "is_valid",
        "search_for_main_arena",
        "addr",
        "fastbins_addr",
        "top_addr",
        "last_remainder_addr",
        "bins_addr",
        "next_addr",
        "next_free_addr",
        "system_mem_addr",
        "struct_size",
        "fastbinsY",
        "top",
        "last_remainder",
        "bins",
        "next",
        "next_free",
        "system_mem",
        "get_size_t",
        "get_size_t_pointer",
        "get_size_t_array",
        "__getitem__",
        "__getitem__",
        "__getattr__",
        "__int__",
        "fastbin",
        "bin",
        "get_next",
        "__str__",
        "get_chunk_size",
        "size",
        "get_usable_size",
        "usable_size",
        "get_prev_chunk_size",
        "get_next_chunk",
        "get_fwd_ptr",
        "fwd",
        "get_bkw_ptr",
        "bck",
        "has_p_bit",
        "has_m_bit",
        "has_n_bit",
        "is_used",
        "str_chunk_size_flag",
        "_str_sizes",
        "_str_pointers",
        "str_as_alloced",
        "str_as_freed",
        "flags_as_string",
        "__str__",
        "psprint",
        "get_libc_version",
        "get_main_arena",
        "titlify",
        "err",
        "warn",
        "ok",
        "info",
        "push_context_message",
        "show_last_exception",
        "_show_code_line",
        "gef_pystring",
        "gef_pybytes",
        "which",
        "is_exe",
        "style_byte",
        "hexdump",
        "is_debug",
        "hide_context",
        "unhide_context",
        "enable_redirect_output",
        "disable_redirect_output",
        "get_gef_setting",
        "set_gef_setting",
        "gef_makedirs",
        "gdb_lookup_symbol",
        "gdb_get_location_from_symbol",
        "gdb_disassemble",
        "gdb_get_nth_previous_instruction_address",
        "gdb_get_nth_next_instruction_address",
        "gef_instruction_n",
        "gef_get_instruction_at",
        "gef_current_instruction",
        "gef_next_instruction",
        "gef_disassemble",
        "capstone_disassemble",
        "cs_insn_to_gef_insn",
        "gef_execute_external",
        "gef_execute_gdb_script",
        "checksec",
        "__check_security_property",
        "get_arch",
        "get_endian",
        "get_entry_point",
        "is_pie",
        "is_big_endian",
        "is_little_endian",
        "flags_to_human",
        "all_registers",
        "instruction_length",
        "nop_insn",
        "return_register",
        "flag_register",
        "flags_table",
        "function_parameters",
        "flag_register_to_human",
        "is_call",
        "is_ret",
        "is_conditional_branch",
        "is_branch_taken",
        "get_ra",
        "pc",
        "sp",
        "fp",
        "ptrsize",
        "get_ith_parameter",
        "instruction_length",
        "is_call",
        "is_ret",
        "mprotect_asm",
        "is_conditional_branch",
        "is_branch_taken",
        "long_to_twos_complement",
        "get_ra",
        "is_thumb",
        "pc",
        "mode",
        "instruction_length",
        "is_call",
        "is_ret",
        "flag_register_to_human",
        "is_conditional_branch",
        "is_branch_taken",
        "get_ra",
        "mprotect_asm",
        "is_call",
        "flag_register_to_human",
        "mprotect_asm",
        "is_conditional_branch",
        "is_branch_taken",
        "flag_register_to_human",
        "is_call",
        "is_ret",
        "is_conditional_branch",
        "is_branch_taken",
        "get_ra",
        "mprotect_asm",
        "get_ith_parameter",
        "mprotect_asm",
        "flag_register_to_human",
        "is_call",
        "is_ret",
        "is_conditional_branch",
        "is_branch_taken",
        "get_ra",
        "mprotect_asm",
        "flag_register_to_human",
        "is_call",
        "is_ret",
        "is_conditional_branch",
        "is_branch_taken",
        "get_ra",
        "mprotect_asm",
        "mprotect_asm",
        "flag_register_to_human",
        "is_call",
        "is_ret",
        "is_conditional_branch",
        "is_branch_taken",
        "get_ra",
        "mprotect_asm",
        "write_memory",
        "read_memory",
        "read_int_from_memory",
        "read_cstring_from_memory",
        "read_ascii_string",
        "p8",
        "p16",
        "p32",
        "p64",
        "u8",
        "u16",
        "u32",
        "u64",
        "is_ascii_string",
        "is_alive",
        "only_if_gdb_running",
        "wrapper",
        "only_if_gdb_target_local",
        "wrapper",
        "experimental_feature",
        "wrapper",
        "only_if_gdb_version_higher_than",
        "wrapper",
        "inner_f",
        "FakeExit",
        "parse_arguments",
        "int_wrapper",
        "decorator",
        "wrapper",
        "copy_to_clipboard",
        "use_stdtype",
        "use_default_type",
        "use_golang_type",
        "use_rust_type",
        "to_unsigned_long",
        "get_register",
        "__get_register_for_selected_frame",
        "get_path_from_info_proc",
        "get_os",
        "get_pid",
        "get_filepath",
        "get_filename",
        "inferior_is_macho",
        "is_macho",
        "download_file",
        "open_file",
        "get_function_length",
        "get_process_maps_linux",
        "get_mach_regions",
        "get_process_maps",
        "get_info_sections",
        "get_info_files",
        "process_lookup_address",
        "process_lookup_path",
        "file_lookup_name_path",
        "file_lookup_address",
        "lookup_address",
        "xor",
        "is_hex",
        "ida_synchronize_handler",
        "continue_handler",
        "hook_stop_handler",
        "new_objfile_handler",
        "exit_handler",
        "memchanged_handler",
        "regchanged_handler",
        "load_libc_args",
        "get_terminal_size",
        "get_generic_arch",
        "get_generic_running_arch",
        "get_unicorn_arch",
        "get_capstone_arch",
        "get_keystone_arch",
        "get_unicorn_registers",
        "keystone_assemble",
        "get_elf_headers",
        "_ptr_width",
        "is_64bit",
        "is_32bit",
        "is_x86_64",
        "is_x86_32",
        "is_x86",
        "is_arch",
        "set_arch",
        "cached_lookup_type",
        "get_memory_alignment",
        "clear_screen",
        "format_address",
        "format_address_spaces",
        "align_address",
        "align_address_to_size",
        "align_address_to_page",
        "parse_address",
        "is_in_x86_kernel",
        "endian_str",
        "is_remote_debug",
        "de_bruijn",
        "db",
        "generate_cyclic_pattern",
        "safe_parse_and_eval",
        "dereference",
        "gef_convenience",
        "parse_string_range",
        "gef_get_auxiliary_values",
        "gef_read_canary",
        "gef_get_pie_breakpoint",
        "gef_getpagesize",
        "only_if_events_supported",
        "wrap",
        "wrapped_f",
        "gef_on_continue_hook",
        "gef_on_continue_unhook",
        "gef_on_stop_hook",
        "gef_on_stop_unhook",
        "gef_on_exit_hook",
        "gef_on_exit_unhook",
        "gef_on_new_hook",
        "gef_on_new_unhook",
        "gef_on_memchanged_hook",
        "gef_on_memchanged_unhook",
        "gef_on_regchanged_hook",
        "gef_on_regchanged_unhook",
        "instantiate",
        "destroy",
        "stop",
        "stop",
        "stop",
        "stop",
        "stop",
        "stop",
        "stop",
        "stop",
        "stop",
        "stop",
        "stop",
        "stop",
        "register_external_command",
        "register_command",
        "register_priority_command",
        "register_function",
        "invoke",
        "usage",
        "_cmdline_",
        "_syntax_",
        "_example_",
        "do_invoke",
        "pre_load",
        "post_load",
        "__get_setting_name",
        "__sanitize_class_name",
        "settings",
        "get_setting",
        "has_setting",
        "add_setting",
        "del_setting",
        "__set_repeat_count",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "set_pie_breakpoint",
        "do_invoke",
        "do_invoke",
        "delete_bp",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "evaluate",
        "show_as_int",
        "comp2_x",
        "comp2_b",
        "distance",
        "do_invoke",
        "do_invoke",
        "get_state_of",
        "get_cmdline_of",
        "get_process_path_of",
        "get_children_pids",
        "show_info_proc",
        "show_ancestor",
        "show_descendants",
        "show_fds",
        "list_sockets",
        "parse_ip_port",
        "show_connections",
        "do_invoke",
        "do_invoke",
        "get_pcustom_absolute_root_path",
        "get_pcustom_filepath_for_structure",
        "is_valid_struct",
        "get_modulename_structname_from_arg",
        "deserialize",
        "get_structure_class",
        "apply_structure_to_address",
        "get_ctypes_value",
        "enumerate_structure_files",
        "enumerate_structures",
        "load_module",
        "enumerate_structures_from_module",
        "do_invoke",
        "__list_custom_structures",
        "do_invoke",
        "__dump_structure",
        "__dump_custom_structure",
        "do_invoke",
        "__create_or_edit_structure",
        "__create_new_structure_template",
        "do_invoke",
        "get_fd_from_result",
        "is_target_alive",
        "connect",
        "disconnect",
        "do_invoke",
        "parsed_arglist",
        "synchronize",
        "usage",
        "import_structures",
        "do_invoke",
        "print_section",
        "print_loc",
        "search_pattern_by_address",
        "search_pattern",
        "do_invoke",
        "do_invoke",
        "pre_load",
        "do_invoke",
        "get_stub_by_arch",
        "pre_load",
        "do_invoke",
        "get_unicorn_end_addr",
        "run_unicorn",
        "do_invoke",
        "new_objfile_handler",
        "setup_remote_environment",
        "connect_target",
        "load_from_remote_proc",
        "refresh_shared_library_path",
        "usage",
        "prepare_qemu_stub",
        "get_insn_size",
        "do_invoke",
        "nop_bytes",
        "do_invoke",
        "pre_load",
        "do_invoke",
        "capstone_analyze_pc",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "pprint_bin",
        "do_invoke",
        "find_tcache",
        "check_thread_ids",
        "tcachebin",
        "do_invoke",
        "fastbin_index",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "search_shellcode",
        "do_invoke",
        "get_shellcode",
        "pre_load",
        "do_invoke",
        "pre_load",
        "usage",
        "do_invoke",
        "do_invoke",
        "get_processes",
        "do_invoke",
        "do_invoke",
        "set_init_tbreak",
        "set_init_tbreak_pie",
        "do_invoke",
        "post_load",
        "show_legend",
        "do_invoke",
        "context_title",
        "context_regs",
        "context_stack",
        "addr_has_breakpoint",
        "context_code",
        "context_args",
        "print_arguments_from_symbol",
        "print_guessed_arguments",
        "__get_current_block_start_address",
        "line_has_breakpoint",
        "context_source",
        "get_pc_context_info",
        "context_trace",
        "context_threads",
        "reason",
        "context_additional_information",
        "context_memory",
        "update_registers",
        "empty_extra_messages",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "_hexdump",
        "do_invoke",
        "do_invoke",
        "dereference_from",
        "pprint_dereferenced",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "print_entry",
        "show_legend",
        "is_integer",
        "do_invoke",
        "do_invoke",
        "infos",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "get_frames_size",
        "trace",
        "start_tracing",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "search",
        "pre_load",
        "do_invoke",
        "print_security_properties",
        "pre_load",
        "get_jmp_slots",
        "do_invoke",
        "do_invoke",
        "print_highlight_table",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "setup",
        "dump_tracked_allocations",
        "clean",
        "do_invoke",
        "is_syscall",
        "do_invoke",
        "get_filepath",
        "get_module",
        "get_syscall_table",
        "get_settings_path",
        "get_section_base_address",
        "get_zone_base_address",
        "_function_",
        "_syntax_",
        "invoke",
        "arg_to_long",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "heap_base",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "setup",
        "add_function_to_doc",
        "do_invoke",
        "setup",
        "__reload_auto_breakpoints",
        "__load_extra_plugins",
        "loaded_command_names",
        "invoke",
        "load",
        "is_loaded",
        "invoke",
        "generate_help",
        "add_command_to_doc",
        "refresh",
        "invoke",
        "print_setting",
        "print_settings",
        "set_setting",
        "complete",
        "invoke",
        "invoke",
        "invoke",
        "invoke",
        "invoke",
        "invoke",
        "lookup_command",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "do_invoke",
        "invoke",
        "tmux_setup",
        "screen_setup",
        "__gef_prompt__"
    ],
    "classes": [
        "Color",
        "Address",
        "Permission",
        "Section",
        "Elf",
        "Instruction",
        "MallocStateStruct",
        "GlibcArena",
        "GlibcChunk",
        "Architecture",
        "RISCV",
        "ARM",
        "AARCH64",
        "X86",
        "X86_64",
        "PowerPC",
        "PowerPC64",
        "SPARC",
        "SPARC64",
        "MIPS",
        "PieVirtualBreakpoint",
        "FormatStringBreakpoint",
        "StubBreakpoint",
        "ChangePermissionBreakpoint",
        "TraceMallocBreakpoint",
        "TraceMallocRetBreakpoint",
        "TraceReallocBreakpoint",
        "TraceReallocRetBreakpoint",
        "TraceFreeBreakpoint",
        "TraceFreeRetBreakpoint",
        "UafWatchpoint",
        "EntryBreakBreakpoint",
        "NamedBreakpoint",
        "GenericCommand",
        "VersionCommand",
        "PrintFormatCommand",
        "PieCommand",
        "PieBreakpointCommand",
        "PieInfoCommand",
        "PieDeleteCommand",
        "PieRunCommand",
        "PieAttachCommand",
        "PieRemoteCommand",
        "SmartEvalCommand",
        "CanaryCommand",
        "ProcessStatusCommand",
        "GefThemeCommand",
        "PCustomCommand",
        "PCustomListCommand",
        "PCustomShowCommand",
        "PCustomEditCommand",
        "ChangeFdCommand",
        "IdaInteractCommand",
        "ScanSectionCommand",
        "SearchPatternCommand",
        "FlagsCommand",
        "ChangePermissionCommand",
        "UnicornEmulateCommand",
        "RemoteCommand",
        "NopCommand",
        "StubCommand",
        "CapstoneDisassembleCommand",
        "GlibcHeapCommand",
        "GlibcHeapSetArenaCommand",
        "GlibcHeapArenaCommand",
        "GlibcHeapChunkCommand",
        "GlibcHeapChunksCommand",
        "GlibcHeapBinsCommand",
        "GlibcHeapTcachebinsCommand",
        "GlibcHeapFastbinsYCommand",
        "GlibcHeapUnsortedBinsCommand",
        "GlibcHeapSmallBinsCommand",
        "GlibcHeapLargeBinsCommand",
        "SolveKernelSymbolCommand",
        "DetailRegistersCommand",
        "ShellcodeCommand",
        "ShellcodeSearchCommand",
        "ShellcodeGetCommand",
        "RopperCommand",
        "AssembleCommand",
        "ProcessListingCommand",
        "ElfInfoCommand",
        "EntryPointBreakCommand",
        "NamedBreakpointCommand",
        "ContextCommand",
        "MemoryCommand",
        "MemoryWatchCommand",
        "MemoryUnwatchCommand",
        "MemoryWatchResetCommand",
        "MemoryWatchListCommand",
        "HexdumpCommand",
        "HexdumpQwordCommand",
        "HexdumpDwordCommand",
        "HexdumpWordCommand",
        "HexdumpByteCommand",
        "PatchCommand",
        "PatchQwordCommand",
        "PatchDwordCommand",
        "PatchWordCommand",
        "PatchByteCommand",
        "PatchStringCommand",
        "DereferenceCommand",
        "ASLRCommand",
        "ResetCacheCommand",
        "VMMapCommand",
        "XFilesCommand",
        "XAddressInfoCommand",
        "XorMemoryCommand",
        "XorMemoryDisplayCommand",
        "XorMemoryPatchCommand",
        "TraceRunCommand",
        "PatternCommand",
        "PatternCreateCommand",
        "PatternSearchCommand",
        "ChecksecCommand",
        "GotCommand",
        "HighlightCommand",
        "HighlightListCommand",
        "HighlightClearCommand",
        "HighlightAddCommand",
        "HighlightRemoveCommand",
        "FormatStringSearchCommand",
        "HeapAnalysisCommand",
        "IsSyscallCommand",
        "SyscallArgsCommand",
        "GenericFunction",
        "StackOffsetFunction",
        "HeapBaseFunction",
        "SectionBaseFunction",
        "BssBaseFunction",
        "GotBaseFunction",
        "GefFunctionsCommand",
        "GefCommand",
        "GefHelpCommand",
        "GefConfigCommand",
        "GefSaveCommand",
        "GefRestoreCommand",
        "GefMissingCommand",
        "GefSetCommand",
        "GefRunCommand",
        "GefAlias",
        "AliasesCommand",
        "AliasesAddCommand",
        "AliasesRmCommand",
        "AliasesListCommand",
        "GefTmuxSetup"
    ]
}