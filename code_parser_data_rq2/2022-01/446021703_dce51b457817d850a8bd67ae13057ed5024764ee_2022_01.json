{
    "identifiers": [
        "createElement",
        "ApexImperativeMethod",
        "getContactList",
        "jest",
        "jest",
        "describe",
        "afterEach",
        "jest",
        "resolve",
        "setImmediate",
        "resolve",
        "it",
        "getContactList",
        "APEX_CONTACTS_SUCCESS",
        "createElement",
        "ApexImperativeMethod",
        "element",
        "element",
        "buttonEl",
        "flushPromises",
        "element",
        "expect",
        "detailEls",
        "APEX_CONTACTS_SUCCESS",
        "expect",
        "detailEls",
        "APEX_CONTACTS_SUCCESS",
        "expect",
        "detailEls",
        "APEX_CONTACTS_SUCCESS",
        "it",
        "getContactList",
        "APEX_CONTACTS_ERROR",
        "createElement",
        "ApexImperativeMethod",
        "element",
        "element",
        "buttonEl",
        "flushPromises",
        "element",
        "expect",
        "errorPanelEl",
        "it",
        "getContactList",
        "APEX_CONTACTS_SUCCESS",
        "createElement",
        "ApexImperativeMethod",
        "element",
        "element",
        "buttonEl",
        "expect",
        "element",
        "it",
        "getContactList",
        "APEX_CONTACTS_ERROR",
        "createElement",
        "ApexImperativeMethod",
        "element",
        "element",
        "buttonEl",
        "expect",
        "element"
    ],
    "literals": [
        "'lwc'",
        "'c/apexImperativeMethod'",
        "'@salesforce/apex/ContactController.getContactList'",
        "'@salesforce/apex/ContactController.getContactList'",
        "'0031700000pJRRSAA4'",
        "'Amy Taylor'",
        "'VP of Engineering'",
        "'4152568563'",
        "'amy@demo.net'",
        "'https://s3-us-west-1.amazonaws.com/sfdc-demo/people/amy_taylor.jpg'",
        "'0031700000pJRRTAA4'",
        "'Michael Jones'",
        "'VP of Sales'",
        "'4158526633'",
        "'michael@demo.net'",
        "'https://s3-us-west-1.amazonaws.com/sfdc-demo/people/michael_jones.jpg'",
        "'An internal server error has occurred'",
        "'Bad Request'",
        "'c-apex-imperative-method'",
        "'renders two contacts returned from imperative Apex call'",
        "'c-apex-imperative-method'",
        "'lightning-button'",
        "'p:not([class])'",
        "'renders the error panel when the Apex method returns an error'",
        "'c-apex-imperative-method'",
        "'lightning-button'",
        "'c-error-panel'",
        "'is accessible when data is returned'",
        "'c-apex-imperative-method'",
        "'lightning-button'",
        "'is accessible when error is returned'",
        "'c-apex-imperative-method'",
        "'lightning-button'"
    ],
    "variables": [
        "APEX_CONTACTS_SUCCESS",
        "APEX_CONTACTS_ERROR",
        "element",
        "buttonEl",
        "detailEls",
        "element",
        "buttonEl",
        "errorPanelEl",
        "element",
        "buttonEl",
        "element",
        "buttonEl"
    ],
    "comments": [
        "Mocking imperative Apex method call",
        "Sample data for imperative Apex call",
        "Sample error for imperative Apex call",
        "The jsdom instance is shared across test cases in a single file so reset the DOM",
        "Prevent data saved on mocks from leaking between tests",
        "Helper function to wait until the microtask queue is empty. This is needed for promise",
        "timing when calling imperative Apex.",
        "eslint-disable-next-line no-undef",
        "Assign mock value for resolved Apex promise",
        "Create initial element",
        "Select button for executing Apex call",
        "Return an immediate flushed promise (after the Apex call) to then",
        "wait for any asynchronous DOM updates. Jest will automatically wait",
        "for the Promise chain to complete before ending the test and fail",
        "the test if the promise ends in the rejected state.",
        "Select div for validating conditionally changed text content",
        "Assign mock value for rejected Apex promise",
        "Create initial element",
        "Select button for executing Apex call",
        "Return an immediate flushed promise (after the Apex call) to then",
        "wait for any asynchronous DOM updates. Jest will automatically wait",
        "for the Promise chain to complete before ending the test and fail",
        "the test if the promise ends in the rejected state.",
        "Assign mock value for resolved Apex promise",
        "Create initial element",
        "Select button for executing Apex call",
        "Assign mock value for rejected Apex promise",
        "Create initial element",
        "Select button for executing Apex call"
    ],
    "docstrings": [],
    "functions": [
        "flushPromises"
    ],
    "classes": []
}