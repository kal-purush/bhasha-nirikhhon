{
    "identifiers": [
        "org",
        "apache",
        "skywalking",
        "oap",
        "server",
        "core",
        "alarm",
        "provider",
        "java",
        "lang",
        "reflect",
        "Field",
        "java",
        "util",
        "org",
        "apache",
        "skywalking",
        "mqe",
        "rt",
        "exception",
        "IllegalExpressionException",
        "org",
        "apache",
        "skywalking",
        "oap",
        "server",
        "core",
        "query",
        "enumeration",
        "Scope",
        "org",
        "apache",
        "skywalking",
        "oap",
        "server",
        "core",
        "query",
        "sql",
        "org",
        "apache",
        "skywalking",
        "oap",
        "server",
        "core",
        "source",
        "DefaultScopeDefine",
        "org",
        "apache",
        "skywalking",
        "oap",
        "server",
        "core",
        "storage",
        "annotation",
        "Column",
        "org",
        "apache",
        "skywalking",
        "oap",
        "server",
        "core",
        "storage",
        "annotation",
        "ValueColumnMetadata",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "org",
        "junit",
        "jupiter",
        "api",
        "BeforeEach",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "BeforeEach",
        "ValueColumnMetadata",
        "INSTANCE",
        "putIfAbsent",
        "Column",
        "ValueDataType",
        "COMMON_VALUE",
        "Avg",
        "Scope",
        "Service",
        "getScopeId",
        "ValueColumnMetadata",
        "INSTANCE",
        "putIfAbsent",
        "Column",
        "ValueDataType",
        "COMMON_VALUE",
        "Avg",
        "Scope",
        "Endpoint",
        "getScopeId",
        "ValueColumnMetadata",
        "INSTANCE",
        "putIfAbsent",
        "Column",
        "ValueDataType",
        "SAMPLED_RECORD",
        "Avg",
        "Scope",
        "Endpoint",
        "getScopeId",
        "serviceField",
        "getDeclaredField",
        "serviceField",
        "setAccessible",
        "serviceCatalog",
        "serviceField",
        "get",
        "serviceCatalog",
        "put",
        "Scope",
        "Service",
        "getScopeId",
        "endpointField",
        "getDeclaredField",
        "endpointField",
        "setAccessible",
        "endpointCatalog",
        "endpointField",
        "get",
        "endpointCatalog",
        "put",
        "Scope",
        "Endpoint",
        "getScopeId",
        "Test",
        "rule",
        "rule",
        "setExpression",
        "Assertions",
        "assertThrows",
        "rule",
        "setExpression",
        "Assertions",
        "assertEquals",
        "Assertions",
        "assertThrows",
        "rule",
        "setExpression",
        "getMessage",
        "Assertions",
        "assertEquals",
        "Assertions",
        "assertThrows",
        "rule",
        "setExpression",
        "getMessage",
        "Assertions",
        "assertEquals",
        "Assertions",
        "assertThrows",
        "rule",
        "setExpression",
        "getMessage",
        "Assertions",
        "assertEquals",
        "Assertions",
        "assertThrows",
        "rule",
        "setExpression",
        "getMessage",
        "Assertions",
        "assertTrue",
        "Assertions",
        "assertThrows",
        "rule",
        "setExpression",
        "getMessage",
        "contains"
    ],
    "literals": [
        "\"service_percent\"",
        "\"testColumn\"",
        "\"endpoint_percent\"",
        "\"testColumn\"",
        "\"record\"",
        "\"testColumn\"",
        "\"SERVICE_CATALOG\"",
        "\"ENDPOINT_CATALOG\"",
        "\"sum(service_percent < 85) >= 3\"",
        "\"what? sum(service_percent < 85) >= 3\"",
        "\"Metric: [service_percent111] dose not exist.\"",
        "\"sum(service_percent111 < 85) >= 3\"",
        "\"Expression: sum(service_percent < 85) + 3 root operation is not a Compare Operation.\"",
        "\"sum(service_percent < 85) + 3\"",
        "\"Expression: service_percent < 85 is not a SINGLE_VALUE result expression.\"",
        "\"service_percent < 85\"",
        "\"Metric dose not supported in alarm, metric: [record] is not a common or labeled metric.\"",
        "\"sum(record < 85) > 1\"",
        "\"sum(service_percent > endpoint_percent) >= 1\"",
        "\"The metrics in expression: sum(service_percent > endpoint_percent) >= 1 must have the same scope level, but got:\""
    ],
    "variables": [],
    "comments": [
        "normal",
        "illegal expression",
        "not exist metric",
        "root operation is not a Compare Operation",
        "not a SINGLE_VALUE result expression",
        "not a common or labeled metric",
        "metrics in expression must have the same scope level"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *"
    ],
    "functions": [
        "setUp",
        "testExpressionVerify"
    ],
    "classes": [
        "AlarmRuleTest"
    ]
}