{
    "identifiers": [
        "factory",
        "exports",
        "factory",
        "exports",
        "define",
        "define",
        "define",
        "factory",
        "factory",
        "exports",
        "dom",
        "dom",
        "dom",
        "dom",
        "dom",
        "dom",
        "meta",
        "head",
        "meta",
        "dom",
        "dom",
        "meta$1",
        "meta$1",
        "head",
        "meta$1",
        "dom",
        "dom",
        "s",
        "layout",
        "article",
        "code",
        "dom",
        "s",
        "subject",
        "subject",
        "subject",
        "subject",
        "subject",
        "subject",
        "sequence",
        "sequence",
        "sequence",
        "isNothing",
        "sequence",
        "sequence",
        "target",
        "source",
        "source",
        "sourceKeys",
        "source",
        "index",
        "length",
        "sourceKeys",
        "index",
        "length",
        "index",
        "key",
        "sourceKeys",
        "index",
        "target",
        "key",
        "source",
        "key",
        "target",
        "count",
        "cycle",
        "cycle",
        "count",
        "cycle",
        "result",
        "result",
        "number",
        "number",
        "number",
        "isNothing_1",
        "isObject_1",
        "toArray_1",
        "repeat_1",
        "isNegativeZero_1",
        "extend_1",
        "reason",
        "mark",
        "reason",
        "mark",
        "YAMLException$2",
        "YAMLException$2",
        "YAMLException$2",
        "YAMLException$2",
        "toString",
        "compact",
        "result",
        "compact",
        "result",
        "result",
        "name",
        "buffer",
        "position",
        "line",
        "column",
        "name",
        "buffer",
        "position",
        "line",
        "column",
        "Mark$1",
        "getSnippet",
        "indent",
        "maxLength",
        "indent",
        "indent",
        "maxLength",
        "maxLength",
        "head",
        "start",
        "start",
        "start",
        "start",
        "this$1",
        "start",
        "maxLength",
        "head",
        "start",
        "tail",
        "end",
        "end",
        "end",
        "end",
        "end",
        "this$1",
        "maxLength",
        "tail",
        "end",
        "snippet",
        "start",
        "end",
        "common$3",
        "indent",
        "head",
        "snippet",
        "tail",
        "common$3",
        "indent",
        "start",
        "head",
        "Mark$1",
        "toString",
        "compact",
        "where",
        "where",
        "compact",
        "snippet",
        "snippet",
        "where",
        "snippet",
        "where",
        "style",
        "style",
        "alias",
        "result",
        "alias",
        "style",
        "result",
        "tag",
        "options",
        "options",
        "options",
        "options",
        "name",
        "TYPE_CONSTRUCTOR_OPTIONS",
        "name",
        "YAMLException$4",
        "name",
        "tag",
        "tag",
        "options",
        "options",
        "options",
        "data",
        "data",
        "options",
        "options",
        "options",
        "options",
        "compileStyleAliases",
        "options",
        "YAML_NODE_KINDS",
        "YAMLException$4",
        "tag",
        "schema",
        "name",
        "result",
        "schema",
        "includedSchema",
        "result",
        "compileList",
        "includedSchema",
        "name",
        "result",
        "schema",
        "name",
        "currentType",
        "result",
        "previousType",
        "previousIndex",
        "previousType",
        "currentType",
        "previousType",
        "currentType",
        "exclude",
        "previousIndex",
        "result",
        "currentType",
        "result",
        "type$$1",
        "index",
        "exclude",
        "index",
        "type$$1",
        "result",
        "type$$1",
        "type$$1",
        "result",
        "type$$1",
        "type$$1",
        "index",
        "length",
        "arguments",
        "index",
        "length",
        "index",
        "arguments$1",
        "index",
        "collectType",
        "result",
        "definition",
        "definition",
        "definition",
        "definition",
        "type$$1",
        "type$$1",
        "type$$1",
        "YAMLException$3",
        "compileList",
        "compileList",
        "compileMap",
        "Schema$2",
        "Schema$2",
        "createSchema",
        "arguments",
        "schemas",
        "Schema$2",
        "types",
        "arguments",
        "schemas",
        "arguments",
        "types",
        "arguments",
        "YAMLException$3",
        "schemas",
        "common$4",
        "schemas",
        "types",
        "common$4",
        "types",
        "schemas",
        "schema",
        "schema",
        "Schema$2",
        "YAMLException$3",
        "types",
        "type$$1",
        "type$$1",
        "Type$1",
        "YAMLException$3",
        "Schema$2",
        "schemas",
        "types",
        "Type$3",
        "data",
        "data",
        "data",
        "Type$4",
        "data",
        "data",
        "data",
        "Type$5",
        "data",
        "data",
        "data",
        "Schema$5",
        "seq",
        "data",
        "data",
        "data",
        "max",
        "data",
        "max",
        "data",
        "data",
        "data",
        "Type$6",
        "resolveYamlNull",
        "constructYamlNull",
        "isNull",
        "data",
        "data",
        "data",
        "max",
        "data",
        "data",
        "data",
        "max",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "Type$7",
        "resolveYamlBoolean",
        "constructYamlBoolean",
        "isBoolean",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "data",
        "data",
        "data",
        "max",
        "ch",
        "data",
        "index",
        "ch",
        "ch",
        "ch",
        "data",
        "index",
        "ch",
        "index",
        "max",
        "ch",
        "data",
        "index",
        "ch",
        "index",
        "index",
        "max",
        "index",
        "ch",
        "data",
        "index",
        "ch",
        "ch",
        "ch",
        "hasDigits",
        "hasDigits",
        "ch",
        "index",
        "index",
        "max",
        "index",
        "ch",
        "data",
        "index",
        "ch",
        "isHexCode",
        "data",
        "index",
        "hasDigits",
        "hasDigits",
        "index",
        "max",
        "index",
        "ch",
        "data",
        "index",
        "ch",
        "isOctCode",
        "data",
        "index",
        "hasDigits",
        "hasDigits",
        "index",
        "max",
        "index",
        "ch",
        "data",
        "index",
        "ch",
        "ch",
        "isDecCode",
        "data",
        "index",
        "hasDigits",
        "hasDigits",
        "ch",
        "data",
        "index",
        "data",
        "value",
        "value",
        "value",
        "ch",
        "value",
        "ch",
        "ch",
        "ch",
        "sign",
        "value",
        "value",
        "ch",
        "value",
        "value",
        "ch",
        "value",
        "sign",
        "parseInt",
        "value",
        "value",
        "sign",
        "parseInt",
        "value",
        "sign",
        "parseInt",
        "value",
        "value",
        "value",
        "v",
        "digits",
        "parseInt",
        "v",
        "value",
        "digits",
        "d",
        "value",
        "d",
        "sign",
        "value",
        "sign",
        "parseInt",
        "value",
        "common$5",
        "Type$8",
        "resolveYamlInteger",
        "constructYamlInteger",
        "isInteger",
        "data",
        "data",
        "YAML_FLOAT_PATTERN",
        "data",
        "data",
        "value",
        "data",
        "sign",
        "value",
        "digits",
        "value",
        "value",
        "value",
        "value",
        "sign",
        "value",
        "NaN",
        "value",
        "value",
        "v",
        "digits",
        "parseFloat",
        "v",
        "value",
        "digits",
        "d",
        "value",
        "d",
        "sign",
        "value",
        "sign",
        "parseFloat",
        "value",
        "style",
        "isNaN",
        "style",
        "style",
        "style",
        "common$6",
        "res",
        "SCIENTIFIC_WITHOUT_DOT",
        "res",
        "res",
        "res",
        "common$6",
        "Type$9",
        "resolveYamlFloat",
        "constructYamlFloat",
        "isFloat",
        "representYamlFloat",
        "Schema$4",
        "failsafe",
        "_null",
        "int_1",
        "float_1",
        "Schema$3",
        "json",
        "data",
        "data",
        "YAML_DATE_REGEXP",
        "data",
        "YAML_TIMESTAMP_REGEXP",
        "data",
        "data",
        "match",
        "YAML_DATE_REGEXP",
        "data",
        "match",
        "match",
        "YAML_TIMESTAMP_REGEXP",
        "data",
        "match",
        "year",
        "match",
        "month",
        "match",
        "day",
        "match",
        "match",
        "year",
        "month",
        "day",
        "hour",
        "match",
        "minute",
        "match",
        "second",
        "match",
        "match",
        "fraction",
        "match",
        "fraction",
        "fraction",
        "fraction",
        "fraction",
        "match",
        "tz_hour",
        "match",
        "tz_minute",
        "match",
        "delta",
        "tz_hour",
        "tz_minute",
        "match",
        "delta",
        "delta",
        "date",
        "year",
        "month",
        "day",
        "hour",
        "minute",
        "second",
        "fraction",
        "delta",
        "date",
        "date",
        "delta",
        "date",
        "Type$10",
        "resolveYamlTimestamp",
        "constructYamlTimestamp",
        "representYamlTimestamp",
        "data",
        "data",
        "data",
        "Type$11",
        "resolveYamlMerge",
        "fn",
        "fn",
        "NodeBuffer",
        "_require",
        "__",
        "data",
        "data",
        "data",
        "idx",
        "idx",
        "max",
        "idx",
        "code",
        "data",
        "idx",
        "code",
        "code",
        "bitlen",
        "bitlen",
        "data",
        "data",
        "input",
        "idx",
        "idx",
        "max",
        "idx",
        "idx",
        "idx",
        "result",
        "bits",
        "result",
        "bits",
        "result",
        "bits",
        "bits",
        "bits",
        "input",
        "idx",
        "tailbits",
        "max",
        "tailbits",
        "result",
        "bits",
        "result",
        "bits",
        "result",
        "bits",
        "tailbits",
        "result",
        "bits",
        "result",
        "bits",
        "tailbits",
        "result",
        "bits",
        "NodeBuffer",
        "NodeBuffer",
        "result",
        "result",
        "idx",
        "idx",
        "max",
        "idx",
        "idx",
        "idx",
        "result",
        "bits",
        "result",
        "bits",
        "result",
        "bits",
        "result",
        "bits",
        "bits",
        "bits",
        "idx",
        "tail",
        "max",
        "tail",
        "result",
        "bits",
        "result",
        "bits",
        "result",
        "bits",
        "result",
        "bits",
        "tail",
        "result",
        "bits",
        "result",
        "bits",
        "result",
        "bits",
        "result",
        "tail",
        "result",
        "bits",
        "result",
        "bits",
        "result",
        "result",
        "result",
        "NodeBuffer",
        "NodeBuffer",
        "Type$12",
        "resolveYamlBinary",
        "constructYamlBinary",
        "isBinary",
        "representYamlBinary",
        "data",
        "data",
        "index",
        "length",
        "index",
        "length",
        "index",
        "pair",
        "index",
        "pairHasKey",
        "_toString",
        "pair",
        "pairKey",
        "pair",
        "_hasOwnProperty$1",
        "pair",
        "pairKey",
        "pairHasKey",
        "pairHasKey",
        "pairHasKey",
        "objectKeys",
        "pairKey",
        "objectKeys",
        "pairKey",
        "data",
        "data",
        "data",
        "Type$13",
        "resolveYamlOmap",
        "constructYamlOmap",
        "data",
        "data",
        "result",
        "index",
        "length",
        "index",
        "length",
        "index",
        "pair",
        "index",
        "_toString$1",
        "pair",
        "keys",
        "pair",
        "keys",
        "result",
        "index",
        "keys",
        "pair",
        "keys",
        "data",
        "data",
        "result",
        "index",
        "length",
        "index",
        "length",
        "index",
        "pair",
        "index",
        "keys",
        "pair",
        "result",
        "index",
        "keys",
        "pair",
        "keys",
        "result",
        "Type$14",
        "resolveYamlPairs",
        "constructYamlPairs",
        "data",
        "data",
        "key",
        "_hasOwnProperty$2",
        "key",
        "key",
        "data",
        "data",
        "data",
        "Type$15",
        "resolveYamlSet",
        "constructYamlSet",
        "Schema$1",
        "core",
        "timestamp",
        "merge",
        "binary",
        "omap",
        "pairs",
        "Type$16",
        "resolveJavascriptUndefined",
        "constructJavascriptUndefined",
        "isUndefined",
        "representJavascriptUndefined",
        "data",
        "data",
        "data",
        "data",
        "regexp",
        "tail",
        "modifiers",
        "tail",
        "modifiers",
        "regexp",
        "regexp",
        "modifiers",
        "data",
        "data",
        "regexp",
        "tail",
        "modifiers",
        "tail",
        "regexp",
        "regexp",
        "regexp",
        "modifiers",
        "regexp",
        "modifiers",
        "result",
        "result",
        "result",
        "result",
        "Type$17",
        "resolveJavascriptRegExp",
        "constructJavascriptRegExp",
        "isRegExp",
        "representJavascriptRegExp",
        "esprima",
        "_require$1",
        "_",
        "esprima",
        "data",
        "data",
        "data",
        "esprima",
        "source",
        "ast",
        "ast",
        "ast",
        "ast",
        "err",
        "data",
        "data",
        "esprima",
        "source",
        "ast",
        "ast",
        "ast",
        "ast",
        "ast",
        "param",
        "param",
        "body",
        "ast",
        "source",
        "body",
        "body",
        "Type$18",
        "resolveJavascriptFunction",
        "constructJavascriptFunction",
        "isFunction",
        "representJavascriptFunction",
        "Schema$6",
        "Schema$6",
        "default_safe",
        "_undefined",
        "regexp",
        "_function",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "lc",
        "c",
        "lc",
        "lc",
        "lc",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "i",
        "i",
        "simpleEscapeCheck",
        "i",
        "simpleEscapeSequence",
        "i",
        "simpleEscapeMap",
        "i",
        "simpleEscapeSequence",
        "i",
        "input",
        "options",
        "input",
        "options",
        "options",
        "DEFAULT_FULL_SCHEMA$1",
        "options",
        "options",
        "options",
        "options",
        "input",
        "state",
        "message",
        "YAMLException$1",
        "message",
        "Mark",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "message",
        "generateError",
        "state",
        "message",
        "state",
        "message",
        "state",
        "state",
        "generateError",
        "state",
        "message",
        "handleYamlDirective",
        "state",
        "name",
        "args",
        "state",
        "throwError",
        "state",
        "args",
        "throwError",
        "state",
        "match",
        "args",
        "match",
        "throwError",
        "state",
        "major",
        "parseInt",
        "match",
        "minor",
        "parseInt",
        "match",
        "major",
        "throwError",
        "state",
        "state",
        "args",
        "state",
        "minor",
        "minor",
        "minor",
        "throwWarning",
        "state",
        "handleTagDirective",
        "state",
        "name",
        "args",
        "args",
        "throwError",
        "state",
        "handle",
        "args",
        "prefix",
        "args",
        "PATTERN_TAG_HANDLE",
        "handle",
        "throwError",
        "state",
        "_hasOwnProperty",
        "state",
        "handle",
        "throwError",
        "state",
        "handle",
        "PATTERN_TAG_URI",
        "prefix",
        "throwError",
        "state",
        "state",
        "handle",
        "prefix",
        "state",
        "start",
        "end",
        "checkJson",
        "start",
        "end",
        "_result",
        "state",
        "start",
        "end",
        "checkJson",
        "_position",
        "_length",
        "_result",
        "_position",
        "_length",
        "_position",
        "_character",
        "_result",
        "_position",
        "_character",
        "_character",
        "_character",
        "throwError",
        "state",
        "PATTERN_NON_PRINTABLE",
        "_result",
        "throwError",
        "state",
        "state",
        "_result",
        "state",
        "destination",
        "source",
        "overridableKeys",
        "common",
        "source",
        "throwError",
        "state",
        "sourceKeys",
        "source",
        "index",
        "quantity",
        "sourceKeys",
        "index",
        "quantity",
        "index",
        "key",
        "sourceKeys",
        "index",
        "_hasOwnProperty",
        "destination",
        "key",
        "destination",
        "key",
        "source",
        "key",
        "overridableKeys",
        "key",
        "state",
        "_result",
        "overridableKeys",
        "keyTag",
        "keyNode",
        "valueNode",
        "keyNode",
        "keyNode",
        "_result",
        "_result",
        "keyTag",
        "valueNode",
        "index",
        "quantity",
        "valueNode",
        "index",
        "quantity",
        "index",
        "mergeMappings",
        "state",
        "_result",
        "valueNode",
        "index",
        "overridableKeys",
        "mergeMappings",
        "state",
        "_result",
        "valueNode",
        "overridableKeys",
        "state",
        "_hasOwnProperty",
        "overridableKeys",
        "keyNode",
        "_hasOwnProperty",
        "_result",
        "keyNode",
        "throwError",
        "state",
        "_result",
        "keyNode",
        "valueNode",
        "overridableKeys",
        "keyNode",
        "_result",
        "state",
        "ch",
        "state",
        "state",
        "ch",
        "state",
        "ch",
        "state",
        "state",
        "state",
        "state",
        "throwError",
        "state",
        "state",
        "state",
        "state",
        "state",
        "allowComments",
        "checkIndent",
        "state",
        "state",
        "ch",
        "is_WHITE_SPACE",
        "ch",
        "ch",
        "state",
        "state",
        "allowComments",
        "ch",
        "ch",
        "state",
        "state",
        "ch",
        "ch",
        "ch",
        "is_EOL",
        "ch",
        "readLineBreak",
        "state",
        "ch",
        "state",
        "state",
        "lineBreaks",
        "state",
        "ch",
        "state",
        "ch",
        "state",
        "state",
        "checkIndent",
        "lineBreaks",
        "state",
        "checkIndent",
        "throwWarning",
        "state",
        "lineBreaks",
        "state",
        "state",
        "ch",
        "state",
        "_position",
        "ch",
        "ch",
        "ch",
        "state",
        "_position",
        "ch",
        "state",
        "_position",
        "_position",
        "ch",
        "state",
        "_position",
        "ch",
        "is_WS_OR_EOL",
        "ch",
        "state",
        "count",
        "count",
        "state",
        "count",
        "state",
        "common",
        "count",
        "state",
        "nodeIndent",
        "withinFlowCollection",
        "state",
        "state",
        "ch",
        "state",
        "state",
        "is_WS_OR_EOL",
        "ch",
        "is_FLOW_INDICATOR",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "following",
        "state",
        "state",
        "is_WS_OR_EOL",
        "following",
        "withinFlowCollection",
        "is_FLOW_INDICATOR",
        "following",
        "state",
        "state",
        "captureStart",
        "captureEnd",
        "state",
        "hasPendingContent",
        "ch",
        "ch",
        "following",
        "state",
        "state",
        "is_WS_OR_EOL",
        "following",
        "withinFlowCollection",
        "is_FLOW_INDICATOR",
        "following",
        "ch",
        "preceding",
        "state",
        "state",
        "is_WS_OR_EOL",
        "preceding",
        "state",
        "state",
        "testDocumentSeparator",
        "state",
        "withinFlowCollection",
        "is_FLOW_INDICATOR",
        "ch",
        "is_EOL",
        "ch",
        "_line",
        "state",
        "_lineStart",
        "state",
        "_lineIndent",
        "state",
        "skipSeparationSpace",
        "state",
        "state",
        "nodeIndent",
        "hasPendingContent",
        "ch",
        "state",
        "state",
        "state",
        "captureEnd",
        "state",
        "_line",
        "state",
        "_lineStart",
        "state",
        "_lineIndent",
        "hasPendingContent",
        "captureSegment",
        "state",
        "captureStart",
        "captureEnd",
        "writeFoldedLines",
        "state",
        "state",
        "_line",
        "captureStart",
        "captureEnd",
        "state",
        "hasPendingContent",
        "is_WHITE_SPACE",
        "ch",
        "captureEnd",
        "state",
        "ch",
        "state",
        "state",
        "captureSegment",
        "state",
        "captureStart",
        "captureEnd",
        "state",
        "state",
        "_kind",
        "state",
        "_result",
        "state",
        "nodeIndent",
        "ch",
        "state",
        "state",
        "ch",
        "state",
        "state",
        "state",
        "captureStart",
        "captureEnd",
        "state",
        "ch",
        "state",
        "state",
        "ch",
        "captureSegment",
        "state",
        "captureStart",
        "state",
        "ch",
        "state",
        "state",
        "ch",
        "captureStart",
        "state",
        "state",
        "captureEnd",
        "state",
        "is_EOL",
        "ch",
        "captureSegment",
        "state",
        "captureStart",
        "captureEnd",
        "writeFoldedLines",
        "state",
        "skipSeparationSpace",
        "state",
        "nodeIndent",
        "captureStart",
        "captureEnd",
        "state",
        "state",
        "state",
        "testDocumentSeparator",
        "state",
        "throwError",
        "state",
        "state",
        "captureEnd",
        "state",
        "throwError",
        "state",
        "state",
        "nodeIndent",
        "ch",
        "state",
        "state",
        "ch",
        "state",
        "state",
        "state",
        "captureStart",
        "captureEnd",
        "state",
        "ch",
        "state",
        "state",
        "ch",
        "captureSegment",
        "state",
        "captureStart",
        "state",
        "state",
        "ch",
        "captureSegment",
        "state",
        "captureStart",
        "state",
        "ch",
        "state",
        "state",
        "is_EOL",
        "ch",
        "skipSeparationSpace",
        "state",
        "nodeIndent",
        "ch",
        "simpleEscapeCheck",
        "ch",
        "state",
        "simpleEscapeMap",
        "ch",
        "state",
        "tmp",
        "escapedHexLen",
        "ch",
        "hexLength",
        "tmp",
        "hexResult",
        "hexLength",
        "hexLength",
        "ch",
        "state",
        "state",
        "tmp",
        "fromHexCode",
        "ch",
        "hexResult",
        "hexResult",
        "tmp",
        "throwError",
        "state",
        "state",
        "charFromCodepoint",
        "hexResult",
        "state",
        "throwError",
        "state",
        "captureStart",
        "captureEnd",
        "state",
        "is_EOL",
        "ch",
        "captureSegment",
        "state",
        "captureStart",
        "captureEnd",
        "writeFoldedLines",
        "state",
        "skipSeparationSpace",
        "state",
        "nodeIndent",
        "captureStart",
        "captureEnd",
        "state",
        "state",
        "state",
        "testDocumentSeparator",
        "state",
        "throwError",
        "state",
        "state",
        "captureEnd",
        "state",
        "throwError",
        "state",
        "state",
        "nodeIndent",
        "state",
        "state",
        "ch",
        "state",
        "state",
        "ch",
        "terminator",
        "isMapping",
        "_result",
        "ch",
        "terminator",
        "isMapping",
        "_result",
        "state",
        "state",
        "state",
        "_result",
        "ch",
        "state",
        "state",
        "ch",
        "skipSeparationSpace",
        "state",
        "nodeIndent",
        "ch",
        "state",
        "state",
        "ch",
        "terminator",
        "state",
        "state",
        "_tag",
        "state",
        "_anchor",
        "state",
        "isMapping",
        "state",
        "_result",
        "readNext",
        "throwError",
        "state",
        "keyTag",
        "keyNode",
        "valueNode",
        "isPair",
        "isExplicitPair",
        "ch",
        "following",
        "state",
        "state",
        "is_WS_OR_EOL",
        "following",
        "isPair",
        "isExplicitPair",
        "state",
        "skipSeparationSpace",
        "state",
        "nodeIndent",
        "_line",
        "state",
        "composeNode",
        "state",
        "nodeIndent",
        "CONTEXT_FLOW_IN",
        "keyTag",
        "state",
        "keyNode",
        "state",
        "skipSeparationSpace",
        "state",
        "nodeIndent",
        "ch",
        "state",
        "state",
        "isExplicitPair",
        "state",
        "_line",
        "ch",
        "isPair",
        "ch",
        "state",
        "state",
        "skipSeparationSpace",
        "state",
        "nodeIndent",
        "composeNode",
        "state",
        "nodeIndent",
        "CONTEXT_FLOW_IN",
        "valueNode",
        "state",
        "isMapping",
        "storeMappingPair",
        "state",
        "_result",
        "overridableKeys",
        "keyTag",
        "keyNode",
        "valueNode",
        "isPair",
        "_result",
        "storeMappingPair",
        "state",
        "overridableKeys",
        "keyTag",
        "keyNode",
        "valueNode",
        "_result",
        "keyNode",
        "skipSeparationSpace",
        "state",
        "nodeIndent",
        "ch",
        "state",
        "state",
        "ch",
        "readNext",
        "ch",
        "state",
        "state",
        "readNext",
        "throwError",
        "state",
        "state",
        "nodeIndent",
        "ch",
        "state",
        "state",
        "ch",
        "folding",
        "ch",
        "folding",
        "state",
        "state",
        "ch",
        "ch",
        "state",
        "state",
        "ch",
        "ch",
        "CHOMPING_CLIP",
        "chomping",
        "chomping",
        "ch",
        "CHOMPING_KEEP",
        "CHOMPING_STRIP",
        "throwError",
        "state",
        "tmp",
        "fromDecimalCode",
        "ch",
        "tmp",
        "throwError",
        "state",
        "detectedIndent",
        "textIndent",
        "nodeIndent",
        "tmp",
        "detectedIndent",
        "throwError",
        "state",
        "is_WHITE_SPACE",
        "ch",
        "ch",
        "state",
        "state",
        "is_WHITE_SPACE",
        "ch",
        "ch",
        "ch",
        "state",
        "state",
        "is_EOL",
        "ch",
        "ch",
        "ch",
        "readLineBreak",
        "state",
        "state",
        "ch",
        "state",
        "state",
        "detectedIndent",
        "state",
        "textIndent",
        "ch",
        "state",
        "ch",
        "state",
        "state",
        "detectedIndent",
        "state",
        "textIndent",
        "textIndent",
        "state",
        "is_EOL",
        "ch",
        "emptyLines",
        "state",
        "textIndent",
        "chomping",
        "CHOMPING_KEEP",
        "state",
        "common",
        "didReadContent",
        "emptyLines",
        "emptyLines",
        "chomping",
        "CHOMPING_CLIP",
        "didReadContent",
        "state",
        "folding",
        "is_WHITE_SPACE",
        "ch",
        "atMoreIndented",
        "state",
        "common",
        "didReadContent",
        "emptyLines",
        "emptyLines",
        "atMoreIndented",
        "atMoreIndented",
        "state",
        "common",
        "emptyLines",
        "emptyLines",
        "didReadContent",
        "state",
        "state",
        "common",
        "emptyLines",
        "state",
        "common",
        "didReadContent",
        "emptyLines",
        "emptyLines",
        "didReadContent",
        "detectedIndent",
        "emptyLines",
        "captureStart",
        "state",
        "is_EOL",
        "ch",
        "ch",
        "ch",
        "state",
        "state",
        "captureSegment",
        "state",
        "captureStart",
        "state",
        "state",
        "nodeIndent",
        "state",
        "state",
        "state",
        "state",
        "state",
        "_result",
        "ch",
        "state",
        "state",
        "ch",
        "ch",
        "following",
        "state",
        "state",
        "is_WS_OR_EOL",
        "following",
        "detected",
        "state",
        "skipSeparationSpace",
        "state",
        "state",
        "nodeIndent",
        "_result",
        "ch",
        "state",
        "state",
        "_line",
        "state",
        "composeNode",
        "state",
        "nodeIndent",
        "CONTEXT_BLOCK_IN",
        "_result",
        "state",
        "skipSeparationSpace",
        "state",
        "ch",
        "state",
        "state",
        "state",
        "_line",
        "state",
        "nodeIndent",
        "ch",
        "throwError",
        "state",
        "state",
        "nodeIndent",
        "detected",
        "state",
        "_tag",
        "state",
        "_anchor",
        "state",
        "state",
        "_result",
        "state",
        "nodeIndent",
        "flowIndent",
        "state",
        "state",
        "state",
        "state",
        "state",
        "_result",
        "ch",
        "state",
        "state",
        "ch",
        "following",
        "state",
        "state",
        "_line",
        "state",
        "ch",
        "ch",
        "is_WS_OR_EOL",
        "following",
        "ch",
        "atExplicitKey",
        "storeMappingPair",
        "state",
        "_result",
        "overridableKeys",
        "keyTag",
        "keyNode",
        "keyTag",
        "keyNode",
        "valueNode",
        "detected",
        "atExplicitKey",
        "allowCompact",
        "atExplicitKey",
        "atExplicitKey",
        "allowCompact",
        "throwError",
        "state",
        "state",
        "ch",
        "following",
        "composeNode",
        "state",
        "flowIndent",
        "CONTEXT_FLOW_OUT",
        "state",
        "_line",
        "ch",
        "state",
        "state",
        "is_WHITE_SPACE",
        "ch",
        "ch",
        "state",
        "state",
        "ch",
        "ch",
        "state",
        "state",
        "is_WS_OR_EOL",
        "ch",
        "throwError",
        "state",
        "atExplicitKey",
        "storeMappingPair",
        "state",
        "_result",
        "overridableKeys",
        "keyTag",
        "keyNode",
        "keyTag",
        "keyNode",
        "valueNode",
        "detected",
        "atExplicitKey",
        "allowCompact",
        "keyTag",
        "state",
        "keyNode",
        "state",
        "detected",
        "throwError",
        "state",
        "state",
        "_tag",
        "state",
        "_anchor",
        "detected",
        "throwError",
        "state",
        "state",
        "_tag",
        "state",
        "_anchor",
        "state",
        "_line",
        "state",
        "nodeIndent",
        "composeNode",
        "state",
        "nodeIndent",
        "CONTEXT_BLOCK_OUT",
        "allowCompact",
        "atExplicitKey",
        "keyNode",
        "state",
        "valueNode",
        "state",
        "atExplicitKey",
        "storeMappingPair",
        "state",
        "_result",
        "overridableKeys",
        "keyTag",
        "keyNode",
        "valueNode",
        "keyTag",
        "keyNode",
        "valueNode",
        "skipSeparationSpace",
        "state",
        "ch",
        "state",
        "state",
        "state",
        "nodeIndent",
        "ch",
        "throwError",
        "state",
        "state",
        "nodeIndent",
        "atExplicitKey",
        "storeMappingPair",
        "state",
        "_result",
        "overridableKeys",
        "keyTag",
        "keyNode",
        "detected",
        "state",
        "_tag",
        "state",
        "_anchor",
        "state",
        "state",
        "_result",
        "detected",
        "state",
        "ch",
        "state",
        "state",
        "ch",
        "state",
        "throwError",
        "state",
        "ch",
        "state",
        "state",
        "ch",
        "isVerbatim",
        "ch",
        "state",
        "state",
        "ch",
        "isNamed",
        "tagHandle",
        "ch",
        "state",
        "state",
        "tagHandle",
        "_position",
        "state",
        "isVerbatim",
        "ch",
        "state",
        "state",
        "ch",
        "ch",
        "state",
        "state",
        "tagName",
        "state",
        "_position",
        "state",
        "ch",
        "state",
        "state",
        "throwError",
        "state",
        "ch",
        "is_WS_OR_EOL",
        "ch",
        "ch",
        "isNamed",
        "tagHandle",
        "state",
        "_position",
        "state",
        "PATTERN_TAG_HANDLE",
        "tagHandle",
        "throwError",
        "state",
        "isNamed",
        "_position",
        "state",
        "throwError",
        "state",
        "ch",
        "state",
        "state",
        "tagName",
        "state",
        "_position",
        "state",
        "PATTERN_FLOW_INDICATORS",
        "tagName",
        "throwError",
        "state",
        "tagName",
        "PATTERN_TAG_URI",
        "tagName",
        "throwError",
        "state",
        "tagName",
        "isVerbatim",
        "state",
        "tagName",
        "_hasOwnProperty",
        "state",
        "tagHandle",
        "state",
        "state",
        "tagHandle",
        "tagName",
        "tagHandle",
        "state",
        "tagName",
        "tagHandle",
        "state",
        "tagName",
        "throwError",
        "state",
        "tagHandle",
        "state",
        "ch",
        "state",
        "state",
        "ch",
        "state",
        "throwError",
        "state",
        "ch",
        "state",
        "state",
        "_position",
        "state",
        "ch",
        "is_WS_OR_EOL",
        "ch",
        "is_FLOW_INDICATOR",
        "ch",
        "ch",
        "state",
        "state",
        "state",
        "_position",
        "throwError",
        "state",
        "state",
        "state",
        "_position",
        "state",
        "state",
        "ch",
        "state",
        "state",
        "ch",
        "ch",
        "state",
        "state",
        "_position",
        "state",
        "ch",
        "is_WS_OR_EOL",
        "ch",
        "is_FLOW_INDICATOR",
        "ch",
        "ch",
        "state",
        "state",
        "state",
        "_position",
        "throwError",
        "state",
        "alias",
        "state",
        "_position",
        "state",
        "state",
        "alias",
        "throwError",
        "state",
        "alias",
        "state",
        "state",
        "alias",
        "skipSeparationSpace",
        "state",
        "state",
        "parentIndent",
        "nodeContext",
        "allowToSeek",
        "allowCompact",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "allowBlockStyles",
        "allowBlockScalars",
        "allowBlockCollections",
        "CONTEXT_BLOCK_OUT",
        "nodeContext",
        "CONTEXT_BLOCK_IN",
        "nodeContext",
        "allowToSeek",
        "skipSeparationSpace",
        "state",
        "atNewLine",
        "state",
        "parentIndent",
        "indentStatus",
        "state",
        "parentIndent",
        "indentStatus",
        "state",
        "parentIndent",
        "indentStatus",
        "indentStatus",
        "readTagProperty",
        "state",
        "readAnchorProperty",
        "state",
        "skipSeparationSpace",
        "state",
        "atNewLine",
        "allowBlockCollections",
        "allowBlockStyles",
        "state",
        "parentIndent",
        "indentStatus",
        "state",
        "parentIndent",
        "indentStatus",
        "state",
        "parentIndent",
        "indentStatus",
        "allowBlockCollections",
        "allowBlockCollections",
        "allowBlockCollections",
        "atNewLine",
        "allowCompact",
        "indentStatus",
        "CONTEXT_BLOCK_OUT",
        "nodeContext",
        "CONTEXT_FLOW_IN",
        "nodeContext",
        "CONTEXT_FLOW_OUT",
        "nodeContext",
        "flowIndent",
        "parentIndent",
        "flowIndent",
        "parentIndent",
        "blockIndent",
        "state",
        "state",
        "indentStatus",
        "allowBlockCollections",
        "readBlockSequence",
        "state",
        "blockIndent",
        "readBlockMapping",
        "state",
        "blockIndent",
        "flowIndent",
        "readFlowCollection",
        "state",
        "flowIndent",
        "hasContent",
        "allowBlockScalars",
        "readBlockScalar",
        "state",
        "flowIndent",
        "readSingleQuotedScalar",
        "state",
        "flowIndent",
        "readDoubleQuotedScalar",
        "state",
        "flowIndent",
        "hasContent",
        "readAlias",
        "state",
        "hasContent",
        "state",
        "state",
        "throwError",
        "state",
        "readPlainScalar",
        "state",
        "flowIndent",
        "CONTEXT_FLOW_IN",
        "nodeContext",
        "hasContent",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "indentStatus",
        "hasContent",
        "allowBlockCollections",
        "readBlockSequence",
        "state",
        "blockIndent",
        "state",
        "state",
        "state",
        "typeIndex",
        "typeQuantity",
        "state",
        "typeIndex",
        "typeQuantity",
        "typeIndex",
        "state",
        "typeIndex",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "_hasOwnProperty",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "throwError",
        "state",
        "state",
        "state",
        "state",
        "throwError",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "throwError",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "hasContent",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "ch",
        "state",
        "state",
        "skipSeparationSpace",
        "state",
        "ch",
        "state",
        "state",
        "state",
        "ch",
        "hasDirectives",
        "ch",
        "state",
        "state",
        "_position",
        "state",
        "ch",
        "is_WS_OR_EOL",
        "ch",
        "ch",
        "state",
        "state",
        "directiveName",
        "state",
        "_position",
        "state",
        "directiveArgs",
        "directiveName",
        "throwError",
        "state",
        "ch",
        "is_WHITE_SPACE",
        "ch",
        "ch",
        "state",
        "state",
        "ch",
        "ch",
        "state",
        "state",
        "ch",
        "is_EOL",
        "ch",
        "is_EOL",
        "ch",
        "_position",
        "state",
        "ch",
        "is_WS_OR_EOL",
        "ch",
        "ch",
        "state",
        "state",
        "directiveArgs",
        "state",
        "_position",
        "state",
        "ch",
        "readLineBreak",
        "state",
        "_hasOwnProperty",
        "directiveHandlers",
        "directiveName",
        "directiveHandlers",
        "directiveName",
        "state",
        "directiveName",
        "directiveArgs",
        "throwWarning",
        "state",
        "directiveName",
        "skipSeparationSpace",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "skipSeparationSpace",
        "state",
        "hasDirectives",
        "throwError",
        "state",
        "composeNode",
        "state",
        "state",
        "CONTEXT_BLOCK_OUT",
        "skipSeparationSpace",
        "state",
        "state",
        "PATTERN_NON_ASCII_LINE_BREAKS",
        "state",
        "documentStart",
        "state",
        "throwWarning",
        "state",
        "state",
        "state",
        "state",
        "state",
        "testDocumentSeparator",
        "state",
        "state",
        "state",
        "state",
        "skipSeparationSpace",
        "state",
        "state",
        "state",
        "throwError",
        "state",
        "input",
        "options",
        "input",
        "input",
        "options",
        "options",
        "input",
        "input",
        "input",
        "input",
        "input",
        "input",
        "input",
        "input",
        "input",
        "State",
        "input",
        "options",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "readDocument",
        "state",
        "state",
        "input",
        "iterator",
        "options",
        "loadDocuments",
        "input",
        "options",
        "index",
        "length",
        "documents",
        "index",
        "length",
        "index",
        "iterator",
        "documents",
        "index",
        "input",
        "options",
        "loadDocuments",
        "input",
        "options",
        "documents",
        "documents",
        "documents",
        "YAMLException$1",
        "input",
        "output",
        "options",
        "loadAll$1",
        "input",
        "output",
        "common",
        "DEFAULT_SAFE_SCHEMA$1",
        "options",
        "input",
        "options",
        "load$1",
        "input",
        "common",
        "DEFAULT_SAFE_SCHEMA$1",
        "options",
        "loadAll_1",
        "load_1",
        "safeLoadAll_1",
        "safeLoad_1",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "ESCAPE_SEQUENCES",
        "schema",
        "result",
        "keys",
        "index",
        "length",
        "keys",
        "index",
        "length",
        "index",
        "tag",
        "keys",
        "index",
        "style",
        "tag",
        "tag",
        "tag",
        "tag",
        "schema",
        "tag",
        "_hasOwnProperty$3",
        "style",
        "style",
        "style",
        "result",
        "tag",
        "style",
        "result",
        "character",
        "character",
        "character",
        "handle",
        "length",
        "character",
        "handle",
        "length",
        "character",
        "handle",
        "length",
        "YAMLException$5",
        "handle",
        "common$7",
        "length",
        "options",
        "options",
        "DEFAULT_FULL_SCHEMA$2",
        "options",
        "options",
        "common$7",
        "options",
        "options",
        "compileStyleMap",
        "options",
        "options",
        "options",
        "options",
        "options",
        "spaces",
        "common$7",
        "spaces",
        "position",
        "length",
        "next",
        "position",
        "next",
        "line",
        "position",
        "position",
        "length",
        "line",
        "position",
        "next",
        "position",
        "next",
        "line",
        "line",
        "result",
        "ind",
        "result",
        "line",
        "result",
        "state",
        "level",
        "common$7",
        "state",
        "level",
        "state",
        "index",
        "length",
        "state",
        "index",
        "length",
        "index",
        "state",
        "index",
        "c",
        "c",
        "CHAR_SPACE",
        "c",
        "CHAR_TAB",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "isPrintable",
        "c",
        "c",
        "c",
        "CHAR_COMMA",
        "c",
        "CHAR_LEFT_SQUARE_BRACKET",
        "c",
        "CHAR_RIGHT_SQUARE_BRACKET",
        "c",
        "CHAR_LEFT_CURLY_BRACKET",
        "c",
        "CHAR_RIGHT_CURLY_BRACKET",
        "c",
        "CHAR_COLON",
        "c",
        "CHAR_SHARP",
        "c",
        "isPrintable",
        "c",
        "c",
        "isWhitespace",
        "c",
        "c",
        "CHAR_MINUS",
        "c",
        "CHAR_QUESTION",
        "c",
        "CHAR_COLON",
        "c",
        "CHAR_COMMA",
        "c",
        "CHAR_LEFT_SQUARE_BRACKET",
        "c",
        "CHAR_RIGHT_SQUARE_BRACKET",
        "c",
        "CHAR_LEFT_CURLY_BRACKET",
        "c",
        "CHAR_RIGHT_CURLY_BRACKET",
        "c",
        "CHAR_SHARP",
        "c",
        "CHAR_AMPERSAND",
        "c",
        "CHAR_ASTERISK",
        "c",
        "CHAR_EXCLAMATION",
        "c",
        "CHAR_VERTICAL_LINE",
        "c",
        "CHAR_GREATER_THAN",
        "c",
        "CHAR_SINGLE_QUOTE",
        "c",
        "CHAR_DOUBLE_QUOTE",
        "c",
        "CHAR_PERCENT",
        "c",
        "CHAR_COMMERCIAL_AT",
        "c",
        "CHAR_GRAVE_ACCENT",
        "singleLineOnly",
        "indentPerLevel",
        "lineWidth",
        "testAmbiguousType",
        "lineWidth",
        "isPlainSafeFirst",
        "isWhitespace",
        "singleLineOnly",
        "i",
        "i",
        "i",
        "i",
        "isPrintable",
        "STYLE_DOUBLE",
        "plain",
        "plain",
        "isPlainSafe",
        "i",
        "i",
        "i",
        "i",
        "CHAR_LINE_FEED",
        "hasLineBreak",
        "shouldTrackWidth",
        "hasFoldableLine",
        "hasFoldableLine",
        "i",
        "previousLineBreak",
        "lineWidth",
        "previousLineBreak",
        "previousLineBreak",
        "i",
        "isPrintable",
        "STYLE_DOUBLE",
        "plain",
        "plain",
        "isPlainSafe",
        "hasFoldableLine",
        "hasFoldableLine",
        "shouldTrackWidth",
        "i",
        "previousLineBreak",
        "lineWidth",
        "previousLineBreak",
        "hasLineBreak",
        "hasFoldableLine",
        "plain",
        "testAmbiguousType",
        "STYLE_PLAIN",
        "STYLE_SINGLE",
        "indentPerLevel",
        "STYLE_DOUBLE",
        "hasFoldableLine",
        "STYLE_FOLDED",
        "STYLE_LITERAL",
        "state",
        "level",
        "iskey",
        "state",
        "state",
        "DEPRECATED_BOOLEANS_SYNTAX",
        "state",
        "level",
        "state",
        "state",
        "state",
        "indent",
        "iskey",
        "state",
        "level",
        "state",
        "testImplicitResolving",
        "state",
        "chooseScalarStyle",
        "singleLineOnly",
        "state",
        "lineWidth",
        "testAmbiguity",
        "STYLE_PLAIN",
        "STYLE_SINGLE",
        "STYLE_LITERAL",
        "blockHeader",
        "state",
        "dropEndingNewline",
        "indentString",
        "indent",
        "STYLE_FOLDED",
        "blockHeader",
        "state",
        "dropEndingNewline",
        "indentString",
        "foldString",
        "lineWidth",
        "indent",
        "STYLE_DOUBLE",
        "escapeString",
        "lineWidth",
        "YAMLException$5",
        "indentPerLevel",
        "indentPerLevel",
        "clip",
        "keep",
        "clip",
        "indentIndicator",
        "chomp",
        "width",
        "nextLF",
        "nextLF",
        "nextLF",
        "lineRe",
        "nextLF",
        "foldLine",
        "nextLF",
        "width",
        "match",
        "lineRe",
        "match",
        "match",
        "moreIndented",
        "line",
        "result",
        "prefix",
        "prevMoreIndented",
        "moreIndented",
        "line",
        "foldLine",
        "line",
        "width",
        "prevMoreIndented",
        "moreIndented",
        "result",
        "line",
        "width",
        "line",
        "line",
        "line",
        "match",
        "breakRe",
        "line",
        "next",
        "match",
        "next",
        "start",
        "width",
        "end",
        "curr",
        "start",
        "curr",
        "next",
        "result",
        "line",
        "start",
        "end",
        "start",
        "end",
        "curr",
        "next",
        "result",
        "line",
        "start",
        "width",
        "curr",
        "start",
        "result",
        "line",
        "start",
        "curr",
        "line",
        "curr",
        "result",
        "line",
        "start",
        "result",
        "i",
        "i",
        "i",
        "escapeSeq",
        "ESCAPE_SEQUENCES",
        "result",
        "escapeSeq",
        "isPrintable",
        "i",
        "escapeSeq",
        "encodeHex",
        "result",
        "state",
        "level",
        "state",
        "index",
        "length",
        "index",
        "length",
        "index",
        "writeNode",
        "state",
        "level",
        "index",
        "index",
        "_result",
        "_result",
        "state",
        "state",
        "_tag",
        "state",
        "_result",
        "state",
        "level",
        "compact",
        "state",
        "index",
        "length",
        "index",
        "length",
        "index",
        "writeNode",
        "state",
        "level",
        "index",
        "compact",
        "index",
        "_result",
        "generateNextLine",
        "state",
        "level",
        "_result",
        "state",
        "state",
        "_tag",
        "state",
        "_result",
        "state",
        "level",
        "state",
        "index",
        "length",
        "objectKeyList",
        "index",
        "length",
        "index",
        "pairBuffer",
        "index",
        "pairBuffer",
        "objectKey",
        "objectKeyList",
        "index",
        "objectValue",
        "objectKey",
        "writeNode",
        "state",
        "level",
        "objectKey",
        "state",
        "pairBuffer",
        "pairBuffer",
        "state",
        "writeNode",
        "state",
        "level",
        "objectValue",
        "pairBuffer",
        "state",
        "_result",
        "pairBuffer",
        "state",
        "_tag",
        "state",
        "_result",
        "state",
        "level",
        "compact",
        "state",
        "state",
        "objectKeyList",
        "state",
        "objectKeyList",
        "state",
        "state",
        "YAMLException$5",
        "index",
        "length",
        "objectKeyList",
        "index",
        "length",
        "index",
        "pairBuffer",
        "compact",
        "index",
        "pairBuffer",
        "generateNextLine",
        "state",
        "level",
        "objectKey",
        "objectKeyList",
        "index",
        "objectValue",
        "objectKey",
        "writeNode",
        "state",
        "level",
        "objectKey",
        "explicitPair",
        "state",
        "state",
        "state",
        "state",
        "explicitPair",
        "state",
        "CHAR_LINE_FEED",
        "state",
        "pairBuffer",
        "pairBuffer",
        "pairBuffer",
        "state",
        "explicitPair",
        "pairBuffer",
        "generateNextLine",
        "state",
        "level",
        "writeNode",
        "state",
        "level",
        "objectValue",
        "explicitPair",
        "state",
        "CHAR_LINE_FEED",
        "state",
        "pairBuffer",
        "pairBuffer",
        "pairBuffer",
        "state",
        "_result",
        "pairBuffer",
        "state",
        "_tag",
        "state",
        "_result",
        "state",
        "typeList",
        "state",
        "state",
        "index",
        "length",
        "typeList",
        "index",
        "length",
        "index",
        "typeList",
        "index",
        "state",
        "style",
        "state",
        "_toString$2",
        "_result",
        "style",
        "_hasOwnProperty$3",
        "style",
        "_result",
        "style",
        "style",
        "YAMLException$5",
        "style",
        "state",
        "_result",
        "state",
        "level",
        "block",
        "compact",
        "iskey",
        "state",
        "state",
        "detectType",
        "state",
        "detectType",
        "state",
        "_toString$2",
        "state",
        "block",
        "block",
        "state",
        "state",
        "level",
        "objectOrArray",
        "duplicateIndex",
        "state",
        "duplicate",
        "duplicateIndex",
        "state",
        "state",
        "duplicate",
        "state",
        "level",
        "compact",
        "duplicate",
        "state",
        "duplicateIndex",
        "state",
        "duplicateIndex",
        "objectOrArray",
        "duplicate",
        "state",
        "duplicateIndex",
        "state",
        "duplicateIndex",
        "block",
        "state",
        "writeBlockMapping",
        "state",
        "level",
        "state",
        "compact",
        "duplicate",
        "state",
        "duplicateIndex",
        "state",
        "writeFlowMapping",
        "state",
        "level",
        "state",
        "duplicate",
        "state",
        "duplicateIndex",
        "state",
        "block",
        "state",
        "writeBlockSequence",
        "state",
        "level",
        "state",
        "compact",
        "duplicate",
        "state",
        "duplicateIndex",
        "state",
        "writeFlowSequence",
        "state",
        "level",
        "state",
        "duplicate",
        "state",
        "duplicateIndex",
        "state",
        "state",
        "writeScalar",
        "state",
        "state",
        "level",
        "iskey",
        "state",
        "YAMLException$5",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "inspectNode",
        "objects",
        "duplicatesIndexes",
        "index",
        "length",
        "duplicatesIndexes",
        "index",
        "length",
        "index",
        "state",
        "objects",
        "duplicatesIndexes",
        "index",
        "state",
        "length",
        "objects",
        "duplicatesIndexes",
        "index",
        "objects",
        "index",
        "duplicatesIndexes",
        "index",
        "duplicatesIndexes",
        "index",
        "objects",
        "index",
        "length",
        "index",
        "length",
        "index",
        "inspectNode",
        "index",
        "objects",
        "duplicatesIndexes",
        "objectKeyList",
        "index",
        "length",
        "objectKeyList",
        "index",
        "length",
        "index",
        "inspectNode",
        "objectKeyList",
        "index",
        "objects",
        "duplicatesIndexes",
        "input",
        "options",
        "options",
        "options",
        "State$1",
        "options",
        "state",
        "getDuplicateReferences",
        "input",
        "state",
        "writeNode",
        "state",
        "input",
        "state",
        "input",
        "options",
        "dump$1",
        "input",
        "common$7",
        "DEFAULT_SAFE_SCHEMA$2",
        "options",
        "dump_1",
        "safeDump_1",
        "name",
        "name",
        "loader",
        "loader",
        "loader",
        "loader",
        "dumper",
        "dumper",
        "deprecated",
        "deprecated",
        "deprecated",
        "deprecated",
        "Type",
        "Schema",
        "FAILSAFE_SCHEMA",
        "JSON_SCHEMA",
        "CORE_SCHEMA",
        "DEFAULT_SAFE_SCHEMA",
        "DEFAULT_FULL_SCHEMA",
        "load",
        "loadAll",
        "safeLoad",
        "safeLoadAll",
        "dump",
        "safeDump",
        "YAMLException",
        "MINIMAL_SCHEMA",
        "SAFE_SCHEMA",
        "DEFAULT_SCHEMA",
        "scan$1",
        "parse$1",
        "compose",
        "addConstructor",
        "dom",
        "data",
        "dom",
        "el",
        "el",
        "localData",
        "index",
        "text",
        "data",
        "localData",
        "localData",
        "data",
        "localData",
        "localData",
        "data",
        "localData",
        "localData",
        "data",
        "data",
        "author",
        "i",
        "author",
        "author",
        "name",
        "author",
        "a",
        "author",
        "name",
        "name",
        "a",
        "name",
        "a",
        "names",
        "names",
        "a",
        "names",
        "names",
        "localData",
        "i",
        "localData",
        "i",
        "localData",
        "i",
        "affiliation",
        "localData",
        "i",
        "a",
        "localData",
        "i",
        "affiliation",
        "a",
        "affiliation",
        "a",
        "createCommonjsModule",
        "exports",
        "exports",
        "t",
        "t",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "canCommentOut",
        "canCommentOut",
        "canCommentOut",
        "canCommentOut",
        "canCommentOut",
        "s",
        "s",
        "s",
        "s",
        "canCommentOut",
        "s",
        "canCommentOut",
        "canCommentOut",
        "canCommentOut",
        "canCommentOut",
        "canCommentOut",
        "s",
        "s",
        "canCommentOut",
        "this$1",
        "canCommentOut",
        "this$1",
        "canCommentOut",
        "this$1",
        "canCommentOut",
        "escaped",
        "this$1",
        "this$1",
        "bracecount",
        "bracecount",
        "this$1",
        "this$1",
        "this$1",
        "start",
        "end",
        "this$1",
        "this$1",
        "bracecount",
        "this$1",
        "this$1",
        "this$1",
        "this$1",
        "escaped",
        "escaped",
        "escaped",
        "this$1",
        "brcktCnt",
        "this$1",
        "this$1",
        "this$1",
        "this$1",
        "brcktCnt",
        "this$1",
        "this$1",
        "brcktCnt",
        "this$1",
        "this$1",
        "this$1",
        "start",
        "this$1",
        "escaped",
        "this$1",
        "this$1",
        "this$1",
        "this$1",
        "this$1",
        "start",
        "end",
        "this$1",
        "this$1",
        "this$1",
        "start",
        "this$1",
        "this$1",
        "escaped",
        "escaped",
        "escaped",
        "this$1",
        "k",
        "k",
        "k",
        "k",
        "start",
        "k",
        "values",
        "this$1",
        "values",
        "this$1",
        "values",
        "this$1",
        "this$1",
        "this$1",
        "this$1",
        "this$1",
        "this$1",
        "start",
        "this$1",
        "this$1",
        "key",
        "val",
        "kv",
        "kv",
        "this$1",
        "this$1",
        "kv",
        "this$1",
        "this$1",
        "kv",
        "kv",
        "d",
        "d",
        "d",
        "d",
        "this$1",
        "this$1",
        "d",
        "this$1",
        "d",
        "this$1",
        "d",
        "this$1",
        "this$1",
        "d",
        "this$1",
        "exports",
        "bibtex",
        "BibtexParser",
        "b",
        "bibtex",
        "b",
        "b",
        "exports",
        "json",
        "i",
        "json",
        "json",
        "i",
        "json",
        "i",
        "json",
        "i",
        "json",
        "i",
        "json",
        "i",
        "json",
        "i",
        "jdx",
        "json",
        "i",
        "tags",
        "tags",
        "tags",
        "jdx",
        "json",
        "i",
        "jdx",
        "tags",
        "exports",
        "dom",
        "data",
        "dom",
        "el",
        "el",
        "bibtexParse",
        "rawBib",
        "parsed",
        "parsed",
        "e",
        "k",
        "e",
        "e",
        "k",
        "val",
        "val",
        "val",
        "val",
        "full",
        "x",
        "val",
        "val",
        "full",
        "e",
        "k",
        "val",
        "bibliography",
        "e",
        "e",
        "bibliography",
        "e",
        "e",
        "data",
        "bibliography",
        "floori",
        "offseti",
        "count",
        "field",
        "date",
        "floori",
        "date",
        "date",
        "date",
        "interval",
        "interval",
        "interval",
        "date",
        "floori",
        "date",
        "date",
        "offseti",
        "date",
        "floori",
        "date",
        "date",
        "interval",
        "date",
        "interval",
        "date",
        "interval",
        "date",
        "date",
        "d0",
        "d1",
        "date",
        "d0",
        "d1",
        "interval",
        "date",
        "step",
        "offseti",
        "date",
        "date",
        "step",
        "step",
        "date",
        "interval",
        "start",
        "stop",
        "step",
        "start",
        "interval",
        "start",
        "step",
        "step",
        "step",
        "start",
        "stop",
        "step",
        "start",
        "offseti",
        "start",
        "step",
        "floori",
        "start",
        "start",
        "stop",
        "interval",
        "test",
        "newInterval",
        "date",
        "date",
        "date",
        "floori",
        "date",
        "test",
        "date",
        "date",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "offseti",
        "date",
        "test",
        "date",
        "count",
        "interval",
        "start",
        "end",
        "t0",
        "start",
        "t1",
        "end",
        "floori",
        "t0",
        "floori",
        "t1",
        "count",
        "t0",
        "t1",
        "interval",
        "step",
        "step",
        "step",
        "isFinite",
        "step",
        "step",
        "step",
        "interval",
        "interval",
        "field",
        "d",
        "field",
        "d",
        "step",
        "d",
        "interval",
        "d",
        "step",
        "interval",
        "newInterval",
        "date",
        "step",
        "date",
        "date",
        "step",
        "start",
        "end",
        "end",
        "start",
        "millisecond",
        "k",
        "k",
        "k",
        "isFinite",
        "k",
        "k",
        "k",
        "millisecond",
        "newInterval",
        "date",
        "date",
        "date",
        "k",
        "k",
        "date",
        "step",
        "date",
        "date",
        "step",
        "k",
        "start",
        "end",
        "end",
        "start",
        "k",
        "newInterval",
        "date",
        "date",
        "date",
        "durationSecond",
        "durationSecond",
        "date",
        "step",
        "date",
        "date",
        "step",
        "durationSecond",
        "start",
        "end",
        "end",
        "start",
        "durationSecond",
        "date",
        "date",
        "newInterval",
        "date",
        "date",
        "date",
        "durationMinute",
        "durationMinute",
        "date",
        "step",
        "date",
        "date",
        "step",
        "durationMinute",
        "start",
        "end",
        "end",
        "start",
        "durationMinute",
        "date",
        "date",
        "newInterval",
        "date",
        "date",
        "durationMinute",
        "durationHour",
        "offset",
        "offset",
        "durationHour",
        "date",
        "date",
        "offset",
        "durationHour",
        "durationHour",
        "offset",
        "date",
        "step",
        "date",
        "date",
        "step",
        "durationHour",
        "start",
        "end",
        "end",
        "start",
        "durationHour",
        "date",
        "date",
        "newInterval",
        "date",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "start",
        "end",
        "end",
        "start",
        "end",
        "start",
        "durationMinute",
        "durationDay",
        "date",
        "date",
        "i",
        "newInterval",
        "date",
        "date",
        "date",
        "date",
        "i",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "start",
        "end",
        "end",
        "start",
        "end",
        "start",
        "durationMinute",
        "durationWeek",
        "weekday",
        "weekday",
        "weekday",
        "weekday",
        "weekday",
        "weekday",
        "weekday",
        "newInterval",
        "date",
        "date",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "start",
        "end",
        "end",
        "start",
        "end",
        "start",
        "date",
        "date",
        "newInterval",
        "date",
        "date",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "start",
        "end",
        "end",
        "start",
        "date",
        "date",
        "year",
        "k",
        "isFinite",
        "k",
        "k",
        "k",
        "newInterval",
        "date",
        "date",
        "date",
        "k",
        "k",
        "date",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "k",
        "newInterval",
        "date",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "durationMinute",
        "start",
        "end",
        "end",
        "start",
        "durationMinute",
        "date",
        "date",
        "newInterval",
        "date",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "durationHour",
        "start",
        "end",
        "end",
        "start",
        "durationHour",
        "date",
        "date",
        "newInterval",
        "date",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "start",
        "end",
        "end",
        "start",
        "durationDay",
        "date",
        "date",
        "i",
        "newInterval",
        "date",
        "date",
        "date",
        "date",
        "i",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "start",
        "end",
        "end",
        "start",
        "durationWeek",
        "utcWeekday",
        "utcWeekday",
        "utcWeekday",
        "utcWeekday",
        "utcWeekday",
        "utcWeekday",
        "utcWeekday",
        "newInterval",
        "date",
        "date",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "start",
        "end",
        "end",
        "start",
        "end",
        "start",
        "date",
        "date",
        "newInterval",
        "date",
        "date",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "start",
        "end",
        "end",
        "start",
        "date",
        "date",
        "utcYear",
        "k",
        "isFinite",
        "k",
        "k",
        "k",
        "newInterval",
        "date",
        "date",
        "date",
        "k",
        "k",
        "date",
        "date",
        "date",
        "step",
        "date",
        "date",
        "step",
        "k",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "date",
        "d",
        "date",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "date",
        "d",
        "date",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "y",
        "y",
        "locale",
        "locale",
        "locale",
        "locale",
        "locale",
        "locale",
        "locale",
        "locale",
        "locale",
        "formatRe",
        "locale_periods",
        "formatLookup",
        "locale_periods",
        "formatRe",
        "locale_weekdays",
        "formatLookup",
        "locale_weekdays",
        "formatRe",
        "locale_shortWeekdays",
        "formatLookup",
        "locale_shortWeekdays",
        "formatRe",
        "locale_months",
        "formatLookup",
        "locale_months",
        "formatRe",
        "locale_shortMonths",
        "formatLookup",
        "locale_shortMonths",
        "formatShortWeekday",
        "formatWeekday",
        "formatShortMonth",
        "formatMonth",
        "formatDayOfMonth",
        "formatDayOfMonth",
        "formatHour24",
        "formatHour12",
        "formatDayOfYear",
        "formatMilliseconds",
        "formatMonthNumber",
        "formatMinutes",
        "formatPeriod",
        "formatSeconds",
        "formatWeekNumberSunday",
        "formatWeekdayNumber",
        "formatWeekNumberMonday",
        "formatYear",
        "formatFullYear",
        "formatZone",
        "formatLiteralPercent",
        "formatUTCShortWeekday",
        "formatUTCWeekday",
        "formatUTCShortMonth",
        "formatUTCMonth",
        "formatUTCDayOfMonth",
        "formatUTCDayOfMonth",
        "formatUTCHour24",
        "formatUTCHour12",
        "formatUTCDayOfYear",
        "formatUTCMilliseconds",
        "formatUTCMonthNumber",
        "formatUTCMinutes",
        "formatUTCPeriod",
        "formatUTCSeconds",
        "formatUTCWeekNumberSunday",
        "formatUTCWeekdayNumber",
        "formatUTCWeekNumberMonday",
        "formatUTCYear",
        "formatUTCFullYear",
        "formatUTCZone",
        "formatLiteralPercent",
        "parseShortWeekday",
        "parseWeekday",
        "parseShortMonth",
        "parseMonth",
        "parseLocaleDateTime",
        "parseDayOfMonth",
        "parseDayOfMonth",
        "parseHour24",
        "parseHour24",
        "parseDayOfYear",
        "parseMilliseconds",
        "parseMonthNumber",
        "parseMinutes",
        "parsePeriod",
        "parseSeconds",
        "parseWeekNumberSunday",
        "parseWeekdayNumber",
        "parseWeekNumberMonday",
        "parseLocaleDate",
        "parseLocaleTime",
        "parseYear",
        "parseFullYear",
        "parseZone",
        "parseLiteralPercent",
        "formats",
        "newFormat",
        "locale_date",
        "formats",
        "formats",
        "newFormat",
        "locale_time",
        "formats",
        "formats",
        "newFormat",
        "locale_dateTime",
        "formats",
        "utcFormats",
        "newFormat",
        "locale_date",
        "utcFormats",
        "utcFormats",
        "newFormat",
        "locale_time",
        "utcFormats",
        "utcFormats",
        "newFormat",
        "locale_dateTime",
        "utcFormats",
        "specifier",
        "formats",
        "date",
        "specifier",
        "date",
        "date",
        "date",
        "i",
        "n",
        "specifier",
        "i",
        "specifier",
        "j",
        "i",
        "pad",
        "pads",
        "c",
        "specifier",
        "i",
        "c",
        "specifier",
        "i",
        "pad",
        "c",
        "format",
        "formats",
        "c",
        "c",
        "format",
        "date",
        "pad",
        "c",
        "j",
        "i",
        "specifier",
        "j",
        "i",
        "specifier",
        "newDate",
        "newYear",
        "parseSpecifier",
        "d",
        "specifier",
        "i",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "utcDate",
        "newYear",
        "d",
        "newDate",
        "newYear",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "day$$1",
        "d",
        "d",
        "day$$1",
        "d",
        "d",
        "d",
        "d",
        "d",
        "utcDate",
        "d",
        "newDate",
        "d",
        "d",
        "specifier",
        "j",
        "specifier",
        "i",
        "n",
        "j",
        "m",
        "c",
        "specifier",
        "i",
        "c",
        "c",
        "specifier",
        "i",
        "parse",
        "parses",
        "c",
        "pads",
        "specifier",
        "i",
        "c",
        "parse",
        "j",
        "parse",
        "d",
        "j",
        "c",
        "j",
        "j",
        "d",
        "i",
        "periodRe",
        "i",
        "n",
        "d",
        "periodLookup",
        "n",
        "i",
        "n",
        "d",
        "i",
        "shortWeekdayRe",
        "i",
        "n",
        "d",
        "shortWeekdayLookup",
        "n",
        "i",
        "n",
        "d",
        "i",
        "weekdayRe",
        "i",
        "n",
        "d",
        "weekdayLookup",
        "n",
        "i",
        "n",
        "d",
        "i",
        "shortMonthRe",
        "i",
        "n",
        "d",
        "shortMonthLookup",
        "n",
        "i",
        "n",
        "d",
        "i",
        "monthRe",
        "i",
        "n",
        "d",
        "monthLookup",
        "n",
        "i",
        "n",
        "d",
        "i",
        "parseSpecifier",
        "d",
        "locale_dateTime",
        "i",
        "d",
        "i",
        "parseSpecifier",
        "d",
        "locale_date",
        "i",
        "d",
        "i",
        "parseSpecifier",
        "d",
        "locale_time",
        "i",
        "d",
        "locale_shortWeekdays",
        "d",
        "d",
        "locale_weekdays",
        "d",
        "d",
        "locale_shortMonths",
        "d",
        "d",
        "locale_months",
        "d",
        "d",
        "locale_periods",
        "d",
        "d",
        "locale_shortWeekdays",
        "d",
        "d",
        "locale_weekdays",
        "d",
        "d",
        "locale_shortMonths",
        "d",
        "d",
        "locale_months",
        "d",
        "d",
        "locale_periods",
        "d",
        "specifier",
        "newFormat",
        "specifier",
        "formats",
        "f",
        "specifier",
        "f",
        "specifier",
        "newParse",
        "specifier",
        "localDate",
        "p",
        "specifier",
        "p",
        "specifier",
        "newFormat",
        "specifier",
        "utcFormats",
        "f",
        "specifier",
        "f",
        "specifier",
        "newParse",
        "specifier",
        "utcDate",
        "p",
        "specifier",
        "p",
        "value",
        "fill",
        "width",
        "value",
        "sign",
        "value",
        "value",
        "sign",
        "length",
        "width",
        "width",
        "length",
        "fill",
        "s",
        "s",
        "requoteRe",
        "names",
        "names",
        "requote",
        "names",
        "names",
        "i",
        "n",
        "names",
        "i",
        "i",
        "d",
        "i",
        "numberRe",
        "i",
        "i",
        "n",
        "d",
        "n",
        "i",
        "n",
        "d",
        "i",
        "numberRe",
        "i",
        "n",
        "d",
        "n",
        "i",
        "n",
        "d",
        "i",
        "numberRe",
        "i",
        "n",
        "d",
        "n",
        "i",
        "n",
        "d",
        "i",
        "numberRe",
        "i",
        "i",
        "n",
        "d",
        "n",
        "i",
        "n",
        "d",
        "i",
        "numberRe",
        "i",
        "i",
        "n",
        "d",
        "n",
        "n",
        "i",
        "n",
        "d",
        "i",
        "i",
        "i",
        "n",
        "d",
        "n",
        "n",
        "n",
        "i",
        "n",
        "d",
        "i",
        "numberRe",
        "i",
        "i",
        "n",
        "d",
        "n",
        "i",
        "n",
        "d",
        "i",
        "numberRe",
        "i",
        "i",
        "n",
        "d",
        "n",
        "i",
        "n",
        "d",
        "i",
        "numberRe",
        "i",
        "i",
        "n",
        "d",
        "d",
        "n",
        "i",
        "n",
        "d",
        "i",
        "numberRe",
        "i",
        "i",
        "n",
        "d",
        "n",
        "i",
        "n",
        "d",
        "i",
        "numberRe",
        "i",
        "i",
        "n",
        "d",
        "n",
        "i",
        "n",
        "d",
        "i",
        "numberRe",
        "i",
        "i",
        "n",
        "d",
        "n",
        "i",
        "n",
        "d",
        "i",
        "numberRe",
        "i",
        "i",
        "n",
        "d",
        "n",
        "i",
        "n",
        "d",
        "i",
        "percentRe",
        "i",
        "i",
        "n",
        "i",
        "n",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "day",
        "year",
        "d",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "sunday",
        "year",
        "d",
        "d",
        "p",
        "d",
        "d",
        "d",
        "p",
        "pad",
        "monday",
        "year",
        "d",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "d",
        "z",
        "z",
        "pad",
        "z",
        "pad",
        "z",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "utcDay",
        "utcYear",
        "d",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "utcSunday",
        "utcYear",
        "d",
        "d",
        "p",
        "d",
        "d",
        "d",
        "p",
        "pad",
        "utcMonday",
        "utcYear",
        "d",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "d",
        "p",
        "pad",
        "d",
        "p",
        "defaultLocale",
        "definition",
        "locale$1",
        "formatLocale",
        "definition",
        "timeFormat",
        "locale$1",
        "timeParse",
        "locale$1",
        "utcFormat",
        "locale$1",
        "utcParse",
        "locale$1",
        "locale$1",
        "date",
        "date",
        "formatIsoNative",
        "utcFormat",
        "isoSpecifier",
        "isNaN",
        "date",
        "date",
        "parseIsoNative",
        "utcParse",
        "isoSpecifier",
        "dom",
        "data",
        "dom",
        "citeTags",
        "el",
        "el",
        "key",
        "key",
        "citationKeys",
        "key",
        "citations",
        "key",
        "citations",
        "key",
        "key",
        "data",
        "key",
        "data",
        "citations",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "timeFormat",
        "n",
        "n",
        "n",
        "n",
        "data",
        "RFC",
        "data",
        "data",
        "data",
        "data",
        "months",
        "data",
        "data",
        "data",
        "data",
        "zeroPad",
        "data",
        "data",
        "zeroPad",
        "data",
        "data",
        "RFC",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "author",
        "author",
        "author",
        "data",
        "data",
        "data",
        "data",
        "data",
        "matchHtmlRegExp",
        "match",
        "index",
        "match",
        "index",
        "index",
        "index",
        "escape",
        "escape",
        "escape",
        "escape",
        "escape",
        "lastIndex",
        "index",
        "html",
        "lastIndex",
        "index",
        "lastIndex",
        "index",
        "html",
        "escape",
        "lastIndex",
        "index",
        "html",
        "lastIndex",
        "index",
        "html",
        "dom",
        "data",
        "dom",
        "html",
        "appendHtml",
        "head",
        "html",
        "name",
        "content",
        "force",
        "content",
        "force",
        "appendHead",
        "name",
        "index$1",
        "content",
        "appendHead",
        "favicon",
        "data",
        "data",
        "appendHead",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "a",
        "appendHtml",
        "head",
        "a",
        "a",
        "data",
        "appendHead",
        "meta",
        "data",
        "meta",
        "data",
        "meta",
        "data",
        "meta",
        "data",
        "data",
        "meta",
        "data",
        "data",
        "meta",
        "journal",
        "journal",
        "meta",
        "journal",
        "meta",
        "journal",
        "meta",
        "journal",
        "meta",
        "data",
        "n",
        "n",
        "n",
        "n",
        "meta",
        "data",
        "data",
        "data",
        "meta",
        "data",
        "data",
        "data",
        "data",
        "a",
        "meta",
        "a",
        "a",
        "meta",
        "a",
        "data",
        "data",
        "key",
        "data",
        "key",
        "d",
        "key",
        "meta",
        "citation_meta_content",
        "data",
        "key",
        "el",
        "html",
        "el",
        "html",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "content",
        "firsts",
        "last",
        "content",
        "arxiv_id_search",
        "arxiv_id_search",
        "arxiv_id_search",
        "arxiv_id_search",
        "arxiv_id_search",
        "arxiv_id_search",
        "content",
        "arxiv_id_search",
        "content",
        "content",
        "content",
        "content",
        "content",
        "dom",
        "data",
        "dom",
        "banner",
        "html$1",
        "dom",
        "b",
        "banner",
        "b",
        "banner",
        "banner",
        "createCommonjsModule",
        "exports",
        "defineMustache",
        "factory",
        "exports",
        "exports",
        "factory",
        "exports",
        "factory",
        "factory",
        "commonjsGlobal",
        "mustacheFactory",
        "mustache",
        "isArrayPolyfill",
        "objectToString",
        "obj",
        "isArray",
        "obj",
        "obj",
        "obj",
        "propName",
        "obj",
        "obj",
        "propName",
        "obj",
        "re",
        "regExpTest",
        "re",
        "testRegExp",
        "nonSpaceRe",
        "fromEntityMap",
        "s",
        "entityMap",
        "s",
        "template",
        "tags",
        "template",
        "hasTag",
        "nonSpace",
        "spaces",
        "tokens",
        "spaces",
        "spaces",
        "hasTag",
        "nonSpace",
        "tagsToCompile",
        "tagsToCompile",
        "tagsToCompile",
        "tagsToCompile",
        "spaceRe",
        "isArray",
        "tagsToCompile",
        "tagsToCompile",
        "tagsToCompile",
        "openingTagRe",
        "escapeRegExp",
        "tagsToCompile",
        "closingTagRe",
        "escapeRegExp",
        "tagsToCompile",
        "closingCurlyRe",
        "escapeRegExp",
        "tagsToCompile",
        "compileTags",
        "tags",
        "mustache",
        "Scanner",
        "template",
        "scanner",
        "start",
        "scanner",
        "value",
        "scanner",
        "openingTagRe",
        "value",
        "value",
        "i",
        "valueLength",
        "i",
        "chr",
        "value",
        "i",
        "isWhitespace",
        "chr",
        "spaces",
        "tokens",
        "nonSpace",
        "tokens",
        "chr",
        "start",
        "start",
        "start",
        "chr",
        "stripSpace",
        "scanner",
        "openingTagRe",
        "hasTag",
        "scanner",
        "tagRe",
        "scanner",
        "whiteRe",
        "value",
        "scanner",
        "equalsRe",
        "scanner",
        "equalsRe",
        "scanner",
        "closingTagRe",
        "value",
        "scanner",
        "closingCurlyRe",
        "scanner",
        "curlyRe",
        "scanner",
        "closingTagRe",
        "value",
        "scanner",
        "closingTagRe",
        "scanner",
        "closingTagRe",
        "scanner",
        "token",
        "value",
        "start",
        "scanner",
        "tokens",
        "token",
        "sections",
        "token",
        "openSection",
        "sections",
        "openSection",
        "value",
        "start",
        "openSection",
        "value",
        "openSection",
        "start",
        "nonSpace",
        "compileTags",
        "value",
        "openSection",
        "sections",
        "openSection",
        "openSection",
        "scanner",
        "nestTokens",
        "squashTokens",
        "tokens",
        "tokens",
        "tokens",
        "i",
        "numTokens",
        "i",
        "token",
        "tokens",
        "i",
        "token",
        "token",
        "lastToken",
        "lastToken",
        "lastToken",
        "token",
        "lastToken",
        "token",
        "squashedTokens",
        "token",
        "lastToken",
        "token",
        "squashedTokens",
        "tokens",
        "tokens",
        "i",
        "numTokens",
        "i",
        "token",
        "tokens",
        "i",
        "token",
        "collector",
        "token",
        "sections",
        "token",
        "collector",
        "token",
        "section",
        "sections",
        "section",
        "token",
        "collector",
        "sections",
        "sections",
        "sections",
        "nestedTokens",
        "collector",
        "token",
        "nestedTokens",
        "Scanner",
        "eos",
        "Scanner",
        "scan",
        "re",
        "re",
        "match",
        "match",
        "match",
        "Scanner",
        "scanUntil",
        "re",
        "re",
        "index",
        "match",
        "match",
        "match",
        "index",
        "index",
        "match",
        "match",
        "view",
        "parentContext",
        "view",
        "parentContext",
        "Context",
        "push",
        "view",
        "Context",
        "view",
        "Context",
        "lookup",
        "name",
        "cache",
        "name",
        "value",
        "cache",
        "name",
        "context",
        "name",
        "value",
        "context",
        "names",
        "name",
        "index",
        "value",
        "index",
        "names",
        "index",
        "names",
        "lookupHit",
        "hasProperty",
        "value",
        "names",
        "index",
        "value",
        "value",
        "names",
        "index",
        "value",
        "context",
        "name",
        "lookupHit",
        "hasProperty",
        "context",
        "name",
        "lookupHit",
        "context",
        "context",
        "cache",
        "name",
        "value",
        "isFunction",
        "value",
        "value",
        "value",
        "value",
        "Writer",
        "clearCache",
        "Writer",
        "parse",
        "template",
        "tags",
        "cache",
        "template",
        "tokens",
        "tokens",
        "cache",
        "template",
        "parseTemplate",
        "template",
        "tags",
        "tokens",
        "Writer",
        "render",
        "template",
        "view",
        "partials",
        "template",
        "view",
        "Context",
        "view",
        "Context",
        "view",
        "tokens",
        "context",
        "partials",
        "template",
        "Writer",
        "renderTokens",
        "tokens",
        "context",
        "partials",
        "originalTemplate",
        "tokens",
        "i",
        "numTokens",
        "i",
        "value",
        "token",
        "tokens",
        "i",
        "symbol",
        "token",
        "symbol",
        "value",
        "this$1",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "symbol",
        "value",
        "this$1",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "symbol",
        "value",
        "this$1",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "symbol",
        "value",
        "this$1",
        "token",
        "context",
        "symbol",
        "value",
        "this$1",
        "token",
        "context",
        "symbol",
        "value",
        "this$1",
        "token",
        "value",
        "buffer",
        "value",
        "buffer",
        "Writer",
        "renderSection",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "context",
        "token",
        "template",
        "template",
        "context",
        "partials",
        "value",
        "isArray",
        "value",
        "value",
        "j",
        "valueLength",
        "j",
        "buffer",
        "this$1",
        "token",
        "context",
        "value",
        "j",
        "partials",
        "originalTemplate",
        "value",
        "value",
        "value",
        "buffer",
        "token",
        "context",
        "value",
        "partials",
        "originalTemplate",
        "isFunction",
        "value",
        "originalTemplate",
        "value",
        "value",
        "context",
        "originalTemplate",
        "token",
        "token",
        "subRender",
        "value",
        "buffer",
        "value",
        "buffer",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "buffer",
        "Writer",
        "renderInverted",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "context",
        "token",
        "value",
        "isArray",
        "value",
        "value",
        "token",
        "context",
        "partials",
        "originalTemplate",
        "Writer",
        "renderPartial",
        "token",
        "context",
        "partials",
        "partials",
        "isFunction",
        "partials",
        "partials",
        "token",
        "partials",
        "token",
        "value",
        "value",
        "context",
        "partials",
        "value",
        "Writer",
        "unescapedValue",
        "token",
        "context",
        "context",
        "token",
        "value",
        "value",
        "Writer",
        "escapedValue",
        "token",
        "context",
        "context",
        "token",
        "value",
        "mustache",
        "value",
        "Writer",
        "rawValue",
        "token",
        "token",
        "mustache",
        "mustache",
        "mustache",
        "Writer",
        "mustache",
        "clearCache",
        "defaultWriter",
        "mustache",
        "parse",
        "template",
        "tags",
        "defaultWriter",
        "template",
        "tags",
        "mustache",
        "render",
        "template",
        "view",
        "partials",
        "template",
        "typeStr",
        "template",
        "defaultWriter",
        "template",
        "view",
        "partials",
        "mustache",
        "to_html",
        "template",
        "view",
        "partials",
        "send",
        "mustache",
        "template",
        "view",
        "partials",
        "isFunction",
        "send",
        "send",
        "result",
        "result",
        "mustache",
        "escapeHtml",
        "mustache",
        "Scanner",
        "mustache",
        "Context",
        "mustache",
        "Writer",
        "mustache",
        "dom",
        "data",
        "dom",
        "el",
        "el",
        "html$2",
        "mustache",
        "template",
        "data",
        "dom",
        "data",
        "dom",
        "el",
        "el",
        "el",
        "templateHTML",
        "dom",
        "newHTML",
        "newHTML",
        "dom",
        "newHTML",
        "newHTML",
        "el",
        "div",
        "userHTML",
        "newHTML",
        "dom",
        "data",
        "dom",
        "el",
        "newHTML",
        "data",
        "data",
        "newHTML",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "el",
        "el",
        "existingHTML",
        "newHTML",
        "dom",
        "data",
        "dom",
        "style",
        "css",
        "dom",
        "style",
        "data",
        "dom",
        "div",
        "div",
        "nodeFromString",
        "dom",
        "hover_boxes_container",
        "appendHoverDiv",
        "content",
        "hover_n",
        "hover_n",
        "id",
        "content",
        "nodeFromString",
        "hover_boxes_container",
        "div",
        "id",
        "dom",
        "citeTags",
        "el",
        "n",
        "el",
        "key",
        "key",
        "inline_cite_short",
        "keys",
        "keys",
        "key",
        "n",
        "n",
        "cite_hover_str",
        "cite_hover_str",
        "hover_cite",
        "data",
        "key",
        "appendCiteHoverDiv",
        "cite_hover_str",
        "el",
        "orig_string",
        "orig_string",
        "el",
        "n",
        "ref_id",
        "orig_string",
        "cite_string",
        "dom",
        "bibEl",
        "dom",
        "citations",
        "key",
        "dom",
        "el",
        "bibliography_cite",
        "data",
        "key",
        "ol",
        "el",
        "bibEl",
        "ol",
        "keys",
        "key",
        "key",
        "data",
        "data",
        "key",
        "n",
        "keys",
        "cite_string",
        "keys",
        "key",
        "key",
        "data",
        "data",
        "key",
        "ent",
        "names",
        "names",
        "name",
        "name",
        "ent",
        "names",
        "names",
        "year",
        "names",
        "names",
        "names",
        "year",
        "names",
        "names",
        "year",
        "keys",
        "cite_string",
        "ent",
        "template",
        "sep",
        "finalSep",
        "ent",
        "names",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "firsts",
        "initials",
        "firsts",
        "s",
        "s",
        "initials",
        "initials",
        "template",
        "firsts",
        "last",
        "initials",
        "names",
        "name_strings",
        "names",
        "sep",
        "finalSep",
        "sep",
        "name_strings",
        "names",
        "name_strings",
        "ent",
        "ent",
        "ent",
        "ent",
        "ent",
        "ent",
        "issue",
        "issue",
        "issue",
        "cite",
        "ent",
        "issue",
        "ent",
        "cite",
        "ent",
        "cite",
        "cite",
        "ent",
        "cite",
        "ent",
        "cite",
        "cite",
        "cite",
        "cite",
        "ent",
        "ent",
        "ent",
        "url",
        "arxiv_match",
        "url",
        "arxiv_match",
        "url",
        "url",
        "url",
        "label",
        "ent",
        "new_line",
        "ent",
        "new_line",
        "ent",
        "ent",
        "ent",
        "fancy",
        "ent",
        "ent",
        "cite",
        "link_string",
        "ent",
        "cite",
        "author_string",
        "ent",
        "ent",
        "ent",
        "cite",
        "ent",
        "ent",
        "cite",
        "cite",
        "venue_string",
        "ent",
        "cite",
        "doi_string",
        "ent",
        "cite",
        "ent",
        "ent",
        "cite",
        "ent",
        "cite",
        "link_string",
        "ent",
        "cite",
        "author_string",
        "ent",
        "venue_string",
        "ent",
        "ent",
        "doi_string",
        "ent",
        "a_str",
        "v_str",
        "ent",
        "cite",
        "a_str",
        "v_str",
        "cite",
        "a_str",
        "v_str",
        "cite",
        "ent",
        "ent",
        "ent",
        "names",
        "names",
        "name",
        "name",
        "ent",
        "url",
        "uris",
        "names",
        "title",
        "dom",
        "data",
        "dom",
        "div",
        "div",
        "nodeFromString",
        "dom",
        "hover_boxes_container",
        "appendHoverDiv",
        "content",
        "hover_n",
        "hover_n",
        "id",
        "content",
        "nodeFromString",
        "hover_boxes_container",
        "div",
        "id",
        "dom",
        "fnTags",
        "el",
        "n",
        "el",
        "appendFootnoteHoverDiv",
        "content",
        "fnContent",
        "content",
        "n",
        "n",
        "n",
        "content",
        "el",
        "key",
        "ref_id",
        "n",
        "dom",
        "fnList",
        "dom",
        "fnContent",
        "content",
        "dom",
        "el",
        "content",
        "ol",
        "el",
        "fnList",
        "ol",
        "message",
        "token",
        "message",
        "token",
        "token",
        "token",
        "token",
        "token",
        "start",
        "token",
        "end",
        "token",
        "start",
        "input",
        "error",
        "error",
        "start",
        "input",
        "start",
        "end",
        "start",
        "left",
        "input",
        "start",
        "start",
        "left",
        "input",
        "start",
        "end",
        "input",
        "right",
        "input",
        "end",
        "end",
        "right",
        "input",
        "end",
        "error",
        "left",
        "underlined",
        "right",
        "error",
        "ParseError$1",
        "start",
        "ParseError$1",
        "option",
        "defaultValue",
        "option",
        "defaultValue",
        "option",
        "options",
        "options",
        "options",
        "get",
        "options",
        "get",
        "options",
        "get",
        "options",
        "options",
        "cjkRegex$1",
        "hangulRegex",
        "unicodeRegexes",
        "ptPerEm",
        "xi8",
        "xi9",
        "xi10",
        "xi11",
        "xi12",
        "xi13",
        "ptPerEm",
        "doubleRuleSep",
        "character",
        "style",
        "character",
        "character",
        "extraCharacterMap",
        "ch",
        "extraCharacterMap",
        "character",
        "cjkRegex",
        "character",
        "ch",
        "metricMap",
        "style",
        "ch",
        "metrics",
        "metrics",
        "metrics",
        "metrics",
        "metrics",
        "metrics",
        "metrics$1",
        "sigmas$1",
        "getCharacterMetrics",
        "fontMetrics$1",
        "key",
        "sigmas",
        "sigmas",
        "key",
        "i$1",
        "i$1",
        "i$1",
        "metrics",
        "i$1",
        "key",
        "sigmas",
        "key",
        "i$1",
        "i$1",
        "i$1",
        "i$1",
        "metrics",
        "i$1",
        "sigmas",
        "i$1",
        "sigmas",
        "i$1",
        "id",
        "size",
        "multiplier",
        "cramped",
        "id",
        "size",
        "cramped",
        "multiplier",
        "metrics",
        "size",
        "size",
        "Style$2",
        "styles$1",
        "sup",
        "Style$2",
        "styles$1",
        "sub",
        "Style$2",
        "styles$1",
        "fracNum",
        "Style$2",
        "styles$1",
        "fracDen",
        "Style$2",
        "styles$1",
        "cramp",
        "Style$2",
        "sizeNames",
        "Style$2",
        "resetNames",
        "Style$2",
        "Style$2",
        "D",
        "Style$2",
        "Dc",
        "Style$2",
        "T",
        "Style$2",
        "Tc",
        "Style$2",
        "S",
        "Style$2",
        "Sc",
        "Style$2",
        "SS",
        "Style$2",
        "SSc",
        "S",
        "Sc",
        "S",
        "Sc",
        "SS",
        "SSc",
        "SS",
        "SSc",
        "Sc",
        "Sc",
        "Sc",
        "Sc",
        "SSc",
        "SSc",
        "SSc",
        "SSc",
        "T",
        "Tc",
        "S",
        "Sc",
        "SS",
        "SSc",
        "SS",
        "SSc",
        "Tc",
        "Tc",
        "Sc",
        "Sc",
        "SSc",
        "SSc",
        "SSc",
        "SSc",
        "Dc",
        "Dc",
        "Tc",
        "Tc",
        "Sc",
        "Sc",
        "SSc",
        "SSc",
        "styles$1",
        "D",
        "styles$1",
        "T",
        "styles$1",
        "S",
        "styles$1",
        "SS",
        "elem",
        "nativeIndexOf",
        "nativeIndexOf",
        "elem",
        "i",
        "l",
        "i",
        "i",
        "elem",
        "i",
        "elem",
        "indexOf",
        "elem",
        "setting",
        "defaultIfUndefined",
        "setting",
        "defaultIfUndefined",
        "setting",
        "uppercase",
        "match",
        "ESCAPE_LOOKUP",
        "match",
        "text",
        "text",
        "ESCAPE_REGEX",
        "escaper",
        "testNode",
        "setTextContent",
        "node",
        "text",
        "node",
        "text",
        "setTextContent",
        "node",
        "text",
        "node",
        "text",
        "node",
        "setTextContent",
        "node",
        "contains",
        "deflt",
        "escape$1",
        "hyphenate",
        "indexOf",
        "setTextContent",
        "clearNode",
        "classes",
        "classes",
        "classes",
        "classes",
        "i",
        "i",
        "classes",
        "i",
        "classes",
        "i",
        "classes",
        "classes",
        "children",
        "options",
        "classes",
        "children",
        "options",
        "options",
        "options",
        "options",
        "span",
        "attribute",
        "value",
        "attribute",
        "value",
        "span",
        "sibling",
        "span",
        "span",
        "createClass",
        "style",
        "this$1",
        "style",
        "span",
        "style",
        "this$1",
        "style",
        "attr",
        "this$1",
        "attr",
        "span",
        "attr",
        "this$1",
        "attr",
        "i",
        "i",
        "span",
        "this$1",
        "i",
        "span",
        "span",
        "markup",
        "markup",
        "utils$3",
        "createClass",
        "markup",
        "style",
        "this$1",
        "style",
        "styles",
        "utils$3",
        "style",
        "this$1",
        "style",
        "styles",
        "markup",
        "utils$3",
        "styles",
        "attr",
        "this$1",
        "attr",
        "markup",
        "attr",
        "markup",
        "utils$3",
        "this$1",
        "attr",
        "markup",
        "markup",
        "i",
        "i",
        "markup",
        "this$1",
        "i",
        "markup",
        "markup",
        "children",
        "children",
        "documentFragment",
        "i",
        "i",
        "frag",
        "this$1",
        "i",
        "frag",
        "documentFragment",
        "i",
        "i",
        "markup",
        "this$1",
        "i",
        "markup",
        "value",
        "height",
        "depth",
        "italic",
        "skew",
        "classes",
        "style",
        "value",
        "height",
        "depth",
        "italic",
        "skew",
        "classes",
        "style",
        "unicodeRegexes$2",
        "value",
        "unicodeRegexes$2",
        "value",
        "iCombinations",
        "symbolNode",
        "sibling",
        "sibling",
        "sibling",
        "symbolNode",
        "createClass",
        "createClass",
        "sibling",
        "sibling",
        "sibling",
        "style",
        "this$1",
        "style",
        "this$1",
        "style",
        "sibling",
        "style",
        "style",
        "sibling",
        "sibling",
        "style",
        "this$1",
        "style",
        "sibling",
        "style",
        "sibling",
        "sibling",
        "sibling",
        "sibling",
        "symbolNode",
        "span",
        "span",
        "span",
        "span",
        "span",
        "createClass",
        "style",
        "this$1",
        "style",
        "span",
        "span",
        "span",
        "style",
        "this$1",
        "style",
        "span",
        "span",
        "node",
        "span",
        "node",
        "symbolNode",
        "needsSpan",
        "markup",
        "markup",
        "utils$3",
        "createClass",
        "markup",
        "styles",
        "style",
        "this$1",
        "style",
        "styles",
        "utils$3",
        "style",
        "this$1",
        "style",
        "styles",
        "needsSpan",
        "markup",
        "utils$3",
        "styles",
        "utils$3",
        "needsSpan",
        "markup",
        "markup",
        "escaped",
        "markup",
        "markup",
        "escaped",
        "span",
        "documentFragment",
        "symbolNode",
        "createCommonjsModule",
        "mode",
        "font",
        "group",
        "replace",
        "name",
        "mode",
        "name",
        "font",
        "group",
        "replace",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "punct",
        "defineSymbol",
        "math",
        "main",
        "punct",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "open",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "open",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "open",
        "defineSymbol",
        "math",
        "ams",
        "close",
        "defineSymbol",
        "math",
        "ams",
        "open",
        "defineSymbol",
        "math",
        "ams",
        "close",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "open",
        "defineSymbol",
        "math",
        "main",
        "open",
        "defineSymbol",
        "math",
        "main",
        "open",
        "defineSymbol",
        "math",
        "main",
        "open",
        "defineSymbol",
        "math",
        "main",
        "open",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "ams",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "spacing",
        "defineSymbol",
        "math",
        "main",
        "spacing",
        "defineSymbol",
        "math",
        "main",
        "spacing",
        "defineSymbol",
        "math",
        "main",
        "spacing",
        "defineSymbol",
        "math",
        "main",
        "spacing",
        "defineSymbol",
        "math",
        "main",
        "spacing",
        "defineSymbol",
        "math",
        "main",
        "spacing",
        "defineSymbol",
        "math",
        "main",
        "spacing",
        "defineSymbol",
        "math",
        "main",
        "spacing",
        "defineSymbol",
        "math",
        "main",
        "spacing",
        "defineSymbol",
        "math",
        "main",
        "punct",
        "defineSymbol",
        "math",
        "main",
        "punct",
        "defineSymbol",
        "math",
        "main",
        "punct",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "ams",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "bin",
        "defineSymbol",
        "math",
        "main",
        "open",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "open",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "open",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "open",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "open",
        "defineSymbol",
        "math",
        "main",
        "close",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "main",
        "rel",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "math",
        "math",
        "op",
        "defineSymbol",
        "text",
        "main",
        "inner",
        "defineSymbol",
        "math",
        "main",
        "inner",
        "defineSymbol",
        "text",
        "main",
        "inner",
        "defineSymbol",
        "math",
        "main",
        "inner",
        "defineSymbol",
        "math",
        "main",
        "inner",
        "defineSymbol",
        "math",
        "main",
        "inner",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "accent",
        "defineSymbol",
        "math",
        "main",
        "accent",
        "defineSymbol",
        "math",
        "main",
        "accent",
        "defineSymbol",
        "math",
        "main",
        "accent",
        "defineSymbol",
        "math",
        "main",
        "accent",
        "defineSymbol",
        "math",
        "main",
        "accent",
        "defineSymbol",
        "math",
        "main",
        "accent",
        "defineSymbol",
        "math",
        "main",
        "accent",
        "defineSymbol",
        "math",
        "main",
        "accent",
        "defineSymbol",
        "math",
        "main",
        "accent",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "defineSymbol",
        "math",
        "ams",
        "textord",
        "defineSymbol",
        "text",
        "ams",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "spacing",
        "defineSymbol",
        "text",
        "main",
        "spacing",
        "defineSymbol",
        "text",
        "main",
        "spacing",
        "i",
        "i",
        "mathTextSymbols",
        "i",
        "ch",
        "mathTextSymbols",
        "i",
        "defineSymbol",
        "math",
        "main",
        "textord",
        "ch",
        "ch",
        "i",
        "i",
        "textSymbols",
        "i",
        "ch",
        "textSymbols",
        "i",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "ch",
        "ch",
        "i",
        "i",
        "letters",
        "i",
        "ch",
        "letters",
        "i",
        "defineSymbol",
        "math",
        "main",
        "mathord",
        "ch",
        "ch",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "ch",
        "ch",
        "i",
        "i",
        "i",
        "ch",
        "i",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "ch",
        "ch",
        "i",
        "i",
        "i",
        "ch",
        "i",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "ch",
        "ch",
        "i",
        "i",
        "i",
        "ch",
        "i",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "ch",
        "ch",
        "i",
        "i",
        "i",
        "ch",
        "i",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "ch",
        "ch",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "defineSymbol",
        "text",
        "main",
        "textord",
        "value",
        "fontFamily",
        "mode",
        "options",
        "classes",
        "symbols",
        "mode",
        "value",
        "symbols",
        "mode",
        "value",
        "value",
        "symbols",
        "mode",
        "value",
        "fontMetrics$3",
        "value",
        "fontFamily",
        "metrics",
        "metrics",
        "mode",
        "italic",
        "symbolNode",
        "domTree$1",
        "value",
        "metrics",
        "metrics",
        "italic",
        "metrics",
        "classes",
        "value",
        "fontFamily",
        "symbolNode",
        "domTree$1",
        "value",
        "classes",
        "options",
        "options",
        "symbolNode",
        "options",
        "symbolNode",
        "options",
        "symbolNode",
        "value",
        "mode",
        "options",
        "classes",
        "value",
        "symbols",
        "mode",
        "value",
        "makeSymbol",
        "value",
        "mode",
        "options",
        "classes",
        "makeSymbol",
        "value",
        "mode",
        "options",
        "classes",
        "value",
        "mode",
        "options",
        "classes",
        "mathit",
        "value",
        "mode",
        "options",
        "classes",
        "makeSymbol",
        "value",
        "mode",
        "options",
        "classes",
        "value",
        "mode",
        "options",
        "classes",
        "value",
        "utils$2",
        "mainitLetters",
        "value",
        "utils$2",
        "greekCapitals",
        "value",
        "makeSymbol",
        "value",
        "mode",
        "options",
        "classes",
        "makeSymbol",
        "value",
        "mode",
        "options",
        "classes",
        "group",
        "options",
        "group",
        "group",
        "symbols",
        "mode",
        "value",
        "symbols",
        "mode",
        "value",
        "value",
        "symbols",
        "mode",
        "value",
        "options",
        "font",
        "font",
        "utils$2",
        "mainitLetters",
        "value",
        "mathit",
        "value",
        "mode",
        "options",
        "classes",
        "fontMap",
        "font",
        "fontMetrics$3",
        "value",
        "fontName",
        "makeSymbol",
        "value",
        "fontName",
        "mode",
        "options",
        "classes",
        "font",
        "mathDefault",
        "value",
        "mode",
        "options",
        "classes",
        "mathDefault",
        "value",
        "mode",
        "options",
        "classes",
        "elem",
        "elem",
        "i",
        "elem",
        "i",
        "elem",
        "i",
        "height",
        "height",
        "elem",
        "i",
        "elem",
        "i",
        "depth",
        "depth",
        "elem",
        "i",
        "elem",
        "i",
        "maxFontSize",
        "maxFontSize",
        "elem",
        "i",
        "elem",
        "height",
        "elem",
        "depth",
        "elem",
        "maxFontSize",
        "classes",
        "children",
        "options",
        "domTree$1",
        "classes",
        "children",
        "options",
        "sizeElementFromChildren",
        "span",
        "span",
        "span",
        "children",
        "span",
        "children",
        "span",
        "sizeElementFromChildren",
        "span",
        "children",
        "domTree$1",
        "children",
        "sizeElementFromChildren",
        "fragment",
        "fragment",
        "options",
        "fontSize",
        "makeSpan$2",
        "domTree$1",
        "fontSizeInner",
        "fontSize",
        "options",
        "makeSpan$2",
        "options",
        "fontSizeInner",
        "fontSizer",
        "children",
        "positionType",
        "positionData",
        "options",
        "positionType",
        "children",
        "oldChildren",
        "depth",
        "oldChildren",
        "oldChildren",
        "currPos",
        "depth",
        "i",
        "i",
        "oldChildren",
        "i",
        "oldChildren",
        "i",
        "currPos",
        "oldChildren",
        "i",
        "diff",
        "oldChildren",
        "i",
        "oldChildren",
        "i",
        "currPos",
        "currPos",
        "diff",
        "children",
        "size",
        "children",
        "oldChildren",
        "i",
        "positionType",
        "i",
        "i",
        "children",
        "i",
        "children",
        "i",
        "bottom",
        "children",
        "i",
        "bottom",
        "children",
        "i",
        "children",
        "i",
        "depth",
        "bottom",
        "positionType",
        "depth",
        "positionData",
        "positionType",
        "depth",
        "children",
        "positionData",
        "positionType",
        "depth",
        "children",
        "depth",
        "i",
        "i",
        "children",
        "i",
        "children",
        "i",
        "maxFontSize",
        "maxFontSize",
        "children",
        "i",
        "makeFontSizer",
        "options",
        "maxFontSize",
        "currPos",
        "depth",
        "i",
        "i",
        "children",
        "i",
        "children",
        "i",
        "currPos",
        "children",
        "i",
        "children",
        "i",
        "child",
        "currPos",
        "currPos",
        "child",
        "child",
        "makeSpan$2",
        "fontSizer",
        "child",
        "childWrap",
        "shift",
        "childWrap",
        "shift",
        "childWrap",
        "shift",
        "realChildren",
        "childWrap",
        "makeSpan$2",
        "fontSizer",
        "domTree$1",
        "realChildren",
        "baselineFix",
        "makeSpan$2",
        "realChildren",
        "vlist",
        "currPos",
        "vlist",
        "vlist",
        "depth",
        "vlist",
        "vlist",
        "fontMap",
        "makeSymbol",
        "mathsym",
        "makeSpan$2",
        "makeFragment",
        "makeVList",
        "makeOrd",
        "prependChildren",
        "sizingMultiplier",
        "spacingFunctions",
        "buildCommon$4",
        "symbol",
        "font",
        "symbols$3",
        "symbol",
        "symbols$3",
        "symbol",
        "fontMetrics$4",
        "symbols$3",
        "symbol",
        "font",
        "fontMetrics$4",
        "symbol",
        "font",
        "value",
        "size",
        "mode",
        "options",
        "buildCommon$4",
        "value",
        "size",
        "mode",
        "options",
        "delim",
        "toStyle",
        "options",
        "classes",
        "classes",
        "classes",
        "makeSpan$3",
        "classes",
        "options",
        "toStyle",
        "delim",
        "options",
        "toStyle",
        "options",
        "span",
        "multiplier",
        "span",
        "multiplier",
        "span",
        "toStyle",
        "span",
        "delim",
        "style",
        "center",
        "options",
        "mode",
        "classes",
        "buildCommon$4",
        "delim",
        "mode",
        "options",
        "styleWrap",
        "text",
        "style",
        "options",
        "classes",
        "center",
        "options",
        "style",
        "options",
        "span",
        "shift",
        "span",
        "shift",
        "span",
        "shift",
        "span",
        "delim",
        "size",
        "center",
        "options",
        "mode",
        "classes",
        "mathrmSize",
        "delim",
        "size",
        "mode",
        "options",
        "styleWrap",
        "makeSpan$3",
        "size",
        "inner",
        "options",
        "Style$4",
        "options",
        "classes",
        "center",
        "options",
        "options",
        "span",
        "shift",
        "span",
        "shift",
        "span",
        "shift",
        "span",
        "symbol",
        "font",
        "mode",
        "font",
        "sizeClass",
        "font",
        "sizeClass",
        "makeSpan$3",
        "sizeClass",
        "makeSpan$3",
        "buildCommon$4",
        "symbol",
        "font",
        "mode",
        "inner",
        "delim",
        "heightTotal",
        "center",
        "options",
        "mode",
        "classes",
        "top",
        "repeat",
        "bottom",
        "delim",
        "middle",
        "delim",
        "repeat",
        "bottom",
        "delim",
        "repeat",
        "bottom",
        "delim",
        "top",
        "repeat",
        "delim",
        "top",
        "repeat",
        "delim",
        "top",
        "repeat",
        "bottom",
        "delim",
        "top",
        "repeat",
        "bottom",
        "delim",
        "delim",
        "top",
        "repeat",
        "bottom",
        "font",
        "delim",
        "delim",
        "top",
        "repeat",
        "bottom",
        "font",
        "delim",
        "repeat",
        "top",
        "bottom",
        "font",
        "delim",
        "top",
        "repeat",
        "bottom",
        "font",
        "delim",
        "repeat",
        "top",
        "bottom",
        "font",
        "delim",
        "top",
        "repeat",
        "bottom",
        "font",
        "delim",
        "top",
        "repeat",
        "bottom",
        "font",
        "delim",
        "top",
        "repeat",
        "bottom",
        "font",
        "delim",
        "delim",
        "top",
        "middle",
        "bottom",
        "repeat",
        "font",
        "delim",
        "delim",
        "top",
        "middle",
        "bottom",
        "repeat",
        "font",
        "delim",
        "top",
        "bottom",
        "repeat",
        "font",
        "delim",
        "top",
        "bottom",
        "repeat",
        "font",
        "delim",
        "top",
        "bottom",
        "repeat",
        "font",
        "delim",
        "top",
        "bottom",
        "repeat",
        "font",
        "delim",
        "top",
        "bottom",
        "repeat",
        "font",
        "getMetrics",
        "top",
        "font",
        "topMetrics",
        "topMetrics",
        "getMetrics",
        "repeat",
        "font",
        "repeatMetrics",
        "repeatMetrics",
        "getMetrics",
        "bottom",
        "font",
        "bottomMetrics",
        "bottomMetrics",
        "middle",
        "getMetrics",
        "middle",
        "font",
        "middleHeightTotal",
        "middleMetrics",
        "middleMetrics",
        "middleFactor",
        "topHeightTotal",
        "bottomHeightTotal",
        "middleHeightTotal",
        "heightTotal",
        "minHeight",
        "middleFactor",
        "repeatHeightTotal",
        "minHeight",
        "repeatCount",
        "middleFactor",
        "repeatHeightTotal",
        "options",
        "center",
        "axisHeight",
        "options",
        "realHeightTotal",
        "axisHeight",
        "inners",
        "makeInner",
        "bottom",
        "font",
        "mode",
        "middle",
        "i",
        "i",
        "repeatCount",
        "i",
        "inners",
        "makeInner",
        "repeat",
        "font",
        "mode",
        "i",
        "i",
        "repeatCount",
        "i",
        "inners",
        "makeInner",
        "repeat",
        "font",
        "mode",
        "inners",
        "makeInner",
        "middle",
        "font",
        "mode",
        "i",
        "i",
        "repeatCount",
        "i",
        "inners",
        "makeInner",
        "repeat",
        "font",
        "mode",
        "inners",
        "makeInner",
        "top",
        "font",
        "mode",
        "buildCommon$4",
        "inners",
        "depth",
        "options",
        "styleWrap",
        "makeSpan$3",
        "inner",
        "options",
        "Style$4",
        "options",
        "classes",
        "delim",
        "size",
        "options",
        "mode",
        "classes",
        "delim",
        "delim",
        "delim",
        "delim",
        "delim",
        "delim",
        "utils$6",
        "stackLargeDelimiters",
        "delim",
        "utils$6",
        "stackNeverDelimiters",
        "delim",
        "makeLargeDelim",
        "delim",
        "size",
        "options",
        "mode",
        "classes",
        "utils$6",
        "stackAlwaysDelimiters",
        "delim",
        "makeStackedDelim",
        "delim",
        "sizeToMaxHeight",
        "size",
        "options",
        "mode",
        "classes",
        "ParseError$3",
        "delim",
        "Style$4",
        "Style$4",
        "Style$4",
        "Style$4",
        "Style$4",
        "Style$4",
        "Style$4",
        "Style$4",
        "Style$4",
        "delim",
        "height",
        "sequence",
        "options",
        "options",
        "i",
        "sequence",
        "i",
        "sequence",
        "i",
        "getMetrics",
        "delim",
        "delimTypeToFont",
        "sequence",
        "i",
        "metrics",
        "metrics",
        "sequence",
        "i",
        "heightDepth",
        "sequence",
        "i",
        "heightDepth",
        "height",
        "sequence",
        "i",
        "sequence",
        "sequence",
        "delim",
        "height",
        "center",
        "options",
        "mode",
        "classes",
        "delim",
        "delim",
        "delim",
        "delim",
        "delim",
        "delim",
        "utils$6",
        "stackNeverDelimiters",
        "delim",
        "sequence",
        "stackNeverDelimiterSequence",
        "utils$6",
        "stackLargeDelimiters",
        "delim",
        "sequence",
        "stackLargeDelimiterSequence",
        "sequence",
        "stackAlwaysDelimiterSequence",
        "traverseSequence",
        "delim",
        "height",
        "sequence",
        "options",
        "delimType",
        "makeSmallDelim",
        "delim",
        "delimType",
        "center",
        "options",
        "mode",
        "classes",
        "delimType",
        "makeLargeDelim",
        "delim",
        "delimType",
        "center",
        "options",
        "mode",
        "classes",
        "delimType",
        "makeStackedDelim",
        "delim",
        "height",
        "center",
        "options",
        "mode",
        "classes",
        "delim",
        "height",
        "depth",
        "options",
        "mode",
        "classes",
        "options",
        "options",
        "fontMetrics$4",
        "height",
        "axisHeight",
        "depth",
        "axisHeight",
        "maxDistFromAxis",
        "delimiterFactor",
        "maxDistFromAxis",
        "delimiterExtend",
        "makeCustomSizedDelim",
        "delim",
        "totalHeight",
        "options",
        "mode",
        "classes",
        "makeSizedDelim",
        "makeCustomSizedDelim",
        "makeLeftRightDelim",
        "buildCommon$1",
        "node",
        "node",
        "domTree",
        "node",
        "node",
        "node",
        "node",
        "node",
        "isRealGroup",
        "node",
        "utils$1",
        "node",
        "isRealGroup",
        "node",
        "isRealGroup",
        "node",
        "utils$1",
        "node",
        "isRealGroup",
        "expression",
        "options",
        "isRealGroup",
        "i",
        "expression",
        "i",
        "expression",
        "i",
        "buildGroup",
        "group",
        "options",
        "output",
        "domTree",
        "groups",
        "output",
        "groups",
        "output",
        "i",
        "i",
        "groups",
        "i",
        "isSpace",
        "groups",
        "i",
        "spaces",
        "spaces",
        "spaces",
        "groups",
        "i",
        "groups",
        "i",
        "i",
        "spaces",
        "groups",
        "i",
        "domTree",
        "groups",
        "i",
        "makeSpan$1",
        "groups",
        "i",
        "groups",
        "i",
        "buildCommon$1",
        "groups",
        "i",
        "spaces",
        "spaces",
        "spaces",
        "groups",
        "spaces",
        "i",
        "i",
        "groups",
        "i",
        "isBin",
        "groups",
        "i",
        "isBinLeftCanceller",
        "groups",
        "i",
        "isRealGroup",
        "isBinRightCanceller",
        "groups",
        "i",
        "isRealGroup",
        "groups",
        "i",
        "groups",
        "node",
        "node",
        "domTree",
        "node",
        "getTypeOfDomTree",
        "node",
        "node",
        "utils$1",
        "node",
        "node",
        "group",
        "options",
        "group",
        "group",
        "group",
        "options",
        "Style$1",
        "group",
        "group",
        "isCharacterBox",
        "group",
        "group",
        "group",
        "group",
        "group",
        "getBaseElem",
        "group",
        "group",
        "group",
        "group",
        "getBaseElem",
        "group",
        "group",
        "group",
        "getBaseElem",
        "group",
        "group",
        "group",
        "getBaseElem",
        "group",
        "baseElem",
        "baseElem",
        "baseElem",
        "baseElem",
        "baseElem",
        "baseElem",
        "baseElem",
        "baseElem",
        "options",
        "classes",
        "makeSpan$1",
        "classes",
        "options",
        "options",
        "Style$1",
        "groupTypes",
        "group",
        "options",
        "buildCommon$1",
        "group",
        "options",
        "groupTypes",
        "group",
        "options",
        "buildCommon$1",
        "group",
        "options",
        "groupTypes",
        "group",
        "options",
        "buildCommon$1",
        "group",
        "group",
        "options",
        "groupTypes",
        "group",
        "options",
        "buildCommon$1",
        "group",
        "group",
        "options",
        "groupTypes",
        "group",
        "options",
        "buildCommon$1",
        "group",
        "group",
        "options",
        "groupTypes",
        "group",
        "options",
        "buildCommon$1",
        "group",
        "group",
        "options",
        "groupTypes",
        "group",
        "options",
        "buildCommon$1",
        "group",
        "group",
        "options",
        "groupTypes",
        "group",
        "options",
        "buildCommon$1",
        "group",
        "group",
        "options",
        "groupTypes",
        "group",
        "options",
        "makeSpan$1",
        "options",
        "buildExpression",
        "group",
        "options",
        "options",
        "groupTypes",
        "group",
        "options",
        "options",
        "group",
        "buildExpression",
        "group",
        "newOptions",
        "i",
        "inner",
        "i",
        "inner",
        "i",
        "inner",
        "i",
        "inner",
        "i",
        "i",
        "makeSpan$1",
        "newOptions",
        "inner",
        "newOptions",
        "groupTypes",
        "group",
        "options",
        "buildExpression",
        "group",
        "options",
        "group",
        "buildCommon$1",
        "elements",
        "groupTypes",
        "group",
        "options",
        "shouldHandleSupSub",
        "group",
        "options",
        "groupTypes",
        "group",
        "group",
        "options",
        "buildGroup",
        "group",
        "options",
        "options",
        "group",
        "newOptions",
        "options",
        "style",
        "sup",
        "buildGroup",
        "group",
        "newOptions",
        "supmid",
        "makeSpan$1",
        "style",
        "style",
        "sup",
        "newOptions",
        "group",
        "newOptions",
        "options",
        "style",
        "sub",
        "buildGroup",
        "group",
        "newOptions",
        "submid",
        "makeSpan$1",
        "style",
        "style",
        "sub",
        "newOptions",
        "isCharacterBox",
        "group",
        "supShift",
        "subShift",
        "supShift",
        "style",
        "subShift",
        "style",
        "style",
        "Style$1",
        "minSupShift",
        "style",
        "style",
        "minSupShift",
        "style",
        "minSupShift",
        "style",
        "Style$1",
        "style",
        "fontMetrics",
        "multiplier",
        "group",
        "subShift",
        "subShift",
        "style",
        "sub",
        "style",
        "supsub",
        "buildCommon$1",
        "submid",
        "subShift",
        "options",
        "supsub",
        "scriptspace",
        "domTree",
        "supsub",
        "group",
        "supShift",
        "supShift",
        "minSupShift",
        "sup",
        "style",
        "supsub",
        "buildCommon$1",
        "supmid",
        "supShift",
        "options",
        "supsub",
        "scriptspace",
        "supShift",
        "supShift",
        "minSupShift",
        "sup",
        "style",
        "subShift",
        "subShift",
        "style",
        "fontMetrics",
        "supShift",
        "sup",
        "sub",
        "subShift",
        "ruleWidth",
        "subShift",
        "ruleWidth",
        "supShift",
        "sup",
        "sub",
        "style",
        "supShift",
        "sup",
        "psi",
        "supShift",
        "psi",
        "subShift",
        "psi",
        "supsub",
        "buildCommon$1",
        "submid",
        "subShift",
        "supmid",
        "supShift",
        "options",
        "domTree",
        "supsub",
        "supsub",
        "scriptspace",
        "supsub",
        "scriptspace",
        "getTypeOfDomTree",
        "makeSpan$1",
        "mclass",
        "makeSpan$1",
        "supsub",
        "options",
        "groupTypes",
        "group",
        "options",
        "options",
        "group",
        "style",
        "Style$1",
        "group",
        "style",
        "Style$1",
        "style",
        "style",
        "newOptions",
        "options",
        "nstyle",
        "buildGroup",
        "group",
        "newOptions",
        "makeSpan$1",
        "style",
        "nstyle",
        "numer",
        "newOptions",
        "newOptions",
        "options",
        "dstyle",
        "buildGroup",
        "group",
        "newOptions",
        "makeSpan$1",
        "style",
        "dstyle",
        "denom",
        "newOptions",
        "group",
        "ruleWidth",
        "fontMetrics",
        "options",
        "ruleWidth",
        "style",
        "Style$1",
        "numShift",
        "style",
        "ruleWidth",
        "clearance",
        "ruleWidth",
        "clearance",
        "fontMetrics",
        "denomShift",
        "style",
        "ruleWidth",
        "numShift",
        "style",
        "clearance",
        "ruleWidth",
        "numShift",
        "style",
        "clearance",
        "fontMetrics",
        "denomShift",
        "style",
        "ruleWidth",
        "numShift",
        "numer",
        "denom",
        "denomShift",
        "candidateClearance",
        "clearance",
        "numShift",
        "clearance",
        "candidateClearance",
        "denomShift",
        "clearance",
        "candidateClearance",
        "frac",
        "buildCommon$1",
        "denomreset",
        "denomShift",
        "numerreset",
        "numShift",
        "options",
        "style",
        "numShift",
        "numer",
        "axisHeight",
        "ruleWidth",
        "clearance",
        "numShift",
        "clearance",
        "numShift",
        "numer",
        "axisHeight",
        "ruleWidth",
        "axisHeight",
        "ruleWidth",
        "denom",
        "denomShift",
        "clearance",
        "denomShift",
        "clearance",
        "axisHeight",
        "ruleWidth",
        "denom",
        "denomShift",
        "makeSpan$1",
        "options",
        "Style$1",
        "mid",
        "ruleWidth",
        "axisHeight",
        "ruleWidth",
        "frac",
        "buildCommon$1",
        "denomreset",
        "denomShift",
        "mid",
        "midShift",
        "numerreset",
        "numShift",
        "options",
        "frac",
        "style",
        "options",
        "frac",
        "style",
        "options",
        "style",
        "Style$1",
        "delimSize",
        "style",
        "delimSize",
        "style",
        "group",
        "leftDelim",
        "makeNullDelimiter",
        "options",
        "leftDelim",
        "delimiter",
        "group",
        "delimSize",
        "options",
        "style",
        "group",
        "group",
        "rightDelim",
        "makeNullDelimiter",
        "options",
        "rightDelim",
        "delimiter",
        "group",
        "delimSize",
        "options",
        "style",
        "group",
        "makeSpan$1",
        "options",
        "style",
        "leftDelim",
        "makeSpan$1",
        "frac",
        "rightDelim",
        "options",
        "sizeValue",
        "style",
        "sizeValue",
        "sizeValue",
        "x",
        "style",
        "sizeValue",
        "x",
        "x",
        "groupTypes",
        "group",
        "options",
        "group",
        "nr",
        "options",
        "fontMetrics",
        "pt",
        "pt",
        "utils$1",
        "group",
        "arraystretch",
        "baselineskip",
        "arrayskip",
        "arrayskip",
        "r",
        "r",
        "group",
        "r",
        "group",
        "r",
        "nc",
        "inrow",
        "nc",
        "inrow",
        "inrow",
        "c",
        "c",
        "inrow",
        "c",
        "buildGroup",
        "inrow",
        "c",
        "options",
        "depth",
        "elt",
        "depth",
        "elt",
        "height",
        "elt",
        "height",
        "elt",
        "outrow",
        "c",
        "elt",
        "group",
        "r",
        "gap",
        "calculateSize",
        "group",
        "r",
        "style",
        "gap",
        "gap",
        "arstrutDepth",
        "depth",
        "gap",
        "depth",
        "gap",
        "gap",
        "outrow",
        "height",
        "outrow",
        "depth",
        "totalHeight",
        "height",
        "outrow",
        "totalHeight",
        "totalHeight",
        "depth",
        "gap",
        "body",
        "r",
        "outrow",
        "totalHeight",
        "style",
        "group",
        "c",
        "colDescrNum",
        "c",
        "nc",
        "colDescrNum",
        "colDescriptions",
        "c",
        "colDescrNum",
        "colDescriptions",
        "colDescrNum",
        "colDescr",
        "firstSeparator",
        "colSep",
        "makeSpan$1",
        "colSep",
        "fontMetrics",
        "cols",
        "colSep",
        "colDescr",
        "makeSpan$1",
        "separator",
        "totalHeight",
        "separator",
        "totalHeight",
        "offset",
        "cols",
        "separator",
        "ParseError$2",
        "colDescr",
        "colDescrNum",
        "colDescr",
        "colDescriptions",
        "colDescrNum",
        "firstSeparator",
        "c",
        "nc",
        "c",
        "group",
        "sepwidth",
        "utils$1",
        "colDescr",
        "arraycolsep",
        "sepwidth",
        "colSep",
        "makeSpan$1",
        "colSep",
        "sepwidth",
        "cols",
        "colSep",
        "r",
        "r",
        "nr",
        "r",
        "body",
        "r",
        "row",
        "c",
        "elem",
        "row",
        "offset",
        "elem",
        "row",
        "elem",
        "row",
        "col",
        "elem",
        "shift",
        "col",
        "buildCommon$1",
        "col",
        "options",
        "col",
        "makeSpan$1",
        "colDescr",
        "col",
        "cols",
        "col",
        "c",
        "nc",
        "group",
        "sepwidth",
        "utils$1",
        "colDescr",
        "arraycolsep",
        "sepwidth",
        "colSep",
        "makeSpan$1",
        "colSep",
        "sepwidth",
        "cols",
        "colSep",
        "body",
        "makeSpan$1",
        "cols",
        "makeSpan$1",
        "body",
        "options",
        "groupTypes",
        "group",
        "options",
        "group",
        "group",
        "group",
        "group",
        "group",
        "buildCommon$1",
        "group",
        "options",
        "makeSpan$1",
        "buildCommon$1",
        "group",
        "group",
        "options",
        "options",
        "makeSpan$1",
        "buildCommon$1",
        "group",
        "options",
        "groupTypes",
        "group",
        "options",
        "makeSpan$1",
        "buildGroup",
        "group",
        "options",
        "makeSpan$1",
        "makeSpan$1",
        "options",
        "inner",
        "fix",
        "options",
        "groupTypes",
        "group",
        "options",
        "makeSpan$1",
        "buildGroup",
        "group",
        "options",
        "makeSpan$1",
        "makeSpan$1",
        "options",
        "inner",
        "fix",
        "options",
        "groupTypes",
        "group",
        "options",
        "group",
        "supGroup",
        "group",
        "subGroup",
        "group",
        "group",
        "group",
        "hasLimits",
        "options",
        "style",
        "Style$1",
        "group",
        "utils$1",
        "noSuccessor",
        "group",
        "large",
        "group",
        "large",
        "buildCommon$1",
        "group",
        "fontName",
        "options",
        "large",
        "baseShift",
        "style",
        "style",
        "slant",
        "group",
        "buildExpression",
        "group",
        "options",
        "makeSpan$1",
        "inner",
        "options",
        "i",
        "group",
        "i",
        "output",
        "buildCommon$1",
        "group",
        "i",
        "group",
        "makeSpan$1",
        "output",
        "options",
        "hasLimits",
        "makeSpan$1",
        "supGroup",
        "newOptions",
        "options",
        "style",
        "buildGroup",
        "supGroup",
        "newOptions",
        "supmid",
        "makeSpan$1",
        "style",
        "style",
        "sup",
        "newOptions",
        "supKern",
        "fontMetrics",
        "fontMetrics",
        "sup",
        "subGroup",
        "newOptions",
        "options",
        "style",
        "buildGroup",
        "subGroup",
        "newOptions",
        "submid",
        "makeSpan$1",
        "style",
        "style",
        "sub",
        "newOptions",
        "subKern",
        "fontMetrics",
        "fontMetrics",
        "sub",
        "supGroup",
        "top",
        "baseShift",
        "finalGroup",
        "buildCommon$1",
        "fontMetrics",
        "submid",
        "subKern",
        "top",
        "options",
        "finalGroup",
        "slant",
        "subGroup",
        "bottom",
        "baseShift",
        "finalGroup",
        "buildCommon$1",
        "supKern",
        "supmid",
        "fontMetrics",
        "bottom",
        "options",
        "finalGroup",
        "slant",
        "supGroup",
        "subGroup",
        "bottom",
        "fontMetrics",
        "submid",
        "submid",
        "subKern",
        "baseShift",
        "finalGroup",
        "buildCommon$1",
        "fontMetrics",
        "submid",
        "subKern",
        "supKern",
        "supmid",
        "fontMetrics",
        "bottom",
        "options",
        "finalGroup",
        "slant",
        "finalGroup",
        "slant",
        "makeSpan$1",
        "finalGroup",
        "options",
        "group",
        "baseShift",
        "groupTypes",
        "group",
        "options",
        "group",
        "options",
        "inner",
        "makeSpan$1",
        "options",
        "inner",
        "makeSpan$1",
        "options",
        "options",
        "Style$1",
        "inner",
        "makeSpan$1",
        "options",
        "group",
        "inner",
        "makeSpan$1",
        "options",
        "inner",
        "makeSpan$1",
        "options",
        "group",
        "group",
        "inner",
        "buildCommon$1",
        "group",
        "group",
        "buildCommon$1",
        "group",
        "buildCommon$1",
        "group",
        "buildCommon$1",
        "group",
        "group",
        "inner",
        "makeSpan$1",
        "modInner",
        "options",
        "inner",
        "makeSpan$1",
        "options",
        "options",
        "inner",
        "makeSpan$1",
        "options",
        "inner",
        "modInner",
        "inner",
        "makeSpan$1",
        "options",
        "group",
        "inner",
        "buildExpression",
        "group",
        "options",
        "group",
        "group",
        "inner",
        "buildCommon$1",
        "group",
        "buildCommon$1",
        "inner",
        "groupTypes",
        "group",
        "options",
        "makeSpan$1",
        "buildCommon$1",
        "group",
        "options",
        "makeSpan$1",
        "buildCommon$1",
        "group",
        "options",
        "a",
        "a",
        "a",
        "a",
        "makeSpan$1",
        "buildCommon$1",
        "group",
        "options",
        "makeSpan$1",
        "buildCommon$1",
        "group",
        "options",
        "e",
        "e",
        "e",
        "e",
        "makeSpan$1",
        "buildCommon$1",
        "group",
        "options",
        "makeSpan$1",
        "k",
        "a",
        "t",
        "e",
        "x",
        "options",
        "groupTypes",
        "group",
        "options",
        "options",
        "buildGroup",
        "group",
        "options",
        "style",
        "fontMetrics",
        "style",
        "makeSpan$1",
        "style",
        "Style$1",
        "line",
        "ruleWidth",
        "line",
        "buildCommon$1",
        "innerGroup",
        "ruleWidth",
        "line",
        "ruleWidth",
        "options",
        "makeSpan$1",
        "vlist",
        "options",
        "groupTypes",
        "group",
        "options",
        "options",
        "buildGroup",
        "group",
        "options",
        "fontMetrics",
        "style",
        "makeSpan$1",
        "style",
        "Style$1",
        "line",
        "ruleWidth",
        "line",
        "buildCommon$1",
        "ruleWidth",
        "line",
        "ruleWidth",
        "innerGroup",
        "innerGroup",
        "options",
        "makeSpan$1",
        "vlist",
        "options",
        "groupTypes",
        "group",
        "options",
        "options",
        "buildGroup",
        "group",
        "options",
        "style",
        "fontMetrics",
        "style",
        "makeSpan$1",
        "style",
        "Style$1",
        "options",
        "line",
        "ruleWidth",
        "line",
        "style",
        "Style$1",
        "phi",
        "style",
        "ruleWidth",
        "phi",
        "inner",
        "inner",
        "style",
        "innerHeight",
        "lineClearance",
        "ruleWidth",
        "makeSpan$1",
        "delimiter",
        "minDelimiterHeight",
        "options",
        "group",
        "options",
        "delim",
        "delim",
        "ruleWidth",
        "delimDepth",
        "inner",
        "inner",
        "lineClearance",
        "lineClearance",
        "lineClearance",
        "delimDepth",
        "inner",
        "inner",
        "inner",
        "lineClearance",
        "ruleWidth",
        "delim",
        "delim",
        "delimShift",
        "delim",
        "delimShift",
        "delim",
        "delimShift",
        "inner",
        "inner",
        "body",
        "makeSpan$1",
        "body",
        "buildCommon$1",
        "inner",
        "lineClearance",
        "line",
        "ruleWidth",
        "options",
        "group",
        "makeSpan$1",
        "delim",
        "body",
        "options",
        "options",
        "Style$1",
        "buildGroup",
        "group",
        "newOptions",
        "makeSpan$1",
        "style",
        "Style$1",
        "root",
        "newOptions",
        "delim",
        "body",
        "delim",
        "body",
        "innerRootHeight",
        "innerRootDepth",
        "buildCommon$1",
        "rootWrap",
        "toShift",
        "options",
        "makeSpan$1",
        "rootVList",
        "makeSpan$1",
        "rootVListWrap",
        "delim",
        "body",
        "options",
        "groupTypes",
        "group",
        "options",
        "buildExpression",
        "group",
        "options",
        "group",
        "options",
        "buildCommon$1",
        "group",
        "fontSize",
        "fontSize",
        "style",
        "i",
        "inner",
        "i",
        "utils$1",
        "inner",
        "i",
        "pos",
        "inner",
        "i",
        "options",
        "group",
        "style",
        "inner",
        "i",
        "fontSize",
        "inner",
        "i",
        "pos",
        "group",
        "inner",
        "i",
        "pos",
        "options",
        "buildCommon$1",
        "inner",
        "groupTypes",
        "group",
        "options",
        "Style$1",
        "Style$1",
        "Style$1",
        "Style$1",
        "styleMap",
        "group",
        "options",
        "newStyle",
        "buildExpression",
        "group",
        "newOptions",
        "i",
        "inner",
        "i",
        "utils$1",
        "inner",
        "i",
        "newStyle",
        "pos",
        "inner",
        "i",
        "options",
        "newStyle",
        "inner",
        "i",
        "pos",
        "options",
        "buildCommon$1",
        "inner",
        "groupTypes",
        "group",
        "options",
        "group",
        "buildGroup",
        "group",
        "options",
        "font",
        "groupTypes",
        "group",
        "options",
        "group",
        "delim",
        "makeSpan$1",
        "group",
        "delimiter",
        "delim",
        "group",
        "options",
        "group",
        "group",
        "groupTypes",
        "group",
        "options",
        "buildExpression",
        "group",
        "options",
        "i",
        "inner",
        "i",
        "inner",
        "i",
        "hadMiddle",
        "innerHeight",
        "inner",
        "i",
        "innerHeight",
        "innerDepth",
        "inner",
        "i",
        "innerDepth",
        "options",
        "innerHeight",
        "style",
        "innerDepth",
        "style",
        "group",
        "leftDelim",
        "makeNullDelimiter",
        "options",
        "leftDelim",
        "delimiter",
        "group",
        "innerHeight",
        "innerDepth",
        "options",
        "group",
        "inner",
        "leftDelim",
        "hadMiddle",
        "i",
        "i",
        "inner",
        "i",
        "inner",
        "i",
        "inner",
        "i",
        "delimiter",
        "inner",
        "i",
        "innerHeight",
        "innerDepth",
        "inner",
        "i",
        "group",
        "group",
        "rightDelim",
        "makeNullDelimiter",
        "options",
        "rightDelim",
        "delimiter",
        "group",
        "innerHeight",
        "innerDepth",
        "options",
        "group",
        "inner",
        "rightDelim",
        "makeSpan$1",
        "style",
        "inner",
        "options",
        "groupTypes",
        "group",
        "options",
        "group",
        "middleDelim",
        "makeNullDelimiter",
        "options",
        "middleDelim",
        "delimiter",
        "group",
        "options",
        "group",
        "middleDelim",
        "group",
        "options",
        "middleDelim",
        "groupTypes",
        "group",
        "options",
        "makeSpan$1",
        "options",
        "options",
        "group",
        "shift",
        "calculateSize",
        "group",
        "style",
        "calculateSize",
        "group",
        "style",
        "calculateSize",
        "group",
        "style",
        "shift",
        "style",
        "width",
        "style",
        "height",
        "style",
        "rule",
        "width",
        "rule",
        "height",
        "rule",
        "shift",
        "rule",
        "width",
        "rule",
        "height",
        "shift",
        "rule",
        "shift",
        "rule",
        "groupTypes",
        "group",
        "options",
        "makeSpan$1",
        "options",
        "options",
        "group",
        "dimension",
        "calculateSize",
        "group",
        "style",
        "dimension",
        "style",
        "rule",
        "dimension",
        "rule",
        "groupTypes",
        "group",
        "options",
        "group",
        "options",
        "group",
        "group",
        "supsub",
        "group",
        "supsub",
        "supsubGroup",
        "buildGroup",
        "supsub",
        "options",
        "buildGroup",
        "options",
        "style",
        "isCharacterBox",
        "getBaseElem",
        "buildGroup",
        "baseChar",
        "options",
        "style",
        "skew",
        "baseGroup",
        "skew",
        "body",
        "style",
        "buildCommon$1",
        "group",
        "options",
        "accent",
        "group",
        "makeSpan$1",
        "vecClass",
        "makeSpan$1",
        "accent",
        "accentBody",
        "buildCommon$1",
        "body",
        "clearance",
        "accentBody",
        "options",
        "accentBody",
        "skew",
        "makeSpan$1",
        "accentBody",
        "options",
        "supsubGroup",
        "supsubGroup",
        "accentWrap",
        "supsubGroup",
        "accentWrap",
        "supsubGroup",
        "supsubGroup",
        "supsubGroup",
        "accentWrap",
        "groupTypes",
        "group",
        "options",
        "buildExpression",
        "group",
        "options",
        "buildCommon$1",
        "elements",
        "groupTypes",
        "group",
        "options",
        "buildExpression",
        "group",
        "options",
        "makeSpan$1",
        "group",
        "elements",
        "options",
        "group",
        "options",
        "group",
        "makeSpan$1",
        "groupTypes",
        "group",
        "groupTypes",
        "group",
        "group",
        "options",
        "options",
        "options",
        "multiplier",
        "options",
        "options",
        "groupNode",
        "multiplier",
        "groupNode",
        "multiplier",
        "options",
        "options",
        "multiplier",
        "buildCommon$1",
        "options",
        "buildCommon$1",
        "options",
        "groupNode",
        "multiplier",
        "groupNode",
        "multiplier",
        "groupNode",
        "ParseError$2",
        "group",
        "tree",
        "options",
        "tree",
        "tree",
        "buildExpression",
        "tree",
        "options",
        "makeSpan$1",
        "options",
        "expression",
        "options",
        "makeSpan$1",
        "makeSpan$1",
        "topStrut",
        "body",
        "bottomStrut",
        "body",
        "body",
        "bottomStrut",
        "body",
        "makeSpan$1",
        "topStrut",
        "bottomStrut",
        "body",
        "htmlNode",
        "htmlNode",
        "children",
        "children",
        "MathNode",
        "name",
        "value",
        "name",
        "value",
        "MathNode",
        "attr",
        "this$1",
        "attr",
        "node",
        "attr",
        "this$1",
        "attr",
        "i",
        "i",
        "node",
        "this$1",
        "i",
        "node",
        "MathNode",
        "attr",
        "this$1",
        "attr",
        "markup",
        "attr",
        "markup",
        "utils$8",
        "this$1",
        "attr",
        "markup",
        "markup",
        "i",
        "i",
        "markup",
        "this$1",
        "i",
        "markup",
        "markup",
        "text",
        "text",
        "TextNode",
        "TextNode",
        "utils$8",
        "MathNode",
        "TextNode",
        "buildCommon$5",
        "buildCommon$5",
        "text",
        "mode",
        "symbols$4",
        "mode",
        "text",
        "symbols$4",
        "mode",
        "text",
        "text",
        "symbols$4",
        "mode",
        "text",
        "mathMLTree",
        "text",
        "group",
        "options",
        "options",
        "font",
        "group",
        "font",
        "group",
        "utils$7",
        "value",
        "symbols$4",
        "mode",
        "value",
        "symbols$4",
        "mode",
        "value",
        "value",
        "symbols$4",
        "mode",
        "value",
        "fontMap$1",
        "font",
        "fontMetrics$5",
        "value",
        "fontName",
        "fontMap$1",
        "options",
        "groupTypes$1",
        "group",
        "options",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "getVariant",
        "group",
        "options",
        "variant",
        "node",
        "variant",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "makeText",
        "group",
        "group",
        "getVariant",
        "group",
        "options",
        "group",
        "node",
        "mathMLTree",
        "text",
        "options",
        "node",
        "variant",
        "node",
        "mathMLTree",
        "text",
        "node",
        "variant",
        "node",
        "groupTypes$1",
        "group",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "node",
        "groupTypes$1",
        "group",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "node",
        "groupTypes$1",
        "group",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "node",
        "groupTypes$1",
        "group",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "node",
        "groupTypes$1",
        "group",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "node",
        "groupTypes$1",
        "group",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "node",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "buildExpression$1",
        "group",
        "options",
        "mathMLTree",
        "inner",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "buildExpression$1",
        "group",
        "options",
        "mathMLTree",
        "inner",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "buildExpression$1",
        "group",
        "options",
        "mathMLTree",
        "inner",
        "node",
        "group",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "buildGroup$1",
        "group",
        "options",
        "group",
        "children",
        "buildGroup$1",
        "group",
        "options",
        "group",
        "children",
        "buildGroup$1",
        "group",
        "options",
        "group",
        "nodeType",
        "group",
        "nodeType",
        "nodeType",
        "mathMLTree",
        "nodeType",
        "children",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "mathMLTree",
        "buildGroup$1",
        "group",
        "options",
        "buildGroup$1",
        "group",
        "options",
        "group",
        "node",
        "group",
        "group",
        "group",
        "mathMLTree",
        "mathMLTree",
        "group",
        "leftOp",
        "withDelims",
        "leftOp",
        "withDelims",
        "node",
        "group",
        "mathMLTree",
        "mathMLTree",
        "group",
        "rightOp",
        "withDelims",
        "rightOp",
        "mathMLTree",
        "withDelims",
        "outerNode",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "mathMLTree",
        "group",
        "row",
        "mathMLTree",
        "row",
        "cell",
        "mathMLTree",
        "buildGroup$1",
        "cell",
        "options",
        "groupTypes$1",
        "group",
        "options",
        "group",
        "node",
        "mathMLTree",
        "buildGroup$1",
        "group",
        "options",
        "buildGroup$1",
        "group",
        "options",
        "node",
        "mathMLTree",
        "buildGroup$1",
        "group",
        "options",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "buildExpression$1",
        "group",
        "options",
        "group",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "leftNode",
        "inner",
        "leftNode",
        "group",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "rightNode",
        "inner",
        "rightNode",
        "mathMLTree",
        "inner",
        "outerNode",
        "groupTypes$1",
        "group",
        "options",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "middleNode",
        "middleNode",
        "groupTypes$1",
        "group",
        "options",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "mathMLTree",
        "buildGroup$1",
        "group",
        "options",
        "accentNode",
        "node",
        "node",
        "groupTypes$1",
        "group",
        "group",
        "group",
        "group",
        "group",
        "node",
        "mathMLTree",
        "mathMLTree",
        "node",
        "mathMLTree",
        "node",
        "buildCommon$5",
        "group",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "group",
        "node",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "group",
        "node",
        "mathMLTree",
        "buildExpression$1",
        "group",
        "options",
        "node",
        "mathMLTree",
        "mathMLTree",
        "group",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "group",
        "group",
        "inner",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "inner",
        "mathMLTree",
        "makeText",
        "group",
        "group",
        "mathMLTree",
        "space",
        "inner",
        "space",
        "inner",
        "inner",
        "buildExpression$1",
        "group",
        "options",
        "group",
        "group",
        "inner",
        "mathMLTree",
        "makeText",
        "group",
        "mathMLTree",
        "inner",
        "groupTypes$1",
        "group",
        "mathMLTree",
        "mathMLTree",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "group",
        "buildGroup$1",
        "group",
        "options",
        "font",
        "groupTypes$1",
        "group",
        "group",
        "children",
        "makeText",
        "group",
        "group",
        "mathMLTree",
        "children",
        "group",
        "group",
        "node",
        "node",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "buildExpression$1",
        "group",
        "options",
        "mathMLTree",
        "inner",
        "styleAttributes",
        "group",
        "node",
        "attr",
        "node",
        "attr",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "buildExpression$1",
        "group",
        "options",
        "mathMLTree",
        "inner",
        "node",
        "buildCommon$5",
        "group",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "mathMLTree",
        "mathMLTree",
        "mathMLTree",
        "buildGroup$1",
        "group",
        "options",
        "node",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "mathMLTree",
        "mathMLTree",
        "mathMLTree",
        "buildGroup$1",
        "group",
        "options",
        "node",
        "node",
        "groupTypes$1",
        "group",
        "mathMLTree",
        "node",
        "groupTypes$1",
        "group",
        "mathMLTree",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "mathMLTree",
        "buildGroup$1",
        "group",
        "options",
        "node",
        "node",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "mathMLTree",
        "buildGroup$1",
        "group",
        "options",
        "node",
        "node",
        "groupTypes$1",
        "group",
        "options",
        "buildExpression$1",
        "group",
        "options",
        "mathMLTree",
        "inner",
        "groupTypes$1",
        "group",
        "options",
        "buildExpression$1",
        "group",
        "options",
        "mathMLTree",
        "inner",
        "expression",
        "options",
        "i",
        "expression",
        "i",
        "expression",
        "i",
        "groups",
        "buildGroup$1",
        "group",
        "options",
        "groups",
        "group",
        "options",
        "group",
        "mathMLTree",
        "groupTypes$1",
        "group",
        "groupTypes$1",
        "group",
        "group",
        "options",
        "ParseError$4",
        "group",
        "tree",
        "texExpression",
        "options",
        "buildExpression$1",
        "tree",
        "options",
        "mathMLTree",
        "expression",
        "mathMLTree",
        "mathMLTree",
        "texExpression",
        "annotation",
        "mathMLTree",
        "wrapper",
        "annotation",
        "mathMLTree",
        "semantics",
        "makeSpan$4",
        "math",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "Options$1",
        "extension",
        "key",
        "extension",
        "extension",
        "key",
        "data",
        "key",
        "extension",
        "key",
        "Options$1",
        "data",
        "Options$1",
        "style",
        "style",
        "Options$1",
        "size",
        "size",
        "Options$1",
        "color",
        "color",
        "Options$1",
        "Options$1",
        "font",
        "font",
        "Options$1",
        "Options$1",
        "colorMap",
        "buildCommon",
        "tree",
        "expression",
        "settings",
        "settings",
        "settings",
        "Settings$2",
        "Style",
        "settings",
        "startStyle",
        "Style",
        "Options",
        "startStyle",
        "buildMathML",
        "tree",
        "expression",
        "options",
        "buildHTML",
        "tree",
        "options",
        "makeSpan",
        "mathMLNode",
        "htmlNode",
        "settings",
        "makeSpan",
        "katexNode",
        "katexNode",
        "value",
        "mode",
        "firstToken",
        "lastToken",
        "value",
        "mode",
        "firstToken",
        "lastToken",
        "lastToken",
        "firstToken",
        "firstToken",
        "firstToken",
        "lastToken",
        "firstToken",
        "ParseNode$1",
        "createCommonjsModule",
        "parseData",
        "names",
        "props",
        "handler",
        "names",
        "names",
        "names",
        "props",
        "props",
        "props",
        "props",
        "props",
        "props",
        "props",
        "props",
        "props",
        "props",
        "handler",
        "i",
        "names",
        "i",
        "names",
        "i",
        "data",
        "arg",
        "arg",
        "arg",
        "arg",
        "defineFunction",
        "context",
        "args",
        "args",
        "args",
        "body",
        "index",
        "defineFunction",
        "context",
        "args",
        "args",
        "ordargument",
        "body",
        "textFunctionStyles",
        "context",
        "defineFunction",
        "context",
        "args",
        "args",
        "args",
        "color",
        "ordargument",
        "body",
        "defineFunction",
        "context",
        "args",
        "args",
        "body",
        "defineFunction",
        "context",
        "args",
        "args",
        "body",
        "defineFunction",
        "context",
        "args",
        "args",
        "args",
        "args",
        "shift",
        "shift",
        "width",
        "height",
        "defineFunction",
        "context",
        "args",
        "args",
        "defineFunction",
        "context",
        "defineFunction",
        "context",
        "args",
        "args",
        "ordargument",
        "body",
        "defineFunction",
        "context",
        "args",
        "args",
        "context",
        "ordargument",
        "body",
        "defineFunction",
        "context",
        "args",
        "args",
        "args",
        "ParseNode",
        "ordargument",
        "bottom",
        "bottom",
        "ParseNode",
        "bottomop",
        "top",
        "top",
        "supsub",
        "defineFunction",
        "context",
        "args",
        "defineFunction",
        "context",
        "args",
        "args",
        "context",
        "ordargument",
        "body",
        "defineFunction",
        "context",
        "args",
        "args",
        "context",
        "ordargument",
        "body",
        "defineFunction",
        "context",
        "context",
        "defineFunction",
        "context",
        "context",
        "defineFunction",
        "context",
        "context",
        "defineFunction",
        "context",
        "context",
        "defineFunction",
        "context",
        "args",
        "args",
        "ordargument",
        "body",
        "defineFunction",
        "context",
        "args",
        "args",
        "args",
        "context",
        "hasBarLine",
        "hasBarLine",
        "hasBarLine",
        "leftDelim",
        "rightDelim",
        "context",
        "size",
        "size",
        "numer",
        "denom",
        "hasBarLine",
        "leftDelim",
        "rightDelim",
        "size",
        "defineFunction",
        "context",
        "args",
        "args",
        "context",
        "body",
        "delim",
        "context",
        "utils",
        "delimiters",
        "delim",
        "delim",
        "ParseError",
        "delim",
        "context",
        "delim",
        "defineFunction",
        "context",
        "args",
        "checkDelimiter",
        "args",
        "context",
        "delimiterSizes",
        "context",
        "delimiterSizes",
        "context",
        "delim",
        "defineFunction",
        "context",
        "args",
        "checkDelimiter",
        "args",
        "context",
        "delim",
        "defineFunction",
        "context",
        "args",
        "checkDelimiter",
        "args",
        "context",
        "context",
        "ParseError",
        "delim",
        "delim",
        "defineFunction",
        "defineFunction",
        "defineFunction",
        "context",
        "args",
        "args",
        "context",
        "func",
        "fontAliases",
        "func",
        "fontAliases",
        "func",
        "func",
        "body",
        "defineFunction",
        "context",
        "args",
        "args",
        "context",
        "defineFunction",
        "context",
        "context",
        "replaceWith",
        "replaceWith",
        "replaceWith",
        "replaceWith",
        "context",
        "defineFunction",
        "context",
        "args",
        "args",
        "size",
        "defineFunction",
        "context",
        "args",
        "args",
        "nameGroup",
        "ParseError",
        "nameGroup",
        "i",
        "nameGroup",
        "i",
        "name",
        "nameGroup",
        "i",
        "name",
        "nameGroup",
        "createCommonjsModule",
        "parseData",
        "parser",
        "result",
        "row",
        "parser",
        "row",
        "ParseNode",
        "cell",
        "parser",
        "parser",
        "next",
        "parser",
        "next",
        "next",
        "next",
        "parser",
        "rowGaps",
        "cr",
        "row",
        "body",
        "row",
        "ParseError",
        "parser",
        "result",
        "body",
        "result",
        "rowGaps",
        "ParseNode",
        "result",
        "result",
        "parser",
        "names",
        "props",
        "handler",
        "names",
        "names",
        "names",
        "props",
        "props",
        "props",
        "props",
        "props",
        "props",
        "props",
        "handler",
        "i",
        "names",
        "i",
        "names",
        "i",
        "data",
        "defineEnvironment",
        "context",
        "args",
        "args",
        "colalign",
        "colalign",
        "colalign",
        "colalign",
        "colalign",
        "node",
        "node",
        "ca",
        "ca",
        "ca",
        "ParseError",
        "node",
        "node",
        "cols",
        "res",
        "parseArray",
        "context",
        "res",
        "res",
        "defineEnvironment",
        "context",
        "context",
        "res",
        "parseArray",
        "context",
        "res",
        "delimiters",
        "res",
        "ParseNode",
        "res",
        "delimiters",
        "delimiters",
        "context",
        "res",
        "defineEnvironment",
        "context",
        "Style",
        "res",
        "parseArray",
        "context",
        "res",
        "res",
        "ParseNode",
        "res",
        "context",
        "res",
        "defineEnvironment",
        "context",
        "res",
        "parseArray",
        "context",
        "res",
        "ParseNode",
        "context",
        "res",
        "row",
        "i",
        "i",
        "row",
        "i",
        "row",
        "i",
        "emptyGroup",
        "numCols",
        "row",
        "numCols",
        "row",
        "i",
        "numCols",
        "i",
        "i",
        "align",
        "i",
        "pregap",
        "res",
        "i",
        "align",
        "pregap",
        "res",
        "re",
        "re",
        "re",
        "re",
        "re",
        "re",
        "re",
        "source",
        "flags",
        "re",
        "re",
        "pos",
        "re",
        "re",
        "getRelocatable",
        "re",
        "reloc",
        "pos",
        "reloc",
        "match",
        "match",
        "match",
        "match",
        "match",
        "input",
        "input",
        "text",
        "start",
        "end",
        "lexer",
        "text",
        "start",
        "end",
        "lexer",
        "Token",
        "endToken",
        "text",
        "endToken",
        "Token",
        "text",
        "Token",
        "text",
        "endToken",
        "Lexer$1",
        "pos",
        "input",
        "Token",
        "pos",
        "pos",
        "matchAt",
        "tokenRegex",
        "input",
        "pos",
        "match",
        "ParseError$6",
        "input",
        "pos",
        "Token",
        "input",
        "pos",
        "pos",
        "pos",
        "match",
        "match",
        "Token",
        "text",
        "start",
        "end",
        "input",
        "macros",
        "Lexer",
        "input",
        "macros",
        "MacroExpander$1",
        "this$1",
        "this$1",
        "this$1",
        "this$1",
        "topToken",
        "name",
        "this$1",
        "name",
        "topToken",
        "this$1",
        "name",
        "expansion",
        "Lexer",
        "expansion",
        "expansion",
        "bodyLexer",
        "tok",
        "expansion",
        "tok",
        "tok",
        "bodyLexer",
        "expansion",
        "this$1",
        "name",
        "expansion",
        "this$1",
        "this$1",
        "expansion",
        "MacroExpander$1",
        "ignoreSpace",
        "ignoreSpace",
        "token",
        "this$1",
        "token",
        "token",
        "this$1",
        "token",
        "MacroExpander$1",
        "token",
        "token",
        "this$1",
        "this$1",
        "unicodeRegexes",
        "input",
        "settings",
        "MacroExpander",
        "input",
        "settings",
        "settings",
        "parseData",
        "result",
        "isFunction",
        "token",
        "result",
        "isFunction",
        "token",
        "Parser$1",
        "text",
        "consume",
        "text",
        "ParseError$5",
        "text",
        "consume",
        "Parser$1",
        "Parser$1",
        "newMode",
        "newMode",
        "Parser$1",
        "parse",
        "Parser$1",
        "expression",
        "Parser$1",
        "breakOnInfix",
        "breakOnTokenText",
        "this$1",
        "endOfExpression",
        "lex",
        "breakOnTokenText",
        "lex",
        "breakOnTokenText",
        "breakOnInfix",
        "functions",
        "lex",
        "functions",
        "lex",
        "this$1",
        "atom",
        "this$1",
        "lex",
        "this$1",
        "body",
        "errorNode",
        "body",
        "atom",
        "body",
        "Parser$1",
        "body",
        "i",
        "body",
        "i",
        "body",
        "i",
        "node",
        "overIndex",
        "ParseError$5",
        "node",
        "overIndex",
        "i",
        "funcName",
        "node",
        "overIndex",
        "body",
        "overIndex",
        "body",
        "overIndex",
        "numerBody",
        "numerBody",
        "numerNode",
        "numerBody",
        "numerNode",
        "ParseNode",
        "numerBody",
        "denomBody",
        "denomBody",
        "denomNode",
        "denomBody",
        "denomNode",
        "ParseNode",
        "denomBody",
        "funcName",
        "numerNode",
        "denomNode",
        "ParseNode",
        "value",
        "value",
        "body",
        "Parser$1",
        "name",
        "symbolToken",
        "group",
        "ParseError$5",
        "symbol",
        "symbolToken",
        "group",
        "functions",
        "group",
        "funcGreediness",
        "SUPSUB_GREEDINESS",
        "group",
        "ParseError$5",
        "group",
        "name",
        "symbolToken",
        "group",
        "Parser$1",
        "i",
        "text",
        "i",
        "textordArray",
        "ParseNode",
        "text",
        "i",
        "ParseNode",
        "textordArray",
        "ParseNode",
        "textNode",
        "colorNode",
        "Parser$1",
        "this$1",
        "lex",
        "lex",
        "ParseError$5",
        "lex",
        "lex",
        "limits",
        "this$1",
        "lex",
        "superscript",
        "ParseError$5",
        "lex",
        "superscript",
        "this$1",
        "lex",
        "subscript",
        "ParseError$5",
        "lex",
        "subscript",
        "this$1",
        "lex",
        "ParseNode",
        "this$1",
        "prime",
        "this$1",
        "primes",
        "prime",
        "this$1",
        "superscript",
        "ParseNode",
        "primes",
        "this$1",
        "superscript",
        "subscript",
        "ParseNode",
        "superscript",
        "subscript",
        "Parser$1",
        "start",
        "start",
        "func",
        "start",
        "body",
        "ParseNode",
        "body",
        "left",
        "right",
        "func",
        "start",
        "begin",
        "environments",
        "envName",
        "ParseError$5",
        "envName",
        "begin",
        "environments",
        "envName",
        "envName",
        "env",
        "envName",
        "args",
        "env",
        "context",
        "args",
        "end",
        "envName",
        "ParseError$5",
        "envName",
        "end",
        "endNameToken",
        "result",
        "end",
        "result",
        "utils$9",
        "sizeFuncs",
        "func",
        "body",
        "ParseNode",
        "utils$9",
        "sizeFuncs",
        "func",
        "body",
        "utils$9",
        "styleFuncs",
        "func",
        "body",
        "ParseNode",
        "func",
        "func",
        "body",
        "start",
        "Parser$1",
        "baseGroup",
        "baseGroup",
        "baseGroup",
        "baseGroup",
        "baseGroup",
        "baseGroup",
        "functions",
        "func",
        "funcData",
        "ParseError$5",
        "func",
        "baseGroup",
        "func",
        "funcData",
        "baseGroup",
        "func",
        "args",
        "args",
        "token",
        "ParseNode",
        "result",
        "result",
        "baseGroup",
        "Parser$1",
        "name",
        "args",
        "positions",
        "token",
        "name",
        "positions",
        "token",
        "functions",
        "name",
        "context",
        "args",
        "Parser$1",
        "func",
        "funcData",
        "funcData",
        "funcData",
        "totalArgs",
        "funcData",
        "i",
        "totalArgs",
        "i",
        "this$1",
        "funcData",
        "funcData",
        "i",
        "i",
        "funcData",
        "argType",
        "arg",
        "this$1",
        "argType",
        "arg",
        "this$1",
        "arg",
        "args",
        "positions",
        "this$1",
        "argType",
        "arg",
        "this$1",
        "argType",
        "arg",
        "this$1",
        "arg",
        "this$1",
        "this$1",
        "arg",
        "ParseFuncOrArgument",
        "this$1",
        "this$1",
        "ParseError$5",
        "func",
        "nextToken",
        "arg",
        "functions",
        "arg",
        "argGreediness",
        "baseGreediness",
        "argNode",
        "this$1",
        "arg",
        "ParseError$5",
        "arg",
        "func",
        "nextToken",
        "argNode",
        "arg",
        "args",
        "argNode",
        "positions",
        "this$1",
        "args",
        "positions",
        "args",
        "Parser$1",
        "innerMode",
        "optional",
        "innerMode",
        "innerMode",
        "outerMode",
        "innerMode",
        "optional",
        "innerMode",
        "optional",
        "innerMode",
        "innerMode",
        "this$1",
        "optional",
        "outerMode",
        "res",
        "Parser$1",
        "modeName",
        "optional",
        "optional",
        "optional",
        "optional",
        "this$1",
        "ParseError$5",
        "modeName",
        "firstToken",
        "this$1",
        "lastToken",
        "this$1",
        "lastToken",
        "this$1",
        "outerMode",
        "optional",
        "firstToken",
        "lastToken",
        "Parser$1",
        "regex",
        "modeName",
        "regex",
        "lastToken",
        "this$1",
        "lastToken",
        "this$1",
        "ParseError$5",
        "modeName",
        "firstToken",
        "firstToken",
        "outerMode",
        "firstToken",
        "lastToken",
        "Parser$1",
        "optional",
        "optional",
        "res",
        "res",
        "match",
        "ParseError$5",
        "res",
        "res",
        "ParseFuncOrArgument",
        "ParseNode",
        "match",
        "Parser$1",
        "optional",
        "optional",
        "res",
        "res",
        "optional",
        "res",
        "res",
        "match",
        "ParseError$5",
        "res",
        "res",
        "match",
        "match",
        "match",
        "data",
        "data",
        "data",
        "ParseError$5",
        "data",
        "res",
        "ParseFuncOrArgument",
        "ParseNode",
        "data",
        "Parser$1",
        "optional",
        "optional",
        "optional",
        "optional",
        "expression",
        "ParseFuncOrArgument",
        "ParseNode",
        "expression",
        "firstToken",
        "lastToken",
        "optional",
        "Parser$1",
        "group",
        "group",
        "i",
        "i",
        "n",
        "i",
        "group",
        "i",
        "a",
        "v",
        "group",
        "i",
        "i",
        "n",
        "group",
        "i",
        "group",
        "i",
        "ParseNode",
        "a",
        "group",
        "i",
        "n",
        "group",
        "i",
        "ParseNode",
        "a",
        "group",
        "i",
        "n",
        "v",
        "v",
        "group",
        "i",
        "v",
        "group",
        "i",
        "ParseNode",
        "v",
        "v",
        "a",
        "group",
        "i",
        "n",
        "Parser$1",
        "functions",
        "nucleus",
        "ParseFuncOrArgument",
        "nucleus",
        "nucleus",
        "symbols$5",
        "nucleus",
        "ParseFuncOrArgument",
        "ParseNode",
        "symbols$5",
        "nucleus",
        "nucleus",
        "nucleus",
        "nucleus",
        "cjkRegex$2",
        "nucleus",
        "ParseFuncOrArgument",
        "ParseNode",
        "nucleus",
        "nucleus",
        "nucleus",
        "Parser$1",
        "ParseNode",
        "toParse",
        "settings",
        "toParse",
        "toParse",
        "Parser",
        "toParse",
        "settings",
        "parser",
        "expression",
        "baseNode",
        "options",
        "utils",
        "baseNode",
        "Settings",
        "options",
        "parseTree",
        "expression",
        "settings",
        "buildTree",
        "tree",
        "expression",
        "settings",
        "baseNode",
        "node",
        "render$2",
        "ParseError",
        "expression",
        "options",
        "Settings",
        "options",
        "parseTree",
        "expression",
        "settings",
        "buildTree",
        "tree",
        "expression",
        "settings",
        "expression",
        "options",
        "Settings",
        "options",
        "parseTree",
        "expression",
        "settings",
        "render$2",
        "renderToString",
        "generateParseTree",
        "ParseError",
        "dom",
        "data",
        "dom",
        "equationElements",
        "el",
        "el",
        "el",
        "el",
        "html$3",
        "katex",
        "content",
        "displayMode",
        "createCommonjsModule",
        "exports",
        "noop",
        "noop",
        "noop",
        "block",
        "block",
        "block",
        "replace",
        "block",
        "block",
        "block",
        "replace",
        "block",
        "block",
        "block",
        "block",
        "replace",
        "block",
        "block",
        "block",
        "block",
        "replace",
        "block",
        "block",
        "block",
        "replace",
        "block",
        "block",
        "block",
        "block",
        "block",
        "block",
        "block",
        "block",
        "merge",
        "block",
        "block",
        "merge",
        "block",
        "block",
        "replace",
        "block",
        "block",
        "block",
        "block",
        "merge",
        "block",
        "options",
        "options",
        "marked",
        "block",
        "block",
        "block",
        "Lexer",
        "block",
        "Lexer",
        "src",
        "options",
        "Lexer",
        "options",
        "lexer",
        "src",
        "Lexer",
        "src",
        "src",
        "src",
        "src",
        "Lexer",
        "src",
        "top",
        "bq",
        "src",
        "src",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "cap",
        "this$1",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "cap",
        "cap",
        "this$1",
        "this$1",
        "cap",
        "cap",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "cap",
        "cap",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "cap",
        "cap",
        "top",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "item",
        "cap",
        "cap",
        "cap",
        "i",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "i",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "this$1",
        "item",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "cap",
        "cap",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "cap",
        "cap",
        "this$1",
        "cap",
        "top",
        "this$1",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "bull",
        "cap",
        "this$1",
        "bull",
        "cap",
        "cap",
        "this$1",
        "next",
        "l",
        "cap",
        "i",
        "i",
        "l",
        "i",
        "item",
        "cap",
        "i",
        "space",
        "item",
        "item",
        "item",
        "item",
        "space",
        "item",
        "item",
        "this$1",
        "item",
        "space",
        "item",
        "this$1",
        "i",
        "l",
        "b",
        "block",
        "cap",
        "i",
        "bull",
        "b",
        "bull",
        "b",
        "src",
        "cap",
        "i",
        "src",
        "i",
        "l",
        "loose",
        "next",
        "item",
        "i",
        "l",
        "next",
        "item",
        "item",
        "loose",
        "loose",
        "next",
        "this$1",
        "loose",
        "this$1",
        "item",
        "bq",
        "this$1",
        "this$1",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "this$1",
        "this$1",
        "cap",
        "cap",
        "cap",
        "cap",
        "bq",
        "top",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "cap",
        "cap",
        "cap",
        "top",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "item",
        "cap",
        "cap",
        "cap",
        "i",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "i",
        "i",
        "item",
        "i",
        "item",
        "i",
        "item",
        "i",
        "this$1",
        "item",
        "top",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "cap",
        "cap",
        "cap",
        "cap",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "cap",
        "src",
        "src",
        "noop",
        "noop",
        "inline",
        "inline",
        "inline",
        "replace",
        "inline",
        "inline",
        "inline",
        "inline",
        "replace",
        "inline",
        "inline",
        "inline",
        "merge",
        "inline",
        "inline",
        "merge",
        "inline",
        "inline",
        "merge",
        "inline",
        "replace",
        "inline",
        "replace",
        "inline",
        "inline",
        "merge",
        "inline",
        "replace",
        "inline",
        "replace",
        "inline",
        "links",
        "options",
        "options",
        "marked",
        "links",
        "inline",
        "Renderer",
        "inline",
        "inline",
        "inline",
        "InlineLexer",
        "inline",
        "InlineLexer",
        "src",
        "links",
        "options",
        "InlineLexer",
        "links",
        "options",
        "inline",
        "src",
        "InlineLexer",
        "src",
        "src",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "cap",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "cap",
        "text",
        "cap",
        "this$1",
        "cap",
        "this$1",
        "cap",
        "href",
        "this$1",
        "text",
        "text",
        "escape",
        "cap",
        "href",
        "text",
        "this$1",
        "href",
        "text",
        "this$1",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "text",
        "escape",
        "cap",
        "href",
        "text",
        "this$1",
        "href",
        "text",
        "cap",
        "this$1",
        "src",
        "this$1",
        "cap",
        "this$1",
        "this$1",
        "cap",
        "this$1",
        "src",
        "src",
        "cap",
        "this$1",
        "this$1",
        "this$1",
        "cap",
        "escape",
        "cap",
        "cap",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "this$1",
        "cap",
        "cap",
        "cap",
        "this$1",
        "cap",
        "this$1",
        "src",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "link",
        "cap",
        "cap",
        "link",
        "this$1",
        "link",
        "link",
        "link",
        "cap",
        "src",
        "cap",
        "src",
        "this$1",
        "this$1",
        "cap",
        "link",
        "this$1",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "this$1",
        "cap",
        "cap",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "this$1",
        "cap",
        "cap",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "escape",
        "cap",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "this$1",
        "cap",
        "cap",
        "this$1",
        "src",
        "src",
        "src",
        "cap",
        "this$1",
        "escape",
        "this$1",
        "cap",
        "src",
        "src",
        "InlineLexer",
        "cap",
        "link",
        "escape",
        "link",
        "link",
        "escape",
        "link",
        "cap",
        "href",
        "title",
        "cap",
        "href",
        "title",
        "escape",
        "cap",
        "InlineLexer",
        "text",
        "text",
        "text",
        "InlineLexer",
        "text",
        "text",
        "text",
        "i",
        "l",
        "i",
        "ch",
        "text",
        "i",
        "ch",
        "ch",
        "ch",
        "options",
        "options",
        "Renderer",
        "code",
        "lang",
        "escaped",
        "code",
        "lang",
        "code",
        "escaped",
        "code",
        "lang",
        "escaped",
        "code",
        "escape",
        "code",
        "escape",
        "lang",
        "escaped",
        "code",
        "escape",
        "code",
        "Renderer",
        "quote",
        "quote",
        "Renderer",
        "html",
        "html",
        "Renderer",
        "text",
        "level",
        "raw",
        "level",
        "raw",
        "text",
        "level",
        "Renderer",
        "Renderer",
        "body",
        "ordered",
        "ordered",
        "body",
        "Renderer",
        "text",
        "text",
        "Renderer",
        "text",
        "text",
        "Renderer",
        "header",
        "body",
        "header",
        "body",
        "Renderer",
        "content",
        "content",
        "Renderer",
        "content",
        "flags",
        "flags",
        "flags",
        "flags",
        "tag",
        "content",
        "Renderer",
        "text",
        "text",
        "Renderer",
        "text",
        "text",
        "Renderer",
        "text",
        "text",
        "Renderer",
        "Renderer",
        "text",
        "text",
        "Renderer",
        "href",
        "title",
        "text",
        "decodeURIComponent",
        "unescape",
        "href",
        "e",
        "prot",
        "prot",
        "href",
        "title",
        "title",
        "text",
        "Renderer",
        "href",
        "title",
        "text",
        "href",
        "text",
        "title",
        "title",
        "Renderer",
        "text",
        "text",
        "options",
        "options",
        "marked",
        "Renderer",
        "Parser",
        "src",
        "options",
        "renderer",
        "Parser",
        "options",
        "renderer",
        "parser",
        "src",
        "Parser",
        "src",
        "InlineLexer",
        "src",
        "src",
        "this$1",
        "Parser",
        "Parser",
        "Parser",
        "body",
        "this$1",
        "body",
        "Parser",
        "cell",
        "i",
        "i",
        "i",
        "flags",
        "this$1",
        "i",
        "cell",
        "this$1",
        "this$1",
        "this$1",
        "i",
        "this$1",
        "i",
        "header",
        "cell",
        "i",
        "i",
        "i",
        "row",
        "this$1",
        "i",
        "cell",
        "j",
        "j",
        "row",
        "j",
        "cell",
        "this$1",
        "this$1",
        "row",
        "j",
        "this$1",
        "j",
        "body",
        "this$1",
        "cell",
        "header",
        "body",
        "body",
        "this$1",
        "body",
        "body",
        "this$1",
        "body",
        "ordered",
        "body",
        "this$1",
        "this$1",
        "this$1",
        "body",
        "body",
        "this$1",
        "body",
        "html",
        "html",
        "encode",
        "html",
        "encode",
        "html",
        "html",
        "_",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "parseInt",
        "n",
        "n",
        "regex",
        "opt",
        "regex",
        "regex",
        "opt",
        "opt",
        "name",
        "val",
        "name",
        "regex",
        "opt",
        "val",
        "val",
        "val",
        "val",
        "val",
        "regex",
        "regex",
        "name",
        "val",
        "noop",
        "noop",
        "obj",
        "i",
        "arguments",
        "i",
        "target",
        "arguments$1",
        "i",
        "key",
        "target",
        "target",
        "key",
        "obj",
        "key",
        "target",
        "key",
        "obj",
        "src",
        "opt",
        "callback",
        "callback",
        "opt",
        "callback",
        "callback",
        "opt",
        "opt",
        "opt",
        "merge",
        "marked",
        "opt",
        "opt",
        "tokens",
        "Lexer",
        "src",
        "opt",
        "e",
        "callback",
        "e",
        "pending",
        "tokens",
        "err",
        "err",
        "opt",
        "highlight",
        "callback",
        "err",
        "Parser",
        "tokens",
        "opt",
        "e",
        "err",
        "e",
        "opt",
        "highlight",
        "err",
        "callback",
        "err",
        "callback",
        "highlight",
        "highlight",
        "done",
        "opt",
        "pending",
        "done",
        "i",
        "tokens",
        "i",
        "token",
        "token",
        "pending",
        "done",
        "highlight",
        "token",
        "token",
        "err",
        "code",
        "err",
        "done",
        "err",
        "code",
        "code",
        "token",
        "pending",
        "done",
        "token",
        "code",
        "token",
        "pending",
        "done",
        "tokens",
        "i",
        "opt",
        "opt",
        "merge",
        "marked",
        "opt",
        "Parser",
        "Lexer",
        "src",
        "opt",
        "opt",
        "e",
        "e",
        "opt",
        "marked",
        "escape",
        "e",
        "e",
        "marked",
        "marked",
        "opt",
        "merge",
        "marked",
        "opt",
        "marked",
        "marked",
        "Renderer",
        "marked",
        "Parser",
        "marked",
        "Parser",
        "marked",
        "Renderer",
        "marked",
        "Lexer",
        "marked",
        "Lexer",
        "marked",
        "InlineLexer",
        "marked",
        "InlineLexer",
        "marked",
        "marked",
        "marked",
        "marked",
        "marked",
        "commonjsGlobal",
        "marked",
        "dom",
        "data",
        "dom",
        "markdownElements",
        "el",
        "el",
        "content",
        "content",
        "content",
        "content",
        "content",
        "tabs",
        "content",
        "content",
        "el",
        "marked",
        "content",
        "createCommonjsModule",
        "WorkerGlobalScope",
        "WorkerGlobalScope",
        "_self",
        "tokens",
        "tokens",
        "Token",
        "Token",
        "tokens",
        "_",
        "tokens",
        "tokens",
        "_",
        "tokens",
        "tokens",
        "_",
        "tokens",
        "o",
        "o",
        "obj",
        "obj",
        "obj",
        "uniqueId",
        "obj",
        "o",
        "_",
        "o",
        "key",
        "o",
        "o",
        "key",
        "clone",
        "key",
        "_",
        "o",
        "key",
        "clone",
        "o",
        "o",
        "v",
        "_",
        "v",
        "o",
        "id",
        "redef",
        "_",
        "_",
        "id",
        "key",
        "redef",
        "lang",
        "key",
        "redef",
        "key",
        "lang",
        "inside",
        "before",
        "insert",
        "root",
        "root",
        "root",
        "_",
        "root",
        "inside",
        "arguments",
        "insert",
        "arguments",
        "newToken",
        "insert",
        "insert",
        "newToken",
        "grammar",
        "newToken",
        "insert",
        "newToken",
        "grammar",
        "token",
        "grammar",
        "grammar",
        "token",
        "token",
        "before",
        "newToken",
        "insert",
        "insert",
        "newToken",
        "ret",
        "newToken",
        "insert",
        "newToken",
        "ret",
        "token",
        "grammar",
        "token",
        "_",
        "_",
        "key",
        "value",
        "value",
        "root",
        "inside",
        "key",
        "inside",
        "key",
        "ret",
        "root",
        "inside",
        "ret",
        "o",
        "callback",
        "visited",
        "visited",
        "visited",
        "i",
        "o",
        "o",
        "i",
        "callback",
        "o",
        "i",
        "o",
        "i",
        "i",
        "_",
        "o",
        "i",
        "visited",
        "_",
        "o",
        "i",
        "visited",
        "_",
        "o",
        "i",
        "_",
        "o",
        "i",
        "callback",
        "visited",
        "_",
        "o",
        "i",
        "visited",
        "_",
        "o",
        "i",
        "visited",
        "_",
        "o",
        "i",
        "_",
        "o",
        "i",
        "callback",
        "i",
        "visited",
        "async",
        "callback",
        "callback",
        "_",
        "env",
        "env",
        "env",
        "element",
        "elements",
        "i",
        "_",
        "element",
        "async",
        "env",
        "element",
        "async",
        "callback",
        "parent",
        "lang",
        "parent",
        "parent",
        "parent",
        "parent",
        "language",
        "parent",
        "lang",
        "grammar",
        "_",
        "language",
        "element",
        "element",
        "lang",
        "language",
        "parent",
        "element",
        "parent",
        "parent",
        "parent",
        "lang",
        "language",
        "element",
        "element",
        "language",
        "grammar",
        "code",
        "_",
        "env",
        "env",
        "env",
        "env",
        "env",
        "env",
        "_",
        "env",
        "_",
        "env",
        "async",
        "_self",
        "Worker",
        "_",
        "worker",
        "evt",
        "env",
        "evt",
        "_",
        "env",
        "env",
        "env",
        "callback",
        "callback",
        "env",
        "_",
        "env",
        "_",
        "env",
        "worker",
        "env",
        "env",
        "env",
        "_",
        "env",
        "env",
        "env",
        "_",
        "env",
        "env",
        "env",
        "callback",
        "callback",
        "element",
        "_",
        "env",
        "_",
        "env",
        "text",
        "grammar",
        "language",
        "_",
        "text",
        "grammar",
        "Token",
        "_",
        "tokens",
        "language",
        "text",
        "grammar",
        "language",
        "_",
        "text",
        "grammar",
        "rest",
        "token",
        "rest",
        "grammar",
        "token",
        "rest",
        "token",
        "grammar",
        "token",
        "grammar",
        "grammar",
        "token",
        "grammar",
        "token",
        "grammar",
        "token",
        "patterns",
        "_",
        "patterns",
        "patterns",
        "patterns",
        "j",
        "patterns",
        "j",
        "patterns",
        "j",
        "pattern",
        "pattern",
        "pattern",
        "pattern",
        "greedy",
        "pattern",
        "pattern",
        "pattern",
        "pattern",
        "flags",
        "pattern",
        "pattern",
        "pattern",
        "i",
        "strarr",
        "pos",
        "strarr",
        "i",
        "i",
        "strarr",
        "i",
        "strarr",
        "text",
        "Token",
        "pattern",
        "pattern",
        "match",
        "greedy",
        "i",
        "strarr",
        "pattern",
        "pos",
        "match",
        "pattern",
        "text",
        "match",
        "match",
        "lookbehind",
        "match",
        "match",
        "match",
        "strarr",
        "k",
        "len",
        "p",
        "to",
        "k",
        "p",
        "strarr",
        "k",
        "p",
        "i",
        "pos",
        "p",
        "strarr",
        "i",
        "Token",
        "strarr",
        "k",
        "delNum",
        "k",
        "i",
        "text",
        "pos",
        "p",
        "match",
        "pos",
        "match",
        "lookbehind",
        "lookbehindLength",
        "match",
        "match",
        "lookbehindLength",
        "match",
        "lookbehindLength",
        "match",
        "to",
        "i",
        "delNum",
        "before",
        "args",
        "before",
        "Token",
        "token",
        "inside",
        "_",
        "match",
        "inside",
        "match",
        "alias",
        "match",
        "greedy",
        "args",
        "wrapped",
        "after",
        "args",
        "after",
        "strarr",
        "args",
        "strarr",
        "name",
        "callback",
        "_",
        "hooks",
        "name",
        "hooks",
        "name",
        "hooks",
        "name",
        "callback",
        "name",
        "env",
        "_",
        "name",
        "callbacks",
        "callbacks",
        "callback",
        "callbacks",
        "i",
        "callback",
        "env",
        "_",
        "content",
        "alias",
        "matchedStr",
        "greedy",
        "content",
        "alias",
        "matchedStr",
        "greedy",
        "Token",
        "o",
        "language",
        "parent",
        "o",
        "o",
        "_",
        "o",
        "o",
        "element",
        "Token",
        "element",
        "language",
        "o",
        "o",
        "Token",
        "o",
        "language",
        "parent",
        "o",
        "language",
        "parent",
        "env",
        "env",
        "o",
        "_",
        "o",
        "o",
        "o",
        "env",
        "aliases",
        "_",
        "env",
        "env",
        "name",
        "name",
        "env",
        "name",
        "env",
        "env",
        "attributes",
        "attributes",
        "env",
        "env",
        "_self",
        "_self",
        "_self",
        "_self",
        "evt",
        "evt",
        "message",
        "message",
        "message",
        "_self",
        "_",
        "code",
        "_",
        "lang",
        "lang",
        "immediateClose",
        "_self",
        "_self",
        "script",
        "_",
        "script",
        "script",
        "_",
        "_",
        "_",
        "_self",
        "Prism",
        "commonjsGlobal",
        "commonjsGlobal",
        "Prism",
        "Prism",
        "Prism",
        "env",
        "env",
        "env",
        "env",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "pre",
        "pre",
        "parent",
        "lang",
        "parent",
        "parent",
        "parent",
        "parent",
        "language",
        "pre",
        "lang",
        "language",
        "src",
        "language",
        "Extensions",
        "extension",
        "extension",
        "code",
        "language",
        "pre",
        "code",
        "pre",
        "code",
        "XMLHttpRequest",
        "xhr",
        "src",
        "xhr",
        "xhr",
        "xhr",
        "xhr",
        "code",
        "xhr",
        "Prism",
        "code",
        "xhr",
        "code",
        "xhr",
        "xhr",
        "code",
        "xhr",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "insideString",
        "insideString",
        "insideString",
        "insideString",
        "inside",
        "Prism",
        "inside",
        "Prism",
        "inside",
        "Prism",
        "inside",
        "Prism",
        "inside",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "Prism",
        "dom",
        "data",
        "dom",
        "codeElements",
        "el",
        "el",
        "el",
        "el",
        "dom",
        "el",
        "content",
        "content",
        "content",
        "content",
        "content",
        "tabs",
        "content",
        "content",
        "dom",
        "p",
        "c",
        "el",
        "p",
        "el",
        "c",
        "prism",
        "language",
        "c",
        "language",
        "highlighted",
        "prism",
        "content",
        "prism",
        "language",
        "c",
        "highlighted",
        "dom",
        "data",
        "dom",
        "dom",
        "dom",
        "textNodes",
        "textNodes",
        "n",
        "text",
        "acceptNode",
        "n",
        "text",
        "quotes",
        "text",
        "text",
        "punctuation",
        "text",
        "n",
        "text",
        "node",
        "node",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "isMath",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "dom",
        "dom",
        "s",
        "code$2",
        "dom",
        "s",
        "data",
        "data",
        "data",
        "data",
        "batch_id",
        "date",
        "batch_id",
        "data",
        "batch_timestamp",
        "batch_id",
        "batch_timestamp",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "date",
        "date",
        "data",
        "data",
        "data",
        "data",
        "author",
        "ind",
        "ind",
        "author",
        "author",
        "author",
        "date",
        "date",
        "date",
        "data",
        "data",
        "data",
        "data",
        "key",
        "citation_xml",
        "key",
        "data",
        "key",
        "xml",
        "crf_data",
        "key",
        "ent",
        "ent",
        "info",
        "key",
        "ent",
        "info",
        "ent",
        "ent",
        "info",
        "ent",
        "ent",
        "info",
        "ent",
        "ent",
        "info",
        "ent",
        "ent",
        "info",
        "ent",
        "ent",
        "info",
        "ent",
        "ent",
        "info",
        "ent",
        "info",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "keys",
        "obj",
        "keys",
        "obj",
        "name",
        "full_content",
        "i",
        "full_content",
        "full_content",
        "i",
        "obj",
        "obj_name",
        "attr",
        "obj",
        "content",
        "obj",
        "content",
        "full_content",
        "content",
        "content",
        "k",
        "attr",
        "attr_string",
        "k",
        "attr",
        "k",
        "content",
        "content",
        "content",
        "xml",
        "content",
        "content",
        "content",
        "content",
        "s",
        "s",
        "name",
        "attr_string",
        "content",
        "name",
        "content",
        "xml",
        "content",
        "name",
        "attr_string",
        "content",
        "name",
        "result",
        "logo",
        "dom",
        "data",
        "dom",
        "el",
        "el",
        "html$4",
        "dom",
        "header",
        "html$4",
        "dom",
        "b",
        "header",
        "b",
        "logo",
        "dom",
        "data",
        "dom",
        "el",
        "el",
        "html$5",
        "dom",
        "footer",
        "html$5",
        "dom",
        "b",
        "footer",
        "dom",
        "html",
        "dom",
        "styles",
        "dom",
        "dom",
        "data",
        "frontMatter",
        "dom",
        "data",
        "bibliography",
        "dom",
        "data",
        "expandData",
        "dom",
        "data",
        "meta",
        "dom",
        "data",
        "byline",
        "dom",
        "data",
        "appendix",
        "dom",
        "data",
        "markdown",
        "dom",
        "data",
        "DTMath",
        "dom",
        "data",
        "code$1",
        "dom",
        "data",
        "citation",
        "dom",
        "data",
        "footnote",
        "dom",
        "data",
        "typeset",
        "dom",
        "data",
        "hoverBox",
        "dom",
        "data",
        "browser",
        "renderImmediately",
        "renderOnLoad",
        "data",
        "banner",
        "data",
        "generateCrossref",
        "data",
        "error",
        "dom",
        "data",
        "renderImmediately",
        "dom",
        "renderOnLoad",
        "dom",
        "data",
        "dom",
        "s",
        "s",
        "s",
        "dom",
        "data",
        "header",
        "dom",
        "data",
        "appendixDistill",
        "dom",
        "data",
        "footer",
        "dom",
        "data",
        "exports",
        "render$1",
        "exports",
        "distillify",
        "exports",
        "generateCrossref",
        "exports"
    ],
    "literals": [
        "'object'",
        "'undefined'",
        "'function'",
        "'exports'",
        "'use strict'",
        "\"html\"",
        "\"lang\"",
        "\"html\"",
        "\"lang\"",
        "\"en\"",
        "\"head\"",
        "\"meta[charset]\"",
        "\"meta\"",
        "\"charset\"",
        "\"utf-8\"",
        "\"meta[name=viewport]\"",
        "\"meta\"",
        "\"name\"",
        "\"viewport\"",
        "\"content\"",
        "\"width=device-width, initial-scale=1\"",
        "\"html {\\n  font: 400 16px/1.55em -apple-system, BlinkMacSystemFont, \\\"Roboto\\\", Helvetica, sans-serif;\\n  /*background-color: hsl(223, 9%, 25%);*/\\n  -ms-text-size-adjust: 100%;\\n  -webkit-text-size-adjust: 100%;\\n  text-size-adjust: 100%;\\n}\\nbody {\\n  margin: 0;\\n  /*background-color: hsl(223, 9%, 25%);*/\\n}\\n\\na {\\n  color: #004276;\\n}\\n\\nfigure {\\n  margin: 0;\\n}\\n\\nh1 {\\n  font-family: Cochin, Georgia, serif;\\n}\\n\\n/*\\nhtml, body, div, span, applet, object, iframe,\\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\\na, abbr, acronym, address, big, cite, code,\\ndel, dfn, em, img, ins, kbd, q, s, samp,\\nsmall, strike, strong, sub, sup, tt, var,\\nb, u, i, center,\\ndl, dt, dd, ol, ul, li,\\nfieldset, form, label, legend,\\ntable, caption, tbody, tfoot, thead, tr, th, td,\\narticle, aside, canvas, details, embed,\\nfigure, figcaption, footer, header, hgroup,\\nmenu, nav, output, ruby, section, summary,\\ntime, mark, audio, video {\\n\\tmargin: 0;\\n\\tpadding: 0;\\n\\tborder: 0;\\n\\tfont-size: 100%;\\n\\tfont: inherit;\\n\\tvertical-align: baseline;\\n}\\narticle, aside, details, figcaption, figure,\\nfooter, header, hgroup, menu, nav, section {\\n\\tdisplay: block;\\n}\\nbody {\\n\\tline-height: 1;\\n}\\nol, ul {\\n\\tlist-style: none;\\n}\\nblockquote, q {\\n\\tquotes: none;\\n}\\nblockquote:before, blockquote:after,\\nq:before, q:after {\\n\\tcontent: '';\\n\\tcontent: none;\\n}\\ntable {\\n\\tborder-collapse: collapse;\\n\\tborder-spacing: 0;\\n}*/\\n\"",
        "\"/*\\n  Column: 60px\\n  Gutter: 24px\\n\\n  Body: 648px\\n    - 8 columns\\n    - 7 gutters\\n  Middle: 816px\\n  Page: 984px\\n    - 12 columns\\n    - 11 gutters\\n*/\\n\\n.l-body,\\n.l-body-outset,\\n.l-page,\\n.l-page-outset,\\n.l-middle,\\n.l-middle-outset,\\ndt-article > div,\\ndt-article > p,\\ndt-article > h1,\\ndt-article > h2,\\ndt-article > h3,\\ndt-article > h4,\\ndt-article > figure,\\ndt-article > table,\\ndt-article > ol,\\ndt-article > ul,\\ndt-article > dt-byline,\\ndt-article > dt-math,\\ndt-article > dt-code,\\ndt-article section > div,\\ndt-article section > p,\\ndt-article section > h1,\\ndt-article section > h2,\\ndt-article section > h3,\\ndt-article section > h4,\\ndt-article section > figure,\\ndt-article section > table,\\ndt-article section > ol,\\ndt-article section > ul,\\ndt-article section > dt-byline,\\ndt-article section > dt-code {\\n  width: auto;\\n  margin-left: 24px;\\n  margin-right: 24px;\\n  box-sizing: border-box;\\n}\\n\\n@media(min-width: 768px) {\\n  .l-body,\\n  .l-body-outset,\\n  .l-page,\\n  .l-page-outset,\\n  .l-middle,\\n  .l-middle-outset,\\n  dt-article > div,\\n  dt-article > p,\\n  dt-article > h1,\\n  dt-article > h2,\\n  dt-article > h3,\\n  dt-article > h4,\\n  dt-article > figure,\\n  dt-article > table,\\n  dt-article > ol,\\n  dt-article > ul,\\n  dt-article > dt-byline,\\n  dt-article > dt-math,\\n  dt-article > dt-code,\\n  dt-article section > div,\\n  dt-article section > p,\\n  dt-article section > h1,\\n  dt-article section > h2,\\n  dt-article section > h3,\\n  dt-article section > h4,\\n  dt-article section > figure,\\n  dt-article section > table,\\n  dt-article section > ol,\\n  dt-article section > ul,\\n  dt-article section > dt-byline,\\n  dt-article section > dt-code {\\n    margin-left: 72px;\\n    margin-right: 72px;\\n  }\\n}\\n\\n@media(min-width: 1080px) {\\n  .l-body,\\n  dt-article > div,\\n  dt-article > p,\\n  dt-article > h2,\\n  dt-article > h3,\\n  dt-article > h4,\\n  dt-article > figure,\\n  dt-article > table,\\n  dt-article > ol,\\n  dt-article > ul,\\n  dt-article > dt-byline,\\n  dt-article > dt-math,\\n  dt-article > dt-code,\\n  dt-article section > div,\\n  dt-article section > p,\\n  dt-article section > h2,\\n  dt-article section > h3,\\n  dt-article section > h4,\\n  dt-article section > figure,\\n  dt-article section > table,\\n  dt-article section > ol,\\n  dt-article section > ul,\\n  dt-article section > dt-byline,\\n  dt-article section > dt-code {\\n    margin-left: calc(50% - 984px / 2);\\n    width: 648px;\\n  }\\n  .l-body-outset,\\n  dt-article .l-body-outset {\\n    margin-left: calc(50% - 984px / 2 - 96px/2);\\n    width: calc(648px + 96px);\\n  }\\n  .l-middle,\\n  dt-article .l-middle {\\n    width: 816px;\\n    margin-left: calc(50% - 984px / 2);\\n    margin-right: auto;\\n  }\\n  .l-middle-outset,\\n  dt-article .l-middle-outset {\\n    width: calc(816px + 96px);\\n    margin-left: calc(50% - 984px / 2 - 48px);\\n    margin-right: auto;\\n  }\\n  dt-article > h1,\\n  dt-article section > h1,\\n  .l-page,\\n  dt-article .l-page,\\n  dt-article.centered .l-page {\\n    width: 984px;\\n    margin-left: auto;\\n    margin-right: auto;\\n  }\\n  .l-page-outset,\\n  dt-article .l-page-outset,\\n  dt-article.centered .l-page-outset {\\n    width: 1080px;\\n    margin-left: auto;\\n    margin-right: auto;\\n  }\\n  .l-screen,\\n  dt-article .l-screen,\\n  dt-article.centered .l-screen {\\n    margin-left: auto;\\n    margin-right: auto;\\n    width: auto;\\n  }\\n  .l-screen-inset,\\n  dt-article .l-screen-inset,\\n  dt-article.centered .l-screen-inset {\\n    margin-left: 24px;\\n    margin-right: 24px;\\n    width: auto;\\n  }\\n  .l-gutter,\\n  dt-article .l-gutter {\\n    clear: both;\\n    float: right;\\n    margin-top: 0;\\n    margin-left: 24px;\\n    margin-right: calc((100vw - 984px) / 2 + 168px);\\n    width: calc((984px - 648px) / 2 - 24px);\\n  }\\n\\n  /* Side */\\n  .side.l-body,\\n  dt-article .side.l-body {\\n    clear: both;\\n    float: right;\\n    margin-top: 0;\\n    margin-left: 48px;\\n    margin-right: calc((100vw - 984px + 648px) / 2);\\n    width: calc(648px / 2 - 24px - 84px);\\n  }\\n  .side.l-body-outset,\\n  dt-article .side.l-body-outset {\\n    clear: both;\\n    float: right;\\n    margin-top: 0;\\n    margin-left: 48px;\\n    margin-right: calc((100vw - 984px + 648px - 48px) / 2);\\n    width: calc(648px / 2 - 48px + 24px);\\n  }\\n  .side.l-middle,\\n  dt-article .side.l-middle {\\n    clear: both;\\n    float: right;\\n    width: calc(456px - 84px);\\n    margin-left: 48px;\\n    margin-right: calc((100vw - 984px) / 2 + 168px);\\n  }\\n  .side.l-middle-outset,\\n  dt-article .side.l-middle-outset {\\n    clear: both;\\n    float: right;\\n    width: 456px;\\n    margin-left: 48px;\\n    margin-right: calc((100vw - 984px) / 2 + 168px);\\n  }\\n  .side.l-page,\\n  dt-article .side.l-page {\\n    clear: both;\\n    float: right;\\n    margin-left: 48px;\\n    width: calc(624px - 84px);\\n    margin-right: calc((100vw - 984px) / 2);\\n  }\\n  .side.l-page-outset,\\n  dt-article .side.l-page-outset {\\n    clear: both;\\n    float: right;\\n    width: 624px;\\n    margin-right: calc((100vw - 984px) / 2);\\n  }\\n}\\n\\n/* Centered */\\n\\n@media(min-width: 1080px) {\\n  .centered .l-body,\\n  .centered.l-body,\\n  dt-article.centered > div,\\n  dt-article.centered > p,\\n  dt-article.centered > h2,\\n  dt-article.centered > h3,\\n  dt-article.centered > h4,\\n  dt-article.centered > figure,\\n  dt-article.centered > table,\\n  dt-article.centered > ol,\\n  dt-article.centered > ul,\\n  dt-article.centered > dt-byline,\\n  dt-article.centered > dt-code,\\n  dt-article.centered section > div,\\n  dt-article.centered section > p,\\n  dt-article.centered section > h2,\\n  dt-article.centered section > h3,\\n  dt-article.centered section > h4,\\n  dt-article.centered section > figure,\\n  dt-article.centered section > table,\\n  dt-article.cebtered section > ol,\\n  dt-article.centered section > ul,\\n  dt-article.centered section > dt-byline,\\n  dt-article.centered section > dt-code,\\n  dt-article section.centered > div,\\n  dt-article section.centered > p,\\n  dt-article section.centered > h2,\\n  dt-article section.centered > h3,\\n  dt-article section.centered > h4,\\n  dt-article section.centered > figure,\\n  dt-article section.centered > table,\\n  dt-article section.centered > ol,\\n  dt-article section.centered > ul,\\n  dt-article section.centered > dt-byline,\\n  dt-article section.centered > dt-code {\\n    margin-left: auto;\\n    margin-right: auto;\\n    width: 648px;\\n  }\\n  .centered .l-body-outset,\\n  .centered.l-body-outset,\\n  dt-article.centered .l-body-outset {\\n    margin-left: auto;\\n    margin-right: auto;\\n    width: calc(648px + 96px);\\n  }\\n  dt-article.centered > h1,\\n  dt-article.centered section > h1,\\n  dt-article section.centered > h1,\\n  .centered .l-middle,\\n  .centered.l-middle,\\n  dt-article.centered .l-middle {\\n    width: 816px;\\n    margin-left: auto;\\n    margin-right: auto;\\n  }\\n\\n  .centered .l-middle-outset,\\n  .centered.l-middle-outset,\\n  dt-article.centered .l-middle-outset {\\n    width: calc(816px + 96px);\\n    margin-left: auto;\\n    margin-right: auto;\\n  }\\n\\n  /* page and screen are already centered */\\n\\n  /* Side */\\n\\n  .centered .side.l-body,\\n  .centered dt-article .side.l-body {\\n    clear: both;\\n    float: right;\\n    margin-top: 0;\\n    margin-left: 48px;\\n    margin-right: calc((100vw - 648px) / 2);\\n    width: calc(4 * 60px + 3 * 24px);\\n  }\\n  .centered .side.l-body-outset,\\n  .centered dt-article .side.l-body-outset {\\n    clear: both;\\n    float: right;\\n    margin-top: 0;\\n    margin-left: 48px;\\n    margin-right: calc((100vw - 648px) / 2);\\n    width: calc(4 * 60px + 3 * 24px);\\n  }\\n  .centered .side.l-middle,\\n  .centered dt-article .side.l-middle {\\n    clear: both;\\n    float: right;\\n    width: 396px;\\n    margin-left: 48px;\\n    margin-right: calc((100vw - 984px) / 2 + 168px / 2);\\n  }\\n  .centered .side.l-middle-outset,\\n  .centered dt-article .side.l-middle-outset {\\n    clear: both;\\n    float: right;\\n    width: 456px;\\n    margin-left: 48px;\\n    margin-right: calc((100vw - 984px) / 2 + 168px);\\n  }\\n  .centered .side.l-page,\\n  .centered dt-article .side.l-page {\\n    clear: both;\\n    float: right;\\n    width: 480px;\\n    margin-right: calc((100vw - 984px) / 2);\\n  }\\n  .centered .side.l-page-outset,\\n  .centered dt-article .side.l-page-outset {\\n    clear: both;\\n    float: right;\\n    width: 480px;\\n    margin-right: calc((100vw - 984px) / 2);\\n  }\\n  .centered .l-gutter,\\n  .centered.l-gutter,\\n  dt-article.centered .l-gutter {\\n    clear: both;\\n    float: right;\\n    margin-top: 0;\\n    margin-left: 24px;\\n    margin-right: calc((100vw - 984px) / 2);\\n    width: calc((984px - 648px) / 2 - 24px);\\n  }\\n\\n}\\n\\n/* Rows and Columns */\\n\\n.row {\\n  display: flex;\\n}\\n.column {\\n  flex: 1;\\n  box-sizing: border-box;\\n  margin-right: 24px;\\n  margin-left: 24px;\\n}\\n.row > .column:first-of-type {\\n  margin-left: 0;\\n}\\n.row > .column:last-of-type {\\n  margin-right: 0;\\n}\\n\"",
        "\"dt-article {\\n  display: block;\\n  color: rgba(0, 0, 0, 0.8);\\n  font: 17px/1.55em -apple-system, BlinkMacSystemFont, \\\"Roboto\\\", sans-serif;\\n  padding-bottom: 72px;\\n  background: white;\\n}\\n\\n@media(min-width: 1024px) {\\n  dt-article {\\n    font-size: 20px;\\n  }\\n}\\n\\n/* H1 */\\n\\ndt-article h1 {\\n  margin-top: 18px;\\n  font-weight: 400;\\n  font-size: 40px;\\n  line-height: 1em;\\n  font-family: HoeflerText-Regular, Cochin, Georgia, serif;\\n}\\n@media(min-width: 768px) {\\n  dt-article h1 {\\n    font-size: 46px;\\n    margin-top: 48px;\\n    margin-bottom: 12px;\\n  }\\n}\\n\\n@media(min-width: 1080px) {\\n  .centered h1 {\\n    text-align: center;\\n  }\\n\\n  dt-article h1 {\\n    font-size: 50px;\\n    letter-spacing: -0.02em;\\n  }\\n\\n  dt-article > h1:first-of-type,\\n  dt-article section > h1:first-of-type {\\n    margin-top: 80px;\\n  }\\n}\\n\\n\\n@media(min-width: 1200px) {\\n  dt-article h1 {\\n    font-size: 56px;\\n  }\\n\\n  dt-article > h1:first-of-type {\\n    margin-top: 100px;\\n  }\\n}\\n\\n/* H2 */\\n\\ndt-article h2 {\\n  font-family: HoeflerText-Regular, Cochin, Georgia, serif;\\n  font-weight: 400;\\n  font-size: 26px;\\n  line-height: 1.25em;\\n  margin-top: 36px;\\n  margin-bottom: 24px;\\n}\\n\\n@media(min-width: 1024px) {\\n  dt-article h2 {\\n    margin-top: 48px;\\n    font-size: 30px;\\n  }\\n}\\n\\ndt-article h1 + h2 {\\n  font-weight: 300;\\n  font-size: 20px;\\n  line-height: 1.4em;\\n  margin-top: 8px;\\n  font-style: normal;\\n}\\n\\n\\n@media(min-width: 1080px) {\\n  .centered h1 + h2 {\\n    text-align: center;\\n  }\\n  dt-article h1 + h2 {\\n    margin-top: 12px;\\n    font-size: 24px;\\n  }\\n}\\n\\n/* H3 */\\n\\ndt-article h3 {\\n  font-family: HoeflerText-Regular, Georgia, serif;\\n  font-weight: 400;\\n  font-size: 20px;\\n  line-height: 1.4em;\\n  margin-top: 36px;\\n  margin-bottom: 18px;\\n  font-style: italic;\\n}\\n\\ndt-article h1 + h3 {\\n  margin-top: 48px;\\n}\\n\\n@media(min-width: 1024px) {\\n  dt-article h3 {\\n    font-size: 26px;\\n  }\\n}\\n\\n/* H4 */\\n\\ndt-article h4 {\\n  font-weight: 600;\\n  text-transform: uppercase;\\n  font-size: 14px;\\n  line-height: 1.4em;\\n}\\n\\ndt-article a {\\n  color: inherit;\\n}\\n\\ndt-article p,\\ndt-article ul,\\ndt-article ol {\\n  margin-bottom: 24px;\\n  font-family: Georgia, serif;\\n}\\n\\ndt-article p b,\\ndt-article ul b,\\ndt-article ol b {\\n  -webkit-font-smoothing: antialiased;\\n}\\n\\ndt-article a {\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.4);\\n  text-decoration: none;\\n}\\n\\ndt-article a:hover {\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.8);\\n}\\n\\ndt-article .link {\\n  text-decoration: underline;\\n  cursor: pointer;\\n}\\n\\ndt-article ul,\\ndt-article ol {\\n  padding-left: 24px;\\n}\\n\\ndt-article li {\\n  margin-bottom: 24px;\\n  margin-left: 0;\\n  padding-left: 0;\\n}\\n\\ndt-article pre {\\n  font-size: 14px;\\n  margin-bottom: 20px;\\n}\\n\\n\\ndt-article hr {\\n  border: none;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.2);\\n  margin-top: 60px;\\n  margin-bottom: 60px;\\n}\\n\\ndt-article section {\\n  margin-top: 60px;\\n  margin-bottom: 60px;\\n}\\n\\n/* Tables */\\n\\ndt-article table {\\n  border-collapse: collapse;\\n}\\n\\ndt-article table th {\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n}\\n\\ndt-article table td {\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\\n}\\n\\ndt-article table th,\\ndt-article table td {\\n  font-size: 15px;\\n  padding: 2px 0;\\n}\\n\\n/* Figure */\\n\\ndt-article figure {\\n  position: relative;\\n  margin-top: 30px;\\n  margin-bottom: 30px;\\n}\\n\\n@media(min-width: 1024px) {\\n  dt-article figure {\\n    margin-top: 48px;\\n    margin-bottom: 48px;\\n  }\\n}\\n\\ndt-article figure img {\\n  width: 100%;\\n}\\n\\ndt-article figure svg text,\\ndt-article figure svg tspan {\\n}\\n\\ndt-article figure figcaption {\\n  color: rgba(0, 0, 0, 0.6);\\n  font-size: 12px;\\n  line-height: 1.5em;\\n}\\n@media(min-width: 1024px) {\\n  dt-article figure figcaption {\\n    font-size: 13px;\\n  }\\n}\\n\\ndt-article figure.external img {\\n  background: white;\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.1);\\n  padding: 18px;\\n  box-sizing: border-box;\\n}\\n\\ndt-article figure figcaption a {\\n  color: rgba(0, 0, 0, 0.6);\\n}\\n\\ndt-article span.equation-mimic {\\n  font-family: georgia;\\n  font-size: 115%;\\n  font-style: italic;\\n}\\n\\ndt-article figure figcaption b {\\n  font-weight: 600;\\n  color: rgba(0, 0, 0, 1.0);\\n}\\n\\ndt-article > dt-code,\\ndt-article section > dt-code  {\\n  display: block;\\n}\\n\\ndt-article .citation {\\n  color: #668;\\n  cursor: pointer;\\n}\\n\\ndt-include {\\n  width: auto;\\n  display: block;\\n}\\n\"",
        "\"/**\\n * prism.js default theme for JavaScript, CSS and HTML\\n * Based on dabblet (http://dabblet.com)\\n * @author Lea Verou\\n */\\n\\ncode {\\n  white-space: nowrap;\\n  background: rgba(0, 0, 0, 0.04);\\n  border-radius: 2px;\\n  padding: 4px 7px;\\n  font-size: 15px;\\n  color: rgba(0, 0, 0, 0.6);\\n}\\n\\npre code {\\n  display: block;\\n  background: white;\\n  border-left: 3px solid rgba(0, 0, 0, 0.05);\\n  padding: 0 0 0 24px;\\n}\\n\\n\\ncode[class*=\\\"language-\\\"],\\npre[class*=\\\"language-\\\"] {\\n  text-shadow: 0 1px white;\\n  font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\\n  text-align: left;\\n  white-space: pre;\\n  word-spacing: normal;\\n  word-break: normal;\\n  word-wrap: normal;\\n  line-height: 1.5;\\n\\n  -moz-tab-size: 4;\\n  -o-tab-size: 4;\\n  tab-size: 4;\\n\\n  -webkit-hyphens: none;\\n  -moz-hyphens: none;\\n  -ms-hyphens: none;\\n  hyphens: none;\\n}\\n\\npre[class*=\\\"language-\\\"]::-moz-selection, pre[class*=\\\"language-\\\"] ::-moz-selection,\\ncode[class*=\\\"language-\\\"]::-moz-selection, code[class*=\\\"language-\\\"] ::-moz-selection {\\n  text-shadow: none;\\n  background: #b3d4fc;\\n}\\n\\npre[class*=\\\"language-\\\"]::selection, pre[class*=\\\"language-\\\"] ::selection,\\ncode[class*=\\\"language-\\\"]::selection, code[class*=\\\"language-\\\"] ::selection {\\n  text-shadow: none;\\n  background: #b3d4fc;\\n}\\n\\n@media print {\\n  code[class*=\\\"language-\\\"],\\n  pre[class*=\\\"language-\\\"] {\\n  text-shadow: none;\\n  }\\n}\\n\\n/* Code blocks */\\npre[class*=\\\"language-\\\"] {\\n  overflow: auto;\\n}\\n\\n:not(pre) > code[class*=\\\"language-\\\"],\\npre[class*=\\\"language-\\\"] {\\n}\\n\\n/* Inline code */\\n:not(pre) > code[class*=\\\"language-\\\"] {\\n  white-space: normal;\\n}\\n\\n.token.comment,\\n.token.prolog,\\n.token.doctype,\\n.token.cdata {\\n  color: slategray;\\n}\\n\\n.token.punctuation {\\n  color: #999;\\n}\\n\\n.namespace {\\n  opacity: .7;\\n}\\n\\n.token.property,\\n.token.tag,\\n.token.boolean,\\n.token.number,\\n.token.constant,\\n.token.symbol,\\n.token.deleted {\\n  color: #905;\\n}\\n\\n.token.selector,\\n.token.attr-name,\\n.token.string,\\n.token.char,\\n.token.builtin,\\n.token.inserted {\\n  color: #690;\\n}\\n\\n.token.operator,\\n.token.entity,\\n.token.url,\\n.language-css .token.string,\\n.style .token.string {\\n  color: #a67f59;\\n  background: hsla(0, 0%, 100%, .5);\\n}\\n\\n.token.atrule,\\n.token.attr-value,\\n.token.keyword {\\n  color: #07a;\\n}\\n\\n.token.function {\\n  color: #DD4A68;\\n}\\n\\n.token.regex,\\n.token.important,\\n.token.variable {\\n  color: #e90;\\n}\\n\\n.token.important,\\n.token.bold {\\n  font-weight: bold;\\n}\\n.token.italic {\\n  font-style: italic;\\n}\\n\\n.token.entity {\\n  cursor: help;\\n}\\n\"",
        "\"\\n@media print {\\n  @page {\\n    size: 8in 11in;\\n  }\\n  html {\\n  }\\n  p, code {\\n    page-break-inside: avoid;\\n  }\\n  h2, h3 {\\n    page-break-after: avoid;\\n  }\\n  dt-header {\\n    visibility: hidden;\\n  }\\n  dt-footer {\\n    display: none!important;\\n  }\\n}\\n\"",
        "\"style\"",
        "\"head\"",
        "'undefined'",
        "'object'",
        "''",
        "''",
        "'YAMLException'",
        "'(unknown reason)'",
        "' '",
        "''",
        "': '",
        "'(unknown reason)'",
        "' '",
        "''",
        "'\\x00\\r\\n\\x85\\u2028\\u2029'",
        "' ... '",
        "''",
        "'\\x00\\r\\n\\x85\\u2028\\u2029'",
        "' ... '",
        "' '",
        "'\\n'",
        "' '",
        "'^'",
        "''",
        "'in \"'",
        "'\" '",
        "'at line '",
        "', column '",
        "':\\n'",
        "'kind'",
        "'resolve'",
        "'construct'",
        "'instanceOf'",
        "'predicate'",
        "'represent'",
        "'defaultStyle'",
        "'styleAliases'",
        "'scalar'",
        "'sequence'",
        "'mapping'",
        "'Unknown option \"'",
        "'\" is met in definition of \"'",
        "'\" YAML type.'",
        "'kind'",
        "'resolve'",
        "'construct'",
        "'instanceOf'",
        "'predicate'",
        "'represent'",
        "'defaultStyle'",
        "'styleAliases'",
        "'Unknown kind \"'",
        "'\" is specified for \"'",
        "'\" YAML type.'",
        "'fallback'",
        "'scalar'",
        "'There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.'",
        "'implicit'",
        "'explicit'",
        "'Wrong number of arguments for Schema.create function'",
        "'Specified list of super schemas (or a single Schema object) contains a non-Schema object.'",
        "'Specified list of YAML types (or a single Type object) contains a non-Type object.'",
        "'tag:yaml.org,2002:str'",
        "'scalar'",
        "''",
        "'tag:yaml.org,2002:seq'",
        "'sequence'",
        "'tag:yaml.org,2002:map'",
        "'mapping'",
        "'~'",
        "'null'",
        "'Null'",
        "'NULL'",
        "'tag:yaml.org,2002:null'",
        "'scalar'",
        "'~'",
        "'null'",
        "'NULL'",
        "'Null'",
        "'lowercase'",
        "'true'",
        "'True'",
        "'TRUE'",
        "'false'",
        "'False'",
        "'FALSE'",
        "'true'",
        "'True'",
        "'TRUE'",
        "'[object Boolean]'",
        "'tag:yaml.org,2002:bool'",
        "'scalar'",
        "'true'",
        "'false'",
        "'TRUE'",
        "'FALSE'",
        "'True'",
        "'False'",
        "'lowercase'",
        "'-'",
        "'+'",
        "'0'",
        "'b'",
        "'_'",
        "'0'",
        "'1'",
        "'x'",
        "'_'",
        "'_'",
        "'_'",
        "':'",
        "':'",
        "'_'",
        "''",
        "'-'",
        "'+'",
        "'-'",
        "'0'",
        "'0'",
        "'b'",
        "'x'",
        "':'",
        "':'",
        "'[object Number]'",
        "'tag:yaml.org,2002:int'",
        "'scalar'",
        "'0b'",
        "'0'",
        "'0x'",
        "'decimal'",
        "'bin'",
        "'oct'",
        "'dec'",
        "'hex'",
        "'^(?:[-+]?(?:[0-9][0-9_]*)\\\\.[0-9_]*(?:[eE][-+][0-9]+)?'",
        "'|\\\\.[0-9_]+(?:[eE][-+][0-9]+)?'",
        "'|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*'",
        "'|[-+]?\\\\.(?:inf|Inf|INF)'",
        "'|\\\\.(?:nan|NaN|NAN))$'",
        "''",
        "'-'",
        "'+-'",
        "'.inf'",
        "'.nan'",
        "':'",
        "':'",
        "'lowercase'",
        "'.nan'",
        "'uppercase'",
        "'.NAN'",
        "'camelcase'",
        "'.NaN'",
        "'lowercase'",
        "'.inf'",
        "'uppercase'",
        "'.INF'",
        "'camelcase'",
        "'.Inf'",
        "'lowercase'",
        "'-.inf'",
        "'uppercase'",
        "'-.INF'",
        "'camelcase'",
        "'-.Inf'",
        "'-0.0'",
        "'e'",
        "'.e'",
        "'[object Number]'",
        "'tag:yaml.org,2002:float'",
        "'scalar'",
        "'lowercase'",
        "'^([0-9][0-9][0-9][0-9])'",
        "'-([0-9][0-9])'",
        "'-([0-9][0-9])$'",
        "'^([0-9][0-9][0-9][0-9])'",
        "'-([0-9][0-9]?)'",
        "'-([0-9][0-9]?)'",
        "'(?:[Tt]|[ \\\\t]+)'",
        "'([0-9][0-9]?)'",
        "':([0-9][0-9])'",
        "':([0-9][0-9])'",
        "'(?:\\\\.([0-9]*))?'",
        "'(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)'",
        "'(?::([0-9][0-9]))?))?$'",
        "'Date resolve error'",
        "'0'",
        "'-'",
        "'tag:yaml.org,2002:timestamp'",
        "'scalar'",
        "'<<'",
        "'tag:yaml.org,2002:merge'",
        "'scalar'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'Dynamic requires are not currently supported by rollup-plugin-commonjs'",
        "'buffer'",
        "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r'",
        "''",
        "''",
        "'tag:yaml.org,2002:binary'",
        "'scalar'",
        "'[object Object]'",
        "'tag:yaml.org,2002:omap'",
        "'sequence'",
        "'[object Object]'",
        "'tag:yaml.org,2002:pairs'",
        "'sequence'",
        "'tag:yaml.org,2002:set'",
        "'mapping'",
        "''",
        "'undefined'",
        "'tag:yaml.org,2002:js/undefined'",
        "'scalar'",
        "''",
        "'/'",
        "'/'",
        "''",
        "'/'",
        "'/'",
        "'/'",
        "'g'",
        "'m'",
        "'i'",
        "'[object RegExp]'",
        "'tag:yaml.org,2002:js/regexp'",
        "'scalar'",
        "'esprima'",
        "'undefined'",
        "'('",
        "')'",
        "'Program'",
        "'ExpressionStatement'",
        "'FunctionExpression'",
        "'('",
        "')'",
        "'Program'",
        "'ExpressionStatement'",
        "'FunctionExpression'",
        "'Failed to resolve function'",
        "'[object Function]'",
        "'tag:yaml.org,2002:js/function'",
        "'scalar'",
        "'\\x00'",
        "'\\x07'",
        "'\\x08'",
        "'\\x09'",
        "'\\x09'",
        "'\\x0A'",
        "'\\x0B'",
        "'\\x0C'",
        "'\\x0D'",
        "'\\x1B'",
        "' '",
        "'\\x22'",
        "'/'",
        "'\\x5C'",
        "'\\x85'",
        "'\\xA0'",
        "'\\u2028'",
        "'\\u2029'",
        "''",
        "'filename'",
        "'schema'",
        "'onWarning'",
        "'legacy'",
        "'json'",
        "'listener'",
        "'duplication of %YAML directive'",
        "'YAML directive accepts exactly one argument'",
        "'ill-formed argument of the YAML directive'",
        "'unacceptable YAML version of the document'",
        "'unsupported YAML version of the document'",
        "'TAG directive accepts exactly two arguments'",
        "'ill-formed tag handle (first argument) of the TAG directive'",
        "'there is a previously declared suffix for \"'",
        "'\" tag handle'",
        "'ill-formed tag prefix (second argument) of the TAG directive'",
        "'expected valid JSON character'",
        "'the stream contains non-printable characters'",
        "'cannot merge mappings; the provided source object is unacceptable'",
        "'tag:yaml.org,2002:merge'",
        "'duplicated mapping key'",
        "'a line break is expected'",
        "'deficient indentation'",
        "' '",
        "'\\n'",
        "'scalar'",
        "''",
        "'scalar'",
        "''",
        "'unexpected end of the document within a single quoted scalar'",
        "'unexpected end of the stream within a single quoted scalar'",
        "'scalar'",
        "''",
        "'expected hexadecimal character'",
        "'unknown escape sequence'",
        "'unexpected end of the document within a double quoted scalar'",
        "'unexpected end of the stream within a double quoted scalar'",
        "'mapping'",
        "'sequence'",
        "'missed comma between flow collection entries'",
        "'unexpected end of the stream within a flow collection'",
        "'scalar'",
        "''",
        "'repeat of a chomping mode identifier'",
        "'bad explicit indentation width of a block scalar; it cannot be less than one'",
        "'repeat of an indentation width identifier'",
        "'\\n'",
        "'\\n'",
        "'\\n'",
        "'\\n'",
        "' '",
        "'\\n'",
        "'\\n'",
        "'bad indentation of a sequence entry'",
        "'sequence'",
        "'incomplete explicit mapping pair; a key node is missed'",
        "'a whitespace character is expected after the key-value separator within a block mapping'",
        "'can not read an implicit mapping pair; a colon is missed'",
        "'can not read a block mapping entry; a multiline key may not be an implicit key'",
        "'bad indentation of a mapping entry'",
        "'mapping'",
        "'duplication of a tag property'",
        "'!!'",
        "'!'",
        "'unexpected end of the stream within a verbatim tag'",
        "'named tag handle cannot contain such characters'",
        "'tag suffix cannot contain exclamation marks'",
        "'tag suffix cannot contain flow indicator characters'",
        "'tag name cannot contain such characters: '",
        "'!'",
        "'!'",
        "'!!'",
        "'tag:yaml.org,2002:'",
        "'undeclared tag handle \"'",
        "'\"'",
        "'duplication of an anchor property'",
        "'name of an anchor node must contain at least one character'",
        "'name of an alias node must contain at least one character'",
        "'unidentified alias \"'",
        "'\"'",
        "'open'",
        "'alias node should not have any properties'",
        "'?'",
        "'!'",
        "'?'",
        "'fallback'",
        "'fallback'",
        "'unacceptable node kind for !<'",
        "'> tag; it should be \"'",
        "'\", not \"'",
        "'\"'",
        "'cannot resolve a node with !<'",
        "'> explicit tag'",
        "'unknown tag !<'",
        "'>'",
        "'close'",
        "'directive name must not be less than one character in length'",
        "'unknown document directive \"'",
        "'\"'",
        "'directives end mark is expected'",
        "'non-ASCII line breaks are interpreted as content'",
        "'end of the stream or a document separator is expected'",
        "'\\n'",
        "'\\0'",
        "'expected a single document in the stream, but found more'",
        "'\\\\0'",
        "'\\\\a'",
        "'\\\\b'",
        "'\\\\t'",
        "'\\\\n'",
        "'\\\\v'",
        "'\\\\f'",
        "'\\\\r'",
        "'\\\\e'",
        "'\\\\\"'",
        "'\\\\\\\\'",
        "'\\\\N'",
        "'\\\\_'",
        "'\\\\L'",
        "'\\\\P'",
        "'y'",
        "'Y'",
        "'yes'",
        "'Yes'",
        "'YES'",
        "'on'",
        "'On'",
        "'ON'",
        "'n'",
        "'N'",
        "'no'",
        "'No'",
        "'NO'",
        "'off'",
        "'Off'",
        "'OFF'",
        "'!!'",
        "'tag:yaml.org,2002:'",
        "'fallback'",
        "'x'",
        "'u'",
        "'U'",
        "'code point within a string may not be greater than 0xFFFFFFFF'",
        "'\\\\'",
        "'0'",
        "'schema'",
        "'indent'",
        "'skipInvalid'",
        "'flowLevel'",
        "'flowLevel'",
        "'styles'",
        "'sortKeys'",
        "'lineWidth'",
        "'noRefs'",
        "'noCompatMode'",
        "''",
        "' '",
        "''",
        "'\\n'",
        "'\\n'",
        "'\\n'",
        "' '",
        "' '",
        "' '",
        "' '",
        "\"''\"",
        "\"'\"",
        "\"'\"",
        "\"'\"",
        "\"''\"",
        "\"'\"",
        "'|'",
        "'>'",
        "'\"'",
        "'\"'",
        "'impossible error: invalid scalar style'",
        "' '",
        "''",
        "'\\n'",
        "'\\n'",
        "'\\n'",
        "'+'",
        "''",
        "'-'",
        "'\\n'",
        "'\\n'",
        "'\\n'",
        "'\\n'",
        "' '",
        "' '",
        "''",
        "'\\n'",
        "''",
        "''",
        "' '",
        "''",
        "'\\n'",
        "'\\n'",
        "'\\n'",
        "''",
        "''",
        "', '",
        "'['",
        "']'",
        "''",
        "'- '",
        "'[]'",
        "''",
        "''",
        "', '",
        "'? '",
        "': '",
        "'{'",
        "'}'",
        "''",
        "'function'",
        "'sortKeys must be a boolean or a function'",
        "''",
        "'?'",
        "'?'",
        "'? '",
        "':'",
        "': '",
        "'{}'",
        "'object'",
        "'?'",
        "'[object Function]'",
        "'!<'",
        "'> tag resolver accepts not \"'",
        "'\" style'",
        "'[object Object]'",
        "'[object Array]'",
        "'?'",
        "'*ref_'",
        "'[object Object]'",
        "'&ref_'",
        "'&ref_'",
        "' '",
        "'[object Array]'",
        "'&ref_'",
        "'&ref_'",
        "' '",
        "'[object String]'",
        "'?'",
        "'unacceptable kind of an object to dump '",
        "'?'",
        "'!<'",
        "'> '",
        "'object'",
        "'\\n'",
        "''",
        "'Function '",
        "' is deprecated and cannot be used.'",
        "'scan'",
        "'parse'",
        "'compose'",
        "'addConstructor'",
        "'script[type=\"text/front-matter\"]'",
        "\"Untitled\"",
        "\"No description.\"",
        "\"string\"",
        "\" \"",
        "\" \"",
        "\"string\"",
        "\"jan\"",
        "\"feb\"",
        "\"mar\"",
        "\"apr\"",
        "\"may\"",
        "\"jun\"",
        "\"jul\"",
        "\"aug\"",
        "\"sep\"",
        "\"oct\"",
        "\"nov\"",
        "\"dec\"",
        "','",
        "'{'",
        "'}'",
        "' '",
        "'='",
        "\"\"",
        "\"\"",
        "' '",
        "'\\r'",
        "'\\t'",
        "'\\n'",
        "\"Token mismatch, expected \"",
        "\", found \"",
        "'@'",
        "'@'",
        "\"%\"",
        "\"\\n\"",
        "\"{\"",
        "'}'",
        "\"}\"",
        "'{'",
        "\"Unterminated value\"",
        "'\\\\'",
        "''",
        "\"}\"",
        "'{'",
        "'}'",
        "\"Unterminated value:\"",
        "'\"'",
        "'\"'",
        "'\"'",
        "\"Unterminated value:\"",
        "'\\\\'",
        "\"{\"",
        "'\"'",
        "\"^[0-9]+$\"",
        "\"Value expected:\"",
        "' for key: '",
        "\"#\"",
        "\"#\"",
        "\"\"",
        "\"Runaway key\"",
        "\"=\"",
        "\"=\"",
        "\"... = value expected, equals sign missing:\"",
        "'entryTags'",
        "'entryTags'",
        "\",\"",
        "\",\"",
        "\"}\"",
        "'entryTags'",
        "'citationKey'",
        "'entryType'",
        "\",\"",
        "\"@\"",
        "\"@\"",
        "'entryType'",
        "'PREAMBLE'",
        "'entry'",
        "'entryType'",
        "'COMMENT'",
        "'entry'",
        "\"{\"",
        "\"@STRING\"",
        "\"@PREAMBLE\"",
        "\"@COMMENT\"",
        "\"}\"",
        "''",
        "\"@\"",
        "'{'",
        "', '",
        "''",
        "', '",
        "'= {'",
        "'}'",
        "'}\\n\\n'",
        "'script[type=\"text/bibliography\"]'",
        "\" \"",
        "\"a\"",
        "\"A\"",
        "\"b\"",
        "\"B\"",
        "\"c\"",
        "\"d\"",
        "\"e\"",
        "\"H\"",
        "\"I\"",
        "\"j\"",
        "\"L\"",
        "\"m\"",
        "\"M\"",
        "\"p\"",
        "\"S\"",
        "\"U\"",
        "\"w\"",
        "\"W\"",
        "\"x\"",
        "\"X\"",
        "\"y\"",
        "\"Y\"",
        "\"Z\"",
        "\"%\"",
        "\"a\"",
        "\"A\"",
        "\"b\"",
        "\"B\"",
        "\"c\"",
        "\"d\"",
        "\"e\"",
        "\"H\"",
        "\"I\"",
        "\"j\"",
        "\"L\"",
        "\"m\"",
        "\"M\"",
        "\"p\"",
        "\"S\"",
        "\"U\"",
        "\"w\"",
        "\"W\"",
        "\"x\"",
        "\"X\"",
        "\"y\"",
        "\"Y\"",
        "\"Z\"",
        "\"%\"",
        "\"a\"",
        "\"A\"",
        "\"b\"",
        "\"B\"",
        "\"c\"",
        "\"d\"",
        "\"e\"",
        "\"H\"",
        "\"I\"",
        "\"j\"",
        "\"L\"",
        "\"m\"",
        "\"M\"",
        "\"p\"",
        "\"S\"",
        "\"U\"",
        "\"w\"",
        "\"W\"",
        "\"x\"",
        "\"X\"",
        "\"y\"",
        "\"Y\"",
        "\"Z\"",
        "\"%\"",
        "\"e\"",
        "\" \"",
        "\"0\"",
        "\"\"",
        "\"\"",
        "\"p\"",
        "\"W\"",
        "\"U\"",
        "\"w\"",
        "\"W\"",
        "\"Z\"",
        "\"W\"",
        "\"Z\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"-\"",
        "\"\"",
        "\"_\"",
        "\" \"",
        "\"0\"",
        "\"0\"",
        "\"-\"",
        "\"\"",
        "\"\"",
        "\"\\\\$&\"",
        "\"^(?:\"",
        "\"|\"",
        "\")\"",
        "\"i\"",
        "\"00\"",
        "\"-\"",
        "\"+\"",
        "\"0\"",
        "\"0\"",
        "\"+0000\"",
        "\"%\"",
        "\"%x, %X\"",
        "\"%-m/%-d/%Y\"",
        "\"%-I:%M:%S %p\"",
        "\"AM\"",
        "\"PM\"",
        "\"Sunday\"",
        "\"Monday\"",
        "\"Tuesday\"",
        "\"Wednesday\"",
        "\"Thursday\"",
        "\"Friday\"",
        "\"Saturday\"",
        "\"Sun\"",
        "\"Mon\"",
        "\"Tue\"",
        "\"Wed\"",
        "\"Thu\"",
        "\"Fri\"",
        "\"Sat\"",
        "\"January\"",
        "\"February\"",
        "\"March\"",
        "\"April\"",
        "\"May\"",
        "\"June\"",
        "\"July\"",
        "\"August\"",
        "\"September\"",
        "\"October\"",
        "\"November\"",
        "\"December\"",
        "\"Jan\"",
        "\"Feb\"",
        "\"Mar\"",
        "\"Apr\"",
        "\"May\"",
        "\"Jun\"",
        "\"Jul\"",
        "\"Aug\"",
        "\"Sep\"",
        "\"Oct\"",
        "\"Nov\"",
        "\"Dec\"",
        "\"%Y-%m-%dT%H:%M:%S.%LZ\"",
        "\"2000-01-01T00:00:00.000Z\"",
        "\"dt-cite\"",
        "\"key\"",
        "\",\"",
        "\"No bibliography entry found for: \"",
        "\"\"",
        "\"https://varianceofgradients.github.io/\"",
        "\"https://github.com/chirag126/VOG\"",
        "\"https://cdn.glitch.com/02868eea-fe84-443e-964a-8f04885fa5fa%2Faccuracy_distribution.png?v=1574118354833\"",
        "\"Invalid\"",
        "\"Invalid\"",
        "\"%a, %d %b %Y %H:%M:%S %Z\"",
        "\"Jan\"",
        "\"Feb\"",
        "\"March\"",
        "\"April\"",
        "\"May\"",
        "\"June\"",
        "\"July\"",
        "\"Aug\"",
        "\"Sept\"",
        "\"Oct\"",
        "\"Nov\"",
        "\"Dec\"",
        "\"0\"",
        "\", et al.\"",
        "\" & \"",
        "\", \"",
        "\" and \"",
        "\" \"",
        "\"Untitled\"",
        "\"iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAAsTAAALEwEAmpwYAAACC2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjE8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+MjwvdGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KD0UqkwAADNBJREFUeAHdmgmsnkUVhsGVtdSKsqdUyhakILJTZBEQFyAIAaIhUrYYY1yIBBdESFtFRBBFwQ1lU1DZRI0KgrJUSJStggUidKO0LIWwQwF9nv+b92b697u3/+29l8U3eb/Zzpw558yZmf8Wll+uf7yBIbl8JfIS9Zer9lCqb2Sy+muo2zVedbwFC7qNi1GODQXqHUiHYwbnFUG9u1lQA14ojdGUa0HlHi6kWO7N8EX4XxuDgPMWVfJrU18dqv9ROBcG3bLpH9HSRcVYeAacDp+ET8EZ8Bw4AYrB7lJ0O/cAeCm8Hz4Ln4Oz4BXwEBjUc9I3YuWbiubdKOdDd7eNGvwxKHoNQhx5K3Mugm16677LkRkFReY2rRH6xvlN0f8Y1BjLr8KJcAf4efgAjKG7UBeZ27SW/NbjVzOc+TdTPxKqfyc4CV4HM34D9RWhGNEg1JdddkdHt+ksvfjnXTT/DTXyljLk+VVHG82QFYrcKZRx7pulr60w6JH7XhHIGm3yQ+5LGo9Hk+fdxY8oWt09x3VupdK3P2UMbAtSEVusMHALyzzvkSC61R87HPs2dA3tmQDFiGSBDrqQMACrQA29Bgoj720vcntfRf1+OA4eD/8IlXscPg29MJ8pdM4s6MX2Nuhl5xzh2tHd6aj6TqbuHF+JveAd0N8HrhN7qQ4PjL7IzuqcT5/QyCBy9t0JNWRpNAAGRipr8AZC1lDmPOicc20U1OPpG1KpM0ZV+M6L9aEBeBCadtklLyR32F1ZBwp3RufGQM/6ytCjoqy/J9S/GgzmpULZtps6HMwvFXWPGOoddlfvhRvCz8JPQJ88HdFYnRe+BjplYA6EztFIdRkEaQAMhnX7j4EfgKNgUDubvjooo0unR2pE4aJJreOoa5g8E+pEoMxkuAg6/iPYK45F0DkLYIKQNWsduQhdN6/NCUVAO+WIIAur/EqYIPgcXgIvhvdV/bdTT3CS6h6Xmu58ZLzJH4bqPREKA1BTGxKUz1FX1otvIhTqGywGFbAsoCFnwwShu7ycsZzrOnDdxrm4R0Ao7xGLrsPt7AcH0e9roeyvK5mB1qrEOs+pG6G81C/bPQWjXmQrJk2FGmEWnAZ3hUEtm76ULpqAbkb9NhjnU/6cvp3henDdUvc3QsZnln6Knn8DmI39IcHob7yv3zSM8X2dVUVFAzlfG3EAsv6VF6dOpf6Xqm3/Y3BhV9902ptAUetretq/7nKwNRV/R0yCH4Z5taj2HMzOwrnFddg/ZORAqMdPRDCO6+THy0RlvgxvgblQlXsZ+up8A+ZXZ6/OZ0O2Z+6fi56sbTkbToEJUkq6lg7PTi/nJ+fdJ/A3MAb8i/qWUNQO+avTC25X6E0feY+ESBCaVv/fZOu+iPg0R89D1O+FBjZ9V1GP3syja2gwOImoaavDWfAy6qOgcOeVdeHuxf2ZrMHO+xQUdbCaniW/2fkNGDJ7nD8Hmm1rQPVuCn8IY9NPqAce9wGhwQrJtiyoHdkfmSdgFppMPeh2JoGwPzqupe7cC8ukBLU0W4vInMeocw1isq17wslFxizxqIjMb1rVV4cdtAw0uu6rnapT2F+MPmVBdint7jJH5xQGdOJumDn1+t3zImOGzYfOnVKEPIbOlbHTI+eRUO54KNo2tbMjrQPNnM43l93KtH4FVSpnwM2hcGeXpke5BGA/6up4CUZHjKdrCWRM2Zzz3YtUdNqsg3gObdf4mQMi6de0mrYpIraAe8DxUEdmwr/Cm+Dz8N3wfJiU8xekZ+9JaICU6QVZ7x8IO3dVaIr6FNbG02yFtumUpYEQtoO6bnD7RYJheTr0b3ond9O/EQ6Fj1RjU6kHdfTTN1Cp4VL8HbqeOyX6PaOM5QisRv0x6LwToLDPcQPocRBuyl2wlsu6fcoUvKQIKTgHXgQvgDk/9odeegfDwEWWBUnn05is7lthNiSOtumNzNll3sOUm7QJ0nciVLdZsjMUnQAbhaRa/mpT8PtwdRh43ifDOD+X+oQyqJExpnQNqshO+5Ko36PgERMDBTXZdjRysctNc1O8HA3sBlBfdFyZC2HQ8VvjhW9mdvmCTk/757t0q2ghHFNEhuK8KrIB61J/Aar/MCgMvON96VraWVNnn4MJQMr59OlPPTaNtoERCXpf+u9CZyZv2xFpop/FVyp94yhz5g4rfUnh0hxS8U9ma4d3TTd0WsMTsKOox+bZ1A+H11V9GfNpPgPGzj7nVaiQ8JeTmAlNI+GtaeqI3OqOzYKjoTsm6t1pegb/9bJ6Fv4BbgW3ge+B3jOPwsdhXgyqy30BfssKuB/uDe+B58AdoTrU+QD8WykpOhu+yEqQaO5Lh8HwIlkfiqRZXTclc1SOcQAMdE4biYG/WWcMYr+A2qGzlhrr7e0O5oKbQt0xeQdcC4pkadNa/FtnzmIjuQM2o9cdUOmkImEEvWh00B0X+8AsvnunpzpPpT2YIun4QSbNhdHdVpp9V1Qy11OPXdkEs9G6docJMF1LIhngyO+gC8+C74XdGEvHnVAZdyVw0WVBjNb53NJegj5r+8Ed4J7wa3A+dN3wUurZcR0dEhKhrdGSW3gB9ZPgRLg99MzNhDFAo0UyqGn1/s2FtCZT3Fn1zoTbwTaMpXMaVM7jkbd8FepDhjuYIHgX1E9HHK7LI8uKdfYMxoh6vclMVLdnPc6rV3s8HpYJ8jupz4XKnw+DZbUj8zulRmWhDalfCOufuz59V0KzRLioc5YFOiVWhDdBHfLHitCGbodcx2CIT0LlzdBxUGSsaQ3xG+NU463sXeCTtAYMEqi0B1vG4I2Y6BOnQx8qSvrTnaBsgpzPs3P2KHNqm0tXb0XbRM9XdmEhdRlEXpnhgE/qqKLIQAgda0Oy7QkGlX0HzNz+5rTpWawvDi3WScMISwORHfGWHi7HUdWBz+7TcDUYZzoDLZ84adCUF84VCU7TGsQ3adXfFIPgqyCH0/k4Mw+9/4Fit6boC3hp9hXZiG3p8QUxC2ZCscwBaKa/8l8NTvC/Q92AmNrjoPD3geOR02Hh3TEdKu+FHCQ4ab8uSp0U68LZUKdug/lZS3Ux6LxOKyf3hiLBaVqvk6+7G8N3o56XQMd8eo+Bm0KDMR4eBu+GcX4KdaEe+bqCBucZ9OnLj66HqNeB0NmnYJxOOZs+fz+IZFHTeo19Pb+yhu04vz/156GOuev+3tgIXgwfgHHYcj68Fnop254Khbq61+gMvFofjXFXcol5Oa0ATffa+YNp+6rozDzo3/01xtLYCx4IzZKNofBvfef4fO4IxWsmC3R2oN3Ib45DkdMJOQf6Z7gwUAlcp6Pl83b6PALOvQ66pkg50PqN5Ah945zqvZ3PhL+Fl8FToH9NiiNhnJ9JfTwUOh94R5gxBqO7VOYgGB1ftAPkWDWt5g8o9bwiyOJrstqfYIyrSy+6q2HOvD9+1oOi1xSud/cC5qn/GZgMchO6dS0tK5kyNLio8Hf5DBinfbLOhxfBuVW/47dCgyXc4cEgwR7LpDlQfTfCn8J7oMfjZjgVJsBmQh08msODOsV0VmP8yfylLvWm91nQcXkcFHXaNz29fbPLRyEenW2lT6jHRdS2Nj3D8DW9xOYwqX1Sp6f5uLu1kz5vGmpG5F9xBrszWRMVff8nqTqnwRPgZ+DZcAFMUD5CXdRzm54hfhPVI9DjYvPgOkVn7fiqpc9nK//ut3PpS0qX5lKLODEJyTh4asusCfTdUWRmU65YZAYb8DKtvYiy4xnWmOthFoqhzsw9sTb1B6Gyh0AxmDsgAXfeVVA9l9socG0Dv1JpT6T094Jyh5a+JdarlRaZnosEwJtY+Dd6Fqj1JgCmfYzL3/HO6xVZzyzbskw6t5Q6rrPPQe8hM+sGOA0Kg9GK2tBWgQE6Y9CdRca7YKdSd8wsqDNhH9r+o8dLcDoU1nuFOykM4uhOrTnrVheVtsWLMLZ534gxTdHJhlIdehHnTL3boQYajA1gN95HxwKojD+OxGCDn/XWYm50fbSjqUn9OO3uR/Ya6q75gyKXDC3NoRdJ731R5UJyHjwWetHtCr8On4SOmfobQzHYANTyv2e++vyvRIGOa0+c3IV67oA8hxnLnCGXRj2GHU3d9NOwNj5K//uhyA41rd6/CbgOZQ1/aqc/mragkldgRjWeLIncsJQGIEHYjvov4X3Q6Ptj5C54FhwHRbexTW9v36yj9I9hgnAj9a/AT0P/DnkEZszjJ5Y16M3spXyNrCkY+OR5U/ser55OyuFIwQTQNU+HcbS7nMnYnlD06/xwpkSC4DPUDXdOw9vGumV7aavL4yZ2gAfCraD/ZD4XevmZiR47ne/3tRnOALBOBzrbHXENeLkZHrbvgI6VVQyUa5sd/5dwAw1E90a2bUJrAP4Hq/oFmGqs/CIAAAAASUVORK5CYII=\\n\"",
        "''",
        "''",
        "'&quot;'",
        "'&amp;'",
        "'&#39;'",
        "'&lt;'",
        "'&gt;'",
        "\"head\"",
        "\"    <meta name=\\\"\"",
        "\"\\\" content=\\\"\"",
        "\"\\\" >\\n\"",
        "\"\\n    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge,chrome=1\\\">\\n    <link rel=\\\"icon\\\" type=\\\"image/png\\\" href=\\\"data:image/png;base64,\"",
        "\"\\\">\\n    <link href=\\\"/rss.xml\\\" rel=\\\"alternate\\\" type=\\\"application/rss+xml\\\" title=\\\"Articles from Distill\\\">\\n    <link rel=\\\"canonical\\\" href=\\\"\"",
        "\"\\\">\\n    <title>\"",
        "\"</title>\\n  \"",
        "\"\\n    <!--  https://schema.org/Article -->\\n    <meta property=\\\"article:published\\\" itemprop=\\\"datePublished\\\" content=\\\"\"",
        "\"-\"",
        "\"-\"",
        "\"\\\" />\\n    <meta property=\\\"article:created\\\" itemprop=\\\"dateCreated\\\" content=\\\"\"",
        "\"\\\" />\\n    <meta property=\\\"article:modified\\\" itemprop=\\\"dateModified\\\" content=\\\"\"",
        "\"\\\" />\\n  \"",
        "\"\\n      <meta property=\\\"article:author\\\" content=\\\"\"",
        "\" \"",
        "\"\\\" />\"",
        "\"\\n      <!--  https://scholar.google.com/intl/en/scholar/inclusion.html#indexing -->\\n\"",
        "\"citation_title\"",
        "\"citation_volume\"",
        "\"citation_issue\"",
        "\"citation_firstpage\"",
        "\"e\"",
        "\"citation_doi\"",
        "\"citation_journal_title\"",
        "\"citation_journal_abbrev\"",
        "\"citation_issn\"",
        "\"citation_publisher\"",
        "\"citation_fulltext_world_readable\"",
        "\"\"",
        "\"0\"",
        "\"citation_online_date\"",
        "\"/\"",
        "\"/\"",
        "\"citation_publication_date\"",
        "\"/\"",
        "\"/\"",
        "\"citation_author\"",
        "\", \"",
        "\"citation_author_institution\"",
        "\"No bibliography data fround for \"",
        "\"citation_reference\"",
        "\"citation_title=\"",
        "\";\"",
        "\" and \"",
        "\",\"",
        "\",\"",
        "\",\"",
        "\" \"",
        "\" \"",
        "\" \"",
        "\"citation_author=\"",
        "\" \"",
        "\";\"",
        "\"year\"",
        "\"citation_publication_date=\"",
        "\";\"",
        "\"citation_arxiv_id=\"",
        "\";\"",
        "\"journal\"",
        "\"citation_journal_title=\"",
        "\";\"",
        "\"volume\"",
        "\"citation_volume=\"",
        "\";\"",
        "\"issue\"",
        "\"number\"",
        "\"citation_number=\"",
        "\";\"",
        "\"\"",
        "\"dt-banner\"",
        "\"body\"",
        "\"click\"",
        "\"none\"",
        "'object'",
        "'object'",
        "'string'",
        "'function'",
        "'exports'",
        "'[object Array]'",
        "'function'",
        "'array'",
        "'\\\\$&'",
        "'object'",
        "'&'",
        "'&amp;'",
        "'<'",
        "'&lt;'",
        "'>'",
        "'&gt;'",
        "'\"'",
        "'&quot;'",
        "\"'\"",
        "'&#39;'",
        "'/'",
        "'&#x2F;'",
        "'`'",
        "'&#x60;'",
        "'='",
        "'&#x3D;'",
        "'string'",
        "'Invalid tags: '",
        "'\\\\s*'",
        "'\\\\s*'",
        "'\\\\s*'",
        "'}'",
        "'text'",
        "'\\n'",
        "'name'",
        "'='",
        "'{'",
        "'&'",
        "'Unclosed tag at '",
        "'#'",
        "'^'",
        "'/'",
        "'Unopened section \"'",
        "'\" at '",
        "'Unclosed section \"'",
        "'\" at '",
        "'name'",
        "'{'",
        "'&'",
        "'='",
        "'Unclosed section \"'",
        "'\" at '",
        "'text'",
        "'text'",
        "'#'",
        "'^'",
        "'/'",
        "''",
        "''",
        "''",
        "''",
        "'.'",
        "'.'",
        "'.'",
        "''",
        "'#'",
        "'^'",
        "'>'",
        "'&'",
        "'name'",
        "'text'",
        "''",
        "'object'",
        "'string'",
        "'number'",
        "'string'",
        "'Cannot use higher-order sections without the original template'",
        "'mustache.js'",
        "'2.3.0'",
        "'{{'",
        "'}}'",
        "'string'",
        "'Invalid template! Template should be a \"string\" '",
        "'but \"'",
        "'\" was given as the first '",
        "'argument for mustache#render(template, view, partials)'",
        "\"\\n<style>\\n  dt-byline {\\n    font-size: 12px;\\n    line-height: 18px;\\n    display: block;\\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\\n    border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n    color: rgba(0, 0, 0, 0.5);\\n    padding-top: 12px;\\n    padding-bottom: 12px;\\n  }\\n  dt-article.centered dt-byline {\\n    text-align: center;\\n\\n  }\\n  dt-byline a,\\n  dt-article dt-byline a {\\n    text-decoration: none;\\n    border-bottom: none;\\n  }\\n  dt-article dt-byline a:hover {\\n    text-decoration: underline;\\n    border-bottom: none;\\n  }\\n  dt-byline .authors {\\n    text-align: left;\\n  }\\n  dt-byline .name {\\n    display: inline;\\n    text-transform: uppercase;\\n  }\\n  dt-byline .affiliation {\\n    display: inline;\\n  }\\n  dt-byline .date {\\n    display: block;\\n    text-align: left;\\n  }\\n  dt-byline .year, dt-byline .month {\\n    display: inline;\\n  }\\n  dt-byline .citation {\\n    display: block;\\n    text-align: left;\\n  }\\n  dt-byline .citation div {\\n    display: inline;\\n  }\\n\\n  @media(min-width: 768px) {\\n    dt-byline {\\n    }\\n  }\\n\\n  @media(min-width: 1080px) {\\n    dt-byline {\\n      border-bottom: none;\\n      margin-bottom: 70px;\\n    }\\n\\n    dt-byline a:hover {\\n      color: rgba(0, 0, 0, 0.9);\\n    }\\n\\n    dt-byline .authors {\\n      display: inline-block;\\n    }\\n\\n    dt-byline .author {\\n      display: inline-block;\\n      margin-right: 12px;\\n      /*padding-left: 20px;*/\\n      /*border-left: 1px solid #ddd;*/\\n    }\\n\\n    dt-byline .affiliation {\\n      display: block;\\n    }\\n\\n    dt-byline .author:last-child {\\n      margin-right: 0;\\n    }\\n\\n    dt-byline .name {\\n      display: block;\\n    }\\n\\n    dt-byline .date {\\n      border-left: 1px solid rgba(0, 0, 0, 0.1);\\n      padding-left: 15px;\\n      margin-left: 15px;\\n      display: inline-block;\\n    }\\n    dt-byline .year, dt-byline .month {\\n      display: block;\\n    }\\n\\n    dt-byline .citation {\\n      border-left: 1px solid rgba(0, 0, 0, 0.15);\\n      padding-left: 15px;\\n      margin-left: 15px;\\n      display: inline-block;\\n    }\\n    dt-byline .citation div {\\n      display: block;\\n    }\\n  }\\n</style>\\n\\n\"",
        "\"\\n<div class=\\\"byline\\\">\\n  <div class=\\\"authors\\\">\\n  {{#authors}}\\n    <div class=\\\"author\\\">\\n      {{#personalURL}}\\n        <a class=\\\"name\\\" href=\\\"{{personalURL}}\\\">{{name}}</a>\\n      {{/personalURL}}\\n      {{^personalURL}}\\n        <div class=\\\"name\\\">{{name}}</div>\\n      {{/personalURL}}\\n      {{#affiliation}}\\n        {{#affiliationURL}}\\n          <a class=\\\"affiliation\\\" href=\\\"{{affiliationURL}}\\\">{{affiliation}}</a>\\n        {{/affiliationURL}}\\n        {{^affiliationURL}}\\n          <div class=\\\"affiliation\\\">{{affiliation}}</div>\\n        {{/affiliationURL}}\\n      {{/affiliation}}\\n    </div>\\n    {{/authors}}\\n  </div>\\n  {{#publishedYear}}\\n  <div class=\\\"date\\\">\\n    <div class=\\\"month\\\">{{publishedMonth}}. {{publishedDay}}</div>\\n    <div class=\\\"year\\\">{{publishedYear}}</div>\\n  </div>\\n  {{/publishedYear}}\\n  {{#publishedYear}}\\n  <a class=\\\"citation\\\" href=\\\"#citation\\\">\\n    <div>Citation:</div>\\n    <div>{{concatenatedAuthors}}, {{publishedYear}}</div>\\n  </a>\\n  {{/publishedYear}}\\n</div>\\n\"",
        "'dt-byline'",
        "\"\\n<style>\\n  dt-appendix {\\n    display: block;\\n    font-size: 14px;\\n    line-height: 24px;\\n    margin-bottom: 0;\\n    border-top: 1px solid rgba(0,0,0,0.1);\\n    color: rgba(0,0,0,0.5);\\n    background: rgb(250, 250, 250);\\n    padding-top: 36px;\\n    padding-bottom: 60px;\\n  }\\n  dt-appendix h3 {\\n    font-size: 16px;\\n    font-weight: 500;\\n    margin-top: 18px;\\n    margin-bottom: 18px;\\n    color: rgba(0,0,0,0.65);\\n  }\\n  dt-appendix .citation {\\n    font-size: 11px;\\n    line-height: 15px;\\n    border-left: 1px solid rgba(0, 0, 0, 0.1);\\n    padding-left: 18px;\\n    border: 1px solid rgba(0,0,0,0.1);\\n    background: rgba(0, 0, 0, 0.02);\\n    padding: 10px 18px;\\n    border-radius: 3px;\\n    color: rgba(150, 150, 150, 1);\\n    overflow: hidden;\\n    margin-top: -12px;\\n  }\\n  dt-appendix .references {\\n    font-size: 12px;\\n    line-height: 20px;\\n  }\\n  dt-appendix a {\\n    color: rgba(0, 0, 0, 0.6);\\n  }\\n  dt-appendix ol,\\n  dt-appendix ul {\\n    padding-left: 24px;\\n  }\\n</style>\\n\\n<div class=\\\"l-body\\\">\\n</div>\\n\"",
        "'dt-appendix'",
        "\"\"",
        "\"dt-fn\"",
        "\"<h3>Footnotes</h3><dt-fn-list></dt-fn-list>\"",
        "\"dt-cite\"",
        "\"<h3>References</h3><dt-bibliography></dt-bibliography>\"",
        "\"div.l-body\"",
        "'dt-appendix > div'",
        "\"\"",
        "\"<h3>Updates and Corrections</h3>\\n    <p><a href=\\\"\"",
        "\"\\\">View all changes</a> to this article since it was first published. If you see a mistake or want to suggest a change, please <a class=\\\"github-issue\\\" href=\\\"\"",
        "\"/issues/new\\\">create an issue on GitHub</a>.</p>\"",
        "\"<h3 id=\\\"citation\\\">Citations and Reuse</h3>\\n    <p>Diagrams and text are licensed under Creative Commons Attribution <a href=\\\"https://creativecommons.org/licenses/by/2.0/\\\">CC-BY 2.0</a>, unless noted otherwise, with the <a class=\\\"github\\\" href=\\\"\"",
        "\"\\\">source available on GitHub</a>. The figures that have been reused from other sources don't fall under this license and can be recognized by a note in their caption: “Figure from …”.</p>\\n\\n    <p>For attribution in academic contexts, please cite this work as</p>\\n    <pre class=\\\"citation short\\\">\"",
        "\", \\\"\"",
        "\"\\\", \"",
        "\", \"",
        "\". http://doi.org/\"",
        "\"</pre>\\n\\n    <p>BibTeX citation</p>\\n<pre class=\\\"citation long\\\">@article{\"",
        "\",\\n  author = {\"",
        "\"},\\n  title = {\"",
        "\"},\\n  journal = {\"",
        "\"},\\n  year = {\"",
        "\"},\\n  url = {\"",
        "\"},\\n  doi = {\"",
        "\"}\\n}</pre>\"",
        "\"\\n    dt-cite {\\n      color: hsla(206, 90%, 20%, 0.7);\\n    }\\n    dt-cite .citation-number {\\n      cursor: default;\\n      white-space: nowrap;\\n      font-family: -apple-system, BlinkMacSystemFont, \\\"Roboto\\\", Helvetica, sans-serif;\\n      font-size: 75%;\\n      color: hsla(206, 90%, 20%, 0.7);\\n      display: inline-block;\\n      line-height: 1.1em;\\n      text-align: center;\\n      position: relative;\\n      top: -2px;\\n      margin: 0 2px;\\n    }\\n    figcaption dt-cite .citation-number {\\n      font-size: 11px;\\n      font-weight: normal;\\n      top: -2px;\\n      line-height: 1em;\\n    }\\n  \"",
        "\"style\"",
        "\"body\"",
        "\"div\"",
        "\"<div id=\\\"cite-hover-boxes-container\\\"></div>\"",
        "\"body\"",
        "\"dt-cite-hover-box-\"",
        "\"<div style=\\\"display:none;\\\" class=\\\"dt-hover-box\\\" id=\\\"\"",
        "\"\\\" >\"",
        "\"</div>\"",
        "\"dt-cite\"",
        "\"key\"",
        "\",\"",
        "\"\"",
        "\"<br><br>\"",
        "\"\"",
        "\" \"",
        "\"<span id=\\\"citation-\"",
        "\"\\\" data-hover-ref=\\\"\"",
        "\"\\\">\"",
        "\"<span class=\\\"citation-number\\\">\"",
        "\"</span></span>\"",
        "\"dt-bibliography\"",
        "\"ol\"",
        "\"li\"",
        "\"\"",
        "\"?\"",
        "\"[\"",
        "\", \"",
        "\"]\"",
        "\" and \"",
        "\",\"",
        "\", \"",
        "\" & \"",
        "\", \"",
        "\", et al., \"",
        "\"?\"",
        "\", \"",
        "\" and \"",
        "\",\"",
        "\",\"",
        "\",\"",
        "\" \"",
        "\" \"",
        "\" \"",
        "\"\"",
        "\" \"",
        "\".\"",
        "\".\"",
        "\"${F}\"",
        "\"${L}\"",
        "\"${I}\"",
        "\"\"",
        "\"volume\"",
        "\"(\"",
        "\")\"",
        "\"\"",
        "\", Vol \"",
        "\"pages\"",
        "\", pp. \"",
        "\"\"",
        "\". \"",
        "\"publisher\"",
        "\".\"",
        "\".\"",
        "\"url\"",
        "\"http://arxiv.org/abs/\"",
        "\"\"",
        "\".pdf\"",
        "\"PDF\"",
        "\".html\"",
        "\"HTML\"",
        "\" &ensp;<a href=\\\"\"",
        "\"\\\">[\"",
        "\"link\"",
        "\"]</a>\"",
        "\"\"",
        "\"doi\"",
        "\"<br>\"",
        "\"\"",
        "\" <a href=\\\"https://doi.org/\"",
        "\"\\\" style=\\\"text-decoration:inherit;\\\">DOI: \"",
        "\"</a>\"",
        "\"\"",
        "\"<b>\"",
        "\"</b> \"",
        "\"<br>\"",
        "\"${L}, ${I}\"",
        "\", \"",
        "\" and \"",
        "\", \"",
        "\". \"",
        "\". \"",
        "\"?\"",
        "\"\"",
        "\"<b>\"",
        "\"</b>\"",
        "\"<br>\"",
        "\"${I} ${L}\"",
        "\", \"",
        "\".\"",
        "\" \"",
        "\". \"",
        "\" \"",
        "\"<br>\"",
        "\"?\"",
        "\" and \"",
        "\",\"",
        "\" \"",
        "\"http://search.labs.crossref.org/dois?\"",
        "\" \"",
        "\" \"",
        "\" \"",
        "\"div\"",
        "\"<div id=\\\"footnote-hover-boxes-container\\\"></div>\"",
        "\"body\"",
        "\"dt-fn-hover-box-\"",
        "\"<div style=\\\"display:none;\\\" class=\\\"dt-hover-box\\\" id=\\\"\"",
        "\"\\\" >\"",
        "\"</div>\"",
        "\"dt-fn\"",
        "\"\"",
        "\"fn-\"",
        "\"&#39;\"",
        "\"<sup><span id=\\\"\"",
        "\"\\\" data-hover-ref=\\\"\"",
        "\"\\\" style=\\\"cursor:pointer\\\">\"",
        "\"</span></sup>\"",
        "\"dt-fn-list\"",
        "\"ol\"",
        "\"li\"",
        "\"KaTeX parse error: \"",
        "\" at end of input: \"",
        "\" at position \"",
        "\": \"",
        "\"$&\\u0332\"",
        "\"…\"",
        "\"…\"",
        "\"ParseError\"",
        "\"#cc0000\"",
        "\"AMS-Regular\"",
        "\"65\"",
        "\"66\"",
        "\"67\"",
        "\"68\"",
        "\"69\"",
        "\"70\"",
        "\"71\"",
        "\"72\"",
        "\"73\"",
        "\"74\"",
        "\"75\"",
        "\"76\"",
        "\"77\"",
        "\"78\"",
        "\"79\"",
        "\"80\"",
        "\"81\"",
        "\"82\"",
        "\"83\"",
        "\"84\"",
        "\"85\"",
        "\"86\"",
        "\"87\"",
        "\"88\"",
        "\"89\"",
        "\"90\"",
        "\"107\"",
        "\"165\"",
        "\"174\"",
        "\"240\"",
        "\"295\"",
        "\"710\"",
        "\"732\"",
        "\"770\"",
        "\"771\"",
        "\"989\"",
        "\"1008\"",
        "\"8245\"",
        "\"8463\"",
        "\"8487\"",
        "\"8498\"",
        "\"8502\"",
        "\"8503\"",
        "\"8504\"",
        "\"8513\"",
        "\"8592\"",
        "\"8594\"",
        "\"8602\"",
        "\"8603\"",
        "\"8606\"",
        "\"8608\"",
        "\"8610\"",
        "\"8611\"",
        "\"8619\"",
        "\"8620\"",
        "\"8621\"",
        "\"8622\"",
        "\"8624\"",
        "\"8625\"",
        "\"8630\"",
        "\"8631\"",
        "\"8634\"",
        "\"8635\"",
        "\"8638\"",
        "\"8639\"",
        "\"8642\"",
        "\"8643\"",
        "\"8644\"",
        "\"8646\"",
        "\"8647\"",
        "\"8648\"",
        "\"8649\"",
        "\"8650\"",
        "\"8651\"",
        "\"8652\"",
        "\"8653\"",
        "\"8654\"",
        "\"8655\"",
        "\"8666\"",
        "\"8667\"",
        "\"8669\"",
        "\"8672\"",
        "\"8674\"",
        "\"8705\"",
        "\"8708\"",
        "\"8709\"",
        "\"8717\"",
        "\"8722\"",
        "\"8724\"",
        "\"8726\"",
        "\"8733\"",
        "\"8736\"",
        "\"8737\"",
        "\"8738\"",
        "\"8739\"",
        "\"8740\"",
        "\"8741\"",
        "\"8742\"",
        "\"8756\"",
        "\"8757\"",
        "\"8764\"",
        "\"8765\"",
        "\"8769\"",
        "\"8770\"",
        "\"8774\"",
        "\"8776\"",
        "\"8778\"",
        "\"8782\"",
        "\"8783\"",
        "\"8785\"",
        "\"8786\"",
        "\"8787\"",
        "\"8790\"",
        "\"8791\"",
        "\"8796\"",
        "\"8806\"",
        "\"8807\"",
        "\"8808\"",
        "\"8809\"",
        "\"8812\"",
        "\"8814\"",
        "\"8815\"",
        "\"8816\"",
        "\"8817\"",
        "\"8818\"",
        "\"8819\"",
        "\"8822\"",
        "\"8823\"",
        "\"8828\"",
        "\"8829\"",
        "\"8830\"",
        "\"8831\"",
        "\"8832\"",
        "\"8833\"",
        "\"8840\"",
        "\"8841\"",
        "\"8842\"",
        "\"8843\"",
        "\"8847\"",
        "\"8848\"",
        "\"8858\"",
        "\"8859\"",
        "\"8861\"",
        "\"8862\"",
        "\"8863\"",
        "\"8864\"",
        "\"8865\"",
        "\"8872\"",
        "\"8873\"",
        "\"8874\"",
        "\"8876\"",
        "\"8877\"",
        "\"8878\"",
        "\"8879\"",
        "\"8882\"",
        "\"8883\"",
        "\"8884\"",
        "\"8885\"",
        "\"8888\"",
        "\"8890\"",
        "\"8891\"",
        "\"8892\"",
        "\"8901\"",
        "\"8903\"",
        "\"8905\"",
        "\"8906\"",
        "\"8907\"",
        "\"8908\"",
        "\"8909\"",
        "\"8910\"",
        "\"8911\"",
        "\"8912\"",
        "\"8913\"",
        "\"8914\"",
        "\"8915\"",
        "\"8916\"",
        "\"8918\"",
        "\"8919\"",
        "\"8920\"",
        "\"8921\"",
        "\"8922\"",
        "\"8923\"",
        "\"8926\"",
        "\"8927\"",
        "\"8928\"",
        "\"8929\"",
        "\"8934\"",
        "\"8935\"",
        "\"8936\"",
        "\"8937\"",
        "\"8938\"",
        "\"8939\"",
        "\"8940\"",
        "\"8941\"",
        "\"8994\"",
        "\"8995\"",
        "\"9416\"",
        "\"9484\"",
        "\"9488\"",
        "\"9492\"",
        "\"9496\"",
        "\"9585\"",
        "\"9586\"",
        "\"9632\"",
        "\"9633\"",
        "\"9650\"",
        "\"9651\"",
        "\"9654\"",
        "\"9660\"",
        "\"9661\"",
        "\"9664\"",
        "\"9674\"",
        "\"9733\"",
        "\"10003\"",
        "\"10016\"",
        "\"10731\"",
        "\"10846\"",
        "\"10877\"",
        "\"10878\"",
        "\"10885\"",
        "\"10886\"",
        "\"10887\"",
        "\"10888\"",
        "\"10889\"",
        "\"10890\"",
        "\"10891\"",
        "\"10892\"",
        "\"10901\"",
        "\"10902\"",
        "\"10933\"",
        "\"10934\"",
        "\"10935\"",
        "\"10936\"",
        "\"10937\"",
        "\"10938\"",
        "\"10949\"",
        "\"10950\"",
        "\"10955\"",
        "\"10956\"",
        "\"57350\"",
        "\"57351\"",
        "\"57352\"",
        "\"57353\"",
        "\"57356\"",
        "\"57357\"",
        "\"57358\"",
        "\"57359\"",
        "\"57360\"",
        "\"57361\"",
        "\"57366\"",
        "\"57367\"",
        "\"57368\"",
        "\"57369\"",
        "\"57370\"",
        "\"57371\"",
        "\"Caligraphic-Regular\"",
        "\"48\"",
        "\"49\"",
        "\"50\"",
        "\"51\"",
        "\"52\"",
        "\"53\"",
        "\"54\"",
        "\"55\"",
        "\"56\"",
        "\"57\"",
        "\"65\"",
        "\"66\"",
        "\"67\"",
        "\"68\"",
        "\"69\"",
        "\"70\"",
        "\"71\"",
        "\"72\"",
        "\"73\"",
        "\"74\"",
        "\"75\"",
        "\"76\"",
        "\"77\"",
        "\"78\"",
        "\"79\"",
        "\"80\"",
        "\"81\"",
        "\"82\"",
        "\"83\"",
        "\"84\"",
        "\"85\"",
        "\"86\"",
        "\"87\"",
        "\"88\"",
        "\"89\"",
        "\"90\"",
        "\"Fraktur-Regular\"",
        "\"33\"",
        "\"34\"",
        "\"38\"",
        "\"39\"",
        "\"40\"",
        "\"41\"",
        "\"42\"",
        "\"43\"",
        "\"44\"",
        "\"45\"",
        "\"46\"",
        "\"47\"",
        "\"48\"",
        "\"49\"",
        "\"50\"",
        "\"51\"",
        "\"52\"",
        "\"53\"",
        "\"54\"",
        "\"55\"",
        "\"56\"",
        "\"57\"",
        "\"58\"",
        "\"59\"",
        "\"61\"",
        "\"63\"",
        "\"65\"",
        "\"66\"",
        "\"67\"",
        "\"68\"",
        "\"69\"",
        "\"70\"",
        "\"71\"",
        "\"72\"",
        "\"73\"",
        "\"74\"",
        "\"75\"",
        "\"76\"",
        "\"77\"",
        "\"78\"",
        "\"79\"",
        "\"80\"",
        "\"81\"",
        "\"82\"",
        "\"83\"",
        "\"84\"",
        "\"85\"",
        "\"86\"",
        "\"87\"",
        "\"88\"",
        "\"89\"",
        "\"90\"",
        "\"91\"",
        "\"93\"",
        "\"94\"",
        "\"97\"",
        "\"98\"",
        "\"99\"",
        "\"100\"",
        "\"101\"",
        "\"102\"",
        "\"103\"",
        "\"104\"",
        "\"105\"",
        "\"106\"",
        "\"107\"",
        "\"108\"",
        "\"109\"",
        "\"110\"",
        "\"111\"",
        "\"112\"",
        "\"113\"",
        "\"114\"",
        "\"115\"",
        "\"116\"",
        "\"117\"",
        "\"118\"",
        "\"119\"",
        "\"120\"",
        "\"121\"",
        "\"122\"",
        "\"8216\"",
        "\"8217\"",
        "\"58112\"",
        "\"58113\"",
        "\"58114\"",
        "\"58115\"",
        "\"58116\"",
        "\"58117\"",
        "\"58118\"",
        "\"58119\"",
        "\"Main-Bold\"",
        "\"33\"",
        "\"34\"",
        "\"35\"",
        "\"36\"",
        "\"37\"",
        "\"38\"",
        "\"39\"",
        "\"40\"",
        "\"41\"",
        "\"42\"",
        "\"43\"",
        "\"44\"",
        "\"45\"",
        "\"46\"",
        "\"47\"",
        "\"48\"",
        "\"49\"",
        "\"50\"",
        "\"51\"",
        "\"52\"",
        "\"53\"",
        "\"54\"",
        "\"55\"",
        "\"56\"",
        "\"57\"",
        "\"58\"",
        "\"59\"",
        "\"60\"",
        "\"61\"",
        "\"62\"",
        "\"63\"",
        "\"64\"",
        "\"65\"",
        "\"66\"",
        "\"67\"",
        "\"68\"",
        "\"69\"",
        "\"70\"",
        "\"71\"",
        "\"72\"",
        "\"73\"",
        "\"74\"",
        "\"75\"",
        "\"76\"",
        "\"77\"",
        "\"78\"",
        "\"79\"",
        "\"80\"",
        "\"81\"",
        "\"82\"",
        "\"83\"",
        "\"84\"",
        "\"85\"",
        "\"86\"",
        "\"87\"",
        "\"88\"",
        "\"89\"",
        "\"90\"",
        "\"91\"",
        "\"92\"",
        "\"93\"",
        "\"94\"",
        "\"95\"",
        "\"96\"",
        "\"97\"",
        "\"98\"",
        "\"99\"",
        "\"100\"",
        "\"101\"",
        "\"102\"",
        "\"103\"",
        "\"104\"",
        "\"105\"",
        "\"106\"",
        "\"107\"",
        "\"108\"",
        "\"109\"",
        "\"110\"",
        "\"111\"",
        "\"112\"",
        "\"113\"",
        "\"114\"",
        "\"115\"",
        "\"116\"",
        "\"117\"",
        "\"118\"",
        "\"119\"",
        "\"120\"",
        "\"121\"",
        "\"122\"",
        "\"123\"",
        "\"124\"",
        "\"125\"",
        "\"126\"",
        "\"168\"",
        "\"172\"",
        "\"175\"",
        "\"176\"",
        "\"177\"",
        "\"180\"",
        "\"215\"",
        "\"247\"",
        "\"305\"",
        "\"567\"",
        "\"710\"",
        "\"711\"",
        "\"713\"",
        "\"714\"",
        "\"715\"",
        "\"728\"",
        "\"729\"",
        "\"730\"",
        "\"732\"",
        "\"768\"",
        "\"769\"",
        "\"770\"",
        "\"771\"",
        "\"772\"",
        "\"774\"",
        "\"775\"",
        "\"776\"",
        "\"778\"",
        "\"779\"",
        "\"780\"",
        "\"824\"",
        "\"915\"",
        "\"916\"",
        "\"920\"",
        "\"923\"",
        "\"926\"",
        "\"928\"",
        "\"931\"",
        "\"933\"",
        "\"934\"",
        "\"936\"",
        "\"937\"",
        "\"8211\"",
        "\"8212\"",
        "\"8216\"",
        "\"8217\"",
        "\"8220\"",
        "\"8221\"",
        "\"8224\"",
        "\"8225\"",
        "\"8242\"",
        "\"8407\"",
        "\"8463\"",
        "\"8465\"",
        "\"8467\"",
        "\"8472\"",
        "\"8476\"",
        "\"8501\"",
        "\"8592\"",
        "\"8593\"",
        "\"8594\"",
        "\"8595\"",
        "\"8596\"",
        "\"8597\"",
        "\"8598\"",
        "\"8599\"",
        "\"8600\"",
        "\"8601\"",
        "\"8636\"",
        "\"8637\"",
        "\"8640\"",
        "\"8641\"",
        "\"8656\"",
        "\"8657\"",
        "\"8658\"",
        "\"8659\"",
        "\"8660\"",
        "\"8661\"",
        "\"8704\"",
        "\"8706\"",
        "\"8707\"",
        "\"8709\"",
        "\"8711\"",
        "\"8712\"",
        "\"8715\"",
        "\"8722\"",
        "\"8723\"",
        "\"8725\"",
        "\"8726\"",
        "\"8727\"",
        "\"8728\"",
        "\"8729\"",
        "\"8730\"",
        "\"8733\"",
        "\"8734\"",
        "\"8736\"",
        "\"8739\"",
        "\"8741\"",
        "\"8743\"",
        "\"8744\"",
        "\"8745\"",
        "\"8746\"",
        "\"8747\"",
        "\"8764\"",
        "\"8768\"",
        "\"8771\"",
        "\"8776\"",
        "\"8781\"",
        "\"8801\"",
        "\"8804\"",
        "\"8805\"",
        "\"8810\"",
        "\"8811\"",
        "\"8826\"",
        "\"8827\"",
        "\"8834\"",
        "\"8835\"",
        "\"8838\"",
        "\"8839\"",
        "\"8846\"",
        "\"8849\"",
        "\"8850\"",
        "\"8851\"",
        "\"8852\"",
        "\"8853\"",
        "\"8854\"",
        "\"8855\"",
        "\"8856\"",
        "\"8857\"",
        "\"8866\"",
        "\"8867\"",
        "\"8868\"",
        "\"8869\"",
        "\"8900\"",
        "\"8901\"",
        "\"8902\"",
        "\"8968\"",
        "\"8969\"",
        "\"8970\"",
        "\"8971\"",
        "\"8994\"",
        "\"8995\"",
        "\"9651\"",
        "\"9657\"",
        "\"9661\"",
        "\"9667\"",
        "\"9711\"",
        "\"9824\"",
        "\"9825\"",
        "\"9826\"",
        "\"9827\"",
        "\"9837\"",
        "\"9838\"",
        "\"9839\"",
        "\"10216\"",
        "\"10217\"",
        "\"10815\"",
        "\"10927\"",
        "\"10928\"",
        "\"Main-Italic\"",
        "\"33\"",
        "\"34\"",
        "\"35\"",
        "\"37\"",
        "\"38\"",
        "\"39\"",
        "\"40\"",
        "\"41\"",
        "\"42\"",
        "\"43\"",
        "\"44\"",
        "\"45\"",
        "\"46\"",
        "\"47\"",
        "\"48\"",
        "\"49\"",
        "\"50\"",
        "\"51\"",
        "\"52\"",
        "\"53\"",
        "\"54\"",
        "\"55\"",
        "\"56\"",
        "\"57\"",
        "\"58\"",
        "\"59\"",
        "\"61\"",
        "\"63\"",
        "\"64\"",
        "\"65\"",
        "\"66\"",
        "\"67\"",
        "\"68\"",
        "\"69\"",
        "\"70\"",
        "\"71\"",
        "\"72\"",
        "\"73\"",
        "\"74\"",
        "\"75\"",
        "\"76\"",
        "\"77\"",
        "\"78\"",
        "\"79\"",
        "\"80\"",
        "\"81\"",
        "\"82\"",
        "\"83\"",
        "\"84\"",
        "\"85\"",
        "\"86\"",
        "\"87\"",
        "\"88\"",
        "\"89\"",
        "\"90\"",
        "\"91\"",
        "\"93\"",
        "\"94\"",
        "\"95\"",
        "\"97\"",
        "\"98\"",
        "\"99\"",
        "\"100\"",
        "\"101\"",
        "\"102\"",
        "\"103\"",
        "\"104\"",
        "\"105\"",
        "\"106\"",
        "\"107\"",
        "\"108\"",
        "\"109\"",
        "\"110\"",
        "\"111\"",
        "\"112\"",
        "\"113\"",
        "\"114\"",
        "\"115\"",
        "\"116\"",
        "\"117\"",
        "\"118\"",
        "\"119\"",
        "\"120\"",
        "\"121\"",
        "\"122\"",
        "\"126\"",
        "\"163\"",
        "\"305\"",
        "\"567\"",
        "\"768\"",
        "\"769\"",
        "\"770\"",
        "\"771\"",
        "\"772\"",
        "\"774\"",
        "\"775\"",
        "\"776\"",
        "\"778\"",
        "\"779\"",
        "\"780\"",
        "\"915\"",
        "\"916\"",
        "\"920\"",
        "\"923\"",
        "\"926\"",
        "\"928\"",
        "\"931\"",
        "\"933\"",
        "\"934\"",
        "\"936\"",
        "\"937\"",
        "\"8211\"",
        "\"8212\"",
        "\"8216\"",
        "\"8217\"",
        "\"8220\"",
        "\"8221\"",
        "\"8463\"",
        "\"Main-Regular\"",
        "\"32\"",
        "\"33\"",
        "\"34\"",
        "\"35\"",
        "\"36\"",
        "\"37\"",
        "\"38\"",
        "\"39\"",
        "\"40\"",
        "\"41\"",
        "\"42\"",
        "\"43\"",
        "\"44\"",
        "\"45\"",
        "\"46\"",
        "\"47\"",
        "\"48\"",
        "\"49\"",
        "\"50\"",
        "\"51\"",
        "\"52\"",
        "\"53\"",
        "\"54\"",
        "\"55\"",
        "\"56\"",
        "\"57\"",
        "\"58\"",
        "\"59\"",
        "\"60\"",
        "\"61\"",
        "\"62\"",
        "\"63\"",
        "\"64\"",
        "\"65\"",
        "\"66\"",
        "\"67\"",
        "\"68\"",
        "\"69\"",
        "\"70\"",
        "\"71\"",
        "\"72\"",
        "\"73\"",
        "\"74\"",
        "\"75\"",
        "\"76\"",
        "\"77\"",
        "\"78\"",
        "\"79\"",
        "\"80\"",
        "\"81\"",
        "\"82\"",
        "\"83\"",
        "\"84\"",
        "\"85\"",
        "\"86\"",
        "\"87\"",
        "\"88\"",
        "\"89\"",
        "\"90\"",
        "\"91\"",
        "\"92\"",
        "\"93\"",
        "\"94\"",
        "\"95\"",
        "\"96\"",
        "\"97\"",
        "\"98\"",
        "\"99\"",
        "\"100\"",
        "\"101\"",
        "\"102\"",
        "\"103\"",
        "\"104\"",
        "\"105\"",
        "\"106\"",
        "\"107\"",
        "\"108\"",
        "\"109\"",
        "\"110\"",
        "\"111\"",
        "\"112\"",
        "\"113\"",
        "\"114\"",
        "\"115\"",
        "\"116\"",
        "\"117\"",
        "\"118\"",
        "\"119\"",
        "\"120\"",
        "\"121\"",
        "\"122\"",
        "\"123\"",
        "\"124\"",
        "\"125\"",
        "\"126\"",
        "\"160\"",
        "\"168\"",
        "\"172\"",
        "\"175\"",
        "\"176\"",
        "\"177\"",
        "\"180\"",
        "\"215\"",
        "\"247\"",
        "\"305\"",
        "\"567\"",
        "\"710\"",
        "\"711\"",
        "\"713\"",
        "\"714\"",
        "\"715\"",
        "\"728\"",
        "\"729\"",
        "\"730\"",
        "\"732\"",
        "\"768\"",
        "\"769\"",
        "\"770\"",
        "\"771\"",
        "\"772\"",
        "\"774\"",
        "\"775\"",
        "\"776\"",
        "\"778\"",
        "\"779\"",
        "\"780\"",
        "\"824\"",
        "\"915\"",
        "\"916\"",
        "\"920\"",
        "\"923\"",
        "\"926\"",
        "\"928\"",
        "\"931\"",
        "\"933\"",
        "\"934\"",
        "\"936\"",
        "\"937\"",
        "\"8211\"",
        "\"8212\"",
        "\"8216\"",
        "\"8217\"",
        "\"8220\"",
        "\"8221\"",
        "\"8224\"",
        "\"8225\"",
        "\"8230\"",
        "\"8242\"",
        "\"8407\"",
        "\"8463\"",
        "\"8465\"",
        "\"8467\"",
        "\"8472\"",
        "\"8476\"",
        "\"8501\"",
        "\"8592\"",
        "\"8593\"",
        "\"8594\"",
        "\"8595\"",
        "\"8596\"",
        "\"8597\"",
        "\"8598\"",
        "\"8599\"",
        "\"8600\"",
        "\"8601\"",
        "\"8614\"",
        "\"8617\"",
        "\"8618\"",
        "\"8636\"",
        "\"8637\"",
        "\"8640\"",
        "\"8641\"",
        "\"8652\"",
        "\"8656\"",
        "\"8657\"",
        "\"8658\"",
        "\"8659\"",
        "\"8660\"",
        "\"8661\"",
        "\"8704\"",
        "\"8706\"",
        "\"8707\"",
        "\"8709\"",
        "\"8711\"",
        "\"8712\"",
        "\"8715\"",
        "\"8722\"",
        "\"8723\"",
        "\"8725\"",
        "\"8726\"",
        "\"8727\"",
        "\"8728\"",
        "\"8729\"",
        "\"8730\"",
        "\"8733\"",
        "\"8734\"",
        "\"8736\"",
        "\"8739\"",
        "\"8741\"",
        "\"8743\"",
        "\"8744\"",
        "\"8745\"",
        "\"8746\"",
        "\"8747\"",
        "\"8764\"",
        "\"8768\"",
        "\"8771\"",
        "\"8773\"",
        "\"8776\"",
        "\"8781\"",
        "\"8784\"",
        "\"8800\"",
        "\"8801\"",
        "\"8804\"",
        "\"8805\"",
        "\"8810\"",
        "\"8811\"",
        "\"8826\"",
        "\"8827\"",
        "\"8834\"",
        "\"8835\"",
        "\"8838\"",
        "\"8839\"",
        "\"8846\"",
        "\"8849\"",
        "\"8850\"",
        "\"8851\"",
        "\"8852\"",
        "\"8853\"",
        "\"8854\"",
        "\"8855\"",
        "\"8856\"",
        "\"8857\"",
        "\"8866\"",
        "\"8867\"",
        "\"8868\"",
        "\"8869\"",
        "\"8872\"",
        "\"8900\"",
        "\"8901\"",
        "\"8902\"",
        "\"8904\"",
        "\"8942\"",
        "\"8943\"",
        "\"8945\"",
        "\"8968\"",
        "\"8969\"",
        "\"8970\"",
        "\"8971\"",
        "\"8994\"",
        "\"8995\"",
        "\"9136\"",
        "\"9137\"",
        "\"9651\"",
        "\"9657\"",
        "\"9661\"",
        "\"9667\"",
        "\"9711\"",
        "\"9824\"",
        "\"9825\"",
        "\"9826\"",
        "\"9827\"",
        "\"9837\"",
        "\"9838\"",
        "\"9839\"",
        "\"10216\"",
        "\"10217\"",
        "\"10222\"",
        "\"10223\"",
        "\"10229\"",
        "\"10230\"",
        "\"10231\"",
        "\"10232\"",
        "\"10233\"",
        "\"10234\"",
        "\"10236\"",
        "\"10815\"",
        "\"10927\"",
        "\"10928\"",
        "\"Math-BoldItalic\"",
        "\"47\"",
        "\"65\"",
        "\"66\"",
        "\"67\"",
        "\"68\"",
        "\"69\"",
        "\"70\"",
        "\"71\"",
        "\"72\"",
        "\"73\"",
        "\"74\"",
        "\"75\"",
        "\"76\"",
        "\"77\"",
        "\"78\"",
        "\"79\"",
        "\"80\"",
        "\"81\"",
        "\"82\"",
        "\"83\"",
        "\"84\"",
        "\"85\"",
        "\"86\"",
        "\"87\"",
        "\"88\"",
        "\"89\"",
        "\"90\"",
        "\"97\"",
        "\"98\"",
        "\"99\"",
        "\"100\"",
        "\"101\"",
        "\"102\"",
        "\"103\"",
        "\"104\"",
        "\"105\"",
        "\"106\"",
        "\"107\"",
        "\"108\"",
        "\"109\"",
        "\"110\"",
        "\"111\"",
        "\"112\"",
        "\"113\"",
        "\"114\"",
        "\"115\"",
        "\"116\"",
        "\"117\"",
        "\"118\"",
        "\"119\"",
        "\"120\"",
        "\"121\"",
        "\"122\"",
        "\"915\"",
        "\"916\"",
        "\"920\"",
        "\"923\"",
        "\"926\"",
        "\"928\"",
        "\"931\"",
        "\"933\"",
        "\"934\"",
        "\"936\"",
        "\"937\"",
        "\"945\"",
        "\"946\"",
        "\"947\"",
        "\"948\"",
        "\"949\"",
        "\"950\"",
        "\"951\"",
        "\"952\"",
        "\"953\"",
        "\"954\"",
        "\"955\"",
        "\"956\"",
        "\"957\"",
        "\"958\"",
        "\"959\"",
        "\"960\"",
        "\"961\"",
        "\"962\"",
        "\"963\"",
        "\"964\"",
        "\"965\"",
        "\"966\"",
        "\"967\"",
        "\"968\"",
        "\"969\"",
        "\"977\"",
        "\"981\"",
        "\"982\"",
        "\"1009\"",
        "\"1013\"",
        "\"Math-Italic\"",
        "\"47\"",
        "\"65\"",
        "\"66\"",
        "\"67\"",
        "\"68\"",
        "\"69\"",
        "\"70\"",
        "\"71\"",
        "\"72\"",
        "\"73\"",
        "\"74\"",
        "\"75\"",
        "\"76\"",
        "\"77\"",
        "\"78\"",
        "\"79\"",
        "\"80\"",
        "\"81\"",
        "\"82\"",
        "\"83\"",
        "\"84\"",
        "\"85\"",
        "\"86\"",
        "\"87\"",
        "\"88\"",
        "\"89\"",
        "\"90\"",
        "\"97\"",
        "\"98\"",
        "\"99\"",
        "\"100\"",
        "\"101\"",
        "\"102\"",
        "\"103\"",
        "\"104\"",
        "\"105\"",
        "\"106\"",
        "\"107\"",
        "\"108\"",
        "\"109\"",
        "\"110\"",
        "\"111\"",
        "\"112\"",
        "\"113\"",
        "\"114\"",
        "\"115\"",
        "\"116\"",
        "\"117\"",
        "\"118\"",
        "\"119\"",
        "\"120\"",
        "\"121\"",
        "\"122\"",
        "\"915\"",
        "\"916\"",
        "\"920\"",
        "\"923\"",
        "\"926\"",
        "\"928\"",
        "\"931\"",
        "\"933\"",
        "\"934\"",
        "\"936\"",
        "\"937\"",
        "\"945\"",
        "\"946\"",
        "\"947\"",
        "\"948\"",
        "\"949\"",
        "\"950\"",
        "\"951\"",
        "\"952\"",
        "\"953\"",
        "\"954\"",
        "\"955\"",
        "\"956\"",
        "\"957\"",
        "\"958\"",
        "\"959\"",
        "\"960\"",
        "\"961\"",
        "\"962\"",
        "\"963\"",
        "\"964\"",
        "\"965\"",
        "\"966\"",
        "\"967\"",
        "\"968\"",
        "\"969\"",
        "\"977\"",
        "\"981\"",
        "\"982\"",
        "\"1009\"",
        "\"1013\"",
        "\"Math-Regular\"",
        "\"65\"",
        "\"66\"",
        "\"67\"",
        "\"68\"",
        "\"69\"",
        "\"70\"",
        "\"71\"",
        "\"72\"",
        "\"73\"",
        "\"74\"",
        "\"75\"",
        "\"76\"",
        "\"77\"",
        "\"78\"",
        "\"79\"",
        "\"80\"",
        "\"81\"",
        "\"82\"",
        "\"83\"",
        "\"84\"",
        "\"85\"",
        "\"86\"",
        "\"87\"",
        "\"88\"",
        "\"89\"",
        "\"90\"",
        "\"97\"",
        "\"98\"",
        "\"99\"",
        "\"100\"",
        "\"101\"",
        "\"102\"",
        "\"103\"",
        "\"104\"",
        "\"105\"",
        "\"106\"",
        "\"107\"",
        "\"108\"",
        "\"109\"",
        "\"110\"",
        "\"111\"",
        "\"112\"",
        "\"113\"",
        "\"114\"",
        "\"115\"",
        "\"116\"",
        "\"117\"",
        "\"118\"",
        "\"119\"",
        "\"120\"",
        "\"121\"",
        "\"122\"",
        "\"915\"",
        "\"916\"",
        "\"920\"",
        "\"923\"",
        "\"926\"",
        "\"928\"",
        "\"931\"",
        "\"933\"",
        "\"934\"",
        "\"936\"",
        "\"937\"",
        "\"945\"",
        "\"946\"",
        "\"947\"",
        "\"948\"",
        "\"949\"",
        "\"950\"",
        "\"951\"",
        "\"952\"",
        "\"953\"",
        "\"954\"",
        "\"955\"",
        "\"956\"",
        "\"957\"",
        "\"958\"",
        "\"959\"",
        "\"960\"",
        "\"961\"",
        "\"962\"",
        "\"963\"",
        "\"964\"",
        "\"965\"",
        "\"966\"",
        "\"967\"",
        "\"968\"",
        "\"969\"",
        "\"977\"",
        "\"981\"",
        "\"982\"",
        "\"1009\"",
        "\"1013\"",
        "\"SansSerif-Regular\"",
        "\"33\"",
        "\"34\"",
        "\"35\"",
        "\"36\"",
        "\"37\"",
        "\"38\"",
        "\"39\"",
        "\"40\"",
        "\"41\"",
        "\"42\"",
        "\"43\"",
        "\"44\"",
        "\"45\"",
        "\"46\"",
        "\"47\"",
        "\"48\"",
        "\"49\"",
        "\"50\"",
        "\"51\"",
        "\"52\"",
        "\"53\"",
        "\"54\"",
        "\"55\"",
        "\"56\"",
        "\"57\"",
        "\"58\"",
        "\"59\"",
        "\"61\"",
        "\"63\"",
        "\"64\"",
        "\"65\"",
        "\"66\"",
        "\"67\"",
        "\"68\"",
        "\"69\"",
        "\"70\"",
        "\"71\"",
        "\"72\"",
        "\"73\"",
        "\"74\"",
        "\"75\"",
        "\"76\"",
        "\"77\"",
        "\"78\"",
        "\"79\"",
        "\"80\"",
        "\"81\"",
        "\"82\"",
        "\"83\"",
        "\"84\"",
        "\"85\"",
        "\"86\"",
        "\"87\"",
        "\"88\"",
        "\"89\"",
        "\"90\"",
        "\"91\"",
        "\"93\"",
        "\"94\"",
        "\"95\"",
        "\"97\"",
        "\"98\"",
        "\"99\"",
        "\"100\"",
        "\"101\"",
        "\"102\"",
        "\"103\"",
        "\"104\"",
        "\"105\"",
        "\"106\"",
        "\"107\"",
        "\"108\"",
        "\"109\"",
        "\"110\"",
        "\"111\"",
        "\"112\"",
        "\"113\"",
        "\"114\"",
        "\"115\"",
        "\"116\"",
        "\"117\"",
        "\"118\"",
        "\"119\"",
        "\"120\"",
        "\"121\"",
        "\"122\"",
        "\"126\"",
        "\"305\"",
        "\"567\"",
        "\"768\"",
        "\"769\"",
        "\"770\"",
        "\"771\"",
        "\"772\"",
        "\"774\"",
        "\"775\"",
        "\"776\"",
        "\"778\"",
        "\"779\"",
        "\"780\"",
        "\"915\"",
        "\"916\"",
        "\"920\"",
        "\"923\"",
        "\"926\"",
        "\"928\"",
        "\"931\"",
        "\"933\"",
        "\"934\"",
        "\"936\"",
        "\"937\"",
        "\"8211\"",
        "\"8212\"",
        "\"8216\"",
        "\"8217\"",
        "\"8220\"",
        "\"8221\"",
        "\"Script-Regular\"",
        "\"65\"",
        "\"66\"",
        "\"67\"",
        "\"68\"",
        "\"69\"",
        "\"70\"",
        "\"71\"",
        "\"72\"",
        "\"73\"",
        "\"74\"",
        "\"75\"",
        "\"76\"",
        "\"77\"",
        "\"78\"",
        "\"79\"",
        "\"80\"",
        "\"81\"",
        "\"82\"",
        "\"83\"",
        "\"84\"",
        "\"85\"",
        "\"86\"",
        "\"87\"",
        "\"88\"",
        "\"89\"",
        "\"90\"",
        "\"Size1-Regular\"",
        "\"40\"",
        "\"41\"",
        "\"47\"",
        "\"91\"",
        "\"92\"",
        "\"93\"",
        "\"123\"",
        "\"125\"",
        "\"710\"",
        "\"732\"",
        "\"770\"",
        "\"771\"",
        "\"8214\"",
        "\"8593\"",
        "\"8595\"",
        "\"8657\"",
        "\"8659\"",
        "\"8719\"",
        "\"8720\"",
        "\"8721\"",
        "\"8730\"",
        "\"8739\"",
        "\"8741\"",
        "\"8747\"",
        "\"8748\"",
        "\"8749\"",
        "\"8750\"",
        "\"8896\"",
        "\"8897\"",
        "\"8898\"",
        "\"8899\"",
        "\"8968\"",
        "\"8969\"",
        "\"8970\"",
        "\"8971\"",
        "\"9168\"",
        "\"10216\"",
        "\"10217\"",
        "\"10752\"",
        "\"10753\"",
        "\"10754\"",
        "\"10756\"",
        "\"10758\"",
        "\"Size2-Regular\"",
        "\"40\"",
        "\"41\"",
        "\"47\"",
        "\"91\"",
        "\"92\"",
        "\"93\"",
        "\"123\"",
        "\"125\"",
        "\"710\"",
        "\"732\"",
        "\"770\"",
        "\"771\"",
        "\"8719\"",
        "\"8720\"",
        "\"8721\"",
        "\"8730\"",
        "\"8747\"",
        "\"8748\"",
        "\"8749\"",
        "\"8750\"",
        "\"8896\"",
        "\"8897\"",
        "\"8898\"",
        "\"8899\"",
        "\"8968\"",
        "\"8969\"",
        "\"8970\"",
        "\"8971\"",
        "\"10216\"",
        "\"10217\"",
        "\"10752\"",
        "\"10753\"",
        "\"10754\"",
        "\"10756\"",
        "\"10758\"",
        "\"Size3-Regular\"",
        "\"40\"",
        "\"41\"",
        "\"47\"",
        "\"91\"",
        "\"92\"",
        "\"93\"",
        "\"123\"",
        "\"125\"",
        "\"710\"",
        "\"732\"",
        "\"770\"",
        "\"771\"",
        "\"8730\"",
        "\"8968\"",
        "\"8969\"",
        "\"8970\"",
        "\"8971\"",
        "\"10216\"",
        "\"10217\"",
        "\"Size4-Regular\"",
        "\"40\"",
        "\"41\"",
        "\"47\"",
        "\"91\"",
        "\"92\"",
        "\"93\"",
        "\"123\"",
        "\"125\"",
        "\"710\"",
        "\"732\"",
        "\"770\"",
        "\"771\"",
        "\"8730\"",
        "\"8968\"",
        "\"8969\"",
        "\"8970\"",
        "\"8971\"",
        "\"9115\"",
        "\"9116\"",
        "\"9117\"",
        "\"9118\"",
        "\"9119\"",
        "\"9120\"",
        "\"9121\"",
        "\"9122\"",
        "\"9123\"",
        "\"9124\"",
        "\"9125\"",
        "\"9126\"",
        "\"9127\"",
        "\"9128\"",
        "\"9129\"",
        "\"9130\"",
        "\"9131\"",
        "\"9132\"",
        "\"9133\"",
        "\"9143\"",
        "\"10216\"",
        "\"10217\"",
        "\"57344\"",
        "\"57345\"",
        "\"57680\"",
        "\"57681\"",
        "\"57682\"",
        "\"57683\"",
        "\"Typewriter-Regular\"",
        "\"33\"",
        "\"34\"",
        "\"35\"",
        "\"36\"",
        "\"37\"",
        "\"38\"",
        "\"39\"",
        "\"40\"",
        "\"41\"",
        "\"42\"",
        "\"43\"",
        "\"44\"",
        "\"45\"",
        "\"46\"",
        "\"47\"",
        "\"48\"",
        "\"49\"",
        "\"50\"",
        "\"51\"",
        "\"52\"",
        "\"53\"",
        "\"54\"",
        "\"55\"",
        "\"56\"",
        "\"57\"",
        "\"58\"",
        "\"59\"",
        "\"60\"",
        "\"61\"",
        "\"62\"",
        "\"63\"",
        "\"64\"",
        "\"65\"",
        "\"66\"",
        "\"67\"",
        "\"68\"",
        "\"69\"",
        "\"70\"",
        "\"71\"",
        "\"72\"",
        "\"73\"",
        "\"74\"",
        "\"75\"",
        "\"76\"",
        "\"77\"",
        "\"78\"",
        "\"79\"",
        "\"80\"",
        "\"81\"",
        "\"82\"",
        "\"83\"",
        "\"84\"",
        "\"85\"",
        "\"86\"",
        "\"87\"",
        "\"88\"",
        "\"89\"",
        "\"90\"",
        "\"91\"",
        "\"92\"",
        "\"93\"",
        "\"94\"",
        "\"95\"",
        "\"96\"",
        "\"97\"",
        "\"98\"",
        "\"99\"",
        "\"100\"",
        "\"101\"",
        "\"102\"",
        "\"103\"",
        "\"104\"",
        "\"105\"",
        "\"106\"",
        "\"107\"",
        "\"108\"",
        "\"109\"",
        "\"110\"",
        "\"111\"",
        "\"112\"",
        "\"113\"",
        "\"114\"",
        "\"115\"",
        "\"116\"",
        "\"117\"",
        "\"118\"",
        "\"119\"",
        "\"120\"",
        "\"121\"",
        "\"122\"",
        "\"123\"",
        "\"124\"",
        "\"125\"",
        "\"126\"",
        "\"127\"",
        "\"305\"",
        "\"567\"",
        "\"768\"",
        "\"769\"",
        "\"770\"",
        "\"771\"",
        "\"772\"",
        "\"774\"",
        "\"776\"",
        "\"778\"",
        "\"780\"",
        "\"915\"",
        "\"916\"",
        "\"920\"",
        "\"923\"",
        "\"926\"",
        "\"928\"",
        "\"931\"",
        "\"933\"",
        "\"934\"",
        "\"936\"",
        "\"937\"",
        "\"2018\"",
        "\"2019\"",
        "\"8242\"",
        "'À'",
        "'A'",
        "'Á'",
        "'A'",
        "'Â'",
        "'A'",
        "'Ã'",
        "'A'",
        "'Ä'",
        "'A'",
        "'Å'",
        "'A'",
        "'Æ'",
        "'A'",
        "'Ç'",
        "'C'",
        "'È'",
        "'E'",
        "'É'",
        "'E'",
        "'Ê'",
        "'E'",
        "'Ë'",
        "'E'",
        "'Ì'",
        "'I'",
        "'Í'",
        "'I'",
        "'Î'",
        "'I'",
        "'Ï'",
        "'I'",
        "'Ð'",
        "'D'",
        "'Ñ'",
        "'N'",
        "'Ò'",
        "'O'",
        "'Ó'",
        "'O'",
        "'Ô'",
        "'O'",
        "'Õ'",
        "'O'",
        "'Ö'",
        "'O'",
        "'Ø'",
        "'O'",
        "'Ù'",
        "'U'",
        "'Ú'",
        "'U'",
        "'Û'",
        "'U'",
        "'Ü'",
        "'U'",
        "'Ý'",
        "'Y'",
        "'Þ'",
        "'o'",
        "'ß'",
        "'B'",
        "'à'",
        "'a'",
        "'á'",
        "'a'",
        "'â'",
        "'a'",
        "'ã'",
        "'a'",
        "'ä'",
        "'a'",
        "'å'",
        "'a'",
        "'æ'",
        "'a'",
        "'ç'",
        "'c'",
        "'è'",
        "'e'",
        "'é'",
        "'e'",
        "'ê'",
        "'e'",
        "'ë'",
        "'e'",
        "'ì'",
        "'i'",
        "'í'",
        "'i'",
        "'î'",
        "'i'",
        "'ï'",
        "'i'",
        "'ð'",
        "'d'",
        "'ñ'",
        "'n'",
        "'ò'",
        "'o'",
        "'ó'",
        "'o'",
        "'ô'",
        "'o'",
        "'õ'",
        "'o'",
        "'ö'",
        "'o'",
        "'ø'",
        "'o'",
        "'ù'",
        "'u'",
        "'ú'",
        "'u'",
        "'û'",
        "'u'",
        "'ü'",
        "'u'",
        "'ý'",
        "'y'",
        "'þ'",
        "'o'",
        "'ÿ'",
        "'y'",
        "'А'",
        "'A'",
        "'Б'",
        "'B'",
        "'В'",
        "'B'",
        "'Г'",
        "'F'",
        "'Д'",
        "'A'",
        "'Е'",
        "'E'",
        "'Ж'",
        "'K'",
        "'З'",
        "'3'",
        "'И'",
        "'N'",
        "'Й'",
        "'N'",
        "'К'",
        "'K'",
        "'Л'",
        "'N'",
        "'М'",
        "'M'",
        "'Н'",
        "'H'",
        "'О'",
        "'O'",
        "'П'",
        "'N'",
        "'Р'",
        "'P'",
        "'С'",
        "'C'",
        "'Т'",
        "'T'",
        "'У'",
        "'y'",
        "'Ф'",
        "'O'",
        "'Х'",
        "'X'",
        "'Ц'",
        "'U'",
        "'Ч'",
        "'h'",
        "'Ш'",
        "'W'",
        "'Щ'",
        "'W'",
        "'Ъ'",
        "'B'",
        "'Ы'",
        "'X'",
        "'Ь'",
        "'B'",
        "'Э'",
        "'3'",
        "'Ю'",
        "'X'",
        "'Я'",
        "'R'",
        "'а'",
        "'a'",
        "'б'",
        "'b'",
        "'в'",
        "'a'",
        "'г'",
        "'r'",
        "'д'",
        "'y'",
        "'е'",
        "'e'",
        "'ж'",
        "'m'",
        "'з'",
        "'e'",
        "'и'",
        "'n'",
        "'й'",
        "'n'",
        "'к'",
        "'n'",
        "'л'",
        "'n'",
        "'м'",
        "'m'",
        "'н'",
        "'n'",
        "'о'",
        "'o'",
        "'п'",
        "'n'",
        "'р'",
        "'p'",
        "'с'",
        "'c'",
        "'т'",
        "'o'",
        "'у'",
        "'y'",
        "'ф'",
        "'b'",
        "'х'",
        "'x'",
        "'ц'",
        "'n'",
        "'ч'",
        "'n'",
        "'ш'",
        "'w'",
        "'щ'",
        "'w'",
        "'ъ'",
        "'a'",
        "'ы'",
        "'m'",
        "'ь'",
        "'a'",
        "'э'",
        "'e'",
        "'ю'",
        "'m'",
        "'я'",
        "'r'",
        "'M'",
        "\" cramped\"",
        "\" uncramped\"",
        "\"displaystyle textstyle\"",
        "\"textstyle\"",
        "\"scriptstyle\"",
        "\"scriptscriptstyle\"",
        "\"reset-textstyle\"",
        "\"reset-textstyle\"",
        "\"reset-scriptstyle\"",
        "\"reset-scriptscriptstyle\"",
        "\"-$1\"",
        "\"&\"",
        "\"&amp;\"",
        "\">\"",
        "\"&gt;\"",
        "\"<\"",
        "\"&lt;\"",
        "\"\\\"\"",
        "\"&quot;\"",
        "\"'\"",
        "\"&#x27;\"",
        "\"\"",
        "\"undefined\"",
        "\"span\"",
        "\"textContent\"",
        "\"\"",
        "\" \"",
        "\"mtight\"",
        "\"span\"",
        "\"<span\"",
        "\" class=\\\"\"",
        "\"\\\"\"",
        "\"\"",
        "\":\"",
        "\";\"",
        "\" style=\\\"\"",
        "\"\\\"\"",
        "\" \"",
        "\"=\\\"\"",
        "\"\\\"\"",
        "\">\"",
        "\"</span>\"",
        "\"\"",
        "'î'",
        "'\\u0131\\u0302'",
        "'ï'",
        "'\\u0131\\u0308'",
        "'í'",
        "'\\u0131\\u0301'",
        "'ì'",
        "'\\u0131\\u0300'",
        "\"\"",
        "'hangul_fallback'",
        "'cjk_fallback'",
        "\"span\"",
        "\"em\"",
        "\"span\"",
        "\"span\"",
        "\"<span\"",
        "\" class=\\\"\"",
        "\"\\\"\"",
        "\"\"",
        "\"margin-right:\"",
        "\"em;\"",
        "\":\"",
        "\";\"",
        "\" style=\\\"\"",
        "\"\\\"\"",
        "\">\"",
        "\"</span>\"",
        "\"math\"",
        "\"text\"",
        "\"main\"",
        "\"ams\"",
        "\"accent\"",
        "\"bin\"",
        "\"close\"",
        "\"inner\"",
        "\"mathord\"",
        "\"op\"",
        "\"open\"",
        "\"punct\"",
        "\"rel\"",
        "\"spacing\"",
        "\"textord\"",
        "\"\\u2261\"",
        "\"\\\\equiv\"",
        "\"\\u227a\"",
        "\"\\\\prec\"",
        "\"\\u227b\"",
        "\"\\\\succ\"",
        "\"\\u223c\"",
        "\"\\\\sim\"",
        "\"\\u22a5\"",
        "\"\\\\perp\"",
        "\"\\u2aaf\"",
        "\"\\\\preceq\"",
        "\"\\u2ab0\"",
        "\"\\\\succeq\"",
        "\"\\u2243\"",
        "\"\\\\simeq\"",
        "\"\\u2223\"",
        "\"\\\\mid\"",
        "\"\\u226a\"",
        "\"\\\\ll\"",
        "\"\\u226b\"",
        "\"\\\\gg\"",
        "\"\\u224d\"",
        "\"\\\\asymp\"",
        "\"\\u2225\"",
        "\"\\\\parallel\"",
        "\"\\u22c8\"",
        "\"\\\\bowtie\"",
        "\"\\u2323\"",
        "\"\\\\smile\"",
        "\"\\u2291\"",
        "\"\\\\sqsubseteq\"",
        "\"\\u2292\"",
        "\"\\\\sqsupseteq\"",
        "\"\\u2250\"",
        "\"\\\\doteq\"",
        "\"\\u2322\"",
        "\"\\\\frown\"",
        "\"\\u220b\"",
        "\"\\\\ni\"",
        "\"\\u221d\"",
        "\"\\\\propto\"",
        "\"\\u22a2\"",
        "\"\\\\vdash\"",
        "\"\\u22a3\"",
        "\"\\\\dashv\"",
        "\"\\u220b\"",
        "\"\\\\owns\"",
        "\"\\u002e\"",
        "\"\\\\ldotp\"",
        "\"\\u22c5\"",
        "\"\\\\cdotp\"",
        "\"\\u0023\"",
        "\"\\\\#\"",
        "\"\\u0023\"",
        "\"\\\\#\"",
        "\"\\u0026\"",
        "\"\\\\&\"",
        "\"\\u0026\"",
        "\"\\\\&\"",
        "\"\\u2135\"",
        "\"\\\\aleph\"",
        "\"\\u2200\"",
        "\"\\\\forall\"",
        "\"\\u210f\"",
        "\"\\\\hbar\"",
        "\"\\u2203\"",
        "\"\\\\exists\"",
        "\"\\u2207\"",
        "\"\\\\nabla\"",
        "\"\\u266d\"",
        "\"\\\\flat\"",
        "\"\\u2113\"",
        "\"\\\\ell\"",
        "\"\\u266e\"",
        "\"\\\\natural\"",
        "\"\\u2663\"",
        "\"\\\\clubsuit\"",
        "\"\\u2118\"",
        "\"\\\\wp\"",
        "\"\\u266f\"",
        "\"\\\\sharp\"",
        "\"\\u2662\"",
        "\"\\\\diamondsuit\"",
        "\"\\u211c\"",
        "\"\\\\Re\"",
        "\"\\u2661\"",
        "\"\\\\heartsuit\"",
        "\"\\u2111\"",
        "\"\\\\Im\"",
        "\"\\u2660\"",
        "\"\\\\spadesuit\"",
        "\"\\u2020\"",
        "\"\\\\dag\"",
        "\"\\u2021\"",
        "\"\\\\ddag\"",
        "\"\\u23b1\"",
        "\"\\\\rmoustache\"",
        "\"\\u23b0\"",
        "\"\\\\lmoustache\"",
        "\"\\u27ef\"",
        "\"\\\\rgroup\"",
        "\"\\u27ee\"",
        "\"\\\\lgroup\"",
        "\"\\u2213\"",
        "\"\\\\mp\"",
        "\"\\u2296\"",
        "\"\\\\ominus\"",
        "\"\\u228e\"",
        "\"\\\\uplus\"",
        "\"\\u2293\"",
        "\"\\\\sqcap\"",
        "\"\\u2217\"",
        "\"\\\\ast\"",
        "\"\\u2294\"",
        "\"\\\\sqcup\"",
        "\"\\u25ef\"",
        "\"\\\\bigcirc\"",
        "\"\\u2219\"",
        "\"\\\\bullet\"",
        "\"\\u2021\"",
        "\"\\\\ddagger\"",
        "\"\\u2240\"",
        "\"\\\\wr\"",
        "\"\\u2a3f\"",
        "\"\\\\amalg\"",
        "\"\\u27f5\"",
        "\"\\\\longleftarrow\"",
        "\"\\u21d0\"",
        "\"\\\\Leftarrow\"",
        "\"\\u27f8\"",
        "\"\\\\Longleftarrow\"",
        "\"\\u27f6\"",
        "\"\\\\longrightarrow\"",
        "\"\\u21d2\"",
        "\"\\\\Rightarrow\"",
        "\"\\u27f9\"",
        "\"\\\\Longrightarrow\"",
        "\"\\u2194\"",
        "\"\\\\leftrightarrow\"",
        "\"\\u27f7\"",
        "\"\\\\longleftrightarrow\"",
        "\"\\u21d4\"",
        "\"\\\\Leftrightarrow\"",
        "\"\\u27fa\"",
        "\"\\\\Longleftrightarrow\"",
        "\"\\u21a6\"",
        "\"\\\\mapsto\"",
        "\"\\u27fc\"",
        "\"\\\\longmapsto\"",
        "\"\\u2197\"",
        "\"\\\\nearrow\"",
        "\"\\u21a9\"",
        "\"\\\\hookleftarrow\"",
        "\"\\u21aa\"",
        "\"\\\\hookrightarrow\"",
        "\"\\u2198\"",
        "\"\\\\searrow\"",
        "\"\\u21bc\"",
        "\"\\\\leftharpoonup\"",
        "\"\\u21c0\"",
        "\"\\\\rightharpoonup\"",
        "\"\\u2199\"",
        "\"\\\\swarrow\"",
        "\"\\u21bd\"",
        "\"\\\\leftharpoondown\"",
        "\"\\u21c1\"",
        "\"\\\\rightharpoondown\"",
        "\"\\u2196\"",
        "\"\\\\nwarrow\"",
        "\"\\u21cc\"",
        "\"\\\\rightleftharpoons\"",
        "\"\\u226e\"",
        "\"\\\\nless\"",
        "\"\\ue010\"",
        "\"\\\\nleqslant\"",
        "\"\\ue011\"",
        "\"\\\\nleqq\"",
        "\"\\u2a87\"",
        "\"\\\\lneq\"",
        "\"\\u2268\"",
        "\"\\\\lneqq\"",
        "\"\\ue00c\"",
        "\"\\\\lvertneqq\"",
        "\"\\u22e6\"",
        "\"\\\\lnsim\"",
        "\"\\u2a89\"",
        "\"\\\\lnapprox\"",
        "\"\\u2280\"",
        "\"\\\\nprec\"",
        "\"\\u22e0\"",
        "\"\\\\npreceq\"",
        "\"\\u22e8\"",
        "\"\\\\precnsim\"",
        "\"\\u2ab9\"",
        "\"\\\\precnapprox\"",
        "\"\\u2241\"",
        "\"\\\\nsim\"",
        "\"\\ue006\"",
        "\"\\\\nshortmid\"",
        "\"\\u2224\"",
        "\"\\\\nmid\"",
        "\"\\u22ac\"",
        "\"\\\\nvdash\"",
        "\"\\u22ad\"",
        "\"\\\\nvDash\"",
        "\"\\u22ea\"",
        "\"\\\\ntriangleleft\"",
        "\"\\u22ec\"",
        "\"\\\\ntrianglelefteq\"",
        "\"\\u228a\"",
        "\"\\\\subsetneq\"",
        "\"\\ue01a\"",
        "\"\\\\varsubsetneq\"",
        "\"\\u2acb\"",
        "\"\\\\subsetneqq\"",
        "\"\\ue017\"",
        "\"\\\\varsubsetneqq\"",
        "\"\\u226f\"",
        "\"\\\\ngtr\"",
        "\"\\ue00f\"",
        "\"\\\\ngeqslant\"",
        "\"\\ue00e\"",
        "\"\\\\ngeqq\"",
        "\"\\u2a88\"",
        "\"\\\\gneq\"",
        "\"\\u2269\"",
        "\"\\\\gneqq\"",
        "\"\\ue00d\"",
        "\"\\\\gvertneqq\"",
        "\"\\u22e7\"",
        "\"\\\\gnsim\"",
        "\"\\u2a8a\"",
        "\"\\\\gnapprox\"",
        "\"\\u2281\"",
        "\"\\\\nsucc\"",
        "\"\\u22e1\"",
        "\"\\\\nsucceq\"",
        "\"\\u22e9\"",
        "\"\\\\succnsim\"",
        "\"\\u2aba\"",
        "\"\\\\succnapprox\"",
        "\"\\u2246\"",
        "\"\\\\ncong\"",
        "\"\\ue007\"",
        "\"\\\\nshortparallel\"",
        "\"\\u2226\"",
        "\"\\\\nparallel\"",
        "\"\\u22af\"",
        "\"\\\\nVDash\"",
        "\"\\u22eb\"",
        "\"\\\\ntriangleright\"",
        "\"\\u22ed\"",
        "\"\\\\ntrianglerighteq\"",
        "\"\\ue018\"",
        "\"\\\\nsupseteqq\"",
        "\"\\u228b\"",
        "\"\\\\supsetneq\"",
        "\"\\ue01b\"",
        "\"\\\\varsupsetneq\"",
        "\"\\u2acc\"",
        "\"\\\\supsetneqq\"",
        "\"\\ue019\"",
        "\"\\\\varsupsetneqq\"",
        "\"\\u22ae\"",
        "\"\\\\nVdash\"",
        "\"\\u2ab5\"",
        "\"\\\\precneqq\"",
        "\"\\u2ab6\"",
        "\"\\\\succneqq\"",
        "\"\\ue016\"",
        "\"\\\\nsubseteqq\"",
        "\"\\u22b4\"",
        "\"\\\\unlhd\"",
        "\"\\u22b5\"",
        "\"\\\\unrhd\"",
        "\"\\u219a\"",
        "\"\\\\nleftarrow\"",
        "\"\\u219b\"",
        "\"\\\\nrightarrow\"",
        "\"\\u21cd\"",
        "\"\\\\nLeftarrow\"",
        "\"\\u21cf\"",
        "\"\\\\nRightarrow\"",
        "\"\\u21ae\"",
        "\"\\\\nleftrightarrow\"",
        "\"\\u21ce\"",
        "\"\\\\nLeftrightarrow\"",
        "\"\\u25b3\"",
        "\"\\\\vartriangle\"",
        "\"\\u210f\"",
        "\"\\\\hslash\"",
        "\"\\u25bd\"",
        "\"\\\\triangledown\"",
        "\"\\u25ca\"",
        "\"\\\\lozenge\"",
        "\"\\u24c8\"",
        "\"\\\\circledS\"",
        "\"\\u00ae\"",
        "\"\\\\circledR\"",
        "\"\\u2221\"",
        "\"\\\\measuredangle\"",
        "\"\\u2204\"",
        "\"\\\\nexists\"",
        "\"\\u2127\"",
        "\"\\\\mho\"",
        "\"\\u2132\"",
        "\"\\\\Finv\"",
        "\"\\u2141\"",
        "\"\\\\Game\"",
        "\"\\u006b\"",
        "\"\\\\Bbbk\"",
        "\"\\u2035\"",
        "\"\\\\backprime\"",
        "\"\\u25b2\"",
        "\"\\\\blacktriangle\"",
        "\"\\u25bc\"",
        "\"\\\\blacktriangledown\"",
        "\"\\u25a0\"",
        "\"\\\\blacksquare\"",
        "\"\\u29eb\"",
        "\"\\\\blacklozenge\"",
        "\"\\u2605\"",
        "\"\\\\bigstar\"",
        "\"\\u2222\"",
        "\"\\\\sphericalangle\"",
        "\"\\u2201\"",
        "\"\\\\complement\"",
        "\"\\u00f0\"",
        "\"\\\\eth\"",
        "\"\\u2571\"",
        "\"\\\\diagup\"",
        "\"\\u2572\"",
        "\"\\\\diagdown\"",
        "\"\\u25a1\"",
        "\"\\\\square\"",
        "\"\\u25a1\"",
        "\"\\\\Box\"",
        "\"\\u25ca\"",
        "\"\\\\Diamond\"",
        "\"\\u00a5\"",
        "\"\\\\yen\"",
        "\"\\u2713\"",
        "\"\\\\checkmark\"",
        "\"\\u2136\"",
        "\"\\\\beth\"",
        "\"\\u2138\"",
        "\"\\\\daleth\"",
        "\"\\u2137\"",
        "\"\\\\gimel\"",
        "\"\\u03dd\"",
        "\"\\\\digamma\"",
        "\"\\u03f0\"",
        "\"\\\\varkappa\"",
        "\"\\u250c\"",
        "\"\\\\ulcorner\"",
        "\"\\u2510\"",
        "\"\\\\urcorner\"",
        "\"\\u2514\"",
        "\"\\\\llcorner\"",
        "\"\\u2518\"",
        "\"\\\\lrcorner\"",
        "\"\\u2266\"",
        "\"\\\\leqq\"",
        "\"\\u2a7d\"",
        "\"\\\\leqslant\"",
        "\"\\u2a95\"",
        "\"\\\\eqslantless\"",
        "\"\\u2272\"",
        "\"\\\\lesssim\"",
        "\"\\u2a85\"",
        "\"\\\\lessapprox\"",
        "\"\\u224a\"",
        "\"\\\\approxeq\"",
        "\"\\u22d6\"",
        "\"\\\\lessdot\"",
        "\"\\u22d8\"",
        "\"\\\\lll\"",
        "\"\\u2276\"",
        "\"\\\\lessgtr\"",
        "\"\\u22da\"",
        "\"\\\\lesseqgtr\"",
        "\"\\u2a8b\"",
        "\"\\\\lesseqqgtr\"",
        "\"\\u2251\"",
        "\"\\\\doteqdot\"",
        "\"\\u2253\"",
        "\"\\\\risingdotseq\"",
        "\"\\u2252\"",
        "\"\\\\fallingdotseq\"",
        "\"\\u223d\"",
        "\"\\\\backsim\"",
        "\"\\u22cd\"",
        "\"\\\\backsimeq\"",
        "\"\\u2ac5\"",
        "\"\\\\subseteqq\"",
        "\"\\u22d0\"",
        "\"\\\\Subset\"",
        "\"\\u228f\"",
        "\"\\\\sqsubset\"",
        "\"\\u227c\"",
        "\"\\\\preccurlyeq\"",
        "\"\\u22de\"",
        "\"\\\\curlyeqprec\"",
        "\"\\u227e\"",
        "\"\\\\precsim\"",
        "\"\\u2ab7\"",
        "\"\\\\precapprox\"",
        "\"\\u22b2\"",
        "\"\\\\vartriangleleft\"",
        "\"\\u22b4\"",
        "\"\\\\trianglelefteq\"",
        "\"\\u22a8\"",
        "\"\\\\vDash\"",
        "\"\\u22aa\"",
        "\"\\\\Vvdash\"",
        "\"\\u2323\"",
        "\"\\\\smallsmile\"",
        "\"\\u2322\"",
        "\"\\\\smallfrown\"",
        "\"\\u224f\"",
        "\"\\\\bumpeq\"",
        "\"\\u224e\"",
        "\"\\\\Bumpeq\"",
        "\"\\u2267\"",
        "\"\\\\geqq\"",
        "\"\\u2a7e\"",
        "\"\\\\geqslant\"",
        "\"\\u2a96\"",
        "\"\\\\eqslantgtr\"",
        "\"\\u2273\"",
        "\"\\\\gtrsim\"",
        "\"\\u2a86\"",
        "\"\\\\gtrapprox\"",
        "\"\\u22d7\"",
        "\"\\\\gtrdot\"",
        "\"\\u22d9\"",
        "\"\\\\ggg\"",
        "\"\\u2277\"",
        "\"\\\\gtrless\"",
        "\"\\u22db\"",
        "\"\\\\gtreqless\"",
        "\"\\u2a8c\"",
        "\"\\\\gtreqqless\"",
        "\"\\u2256\"",
        "\"\\\\eqcirc\"",
        "\"\\u2257\"",
        "\"\\\\circeq\"",
        "\"\\u225c\"",
        "\"\\\\triangleq\"",
        "\"\\u223c\"",
        "\"\\\\thicksim\"",
        "\"\\u2248\"",
        "\"\\\\thickapprox\"",
        "\"\\u2ac6\"",
        "\"\\\\supseteqq\"",
        "\"\\u22d1\"",
        "\"\\\\Supset\"",
        "\"\\u2290\"",
        "\"\\\\sqsupset\"",
        "\"\\u227d\"",
        "\"\\\\succcurlyeq\"",
        "\"\\u22df\"",
        "\"\\\\curlyeqsucc\"",
        "\"\\u227f\"",
        "\"\\\\succsim\"",
        "\"\\u2ab8\"",
        "\"\\\\succapprox\"",
        "\"\\u22b3\"",
        "\"\\\\vartriangleright\"",
        "\"\\u22b5\"",
        "\"\\\\trianglerighteq\"",
        "\"\\u22a9\"",
        "\"\\\\Vdash\"",
        "\"\\u2223\"",
        "\"\\\\shortmid\"",
        "\"\\u2225\"",
        "\"\\\\shortparallel\"",
        "\"\\u226c\"",
        "\"\\\\between\"",
        "\"\\u22d4\"",
        "\"\\\\pitchfork\"",
        "\"\\u221d\"",
        "\"\\\\varpropto\"",
        "\"\\u25c0\"",
        "\"\\\\blacktriangleleft\"",
        "\"\\u2234\"",
        "\"\\\\therefore\"",
        "\"\\u220d\"",
        "\"\\\\backepsilon\"",
        "\"\\u25b6\"",
        "\"\\\\blacktriangleright\"",
        "\"\\u2235\"",
        "\"\\\\because\"",
        "\"\\u22d8\"",
        "\"\\\\llless\"",
        "\"\\u22d9\"",
        "\"\\\\gggtr\"",
        "\"\\u22b2\"",
        "\"\\\\lhd\"",
        "\"\\u22b3\"",
        "\"\\\\rhd\"",
        "\"\\u2242\"",
        "\"\\\\eqsim\"",
        "\"\\u22c8\"",
        "\"\\\\Join\"",
        "\"\\u2251\"",
        "\"\\\\Doteq\"",
        "\"\\u2214\"",
        "\"\\\\dotplus\"",
        "\"\\u2216\"",
        "\"\\\\smallsetminus\"",
        "\"\\u22d2\"",
        "\"\\\\Cap\"",
        "\"\\u22d3\"",
        "\"\\\\Cup\"",
        "\"\\u2a5e\"",
        "\"\\\\doublebarwedge\"",
        "\"\\u229f\"",
        "\"\\\\boxminus\"",
        "\"\\u229e\"",
        "\"\\\\boxplus\"",
        "\"\\u22c7\"",
        "\"\\\\divideontimes\"",
        "\"\\u22c9\"",
        "\"\\\\ltimes\"",
        "\"\\u22ca\"",
        "\"\\\\rtimes\"",
        "\"\\u22cb\"",
        "\"\\\\leftthreetimes\"",
        "\"\\u22cc\"",
        "\"\\\\rightthreetimes\"",
        "\"\\u22cf\"",
        "\"\\\\curlywedge\"",
        "\"\\u22ce\"",
        "\"\\\\curlyvee\"",
        "\"\\u229d\"",
        "\"\\\\circleddash\"",
        "\"\\u229b\"",
        "\"\\\\circledast\"",
        "\"\\u22c5\"",
        "\"\\\\centerdot\"",
        "\"\\u22ba\"",
        "\"\\\\intercal\"",
        "\"\\u22d2\"",
        "\"\\\\doublecap\"",
        "\"\\u22d3\"",
        "\"\\\\doublecup\"",
        "\"\\u22a0\"",
        "\"\\\\boxtimes\"",
        "\"\\u21e2\"",
        "\"\\\\dashrightarrow\"",
        "\"\\u21e0\"",
        "\"\\\\dashleftarrow\"",
        "\"\\u21c7\"",
        "\"\\\\leftleftarrows\"",
        "\"\\u21c6\"",
        "\"\\\\leftrightarrows\"",
        "\"\\u21da\"",
        "\"\\\\Lleftarrow\"",
        "\"\\u219e\"",
        "\"\\\\twoheadleftarrow\"",
        "\"\\u21a2\"",
        "\"\\\\leftarrowtail\"",
        "\"\\u21ab\"",
        "\"\\\\looparrowleft\"",
        "\"\\u21cb\"",
        "\"\\\\leftrightharpoons\"",
        "\"\\u21b6\"",
        "\"\\\\curvearrowleft\"",
        "\"\\u21ba\"",
        "\"\\\\circlearrowleft\"",
        "\"\\u21b0\"",
        "\"\\\\Lsh\"",
        "\"\\u21c8\"",
        "\"\\\\upuparrows\"",
        "\"\\u21bf\"",
        "\"\\\\upharpoonleft\"",
        "\"\\u21c3\"",
        "\"\\\\downharpoonleft\"",
        "\"\\u22b8\"",
        "\"\\\\multimap\"",
        "\"\\u21ad\"",
        "\"\\\\leftrightsquigarrow\"",
        "\"\\u21c9\"",
        "\"\\\\rightrightarrows\"",
        "\"\\u21c4\"",
        "\"\\\\rightleftarrows\"",
        "\"\\u21a0\"",
        "\"\\\\twoheadrightarrow\"",
        "\"\\u21a3\"",
        "\"\\\\rightarrowtail\"",
        "\"\\u21ac\"",
        "\"\\\\looparrowright\"",
        "\"\\u21b7\"",
        "\"\\\\curvearrowright\"",
        "\"\\u21bb\"",
        "\"\\\\circlearrowright\"",
        "\"\\u21b1\"",
        "\"\\\\Rsh\"",
        "\"\\u21ca\"",
        "\"\\\\downdownarrows\"",
        "\"\\u21be\"",
        "\"\\\\upharpoonright\"",
        "\"\\u21c2\"",
        "\"\\\\downharpoonright\"",
        "\"\\u21dd\"",
        "\"\\\\rightsquigarrow\"",
        "\"\\u21dd\"",
        "\"\\\\leadsto\"",
        "\"\\u21db\"",
        "\"\\\\Rrightarrow\"",
        "\"\\u21be\"",
        "\"\\\\restriction\"",
        "\"\\u2018\"",
        "\"`\"",
        "\"$\"",
        "\"\\\\$\"",
        "\"$\"",
        "\"\\\\$\"",
        "\"%\"",
        "\"\\\\%\"",
        "\"%\"",
        "\"\\\\%\"",
        "\"_\"",
        "\"\\\\_\"",
        "\"_\"",
        "\"\\\\_\"",
        "\"\\u2220\"",
        "\"\\\\angle\"",
        "\"\\u221e\"",
        "\"\\\\infty\"",
        "\"\\u2032\"",
        "\"\\\\prime\"",
        "\"\\u25b3\"",
        "\"\\\\triangle\"",
        "\"\\u0393\"",
        "\"\\\\Gamma\"",
        "\"\\u0394\"",
        "\"\\\\Delta\"",
        "\"\\u0398\"",
        "\"\\\\Theta\"",
        "\"\\u039b\"",
        "\"\\\\Lambda\"",
        "\"\\u039e\"",
        "\"\\\\Xi\"",
        "\"\\u03a0\"",
        "\"\\\\Pi\"",
        "\"\\u03a3\"",
        "\"\\\\Sigma\"",
        "\"\\u03a5\"",
        "\"\\\\Upsilon\"",
        "\"\\u03a6\"",
        "\"\\\\Phi\"",
        "\"\\u03a8\"",
        "\"\\\\Psi\"",
        "\"\\u03a9\"",
        "\"\\\\Omega\"",
        "\"\\u00ac\"",
        "\"\\\\neg\"",
        "\"\\u00ac\"",
        "\"\\\\lnot\"",
        "\"\\u22a4\"",
        "\"\\\\top\"",
        "\"\\u22a5\"",
        "\"\\\\bot\"",
        "\"\\u2205\"",
        "\"\\\\emptyset\"",
        "\"\\u2205\"",
        "\"\\\\varnothing\"",
        "\"\\u03b1\"",
        "\"\\\\alpha\"",
        "\"\\u03b2\"",
        "\"\\\\beta\"",
        "\"\\u03b3\"",
        "\"\\\\gamma\"",
        "\"\\u03b4\"",
        "\"\\\\delta\"",
        "\"\\u03f5\"",
        "\"\\\\epsilon\"",
        "\"\\u03b6\"",
        "\"\\\\zeta\"",
        "\"\\u03b7\"",
        "\"\\\\eta\"",
        "\"\\u03b8\"",
        "\"\\\\theta\"",
        "\"\\u03b9\"",
        "\"\\\\iota\"",
        "\"\\u03ba\"",
        "\"\\\\kappa\"",
        "\"\\u03bb\"",
        "\"\\\\lambda\"",
        "\"\\u03bc\"",
        "\"\\\\mu\"",
        "\"\\u03bd\"",
        "\"\\\\nu\"",
        "\"\\u03be\"",
        "\"\\\\xi\"",
        "\"o\"",
        "\"\\\\omicron\"",
        "\"\\u03c0\"",
        "\"\\\\pi\"",
        "\"\\u03c1\"",
        "\"\\\\rho\"",
        "\"\\u03c3\"",
        "\"\\\\sigma\"",
        "\"\\u03c4\"",
        "\"\\\\tau\"",
        "\"\\u03c5\"",
        "\"\\\\upsilon\"",
        "\"\\u03d5\"",
        "\"\\\\phi\"",
        "\"\\u03c7\"",
        "\"\\\\chi\"",
        "\"\\u03c8\"",
        "\"\\\\psi\"",
        "\"\\u03c9\"",
        "\"\\\\omega\"",
        "\"\\u03b5\"",
        "\"\\\\varepsilon\"",
        "\"\\u03d1\"",
        "\"\\\\vartheta\"",
        "\"\\u03d6\"",
        "\"\\\\varpi\"",
        "\"\\u03f1\"",
        "\"\\\\varrho\"",
        "\"\\u03c2\"",
        "\"\\\\varsigma\"",
        "\"\\u03c6\"",
        "\"\\\\varphi\"",
        "\"\\u2217\"",
        "\"*\"",
        "\"+\"",
        "\"+\"",
        "\"\\u2212\"",
        "\"-\"",
        "\"\\u22c5\"",
        "\"\\\\cdot\"",
        "\"\\u2218\"",
        "\"\\\\circ\"",
        "\"\\u00f7\"",
        "\"\\\\div\"",
        "\"\\u00b1\"",
        "\"\\\\pm\"",
        "\"\\u00d7\"",
        "\"\\\\times\"",
        "\"\\u2229\"",
        "\"\\\\cap\"",
        "\"\\u222a\"",
        "\"\\\\cup\"",
        "\"\\u2216\"",
        "\"\\\\setminus\"",
        "\"\\u2227\"",
        "\"\\\\land\"",
        "\"\\u2228\"",
        "\"\\\\lor\"",
        "\"\\u2227\"",
        "\"\\\\wedge\"",
        "\"\\u2228\"",
        "\"\\\\vee\"",
        "\"\\u221a\"",
        "\"\\\\surd\"",
        "\"(\"",
        "\"(\"",
        "\"[\"",
        "\"[\"",
        "\"\\u27e8\"",
        "\"\\\\langle\"",
        "\"\\u2223\"",
        "\"\\\\lvert\"",
        "\"\\u2225\"",
        "\"\\\\lVert\"",
        "\")\"",
        "\")\"",
        "\"]\"",
        "\"]\"",
        "\"?\"",
        "\"?\"",
        "\"!\"",
        "\"!\"",
        "\"\\u27e9\"",
        "\"\\\\rangle\"",
        "\"\\u2223\"",
        "\"\\\\rvert\"",
        "\"\\u2225\"",
        "\"\\\\rVert\"",
        "\"=\"",
        "\"=\"",
        "\"<\"",
        "\"<\"",
        "\">\"",
        "\">\"",
        "\":\"",
        "\":\"",
        "\"\\u2248\"",
        "\"\\\\approx\"",
        "\"\\u2245\"",
        "\"\\\\cong\"",
        "\"\\u2265\"",
        "\"\\\\ge\"",
        "\"\\u2265\"",
        "\"\\\\geq\"",
        "\"\\u2190\"",
        "\"\\\\gets\"",
        "\">\"",
        "\"\\\\gt\"",
        "\"\\u2208\"",
        "\"\\\\in\"",
        "\"\\u2209\"",
        "\"\\\\notin\"",
        "\"\\u2282\"",
        "\"\\\\subset\"",
        "\"\\u2283\"",
        "\"\\\\supset\"",
        "\"\\u2286\"",
        "\"\\\\subseteq\"",
        "\"\\u2287\"",
        "\"\\\\supseteq\"",
        "\"\\u2288\"",
        "\"\\\\nsubseteq\"",
        "\"\\u2289\"",
        "\"\\\\nsupseteq\"",
        "\"\\u22a8\"",
        "\"\\\\models\"",
        "\"\\u2190\"",
        "\"\\\\leftarrow\"",
        "\"\\u2264\"",
        "\"\\\\le\"",
        "\"\\u2264\"",
        "\"\\\\leq\"",
        "\"<\"",
        "\"\\\\lt\"",
        "\"\\u2260\"",
        "\"\\\\ne\"",
        "\"\\u2260\"",
        "\"\\\\neq\"",
        "\"\\u2192\"",
        "\"\\\\rightarrow\"",
        "\"\\u2192\"",
        "\"\\\\to\"",
        "\"\\u2271\"",
        "\"\\\\ngeq\"",
        "\"\\u2270\"",
        "\"\\\\nleq\"",
        "\"\\\\!\"",
        "\"\\u00a0\"",
        "\"\\\\ \"",
        "\"\\u00a0\"",
        "\"~\"",
        "\"\\\\,\"",
        "\"\\\\:\"",
        "\"\\\\;\"",
        "\"\\\\enspace\"",
        "\"\\\\qquad\"",
        "\"\\\\quad\"",
        "\"\\u00a0\"",
        "\"\\\\space\"",
        "\",\"",
        "\",\"",
        "\";\"",
        "\";\"",
        "\":\"",
        "\"\\\\colon\"",
        "\"\\u22bc\"",
        "\"\\\\barwedge\"",
        "\"\\u22bb\"",
        "\"\\\\veebar\"",
        "\"\\u2299\"",
        "\"\\\\odot\"",
        "\"\\u2295\"",
        "\"\\\\oplus\"",
        "\"\\u2297\"",
        "\"\\\\otimes\"",
        "\"\\u2202\"",
        "\"\\\\partial\"",
        "\"\\u2298\"",
        "\"\\\\oslash\"",
        "\"\\u229a\"",
        "\"\\\\circledcirc\"",
        "\"\\u22a1\"",
        "\"\\\\boxdot\"",
        "\"\\u25b3\"",
        "\"\\\\bigtriangleup\"",
        "\"\\u25bd\"",
        "\"\\\\bigtriangledown\"",
        "\"\\u2020\"",
        "\"\\\\dagger\"",
        "\"\\u22c4\"",
        "\"\\\\diamond\"",
        "\"\\u22c6\"",
        "\"\\\\star\"",
        "\"\\u25c3\"",
        "\"\\\\triangleleft\"",
        "\"\\u25b9\"",
        "\"\\\\triangleright\"",
        "\"{\"",
        "\"\\\\{\"",
        "\"{\"",
        "\"\\\\{\"",
        "\"}\"",
        "\"\\\\}\"",
        "\"}\"",
        "\"\\\\}\"",
        "\"{\"",
        "\"\\\\lbrace\"",
        "\"}\"",
        "\"\\\\rbrace\"",
        "\"[\"",
        "\"\\\\lbrack\"",
        "\"]\"",
        "\"\\\\rbrack\"",
        "\"\\u230a\"",
        "\"\\\\lfloor\"",
        "\"\\u230b\"",
        "\"\\\\rfloor\"",
        "\"\\u2308\"",
        "\"\\\\lceil\"",
        "\"\\u2309\"",
        "\"\\\\rceil\"",
        "\"\\\\\"",
        "\"\\\\backslash\"",
        "\"\\u2223\"",
        "\"|\"",
        "\"\\u2223\"",
        "\"\\\\vert\"",
        "\"\\u2225\"",
        "\"\\\\|\"",
        "\"\\u2225\"",
        "\"\\\\Vert\"",
        "\"\\u2191\"",
        "\"\\\\uparrow\"",
        "\"\\u21d1\"",
        "\"\\\\Uparrow\"",
        "\"\\u2193\"",
        "\"\\\\downarrow\"",
        "\"\\u21d3\"",
        "\"\\\\Downarrow\"",
        "\"\\u2195\"",
        "\"\\\\updownarrow\"",
        "\"\\u21d5\"",
        "\"\\\\Updownarrow\"",
        "\"\\u2210\"",
        "\"\\\\coprod\"",
        "\"\\u22c1\"",
        "\"\\\\bigvee\"",
        "\"\\u22c0\"",
        "\"\\\\bigwedge\"",
        "\"\\u2a04\"",
        "\"\\\\biguplus\"",
        "\"\\u22c2\"",
        "\"\\\\bigcap\"",
        "\"\\u22c3\"",
        "\"\\\\bigcup\"",
        "\"\\u222b\"",
        "\"\\\\int\"",
        "\"\\u222b\"",
        "\"\\\\intop\"",
        "\"\\u222c\"",
        "\"\\\\iint\"",
        "\"\\u222d\"",
        "\"\\\\iiint\"",
        "\"\\u220f\"",
        "\"\\\\prod\"",
        "\"\\u2211\"",
        "\"\\\\sum\"",
        "\"\\u2a02\"",
        "\"\\\\bigotimes\"",
        "\"\\u2a01\"",
        "\"\\\\bigoplus\"",
        "\"\\u2a00\"",
        "\"\\\\bigodot\"",
        "\"\\u222e\"",
        "\"\\\\oint\"",
        "\"\\u2a06\"",
        "\"\\\\bigsqcup\"",
        "\"\\u222b\"",
        "\"\\\\smallint\"",
        "\"\\u2026\"",
        "\"\\\\textellipsis\"",
        "\"\\u2026\"",
        "\"\\\\mathellipsis\"",
        "\"\\u2026\"",
        "\"\\\\ldots\"",
        "\"\\u2026\"",
        "\"\\\\ldots\"",
        "\"\\u22ef\"",
        "\"\\\\cdots\"",
        "\"\\u22f1\"",
        "\"\\\\ddots\"",
        "\"\\u22ee\"",
        "\"\\\\vdots\"",
        "\"\\u00b4\"",
        "\"\\\\acute\"",
        "\"\\u0060\"",
        "\"\\\\grave\"",
        "\"\\u00a8\"",
        "\"\\\\ddot\"",
        "\"\\u007e\"",
        "\"\\\\tilde\"",
        "\"\\u00af\"",
        "\"\\\\bar\"",
        "\"\\u02d8\"",
        "\"\\\\breve\"",
        "\"\\u02c7\"",
        "\"\\\\check\"",
        "\"\\u005e\"",
        "\"\\\\hat\"",
        "\"\\u20d7\"",
        "\"\\\\vec\"",
        "\"\\u02d9\"",
        "\"\\\\dot\"",
        "\"\\u0131\"",
        "\"\\\\imath\"",
        "\"\\u0237\"",
        "\"\\\\jmath\"",
        "\"\\u2013\"",
        "\"--\"",
        "\"\\u2014\"",
        "\"---\"",
        "\"\\u2018\"",
        "\"`\"",
        "\"\\u2019\"",
        "\"'\"",
        "\"\\u201c\"",
        "\"``\"",
        "\"\\u201d\"",
        "\"''\"",
        "\"\\u00b0\"",
        "\"\\\\degree\"",
        "\"\\u00b0\"",
        "\"\\\\degree\"",
        "\"\\u00a3\"",
        "\"\\\\pounds\"",
        "\"\\u2720\"",
        "\"\\\\maltese\"",
        "\"\\u2720\"",
        "\"\\\\maltese\"",
        "\"\\u00a0\"",
        "\"\\\\ \"",
        "\"\\u00a0\"",
        "\" \"",
        "\"\\u00a0\"",
        "\"~\"",
        "\"0123456789/@.\\\"\"",
        "\"0123456789!@*()-=+[]\\\";:?/.,\"",
        "\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
        "\"\\u2013\"",
        "\"–\"",
        "\"\\u2014\"",
        "\"—\"",
        "\"\\u2018\"",
        "\"‘\"",
        "\"\\u2019\"",
        "\"’\"",
        "\"\\u201c\"",
        "\"“\"",
        "\"\\u201d\"",
        "\"”\"",
        "\"\\\\Gamma\"",
        "\"\\\\Delta\"",
        "\"\\\\Theta\"",
        "\"\\\\Lambda\"",
        "\"\\\\Xi\"",
        "\"\\\\Pi\"",
        "\"\\\\Sigma\"",
        "\"\\\\Upsilon\"",
        "\"\\\\Phi\"",
        "\"\\\\Psi\"",
        "\"\\\\Omega\"",
        "\"\\u0131\"",
        "\"\\u0237\"",
        "\"\\u00a3\"",
        "\"text\"",
        "\"undefined\"",
        "\"No character metrics for '\"",
        "\"' in style '\"",
        "\"'\"",
        "\"mtight\"",
        "\"\\\\\"",
        "\"main\"",
        "\"Main-Regular\"",
        "\"AMS-Regular\"",
        "\"amsrm\"",
        "\"mathord\"",
        "\"textord\"",
        "\"Main-Regular\"",
        "\"mathrm\"",
        "\"unexpected type: \"",
        "\" in mathDefault\"",
        "\"Main-Italic\"",
        "\"mainit\"",
        "\"Math-Italic\"",
        "\"mathit\"",
        "\"mord\"",
        "\"mathit\"",
        "\"\\u200b\"",
        "\"em\"",
        "\"fontsize-ensurer\"",
        "\"reset-\"",
        "\"size5\"",
        "\"individualShift\"",
        "\"kern\"",
        "\"top\"",
        "\"kern\"",
        "\"bottom\"",
        "\"shift\"",
        "\"firstBaseline\"",
        "\"elem\"",
        "\"kern\"",
        "\"em\"",
        "\"baseline-fix\"",
        "\"\\u200b\"",
        "\"vlist\"",
        "\"\\\\qquad\"",
        "\"2em\"",
        "\"qquad\"",
        "\"\\\\quad\"",
        "\"1em\"",
        "\"quad\"",
        "\"\\\\enspace\"",
        "\"0.5em\"",
        "\"enspace\"",
        "\"\\\\;\"",
        "\"0.277778em\"",
        "\"thickspace\"",
        "\"\\\\:\"",
        "\"0.22222em\"",
        "\"mediumspace\"",
        "\"\\\\,\"",
        "\"0.16667em\"",
        "\"thinspace\"",
        "\"\\\\!\"",
        "\"-0.16667em\"",
        "\"negativethinspace\"",
        "\"mathbf\"",
        "\"bold\"",
        "\"Main-Bold\"",
        "\"mathrm\"",
        "\"normal\"",
        "\"Main-Regular\"",
        "\"textit\"",
        "\"italic\"",
        "\"Main-Italic\"",
        "\"mathbb\"",
        "\"double-struck\"",
        "\"AMS-Regular\"",
        "\"mathcal\"",
        "\"script\"",
        "\"Caligraphic-Regular\"",
        "\"mathfrak\"",
        "\"fraktur\"",
        "\"Fraktur-Regular\"",
        "\"mathscr\"",
        "\"script\"",
        "\"Script-Regular\"",
        "\"mathsf\"",
        "\"sans-serif\"",
        "\"SansSerif-Regular\"",
        "\"mathtt\"",
        "\"monospace\"",
        "\"Typewriter-Regular\"",
        "\"Size\"",
        "\"-Regular\"",
        "\"style-wrap\"",
        "\"Main-Regular\"",
        "\"em\"",
        "\"delimsizing\"",
        "\"size\"",
        "\"em\"",
        "\"Size1-Regular\"",
        "\"delim-size1\"",
        "\"Size4-Regular\"",
        "\"delim-size4\"",
        "\"delimsizinginner\"",
        "\"elem\"",
        "\"Size1-Regular\"",
        "\"\\\\uparrow\"",
        "\"\\u23d0\"",
        "\"\\\\Uparrow\"",
        "\"\\u2016\"",
        "\"\\\\downarrow\"",
        "\"\\u23d0\"",
        "\"\\\\Downarrow\"",
        "\"\\u2016\"",
        "\"\\\\updownarrow\"",
        "\"\\\\uparrow\"",
        "\"\\u23d0\"",
        "\"\\\\downarrow\"",
        "\"\\\\Updownarrow\"",
        "\"\\\\Uparrow\"",
        "\"\\u2016\"",
        "\"\\\\Downarrow\"",
        "\"[\"",
        "\"\\\\lbrack\"",
        "\"\\u23a1\"",
        "\"\\u23a2\"",
        "\"\\u23a3\"",
        "\"Size4-Regular\"",
        "\"]\"",
        "\"\\\\rbrack\"",
        "\"\\u23a4\"",
        "\"\\u23a5\"",
        "\"\\u23a6\"",
        "\"Size4-Regular\"",
        "\"\\\\lfloor\"",
        "\"\\u23a2\"",
        "\"\\u23a3\"",
        "\"Size4-Regular\"",
        "\"\\\\lceil\"",
        "\"\\u23a1\"",
        "\"\\u23a2\"",
        "\"Size4-Regular\"",
        "\"\\\\rfloor\"",
        "\"\\u23a5\"",
        "\"\\u23a6\"",
        "\"Size4-Regular\"",
        "\"\\\\rceil\"",
        "\"\\u23a4\"",
        "\"\\u23a5\"",
        "\"Size4-Regular\"",
        "\"(\"",
        "\"\\u239b\"",
        "\"\\u239c\"",
        "\"\\u239d\"",
        "\"Size4-Regular\"",
        "\")\"",
        "\"\\u239e\"",
        "\"\\u239f\"",
        "\"\\u23a0\"",
        "\"Size4-Regular\"",
        "\"\\\\{\"",
        "\"\\\\lbrace\"",
        "\"\\u23a7\"",
        "\"\\u23a8\"",
        "\"\\u23a9\"",
        "\"\\u23aa\"",
        "\"Size4-Regular\"",
        "\"\\\\}\"",
        "\"\\\\rbrace\"",
        "\"\\u23ab\"",
        "\"\\u23ac\"",
        "\"\\u23ad\"",
        "\"\\u23aa\"",
        "\"Size4-Regular\"",
        "\"\\\\lgroup\"",
        "\"\\u23a7\"",
        "\"\\u23a9\"",
        "\"\\u23aa\"",
        "\"Size4-Regular\"",
        "\"\\\\rgroup\"",
        "\"\\u23ab\"",
        "\"\\u23ad\"",
        "\"\\u23aa\"",
        "\"Size4-Regular\"",
        "\"\\\\lmoustache\"",
        "\"\\u23a7\"",
        "\"\\u23ad\"",
        "\"\\u23aa\"",
        "\"Size4-Regular\"",
        "\"\\\\rmoustache\"",
        "\"\\u23ab\"",
        "\"\\u23a9\"",
        "\"\\u23aa\"",
        "\"Size4-Regular\"",
        "\"\\\\surd\"",
        "\"\\ue001\"",
        "\"\\u23b7\"",
        "\"\\ue000\"",
        "\"Size4-Regular\"",
        "\"bottom\"",
        "\"delimsizing\"",
        "\"mult\"",
        "\"(\"",
        "\")\"",
        "\"[\"",
        "\"\\\\lbrack\"",
        "\"]\"",
        "\"\\\\rbrack\"",
        "\"\\\\{\"",
        "\"\\\\lbrace\"",
        "\"\\\\}\"",
        "\"\\\\rbrace\"",
        "\"\\\\lfloor\"",
        "\"\\\\rfloor\"",
        "\"\\\\lceil\"",
        "\"\\\\rceil\"",
        "\"\\\\surd\"",
        "\"\\\\uparrow\"",
        "\"\\\\downarrow\"",
        "\"\\\\updownarrow\"",
        "\"\\\\Uparrow\"",
        "\"\\\\Downarrow\"",
        "\"\\\\Updownarrow\"",
        "\"|\"",
        "\"\\\\|\"",
        "\"\\\\vert\"",
        "\"\\\\Vert\"",
        "\"\\\\lvert\"",
        "\"\\\\rvert\"",
        "\"\\\\lVert\"",
        "\"\\\\rVert\"",
        "\"\\\\lgroup\"",
        "\"\\\\rgroup\"",
        "\"\\\\lmoustache\"",
        "\"\\\\rmoustache\"",
        "\"<\"",
        "\">\"",
        "\"\\\\langle\"",
        "\"\\\\rangle\"",
        "\"/\"",
        "\"\\\\backslash\"",
        "\"\\\\lt\"",
        "\"\\\\gt\"",
        "\"<\"",
        "\"\\\\lt\"",
        "\"\\\\langle\"",
        "\">\"",
        "\"\\\\gt\"",
        "\"\\\\rangle\"",
        "\"Illegal delimiter: '\"",
        "\"'\"",
        "\"small\"",
        "\"small\"",
        "\"small\"",
        "\"large\"",
        "\"large\"",
        "\"large\"",
        "\"large\"",
        "\"small\"",
        "\"small\"",
        "\"small\"",
        "\"stack\"",
        "\"small\"",
        "\"small\"",
        "\"small\"",
        "\"large\"",
        "\"large\"",
        "\"large\"",
        "\"large\"",
        "\"stack\"",
        "\"small\"",
        "\"Main-Regular\"",
        "\"large\"",
        "\"Size\"",
        "\"-Regular\"",
        "\"stack\"",
        "\"Size4-Regular\"",
        "\"stack\"",
        "\"small\"",
        "\"<\"",
        "\"\\\\lt\"",
        "\"\\\\langle\"",
        "\">\"",
        "\"\\\\gt\"",
        "\"\\\\rangle\"",
        "\"small\"",
        "\"large\"",
        "\"stack\"",
        "\"mspace\"",
        "\"mbin\"",
        "\"mbin\"",
        "\"mopen\"",
        "\"mrel\"",
        "\"mop\"",
        "\"mpunct\"",
        "\"mrel\"",
        "\"mclose\"",
        "\"mpunct\"",
        "\"mord\"",
        "\"mord\"",
        "\"mop\"",
        "\"mbin\"",
        "\"mrel\"",
        "\"mopen\"",
        "\"mclose\"",
        "\"mpunct\"",
        "\"minner\"",
        "\"op\"",
        "\"accent\"",
        "\"ordgroup\"",
        "\"color\"",
        "\"font\"",
        "\"mathord\"",
        "\"textord\"",
        "\"bin\"",
        "\"rel\"",
        "\"inner\"",
        "\"open\"",
        "\"close\"",
        "\"punct\"",
        "\"sizing\"",
        "\"reset-\"",
        "\"size5\"",
        "\"nulldelimiter\"",
        "\"mathord\"",
        "\"textord\"",
        "\"mbin\"",
        "\"mrel\"",
        "\"mopen\"",
        "\"mclose\"",
        "\"minner\"",
        "\"mpunct\"",
        "\"mord\"",
        "\"mord\"",
        "\"text\"",
        "\"em\"",
        "\"elem\"",
        "\"shift\"",
        "\"em\"",
        "\"elem\"",
        "\"shift\"",
        "\"elem\"",
        "\"elem\"",
        "\"individualShift\"",
        "\"em\"",
        "\"mord\"",
        "\"msupsub\"",
        "\"display\"",
        "\"text\"",
        "\"elem\"",
        "\"elem\"",
        "\"individualShift\"",
        "\"frac-line\"",
        "\"elem\"",
        "\"elem\"",
        "\"elem\"",
        "\"individualShift\"",
        "\"mopen\"",
        "\"mopen\"",
        "\"mclose\"",
        "\"mclose\"",
        "\"mord\"",
        "\"mfrac\"",
        "\"ex\"",
        "\"mu\"",
        "\"separator\"",
        "\"arraycolsep\"",
        "\"em\"",
        "\"|\"",
        "\"vertical-separator\"",
        "\"em\"",
        "\"em\"",
        "\"Invalid separator type: \"",
        "\"arraycolsep\"",
        "\"em\"",
        "\"elem\"",
        "\"individualShift\"",
        "\"col-align-\"",
        "\"c\"",
        "\"arraycolsep\"",
        "\"em\"",
        "\"mtable\"",
        "\"mord\"",
        "\"\\\\ \"",
        "\"\\\\space\"",
        "\" \"",
        "\"~\"",
        "\"text\"",
        "\"textord\"",
        "\"mspace\"",
        "\"mspace\"",
        "\"inner\"",
        "\"fix\"",
        "\"mord\"",
        "\"llap\"",
        "\"inner\"",
        "\"fix\"",
        "\"mord\"",
        "\"rlap\"",
        "\"supsub\"",
        "\"\\\\smallint\"",
        "\"Size2-Regular\"",
        "\"Size1-Regular\"",
        "\"math\"",
        "\"mop\"",
        "\"op-symbol\"",
        "\"large-op\"",
        "\"small-op\"",
        "\"mop\"",
        "\"mop\"",
        "\"kern\"",
        "\"elem\"",
        "\"kern\"",
        "\"elem\"",
        "\"top\"",
        "\"em\"",
        "\"elem\"",
        "\"kern\"",
        "\"elem\"",
        "\"kern\"",
        "\"bottom\"",
        "\"em\"",
        "\"kern\"",
        "\"elem\"",
        "\"kern\"",
        "\"elem\"",
        "\"kern\"",
        "\"elem\"",
        "\"kern\"",
        "\"bottom\"",
        "\"em\"",
        "\"em\"",
        "\"mop\"",
        "\"op-limits\"",
        "\"em\"",
        "\"bmod\"",
        "\"mspace\"",
        "\"negativemediumspace\"",
        "\"mspace\"",
        "\"thickspace\"",
        "\"mspace\"",
        "\"quad\"",
        "\"mod\"",
        "\"mspace\"",
        "\"twelvemuspace\"",
        "\"mspace\"",
        "\"eightmuspace\"",
        "\"pod\"",
        "\"pmod\"",
        "\"(\"",
        "\"pod\"",
        "\"m\"",
        "\"o\"",
        "\"d\"",
        "\"bmod\"",
        "\"mbin\"",
        "\"mspace\"",
        "\"thickspace\"",
        "\"mspace\"",
        "\"negativemediumspace\"",
        "\"mspace\"",
        "\"sixmuspace\"",
        "\"pod\"",
        "\"pmod\"",
        "\")\"",
        "\"k\"",
        "\"K\"",
        "\"a\"",
        "\"A\"",
        "\"t\"",
        "\"T\"",
        "\"e\"",
        "\"E\"",
        "\"x\"",
        "\"X\"",
        "\"mord\"",
        "\"katex-logo\"",
        "\"overline-line\"",
        "\"elem\"",
        "\"kern\"",
        "\"elem\"",
        "\"kern\"",
        "\"firstBaseline\"",
        "\"mord\"",
        "\"overline\"",
        "\"underline-line\"",
        "\"kern\"",
        "\"elem\"",
        "\"kern\"",
        "\"elem\"",
        "\"top\"",
        "\"mord\"",
        "\"underline\"",
        "\"sqrt-line\"",
        "\"sqrt-sign\"",
        "\"\\\\surd\"",
        "\"em\"",
        "\"elem\"",
        "\"kern\"",
        "\"elem\"",
        "\"kern\"",
        "\"firstBaseline\"",
        "\"mord\"",
        "\"sqrt\"",
        "\"elem\"",
        "\"shift\"",
        "\"root\"",
        "\"mord\"",
        "\"sqrt\"",
        "\"sizing\"",
        "\"sizing\"",
        "\"reset-\"",
        "\"reset-\"",
        "\"reset-\"",
        "\"display\"",
        "\"text\"",
        "\"script\"",
        "\"scriptscript\"",
        "\".\"",
        "\".\"",
        "\"mopen\"",
        "\"mopen\"",
        "\".\"",
        "\"mclose\"",
        "\"mclose\"",
        "\"minner\"",
        "\".\"",
        "\"mord\"",
        "\"rule\"",
        "\"em\"",
        "\"em\"",
        "\"em\"",
        "\"mord\"",
        "\"rule\"",
        "\"em\"",
        "\"supsub\"",
        "\"Main-Regular\"",
        "\"math\"",
        "\"\\\\vec\"",
        "\"accent-vec\"",
        "\"accent-body\"",
        "\"elem\"",
        "\"kern\"",
        "\"elem\"",
        "\"firstBaseline\"",
        "\"em\"",
        "\"mord\"",
        "\"accent\"",
        "\"mord\"",
        "\"Got group of unknown type: '\"",
        "\"'\"",
        "\"base\"",
        "\"strut\"",
        "\"strut\"",
        "\"bottom\"",
        "\"em\"",
        "\"em\"",
        "\"em\"",
        "\"katex-html\"",
        "\"aria-hidden\"",
        "\"true\"",
        "\"http://www.w3.org/1998/Math/MathML\"",
        "\"<\"",
        "\" \"",
        "\"=\\\"\"",
        "\"\\\"\"",
        "\">\"",
        "\"</\"",
        "\">\"",
        "\"mathit\"",
        "\"italic\"",
        "\"\\\\imath\"",
        "\"\\\\jmath\"",
        "\"mi\"",
        "\"mathvariant\"",
        "\"normal\"",
        "\"mn\"",
        "\"mathvariant\"",
        "\"mi\"",
        "\"mathvariant\"",
        "\"mo\"",
        "\"mo\"",
        "\"mo\"",
        "\"mo\"",
        "\"mo\"",
        "\"mo\"",
        "\"separator\"",
        "\"true\"",
        "\"mrow\"",
        "\"mtext\"",
        "\"mstyle\"",
        "\"mathcolor\"",
        "\"msup\"",
        "\"msub\"",
        "\"msubsup\"",
        "\"mfrac\"",
        "\"linethickness\"",
        "\"0px\"",
        "\"mo\"",
        "\"fence\"",
        "\"true\"",
        "\"mo\"",
        "\"fence\"",
        "\"true\"",
        "\"mrow\"",
        "\"mtable\"",
        "\"mtr\"",
        "\"mtd\"",
        "\"mroot\"",
        "\"msqrt\"",
        "\".\"",
        "\"mo\"",
        "\"fence\"",
        "\"true\"",
        "\".\"",
        "\"mo\"",
        "\"fence\"",
        "\"true\"",
        "\"mrow\"",
        "\"mo\"",
        "\"fence\"",
        "\"true\"",
        "\"mo\"",
        "\"mover\"",
        "\"accent\"",
        "\"true\"",
        "\"\\\\ \"",
        "\"\\\\space\"",
        "\" \"",
        "\"~\"",
        "\"mtext\"",
        "\"\\u00a0\"",
        "\"mspace\"",
        "\"width\"",
        "\"mo\"",
        "\"mo\"",
        "\"mi\"",
        "\"pod\"",
        "\"pmod\"",
        "\"mo\"",
        "\"(\"",
        "\"pod\"",
        "\"mo\"",
        "\"mod\"",
        "\"mspace\"",
        "\"width\"",
        "\"0.333333em\"",
        "\"pod\"",
        "\"pmod\"",
        "\"mo\"",
        "\")\"",
        "\"mo\"",
        "\"mtext\"",
        "\"KaTeX\"",
        "\".\"",
        "\"mo\"",
        "\"mopen\"",
        "\"mclose\"",
        "\"fence\"",
        "\"true\"",
        "\"fence\"",
        "\"false\"",
        "\"mstyle\"",
        "\"display\"",
        "\"0\"",
        "\"true\"",
        "\"text\"",
        "\"0\"",
        "\"false\"",
        "\"script\"",
        "\"1\"",
        "\"false\"",
        "\"scriptscript\"",
        "\"2\"",
        "\"false\"",
        "\"scriptlevel\"",
        "\"displaystyle\"",
        "\"mstyle\"",
        "\"mathsize\"",
        "\"em\"",
        "\"mo\"",
        "\"\\u203e\"",
        "\"stretchy\"",
        "\"true\"",
        "\"mover\"",
        "\"accent\"",
        "\"true\"",
        "\"mo\"",
        "\"\\u203e\"",
        "\"stretchy\"",
        "\"true\"",
        "\"munder\"",
        "\"accentunder\"",
        "\"true\"",
        "\"mrow\"",
        "\"mrow\"",
        "\"mpadded\"",
        "\"lspace\"",
        "\"-1width\"",
        "\"width\"",
        "\"0px\"",
        "\"mpadded\"",
        "\"width\"",
        "\"0px\"",
        "\"mphantom\"",
        "\"mstyle\"",
        "\"mrow\"",
        "\"Got group of unknown type: '\"",
        "\"'\"",
        "\"mrow\"",
        "\"annotation\"",
        "\"encoding\"",
        "\"application/x-tex\"",
        "\"semantics\"",
        "\"math\"",
        "\"katex-mathml\"",
        "\"katex-blue\"",
        "\"#6495ed\"",
        "\"katex-orange\"",
        "\"#ffa500\"",
        "\"katex-pink\"",
        "\"#ff00af\"",
        "\"katex-red\"",
        "\"#df0030\"",
        "\"katex-green\"",
        "\"#28ae7b\"",
        "\"katex-gray\"",
        "\"gray\"",
        "\"katex-purple\"",
        "\"#9d38bd\"",
        "\"katex-blueA\"",
        "\"#ccfaff\"",
        "\"katex-blueB\"",
        "\"#80f6ff\"",
        "\"katex-blueC\"",
        "\"#63d9ea\"",
        "\"katex-blueD\"",
        "\"#11accd\"",
        "\"katex-blueE\"",
        "\"#0c7f99\"",
        "\"katex-tealA\"",
        "\"#94fff5\"",
        "\"katex-tealB\"",
        "\"#26edd5\"",
        "\"katex-tealC\"",
        "\"#01d1c1\"",
        "\"katex-tealD\"",
        "\"#01a995\"",
        "\"katex-tealE\"",
        "\"#208170\"",
        "\"katex-greenA\"",
        "\"#b6ffb0\"",
        "\"katex-greenB\"",
        "\"#8af281\"",
        "\"katex-greenC\"",
        "\"#74cf70\"",
        "\"katex-greenD\"",
        "\"#1fab54\"",
        "\"katex-greenE\"",
        "\"#0d923f\"",
        "\"katex-goldA\"",
        "\"#ffd0a9\"",
        "\"katex-goldB\"",
        "\"#ffbb71\"",
        "\"katex-goldC\"",
        "\"#ff9c39\"",
        "\"katex-goldD\"",
        "\"#e07d10\"",
        "\"katex-goldE\"",
        "\"#a75a05\"",
        "\"katex-redA\"",
        "\"#fca9a9\"",
        "\"katex-redB\"",
        "\"#ff8482\"",
        "\"katex-redC\"",
        "\"#f9685d\"",
        "\"katex-redD\"",
        "\"#e84d39\"",
        "\"katex-redE\"",
        "\"#bc2612\"",
        "\"katex-maroonA\"",
        "\"#ffbde0\"",
        "\"katex-maroonB\"",
        "\"#ff92c6\"",
        "\"katex-maroonC\"",
        "\"#ed5fa6\"",
        "\"katex-maroonD\"",
        "\"#ca337c\"",
        "\"katex-maroonE\"",
        "\"#9e034e\"",
        "\"katex-purpleA\"",
        "\"#ddd7ff\"",
        "\"katex-purpleB\"",
        "\"#c6b9fc\"",
        "\"katex-purpleC\"",
        "\"#aa87ff\"",
        "\"katex-purpleD\"",
        "\"#7854ab\"",
        "\"katex-purpleE\"",
        "\"#543b78\"",
        "\"katex-mintA\"",
        "\"#f5f9e8\"",
        "\"katex-mintB\"",
        "\"#edf2df\"",
        "\"katex-mintC\"",
        "\"#e0e5cc\"",
        "\"katex-grayA\"",
        "\"#f6f7f7\"",
        "\"katex-grayB\"",
        "\"#f0f1f2\"",
        "\"katex-grayC\"",
        "\"#e3e5e6\"",
        "\"katex-grayD\"",
        "\"#d6d8da\"",
        "\"katex-grayE\"",
        "\"#babec2\"",
        "\"katex-grayF\"",
        "\"#888d93\"",
        "\"katex-grayG\"",
        "\"#626569\"",
        "\"katex-grayH\"",
        "\"#3b3e40\"",
        "\"katex-grayI\"",
        "\"#21242c\"",
        "\"katex-kaBlue\"",
        "\"#314453\"",
        "\"katex-kaGreen\"",
        "\"#71B307\"",
        "\"transparent\"",
        "\"size5\"",
        "\"katex\"",
        "\"katex-display\"",
        "\"string\"",
        "\"number\"",
        "\"ordgroup\"",
        "\"\\\\sqrt\"",
        "\"sqrt\"",
        "\"\\\\text\"",
        "\"\\\\textrm\"",
        "\"mathrm\"",
        "\"\\\\textsf\"",
        "\"mathsf\"",
        "\"\\\\texttt\"",
        "\"mathtt\"",
        "\"\\\\textnormal\"",
        "\"mathrm\"",
        "\"\\\\textbf\"",
        "\"mathbf\"",
        "\"\\\\textit\"",
        "\"textit\"",
        "\"\\\\text\"",
        "\"\\\\textrm\"",
        "\"\\\\textsf\"",
        "\"\\\\texttt\"",
        "\"\\\\textnormal\"",
        "\"\\\\textbf\"",
        "\"\\\\textit\"",
        "\"text\"",
        "\"text\"",
        "\"\\\\color\"",
        "\"color\"",
        "\"original\"",
        "\"color\"",
        "\"\\\\overline\"",
        "\"overline\"",
        "\"\\\\underline\"",
        "\"underline\"",
        "\"\\\\rule\"",
        "\"size\"",
        "\"size\"",
        "\"size\"",
        "\"rule\"",
        "\"\\\\kern\"",
        "\"\\\\mkern\"",
        "\"size\"",
        "\"kern\"",
        "\"\\\\KaTeX\"",
        "\"katex\"",
        "\"\\\\phantom\"",
        "\"phantom\"",
        "\"\\\\mathord\"",
        "\"\\\\mathbin\"",
        "\"\\\\mathrel\"",
        "\"\\\\mathopen\"",
        "\"\\\\mathclose\"",
        "\"\\\\mathpunct\"",
        "\"\\\\mathinner\"",
        "\"mclass\"",
        "\"m\"",
        "\"\\\\stackrel\"",
        "\"op\"",
        "\"op\"",
        "\"supsub\"",
        "\"mclass\"",
        "\"mrel\"",
        "\"\\\\bmod\"",
        "\"mod\"",
        "\"bmod\"",
        "\"\\\\pod\"",
        "\"\\\\pmod\"",
        "\"\\\\mod\"",
        "\"mod\"",
        "\"\\\\bigl\"",
        "\"mopen\"",
        "\"\\\\Bigl\"",
        "\"mopen\"",
        "\"\\\\biggl\"",
        "\"mopen\"",
        "\"\\\\Biggl\"",
        "\"mopen\"",
        "\"\\\\bigr\"",
        "\"mclose\"",
        "\"\\\\Bigr\"",
        "\"mclose\"",
        "\"\\\\biggr\"",
        "\"mclose\"",
        "\"\\\\Biggr\"",
        "\"mclose\"",
        "\"\\\\bigm\"",
        "\"mrel\"",
        "\"\\\\Bigm\"",
        "\"mrel\"",
        "\"\\\\biggm\"",
        "\"mrel\"",
        "\"\\\\Biggm\"",
        "\"mrel\"",
        "\"\\\\big\"",
        "\"mord\"",
        "\"\\\\Big\"",
        "\"mord\"",
        "\"\\\\bigg\"",
        "\"mord\"",
        "\"\\\\Bigg\"",
        "\"mord\"",
        "\"(\"",
        "\")\"",
        "\"[\"",
        "\"\\\\lbrack\"",
        "\"]\"",
        "\"\\\\rbrack\"",
        "\"\\\\{\"",
        "\"\\\\lbrace\"",
        "\"\\\\}\"",
        "\"\\\\rbrace\"",
        "\"\\\\lfloor\"",
        "\"\\\\rfloor\"",
        "\"\\\\lceil\"",
        "\"\\\\rceil\"",
        "\"<\"",
        "\">\"",
        "\"\\\\langle\"",
        "\"\\\\rangle\"",
        "\"\\\\lt\"",
        "\"\\\\gt\"",
        "\"\\\\lvert\"",
        "\"\\\\rvert\"",
        "\"\\\\lVert\"",
        "\"\\\\rVert\"",
        "\"\\\\lgroup\"",
        "\"\\\\rgroup\"",
        "\"\\\\lmoustache\"",
        "\"\\\\rmoustache\"",
        "\"/\"",
        "\"\\\\backslash\"",
        "\"|\"",
        "\"\\\\vert\"",
        "\"\\\\|\"",
        "\"\\\\Vert\"",
        "\"\\\\uparrow\"",
        "\"\\\\Uparrow\"",
        "\"\\\\downarrow\"",
        "\"\\\\Downarrow\"",
        "\"\\\\updownarrow\"",
        "\"\\\\Updownarrow\"",
        "\".\"",
        "\"\\\\Bbb\"",
        "\"\\\\mathbb\"",
        "\"\\\\bold\"",
        "\"\\\\mathbf\"",
        "\"\\\\frak\"",
        "\"\\\\mathfrak\"",
        "\"\\\\blue\"",
        "\"\\\\orange\"",
        "\"\\\\pink\"",
        "\"\\\\red\"",
        "\"\\\\green\"",
        "\"\\\\gray\"",
        "\"\\\\purple\"",
        "\"\\\\blueA\"",
        "\"\\\\blueB\"",
        "\"\\\\blueC\"",
        "\"\\\\blueD\"",
        "\"\\\\blueE\"",
        "\"\\\\tealA\"",
        "\"\\\\tealB\"",
        "\"\\\\tealC\"",
        "\"\\\\tealD\"",
        "\"\\\\tealE\"",
        "\"\\\\greenA\"",
        "\"\\\\greenB\"",
        "\"\\\\greenC\"",
        "\"\\\\greenD\"",
        "\"\\\\greenE\"",
        "\"\\\\goldA\"",
        "\"\\\\goldB\"",
        "\"\\\\goldC\"",
        "\"\\\\goldD\"",
        "\"\\\\goldE\"",
        "\"\\\\redA\"",
        "\"\\\\redB\"",
        "\"\\\\redC\"",
        "\"\\\\redD\"",
        "\"\\\\redE\"",
        "\"\\\\maroonA\"",
        "\"\\\\maroonB\"",
        "\"\\\\maroonC\"",
        "\"\\\\maroonD\"",
        "\"\\\\maroonE\"",
        "\"\\\\purpleA\"",
        "\"\\\\purpleB\"",
        "\"\\\\purpleC\"",
        "\"\\\\purpleD\"",
        "\"\\\\purpleE\"",
        "\"\\\\mintA\"",
        "\"\\\\mintB\"",
        "\"\\\\mintC\"",
        "\"\\\\grayA\"",
        "\"\\\\grayB\"",
        "\"\\\\grayC\"",
        "\"\\\\grayD\"",
        "\"\\\\grayE\"",
        "\"\\\\grayF\"",
        "\"\\\\grayG\"",
        "\"\\\\grayH\"",
        "\"\\\\grayI\"",
        "\"\\\\kaBlue\"",
        "\"\\\\kaGreen\"",
        "\"color\"",
        "\"katex-\"",
        "\"\\\\arcsin\"",
        "\"\\\\arccos\"",
        "\"\\\\arctan\"",
        "\"\\\\arg\"",
        "\"\\\\cos\"",
        "\"\\\\cosh\"",
        "\"\\\\cot\"",
        "\"\\\\coth\"",
        "\"\\\\csc\"",
        "\"\\\\deg\"",
        "\"\\\\dim\"",
        "\"\\\\exp\"",
        "\"\\\\hom\"",
        "\"\\\\ker\"",
        "\"\\\\lg\"",
        "\"\\\\ln\"",
        "\"\\\\log\"",
        "\"\\\\sec\"",
        "\"\\\\sin\"",
        "\"\\\\sinh\"",
        "\"\\\\tan\"",
        "\"\\\\tanh\"",
        "\"op\"",
        "\"\\\\det\"",
        "\"\\\\gcd\"",
        "\"\\\\inf\"",
        "\"\\\\lim\"",
        "\"\\\\liminf\"",
        "\"\\\\limsup\"",
        "\"\\\\max\"",
        "\"\\\\min\"",
        "\"\\\\Pr\"",
        "\"\\\\sup\"",
        "\"op\"",
        "\"\\\\int\"",
        "\"\\\\iint\"",
        "\"\\\\iiint\"",
        "\"\\\\oint\"",
        "\"op\"",
        "\"\\\\coprod\"",
        "\"\\\\bigvee\"",
        "\"\\\\bigwedge\"",
        "\"\\\\biguplus\"",
        "\"\\\\bigcap\"",
        "\"\\\\bigcup\"",
        "\"\\\\intop\"",
        "\"\\\\prod\"",
        "\"\\\\sum\"",
        "\"\\\\bigotimes\"",
        "\"\\\\bigoplus\"",
        "\"\\\\bigodot\"",
        "\"\\\\bigsqcup\"",
        "\"\\\\smallint\"",
        "\"op\"",
        "\"\\\\mathop\"",
        "\"op\"",
        "\"\\\\dfrac\"",
        "\"\\\\frac\"",
        "\"\\\\tfrac\"",
        "\"\\\\dbinom\"",
        "\"\\\\binom\"",
        "\"\\\\tbinom\"",
        "\"\\\\\\\\atopfrac\"",
        "\"auto\"",
        "\"\\\\dfrac\"",
        "\"\\\\frac\"",
        "\"\\\\tfrac\"",
        "\"\\\\\\\\atopfrac\"",
        "\"\\\\dbinom\"",
        "\"\\\\binom\"",
        "\"\\\\tbinom\"",
        "\"(\"",
        "\")\"",
        "\"Unrecognized genfrac command\"",
        "\"\\\\dfrac\"",
        "\"\\\\dbinom\"",
        "\"display\"",
        "\"\\\\tfrac\"",
        "\"\\\\tbinom\"",
        "\"text\"",
        "\"genfrac\"",
        "\"\\\\llap\"",
        "\"\\\\rlap\"",
        "\"Invalid delimiter: '\"",
        "\"' after '\"",
        "\"'\"",
        "\"\\\\bigl\"",
        "\"\\\\Bigl\"",
        "\"\\\\biggl\"",
        "\"\\\\Biggl\"",
        "\"\\\\bigr\"",
        "\"\\\\Bigr\"",
        "\"\\\\biggr\"",
        "\"\\\\Biggr\"",
        "\"\\\\bigm\"",
        "\"\\\\Bigm\"",
        "\"\\\\biggm\"",
        "\"\\\\Biggm\"",
        "\"\\\\big\"",
        "\"\\\\Big\"",
        "\"\\\\bigg\"",
        "\"\\\\Bigg\"",
        "\"delimsizing\"",
        "\"\\\\left\"",
        "\"\\\\right\"",
        "\"leftright\"",
        "\"\\\\middle\"",
        "\"\\\\middle without preceding \\\\left\"",
        "\"middle\"",
        "\"\\\\tiny\"",
        "\"\\\\scriptsize\"",
        "\"\\\\footnotesize\"",
        "\"\\\\small\"",
        "\"\\\\normalsize\"",
        "\"\\\\large\"",
        "\"\\\\Large\"",
        "\"\\\\LARGE\"",
        "\"\\\\huge\"",
        "\"\\\\Huge\"",
        "\"\\\\displaystyle\"",
        "\"\\\\textstyle\"",
        "\"\\\\scriptstyle\"",
        "\"\\\\scriptscriptstyle\"",
        "\"\\\\mathrm\"",
        "\"\\\\mathit\"",
        "\"\\\\mathbf\"",
        "\"\\\\mathbb\"",
        "\"\\\\mathcal\"",
        "\"\\\\mathfrak\"",
        "\"\\\\mathscr\"",
        "\"\\\\mathsf\"",
        "\"\\\\mathtt\"",
        "\"\\\\Bbb\"",
        "\"\\\\bold\"",
        "\"\\\\frak\"",
        "\"font\"",
        "\"\\\\acute\"",
        "\"\\\\grave\"",
        "\"\\\\ddot\"",
        "\"\\\\tilde\"",
        "\"\\\\bar\"",
        "\"\\\\breve\"",
        "\"\\\\check\"",
        "\"\\\\hat\"",
        "\"\\\\vec\"",
        "\"\\\\dot\"",
        "\"accent\"",
        "\"\\\\over\"",
        "\"\\\\choose\"",
        "\"\\\\atop\"",
        "\"\\\\over\"",
        "\"\\\\frac\"",
        "\"\\\\choose\"",
        "\"\\\\binom\"",
        "\"\\\\atop\"",
        "\"\\\\\\\\atopfrac\"",
        "\"Unrecognized infix genfrac command\"",
        "\"infix\"",
        "\"\\\\\\\\\"",
        "\"\\\\cr\"",
        "\"size\"",
        "\"cr\"",
        "\"\\\\begin\"",
        "\"\\\\end\"",
        "\"text\"",
        "\"ordgroup\"",
        "\"Invalid environment name\"",
        "\"\"",
        "\"environment\"",
        "\"ordgroup\"",
        "\"&\"",
        "\"\\\\end\"",
        "\"\\\\\\\\\"",
        "\"\\\\cr\"",
        "\"Expected & or \\\\\\\\ or \\\\end\"",
        "\"string\"",
        "\"number\"",
        "\"array\"",
        "\"lcr\"",
        "\"align\"",
        "\"|\"",
        "\"separator\"",
        "\"|\"",
        "\"Unknown column alignment: \"",
        "\"array\"",
        "\"matrix\"",
        "\"pmatrix\"",
        "\"bmatrix\"",
        "\"Bmatrix\"",
        "\"vmatrix\"",
        "\"Vmatrix\"",
        "\"matrix\"",
        "\"pmatrix\"",
        "\"(\"",
        "\")\"",
        "\"bmatrix\"",
        "\"[\"",
        "\"]\"",
        "\"Bmatrix\"",
        "\"\\\\{\"",
        "\"\\\\}\"",
        "\"vmatrix\"",
        "\"|\"",
        "\"|\"",
        "\"Vmatrix\"",
        "\"\\\\Vert\"",
        "\"\\\\Vert\"",
        "\"array\"",
        "\"leftright\"",
        "\"cases\"",
        "\"array\"",
        "\"align\"",
        "\"l\"",
        "\"align\"",
        "\"l\"",
        "\"leftright\"",
        "\"\\\\{\"",
        "\".\"",
        "\"aligned\"",
        "\"array\"",
        "\"ordgroup\"",
        "\"r\"",
        "\"l\"",
        "\"align\"",
        "\"|()\"",
        "\"g\"",
        "\"i\"",
        "\"\"",
        "\"m\"",
        "\"\"",
        "\"u\"",
        "\"\"",
        "\"matchAt(...): Only non-global regexes are supported\"",
        "\"([ \\r\\n\\t]+)|\"",
        "\"([!-\\\\[\\\\]-\\u2027\\u202A-\\uD7FF\\uF900-\\uFFFF]\"",
        "\"|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\"",
        "\"|\\\\\\\\(?:[a-zA-Z]+|[^\\uD800-\\uDFFF])\"",
        "\")\"",
        "\"EOF\"",
        "\"Unexpected character: '\"",
        "\"'\"",
        "\" \"",
        "\"\\\\\"",
        "\"string\"",
        "\"EOF\"",
        "\" \"",
        "\"Expected '\"",
        "\"', got '\"",
        "\"'\"",
        "\"math\"",
        "\"math\"",
        "\"EOF\"",
        "\"}\"",
        "\"\\\\end\"",
        "\"\\\\right\"",
        "\"&\"",
        "\"\\\\\\\\\"",
        "\"\\\\cr\"",
        "\"\\\\\"",
        "\"infix\"",
        "\"only one infix operator per group\"",
        "\"ordgroup\"",
        "\"ordgroup\"",
        "\"ordgroup\"",
        "\"ordgroup\"",
        "\"\\\\\"",
        "\"Expected group after '\"",
        "\"'\"",
        "\"Got function '\"",
        "\"' with no arguments \"",
        "\"as \"",
        "\"textord\"",
        "\"text\"",
        "\"text\"",
        "\"text\"",
        "\"color\"",
        "\"color\"",
        "\"text\"",
        "\"\\\\limits\"",
        "\"\\\\nolimits\"",
        "\"op\"",
        "\"Limit controls must follow a math operator\"",
        "\"\\\\limits\"",
        "\"^\"",
        "\"Double superscript\"",
        "\"superscript\"",
        "\"_\"",
        "\"Double subscript\"",
        "\"subscript\"",
        "\"'\"",
        "\"textord\"",
        "\"\\\\prime\"",
        "\"'\"",
        "\"ordgroup\"",
        "\"supsub\"",
        "\"\\\\tiny\"",
        "\"\\\\scriptsize\"",
        "\"\\\\footnotesize\"",
        "\"\\\\small\"",
        "\"\\\\normalsize\"",
        "\"\\\\large\"",
        "\"\\\\Large\"",
        "\"\\\\LARGE\"",
        "\"\\\\huge\"",
        "\"\\\\Huge\"",
        "\"\\\\displaystyle\"",
        "\"\\\\textstyle\"",
        "\"\\\\scriptstyle\"",
        "\"\\\\scriptscriptstyle\"",
        "\"\\\\left\"",
        "\"\\\\right\"",
        "\"leftright\"",
        "\"\\\\begin\"",
        "\"No such environment: \"",
        "\"\\\\begin{\"",
        "\"}\"",
        "\"\\\\end\"",
        "\"Mismatch: \\\\begin{\"",
        "\"} matched \"",
        "\"by \\\\end{\"",
        "\"}\"",
        "\"sizing\"",
        "\"size\"",
        "\"styling\"",
        "\"text\"",
        "\"Can't use function '\"",
        "\"' in text mode\"",
        "\"\\\\\"",
        "\"Expected group after '\"",
        "\"'\"",
        "\"Got function '\"",
        "\"' as \"",
        "\"argument to '\"",
        "\"'\"",
        "\"original\"",
        "\"color\"",
        "\"size\"",
        "\"text\"",
        "\" \"",
        "\"[\"",
        "\"text\"",
        "\"[\"",
        "\"{\"",
        "\"\"",
        "\"]\"",
        "\"}\"",
        "\"EOF\"",
        "\"Unexpected end of input in \"",
        "\"]\"",
        "\"}\"",
        "\"text\"",
        "\"\"",
        "\"EOF\"",
        "\"\"",
        "\"Invalid \"",
        "\": '\"",
        "\"'\"",
        "\"color\"",
        "\"Invalid color: '\"",
        "\"'\"",
        "\"color\"",
        "\"{\"",
        "\"size\"",
        "\"size\"",
        "\"Invalid size: '\"",
        "\"'\"",
        "\"em\"",
        "\"ex\"",
        "\"mu\"",
        "\"Invalid unit: '\"",
        "\"'\"",
        "\"color\"",
        "\"[\"",
        "\"{\"",
        "\"]\"",
        "\"]\"",
        "\"}\"",
        "\"text\"",
        "\"ordgroup\"",
        "\"-\"",
        "\"-\"",
        "\"-\"",
        "\"textord\"",
        "\"---\"",
        "\"text\"",
        "\"textord\"",
        "\"--\"",
        "\"text\"",
        "\"'\"",
        "\"`\"",
        "\"textord\"",
        "\"text\"",
        "\"text\"",
        "\"textord\"",
        "'string'",
        "'KaTeX can only parse string typed expression'",
        "\"undefined\"",
        "\"CSS1Compat\"",
        "\"undefined\"",
        "\"Warning: KaTeX doesn't work in quirks mode. Make sure your \"",
        "\"website has a suitable doctype.\"",
        "\"KaTeX doesn't work in quirks mode.\"",
        "\"\\n<style>\\ndt-math[block] {\\n  display: block;\\n}\\n</style>\\n\"",
        "\"dt-math\"",
        "\"block\"",
        "'gm'",
        "'hr'",
        "'\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))'",
        "'def'",
        "'\\\\n+(?='",
        "')'",
        "'def'",
        "'(?!(?:'",
        "'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'",
        "'|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'",
        "'|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b'",
        "'comment'",
        "'closed'",
        "'closing'",
        "'hr'",
        "'heading'",
        "'lheading'",
        "'blockquote'",
        "'tag'",
        "'<'",
        "'def'",
        "'(?!'",
        "'(?!'",
        "'\\\\1'",
        "'\\\\2'",
        "'|'",
        "'\\\\1'",
        "'\\\\3'",
        "'|'",
        "'\\n'",
        "'    '",
        "' '",
        "'\\n'",
        "''",
        "'space'",
        "''",
        "'code'",
        "''",
        "'code'",
        "''",
        "'heading'",
        "'table'",
        "''",
        "''",
        "''",
        "'\\n'",
        "'right'",
        "'center'",
        "'left'",
        "'heading'",
        "'='",
        "'hr'",
        "'blockquote_start'",
        "''",
        "'blockquote_end'",
        "'list_start'",
        "''",
        "'\\n '",
        "'^ {1,'",
        "'}'",
        "'gm'",
        "''",
        "''",
        "'\\n'",
        "'\\n'",
        "'loose_item_start'",
        "'list_item_start'",
        "'list_item_end'",
        "'list_end'",
        "'paragraph'",
        "'html'",
        "'pre'",
        "'script'",
        "'style'",
        "'table'",
        "''",
        "''",
        "''",
        "'\\n'",
        "'right'",
        "'center'",
        "'left'",
        "''",
        "'paragraph'",
        "'\\n'",
        "'text'",
        "'Infinite loop on byte: '",
        "'inside'",
        "'href'",
        "'inside'",
        "'])'",
        "'~|])'",
        "']|'",
        "'~]|'",
        "'|'",
        "'|https?://|'",
        "'{2,}'",
        "'*'",
        "'{2,}'",
        "'*'",
        "'Tokens array requires a `links` property.'",
        "''",
        "'@'",
        "':'",
        "'mailto:'",
        "' '",
        "'Infinite loop on byte: '",
        "'!'",
        "'\\u2014'",
        "'\\u2013'",
        "'$1\\u2018'",
        "'\\u2019'",
        "'$1\\u201c'",
        "'\\u201d'",
        "'\\u2026'",
        "''",
        "'x'",
        "'&#'",
        "';'",
        "'<pre><code>'",
        "'\\n</code></pre>'",
        "'<pre><code class=\"'",
        "'\">'",
        "'\\n</code></pre>\\n'",
        "'<blockquote>\\n'",
        "'</blockquote>\\n'",
        "'<h'",
        "' id=\"'",
        "'-'",
        "'\">'",
        "'</h'",
        "'>\\n'",
        "'<hr/>\\n'",
        "'<hr>\\n'",
        "'ol'",
        "'ul'",
        "'<'",
        "'>\\n'",
        "'</'",
        "'>\\n'",
        "'<li>'",
        "'</li>\\n'",
        "'<p>'",
        "'</p>\\n'",
        "'<table>\\n'",
        "'<thead>\\n'",
        "'</thead>\\n'",
        "'<tbody>\\n'",
        "'</tbody>\\n'",
        "'</table>\\n'",
        "'<tr>\\n'",
        "'</tr>\\n'",
        "'th'",
        "'td'",
        "'<'",
        "' style=\"text-align:'",
        "'\">'",
        "'<'",
        "'>'",
        "'</'",
        "'>\\n'",
        "'<strong>'",
        "'</strong>'",
        "'<em>'",
        "'</em>'",
        "'<code>'",
        "'</code>'",
        "'<br/>'",
        "'<br>'",
        "'<del>'",
        "'</del>'",
        "''",
        "''",
        "'javascript:'",
        "'vbscript:'",
        "''",
        "'<a href=\"'",
        "'\"'",
        "' title=\"'",
        "'\"'",
        "'>'",
        "'</a>'",
        "'<img src=\"'",
        "'\" alt=\"'",
        "'\"'",
        "' title=\"'",
        "'\"'",
        "'/>'",
        "'>'",
        "''",
        "'text'",
        "'\\n'",
        "'space'",
        "''",
        "'hr'",
        "'heading'",
        "'code'",
        "'table'",
        "''",
        "''",
        "''",
        "''",
        "'blockquote_start'",
        "''",
        "'blockquote_end'",
        "'list_start'",
        "''",
        "'list_end'",
        "'list_item_start'",
        "''",
        "'list_item_end'",
        "'text'",
        "'loose_item_start'",
        "''",
        "'list_item_end'",
        "'html'",
        "'paragraph'",
        "'text'",
        "'&amp;'",
        "'&lt;'",
        "'&gt;'",
        "'&quot;'",
        "'&#39;'",
        "'colon'",
        "':'",
        "'#'",
        "'x'",
        "''",
        "''",
        "'$1'",
        "'function'",
        "'code'",
        "'\\nPlease report this to https://github.com/chjj/marked.'",
        "'<p>An error occured:</p><pre>'",
        "''",
        "'</pre>'",
        "'lang-'",
        "''",
        "'object'",
        "'undefined'",
        "'object'",
        "'object'",
        "'function'",
        "'undefined'",
        "'[markdown]'",
        "\"\"",
        "\"\\n\"",
        "\"g\"",
        "\"\\n\"",
        "'undefined'",
        "'undefined'",
        "'Array'",
        "'&amp;'",
        "'&lt;'",
        "' '",
        "'__id'",
        "'__id'",
        "'__id'",
        "'Object'",
        "'Array'",
        "'Object'",
        "'Array'",
        "'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'",
        "\"before-highlightall\"",
        "''",
        "''",
        "' '",
        "' language-'",
        "''",
        "' '",
        "' language-'",
        "'before-sanity-check'",
        "'complete'",
        "'before-highlight'",
        "'before-insert'",
        "'after-highlight'",
        "'complete'",
        "'before-insert'",
        "'after-highlight'",
        "'complete'",
        "\"Array\"",
        "\"g\"",
        "\"\"",
        "'string'",
        "'Array'",
        "''",
        "'span'",
        "'token'",
        "'comment'",
        "'spellcheck'",
        "'true'",
        "'Array'",
        "'wrap'",
        "'=\"'",
        "''",
        "'&quot;'",
        "'\"'",
        "' '",
        "'<'",
        "' class=\"'",
        "' '",
        "'\"'",
        "' '",
        "''",
        "'>'",
        "'</'",
        "'>'",
        "'message'",
        "\"script\"",
        "'data-manual'",
        "\"loading\"",
        "'DOMContentLoaded'",
        "'object'",
        "'undefined'",
        "'undefined'",
        "'comment'",
        "'prolog'",
        "'doctype'",
        "'cdata'",
        "'tag'",
        "'tag'",
        "'punctuation'",
        "'namespace'",
        "'attr-value'",
        "'punctuation'",
        "'punctuation'",
        "'attr-name'",
        "'namespace'",
        "'entity'",
        "'wrap'",
        "'entity'",
        "'title'",
        "'&'",
        "'comment'",
        "'atrule'",
        "'rule'",
        "'url'",
        "'selector'",
        "'string'",
        "'property'",
        "'important'",
        "'function'",
        "'punctuation'",
        "'atrule'",
        "'markup'",
        "'tag'",
        "'style'",
        "'language-css'",
        "'inside'",
        "'attr-value'",
        "'style-attr'",
        "'attr-name'",
        "'punctuation'",
        "'attr-value'",
        "'language-css'",
        "'comment'",
        "'string'",
        "'class-name'",
        "'keyword'",
        "'boolean'",
        "'function'",
        "'number'",
        "'operator'",
        "'punctuation'",
        "'clike'",
        "'keyword'",
        "'number'",
        "'function'",
        "'operator'",
        "'javascript'",
        "'keyword'",
        "'regex'",
        "'javascript'",
        "'string'",
        "'template-string'",
        "'interpolation'",
        "'interpolation-punctuation'",
        "'punctuation'",
        "'string'",
        "'markup'",
        "'tag'",
        "'script'",
        "'language-javascript'",
        "'undefined'",
        "'js'",
        "'javascript'",
        "'py'",
        "'python'",
        "'rb'",
        "'ruby'",
        "'ps1'",
        "'powershell'",
        "'psm1'",
        "'powershell'",
        "'sh'",
        "'bash'",
        "'bat'",
        "'batch'",
        "'h'",
        "'c'",
        "'tex'",
        "'latex'",
        "'pre[data-src]'",
        "'data-src'",
        "''",
        "''",
        "'code'",
        "'language-'",
        "''",
        "'Loading…'",
        "'GET'",
        "'✖ Error '",
        "' while fetching file: '",
        "'✖ Error: File does not exist or is empty'",
        "'DOMContentLoaded'",
        "'triple-quoted-string'",
        "'string'",
        "'comment'",
        "'string'",
        "'function'",
        "'class-name'",
        "'keyword'",
        "'boolean'",
        "'number'",
        "'operator'",
        "'punctuation'",
        "'comment'",
        "'string'",
        "'class-name'",
        "'keyword'",
        "'boolean'",
        "'function'",
        "'number'",
        "'operator'",
        "'punctuation'",
        "'comment'",
        "'string'",
        "'number'",
        "'keyword'",
        "'function'",
        "'operator'",
        "'punctuation'",
        "'shebang'",
        "'important'",
        "'comment'",
        "'string'",
        "'variable'",
        "'function'",
        "'keyword'",
        "'boolean'",
        "'operator'",
        "'punctuation'",
        "'function'",
        "'function'",
        "'clike'",
        "'keyword'",
        "'builtin'",
        "'boolean'",
        "'operator'",
        "'number'",
        "'string'",
        "'class-name'",
        "'markup'",
        "'markdown'",
        "'prolog'",
        "'blockquote'",
        "'punctuation'",
        "'code'",
        "'keyword'",
        "'keyword'",
        "'title'",
        "'important'",
        "'important'",
        "'hr'",
        "'punctuation'",
        "'list'",
        "'punctuation'",
        "'url-reference'",
        "'variable'",
        "'string'",
        "'punctuation'",
        "'url'",
        "'bold'",
        "'punctuation'",
        "'italic'",
        "'punctuation'",
        "'url'",
        "'variable'",
        "'string'",
        "'bold'",
        "'url'",
        "'url'",
        "'italic'",
        "'url'",
        "'url'",
        "'bold'",
        "'italic'",
        "'italic'",
        "'italic'",
        "'bold'",
        "'bold'",
        "'comment'",
        "'string'",
        "'keyword'",
        "'boolean'",
        "'number'",
        "'operator'",
        "'punctuation'",
        "\"dt-code\"",
        "\"\"",
        "\"language\"",
        "\"code\"",
        "\"block\"",
        "\"\"",
        "\"\"",
        "\"\\n\"",
        "\"g\"",
        "\"\\n\"",
        "\"pre\"",
        "\"class\"",
        "\"language-\"",
        "\"class\"",
        "\"class\"",
        "\"katex\"",
        "\"class\"",
        "\"MathJax\"",
        "\"SCRIPT\"",
        "\"STYLE\"",
        "\"CODE\"",
        "\"PRE\"",
        "\"SPAN\"",
        "\"DT-HEADER\"",
        "\"DT-BYLINE\"",
        "\"DT-MATH\"",
        "\"DT-CODE\"",
        "\"DT-BIBLIOGRAPHY\"",
        "\"DT-FOOTER\"",
        "'\\u2014'",
        "\"\\u2009\\u2014\\u2009\"",
        "'$1\\u201c$2'",
        "'$1\\u201d$2'",
        "'$1\\u201d'",
        "'$1\\u2018$2'",
        "'$1\\u2019$2'",
        "'$1\\u2019$3'",
        "'\\u2019$2$3'",
        "'$1\\u2019'",
        "'\\u2034'",
        "'\\u2033'",
        "'\\u2032'",
        "'\\\"'",
        "'\\\"'",
        "'\\''",
        "'\\''",
        "\"\\n\\nfunction nodeFromString(str) {\\n  var div = document.createElement(\\\"div\\\");\\n  div.innerHTML = str;\\n  return div.firstChild;\\n}\\n\\nfunction make_hover_css(pos) {\\n  var pretty = window.innerWidth > 600;\\n  var padding = pretty? 18 : 12;\\n  var outer_padding = pretty ? 18 : 0;\\n  var bbox = document.querySelector(\\\"body\\\").getBoundingClientRect();\\n  var left = pos[0] - bbox.left, top = pos[1] - bbox.top;\\n  var width = Math.min(window.innerWidth-2*outer_padding, 648);\\n  left = Math.min(left, window.innerWidth-width-outer_padding);\\n  width = width - 2*padding;\\n  return (`position: absolute;\\n     background-color: #FFF;\\n     opacity: 0.95;\\n     max-width: ${width}px;\\n     top: ${top}px;\\n     left: ${left}px;\\n     border: 1px solid rgba(0, 0, 0, 0.25);\\n     padding: ${padding}px;\\n     border-radius: ${pretty? 3 : 0}px;\\n     box-shadow: 0px 2px 10px 2px rgba(0, 0, 0, 0.2);\\n     z-index: ${1e6};`);\\n}\\n\\n\\nfunction DtHoverBox(div_id) {\\n  this.div = document.querySelector(\\\"#\\\"+div_id);\\n  this.visible = false;\\n  this.bindDivEvents();\\n  DtHoverBox.box_map[div_id] = this;\\n}\\n\\nDtHoverBox.box_map = {};\\n\\nDtHoverBox.get_box = function get_box(div_id) {\\n  if (div_id in DtHoverBox.box_map) {\\n    return DtHoverBox.box_map[div_id];\\n  } else {\\n    return new DtHoverBox(div_id);\\n  }\\n}\\n\\nDtHoverBox.prototype.show = function show(pos){\\n  this.visible = true;\\n  this.div.setAttribute(\\\"style\\\", make_hover_css(pos) );\\n  for (var box_id in DtHoverBox.box_map) {\\n    var box = DtHoverBox.box_map[box_id];\\n    if (box != this) box.hide();\\n  }\\n}\\n\\nDtHoverBox.prototype.showAtNode = function showAtNode(node){\\n    var bbox = node.getBoundingClientRect();\\n    this.show([bbox.right, bbox.bottom]);\\n}\\n\\nDtHoverBox.prototype.hide = function hide(){\\n  this.visible = false;\\n  if (this.div) this.div.setAttribute(\\\"style\\\", \\\"display:none\\\");\\n  if (this.timeout) clearTimeout(this.timeout);\\n}\\n\\nDtHoverBox.prototype.stopTimeout = function stopTimeout() {\\n  if (this.timeout) clearTimeout(this.timeout);\\n}\\n\\nDtHoverBox.prototype.extendTimeout = function extendTimeout(T) {\\n  //console.log(\\\"extend\\\", T)\\n  var this_ = this;\\n  this.stopTimeout();\\n  this.timeout = setTimeout(function(){this_.hide();}.bind(this), T);\\n}\\n\\n// Bind events to a link to open this box\\nDtHoverBox.prototype.bind = function bind(node) {\\n  if (typeof node == \\\"string\\\"){\\n    node = document.querySelector(node);\\n  }\\n\\n  node.addEventListener(\\\"mouseover\\\", function(){\\n    if (!this.visible) this.showAtNode(node);\\n    this.stopTimeout();\\n  }.bind(this));\\n\\n  node.addEventListener(\\\"mouseout\\\", function(){this.extendTimeout(250);}.bind(this));\\n\\n  node.addEventListener(\\\"touchstart\\\", function(e) {\\n    if (this.visible) {\\n      this.hide();\\n    } else {\\n      this.showAtNode(node);\\n    }\\n    // Don't trigger body touchstart event when touching link\\n    e.stopPropagation();\\n  }.bind(this));\\n}\\n\\nDtHoverBox.prototype.bindDivEvents = function bindDivEvents(){\\n  // For mice, same behavior as hovering on links\\n  this.div.addEventListener(\\\"mouseover\\\", function(){\\n    if (!this.visible) this.showAtNode(node);\\n    this.stopTimeout();\\n  }.bind(this));\\n  this.div.addEventListener(\\\"mouseout\\\", function(){this.extendTimeout(250);}.bind(this));\\n\\n  // Don't trigger body touchstart event when touching within box\\n  this.div.addEventListener(\\\"touchstart\\\", function(e){e.stopPropagation();});\\n  // Close box when touching outside box\\n  document.body.addEventListener(\\\"touchstart\\\", function(){this.hide();}.bind(this));\\n}\\n\\nvar hover_es = document.querySelectorAll(\\\"span[data-hover-ref]\\\");\\nhover_es = [].slice.apply(hover_es);\\nhover_es.forEach(function(e,n){\\n  var ref_id = e.getAttribute(\\\"data-hover-ref\\\");\\n  DtHoverBox.get_box(ref_id).bind(e);\\n})\\n\"",
        "\"script\"",
        "\"body\"",
        "\"Anonymous\"",
        "\"_\"",
        "\"_\"",
        "\" \"",
        "\"_\"",
        "\"4.3.7\"",
        "\"http://www.crossref.org/schema/4.3.7\"",
        "\"xmlns:xsi\"",
        "\"http://www.w3.org/2001/XMLSchema-instance\"",
        "\"xsi:schemaLocation\"",
        "\"http://www.crossref.org/schema/4.3.7 http://www.crossref.org/schemas/crossref4.3.7.xsd\"",
        "\"author\"",
        "\"first\"",
        "\"additional\"",
        "\"title\"",
        "\"author\"",
        "\" and \"",
        "\",\"",
        "\"journal\"",
        "\"booktitle\"",
        "\"volume\"",
        "\"issue\"",
        "\"doi\"",
        "'string'",
        "'number'",
        "\"\"",
        "\"can't interpret \"",
        "\"as xml\"",
        "\"_attr\"",
        "\"_attr\"",
        "\"undefined\"",
        "\"\"",
        "\" \"",
        "\"=\\\"\"",
        "\"\\\"\"",
        "\"\\n\"",
        "\"\\n\"",
        "\"  \"",
        "\"\\n\"",
        "\"<\"",
        "\">\\n\"",
        "\"\\n</\"",
        "\">\"",
        "\"<\"",
        "\">\"",
        "\"</\"",
        "\">\"",
        "\"<svg viewBox=\\\"-607 419 64 64\\\">\\n  <path d=\\\"M-573.4,478.9c-8,0-14.6-6.4-14.6-14.5s14.6-25.9,14.6-40.8c0,14.9,14.6,32.8,14.6,40.8S-565.4,478.9-573.4,478.9z\\\"/>\\n</svg>\\n\"",
        "\"\\n<style>\\ndt-header {\\n  display: block;\\n  position: relative;\\n  height: 60px;\\n  background-color: hsl(200, 60%, 15%);\\n  width: 100%;\\n  box-sizing: border-box;\\n  z-index: 2;\\n  color: rgba(0, 0, 0, 0.8);\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.08);\\n  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.05);\\n}\\ndt-header .content {\\n  height: 70px;\\n}\\ndt-header a {\\n  font-size: 16px;\\n  height: 60px;\\n  line-height: 60px;\\n  text-decoration: none;\\n  color: rgba(255, 255, 255, 0.8);\\n  padding: 22px 0;\\n}\\ndt-header a:hover {\\n  color: rgba(255, 255, 255, 1);\\n}\\ndt-header svg {\\n  width: 24px;\\n  position: relative;\\n  top: 4px;\\n  margin-right: 2px;\\n}\\n@media(min-width: 1080px) {\\n  dt-header {\\n    height: 70px;\\n  }\\n  dt-header a {\\n    height: 70px;\\n    line-height: 70px;\\n    padding: 28px 0;\\n  }\\n  dt-header .logo {\\n  }\\n}\\ndt-header svg path {\\n  fill: none;\\n  stroke: rgba(255, 255, 255, 0.8);\\n  stroke-width: 3px;\\n}\\ndt-header .logo {\\n  font-size: 17px;\\n  font-weight: 200;\\n}\\ndt-header .nav {\\n  float: right;\\n  font-weight: 300;\\n}\\ndt-header .nav a {\\n  font-size: 12px;\\n  margin-left: 24px;\\n  text-transform: uppercase;\\n}\\n</style>\\n\\n<div class=\\\"content l-page\\\">\\n  <a href=\\\"/\\\" class=\\\"logo\\\">\\n    \"",
        "\"\\n    Distill\\n  </a>\\n  <div class=\\\"nav\\\">\\n    <a href=\\\"/about/\\\">About</a>\\n    <a href=\\\"/prize/\\\">Prize</a>\\n    <a href=\\\"/journal/\\\">Submit</a>\\n  </div>\\n</div>\\n\"",
        "\"dt-header\"",
        "\"dt-header\"",
        "\"body\"",
        "\"\\n<style>\\ndt-footer {\\n  display: block;\\n  color: rgba(255, 255, 255, 0.4);\\n  font-weight: 300;\\n  padding: 40px 0;\\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\\n  background-color: hsl(200, 60%, 15%);\\n  text-align: center;\\n}\\ndt-footer .logo svg {\\n  width: 24px;\\n  position: relative;\\n  top: 4px;\\n  margin-right: 2px;\\n}\\ndt-footer .logo svg path {\\n  fill: none;\\n  stroke: rgba(255, 255, 255, 0.8);\\n  stroke-width: 3px;\\n}\\ndt-footer .logo {\\n  font-size: 17px;\\n  font-weight: 200;\\n  color: rgba(255, 255, 255, 0.8);\\n  text-decoration: none;\\n  margin-right: 6px;\\n}\\ndt-footer .nav {\\n  margin-top: 12px;\\n}\\ndt-footer .nav a {\\n  color: rgba(255, 255, 255, 0.8);\\n  margin-right: 6px;\\n}\\n</style>\\n\\n<div class=\\\"l-page\\\">\\n  <div class=\\\"description\\\">\\n  <a href=\\\"/\\\" class=\\\"logo\\\">\\n    \"",
        "\"\\n    Distill\\n  </a>\\n  is dedicated to clear explanations of machine learning\\n  </div>\\n  <div class=\\\"nav\\\">\\n    <a href=\\\"http://distill.pub/about/\\\">About</a>\\n    <a href=\\\"http://distill.pub/journal/\\\">Submit</a>\\n    <a href=\\\"http://distill.pub/prize/\\\">Prize</a>\\n    <a href=\\\"http://distill.pub/archive/\\\">Archive</a>\\n    <a href=\\\"http://distill.pub/rss.xml\\\">RSS</a>\\n    <a href=\\\"https://github.com/distillpub\\\">GitHub</a>\\n    <a href=\\\"https://twitter.com/distillpub\\\">Twitter</a>\\n    &nbsp;&nbsp;&nbsp;&nbsp; ISSN 2476-0757\\n  </div>\\n</div>\\n\"",
        "\"dt-footer\"",
        "\"dt-footer\"",
        "\"body\"",
        "\"try { return this === window; }catch(e){ return false; }\"",
        "\"DOMContentLoaded\"",
        "\"localhost\"",
        "\"file://\"",
        "\"Window not defined\"",
        "'script[src*=\"distill.pub/template\"]'",
        "'__esModule'"
    ],
    "variables": [
        "html",
        "head",
        "meta",
        "meta$1",
        "layout",
        "article",
        "code",
        "styles",
        "s",
        "index",
        "length",
        "key",
        "sourceKeys",
        "result",
        "cycle",
        "isNothing_1",
        "isNothing",
        "isObject_1",
        "isObject",
        "toArray_1",
        "toArray",
        "repeat_1",
        "repeat",
        "isNegativeZero_1",
        "isNegativeZero",
        "extend_1",
        "extend",
        "common$1",
        "result",
        "exception",
        "YAMLException$2",
        "common$3",
        "common$1",
        "this$1",
        "head",
        "start",
        "tail",
        "end",
        "snippet",
        "snippet",
        "where",
        "mark",
        "Mark$1",
        "YAMLException$4",
        "exception",
        "TYPE_CONSTRUCTOR_OPTIONS",
        "YAML_NODE_KINDS",
        "result",
        "Type$2",
        "common$4",
        "common$1",
        "YAMLException$3",
        "exception",
        "Type$1",
        "exclude",
        "arguments$1",
        "arguments",
        "result",
        "index",
        "length",
        "schemas",
        "types",
        "schema",
        "Schema$2",
        "Type$3",
        "Type$4",
        "seq",
        "Type$5",
        "Schema$5",
        "schema",
        "failsafe",
        "Type$6",
        "max",
        "_null",
        "Type$7",
        "max",
        "common$5",
        "common$1",
        "Type$8",
        "max",
        "index",
        "hasDigits",
        "ch",
        "value",
        "data",
        "sign",
        "ch",
        "digits",
        "int_1",
        "common$6",
        "common$1",
        "Type$9",
        "YAML_FLOAT_PATTERN",
        "value",
        "sign",
        "digits",
        "SCIENTIFIC_WITHOUT_DOT",
        "res",
        "float_1",
        "Schema$4",
        "schema",
        "json",
        "Schema$3",
        "schema",
        "core",
        "Type$10",
        "YAML_DATE_REGEXP",
        "YAML_TIMESTAMP_REGEXP",
        "match",
        "year",
        "month",
        "day",
        "hour",
        "minute",
        "second",
        "fraction",
        "delta",
        "tz_hour",
        "tz_minute",
        "date",
        "timestamp",
        "Type$11",
        "merge",
        "commonjsGlobal",
        "NodeBuffer",
        "_require",
        "commonjsRequire",
        "Type$12",
        "BASE64_MAP",
        "code",
        "idx",
        "bitlen",
        "max",
        "BASE64_MAP",
        "idx",
        "tailbits",
        "input",
        "max",
        "BASE64_MAP",
        "bits",
        "result",
        "result",
        "bits",
        "idx",
        "tail",
        "max",
        "BASE64_MAP",
        "binary",
        "Type$13",
        "_hasOwnProperty$1",
        "_toString",
        "objectKeys",
        "index",
        "length",
        "pair",
        "pairKey",
        "pairHasKey",
        "data",
        "omap",
        "Type$14",
        "_toString$1",
        "index",
        "length",
        "pair",
        "keys",
        "result",
        "data",
        "index",
        "length",
        "pair",
        "keys",
        "result",
        "data",
        "pairs",
        "Type$15",
        "_hasOwnProperty$2",
        "key",
        "data",
        "Schema$1",
        "schema",
        "default_safe",
        "Type$16",
        "_undefined",
        "Type$17",
        "regexp",
        "data",
        "tail",
        "modifiers",
        "regexp",
        "data",
        "tail",
        "modifiers",
        "result",
        "regexp",
        "esprima",
        "_require$1",
        "commonjsRequire",
        "Type$18",
        "source",
        "ast",
        "source",
        "ast",
        "body",
        "_function",
        "Schema$6",
        "schema",
        "default_full",
        "common",
        "common$1",
        "YAMLException$1",
        "exception",
        "Mark",
        "mark",
        "DEFAULT_SAFE_SCHEMA$1",
        "default_safe",
        "DEFAULT_FULL_SCHEMA$1",
        "default_full",
        "_hasOwnProperty",
        "CONTEXT_FLOW_IN",
        "CONTEXT_FLOW_OUT",
        "CONTEXT_BLOCK_IN",
        "CONTEXT_BLOCK_OUT",
        "CHOMPING_CLIP",
        "CHOMPING_STRIP",
        "CHOMPING_KEEP",
        "PATTERN_NON_PRINTABLE",
        "PATTERN_NON_ASCII_LINE_BREAKS",
        "PATTERN_FLOW_INDICATORS",
        "PATTERN_TAG_HANDLE",
        "PATTERN_TAG_URI",
        "lc",
        "simpleEscapeCheck",
        "simpleEscapeMap",
        "i",
        "directiveHandlers",
        "match",
        "major",
        "minor",
        "handle",
        "prefix",
        "_position",
        "_length",
        "_character",
        "_result",
        "sourceKeys",
        "key",
        "index",
        "quantity",
        "index",
        "quantity",
        "ch",
        "lineBreaks",
        "ch",
        "_position",
        "ch",
        "preceding",
        "following",
        "captureStart",
        "captureEnd",
        "hasPendingContent",
        "_line",
        "_lineStart",
        "_lineIndent",
        "_kind",
        "_result",
        "ch",
        "ch",
        "captureStart",
        "captureEnd",
        "captureStart",
        "captureEnd",
        "hexLength",
        "hexResult",
        "tmp",
        "ch",
        "readNext",
        "_line",
        "_tag",
        "_result",
        "_anchor",
        "following",
        "terminator",
        "isPair",
        "isExplicitPair",
        "isMapping",
        "overridableKeys",
        "keyNode",
        "keyTag",
        "valueNode",
        "ch",
        "captureStart",
        "folding",
        "chomping",
        "CHOMPING_CLIP",
        "didReadContent",
        "detectedIndent",
        "textIndent",
        "nodeIndent",
        "emptyLines",
        "atMoreIndented",
        "tmp",
        "ch",
        "_line",
        "_tag",
        "_anchor",
        "_result",
        "following",
        "detected",
        "ch",
        "following",
        "allowCompact",
        "_line",
        "_tag",
        "_anchor",
        "_result",
        "overridableKeys",
        "keyTag",
        "keyNode",
        "valueNode",
        "atExplicitKey",
        "detected",
        "ch",
        "_position",
        "isVerbatim",
        "isNamed",
        "tagHandle",
        "tagName",
        "ch",
        "_position",
        "ch",
        "_position",
        "alias",
        "ch",
        "allowBlockStyles",
        "allowBlockScalars",
        "allowBlockCollections",
        "indentStatus",
        "atNewLine",
        "hasContent",
        "typeIndex",
        "typeQuantity",
        "flowIndent",
        "blockIndent",
        "documentStart",
        "_position",
        "directiveName",
        "directiveArgs",
        "hasDirectives",
        "ch",
        "state",
        "documents",
        "index",
        "length",
        "documents",
        "loadAll_1",
        "loadAll$1",
        "load_1",
        "load$1",
        "safeLoadAll_1",
        "safeLoadAll$1",
        "safeLoad_1",
        "safeLoad$1",
        "loader$1",
        "common$7",
        "common$1",
        "YAMLException$5",
        "exception",
        "DEFAULT_FULL_SCHEMA$2",
        "default_full",
        "DEFAULT_SAFE_SCHEMA$2",
        "default_safe",
        "_toString$2",
        "_hasOwnProperty$3",
        "CHAR_TAB",
        "CHAR_LINE_FEED",
        "CHAR_SPACE",
        "CHAR_EXCLAMATION",
        "CHAR_DOUBLE_QUOTE",
        "CHAR_SHARP",
        "CHAR_PERCENT",
        "CHAR_AMPERSAND",
        "CHAR_SINGLE_QUOTE",
        "CHAR_ASTERISK",
        "CHAR_COMMA",
        "CHAR_MINUS",
        "CHAR_COLON",
        "CHAR_GREATER_THAN",
        "CHAR_QUESTION",
        "CHAR_COMMERCIAL_AT",
        "CHAR_LEFT_SQUARE_BRACKET",
        "CHAR_RIGHT_SQUARE_BRACKET",
        "CHAR_GRAVE_ACCENT",
        "CHAR_LEFT_CURLY_BRACKET",
        "CHAR_VERTICAL_LINE",
        "CHAR_RIGHT_CURLY_BRACKET",
        "ESCAPE_SEQUENCES",
        "DEPRECATED_BOOLEANS_SYNTAX",
        "result",
        "keys",
        "index",
        "length",
        "tag",
        "style",
        "handle",
        "length",
        "ind",
        "position",
        "next",
        "result",
        "line",
        "length",
        "index",
        "length",
        "STYLE_PLAIN",
        "STYLE_SINGLE",
        "STYLE_LITERAL",
        "STYLE_FOLDED",
        "STYLE_DOUBLE",
        "i",
        "hasLineBreak",
        "hasFoldableLine",
        "shouldTrackWidth",
        "previousLineBreak",
        "plain",
        "indent",
        "lineWidth",
        "singleLineOnly",
        "indentIndicator",
        "clip",
        "keep",
        "chomp",
        "lineRe",
        "result",
        "nextLF",
        "prevMoreIndented",
        "moreIndented",
        "match",
        "prefix",
        "line",
        "breakRe",
        "match",
        "start",
        "end",
        "curr",
        "next",
        "result",
        "result",
        "escapeSeq",
        "i",
        "_result",
        "_tag",
        "index",
        "length",
        "_result",
        "_tag",
        "index",
        "length",
        "_result",
        "_tag",
        "objectKeyList",
        "index",
        "length",
        "objectKey",
        "objectValue",
        "pairBuffer",
        "_result",
        "_tag",
        "objectKeyList",
        "index",
        "length",
        "objectKey",
        "objectValue",
        "explicitPair",
        "pairBuffer",
        "_result",
        "typeList",
        "index",
        "length",
        "style",
        "objectOrArray",
        "duplicateIndex",
        "duplicate",
        "objects",
        "duplicatesIndexes",
        "index",
        "length",
        "objectKeyList",
        "index",
        "length",
        "state",
        "dump_1",
        "dump$1",
        "safeDump_1",
        "safeDump$1",
        "dumper$1",
        "loader",
        "loader$1",
        "dumper",
        "dumper$1",
        "Type",
        "Schema",
        "schema",
        "FAILSAFE_SCHEMA",
        "failsafe",
        "JSON_SCHEMA",
        "json",
        "CORE_SCHEMA",
        "core",
        "DEFAULT_SAFE_SCHEMA",
        "default_safe",
        "DEFAULT_FULL_SCHEMA",
        "default_full",
        "load",
        "loadAll",
        "safeLoad",
        "safeLoadAll",
        "dump",
        "safeDump",
        "YAMLException",
        "exception",
        "MINIMAL_SCHEMA",
        "failsafe",
        "SAFE_SCHEMA",
        "default_safe",
        "DEFAULT_SCHEMA",
        "default_full",
        "scan$1",
        "parse$1",
        "compose",
        "addConstructor",
        "jsYaml",
        "yaml",
        "jsYaml",
        "index",
        "yaml",
        "frontMatter",
        "localData",
        "el",
        "text",
        "a",
        "name",
        "names",
        "affiliation",
        "bibtexParse",
        "this$1",
        "this$1",
        "this$1",
        "bracecount",
        "start",
        "escaped",
        "end",
        "this$1",
        "brcktCnt",
        "this$1",
        "start",
        "escaped",
        "end",
        "start",
        "k",
        "this$1",
        "values",
        "this$1",
        "start",
        "key",
        "val",
        "this$1",
        "kv",
        "this$1",
        "d",
        "b",
        "tags",
        "bibliography",
        "el",
        "bibliography",
        "rawBib",
        "parsed",
        "val",
        "t0",
        "t1",
        "d0",
        "d1",
        "millisecond",
        "durationSecond",
        "durationMinute",
        "durationHour",
        "durationDay",
        "durationWeek",
        "second",
        "minute",
        "hour",
        "offset",
        "day",
        "sunday",
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "month",
        "year",
        "utcMinute",
        "utcHour",
        "utcDay",
        "utcSunday",
        "utcMonday",
        "utcTuesday",
        "utcWednesday",
        "utcThursday",
        "utcFriday",
        "utcSaturday",
        "utcMonth",
        "utcYear",
        "date",
        "date",
        "locale_dateTime",
        "locale_date",
        "locale_time",
        "locale_periods",
        "locale_weekdays",
        "locale_shortWeekdays",
        "locale_months",
        "locale_shortMonths",
        "periodRe",
        "periodLookup",
        "weekdayRe",
        "weekdayLookup",
        "shortWeekdayRe",
        "shortWeekdayLookup",
        "monthRe",
        "monthLookup",
        "shortMonthRe",
        "shortMonthLookup",
        "formats",
        "utcFormats",
        "parses",
        "i",
        "j",
        "n",
        "c",
        "pad",
        "format",
        "d",
        "i",
        "day$$1",
        "i",
        "n",
        "m",
        "c",
        "parse",
        "n",
        "n",
        "n",
        "n",
        "n",
        "f",
        "p",
        "f",
        "p",
        "pads",
        "numberRe",
        "percentRe",
        "requoteRe",
        "sign",
        "length",
        "i",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "z",
        "locale$1",
        "timeFormat",
        "timeParse",
        "utcFormat",
        "utcParse",
        "isoSpecifier",
        "formatIso",
        "date",
        "parseIso",
        "expandData",
        "citations",
        "citeTags",
        "key",
        "citationKeys",
        "RFC",
        "months",
        "zeroPad",
        "favicon",
        "matchHtmlRegExp",
        "index$1",
        "escapeHtml",
        "match",
        "escape",
        "html",
        "index",
        "lastIndex",
        "meta",
        "head",
        "appendHead",
        "journal",
        "zeroPad",
        "d",
        "content",
        "name_strings",
        "last",
        "firsts",
        "last",
        "firsts",
        "arxiv_id_search",
        "html$1",
        "banner",
        "banner",
        "b",
        "mustache",
        "objectToString",
        "isArray",
        "regExpTest",
        "nonSpaceRe",
        "entityMap",
        "whiteRe",
        "spaceRe",
        "equalsRe",
        "curlyRe",
        "tagRe",
        "sections",
        "tokens",
        "spaces",
        "hasTag",
        "nonSpace",
        "openingTagRe",
        "closingTagRe",
        "closingCurlyRe",
        "scanner",
        "start",
        "value",
        "chr",
        "token",
        "openSection",
        "i",
        "valueLength",
        "squashedTokens",
        "token",
        "lastToken",
        "i",
        "numTokens",
        "nestedTokens",
        "collector",
        "nestedTokens",
        "sections",
        "token",
        "section",
        "i",
        "numTokens",
        "match",
        "index",
        "match",
        "cache",
        "value",
        "context",
        "names",
        "index",
        "lookupHit",
        "cache",
        "tokens",
        "tokens",
        "context",
        "this$1",
        "buffer",
        "token",
        "symbol",
        "value",
        "i",
        "numTokens",
        "this$1",
        "buffer",
        "value",
        "j",
        "valueLength",
        "value",
        "value",
        "value",
        "value",
        "defaultWriter",
        "result",
        "html$2",
        "template",
        "byline",
        "el",
        "templateHTML",
        "appendix",
        "el",
        "userHTML",
        "newHTML",
        "div",
        "appendixDistill",
        "el",
        "newHTML",
        "existingHTML",
        "citation",
        "css",
        "style",
        "citations",
        "appendCiteHoverDiv",
        "div",
        "hover_boxes_container",
        "hover_n",
        "id",
        "div",
        "citeTags",
        "key",
        "keys",
        "cite_string",
        "cite_hover_str",
        "ref_id",
        "orig_string",
        "bibEl",
        "ol",
        "el",
        "n",
        "ent",
        "names",
        "year",
        "names",
        "name_strings",
        "last",
        "firsts",
        "last",
        "firsts",
        "initials",
        "cite",
        "issue",
        "url",
        "arxiv_match",
        "label",
        "label",
        "cite",
        "cite",
        "a_str",
        "v_str",
        "names",
        "title",
        "url",
        "footnote",
        "appendFootnoteHoverDiv",
        "div",
        "hover_boxes_container",
        "hover_n",
        "id",
        "div",
        "fnTags",
        "fnContent",
        "content",
        "ref_id",
        "key",
        "escaped_content",
        "fnList",
        "ol",
        "el",
        "error",
        "start",
        "end",
        "input",
        "underlined",
        "left",
        "right",
        "ParseError_1",
        "ParseError$1",
        "Settings_1",
        "Settings$1",
        "hangulRegex",
        "cjkRegex$1",
        "unicodeRegexes",
        "fontMetricsData",
        "cjkRegex",
        "sigmas$1",
        "xi8",
        "xi9",
        "xi10",
        "xi11",
        "xi12",
        "xi13",
        "ptPerEm",
        "doubleRuleSep",
        "metrics$1",
        "metricMap",
        "fontMetricsData",
        "extraCharacterMap",
        "getCharacterMetrics",
        "ch",
        "metrics",
        "fontMetrics$1",
        "sigmas",
        "metrics",
        "i$1",
        "D",
        "Dc",
        "T",
        "Tc",
        "S",
        "Sc",
        "SS",
        "SSc",
        "sizeNames",
        "resetNames",
        "styles$1",
        "sup",
        "sub",
        "fracNum",
        "fracDen",
        "cramp",
        "Style_1",
        "nativeIndexOf",
        "indexOf",
        "i",
        "l",
        "contains",
        "deflt",
        "uppercase",
        "hyphenate",
        "ESCAPE_LOOKUP",
        "ESCAPE_REGEX",
        "setTextContent",
        "testNode",
        "utils$4",
        "unicodeRegexes$2",
        "unicodeRegexes",
        "utils$3",
        "utils$4",
        "createClass",
        "i",
        "this$1",
        "span",
        "i",
        "this$1",
        "markup",
        "styles",
        "i",
        "this$1",
        "frag",
        "i",
        "this$1",
        "markup",
        "i",
        "iCombinations",
        "this$1",
        "this$1",
        "node",
        "span",
        "this$1",
        "needsSpan",
        "markup",
        "styles",
        "escaped",
        "domTree$2",
        "symbols$1",
        "math",
        "text",
        "main",
        "ams",
        "accent",
        "bin",
        "close",
        "inner",
        "mathord",
        "op",
        "open",
        "punct",
        "rel",
        "spacing",
        "textord",
        "i",
        "ch",
        "mathTextSymbols",
        "textSymbols",
        "letters",
        "domTree$1",
        "domTree$2",
        "fontMetrics$3",
        "fontMetrics$1",
        "symbols",
        "symbols$1",
        "utils$2",
        "utils$4",
        "greekCapitals",
        "mainitLetters",
        "makeSymbol",
        "metrics",
        "symbolNode",
        "italic",
        "mathsym",
        "mathDefault",
        "mathit",
        "makeOrd",
        "mode",
        "value",
        "classes",
        "font",
        "fontName",
        "sizeElementFromChildren",
        "height",
        "depth",
        "maxFontSize",
        "i",
        "makeSpan$2",
        "span",
        "prependChildren",
        "makeFragment",
        "fragment",
        "makeFontSizer",
        "fontSizeInner",
        "fontSizer",
        "makeVList",
        "depth",
        "currPos",
        "i",
        "oldChildren",
        "children",
        "diff",
        "size",
        "bottom",
        "positionData",
        "maxFontSize",
        "fontSizer",
        "realChildren",
        "child",
        "shift",
        "childWrap",
        "baselineFix",
        "vlist",
        "sizingMultiplier",
        "spacingFunctions",
        "fontMap",
        "buildCommon$2",
        "ParseError$3",
        "ParseError_1",
        "Style$4",
        "Style_1",
        "buildCommon$4",
        "buildCommon$2",
        "fontMetrics$4",
        "fontMetrics$1",
        "symbols$3",
        "symbols$1",
        "utils$6",
        "utils$4",
        "makeSpan$3",
        "getMetrics",
        "mathrmSize",
        "styleWrap",
        "span",
        "multiplier",
        "makeSmallDelim",
        "text",
        "span",
        "shift",
        "makeLargeDelim",
        "inner",
        "span",
        "shift",
        "makeInner",
        "sizeClass",
        "inner",
        "makeStackedDelim",
        "top",
        "middle",
        "repeat",
        "bottom",
        "font",
        "topMetrics",
        "topHeightTotal",
        "repeatMetrics",
        "repeatHeightTotal",
        "bottomMetrics",
        "bottomHeightTotal",
        "middleHeightTotal",
        "middleFactor",
        "middleMetrics",
        "minHeight",
        "repeatCount",
        "realHeightTotal",
        "axisHeight",
        "depth",
        "inners",
        "i",
        "inner",
        "stackLargeDelimiters",
        "stackAlwaysDelimiters",
        "stackNeverDelimiters",
        "sizeToMaxHeight",
        "makeSizedDelim",
        "stackNeverDelimiterSequence",
        "stackAlwaysDelimiterSequence",
        "stackLargeDelimiterSequence",
        "delimTypeToFont",
        "traverseSequence",
        "start",
        "i",
        "start",
        "metrics",
        "heightDepth",
        "makeCustomSizedDelim",
        "sequence",
        "delimType",
        "makeLeftRightDelim",
        "axisHeight",
        "delimiterFactor",
        "delimiterExtend",
        "maxDistFromAxis",
        "totalHeight",
        "delimiter$1",
        "ParseError$2",
        "ParseError_1",
        "Style$1",
        "Style_1",
        "buildCommon$1",
        "buildCommon$2",
        "delimiter",
        "delimiter$1",
        "domTree",
        "domTree$2",
        "fontMetrics",
        "fontMetrics$1",
        "utils$1",
        "utils$4",
        "makeSpan$1",
        "isSpace",
        "isBin",
        "isBinLeftCanceller",
        "isBinRightCanceller",
        "buildExpression",
        "groups",
        "i",
        "group",
        "output",
        "spaces",
        "getTypeOfDomTree",
        "shouldHandleSupSub",
        "getBaseElem",
        "isCharacterBox",
        "baseElem",
        "makeNullDelimiter",
        "groupTypes",
        "newOptions",
        "inner",
        "i",
        "elements",
        "supmid",
        "submid",
        "sup",
        "sub",
        "style",
        "newOptions",
        "supShift",
        "subShift",
        "minSupShift",
        "multiplier",
        "scriptspace",
        "supsub",
        "ruleWidth",
        "psi",
        "mclass",
        "style",
        "nstyle",
        "dstyle",
        "newOptions",
        "numer",
        "numerreset",
        "denom",
        "denomreset",
        "ruleWidth",
        "numShift",
        "clearance",
        "denomShift",
        "frac",
        "candidateClearance",
        "axisHeight",
        "mid",
        "midShift",
        "delimSize",
        "leftDelim",
        "rightDelim",
        "calculateSize",
        "x",
        "r",
        "c",
        "nr",
        "nc",
        "body",
        "style",
        "pt",
        "arraycolsep",
        "baselineskip",
        "arraystretch",
        "arrayskip",
        "arstrutHeight",
        "arstrutDepth",
        "totalHeight",
        "inrow",
        "height",
        "arstrutHeight",
        "depth",
        "arstrutDepth",
        "outrow",
        "elt",
        "gap",
        "offset",
        "colDescriptions",
        "cols",
        "colSep",
        "colDescrNum",
        "colDescr",
        "firstSeparator",
        "separator",
        "sepwidth",
        "col",
        "row",
        "elem",
        "shift",
        "inner",
        "fix",
        "inner",
        "fix",
        "supGroup",
        "subGroup",
        "hasLimits",
        "style",
        "noSuccessor",
        "large",
        "baseShift",
        "slant",
        "fontName",
        "inner",
        "output",
        "i",
        "supmid",
        "supKern",
        "submid",
        "subKern",
        "newOptions",
        "sup",
        "sub",
        "finalGroup",
        "top",
        "bottom",
        "inner",
        "modInner",
        "k",
        "a",
        "t",
        "e",
        "x",
        "style",
        "innerGroup",
        "ruleWidth",
        "line",
        "vlist",
        "style",
        "innerGroup",
        "ruleWidth",
        "line",
        "vlist",
        "style",
        "inner",
        "ruleWidth",
        "line",
        "phi",
        "ruleWidth",
        "lineClearance",
        "innerHeight",
        "minDelimiterHeight",
        "delim",
        "delimDepth",
        "delimShift",
        "body",
        "newOptions",
        "root",
        "rootWrap",
        "innerRootHeight",
        "innerRootDepth",
        "toShift",
        "rootVList",
        "rootVListWrap",
        "inner",
        "style",
        "fontSize",
        "i",
        "pos",
        "styleMap",
        "newStyle",
        "newOptions",
        "inner",
        "i",
        "pos",
        "font",
        "delim",
        "inner",
        "innerHeight",
        "innerDepth",
        "hadMiddle",
        "i",
        "style",
        "leftDelim",
        "rightDelim",
        "middleDelim",
        "rule",
        "style",
        "shift",
        "width",
        "height",
        "rule",
        "style",
        "dimension",
        "style",
        "supsubGroup",
        "supsub",
        "group",
        "body",
        "skew",
        "baseChar",
        "baseGroup",
        "clearance",
        "accent",
        "vecClass",
        "accentBody",
        "accentWrap",
        "elements",
        "elements",
        "buildGroup",
        "groupNode",
        "multiplier",
        "buildHTML$1",
        "expression",
        "body",
        "topStrut",
        "bottomStrut",
        "htmlNode",
        "buildHTML_1",
        "buildHTML$1",
        "utils$8",
        "utils$4",
        "this$1",
        "node",
        "i",
        "this$1",
        "markup",
        "i",
        "mathMLTree$1",
        "buildCommon$5",
        "buildCommon$2",
        "fontMetrics$5",
        "fontMetrics$1",
        "mathMLTree",
        "mathMLTree$1",
        "ParseError$4",
        "ParseError_1",
        "symbols$4",
        "symbols$1",
        "utils$7",
        "utils$4",
        "makeSpan$4",
        "fontMap$1",
        "makeText",
        "getVariant",
        "font",
        "mode",
        "value",
        "fontName",
        "groupTypes$1",
        "node",
        "variant",
        "text",
        "variant",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "inner",
        "node",
        "inner",
        "node",
        "inner",
        "node",
        "children",
        "nodeType",
        "node",
        "node",
        "withDelims",
        "leftOp",
        "rightOp",
        "outerNode",
        "node",
        "inner",
        "leftNode",
        "rightNode",
        "outerNode",
        "middleNode",
        "accentNode",
        "node",
        "node",
        "node",
        "inner",
        "space",
        "node",
        "font",
        "children",
        "node",
        "inner",
        "node",
        "styleAttributes",
        "attr",
        "inner",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "inner",
        "inner",
        "buildExpression$1",
        "groups",
        "i",
        "group",
        "buildGroup$1",
        "buildMathML$1",
        "expression",
        "wrapper",
        "annotation",
        "semantics",
        "math",
        "buildMathML_1",
        "buildMathML$1",
        "data",
        "colorMap",
        "Options_1",
        "Options$1",
        "buildHTML",
        "buildHTML_1",
        "buildMathML",
        "buildMathML_1",
        "buildCommon",
        "buildCommon$2",
        "Options",
        "Options_1",
        "Settings$2",
        "Settings_1",
        "Style",
        "Style_1",
        "makeSpan",
        "buildTree$1",
        "startStyle",
        "options",
        "mathMLNode",
        "htmlNode",
        "katexNode",
        "buildTree_1",
        "buildTree$1",
        "parseData$1",
        "functions$1",
        "utils",
        "utils$4",
        "ParseError",
        "ParseError_1",
        "parseData",
        "parseData$1",
        "ParseNode",
        "data",
        "i",
        "ordargument",
        "index",
        "body",
        "textFunctionStyles",
        "body",
        "color",
        "body",
        "body",
        "body",
        "shift",
        "width",
        "height",
        "body",
        "body",
        "top",
        "bottom",
        "bottomop",
        "supsub",
        "body",
        "delimiterSizes",
        "delimiters",
        "fontAliases",
        "body",
        "body",
        "numer",
        "denom",
        "hasBarLine",
        "leftDelim",
        "rightDelim",
        "size",
        "body",
        "checkDelimiter",
        "delim",
        "delim",
        "delim",
        "body",
        "func",
        "replaceWith",
        "size",
        "nameGroup",
        "name",
        "i",
        "environments$1",
        "parseData",
        "parseData$1",
        "ParseError",
        "ParseError_1",
        "Style",
        "Style_1",
        "ParseNode",
        "row",
        "body",
        "rowGaps",
        "cell",
        "next",
        "cr",
        "data",
        "i",
        "colalign",
        "cols",
        "ca",
        "res",
        "delimiters",
        "res",
        "res",
        "res",
        "emptyGroup",
        "numCols",
        "i",
        "i",
        "align",
        "pregap",
        "source",
        "flags",
        "reloc",
        "match",
        "matchAt_1",
        "matchAt$1",
        "matchAt",
        "matchAt_1",
        "ParseError$6",
        "ParseError_1",
        "tokenRegex",
        "input",
        "pos",
        "match",
        "text",
        "start",
        "end",
        "Lexer_1",
        "Lexer$1",
        "Lexer",
        "Lexer_1",
        "this$1",
        "topToken",
        "name",
        "expansion",
        "bodyLexer",
        "tok",
        "this$1",
        "token",
        "this$1",
        "MacroExpander_1",
        "MacroExpander$1",
        "functions",
        "functions$1",
        "environments",
        "environments$1",
        "MacroExpander",
        "MacroExpander_1",
        "symbols$5",
        "symbols$1",
        "utils$9",
        "utils$4",
        "cjkRegex$2",
        "parseData",
        "parseData$1",
        "ParseError$5",
        "ParseError_1",
        "ParseNode",
        "parse",
        "expression",
        "endOfExpression",
        "this$1",
        "body",
        "lex",
        "atom",
        "errorNode",
        "overIndex",
        "funcName",
        "i",
        "node",
        "numerNode",
        "denomNode",
        "numerBody",
        "denomBody",
        "value",
        "SUPSUB_GREEDINESS",
        "symbolToken",
        "symbol",
        "group",
        "funcGreediness",
        "text",
        "textordArray",
        "i",
        "textNode",
        "colorNode",
        "this$1",
        "superscript",
        "subscript",
        "lex",
        "limits",
        "prime",
        "primes",
        "sizeFuncs",
        "styleFuncs",
        "start",
        "func",
        "body",
        "left",
        "right",
        "begin",
        "envName",
        "env",
        "args",
        "context",
        "result",
        "endNameToken",
        "end",
        "func",
        "funcData",
        "args",
        "token",
        "result",
        "context",
        "this$1",
        "totalArgs",
        "baseGreediness",
        "positions",
        "args",
        "i",
        "nextToken",
        "argType",
        "arg",
        "argNode",
        "argGreediness",
        "this$1",
        "outerMode",
        "res",
        "this$1",
        "outerMode",
        "firstToken",
        "lastToken",
        "firstToken",
        "this$1",
        "outerMode",
        "firstToken",
        "lastToken",
        "firstToken",
        "res",
        "match",
        "res",
        "match",
        "data",
        "firstToken",
        "expression",
        "lastToken",
        "i",
        "n",
        "a",
        "v",
        "nucleus",
        "Parser_1",
        "Parser$1",
        "Parser",
        "Parser_1",
        "parseTree$1",
        "parser",
        "parseTree_1",
        "parseTree$1",
        "ParseError",
        "ParseError_1",
        "Settings",
        "Settings_1",
        "buildTree",
        "buildTree_1",
        "parseTree",
        "parseTree_1",
        "utils",
        "utils$4",
        "render$2",
        "settings",
        "tree",
        "node",
        "renderToString",
        "settings",
        "tree",
        "generateParseTree",
        "settings",
        "katex",
        "html$3",
        "DTMath",
        "equationElements",
        "content",
        "displayMode",
        "marked",
        "block",
        "lexer",
        "this$1",
        "src",
        "next",
        "loose",
        "cap",
        "bull",
        "b",
        "item",
        "space",
        "i",
        "l",
        "inline",
        "inline",
        "this$1",
        "link",
        "text",
        "href",
        "cap",
        "href",
        "title",
        "l",
        "i",
        "ch",
        "tag",
        "prot",
        "parser",
        "this$1",
        "this$1",
        "body",
        "this$1",
        "header",
        "body",
        "i",
        "row",
        "cell",
        "flags",
        "j",
        "body",
        "body",
        "ordered",
        "body",
        "body",
        "html",
        "arguments$1",
        "arguments",
        "i",
        "target",
        "key",
        "highlight",
        "tokens",
        "pending",
        "i",
        "done",
        "markdown",
        "markdownElements",
        "content",
        "tabs",
        "prism",
        "_self",
        "Prism",
        "lang",
        "uniqueId",
        "_",
        "clone",
        "lang",
        "grammar",
        "ret",
        "env",
        "elements",
        "i",
        "element",
        "language",
        "grammar",
        "parent",
        "element",
        "code",
        "env",
        "worker",
        "tokens",
        "Token",
        "strarr",
        "rest",
        "patterns",
        "j",
        "pattern",
        "inside",
        "lookbehind",
        "greedy",
        "lookbehindLength",
        "alias",
        "flags",
        "i",
        "pos",
        "match",
        "delNum",
        "to",
        "k",
        "i",
        "p",
        "pos",
        "len",
        "match",
        "to",
        "before",
        "after",
        "args",
        "wrapped",
        "hooks",
        "callbacks",
        "i",
        "callback",
        "Token",
        "env",
        "aliases",
        "attributes",
        "message",
        "lang",
        "code",
        "immediateClose",
        "script",
        "Extensions",
        "src",
        "language",
        "parent",
        "pre",
        "lang",
        "extension",
        "code",
        "xhr",
        "insideString",
        "inside",
        "code$1",
        "codeElements",
        "content",
        "language",
        "c",
        "tabs",
        "p",
        "highlighted",
        "content",
        "typeset",
        "textNodes",
        "n",
        "text",
        "parent",
        "isMath",
        "code$2",
        "hoverBox",
        "s",
        "generateCrossref",
        "date",
        "batch_timestamp",
        "batch_id",
        "crf_data",
        "info",
        "keys",
        "name",
        "full_content",
        "attr",
        "content",
        "obj",
        "obj_name",
        "attr_string",
        "result",
        "result",
        "logo",
        "html$4",
        "header",
        "el",
        "header",
        "b",
        "html$5",
        "footer",
        "el",
        "footer",
        "b",
        "browser",
        "data",
        "s"
    ],
    "comments": [
        "modified distill.pub template v1 for pruning identified exemplers. This version of the",
        "distill template is from the world models work by David Ha (https://worldmodels.github.io/).",
        "YAML error class. http://stackoverflow.com/questions/8458984",
        "",
        "Super constructor",
        "Include stack trace in error object",
        "Chrome and NodeJS",
        "FF, IE 10+ and Safari 6+. Fallback for others",
        "Inherit from Error",
        "TODO: Add tag format check.",
        "eslint-disable max-len",
        "lists...",
        "0",
        "9",
        "A",
        "F",
        "a",
        "f",
        "0",
        "7",
        "0",
        "9",
        "sign",
        "0",
        "base 2, base 8, base 16",
        "base 2",
        "base 16",
        "base 8",
        "base 10 (except 0) or base 60",
        "if !base60 - done;",
        "base60 almost not used, no needs to optimize",
        "JS stringifier can build scientific format without dots: 5e-100,",
        "while YAML requres dot: 5.e-100. Fix it with simple hack",
        "[1] year",
        "[2] month",
        "[3] day",
        "[1] year",
        "[2] month",
        "[3] day",
        "...",
        "[4] hour",
        "[5] minute",
        "[6] second",
        "[7] fraction",
        "[8] tz [9] tz_sign [10] tz_hour",
        "[11] tz_minute",
        "match: [1] year [2] month [3] day",
        "JS month starts with 0",
        "no hour",
        "match: [4] hour [5] minute [6] second [7] fraction",
        "milli-seconds",
        "match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute",
        "delta in mili-seconds",
        ", style",
        "eslint-disable no-bitwise",
        "A trick for browserified version, to not include `Buffer` shim",
        "[ 64, 65, 66 ] -> [ padding, CR, LF ]",
        "Convert one by one.",
        "Skip CR/LF",
        "Fail on illegal characters",
        "If there are any bits left, source was corrupted",
        "remove CR/LF & padding to simplify scan",
        "Collect by 6*4 bits (3 bytes)",
        "Dump tail",
        "Wrap into Buffer for NodeJS and leave Array for browser",
        ", style",
        "Convert every three bytes to 4 ASCII characters.",
        "Dump tail",
        "eslint-disable no-undefined",
        "if regexp starts with '/' it can have modifiers and must be properly closed",
        "`/foo/gim` - modifiers tail can be maximum 3 chars",
        "if expression starts with /, is should be properly terminated",
        "`/foo/gim` - tail can be maximum 4 chars",
        ", style",
        "Browserified version does not have esprima",
        "",
        "1. For node.js just require module as deps",
        "2. For browser try to require mudule via external AMD system.",
        "If not found - try to fallback to window.esprima. If not",
        "found too - then fail to parse.",
        "",
        "workaround to exclude package from browserify list.",
        "global window",
        "jslint evil:true",
        "Esprima's ranges include the first '{' and the last '}' characters on",
        "function expressions. So cut them out.",
        "eslint-disable no-new-func",
        ", style",
        "eslint-disable max-len,no-use-before-define",
        "LF",
        "CR",
        "Tab",
        "Space",
        "Tab",
        "Space",
        "LF",
        "CR",
        ",",
        "[",
        "]",
        "{",
        "}",
        "0",
        "9",
        "eslint-disable no-bitwise",
        "a",
        "f",
        "x",
        "u",
        "U",
        "0",
        "9",
        "0",
        "a",
        "b",
        "t",
        "Tab",
        "n",
        "v",
        "f",
        "r",
        "e",
        "Space",
        "\"",
        "/",
        "\\",
        "N",
        "_",
        "L",
        "P",
        "Encode UTF-16 surrogate pair",
        "https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF",
        "integer, for fast access",
        "this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;",
        "LF",
        "CR",
        "LF",
        "#",
        "LF",
        "CR",
        "Space",
        "Condition state.position === state.lineStart is tested",
        "in parent on each call, for efficiency. No needs to test here again.",
        "-",
        ".",
        "#",
        "&",
        "!",
        "|",
        ">",
        "'",
        "\"",
        "%",
        "@",
        "`",
        "?",
        "-",
        ":",
        "#",
        "'",
        "'",
        "'",
        "\"",
        "\"",
        "\\",
        "TODO: rework to inline fn with no type cast?",
        "[",
        "]",
        "{",
        "}",
        "?",
        ":",
        ",",
        "|",
        ">",
        "+",
        "-",
        "+",
        "#",
        "Space",
        "End of the scalar.",
        "Perform the chomping.",
        "i.e. only if the scalar is not empty.",
        "Break this `while` cycle and go to the funciton's epilogue.",
        "Folded style: use fancy rules to handle line breaks.",
        "Lines starting with white space characters (more-indented lines) are not folded.",
        "except for the first content line (cf. Example 8.1)",
        "End of more-indented block.",
        "Just one line break - perceive as the same line.",
        "i.e. only if we have already read some scalar content.",
        "Several line breaks - perceive as different lines.",
        "Literal style: just add exact number of line breaks between content lines.",
        "Keep all line breaks except the header line break.",
        "-",
        "Save the current line.",
        "",
        "Explicit notation case. There are two separate blocks:",
        "first for the key (denoted by \"?\") and second for the value (denoted by \":\")",
        "",
        "?",
        ":",
        "?",
        "i.e. 0x3A/* : */ === character after the explicit key.",
        "",
        "Implicit notation case. Flow-style node as the key first, then \":\", and the value.",
        "",
        ":",
        "Keep the result of `composeNode`.",
        "Keep the result of `composeNode`.",
        "Reading is done. Go to the epilogue.",
        "",
        "Common reading code for both explicit and implicit notations.",
        "",
        "",
        "Epilogue.",
        "",
        "Special case: last mapping's node contains only the key in explicit notation.",
        "Expose the resulting mapping.",
        "!",
        "<",
        "!",
        ">",
        "!",
        "&",
        "1: this>parent, 0: this=parent, -1: this<parent",
        "Special case: block sequences are allowed to have same indentation level as the parent.",
        "http://www.yaml.org/spec/1.2/spec.html#id2799784",
        "Implicit resolving is not allowed for non-scalar types, and '?'",
        "non-specific tag is only assigned to plain scalars. So, it isn't",
        "needed to check for 'kind' conformity.",
        "`state.result` updated in resolver if matched",
        "`state.result` updated in resolver if matched",
        "%",
        "#",
        "-",
        "-",
        "-",
        ".",
        "Add tailing `\\n` if not exists",
        "LF",
        "CR",
        "Strip BOM",
        "Use 0 as string terminator. That significantly simplifies bounds check.",
        "Space",
        "eslint-disable no-undefined",
        "eslint-disable no-use-before-define",
        "Tab",
        "LF",
        "Space",
        "!",
        "\"",
        "#",
        "%",
        "&",
        "'",
        ",",
        "-",
        ":",
        ">",
        "?",
        "@",
        "[",
        "]",
        "`",
        "{",
        "|",
        "}",
        "Indents every line in a string. Empty lines (\\n only) are not indented.",
        "[33] s-white ::= s-space | s-tab",
        "Returns true if the character can be printed without escaping.",
        "From YAML 1.2: \"any allowed characters known to be non-printable",
        "should also be escaped. [However,] This isn’t mandatory\"",
        "Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.",
        "BOM",
        "Simplified test for values allowed after the first character in plain style.",
        "Uses a subset of nb-char - c-flow-indicator - \":\" - \"#\"",
        "where nb-char ::= c-printable - b-char - c-byte-order-mark.",
        "- c-flow-indicator",
        "- \":\" - \"#\"",
        "Simplified test for values allowed as the first character in plain style.",
        "Uses a subset of ns-char - c-indicator",
        "where ns-char = nb-char - s-white.",
        "- s-white",
        "- (c-indicator ::=",
        "“-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”",
        "| “#” | “&” | “*” | “!” | “|” | “>” | “'” | “\"”",
        "| “%” | “@” | “`”)",
        "Determines which scalar styles are possible and returns the preferred style.",
        "lineWidth = -1 => no limit.",
        "Pre-conditions: str.length > 0.",
        "Post-conditions:",
        "STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.",
        "STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).",
        "STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).",
        "only checked if shouldTrackWidth",
        "count the first line correctly",
        "Case: no block styles.",
        "Check for disallowed characters to rule out plain and single.",
        "Case: block styles permitted.",
        "Check if any line can be folded.",
        "Foldable line = too long, and not more-indented.",
        "in case the end is missing a \\n",
        "Although every style can represent \\n without escaping, prefer block styles",
        "for multiline, since they're more readable and they don't add empty lines.",
        "Also prefer folding a super-long line.",
        "Strings interpretable as another type have to be quoted;",
        "e.g. the string 'true' vs. the boolean true.",
        "Edge case: block indentation indicator can only have one digit.",
        "At this point we know block styles are valid.",
        "Prefer literal style unless we want to fold.",
        "Note: line breaking/folding is implemented for only the folded style.",
        "NB. We drop the last trailing newline (if any) of a returned block scalar",
        "since the dumper adds its own newline. This always works:",
        "• No ending newline => unaffected; already using strip \"-\" chomping.",
        "• Ending newline    => removed then restored.",
        "Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.",
        "no 0-indent scalars",
        "As indentation gets deeper, let the width decrease monotonically",
        "to the lower bound min(state.lineWidth, 40).",
        "Note that this implies",
        "state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.",
        "state.lineWidth > 40 + state.indent: width decreases until the lower bound.",
        "This behaves better than a constant minimum width which disallows narrower options,",
        "or an indent threshold which causes the width to suddenly increase.",
        "Without knowing if keys are implicit/explicit, assume implicit for safety.",
        "No block styles in flow mode.",
        "Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.",
        "note the special case: the string '\\n' counts as a \"trailing\" empty line.",
        "(See the note for writeScalar.)",
        "Note: a long line without a suitable break point will exceed the width limit.",
        "Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.",
        "In folded style, $k$ consecutive newlines output as $k+1$ newlines—",
        "unless they're before or after a more-indented line, or at the very",
        "beginning or end, in which case $k$ maps to $k$.",
        "Therefore, parse each chunk as newline(s) followed by a content line.",
        "first line (possibly an empty line)",
        "If we haven't reached the first content line yet, don't add an extra \\n.",
        "rest of the lines",
        "Greedy line breaking.",
        "Picks the longest line under the limit each time,",
        "otherwise settles for the shortest line over the limit.",
        "NB. More-indented lines *cannot* be folded, as that would add an extra \\n.",
        "Since a more-indented line adds a \\n, breaks can't be followed by a space.",
        "note: the match index will always be <= length-2.",
        "start is an inclusive index. end, curr, and next are exclusive.",
        "Invariants: 0 <= start <= length-1.",
        "0 <= curr <= next <= max(0, length-2). curr - start <= width.",
        "Inside the loop:",
        "A match implies length >= 2, so curr and next are <= length-2.",
        "maintain invariant: curr - start <= width",
        "derive end <= length-2",
        "skip the space that was output as \\n",
        "derive start <= length-1",
        "By the invariants, start <= length-1, so there is something left over.",
        "It is either the whole string or a part starting from non-whitespace.",
        "Insert a break if the remainder is too long and there is a break available.",
        "drop extra \\n joiner",
        "Escapes a double-quoted string.",
        "Write only valid elements.",
        "Write only valid elements.",
        "Empty sequence if no valid values.",
        "Skip this pair because of invalid key;",
        "Skip this pair because of invalid value.",
        "Both key and value are valid.",
        "Allow sorting keys so that the output file is deterministic",
        "Default sorting",
        "Custom sort function",
        "Something is wrong",
        "Skip this pair because of invalid key.",
        "Skip this pair because of invalid value.",
        "Both key and value are valid.",
        "Empty mapping if no valid pairs.",
        "Serializes `object` and writes it to global `result`.",
        "Returns true on success, or false on invalid object.",
        "",
        "Deprecated schema names from JS-YAML 2.0.x",
        "Deprecated functions from JS-YAML 1.x.x",
        "start bibtexParse 0.0.22",
        "Original work by Henrik Muehe (c) 2010",
        "",
        "CommonJS port by Mikola Lysenko 2013",
        "",
        "Port to Browser lib by ORCID / RCPETERS",
        "",
        "Issues:",
        "no comment handling within strings",
        "no string concatenation",
        "no variable values yet",
        "Grammar implemented here:",
        "bibtex -> (string | preamble | comment | entry)*;",
        "string -> '@STRING' '{' key_equals_value '}';",
        "preamble -> '@PREAMBLE' '{' value '}';",
        "comment -> '@COMMENT' '{' value '}';",
        "entry -> '@' key '{' key ',' key_value_list '}';",
        "key_value_list -> key_equals_value (',' key_equals_value)*;",
        "key_equals_value -> key '=' value;",
        "value -> value_quotes | value_braces | key;",
        "value_quotes -> '\"' .*? '\"'; // not quite",
        "value_braces -> '{' .*? '\"'; // not quite",
        "when search for a match all text can be ignored, not just white space",
        "а-яА-Я is Cyrillic",
        "console.log(this.input[this.pos]);",
        "fixes problems with commas at the end of a list",
        "added during hackathon don't hate on me",
        "end bibtexParse",
        "TODO If we don't have a local element, make a request for the document.",
        "also handles Invalid Date",
        "eslint-disable-line no-empty",
        "noop",
        "An optimized implementation for this simple case.",
        "An optimized implementation for this simple case.",
        "An optimized implementation for this simple case.",
        "These recursive directive definitions must be deferred.",
        "The am-pm flag is 0 for AM, and 1 for PM.",
        "Convert day-of-week and week-of-year to day-of-year.",
        "If a time zone is specified, all fields are interpreted as UTC and then",
        "offset according to the specified time zone.",
        "Otherwise, all fields are in local time.",
        "citations:",
        "paths",
        "Homepage",
        "data.homepage = !post.noHomepage;",
        "Dates",
        "} && data.journal) {",
        "public domain globe icon from noun project.",
        "!\n * escape-html\n * Copyright(c) 2012-2013 TJ Holowaychuk\n * Copyright(c) 2015 Andreas Lubbe\n * Copyright(c) 2015 Tiancheng \"Timothy\" Gu\n * MIT Licensed",
        "\"",
        "&",
        "'",
        "<",
        ">",
        "do this on my own.\n  appendHead((\"\\n    <!--  https://developers.facebook.com/docs/sharing/webmasters#markup -->\\n    <meta property=\\\"og:type\\\" content=\\\"article\\\"/>\\n    <meta property=\\\"og:title\\\" content=\\\"\" + (data.title) + \"\\\"/>\\n    <meta property=\\\"og:description\\\" content=\\\"\" + (data.description) + \"\\\">\\n    <meta property=\\\"og:url\\\" content=\\\"\" + (data.url) + \"\\\"/>\\n    <meta property=\\\"og:image\\\" content=\\\"\" + (data.previewURL) + \"\\\"/>\\n    <meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n    <meta property=\\\"og:site_name\\\" content=\\\"Distill\\\" />\\n  \"));\n\n  appendHead((\"\\n    <!--  https://dev.twitter.com/cards/types/summary -->\\n    <meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\">\\n    <meta name=\\\"twitter:title\\\" content=\\\"\" + (data.title) + \"\\\">\\n    <meta name=\\\"twitter:description\\\" content=\\\"\" + (data.description) + \"\\\">\\n    <meta name=\\\"twitter:url\\\" content=\\\"\" + (data.url) + \"\\\">\\n    <meta name=\\\"twitter:image\\\" content=\\\"\" + (data.previewURL) + \"\\\">\\n    <meta name=\\\"twitter:image:width\\\" content=\\\"560\\\">\\n    <meta name=\\\"twitter:image:height\\\" content=\\\"295\\\">\\n  \"));",
        "if this is a proprer article, generate Google Scholar meta data",
        "meta(\"citation_fulltext_html_url\", data.url);",
        "Should we do something different here?",
        "Special test for arxiv",
        "content += `citation_first_page=${};`;\n  content += `citation_publication_date=${};`;",
        "var html$1 = \"\\n<style>\\n  dt-banner {\\n    background: #FFF59D;\\n    display: block;\\n    text-align: center;\\n    color: black;\\n    height: 70px;\\n    line-height: 70px;\\n  }\\n</style>\\n<div>This article is a draft. Please do not share the URL. Thanks!</div>\\n\";",
        "!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js",
        "global define: false Mustache: true",
        "CommonJS",
        "AMD",
        "script, wsh, asp",
        "Workaround for https://issues.apache.org/jira/browse/COUCHDB-577",
        "See https://github.com/janl/mustache.js/issues/189",
        "Stack to hold section tokens",
        "Buffer to hold the tokens",
        "Indices of whitespace tokens on the current line",
        "Is there a {{tag}} on the current line?",
        "Is there a non-space char on the current line?",
        "Strips all whitespace tokens array for the current line",
        "if there was a {{#tag}} on it and otherwise only space.",
        "Match any text between tags.",
        "Check for whitespace on the current line.",
        "Match the opening tag.",
        "Get the tag type.",
        "Get the tag value.",
        "Match the closing tag.",
        "Check section nesting.",
        "Set the tags for the next time around.",
        "Make sure there are no open sections when we're done.",
        "This function is used to render an arbitrary template",
        "in the current context by higher-order sections.",
        "Extract the portion of the original template that the section contains.",
        "Use JavaScript's definition of falsy. Include empty arrays.",
        "See https://github.com/janl/mustache.js/issues/186",
        "All high-level mustache.* functions use this writer.",
        "This is here for backwards compatibility with 0.4.x.,",
        "eslint-disable",
        "eslint wants camel cased function name",
        "eslint-enable",
        "Export the escaping function so that the user may override it.",
        "See https://github.com/janl/mustache.js/issues/244",
        "Export these mainly for testing, but also for advanced usage.",
        "If we have some footnotes on the page, render a container for the footnote list.",
        "If we have any citations on the page, render a container for the bibliography.",
        "if (data.citations) {\n    citations = Object.keys(data.citations).map(c => data.citations[c]);\n    citations.sort((a, b) => {\n      return a.author.localeCompare(b.author);\n    });\n  }",
        "cite_hover_str = cite_hover_str.replace(/\"/g, \"&#39;\")",
        "url = \"http://arxiv.org/pdf/\" + (arxiv_match[1]) + \".pdf\";",
        "don't like linking to pdf by default:",
        "else if (\"doi\" in ent){\n      return ` &ensp;<a href=\"https://doi.org/${ent.doi}\" >[DOI]</a>`;\n    }",
        "var cite =  author_string(ent, \"${L}, ${I}\", \", \", \" and \");\n      if (ent.year || ent.date){\n        cite += \", \" + (ent.year || ent.date) + \". \"\n      } else {\n        cite += \". \"\n      }\n      cite += \"<b>\" + ent.title + \"</b>. \";\n      cite += venue_string(ent);\n      cite += doi_string(ent);\n      cite += link_string(ent);\n      return cite",
        "https://scholar.google.com/scholar?q=allintitle%3ADocument+author%3Aolah",
        ".replace(/[,:]/, \"\")",
        "\"\"https://scholar.google.com/scholar?\"",
        "If we have the input and a position, make the error a bit fancier",
        "Get the input",
        "Prepend some information",
        "Underline token in question using combining underscores",
        "Extract some context from the input and add it to the error",
        "Some hackery to make ParseError a prototype of Error",
        "See http://stackoverflow.com/a/8460753",
        "More hackery",
        "allow null options",
        "This regex combines",
        "- Hiragana: [\\u3040-\\u309F]",
        "- Katakana: [\\u30A0-\\u30FF]",
        "- CJK ideograms: [\\u4E00-\\u9FAF]",
        "- Hangul syllables: [\\uAC00-\\uD7AF]",
        "Notably missing are halfwidth Katakana and Romanji glyphs.",
        "In TeX, there are actually three sets of dimensions, one for each of",
        "textstyle, scriptstyle, and scriptscriptstyle.  These are provided in the",
        "the arrays below, in that order.",
        "",
        "The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.",
        "This was determined by running the folllowing script:",
        "",
        "latex -interaction=nonstopmode \\",
        "'\\documentclass{article}\\usepackage{amsmath}\\begin{document}' \\",
        "'$a$ \\expandafter\\show\\the\\textfont2' \\",
        "'\\expandafter\\show\\the\\scriptfont2' \\",
        "'\\expandafter\\show\\the\\scriptscriptfont2' \\",
        "'\\stop'",
        "",
        "The metrics themselves were retreived using the following commands:",
        "",
        "tftopl cmsy10",
        "tftopl cmsy7",
        "tftopl cmsy5",
        "",
        "The output of each of these commands is quite lengthy.  The only part we",
        "care about is the FONTDIMEN section. Each value is measured in EMs.",
        "sigma1",
        "sigma2",
        "sigma3",
        "sigma4",
        "sigma5",
        "sigma6",
        "sigma7",
        "sigma8",
        "sigma9",
        "sigma10",
        "sigma11",
        "sigma12",
        "sigma13",
        "sigma14",
        "sigma15",
        "sigma16",
        "sigma17",
        "sigma18",
        "sigma19",
        "sigma20",
        "sigma21",
        "sigma22",
        "This value determines how large a pt is, for metrics which are defined in",
        "terms of pts.",
        "This value is also used in katex.less; if you change it make sure the values",
        "match.",
        "The space between adjacent `|` columns in an array definition. From",
        "`\\showthe\\doublerulesep` in LaTeX.",
        "This map contains a mapping from font name and character code to character",
        "metrics, including height, depth, italic correction, and skew (kern from the",
        "character to the corresponding \\skewchar)",
        "This map is generated via `make metrics`. It should not be changed manually.",
        "These are very rough approximations.  We default to Times New Roman which",
        "should have Latin-1 and Cyrillic characters, but may not depending on the",
        "operating system.  The metrics do not account for extra height from the",
        "accents.  In the case of Cyrillic characters which have both ascenders and",
        "descenders we prefer approximations with ascenders, primarily to prevent",
        "the fraction bar or root line from intersecting the glyph.",
        "TODO(kevinb) allow union of multiple glyph metrics for better accuracy.",
        "Latin-1",
        "Cyrillic",
        "IDs of the different styles",
        "String names for the different sizes",
        "Reset names for the different sizes",
        "Instances of the different styles",
        "Lookup tables for switching from one style to another",
        "We only export some of the styles. Also, we don't export the `Style` class so",
        "no more styles can be generated.",
        "hyphenate and escape adapted from Facebook's React under Apache 2 license",
        "Apply the class",
        "Apply inline styles",
        "Apply attributes",
        "Append the children, also as HTML nodes",
        "Add the class",
        "Add the styles, after hyphenation",
        "Add the attributes",
        "Add the markup of the children, also as markup",
        "Create a fragment",
        "Append the children",
        "Simply concatenate the markup for the children together",
        "'ī': '\\u0131\\u0304', // enable when we add Extended Latin",
        "Mark CJK characters with specific classes so that we can specify which",
        "fonts to use.  This allows us to render these characters with a serif",
        "font in situations where the browser would either default to a sans serif",
        "or render a placeholder character.",
        "I couldn't find any fonts that contained Hangul as well as all of",
        "the other characters we wanted to test there for it gets its own",
        "CSS class.",
        "add ī when we add Extended Latin",
        "TODO(alpert): More duplication than I'd like from",
        "span.prototype.toMarkup and symbolNode.prototype.toNode...",
        "Some abbreviations for commonly used strings.",
        "This helps minify the code, and also spotting typos using jshint.",
        "modes:",
        "fonts:",
        "groups:",
        "Now comes the symbol table",
        "Relation Symbols",
        "Punctuation",
        "Misc Symbols",
        "Math and Text",
        "Large Delimiters",
        "Binary Operators",
        "Arrow Symbols",
        "AMS Negated Binary Relations",
        "AMS Negated Arrows",
        "AMS Misc",
        "AMS Hebrew",
        "AMS Greek",
        "AMS Delimiters",
        "AMS Binary Relations",
        "AMS Binary Operators",
        "AMS Arrows",
        "There are lots of symbols which are the same, so we add them in afterwards.",
        "All of these are textords in math mode",
        "All of these are textords in text mode",
        "All of these are textords in text mode, and mathords in math mode",
        "Latin-1 letters",
        "Cyrillic",
        "Unicode versions of existing characters",
        "eslint no-console:0",
        "The following have to be loaded from Main-Italic font, using class mainit",
        "dotless i, \\imath",
        "dotless j, \\jmath",
        "\\pounds",
        "Replace the value with its replaced value from symbol.js",
        "TODO(emily): Figure out a good way to only print this in development",
        "Decide what font to render the symbol in by its entry in the symbols",
        "table.",
        "Have a special case for when the value = \\ because the \\ is used as a",
        "textord in unsupported command errors but cannot be parsed as a regular",
        "text ordinal and is therefore not present as a symbol in the symbols",
        "table for text",
        "glyphs for \\imath and \\jmath do not exist in Math-Italic so we",
        "need to use Main-Italic instead",
        "Add in kerns to the list of children to get each element to be",
        "shifted to the correct specified shift",
        "We always start at the bottom, so calculate the bottom by adding up",
        "all the sizes",
        "Make the fontSizer",
        "Create a new list of actual children at the correct offsets",
        "Add in an element at the end with no offset to fix the calculation of",
        "baselines in some browsers (namely IE, sometimes safari)",
        "Fix the final height and depth, in case there were kerns at the ends",
        "since the makeSpan calculation won't take that in to account.",
        "A table of size -> font size for the different sizing functions",
        "A map of spacing functions to their attributes, like size and corresponding",
        "CSS class",
        "A map between tex font commands an MathML mathvariant attribute values",
        "styles",
        "\"mathit\" is missing because it requires the use of two fonts: Main-Italic",
        "and Math-Italic.  This is handled by a special case in makeOrd which ends",
        "up calling mathit.",
        "families",
        "Apply the correct CSS class to choose the right font.",
        "Since this will be passed into `makeVList` in the end, wrap the element",
        "in the appropriate tag that VList uses.",
        "There are four parts, the top, an optional middle, a repeated part, and a",
        "bottom.",
        "Also keep track of what font the delimiters are in",
        "We set the parts and font based on the symbol. Note that we use",
        "'\\u23d0' instead of '|' and '\\u2016' instead of '\\\\|' for the",
        "repeats of the arrows",
        "Get the metrics of the four sections",
        "repeat symmetrically above and below middle",
        "Calcuate the minimal height that the delimiter can have.",
        "It is at least the size of the top, bottom, and optional middle combined.",
        "Compute the number of copies of the repeat symbol we will need",
        "Compute the total height of the delimiter including all the symbols",
        "The center of the delimiter is placed at the center of the axis. Note",
        "that in this context, \"center\" means that the delimiter should be",
        "centered around the axis in the current style, while normally it is",
        "centered around the axis in textstyle.",
        "Calculate the depth",
        "Now, we start building the pieces that will go into the vlist",
        "Keep a list of the inner pieces",
        "Add the bottom symbol",
        "Add that many symbols",
        "When there is a middle bit, we need the middle part and two repeated",
        "sections",
        "Add the top symbol",
        "Finally, build the vlist",
        "There are three kinds of delimiters, delimiters that stack when they become",
        "too large",
        "delimiters that always stack",
        "and delimiters that never stack",
        "Metrics of the different sizes. Found by looking at TeX's output of",
        "$\\bigl| // \\Bigl| \\biggl| \\Biggl| \\showlists$",
        "Used to create stacked delimiters of appropriate sizes in makeSizedDelim.",
        "< and > turn into \\langle and \\rangle in delimiters",
        "Sized delimiters are never centered.",
        "Delimiters that never stack try small delimiters and large delimiters only",
        "Delimiters that always stack try the small delimiters first, then stack",
        "Delimiters that stack when large try the small and then large delimiters, and",
        "stack afterwards",
        "Here, we choose the index we should start at in the sequences. In smaller",
        "sizes (which correspond to larger numbers in style.size) we start earlier",
        "in the sequence. Thus, scriptscript starts at index 3-3=0, script starts",
        "at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2",
        "This is always the last delimiter, so we just break the loop now.",
        "Small delimiters are scaled down versions of the same font, so we",
        "account for the style change size.",
        "Check if the delimiter at this size works for the given height.",
        "If we reached the end of the sequence, return the last sequence element.",
        "Decide what sequence to use",
        "Look through the sequence",
        "Depending on the sequence element we decided on, call the appropriate",
        "function.",
        "We always center \\left/\\right delimiters, so the axis is always shifted",
        "Taken from TeX source, tex.web, function make_left_right",
        "In real TeX, calculations are done using integral values which are",
        "65536 per pt, or 655360 per em. So, the division here truncates in",
        "TeX but doesn't here, producing different results. If we wanted to",
        "exactly match TeX's calculation, we could do",
        "Math.floor(655360 * maxDistFromAxis / 500) *",
        "delimiterFactor / 655360",
        "(To see the difference, compare",
        "x^{x^{\\left(\\rule{0.1em}{0.68em}\\right)}}",
        "in TeX and KaTeX)",
        "Finally, we defer to `makeCustomSizedDelim` with our calculated total",
        "height",
        "eslint no-console:0",
        "Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)",
        "depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,",
        "and the text before Rule 19.",
        "TODO: This code assumes that a node's math class is the first element",
        "of its `classes` array. A later cleanup should ensure this, for",
        "instance by changing the signature of `makeSpan`.",
        "Parse expressions into `groups`.",
        "At this point `groups` consists entirely of `symbolNode`s and `span`s.",
        "Explicit spaces (e.g., \\;, \\,) should be ignored with respect to atom",
        "spacing (e.g., \"add thick space between mord and mrel\"). Since CSS",
        "adjacency rules implement atom spacing, spaces should be invisible to",
        "CSS. So we splice them out of `groups` and into the atoms themselves.",
        "Binary operators change to ordinary symbols in some contexts.",
        "Return math atom class (mclass) of a domTree.",
        "Operators handle supsubs differently when they have limits",
        "(e.g. `\\displaystyle\\sum_2^3`)",
        "These are all they types of groups which hold single characters",
        "\\color isn't supposed to affect the type of the elements it contains.",
        "To accomplish this, we wrap the results in a fragment, so the inner",
        "elements will be able to directly interact with their neighbors. For",
        "example, `\\color{red}{2 +} 3` has the same spacing as `2 + 3`",
        "Superscript and subscripts are handled in the TeXbook on page",
        "445-446, rules 18(a-f).",
        "Here is where we defer to the inner group if it should handle",
        "superscripts and subscripts itself.",
        "Rule 18a",
        "Rule 18c",
        "scriptspace is a font-size-independent size, so scale it",
        "appropriately",
        "Rule 18b",
        "Subscripts shouldn't be shifted by the base's italic correction.",
        "Account for that by shifting the subscript back the appropriate",
        "amount. Note we only do this when the base is a single symbol.",
        "Rule 18c, d",
        "Rule 18e",
        "See comment above about subscripts not being shifted",
        "We ensure to wrap the supsub vlist in a span.msupsub to reset text-align",
        "Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).",
        "Figure out what style this fraction should be in based on the",
        "function used",
        "Rule 15b",
        "Rule 15c",
        "Rule 15d",
        "Manually set the height of the line because its height is",
        "created in CSS",
        "Since we manually change the style sometimes (with \\dfrac or \\tfrac),",
        "account for the possible size change here.",
        "Rule 15e",
        "Horizontal spacing",
        "\\arraycolsep in article.cls",
        "Vertical spacing",
        "see size10.clo",
        "Default \\arraystretch from lttab.dtx",
        "TODO(gagern): may get redefined once we have user-defined macros",
        "\\strutbox in ltfsstrc.dtx and",
        "\\@arstrutbox in lttab.dtx",
        "\\@array adds an \\@arstrut",
        "to each tow (via the template)",
        "\\@argarraycr",
        "\\@xargarraycr",
        "\\@yargarraycr",
        "Continue while either there are more columns or more column",
        "descriptions, so trailing separators don't get lost.",
        "If there is more than one separator in a row, add a space",
        "between them.",
        "Spaces are generated by adding an actual space. Each of these",
        "things has an entry in the symbols table, so these will be turned",
        "into appropriate outputs.",
        "Other kinds of spaces are of arbitrary width. We use CSS to",
        "generate these.",
        "Operators are handled in the TeXbook pg. 443-444, rule 13(a).",
        "If we have limits, supsub will pass us its group to handle. Pull",
        "out the superscript and subscript and set the group to the op in",
        "its base.",
        "Most operators have a large successor symbol, but these don't.",
        "Most symbol operators get larger in displaystyle (rule 13)",
        "If this is a symbol, create the symbol.",
        "Shift the symbol so its center lies on the axis (rule 13). It",
        "appears that our fonts have the centers of the symbols already",
        "almost on the axis, so these numbers are very small. Note we",
        "don't actually apply this here, but instead it is used either in",
        "the vlist creation or separately when there are no limits.",
        "The slant of the symbol is just its italic correction.",
        "If this is a list, compose that list.",
        "Otherwise, this is a text operator. Build the text from the",
        "operator's name.",
        "TODO(emily): Add a space in the middle of some of these",
        "operators, like \\limsup",
        "IE 8 clips \\int if it is in a display: inline-block. We wrap it",
        "in a new span so it is an inline, and works.",
        "We manually have to handle the superscripts and subscripts. This,",
        "aside from the kern calculations, is copied from supsub.",
        "Build the final group as a vlist of the possible subscript, base,",
        "and possible superscript.",
        "Here, we shift the limits by the slant of the symbol. Note",
        "that we are supposed to shift the limits by 1/2 of the slant,",
        "but since we are centering the limits adding a full slant of",
        "margin will shift by 1/2 that.",
        "See comment above about slants",
        "This case probably shouldn't occur (this would mean the",
        "supsub was sending us a group with no superscript or",
        "subscript) but be safe.",
        "See comment above about slants",
        "“\\nonscript\\mskip-\\medmuskip\\mkern5mu”",
        "“\\mkern5mu\\nonscript\\mskip-\\medmuskip”",
        "The KaTeX logo. The offsets for the K and a were chosen to look",
        "good, but the offsets for the T, E, and X were taken from the",
        "definition of \\TeX in TeX (see TeXbook pg. 356)",
        "Overlines are handled in the TeXbook pg 443, Rule 9.",
        "Build the inner group in the cramped style.",
        "Create the line above the body",
        "Generate the vlist, with the appropriate kerns",
        "Underlines are handled in the TeXbook pg 443, Rule 10.",
        "Build the inner group.",
        "Create the line above the body",
        "Generate the vlist, with the appropriate kerns",
        "Square roots are handled in the TeXbook pg. 443, Rule 11.",
        "First, we do the same steps as in overline to build the inner group",
        "and line",
        "Calculate the clearance between the body and line",
        "Create a \\surd delimiter of the required minimum size",
        "Adjust the clearance based on the delimiter size",
        "Shift the delimiter so that its top lines up with the top of the line",
        "We add a special case here, because even when `inner` is empty, we",
        "still get a line. So, we use a simple heuristic to decide if we",
        "should omit the body entirely. (note this doesn't work for something",
        "like `\\sqrt{\\rlap{x}}`, but if someone is doing that they deserve for",
        "it not to work.",
        "Handle the optional root index",
        "The index is always in scriptscript style",
        "Figure out the height and depth of the inner part",
        "The amount the index is shifted by. This is taken from the TeX",
        "source, in the definition of `\\r@@t`.",
        "Build a VList with the superscript shifted up correctly",
        "Add a class surrounding it so we can add on the appropriate",
        "kerning",
        "Handle sizing operators like \\Huge. Real TeX doesn't actually allow",
        "these functions inside of math expressions, so we do some special",
        "handling.",
        "Compute the correct maxFontSize.",
        "Add size-resetting classes to the inner list and set maxFontSize",
        "manually. Handle nested size changes.",
        "This is a nested size change: e.g., inner[i] is the \"b\" in",
        "`\\Huge a \\small b`. Override the old size (the `reset-` class)",
        "but not the new size.",
        "Style changes are handled in the TeXbook on pg. 442, Rule 3.",
        "Figure out what style we're changing to.",
        "Build the inner expression in the new style.",
        "Add style-resetting classes to the inner list. Handle nested changes.",
        "This is a nested style change, as `\\textstyle a\\scriptstyle b`.",
        "Only override the old style (the reset class).",
        "Empty delimiters still count as elements, even though they don't",
        "show anything.",
        "Use delimiter.sizedDelim to generate the delimiter.",
        "Build the inner expression",
        "Calculate its height and depth",
        "The size of delimiters is the same, regardless of what style we are",
        "in. Thus, to correctly calculate the size of delimiter we need around",
        "a group, we scale down the inner size based on the size.",
        "Empty delimiters in \\left and \\right make null delimiter spaces.",
        "Otherwise, use leftRightDelim to generate the correct sized",
        "delimiter.",
        "Add it to the beginning of the expression",
        "Handle middle delimiters",
        "Apply the options that were active when \\middle was called",
        "Same for the right delimiter",
        "Add it to the end of the expression.",
        "Make an empty span for the rule",
        "Calculate the shift, width, and height of the rule, and account for units",
        "The sizes of rules are absolute, so make it larger if we are in a",
        "smaller style.",
        "Style the rule to the right size",
        "Record the height and width",
        "Make an empty span for the rule",
        "Accents are handled in the TeXbook pg. 443, rule 12.",
        "If our base is a character box, and we have superscripts and",
        "subscripts, the supsub will defer to us. In particular, we want",
        "to attach the superscripts and subscripts to the inner body (so",
        "that the position of the superscripts and subscripts won't be",
        "affected by the height of the accent). We accomplish this by",
        "sticking the base of the accent into the base of the supsub, and",
        "rendering that, while keeping track of where the accent is.",
        "The supsub group is the group that was passed in",
        "The real accent group is the base of the supsub group",
        "The character box is the base of the accent group",
        "Stick the character box into the base of the supsub group",
        "Rerender the supsub group with its new base, and store that",
        "result.",
        "Build the base group",
        "Calculate the skew of the accent. This is based on the line \"If the",
        "nucleus is not a single character, let s = 0; otherwise set s to the",
        "kern amount for the nucleus followed by the \\skewchar of its font.\"",
        "Note that our skew metrics are just the kern between each character",
        "and the skewchar.",
        "If the base is a character box, then we want the skew of the",
        "innermost character. To do that, we find the innermost character:",
        "Then, we render its group to get the symbol inside it",
        "Finally, we pull the skew off of the symbol.",
        "Note that we now throw away baseGroup, because the layers we",
        "removed with getBaseElem might contain things like \\color which",
        "we can't get rid of.",
        "TODO(emily): Find a better way to get the skew",
        "calculate the amount of space between the body and the accent",
        "Build the accent",
        "Remove the italic correction of the accent, because it only serves to",
        "shift the accent over to a place we don't want.",
        "The \\vec character that the fonts use is a combining character, and",
        "thus shows up much too far to the left. To account for this, we add a",
        "specific class which shifts the accent over to where we want it.",
        "TODO(emily): Fix this in a better way, like by changing the font",
        "Shift the accent over by the skew. Note we shift by twice the skew",
        "because we are centering the accent, so by adding 2*skew to the left,",
        "we shift it to the right by 1*skew.",
        "Here, we replace the \"base\" child of the supsub with our newly",
        "generated accent.",
        "Since we don't rerun the height calculation after replacing the",
        "accent, we manually recalculate height.",
        "Accents should always be ords, even when their innards are not.",
        "\\phantom isn't supposed to affect the elements it contains.",
        "See \"color\" for more details.",
        "Call the groupTypes function",
        "If the style changed between the parent and the current group,",
        "account for the size difference",
        "If the size changed between the parent and the current group, account",
        "for that size difference.",
        "buildExpression is destructive, so we need to make a clone",
        "of the incoming tree so that it isn't accidentally changed",
        "Build the expression contained in the tree",
        "Add struts, which ensure that the top of the HTML element falls at the",
        "height of the expression, and the bottom of the HTML element falls at the",
        "depth of the expression.",
        "We'd like to use `vertical-align: top` but in IE 9 this lowers the",
        "baseline of the box to the bottom of this strut (instead staying in the",
        "normal place) so we use an absolute value for vertical-align instead",
        "Wrap the struts and body together",
        "Add the attributes",
        "TODO(kevinb) merge adjacent <mn> nodes",
        "do it as a post processing step",
        "TODO(emily): handle big operators using the `largeop` attribute",
        "This is a symbol. Just add the symbol.",
        "This is an operator with children. Add them.",
        "This is a text operator. Add all of the characters from the",
        "operator's name.",
        "TODO(emily): Add a space in the middle of some of these",
        "operators, like \\limsup.",
        "Only some of the delimsizing functions act as fences, and they",
        "return \"mopen\" or \"mclose\" mclass.",
        "Explicitly disable fencing if it's not a fence, to override the",
        "defaults.",
        "TODO(emily): This doesn't produce the correct size for nested size",
        "changes, because we don't keep state of what style we're currently",
        "in, so we can't reset the size to normal before changing it.  Now",
        "that we're passing an options parameter we should be able to fix",
        "this.",
        "TODO(emily): Figure out if there's an actual way to draw black boxes",
        "in MathML.",
        "TODO(kevin): Figure out if there's a way to add space in MathML",
        "Call the groupTypes function",
        "Wrap up the expression in an mrow so it is presented in the semantics",
        "tag correctly.",
        "Build a TeX annotation of the source",
        "You can't style <math> nodes, so we wrap the node in a span.",
        "Setup the default options",
        "`buildHTML` sometimes messes with the parse tree (like turning bins ->",
        "ords), so we build the MathML version first.",
        "This file contains a list of functions that we parse, identified by\n * the calls to defineFunction.\n *\n * The first argument to defineFunction is a single name or a list of names.\n * All functions named in such a list will share a single implementation.\n *\n * Each declared function can have associated properties, which\n * include the following:\n *\n *  - numArgs: The number of arguments the function takes.\n *             If this is the only property, it can be passed as a number\n *             instead of an element of a properties object.\n *  - argTypes: (optional) An array corresponding to each argument of the\n *              function, giving the type of argument that should be parsed. Its\n *              length should be equal to `numArgs + numOptionalArgs`. Valid\n *              types:\n *               - \"size\": A size-like thing, such as \"1em\" or \"5ex\"\n *               - \"color\": An html color, like \"#abc\" or \"blue\"\n *               - \"original\": The same type as the environment that the\n *                             function being parsed is in (e.g. used for the\n *                             bodies of functions like \\color where the first\n *                             argument is special and the second argument is\n *                             parsed normally)\n *              Other possible types (probably shouldn't be used)\n *               - \"text\": Text-like (e.g. \\text)\n *               - \"math\": Normal math\n *              If undefined, this will be treated as an appropriate length\n *              array of \"original\" strings\n *  - greediness: (optional) The greediness of the function to use ungrouped\n *                arguments.\n *\n *                E.g. if you have an expression\n *                  \\sqrt \\frac 1 2\n *                since \\frac has greediness=2 vs \\sqrt's greediness=1, \\frac\n *                will use the two arguments '1' and '2' as its two arguments,\n *                then that whole function will be used as the argument to\n *                \\sqrt. On the other hand, the expressions\n *                  \\frac \\frac 1 2 3\n *                and\n *                  \\frac \\sqrt 1 2\n *                will fail because \\frac and \\frac have equal greediness\n *                and \\sqrt has a lower greediness than \\frac respectively. To\n *                make these parse, we would have to change them to:\n *                  \\frac {\\frac 1 2} 3\n *                and\n *                  \\frac {\\sqrt 1} 2\n *\n *                The default value is `1`\n *  - allowedInText: (optional) Whether or not the function is allowed inside\n *                   text mode (default false)\n *  - numOptionalArgs: (optional) The number of optional arguments the function\n *                     should parse. If the optional arguments aren't found,\n *                     `null` will be passed to the handler in their place.\n *                     (default 0)\n *  - infix: (optional) Must be true if the function is an infix operator.\n *\n * The last argument is that implementation, the handler for the function(s).\n * It is called to handle these functions and their arguments.\n * It receives two arguments:\n *  - context contains information and references provided by the parser\n *  - args is an array of arguments obtained from TeX input\n * The context contains the following properties:\n *  - funcName: the text (i.e. name) of the function, including \\\n *  - parser: the parser object\n *  - lexer: the lexer object\n *  - positions: the positions in the overall string of the function\n *               and the arguments.\n * The latter three should only be used to produce error messages.\n *\n * The function should return an object with the following keys:\n *  - type: The type of element that this is. This is then used in\n *          buildHTML/buildMathML to determine which function\n *          should be called to build this node into a DOM node\n * Any other data can be added to the object, which will be passed\n * in to the function in buildHTML/buildMathML as `group.value`.",
        "Set default values of functions",
        "Since the corresponding buildHTML/buildMathML function expects a",
        "list of elements, we normalize for different kinds of arguments",
        "A normal square root",
        "Non-mathy text, possibly in a font",
        "A two-argument custom color",
        "An overline",
        "An underline",
        "A box of the width and height",
        "TODO: In TeX, \\mkern only accepts mu-units, and \\kern does not accept",
        "mu-units. In current KaTeX we relax this; both commands accept any unit.",
        "A KaTeX logo",
        "Math class commands except \\mathop",
        "Build a relation by placing one symbol on top of another",
        "\\mod-type functions",
        "Extra data needed for the delimiter handler down below",
        "Single-argument color functions",
        "There are 2 flags for operators; whether they produce limits in",
        "displaystyle, and whether they are symbols and should grow in",
        "displaystyle. These four groups cover the four possible choices.",
        "No limits, not symbols",
        "Limits, not symbols",
        "No limits, symbols",
        "Limits, symbols",
        "\\mathop class command",
        "Fractions",
        "can’t be entered directly",
        "Left and right overlap functions",
        "Delimiter functions",
        "\\left and \\right are caught somewhere in Parser.js, which is",
        "why this data doesn't match what is in buildHTML.",
        "Sizing functions (handled in Parser.js explicitly, hence no handler)",
        "Style changing functions (handled in Parser.js explicitly, hence no",
        "handler)",
        "styles",
        "families",
        "aliases",
        "Accents",
        "Infix generalized fractions",
        "Row breaks for aligned data",
        "Environment delimiters",
        "eslint no-constant-condition:0",
        "Set default values of environments",
        "Arrays are part of LaTeX, defined in lttab.dtx so its documentation",
        "is part of the source2e.pdf file of LaTeX2e source documentation.",
        "\\@preamble in lttab.dtx",
        "The matrix environments of amsmath builds on the array environment",
        "of LaTeX, which is discussed above.",
        "\\hskip -\\arraycolsep in amsmath",
        "A cases environment (in amsmath.sty) is almost equivalent to",
        "\\def\\arraystretch{1.2}%",
        "\\left\\{\\begin{array}{@{}l@{\\quad}l@{}} … \\end{array}\\right.",
        "TODO(kevinb) get the current style.",
        "For now we use the metrics for TEXT style which is what we were",
        "doing before.  Before attempting to get the current style we",
        "should look at TeX's behavior especially for \\over and matrices.",
        "An aligned environment is like the align* environment",
        "except it operates within math mode.",
        "Note that we assume \\nomallineskiplimit to be zero,",
        "so that \\strut@ is the same as \\strut.",
        "one \\qquad between columns",
        "@flow",
        "In the future, this could use a WeakMap instead of an expando.",
        "Disjunctions are the lowest-precedence operator, so we can make any",
        "pattern match the empty string by appending `|()` to it:",
        "https://people.mozilla.org/~jorendorff/es6-draft.html#sec-patterns",
        "We always make the new regex global.",
        "Last capturing group is our sentinel that indicates whether the regex",
        "matched at the given location.",
        "Original regex matched.",
        "The main lexer class",
        "sorry, no position information available",
        "The following tokenRegex\n * - matches typical whitespace (but not NBSP etc.) using its first group\n * - does not match any control character \\x00-\\x1f except whitespace\n * - does not match a bare backslash\n * - matches any ASCII character except those just mentioned\n * - does not match the BMP private use area \\uE000-\\uF8FF\n * - does not match bare surrogate code units\n * - matches any BMP character except for those just described\n * - matches any valid Unicode surrogate pair\n * - matches a backslash followed by one or more letters\n * - matches a backslash followed by any BMP character, including newline\n * Just because the Lexer matches something doesn't mean it's valid input:\n * If there is no matching function or symbol definition, the Parser will\n * still reject the input.",
        "whitespace",
        "single codepoint",
        "surrogate pair",
        "function name",
        "contains tokens in REVERSE order",
        "to fit in with stack using push and pop",
        "eslint no-constant-condition:0",
        "Create a new macro expander (gullet) and (indirectly via that) also a",
        "new lexer (mouth) for this parser (stomach, in the language of TeX)",
        "Store the settings for use in parsing",
        "Count leftright depth (for \\middle errors)",
        "Is this a function (i.e. is it something defined in functions.js)?",
        "Try to parse the input",
        "Parse an expression",
        "If we succeeded, make sure there's an EOF at the end",
        "Keep adding atoms to the body until we can't parse any more atoms (either",
        "we reached the end, a }, or a \\right)",
        "The greediness of a superscript or subscript",
        "^ and _ have a greediness, so handle interactions with functions'",
        "greediness",
        "The body of an atom is an implicit group, so that things like",
        "\\left(x\\right)^2 work correctly.",
        "In text mode, we don't have superscripts or subscripts",
        "Note that base may be empty (i.e. null) at this point.",
        "Lex the first token",
        "We got a limit control",
        "We got a superscript start",
        "We got a subscript start",
        "We got a prime",
        "Many primes can be grouped together, so we handle this here",
        "Keep lexing tokens until we get something that's not a prime",
        "For each one, add another prime to the list",
        "Put them into an ordgroup as the superscript",
        "If it wasn't ^, _, or ', stop parsing super/subscripts",
        "If we got either a superscript or subscript, create a supsub",
        "Otherwise return the original body",
        "A list of the size-changing functions, for use in parseImplicitGroup",
        "A list of the style-changing functions, for use in parseImplicitGroup",
        "If we didn't get anything we handle, fall back to parseFunction",
        "If we see a left:",
        "Parse the entire left function (including the delimiter)",
        "Parse out the implicit body",
        "Check the next token",
        "begin...end is similar to left...right",
        "Build the environment object. Arguments and other information will",
        "be made available to the begin and end methods using properties.",
        "If we see a sizing function, parse out the implict body",
        "Figure out what size to use based on the list of functions above",
        "If we see a styling function, parse out the implict body",
        "Figure out what style to use by pulling out the style from",
        "the function name",
        "Defer to parseFunction if it's not a function we handle",
        "Handle `original` argTypes",
        "text mode is special because it should ignore the whitespace before",
        "it",
        "By the time we get here, innerMode is one of \"text\" or \"math\".",
        "We switch the mode of the parser, recurse, then restore the old mode.",
        "sign + magnitude, cast to number",
        "Try to parse an open brace",
        "If we get a brace, parse an expression",
        "Make sure we get a close brace",
        "Otherwise, just return a nucleus, or nothing for an optional group",
        "If there exists a function with this name, we return the function and",
        "say that it is a function.",
        "Otherwise if this is a no-argument function, find the type it",
        "corresponds to in the symbols map",
        "eslint no-console:0",
        "KaTeX's styles don't work properly in quirks mode. Print out an error, and",
        "disable rendering.",
        "newline",
        "code",
        "fences (gfm)",
        "heading",
        "table no leading pipe (gfm)",
        "lheading",
        "hr",
        "blockquote",
        "Pass `top` to keep the current",
        "\"toplevel\" state. This is exactly",
        "how markdown.pl works.",
        "list",
        "Get each top-level item.",
        "Remove the list item's bullet",
        "so it is seen as the next token.",
        "Outdent whatever the",
        "list item contains. Hacky.",
        "Determine whether the next list item belongs here.",
        "Backpedal if it does not belong in this list.",
        "Determine whether item is loose or not.",
        "Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/",
        "for discount behavior.",
        "Recurse.",
        "html",
        "def",
        "table (gfm)",
        "top-level paragraph",
        "text",
        "Top-level should never reach here.",
        "escape",
        "autolink",
        "url (gfm)",
        "tag",
        "link",
        "reflink, nolink",
        "strong",
        "em",
        "code",
        "br",
        "del (gfm)",
        "text",
        "em-dashes",
        "en-dashes",
        "opening singles",
        "closing singles & apostrophes",
        "opening doubles",
        "closing doubles",
        "ellipses",
        "span level renderer",
        "header",
        "explicitly match decimal, hex, and named HTML entities",
        "Set default indents",
        "if in browser",
        "if in worker",
        "if in node js",
        "Private helper vars",
        "Deep clone a language definition (e.g. to extend it)",
        "Check for existence for IE8",
        "Update references in other language definitions",
        "Traverse a language definition with Depth First Search",
        "Find language",
        "Set language on the element, if not present",
        "Set language on the parent, for styling",
        "Without the global flag, lastIndex won't work",
        "Don’t cache length as it changes during the loop",
        "Something went terribly wrong, ABORT, ABORT!",
        "Greedy patterns can override/remove up to two previously matched tokens",
        "Move the index i to the element in strarr that is closest to from",
        "Number of tokens to delete and replace with the new match",
        "Copy of the full string this token was created from",
        "in Node.js",
        "In worker",
        "Get current script and highlight",
        "hack for components to work correctly in node.js",
        "Plugin to make entity title show the real entity, idea by Roman Komarov",
        "See rest below",
        "Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)",
        "Check to prevent error in IE8",
        "\\z may be used to skip the following space",
        "Match \"..\" but don't break \"...\"",
        "Arithmetic Environment",
        "If there is a $ sign at the beginning highlight $(( and )) as variable",
        "Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic",
        "If there is no $ sign at the beginning highlight (( and )) as punctuation",
        "Command Substitution",
        "Support for Here-Documents https://en.wikipedia.org/wiki/Here_document",
        "Originally based on http://ss64.com/bash/",
        "> ...",
        "Prefixed by 4 spaces or 1 tab",
        "`code`",
        "``code``",
        "title 1",
        "=======",
        "title 2",
        "-------",
        "# title 1",
        "###### title 6",
        "---",
        "-----------",
        "+ item",
        "- item",
        "1. item",
        "[id]: http://example.com \"Optional title\"",
        "[id]: http://example.com 'Optional title'",
        "[id]: http://example.com (Optional title)",
        "[id]: <http://example.com> \"Optional title\"",
        "__strong__",
        "Allow only one line break",
        "_em_",
        "Allow only one line break",
        "[example](http://example.com \"Optional title\")",
        "[example] [id]",
        "Let's normalize the tab indents",
        "comment nodes",
        "!\n * typeset - Typesetting for the web\n * @version v0.1.6\n * @link https://github.com/davidmerfield/Typeset.js\n * @author David Merfield",
        "which has a CC0 license",
        "http://creativecommons.org/publicdomain/zero/1.0/",
        "Dashes",
        "this has thin spaces",
        "The following are temporary commented out because incompatibility",
        "with katex",
        "Elipses",
        "text = text.replace(/\\.\\.\\./g,'…');",
        "Nbsp for punc with spaces",
        "var NBSP = \"\\u00a0\";",
        "var NBSP_PUNCTUATION_START = /([«¿¡]) /g;",
        "var NBSP_PUNCTUATION_END = / ([\\!\\?:;\\.,‽»])/g;",
        "text = text.replace(NBSP_PUNCTUATION_START, '$1' + NBSP);",
        "text = text.replace(NBSP_PUNCTUATION_END, NBSP + '$1');",
        "beginning \"",
        "ending \"",
        "remaining \" at end of word",
        "beginning '",
        "conjunction's possession",
        "ending '",
        "abbrev. years like '93",
        "backwards apostrophe",
        "triple prime",
        "double prime",
        "Allow escaped quotes",
        "import xml from \"xml\";",
        "generate XML",
        "TODO: ORCID?",
        "{timestamp: \"\"},",
        "console.log(typeof(obj), obj)",
        "console.log(Object.keys(obj)[0])",
        "console.log(typeof content, Array.isArray(content), content instanceof String, content)",
        "If we are in a browser, render automatically...",
        "Add a banner if we're not on localhost.",
        "console.log(data);",
        "If we are in node...",
        "Remove script tag so it doesn't run again in the client",
        "Distill specific rendering",
        "# sourceMappingURL=template.v1.js.map"
    ],
    "docstrings": [
        "*",
        "*",
        "*",
        "* Module variables.\n * @private",
        "* Module exports.\n * @public",
        "* Escape special characters in the given string of html.\n *\n * @param  {string} string The string to escape for inserting into HTML\n * @return {string}\n * @public",
        "* More correct typeof string handling array\n   * which normally returns typeof 'object'",
        "* Null safe way of checking whether or not an object,\n   * including its prototype, has a given property",
        "* Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.",
        "* Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.",
        "* Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.",
        "* A simple string scanner that is used by the template parser to find\n   * tokens in template strings.",
        "* Returns `true` if the tail is empty (end of string).",
        "* Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.",
        "* Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.",
        "* Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.",
        "* Creates a new context using the given view with this context\n   * as the parent.",
        "* Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.",
        "* Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *",
        "* A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.",
        "* Clears all cached templates in this writer.",
        "* Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.",
        "* High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.",
        "* Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.",
        "* Clears all cached templates in the default writer.",
        "* Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.",
        "* Renders the `template` with the given `view` and `partials` using the\n   * default writer.",
        "* This is the ParseError class, which is the main error thrown by KaTeX\n * functions when something has gone wrong. This is used to distinguish internal\n * errors from errors in the expression that the user provided.\n *\n * If possible, a caller should provide a Token or ParseNode with information\n * about where in the source string the problem occurred.\n *\n * @param {string} message  The error message\n * @param {(Token|ParseNode)=} token  An object providing position information",
        "* This is a module for storing settings passed into KaTeX. It correctly handles\n * default settings.",
        "* Helper function for getting a default value if the value is undefined",
        "* The main Settings object\n *\n * The current options stored are:\n *  - displayMode: Whether the expression should be typeset by default in\n *                 textstyle or displaystyle (default false)",
        "* This file contains metrics regarding fonts and individual symbols. The sigma\n * and xi variables, as well as the metricMap map contain data extracted from\n * TeX, TeX font metrics, and the TTF files. These data are then exposed via the\n * `metrics` variable and the getCharacterMetrics function.",
        "* This is just a mapping from common names to real metrics",
        "* This function is a convenience function for looking up information in the\n * metricMap table. It takes a character as a string, and a style.\n *\n * Note: the `width` property may be undefined if fontMetricsData.js wasn't\n * built using `Make extended_metrics`.",
        "* This file contains information and classes for the various kinds of styles\n * used in TeX. It provides a generic `Style` class, which holds information\n * about a specific style. It then provides instances of all the different kinds\n * of styles possible, and provides functions to move between them and get\n * information about them.",
        "* The main style class. Contains a unique id for the style, a size (which is\n * the same for cramped and uncramped version of a style), a cramped flag, and a\n * size multiplier, which gives the size difference between a style and\n * textstyle.",
        "* Get the style of a superscript given a base in the current style.",
        "* Get the style of a subscript given a base in the current style.",
        "* Get the style of a fraction numerator given the fraction in the current\n * style.",
        "* Get the style of a fraction denominator given the fraction in the current\n * style.",
        "* Get the cramped version of a style (in particular, cramping a cramped style\n * doesn't change the style).",
        "* HTML class name, like \"displaystyle cramped\"",
        "* HTML Reset class name, like \"reset-textstyle\"",
        "* Return if this style is tightly spaced (scriptstyle/scriptscriptstyle)",
        "* This file contains a list of utility functions which are useful in other\n * files.",
        "* Provide an `indexOf` function which works in IE8, but defers to native if\n * possible.",
        "* Return whether an element is contained in a list",
        "* Provide a default value if a setting is undefined",
        "* Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.",
        "* A function to set the text content of a DOM element in all supported\n * browsers. Note that we don't define this if there is no document.",
        "* A function to clear a node.",
        "* These objects store the data about the DOM nodes we create, as well as some\n * extra data. They can then be transformed into real DOM nodes with the\n * `toNode` function or HTML markup using `toMarkup`. They are useful for both\n * storing extra properties on the nodes, as well as providing a way to easily\n * work with the DOM.\n *\n * Similar functions for working with MathML nodes exist in mathMLTree.js.",
        "* Create an HTML className based on a list of classes. In addition to joining\n * with spaces, we also remove null or empty classes.",
        "* This node represents a span node, with a className, a list of children, and\n * an inline style. It also contains information about its height, depth, and\n * maxFontSize.",
        "* Sets an arbitrary attribute on the span. Warning: use this wisely. Not all\n * browsers support attributes the same, and having too many custom attributes\n * is probably bad.",
        "* Convert the span into an HTML node",
        "* Convert the span into an HTML markup string",
        "* This node represents a document fragment, which contains elements, but when\n * placed into the DOM doesn't have any representation itself. Thus, it only\n * contains children and doesn't have any HTML properties. It also keeps track\n * of a height, depth, and maxFontSize.",
        "* Convert the fragment into a node",
        "* Convert the fragment into HTML markup",
        "* A symbol node contains information about a single symbol. It either renders\n * to a single text node, or a span with a single text node in it, depending on\n * whether it has CSS classes, styles, or needs italic correction.",
        "* Creates a text node or span from a symbol node. Note that a span is only\n * created if it is needed.",
        "* Creates markup for a symbol node.",
        "* This file holds a list of all no-argument functions and single-character\n * symbols (like 'a' or ';').\n *\n * For each of the symbols, there are three properties they can have:\n * - font (required): the font to be used for this symbol. Either \"main\" (the\n     normal font), or \"ams\" (the ams fonts).\n * - group (required): the ParseNode group type the symbol should have (i.e.\n     \"textord\", \"mathord\", etc).\n     See https://github.com/Khan/KaTeX/wiki/Examining-TeX#group-types\n * - replace: the character that this symbol or function should be\n *   replaced with (i.e. \"\\phi\" has a replace value of \"\\u03d5\", the phi\n *   character in the main font).\n *\n * The outermost map in the table indicates what mode the symbols should be\n * accepted in (e.g. \"math\" or \"text\").",
        "* This module contains general functions that can be used for building\n * different kinds of domTree nodes in a consistent manner.",
        "* Makes a symbolNode after translation via the list of symbols in symbols.js.\n * Correctly pulls out metrics for the character, and optionally takes a list of\n * classes to be attached to the node.\n *\n * TODO: make argument order closer to makeSpan\n * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which\n * should if present come first in `classes`.",
        "* Makes a symbol in Main-Regular or AMS-Regular.\n * Used for rel, bin, open, close, inner, and punct.",
        "* Makes a symbol in the default font for mathords and textords.",
        "* Makes a symbol in the italic math font.",
        "* Makes either a mathord or textord in the correct font and color.",
        "* Calculate the height, depth, and maxFontSize of an element based on its\n * children.",
        "* Makes a span with the given list of classes, list of children, and options.\n *\n * TODO: Ensure that `options` is always provided (currently some call sites\n * don't pass it).\n * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which\n * should if present come first in `classes`.",
        "* Prepends the given children to the given span, updating height, depth, and\n * maxFontSize.",
        "* Makes a document fragment with the given list of children.",
        "* Makes an element placed in each of the vlist elements to ensure that each\n * element has the same max font size. To do this, we create a zero-width space\n * with the correct font size.",
        "* Makes a vertical list by stacking elements and kerns on top of each other.\n * Allows for many different ways of specifying the positioning method.\n *\n * Arguments:\n *  - children: A list of child or kern nodes to be stacked on top of each other\n *              (i.e. the first element will be at the bottom, and the last at\n *              the top). Element nodes are specified as\n *                {type: \"elem\", elem: node}\n *              while kern nodes are specified as\n *                {type: \"kern\", size: size}\n *  - positionType: The method by which the vlist should be positioned. Valid\n *                  values are:\n *                   - \"individualShift\": The children list only contains elem\n *                                        nodes, and each node contains an extra\n *                                        \"shift\" value of how much it should be\n *                                        shifted (note that shifting is always\n *                                        moving downwards). positionData is\n *                                        ignored.\n *                   - \"top\": The positionData specifies the topmost point of\n *                            the vlist (note this is expected to be a height,\n *                            so positive values move up)\n *                   - \"bottom\": The positionData specifies the bottommost point\n *                               of the vlist (note this is expected to be a\n *                               depth, so positive values move down\n *                   - \"shift\": The vlist will be positioned such that its\n *                              baseline is positionData away from the baseline\n *                              of the first child. Positive values move\n *                              downwards.\n *                   - \"firstBaseline\": The vlist will be positioned such that\n *                                      its baseline is aligned with the\n *                                      baseline of the first child.\n *                                      positionData is ignored. (this is\n *                                      equivalent to \"shift\" with\n *                                      positionData=0)\n *  - positionData: Data used in different ways depending on positionType\n *  - options: An Options object\n *",
        "* Maps TeX font commands to objects containing:\n * - variant: string used for \"mathvariant\" attribute in buildMathML.js\n * - fontName: the \"style\" parameter to fontMetrics.getCharacterMetrics",
        "* This file deals with creating delimiters of various sizes. The TeXbook\n * discusses these routines on page 441-442, in the \"Another subroutine sets box\n * x to a specified variable delimiter\" paragraph.\n *\n * There are three main routines here. `makeSmallDelim` makes a delimiter in the\n * normal font, but in either text, script, or scriptscript style.\n * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,\n * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of\n * smaller pieces that are stacked on top of one another.\n *\n * The functions take a parameter `center`, which determines if the delimiter\n * should be centered around the axis.\n *\n * Then, there are three exposed functions. `sizedDelim` makes a delimiter in\n * one of the given sizes. This is used for things like `\\bigl`.\n * `customSizedDelim` makes a delimiter with a given total height+depth. It is\n * called in places like `\\sqrt`. `leftRightDelim` makes an appropriate\n * delimiter which surrounds an expression of a given height an depth. It is\n * used in `\\left` and `\\right`.",
        "* Get the metrics for a given symbol and font, after transformation (i.e.\n * after following replacement from symbols.js)",
        "* Builds a symbol in the given font size (note size is an integer)",
        "* Puts a delimiter span in a given style, and adds appropriate height, depth,\n * and maxFontSizes.",
        "* Makes a small delimiter. This is a delimiter that comes in the Main-Regular\n * font, but is restyled to either be in textstyle, scriptstyle, or\n * scriptscriptstyle.",
        "* Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,\n * Size3, or Size4 fonts. It is always rendered in textstyle.",
        "* Make an inner span with the given offset and in the given font. This is used\n * in `makeStackedDelim` to make the stacking pieces for the delimiter.",
        "* Make a stacked delimiter out of a given delimiter, with the total height at\n * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.",
        "* Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.",
        "* There are three different sequences of delimiter sizes that the delimiters\n * follow depending on the kind of delimiter. This is used when creating custom\n * sized delimiters to decide whether to create a small, large, or stacked\n * delimiter.\n *\n * In real TeX, these sequences aren't explicitly defined, but are instead\n * defined inside the font metrics. Since there are only three sequences that\n * are possible for the delimiters that TeX defines, it is easier to just encode\n * them explicitly here.",
        "* Get the font used in a delimiter based on what kind of delimiter it is.",
        "* Traverse a sequence of types of delimiters to decide what kind of delimiter\n * should be used to create a delimiter of the given height+depth.",
        "* Make a delimiter of a given height+depth, with optional centering. Here, we\n * traverse the sequences, and create a delimiter that the sequence tells us to.",
        "* Make a delimiter for use with `\\left` and `\\right`, given a height and depth\n * of an expression that the delimiters surround.",
        "* This file does the main work of building a domTree structure from a parse\n * tree. The entry point is the `buildHTML` function, which takes a parse tree.\n * Then, the buildExpression, buildGroup, and various groupTypes functions are\n * called, to produce a final HTML tree.",
        "* Take a list of nodes, build them in order, and return a list of the built\n * nodes. documentFragments are flattened into their contents, so the\n * returned list contains no fragments. `isRealGroup` is true if `expression`\n * is a real group (no atoms will be added on either side), as opposed to\n * a partial group (e.g. one created by \\color).",
        "* Sometimes, groups perform special rules when they have superscripts or\n * subscripts attached to them. This function lets the `supsub` group know that\n * its inner element should handle the superscripts and subscripts instead of\n * handling them itself.",
        "* Sometimes we want to pull out the innermost element of a group. In most\n * cases, this will just be the group itself, but when ordgroups and colors have\n * a single element, we want to pull that out.",
        "* TeXbook algorithms often reference \"character boxes\", which are simply groups\n * with a single character in them. To decide if something is a character box,\n * we find its innermost group, and see if it is a single character.",
        "* This is a map of group types to the function used to handle that type.\n * Simpler types come at the beginning, while complicated types come afterwards.",
        "* buildGroup is the function that takes a group and calls the correct groupType\n * function for it. It also handles the interaction of size and style changes\n * between parents and children.",
        "* Take an entire parse tree, and build it into an appropriate set of HTML\n * nodes.",
        "* These objects store data about MathML nodes. This is the MathML equivalent\n * of the types in domTree.js. Since MathML handles its own rendering, and\n * since we're mainly using MathML to improve accessibility, we don't manage\n * any of the styling state that the plain DOM nodes do.\n *\n * The `toNode` and `toMarkup` functions work simlarly to how they do in\n * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.",
        "* This node represents a general purpose MathML node of any type. The\n * constructor requires the type of node to create (for example, `\"mo\"` or\n * `\"mspace\"`, corresponding to `<mo>` and `<mspace>` tags).",
        "* Sets an attribute on a MathML node. MathML depends on attributes to convey a\n * semantic content, so this is used heavily.",
        "* Converts the math node into a MathML-namespaced DOM element.",
        "* Converts the math node into an HTML markup string.",
        "* This node represents a piece of text.",
        "* Converts the text node into a DOM text node.",
        "* Converts the text node into HTML markup (which is just the text itself).",
        "* This file converts a parse tree into a cooresponding MathML tree. The main\n * entry point is the `buildMathML` function, which takes a parse tree from the\n * parser.",
        "* Takes a symbol and converts it into a MathML text node after performing\n * optional replacement from symbols.js.",
        "* Returns the math variant as a string or null if none is required.",
        "* Functions for handling the different types of groups found in the parse\n * tree. Each function should take a parse group and return a MathML node.",
        "* Takes a list of nodes, builds them, and returns a list of the generated\n * MathML nodes. A little simpler than the HTML version because we don't do any\n * previous-node handling.",
        "* Takes a group from the parser and calls the appropriate groupTypes function\n * on it to produce a MathML node.",
        "* Takes a full parse tree and settings and builds a MathML representation of\n * it. In particular, we put the elements from building the parse tree into a\n * <semantics> tag so we can also include that TeX source as an annotation.\n *\n * Note that we actually return a domTree element with a `<math>` inside it so\n * we can do appropriate styling.",
        "* This file contains information about the options that the Parser carries\n * around with it while parsing. Data is held in an `Options` object, and when\n * recursing, a new `Options` object can be created with the `.with*` and\n * `.reset` functions.",
        "* This is the main options class. It contains the style, size, color, and font\n * of the current parse level. It also contains the style and size of the parent\n * parse level, so size changes can be handled efficiently.\n *\n * Each of the `.with*` and `.reset` functions passes its current style and size\n * as the parentStyle and parentSize of the new options class, so parent\n * handling is taken care of automatically.",
        "* Returns a new options object with the same properties as \"this\".  Properties\n * from \"extension\" will be copied to the new options object.",
        "* Create a new options object with the given style.",
        "* Create a new options object with the given size.",
        "* Create a new options object with the given color.",
        "* Create a new options object with \"phantom\" set to true.",
        "* Create a new options objects with the give font.",
        "* Create a new options object with the same style, size, and color. This is\n * used so that parent style and size changes are handled correctly.",
        "* A map of color names to CSS colors.\n * TODO(emily): Remove this when we have real macros",
        "* Gets the CSS color of the current options object, accounting for the\n * `colorMap`.",
        "* The resulting parse tree nodes of the parse tree.\n *\n * It is possible to provide position information, so that a ParseNode can\n * fulfil a role similar to a Token in error reporting.\n * For details on the corresponding properties see Token constructor.\n * Providing such information can lead to better error reporting.\n *\n * @param {string}  type       type of node, like e.g. \"ordgroup\"\n * @param {?object} value      type-specific representation of the node\n * @param {string}  mode       parse mode in action for this node,\n *                             \"math\" or \"text\"\n * @param {Token=} firstToken  first token of the input for this node,\n *                             will omit position information if unset\n * @param {Token=} lastToken   last token of the input for this node,\n *                             will default to firstToken if unset",
        "* Parse the body of the environment, with rows delimited by \\\\ and\n * columns delimited by &, and create a nested list in row-major order\n * with one group per cell.",
        "* An environment definition is very similar to a function definition:\n * it is declared with a name or a list of names, a set of properties\n * and a handler containing the actual implementation.\n *\n * The properties include:\n *  - numArgs: The number of arguments after the \\begin{name} function.\n *  - argTypes: (optional) Just like for a function\n *  - allowedInText: (optional) Whether or not the environment is allowed inside\n *                   text mode (default false) (not enforced yet)\n *  - numOptionalArgs: (optional) Just like for a function\n * A bare number instead of that object indicates the numArgs value.\n *\n * The handler function will receive two arguments\n *  - context: information and references provided by the parser\n *  - args: an array of arguments passed to \\begin{name}\n * The context contains the following properties:\n *  - envName: the name of the environment, one of the listed names.\n *  - parser: the parser object\n *  - lexer: the lexer object\n *  - positions: the positions associated with these arguments from args.\n * The handler must return a ParseResult.",
        "* The Lexer class handles tokenizing the input in various ways. Since our\n * parser expects us to be able to backtrack, the lexer allows lexing from any\n * given starting point.\n *\n * Its main exposed function is the `lex` function, which takes a position to\n * lex from and a type of token to lex. It defers to the appropriate `_innerLex`\n * function.\n *\n * The various `_innerLex` functions perform the actual lexing of different\n * kinds.",
        "* The resulting token returned from `lex`.\n *\n * It consists of the token text plus some position information.\n * The position information is essentially a range in an input string,\n * but instead of referencing the bare input string, we refer to the lexer.\n * That way it is possible to attach extra metadata to the input string,\n * like for example a file name or similar.\n *\n * The position information (all three parameters) is optional,\n * so it is OK to construct synthetic tokens if appropriate.\n * Not providing available position information may lead to\n * degraded error reporting, though.\n *\n * @param {string}  text   the text of this token\n * @param {number=} start  the start offset, zero-based inclusive\n * @param {number=} end    the end offset, zero-based exclusive\n * @param {Lexer=}  lexer  the lexer which in turn holds the input string",
        "* Given a pair of tokens (this and endToken), compute a “Token” encompassing\n * the whole input range enclosed by these two.\n *\n * @param {Token}  endToken  last token of the range, inclusive\n * @param {string} text      the text of the newly constructed token",
        "* This function lexes a single token.",
        "* This file contains the “gullet” where macros are expanded\n * until only non-macro tokens remain.",
        "* Recursively expand first token, then return first non-expandable token.",
        "* Undo the effect of the preceding call to the get method.\n * A call to this method MUST be immediately preceded and immediately followed\n * by a call to get.  Only used during mode switching, i.e. after one token\n * was got in the old mode but should get got again in a new mode\n * with possibly different whitespace handling.",
        "* This file contains the parser used to parse out a TeX expression from the\n * input. Since TeX isn't context-free, standard parsers don't work particularly\n * well.\n *\n * The strategy of this parser is as such:\n *\n * The main functions (the `.parse...` ones) take a position in the current\n * parse string to parse tokens from. The lexer (found in Lexer.js, stored at\n * this.lexer) also supports pulling out tokens at arbitrary places. When\n * individual tokens are needed at a position, the lexer is called to pull out a\n * token, which is then used.\n *\n * The parser has a property called \"mode\" indicating the mode that\n * the parser is currently in. Currently it has to be one of \"math\" or\n * \"text\", which denotes whether the current environment is a math-y\n * one or a text-y one (e.g. inside \\text). Currently, this serves to\n * limit the functions which can be used in text mode.\n *\n * The main functions then return an object which contains the useful data that\n * was parsed at its given point, and a new position at the end of the parsed\n * data. The main functions can call each other and continue the parsing by\n * using the returned position as a new starting point.\n *\n * There are also extra `.handle...` functions, which pull out some reused\n * functionality into self-contained functions.\n *\n * The earlier functions return ParseNodes.\n * The later functions (which are called deeper in the parse) sometimes return\n * ParseFuncOrArgument, which contain a ParseNode as well as some data about\n * whether the parsed object is a function which is missing some arguments, or a\n * standalone object which can be used as an argument to another function.",
        "* Main Parser class",
        "* An initial function (without its arguments), or an argument to a function.\n * The `result` argument should be a ParseNode.",
        "* Checks a result to make sure it has the right type, and throws an\n * appropriate error otherwise.\n *\n * @param {boolean=} consume whether to consume the expected token,\n *                           defaults to true",
        "* Considers the current look ahead token as consumed,\n * and fetches the one after that as the new look ahead.",
        "* Main parsing function, which parses an entire input.\n *\n * @return {?Array.<ParseNode>}",
        "* Parses an entire input tree.",
        "* Parses an \"expression\", which is a list of atoms.\n *\n * @param {boolean} breakOnInfix  Should the parsing stop when we hit infix\n *                  nodes? This happens when functions have higher precendence\n *                  than infix nodes in implicit parses.\n *\n * @param {?string} breakOnTokenText  The text of the token that the expression\n *                  should end with, or `null` if something else should end the\n *                  expression.\n *\n * @return {ParseNode}",
        "* Rewrites infix operators such as \\over with corresponding commands such\n * as \\frac.\n *\n * There can only be one infix operator per group.  If there's more than one\n * then the expression is ambiguous.  This can be resolved by adding {}.\n *\n * @returns {Array}",
        "* Handle a subscript or superscript with nice errors.",
        "* Converts the textual input of an unsupported command into a text node\n * contained within a color node whose color is determined by errorColor",
        "* Parses a group with optional super/subscripts.\n *\n * @return {?ParseNode}",
        "* Parses an implicit group, which is a group that starts at the end of a\n * specified, and ends right before a higher explicit group ends, or at EOL. It\n * is used for functions that appear to affect the current style, like \\Large or\n * \\textrm, where instead of keeping a style we just pretend that there is an\n * implicit grouping after it until the end of the group. E.g.\n *   small text {\\Large large text} small text again\n * It is also used for \\left and \\right to get the correct grouping.\n *\n * @return {?ParseNode}",
        "* Parses an entire function, including its base and all of its arguments.\n * The base might either have been parsed already, in which case\n * it is provided as an argument, or it's the next group in the input.\n *\n * @param {ParseFuncOrArgument=} baseGroup optional as described above\n * @return {?ParseNode}",
        "* Call a function handler with a suitable context and arguments.",
        "* Parses the arguments of a function or environment\n *\n * @param {string} func  \"\\name\" or \"\\begin{name}\"\n * @param {{numArgs:number,numOptionalArgs:number|undefined}} funcData\n * @return the array of arguments, with the list of positions as last element",
        "* Parses a group when the mode is changing.\n *\n * @return {?ParseFuncOrArgument}",
        "* Parses a group, essentially returning the string formed by the\n * brace-enclosed tokens plus some position information.\n *\n * @param {string} modeName  Used to describe the mode in error messages\n * @param {boolean=} optional  Whether the group is optional or required",
        "* Parses a regex-delimited group: the largest sequence of tokens\n * whose concatenated strings match `regex`. Returns the string\n * formed by the tokens plus some position information.\n *\n * @param {RegExp} regex\n * @param {string} modeName  Used to describe the mode in error messages",
        "* Parses a color description.",
        "* Parses a size specification, consisting of magnitude and unit.",
        "* If the argument is false or absent, this parses an ordinary group,\n * which is either a single nucleus (like \"x\") or an expression\n * in braces (like \"{x+y}\").\n * If the argument is true, it parses either a bracket-delimited expression\n * (like \"[x+y]\") or returns null to indicate the absence of a\n * bracket-enclosed group.\n *\n * @param {boolean=} optional  Whether the group is optional or required\n * @return {?ParseFuncOrArgument}",
        "* Form ligature-like combinations of characters for text mode.\n * This includes inputs like \"--\", \"---\", \"``\" and \"''\".\n * The result will simply replace multiple textord nodes with a single\n * character in each value by a single textord node having multiple\n * characters in its value.  The representation is still ASCII source.\n *\n * @param {Array.<ParseNode>} group  the nodes of this group,\n *                                   list will be moified in place",
        "* Parse a single symbol out of the string. Here, we handle both the functions\n * we have defined, as well as the single character symbols\n *\n * @return {?ParseFuncOrArgument}",
        "* Provides a single function for parsing an expression using a Parser\n * TODO(emily): Remove this",
        "* Parses an expression using a Parser, then returns the parsed result.",
        "* This is the main entry point for KaTeX. Here, we expose functions for\n * rendering expressions either to DOM nodes or to markup strings.\n *\n * We also expose the ParseError class to check if errors thrown from KaTeX are\n * errors in the expression, or errors in javascript handling.",
        "* Parse and build an expression, and place that expression in the DOM node\n * given.",
        "* Parse and build an expression, and return the markup for that.",
        "* Parse an expression and return the parse tree.",
        "* NOTE: This method is not currently recommended for public use.\n     * The internal tree representation is unstable and is very likely\n     * to change. Use at your own risk.",
        "* marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked",
        "* Block-Level Grammar",
        "* Normal Block Grammar",
        "* GFM Block Grammar",
        "* GFM + Tables Block Grammar",
        "* Block Lexer",
        "* Expose Block Rules",
        "* Static Lex Method",
        "* Preprocessing",
        "* Lexing",
        "* Inline-Level Grammar",
        "* Normal Inline Grammar",
        "* Pedantic Inline Grammar",
        "* GFM Inline Grammar",
        "* GFM + Line Breaks Inline Grammar",
        "* Inline Lexer & Compiler",
        "* Expose Inline Rules",
        "* Static Lexing/Compiling Method",
        "* Lexing/Compiling",
        "* Compile Link",
        "* Smartypants Transformations",
        "* Mangle Links",
        "* Renderer",
        "* Parsing & Compiling",
        "* Static Parse Method",
        "* Parse Loop",
        "* Next Token",
        "* Preview Next Token",
        "* Parse Text Tokens",
        "* Parse Current Token",
        "* Helpers",
        "* Marked",
        "* Options",
        "* Expose",
        "**********************************************\n     Begin prism-core.js\n**********************************************",
        "* Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me",
        "* Insert a token before another token in a language literal\n\t\t * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n\t\t * we cannot just provide an object, we need anobject and a key.\n\t\t * @param inside The key (or language id) of the parent\n\t\t * @param before The key to insert before. If not provided, the function appends instead.\n\t\t * @param insert Object with the key/value pairs to insert\n\t\t * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.",
        "* If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\t * If strarr[k - 1] is greedy we are in conflict with another greedy pattern",
        "**********************************************\n     Begin prism-markup.js\n**********************************************",
        "**********************************************\n     Begin prism-css.js\n**********************************************",
        "**********************************************\n     Begin prism-clike.js\n**********************************************",
        "**********************************************\n     Begin prism-javascript.js\n**********************************************",
        "**********************************************\n     Begin prism-file-highlight.js\n**********************************************",
        "***",
        "* * *",
        "* item",
        "**strong**",
        "*em*"
    ],
    "functions": [
        "isNothing",
        "isObject",
        "toArray",
        "extend",
        "repeat",
        "isNegativeZero",
        "YAMLException$2",
        "Mark$1",
        "compileStyleAliases",
        "Type$2",
        "compileList",
        "compileMap",
        "collectType",
        "Schema$2",
        "resolveYamlNull",
        "constructYamlNull",
        "isNull",
        "resolveYamlBoolean",
        "constructYamlBoolean",
        "isBoolean",
        "isHexCode",
        "isOctCode",
        "isDecCode",
        "resolveYamlInteger",
        "constructYamlInteger",
        "isInteger",
        "resolveYamlFloat",
        "constructYamlFloat",
        "representYamlFloat",
        "isFloat",
        "resolveYamlTimestamp",
        "constructYamlTimestamp",
        "representYamlTimestamp",
        "resolveYamlMerge",
        "commonjsRequire",
        "createCommonjsModule",
        "resolveYamlBinary",
        "constructYamlBinary",
        "representYamlBinary",
        "isBinary",
        "resolveYamlOmap",
        "constructYamlOmap",
        "resolveYamlPairs",
        "constructYamlPairs",
        "resolveYamlSet",
        "constructYamlSet",
        "resolveJavascriptUndefined",
        "constructJavascriptUndefined",
        "representJavascriptUndefined",
        "isUndefined",
        "resolveJavascriptRegExp",
        "constructJavascriptRegExp",
        "representJavascriptRegExp",
        "isRegExp",
        "resolveJavascriptFunction",
        "constructJavascriptFunction",
        "representJavascriptFunction",
        "isFunction",
        "is_EOL",
        "is_WHITE_SPACE",
        "is_WS_OR_EOL",
        "is_FLOW_INDICATOR",
        "fromHexCode",
        "escapedHexLen",
        "fromDecimalCode",
        "simpleEscapeSequence",
        "charFromCodepoint",
        "State",
        "generateError",
        "throwError",
        "throwWarning",
        "captureSegment",
        "mergeMappings",
        "storeMappingPair",
        "readLineBreak",
        "skipSeparationSpace",
        "testDocumentSeparator",
        "writeFoldedLines",
        "readPlainScalar",
        "readSingleQuotedScalar",
        "readDoubleQuotedScalar",
        "readFlowCollection",
        "readBlockScalar",
        "readBlockSequence",
        "readBlockMapping",
        "readTagProperty",
        "readAnchorProperty",
        "readAlias",
        "composeNode",
        "readDocument",
        "loadDocuments",
        "loadAll$1",
        "load$1",
        "safeLoadAll$1",
        "safeLoad$1",
        "compileStyleMap",
        "encodeHex",
        "State$1",
        "indentString",
        "generateNextLine",
        "testImplicitResolving",
        "isWhitespace",
        "isPrintable",
        "isPlainSafe",
        "isPlainSafeFirst",
        "chooseScalarStyle",
        "writeScalar",
        "testAmbiguity",
        "blockHeader",
        "dropEndingNewline",
        "foldString",
        "foldLine",
        "escapeString",
        "writeFlowSequence",
        "writeBlockSequence",
        "writeFlowMapping",
        "writeBlockMapping",
        "detectType",
        "writeNode",
        "getDuplicateReferences",
        "inspectNode",
        "dump$1",
        "safeDump$1",
        "deprecated",
        "BibtexParser",
        "newInterval",
        "interval",
        "weekday",
        "utcWeekday",
        "localDate",
        "utcDate",
        "newYear",
        "formatLocale",
        "newFormat",
        "newParse",
        "parseSpecifier",
        "parsePeriod",
        "parseShortWeekday",
        "parseWeekday",
        "parseShortMonth",
        "parseMonth",
        "parseLocaleDateTime",
        "parseLocaleDate",
        "parseLocaleTime",
        "formatShortWeekday",
        "formatWeekday",
        "formatShortMonth",
        "formatMonth",
        "formatPeriod",
        "formatUTCShortWeekday",
        "formatUTCWeekday",
        "formatUTCShortMonth",
        "formatUTCMonth",
        "formatUTCPeriod",
        "pad",
        "requote",
        "formatRe",
        "formatLookup",
        "parseWeekdayNumber",
        "parseWeekNumberSunday",
        "parseWeekNumberMonday",
        "parseFullYear",
        "parseYear",
        "parseZone",
        "parseMonthNumber",
        "parseDayOfMonth",
        "parseDayOfYear",
        "parseHour24",
        "parseMinutes",
        "parseSeconds",
        "parseMilliseconds",
        "parseLiteralPercent",
        "formatDayOfMonth",
        "formatHour24",
        "formatHour12",
        "formatDayOfYear",
        "formatMilliseconds",
        "formatMonthNumber",
        "formatMinutes",
        "formatSeconds",
        "formatWeekNumberSunday",
        "formatWeekdayNumber",
        "formatWeekNumberMonday",
        "formatYear",
        "formatFullYear",
        "formatZone",
        "formatUTCDayOfMonth",
        "formatUTCHour24",
        "formatUTCHour12",
        "formatUTCDayOfYear",
        "formatUTCMilliseconds",
        "formatUTCMonthNumber",
        "formatUTCMinutes",
        "formatUTCSeconds",
        "formatUTCWeekNumberSunday",
        "formatUTCWeekdayNumber",
        "formatUTCWeekNumberMonday",
        "formatUTCYear",
        "formatUTCFullYear",
        "formatUTCZone",
        "formatLiteralPercent",
        "defaultLocale",
        "formatIsoNative",
        "parseIsoNative",
        "escapeHtml",
        "meta",
        "appendHtml",
        "citation_meta_content",
        "isFunction",
        "typeStr",
        "escapeRegExp",
        "hasProperty",
        "testRegExp",
        "isWhitespace",
        "escapeHtml",
        "parseTemplate",
        "stripSpace",
        "compileTags",
        "squashTokens",
        "nestTokens",
        "Scanner",
        "Context",
        "Writer",
        "subRender",
        "nodeFromString",
        "inline_cite_short",
        "cite_string",
        "inline_cite_long",
        "cite_string",
        "author_string",
        "venue_string",
        "link_string",
        "doi_string",
        "bibliography_cite",
        "hover_cite",
        "get_GS_URL",
        "nodeFromString",
        "ParseError$1",
        "get",
        "Settings$1",
        "Style$2",
        "escaper",
        "escape$1",
        "clearNode",
        "span",
        "documentFragment",
        "symbolNode",
        "defineSymbol",
        "MathNode",
        "TextNode",
        "Options$1",
        "ParseNode$1",
        "defineFunction",
        "parseArray",
        "defineEnvironment",
        "getRelocatable",
        "matchAt$1",
        "Lexer$1",
        "Token",
        "MacroExpander$1",
        "Parser$1",
        "ParseFuncOrArgument",
        "Lexer",
        "InlineLexer",
        "Renderer",
        "Parser",
        "escape",
        "unescape",
        "replace",
        "noop",
        "merge",
        "marked",
        "acceptNode",
        "punctuation",
        "quotes",
        "citation_xml",
        "xml",
        "renderImmediately",
        "renderOnLoad",
        "render$1",
        "distillify"
    ],
    "classes": []
}