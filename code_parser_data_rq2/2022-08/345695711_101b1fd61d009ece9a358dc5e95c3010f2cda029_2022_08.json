{
    "identifiers": [
        "re",
        "collections",
        "OrderedDict",
        "typing",
        "Dict",
        "Optional",
        "uuid",
        "format",
        "uuid",
        "message",
        "model",
        "model_uuid",
        "application",
        "unit",
        "charm_name",
        "is_valid_uuid",
        "model_uuid",
        "InvalidUUIDError",
        "model_uuid",
        "model",
        "model_uuid",
        "application",
        "charm_name",
        "unit",
        "uuid",
        "re",
        "compile",
        "regex",
        "match",
        "uuid",
        "classmethod",
        "cls",
        "charm",
        "cls",
        "model",
        "charm",
        "model",
        "name",
        "model_uuid",
        "charm",
        "model",
        "uuid",
        "application",
        "charm",
        "model",
        "app",
        "name",
        "unit",
        "charm",
        "model",
        "unit",
        "name",
        "charm_name",
        "charm",
        "meta",
        "name",
        "classmethod",
        "cls",
        "data",
        "cls",
        "model",
        "data",
        "model_uuid",
        "data",
        "application",
        "data",
        "unit",
        "data",
        "get",
        "charm_name",
        "data",
        "get",
        "remapped_keys",
        "Dict",
        "excluded_keys",
        "OrderedDict",
        "OrderedDict",
        "model",
        "model_uuid",
        "application",
        "unit",
        "charm_name",
        "excluded_keys",
        "OrderedDict",
        "k",
        "v",
        "k",
        "v",
        "ret",
        "items",
        "k",
        "excluded_keys",
        "remapped_keys",
        "OrderedDict",
        "remapped_keys",
        "get",
        "k",
        "v",
        "remapped_keys",
        "get",
        "k",
        "k",
        "v",
        "k",
        "v",
        "ret",
        "items",
        "ret",
        "property",
        "as_dict",
        "excluded_keys",
        "model_uuid_short",
        "parts",
        "values",
        "join",
        "val",
        "val",
        "values",
        "replace",
        "property",
        "Dict",
        "as_dict",
        "remapped_keys",
        "excluded_keys",
        "items",
        "format",
        "key",
        "value",
        "key",
        "value",
        "items",
        "value",
        "property",
        "label_matcher_dict",
        "items",
        "join",
        "format",
        "key",
        "value",
        "key",
        "value",
        "items",
        "value",
        "property",
        "_model",
        "property",
        "_model_uuid",
        "property",
        "_model_uuid",
        "property",
        "_application",
        "property",
        "Optional",
        "_charm_name",
        "property",
        "Optional",
        "_unit"
    ],
    "literals": [
        "\"bced1658f20f49d28b88f61f83c2d232\"",
        "\"'{}' is not a valid UUID.\"",
        "\"^[a-f0-9]{8}-?[a-f0-9]{4}-?[a-f0-9]{4}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}$\"",
        "\"model\"",
        "\"model_uuid\"",
        "\"application\"",
        "\"unit\"",
        "\"\"",
        "\"charm_name\"",
        "\"\"",
        "\"model\"",
        "\"model_uuid\"",
        "\"application\"",
        "\"unit\"",
        "\"charm_name\"",
        "\"unit\"",
        "\"charm_name\"",
        "\"model_uuid\"",
        "\"_\"",
        "\"/\"",
        "\"_\"",
        "\"charm_name\"",
        "\"charm\"",
        "\"unit\"",
        "\"juju_{}\"",
        "\", \"",
        "'{}=\"{}\"'"
    ],
    "variables": [
        "LIBID",
        "LIBAPI",
        "LIBPATCH",
        "message",
        "_model",
        "_model_uuid",
        "_application",
        "_charm_name",
        "_unit",
        "regex",
        "ret",
        "ret",
        "ret",
        "parts",
        "parts",
        "values",
        "items",
        "items"
    ],
    "comments": [
        "Copyright 2022 Canonical Ltd.",
        "See LICENSE file for licensing details.",
        "The unique Charmhub library identifier, never change it",
        "TODO:",
        "Harness is harcoding an UUID that is v1 not v4: f2c1b2a6-e006-11eb-ba80-0242ac130004",
        "See: https://github.com/canonical/operator/issues/779",
        "",
        ">>> uuid.UUID(\"f2c1b2a6-e006-11eb-ba80-0242ac130004\").version",
        "1",
        "",
        "we changed the validation of the 3ed UUID block: 4[a-f0-9]{3} -> [a-f0-9]{4}",
        "See: https://github.com/canonical/operator/blob/main/ops/testing.py#L1094",
        "",
        "Juju in fact generates a UUID v4: https://github.com/juju/utils/blob/master/uuid.go#L62",
        "but does not validate it is actually v4:",
        "See:",
        "- https://github.com/juju/utils/blob/master/uuid.go#L22",
        "- https://github.com/juju/schema/blob/master/strings.go#L79",
        "",
        "Once Harness fixes this, we should remove this comment and refactor the regex or",
        "the entire method using the uuid module to validate UUIDs",
        "type: ignore"
    ],
    "docstrings": [
        "\"\"\"## Overview.\n\nThis document explains how to use the `JujuTopology` class to\ncreate and consume topology information from Juju in a consistent manner.\n\nThe goal of the Juju topology is to uniquely identify a piece\nof software running across any of your Juju-managed deployments.\nThis is achieved by combining the following four elements:\n\n- Model name\n- Model UUID\n- Application name\n- Unit identifier\n\n\nFor a more in-depth description of the concept, as well as a\nwalk-through of it's use-case in observability, see\n[this blog post](https://juju.is/blog/model-driven-observability-part-2-juju-topology-metrics)\non the Juju blog.\n\n## Library Usage\n\nThis library may be used to create and consume `JujuTopology` objects.\nThe `JujuTopology` class provides three ways to create instances:\n\n### Using the `from_charm` method\n\nEnables instantiation by supplying the charm as an argument. When\ncreating topology objects for the current charm, this is the recommended\napproach.\n\n```python\ntopology = JujuTopology.from_charm(self)\n```\n\n### Using the `from_dict` method\n\nAllows for instantion using a dictionary of relation data, like the\n`scrape_metadata` from Prometheus or the labels of an alert rule. When\ncreating topology objects for remote charms, this is the recommended\napproach.\n\n```python\nscrape_metadata = json.loads(relation.data[relation.app].get(\"scrape_metadata\", \"{}\"))\ntopology = JujuTopology.from_dict(scrape_metadata)\n```\n\n### Using the class constructor\n\nEnables instantiation using whatever values you want. While this\nis useful in some very specific cases, this is almost certainly not\nwhat you are looking for as setting these values manually may\nresult in observability metrics which do not uniquely identify a\ncharm in order to provide accurate usage reporting, alerting,\nhorizontal scaling, or other use cases.\n\n```python\ntopology = JujuTopology(\n    model=\"some-juju-model\",\n    model_uuid=\"00000000-0000-0000-0000-000000000001\",\n    application=\"fancy-juju-application\",\n    unit=\"fancy-juju-application/0\",\n    charm_name=\"fancy-juju-application-k8s\",\n)\n```\n\n\"\"\"",
        "\"\"\"Invalid UUID was provided.\"\"\"",
        "\"\"\"JujuTopology is used for storing, generating and formatting juju topology information.\"\"\"",
        "\"\"\"Build a JujuTopology object.\n\n        A `JujuTopology` object is used for storing and transforming\n        Juju topology information. This information is used to\n        annotate Prometheus scrape jobs and alert rules. Such\n        annotation when applied to scrape jobs helps in identifying\n        the source of the scrapped metrics. On the other hand when\n        applied to alert rules topology information ensures that\n        evaluation of alert expressions is restricted to the source\n        (charm) from which the alert rules were obtained.\n\n        Args:\n            model: a string name of the Juju model\n            model_uuid: a globally unique string identifier for the Juju model\n            application: an application name as a string\n            unit: a unit name as a string\n            charm_name: name of charm as a string\n        \"\"\"",
        "\"\"\"Validate the supplied UUID against the Juju Model UUID pattern.\"\"\"",
        "\"\"\"Creates a JujuTopology instance by using the model data available on a charm object.\n\n        Args:\n            charm: a `CharmBase` object for which the `JujuTopology` will be constructed\n        Returns:\n            a `JujuTopology` object.\n        \"\"\"",
        "\"\"\"Factory method for creating `JujuTopology` children from a dictionary.\n\n        Args:\n            data: a dictionary with five keys providing topology information. The keys are\n                - \"model\"\n                - \"model_uuid\"\n                - \"application\"\n                - \"unit\"\n                - \"charm_name\"\n                `unit` and `charm_name` may be empty, but will result in more limited\n                labels. However, this allows us to support charms without workloads.\n\n        Returns:\n            a `JujuTopology` object.\n        \"\"\"",
        "\"\"\"Format the topology information into an ordered dict.\n\n        Keeping the dictionary ordered is important to be able to\n        compare dicts without having to resort to deep comparisons.\n\n        Args:\n            remapped_keys: A dictionary mapping old key names to new key names,\n                which will be substituted when invoked.\n            excluded_keys: A list of key names to exclude from the returned dict.\n            uuid_length: The length to crop the UUID to.\n        \"\"\"",
        "\"\"\"Format the topology information into a terse string.\n\n        This crops the model UUID, making it unsuitable for comparisons against\n        anything but other identifiers. Mainly to be used as a display name or file\n        name where long strings might become an issue.\n\n        >>> JujuTopology( \\\n              model = \"a-model\", \\\n              model_uuid = \"00000000-0000-4000-8000-000000000000\", \\\n              application = \"some-app\", \\\n              unit = \"some-app/1\" \\\n            ).identifier\n        'a-model_00000000_some-app'\n        \"\"\"",
        "\"\"\"Format the topology information into a dict with keys having 'juju_' as prefix.\n\n        Relabelled topology never includes the unit as it would then only match\n        the leader unit (ie. the unit that produced the dict).\n        \"\"\"",
        "\"\"\"Format the topology information into a promql/logql label matcher string.\n\n        Topology label matchers should never include the unit as it\n        would then only match the leader unit (ie. the unit that\n        produced the matchers).\n        \"\"\"",
        "\"\"\"Getter for the juju model value.\"\"\"",
        "\"\"\"Getter for the juju model uuid value.\"\"\"",
        "\"\"\"Getter for the juju model value, truncated to the first eight letters.\"\"\"",
        "\"\"\"Getter for the juju application value.\"\"\"",
        "\"\"\"Getter for the juju charm name value.\"\"\"",
        "\"\"\"Getter for the juju unit value.\"\"\""
    ],
    "functions": [
        "is_valid_uuid",
        "from_charm",
        "from_dict",
        "as_dict",
        "identifier",
        "label_matcher_dict",
        "label_matchers",
        "model",
        "model_uuid",
        "model_uuid_short",
        "application",
        "charm_name",
        "unit"
    ],
    "classes": [
        "InvalidUUIDError",
        "JujuTopology"
    ]
}