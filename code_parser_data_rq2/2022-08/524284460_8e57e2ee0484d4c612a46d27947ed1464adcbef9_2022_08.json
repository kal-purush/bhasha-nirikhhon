{
    "identifiers": [
        "numpy",
        "np",
        "pandas",
        "pd",
        "torch",
        "torch",
        "nn",
        "sklearn",
        "metrics",
        "torch",
        "utils",
        "data",
        "DataLoader",
        "tqdm",
        "tqdm",
        "sklearn",
        "model_selection",
        "KFold",
        "visdom",
        "Visdom",
        "Visdom",
        "viz",
        "line",
        "win",
        "opts",
        "title",
        "legend",
        "viz",
        "line",
        "win",
        "opts",
        "title",
        "legend",
        "pred",
        "label",
        "metrics",
        "mean_absolute_error",
        "label",
        "pred",
        "metrics",
        "mean_squared_error",
        "label",
        "pred",
        "rmse",
        "mae",
        "train_record",
        "n_splits",
        "train_record",
        "index",
        "KFold",
        "n_splits",
        "n_splits",
        "shuffle",
        "stu",
        "stu_list",
        "train_record",
        "loc",
        "stu",
        "values",
        "train_record",
        "loc",
        "stu",
        "values",
        "len",
        "stu_cour",
        "n_splits",
        "train_idx",
        "label_idx",
        "KF",
        "split",
        "stu_cour",
        "train",
        "append",
        "stu",
        "train",
        "append",
        "stu_cour",
        "train_idx",
        "train",
        "append",
        "stu_activity",
        "train_idx",
        "label",
        "extend",
        "count",
        "len",
        "label_idx",
        "label",
        "extend",
        "stu_cour",
        "label_idx",
        "label",
        "extend",
        "stu_activity",
        "label_idx",
        "count",
        "train",
        "label",
        "train_record",
        "test_record",
        "train_record",
        "index",
        "stu",
        "stu_list",
        "train_record",
        "loc",
        "stu",
        "values",
        "train_record",
        "loc",
        "stu",
        "values",
        "test_record",
        "loc",
        "stu",
        "values",
        "test_record",
        "loc",
        "stu",
        "values",
        "train",
        "append",
        "stu",
        "train",
        "append",
        "stu_cour",
        "train",
        "append",
        "stu_activity",
        "test",
        "extend",
        "count",
        "len",
        "test_cour",
        "test",
        "extend",
        "test_cour",
        "test",
        "extend",
        "test_activity",
        "count",
        "train",
        "test",
        "x",
        "torch",
        "sigmoid",
        "x",
        "nn",
        "Module",
        "csa",
        "P",
        "D",
        "train_stu_num",
        "train_cour_num",
        "behavior_num",
        "device",
        "NewNet",
        "P",
        "to",
        "device",
        "D",
        "to",
        "device",
        "csa",
        "behavior_num",
        "device",
        "torch",
        "empty",
        "behavior_num",
        "to",
        "device",
        "torch",
        "ones",
        "train_cour_num",
        "to",
        "device",
        "torch",
        "ones",
        "train_cour_num",
        "to",
        "device",
        "nn",
        "Parameter",
        "guess",
        "nn",
        "Parameter",
        "slide",
        "nn",
        "Parameter",
        "torch",
        "ones_like",
        "P",
        "device",
        "device",
        "nn",
        "Parameter",
        "torch",
        "zeros_like",
        "P",
        "device",
        "device",
        "nn",
        "Parameter",
        "torch",
        "rand",
        "behavior_num",
        "behavior_num",
        "device",
        "device",
        "nn",
        "Parameter",
        "torch",
        "ones_like",
        "D",
        "device",
        "device",
        "nn",
        "Parameter",
        "torch",
        "zeros_like",
        "D",
        "device",
        "device",
        "stu_list",
        "cour_list",
        "acti_list",
        "save_a",
        "torch",
        "mul",
        "P",
        "P_A",
        "P_B",
        "torch",
        "mul",
        "D",
        "D_A",
        "D_B",
        "torch",
        "softmax",
        "P",
        "dim",
        "torch",
        "softmax",
        "D",
        "dim",
        "P",
        "T",
        "D",
        "P_C",
        "torch",
        "empty",
        "len",
        "acti_list",
        "behavior_num",
        "to",
        "device",
        "i",
        "X_i",
        "acti_list",
        "torch",
        "tensor",
        "X_i",
        "to",
        "device",
        "reshape",
        "torch",
        "softmax",
        "csa",
        "stu_list",
        "i",
        "cour_list",
        "i",
        "to",
        "device",
        "dim",
        "X_i",
        "csa_i",
        "save_a",
        "torch",
        "cat",
        "A",
        "A",
        "dim",
        "A",
        "shape",
        "A",
        "Q",
        "T",
        "sigmoid",
        "slide_",
        "sigmoid",
        "guess_",
        "slide",
        "Y_",
        "guess",
        "Y_",
        "Y",
        "torch",
        "mul",
        "P",
        "P_A",
        "P_B",
        "torch",
        "mul",
        "D",
        "D_A",
        "D_B",
        "torch",
        "softmax",
        "P",
        "dim",
        "torch",
        "softmax",
        "D",
        "dim",
        "P",
        "T",
        "D",
        "P_C",
        "torch",
        "sum",
        "Q",
        "dim",
        "torch",
        "save",
        "Q",
        "q_sum",
        "Q",
        "torch",
        "save",
        "A",
        "torch",
        "sum",
        "A",
        "dim",
        "A_sum",
        "A_sum",
        "csa",
        "P",
        "D",
        "train_stu_num",
        "train_cour_num",
        "behavior_num",
        "lr",
        "device",
        "NewNet",
        "csa",
        "csa",
        "P",
        "P",
        "D",
        "D",
        "train_stu_num",
        "train_stu_num",
        "train_cour_num",
        "train_cour_num",
        "behavior_num",
        "behavior_num",
        "device",
        "device",
        "csa",
        "device",
        "net",
        "torch",
        "optim",
        "Adam",
        "net",
        "parameters",
        "lr",
        "lr",
        "torch",
        "nn",
        "MSELoss",
        "pd",
        "DataFrame",
        "index_loader",
        "train_data",
        "test_data",
        "epochs",
        "save_dir",
        "save_size",
        "epoch",
        "epochs",
        "batch_data",
        "tqdm",
        "index_loader",
        "epoch",
        "np",
        "array",
        "x",
        "numpy",
        "x",
        "batch_data",
        "dtype",
        "reshape",
        "format_data",
        "train_data",
        "loc",
        "stu_list",
        "net",
        "train_pred",
        "train_pred",
        "train_pred",
        "save_a",
        "all_pred",
        "label_data",
        "label_data",
        "torch",
        "DoubleTensor",
        "label_data",
        "to",
        "device",
        "loss_function",
        "pred",
        "label",
        "loss_list",
        "append",
        "loss",
        "item",
        "pred_list",
        "extend",
        "pred",
        "clone",
        "to",
        "detach",
        "tolist",
        "label_list",
        "extend",
        "label_data",
        "optimizer",
        "zero_grad",
        "loss",
        "backward",
        "optimizer",
        "step",
        "np",
        "nanmean",
        "loss_list",
        "evaluate",
        "pred_list",
        "label_list",
        "epoch_loss",
        "rmse",
        "mae",
        "save_size",
        "test",
        "index_loader",
        "train_data",
        "test_data",
        "save_dir",
        "save_dir",
        "save_size",
        "save_size",
        "is_final_epoch",
        "epoch",
        "epochs",
        "viz",
        "line",
        "epoch_loss",
        "test_loss",
        "epoch",
        "win",
        "update",
        "viz",
        "line",
        "rmse",
        "test_rmse",
        "mae",
        "test_mae",
        "epoch",
        "win",
        "update",
        "index_loader",
        "train_data",
        "test_data",
        "save_dir",
        "save_size",
        "is_final_epoch",
        "save_size",
        "torch",
        "empty",
        "save_size",
        "dtype",
        "torch",
        "to",
        "batch_data",
        "tqdm",
        "index_loader",
        "np",
        "array",
        "x",
        "numpy",
        "x",
        "batch_data",
        "dtype",
        "reshape",
        "format_test_data",
        "train_data",
        "loc",
        "stu_list",
        "test_data",
        "loc",
        "stu_list",
        "torch",
        "no_grad",
        "net",
        "train",
        "train",
        "train",
        "save_a",
        "is_final_epoch",
        "all_pred",
        "test",
        "test",
        "clone",
        "to",
        "detach",
        "torch",
        "DoubleTensor",
        "test",
        "loss_function",
        "test_pred",
        "test_label",
        "test_pred_list",
        "extend",
        "test_pred",
        "tolist",
        "test_label_list",
        "extend",
        "test",
        "test_loss_list",
        "append",
        "test_loss",
        "item",
        "np",
        "mean",
        "test_loss_list",
        "save_size",
        "torch",
        "LongTensor",
        "train",
        "all_pred",
        "cpu",
        "detach",
        "evaluate",
        "test_pred_list",
        "test_label_list",
        "epoch_test_loss",
        "rmse",
        "mae",
        "save_size",
        "np",
        "savetxt",
        "save_dir",
        "all_pred_score",
        "numpy",
        "fmt",
        "delimiter",
        "rmse",
        "mae",
        "epoch_test_loss",
        "save_dir",
        "torch",
        "save",
        "net",
        "state_dict",
        "path",
        "torch",
        "load",
        "path",
        "net",
        "load_state_dict",
        "checkpoint"
    ],
    "literals": [
        "'xuetangx loss'",
        "'loss'",
        "'train_loss'",
        "'test_loss'",
        "'xuetangx rmse&mae'",
        "'rmse&mae'",
        "'train_rmse'",
        "'valid_rmse'",
        "'train_mae'",
        "'valid_mae'",
        "'course_id'",
        "'complete'",
        "'course_id'",
        "'complete'",
        "'course_id'",
        "'complete'",
        "'Q_weight_MSE.pt'",
        "\"saved Q\"",
        "\"q sum:\"",
        "'A_weight_MSE.pt'",
        "\"a saved\"",
        "'cpu'",
        "\"[Epoch:%s]\"",
        "'int'",
        "'cpu'",
        "f'epoch_loss {epoch_loss}  rmse {rmse} mae {mae}'",
        "'xuetangx loss'",
        "'append'",
        "'xuetangx rmse&mae'",
        "'append'",
        "'cpu'",
        "\"[Testing:]\"",
        "'int'",
        "'cpu'",
        "\"\\t test_result: loss %.6f rmse:%.6f, mae:%.6f\"",
        "'pred_score.csv'",
        "'%.6f'",
        "','",
        "'./model_save/NewNet_weight.pth'",
        "\"model saved\""
    ],
    "variables": [
        "viz",
        "mae",
        "rmse",
        "train",
        "label",
        "stu_list",
        "KF",
        "count",
        "stu_cour",
        "stu_activity",
        "train",
        "test",
        "stu_list",
        "count",
        "stu_cour",
        "stu_activity",
        "test_cour",
        "test_activity",
        "P",
        "D",
        "csa",
        "behavior_num",
        "device",
        "A",
        "guess",
        "slide",
        "guess_",
        "slide_",
        "P_A",
        "P_B",
        "P_C",
        "D_A",
        "D_B",
        "P",
        "D",
        "P",
        "D",
        "Q",
        "A",
        "X_i",
        "csa_i",
        "A",
        "i",
        "A",
        "Y_",
        "slide",
        "guess",
        "Y",
        "P",
        "D",
        "P",
        "D",
        "Q",
        "q_sum",
        "A_sum",
        "net",
        "csa",
        "device",
        "net",
        "optimizer",
        "loss_function",
        "all_pred",
        "loss_list",
        "label_list",
        "pred_list",
        "stu_list",
        "train_pred",
        "label_data",
        "all_pred",
        "pred",
        "label",
        "loss",
        "epoch_loss",
        "rmse",
        "mae",
        "test_rmse",
        "test_mae",
        "test_loss",
        "test_loss_list",
        "test_pred_list",
        "test_label_list",
        "all_pred_score",
        "stu_list",
        "train",
        "test",
        "all_pred",
        "test_pred",
        "test_label",
        "test_loss",
        "epoch_test_loss",
        "all_pred_score",
        "rmse",
        "mae",
        "checkpoint"
    ],
    "comments": [
        "# visdom画图",
        "mae，平均绝对误差指的就是模型预测值 f(x) 与样本真实值 y 之间距离的平均值",
        "rmse，均方误差回归损失，为什么✖0.5？",
        "训练集",
        "train_record对应train_data",
        "学生id，对应课程id, 对应的分数",
        "学生, 课程id，活跃度  (用来计算loss)",
        "set具有去重的功能,stu_list是一个以学生列为索引的dataframe表格",
        "print(f'sss {train_record.index}')",
        "3折交叉验证",
        "k折交叉验证后会出现很多条数据",
        "遍历每一个学生",
        "print(f' stu {stu} stu_cour{len(stu_cour)}')",
        "print(train_record.info)",
        "将训练数据划分为训练+标签",
        "存储学生id",
        "该学生对应的课程id",
        "课程id对应的该学生的分数",
        "count是每一行都代表一个数据,代表的是第几条数据，0代表某一行，1代表某一列，",
        "这里的label[2]是真值，取出预测数据的真值",
        "行索引",
        "列索引",
        "值",
        "测试集",
        "学生ID,课程，活跃度",
        "学生ID,课程，活跃度",
        "test_label = [[],[],[]] # 学生，课程，活跃度",
        "读取测试集的真值",
        "sigmoid是激活函数的一种，它会将样本值映射到0到1之间。",
        "模型初始化",
        "def __init__(self, csa, ca, train_cour_num, behavior_num, device):",
        "self.P = P",
        "self.ca = ca.double().to(device)  # [cid, action]",
        "[uid, cid, score]",
        "对每一个课程都有一个猜测率、失误率",
        "------------------------------------------",
        "self.D_C = nn.Parameter(torch.rand(train_stu_num, train_stu_num, device=self.device).double())",
        "self.P_A = nn.Parameter(torch.rand(train_stu_num, 1, device=self.device).double())",
        "self.D_A = nn.Parameter(torch.rand(train_stu_num, 1, device=self.device).double())",
        "前向传播,传入活跃度列表和课程索引列表",
        "i 学生序号，X_i代表该学生所选课程的活跃度值",
        "将X_i转成tensor",
        "一行数据 [1, 课程数] 总计有8*折数行的数据",
        "取出一个学生的数据 即1行 [1, 课程数, 19]",
        "[1, 课程数] 和 csa_i的转置[19, 课程数] 矩阵相乘 一行为[1, 19] A为 [8*折数, 19]",
        "激活",
        "# 最后的预测值",
        "mask = (self.Q == self.Q.max(dim=1, keepdim=True)[0]).to(dtype=torch.int32)",
        "q_sum = torch.sum(mask, dim=0)",
        "mask = (self.A == self.A.max(dim=1, keepdim=True)[0]).to(dtype=torch.int32)",
        "",
        "A_sum = torch.sum(mask, dim=0)",
        "self.ca = ca",
        "需要更新的参数有 guess，slide",
        "self.loss_function = torch.nn.BCELoss(reduction='mean')  # 交叉熵损失函数",
        "[[train]]",
        "[[train]]",
        "print(f'pred {pred}')",
        "print(f'label {label}')",
        "------start update parameters----------",
        "------ end update parameters-----------",
        "-------start evaluate and drawing-----------",
        "print(f'loss {loss_list}')",
        "画出训练的loss以及rmse和mae曲线",
        "viz.line([[epoch_loss]], [epoch], win='train loss', update='append')",
        "viz.line([[rmse, mae]], [epoch], win='test rmse&mae', update='append')",
        "最后一个epoch保存",
        "self.test(index_loader,train_data,valid_data, save_dir=save_dir, save_size=save_size)",
        "self.all_pred_data(index_loader, train_data, valid_data)",
        "-------end evaluate and drawing-----------",
        "train_data.loc[stu_list, :]",
        "test_data.loc[stu_list, :]",
        "print(all_pred.size())",
        "-------record -----------",
        "np.savetxt(save_dir + 'slide_.txt', self.net.slide_.cpu().detach().numpy())",
        "np.savetxt(save_dir + 'guess_.txt', self.net.guess_.cpu().detach().numpy())",
        "self.all_pred.to_csv(save_dir + 'pred_data.csv', sep=',')"
    ],
    "docstrings": [],
    "functions": [
        "evaluate",
        "format_data",
        "format_test_data",
        "sigmoid",
        "forward",
        "get_Q",
        "get_A",
        "fit",
        "test",
        "save_parameter",
        "load_net"
    ],
    "classes": [
        "NewNet",
        "ECPM"
    ]
}