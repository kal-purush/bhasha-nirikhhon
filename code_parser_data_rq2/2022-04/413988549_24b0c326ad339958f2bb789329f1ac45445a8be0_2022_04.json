{
    "identifiers": [
        "com",
        "amazon",
        "dataprepper",
        "plugins",
        "sink",
        "opensearch",
        "org",
        "apache",
        "http",
        "Header",
        "org",
        "apache",
        "http",
        "HttpHost",
        "org",
        "apache",
        "http",
        "auth",
        "AuthScope",
        "org",
        "apache",
        "http",
        "auth",
        "UsernamePasswordCredentials",
        "org",
        "apache",
        "http",
        "client",
        "CredentialsProvider",
        "org",
        "apache",
        "http",
        "conn",
        "ssl",
        "NoopHostnameVerifier",
        "org",
        "apache",
        "http",
        "impl",
        "client",
        "BasicCredentialsProvider",
        "org",
        "apache",
        "http",
        "message",
        "BasicHeader",
        "org",
        "apache",
        "http",
        "nio",
        "conn",
        "ssl",
        "SSLIOSessionStrategy",
        "org",
        "apache",
        "http",
        "ssl",
        "SSLContextBuilder",
        "org",
        "apache",
        "http",
        "ssl",
        "SSLContexts",
        "org",
        "awaitility",
        "Awaitility",
        "org",
        "opensearch",
        "client",
        "Request",
        "org",
        "opensearch",
        "client",
        "Response",
        "org",
        "opensearch",
        "client",
        "ResponseException",
        "org",
        "opensearch",
        "client",
        "RestClient",
        "org",
        "opensearch",
        "client",
        "RestClientBuilder",
        "org",
        "opensearch",
        "cluster",
        "ClusterModule",
        "org",
        "opensearch",
        "common",
        "io",
        "PathUtils",
        "org",
        "opensearch",
        "common",
        "settings",
        "Settings",
        "org",
        "opensearch",
        "common",
        "unit",
        "TimeValue",
        "org",
        "opensearch",
        "common",
        "util",
        "concurrent",
        "ThreadContext",
        "org",
        "opensearch",
        "common",
        "xcontent",
        "DeprecationHandler",
        "org",
        "opensearch",
        "common",
        "xcontent",
        "LoggingDeprecationHandler",
        "org",
        "opensearch",
        "common",
        "xcontent",
        "NamedXContentRegistry",
        "org",
        "opensearch",
        "common",
        "xcontent",
        "XContent",
        "org",
        "opensearch",
        "common",
        "xcontent",
        "XContentParser",
        "org",
        "opensearch",
        "common",
        "xcontent",
        "XContentType",
        "javax",
        "net",
        "ssl",
        "SSLContext",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "nio",
        "file",
        "Path",
        "java",
        "security",
        "KeyManagementException",
        "java",
        "security",
        "KeyStore",
        "java",
        "security",
        "KeyStoreException",
        "java",
        "security",
        "NoSuchAlgorithmException",
        "java",
        "security",
        "cert",
        "CertificateException",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Optional",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "stream",
        "Collectors",
        "TRUSTSTORE_PATH",
        "TRUSTSTORE_PASSWORD",
        "CLIENT_SOCKET_TIMEOUT",
        "CLIENT_PATH_PREFIX",
        "DEFAULT_NAMED_X_CONTENT_REGISTRY",
        "ClusterModule",
        "getNamedXWriteables",
        "Arrays",
        "stream",
        "getProperty",
        "split",
        "ip",
        "format",
        "getProtocol",
        "ip",
        "collect",
        "Collectors",
        "toList",
        "xContent",
        "data",
        "xContent",
        "createParser",
        "getXContentRegistry",
        "LoggingDeprecationHandler",
        "INSTANCE",
        "data",
        "DEFAULT_NAMED_X_CONTENT_REGISTRY",
        "hosts",
        "getHosts",
        "httpHosts",
        "hosts",
        "size",
        "hosts",
        "stream",
        "HttpHost",
        "create",
        "collect",
        "Collectors",
        "toList",
        "toArray",
        "httpHosts",
        "settings",
        "Settings",
        "Builder",
        "EMPTY_SETTINGS",
        "buildClient",
        "settings",
        "httpHosts",
        "settings",
        "hosts",
        "builder",
        "RestClient",
        "builder",
        "hosts",
        "isOSBundle",
        "configureHttpsClient",
        "builder",
        "settings",
        "configureClient",
        "builder",
        "settings",
        "builder",
        "setStrictDeprecationMode",
        "builder",
        "build",
        "osFlag",
        "Optional",
        "ofNullable",
        "getProperty",
        "equalsIgnoreCase",
        "orElse",
        "osFlag",
        "Optional",
        "ofNullable",
        "getProperty",
        "isPresent",
        "osFlag",
        "isOSBundle",
        "builder",
        "settings",
        "headers",
        "ThreadContext",
        "buildDefaultHeaders",
        "settings",
        "defaultHeaders",
        "headers",
        "size",
        "i",
        "entry",
        "headers",
        "entrySet",
        "defaultHeaders",
        "i",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "builder",
        "setDefaultHeaders",
        "defaultHeaders",
        "builder",
        "setHttpClientConfigCallback",
        "httpClientBuilder",
        "userName",
        "Optional",
        "ofNullable",
        "getProperty",
        "orElseThrow",
        "password",
        "Optional",
        "ofNullable",
        "getProperty",
        "orElseThrow",
        "credentialsProvider",
        "credentialsProvider",
        "setCredentials",
        "AuthScope",
        "ANY",
        "userName",
        "password",
        "httpClientBuilder",
        "setDefaultCredentialsProvider",
        "credentialsProvider",
        "setSSLHostnameVerifier",
        "NoopHostnameVerifier",
        "INSTANCE",
        "setSSLContext",
        "SSLContextBuilder",
        "create",
        "loadTrustMaterial",
        "chains",
        "authType",
        "build",
        "e",
        "e",
        "socketTimeoutString",
        "settings",
        "get",
        "CLIENT_SOCKET_TIMEOUT",
        "socketTimeout",
        "TimeValue",
        "parseTimeValue",
        "socketTimeoutString",
        "socketTimeoutString",
        "CLIENT_SOCKET_TIMEOUT",
        "builder",
        "setRequestConfigCallback",
        "conf",
        "conf",
        "setSocketTimeout",
        "toIntExact",
        "socketTimeout",
        "getMillis",
        "settings",
        "hasValue",
        "CLIENT_PATH_PREFIX",
        "builder",
        "setPathPrefix",
        "settings",
        "get",
        "CLIENT_PATH_PREFIX",
        "builder",
        "settings",
        "keystorePath",
        "settings",
        "get",
        "TRUSTSTORE_PATH",
        "keystorePath",
        "keystorePass",
        "settings",
        "get",
        "TRUSTSTORE_PASSWORD",
        "keystorePass",
        "TRUSTSTORE_PATH",
        "TRUSTSTORE_PASSWORD",
        "path",
        "PathUtils",
        "get",
        "keystorePath",
        "Files",
        "exists",
        "path",
        "TRUSTSTORE_PATH",
        "keyStoreType",
        "keystorePath",
        "endsWith",
        "keyStore",
        "KeyStore",
        "getInstance",
        "keyStoreType",
        "Files",
        "newInputStream",
        "path",
        "keyStore",
        "load",
        "keystorePass",
        "toCharArray",
        "sslcontext",
        "SSLContexts",
        "custom",
        "loadTrustMaterial",
        "keyStore",
        "build",
        "sessionStrategy",
        "sslcontext",
        "builder",
        "setHttpClientConfigCallback",
        "httpClientBuilder",
        "httpClientBuilder",
        "setSSLStrategy",
        "sessionStrategy",
        "e",
        "e",
        "headers",
        "ThreadContext",
        "buildDefaultHeaders",
        "settings",
        "defaultHeaders",
        "headers",
        "size",
        "i",
        "entry",
        "headers",
        "entrySet",
        "defaultHeaders",
        "i",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "builder",
        "setDefaultHeaders",
        "defaultHeaders",
        "socketTimeoutString",
        "settings",
        "get",
        "CLIENT_SOCKET_TIMEOUT",
        "socketTimeout",
        "TimeValue",
        "parseTimeValue",
        "socketTimeoutString",
        "socketTimeoutString",
        "CLIENT_SOCKET_TIMEOUT",
        "builder",
        "setRequestConfigCallback",
        "conf",
        "conf",
        "setSocketTimeout",
        "toIntExact",
        "socketTimeout",
        "getMillis",
        "settings",
        "hasValue",
        "CLIENT_PATH_PREFIX",
        "builder",
        "setPathPrefix",
        "settings",
        "get",
        "CLIENT_PATH_PREFIX",
        "openSearchClient",
        "createOpenSearchClient",
        "openSearchClient",
        "performRequest",
        "openSearchClient",
        "performRequest",
        "openSearchClient",
        "performRequest",
        "e",
        "openSearchClient",
        "createOpenSearchClient",
        "Awaitility",
        "waitAtMost",
        "TimeUnit",
        "SECONDS",
        "ignoreExceptions",
        "until",
        "response",
        "openSearchClient",
        "performRequest",
        "tasks",
        "entityAsMap",
        "response",
        "get",
        "tasks",
        "isEmpty",
        "response",
        "xContentType",
        "XContentType",
        "fromMediaTypeOrFormat",
        "response",
        "getEntity",
        "getContentType",
        "getValue",
        "parser",
        "xContentType",
        "xContent",
        "createParser",
        "NamedXContentRegistry",
        "EMPTY",
        "DeprecationHandler",
        "THROW_UNSUPPORTED_OPERATION",
        "response",
        "getEntity",
        "getContent",
        "parser"
    ],
    "literals": [
        "\"truststore.path\"",
        "\"truststore.password\"",
        "\"client.socket.timeout\"",
        "\"client.path.prefix\"",
        "\"tests.rest.cluster\"",
        "\",\"",
        "\"%s://%s\"",
        "\"os\"",
        "\"true\"",
        "\"tests.rest.cluster\"",
        "\"cluster url should be provided for security enabled OpenSearch testing\"",
        "\"https\"",
        "\"http\"",
        "\"user\"",
        "\"user name is missing\"",
        "\"password\"",
        "\"password is missing\"",
        "\"60s\"",
        "\" is provided but not \"",
        "\" is set but points to a non-existing file\"",
        "\".p12\"",
        "\"PKCS12\"",
        "\"jks\"",
        "\"Error setting up ssl\"",
        "\"60s\"",
        "\"DELETE\"",
        "\"_template/*\"",
        "\"DELETE\"",
        "\"_index_template/*\"",
        "\"DELETE\"",
        "\"_component_template/*\"",
        "\"GET\"",
        "\"/_cluster/pending_tasks\"",
        "\"tasks\""
    ],
    "variables": [],
    "comments": [
        "currently only external cluster is supported for security enabled testing",
        "disable the certificate since our testing cluster just uses the default security configuration",
        "We hit a version of ES that doesn't support index templates v2 yet, so it's safe to ignore",
        "EMPTY and THROW are fine here because `.map` doesn't use named x content or deprecation"
    ],
    "docstrings": [
        "* SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n * Modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.",
        "* Licensed to Elasticsearch under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.",
        "* Provides utilities for integration testing against an OpenSearch cluster.\n * Much of this code comes from org.opensearch.test.rest.OpenSearchRestTestCase.\n * Using the OpenSearchRestTestCase class requires bringing in dependencies on OpenSearch Core\n * which are not relevant for Data Prepper.",
        "* Copied from OpenSearch test framework\n     * TODO: Consolidate in OpenSearch",
        "* Copied from OpenSearch test framework\n     * Consider consolidating in OpenSearch",
        "* Copied from OpenSearch test framework\n     * TODO: Consolidate in OpenSearch",
        "* Copied from OpenSearch test framework\n     * TODO: Consolidate in OpenSearch",
        "* Creates an OpenSearch low-level {@link RestClient}.\n     * TODO: Consider using the RestHighLevelClient.\n     * TODO: Consider consolidating with OpenSearch test framework.",
        "* Created custom for Data Prepper",
        "* Determines if the target in OpenSearch. It appears to be true for OpenDistro as well.\n     * Created custom for Data Prepper\n     * TODO: Determine if we need this at all. Can we assume all supported versions of OpenDistro also have the same capabilities?\n     * TODO: It may be possible to remove testing against HTTP after decoupling from the OpenSearch test framework Gradle plugin",
        "* Created custom for Data Prepper\n     * TODO: It may be possible to remove testing against HTTP after decoupling from the OpenSearch test framework Gradle plugin",
        "* Created custom for Data Prepper",
        "* Copied from OpenSearch test framework\n     * TODO: It may be possible to remove testing against HTTP after decoupling from the OpenSearch test framework Gradle plugin",
        "* Copied from OpenSearch test framework\n     * TODO: Consolidate in OpenSearch",
        "* Copied from OpenSearch test framework\n     * TODO: Consolidate in OpenSearch",
        "* Copied from OpenSearch test framework\n     * TODO: Consolidate in OpenSearch"
    ],
    "functions": [
        "getHosts",
        "XContentParser",
        "createContentParser",
        "NamedXContentRegistry",
        "getXContentRegistry",
        "RestClient",
        "createOpenSearchClient",
        "RestClient",
        "buildClient",
        "isOSBundle",
        "getProtocol",
        "configureHttpsClient",
        "configureClient",
        "wipeAllTemplates",
        "waitForClusterStateUpdatesToFinish",
        "entityAsMap"
    ],
    "classes": [
        "OpenSearchIntegrationHelper"
    ]
}