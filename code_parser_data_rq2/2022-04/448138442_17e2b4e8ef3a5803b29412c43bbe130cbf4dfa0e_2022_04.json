{
    "identifiers": [
        "warnings",
        "collections",
        "defaultdict",
        "typing",
        "Callable",
        "Optional",
        "Tuple",
        "Union",
        "pydantic",
        "magicgui",
        "type_map",
        "widgets",
        "yt_napari",
        "_data_model",
        "py_model",
        "Union",
        "pydantic",
        "BaseModel",
        "pydantic",
        "main",
        "ModelMetaclass",
        "container",
        "widgets",
        "Container",
        "field",
        "field_def",
        "py_model",
        "__fields__",
        "items",
        "field_def",
        "type_",
        "isinstance",
        "ftype",
        "pydantic",
        "BaseModel",
        "isinstance",
        "ftype",
        "pydantic",
        "main",
        "ModelMetaclass",
        "widgets",
        "Container",
        "new_widget_cls",
        "name",
        "field_def",
        "name",
        "add_pydantic_to_container",
        "ftype",
        "new_widget",
        "translator",
        "is_registered",
        "py_model",
        "field",
        "translator",
        "get_widget_instance",
        "py_model",
        "field",
        "type_map",
        "get_widget_class",
        "ftype",
        "name",
        "field_def",
        "name",
        "value",
        "field_def",
        "new_widget_cls",
        "ops",
        "isinstance",
        "new_widget",
        "widgets",
        "EmptyWidget",
        "msg",
        "py_model",
        "field",
        "ftype",
        "warnings",
        "warn",
        "message",
        "msg",
        "container",
        "append",
        "new_widget",
        "container",
        "widgets",
        "Container",
        "py_model",
        "pydantic_kwargs",
        "field",
        "field_def",
        "py_model",
        "__fields__",
        "items",
        "field_def",
        "type_",
        "isinstance",
        "ftype",
        "pydantic",
        "BaseModel",
        "isinstance",
        "ftype",
        "pydantic",
        "main",
        "ModelMetaclass",
        "getattr",
        "container",
        "field_def",
        "name",
        "get_pydantic_kwargs",
        "sub_container",
        "ftype",
        "new_kwargs",
        "field_def",
        "outer_type_",
        "new_kwargs",
        "new_kwargs",
        "translator",
        "is_registered",
        "py_model",
        "field",
        "getattr",
        "container",
        "field_def",
        "name",
        "translator",
        "get_pydantic_attr",
        "py_model",
        "field",
        "widget_instance",
        "hasattr",
        "container",
        "field_def",
        "name",
        "getattr",
        "container",
        "field_def",
        "name",
        "value",
        "value",
        "variable",
        "variable",
        "variable",
        "defaultdict",
        "pydantic_model",
        "Union",
        "pydantic",
        "BaseModel",
        "pydantic",
        "main",
        "ModelMetaclass",
        "field",
        "magicgui_factory",
        "Callable",
        "magicgui_args",
        "Optional",
        "magicgui_kwargs",
        "Optional",
        "pydantic_attr_factory",
        "Callable",
        "pydantic_attr_args",
        "Optional",
        "pydantic_attr_kwargs",
        "Optional",
        "set_default",
        "magicgui_args",
        "set_default",
        "magicgui_kwargs",
        "set_default",
        "pydantic_attr_args",
        "set_default",
        "pydantic_attr_kwargs",
        "registry",
        "pydantic_model",
        "magicgui_factory",
        "magicgui_args",
        "magicgui_kwargs",
        "pydantic_attr_factory",
        "pydantic_attr_args",
        "pydantic_attr_kwargs",
        "registry",
        "pydantic_model",
        "new_entry",
        "pydantic_model",
        "field",
        "required",
        "pydantic_model",
        "registry",
        "field",
        "registry",
        "pydantic_model",
        "required",
        "model_exists",
        "KeyError",
        "pydantic_model",
        "in_registry",
        "KeyError",
        "pydantic_model",
        "field",
        "in_registry",
        "pydantic_model",
        "field",
        "is_registered",
        "pydantic_model",
        "field",
        "required",
        "registry",
        "pydantic_model",
        "field",
        "func",
        "args",
        "kwargs",
        "pydantic_model",
        "field",
        "widget_instance",
        "is_registered",
        "pydantic_model",
        "field",
        "required",
        "registry",
        "pydantic_model",
        "field",
        "func",
        "widget_instance",
        "args",
        "kwargs",
        "MagicPydanticRegistry",
        "args",
        "kwargs",
        "widgets",
        "FileEdit",
        "args",
        "kwargs",
        "file_widget",
        "widgets",
        "FileEdit",
        "file_widget",
        "value",
        "translator",
        "register",
        "_data_model",
        "DataContainer",
        "magicgui_factory",
        "get_file_widget",
        "magicgui_kwargs",
        "pydantic_attr_factory",
        "get_filename",
        "args",
        "length",
        "box_type",
        "default_values",
        "Optional",
        "Tuple",
        "kwargs",
        "box_type",
        "widgets",
        "FloatSpinBox",
        "widgets",
        "SpinBox",
        "default_values",
        "length",
        "BoxType",
        "label",
        "name",
        "i",
        "value",
        "default_values",
        "i",
        "i",
        "length",
        "widgets",
        "Container",
        "args",
        "layout",
        "widgets",
        "widg_list",
        "kwargs",
        "vector_widget_instance",
        "i",
        "value",
        "i",
        "vector_widget_instance",
        "edge",
        "box_type",
        "_data_model",
        "SelectionObject",
        "__fields__",
        "edge",
        "translator",
        "register",
        "_data_model",
        "SelectionObject",
        "edge",
        "magicgui_factory",
        "create_vector_widget",
        "magicgui_kwargs",
        "edge",
        "defs",
        "box_type",
        "pydantic_attr_factory",
        "get_vector_kwargs",
        "field_def",
        "pydantic",
        "fields",
        "ModelField",
        "field_def",
        "type_",
        "type_map",
        "get_widget_class",
        "ftype",
        "name",
        "field_def",
        "name",
        "value",
        "field_def",
        "new_widget_cls",
        "ops",
        "default_widget_instance",
        "default_widget_instance",
        "value",
        "returnval",
        "returnval",
        "_data_model",
        "SelectionObject",
        "translator",
        "register",
        "py_model",
        "field",
        "magicgui_factory",
        "get_magicguidefault",
        "magicgui_args",
        "py_model",
        "__fields__",
        "field",
        "pydantic_attr_factory",
        "embed_in_list",
        "_data_model",
        "DataContainer",
        "translator",
        "register",
        "py_model",
        "field",
        "magicgui_factory",
        "get_magicguidefault",
        "magicgui_args",
        "py_model",
        "__fields__",
        "field",
        "pydantic_attr_factory",
        "embed_in_list",
        "widgets",
        "Container",
        "add_pydantic_to_container",
        "_data_model",
        "DataContainer",
        "data_container"
    ],
    "literals": [
        "\"magicgui could not identify a widget for \"",
        "f\" {py_model}.{field}, which has type {ftype}\"",
        "\"typing.List\"",
        "\"magicgui\"",
        "\"pydantic\"",
        "f\"registry does not contain {pydantic_model}.\"",
        "f\"{pydantic_model} registry does not contain {field}.\"",
        "\"magicgui\"",
        "\"pydantic\"",
        "\"filename\"",
        "\"name\"",
        "\"filename\"",
        "\" \"",
        "f\"x_{i}\"",
        "\"horizontal\"",
        "\"left_edge\"",
        "\"right_edge\"",
        "\"resolution\"",
        "\"length\"",
        "\"name\"",
        "\"default_values\"",
        "\"box_type\"",
        "\"hello!\"",
        "\"fields\"",
        "\"selections\""
    ],
    "variables": [
        "ftype",
        "new_widget_cls",
        "new_widget",
        "new_widget",
        "new_widget_cls",
        "ops",
        "new_widget",
        "msg",
        "ftype",
        "new_kwargs",
        "sub_container",
        "new_kwargs",
        "pydantic_kwargs",
        "field",
        "widget_instance",
        "pydantic_kwargs",
        "field",
        "value",
        "pydantic_kwargs",
        "field",
        "registry",
        "magicgui_args",
        "magicgui_kwargs",
        "pydantic_attr_args",
        "pydantic_attr_kwargs",
        "field",
        "new_entry",
        "field",
        "in_registry",
        "model_exists",
        "model_exists",
        "in_registry",
        "func",
        "args",
        "kwargs",
        "func",
        "args",
        "kwargs",
        "translator",
        "BoxType",
        "BoxType",
        "default_values",
        "widg_list",
        "defs",
        "ftype",
        "new_widget_cls",
        "ops",
        "returnval",
        "py_model",
        "field",
        "py_model",
        "field",
        "data_container"
    ],
    "comments": [
        "recursively traverse a pydantic model adding widgets to a container. When a nested",
        "pydantic model is encountered, add a new nested container",
        "the field is a pydantic class, add a container for it and fill it",
        "use a magicgui default",
        "given a container that was instantiated from a pydantic model, get the arguments",
        "needed to instantiate that pydantic model from the container.",
        "traverse model fields, pull out values from container",
        "new dictionary for the new nest level",
        "any pydantic class will be a container, so pull that out to pass",
        "to the recursive call",
        "pull from container",
        "not a pydantic class, just pull the field value from the container",
        "check if a pydantic model and field is registered, will error if required=True",
        "return a widget instance for a given pydantic model and field",
        "given a widget instance, return an object that can be used to set a",
        "pydantic field",
        "register some data model fields:"
    ],
    "docstrings": [
        "\"\"\"\n\n        Parameters\n        ----------\n        pydantic_model :\n            the pydantic model to register\n        field :\n            the attribute from the pydantic model to register\n        magicgui_factory :\n            a callable function that must return a magicgui widget\n        magicgui_args :\n            a tuple containing arguments to magicgui_factory\n        magicgui_kwargs :\n            a dict containing keyword arguments to magicgui_factory\n        pydantic_attr_factory :\n            a function that takes a magicgui widget instance and returns the\n            arguments for a pydantic attribute\n        pydantic_attr_args :\n            a tuple containing arguments to pydantic_attr_factory\n        pydantic_attr_kwargs :\n            a dict containing keyword arguments to pydantic_attr_factory\n        \"\"\""
    ],
    "functions": [
        "add_pydantic_to_container",
        "get_pydantic_kwargs",
        "set_default",
        "register",
        "is_registered",
        "get_widget_instance",
        "get_pydantic_attr",
        "get_file_widget",
        "get_filename",
        "create_vector_widget",
        "get_vector_kwargs",
        "get_magicguidefault",
        "embed_in_list"
    ],
    "classes": [
        "MagicPydanticRegistry"
    ]
}