{
    "identifiers": [
        "copy",
        "numpy",
        "np",
        "pandas",
        "pd",
        "os",
        "glob",
        "pcmdi_metrics",
        "graphics",
        "read_mean_clim_json_files",
        "files",
        "isinstance",
        "files",
        "os",
        "path",
        "exists",
        "files",
        "os",
        "path",
        "isfile",
        "files",
        "files",
        "os",
        "path",
        "isdir",
        "files",
        "glob",
        "glob",
        "files",
        "isinstance",
        "files",
        "df_dict",
        "var_list",
        "var_unit_list",
        "regions",
        "stats",
        "read_mean_clim_json_files",
        "files",
        "copy",
        "deepcopy",
        "metrics_obj",
        "isinstance",
        "metrics_obj",
        "Metrics",
        "copy",
        "df_dict",
        "keys",
        "union",
        "metrics_obj",
        "df_dict",
        "keys",
        "stat",
        "sorted",
        "stats",
        "df_dict",
        "stat",
        "keys",
        "union",
        "metrics_obj",
        "df_dict",
        "stat",
        "keys",
        "season",
        "seasons",
        "df_dict",
        "stat",
        "season",
        "keys",
        "union",
        "metrics_obj",
        "df_dict",
        "stat",
        "season",
        "keys",
        "region",
        "regions",
        "df_dict",
        "stat",
        "season",
        "region",
        "isinstance",
        "_df1",
        "pd",
        "core",
        "frame",
        "DataFrame",
        "exception",
        "isinstance",
        "exception",
        "KeyError",
        "pd",
        "DataFrame",
        "exception",
        "metrics_obj",
        "df_dict",
        "stat",
        "season",
        "region",
        "isinstance",
        "_df2",
        "pd",
        "core",
        "frame",
        "DataFrame",
        "exception",
        "isinstance",
        "exception",
        "KeyError",
        "pd",
        "DataFrame",
        "exception",
        "result",
        "df_dict",
        "stat",
        "season",
        "pd",
        "concat",
        "_df1",
        "_df2",
        "ignore_index",
        "fillna",
        "value",
        "np",
        "nan",
        "var_list",
        "metrics_obj",
        "var_list",
        "var_unit_list",
        "metrics_obj",
        "var_unit_list",
        "regions",
        "metrics_obj",
        "regions",
        "stats",
        "metrics_obj",
        "stats",
        "result"
    ],
    "literals": [
        "\"Specified path does not exist.\"",
        "f\"{files}/*.json\"",
        "\"Input must either be a single file, directory, or list of files.\"",
        "\"Metrics objects must be merged with other Metrics objects\"",
        "\"Unexpected object found\"",
        "\"Unexpected object found\""
    ],
    "variables": [
        "files",
        "files",
        "result",
        "stats",
        "seasons",
        "regions",
        "_df1",
        "_df1",
        "_df2",
        "_df2",
        "region",
        "result",
        "var_list",
        "result",
        "var_unit_list",
        "result",
        "regions",
        "result",
        "stats"
    ],
    "comments": [
        "if `files` input is a string, determine if it is a single file",
        "or if it is a directory containing json files",
        "call `read_mean_clim_json_files` and save the results as",
        "object attributes",
        "ensure that second `metrics_obj` is a Metrics object",
        "make a copy of the existing instance as the result",
        "loop over superset of `stats`",
        "loop over superset of seasons",
        "loop over superset of regions",
        "consider both the current Metrics instance and",
        "candidate `metrics_obj` instance and determine if the",
        "[stat][season][region] nesting contains a pd.DataFrame.",
        "If a KeyError is thrown, it likely does not exist",
        "and initialize an empty pd.DataFrame. If some other",
        "exception occurs, raise it.",
        "concatenate `merge_obj` to the end of the current",
        "instance. Fill `None` types as np.nan to avoid potential",
        "issues with future funcs, such as `normalize_by_median`",
        "determine the superset of the other attributes"
    ],
    "docstrings": [
        "\"\"\"Mean climate metrics object class\"\"\"",
        "\"\"\"Initialize the mean climate metrics class\n\n        This method initializes the mean climate metrics object given a\n        single json file, a list of json files, or a directory containing\n        a set of json files.\n\n        Parameters\n        ----------\n        files : str, path-like or list\n            Input json file(s) or directory containing json files\n\n        Returns\n        -------\n        Metrics\n            mean climte metrics object class\n        \"\"\"",
        "\"\"\"method to deep copy a Metrics instance\"\"\"",
        "\"\"\"Method to merge Metrics instance with another instance\n\n        This method merges an existing metrics instance with another instance\n        by finding the superset of stats, seasons, and regions across the\n        two instances\n\n        Parameters\n        ----------\n        metrics_obj : Metrics\n            Metrics object to merge with exisiting instance\n\n        Returns\n        -------\n        Metrics\n            merged Metrics instance\n        \"\"\"",
        "\"\"\"\n# ----- sample usage -----\n\n# existing library of mean climate metrics downloaded from portrait_plot_mean_clim.ipynb\nlibrary = Metrics(\"./json_files\")\n\n# new test case\ntest_case = Metrics(\"/net/jpk/output\")\n\n# merged\ncombined = library.merge(test_case)\n\"\"\""
    ],
    "functions": [
        "copy",
        "merge"
    ],
    "classes": [
        "Metrics"
    ]
}