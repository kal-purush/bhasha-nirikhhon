{
    "identifiers": [
        "openjdk",
        "feature",
        "tracker",
        "io",
        "vavr",
        "collection",
        "io",
        "vavr",
        "control",
        "Try",
        "args",
        "origin",
        "log",
        "log",
        "aCircle",
        "origin",
        "log",
        "log",
        "aCircle",
        "radius",
        "log",
        "aCircle",
        "hashCode",
        "log",
        "aCircle",
        "toString",
        "log",
        "log",
        "aCircle",
        "diameter",
        "log",
        "aFailure",
        "Try",
        "of",
        "origin",
        "log",
        "aFailure",
        "getCause",
        "log",
        "log",
        "log",
        "origin",
        "log",
        "log",
        "log",
        "log",
        "findCircleLargerThan",
        "of",
        "origin",
        "origin",
        "toString",
        "log",
        "log",
        "log",
        "of",
        "origin",
        "origin",
        "sorted",
        "toString",
        "log",
        "log",
        "log",
        "log",
        "log",
        "log",
        "getAnnotationsOfAccessor",
        "log",
        "getAnnotationsOfAccessor",
        "log",
        "log",
        "log",
        "getAnnotationsOfComponent",
        "log",
        "getAnnotationsOfComponent",
        "circles",
        "minArea",
        "CircleArea",
        "circle",
        "area",
        "circles",
        "circle",
        "circle",
        "circle",
        "area",
        "circleArea",
        "circleArea",
        "area",
        "minArea",
        "circleArea",
        "circleArea",
        "circle",
        "clazz",
        "componentName",
        "sb",
        "sb",
        "append",
        "of",
        "clazz",
        "getRecordComponents",
        "component",
        "component",
        "getName",
        "equals",
        "componentName",
        "flatMap",
        "component",
        "of",
        "component",
        "getAccessor",
        "getAnnotations",
        "forEach",
        "annotation",
        "sb",
        "append",
        "annotation",
        "toString",
        "append",
        "sb",
        "append",
        "sb",
        "toString",
        "clazz",
        "componentName",
        "sb",
        "sb",
        "append",
        "of",
        "clazz",
        "getRecordComponents",
        "component",
        "component",
        "getName",
        "equals",
        "componentName",
        "flatMap",
        "component",
        "of",
        "component",
        "getAnnotations",
        "forEach",
        "annotation",
        "sb",
        "append",
        "annotation",
        "toString",
        "append",
        "sb",
        "append",
        "sb",
        "toString",
        "message",
        "args",
        "printf",
        "message",
        "args"
    ],
    "literals": [
        "\"We can declare a record by providing its components (type and name), \"",
        "\"and use implicit canonical constructor to create instances.\\n\\n\"",
        "\"The record class will have some auto-generated methods.\\n\"",
        "\"Data accessor: radius=%d\\n\"",
        "\"Hash code and equality: hashCode=%d\\n\"",
        "\"Well formatted string output:\\n\\t%s.\\n\"",
        "\"And we can add methods as traditional class, \"",
        "\"for example diameter=%d.\\n\\n\"",
        "\"We can leverage compact canonical constructor to validate the input args, \"",
        "\"for example if radius <= 0 the constructor would throw exception: %s.\\n\"",
        "\"And we can use it to normalize the input args, \"",
        "\"for example we can restrict the radius be shorter than 6, \"",
        "\"Circle((1, 1), 10) will become %s.\\n\"",
        "\"Please note we don't need the `this.radius = radius` assignment.\\n\\n\"",
        "\"We can declare local record type to make code more readable, \"",
        "\"for example the CircleAre declared in findCircleLargerThan method.\\n\"",
        "\"The result of findCircleLargerThan([((0,0), 1),((0,0), 2)])=%s.\\n\\n\"",
        "\"Record classes are declared as final implicitly, but they can implement interfaces, \"",
        "\"for example we can compare two circles by implementing Comparable interface.\\n\"",
        "\"Now we can sort list of circles: %s\\n\\n\"",
        "\"We can add annotation to the components of the record class, \"",
        "\"the annotations will also apply to accessors, fields, constructor params based on the target metadata.\\n\"",
        "\"We can then use the Reflection API made for record class to retrieve annotation info.\\n\"",
        "\"If we mark @FieldAnno on center, and @MethodAnno on radius, \"",
        "\"the annotations on accessors would be: \\n\"",
        "\"center(): %s\\n\"",
        "\"center\"",
        "\"radius(): %s\\n\"",
        "\"radius\"",
        "\"Annotation type should be marked with ElementType.RECORD_COMPONENT to be able to retrieved by Reflection API, \"",
        "\"the annotations on component are: \\n\"",
        "\"center: %s\\n\"",
        "\"center\"",
        "\"radius: %s\\n\"",
        "\"radius\"",
        "\"{ \"",
        "\" \"",
        "\"}\"",
        "\"{ \"",
        "\" \"",
        "\"}\""
    ],
    "variables": [
        "args"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "main",
        "findCircleLargerThan",
        "getAnnotationsOfAccessor",
        "getAnnotationsOfComponent",
        "log"
    ],
    "classes": [
        "App"
    ]
}