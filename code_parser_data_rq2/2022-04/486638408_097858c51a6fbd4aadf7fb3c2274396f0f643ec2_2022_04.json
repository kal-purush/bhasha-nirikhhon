{
    "identifiers": [
        "bitstring",
        "BitArray",
        "hashlib",
        "os",
        "urandom",
        "generate_private_key",
        "generate_public_key",
        "staticmethod",
        "urandom",
        "urandom",
        "i",
        "hash",
        "a",
        "hash",
        "b",
        "a",
        "b",
        "private_key",
        "staticmethod",
        "key_list",
        "key_list",
        "a",
        "b",
        "key_list",
        "ret",
        "a",
        "b",
        "i",
        "key_list",
        "ret",
        "i",
        "ret",
        "staticmethod",
        "key",
        "len",
        "key",
        "key",
        "i",
        "i",
        "i",
        "len",
        "key",
        "i",
        "ret",
        "append",
        "key",
        "i",
        "i",
        "key",
        "i",
        "i",
        "ret",
        "ValueError",
        "key_type",
        "concatenate",
        "public_key",
        "key_type",
        "private_key",
        "concatenate",
        "key",
        "concatenate_key",
        "key",
        "msg",
        "used",
        "ValueError",
        "hash",
        "msg",
        "a",
        "b",
        "bit",
        "private_key",
        "BitArray",
        "msg_hash",
        "bin",
        "bit",
        "signature",
        "append",
        "a",
        "bit",
        "signature",
        "append",
        "b",
        "signature",
        "classmethod",
        "cls",
        "msg",
        "signature",
        "public_key",
        "cls",
        "hash",
        "msg",
        "cls",
        "hash",
        "i",
        "i",
        "signature",
        "sig_hash",
        "a",
        "b",
        "bit",
        "signature_hash",
        "public_key",
        "BitArray",
        "msg_hash",
        "bin",
        "bit",
        "sig_hash",
        "a",
        "bit",
        "sig_hash",
        "b",
        "staticmethod",
        "data",
        "data",
        "data",
        "encode",
        "hashlib",
        "sha256",
        "data",
        "digest",
        "msg_sent",
        "msg_to_check",
        "LamportSignature",
        "lamport",
        "sign",
        "msg_sent",
        "msg_sent",
        "msg_to_check",
        "LamportSignature",
        "verify",
        "msg_to_check",
        "signature",
        "lamport",
        "public_key",
        "main"
    ],
    "literals": [
        "\"Wrong key size.\"",
        "'public'",
        "\"Private and public keys already used!\"",
        "\"0\"",
        "\"1\"",
        "\"0\"",
        "\"1\"",
        "'utf-8'",
        "\"abc\"",
        "\"abc\"",
        "\"abc\"",
        "\"aaa\"",
        "\"abc\"",
        "\"aabc\"",
        "\"__main__\""
    ],
    "variables": [
        "private_key",
        "public_key",
        "used",
        "ret",
        "ret",
        "key",
        "used",
        "msg_hash",
        "signature",
        "msg_hash",
        "signature_hash",
        "data",
        "lamport",
        "signature"
    ],
    "comments": [
        "!/usr/bin/env python",
        "coding:utf-8",
        "signature key size 256×256 bits",
        "public/private key size 2x256×256 bits"
    ],
    "docstrings": [
        "\"\"\"\n  Purpose:  Lamport One-Time Signature Scheme (LOTSS) implementation.\n  Created:  20/04/2017\n\"\"\"",
        "\"\"\"Lamport signature class.\n    \n    Attributes:\n        private_key (list): Private key.\n        public_key (list): Public key.\n        used (boolean): Keys already used to sign a message.\n        \n    \"\"\"",
        "\"\"\" LamportSignature object constructor\"\"\"",
        "\"\"\"Generate a private key.\n        \n        Returns:\n            (list): Private key, 2×256×256 bits = 16 KiB.\n\n        \"\"\"",
        "\"\"\"Generate a public key.\n        \n        Returns:\n            (list): Public key, 2×256×256 bits = 16 KiB.\n        \n        \"\"\"",
        "\"\"\"Concatenate key.\n        \n        Args:\n            key_list (list): Key to concatenate.\n        \n        Returns:\n            (bytearray): Concatenated key.\n        \n        \"\"\"",
        "\"\"\"Decatenate key.\n        \n        Args:\n            key (bytearray): Key to decatenate.\n        \n        Returns:\n            (list): Decatenated key.\n            \n        \"\"\"",
        "\"\"\"Getter for the public or private key.\n        \n        Args:\n            key_type (str): 'public' or 'private'.\n            concatenate (boolean): Concatenate key or not.\n        \n        Returns:\n            (bytearray/list): Public key.\n        \n        \"\"\"",
        "\"\"\"Sign a message with the Lamport signature.\n        \n        Args:\n            msg (str): Message to sign.\n        \n        Returns:\n            (list): Signature of the message, sequence of 256 random numbers, 256×256 bits.\n        \n        \"\"\"",
        "\"\"\"Verify signature of the message.\n        \n        Args:\n            msg (str): Message to check.\n            signature (list): Signature of the message, sequence of 256 random numbers, 256×256 bits.\n            public_key (list): Public key, 2×256×256 bits.\n        \n        Returns:\n            (boolean): True if signature of the message is right otherwise False.\n        \n        \"\"\"",
        "\"\"\"Calculate sha256 hash of 'data'.\n        \n        Args:\n            (str/bytearray): Data to hash.\n\n        Returns:\n            (bytearray): bytes of the hash.\n\n        \"\"\""
    ],
    "functions": [
        "generate_private_key",
        "generate_public_key",
        "concatenate_key",
        "decatenate_key",
        "get_key",
        "sign",
        "verify",
        "hash",
        "main"
    ],
    "classes": [
        "LamportSignature"
    ]
}