{
    "identifiers": [
        "numpy",
        "np",
        "pandas",
        "pd",
        "functools",
        "reduce",
        "pd",
        "DataFrame",
        "columns",
        "target",
        "dataframe",
        "max_depth",
        "max_depth",
        "target",
        "dataframe",
        "feature",
        "value",
        "dataset",
        "dataset",
        "dataset",
        "loc",
        "feature",
        "value",
        "dataset",
        "dataset",
        "loc",
        "feature",
        "value",
        "left",
        "right",
        "feature",
        "value",
        "dataset",
        "dataset",
        "dataset",
        "loc",
        "feature",
        "value",
        "dataset",
        "dataset",
        "loc",
        "feature",
        "value",
        "left",
        "right",
        "decision_tree_regressor",
        "dataframe",
        "tree",
        "__quanti_split__",
        "dataframe",
        "tree",
        "__quanti_split__",
        "dataframe",
        "left_node",
        "right_node",
        "right_node2"
    ],
    "literals": [
        "\"drone\"",
        "\"poupé\"",
        "\"voiture télécomandé\"",
        "\"playstation\"",
        "\"xbox\"",
        "\"album de musique kpop\"",
        "\"ablum de musique rap\"",
        "\"bracelet\"",
        "\"rouge à levre\"",
        "\"crampons de foot\"",
        "\"cliché\"",
        "\"plus d'idee\"",
        "'objet'",
        "'reponse1'",
        "'reponse2'",
        "'reponse3'",
        "'objet'",
        "'reponse1'",
        "'reponse2'",
        "\"-----------------Objet pour les Hommes--------------\"",
        "\"-----------------Objet pour les femmes--------------\"",
        "\"-----------------Objet pour les femmes de -12ans--------------\""
    ],
    "variables": [
        "dataframe",
        "max_depth",
        "target",
        "dataframe",
        "left",
        "right",
        "left",
        "right",
        "tree",
        "left_node",
        "right_node",
        "left_node2",
        "right_node2"
    ],
    "comments": [
        "Question 1 : Es une fille ?",
        "columns=['prix', 'surface', 'garage', 'nb_piece']",
        "regle binaire : 0=non // 1=oui // 2=je ne sais pas (donc = 0 et 1)",
        "print(dataframe)",
        "Possibilité de la question 1 : Es une fille ?"
    ],
    "docstrings": [
        "\"\"\" Cette classe a pour but de créer un algorithme d'apprentissage automatique\n  d'arbres de décision regresseur\"\"\"",
        "\"\"\"Cette fonction a pour but d'initialiser les variables essentiel à la \n    construction de notre algorithme.\n   INPUT \n    - target : la variable cible qu'il faudra classifier\n    - dataframe : les données d'apprentissage\n    - max_deapth : la profondeur maximal de l'arbre à entraîner\n   \"\"\"",
        "\"\"\"Cette fonction split un jeu de données en fonction\n   de la valeur 'value' de la variable quantitative 'feature' passé en paramètre\n   INPUT \n    - feature : integer correspondant à la variable à séparer\n    - value : integer correspond à la valeur à laquelle séparer notre jeu de données\n    - dataset : pandas dataframe à séparer\n   OUTPUT \n    - left : dataframe avec les données où 'feature' est plus petit ou égale à 'value'\n    - right : dataframe avec les données où 'feature' est plus grande que 'value' \n   \"\"\"",
        "\"\"\"Cette fonction split un jeu de données en fonction\n   de la valeur 'value' de la variable qualitative'feature' passé en paramètre\n   INPUT \n    - feature : integer correspondant à la variable à séparer\n    - value : integer correspond à la valeur à laquelle séparer notre jeu de données\n    - dataset : pandas dataframe à séparer\n   OUTPUT \n    - left : dataframe avec les données où 'feature' est égale 'value'\n    - right : dataframe avec les données où 'feature' est différent 'value'\n   \"\"\""
    ],
    "functions": [
        "__quanti_split__",
        "__quali_split__"
    ],
    "classes": [
        "decision_tree_regressor"
    ]
}