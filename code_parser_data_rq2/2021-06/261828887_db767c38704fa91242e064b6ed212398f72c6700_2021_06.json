{
    "identifiers": [
        "com",
        "hedera",
        "services",
        "calc",
        "com",
        "hedera",
        "services",
        "usage",
        "state",
        "UsageAccumulator",
        "com",
        "hederahashgraph",
        "api",
        "proto",
        "java",
        "ExchangeRate",
        "com",
        "hederahashgraph",
        "api",
        "proto",
        "java",
        "FeeComponents",
        "com",
        "hederahashgraph",
        "api",
        "proto",
        "java",
        "FeeData",
        "com",
        "hederahashgraph",
        "fee",
        "FeeBuilder",
        "com",
        "hederahashgraph",
        "fee",
        "FeeObject",
        "com",
        "hedera",
        "services",
        "usage",
        "SingletonEstimatorUtils",
        "ESTIMATOR_UTILS",
        "com",
        "hederahashgraph",
        "fee",
        "FeeBuilder",
        "FEE_DIVISOR_FACTOR",
        "OVERFLOW_ERROR",
        "usage",
        "prices",
        "rate",
        "multiplier",
        "networkFeeTinycents",
        "networkFeeInTinycents",
        "usage",
        "prices",
        "getNetworkdata",
        "nodeFeeTinycents",
        "nodeFeeInTinycents",
        "usage",
        "prices",
        "getNodedata",
        "serviceFeeTinycents",
        "serviceFeeInTinycents",
        "usage",
        "prices",
        "getServicedata",
        "networkFee",
        "tinycentsToTinybars",
        "networkFeeTinycents",
        "rate",
        "multiplier",
        "nodeFee",
        "tinycentsToTinybars",
        "nodeFeeTinycents",
        "rate",
        "multiplier",
        "serviceFee",
        "tinycentsToTinybars",
        "serviceFeeTinycents",
        "rate",
        "multiplier",
        "networkFee",
        "nodeFee",
        "serviceFee",
        "OVERFLOW_ERROR",
        "nodeFee",
        "networkFee",
        "serviceFee",
        "amount",
        "rate",
        "product",
        "amount",
        "rate",
        "getHbarEquiv",
        "product",
        "FeeBuilder",
        "getTinybarsFromTinyCents",
        "rate",
        "amount",
        "product",
        "rate",
        "getCentEquiv",
        "usage",
        "networkPrices",
        "nominal",
        "safeAccumulateThree",
        "networkPrices",
        "getConstant",
        "usage",
        "getUniversalBpt",
        "networkPrices",
        "getBpt",
        "usage",
        "getNetworkVpt",
        "networkPrices",
        "getVpt",
        "usage",
        "getNetworkRbh",
        "networkPrices",
        "getRbh",
        "ESTIMATOR_UTILS",
        "nonDegenerateDiv",
        "nominal",
        "FEE_DIVISOR_FACTOR",
        "usage",
        "nodePrices",
        "nominal",
        "safeAccumulateFour",
        "nodePrices",
        "getConstant",
        "usage",
        "getUniversalBpt",
        "nodePrices",
        "getBpt",
        "usage",
        "getNodeBpr",
        "nodePrices",
        "getBpr",
        "usage",
        "getNodeSbpr",
        "nodePrices",
        "getSbpr",
        "usage",
        "getNodeVpt",
        "nodePrices",
        "getVpt",
        "ESTIMATOR_UTILS",
        "nonDegenerateDiv",
        "nominal",
        "FEE_DIVISOR_FACTOR",
        "usage",
        "servicePrices",
        "nominal",
        "safeAccumulateTwo",
        "servicePrices",
        "getConstant",
        "usage",
        "getServiceRbh",
        "servicePrices",
        "getRbh",
        "usage",
        "getServiceSbh",
        "servicePrices",
        "getSbh",
        "ESTIMATOR_UTILS",
        "nonDegenerateDiv",
        "nominal",
        "FEE_DIVISOR_FACTOR",
        "a",
        "b",
        "c",
        "d",
        "a",
        "b",
        "c",
        "d",
        "OVERFLOW_ERROR",
        "sum",
        "safeAccumulateThree",
        "a",
        "b",
        "c",
        "sum",
        "d",
        "sum",
        "OVERFLOW_ERROR",
        "sum",
        "a",
        "b",
        "c",
        "a",
        "b",
        "c",
        "OVERFLOW_ERROR",
        "sum",
        "safeAccumulateTwo",
        "a",
        "b",
        "sum",
        "c",
        "sum",
        "OVERFLOW_ERROR",
        "sum",
        "a",
        "b",
        "a",
        "b",
        "OVERFLOW_ERROR",
        "a",
        "OVERFLOW_ERROR",
        "b",
        "OVERFLOW_ERROR"
    ],
    "literals": [
        "\"A fee calculation step overflowed; \"",
        "\"the operation cannot be priced, and therefore cannot be performed\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* ‌\n * Hedera Services API Fees\n * ​\n * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC\n * ​\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ‍",
        "* A specialized fee calculator that throws an exception if any step of the\n * fee calculation overflows.\n *\n * (Because all prices and usage estimates are known to be non-negative,\n * checking for an overflow means just checking for a number less than zero.)",
        "* Returns the network, node, and services fees for an operation given four inputs.\n\t *\n\t * The first input to the calculation is a resource usage estimate in the form of\n\t * an instance of {@link UsageAccumulator}. (See the Javadoc on hat class for a\n\t * detailed description of resource types.)\n\t *\n\t * The second input is a {@code FeeData} instance that has the price of each\n\t * resource in units of 1/1000th of a tinycent.\n\t *\n\t * The third input is the active exchange rate between ℏ and ¢ (equivalently,\n\t * between tinybar and tinycent); and the final input is a multiplier that is\n\t * almost always one, except in cases of extreme congestion pricing.\n\t *\n\t * @param usage the resources used by an operation\n\t * @param prices the prices of those resources, in units of 1/1000th of a tinycent\n\t * @param rate the exchange rate between ℏ and ¢\n\t * @param multiplier a scale factor determined by congestion pricing\n\t * @throws IllegalArgumentException if any step of the calculation overflows",
        "These verbose accumulators signatures are to avoid any performance hit from varargs"
    ],
    "functions": [
        "FeeObject",
        "fees",
        "tinycentsToTinybars",
        "networkFeeInTinycents",
        "nodeFeeInTinycents",
        "serviceFeeInTinycents",
        "safeAccumulateFour",
        "safeAccumulateThree",
        "safeAccumulateTwo"
    ],
    "classes": [
        "OverflowCheckingCalc"
    ]
}