{
    "identifiers": [
        "Collections",
        "Generic",
        "Reflection",
        "Opc",
        "Ua",
        "IEncodeableFactory",
        "Type",
        "systemType",
        "ExpandedNodeId",
        "encodingId",
        "Type",
        "systemType",
        "Assembly",
        "assembly",
        "ExpandedNodeId",
        "typeId",
        "IReadOnlyDictionary",
        "ExpandedNodeId",
        "Type"
    ],
    "literals": [],
    "variables": [
        "SyncRoot",
        "InstanceId",
        "EncodeableTypes"
    ],
    "comments": [
        "Copyright (c) 1996-2020 The OPC Foundation. All rights reserved.\n   The source code in this file is covered under a dual-license scenario:\n     - RCL: for OPC Foundation members in good-standing\n     - GPL V2: everybody else\n   RCL license terms accompanied with this source code. See http://opcfoundation.org/License/RCL/1.00/\n   GNU General Public License as published by the Free Software Foundation;\n   version 2 of the License are accompanied with this source code. See http://opcfoundation.org/License/GPLv2\n   This source code is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.",
        "Creates encodeable objects based on the type id.",
        "</summary>",
        "<remarks>",
        "<para>",
        "This factory is used to store and retrieve underlying OPC UA system types.",
        "<br/></para>",
        "<para>",
        "You can manually add types. You can also import all types from a specified assembly.",
        "Once the types exist within the factory, these types can be then easily queried.",
        "<br/></para>",
        "</remarks>",
        "Returns the object used to synchronize access to the factory.",
        "</summary>",
        "<remarks>",
        "Returns the object used to synchronize access to the factory.",
        "</remarks>",
        "Returns a unique identifier for the table instance. Used to debug problems with shared tables.",
        "</summary>",
        "Adds an extension type to the factory.",
        "</summary>",
        "<remarks>",
        "Adds an extension type to the factory.",
        "</remarks>",
        "<param name=\"systemType\">The underlying system type to add to the factory</param>",
        "Associates an encodeable type with an encoding id.",
        "</summary>",
        "<param name=\"encodingId\">A NodeId for a Data Type Encoding node</param>",
        "<param name=\"systemType\">The system type to use for the specified encoding.</param>",
        "Adds all encodable types exported from an assembly to the factory.",
        "</summary>",
        "<remarks>",
        "<para>",
        "Adds all encodable types exported from an assembly to the factory.",
        "<br/></para>",
        "<para>",
        "This method uses reflection on the specified assembly to export all of the",
        "types the assembly exposes, and automatically adds all types that implement",
        "the <see cref=\"IEncodeable\"/> interface, to the factory.",
        "<br/></para>",
        "</remarks>",
        "<param name=\"assembly\">The assembly containing the types to add to the factory</param>",
        "Returns the system type for the specified type id.",
        "</summary>",
        "<remarks>",
        "Returns the system type for the specified type id.",
        "</remarks>",
        "<param name=\"typeId\">The type id to return the system-type of</param>",
        "The dictionary of encodeable types.",
        "</summary>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "AddEncodeableType",
        "AddEncodeableType",
        "AddEncodeableTypes",
        "Type",
        "GetSystemType"
    ],
    "classes": []
}