{
    "identifiers": [
        "io",
        "antmedia",
        "java",
        "util",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "java",
        "util",
        "org",
        "apache",
        "catalina",
        "util",
        "NetMask",
        "org",
        "bson",
        "types",
        "ObjectId",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Value",
        "org",
        "springframework",
        "context",
        "annotation",
        "PropertySource",
        "com",
        "fasterxml",
        "jackson",
        "annotation",
        "JsonIgnore",
        "com",
        "fasterxml",
        "jackson",
        "annotation",
        "JsonIgnoreProperties",
        "dev",
        "morphia",
        "annotations",
        "Entity",
        "dev",
        "morphia",
        "annotations",
        "Field",
        "dev",
        "morphia",
        "annotations",
        "Id",
        "dev",
        "morphia",
        "annotations",
        "Index",
        "dev",
        "morphia",
        "annotations",
        "Indexes",
        "dev",
        "morphia",
        "annotations",
        "NotSaved",
        "Entity",
        "Indexes",
        "Index",
        "fields",
        "Field",
        "PropertySource",
        "JsonIgnoreProperties",
        "ignoreUnknown",
        "JsonIgnore",
        "Id",
        "dbId",
        "PROPERTIES_FILE_PATH",
        "SETTINGS_ENCODING_SPECIFIC",
        "SETTINGS_ADD_DATE_TIME_TO_MP4_FILE_NAME",
        "SETTINGS_HLS_MUXING_ENABLED",
        "SETTINGS_DASH_MUXING_ENABLED",
        "SETTINGS_DASH_WINDOW_SIZE",
        "SETTINGS_DASH_EXTRA_WINDOW_SIZE",
        "SETTINGS_ENCODER_SETTINGS_STRING",
        "SETTINGS_HLS_LIST_SIZE",
        "SETTINGS_HLS_TIME",
        "SETTINGS_DASH_SEG_DURATION",
        "SETTINGS_DASH_FRAGMENT_DURATION",
        "SETTINGS_DASH_TARGET_LATENCY",
        "SETTINGS_WEBRTC_ENABLED",
        "SETTINGS_USE_ORIGINAL_WEBRTC_ENABLED",
        "SETTINGS_DELETE_HLS_FILES_ON_ENDED",
        "SETTINGS_DELETE_DASH_FILES_ON_ENDED",
        "SETTINGS_LISTENER_HOOK_URL",
        "SETTINGS_ACCEPT_ONLY_STREAMS_IN_DATA_STORE",
        "SETTINGS_TOKEN_CONTROL_ENABLED",
        "SETTINGS_PUBLISH_TOKEN_CONTROL_ENABLED",
        "SETTINGS_PLAY_TOKEN_CONTROL_ENABLED",
        "SETTINGS_TIME_TOKEN_SUBSCRIBER_ONLY",
        "SETTINGS_TIME_TOKEN_PERIOD",
        "SETTINGS_HLS_PLAY_LIST_TYPE",
        "FACEBOOK_CLIENT_ID",
        "FACEBOOK_CLIENT_SECRET",
        "PERISCOPE_CLIENT_ID",
        "PERISCOPE_CLIENT_SECRET",
        "YOUTUBE_CLIENT_ID",
        "YOUTUBE_CLIENT_SECRET",
        "SETTINGS_VOD_FOLDER",
        "SETTINGS_PREVIEW_OVERWRITE",
        "SETTINGS_STALKER_DB_SERVER",
        "SETTINGS_STALKER_DB_USER_NAME",
        "SETTINGS_STALKER_DB_PASSWORD",
        "SETTINGS_OBJECT_DETECTION_ENABLED",
        "SETTINGS_CREATE_PREVIEW_PERIOD",
        "SETTINGS_MP4_MUXING_ENABLED",
        "SETTINGS_WEBM_MUXING_ENABLED",
        "SETTINGS_STREAM_FETCHER_BUFFER_TIME",
        "SETTINGS_STREAM_FETCHER_RESTART_PERIOD",
        "SETTINGS_STREAM_FETCHER_AUTO_START",
        "SETTINGS_MUXER_FINISH_SCRIPT",
        "SETTINGS_WEBRTC_FRAME_RATE",
        "SETTINGS_HASH_CONTROL_PUBLISH_ENABLED",
        "SETTINGS_HASH_CONTROL_PLAY_ENABLED",
        "TOKEN_HASH_SECRET",
        "SETTINGS_WEBRTC_PORT_RANGE_MIN",
        "SETTINGS_WEBRTC_PORT_RANGE_MAX",
        "SETTINGS_WEBRTC_STUN_SERVER_URI",
        "SETTINGS_WEBRTC_TCP_CANDIDATE_ENABLED",
        "SETTINGS_WEBRTC_SDP_SEMANTICS",
        "SETTINGS_ENCODING_ENCODER_NAME",
        "SETTINGS_ENCODING_PRESET",
        "SETTINGS_ENCODING_PROFILE",
        "SETTINGS_ENCODING_LEVEL",
        "SETTINGS_ENCODING_RC",
        "SETTINGS_ENCODING_THREAD_COUNT",
        "SETTINGS_ENCODING_THREAD_TYPE",
        "SETTINGS_PREVIEW_HEIGHT",
        "SETTINGS_ENCODING_VP8_THREAD_COUNT",
        "SETTINGS_ENCODING_VP8_SPEED",
        "SETTINGS_ENCODING_VP8_DEADLINE",
        "SETTINGS_GENERATE_PREVIEW",
        "SETTINGS_REMOTE_ALLOWED_CIDR",
        "SETTINGS_WRITE_STATS_TO_DATASTORE",
        "SETTINGS_ENCODER_SELECTION_PREFERENCE",
        "SETTINGS_ALLOWED_PUBLISHER_IPS",
        "BEAN_NAME",
        "SETTINGS_EXCESSIVE_BANDWIDTH_THRESHOLD",
        "SETTINGS_EXCESSIVE_BANDWIDTH_CALL_THRESHOLD",
        "SETTINGS_PORT_ALLOCATOR_FLAGS",
        "SETTINGS_EXCESSIVE_BANDWIDTH_TRY_COUNT_BEFORE_SWITCH_BACK",
        "SETTINGS_EXCESSIVE_BANDWIDTH_ENABLED",
        "SETTINGS_EXCESSIVE_BANDWIDTH_PACKET_LOSS_DIFF_THRESHOLD_FOR_SWITCH_BACK",
        "SETTINGS_EXCESSIVE_BANDWIDTH_RTT_MEASUREMENT_THRESHOLD_FOR_SWITCH_BACK",
        "SETTINGS_REPLACE_CANDIDATE_ADDR_WITH_SERVER_ADDR",
        "SETTINGS_DB_APP_NAME",
        "SETTINGS_ENCODING_TIMEOUT",
        "SETTINGS_WEBRTC_CLIENT_START_TIMEOUT",
        "SETTINGS_DEFAULT_DECODERS_ENABLED",
        "SETTINGS_COLLECT_SOCIAL_MEDIA_ACTIVITY_ENABLED",
        "SETTINGS_HTTP_FORWARDING_EXTENSION",
        "SETTINGS_HTTP_FORWARDING_BASE_URL",
        "SETTINGS_RTMP_MAX_ANALYZE_DURATION_MS",
        "SETTINGS_DISABLE_IPV6_CANDIDATES",
        "SETTINGS_RTSP_PULL_TRANSPORT_TYPE",
        "SETTINGS_H264_ENABLED",
        "SETTINGS_VP8_ENABLED",
        "SETTINGS_H265_ENABLED",
        "SETTINGS_MAX_FPS_ACCEPT",
        "SETTINGS_DATA_CHANNEL_ENABLED",
        "SETTINGS_DATA_CHANNEL_PLAYER_DISTRIBUTION",
        "SETTINGS_MAX_RESOLUTION_ACCEPT",
        "SETTINGS_MAX_BITRATE_ACCEPT",
        "SETTINGS_AUDIO_BITRATE_SFU",
        "DATA_CHANNEL_PLAYER_TO_NONE",
        "DATA_CHANNEL_PLAYER_TO_PUBLISHER",
        "DATA_CHANNEL_PLAYER_TO_ALL",
        "SETTINGS_HLS_FLAGS",
        "SETTINGS_RTMP_INGEST_BUFFER_TIME_MS",
        "SETTINGS_ACCEPT_ONLY_ROOMS_IN_DATA_STORE",
        "SETTINGS_DATA_CHANNEL_WEBHOOK_URL",
        "SDP_SEMANTICS_PLAN_B",
        "SDP_SEMANTICS_UNIFIED_PLAN",
        "SETTINGS_HEIGHT_RTMP_FORWARDING",
        "SETTINGS_AAC_ENCODING_ENABLED",
        "SETTINGS_GOP_SIZE",
        "SETTINGS_CONSTANT_RATE_FACTOR",
        "SETTINGS_WEBRTC_VIEWER_LIMIT",
        "SETTINGS_JWT_SECRET_KEY",
        "SETTINGS_JWT_CONTROL_ENABLED",
        "SETTINGS_IP_FILTER_ENABLED",
        "SETTINGS_INGESTING_STREAM_LIMIT",
        "SETTINGS_WEBRTC_KEYFRAME_TIME",
        "SETTINGS_JWT_STREAM_SECRET_KEY",
        "SETTINGS_PLAY_JWT_CONTROL_ENABLED",
        "SETTINGS_PUBLISH_JWT_CONTROL_ENABLED",
        "SETTINGS_DASH_ENABLE_LOW_LATENCY",
        "SETTINGS_HLS_ENABLE_LOW_LATENCY",
        "SETTINGS_HLS_ENABLED_VIA_DASH_LOW_LATENCY",
        "SETTINGS_USE_TIMELINE_DASH_MUXING",
        "SETTINGS_DASH_HTTP_STREAMING",
        "SETTINGS_S3_STREAMS_FOLDER_PATH",
        "SETTINGS_S3_PREVIEWS_FOLDER_PATH",
        "SETTINGS_DASH_HTTP_ENDPOINT",
        "SETTINGS_FORCE_DECODING",
        "SETTINGS_S3_RECORDING_ENABLED",
        "SETTINGS_S3_ACCESS_KEY",
        "SETTINGS_S3_SECRET_KEY",
        "SETTINGS_S3_REGION_NAME",
        "SETTINGS_S3_BUCKET_NAME",
        "SETTINGS_S3_ENDPOINT",
        "SETTINGS_ENABLE_TIME_TOKEN_PLAY",
        "SETTINGS_ENABLE_TIME_TOKEN_PUBLISH",
        "SETTINGS_HLS_ENCRYPTION_KEY_INFO_FILE",
        "JsonIgnore",
        "NotSaved",
        "allowedCIDRList",
        "cidrLock",
        "Value",
        "SETTINGS_REMOTE_ALLOWED_CIDR",
        "remoteAllowedCIDR",
        "Value",
        "SETTINGS_MP4_MUXING_ENABLED",
        "mp4MuxingEnabled",
        "Value",
        "SETTINGS_WEBM_MUXING_ENABLED",
        "webMMuxingEnabled",
        "Value",
        "SETTINGS_ADD_DATE_TIME_TO_MP4_FILE_NAME",
        "addDateTimeToMp4FileName",
        "Value",
        "SETTINGS_HLS_MUXING_ENABLED",
        "hlsMuxingEnabled",
        "Value",
        "SETTINGS_ENCODER_SETTINGS_STRING",
        "encoderSettingsString",
        "Value",
        "SETTINGS_HLS_LIST_SIZE",
        "hlsListSize",
        "Value",
        "SETTINGS_HLS_TIME",
        "hlsTime",
        "Value",
        "SETTINGS_DASH_SEG_DURATION",
        "dashSegDuration",
        "Value",
        "SETTINGS_DASH_FRAGMENT_DURATION",
        "dashFragmentDuration",
        "Value",
        "SETTINGS_DASH_TARGET_LATENCY",
        "targetLatency",
        "Value",
        "SETTINGS_DASH_WINDOW_SIZE",
        "dashWindowSize",
        "Value",
        "SETTINGS_DASH_EXTRA_WINDOW_SIZE",
        "dashExtraWindowSize",
        "Value",
        "SETTINGS_DASH_ENABLE_LOW_LATENCY",
        "lLDashEnabled",
        "Value",
        "SETTINGS_HLS_ENABLE_LOW_LATENCY",
        "lLHLSEnabled",
        "Value",
        "SETTINGS_HLS_ENABLED_VIA_DASH_LOW_LATENCY",
        "hlsEnabledViaDash",
        "Value",
        "SETTINGS_USE_TIMELINE_DASH_MUXING",
        "useTimelineDashMuxing",
        "Value",
        "SETTINGS_WEBRTC_ENABLED",
        "webRTCEnabled",
        "Value",
        "SETTINGS_USE_ORIGINAL_WEBRTC_ENABLED",
        "useOriginalWebRTCEnabled",
        "Value",
        "SETTINGS_DELETE_HLS_FILES_ON_ENDED",
        "deleteHLSFilesOnEnded",
        "Value",
        "SETTINGS_DELETE_DASH_FILES_ON_ENDED",
        "deleteDASHFilesOnEnded",
        "Value",
        "TOKEN_HASH_SECRET",
        "tokenHashSecret",
        "Value",
        "SETTINGS_HASH_CONTROL_PUBLISH_ENABLED",
        "hashControlPublishEnabled",
        "Value",
        "SETTINGS_HASH_CONTROL_PLAY_ENABLED",
        "hashControlPlayEnabled",
        "Value",
        "SETTINGS_LISTENER_HOOK_URL",
        "listenerHookURL",
        "Value",
        "SETTINGS_ACCEPT_ONLY_STREAMS_IN_DATA_STORE",
        "acceptOnlyStreamsInDataStore",
        "Value",
        "SETTINGS_ACCEPT_ONLY_ROOMS_IN_DATA_STORE",
        "acceptOnlyRoomsInDataStore",
        "Value",
        "SETTINGS_PUBLISH_TOKEN_CONTROL_ENABLED",
        "SETTINGS_TOKEN_CONTROL_ENABLED",
        "publishTokenControlEnabled",
        "Value",
        "SETTINGS_PLAY_TOKEN_CONTROL_ENABLED",
        "SETTINGS_TOKEN_CONTROL_ENABLED",
        "playTokenControlEnabled",
        "Value",
        "SETTINGS_TIME_TOKEN_SUBSCRIBER_ONLY",
        "timeTokenSubscriberOnly",
        "Value",
        "SETTINGS_ENABLE_TIME_TOKEN_PLAY",
        "enableTimeTokenForPlay",
        "Value",
        "SETTINGS_ENABLE_TIME_TOKEN_PUBLISH",
        "enableTimeTokenForPublish",
        "Value",
        "SETTINGS_TIME_TOKEN_PERIOD",
        "timeTokenPeriod",
        "Value",
        "SETTINGS_HLS_PLAY_LIST_TYPE",
        "hlsPlayListType",
        "Value",
        "FACEBOOK_CLIENT_ID",
        "facebookClientId",
        "Value",
        "FACEBOOK_CLIENT_SECRET",
        "facebookClientSecret",
        "Value",
        "PERISCOPE_CLIENT_ID",
        "periscopeClientId",
        "Value",
        "PERISCOPE_CLIENT_SECRET",
        "periscopeClientSecret",
        "Value",
        "YOUTUBE_CLIENT_ID",
        "youtubeClientId",
        "Value",
        "YOUTUBE_CLIENT_SECRET",
        "youtubeClientSecret",
        "Value",
        "SETTINGS_VOD_FOLDER",
        "vodFolder",
        "Value",
        "SETTINGS_PREVIEW_OVERWRITE",
        "previewOverwrite",
        "Value",
        "SETTINGS_STALKER_DB_SERVER",
        "stalkerDBServer",
        "Value",
        "SETTINGS_STALKER_DB_USER_NAME",
        "stalkerDBUsername",
        "Value",
        "SETTINGS_STALKER_DB_PASSWORD",
        "stalkerDBPassword",
        "Value",
        "SETTINGS_OBJECT_DETECTION_ENABLED",
        "objectDetectionEnabled",
        "Value",
        "SETTINGS_CREATE_PREVIEW_PERIOD",
        "createPreviewPeriod",
        "Value",
        "SETTINGS_STREAM_FETCHER_RESTART_PERIOD",
        "restartStreamFetcherPeriod",
        "Value",
        "SETTINGS_STREAM_FETCHER_AUTO_START",
        "startStreamFetcherAutomatically",
        "streamFetcherBufferTime",
        "Value",
        "SETTINGS_HLS_FLAGS",
        "hlsflags",
        "mySqlClientPath",
        "Value",
        "SETTINGS_MUXER_FINISH_SCRIPT",
        "muxerFinishScript",
        "Value",
        "SETTINGS_WEBRTC_FRAME_RATE",
        "webRTCFrameRate",
        "Value",
        "SETTINGS_WEBRTC_PORT_RANGE_MIN",
        "webRTCPortRangeMin",
        "Value",
        "SETTINGS_WEBRTC_PORT_RANGE_MAX",
        "webRTCPortRangeMax",
        "Value",
        "SETTINGS_WEBRTC_STUN_SERVER_URI",
        "stunServerURI",
        "Value",
        "SETTINGS_WEBRTC_TCP_CANDIDATE_ENABLED",
        "webRTCTcpCandidatesEnabled",
        "Value",
        "SETTINGS_WEBRTC_SDP_SEMANTICS",
        "SDP_SEMANTICS_PLAN_B",
        "webRTCSdpSemantics",
        "Value",
        "SETTINGS_PORT_ALLOCATOR_FLAGS",
        "portAllocatorFlags",
        "Value",
        "SETTINGS_COLLECT_SOCIAL_MEDIA_ACTIVITY_ENABLED",
        "collectSocialMediaActivity",
        "Value",
        "SETTINGS_ENCODING_ENCODER_NAME",
        "encoderName",
        "Value",
        "SETTINGS_ENCODING_PRESET",
        "encoderPreset",
        "Value",
        "SETTINGS_ENCODING_PROFILE",
        "encoderProfile",
        "Value",
        "SETTINGS_ENCODING_LEVEL",
        "encoderLevel",
        "Value",
        "SETTINGS_ENCODING_RC",
        "encoderRc",
        "Value",
        "SETTINGS_ENCODING_SPECIFIC",
        "encoderSpecific",
        "Value",
        "SETTINGS_ENCODING_THREAD_COUNT",
        "encoderThreadCount",
        "Value",
        "SETTINGS_ENCODING_THREAD_TYPE",
        "encoderThreadType",
        "Value",
        "SETTINGS_ENCODING_VP8_SPEED",
        "vp8EncoderSpeed",
        "Value",
        "SETTINGS_ENCODING_VP8_DEADLINE",
        "vp8EncoderDeadline",
        "Value",
        "SETTINGS_ENCODING_VP8_THREAD_COUNT",
        "vp8EncoderThreadCount",
        "Value",
        "SETTINGS_PREVIEW_HEIGHT",
        "previewHeight",
        "Value",
        "SETTINGS_GENERATE_PREVIEW",
        "generatePreview",
        "Value",
        "SETTINGS_WRITE_STATS_TO_DATASTORE",
        "writeStatsToDatastore",
        "Value",
        "SETTINGS_ENCODER_SELECTION_PREFERENCE",
        "encoderSelectionPreference",
        "Value",
        "SETTINGS_ALLOWED_PUBLISHER_IPS",
        "allowedPublisherCIDR",
        "Value",
        "SETTINGS_EXCESSIVE_BANDWIDTH_THRESHOLD",
        "excessiveBandwidthValue",
        "Value",
        "SETTINGS_EXCESSIVE_BANDWIDTH_CALL_THRESHOLD",
        "excessiveBandwidthCallThreshold",
        "Value",
        "SETTINGS_EXCESSIVE_BANDWIDTH_TRY_COUNT_BEFORE_SWITCH_BACK",
        "excessiveBandwithTryCountBeforeSwitchback",
        "Value",
        "SETTINGS_EXCESSIVE_BANDWIDTH_ENABLED",
        "excessiveBandwidthAlgorithmEnabled",
        "Value",
        "SETTINGS_EXCESSIVE_BANDWIDTH_PACKET_LOSS_DIFF_THRESHOLD_FOR_SWITCH_BACK",
        "packetLossDiffThresholdForSwitchback",
        "Value",
        "SETTINGS_EXCESSIVE_BANDWIDTH_RTT_MEASUREMENT_THRESHOLD_FOR_SWITCH_BACK",
        "rttMeasurementDiffThresholdForSwitchback",
        "Value",
        "SETTINGS_REPLACE_CANDIDATE_ADDR_WITH_SERVER_ADDR",
        "replaceCandidateAddrWithServerAddr",
        "Value",
        "SETTINGS_DB_APP_NAME",
        "appName",
        "Value",
        "SETTINGS_ENCODING_TIMEOUT",
        "encodingTimeout",
        "Value",
        "SETTINGS_WEBRTC_CLIENT_START_TIMEOUT",
        "webRTCClientStartTimeoutMs",
        "Deprecated",
        "Value",
        "SETTINGS_DEFAULT_DECODERS_ENABLED",
        "defaultDecodersEnabled",
        "updateTime",
        "encoderSettings",
        "Value",
        "SETTINGS_HTTP_FORWARDING_EXTENSION",
        "httpForwardingExtension",
        "Value",
        "SETTINGS_HTTP_FORWARDING_BASE_URL",
        "httpForwardingBaseURL",
        "Value",
        "SETTINGS_RTMP_MAX_ANALYZE_DURATION_MS",
        "maxAnalyzeDurationMS",
        "Value",
        "SETTINGS_DISABLE_IPV6_CANDIDATES",
        "disableIPv6Candidates",
        "Value",
        "SETTINGS_RTSP_PULL_TRANSPORT_TYPE",
        "rtspPullTransportType",
        "Value",
        "SETTINGS_MAX_FPS_ACCEPT",
        "maxFpsAccept",
        "Value",
        "SETTINGS_MAX_RESOLUTION_ACCEPT",
        "maxResolutionAccept",
        "Value",
        "SETTINGS_MAX_BITRATE_ACCEPT",
        "maxBitrateAccept",
        "JsonIgnore",
        "NotSaved",
        "allowedPublisherCIDRList",
        "Value",
        "SETTINGS_H264_ENABLED",
        "h264Enabled",
        "Value",
        "SETTINGS_VP8_ENABLED",
        "vp8Enabled",
        "Value",
        "SETTINGS_H265_ENABLED",
        "h265Enabled",
        "Value",
        "SETTINGS_DATA_CHANNEL_ENABLED",
        "dataChannelEnabled",
        "Value",
        "SETTINGS_DATA_CHANNEL_PLAYER_DISTRIBUTION",
        "DATA_CHANNEL_PLAYER_TO_ALL",
        "dataChannelPlayerDistribution",
        "Value",
        "SETTINGS_RTMP_INGEST_BUFFER_TIME_MS",
        "rtmpIngestBufferTimeMs",
        "Value",
        "SETTINGS_DATA_CHANNEL_WEBHOOK_URL",
        "dataChannelWebHookURL",
        "h265EncoderPreset",
        "h265EncoderProfile",
        "h265EncoderRc",
        "h265EncoderSpecific",
        "h265EncoderLevel",
        "Value",
        "SETTINGS_HEIGHT_RTMP_FORWARDING",
        "heightRtmpForwarding",
        "Value",
        "SETTINGS_AUDIO_BITRATE_SFU",
        "audioBitrateSFU",
        "Value",
        "SETTINGS_DASH_MUXING_ENABLED",
        "dashMuxingEnabled",
        "Value",
        "SETTINGS_AAC_ENCODING_ENABLED",
        "aacEncodingEnabled",
        "Value",
        "SETTINGS_GOP_SIZE",
        "gopSize",
        "Value",
        "SETTINGS_CONSTANT_RATE_FACTOR",
        "constantRateFactor",
        "Value",
        "SETTINGS_WEBRTC_VIEWER_LIMIT",
        "webRTCViewerLimit",
        "toBeDeleted",
        "Value",
        "SETTINGS_JWT_SECRET_KEY",
        "jwtSecretKey",
        "Value",
        "SETTINGS_JWT_CONTROL_ENABLED",
        "jwtControlEnabled",
        "Value",
        "SETTINGS_IP_FILTER_ENABLED",
        "ipFilterEnabled",
        "Value",
        "SETTINGS_INGESTING_STREAM_LIMIT",
        "ingestingStreamLimit",
        "Value",
        "SETTINGS_WEBRTC_KEYFRAME_TIME",
        "webRTCKeyframeTime",
        "Value",
        "SETTINGS_JWT_STREAM_SECRET_KEY",
        "jwtStreamSecretKey",
        "Value",
        "SETTINGS_PUBLISH_JWT_CONTROL_ENABLED",
        "publishJwtControlEnabled",
        "Value",
        "SETTINGS_PLAY_JWT_CONTROL_ENABLED",
        "playJwtControlEnabled",
        "Value",
        "SETTINGS_DASH_HTTP_STREAMING",
        "dashHttpStreaming",
        "Value",
        "SETTINGS_S3_STREAMS_FOLDER_PATH",
        "s3StreamsFolderPath",
        "Value",
        "SETTINGS_S3_PREVIEWS_FOLDER_PATH",
        "s3PreviewsFolderPath",
        "Value",
        "SETTINGS_DASH_HTTP_ENDPOINT",
        "dashHttpEndpoint",
        "Value",
        "SETTINGS_FORCE_DECODING",
        "forceDecoding",
        "Value",
        "SETTINGS_S3_RECORDING_ENABLED",
        "s3RecordingEnabled",
        "Value",
        "SETTINGS_S3_ACCESS_KEY",
        "s3AccessKey",
        "Value",
        "SETTINGS_S3_SECRET_KEY",
        "s3SecretKey",
        "Value",
        "SETTINGS_S3_BUCKET_NAME",
        "s3BucketName",
        "Value",
        "SETTINGS_S3_REGION_NAME",
        "s3RegionName",
        "Value",
        "SETTINGS_S3_ENDPOINT",
        "s3Endpoint",
        "Value",
        "SETTINGS_HLS_ENCRYPTION_KEY_INFO_FILE",
        "hlsEncryptionKeyInfoFile",
        "writeStatsToDatastore",
        "writeStatsToDatastore",
        "writeStatsToDatastore",
        "writeStatsToDatastore",
        "addDateTimeToMp4FileName",
        "addDateTimeToMp4FileName",
        "addDateTimeToMp4FileName",
        "addDateTimeToMp4FileName",
        "mp4MuxingEnabled",
        "mp4MuxingEnabled",
        "mp4MuxingEnabled",
        "mp4MuxingEnabled",
        "hlsMuxingEnabled",
        "hlsMuxingEnabled",
        "hlsMuxingEnabled",
        "hlsMuxingEnabled",
        "dashMuxingEnabled",
        "dashMuxingEnabled",
        "dashMuxingEnabled",
        "dashMuxingEnabled",
        "hlsPlayListType",
        "hlsPlayListType",
        "hlsPlayListType",
        "hlsPlayListType",
        "hlsTime",
        "hlsTime",
        "hlsTime",
        "hlsTime",
        "hlsListSize",
        "hlsListSize",
        "hlsListSize",
        "hlsListSize",
        "webRTCEnabled",
        "webRTCEnabled",
        "webRTCEnabled",
        "webRTCEnabled",
        "encoderSettingsList",
        "encoderSettingsList",
        "encoderSettingsString",
        "encoderSettings",
        "encoderSettingsList",
        "encoderSettingsString",
        "length",
        "encoderSettingsString",
        "encoderSettingsString",
        "encoderSettings",
        "getHeight",
        "encoderSettings",
        "getVideoBitrate",
        "encoderSettings",
        "getAudioBitrate",
        "encoderSettingsString",
        "encoderSettingsString",
        "encoderSettingsString",
        "values",
        "encoderSettingsString",
        "split",
        "encoderSettingsList",
        "values",
        "length",
        "i",
        "i",
        "values",
        "length",
        "i",
        "height",
        "parseInt",
        "values",
        "i",
        "i",
        "videoBitrate",
        "parseInt",
        "values",
        "i",
        "i",
        "audioBitrate",
        "parseInt",
        "values",
        "i",
        "encoderSettingsList",
        "add",
        "height",
        "videoBitrate",
        "audioBitrate",
        "encoderSettingsList",
        "encoderSettingsString",
        "encodersStr2List",
        "encoderSettingsString",
        "settings",
        "encoderSettingsString",
        "encodersList2Str",
        "settings",
        "encoderSettings",
        "settings",
        "encoderSettingsString",
        "encoderSettingsString",
        "encoderSettingsString",
        "deleteHLSFilesOnEnded",
        "deleteHLSFilesOnEnded",
        "deleteHLSFilesOnEnded",
        "deleteHLSFilesOnEnded",
        "listenerHookURL",
        "listenerHookURL",
        "listenerHookURL",
        "listenerHookURL",
        "acceptOnlyStreamsInDataStore",
        "acceptOnlyStreamsInDataStore",
        "acceptOnlyStreamsInDataStore",
        "acceptOnlyStreamsInDataStore",
        "acceptOnlyRoomsInDataStore",
        "acceptOnlyRoomsInDataStore",
        "acceptOnlyRoomsInDataStore",
        "acceptOnlyRoomsInDataStore",
        "objectDetectionEnabled",
        "objectDetectionEnabled",
        "objectDetectionEnabled",
        "objectDetectionEnabled",
        "youtubeClientSecret",
        "youtubeClientSecret",
        "youtubeClientSecret",
        "youtubeClientSecret",
        "youtubeClientId",
        "youtubeClientId",
        "youtubeClientId",
        "youtubeClientId",
        "periscopeClientSecret",
        "periscopeClientSecret",
        "periscopeClientSecret",
        "periscopeClientSecret",
        "periscopeClientId",
        "periscopeClientId",
        "periscopeClientId",
        "periscopeClientId",
        "facebookClientSecret",
        "facebookClientSecret",
        "facebookClientSecret",
        "facebookClientSecret",
        "facebookClientId",
        "facebookClientId",
        "facebookClientId",
        "facebookClientId",
        "vodFolder",
        "vodFolder",
        "vodFolder",
        "vodFolder",
        "createPreviewPeriod",
        "period",
        "createPreviewPeriod",
        "period",
        "previewOverwrite",
        "previewOverwrite",
        "previewOverwrite",
        "previewOverwrite",
        "stalkerDBServer",
        "stalkerDBServer",
        "stalkerDBServer",
        "stalkerDBServer",
        "stalkerDBUsername",
        "stalkerDBUsername",
        "stalkerDBUsername",
        "stalkerDBUsername",
        "stalkerDBPassword",
        "stalkerDBPassword",
        "stalkerDBPassword",
        "stalkerDBPassword",
        "restartStreamFetcherPeriod",
        "restartStreamFetcherPeriod",
        "restartStreamFetcherPeriod",
        "restartStreamFetcherPeriod",
        "streamFetcherBufferTime",
        "streamFetcherBufferTime",
        "streamFetcherBufferTime",
        "streamFetcherBufferTime",
        "hlsflags",
        "hlsflags",
        "hlsflags",
        "hlsflags",
        "mySqlClientPath",
        "mySqlClientPath",
        "mySqlClientPath",
        "mySqlClientPath",
        "publishTokenControlEnabled",
        "publishTokenControlEnabled",
        "publishTokenControlEnabled",
        "publishTokenControlEnabled",
        "playTokenControlEnabled",
        "playTokenControlEnabled",
        "playTokenControlEnabled",
        "playTokenControlEnabled",
        "timeTokenSubscriberOnly",
        "timeTokenSubscriberOnly",
        "timeTokenSubscriberOnly",
        "timeTokenSubscriberOnly",
        "enableTimeTokenForPlay",
        "enableTimeTokenForPlay",
        "enableTimeTokenForPlay",
        "enableTimeTokenForPlay",
        "enableTimeTokenForPublish",
        "enableTimeTokenForPublish",
        "enableTimeTokenForPublish",
        "enableTimeTokenForPublish",
        "muxerFinishScript",
        "muxerFinishScript",
        "muxerFinishScript",
        "muxerFinishScript",
        "webRTCFrameRate",
        "webRTCFrameRate",
        "webRTCFrameRate",
        "webRTCFrameRate",
        "collectSocialMediaActivity",
        "collectSocialMediaActivity",
        "collectSocialMediaActivity",
        "collectSocialMediaActivity",
        "tokenHashSecret",
        "tokenHashSecret",
        "tokenHashSecret",
        "tokenHashSecret",
        "hashControlPlayEnabled",
        "hashControlPlayEnabled",
        "hashControlPlayEnabled",
        "hashControlPlayEnabled",
        "hashControlPublishEnabled",
        "hashControlPublishEnabled",
        "hashControlPublishEnabled",
        "hashControlPublishEnabled",
        "mp4MuxingEnabled",
        "addDateTimeToMp4FileName",
        "hlsMuxingEnabled",
        "hlsListSize",
        "hlsTime",
        "webRTCEnabled",
        "deleteHLSFilesOnEnded",
        "deleteDASHFilesOnEnded",
        "acceptOnlyStreamsInDataStore",
        "publishTokenControlEnabled",
        "playTokenControlEnabled",
        "timeTokenSubscriberOnly",
        "enableTimeTokenForPlay",
        "enableTimeTokenForPublish",
        "hlsPlayListType",
        "previewOverwrite",
        "objectDetectionEnabled",
        "createPreviewPeriod",
        "restartStreamFetcherPeriod",
        "webRTCFrameRate",
        "hashControlPlayEnabled",
        "hashControlPublishEnabled",
        "tokenHashSecret",
        "encoderSettingsString",
        "remoteAllowedCIDR",
        "aacEncodingEnabled",
        "ipFilterEnabled",
        "ingestingStreamLimit",
        "webRTCPortRangeMax",
        "webRTCPortRangeMax",
        "webRTCPortRangeMax",
        "webRTCPortRangeMax",
        "webRTCPortRangeMin",
        "webRTCPortRangeMin",
        "webRTCPortRangeMin",
        "webRTCPortRangeMin",
        "stunServerURI",
        "stunServerURI",
        "stunServerURI",
        "stunServerURI",
        "webRTCTcpCandidatesEnabled",
        "webRTCTcpCandidatesEnabled",
        "webRTCTcpCandidatesEnabled",
        "webRTCTcpCandidatesEnabled",
        "encoderName",
        "encoderName",
        "encoderName",
        "encoderName",
        "encoderPreset",
        "encoderPreset",
        "encoderPreset",
        "encoderPreset",
        "encoderProfile",
        "encoderProfile",
        "encoderProfile",
        "encoderProfile",
        "encoderLevel",
        "encoderLevel",
        "encoderLevel",
        "encoderLevel",
        "encoderRc",
        "encoderRc",
        "encoderRc",
        "encoderRc",
        "encoderSpecific",
        "encoderSpecific",
        "encoderSpecific",
        "encoderSpecific",
        "previewHeight",
        "previewHeight",
        "previewHeight",
        "previewHeight",
        "useOriginalWebRTCEnabled",
        "useOriginalWebRTCEnabled",
        "useOriginalWebRTCEnabled",
        "useOriginalWebRTCEnabled",
        "cidrLock",
        "remoteAllowedCIDR",
        "remoteAllowedCIDR",
        "cidrLock",
        "remoteAllowedCIDR",
        "remoteAllowedCIDR",
        "allowedCIDRList",
        "fillFromInput",
        "remoteAllowedCIDR",
        "allowedCIDRList",
        "cidrLock",
        "allowedCIDRList",
        "isEmpty",
        "fillFromInput",
        "remoteAllowedCIDR",
        "allowedCIDRList",
        "allowedCIDRList",
        "allowedPublisherCIDR",
        "allowedPublisherCIDR",
        "cidrLock",
        "allowedPublisherCIDR",
        "allowedPublisherCIDR",
        "allowedPublisherCIDRList",
        "fillFromInput",
        "allowedPublisherCIDR",
        "allowedPublisherCIDRList",
        "cidrLock",
        "allowedPublisherCIDRList",
        "isEmpty",
        "fillFromInput",
        "allowedPublisherCIDR",
        "allowedPublisherCIDRList",
        "allowedPublisherCIDRList",
        "input",
        "target",
        "target",
        "clear",
        "input",
        "input",
        "isEmpty",
        "Collections",
        "emptyList",
        "messages",
        "nm",
        "s",
        "input",
        "split",
        "nm",
        "s",
        "target",
        "add",
        "nm",
        "e",
        "messages",
        "add",
        "s",
        "e",
        "getMessage",
        "Collections",
        "unmodifiableList",
        "messages",
        "encoderSelectionPreference",
        "encoderSelectionPreference",
        "encoderSelectionPreference",
        "encoderSelectionPreference",
        "excessiveBandwidthCallThreshold",
        "excessiveBandwidthCallThreshold",
        "excessiveBandwidthCallThreshold",
        "excessiveBandwidthCallThreshold",
        "excessiveBandwidthValue",
        "excessiveBandwidthValue",
        "excessiveBandwidthValue",
        "excessiveBandwidthValue",
        "portAllocatorFlags",
        "flags",
        "portAllocatorFlags",
        "flags",
        "excessiveBandwithTryCountBeforeSwitchback",
        "excessiveBandwidthAlgorithmEnabled",
        "packetLossDiffThresholdForSwitchback",
        "rttMeasurementDiffThresholdForSwitchback",
        "excessiveBandwithTryCountBeforeSwitchback",
        "excessiveBandwithTryCountBeforeSwitchback",
        "excessiveBandwithTryCountBeforeSwitchback",
        "excessiveBandwidthAlgorithmEnabled",
        "excessiveBandwidthAlgorithmEnabled",
        "excessiveBandwidthAlgorithmEnabled",
        "packetLossDiffThresholdForSwitchback",
        "packetLossDiffThresholdForSwitchback",
        "packetLossDiffThresholdForSwitchback",
        "rttMeasurementDiffThresholdForSwitchback",
        "rttMeasurementDiffThresholdForSwitchback",
        "rttMeasurementDiffThresholdForSwitchback",
        "replaceCandidateAddrWithServerAddr",
        "replaceCandidateAddrWithServerAddr",
        "replaceCandidateAddrWithServerAddr",
        "replaceCandidateAddrWithServerAddr",
        "updateTime",
        "updateTime",
        "updateTime",
        "updateTime",
        "appName",
        "appName",
        "appName",
        "appName",
        "encodingTimeout",
        "encodingTimeout",
        "encodingTimeout",
        "encodingTimeout",
        "defaultDecodersEnabled",
        "defaultDecodersEnabled",
        "defaultDecodersEnabled",
        "defaultDecodersEnabled",
        "httpForwardingExtension",
        "httpForwardingExtension",
        "httpForwardingExtension",
        "httpForwardingExtension",
        "httpForwardingBaseURL",
        "httpForwardingBaseURL",
        "httpForwardingBaseURL",
        "httpForwardingBaseURL",
        "maxAnalyzeDurationMS",
        "maxAnalyzeDurationMS",
        "maxAnalyzeDurationMS",
        "maxAnalyzeDurationMS",
        "generatePreview",
        "generatePreview",
        "generatePreview",
        "generatePreview",
        "disableIPv6Candidates",
        "disableIPv6Candidates",
        "disableIPv6Candidates",
        "disableIPv6Candidates",
        "rtspPullTransportType",
        "rtspPullTransportType",
        "rtspPullTransportType",
        "rtspPullTransportType",
        "maxResolutionAccept",
        "maxResolutionAccept",
        "maxResolutionAccept",
        "maxResolutionAccept",
        "h264Enabled",
        "h264Enabled",
        "h264Enabled",
        "h264Enabled",
        "vp8Enabled",
        "vp8Enabled",
        "vp8Enabled",
        "vp8Enabled",
        "h265Enabled",
        "h265Enabled",
        "h265Enabled",
        "h265Enabled",
        "dataChannelEnabled",
        "dataChannelEnabled",
        "dataChannelEnabled",
        "dataChannelEnabled",
        "dataChannelPlayerDistribution",
        "dataChannelPlayerDistribution",
        "dataChannelPlayerDistribution",
        "dataChannelPlayerDistribution",
        "rtmpIngestBufferTimeMs",
        "rtmpIngestBufferTimeMs",
        "rtmpIngestBufferTimeMs",
        "rtmpIngestBufferTimeMs",
        "dataChannelWebHookURL",
        "dataChannelWebHookURL",
        "dataChannelWebHookURL",
        "dataChannelWebHookURL",
        "encoderThreadCount",
        "encoderThreadCount",
        "encoderThreadCount",
        "encoderThreadCount",
        "encoderThreadType",
        "encoderThreadType",
        "encoderThreadType",
        "encoderThreadType",
        "webRTCClientStartTimeoutMs",
        "webRTCClientStartTimeout",
        "webRTCClientStartTimeoutMs",
        "webRTCClientStartTimeout",
        "h265EncoderProfile",
        "h265EncoderPreset",
        "h265EncoderLevel",
        "h265EncoderSpecific",
        "h265EncoderRc",
        "encoderLevel",
        "h265EncoderLevel",
        "encoderLevel",
        "preset",
        "h265EncoderPreset",
        "preset",
        "profile",
        "h265EncoderProfile",
        "profile",
        "encoderRc",
        "h265EncoderRc",
        "encoderRc",
        "encoderSpecific",
        "h265EncoderSpecific",
        "encoderSpecific",
        "webMMuxingEnabled",
        "webMMuxingEnabled",
        "webMMuxingEnabled",
        "webMMuxingEnabled",
        "vp8EncoderSpeed",
        "vp8EncoderSpeed",
        "vp8EncoderSpeed",
        "vp8EncoderSpeed",
        "vp8EncoderDeadline",
        "vp8EncoderDeadline",
        "vp8EncoderDeadline",
        "vp8EncoderDeadline",
        "vp8EncoderThreadCount",
        "vp8EncoderThreadCount",
        "vp8EncoderThreadCount",
        "vp8EncoderThreadCount",
        "webRTCSdpSemantics",
        "webRTCSdpSemantics",
        "webRTCSdpSemantics",
        "webRTCSdpSemantics",
        "startStreamFetcherAutomatically",
        "startStreamFetcherAutomatically",
        "startStreamFetcherAutomatically",
        "startStreamFetcherAutomatically",
        "deleteDASHFilesOnEnded",
        "deleteDASHFilesOnEnded",
        "deleteDASHFilesOnEnded",
        "deleteDASHFilesOnEnded",
        "targetLatency",
        "targetLatency",
        "targetLatency",
        "targetLatency",
        "heightRtmpForwarding",
        "heightRtmpForwarding",
        "heightRtmpForwarding",
        "heightRtmpForwarding",
        "audioBitrateSFU",
        "audioBitrateSFU",
        "audioBitrateSFU",
        "audioBitrateSFU",
        "aacEncodingEnabled",
        "aacEncodingEnabled",
        "aacEncodingEnabled",
        "aacEncodingEnabled",
        "gopSize",
        "gopSize",
        "gopSize",
        "gopSize",
        "constantRateFactor",
        "constantRateFactor",
        "constantRateFactor",
        "constantRateFactor",
        "webRTCViewerLimit",
        "webRTCViewerLimit",
        "webRTCViewerLimit",
        "webRTCViewerLimit",
        "dashFragmentDuration",
        "dashFragmentDuration",
        "dashFragmentDuration",
        "dashFragmentDuration",
        "dashSegDuration",
        "dashSegDuration",
        "dashSegDuration",
        "dashSegDuration",
        "dashWindowSize",
        "dashWindowSize",
        "dashWindowSize",
        "dashWindowSize",
        "dashExtraWindowSize",
        "dashExtraWindowSize",
        "dashExtraWindowSize",
        "dashExtraWindowSize",
        "jwtSecretKey",
        "jwtSecretKey",
        "jwtSecretKey",
        "jwtSecretKey",
        "jwtControlEnabled",
        "jwtControlEnabled",
        "jwtControlEnabled",
        "jwtControlEnabled",
        "ipFilterEnabled",
        "ipFilterEnabled",
        "ipFilterEnabled",
        "ipFilterEnabled",
        "ingestingStreamLimit",
        "ingestingStreamLimit",
        "ingestingStreamLimit",
        "ingestingStreamLimit",
        "timeTokenPeriod",
        "timeTokenPeriod",
        "timeTokenPeriod",
        "timeTokenPeriod",
        "toBeDeleted",
        "toBeDeleted",
        "toBeDeleted",
        "toBeDeleted",
        "webRTCKeyframeTime",
        "webRTCKeyframeTime",
        "webRTCKeyframeTime",
        "webRTCKeyframeTime",
        "jwtStreamSecretKey",
        "jwtStreamSecretKey",
        "jwtStreamSecretKey",
        "jwtStreamSecretKey",
        "publishJwtControlEnabled",
        "publishJwtControlEnabled",
        "publishJwtControlEnabled",
        "publishJwtControlEnabled",
        "playJwtControlEnabled",
        "playJwtControlEnabled",
        "playJwtControlEnabled",
        "playJwtControlEnabled",
        "lLDashEnabled",
        "lLDashEnabled",
        "lLDashEnabled",
        "lLDashEnabled",
        "lLHLSEnabled",
        "lLHLSEnabled",
        "lLHLSEnabled",
        "lLHLSEnabled",
        "hlsEnabledViaDash",
        "hlsEnabledViaDash",
        "hlsEnabledViaDash",
        "hlsEnabledViaDash",
        "useTimelineDashMuxing",
        "useTimelineDashMuxing",
        "useTimelineDashMuxing",
        "useTimelineDashMuxing",
        "dashHttpStreaming",
        "dashHttpStreaming",
        "dashHttpStreaming",
        "dashHttpStreaming",
        "s3StreamsFolderPath",
        "dashHttpEndpoint",
        "s3RecordingEnabled",
        "s3RecordingEnabled",
        "s3RecordingEnabled",
        "s3RecordingEnabled",
        "s3SecretKey",
        "s3SecretKey",
        "s3SecretKey",
        "s3SecretKey",
        "s3AccessKey",
        "s3AccessKey",
        "s3AccessKey",
        "s3AccessKey",
        "s3RegionName",
        "s3RegionName",
        "s3RegionName",
        "s3RegionName",
        "s3BucketName",
        "s3BucketName",
        "s3BucketName",
        "s3BucketName",
        "s3Endpoint",
        "s3Endpoint",
        "s3Endpoint",
        "s3Endpoint",
        "dashHttpEndpoint",
        "dashHttpEndpoint",
        "dashHttpEndpoint",
        "hlsEncryptionKeyInfoFile",
        "hlsEncryptionKeyInfoFile",
        "hlsEncryptionKeyInfoFile",
        "hlsEncryptionKeyInfoFile",
        "s3StreamsFolderPath",
        "s3StreamsFolderPath",
        "s3StreamsFolderPath",
        "s3PreviewsFolderPath",
        "s3PreviewsFolderPath",
        "s3PreviewsFolderPath",
        "s3PreviewsFolderPath",
        "forceDecoding",
        "forceDecoding",
        "forceDecoding",
        "forceDecoding"
    ],
    "literals": [
        "\"AppSettings\"",
        "\"appName\"",
        "\"/WEB-INF/red5-web.properties\"",
        "\"/WEB-INF/red5-web.properties\"",
        "\"settings.encoding.specific\"",
        "\"settings.addDateTimeToMp4FileName\"",
        "\"settings.hlsMuxingEnabled\"",
        "\"settings.dashMuxingEnabled\"",
        "\"settings.dashWindowSize\"",
        "\"settings.dashExtraWindowSize\"",
        "\"settings.encoderSettingsString\"",
        "\"settings.hlsListSize\"",
        "\"settings.hlsTime\"",
        "\"settings.dashSegDuration\"",
        "\"settings.dashFragmentDuration\"",
        "\"settings.dashTargetLatency\"",
        "\"settings.webRTCEnabled\"",
        "\"settings.useOriginalWebRTCEnabled\"",
        "\"settings.deleteHLSFilesOnEnded\"",
        "\"settings.deleteDASHFilesOnEnded\"",
        "\"settings.listenerHookURL\"",
        "\"settings.acceptOnlyStreamsInDataStore\"",
        "\"settings.tokenControlEnabled\"",
        "\"settings.publishTokenControlEnabled\"",
        "\"settings.playTokenControlEnabled\"",
        "\"settings.timeTokenSubscriberOnly\"",
        "\"settings.timeTokenPeriod\"",
        "\"settings.hlsPlayListType\"",
        "\"facebook.clientId\"",
        "\"facebook.clientSecret\"",
        "\"periscope.clientId\"",
        "\"periscope.clientSecret\"",
        "\"youtube.clientId\"",
        "\"youtube.clientSecret\"",
        "\"settings.vodFolder\"",
        "\"settings.previewOverwrite\"",
        "\"settings.stalkerDBServer\"",
        "\"settings.stalkerDBUsername\"",
        "\"settings.stalkerDBPassword\"",
        "\"settings.objectDetectionEnabled\"",
        "\"settings.createPreviewPeriod\"",
        "\"settings.mp4MuxingEnabled\"",
        "\"settings.webMMuxingEnabled\"",
        "\"settings.streamFetcherBufferTime\"",
        "\"settings.streamFetcherRestartPeriod\"",
        "\"settings.streamFetcherAutoStart\"",
        "\"settings.muxerFinishScript\"",
        "\"settings.webRTCFrameRate\"",
        "\"settings.hashControlPublishEnabled\"",
        "\"settings.hashControlPlayEnabled\"",
        "\"tokenHashSecret\"",
        "\"settings.webrtc.portRangeMin\"",
        "\"settings.webrtc.portRangeMax\"",
        "\"settings.webrtc.stunServerURI\"",
        "\"settings.webrtc.tcpCandidateEnabled\"",
        "\"settings.webrtc.sdpSemantics\"",
        "\"settings.encoding.encoderName\"",
        "\"settings.encoding.preset\"",
        "\"settings.encoding.profile\"",
        "\"settings.encoding.level\"",
        "\"settings.encoding.rc\"",
        "\"settings.encoding.threadCount\"",
        "\"settings.encoding.threadType\"",
        "\"settings.previewHeight\"",
        "\"settings.encoding.vp8.threadCount\"",
        "\"settings.encoding.vp8.speed\"",
        "\"settings.encoding.vp8.deadline\"",
        "\"settings.previewGenerate\"",
        "\"settings.remoteAllowedCIDR\"",
        "\"settings.writeStatsToDatastore\"",
        "\"settings.encoderSelectionPreference\"",
        "\"settings.allowedPublisherCIDR\"",
        "\"app.settings\"",
        "\"settings.excessiveBandwidth.threshold\"",
        "\"settings.excessiveBandwidth.call.threshold\"",
        "\"settings.portAllocator.flags\"",
        "\"settings.excessiveBandwith.tryCount.beforeSwitchback\"",
        "\"settings.excessiveBandwidth_enabled\"",
        "\"settings.excessiveBandwidth.packetLossDiffThreshold.forSwitchback\"",
        "\"settings.excessiveBandwidth.rttMeasurementDiffThreshold.forSwitchback\"",
        "\"settings.replaceCandidateAddrWithServerAddr\"",
        "\"db.app.name\"",
        "\"settings.encoding.timeout\"",
        "\"settings.webrtc.client.start.timeoutMs\"",
        "\"settings.defaultDecodersEnabled\"",
        "\"settings.collectSocialMediaActivityEnabled\"",
        "\"settings.httpforwarding.extension\"",
        "\"settings.httpforwarding.baseURL\"",
        "\"settings.rtmp.maxAnalyzeDurationMS\"",
        "\"settings.disableIPv6Candidates\"",
        "\"settings.rtspPullTransportType\"",
        "\"settings.h264Enabled\"",
        "\"settings.vp8Enabled\"",
        "\"settings.h265Enabled\"",
        "\"settings.maxFpsAccept\"",
        "\"settings.dataChannelEnabled\"",
        "\"settings.dataChannelPlayerDistrubution\"",
        "\"settings.maxResolutionAccept\"",
        "\"settings.maxBitrateAccept\"",
        "\"settings.audioBitrateSFU\"",
        "\"none\"",
        "\"publisher\"",
        "\"all\"",
        "\"settings.hlsflags\"",
        "\"settings.rtmpIngestBufferTimeMs\"",
        "\"settings.acceptOnlyRoomsInDataStore\"",
        "\"settings.dataChannelWebHook\"",
        "\"planB\"",
        "\"unifiedPlan\"",
        "\"settings.heightRtmpForwarding\"",
        "\"settings.aacEncodingEnabled\"",
        "\"settings.gopSize\"",
        "\"settings.constantRateFactor\"",
        "\"settings.webRTCViewerLimit\"",
        "\"settings.jwtSecretKey\"",
        "\"settings.jwtControlEnabled\"",
        "\"settings.ipFilterEnabled\"",
        "\"settings.ingestingStreamLimit\"",
        "\"settings.webRTCKeyframeTime\"",
        "\"settings.jwtStreamSecretKey\"",
        "\"settings.playJwtControlEnabled\"",
        "\"settings.publishJwtControlEnabled\"",
        "\"settings.dash.llEnabled\"",
        "\"settings.dash.llHlsEnabled\"",
        "\"settings.dash.hlsEnabled\"",
        "\"settings.dash.useTimeline\"",
        "\"settings.dash.httpStreaming\"",
        "\"settings.s3.streams.folder.path\"",
        "\"settings.s3.previews.folder.path\"",
        "\"settings.dash.httpEndpoint\"",
        "\"settings.forceDecoding\"",
        "\"settings.s3RecordingEnabled\"",
        "\"settings.s3AccessKey\"",
        "\"settings.s3SecretKey\"",
        "\"settings.s3RegionName\"",
        "\"settings.s3BucketName\"",
        "\"settings.s3Endpoint\"",
        "\"settings.enableTimeTokenForPlay\"",
        "\"settings.enableTimeTokenForPublish\"",
        "\"settings.hlsEncryptionKeyInfoFile\"",
        "\"${\"",
        "\":127.0.0.1}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":true}\"",
        "\"${\"",
        "\"}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":6}\"",
        "\"${\"",
        "\":0.5}\"",
        "\"${\"",
        "\":3.5}\"",
        "\"${\"",
        "\":5}\"",
        "\"${\"",
        "\":5}\"",
        "\"${\"",
        "\":true}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":true}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":true}\"",
        "\"${\"",
        "\":true}\"",
        "\"${\"",
        "\":''}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":false}\"",
        "\"#{'${\"",
        "\":${\"",
        "\":false}}'}\"",
        "\"#{'${\"",
        "\":${\"",
        "\":false}}'}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":60}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\"}\"",
        "\"${\"",
        "\"}\"",
        "\"${\"",
        "\"}\"",
        "\"${\"",
        "\"}\"",
        "\"${\"",
        "\"}\"",
        "\"${\"",
        "\"}\"",
        "\"${\"",
        "\"}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\"}\"",
        "\"${\"",
        "\"}\"",
        "\"${\"",
        "\"}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":5000}\"",
        "\"${\"",
        "\":0}\"",
        "\"${\"",
        "\":true}\"",
        "\"${\"",
        "\":delete_segments}\"",
        "\"/usr/local/antmedia/mysql\"",
        "\"${\"",
        "\":}\"",
        "\"${\"",
        "\":20}\"",
        "\"${\"",
        "\":0}\"",
        "\"${\"",
        "\":0}\"",
        "\"${\"",
        "\":stun:stun1.l.google.com:19302}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":\"",
        "\"}\"",
        "\"${\"",
        "\":0}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":0}\"",
        "\"${\"",
        "\":0}\"",
        "\"${\"",
        "\":4}\"",
        "\"${\"",
        "\":realtime}\"",
        "\"${\"",
        "\":1}\"",
        "\"${\"",
        "\":480}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":true}\"",
        "\"${\"",
        "\":'gpu_and_cpu'}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":300000}\"",
        "\"${\"",
        "\":3}\"",
        "\"${\"",
        "\":4}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":10}\"",
        "\"${\"",
        "\":20}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\"}\"",
        "\"${\"",
        "\":5000}\"",
        "\"${\"",
        "\":5000}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":''}\"",
        "\"${\"",
        "\":''}\"",
        "\"${\"",
        "\":1500}\"",
        "\"${\"",
        "\":true}\"",
        "\"${\"",
        "\":tcp}\"",
        "\"${\"",
        "\":0}\"",
        "\"${\"",
        "\":0}\"",
        "\"${\"",
        "\":0}\"",
        "\"${\"",
        "\":true}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":\"",
        "\"}\"",
        "\"${\"",
        "\":0}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":360}\"",
        "\"${\"",
        "\":96000}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":true}\"",
        "\"${\"",
        "\":0}\"",
        "\"${\"",
        "\":23}\"",
        "\"${\"",
        "\":-1}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":true}\"",
        "\"${\"",
        "\":-1}\"",
        "\"${\"",
        "\":2000}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":true}\"",
        "\"${\"",
        "\":streams}\"",
        "\"${\"",
        "\":previews}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":false}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"${\"",
        "\":#{null}}\"",
        "\"\"",
        "\"\"",
        "\",\"",
        "\",\"",
        "\",\"",
        "\",\"",
        "\"\"",
        "\"\"",
        "\"127.0.0.1\"",
        "\"\\\\s*,\\\\s*\"",
        "\": \""
    ],
    "variables": [
        "dbId",
        "remoteAllowedCIDR",
        "mp4MuxingEnabled",
        "webMMuxingEnabled",
        "addDateTimeToMp4FileName",
        "hlsMuxingEnabled",
        "encoderSettingsString",
        "hlsListSize",
        "hlsTime",
        "dashSegDuration",
        "dashFragmentDuration",
        "targetLatency",
        "dashWindowSize",
        "dashExtraWindowSize",
        "lLDashEnabled",
        "lLHLSEnabled",
        "hlsEnabledViaDash",
        "useTimelineDashMuxing",
        "webRTCEnabled",
        "useOriginalWebRTCEnabled",
        "tokenHashSecret",
        "hashControlPublishEnabled",
        "hashControlPlayEnabled",
        "listenerHookURL",
        "acceptOnlyStreamsInDataStore",
        "acceptOnlyRoomsInDataStore",
        "publishTokenControlEnabled",
        "playTokenControlEnabled",
        "timeTokenSubscriberOnly",
        "enableTimeTokenForPlay",
        "enableTimeTokenForPublish",
        "timeTokenPeriod",
        "hlsPlayListType",
        "facebookClientId",
        "facebookClientSecret",
        "periscopeClientId",
        "periscopeClientSecret",
        "youtubeClientId",
        "youtubeClientSecret",
        "vodFolder",
        "previewOverwrite",
        "stalkerDBServer",
        "stalkerDBUsername",
        "stalkerDBPassword",
        "objectDetectionEnabled",
        "createPreviewPeriod",
        "restartStreamFetcherPeriod",
        "startStreamFetcherAutomatically",
        "hlsflags",
        "muxerFinishScript",
        "webRTCFrameRate",
        "webRTCPortRangeMin",
        "webRTCPortRangeMax",
        "stunServerURI",
        "webRTCTcpCandidatesEnabled",
        "webRTCSdpSemantics",
        "portAllocatorFlags",
        "collectSocialMediaActivity",
        "encoderName",
        "encoderPreset",
        "encoderProfile",
        "encoderLevel",
        "encoderRc",
        "encoderSpecific",
        "encoderThreadCount",
        "encoderThreadType",
        "vp8EncoderSpeed",
        "vp8EncoderDeadline",
        "vp8EncoderThreadCount",
        "previewHeight",
        "generatePreview",
        "writeStatsToDatastore",
        "encoderSelectionPreference",
        "allowedPublisherCIDR",
        "excessiveBandwidthValue",
        "excessiveBandwidthCallThreshold",
        "excessiveBandwithTryCountBeforeSwitchback",
        "excessiveBandwidthAlgorithmEnabled",
        "packetLossDiffThresholdForSwitchback",
        "rttMeasurementDiffThresholdForSwitchback",
        "replaceCandidateAddrWithServerAddr",
        "appName",
        "encodingTimeout",
        "webRTCClientStartTimeoutMs",
        "defaultDecodersEnabled",
        "updateTime",
        "encoderSettings",
        "httpForwardingExtension",
        "httpForwardingBaseURL",
        "maxAnalyzeDurationMS",
        "disableIPv6Candidates",
        "rtspPullTransportType",
        "maxFpsAccept",
        "maxResolutionAccept",
        "maxBitrateAccept",
        "vp8Enabled",
        "h265Enabled",
        "dataChannelEnabled",
        "dataChannelPlayerDistribution",
        "rtmpIngestBufferTimeMs",
        "dataChannelWebHookURL",
        "h265EncoderPreset",
        "h265EncoderProfile",
        "h265EncoderRc",
        "h265EncoderSpecific",
        "h265EncoderLevel",
        "heightRtmpForwarding",
        "audioBitrateSFU",
        "dashMuxingEnabled",
        "aacEncodingEnabled",
        "gopSize",
        "constantRateFactor",
        "jwtSecretKey",
        "jwtControlEnabled",
        "ipFilterEnabled",
        "ingestingStreamLimit",
        "webRTCKeyframeTime",
        "jwtStreamSecretKey",
        "publishJwtControlEnabled",
        "playJwtControlEnabled",
        "dashHttpStreaming",
        "s3StreamsFolderPath",
        "s3PreviewsFolderPath",
        "dashHttpEndpoint",
        "forceDecoding",
        "s3RecordingEnabled",
        "s3AccessKey",
        "s3SecretKey",
        "s3BucketName",
        "s3RegionName",
        "s3Endpoint",
        "hlsEncryptionKeyInfoFile",
        "nm"
    ],
    "comments": [
        "check old SETTINGS_TOKEN_CONTROL_ENABLED for backward compatibility",
        "https://stackoverflow.com/questions/49653241/can-multiple-property-names-be-specified-in-springs-value-annotation",
        "@Value( \"${\"+SETTINGS_STREAM_FETCHER_BUFFER_TIME+\"}\" )"
    ],
    "docstrings": [
        "* Application Settings for each application running in Ant Media Server.\n * Each setting should have a default value with @Value annotation. Otherwise it breaks compatibility \n *\n * For naming please use the following convention\n * start with \"settings\" put dot(.) and related parameter.\n * like settings.hlsTime\n * \n * If default values are not as expected, this is the signal that server is not started correctly for any \n * reason. Don't patch it with null-check or similar things. Take a look at why server is not started correctly\n *\n *\n * These settings are set for each applications and stored in the file <AMS_DIR>/webapps/<AppName>/WEB_INF/red5-web.properties.\n * Click on any field to see its default value.\n *\n * Example: click on \taacEncodingEnabled --> The line @Value(\"${settings.aacEncodingEnabled:true}\") means that\n * its default value is true and it can be changed from the file  <AMS_DIR>/webapps/<AppName>/WEB_INF/red5-web.properties\n * Be careful about the type of the field. For this case its boolean.\n *\n * @author mekya\n *",
        "* Generate preview if there is any adaptive settings.\n\t * Preview generation depends on adaptive settings and it's generated by default.\n\t * Default value is true.",
        "* In data channel, player messages are delivered to nobody,\n\t * In order words, player cannot send messages",
        "* In data channel, player messages are delivered to only publisher",
        "* In data channel, player messages are delivered to everyone both publisher and all players",
        "* WebRTC SDP Semantics:PLAN B",
        "* WebRTC SDP Semantics:UNIFIED PLAN",
        "* Height Property key for WebRTC to RTMP  forwarding",
        "*",
        "* This object is used for synchronizaiton of CIDR operations",
        "* Comma separated CIDR that rest services are allowed to response\n\t * Allowed IP addresses to reach REST API, It must be in CIDR format as a.b.c.d/x",
        "* It's mandatory, If it is set true then a mp4 file is created into <APP_DIR>/streams directory\n\t * Default value is false",
        "* Enable/Disable WebM recording",
        "* It's mandatory, Date and time are added to created .mp4 file name, Default value is false",
        "* Enable/disable hls recording\n\t *  If it is set true then HLS files are created into <APP_DIR>/streams and HLS playing is enabled,\n\t *  Default value is true",
        "* Encoder settings in comma separated format\n\t * This must be set for adaptive streaming,\n\t * If it is empty SFU mode will be active in WebRTCAppEE,\n\t * video height, video bitrate, and audio bitrate are set as an example,\n\t * Ex. 480,300000,96000,360,200000,64000.",
        "* Number of segments(chunks) in m3u8 files\n\t * Set the maximum number of playlist entries, If 0 the list file will contain all the segments,",
        "* Duration of segments in m3u8 files\n\t * Target segment length in seconds,\n\t * Segment will be cut on the next key frame after this time has passed.",
        "* Duration of segments in mpd files,\n\t * Segments are a property of DASH. A segment is the minimal download unit.\n\t *",
        "* Fragments are a property of fragmented MP4 files, Typically a fragment consists of moof + mdat.\n\t *",
        "* Latency of the DASH streaming,",
        "* DASH window size, Number of files in manifest",
        "* DASH extra window size, Number of segments kept outside of the manifest before removing from disk",
        "* Enable low latency dash, This settings is effective if dash is enabled",
        "* Enable low latency hls via dash muxer, LLHLS is effective if dash is enabled.",
        "* Enable hls through DASH muxer, LLHLS is effective if dash is enabled.",
        "* Use timeline in dash muxing.",
        "* Enable/disable webrtc,\n\t * It's mandatory, If it is set true then WebRTC playing is enabled, Default value is false",
        "* The flag that sets using the original webrtc stream in streaming,\n\t * This setting is effective if there is any adaptive bitrate setting,\n\t * For instance assume that there is adaptive bitrate with 480p and incoming stream is 720p\n\t * Then if this setting is true, there are two bitrates for playing 720p and 480p,\n\t * In this case if this setting is false, there is one bitrate for playing that is 480p",
        "* It's mandatory,\n\t * If this value is true, hls files(m3u8 and ts files) are deleted after the broadcasting\n\t * has finished,\n\t * Default value is true.",
        "* If this value is true, dash files(mpd and m4s files) are deleted after the broadcasting\n\t * has finished.",
        "* The secret string used for creating hash based tokens\n\t * The key that used in hash generation for hash-based access control.",
        "* It's mandatory,\n\t * If it is set true then hash based access control enabled for publishing,\n\t * enable hash control as token for publishing operations using shared secret\n\t * Default value is false.",
        "* It's mandatory,\n\t * If it is set true then hash based access control enabled for playing,\n\t * enable hash control as token for playing operations using shared secret\n\t * Default value is false.",
        "* The URL for action callback\n\t *  You must set this to subscribe some event notifications,\n\t *  For details check: https://antmedia.io/webhook-integration/",
        "* The control for publishers\n\t * It's mandatory,\n\t * If it is set true you cannot start publishing unless you add the stream id to the database,\n\t * You can add stream id by REST API. Default value is false.",
        "* The control for rooms",
        "* The settings for enabling one-time token control mechanism for accessing resources and publishing\n\t * It's mandatory,\n\t * Check for details: https://antmedia.io/secure-video-streaming/. Default value is false.",
        "* The settings for enabling one-time token control mechanism for accessing resources and publishing\n\t * It's mandatory, This enables token control,\n\t * Check for details: https://antmedia.io/secure-video-streaming/. Default value is false.",
        "* the settings for accepting only time based token subscribers as connections to the streams",
        "* the settings for accepting only time based token subscribers as connections to the streams",
        "* the settings for accepting only time based token subscribers as connections to the streams",
        "* period for the generated time token",
        "* It can be event: or vod, Check HLS documentation for EXT-X-PLAYLIST-TYPE.\n\t *",
        "* Facebook client id\n\t * This is client id provided by Facebook to broadcast streams to Facebook.",
        "* Facebook client secret\n\t * Secret key for the Facebook client id.",
        "* Periscope app client id\n\t * This is client id provided by Periscope to broadcast streams to Periscope.",
        "* Periscope app client secret\n\t * Secret key for the Periscope client id.",
        "* Youtube client id\n\t * This is client id provided by YouTube to broadcast streams to YouTube.",
        "* Youtube client secret for youtube client id",
        "* The path for manually saved used VoDs\n\t * Determines the directory to store VOD files.",
        "* Overwrite preview files if exist, default value is false\n\t * If it is set true and new stream starts with the same id,\n\t * preview of the new one overrides the previous file,\n\t * If it is false previous file saved with a suffix.",
        "* Address of the Stalker Portal DB server\n\t * Database host address of IP TV Ministra platform.",
        "* Username of stalker portal DB\n\t * Database user name of IP TV Ministra platform.",
        "* Password of the stalker portal DB User\n\t * Database password of IP TV Ministra platform.",
        "* It's mandatory,\n\t * The directory contains the tensorflow object detection model\n\t *  If it is set true then object detection algorithm is run for streaming video,\n\t * Default value is false.",
        "* It's mandatory,\n\t* This determines the period (milliseconds) of preview (png) file creation,\n\t* This file is created into <APP_DIR>/preview directory. Default value is 5000.",
        "* It's mandatory,\n\t * Restart stream fetcher period in seconds\n\t * Restart time for fetched streams from external sources,\n\t * Default value is 0",
        "* Stream fetchers are started automatically if it is set true",
        "* It's mandatory,\n\t * Stream fetcher buffer time in milliseconds,\n\t * Stream is buffered for this duration and after that it will be started,\n\t * Buffering time for fetched streams from external sources. 0 means no buffer,\n\t * Default value is 0",
        "* HLS Flags for FFmpeg HLS Muxer,\n\t * Please add value by plus prefix in the properties file like this\n\t * settings.hlsflags=+program_date_time\n\t * \n\t * you can add + separated more options like below\n\t * settings.hlsflags=+program_date_time+round_durations+append_list\n\t *\n\t * Separate with + or -.\n\t * Check for details: https://ffmpeg.org/ffmpeg-formats.html#Options-6\n\t *",
        "* This is a script file path that is called by Runtime when muxing is finished,\n\t * Bash script file path will be called after stream finishes.",
        "* It's mandatory,\n\t * Determines the frame rate of video publishing to the WebRTC players,\n\t * Default value is 20",
        "* Min port number of the port range of WebRTC, It's effective when user publishes stream,\n\t * This value should be less than the {@link #webRTCPortRangeMax}\n\t * Determines the minimum port number for WebRTC connections, Default value is 0.",
        "* Max port number of the port range of WebRTC, It's effective when user publishes stream\n\t * In order to port range port this value should be higher than {@link #webRTCPortRangeMin}",
        "* Stun Server URI\n\t * Stun server URI used for WebRTC signaling,\n\t * You can check: https://antmedia.io/learn-webrtc-basics-components/,\n\t * Default value is stun:stun.l.google.com:19302.",
        "* It's mandatory,\n\t * TCP candidates are enabled/disabled.It's effective when user publishes stream\n\t * It's disabled by default\n\t * If it is set true then TCP candidates can be used for WebRTC connection,\n\t * If it is false only UDP port will be used,\n\t * Default value is true.",
        "* WebRTC SDP Semantics\n\t * It can \"planB\" or \"unifiedPlan\"",
        "* Port Allocator Flags for WebRTC\n\t * PORTALLOCATOR_DISABLE_UDP = 0x01,\n  \t * PORTALLOCATOR_DISABLE_STUN = 0x02,\n  \t * PORTALLOCATOR_DISABLE_RELAY = 0x04,",
        "* If it's enabled, interactivity(like, comment, etc.) is collected from social media channel,\n\t * Default value is false.",
        "* Name of the encoder to be used in adaptive bitrate,\n\t * If there is a GPU, server tries to open h264_nvenc,\n\t * If there is no GPU, server tries to open libx264 by default\n\t * Can be h264_nvenc or libx264. If you set h264_nvenc but it cannot be opened then libx264 will be used,\n\t * Name of the encoder to be used in adaptive bitrate,\n\t * If there is a GPU, server tries to open h264_nvenc,\n\t * If there is no GPU, server tries to open libx264 by default",
        "* Encoder's preset value in adaptive bitrate\n\t * Libx264 presets are there\n\t * https://trac.ffmpeg.org/wiki/Encode/H.264\n\t * Ant Media Server uses \"veryfast\" by default\n\t *",
        "* Encoder profile in adaptive bitrate,\n\t * It's baseline by default.",
        "* Encoder level in adaptive bitrate",
        "* Encoding rate control in adaptive bitrate",
        "* Encoder specific configuration for libx264 in adaptive bitrate,\n\t * This is the x264-params in ffmpeg\n\t * Specific settings for selected encoder,\n\t * For libx264 please check https://trac.ffmpeg.org/wiki/Encode/H.264",
        "* Encoder thread count.",
        "* Encoder thread type\n\t * 0: auto\n\t * 1: frame\n\t * 2: slice",
        "* Set quality/speed ratio modifier, Higher values speed up the encode at the cost of quality.",
        "* VP8 Encoder deadline:\n\t *  best\n\t * \tgood \n\t *  realtime",
        "* VP8 Encoder thread count.",
        "* It's mandatory,\n\t * Determines the height of preview file,\n\t * Default value is 480",
        "* Generate preview if there is any adaptive settings,\n\t * \n\t * Preview generation depends on adaptive settings and it's generated by default",
        "* Can be \"gpu_and_cpu\" or \"only_gpu\"\n\t * \n\t * \"only_gpu\" only tries to open the GPU for encoding,\n\t * If it cannot open the gpu codec it returns false\n\t * \n\t * \"gpu_and_cpu\" first tries to open the GPU for encoding\n\t * if it does not open, it tries to open the CPU for encoding\n\t *",
        "* Comma separated CIDR that server accepts/ingests RTMP streams from,\n\t * Default value is null which means that it accepts/ingests stream from everywhere",
        "* *******************************************************\n\t * What is Excessive Bandwidth Algorithm?\n\t * Excessive Bandwidth Algorithm tries to switch to higher bitrate even if bandwidth seems not enough\n\t * \n\t * Why is it implemented?\n\t * WebRTC stack sometimes does not calculate the bandwidth correctly. For instance,\n\t * when network quality drop for a few seconds, it does not calculates the bitrate correctly\n\t * \n\t * How it works?\n\t * If measured bandwidth - the current video bitrate is more than {@link #excessiveBandwidthValue}\n\t * for consecutive {@link #excessiveBandwidthCallThreshold} times it switches to higher bitrate\n\t * \n\t * If bandwidth measured is still than the required bandwidth it tries {@link #excessiveBandwithTryCountBeforeSwitchback}\n\t * times to stay in the high bitrate. It also switches back to lower quality \n\t * if packetLoss different is bigger than {@link #packetLossDiffThresholdForSwitchback} or \n\t * rtt time difference is bigger than {@link #rttMeasurementDiffThresholdForSwitchback} before \n\t * {@link #tryCountBeforeSwitchback} reaches to zero\n\t * \n\t * \n\t * Side effect\n\t * If network fluctuates too much or not consistent, quality of the video changes also fluctuates too much for the viewers\n\t * *********************************************************",
        "*  The excessive bandwidth threshold value",
        "* The excessive bandwidth call threshold value",
        "* Enable or disable excessive bandwidth algorithm",
        "* packet loss threshold if packetLoss is bigger than this value in ExcessiveBandwidth\n\t * algorithm, it switches back to lower quality without try every attempts {@link #excessiveBandwithTryCountBeforeSwitchback}",
        "* rtt measurement threshold diff if rttMeasurement is bigger than this value in ExcessiveBandwidth\n\t * algorithm, it switches back to lower quality without try every attempts {@link #setTryCountBeforeSwitchback(int)}\n\t * @param rttMeasurementDiffThresholdForSwitchback",
        "* Replace candidate addr with server addr,\n\t * In order to use it you should set serverName in conf/red5.properties",
        "* Applicaiton name for the data store which should exist so that no default value\n\t * such as LiveApp, WebRTCApp etc.",
        "* Timeout for encoding\n\t * If encoder cannot encode a frame in this timeout, streaming is finished by server.",
        "* If webrtc client is not started in this time, it'll close automatically",
        "* Set true to enable WebRTC default decoders(such as VP8, VP9) \n\t * Set false to only enable h264 decoder\n\t * If it is set true, WebRTC using default decoders(such as VP8, VP9).\n\t * If it is set false, WebRTC using only default h264 decoder.\n\t * Default value is false.\n\t * \n\t * Deprecated: Use {@code vp8Enabled} and {@code h264enabled}",
        "* Forwards the http requests with this extension to {@link #httpForwardingBaseURL}\n\t * It supports comma separated extensions Like mp4,m3u8\n\t * Don't add any leading, trailing white spaces",
        "* Forward the incoming http request to this base url",
        "* Max analyze duration in for determining video and audio existence in RTMP streams",
        "* Enable/Disable IPv6 Candidates for WebRTC It's disabled by default",
        "* Specify the rtsp transport type in pulling IP Camera or RTSP sources\n\t * It can be tcp or udp",
        "* Max FPS value in RTMP streams",
        "* Max Resolution value in RTMP streams",
        "* Max Bitrate value in RTMP streams",
        "* Enable/Disable h264 encoding It's enabled by default",
        "* Enable/Disable vp8 encoding It's disabled by default",
        "* Enable/disable H265 Encoding Disabled by default",
        "* Enable/Disable data channel It's disabled by default\n\t * When data channel is enabled, publisher can send messages to the players",
        "* Defines the distribution list for player messages\n\t * it can be  none/publisher/all\n\t * none: player messages are delivered to nobody\n\t * publisher: player messages are delivered to only publisher\n\t * all:  player messages are delivered to everyone both publisher and all players",
        "* RTMP ingesting buffer time in Milliseconds Server buffer this amount of video packet in order to compensate\n\t * when stream is not received for some time",
        "* All data channel messages are delivered to these hook as well\n\t * So that it'll be integrated to any third party application",
        "* The height of the stream that is transcoded from incoming WebRTC stream to the RTMP\n\t * This settings is effective in community edition by default\n\t * It's also effective WebRTC to RTMP direct forwarding by giving rtmpForward=true in WebSocket communication\n\t * in Enterprise Edition",
        "* In SFU mode we still transcode the audio to opus and aac\n\t * This settings determines the audio bitrate for opus and aac\n\t * It's the bitrate that is used transcoding the audio in AAC and Opus\n\t * After version(2.3), we directly forward incoming audio to the viewers without transcoding.",
        "* Enable/disable dash recording",
        "* If aacEncodingEnabled is true, aac encoding will be active even if mp4 or hls muxing is not enabled,\n\t * If aacEncodingEnabled is false, aac encoding is only activated if mp4 or hls muxing is enabled in the settings,\n     *\n\t * This value should be true if you're sending stream to RTMP endpoints or enable/disable mp4 recording on the fly",
        "* GOP size, AKA key frame interval,\n\t * GOP size is group of pictures that encoder sends key frame for each group,\n\t * The unit is not the seconds, Please don't confuse the seconds that are used in key frame intervals\n\t *  \n\t * If GOP size is 50 and your frame rate is 25, it means that encoder will send key frame \n\t * for every 2 seconds,\n\t * \n\t * Default value is 0 so it uses incoming gop size by default.\n\t *",
        "* Constant Rate Factor used by x264, x265, VP8,\n\t * Use values between 4-51\n\t *",
        "* Application level WebRTC viewer limit",
        "* Set to true when you want to delete an application",
        "* Application JWT secret key",
        "* Application JWT Control Enabled",
        "* Application IP Filter Enabled",
        "* Application level total incoming stream limit",
        "* WebRTC Keyframe Time, Ant Media Server asks key frame for every webRTCKeyframeTime in SFU mode,\n\t * It's in milliseconds",
        "* Application JWT stream secret key",
        "* The settings for enabling jwt token filter mechanism for accessing resources and publishing",
        "* The settings for enabling jwt token filter mechanism for accessing resources and playing",
        "* Use http streaming in Low Latency Dash,\n\t * If it's true, it sends files through http\n\t * If it's false, it writes files to disk directly\n\t * \n\t * In order to have Low Latency http streaming should be used",
        "* It's S3 streams MP4, WEBM  and HLS files storage name . \n\t * It's streams by default.\n\t *",
        "* It's S3 stream PNG files storage name . \n\t * It's previews by default.\n\t *",
        "* Use http endpoint  in CMAF/HLS. \n\t * It's configurable to send any stream in HTTP Endpoint with this option",
        "* Force stream decoding even if there is no adaptive setting",
        "* Application JWT Control Enabled",
        "* S3 Access key",
        "* S3 Secret Key",
        "* S3 Bucket Name",
        "* S3 Region Name",
        "* S3 Endpoint",
        "*  HLS Encryption key info file full path.\n\t *  Format of the file\n\t *  ```\n\t *  key URI\n\t *  key file path\n\t *  IV (optional)\n\t *  ``\n\t *  \n\t *  The first line of key_info_file specifies the key URI written to the playlist. \n\t *  The key URL is used to access the encryption key during playback. \n\t *  The second line specifies the path to the key file used to obtain the key during the encryption process. \n\t *  The key file is read as a single packed array of 16 octets in binary format. \n\t *  The optional third line specifies the initialization vector (IV) as a hexadecimal string to be used \n\t *  instead of the segment sequence number (default) for encryption. \n\t *  \n\t *  Changes to key_info_file will result in segment encryption with the new key/IV and an entry in the playlist for the new key URI/IV if hls_flags periodic_rekey is enabled.\n\t *\n\t *  Key info file example:\n\t *  ```\n\t *  http://server/file.key\n\t *  /path/to/file.key\n\t *  0123456789ABCDEF0123456789ABCDEF\n\t *  ```",
        "* the getAllowedCIDRList and setAllowedCIDRList are synchronized\n\t * because ArrayList may throw concurrent modification\n\t * @param remoteAllowedCIDR",
        "* Fill a {@link NetMask} list from a string input containing a\n\t * comma-separated list of (hopefully valid) {@link NetMask}s.\n\t *\n\t * @param input The input string\n\t * @param target The list to fill\n\t * @return a string list of processing errors (empty when no errors)"
    ],
    "functions": [
        "isWriteStatsToDatastore",
        "setWriteStatsToDatastore",
        "isAddDateTimeToMp4FileName",
        "setAddDateTimeToMp4FileName",
        "isMp4MuxingEnabled",
        "setMp4MuxingEnabled",
        "isHlsMuxingEnabled",
        "setHlsMuxingEnabled",
        "isDashMuxingEnabled",
        "setDashMuxingEnabled",
        "getHlsPlayListType",
        "setHlsPlayListType",
        "getHlsTime",
        "setHlsTime",
        "getHlsListSize",
        "setHlsListSize",
        "isWebRTCEnabled",
        "setWebRTCEnabled",
        "encodersList2Str",
        "encodersStr2List",
        "getEncoderSettingsString",
        "getEncoderSettings",
        "setEncoderSettings",
        "setEncoderSettingsString",
        "isDeleteHLSFilesOnEnded",
        "setDeleteHLSFilesOnEnded",
        "getListenerHookURL",
        "setListenerHookURL",
        "isAcceptOnlyStreamsInDataStore",
        "setAcceptOnlyStreamsInDataStore",
        "isAcceptOnlyRoomsInDataStore",
        "setAcceptOnlyRoomsInDataStore",
        "isObjectDetectionEnabled",
        "setObjectDetectionEnabled",
        "getYoutubeClientSecret",
        "setYoutubeClientSecret",
        "getYoutubeClientId",
        "setYoutubeClientId",
        "getPeriscopeClientSecret",
        "setPeriscopeClientSecret",
        "getPeriscopeClientId",
        "setPeriscopeClientId",
        "getFacebookClientSecret",
        "setFacebookClientSecret",
        "getFacebookClientId",
        "setFacebookClientId",
        "getVodFolder",
        "setVodFolder",
        "getCreatePreviewPeriod",
        "setCreatePreviewPeriod",
        "isPreviewOverwrite",
        "setPreviewOverwrite",
        "getStalkerDBServer",
        "setStalkerDBServer",
        "getStalkerDBUsername",
        "setStalkerDBUsername",
        "getStalkerDBPassword",
        "setStalkerDBPassword",
        "getRestartStreamFetcherPeriod",
        "setRestartStreamFetcherPeriod",
        "getStreamFetcherBufferTime",
        "setStreamFetcherBufferTime",
        "getHlsFlags",
        "setHlsflags",
        "getMySqlClientPath",
        "setMySqlClientPath",
        "isPublishTokenControlEnabled",
        "setPublishTokenControlEnabled",
        "isPlayTokenControlEnabled",
        "setPlayTokenControlEnabled",
        "isTimeTokenSubscriberOnly",
        "setTimeTokenSubscriberOnly",
        "isEnableTimeTokenForPlay",
        "setEnableTimeTokenForPlay",
        "isEnableTimeTokenForPublish",
        "setEnableTimeTokenForPublish",
        "getMuxerFinishScript",
        "setMuxerFinishScript",
        "getWebRTCFrameRate",
        "setWebRTCFrameRate",
        "isCollectSocialMediaActivity",
        "setCollectSocialMediaActivity",
        "getTokenHashSecret",
        "setTokenHashSecret",
        "isHashControlPlayEnabled",
        "setHashControlPlayEnabled",
        "isHashControlPublishEnabled",
        "setHashControlPublishEnabled",
        "resetDefaults",
        "getWebRTCPortRangeMax",
        "setWebRTCPortRangeMax",
        "getWebRTCPortRangeMin",
        "setWebRTCPortRangeMin",
        "getStunServerURI",
        "setStunServerURI",
        "isWebRTCTcpCandidatesEnabled",
        "setWebRTCTcpCandidatesEnabled",
        "getEncoderName",
        "setEncoderName",
        "getEncoderPreset",
        "setEncoderPreset",
        "getEncoderProfile",
        "setEncoderProfile",
        "getEncoderLevel",
        "setEncoderLevel",
        "getEncoderRc",
        "setEncoderRc",
        "getEncoderSpecific",
        "setEncoderSpecific",
        "getPreviewHeight",
        "setPreviewHeight",
        "isUseOriginalWebRTCEnabled",
        "setUseOriginalWebRTCEnabled",
        "getRemoteAllowedCIDR",
        "setRemoteAllowedCIDR",
        "getAllowedCIDRList",
        "getAllowedPublisherCIDR",
        "setAllowedPublisherCIDR",
        "getAllowedPublisherCIDRList",
        "fillFromInput",
        "getEncoderSelectionPreference",
        "setEncoderSelectionPreference",
        "getExcessiveBandwidthCallThreshold",
        "setExcessiveBandwidthCallThreshold",
        "getExcessiveBandwidthValue",
        "setExcessiveBandwidthValue",
        "getPortAllocatorFlags",
        "setPortAllocatorFlags",
        "getExcessiveBandwithTryCountBeforeSwitchback",
        "isExcessiveBandwidthAlgorithmEnabled",
        "getPacketLossDiffThresholdForSwitchback",
        "getRttMeasurementDiffThresholdForSwitchback",
        "setExcessiveBandwithTryCountBeforeSwitchback",
        "setExcessiveBandwidthAlgorithmEnabled",
        "setPacketLossDiffThresholdForSwitchback",
        "setRttMeasurementDiffThresholdForSwitchback",
        "isReplaceCandidateAddrWithServerAddr",
        "setReplaceCandidateAddrWithServerAddr",
        "getUpdateTime",
        "setUpdateTime",
        "setAppName",
        "getAppName",
        "getEncodingTimeout",
        "setEncodingTimeout",
        "isDefaultDecodersEnabled",
        "setDefaultDecodersEnabled",
        "getHttpForwardingExtension",
        "setHttpForwardingExtension",
        "getHttpForwardingBaseURL",
        "setHttpForwardingBaseURL",
        "getMaxAnalyzeDurationMS",
        "setMaxAnalyzeDurationMS",
        "isGeneratePreview",
        "setGeneratePreview",
        "isDisableIPv6Candidates",
        "setDisableIPv6Candidates",
        "getRtspPullTransportType",
        "setRtspPullTransportType",
        "getMaxResolutionAccept",
        "setMaxResolutionAccept",
        "isH264Enabled",
        "setH264Enabled",
        "isVp8Enabled",
        "setVp8Enabled",
        "isH265Enabled",
        "setH265Enabled",
        "isDataChannelEnabled",
        "setDataChannelEnabled",
        "getDataChannelPlayerDistribution",
        "setDataChannelPlayerDistribution",
        "getRtmpIngestBufferTimeMs",
        "setRtmpIngestBufferTimeMs",
        "getDataChannelWebHook",
        "setDataChannelWebHookURL",
        "getEncoderThreadCount",
        "setEncoderThreadCount",
        "getEncoderThreadType",
        "setEncoderThreadType",
        "getWebRTCClientStartTimeoutMs",
        "setWebRTCClientStartTimeoutMs",
        "getH265EncoderProfile",
        "getH265EncoderPreset",
        "getH265EncoderLevel",
        "getH265EncoderSpecific",
        "getH265EncoderRc",
        "setH265EncoderLevel",
        "setH265EncoderPreset",
        "setH265EncoderProfile",
        "setH265EncoderRc",
        "setH265EncoderSpecific",
        "isWebMMuxingEnabled",
        "setWebMMuxingEnabled",
        "getVp8EncoderSpeed",
        "setVp8EncoderSpeed",
        "getVp8EncoderDeadline",
        "setVp8EncoderDeadline",
        "getVp8EncoderThreadCount",
        "setVp8EncoderThreadCount",
        "getWebRTCSdpSemantics",
        "setWebRTCSdpSemantics",
        "isStartStreamFetcherAutomatically",
        "setStartStreamFetcherAutomatically",
        "isDeleteDASHFilesOnEnded",
        "setDeleteDASHFilesOnEnded",
        "getTargetLatency",
        "setTargetLatency",
        "getHeightRtmpForwarding",
        "setHeightRtmpForwarding",
        "getAudioBitrateSFU",
        "setAudioBitrateSFU",
        "setAacEncodingEnabled",
        "isAacEncodingEnabled",
        "getGopSize",
        "setGopSize",
        "getConstantRateFactor",
        "setConstantRateFactor",
        "getWebRTCViewerLimit",
        "setWebRTCViewerLimit",
        "getDashFragmentDuration",
        "setDashFragmentDuration",
        "getDashSegDuration",
        "setDashSegDuration",
        "getDashWindowSize",
        "setDashWindowSize",
        "getDashExtraWindowSize",
        "setDashExtraWindowSize",
        "getJwtSecretKey",
        "setJwtSecretKey",
        "isJwtControlEnabled",
        "setJwtControlEnabled",
        "isIpFilterEnabled",
        "setIpFilterEnabled",
        "getIngestingStreamLimit",
        "setIngestingStreamLimit",
        "getTimeTokenPeriod",
        "setTimeTokenPeriod",
        "isToBeDeleted",
        "setToBeDeleted",
        "getWebRTCKeyframeTime",
        "setWebRTCKeyframeTime",
        "getJwtStreamSecretKey",
        "setJwtStreamSecretKey",
        "isPublishJwtControlEnabled",
        "setPublishJwtControlEnabled",
        "isPlayJwtControlEnabled",
        "setPlayJwtControlEnabled",
        "islLDashEnabled",
        "setlLDashEnabled",
        "islLHLSEnabled",
        "setlLHLSEnabled",
        "isHlsEnabledViaDash",
        "setHlsEnabledViaDash",
        "isUseTimelineDashMuxing",
        "setUseTimelineDashMuxing",
        "isDashHttpStreaming",
        "setDashHttpStreaming",
        "getS3StreamsFolderPath",
        "getDashHttpEndpoint",
        "isS3RecordingEnabled",
        "setS3RecordingEnabled",
        "getS3SecretKey",
        "setS3SecretKey",
        "getS3AccessKey",
        "setS3AccessKey",
        "getS3RegionName",
        "setS3RegionName",
        "getS3BucketName",
        "setS3BucketName",
        "getS3Endpoint",
        "setS3Endpoint",
        "setDashHttpEndpoint",
        "getHlsEncryptionKeyInfoFile",
        "setHlsEncryptionKeyInfoFile",
        "setS3StreamsFolderPath",
        "getS3PreviewsFolderPath",
        "setS3PreviewsFolderPath",
        "isForceDecoding",
        "setForceDecoding"
    ],
    "classes": [
        "AppSettings"
    ]
}