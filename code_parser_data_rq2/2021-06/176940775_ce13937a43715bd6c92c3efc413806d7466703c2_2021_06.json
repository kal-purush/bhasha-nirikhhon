{
    "identifiers": [
        "com",
        "opencsv",
        "CSVReader",
        "com",
        "opencsv",
        "CSVWriter",
        "com",
        "opencsv",
        "exceptions",
        "CsvException",
        "org",
        "apache",
        "poi",
        "ss",
        "usermodel",
        "Cell",
        "org",
        "apache",
        "poi",
        "ss",
        "usermodel",
        "Row",
        "org",
        "apache",
        "poi",
        "xssf",
        "usermodel",
        "XSSFSheet",
        "org",
        "apache",
        "poi",
        "xssf",
        "usermodel",
        "XSSFWorkbook",
        "javax",
        "imageio",
        "ImageIO",
        "java",
        "awt",
        "java",
        "awt",
        "image",
        "BufferedImage",
        "java",
        "io",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Collectors",
        "COVERAGE_MAP_PIXELS_COUNT",
        "args",
        "levelsMap",
        "levelsMap",
        "put",
        "levelsMap",
        "put",
        "levelsMap",
        "put",
        "levelsMap",
        "put",
        "levelsMap",
        "put",
        "levelsMap",
        "put",
        "txtRootPath",
        "ascRootPath",
        "comparedCsfFile",
        "txtRootPath",
        "mkdirs",
        "ascRootPath",
        "mkdirs",
        "txtRootPath",
        "mkdirs",
        "txtRootPath1",
        "ascRootPath1",
        "reportHelper",
        "reportHelper",
        "createReport",
        "txtRootPath1",
        "ascRootPath1",
        "comparedCsfFile",
        "rootPath1",
        "rootPath2",
        "csvPath",
        "levelsMap",
        "eir2g",
        "findDifference",
        "rootPath1",
        "rootPath2",
        "comparedCsfFile",
        "levelsMap",
        "eir3g",
        "findDifference",
        "rootPath1",
        "rootPath2",
        "comparedCsfFile",
        "levelsMap",
        "eir4g",
        "findDifference",
        "rootPath1",
        "rootPath2",
        "comparedCsfFile",
        "levelsMap",
        "three2g",
        "findDifference",
        "rootPath1",
        "rootPath2",
        "comparedCsfFile",
        "levelsMap",
        "three3g",
        "findDifference",
        "rootPath1",
        "rootPath2",
        "comparedCsfFile",
        "levelsMap",
        "three4g",
        "findDifference",
        "rootPath1",
        "rootPath2",
        "comparedCsfFile",
        "levelsMap",
        "vodafone2g",
        "findDifference",
        "rootPath1",
        "rootPath2",
        "comparedCsfFile",
        "levelsMap",
        "vodafone3g",
        "findDifference",
        "rootPath1",
        "rootPath2",
        "comparedCsfFile",
        "levelsMap",
        "vodafone4g",
        "findDifference",
        "rootPath1",
        "rootPath2",
        "comparedCsfFile",
        "levelsMap",
        "rootPath",
        "levelsMap",
        "calculateLevelPixels",
        "rootPath",
        "rootPath",
        "levelsMap",
        "calculateLevelPixels",
        "rootPath",
        "rootPath",
        "levelsMap",
        "calculateLevelPixels",
        "rootPath",
        "rootPath",
        "levelsMap",
        "calculateLevelPixels",
        "rootPath",
        "rootPath",
        "levelsMap",
        "calculateLevelPixels",
        "rootPath",
        "rootPath",
        "levelsMap",
        "calculateLevelPixels",
        "rootPath",
        "rootPath",
        "levelsMap",
        "calculateLevelPixels",
        "rootPath",
        "rootPath",
        "levelsMap",
        "calculateLevelPixels",
        "rootPath",
        "rootPath",
        "levelsMap",
        "calculateLevelPixels",
        "rootPath",
        "rootPath",
        "levelsMap",
        "folderPath1",
        "folderPath2",
        "csvPath",
        "levelsMap",
        "fw",
        "csvPath",
        "csv",
        "fw",
        "overall",
        "files",
        "Arrays",
        "asList",
        "Objects",
        "requireNonNull",
        "folderPath1",
        "listFiles",
        "stream",
        "f",
        "f",
        "getName",
        "endsWith",
        "sorted",
        "Comparator",
        "comparing",
        "e",
        "valueOf",
        "e",
        "getName",
        "split",
        "collect",
        "Collectors",
        "toList",
        "file",
        "files",
        "image1",
        "image2",
        "image1",
        "ImageIO",
        "read",
        "file",
        "image2",
        "ImageIO",
        "read",
        "folderPath2",
        "file",
        "getName",
        "y",
        "y",
        "image1",
        "getHeight",
        "y",
        "x",
        "x",
        "image1",
        "getWidth",
        "x",
        "color1",
        "image1",
        "getRGB",
        "x",
        "y",
        "t1",
        "image1",
        "getRGB",
        "x",
        "y",
        "getAlpha",
        "r1",
        "color1",
        "g1",
        "color1",
        "b1",
        "color1",
        "color2",
        "image2",
        "getRGB",
        "x",
        "y",
        "t2",
        "image2",
        "getRGB",
        "x",
        "y",
        "getAlpha",
        "r2",
        "color2",
        "g2",
        "color2",
        "b2",
        "color2",
        "color1",
        "color2",
        "t1",
        "t2",
        "colorStr",
        "r1",
        "g1",
        "b1",
        "t1",
        "r2",
        "g2",
        "b2",
        "t2",
        "plus",
        "colorStr",
        "e",
        "e",
        "printStackTrace",
        "file",
        "getName",
        "overall",
        "add",
        "csv",
        "writeNext",
        "file",
        "getName",
        "entry",
        "entrySet",
        "levels",
        "colorsToLevels",
        "entry",
        "getKey",
        "levelsMap",
        "convertedKey",
        "levels",
        "levels",
        "csv",
        "writeNext",
        "convertedKey",
        "entry",
        "getValue",
        "toString",
        "convertedKey",
        "entry",
        "getValue",
        "mapOverall",
        "calculateOverall",
        "overall",
        "csv",
        "writeNext",
        "overallDifferences",
        "entry",
        "mapOverall",
        "entrySet",
        "levels",
        "colorsToLevels",
        "entry",
        "getKey",
        "levelsMap",
        "convertedKey",
        "levels",
        "levels",
        "value",
        "entry",
        "getValue",
        "csv",
        "writeNext",
        "convertedKey",
        "value",
        "toString",
        "convertedKey",
        "value",
        "overallDifferences",
        "put",
        "levels",
        "value",
        "csv",
        "close",
        "overallDifferences",
        "folderPath",
        "csvPath",
        "levelsMap",
        "folderPath",
        "fw",
        "csvPath",
        "csv",
        "fw",
        "overall",
        "files",
        "Arrays",
        "asList",
        "Objects",
        "requireNonNull",
        "folderPath",
        "listFiles",
        "stream",
        "f",
        "f",
        "getName",
        "endsWith",
        "sorted",
        "Comparator",
        "comparing",
        "e",
        "valueOf",
        "e",
        "getName",
        "split",
        "collect",
        "Collectors",
        "toList",
        "file",
        "files",
        "image",
        "image",
        "ImageIO",
        "read",
        "file",
        "y",
        "y",
        "image",
        "getHeight",
        "y",
        "x",
        "x",
        "image",
        "getWidth",
        "x",
        "color",
        "image",
        "getRGB",
        "x",
        "y",
        "t",
        "image",
        "getRGB",
        "x",
        "y",
        "getAlpha",
        "r",
        "color",
        "g",
        "color",
        "b",
        "color",
        "plus",
        "r",
        "g",
        "b",
        "t",
        "e",
        "e",
        "printStackTrace",
        "file",
        "getName",
        "overall",
        "add",
        "csv",
        "writeNext",
        "file",
        "getName",
        "entry",
        "entrySet",
        "csv",
        "writeNext",
        "levelsMap",
        "get",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "toString",
        "levelsMap",
        "get",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "mapOverall",
        "calculateOverall",
        "overall",
        "csv",
        "writeNext",
        "entry",
        "mapOverall",
        "entrySet",
        "csv",
        "writeNext",
        "levelsMap",
        "get",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "toString",
        "levelsMap",
        "get",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "csv",
        "close",
        "key",
        "containsKey",
        "key",
        "put",
        "key",
        "counter",
        "get",
        "key",
        "counter",
        "counter",
        "put",
        "key",
        "counter",
        "overall",
        "overall",
        "entry",
        "entrySet",
        "containsKey",
        "entry",
        "getKey",
        "put",
        "entry",
        "getKey",
        "now",
        "get",
        "entry",
        "getKey",
        "now",
        "now",
        "entry",
        "getValue",
        "put",
        "entry",
        "getKey",
        "now",
        "colorStr",
        "levelsMap",
        "arr",
        "colorStr",
        "split",
        "arr",
        "Optional",
        "ofNullable",
        "levelsMap",
        "get",
        "arr",
        "orElse",
        "arr",
        "Optional",
        "ofNullable",
        "levelsMap",
        "get",
        "arr",
        "orElse",
        "arr",
        "parsedCsvMap",
        "parsedCsvMap",
        "put",
        "parseCsv",
        "parsedCsvMap",
        "put",
        "parseCsv",
        "parsedCsvMap",
        "put",
        "parseCsv",
        "parsedCsvMap",
        "put",
        "parseCsv",
        "parsedCsvMap",
        "put",
        "parseCsv",
        "parsedCsvMap",
        "put",
        "parseCsv",
        "parsedCsvMap",
        "put",
        "parseCsv",
        "parsedCsvMap",
        "put",
        "parseCsv",
        "parsedCsvMap",
        "put",
        "parseCsv",
        "fillColumns",
        "parsedCsvMap",
        "fileName",
        "path",
        "fileName",
        "reader",
        "path",
        "comparisons",
        "getIndex",
        "path",
        "reader",
        "skip",
        "getIndex",
        "path",
        "nextLine",
        "nextLine",
        "reader",
        "readNext",
        "comparisons",
        "put",
        "nextLine",
        "valueOf",
        "nextLine",
        "comparisonsLevels",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "comparisonsLevels",
        "put",
        "parametersLocation",
        "entry",
        "comparisons",
        "entrySet",
        "parametersLocation",
        "put",
        "comparisonsLevels",
        "get",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "parametersLocation",
        "path",
        "reader",
        "path",
        "rows",
        "reader",
        "readAll",
        "column",
        "rows",
        "column",
        "equals",
        "rows",
        "indexOf",
        "column",
        "parsedCsv",
        "inputStream",
        "workbook",
        "inputStream",
        "pixelSheet",
        "workbook",
        "getSheetAt",
        "percentSheet",
        "workbook",
        "getSheetAt",
        "pixelsCountRow",
        "percentSheet",
        "getRow",
        "i",
        "i",
        "i",
        "pixelsCountCell",
        "pixelsCountRow",
        "getCell",
        "i",
        "pixelsCountCell",
        "setCellValue",
        "COVERAGE_MAP_PIXELS_COUNT",
        "csvMap",
        "parsedCsv",
        "entrySet",
        "entry",
        "csvMap",
        "getValue",
        "entrySet",
        "pixelRow",
        "pixelSheet",
        "getRow",
        "entry",
        "getKey",
        "pixelCell",
        "pixelRow",
        "getCell",
        "csvMap",
        "getKey",
        "pixelCell",
        "setCellValue",
        "entry",
        "getValue",
        "percentRow",
        "percentSheet",
        "getRow",
        "entry",
        "getKey",
        "percentCell",
        "percentRow",
        "getCell",
        "csvMap",
        "getKey",
        "percentCell",
        "setCellValue",
        "entry",
        "getValue",
        "COVERAGE_MAP_PIXELS_COUNT",
        "workbook",
        "write",
        "close",
        "e",
        "e",
        "printStackTrace"
    ],
    "literals": [
        "\"90_45_6_255\"",
        "\"Very Good\"",
        "\"176_88_11_255\"",
        "\"Good\"",
        "\"205_148_99_255\"",
        "\"Fair\"",
        "\"229_200_175_255\"",
        "\"Fringe\"",
        "\"255_255_255_255\"",
        "\"No coverage\"",
        "\"0_0_0_0\"",
        "\"Transparent\"",
        "\"comreg/ruster1/\"",
        "\"comreg/ruster3/\"",
        "\"comreg/compare/\"",
        "\"csv\"",
        "\"Folder creation error!\"",
        "\"csv\"",
        "\"Folder creation error!\"",
        "\"compare\"",
        "\"Folder creation error!\"",
        "\"/home/dmtech/comreg/ruster1/\"",
        "\"/home/dmtech/comreg/ruster3/\"",
        "\"trtrtrt\"",
        "\"eir_2g\"",
        "\"eir_2g\"",
        "\"eir_2g.csv\"",
        "\"eir_3g\"",
        "\"eir_3g\"",
        "\"eir_3g.csv\"",
        "\"eir_4g\"",
        "\"eir_4g\"",
        "\"eir_4g.csv\"",
        "\"three_2g\"",
        "\"three_2g\"",
        "\"three_2g.csv\"",
        "\"three_3g\"",
        "\"three_3g\"",
        "\"three_3g.csv\"",
        "\"three_4g\"",
        "\"three_4g\"",
        "\"three_4g.csv\"",
        "\"vodafone_2g\"",
        "\"vodafone_2g\"",
        "\"vodafone_2g.csv\"",
        "\"vodafone_3g\"",
        "\"vodafone_3g\"",
        "\"vodafone_3g.csv\"",
        "\"vodafone_4g\"",
        "\"vodafone_4g\"",
        "\"vodafone_4g.csv\"",
        "\"eir_2g\"",
        "\"csv/eir_2g.csv\"",
        "\"eir_3g\"",
        "\"csv/eir_3g.csv\"",
        "\"eir_4g\"",
        "\"csv/eir_4g.csv\"",
        "\"three_2g\"",
        "\"csv/three_2g.csv\"",
        "\"three_3g\"",
        "\"csv/three_3g.csv\"",
        "\"three_4g\"",
        "\"csv/three_4g.csv\"",
        "\"vodafone_2g\"",
        "\"csv/vodafone_2g.csv\"",
        "\"vodafone_3g\"",
        "\"csv/vodafone_3g.csv\"",
        "\"vodafone_4g\"",
        "\"csv/vodafone_4g.csv\"",
        "\"Started: \"",
        "\"Cant access folder\"",
        "\"png\"",
        "\"\\\\.\"",
        "\"/\"",
        "\"_\"",
        "\"_\"",
        "\"_\"",
        "\"#\"",
        "\"_\"",
        "\"_\"",
        "\"_\"",
        "\"\\nFile: \"",
        "\" => \"",
        "\" : \"",
        "\"Overall\"",
        "\"\\nOverall: \"",
        "\" => \"",
        "\" : \"",
        "\"Started: \"",
        "\"Cant access folder\"",
        "\"png\"",
        "\"\\\\.\"",
        "\"_\"",
        "\"_\"",
        "\"_\"",
        "\"\\nFile: \"",
        "\" : \"",
        "\"Overall\"",
        "\"\\nOverall: \"",
        "\" : \"",
        "\"#\"",
        "\"No coverage\"",
        "\"No coverage\"",
        "\"eir_2g.csv\"",
        "\"eir_3g.csv\"",
        "\"eir_4g.csv\"",
        "\"three_2g.csv\"",
        "\"three_3g.csv\"",
        "\"three_4g.csv\"",
        "\"vodafone_2g.csv\"",
        "\"vodafone_3g.csv\"",
        "\"vodafone_4g.csv\"",
        "\"comreg/compare/\"",
        "\"Fair => Fringe\"",
        "\"Fair => Good\"",
        "\"Fair => No coverage\"",
        "\"Fair => Transparent\"",
        "\"Fair => Very Good\"",
        "\"Fringe => Fair\"",
        "\"Fringe => Good\"",
        "\"Fringe => No coverage\"",
        "\"Fringe => Transparent\"",
        "\"Fringe => Very Good\"",
        "\"Good => Fair\"",
        "\"Good => Fringe\"",
        "\"Good => No coverage\"",
        "\"Good => Transparent\"",
        "\"Good => Very Good\"",
        "\"No coverage => Fair\"",
        "\"No coverage => Fringe\"",
        "\"No coverage => Good\"",
        "\"No coverage => Transparent\"",
        "\"No coverage => Very Good\"",
        "\"Transparent => Fair\"",
        "\"Transparent => Fringe\"",
        "\"Transparent => Good\"",
        "\"Transparent => No coverage\"",
        "\"Transparent => Very Good\"",
        "\"Very Good => Fair\"",
        "\"Very Good => Fringe\"",
        "\"Very Good => Good\"",
        "\"Very Good => No coverage\"",
        "\"Very Good => Transparent\"",
        "\"Overall\"",
        "\"comreg/Report.xlsx\"",
        "\"comreg/Result22.xlsx\"",
        "\"Report written successfully on disk.\""
    ],
    "variables": [
        "image1",
        "image2",
        "image",
        "nextLine"
    ],
    "comments": [
        "package net.awtg.comreg.utils;",
        "TODO do not use delimiter \\\\",
        "Dimension * images count",
        "private static final double COVERAGE_MAP_PIXELS_COUNT = 1280 * 1600 * 2;",
        "note that root paths must end with slash '\\\\' or '/'",
        "String txtRootPath = \"H:\\\\RASTER_5\\\\0b392f470e5e4b55955e6f7ee85745d0\\\\\";",
        "String ascRootPath = \"H:\\\\RASTER_6\\\\428ba7e004934ab38932762a4a8c2e1b\\\\\"; // TODO change paths to ASC paths",
        "TODO change paths to ASC paths",
        "",
        "compareOneRaster(txtRootPath, levelsMap);",
        "compareOneRaster(ascRootPath, levelsMap);",
        "compareTwoRasters(comparedCsfFile, txtRootPath, ascRootPath, ascRootPath, levelsMap);",
        "",
        "Long startTime = System.currentTimeMillis();",
        "createReport();",
        "Long endTime = System.currentTimeMillis();",
        "System.out.println(endTime-startTime);",
        "TODO change paths to ASC paths",
        "Map<String[], Integer> eir2g = findDifference(rootPath1 + \"eir_2g\\\\0_0\", rootPath2 + \"eir_2g\\\\0_0\", rootPath1 + \"compare\\\\eir_2g.csv\", levelsMap);",
        "Map<String[], Integer> eir3g = findDifference(rootPath1 + \"eir_3g\\\\0_0\", rootPath2 + \"eir_3g\\\\0_0\", rootPath1 + \"compare\\\\eir_3g.csv\", levelsMap);",
        "Map<String[], Integer> eir4g = findDifference(rootPath1 + \"eir_4g\\\\0_0\", rootPath2 + \"eir_4g\\\\0_0\", rootPath1 + \"compare\\\\eir_4g.csv\", levelsMap);",
        "Map<String[], Integer> three2g = findDifference(rootPath1 + \"three_2g\\\\0_0\", rootPath2 +\"three_2g\\\\0_0\", rootPath1 + \"compare\\\\three_2g.csv\", levelsMap);",
        "Map<String[], Integer> three3g = findDifference(rootPath1 + \"three_3g\\\\0_0\", rootPath2 +\"three_3g\\\\0_0\", rootPath1 + \"compare\\\\three_3g.csv\", levelsMap);",
        "Map<String[], Integer> three4g = findDifference(rootPath1 + \"three_4g\\\\0_0\", rootPath2 +\"three_4g\\\\0_0\", rootPath1 + \"compare\\\\three_4g.csv\", levelsMap);",
        "Map<String[], Integer> vodafone2g = findDifference(rootPath1 + \"vodafone_2g\\\\0_0\", rootPath2 +\"vodafone_2g\\\\0_0\", rootPath1 + \"compare\\\\vodafone_2g.csv\", levelsMap);",
        "Map<String[], Integer> vodafone3g = findDifference(rootPath1 + \"vodafone_3g\\\\0_0\", rootPath2 +\"vodafone_3g\\\\0_0\", rootPath1 + \"compare\\\\vodafone_3g.csv\", levelsMap);",
        "Map<String[], Integer> vodafone4g = findDifference(rootPath1 + \"vodafone_4g\\\\0_0\", rootPath2 +\"vodafone_4g\\\\0_0\", rootPath1 + \"compare\\\\vodafone_4g.csv\", levelsMap);",
        "// Create CSV report",
        "CSVWriter csv = new CSVWriter(new FileWriter(new File(csvPath + \"report.csv\")));",
        "csv.writeNext(new String[]{\"TXT coverage level (old)\", \"ASC coverage level (new)\", \"Eir 2G\", \"Eir 3G\",",
        "\"Eir 4G\", \"Three 2G\", \"Three 3G\", \"Three 4G\", \"Vodafone 2G\", \"Vodafone 3G\", \"Vodafone 4G\"});",
        "String[][] comparisons = {",
        "{\"Fair\", \"Fringe\"},",
        "{\"Fair\", \"Good\"},",
        "{\"Fair\", \"No coverage\"},",
        "{\"Fair\", \"Transparent\"},",
        "{\"Fair\", \"Very Good\"},",
        "{\"Fringe\", \"Fair\"},",
        "{\"Fringe\", \"Good\"},",
        "{\"Fringe\", \"No coverage\"},",
        "{\"Fringe\", \"Transparent\"},",
        "{\"Fringe\", \"Very Good\"},",
        "{\"Good\", \"Fair\"},",
        "{\"Good\", \"Fringe\"},",
        "{\"Good\", \"No coverage\"},",
        "{\"Good\", \"Transparent\"},",
        "{\"Good\", \"Very Good\"},",
        "{\"No coverage\", \"Fair\"},",
        "{\"No coverage\", \"Fringe\"},",
        "{\"No coverage\", \"Good\"},",
        "{\"No coverage\", \"Transparent\"},",
        "{\"No coverage\", \"Very Good\"},",
        "{\"Transparent\", \"Fair\"},",
        "{\"Transparent\", \"Fringe\"},",
        "{\"Transparent\", \"Good\"},",
        "{\"Transparent\", \"No coverage\"},",
        "{\"Transparent\", \"Very Good\"},",
        "{\"Very Good\", \"Fair\"},",
        "{\"Very Good\", \"Fringe\"},",
        "{\"Very Good\", \"Good\"},",
        "{\"Very Good\", \"No coverage\"},",
        "{\"Very Good\", \"Transparent\"}",
        "};",
        "",
        "",
        "Arrays.stream(comparisons).forEach(comparison -> {",
        "String[] line = {",
        "comparison[0],",
        "comparison[1],",
        "String.valueOf(((double) Optional.ofNullable(eir2g.get(comparison)).orElse(0)) * 100.0 / COVERAGE_MAP_PIXELS_COUNT),",
        "String.valueOf(((double) Optional.ofNullable(eir3g.get(comparison)).orElse(0)) * 100.0 / COVERAGE_MAP_PIXELS_COUNT),",
        "String.valueOf(((double) Optional.ofNullable(eir4g.get(comparison)).orElse(0)) * 100.0 / COVERAGE_MAP_PIXELS_COUNT),",
        "String.valueOf(((double) Optional.ofNullable(three2g.get(comparison)).orElse(0)) * 100.0 / COVERAGE_MAP_PIXELS_COUNT),",
        "String.valueOf(((double) Optional.ofNullable(three3g.get(comparison)).orElse(0)) * 100.0 / COVERAGE_MAP_PIXELS_COUNT),",
        "String.valueOf(((double) Optional.ofNullable(three4g.get(comparison)).orElse(0)) * 100.0 / COVERAGE_MAP_PIXELS_COUNT),",
        "String.valueOf(((double) Optional.ofNullable(vodafone2g.get(comparison)).orElse(0)) * 100.0 / COVERAGE_MAP_PIXELS_COUNT),",
        "String.valueOf(((double) Optional.ofNullable(vodafone3g.get(comparison)).orElse(0)) * 100.0 / COVERAGE_MAP_PIXELS_COUNT),",
        "String.valueOf(((double) Optional.ofNullable(vodafone4g.get(comparison)).orElse(0)) * 100.0 / COVERAGE_MAP_PIXELS_COUNT)",
        "};",
        "csv.writeNext(line);",
        "});",
        "csv.writeNext(new String[]{\"\", \"Total pixels count\", String.valueOf(COVERAGE_MAP_PIXELS_COUNT)});",
        "",
        "csv.close();",
        "calculateLevelPixels(rootPath + \"eir_2g\\\\0_0\", rootPath + \"csv\\\\eir_2g.csv\", levelsMap);",
        "calculateLevelPixels(rootPath + \"eir_3g\\\\0_0\", rootPath + \"csv\\\\eir_3g.csv\", levelsMap);",
        "calculateLevelPixels(rootPath + \"eir_4g\\\\0_0\", rootPath + \"csv\\\\eir_4g.csv\", levelsMap);",
        "calculateLevelPixels(rootPath + \"three_2g\\\\0_0\", rootPath + \"csv\\\\three_2g.csv\", levelsMap);",
        "calculateLevelPixels(rootPath + \"three_3g\\\\0_0\", rootPath + \"csv\\\\three_3g.csv\", levelsMap);",
        "calculateLevelPixels(rootPath + \"three_4g\\\\0_0\", rootPath + \"csv\\\\three_4g.csv\", levelsMap);",
        "calculateLevelPixels(rootPath + \"vodafone_2g\\\\0_0\", rootPath + \"csv\\\\vodafone_2g.csv\", levelsMap);",
        "calculateLevelPixels(rootPath + \"vodafone_3g\\\\0_0\", rootPath + \"csv\\\\vodafone_3g.csv\", levelsMap);",
        "calculateLevelPixels(rootPath + \"vodafone_4g\\\\0_0\", rootPath + \"csv\\\\vodafone_4g.csv\", levelsMap);",
        "filter only PNG files",
        "sort numerically",
        "image2 = ImageIO.read(new File(folderPath2 + \"\\\\\" + file.getName()));",
        "summarize file data to raster",
        "filter only PNG files",
        ".sorted(Comparator.comparing(e -> Integer.valueOf(e.getName().split(\"\\\\.\")[0]))) // sort numerically",
        "sort numerically",
        "summarize file data to raster",
        "init with 0 if not contains",
        "init with 0 if not contains",
        "Fill pixel count cells"
    ],
    "docstrings": [
        "* Temporary utilities for comparing rasters made from ASC and TXT files.<br>\n * Execute main method only. Not for usages in other classes.\n *\n * @author Evgeni Bokhanov",
        "* Compare two raster sets by finding differ pixels.\n     * Create a report file with all overalls.\n     *\n     * @param rootPath1 Root path of first raster set\n     * @param rootPath2 Root path of second raster set\n     * @param csvPath Output CSV file path\n     * @param levelsMap Coverage levels\n     * @throws IOException If some folders of files not found or not have access",
        "* Count pixels by coverage levels for given raster set.\n     *\n     * @param rootPath Root path of raster set\n     * @param levelsMap Coverage levels\n     * @throws IOException If some folders of files not found or not have access",
        "* Compare two raster by finding differ pixels.\n     * Return Map of comparing levels and appropriate differing pixels count.<br>\n     * E.g. key = ['Good', 'Fair'], value = 100\n     *\n     * @param folderPath1 Input folder path of first raster\n     * @param folderPath2 Input folder path of second raster\n     * @param csvPath Output CSV file path\n     * @param levelsMap Coverage levels\n     * @return Map of differences\n     * @throws IOException If some folders of files not found or not have access",
        "* Counts number of pixels for given levels.<br>\n     * Iterates over all PNG images in given folder.<br>\n     * For each image iterates over all pixels.<br>\n     * Converts pixel to coverage level and counts it.<br>\n     * Writes results for each image and summarized values to give CSV file.<br>\n     * Creates CSV file if it not exist, otherwise overwrites it.\n     *\n     * @param folderPath Input folder path\n     * @param csvPath Output CSV file path\n     * @param levelsMap Map of coverage levels and its colors\n     * @throws IOException If some folders of files not found or not have access",
        "* Increment value in the map by for given key.<br>\n     * If map doesn't contain key, adds it to the map with 0 value.\n     *\n     * @param map Map\n     * @param key Key",
        "* Summarize values from list of map to one map.\n     *\n     * @param overall List of maps to summarize\n     * @return Map",
        "* Convert two colors string to two levels string array.<br>\n     * E.g. '176_88_11_255#0_0_0_0' => ['Good', 'Transparent']\n     *\n     * @param colorStr Color string, e.g. '176_88_11_255#0_0_0_0'\n     * @param levelsMap Coverage level map\n     * @return Readable string array"
    ],
    "functions": [
        "main",
        "compareTwoRasters",
        "compareOneRaster",
        "findDifference",
        "calculateLevelPixels",
        "plus",
        "calculateOverall",
        "colorsToLevels",
        "createReport",
        "parseCsv",
        "getIndex",
        "fillColumns"
    ],
    "classes": [
        "AscTempHelper"
    ]
}