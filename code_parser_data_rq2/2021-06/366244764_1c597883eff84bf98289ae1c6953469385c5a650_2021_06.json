{
    "identifiers": [
        "time",
        "Setting",
        "Logger",
        "name",
        "logger",
        "name",
        "logger",
        "logger",
        "Logger",
        "Setting",
        "id",
        "callback",
        "id",
        "callback",
        "completeTask",
        "task",
        "result",
        "error",
        "task",
        "task",
        "result",
        "error",
        "r",
        "error",
        "task",
        "r",
        "task",
        "task",
        "task",
        "result",
        "completeTask",
        "task",
        "result",
        "error",
        "error",
        "error",
        "completeTask",
        "task",
        "error",
        "taskId",
        "task",
        "task",
        "taskId",
        "taskId",
        "taskId",
        "taskId",
        "taskId",
        "resolve",
        "setInterval",
        "clearInterval",
        "checkIID",
        "resolve",
        "taskId",
        "taskId",
        "taskId",
        "taskId",
        "taskId",
        "taskId",
        "taskId",
        "taskId",
        "taskId",
        "taskId",
        "taskId",
        "taskId",
        "task",
        "task",
        "time",
        "time",
        "startTime",
        "startTime"
    ],
    "literals": [
        "'./time'",
        "'./models/Setting'",
        "'./Logger'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'sync.maxConcurrentConnections'",
        "string",
        "'Cannot push task when queue is stopping'",
        "'Unknown error'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "No such task: ${taskId}",
        "string",
        "No such task: ${taskId}",
        "TaskQueue.stop: ${this.name_}: waiting for tasks to complete: ${Object.keys(this.processingTasks_).length}",
        "TaskQueue.stop: ${this.name_}: timed out waiting for task to complete",
        "TaskQueue.stop: ${this.name_}: Done, waited for ${Date.now() - startTime}"
    ],
    "variables": [
        "completeTask",
        "r",
        "task",
        "checkIID",
        "task",
        "startTime"
    ],
    "comments": [
        "In general it's not a big issue if some tasks are still running because",
        "it won't call anything unexpected in caller code, since the caller has",
        "to explicitely retrieve the results"
    ],
    "docstrings": [],
    "functions": [
        "concurrency",
        "push",
        "processQueue_",
        "isWaiting",
        "isProcessing",
        "isDone",
        "waitForAll",
        "taskExists",
        "taskResult",
        "waitForResult",
        "stop",
        "isStopping"
    ],
    "classes": [
        "TaskQueue"
    ]
}