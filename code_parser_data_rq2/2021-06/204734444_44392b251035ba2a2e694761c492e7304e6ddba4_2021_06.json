{
    "identifiers": [
        "typing",
        "Any",
        "Callable",
        "Tuple",
        "torch",
        "torch",
        "Tensor",
        "captum",
        "_utils",
        "common",
        "_format_additional_forward_args",
        "_format_input",
        "_format_output",
        "_is_tuple",
        "_select_targets",
        "captum",
        "_utils",
        "gradient",
        "apply_gradient_requirements",
        "compute_gradients",
        "undo_gradient_requirements",
        "captum",
        "_utils",
        "typing",
        "TensorOrTupleOfTensorsGeneric",
        "captum",
        "robust",
        "_core",
        "perturbation",
        "Perturbation",
        "Perturbation",
        "forward_func",
        "Callable",
        "loss_func",
        "Callable",
        "lower_bound",
        "upper_bound",
        "forward_func",
        "loss_func",
        "x",
        "torch",
        "clamp",
        "x",
        "min",
        "lower_bound",
        "max",
        "upper_bound",
        "inputs",
        "TensorOrTupleOfTensorsGeneric",
        "epsilon",
        "target",
        "Any",
        "additional_forward_args",
        "Any",
        "targeted",
        "TensorOrTupleOfTensorsGeneric",
        "_is_tuple",
        "inputs",
        "Tuple",
        "Tensor",
        "_format_input",
        "inputs",
        "apply_gradient_requirements",
        "inputs",
        "Tensor",
        "_format_additional_forward_args",
        "additional_forward_args",
        "forward_func",
        "inputs",
        "additional_inputs",
        "additional_inputs",
        "inputs",
        "loss_func",
        "loss_func",
        "outputs",
        "target",
        "torch",
        "log",
        "outputs",
        "_select_targets",
        "loss",
        "target",
        "compute_gradients",
        "_forward_with_loss",
        "inputs",
        "undo_gradient_requirements",
        "inputs",
        "gradient_mask",
        "_perturb",
        "inputs",
        "grads",
        "epsilon",
        "targeted",
        "bound",
        "perturbed_inputs",
        "i",
        "i",
        "len",
        "perturbed_inputs",
        "_format_output",
        "is_inputs_tuple",
        "perturbed_inputs",
        "inputs",
        "Tuple",
        "grads",
        "Tuple",
        "epsilon",
        "targeted",
        "Tuple",
        "targeted",
        "torch",
        "where",
        "torch",
        "abs",
        "grad",
        "zero_thresh",
        "inp",
        "multiplier",
        "epsilon",
        "torch",
        "sign",
        "grad",
        "inp",
        "grad",
        "inp",
        "grads",
        "inputs",
        "inputs"
    ],
    "literals": [
        "r\"\"\"\n    Fast Gradient Sign Method is an one-step method that can generate\n    adversarial examples. For non-targeted attack, the formulation is\n    x' = x + epsilon * sign(gradient of L(theta, x, y)).\n    For targeted attack on t, the formulation is\n    x' = x - epsilon * sign(gradient of L(theta, x, t)).\n    L(theta, x, y) is the model's loss function with respect to model\n    parameters, inputs and labels.\n\n    More details on Fast Gradient Sign Method can be found in the original\n    paper:\n    https://arxiv.org/pdf/1412.6572.pdf\n    \"\"\"",
        "\"-inf\"",
        "\"inf\"",
        "r\"\"\"\n        Args:\n            forward_func (callable): The pytorch model for which the attack is\n                        computed.\n            loss_func (callable, optional): Loss function of which the gradient\n                        computed. The loss function should take in outputs of the\n                        model and labels, and return a loss tensor.\n                        The default loss function is negative log.\n            lower_bound (float, optional): Lower bound of input values.\n            upper_bound (float, optional): Upper bound of input values.\n                        e.g. image pixels must be in the range 0-255\n\n        Attributes:\n            bound (Callable): A function that bounds the input values based on\n                        given lower_bound and upper_bound. Can be overwritten for\n                        custom use cases if necessary.\n            zero_thresh (float): The threshold below which gradient will be treated\n                        as zero. Can be modified for custom use cases if necessary.\n        \"\"\"",
        "r\"\"\"\n        This method computes and returns the perturbed input for each input tensor.\n        It supports both targeted and non-targeted attacks.\n\n        Args:\n\n            inputs (tensor or tuple of tensors): Input for which adversarial\n                        attack is computed. It can be provided as a single\n                        tensor or a tuple of multiple tensors. If multiple\n                        input tensors are provided, the batch sizes must be\n                        aligned accross all tensors.\n            epsilon (float): Step size of perturbation.\n            target (any): True labels of inputs if non-targeted attack is\n                        desired. Target class of inputs if targeted attack\n                        is desired. Target will be passed to the loss function\n                        to compute loss, so the type needs to match the\n                        argument type of the loss function.\n\n                        If using the default negative log as loss function,\n                        labels should be of type int, tuple, tensor or list.\n                        For general 2D outputs, labels can be either:\n\n                        - a single integer or a tensor containing a single\n                          integer, which is applied to all input examples\n\n                        - a list of integers or a 1D tensor, with length matching\n                          the number of examples in inputs (dim 0). Each integer\n                          is applied as the label for the corresponding example.\n\n                        For outputs with > 2 dimensions, labels can be either:\n\n                        - A single tuple, which contains #output_dims - 1\n                          elements. This label index is applied to all examples.\n\n                        - A list of tuples with length equal to the number of\n                          examples in inputs (dim 0), and each tuple containing\n                          #output_dims - 1 elements. Each tuple is applied as the\n                          label for the corresponding example.\n            additional_forward_args (any, optional): If the forward function\n                        requires additional arguments other than the inputs for\n                        which attributions should not be computed, this argument\n                        can be provided. These arguments are provided to\n                        forward_func in order following the arguments in inputs.\n                        Default: None.\n            targeted (bool, optional): If attack should be targeted.\n                        Default: False.\n\n\n        Returns:\n\n            - **perturbed inputs** (*tensor* or tuple of *tensors*):\n                        Perturbed input for each\n                        input tensor. The perturbed inputs have the same shape and\n                        dimensionality as the inputs.\n                        If a single tensor is provided as inputs, a single tensor\n                        is returned. If a tuple is provided for inputs, a tuple of\n                        corresponding sized tensors is returned.\n        \"\"\"",
        "r\"\"\"\n        A helper function to calculate the perturbed inputs given original\n        inputs, gradient of loss function and epsilon. The calculation is\n        different for targetd v.s. non-targeted as described above.\n        \"\"\""
    ],
    "variables": [
        "forward_func",
        "loss_func",
        "bound",
        "zero_thresh",
        "is_inputs_tuple",
        "inputs",
        "gradient_mask",
        "additional_inputs",
        "outputs",
        "loss",
        "grads",
        "perturbed_inputs",
        "perturbed_inputs",
        "multiplier",
        "inputs"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "type: ignore",
        "type: ignore"
    ],
    "docstrings": [],
    "functions": [
        "perturb",
        "_forward_with_loss",
        "_perturb"
    ],
    "classes": [
        "FGSM"
    ]
}