{
    "identifiers": [
        "services",
        "db_service",
        "DbService",
        "scipy",
        "sparse",
        "lil_matrix",
        "sklearn",
        "preprocessing",
        "normalize",
        "scipy",
        "sparse",
        "spdiags",
        "scipy",
        "sparse",
        "vstack",
        "numpy",
        "np",
        "json",
        "DbService",
        "db_service",
        "execute_script",
        "col_id",
        "vacancy_id",
        "vacancies_id",
        "col_id",
        "db_service",
        "execute_script",
        "col_id",
        "skill_name",
        "skills",
        "col_id",
        "len",
        "vacancy_to_col",
        "len",
        "skill_to_row",
        "db_service",
        "execute_script",
        "lil_matrix",
        "len",
        "skill_to_row",
        "len",
        "vacancy_to_col",
        "vacancy",
        "skill",
        "vacancy_skill",
        "skill_to_row",
        "get",
        "skill",
        "vacancy_to_col",
        "get",
        "vacancy",
        "row_id",
        "col_id",
        "matrix",
        "nnz",
        "len",
        "skill_to_row",
        "len",
        "vacancy_to_col",
        "percent",
        "normalize",
        "matrix",
        "tocsr",
        "tocsr",
        "normalized_matrix",
        "dot",
        "normalized_matrix",
        "T",
        "spdiags",
        "cosine_sim_matrix",
        "diagonal",
        "cosine_sim_matrix",
        "shape",
        "format",
        "cosine_sim_matrix",
        "diag",
        "cosine_sim_matrix",
        "nnz",
        "cosine_sim_matrix",
        "shape",
        "cosine_sim_matrix",
        "shape",
        "percent",
        "cosine_sim_matrix",
        "data",
        "nbytes",
        "cosine_sim_matrix",
        "tocsr",
        "row_id",
        "np",
        "unique",
        "cosine_sim_matrix",
        "nonzero",
        "cosine_sim_matrix",
        "row_id",
        "row",
        "nnz",
        "m",
        "row",
        "tolil",
        "row",
        "nonzero",
        "np",
        "argsort",
        "row",
        "data",
        "m",
        "row",
        "work_row",
        "tocsr",
        "rows",
        "append",
        "row",
        "vstack",
        "rows",
        "normalize",
        "topk_matrix",
        "open",
        "file",
        "np",
        "save",
        "file",
        "topk_matrix",
        "toarray",
        "open",
        "file",
        "np",
        "load",
        "file",
        "lil_matrix",
        "mat",
        "topk_matrix",
        "nnz",
        "topk_matrix",
        "shape",
        "topk_matrix",
        "shape",
        "percent",
        "topk_matrix",
        "data",
        "nbytes",
        "row_id",
        "skill",
        "skill",
        "row_id",
        "skill_to_row",
        "items",
        "open",
        "file",
        "json",
        "dump",
        "row_to_skill",
        "file",
        "open",
        "file",
        "json",
        "load",
        "file",
        "row",
        "skill",
        "row",
        "skill",
        "row_to_skill",
        "items",
        "skill",
        "row",
        "row",
        "skill",
        "row_to_skill",
        "items"
    ],
    "literals": [
        "'Количество вакансий'",
        "'Количество навыков'",
        "u\"Процент заполненности матрицы: %.2f%%\"",
        "'csr'",
        "u\"Процент заполненности матрицы: %.2f%%\"",
        "u\"Размер в МБ:\"",
        "'colab_filtration/topk_matrix'",
        "'wb'",
        "'colab_filtration/topk_matrix'",
        "'rb'",
        "u\"Процент заполненности матрицы: %.2f%%\"",
        "u\"Размер в МБ:\"",
        "'colab_filtration/row_to_skill'",
        "'w'",
        "'colab_filtration/row_to_skill'",
        "'r'"
    ],
    "variables": [
        "db_service",
        "vacancies_id",
        "vacancy_to_col",
        "vacancy_to_col",
        "vacancy_id",
        "skills",
        "skill_to_row",
        "skill_to_row",
        "skill_name",
        "vacancy_skill",
        "matrix",
        "row_id",
        "col_id",
        "matrix",
        "row_id",
        "col_id",
        "percent",
        "normalized_matrix",
        "cosine_sim_matrix",
        "diag",
        "cosine_sim_matrix",
        "percent",
        "cosine_sim_matrix",
        "m",
        "rows",
        "row",
        "work_row",
        "work_row",
        "row",
        "topk_matrix",
        "topk_matrix",
        "mat",
        "topk_matrix",
        "percent",
        "row_to_skill",
        "row_to_skill",
        "row_to_skill",
        "skill_to_row"
    ],
    "comments": [
        "Получение вакансий",
        "Получение ключевых навыков",
        "----------------------------------------------------------------------------------------------------------------------",
        "Создание матрицы skill-vacancy",
        "----------------------------------------------------------------------------------------------------------------------",
        "Нормализация",
        "Вычисление скалярного произведения",
        "обнуляем диагональ, чтобы исключить ее из рекомендаций",
        "быстрое обнуление диагонали",
        "----------------------------------------------------------------------------------------------------------------------",
        "построим top-m матрицу в один поток",
        "исходная строка матрицы",
        "заменяем все top-m элементов на 0, результат отнимаем от row",
        "при большом количестве столбцов данная операция работает быстрее,",
        "чем простое зануление всех элементов кроме top-m",
        "нормализуем матрицу-результат",
        "Сохранение полученной матрицы",
        "----------------------------------------------------------------------------------------------------------------------",
        "индекс для преобразования row_id -> skill, где row_id - идентификатор навыка в матрице",
        "Запись в файл",
        "user_skills = ['Python', 'PostgreSQL', 'Git', ' SQL', 'C++', 'Pandas']",
        "",
        "",
        "def vectorise(skills):",
        "user_vector = lil_matrix((len(skill_to_row), 1),)",
        "for s in skills:",
        "if skill_to_row.get(s) is None:",
        "continue",
        "user_vector[skill_to_row[s], 0] = 1",
        "return user_vector",
        "",
        "",
        "user_vector = vectorise(user_skills).tocsr()",
        "",
        "# ----------------------------------------------------------------------------------------------------------------------",
        "",
        "# 1. перемножить матрицу item-item и вектор рейтингов пользователя A",
        "x = topk_matrix.dot(user_vector).tolil()",
        "# 2. занулить ячейки, соответствующие навыкам, которые пользователь A уже оценил",
        "for i, j in zip(*user_vector.nonzero()):",
        "x[i, j] = 0",
        "",
        "# превращаем столбец результата в вектор",
        "x = x.T.tocsr()",
        "",
        "# 3. отсортировать навыки в порядке убывания значений и получить top-k рекомендаций (quorum = 5)",
        "quorum = 5",
        "data_ids = np.argsort(x.data)[-quorum:][::-1]",
        "",
        "result = []",
        "for arg_id in data_ids:",
        "row_id, p = x.indices[arg_id], x.data[arg_id]",
        "result.append({\"obj_id\": row_to_skill[row_id], \"weight\": p})",
        "",
        "print(result)"
    ],
    "docstrings": [
        "\"\"\"\n    SELECT v.id\n    FROM vacancies as v INNER JOIN vacancy_skill as v_s ON v.id = v_s.vacancy_id\n    GROUP BY v.id\n    HAVING count(v_s.vacancy_id) > 2\n\"\"\"",
        "\"\"\"\n    SELECT DISTINCT skill_name\n    FROM vacancy_skill\n    GROUP BY skill_name\n    HAVING count(vacancy_id) > 25\n\"\"\"",
        "\"\"\"\n    SELECT *\n    FROM vacancy_skill\n\"\"\""
    ],
    "functions": [],
    "classes": []
}