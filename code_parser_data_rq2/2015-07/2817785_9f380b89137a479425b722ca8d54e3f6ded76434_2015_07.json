{
    "identifiers": [
        "absolute_import",
        "re",
        "json",
        "logging",
        "requests",
        "logging",
        "getLogger",
        "urllib3_logger",
        "setLevel",
        "logging",
        "WARNING",
        "logging",
        "getLogger",
        "__salt__",
        "requests",
        "session",
        "config",
        "get",
        "config",
        "get",
        "session",
        "headers",
        "update",
        "session",
        "router",
        "method",
        "data",
        "router",
        "ROUTERS",
        "json",
        "dumps",
        "action",
        "router",
        "method",
        "method",
        "data",
        "data",
        "tid",
        "__salt__",
        "log",
        "debug",
        "router",
        "method",
        "format",
        "config",
        "get",
        "ROUTERS",
        "router",
        "_session",
        "post",
        "url",
        "data",
        "req_data",
        "re",
        "search",
        "response",
        "content",
        "log",
        "error",
        "json",
        "loads",
        "response",
        "content",
        "get",
        "__salt__",
        "device",
        "_router_request",
        "data",
        "data",
        "dev",
        "all_devices",
        "dev",
        "device",
        "all_devices",
        "log",
        "info",
        "device",
        "dev",
        "log",
        "info",
        "device",
        "device",
        "device",
        "__salt__",
        "_find_device",
        "device",
        "device",
        "device_class",
        "collector",
        "device",
        "__salt__",
        "device_class",
        "_determine_device_class",
        "log",
        "info",
        "device",
        "deviceName",
        "device",
        "deviceClass",
        "device_class",
        "model",
        "collector",
        "collector",
        "_router_request",
        "data",
        "data",
        "response"
    ],
    "literals": [
        "'urllib3'",
        "'MessagingRouter'",
        "'messaging'",
        "'EventsRouter'",
        "'evconsole'",
        "'ProcessRouter'",
        "'process'",
        "'ServiceRouter'",
        "'service'",
        "'DeviceRouter'",
        "'device'",
        "'NetworkRouter'",
        "'network'",
        "'TemplateRouter'",
        "'template'",
        "'DetailNavRouter'",
        "'detailnav'",
        "'ReportRouter'",
        "'report'",
        "'MibRouter'",
        "'mib'",
        "'ZenPackRouter'",
        "'zenpack'",
        "'zenoss'",
        "'config.option'",
        "'zenoss'",
        "'username'",
        "'password'",
        "'Content-type'",
        "'application/json; charset=utf-8'",
        "'rpc'",
        "'config.option'",
        "'zenoss'",
        "'Making request to router %s with method %s'",
        "'{0}/zport/dmd/{1}_router'",
        "'hostname'",
        "'name=\"__ac_name\"'",
        "'Request failed. Bad username/password.'",
        "'Request failed. Bad username/password.'",
        "'result'",
        "'grains.get'",
        "'kernel'",
        "'Linux'",
        "'/Server/Linux'",
        "'uid'",
        "'/zport/dmd/Devices'",
        "'params'",
        "'limit'",
        "'DeviceRouter'",
        "'getDevices'",
        "'devices'",
        "'name'",
        "'hash'",
        "'hash'",
        "'Found device %s in Zenoss'",
        "'Unable to find device %s in Zenoss'",
        "'grains.get'",
        "'fqdn'",
        "'localhost'",
        "'grains.get'",
        "'fqdn'",
        "'Adding device %s to zenoss'",
        "'DeviceRouter'",
        "'addDevice'"
    ],
    "variables": [
        "urllib3_logger",
        "log",
        "ROUTERS",
        "config",
        "session",
        "session",
        "auth",
        "session",
        "verify",
        "req_data",
        "config",
        "url",
        "response",
        "data",
        "all_devices",
        "dev",
        "device",
        "device",
        "device_class",
        "data",
        "response"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Disable INFO level logs from requests/urllib3",
        "The API returns a 200 response code even whe auth is bad.",
        "With bad auth, the login page is displayed. Here I search for",
        "an element on the login form to determine if auth failed.",
        "We need to save the has for later operations"
    ],
    "docstrings": [
        "'''\nModule for working with the Zenoss API\n\n:configuration: This module requires a 'zenoss' entry in the master/minion config.\n\n    For example:\n    .. code-block:: yaml\n        zenoss:\n          hostname: https://zenoss.example.com\n          username: admin\n          password: admin123\n'''",
        "'''\n    Create a session to be used when connecting to Zenoss.\n    '''",
        "'''\n    Make a request to the Zenoss API router\n    '''",
        "'''\n    If no device class is given when adding a device, this helps determine\n    '''",
        "'''\n    Find a device in Zenoss. If device not found, returns None.\n    '''",
        "'''\n    Check to see if a device already exists in Zenoss.\n\n    Parameters:\n        device:         (Optional) Will use the grain 'fqdn' by default\n\n    CLI Example:\n        salt '*' zenoss.device_exists\n    '''",
        "'''\n    A function to connect to a zenoss server and add a new device entry.\n\n    Parameters:\n        device:         (Optional) Will use the grain 'fqdn' by default.\n        device_class:   (Optional) The device class to use. If none, will determine based on kernel grain.\n        collector:      (Optional) The collector to use for this device. Defaults to 'localhost'.\n\n    CLI Example:\n        salt '*' zenoss.add_device\n    '''"
    ],
    "functions": [
        "__virtual__",
        "_session",
        "_router_request",
        "_determine_device_class",
        "_find_device",
        "device_exists",
        "add_device"
    ],
    "classes": []
}