{
    "identifiers": [
        "ItemsHoldr",
        "overrideAutoSave",
        "i",
        "i",
        "key",
        "key",
        "key",
        "key",
        "settings",
        "key",
        "value",
        "key",
        "amount",
        "ItemsHoldr",
        "ItemsHolder",
        "key",
        "settings",
        "ItemsHolder",
        "ItemsHolder",
        "ItemsHolder",
        "ItemsHolder",
        "settings",
        "key",
        "ItemsHolder",
        "ItemsHolder",
        "key",
        "ItemsHolder",
        "key",
        "ItemsHolder",
        "ItemsHolder",
        "ItemsHolder",
        "key",
        "localStorage",
        "value",
        "value",
        "value",
        "value",
        "overrideAutoSave",
        "overrideAutoSave",
        "i",
        "i",
        "settings",
        "settings",
        "settings",
        "settings",
        "settings",
        "settings",
        "settings",
        "settings",
        "localStorage",
        "localStorage",
        "settings",
        "settings",
        "settings",
        "settings",
        "key",
        "settings",
        "settings",
        "key",
        "key",
        "settings",
        "key",
        "settings",
        "settings",
        "settings",
        "index",
        "index",
        "i",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "i",
        "i",
        "output",
        "i",
        "i",
        "output",
        "key",
        "settings",
        "key",
        "ItemValue",
        "key",
        "settings",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "i",
        "i",
        "i",
        "key",
        "value",
        "key",
        "key",
        "value",
        "key",
        "key",
        "amount",
        "key",
        "key",
        "arguments",
        "amount",
        "key",
        "key",
        "amount",
        "key",
        "key",
        "amount",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "containers",
        "containers",
        "i",
        "i",
        "containers",
        "i",
        "child",
        "containers",
        "i",
        "current",
        "child",
        "current",
        "child",
        "key",
        "key",
        "child",
        "key",
        "output",
        "value",
        "value",
        "value",
        "value",
        "tag",
        "args",
        "tag",
        "i",
        "i",
        "args",
        "i",
        "element",
        "args",
        "i",
        "element",
        "recipient",
        "donor",
        "noOverride",
        "i",
        "donor",
        "donor",
        "i",
        "noOverride",
        "recipient",
        "i",
        "setting",
        "donor",
        "i",
        "setting",
        "recipient",
        "i",
        "recipient",
        "i",
        "setting",
        "recipient",
        "i",
        "setting",
        "noOverride",
        "recipient",
        "i",
        "setting",
        "recipient",
        "recipient",
        "donor",
        "noOverride",
        "i",
        "donor",
        "donor",
        "i",
        "noOverride",
        "recipient",
        "i",
        "setting",
        "donor",
        "i",
        "i",
        "setting",
        "j",
        "j",
        "setting",
        "j",
        "recipient",
        "setting",
        "j",
        "recipient",
        "i",
        "setting",
        "setting",
        "recipient",
        "i",
        "recipient",
        "i",
        "setting",
        "recipient",
        "i",
        "setting",
        "noOverride",
        "recipient",
        "i",
        "setting",
        "recipient",
        "key",
        "key",
        "key",
        "value",
        "key",
        "value",
        "i",
        "i",
        "i",
        "key",
        "key",
        "index",
        "index",
        "output",
        "output",
        "output"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"use strict\"",
        "string",
        "string",
        "string",
        "\"value\"",
        "\"div\"",
        "\"_value \"",
        "\"div\"",
        "\"textContent\"",
        "\"div\"",
        "\"textContent\"",
        "\"minimum\"",
        "\"maximum\"",
        "\"undefined\"",
        "\"null\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"\"",
        "\"undefined\"",
        "\"div\"",
        "\"className\"",
        "\"_container\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Unknown key given to ItemsHoldr: '\"",
        "\"'.\"",
        "string",
        "\"hidden\"",
        "\"visible\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"div\"",
        "string",
        "\"object\"",
        "string",
        "\"children\"",
        "\"undefined\"",
        "\"style\"",
        "\"object\"",
        "string",
        "\"keys\"",
        "\"getItem\"",
        "string",
        "\"setItem\"",
        "string",
        "string",
        "\"clear\"",
        "\"removeItem\"",
        "string",
        "\"key\"",
        "string",
        "\"length\"",
        "\"get\"",
        "\"remainingSpace\"",
        "\"get\""
    ],
    "variables": [
        "value",
        "key",
        "output",
        "i",
        "i",
        "key",
        "output",
        "current",
        "output",
        "child",
        "key",
        "i",
        "element",
        "i",
        "setting",
        "i",
        "setting",
        "i",
        "j",
        "i",
        "output"
    ],
    "comments": [
        "If there exists an old version of this property, get it",
        "Otherwise save the new version to memory",
        "Mins and maxes must be obeyed before any other considerations",
        "An Array of elements as createElement arguments, outside-to-inside.",
        "Simple gets",
        "Retrieval",
        "ItemValues",
        "Updating values",
        "HTML helpers",
        "Utilities",
        "For each provided object, add those settings to the element",
        "For each attribute of the donor:",
        "If noOverride, don't override already existing properties",
        "If it's an object, recurse on a new version of it",
        "Regular primitives are easy to copy otherwise",
        "For each attribute of the donor:",
        "If noOverride, don't override already existing properties",
        "Special cases for HTML elements",
        "Children: just append all of them directly",
        "Style: proliferate (instead of making a new Object)",
        "By default, use the normal proliferate logic",
        "If it's an object, recurse on a new version of it",
        "Regular primitives are easy to copy otherwise",
        "Is there a way to calculate this?"
    ],
    "docstrings": [
        "* Creates a new ItemValue with the given key and settings. Defaults are given\n         * to the value via proliferate before the settings.\n         * \n         * @constructor\n         * @param {ItemsHoldr} ItemsHolder   The container for this value.\n         * @param {String} key   The key to reference this new ItemValue by.\n         * @param {IItemValueSettings} settings   Any optional custom settings.",
        "* General update Function to be run whenever the internal value is changed.\n         * It runs all the trigger, modular, etc. checks, updates the HTML element\n         * if there is one, and updates localStorage if needed.",
        "* Checks if the current value should trigger a callback, and if so calls \n         * it.\n         * \n         * @this {ItemValue}",
        "* Checks if the current value is greater than the modularity (assuming\n         * modular is a non-zero Numbers), and if so, continuously reduces value and \n         * calls this.onModular.\n         * \n         * @this {ItemValue}",
        "* Updates the ItemValue's element's second child to be the ItemValue's value.\n         * \n         * @this {ItemValue}",
        "* Retrieves a ItemValue's value from localStorage, making sure not to try to\n         * JSON.parse an undefined or null value.\n         * \n         * @return {Mixed}",
        "* Stores a ItemValue's value in localStorage under the prefix plus its key.\n         * \n         * @param {Boolean} [overrideAutoSave]   Whether the policy on saving should\n         *                                       be ignored (so saving happens\n         *                                       regardless). By default, false.",
        "* A versatile container to store and manipulate values in localStorage, and\n     * optionally keep an updated HTML container showing these values. Operations \n     * such as setting, increasing/decreasing, and default values are all abstracted\n     * automatically. ItemValues are stored in memory as well as in localStorage for\n     * fast lookups.\n     * \n     * @author \"Josh Goldberg\" <josh@fullscreenmario.com>",
        "* The ItemValues being stored, keyed by name.",
        "* A listing of all the String keys for the stored items.",
        "* Default attributes for ItemValues.",
        "* A reference to localStorage or a replacement object.",
        "* Whether new items are allowed to be created using setItem.",
        "* Whether this should save changes to localStorage automatically.",
        "* A prefix to store things under in localStorage.",
        "* A container element containing children for each value's element.",
        "* An Array of elements as createElement arguments, outside-to-inside.",
        "* Any hardcoded changes to element content, such as \"INF\" for Infinity.",
        "* Arguments to be passed to triggered events.",
        "* @param {IItemsHoldrSettings} [settings]",
        "*",
        "* @return {Mixed} The values contained within, keyed by their keys.",
        "* @return {Mixed} Default attributes for values.",
        "* @return {Mixed} A reference to localStorage or a replacment object.",
        "* @return {Boolean} Whether this should save changes to localStorage \n         *                   automatically.",
        "* @return {String} The prefix to store thigns under in localStorage.",
        "* @return {HTMLElement} The container HTML element, if it exists.",
        "* @return {Mixed[][]} The createElement arguments for the HTML container\n         *                     elements, outside-to-inside.",
        "* @return {Mixed} Any hard-coded changes to element content.",
        "* @return {Mixed[]} Arguments to be passed to triggered events.",
        "* @return {String[]} The names of all value's keys.",
        "* @param {String} key   The key for a known value.\n         * @return {Mixed} The known value of a key, assuming that key exists.",
        "* @param {String} key   The key for a known value.\n         * @return {Object} The settings for that particular key.",
        "* @param {String} key   The key for a potentially known value.\n         * @return {Boolean} Whether there is a value under that key.",
        "* @return {Object} A mapping of key names to the actual values of all \n         *                  objects being stored.",
        "* Adds a new key & value pair to by linking to a newly created ItemValue.\n         * \n         * @param {String} key   The key to reference by new ItemValue by.\n         * @param {Object} settings   The settings for the new ItemValue.\n         * @return {ItemValue} The newly created ItemValue.",
        "* Clears a value from the listing, and removes its element from the\n         * container (if they both exist).\n         * \n         * @param {String} key   The key of the element to remove.",
        "* Completely clears all values from the ItemsHoldr, removing their\n         * elements from the container (if they both exist) as well.",
        "* Sets the value for the ItemValue under the given key, then updates the ItemValue\n         * (including the ItemValue's element and localStorage, if needed).\n         * \n         * @param {String} key   The key of the ItemValue.\n         * @param {Mixed} value   The new value for the ItemValue.",
        "* Increases the value for the ItemValue under the given key, via addition for\n         * Numbers or concatenation for Strings.\n         * \n         * @param {String} key   The key of the ItemValue.\n         * @param {Mixed} [amount]   The amount to increase by (by default, 1).",
        "* Increases the value for the ItemValue under the given key, via addition for\n         * Numbers or concatenation for Strings.\n         * \n         * @param {String} key   The key of the ItemValue.\n         * @param {Number} [amount]   The amount to increase by (by default, 1).",
        "* Toggles whether a value is 1 or 0.\n         * \n         * @param {String} key   The key of the ItemValue.",
        "* Ensures a key exists in values. If it doesn't, and new values are\n         * allowed, it creates it; otherwise, it throws an Error.\n         * \n         * @param {String} key",
        "* Manually saves all values to localStorage, ignoring the autoSave flag.",
        "* Hides the container Element by setting its visibility to hidden.",
        "* Shows the container Element by setting its visibility to visible.",
        "* Creates the container Element, which contains a child for each ItemValue that\n         * specifies hasElement to be true.\n         * \n         * @param {Mixed[][]} containers   An Array representing the Element to be\n         *                                 created and the children between it and \n         *                                 the contained ItemValues. Each contained \n         *                                 Mixed[]  has a String tag name as its \n         *                                 first member, followed by any number of \n         *                                 Objects to apply via createElement.\n         * @return {HTMLElement}",
        "* @return {Boolean} Whether displayChanges has an entry for a particular\n         *                   value.",
        "* @return {String} The displayChanges entry for a particular value.",
        "* Creates a new HTMLElement of the given type. For each Object given as\n         * arguments after, each member is proliferated onto the element.\n         * \n         * @param {String} [tag]   The type of the HTMLElement (by default, \"div\").\n         * @param {...args} [any[]]   Any number of Objects to be proliferated\n         *                             onto the new HTMLElement.\n         * @return {HTMLElement}",
        "* Proliferates all members of the donor to the recipient recursively, as\n         * a deep copy.\n         * \n         * @param {Object} recipient   An object receiving the donor's members.\n         * @param {Object} donor   An object whose members are copied to recipient.\n         * @param {Boolean} [noOverride]   If recipient properties may be overriden\n         *                                 (by default, false).",
        "* Identical to proliferate, but tailored for HTML elements because many\n         * element attributes don't play nicely with JavaScript Array standards. \n         * Looking at you, HTMLCollection!\n         * \n         * @param {HTMLElement} recipient\n         * @param {Any} donor\n         * @param {Boolean} [noOverride]\n         * @return {HTMLElement}",
        "* Creates an Object that can be used to create a new LocalStorage\n         * replacement, if the JavaScript environment doesn't have one.\n         * \n         * @return {Object}"
    ],
    "functions": [
        "update",
        "checkTriggers",
        "checkModularity",
        "updateElement",
        "retrieveLocalStorage",
        "updateLocalStorage",
        "key",
        "getValues",
        "getDefaults",
        "getLocalStorage",
        "getAutoSave",
        "getPrefix",
        "getContainer",
        "getContainersArguments",
        "getDisplayChanges",
        "getCallbackArgs",
        "getKeys",
        "getItem",
        "getObject",
        "hasKey",
        "exportItems",
        "addItem",
        "removeItem",
        "clear",
        "setItem",
        "increase",
        "decrease",
        "toggle",
        "checkExistence",
        "saveAll",
        "hideContainer",
        "displayContainer",
        "makeContainer",
        "hasDisplayChange",
        "getDisplayChange",
        "createElement",
        "proliferate",
        "proliferateElement",
        "createPlaceholderStorage"
    ],
    "classes": [
        "ItemValue",
        "ItemsHoldr"
    ]
}