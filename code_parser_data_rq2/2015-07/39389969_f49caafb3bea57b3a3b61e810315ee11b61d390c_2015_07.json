{
    "identifiers": [
        "p2",
        "options",
        "points",
        "position",
        "angle",
        "skinSize",
        "aabb",
        "aabb",
        "aabb",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyB",
        "world",
        "world",
        "bodyA",
        "bodyB",
        "Broadphase",
        "options",
        "Broadphase",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyB",
        "shapeA",
        "shapeB",
        "c",
        "Broadphase",
        "bodyA",
        "bodyB",
        "options",
        "stiffness",
        "relaxation",
        "Constraint",
        "bodyA",
        "bodyB",
        "options",
        "f",
        "Constraint",
        "bodyA",
        "bodyB",
        "options",
        "torque",
        "Constraint",
        "bodyA",
        "bodyB",
        "options",
        "force",
        "Constraint",
        "bodyA",
        "bodyB",
        "options",
        "lower",
        "upper",
        "Constraint",
        "bodyA",
        "bodyB",
        "options",
        "lower",
        "upper",
        "speed",
        "Equation",
        "bodyA",
        "bodyB",
        "options",
        "ratio",
        "torque",
        "Equation",
        "bodyA",
        "bodyB",
        "a",
        "b",
        "h",
        "bodyA",
        "bodyB",
        "minForce",
        "maxForce",
        "G",
        "vi",
        "wi",
        "vj",
        "wj",
        "a",
        "b",
        "h",
        "deltalambda",
        "eps",
        "Equation",
        "bodyA",
        "bodyB",
        "slipForce",
        "slipForce",
        "a",
        "b",
        "h",
        "Equation",
        "bodyA",
        "bodyB",
        "options",
        "Equation",
        "bodyA",
        "bodyB",
        "a",
        "b",
        "h",
        "listener",
        "listener",
        "listener",
        "materialA",
        "materialB",
        "options",
        "id",
        "a",
        "b",
        "vec",
        "zcomp",
        "zcomp",
        "vec",
        "a",
        "angle",
        "a",
        "a",
        "b",
        "c",
        "a",
        "x",
        "y",
        "a",
        "x",
        "y",
        "worldPoint",
        "framePosition",
        "frameAngle",
        "localPoint",
        "framePosition",
        "frameAngle",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "b",
        "a",
        "EventEmitter",
        "options",
        "egret",
        "density",
        "shape",
        "offset",
        "angle",
        "shape",
        "force",
        "worldPoint",
        "time",
        "dontSleep",
        "dt",
        "story",
        "dt",
        "timeStep",
        "body",
        "localPoint",
        "worldPoint",
        "vertices",
        "options",
        "dt",
        "force",
        "worldPoint",
        "bodyA",
        "bodyB",
        "options",
        "Spring",
        "worldAnchorA",
        "worldAnchorB",
        "result",
        "result",
        "Spring",
        "bodyA",
        "bodyB",
        "options",
        "Shape",
        "length",
        "radius",
        "Shape",
        "radius",
        "Shape",
        "a",
        "b",
        "c",
        "vertices",
        "axes",
        "localAxis",
        "result",
        "localAxis",
        "shapeOffset",
        "shapeAngle",
        "result",
        "Shape",
        "data",
        "options",
        "mass",
        "position",
        "angle",
        "Shape",
        "length",
        "Shape",
        "Shape",
        "Shape",
        "width",
        "height",
        "EventEmitter",
        "options",
        "dy",
        "world",
        "dy",
        "island",
        "eq",
        "eqs",
        "eq",
        "Solver",
        "options",
        "h",
        "world",
        "bodyA",
        "shapeA",
        "bodyB",
        "shapeB",
        "bodyA",
        "shapeA",
        "bodyB",
        "shapeB",
        "bodyA",
        "bodyB",
        "bodyA",
        "shapeA",
        "bodyB",
        "shapeB",
        "id1",
        "id2",
        "key",
        "i",
        "j",
        "i",
        "j",
        "value",
        "a",
        "b",
        "array",
        "index",
        "howMany",
        "a",
        "b",
        "options",
        "defaults",
        "result",
        "Solver",
        "nodes",
        "node",
        "bds",
        "eqs",
        "root",
        "bds",
        "eqs",
        "world",
        "body",
        "EventEmitter",
        "options",
        "c",
        "contactMaterial",
        "cm",
        "materialA",
        "materialB",
        "c",
        "dt",
        "timeSinceLastCalled",
        "maxSubSteps",
        "s",
        "s",
        "body",
        "body",
        "id",
        "bodyA",
        "bodyB",
        "bodyA",
        "bodyB",
        "worldPoint",
        "bodies",
        "precision",
        "result",
        "ray",
        "ray",
        "ray",
        "options"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "export class BodyOptions {",
        "",
        "mass: number;",
        "position: number[];",
        "velocity: number[];",
        "angle: number;",
        "angularVelocity: number;",
        "force: number[];",
        "angularForce: number;",
        "fixedRotation: number;",
        "",
        "}",
        "shapeOffsets: number[][];",
        "shapeAngles: number[];",
        "functions below was added by ladeng6666",
        "2015-05-12 ladeng6666",
        "Equation | boolean",
        "IslandNode | boolean",
        "functions below were added by ladeng6666",
        "raycastAll(from: number[], to: number[], options: { collisionMask?: number; collisionGroup?: number; skipBackfaces?: boolean; checkCollisionResponse?:boolean}, callback: Function): void;\n        raycastAny(from: number[], to: number[], options: Object, result: RayCastResult): void;\n        raycastClosed(from: number[], to: number[], options: Object, callback: Function): void;"
    ],
    "docstrings": [
        "* Copyright (c) 2014,Egret-Labs.org\n * All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of the Egret-Labs.org nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY EGRET-LABS.ORG AND CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL EGRET-LABS.ORG AND CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "* 刚体。有质量、位置、速度等属性以及一组被用于碰撞的形状\n     *\n     * @class Body\n     * @constructor\n     * @extends EventEmitter\n     * @param {Object}              [options]\n     * @param {Number}              [options.mass=0]    一个大于0的数字。如果设置成0，其type属性将被设置为 Body.STATIC.\n     * @param {Array}               [options.position]\n     * @param {Array}               [options.velocity]\n     * @param {Number}              [options.angle=0]\n     * @param {Number}              [options.angularVelocity=0]\n     * @param {Array}               [options.force]\n     * @param {Number}              [options.angularForce=0]\n     * @param {Number}              [options.fixedRotation=false]\n     *\n     * @example\n     *     // 创建一个刚体\n     *     var body = new Body({\n     *         mass: 1,\n     *         position: [0, 0],\n     *         angle: 0,\n     *         velocity: [0, 0],\n     *         angularVelocity: 0\n     *     });\n     *\n     *     // 将一个圆形形状添加到刚体\n     *     body.addShape(new Circle(1));\n     *\n     *     // 将刚体加入 world\n     *     world.addBody(body);",
        "* 刚体id\n         * @property id\n         * @type {Number}",
        "* 刚体被添加到的 world。如果没有被添加到 world 该属性将被设置为 null\n         * @property world\n         * @type {World}",
        "* 刚体的碰撞形状\n         *\n         * @property shapes\n         * @type {Array}",
        "* 碰撞形状相对于刚体中心的偏移\n         * @property shapeOffsets\n         * @type {Array}",
        "* 碰撞形状的角度变换\n         * @property shapeAngles\n         * @type {Array}",
        "* 质量\n         * @property mass\n         * @type {number}",
        "* 惯性\n         * @property inertia\n         * @type {number}",
        "* 是否固定旋转\n         * @property fixedRotation\n         * @type {Boolean}",
        "* 位置\n         * @property position\n         * @type {Array}",
        "* 位置插值\n         * @property interpolatedPosition\n         * @type {Array}",
        "* 角度插值\n         * @property interpolatedAngle\n         * @type {Number}",
        "* 速度\n         * @property velocity\n         * @type {Array}",
        "* 角度\n         * @property angle\n         * @type {number}",
        "* 力\n         * @property force\n         * @type {Array}",
        "* 角力\n         * @property angularForce\n         * @type {number}",
        "* 限行阻尼。取值区间[0,1]\n         * @property damping\n         * @type {Number}\n         * @default 0.1",
        "* 角阻尼。取值区间[0,1]\n         * @property angularDamping\n         * @type {Number}\n         * @default 0.1",
        "* 运动类型。 应该是Body.STATIC，Body.DYNAMIC，Body.KINEMATIC之一\n         *\n         * * Static 刚体不会动，不响应力或者碰撞\n         * * Dynamic 刚体会动，响应力和碰撞\n         * * Kinematic 刚体仅根据自身属性运动，不响应力或者碰撞\n         *\n         * @property type\n         * @type {number}\n         *\n         * @example\n         *     // 默认值是STATIC\n         *     var body = new Body();\n         *     console.log(body.type == Body.STATIC); // true\n         *\n         * @example\n         *     // 将质量设置为非0的值，会变为DYNAMIC\n         *     var dynamicBody = new Body({\n     *         mass : 1\n     *     });\n         *     console.log(dynamicBody.type == Body.DYNAMIC); // true\n         *\n         * @example\n         *     // KINEMATIC刚体只会运动，如果你改变它的速度\n         *     var kinematicBody = new Body({\n     *         type: Body.KINEMATIC\n     *     });",
        "* 边界圆半径\n         * @property boundingRadius\n         * @type {Number}",
        "* 边框\n         * @property aabb\n         * @type {AABB}",
        "* 设置AABB是否会更新。通过调用 updateAABB 方法更新它\n         * @property aabbNeedsUpdate\n         * @type {Boolean}\n         * @see updateAABB\n         *\n         * @example\n         *     body.aabbNeedsUpdate = true;\n         *     body.updateAABB();\n         *     console.log(body.aabbNeedsUpdate); // false",
        "* 设置为true，刚体会自动进入睡眠。需要在 World 中允许刚体睡眠\n         * @property allowSleep\n         * @type {Boolean}\n         * @default true",
        "* Body.AWAKE，Body.SLEEPY，Body.SLEEPING之一\n         *\n         * 默认值是 Body.AWAKE。如果刚体速度低于 sleepSpeedLimit，该属性将变为 Body.SLEEPY。如果持续 Body.SLEEPY 状态 sleepTimeLimit 秒，该属性将变为 Body.SLEEPY。\n         *\n         * @property sleepState\n         * @type {Number}\n         * @default Body.AWAKE",
        "* 如果速度小于该值，sleepState 将变为 Body.SLEEPY 状态\n         * @property sleepSpeedLimit\n         * @type {Number}\n         * @default 0.2",
        "* 如果持续 Body.SLEEPY 状态 sleepTimeLimit 秒，sleepState 将变为 Body.SLEEPING\n         * @property sleepTimeLimit\n         * @type {Number}\n         * @default 1",
        "* 重力缩放因子。如果你想忽略刚体重心，设置为零。如果你想反转重力，将其设置为-1。\n         * @property {Number} gravityScale\n         * @default 1",
        "* 与每个形状对应的显示对象",
        "* 设置刚体总密度\n         * @method setDensity",
        "* 得到所有形状的总面积\n         * @method getArea\n         * @return {Number}",
        "* 获得AABB\n         * @method getAABB",
        "* 更新AABB\n         * @method updateAABB",
        "* 更新外边界\n         * @method updateBoundingRadius",
        "* 添加一个形状\n         *\n         * @method addShape\n         * @param  {Shape} shape 形状\n         * @param  {Array} [offset] 偏移\n         * @param  {Number} [angle] 角度\n         *\n         * @example\n         *     var body = new Body(),\n         *         shape = new Circle();\n         *\n         *     // 位于中心\n         *     body.addShape(shape);\n         *\n         *     // 偏移量为x轴一个单位\n         *     body.addShape(shape,[1,0]);\n         *\n         *     // 偏移量为y轴一个单位，同时逆时针旋转90度\n         *     body.addShape(shape,[0,1],Math.PI/2);",
        "* 移除形状\n         * @method removeShape\n         * @param  {Shape}  shape\n         * @return {Boolean}",
        "* 更新属性，结构或者质量改变时会被调用\n         *\n         * @method updateMassProperties\n         *\n         * @example\n         *     body.mass += 1;\n         *     body.updateMassProperties();",
        "* 相对于 world 中的一个点施加力\n         * @method applyForce\n         * @param {Array} force 力\n         * @param {Array} worldPoint world 中的点",
        "* Wake the body up. Normally you should not need this, as the body is automatically awoken at events such as collisions.\n         * Sets the sleepState to {{#crossLink \"Body/AWAKE:property\"}}Body.AWAKE{{/crossLink}} and emits the wakeUp event if the body wasn't awake before.\n         * @method wakeUp",
        "* Force body sleep\n         * @method sleep",
        "* Called every timestep to update internal sleep timer and change sleep state if needed.\n         * @method sleepTick\n         * @param {number} time The world time in seconds\n         * @param {boolean} dontSleep\n         * @param {number} dt",
        "* Check if the body is overlapping another body. Note that this method only works if the body was added to a World and if at least one step was taken.\n         * @method overlaps\n         * @param  {Body} body\n         * @return {boolean}",
        "* 半径\n         * @property radius\n         * @type {number}",
        "* world，包含所有刚体\n     *\n     * @class World\n     * @constructor\n     * @param {Object}          [options]\n     * @param {Solver}          [options.solver]            默认值 GSSolver.\n     * @param {Array}           [options.gravity]           默认值 [0,-9.78]\n     * @param {Broadphase}      [options.broadphase]        默认值 NaiveBroadphase\n     * @param {Boolean}         [options.islandSplit=false]\n     * @param {Boolean}         [options.doProfiling=false]\n     * @extends EventEmitter\n     *\n     * @example\n     *     var world = new World({\n     *         gravity: [0, -9.81],\n     *         broadphase: new SAPBroadphase()\n     *     });",
        "* step() 执行之后调用\n         * @event postStep",
        "* Body 加入时调用\n         * @event addBody\n         * @param {Body} body",
        "* Body移除时调用\n         * @event removeBody\n         * @param {Body} body",
        "* Spring 加入时调用\n         * @event addSpring\n         * @param {Spring} spring",
        "* 当两个刚体第一次碰撞时调用。调用时碰撞步骤已经完成\n         * @event impact\n         * @param {Body} bodyA\n         * @param {Body} bodyB",
        "* 当 Broadphase 手机对碰之后被调用\n         * @event postBroadphase\n         * @param {Array} 对碰数组",
        "* 当两个形状重叠时调用\n         * @event beginContact\n         * @param {Shape} shapeA\n         * @param {Shape} shapeB\n         * @param {Body}  bodyA\n         * @param {Body}  bodyB\n         * @param {Array} contactEquations",
        "* 当两个形状停止重叠时调用\n         * @event endContact\n         * @param {Shape} shapeA\n         * @param {Shape} shapeB\n         * @param {Body}  bodyA\n         * @param {Body}  bodyB\n         * @param {Array} contactEquations",
        "* Fired just before equations are added to the solver to be solved. Can be used to control what equations goes into the solver.\n         * @event preSolve\n         * @param {Array} contactEquations  An array of contacts to be solved.\n         * @param {Array} frictionEquations An array of friction equations to be solved.",
        "* 从不让刚体睡眠\n         * @static\n         * @property {number} NO_SLEEPING",
        "* 刚体睡眠\n         * @static\n         * @property {number} BODY_SLEEPING",
        "* 取消激活在接触中的刚体，如果所有刚体都接近睡眠。必须设置 World.islandSplit\n         * @static\n         * @property {number} ISLAND_SLEEPING",
        "* 所有 Spring\n         * @property springs\n         * @type {Array}",
        "* 所有 Body\n         * @property {Array} bodies",
        "* 所使用的求解器，以满足约束条件和接触。 默认值是 GSSolver\n         * @property {Solver} solver",
        "* @property narrowphase\n         * @type {Narrowphase}",
        "* The island manager of this world.\n         * @property {IslandManager} islandManager",
        "* 重力。在每个 step() 开始对所有刚体生效\n         *\n         * @property gravity\n         * @type {Array}",
        "* 重力摩擦\n         * @property {Number} frictionGravity",
        "* 设置为true，frictionGravity 会被自动设置为 gravity 长度.\n         * @property {Boolean} useWorldGravityAsFrictionGravity",
        "* @property broadphase\n         * @type {Broadphase}",
        "* 用户添加限制\n         *\n         * @property constraints\n         * @type {Array}",
        "* 默认材料，defaultContactMaterial 时使用\n         * @property {Material} defaultMaterial",
        "* 使用的默认接触材料，如果没有接触材料被设置为碰撞的材料\n         * @property {ContactMaterial} defaultContactMaterial",
        "* 设置自动使用弹簧力\n         * @property applySpringForces\n         * @type {Boolean}",
        "* 设置自动使用阻尼\n         * @property applyDamping\n         * @type {Boolean}",
        "* 设置自动使用重力\n         * @property applyGravity\n         * @type {Boolean}",
        "* 使用约束求解\n         * @property solveConstraints\n         * @type {Boolean}",
        "* 接触材料\n         * @property contactMaterials\n         * @type {Array}",
        "* 世界时间\n         * @property time\n         * @type {Number}",
        "* 是否正在 step 阶段\n         * @property {Boolean} stepping",
        "* 是否启用岛内分裂\n         * @property {Boolean} islandSplit",
        "* 设置为true，world会派发 impact 事件，关闭可以提高性能\n         * @property emitImpactEvent\n         * @type {Boolean}",
        "* 刚体睡眠策略。取值是 World.NO_SLEEPING，World.BODY_SLEEPING，World.ISLAND_SLEEPING 之一\n         * @property sleepMode\n         * @type {number}\n         * @default World.NO_SLEEPING",
        "* 添加约束\n         * @method addConstraint\n         * @param {Constraint} c",
        "* 添加触点材料\n         * @method addContactMaterial\n         * @param {ContactMaterial} contactMaterial",
        "* 移除触点材料\n         * @method removeContactMaterial\n         * @param {ContactMaterial} cm",
        "* 通过2个材料获得触点材料\n         * @method getContactMaterial\n         * @param {Material} materialA\n         * @param {Material} materialB\n         * @return {ContactMaterial} 获得的触点材料或者false",
        "* 移除约束\n         * @method removeConstraint\n         * @param {Constraint} c",
        "* 使物理系统向前经过一定时间\n         *\n         * @method step\n         * @param {Number} dt                       时长\n         * @param {Number} [timeSinceLastCalled=0]\n         * @param {Number} [maxSubSteps=10]\n         *\n         * @example\n         *     var world = new World();\n         *     world.step(0.01);",
        "* 添加一个 Spring\n         *\n         * @method addSpring\n         * @param {Spring} s",
        "* 移除一个 Spring\n         *\n         * @method removeSpring\n         * @param {Spring} s",
        "* 添加一个 Body\n         *\n         * @method addBody\n         * @param {Body} body\n         *\n         * @example\n         *     var world = new World(),\n         *         body = new Body();\n         *     world.addBody(body);",
        "* 移除一个 Body。如果在 step()阶段调用，将会在阶段之后移除\n         *\n         * @method removeBody\n         * @param {Body} body",
        "* 通过id获取一个 Body\n         * @method getBodyById\n         * @return {Body|Boolean} 得到的刚体或者false",
        "* 两个刚体之间禁用碰撞\n         * @method disableCollision\n         * @param {Body} bodyA\n         * @param {Body} bodyB",
        "* 两个刚体之间启用碰撞\n         * @method enableCollision\n         * @param {Body} bodyA\n         * @param {Body} bodyB",
        "* 重置 world\n         * @method clear",
        "* 获得克隆\n         * @method clone\n         * @return {World}",
        "* [ladeng6666] 检测world中，与一组全局坐标点worldPoint，与一组刚体是否发生碰撞，并返回碰撞的刚体列表\n        * @param {Array} worldPoint  一组全局要检测的全局坐标点.\n        * @param {Array} bodies 要检测的刚体列表.\n        * @param {number} precision 检测的精确度."
    ],
    "functions": [],
    "classes": [
        "AABB",
        "Broadphase",
        "GridBroadphase",
        "NativeBroadphase",
        "Narrowphase",
        "SAPBroadphase",
        "Constraint",
        "DistanceConstraint",
        "GearConstraint",
        "LockConstraint",
        "PrismaticConstraint",
        "RevoluteConstraint",
        "AngleLockEquation",
        "ContactEquation",
        "Equation",
        "FrictionEquation",
        "RotationalLockEquation",
        "RotationalVelocityEquation",
        "EventEmitter",
        "ContactMaterialOptions",
        "ContactMaterial",
        "Material",
        "vec2",
        "Body",
        "Spring",
        "LinearSpring",
        "RotationalSpring",
        "Capsule",
        "Circle",
        "Convex",
        "Heightfield",
        "Shape",
        "Line",
        "Particle",
        "Plane",
        "Rectangle",
        "Solver",
        "GSSolver",
        "OverlapKeeper",
        "TupleDictionary",
        "Utils",
        "Island",
        "IslandManager",
        "IslandNode",
        "World",
        "RaycastResult",
        "Ray"
    ]
}