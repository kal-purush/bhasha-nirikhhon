{
    "identifiers": [
        "scope",
        "text",
        "scriptDocCommentClause",
        "htmlDocCommentClause",
        "text",
        "docCommentRegex",
        "docComments",
        "m",
        "m",
        "lines",
        "lines",
        "l",
        "l",
        "m",
        "pragmas",
        "m",
        "lines",
        "pragmas",
        "m",
        "m",
        "m",
        "pragma",
        "current",
        "content",
        "code",
        "entities",
        "current",
        "subCurrent",
        "content",
        "code",
        "pragma",
        "pragma",
        "makePragma",
        "current",
        "label",
        "subCurrent",
        "subCurrent",
        "pragma",
        "content",
        "content",
        "eventParmsRe",
        "makePragma",
        "subCurrent",
        "pragma",
        "subEventObj",
        "content",
        "parts",
        "parts",
        "makePragma",
        "current",
        "pragma",
        "subObj",
        "content",
        "returnRe",
        "returnReResult",
        "returnReResult",
        "returnReResult",
        "subCurrent",
        "pragma",
        "subReturnObj",
        "current",
        "pragma",
        "content",
        "pragma",
        "content",
        "p$",
        "pragma",
        "p",
        "p$",
        "pragma",
        "p",
        "p",
        "content",
        "entities",
        "entities",
        "entities",
        "ContextFreeParser",
        "scope",
        "ContextFreeParser"
    ],
    "literals": [
        "'\\\\/\\\\*\\\\*([\\\\s\\\\S]*?)\\\\*\\\\/'",
        "'<!--([\\\\s\\\\S]*?)-->'",
        "'|'",
        "'g'",
        "'\\n'",
        "''",
        "'\\n'",
        "'\\n'",
        "'class'",
        "'element'",
        "'attribute'",
        "'property'",
        "'method'",
        "'event'",
        "'property'",
        "'properties'",
        "'s'",
        "'default'",
        "'type'",
        "'param'",
        "'s'",
        "'extends'",
        "'mixins'",
        "' '",
        "'return'",
        "'Entity'",
        "'**Undocumented**'",
        "'undefined'"
    ],
    "variables": [
        "ContextFreeParser",
        "top",
        "entities",
        "current",
        "top",
        "subCurrent",
        "scriptDocCommentClause",
        "htmlDocCommentClause",
        "docCommentRegex",
        "docComments",
        "lines",
        "pragmas",
        "m",
        "code",
        "pragma",
        "content",
        "label",
        "eventParmsRe",
        "subEventObj",
        "parts",
        "subObj",
        "returnRe",
        "returnReResult",
        "subReturnObj",
        "p$",
        "p"
    ],
    "comments": [
        "matches text between /** and */ inclusive and <!-- and --> inclusive",
        "acquire all script doc comments",
        "each match represents a single block of doc comments",
        "unify line ends, remove all comment characters, split into individual lines",
        "pragmas (@-rules) must occur on a line by themselves",
        "filter lines whose first non-whitespace character is @ into the pragma list",
        "(and out of the `lines` array)",
        "collect all other text into a single block",
        "process pragmas",
        "currently all entities are either @class or @element",
        "an entity may have these describable sub-features",
        "sub-feature pragmas",
        "everything else",
        "utility function, yay hoisting"
    ],
    "docstrings": [
        "* @license\n * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt"
    ],
    "functions": [
        "makePragma"
    ],
    "classes": []
}