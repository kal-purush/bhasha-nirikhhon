{
    "identifiers": [
        "Component",
        "View",
        "bootstrap",
        "CSSClass",
        "RouteConfig",
        "RouterOutlet",
        "RouterLink",
        "routerInjectables",
        "Router",
        "Home",
        "getSystemProperties",
        "TuneBookService",
        "TuneBook",
        "Book",
        "TuneListView",
        "Introduction",
        "Component",
        "TuneBookService",
        "RouteConfig",
        "Home",
        "Book",
        "Introduction",
        "TuneListView",
        "View",
        "RouterOutlet",
        "RouterLink",
        "CSSClass",
        "tuneBookService",
        "router",
        "getSystemProperties",
        "router",
        "setTimeout",
        "e",
        "alert",
        "e",
        "alert",
        "$event",
        "$event",
        "f",
        "files",
        "i",
        "i",
        "encodeURI",
        "f",
        "fileName",
        "ext",
        "ext",
        "alert",
        "FileReader",
        "reader",
        "reader",
        "abc",
        "fileName",
        "reader",
        "f",
        "abc",
        "fileName",
        "setTimeout",
        "abc",
        "fileName",
        "e",
        "alert",
        "fileName",
        "e",
        "bootstrap",
        "App",
        "routerInjectables"
    ],
    "literals": [
        "'angular2/angular2'",
        "'angular2/router'",
        "'./components/home/home'",
        "'./common/etunebook-system'",
        "'./services/tunebook-service'",
        "'./business/model/tunebook'",
        "'./components/book/book'",
        "'./components/tunelist/tunelist'",
        "'./components/introduction/introduction'",
        "'app'",
        "'/'",
        "'home'",
        "'/book'",
        "'book'",
        "'/info/introduction'",
        "'introduction'",
        "'/tunelist'",
        "'tunelist'",
        "'./app.html?v=<%= VERSION %>'",
        "\"tuneSets\"",
        "'introduction'",
        "\"eTuneBook cannot import \"",
        "\" due to: \"",
        "\"Tunebook successfully loaded\"",
        "\"/tunelist\"",
        "\"$1\"",
        "\"abc\"",
        "\"ABC\"",
        "\"eTuneBook only accepts files with extension .abc or .ABC\"",
        "'ISO-8859-1'",
        "\"eTuneBook cannot import \"",
        "\" due to: \"",
        "\"/tunelist\"",
        "'/book'",
        "\"/tunelist\""
    ],
    "variables": [
        "files",
        "i",
        "f",
        "fileName",
        "ext",
        "reader",
        "abc"
    ],
    "comments": [
        "<reference path=\"typings/_custom.d.ts\" />",
        "{ path: '/playlists', component: PlaylistList, as: 'playlistlist' },",
        "{ path: '/setlist', component: Setlist, as: 'setlist' },",
        "Init available colors",
        "$.fn.colorPicker.defaults.colors = ['F5F5F5', 'CCFFCC', 'EFEBD6', 'FFFF99', 'C7DAD4', 'BFE4FF', 'D8CFE6', 'FFE6E6', 'EEE6FF', 'E6FFE6', 'FFCCBF', 'FFFFFF', 'CCCCFF', 'FFFFCC', 'FF9980'];",
        "Init TuneBook",
        "FileList object",
        "files is a FileList of File objects",
        "Get file extension from fileName",
        "Only process abc files",
        "Read the File",
        "if (this.router.) {\n          \n        }\n        \n        if ($state.is('tunelist')){\n                  $state.transitionTo('setlist');\n              } else {\n                  $state.transitionTo('tunelist');\n              }",
        "mobilecheck() {\n    var check = false;\n    (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);\n    return check;\n  };",
        "",
        "initializeTuneBook( ) {\n    this.tuneBook = this.eTuneBookService.initializeTuneBook();\n    this.eTuneBookService.storeTuneBookAbc();\n    this.router.navigate('tuneabc', {intTuneId: this.tuneBook.tuneSets[0].tuneSetPositions[0].tune.intTuneId});\n  };\n\n  \n\n  showPlaylists(  ) {\n    this.initActiveMenu();\n    this.playlistsMenuActive = true;\n    $state.transitionTo('playlistlist');\n  };\n\n  showSets(  ) {\n    this.initActiveMenu();\n    this.setsMenuActive = true;\n    $state.transitionTo('setlist');\n  };\n\n  \n\n  \n\n\n  putTuneBookToLocalStorage() {\n    this.eTuneBookService.storeTuneBookAbc();\n  };\n\n\n\n  // Import TuneBook from Google Drive\n  selectFileOnGoogleDrive() {\n\n      // User needs to login and to authorize eTuneBook so that eTuneBook is able to access his Google Drive\n      var promise = GAPI.init();\n\n      promise.then(function(result) {\n          //success\n          //Load Google Drive File Picker\n          loadPicker();\n      }, function(error) {\n          //error\n          alert('Failed: ' + error);\n      });\n  };\n\n  // Use the API Loader script to load google.picker.\n  loadPicker() {\n      gapi.load('picker', {'callback': createPicker});\n  }\n\n  // Create and render a Picker object for searching documents\n  createPicker() {\n      var docsView = new google.picker.DocsView(google.picker.ViewId.DOCUMENTS)\n          .setIncludeFolders(true);\n\n      var picker = new google.picker.PickerBuilder().\n          addView(docsView).\n          setAppId(GAPI.app.apiKey).\n          setOAuthToken(GAPI.app.oauthToken.access_token).\n          setCallback(pickerCallback).\n          build();\n      picker.setVisible(true);\n  }\n\n  // Back from the Picker\n  pickerCallback(data) {\n      var url = 'nothing';\n      if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {\n          var doc = data[google.picker.Response.DOCUMENTS][0];\n          url = doc[google.picker.Document.URL];\n\n          //Metadaten des ausgewählten Dokuments holen\n          var promise = Drive.getFiles(doc[google.picker.Document.ID]);\n\n          promise.then(function(file) {\n              //success\n              //File-Download und Übernahme in eTuneBook\n              importTuneBookFromGoogleDrive(file);\n\n          }, function(error) {\n              //error\n              alert('Failed: ' + error);\n          });\n      }\n  }\n\n  importTuneBookFromGoogleDrive(file) {\n\n      if (file.downloadUrl) {\n          var accessToken = GAPI.app.oauthToken.access_token;\n          var xhr = new XMLHttpRequest();\n          xhr.open('GET', file.downloadUrl);\n          xhr.setRequestHeader('Authorization', 'Bearer ' + accessToken);\n          xhr.onload = function() {\n              eTuneBookService.getTuneBookFromImportedFile(xhr.responseText, file.title);\n              eTuneBookService.storeTuneBookAbc();\n              // TODO: Check for ui-router fix\n              // ui-router does not refresh state, if no parameter has changed\n              //(see https://github.com/angular-ui/ui-router/issues/122)\n              // Umgehungsloesung: Alternativ tunelist oder setlist als Start-Page\n              if ($state.is('tunelist')){\n                  $state.transitionTo('setlist');\n              } else {\n                  $state.transitionTo('tunelist');\n              }\n          };\n          xhr.onerror = function() {\n              alert(\"Fehler beim Download des TuneBooks\");\n              //callback(null);\n          };\n          xhr.send();\n      } else {\n          alert(\"Fehler beim Laden des TuneBooks (kein Download-Link)\");\n          //callback(null);\n      }\n  };\n\n\n\n\n\n  exportTuneBook(startDownload) {\n      $state.transitionTo('abc');\n  };",
        "this.$watch(function () { return $location.path(); }, function() {\n      var path = $location.path();\n      var pathSplits = path.split(\"/\");\n      var beginOfPath = pathSplits[1].substring(0,4);\n\n      //this.pathSplits = pathSplits;\n\n      initActiveMenu();\n      if (beginOfPath == \"sets\"){\n          if (pathSplits.length == 2){\n              this.setsMenuActive = true;\n          }\n      } else if (beginOfPath == \"tune\"){\n          if (pathSplits.length == 2){\n              this.tunesMenuActive = true;\n          }\n      } else if (beginOfPath == \"book\"){\n          this.bookMenuActive = true;\n      } else if (beginOfPath == \"play\"){\n          if (pathSplits.length == 2){\n              this.playlistsMenuActive = true;\n          }\n      } else if (beginOfPath == \"abc\"){\n          this.bookMenuActive = true;\n      } else if (beginOfPath == \"info\"){\n          this.infoMenuActive = true;\n      }\n  });\n\n  $rootScope.$on('$stateChangeSuccess', function(event, to, toParams, from, fromParams) {\n      $rootScope.$previousState = from;\n      $rootScope.$previousStateParams = fromParams;\n  });"
    ],
    "docstrings": [],
    "functions": [
        "initActiveMenu",
        "loadBxplTuneBook",
        "readTuneBookFromLocalDrive",
        "getTuneBookFromImportedFile",
        "editTuneBook",
        "showTunes"
    ],
    "classes": [
        "App"
    ]
}