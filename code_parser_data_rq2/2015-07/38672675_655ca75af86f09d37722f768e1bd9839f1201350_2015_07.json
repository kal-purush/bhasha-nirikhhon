{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "Windows",
        "Input",
        "DrawingManagerApp",
        "Commands",
        "ICommand",
        "Action",
        "Predicate",
        "Action",
        "execute",
        "execute",
        "Action",
        "execute",
        "Predicate",
        "canExecute",
        "execute",
        "ArgumentNullException",
        "executionAction",
        "execute",
        "canExecutePredicate",
        "canExecute",
        "EventHandler",
        "CanExecuteChanged",
        "CommandManager",
        "RequerySuggested",
        "value",
        "CommandManager",
        "RequerySuggested",
        "value",
        "parameter",
        "canExecutePredicate",
        "canExecutePredicate",
        "parameter",
        "parameter",
        "CanExecute",
        "parameter",
        "InvalidOperationException",
        "executionAction",
        "parameter"
    ],
    "literals": [
        "\"execute\"",
        "\"The command is not valid for execution, check the CanExecute method before attempting to execute.\""
    ],
    "variables": [
        "executionAction",
        "canExecutePredicate"
    ],
    "comments": [
        "Action to be performed when this command is executed",
        "</summary>",
        "Predicate to determine if the command is valid for execution",
        "</summary>",
        "Initializes a new instance of the DelegateCommand class.",
        "The command will always be valid for execution.",
        "</summary>",
        "<param name=\"execute\">The delegate to call on execution</param>",
        "Initializes a new instance of the DelegateCommand class.",
        "</summary>",
        "<param name=\"execute\">The delegate to call on execution</param>",
        "<param name=\"canExecute\">The predicate to determine if command is valid for execution</param>",
        "Raised when CanExecute is changed",
        "</summary>",
        "Executes the delegate backing this DelegateCommand",
        "</summary>",
        "<param name=\"parameter\">parameter to pass to predicate</param>",
        "<returns>True if command is valid for execution</returns>",
        "Executes the delegate backing this DelegateCommand",
        "</summary>",
        "<param name=\"parameter\">parameter to pass to delegate</param>",
        "<exception cref=\"InvalidOperationException\">Thrown if CanExecute returns false</exception>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "DelegateCommand",
        "DelegateCommand",
        "CanExecute",
        "Execute"
    ],
    "classes": [
        "DelegateCommand"
    ]
}