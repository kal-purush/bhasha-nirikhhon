{
    "identifiers": [
        "sys",
        "os",
        "time",
        "atexit",
        "signal",
        "pidfile",
        "stdin",
        "stdout",
        "stderr",
        "pidfile",
        "stdin",
        "stdin",
        "stdout",
        "stdout",
        "stderr",
        "stderr",
        "os",
        "fork",
        "pid",
        "sys",
        "exit",
        "OSError",
        "e",
        "sys",
        "stderr",
        "write",
        "format",
        "e",
        "sys",
        "exit",
        "os",
        "chdir",
        "os",
        "setsid",
        "os",
        "umask",
        "os",
        "fork",
        "pid",
        "sys",
        "exit",
        "OSError",
        "e",
        "sys",
        "stderr",
        "write",
        "format",
        "e",
        "sys",
        "exit",
        "sys",
        "stdout",
        "write",
        "format",
        "sys",
        "argv",
        "os",
        "getpid",
        "sys",
        "stdout",
        "flush",
        "sys",
        "stderr",
        "flush",
        "open",
        "_stdin",
        "open",
        "_stdout",
        "open",
        "_stderr",
        "os",
        "dup2",
        "si",
        "fileno",
        "sys",
        "stdin",
        "fileno",
        "os",
        "dup2",
        "so",
        "fileno",
        "sys",
        "stdout",
        "fileno",
        "os",
        "dup2",
        "se",
        "fileno",
        "sys",
        "stderr",
        "fileno",
        "atexit",
        "register",
        "_delpid",
        "open",
        "_pidfile",
        "f",
        "f",
        "write",
        "format",
        "os",
        "getpid",
        "os",
        "remove",
        "_pidfile",
        "open",
        "_pidfile",
        "f",
        "f",
        "read",
        "strip",
        "IOError",
        "pid",
        "sys",
        "stderr",
        "write",
        "format",
        "_pidfile",
        "sys",
        "exit",
        "daemonize",
        "run",
        "open",
        "_pidfile",
        "f",
        "f",
        "read",
        "strip",
        "IOError",
        "sys",
        "stderr",
        "write",
        "format",
        "_pidfile",
        "sys",
        "exit",
        "open",
        "format",
        "pid",
        "sys",
        "stdout",
        "write",
        "format",
        "pid",
        "IOError",
        "sys",
        "stdout",
        "write",
        "format",
        "pid",
        "open",
        "_pidfile",
        "f",
        "f",
        "read",
        "strip",
        "IOError",
        "sys",
        "stderr",
        "write",
        "format",
        "_pidfile",
        "sys",
        "exit",
        "os",
        "kill",
        "pid",
        "signal",
        "SIGTERM",
        "time",
        "sleep",
        "OSError",
        "e",
        "sys",
        "stderr",
        "write",
        "format",
        "e",
        "sys",
        "exit",
        "os",
        "path",
        "exists",
        "_pidfile",
        "os",
        "remove",
        "_pidfile",
        "IOError",
        "e",
        "sys",
        "stderr",
        "write",
        "format",
        "_pidfile",
        "sys",
        "exit",
        "stop",
        "time",
        "sleep",
        "start",
        "Daemon",
        "sys",
        "stdout",
        "write",
        "sys",
        "stderr",
        "write",
        "sys",
        "stdout",
        "write",
        "c",
        "time",
        "ctime",
        "time",
        "time",
        "sys",
        "stdout",
        "flush",
        "c",
        "time",
        "sleep",
        "MySampleDaemon",
        "stdout",
        "stderr",
        "len",
        "sys",
        "argv",
        "sys",
        "argv",
        "lower",
        "cmd",
        "daemon",
        "start",
        "cmd",
        "daemon",
        "stop",
        "cmd",
        "daemon",
        "restart",
        "cmd",
        "daemon",
        "status",
        "sys",
        "stderr",
        "write",
        "sys",
        "exit",
        "sys",
        "exit",
        "sys",
        "stderr",
        "write",
        "format",
        "sys",
        "argv",
        "sys",
        "exit",
        "main"
    ],
    "literals": [
        "\"/dev/null\"",
        "\"/dev/null\"",
        "\"/dev/null\"",
        "\"/dev/null\"",
        "\"/dev/null\"",
        "\"/dev/null\"",
        "\"fork #1 failed: {}\\n\"",
        "\"/\"",
        "\"fork #2 failed: {}\\n\"",
        "\"{} started with PID {}\\n\"",
        "'r'",
        "'a+'",
        "'a+'",
        "'w+'",
        "\"{}\\n\"",
        "'r'",
        "\"pidfile {} already exist, daemon maybe already running?\\n\"",
        "'r'",
        "\"pidfile {} not found, daemon not running?\\n\"",
        "\"/proc/{}/status\"",
        "'r'",
        "\"process with PID {} found\\n\"",
        "\"no process with PID {} found\\n\"",
        "'r'",
        "\"pidfile {} not found, daemon not running?\\n\"",
        "\"killing daemon process failed: {}\\n\"",
        "\"failed to remove pidfile {}\\n\"",
        "\"Message to <stdout>.\\n\"",
        "\"Message to <stderr>.\\n\"",
        "\"%d: %s\\n\"",
        "\"/tmp/python-daemon.pid\"",
        "\"/tmp/python-daemon.log\"",
        "\"/tmp/python-daemon.log\"",
        "\"start\"",
        "\"stop\"",
        "\"restart\"",
        "\"status\"",
        "\"unknown command\\n\"",
        "\"usage: {} start|stop|restart|status\\n\"",
        "\"__main__\"",
        "\"Daemon\""
    ],
    "variables": [
        "_pidfile",
        "_stdin",
        "_stdout",
        "_stderr",
        "pid",
        "pid",
        "si",
        "so",
        "se",
        "pid",
        "pid",
        "pid",
        "pid",
        "c",
        "daemon",
        "cmd",
        "__all__"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "-*- coding: utf-8 -*-",
        "daemon - Forking the current process into a daemon",
        "Copyright (c) 2017 Daniel Strigl. All Rights Reserved.",
        "This program is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with this program.  If not, see <http://www.gnu.org/licenses/>.",
        "--------------------------------------------------------------------------------------------- #",
        "Daemon class",
        "--------------------------------------------------------------------------------------------- #",
        "do first fork",
        "exit first parent",
        "decouple from parent environment",
        "do second fork",
        "exit second parent",
        "write start message",
        "redirect standard file descriptors",
        "register clean-up function",
        "write pidfile",
        "remove pidfile",
        "check pidfile to see if the daemon already runs",
        "start daemon",
        "get the PID from pidfile",
        "look for daemon process in /proc",
        "get the PID from pidfile",
        "try killing the daemon process",
        "remove pidfile",
        "--------------------------------------------------------------------------------------------- #",
        "Main program",
        "--------------------------------------------------------------------------------------------- #",
        "A simple example daemon",
        "write counter and current time to stdout",
        "wait for 1s",
        "Only for testing: starts the above example daemon",
        "--------------------------------------------------------------------------------------------- #",
        "Exported symbols",
        "--------------------------------------------------------------------------------------------- #"
    ],
    "docstrings": [
        "\"\"\" Module to fork the current process into a daemon.\n\"\"\"",
        "\"\"\" Subclass Daemon class and override the :meth:`run()` method.\n\n    :param pidfile: The path of the PID-file.\n    :type pidfile: str\n    :param stdin: The path where the stdin file descriptor should be redirected to.\n        Default is :data:`\"/dev/null\"`.\n    :type stdin: str\n    :param stdout: The path where the stdout file descriptor should be redirected to.\n        Default is :data:`\"/dev/null\"`.\n    :type stdout: str\n    :param stderr: The path where the stderr file descriptor should be redirected to.\n        Default is :data:`\"/dev/null\"`.\n    :type stderr: str\n\n    Example::\n\n        class MyDaemon(Daemon):\n            def run(self):\n                while True:\n                    pass\n\n        daemon = MyDaemon(\"/tmp/my-daemon.pid\")\n        daemon.start()  # start the sample daemon\n    \"\"\"",
        "\"\"\" Deamonize, do the double-fork magic.\n\n        .. seealso::\n            For more details about the UNIX double-fork magic see Stevens'\n            Advanced Programming in the UNIX Environment (ISBN 0201563177).\n        \"\"\"",
        "\"\"\" Start the daemon.\n        \"\"\"",
        "\"\"\" Print the status of the daemon.\n        \"\"\"",
        "\"\"\" Stop the daemon.\n        \"\"\"",
        "\"\"\" Restart the daemon.\n        \"\"\"",
        "\"\"\" You should override this method when you subclass :class:`Daemon`.\n        It will be called after the process has been daemonized by :meth:`start()`\n        or :meth:`restart()`.\n\n        Example::\n\n            class MyDaemon(Daemon):\n                def run(self):\n                    while True:\n                        time.sleep(1)\n        \"\"\""
    ],
    "functions": [
        "daemonize",
        "_delpid",
        "start",
        "status",
        "stop",
        "restart",
        "run",
        "run",
        "main"
    ],
    "classes": [
        "Daemon",
        "MySampleDaemon"
    ]
}