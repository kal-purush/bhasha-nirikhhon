{
    "identifiers": [
        "sys",
        "open",
        "line",
        "tfuncnum",
        "date",
        "id",
        "category",
        "sentence",
        "eventcode",
        "textflag",
        "parseflag",
        "text",
        "parse",
        "line",
        "find",
        "line",
        "find",
        "line",
        "find",
        "line",
        "find",
        "line",
        "find",
        "line",
        "find",
        "line",
        "replace",
        "line",
        "replace",
        "parse_tag_end",
        "eventcode",
        "replace",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "tfuncnum",
        "fout",
        "write",
        "date",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "eventcode",
        "tfuncnum",
        "fout",
        "write",
        "fout",
        "write",
        "tfuncnum",
        "fout",
        "write",
        "tfuncnum",
        "fout",
        "write",
        "functionname",
        "fout",
        "write",
        "eventcode",
        "functionname",
        "fout",
        "write",
        "fout",
        "write",
        "eventcode",
        "fout",
        "write",
        "tfuncnum",
        "fout",
        "write",
        "fout",
        "write",
        "tfuncnum",
        "fout",
        "write",
        "fout",
        "write",
        "tfuncnum",
        "fout",
        "write",
        "tfuncnum",
        "fout",
        "write",
        "fout",
        "write",
        "tfuncnum",
        "fout",
        "write",
        "fout",
        "write",
        "tfuncnum",
        "fout",
        "write",
        "fout",
        "write",
        "tfuncnum",
        "fout",
        "write",
        "fout",
        "write",
        "tfuncnum",
        "fout",
        "write",
        "fout",
        "write",
        "text_tag_end",
        "fout",
        "write",
        "textflag",
        "text",
        "line",
        "fout",
        "write",
        "line",
        "parseflag",
        "parse",
        "line",
        "fout",
        "write",
        "line",
        "sentence_tag",
        "fout",
        "write",
        "tfuncnum",
        "tfuncnum",
        "line",
        "find",
        "line",
        "category_tag",
        "line",
        "find",
        "line",
        "pos",
        "line",
        "pos",
        "category",
        "line",
        "find",
        "line",
        "date_tag",
        "line",
        "find",
        "line",
        "pos",
        "line",
        "pos",
        "date",
        "line",
        "find",
        "line",
        "id_tag",
        "line",
        "find",
        "line",
        "pos",
        "line",
        "pos",
        "id",
        "line",
        "find",
        "line",
        "sentence_tag",
        "line",
        "find",
        "line",
        "pos",
        "line",
        "pos",
        "sentence",
        "eventcode_tag",
        "line",
        "find",
        "noevent_tag",
        "line",
        "find",
        "line",
        "eventcode_tag",
        "line",
        "find",
        "line",
        "pos",
        "line",
        "pos",
        "ecode",
        "line",
        "find",
        "line",
        "sourcecode_tag",
        "line",
        "find",
        "line",
        "pos",
        "line",
        "pos",
        "sourcecode",
        "line",
        "find",
        "line",
        "targetcode_tag",
        "line",
        "find",
        "line",
        "pos",
        "line",
        "pos",
        "targetcode",
        "eventcode",
        "sourcecode",
        "targetcode",
        "ecode",
        "eventcode",
        "sourcecode",
        "targetcode",
        "ecode",
        "eventcode",
        "parse_tag_start",
        "fout",
        "write",
        "text_tag_start",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "fout",
        "write",
        "write_header",
        "sys",
        "argv",
        "line",
        "open",
        "input_xml",
        "readlines",
        "check_line",
        "line",
        "x",
        "tfuncnum",
        "fout",
        "write",
        "x",
        "fout",
        "close"
    ],
    "literals": [
        "\"test_script_ud.py\"",
        "\"w\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"<Sentence \"",
        "\"<EventCoding \"",
        "\"<Text>\"",
        "\"</Text>\"",
        "\"<Parse>\"",
        "\"</Parse>\"",
        "\"\\n\"",
        "\"\"",
        "\"\\r\"",
        "\"\"",
        "\"'\"",
        "\"\\\\\\\"\"",
        "\"\\\"\\\"\\\"\\n\"",
        "\"    phrase_dict = parse_parser(parse)\\n\"",
        "\"    parsed = utilities._format_ud_parsed_str(parse)\\n\"",
        "\"    dict = {u'test\"",
        "\"': {u'sents': {u'0': {u'content': text, u'parsed': parsed}},\\n\"",
        "\"   \t\tu'meta': {u'date': u'\"",
        "\"'}}}\\n\"",
        "\"    global write_str \\n\"",
        "\"    write_str = []\\n\"",
        "\"    return_dict = \\\"\\\" \\n\"",
        "\"    try: \\n\"",
        "\"        return_dict = petrarch_ud.do_coding(dict)\\n\"",
        "\"    except Exception as e: \\n\"",
        "\"        write_str = [text.replace(\\\"\\\\n\\\",\\\" \\\") , parsed.replace(\\\"\\\\n\\\",\\\" \\\") , \\\"\"",
        "\"\\\", \\\"Petrarch Runtime Error \\\" + str(e)]\\n\"",
        "\"test\"",
        "\"    try:\\n\"",
        "\"        if 'events' in return_dict['test\"",
        "\"']['sents']['0']:\\n\"",
        "\"            print(return_dict['test\"",
        "\"']['sents']['0']['events'])\\n\"",
        "\"            event_out = process_event_output(str(return_dict['\"",
        "\"']['sents']['0']['events']))\\n\"",
        "\"            write_str = [text.replace(\\\"\\\\n\\\",\\\" \\\"),parsed.replace(\\\"\\\\n\\\",\\\" \\\"),\\\"\"",
        "\"\\\",str(return_dict['\"",
        "\"']['sents']['0']['events']),event_out]\\n\"",
        "\"        else:\\n\"",
        "\"            write_str = [text.replace(\\\"\\\\n\\\",\\\" \\\"),parsed.replace(\\\"\\\\n\\\",\\\" \\\"),\\\"\"",
        "\"\\\",\\\"noevent\\\"]\\n\"",
        "\"            print(\\\"test\"",
        "\" Failed\\\")\\n\"",
        "\"    except:\\n\"",
        "\"        print(\\\"test\"",
        "\" Failed\\\")\\n\"",
        "\"    #Print the verbs\\n\"",
        "\"    if 'verbs' in return_dict['test\"",
        "\"']['sents']['0']:\\n\"",
        "\"        verbs=return_dict['test\"",
        "\"']['sents']['0']['verbs']\\n\"",
        "\"        parse_verb(verbs,phrase_dict,text,parsed)\\n\"",
        "\"    if 'nouns' in return_dict['test\"",
        "\"']['sents']['0']:\\n\"",
        "\"        #Print the nouns\\n\"",
        "\"        nouns=return_dict['test\"",
        "\"']['sents']['0']['nouns']\\n\"",
        "\"        parse_noun(nouns,phrase_dict,text,parsed)\\n\"",
        "\"    if 'triplets' in return_dict['test\"",
        "\"']['sents']['0']:\\n\"",
        "\"        #Print the nouns\\n\"",
        "\"        triplets=return_dict['test\"",
        "\"']['sents']['0']['triplets']\\n\"",
        "\"        parse_triplets(triplets,phrase_dict)\\n\"",
        "\"    fout_report.writerow(write_str)\\n\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\\\"\\\"\\\"\\n\"",
        "\"\"",
        "\"\\n\"",
        "\"\"",
        "\"\\n\"",
        "\"Sentence tag found\"",
        "\"def test\"",
        "\"():\\n\"",
        "\"category=\\\"\"",
        "\"\\\"\"",
        "\"Category=\"",
        "\"date=\\\"\"",
        "\"\\\"\"",
        "\"Date=\"",
        "\"id=\\\"\"",
        "\"\\\"\"",
        "\"ID=\"",
        "\"sentence=\\\"\"",
        "\"\\\"\"",
        "\"Sentence=\"",
        "\"Event Code Found\"",
        "\"noevents=\"",
        "\"No Event\"",
        "\"eventcode=\"",
        "\"\\\"\"",
        "\"eventcode=\"",
        "\"sourcecode=\"",
        "\"\\\"\"",
        "\"sourcecode=\"",
        "\"targetcode=\"",
        "\"\\\"\"",
        "\"targetcode=\"",
        "\"\"",
        "\"([\"",
        "\"],[\"",
        "\"],\"",
        "\")\"",
        "\"\\\\n([\"",
        "\"],[\"",
        "\"],\"",
        "\")\"",
        "\"    parse=\\\"\\\"\\\"\"",
        "\"    text=\\\"\\\"\\\"\"",
        "\"#! /usr/bin/env python \\n\"",
        "\"# -*- coding: utf-8 -*- \\n\"",
        "\"import petrarch_ud, PETRglobals, PETRreader, utilities, codecs, PETRgraph \\n\\n\"",
        "\"import sys\\n\"",
        "\"import csv\\n\"",
        "\"# Get the Output File Name\\n\"",
        "\"file_out = sys.argv[1]\\n\"",
        "\"outfile = open(file_out, 'wb')\\n\"",
        "\"fout_report = csv.writer(outfile)\\n\"",
        "\"config = utilities._get_data('data/config/', 'PETR_config.ini')\\n\"",
        "\"print(\\\"reading config\\\")\\n\"",
        "\"PETRreader.parse_Config(config)\\n\"",
        "\"print(\\\"reading dicts\\\")\\n\"",
        "\"petrarch_ud.read_dictionaries()\\n\"",
        "\"write_str = [\\\"Text\\\", \\\"Parse Tree\\\", \\\"Expected Encoding as per Petrarch\\\",\\\"Raw Event Data\\\",\\\"Result from Petrarch_UD \\\",\\\"Verbs\\\",\\\"Nouns\\\",\\\"Triplets\\\"]\\n\"",
        "\"fout_report.writerow(write_str)\\n\"",
        "\"def parse_triplets(triplets, phrase_dict):\\n\"",
        "\"    res = \\\"\\\"\\n\"",
        "\"    for triple in triplets:\\n\"",
        "\"        strs = triplets[triple]\\n\"",
        "\"        meaning = strs['meaning']\\n\"",
        "\"        verbcode = strs['verbcode']\\n\"",
        "\"        matched_text = strs['matched_txt']\\n\"",
        "\"        codes = str(triple).split(\\\"#\\\")\\n\"",
        "\"        event = \\\"(\\\" + phrase_dict[codes[0]] + \\\",\\\" + phrase_dict[codes[1]] + \\\",\\\" + phrase_dict[codes[2]] + \\\")\\\"\\n\"",
        "\"        res = res + str(triple) + event +\\\": Meaning = \\\" + str(meaning) + \\\", VerbCode = \\\" + str(verbcode) + \\\", Matched Text = \\\" + str(matched_text) + \\\"\\\\n\\\"\\n\"",
        "\"    write_str.append(res)\\n\"",
        "\"    return \\n\"",
        "\"def parse_parser(parse):\\n\"",
        "\"    phrase_dict = {}\\n\"",
        "\"    for line in parse.splitlines():\\n\"",
        "\"        lines = line.split('\\\\t')\\n\"",
        "\"        num = lines[0].strip()\\n\"",
        "\"        str = lines[1].strip()\\n\"",
        "\"        phrase_dict[num]=str\\n\"",
        "\"        #print(num)\\n\"",
        "\"        #print(str)\\n\"",
        "\"    phrase_dict['-'] = \\\" \\\"\\n\"",
        "\"    return phrase_dict\t\\n\"",
        "\"def process_event_output(str):\\n\"",
        "\"    str = str.replace(\\\"{\\\",\\\"\\\")\\n\"",
        "\"    str = str.replace(\\\"}\\\",\\\"\\\")\\n\"",
        "\"    res = \\\"\\\"\\n\"",
        "\"    events = str[str.find(\\\":\\\"):].split(\\\"':\\\")\\n\"",
        "\"    for event in events:\\n\"",
        "\"        event = event[0:event.rfind(\\\"]\\\")]\\n\"",
        "\"        event = event.replace(\\\" \\\",\\\"\\\")\\n\"",
        "\"        event = event.replace(\\\":\\\",\\\"\\\")\\n\"",
        "\"        event = event.replace(\\\"u\\\",\\\"\\\")\\n\"",
        "\"        event = event.replace(\\\"\\\\'\\\",\\\"\\\")\\n\"",
        "\"        event = event[1:]\\n\"",
        "\"        event = event.replace(\\\"~\\\",\\\"\\\")\\n\"",
        "\"        res = res+\\\"\\\\n(\\\"+event+\\\")\\\"\\n\"",
        "\"    return (res[1:])\\n\"",
        "\"def parse_verb(strs,phrase_dict,text,parsed):\\n\"",
        "\"    str_out = \\\"\\\"\\n\"",
        "\"    str_arr = str(strs).strip(\\\"{\\\").split(\\\",\\\")\\n\"",
        "\"    #print(\\\"Verb/Noun\\\") \\n\"",
        "\"    for x in str_arr:\\n\"",
        "\"        str_num = x.find(\\\":\\\")\t\t\\n\"",
        "\"        try:        \\n\"",
        "\"            sentence = PETRgraph.Sentence(parsed, text, 0000)\\n\"",
        "\"            np = sentence.get_verbPhrase(int(x[:str_num].strip()))\\n\"",
        "\"            str_out = str_out + x[:str_num].strip() + \\\" : text = \\\" + str(np.text) +\\\", head=\\\"+ str(np.head) +\\\", meaning=\\\"+ str(np.meaning)+\\\", code=\\\"+ str(np.code)+\\\" ,passive=\\\"+str(np.passive) + \\\"\\\\n\\\"\\n\"",
        "\"        except Exception as e:\\n\"",
        "\"            #write_str.append(str_out)\\n\"",
        "\"            print(e)\\n\"",
        "\"    write_str.append(str_out)\\n\"",
        "\"    return\\n\"",
        "\"def parse_noun(strs,phrase_dict,text,parsed):\\n\"",
        "\"    str_out = \\\"\\\"\\n\"",
        "\"    str_arr = str(strs).strip(\\\"{\\\").split(\\\",\\\")\\n\"",
        "\"    for x in str_arr:\\n\"",
        "\"        str_num = x.find(\\\":\\\")\t\t\\n\"",
        "\"        #str_out = str_out + \\\", \\\" + phrase_dict[x[:str_num].strip()]\\n\"",
        "\"        try:        \\n\"",
        "\"            sentence = PETRgraph.Sentence(parsed, text, 0000)\\n\"",
        "\"            np = sentence.get_nounPharse(int(x[:str_num].strip()))\\n\"",
        "\"            np.get_meaning()\\n\"",
        "\"            str_out = str_out + x[:str_num].strip() + \\\" : head = \\\" + str(np.head) +\\\", text=\\\"+ str(np.text) +\\\", meaning=\\\"+str(np.meaning)+\\\", matched_txt=\\\"+str(np.matched_txt)+ \\\"\\\\n\\\"\\n\"",
        "\"            \\n\"",
        "\"        except Exception as e:\\n\"",
        "\"            write_str.append(str_out)\\n\"",
        "\"            print(e)\\n\"",
        "\"    write_str.append(str_out)\\n\"",
        "\"    return\\n\"",
        "'r'",
        "\"test\"",
        "\"()\\n\""
    ],
    "variables": [
        "fout",
        "tfuncnum",
        "date",
        "id",
        "category",
        "sentence",
        "eventcode",
        "textflag",
        "parseflag",
        "text",
        "parse",
        "sentence_tag",
        "eventcode_tag",
        "text_tag_start",
        "text_tag_end",
        "parse_tag_start",
        "parse_tag_end",
        "line",
        "line",
        "parseflag",
        "eventcode",
        "functionname",
        "eventcode",
        "text",
        "parse",
        "textflag",
        "text",
        "parse",
        "tfuncnum",
        "category_tag",
        "line",
        "pos",
        "category",
        "line",
        "date_tag",
        "line",
        "pos",
        "date",
        "line",
        "id_tag",
        "line",
        "pos",
        "id",
        "line",
        "sentence_tag",
        "line",
        "pos",
        "sentence",
        "line",
        "noevent_tag",
        "eventcode",
        "eventcode_tag",
        "line",
        "pos",
        "ecode",
        "line",
        "sourcecode_tag",
        "line",
        "pos",
        "sourcecode",
        "line",
        "targetcode_tag",
        "line",
        "pos",
        "targetcode",
        "line",
        "eventcode",
        "eventcode",
        "parseflag",
        "textflag",
        "input_xml"
    ],
    "comments": [
        "Test Suite builder",
        "opens file with name of \"test_script.py\"",
        "fout.write(\"\\\"\\n\")",
        "Write other lines",
        "print(\"#######\\n\")",
        "fout.write(\"#    print(parse)\\n\")",
        "fout.write(\"#    print(parsed)\\n\")",
        "print(\"#######\")",
        "fout.write(\"        fout_report.write(text.replace(\\\"\\\\n\\\",\\\" \\\") +\\\"@\\\"+ parsed.replace(\\\"\\\\n\\\",\\\" \\\") +\\\"@ \"+ eventcode + \"@ Petrarch Runtime Error \\\"+ str(e) +\\\"\\\\n \\\" )\\n\")",
        "fout.write(\"#    print(return_dict)\\n\")",
        "write report to file",
        "fout.write(\"            fout_report.write(text.replace(\\\"\\\\n\\\",\\\" \\\") +\\\"@\\\"+ parsed.replace(\\\"\\\\n\\\",\\\" \\\") +\\\"@ \"+ eventcode + \"@ \\\" + str(return_dict['\"+functionname+\"']['sents']['0']['events']) )\\n\")",
        "fout.write(\"            fout_report.write(text.replace(\\\"\\\\n\\\",\\\" \\\") +\\\"@\\\"+ parsed.replace(\\\"\\\\n\\\",\\\" \\\") +\\\"@ \"+ eventcode + \"@ \\\" + event_out )\\n\")",
        "fout.write(\"#           assert return_dict['test\"+str(tfuncnum)+\"']['sents']['0']['events'] == [\"+eventcode+\"]\\n\")",
        "fout.write(\"            fout_report.write(text.replace(\\\"\\\\n\\\",\\\" \\\") +\\\"@\\\"+ parsed.replace(\\\"\\\\n\\\",\\\" \\\") +\\\"@ \"+ eventcode + \"@ noevent  \\\" )\\n\")",
        "print(\"result\")",
        "print(return_dict['test123']['sents']['0']['events'])",
        "assert return_dict['test123']['sents']['0']['events'] == [(u'DEU', u'FRA', u'173')]",
        "Find category",
        "print(line)",
        "Find Date",
        "print(line)",
        "Find id",
        "print(line)",
        "Find sentence",
        "print(line)",
        "Check if noevent sentence",
        "Find eventcode",
        "Find sourcecode",
        "print(line)",
        "Find targetcode",
        "print(line)",
        "print(line)",
        "if eventcode == \"\":",
        "eventcode = \"(u'\"+sourcecode+\"', u'\"+targetcode+\"', u'\"+ecode+\"')\"",
        "else:",
        "eventcode = eventcode + \",(u'\"+sourcecode+\"', u'\"+targetcode+\"', u'\"+ecode+\"')\"",
        "print(eventcode)",
        "fout.write(\"fout_report = codecs.open(\\\"test_report.txt\\\",\\\"w\\\",encoding='utf8') #opens test report file for writing\\n\");",
        "fout.write(\"fout_report.write(\\\"Text@ Parse Tree@ Expected Encoding as per Petrarch@ Result from Petrarch_UD @Verbs @Nouns\\\\n\\\")\\n\")",
        "fout.write(\"        event = event.replace(\\\"[\\\",\\\"\\\")\\n\")",
        "fout.write(\"        event = event.replace(\\\"]\\\",\\\"\\\")\\n\")",
        "========================== PRIMARY CODING FUNCTIONS ====================== #",
        "Write the header code to file",
        "Get the Input XML",
        "Read through each line of XML",
        "Things to parse from the XML File ->",
        "date, ID, category, sentence, Event Coding, Text and Parse Tree",
        "Check the line and decode text"
    ],
    "docstrings": [],
    "functions": [
        "check_line",
        "write_header"
    ],
    "classes": []
}