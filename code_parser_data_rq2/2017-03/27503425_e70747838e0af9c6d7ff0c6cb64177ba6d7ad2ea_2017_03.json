{
    "identifiers": [
        "$",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "regex",
        "Pattern",
        "org",
        "apache",
        "beam",
        "sdk",
        "Pipeline",
        "org",
        "apache",
        "beam",
        "sdk",
        "io",
        "TextIO",
        "org",
        "apache",
        "beam",
        "sdk",
        "options",
        "Default",
        "org",
        "apache",
        "beam",
        "sdk",
        "options",
        "Description",
        "org",
        "apache",
        "beam",
        "sdk",
        "options",
        "PipelineOptionsFactory",
        "org",
        "apache",
        "beam",
        "sdk",
        "testing",
        "PAssert",
        "org",
        "apache",
        "beam",
        "sdk",
        "transforms",
        "Aggregator",
        "org",
        "apache",
        "beam",
        "sdk",
        "transforms",
        "DoFn",
        "org",
        "apache",
        "beam",
        "sdk",
        "transforms",
        "ParDo",
        "org",
        "apache",
        "beam",
        "sdk",
        "transforms",
        "Sum",
        "org",
        "apache",
        "beam",
        "sdk",
        "values",
        "KV",
        "org",
        "apache",
        "beam",
        "sdk",
        "values",
        "PCollection",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "LOG",
        "LoggerFactory",
        "getLogger",
        "pattern",
        "Pattern",
        "compile",
        "pattern",
        "matchedWords",
        "createAggregator",
        "Sum",
        "ofLongs",
        "unmatchedWords",
        "createAggregator",
        "Sum",
        "ofLongs",
        "ProcessElement",
        "c",
        "matcher",
        "c",
        "element",
        "getKey",
        "matches",
        "LOG",
        "debug",
        "c",
        "element",
        "getKey",
        "matchedWords",
        "addValue",
        "c",
        "output",
        "c",
        "element",
        "LOG",
        "trace",
        "c",
        "element",
        "getKey",
        "unmatchedWords",
        "addValue",
        "WordCountOptions",
        "Description",
        "Default",
        "value",
        "args",
        "options",
        "PipelineOptionsFactory",
        "fromArgs",
        "args",
        "withValidation",
        "p",
        "Pipeline",
        "create",
        "options",
        "filteredWords",
        "p",
        "apply",
        "TextIO",
        "Read",
        "options",
        "getInputFile",
        "apply",
        "apply",
        "ParDo",
        "of",
        "options",
        "getFilterPattern",
        "expectedResults",
        "Arrays",
        "asList",
        "KV",
        "of",
        "KV",
        "of",
        "PAssert",
        "that",
        "filteredWords",
        "containsInAnyOrder",
        "expectedResults",
        "p",
        "run",
        "waitUntilFinish"
    ],
    "literals": [
        "\"matchedWords\"",
        "\"unmatchedWords\"",
        "\"Matched: \"",
        "\"Did not match: \"",
        "\"Regex filter pattern to use in DebuggingWordCount. \"",
        "\"Only words matching this pattern will be counted.\"",
        "\"Flourish|stomach\"",
        "\"ReadLines\"",
        "\"Flourish\"",
        "\"stomach\""
    ],
    "variables": [
        "filter"
    ],
    "comments": [
        "Log at the \"DEBUG\" level each element that we match. When executing this pipeline",
        "these log lines will appear only if the log level is set to \"DEBUG\" or lower.",
        "Log at the \"TRACE\" level each element that is not matched. Different log levels",
        "can be used to control the verbosity of logging providing an effective mechanism",
        "to filter less important information."
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* An example that verifies word counts in Shakespeare and includes Beam best practices.\n *\n * <p>This class, {@link DebuggingWordCount}, is the third in a series of four successively more\n * detailed 'word count' examples. You may first want to take a look at {@link MinimalWordCount}\n * and {@link WordCount}. After you've looked at this example, then see the\n * {@link WindowedWordCount} pipeline, for introduction of additional concepts.\n *\n * <p>Basic concepts, also in the MinimalWordCount and WordCount examples:\n * Reading text files; counting a PCollection; executing a Pipeline both locally\n * and using a selected runner; defining DoFns.\n *\n * <p>New Concepts:\n * <pre>\n *   1. Logging using SLF4J, even in a distributed environment\n *   2. Creating a custom aggregator (runners have varying levels of support)\n *   3. Testing your Pipeline via PAssert\n * </pre>\n *\n * <p>To execute this pipeline locally, specify general pipeline configuration:\n * <pre>{@code\n *   --project=YOUR_PROJECT_ID\n * }\n * </pre>\n *\n * <p>To change the runner, specify:\n * <pre>{@code\n *   --runner=YOUR_SELECTED_RUNNER\n * }\n * </pre>\n *\n * <p>The input file defaults to a public data set containing the text of of King Lear,\n * by William Shakespeare. You can override it and choose your own input with {@code --inputFile}.\n *",
        "A DoFn that filters for a specific key based upon a regular expression.",
        "* Concept #1: The logger below uses the fully qualified class name of FilterTextFn as the\n     * logger. Depending on your SLF4J configuration, log statements will likely be qualified by\n     * this name.\n     *\n     * <p>Note that this is entirely standard SLF4J usage. Some runners may provide a default SLF4J\n     * configuration that is most appropriate for their logging integration.",
        "* Concept #2: A custom aggregator can track values in your pipeline as it runs. Each\n     * runner provides varying levels of support for aggregators, and may expose them\n     * in a dashboard, etc.",
        "* Options supported by {@link DebuggingWordCount}.\n   *\n   * <p>Inherits standard configuration options and all options defined in\n   * {@link WordCount.WordCountOptions}.",
        "* Concept #3: PAssert is a set of convenient PTransforms in the style of\n     * Hamcrest's collection matchers that can be used when writing Pipeline level tests\n     * to validate the contents of PCollections. PAssert is best used in unit tests\n     * with small data sets but is demonstrated here as a teaching tool.\n     *\n     * <p>Below we verify that the set of filtered words matches our expected counts. Note\n     * that PAssert does not provide any output and that successful completion of the\n     * Pipeline implies that the expectations were met. Learn more at\n     * https://cloud.google.com/dataflow/pipelines/testing-your-pipeline on how to test\n     * your Pipeline and see {@link DebuggingWordCountTest} for an example unit test."
    ],
    "functions": [
        "FilterTextFn",
        "processElement",
        "getFilterPattern",
        "setFilterPattern",
        "main"
    ],
    "classes": [
        "DebuggingWordCount",
        "FilterTextFn"
    ]
}