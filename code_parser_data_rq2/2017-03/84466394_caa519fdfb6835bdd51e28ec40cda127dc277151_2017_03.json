{
    "identifiers": [
        "ast",
        "os",
        "path",
        "basename",
        "dirname",
        "isdir",
        "join",
        "os",
        "listdir",
        "filename",
        "basename",
        "filename",
        "startswith",
        "filename",
        "endswith",
        "filename",
        "endswith",
        "open",
        "filename",
        "f",
        "ast",
        "parse",
        "f",
        "read",
        "filename",
        "filename",
        "LogCallVisitor",
        "filename",
        "visit",
        "tree",
        "isdir",
        "filename",
        "child",
        "listdir",
        "filename",
        "_visit_file",
        "join",
        "filename",
        "child",
        "_visit_file",
        "dirname",
        "dirname",
        "ast",
        "NodeVisitor",
        "filename",
        "filename",
        "node",
        "isinstance",
        "node",
        "func",
        "ast",
        "Attribute",
        "node",
        "func",
        "attr",
        "funcname",
        "logfunc_names",
        "len",
        "node",
        "args",
        "filename",
        "node",
        "lineno",
        "node",
        "col_offset",
        "isinstance",
        "node",
        "args",
        "ast",
        "Str",
        "filename",
        "node",
        "lineno",
        "node",
        "col_offset"
    ],
    "literals": [
        "'.'",
        "'.py'",
        "'.wsgi'",
        "'critical'",
        "'error'",
        "'warn'",
        "'info'",
        "'debug'",
        "\"Logging function called with zero arguments at %r \"",
        "\"line %d column %d.\"",
        "\"Logging function called with non-string literal format \"",
        "\"string at %r line %d column %d.\""
    ],
    "variables": [
        "tree",
        "filename",
        "logfunc_names",
        "funcname"
    ],
    "comments": [
        "This could be one of '.' or '..', or something",
        "like .venv; it's unlikely to have version python",
        "source files in it, so we skip it.",
        "The parent directory, which is the root of the source tree.",
        "If this file is moved, this may need to be changed:",
        "Make sure this is a call to one of the logging methods.",
        "NOTE: we're going based on the method name only; in theory",
        "this could give us false positives if someone names another",
        "function after one of these, or false negatives if we store",
        "one of these in a variable (don't do that). We could be",
        "smarter about figuring out what function is being called,",
        "but this is probably good enough.",
        "This is a method call on on object",
        "We've decided this is a logging call; sanity check it:"
    ],
    "docstrings": [
        "\"\"\"Tests performing linter-like checks\"\"\"",
        "\"\"\"Scan for proper use of logger format strings\n\n    Per @zenhack's comment on issue #629:\n\n    > All over the codebase you can find statments like:\n    >\n    >   logger.error('Foo: %r' % bar)\n    >\n    > The % operator being python's format-string splicing operator. The\n    > problem with this is that the logging functions do the formation\n    > string splicing themselves, i.e. what you want in this case is:\n    >\n    >   logger.error('Foo: %r', bar)\n    >\n    > This opens up the possibility of format-string injection\n    > vulnerabilities. Frankly, this is too easy to do, especially\n    > since in other contexts % is the correct thing. We ought to\n    > (a) make sure all instances of this mistake are fixed, and (b)\n    > come up with a way to catch this mistake automatically going\n    > forward; perhaps some kind of linter.\n\n    This is that linter; it scans the source tree looking for places\n    where the logging functions are called with any first argument\n    that isn't a string literal.\n    \"\"\"",
        "\"\"\"Ast node visitor used by test_logger_format_strings.\"\"\""
    ],
    "functions": [
        "test_logger_format_strings",
        "_visit_file",
        "visit_Call"
    ],
    "classes": [
        "LogCallVisitor"
    ]
}