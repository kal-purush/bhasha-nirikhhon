{
    "identifiers": [
        "argparse",
        "cv2",
        "glob",
        "os",
        "basicsr",
        "archs",
        "rrdbnet_arch",
        "RRDBNet",
        "realesrgan",
        "RealESRGANer",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "args",
        "model_path",
        "args",
        "model_path",
        "RRDBNet",
        "num_in_ch",
        "num_out_ch",
        "num_feat",
        "num_block",
        "args",
        "block",
        "num_grow_ch",
        "scale",
        "args",
        "netscale",
        "RealESRGANer",
        "scale",
        "args",
        "netscale",
        "model_path",
        "args",
        "model_path",
        "model",
        "model",
        "tile",
        "args",
        "tile",
        "tile_pad",
        "args",
        "tile_pad",
        "pre_pad",
        "args",
        "pre_pad",
        "half",
        "args",
        "half",
        "args",
        "face_enhance",
        "gfpgan",
        "GFPGANer",
        "GFPGANer",
        "model_path",
        "upscale",
        "args",
        "outscale",
        "arch",
        "channel_multiplier",
        "bg_upsampler",
        "upsampler",
        "os",
        "makedirs",
        "args",
        "output",
        "exist_ok",
        "os",
        "path",
        "isfile",
        "args",
        "input",
        "args",
        "input",
        "sorted",
        "glob",
        "glob",
        "os",
        "path",
        "join",
        "args",
        "input",
        "idx",
        "path",
        "paths",
        "os",
        "path",
        "splitext",
        "os",
        "path",
        "basename",
        "path",
        "idx",
        "imgname",
        "cv2",
        "imread",
        "path",
        "cv2",
        "IMREAD_UNCHANGED",
        "len",
        "img",
        "shape",
        "img",
        "shape",
        "img",
        "shape",
        "max",
        "h",
        "w",
        "args",
        "netscale",
        "warnings",
        "warnings",
        "warn",
        "max",
        "h",
        "w",
        "args",
        "netscale",
        "warnings",
        "warnings",
        "warn",
        "args",
        "face_enhance",
        "face_enhancer",
        "enhance",
        "img",
        "has_aligned",
        "only_center_face",
        "paste_back",
        "upsampler",
        "enhance",
        "img",
        "outscale",
        "args",
        "outscale",
        "error",
        "error",
        "args",
        "ext",
        "extension",
        "args",
        "ext",
        "img_mode",
        "os",
        "path",
        "join",
        "args",
        "output",
        "imgname",
        "args",
        "suffix",
        "extension",
        "cv2",
        "imwrite",
        "save_path",
        "output",
        "main"
    ],
    "literals": [
        "'--input'",
        "'inputs'",
        "'Input image or folder'",
        "'--model_path'",
        "'OSRGAN/Model/OSRGAN.pth'",
        "'Path to the pre-trained model'",
        "'--output'",
        "'Images'",
        "'Output folder'",
        "'--netscale'",
        "'Upsample scale factor of the network'",
        "'--outscale'",
        "'The final upsampling scale of the image'",
        "'--suffix'",
        "'out'",
        "'Suffix of the restored image'",
        "'--tile'",
        "'Tile size, 0 for no tile during testing'",
        "'--tile_pad'",
        "'Tile padding'",
        "'--pre_pad'",
        "'Pre padding size at each border'",
        "'--face_enhance'",
        "'store_true'",
        "'Use GFPGAN to enhance face'",
        "'--half'",
        "'store_true'",
        "'Use half precision during inference'",
        "'--block'",
        "'num_block in RRDB'",
        "'--alpha_upsampler'",
        "'realesrgan'",
        "'The upsampler for the alpha channels. Options: realesrgan | bicubic'",
        "'--ext'",
        "'auto'",
        "'Image extension. Options: auto | jpg | png, auto means using the same extension as inputs'",
        "'RealESRGAN_x4plus_anime_6B.pth'",
        "'RealESRGAN_x2plus.pth'",
        "'https://github.com/TencentARC/GFPGAN/releases/download/v0.2.0/GFPGANCleanv1-NoCE-C2.pth'",
        "'clean'",
        "'*'",
        "'Testing'",
        "'RGBA'",
        "'The input image is large, try X2 model for better performace.'",
        "'The input image is small, try X4 model for better performace.'",
        "'Error'",
        "'If you encounter CUDA out of memory, try to set --tile with a smaller number.'",
        "'auto'",
        "'RGBA'",
        "'png'",
        "f'{imgname}_{args.suffix}.{extension}'",
        "'__main__'"
    ],
    "variables": [
        "parser",
        "args",
        "args",
        "block",
        "args",
        "netscale",
        "model",
        "upsampler",
        "face_enhancer",
        "paths",
        "paths",
        "imgname",
        "extension",
        "img",
        "img_mode",
        "img_mode",
        "h",
        "w",
        "_",
        "_",
        "output",
        "output",
        "_",
        "extension",
        "extension",
        "extension",
        "save_path"
    ],
    "comments": [
        "RGBA images should be saved in png format"
    ],
    "docstrings": [],
    "functions": [
        "main"
    ],
    "classes": []
}