{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "LinkList",
        "data",
        "data",
        "value",
        "next",
        "next",
        "value",
        "back",
        "back",
        "value",
        "d",
        "data",
        "d",
        "next",
        "head",
        "last",
        "n",
        "new_data",
        "LDENode",
        "new_data",
        "Write",
        "newNode",
        "Data",
        "Parse",
        "ReadLine",
        "head",
        "head",
        "newNode",
        "head",
        "Next",
        "head",
        "Back",
        "last",
        "head",
        "last",
        "Next",
        "newNode",
        "newNode",
        "Next",
        "newNode",
        "Back",
        "last",
        "last",
        "newNode",
        "n",
        "Write",
        "new_present",
        "LDENode",
        "new_present",
        "present",
        "head",
        "present",
        "WriteLine",
        "present",
        "Data",
        "present",
        "present",
        "Next",
        "new_present",
        "LDENode",
        "new_present",
        "present",
        "last",
        "present",
        "WriteLine",
        "present",
        "Data",
        "present",
        "present",
        "Back",
        "head",
        "isEmpty",
        "tmp",
        "next",
        "tmp",
        "tmp",
        "next",
        "tmp",
        "new_data",
        "LDENode",
        "new_data",
        "isEmpty",
        "head",
        "newNode",
        "n",
        "getLastNode",
        "lastNode",
        "next",
        "newNode",
        "n",
        "head",
        "n",
        "val",
        "Write",
        "val",
        "Parse",
        "ReadLine",
        "isEmpty",
        "head",
        "data",
        "val",
        "head",
        "head",
        "next",
        "n",
        "head",
        "prev",
        "next",
        "curr",
        "prev",
        "next",
        "curr",
        "data",
        "val",
        "prev",
        "next",
        "curr",
        "next",
        "n",
        "prev",
        "curr",
        "head",
        "tmp",
        "WriteLine",
        "tmp",
        "data",
        "tmp",
        "next",
        "tmp",
        "tmp",
        "next",
        "WriteLine",
        "tmp",
        "data",
        "args",
        "DoublyLinkedList",
        "Random",
        "i",
        "i",
        "myList",
        "InsertFront",
        "r",
        "Next",
        "myList",
        "head",
        "tmp",
        "WriteLine",
        "tmp",
        "data",
        "tmp",
        "next",
        "tmp",
        "tmp",
        "next",
        "WriteLine",
        "tmp",
        "data",
        "WriteLine",
        "myList",
        "displaylistPU",
        "WriteLine",
        "myList",
        "count",
        "WriteLine",
        "myList",
        "displaylistUP",
        "WriteLine",
        "myList",
        "count",
        "myList",
        "deleteItem",
        "WriteLine",
        "myList",
        "printList",
        "WriteLine",
        "myList",
        "count",
        "ReadLine"
    ],
    "literals": [
        "\"\\n Ingrese el dato del nuevo nodo: \"",
        "\"\\n Nuevo nodo ingresado con exito \\n\"",
        "\" \"",
        "\" \"",
        "\"\\n Favor de ingresar el nodo que deseamos eliminar: \"",
        "\"\\n PRIMERO AL ULTIMO\"",
        "\"LA LISTA TIENE \"",
        "\" ELEMENTOS\"",
        "\"\\n ULTIMO AL PRIMERO\"",
        "\"LA LISTA TIENE \"",
        "\" ELEMENTOS\"",
        "\"\\n ELEMENTO ELIMINADO \"",
        "\"LA LISTA TIENE \"",
        "\" ELEMENTOS\""
    ],
    "variables": [
        "data",
        "LDENode",
        "next",
        "LDENode",
        "back",
        "Data",
        "LDENode",
        "Next",
        "LDENode",
        "Back",
        "LDENode",
        "head",
        "LDENode",
        "last",
        "n",
        "LDENode",
        "newNode",
        "LDENode",
        "present",
        "LDENode",
        "present",
        "LDENode",
        "tmp",
        "LDENode",
        "newNode",
        "LDENode",
        "lastNode",
        "LDENode",
        "prev",
        "LDENode",
        "curr",
        "LDENode",
        "tmp",
        "DoublyLinkedList",
        "myList",
        "Random",
        "r",
        "i",
        "LDENode",
        "tmp"
    ],
    "comments": [
        "Creamos una clase para el nodo",
        "Creamos la estructura que va a contener los nodos",
        "Dato del nodo entero",
        "Nodo siguiente=nulo",
        "Nodo atras",
        "Declaramos metodo get(obtener) retorna datos, metodo set(colocar) datos=valor",
        "Declaramos metodo get(obtener) retorna nodo siguiente, metodo set(colocar) siguiente=valor",
        "Encapsula",
        "Declaramos metodo get(obtener) retorna nodo atras, metodo set(colocar) atras=valor",
        "Se crea un constructor para indicarle el valor de las variables data = entero  y next= null",
        "Constructor",
        "Creamos una clase para lista doblemente enlazada",
        "Que significa que sea una Lista de Doblemente enlazadas?,",
        "Significa que puede recorrer los valores desde el primer nodo hasta el ultimo y diseversa (doble) del ultimo hasta el primero",
        "3, 5, 6, 7, 9, 1, 12, 34, 25, 30",
        "Variable de la cabeza (Primer valor de la lista)",
        "private LDENode head = new LDENode();",
        "Variable ultima(Ultimo valor de la lista)",
        "Variable nodo",
        "Lista Doblemente Enlazada ------Creacion de Nodo nuevo",
        "indicarle que el numero de la lista empieza en 0",
        "Insertamos nodos a una lista",
        "Creamos una inserción del nuevo nodo de enfrente y al final concatenamos para que pueda leer toda la lista",
        "Declaramos nuevo nodo",
        "Nodo Ejemplo=3",
        "Declaramos a la consola que me introduzca nuevo nodo",
        "Convertimos valor introducido a la consola a valor entero",
        "Porque indicamos que la lista no a sido creada por lo tanto no contiene ningun valor",
        "3, 5, 6, 7, 9, 1, 12, 34, 25, 30",
        "Lista doblemente enlazada",
        "null <------3-------> null",
        "Indicamos que el primer nodo de la lista este nuevo",
        "Apuntador indicando que Primero=null y eso significa que va apuntar al nodo que le indiquemos en este caso es 3",
        "Primero=3",
        "el nodo 3 contiene un apuntador a 3, es el siguiente dato que va imprimir o aparecer",
        "Apunta al siguiente",
        "3 apunta a null",
        "Apuntador hacia atras",
        "Contiene el apuntador hacia atras, indica que tampoco tiene nada por detras",
        "Indicar que tambien el ultimo puede ser el primero",
        "El ultimo siempre va hacer el primero",
        "Primero =3 ultimo=3",
        "el ultimo va hacer el primero osea 3",
        "El segundo nodo es 5",
        "3(el ultimo nodo) va apuntar al nuevo nodo sea 5",
        "tmb ese nuevo nodo tiene un apuntar a siguiente",
        "null <--- 3 --> 5---> null",
        "tmb contiene un apuntador hacia atras",
        "el nuevo nodo va apuntar al ultimo",
        "null <--- 3 --> <----5---> null",
        "Indicamos ahora que el ultimo es el nuevo nodo",
        "y cual es el nuevo nodo el 5",
        "null < ---3-- > < ----5---> null (6) Ahora el ultimo va hacer el nuevo nodo que metamos",
        "null < ---3-- > < ----5---> 6 --> null (igual tiene un apuntador a siguiente que es null)",
        "null < ---3-- > < ----5--->  <---6 --> null (igual tiene un apuntador que apunta al siguiente)",
        "y ahora el ultimo valor de nuestra lista es el nuevo nodo =6",
        "Primero=3 ultimo= ya no es 3 ahora es 5",
        "newNode.next = this.head;\n            this.head = newNode;",
        "Desplegar lista doble",
        "Creamos un nuevo nodo que se llama actual (present)",
        "Metodo para recorer desde el primero hasta el ultimo",
        "Declaramos nuevo nodo",
        "vamos desde el primer nodo recorriendo la lista",
        "1. Creamos un nuevo apuntador llamado actual que hace referencia al primer nodo de la lista el 3",
        "mientras actual sea diferente de null, me recorre la lista",
        "2.Actual es diferente de 3 si, entonces imprimimos un dato",
        "Los nodos datos que vayas encontrandolos imprimelos",
        "y el nodo recorre la lista con el apuntador Next",
        "y ahora el actual no es 3 si  no al siguiente al 5 y asi con todos los valores, eres diferente de null si entonces recorre la lista",
        "se termina la lista cuando al final no haiga mas valores que null",
        "Desplegar la lista desde el ultimo hacia el primero",
        "Empiece desde el ultimo",
        "Nos permite recorrer la lista mientras actual sea diferente de null",
        "Mientras vaya recorriendo los nodos, que nos imprima que va encontrando",
        "usamos apuntar atras es el valor que esta destras de el en este caso recorre la lista hacia atras siendo ser 3",
        "ultimo hasta el primero",
        "hasta que termina la lista en null",
        "Obtener el ultimo nodo",
        "Recurre lista a valor nulo",
        "Aqui hacemos referencia para indicarle al nodo de la cabeza(el primero), que antes de el llevara null, para indicarle que antes de el no hay nada, le indicamos que desde ahí comienza la lista como tal",
        "Aqui hacemos la insercion del nodo con referencia a nulo. y al final concatenamos para que pueda leer toda la lista",
        "Aqui creamos un if para llamar a un metodo que hace referencia al valor nulo IsEmpty",
        "if(head==null)",
        "Metodo que recorre la lista a valor nudo",
        "Aqui creamos un contador para que cuente los numeros insertados",
        "aqui creamos un metodo para eliminar el nodo que le indicamos a cada lista",
        "Convertimos valor introducido a la consola a valor entero",
        "Aqui imprimimos(Desplegamos) la lista de los datos de nuestra clase",
        "Aqui le indicamos a la clase main que nos haga un recorrido de lista de los nodos y mandamos a llamar el metodo InsertLast para insertar el nodo aleatorio(random) de la lista",
        "int[] lala = { 3, 5, 6, 7, 9, 1, 12, 34, 25, 30 };",
        "myList.InsertFront(r.Next(0, 30));",
        "myList.InsertLast(lala[i]);",
        "Indicamos cabeza principal",
        "Aqui desplegamos las listas de los nodos, y las eliminaciones de los nudos asi como imprimimos el contados de los nodos",
        "myList.deleteItem(3);\n             Console.WriteLine(\"Borramos el 3\");\n             myList.printList();\n\n             myList.deleteItem(9);\n             Console.WriteLine(\"Borramos el 9\");\n\n             myList.printList();"
    ],
    "docstrings": [],
    "functions": [
        "LDENode",
        "Lista",
        "DoublyLinkedList",
        "InsertFront",
        "displaylistPU",
        "displaylistUP",
        "LDENode",
        "getLastNode",
        "InsertLast",
        "isEmpty",
        "count",
        "deleteItem",
        "printList",
        "Main"
    ],
    "classes": [
        "LDENode",
        "DoublyLinkedList",
        "Program"
    ]
}