{
    "identifiers": [
        "React",
        "useState",
        "useEffect",
        "StarsDisplay",
        "props",
        "utils",
        "props",
        "starId",
        "div",
        "starId",
        "PlayNumber",
        "props",
        "button",
        "colors",
        "props",
        "props",
        "props",
        "props",
        "props",
        "button",
        "PlayAgain",
        "props",
        "div",
        "div",
        "props",
        "props",
        "div",
        "button",
        "props",
        "button",
        "div",
        "StarMatch",
        "useState",
        "Game",
        "gameId",
        "setGameId",
        "gameId",
        "useGameState",
        "timeLimit",
        "useState",
        "utils",
        "useState",
        "utils",
        "useState",
        "useState",
        "useEffect",
        "secondsLeft",
        "availableNums",
        "setTimeout",
        "setSecondsLeft",
        "secondsLeft",
        "clearTimeout",
        "timerId",
        "setGameState",
        "newCandidateNums",
        "utils",
        "newCandidateNums",
        "stars",
        "setCandidateNums",
        "newCandidateNums",
        "availableNums",
        "n",
        "newCandidateNums",
        "n",
        "setStars",
        "utils",
        "newAvailableNums",
        "setAvailableNums",
        "newAvailableNums",
        "setCandidateNums",
        "Game",
        "props",
        "useGameState",
        "utils",
        "candidateNums",
        "stars",
        "availableNums",
        "secondsLeft",
        "numberStatus",
        "number",
        "availableNums",
        "number",
        "candidateNums",
        "number",
        "candidatesAreWrong",
        "onNumberClick",
        "number",
        "currentStatus",
        "currentStatus",
        "secondsLeft",
        "currentStatus",
        "candidateNums",
        "number",
        "candidateNums",
        "cn",
        "cn",
        "number",
        "setGameState",
        "newCandidateNums",
        "div",
        "div",
        "div",
        "div",
        "div",
        "gameStatus",
        "PlayAgain",
        "props",
        "gameStatus",
        "StarsDisplay",
        "stars",
        "div",
        "div",
        "utils",
        "number",
        "PlayNumber",
        "number",
        "numberStatus",
        "number",
        "number",
        "onNumberClick",
        "div",
        "div",
        "div",
        "secondsLeft",
        "div",
        "div",
        "arr",
        "arr",
        "acc",
        "curr",
        "acc",
        "curr",
        "min",
        "max",
        "max",
        "min",
        "_",
        "i",
        "min",
        "i",
        "min",
        "max",
        "min",
        "max",
        "min",
        "arr",
        "max",
        "i",
        "arr",
        "i",
        "sets",
        "j",
        "len",
        "j",
        "sets",
        "j",
        "arr",
        "i",
        "utils",
        "candidateSet",
        "candidateSum",
        "max",
        "sets",
        "candidateSet",
        "sums",
        "candidateSum",
        "sums",
        "utils",
        "sums",
        "StarMatch"
    ],
    "literals": [
        "'./App.css'",
        "'react'",
        "\"star\"",
        "\"number\"",
        "\"game-done\"",
        "\"message\"",
        "'lost'",
        "'red'",
        "'green'",
        "'lost'",
        "'Game Over'",
        "'Calculations indicate you are a genius.'",
        "'won'",
        "'lost'",
        "'active'",
        "'used'",
        "'wrong'",
        "'candidate'",
        "'available'",
        "'used'",
        "'available'",
        "\"game\"",
        "\"help\"",
        "\"body\"",
        "\"left\"",
        "'active'",
        "\"right\"",
        "\"timer\"",
        "'lightgray'",
        "'lightgreen'",
        "'lightcoral'",
        "'deepskyblue'"
    ],
    "variables": [
        "StarsDisplay",
        "PlayNumber",
        "PlayAgain",
        "StarMatch",
        "gameId",
        "setGameId",
        "useGameState",
        "stars",
        "setStars",
        "availableNums",
        "setAvailableNums",
        "candidateNums",
        "setCandidateNums",
        "secondsLeft",
        "setSecondsLeft",
        "timerId",
        "setGameState",
        "newAvailableNums",
        "Game",
        "candidatesAreWrong",
        "gameStatus",
        "numberStatus",
        "onNumberClick",
        "newCandidateNums",
        "colors",
        "utils",
        "sets",
        "sums",
        "i",
        "j",
        "len",
        "candidateSet",
        "candidateSum"
    ],
    "comments": [
        "-Section 2 functional children components that return elements.\n<> and </> tags in JSX correspond to <React.Fragment> to not introduce any new HTML elements.",
        "create range from 1-9, map the range into array of stars.",
        "assign key attribute to list items of stars.",
        "button color based on status",
        "Ternary operators",
        "Section 1: Parent Component that calls the Game variable",
        "-When PlayAgain button is pressed gameID is incremented 1.\n-React will unmount the game with previous gameId key and mount new game with current gameId key.\n-this clears side effects and re-initialize brand new state.",
        "Initialize game 1",
        "Increment game to new value when PlayAgain button is clicked.",
        "-useGameState is a custom hook used to manage initial state, useffect, and how to set state.   \t\n  -initialize stars state using utils.random value 1-9 to display random number stars.\n  -initialize availableNums state using utils.random value 1-9 to display range 1-9 numbers. \n  -initialize candidateNums state with an empty array.",
        "initial state",
        "side effects",
        "sideffect runs after first render and after every update.",
        "decrement secondsLeft state by 1 second.",
        "sideffect clean up mechanism.",
        "how to set state",
        "if newCandidateNums count does not equal count of stars.",
        "setCandidateNum will update CandidateNums state.",
        "else sum of newcandidateNums == count of stars (Correct Pick!!)",
        "filter non newCandidateNums to be removed from availableNums.",
        "redraw number of stars available.",
        "update state of AvailableNums based on newAvailableNums.",
        "update state of CandidateNums to empty array.",
        "Section 3: Variables for computation",
        "candidate count number sum > count of stars.",
        "is condition 0 available numbers to select?",
        "true, gameStatus is 'won'",
        "false, then check if seconds Left is 0?",
        "0 true, gameStatus is 'lost' : 0 false, gameStatus is 'active'",
        "if number is not included in available numbers array return 'used'.",
        "if number is included in candidate numbers array then",
        "if true return 'wrong' : false return 'candidate'.",
        "otherwise if number is not used or not a candidate return 'available'.",
        "if gameStus is not 'active' OR if currentStatus is 'used'",
        "just return (don't let user do anything)",
        "We need a fresh newCandidateNums array upon each time user selects a number button",
        "is currentStatus 'available?'",
        "true, then concat the number to add to candidateNums array.",
        "false, filter out number that was clicked by user.",
        "Section 3 the Return section which renders elements to display the UI based on state and variables",
        "is the gameStatus not active?",
        "true, call the PlayAgain and resetGame components.",
        "and update gameStatus to display if game 'won' or 'lost'.",
        "false, call the StarsDisplay component.",
        "Color Theme",
        "Math science",
        "Sum an array using reduce function to return sum of all elements of an array",
        "create an array of numbers between min and max (edges included)",
        "pick a random number between min and max (edges included)",
        "Given an array of numbers and a max...",
        "Pick a random sum (< max) from the set of all available sums in arr"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}