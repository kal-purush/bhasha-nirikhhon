{
    "identifiers": [
        "rospy",
        "hbba_msgs",
        "msg",
        "Desire",
        "Event",
        "hbba_msgs",
        "srv",
        "AddDesires",
        "RemoveDesires",
        "scenario_manager_action_server",
        "ScenarioManagerAction",
        "ScenarioManagerAction",
        "ScenarioManagerAction",
        "name",
        "Event",
        "ACC_ON",
        "Event",
        "ACC_OFF",
        "Event",
        "IMP_ON",
        "Event",
        "IMP_OFF",
        "add_state",
        "state_00",
        "State00",
        "desires",
        "add_state",
        "state_01",
        "State01",
        "desires",
        "add_state",
        "state_02",
        "State02",
        "desires",
        "add_state",
        "state_03",
        "State03",
        "desires",
        "add_state",
        "state_04",
        "State04",
        "desires",
        "register_preempt_callback",
        "canceled_cb",
        "rospy",
        "ServiceProxy",
        "RemoveDesires",
        "rospy",
        "wait_for_service",
        "state",
        "state",
        "get_id",
        "key",
        "states",
        "keys",
        "states",
        "state",
        "current_state",
        "states",
        "get",
        "key",
        "rospy",
        "Subscriber",
        "Event",
        "eventCB",
        "queue_size",
        "sub_desires",
        "unregister",
        "desire",
        "desires",
        "reaction_events",
        "desires",
        "desire",
        "states",
        "current_state",
        "react_to_event",
        "react_result",
        "states",
        "current_state",
        "cleanup",
        "react_result",
        "_result",
        "_as",
        "set_succeeded",
        "_result",
        "stopObserving",
        "_feedback",
        "current_state",
        "react_result",
        "_feedback",
        "react_result",
        "_as",
        "publish_feedback",
        "_feedback",
        "states",
        "current_state",
        "add_desires",
        "goal",
        "goal",
        "execute",
        "observe",
        "states",
        "current_state",
        "add_desires",
        "desire",
        "desires",
        "rem_desires",
        "call",
        "desire",
        "desires",
        "clear",
        "_as",
        "set_preempted",
        "stopObserving",
        "actionlib",
        "SimpleActioClient",
        "custom_msgs",
        "msg",
        "scenario_managerAction",
        "client",
        "wait_for_server",
        "custom_msgs",
        "msg",
        "scenario_managerGoal",
        "execute",
        "client",
        "send_goal",
        "goal",
        "rospy",
        "init_node",
        "Scenario1Manager",
        "Scenario1Tester",
        "rospy",
        "spin",
        "rospy",
        "ROSInterruptException"
    ],
    "literals": [
        "\"scenario_2_manager\"",
        "'remove_desires'",
        "\"remove_desires\"",
        "\"keys\"",
        "\"key\"",
        "\"keys\"",
        "\"state\"",
        "\"none\"",
        "\"events\"",
        "\"Done\"",
        "\"state_00\"",
        "\"state_00\"",
        "\"sc1tester\"",
        "\"__main__\"",
        "\"scenario_1_manager\""
    ],
    "variables": [
        "desires",
        "states",
        "current_state",
        "reaction_events",
        "rem_desires",
        "key",
        "key",
        "current_state",
        "sub_desires",
        "react_result",
        "result",
        "current_state",
        "prev_state",
        "current_state",
        "state",
        "current_state",
        "client",
        "goal",
        "node",
        "doTest"
    ],
    "comments": [
        "!/usr/bin/env python",
        "from states import state_00, state_01, state_02, state_03, state_04, state_05, state_06, state_07, state_08, state_09, state_10, state_11, state_12",
        "Get and add all states",
        "Update own desire states w/ events seen",
        "initial desire addition",
        "no stuff"
    ],
    "docstrings": [],
    "functions": [
        "add_state",
        "observe",
        "stopObserving",
        "eventCB",
        "execute_cb",
        "canceled_cb"
    ],
    "classes": [
        "Scenario2Manager",
        "Scenario1Tester"
    ]
}