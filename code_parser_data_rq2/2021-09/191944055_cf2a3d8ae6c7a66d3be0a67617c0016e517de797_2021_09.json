{
    "identifiers": [
        "com",
        "stuartbeard",
        "iorek",
        "constraints",
        "com",
        "stuartbeard",
        "iorek",
        "constraints",
        "validation",
        "CompromisedPasswordConstraintValidator",
        "com",
        "stuartbeard",
        "iorek",
        "service",
        "model",
        "PasswordRiskLevel",
        "javax",
        "validation",
        "Constraint",
        "javax",
        "validation",
        "Payload",
        "java",
        "lang",
        "annotation",
        "ElementType",
        "java",
        "lang",
        "annotation",
        "Retention",
        "java",
        "lang",
        "annotation",
        "RetentionPolicy",
        "java",
        "lang",
        "annotation",
        "Target",
        "Target",
        "ElementType",
        "FIELD",
        "Retention",
        "RetentionPolicy",
        "RUNTIME",
        "Constraint",
        "validatedBy",
        "NotKnowinglyCompromised",
        "message",
        "groups",
        "payload",
        "requestFlow",
        "maxAcceptableRisk",
        "PasswordRiskLevel",
        "COMPROMISED"
    ],
    "literals": [
        "\"{com.stuartbeard.iorek.constraints.NotKnowinglyCompromised.message}\"",
        "\"unspecified\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* MIT License\n *\n * Copyright (c) 2019-2021 Stuart Beard",
        "* Annotation interface that determines which field level elements in a given POJO class should be checked for known\n * password compromise. Applies to 'in-band' notification of password compromise only.\n *\n * @author Stuart Beard\n * @version 1.0.0\n * @since 1.0.0",
        "*  @return the request flow defined by the specific API Request Model class if set. The default\n     *  is 'unspecified'.",
        "* Provides the maximum level of acceptable risk for a given API Request Object. Setting this will have the\n     * following consequences;\n     * <br />\n     * <ul>\n     *     <li>\n     *         {@link PasswordRiskLevel#OK} - Allow all passwords that have been compromised less than the warning\n     *         threshold defined in\n     *         {@link com.stuartbeard.iorek.service.config.CompromisedPasswordThresholdConfigurationProperties}\n     *     </li>\n     *     <li>\n     *         {@link PasswordRiskLevel#COMPROMISED} - Allow all passwords that have been compromised less than the severe\n     *         threshold defined in\n     *         {@link com.stuartbeard.iorek.service.config.CompromisedPasswordThresholdConfigurationProperties}\n     *     </li>\n     *     <li>\n     *         {@link PasswordRiskLevel#SEVERELY_COMPROMISED} - Allow all passwords to be used (...what's the point\n     *         in using this library then?)\n     *         {@link com.stuartbeard.iorek.service.config.CompromisedPasswordThresholdConfigurationProperties}\n     *     </li>\n     * </ul>\n     *\n     * @return the level of <strong>acceptable</strong> risk request flow defined by the specific API Request Model\n     * class if set. The default is {@link PasswordRiskLevel#COMPROMISED} so that by default there is a perceived\n     * balance between preventing poor password choices, while keeping it reasonably easy to choose a more secure one.\n     * This is impacted by the chosen configuration defined by\n     * {@link com.stuartbeard.iorek.service.config.CompromisedPasswordThresholdConfigurationProperties}"
    ],
    "functions": [],
    "classes": []
}