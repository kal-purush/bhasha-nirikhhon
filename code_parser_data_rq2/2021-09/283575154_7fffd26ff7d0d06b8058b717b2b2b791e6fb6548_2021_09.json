{
    "identifiers": [
        "Router",
        "bearerToken",
        "makeStore",
        "errorHandler",
        "healthCheck",
        "kubernetes",
        "hardcodedNodes",
        "insecureTest",
        "geolocateMiddleware",
        "controllers",
        "streamProxy",
        "apiProxy",
        "proxy",
        "getBroadcasterHandler",
        "WebhookCannon",
        "NoopQueue",
        "RabbitQueue",
        "Stripe",
        "supportAddr",
        "sendgridTemplateId",
        "sendgridApiKey",
        "supportAddr",
        "sendgridTemplateId",
        "sendgridApiKey",
        "require",
        "makeStore",
        "amqpUrl",
        "RabbitQueue",
        "amqpUrl",
        "NoopQueue",
        "WebhookCannon",
        "webhookCannon",
        "process",
        "code",
        "queue",
        "webhookCannon",
        "stripeSecretKey",
        "Stripe",
        "stripeSecretKey",
        "Router",
        "app",
        "healthCheck",
        "app",
        "bodyParser",
        "app",
        "bodyParser",
        "app",
        "req",
        "res",
        "next",
        "req",
        "store",
        "req",
        "req",
        "frontendDomain",
        "req",
        "queue",
        "req",
        "stripe",
        "next",
        "insecureTestToken",
        "process",
        "app",
        "insecureTestToken",
        "insecureTest",
        "app",
        "bearerToken",
        "kubeNamespace",
        "app",
        "kubernetes",
        "app",
        "hardcodedNodes",
        "Router",
        "prefixRouter",
        "geolocateMiddleware",
        "getBroadcasterHandler",
        "controllers",
        "GEOLOCATION_ENDPOINTS",
        "name",
        "prefixRouter",
        "name",
        "apiProxy",
        "prefixRouter",
        "name",
        "controller",
        "app",
        "httpPrefix",
        "prefixRouter",
        "app",
        "streamProxy",
        "app",
        "req",
        "res",
        "res",
        "req",
        "req",
        "req",
        "fallbackProxy",
        "app",
        "proxy",
        "fallbackProxy",
        "app",
        "errorHandler",
        "app"
    ],
    "literals": [
        "\"express/lib/router\"",
        "\"express-bearer-token\"",
        "\"./store\"",
        "\"./middleware\"",
        "\"./controllers\"",
        "\"./controllers/stream-proxy\"",
        "\"./controllers/api-proxy\"",
        "\"http-proxy-middleware\"",
        "\"./controllers/broadcaster\"",
        "\"./webhooks/cannon\"",
        "\"./store/queue\"",
        "\"stripe\"",
        "\"broadcaster\"",
        "\"orchestrator\"",
        "\"ingest\"",
        "\"geolocate\"",
        "\"/api\"",
        "\"livepeer.com\"",
        "\"[]\"",
        "\"[]\"",
        "\"[]\"",
        "\"[]\"",
        "Sending emails requires supportAddr, sendgridTemplateId, and sendgridApiKey",
        "\"body-parser\"",
        "\"beforeExit\"",
        "\"Warning: Missing Stripe API key. In development, make sure to configure one in .env.local file.\"",
        "\"2020-08-27\"",
        "\"/api/stripe/webhook\"",
        "\"*/*\"",
        "\"production\"",
        "\"tried to set insecureTestToken in production!\"",
        "/${insecureTestToken}",
        "\"/stream/:streamId/broadcaster\"",
        "/${name}",
        "/${name}",
        "\"/stream\"",
        "\"/verify\"",
        "${req.protocol}://${req.frontendDomain}${req.url}"
    ],
    "variables": [
        "GEOLOCATION_ENDPOINTS",
        "bodyParser",
        "db",
        "store",
        "queue",
        "webhookCannon",
        "stripe",
        "app",
        "prefixRouter",
        "name",
        "controller"
    ],
    "comments": [
        "import 'express-async-errors' // it monkeypatches, i guess",
        "Routes that should be whitelisted even when `apiRegion` is set",
        "Storage init",
        "RabbitMQ",
        "Webhooks Cannon",
        "Logging, JSON parsing, store injection",
        "stripe webhook requires raw body",
        "https://github.com/stripe/stripe-node/issues/331",
        "defaults to livepeer.com",
        "Populate Kubernetes getOrchestrators and getBroadcasters is provided",
        "Add a controller for each route at the /${httpPrefix} route",
        "amalgamates our endpoints together and serves them out",
        "hack because I forgot this one needs to get geolocated too :(",
        "if we're operating in api-region mode, only handle geolocation traffic, forward the rest on",
        "Special case: handle /stream proxies off that endpoint",
        "fix for bad links",
        "This far down, this would otherwise be a 404... hit up the fallback proxy if we have it.",
        "Mostly this is used for proxying to the Next.js server in development."
    ],
    "docstrings": [],
    "functions": [
        "makeApp"
    ],
    "classes": []
}