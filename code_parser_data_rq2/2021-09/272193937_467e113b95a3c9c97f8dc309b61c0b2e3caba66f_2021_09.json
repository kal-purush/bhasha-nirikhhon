{
    "identifiers": [
        "BindingTypes",
        "SFCScriptCompileOptions",
        "compileSFCScript",
        "assertCode",
        "describe",
        "src",
        "options",
        "compileSFCScript",
        "src",
        "options",
        "test",
        "compile",
        "expect",
        "content",
        "expect",
        "content",
        "expect",
        "content",
        "assertCode",
        "content",
        "expect",
        "bindings",
        "BindingTypes",
        "test",
        "compile",
        "expect",
        "content",
        "expect",
        "content",
        "expect",
        "content",
        "assertCode",
        "content",
        "expect",
        "bindings",
        "BindingTypes",
        "BindingTypes",
        "BindingTypes",
        "test",
        "compile",
        "expect",
        "content",
        "assertCode",
        "content",
        "test",
        "compile",
        "expect",
        "content",
        "assertCode",
        "content",
        "test",
        "compile",
        "expect",
        "content",
        "assertCode",
        "content",
        "test",
        "compile",
        "expect",
        "content",
        "expect",
        "content",
        "expect",
        "content",
        "expect",
        "content",
        "assertCode",
        "content",
        "expect",
        "bindings",
        "BindingTypes",
        "BindingTypes",
        "BindingTypes",
        "BindingTypes",
        "test",
        "compile",
        "expect",
        "content",
        "assertCode",
        "content",
        "expect",
        "bindings",
        "BindingTypes",
        "BindingTypes",
        "BindingTypes",
        "BindingTypes",
        "describe",
        "test",
        "expect",
        "compile",
        "expect",
        "compile",
        "test",
        "expect",
        "compile",
        "test",
        "expect",
        "compile",
        "test",
        "expect",
        "compile"
    ],
    "literals": [
        "'@vue/compiler-core'",
        "'../src'",
        "'./utils'",
        "'sfc props transform'",
        "string",
        "'basic usage'",
        "<script setup>\n      const { foo } = defineProps(['foo'])\n      console.log(foo)\n      </script>\n      <template>{{ foo }}</template>",
        "const { foo } =",
        "console.log(__props.foo)",
        "_toDisplayString(__props.foo)",
        "'nested scope'",
        "<script setup>\n      const { foo, bar } = defineProps(['foo', 'bar'])\n      function test(foo) {\n        console.log(foo)\n        console.log(bar)\n      }\n      </script>",
        "const { foo, bar } =",
        "console.log(foo)",
        "console.log(__props.bar)",
        "'default values w/ runtime declaration'",
        "<script setup>\n      const { foo = 1, bar = {} } = defineProps(['foo', 'bar'])\n      </script>",
        "props: _mergeDefaults(['foo', 'bar'], {\n  foo: 1,\n  bar: () => {}\n})",
        "'default values w/ type declaration'",
        "<script setup lang=\"ts\">\n      const { foo = 1, bar = {} } = defineProps<{ foo?: number, bar?: object }>()\n      </script>",
        "props: {\n    foo: { type: Number, required: false, default: 1 },\n    bar: { type: Object, required: false, default: () => {} }\n  }",
        "'default values w/ type declaration, prod mode'",
        "<script setup lang=\"ts\">\n      const { foo = 1, bar = {} } = defineProps<{ foo?: number, bar?: object, baz?: any }>()\n      </script>",
        "props: {\n    foo: { default: 1 },\n    bar: { default: () => {} },\n    baz: null\n  }",
        "'aliasing'",
        "<script setup>\n      const { foo: bar } = defineProps(['foo'])\n      let x = foo\n      let y = bar\n      </script>\n      <template>{{ foo + bar }}</template>",
        "const { foo: bar } =",
        "let x = foo",
        "let y = __props.foo",
        "_toDisplayString(__props.foo + __props.foo)",
        "'foo'",
        "'rest spread'",
        "<script setup>\n      const { foo, bar, ...rest } = defineProps(['foo', 'bar', 'baz'])\n      </script>",
        "const rest = _createPropsRestProxy(__props, [\"foo\",\"bar\"])",
        "'errors'",
        "'should error on deep destructure'",
        "<script setup>const { foo: [bar] } = defineProps(['foo'])</script>",
        "destructure does not support nested patterns",
        "<script setup>const { foo: { bar } } = defineProps(['foo'])</script>",
        "destructure does not support nested patterns",
        "'should error on computed key'",
        "<script setup>const { [foo]: bar } = defineProps(['foo'])</script>",
        "destructure cannot use computed key",
        "'should error when used with withDefaults'",
        "<script setup lang=\"ts\">\n          const { foo } = withDefaults(defineProps<{ foo: string }>(), { foo: 'foo' })\n          </script>",
        "withDefaults() is unnecessary when using destructure",
        "'should error if destructure reference local vars'",
        "<script setup>\n          const x = 1\n          const {\n            foo = () => x\n          } = defineProps(['foo'])\n          </script>",
        "cannot reference locally declared variables"
    ],
    "variables": [],
    "comments": [
        "literals can be used as-is, non-literals are always returned from a",
        "function",
        "literals can be used as-is, non-literals are always returned from a",
        "function",
        "literals can be used as-is, non-literals are always returned from a",
        "function",
        "should not process",
        "should convert bar to __props.foo in template expressions"
    ],
    "docstrings": [],
    "functions": [
        "compile"
    ],
    "classes": []
}