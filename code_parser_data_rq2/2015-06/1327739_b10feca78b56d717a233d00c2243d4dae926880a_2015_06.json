{
    "identifiers": [
        "Collections",
        "Generic",
        "Diagnostics",
        "Linq",
        "ICSharpCode",
        "Decompiler",
        "IL",
        "Transforms",
        "IILTransform",
        "ILFunction",
        "ILTransformContext",
        "context",
        "StLoc",
        "StLoc",
        "StLoc",
        "StLoc",
        "g",
        "Descendants",
        "OfType",
        "StLoc",
        "GroupBy",
        "inst",
        "Variable",
        "storesToInline",
        "Clear",
        "deadStores",
        "Clear",
        "CanInlineVariable",
        "g",
        "Key",
        "g",
        "storesToInline",
        "deadStores",
        "stloc",
        "storesToInline",
        "ILInlining",
        "InlineOne",
        "stloc",
        "aggressive",
        "stloc",
        "deadStores",
        "SemanticHelper",
        "IsPure",
        "stloc",
        "Flags",
        "Block",
        "stloc",
        "Parent",
        "Instructions",
        "RemoveAt",
        "stloc",
        "ChildIndex",
        "ILVariable",
        "v",
        "StLoc",
        "stores",
        "StLoc",
        "storesToInline",
        "StLoc",
        "deadStores",
        "v",
        "Kind",
        "VariableKind",
        "Local",
        "Debug",
        "Assert",
        "v",
        "StoreCount",
        "stores",
        "Count",
        "v",
        "StoreCount",
        "v",
        "LoadCount",
        "v",
        "AddressCount",
        "stloc",
        "stores",
        "stloc",
        "Parent",
        "Block",
        "block",
        "block",
        "Instructions",
        "ElementAtOrDefault",
        "stloc",
        "ChildIndex",
        "next",
        "ILInlining",
        "CanInlineInto",
        "next",
        "v",
        "stloc",
        "Value",
        "loadsAccountedFor",
        "storesToInline",
        "Add",
        "stloc",
        "deadStores",
        "Add",
        "stloc",
        "v",
        "LoadCount",
        "loadsAccountedFor"
    ],
    "literals": [],
    "variables": [
        "storesToInline",
        "deadStores",
        "loadsAccountedFor",
        "Block",
        "block",
        "ILInstruction",
        "next"
    ],
    "comments": [
        "Copyright (c) 2014 Daniel Grunwald",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a copy of this",
        "software and associated documentation files (the \"Software\"), to deal in the Software",
        "without restriction, including without limitation the rights to use, copy, modify, merge,",
        "publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons",
        "to whom the Software is furnished to do so, subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included in all copies or",
        "substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,",
        "INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR",
        "PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE",
        "FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER",
        "DEALINGS IN THE SOFTWARE.",
        "Inline compiler-generated variables.",
        "Unlike normal inlining that acts on stack variables which have only one use,",
        "this transform will also perform inlining if the variables are re-used.",
        "</summary>",
        "<remarks>",
        "Should run after ControlFlowSimplification duplicates the return blocks.",
        "Should run after a regular round of inlining, so that stack variables",
        "don't prevent us from determining whether a variable is likely to be compiler-generated.",
        "</remarks>",
        "out",
        "out",
        "We expect there to be one store for every load,",
        "and potentially also some dead stores.",
        "store at end of block might still be a dead store",
        "a dead store (but only if this method returns true)"
    ],
    "docstrings": [
        "<summary>"
    ],
    "functions": [
        "Run",
        "CanInlineVariable"
    ],
    "classes": [
        "InlineCompilerGeneratedVariables"
    ]
}