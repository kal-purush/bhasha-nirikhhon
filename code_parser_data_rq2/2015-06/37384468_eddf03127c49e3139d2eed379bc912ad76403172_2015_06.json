{
    "identifiers": [
        "ctypes",
        "os",
        "pystormlib",
        "structure",
        "pystormlib",
        "winerror",
        "pystormlib",
        "utils",
        "raise_for_error",
        "os",
        "path",
        "join",
        "os",
        "path",
        "dirname",
        "ctypes",
        "WinDLL",
        "dllpath",
        "RuntimeError",
        "filepath",
        "ctypes",
        "c_int",
        "filepath",
        "filepath",
        "open_mpq_archive",
        "filepath",
        "filepath",
        "filepath",
        "isinstance",
        "filepath",
        "filepath",
        "encode",
        "os",
        "path",
        "exists",
        "filepath",
        "IOError",
        "format",
        "filepath",
        "raise_for_error",
        "_stormlib",
        "SFileOpenArchive",
        "filepath",
        "ctypes",
        "byref",
        "handle",
        "pattern",
        "pattern",
        "pattern",
        "encode",
        "pystormlib",
        "structure",
        "MPQFileData",
        "raise_for_error",
        "_stormlib",
        "SFileFindFirstFile",
        "handle",
        "pattern",
        "ctypes",
        "byref",
        "file",
        "file",
        "pystormlib",
        "structure",
        "MPQFileData",
        "raise_for_error",
        "_stormlib",
        "SFileFindNextFile",
        "result",
        "ctypes",
        "byref",
        "file",
        "file",
        "pystormlib",
        "winerror",
        "ErrorNoMoreFiles",
        "filepath",
        "destination",
        "isinstance",
        "filepath",
        "filepath",
        "encode",
        "isinstance",
        "destination",
        "destination",
        "encode",
        "destination",
        "replace",
        "os",
        "makedirs",
        "os",
        "path",
        "dirname",
        "destination",
        "OSError",
        "raise_for_error",
        "_stormlib",
        "SFileExtractFile",
        "handle",
        "filepath",
        "destination",
        "pystormlib",
        "winerror",
        "ErrorHandleEOF",
        "filepath",
        "isinstance",
        "filepath",
        "filepath",
        "encode",
        "raise_for_error",
        "_stormlib",
        "SFileHasFile",
        "handle",
        "filepath",
        "pystormlib",
        "winerror",
        "PyStormException",
        "filepath",
        "ctypes",
        "c_int",
        "raise_for_error",
        "_stormlib",
        "SFileOpenFileEx",
        "handle",
        "filepath",
        "ctypes",
        "byref",
        "file",
        "ctypes",
        "c_int",
        "raise_for_error",
        "_stormlib",
        "SFileGetFileSize",
        "file",
        "ctypes",
        "byref",
        "high",
        "high",
        "value",
        "pow",
        "low",
        "ctypes",
        "c_buffer",
        "size",
        "ctypes",
        "c_int",
        "raise_for_error",
        "_stormlib",
        "SFileReadFile",
        "file",
        "data",
        "size",
        "ctypes",
        "byref",
        "read",
        "raise_for_error",
        "_stormlib",
        "SFileCloseFile",
        "file",
        "data",
        "raw",
        "content"
    ],
    "literals": [
        "'ressources\\\\stormlib_x86.dll'",
        "\"PyStormLib: can't locate stormlib_x86.dll\"",
        "'ascii'",
        "'{} not found'",
        "'*'",
        "'ascii'",
        "'ascii'",
        "'ascii'",
        "b'\\\\'",
        "b'/'",
        "'ascii'"
    ],
    "variables": [
        "dllpath",
        "_stormlib",
        "handle",
        "filepath",
        "filepath",
        "filepath",
        "pattern",
        "pattern",
        "file",
        "result",
        "file",
        "filepath",
        "destination",
        "destination",
        "filepath",
        "file",
        "high",
        "low",
        "size",
        "data",
        "read",
        "content"
    ],
    "comments": [
        "-*- coding: UTF-8 -*-",
        "Open the file",
        "Get the Size",
        "Read the File",
        "Close and Return"
    ],
    "docstrings": [
        "\"\"\"Python wrapper for stormlib\nCredits goes to Christopher Chedeau for the initial python code version (linux)\nhttps://github.com/vjeux/pyStormLib\n\"\"\"",
        "\"\"\"PyStormLib wrapper for stormlib.\n\n        :param filepath: A filepath to an MPQ file.\n        :type filepath: str\n        :raise: IOError if filename does not exists\n        :raise: PyStormException in case something when wrong with stormlib\n        \"\"\"",
        "\"\"\"Opens a MPQ archive.\n\n        :param filepath: A filepath to an MPQ file.\n        :type filepath: str\n        :raise: IOError if filename does not exists\n        :raise: PyStormException in case something when wrong with stormlib\n        \"\"\"",
        "\"\"\"Search for a glob expression within an open MPQ Archive.\n\n        ..code-block:: python\n\n            adt_files = pystorm.search('*.adt')\n            dbc_files = pystorm.search('*.dbc')\n\n        :param pattern: a string representing a filename to search\n        :type pattern: str\n        :return: yields MPQFileData\n        :rtype: generator\n        :raise: PyStormException in case something when wrong with stormlib\n        \"\"\"",
        "\"\"\"Extract a file from an MPQ archive.\n        If the destination directory doest not exists, the function will handle its creation by itself.\n\n        ..code-block:: python\n\n            pystorm.extract('World\\\\Maps\\\\Shadowfang\\\\Shadowfang_25_33.adt', \"C:\\\\test\\\\\")\n\n        :param filepath: a string representing a filepath within an MPQ File\n        :type filepath: str\n        :param destination: a string representing a local directory to extract file.\n        :type destination: str\n        :return: yields MPQFileData\n        :rtype: generator\n        :raise: PyStormException in case something when wrong with stormlib\n        \"\"\"",
        "\"\"\"Search for a MPQ archive filename within the current opened MQP archive\n\n        ..code-block:: python\n\n            pystorm.contains('World\\\\Maps\\\\Shadowfang\\\\Shadowfang_25_33.adt')\n\n        :param filepath: a string representing a filepath within an MPQ File\n        :type filepath: str\n        :return: True if filepath exsits\n        :rtype: boolean\n        :raise: PyStormException in case something when wrong with stormlib\n        \"\"\"",
        "\"\"\"Reads and return the content of a file from an MPQ archive.\n\n        ..code-block:: python\n\n            Shadowfang_25_33 = pystorm.read('World\\\\Maps\\\\Shadowfang\\\\Shadowfang_25_33.adt')\n\n        :param filepath: a string representing a filepath within an MPQ File\n        :type filepath: str\n        :return: True if filepath exsits\n        :rtype: boolean\n        :raise: PyStormException in case something when wrong with stormlib\n        \"\"\""
    ],
    "functions": [
        "open_mpq_archive",
        "search",
        "extract",
        "contains",
        "read"
    ],
    "classes": [
        "PyStormLib"
    ]
}