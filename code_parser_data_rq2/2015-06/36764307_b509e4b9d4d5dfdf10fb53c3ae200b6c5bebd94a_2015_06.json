{
    "identifiers": [
        "Observable",
        "Idb",
        "serializeValue",
        "_key",
        "serializeValue",
        "_version",
        "_key",
        "_idbRef",
        "store",
        "key",
        "version",
        "ChainKey",
        "key",
        "Observable",
        "observer",
        "Rx",
        "version",
        "recordKey",
        "RecordKey",
        "version",
        "chainKey",
        "TacticalStore",
        "recordKey",
        "value",
        "value",
        "observer",
        "version",
        "value",
        "observer",
        "err",
        "observer",
        "err",
        "TacticalStore",
        "chainKey",
        "ver",
        "ver",
        "ver",
        "recordKey",
        "RecordKey",
        "ver",
        "chainKey",
        "TacticalStore",
        "recordKey",
        "value",
        "value",
        "observer",
        "ver",
        "value",
        "observer",
        "err",
        "observer",
        "err",
        "observer",
        "err",
        "observer",
        "err",
        "key",
        "value",
        "version",
        "Observable",
        "observer",
        "Rx",
        "RecordKey",
        "version",
        "ChainKey",
        "key",
        "TacticalStore",
        "recordKey",
        "value",
        "ok",
        "ok",
        "version",
        "TacticalStore",
        "recordKey",
        "ver",
        "ok",
        "observer",
        "ok",
        "err",
        "observer",
        "err",
        "observer",
        "err",
        "observer",
        "err"
    ],
    "literals": [
        "'rx'",
        "'./idb'",
        "'./json'",
        "'./record'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"_versions_tactical_\"",
        "string",
        "\"_records_tactical_\"",
        "''",
        "string",
        "string"
    ],
    "variables": [
        "recordKey",
        "chainKey",
        "recordKey",
        "ver"
    ],
    "comments": [
        "<reference path=\"../../../typings/rx/rx.d.ts\" />",
        "<reference path=\"../../../typings/rx/rx-lite.d.ts\" />",
        "fetch the most recent Record in the Chain",
        "update the most recent version in the Chain"
    ],
    "docstrings": [
        "* Tactical Store is used to manage Tactical's working knowledge of the data model.\n * It provides a number of methods to read objects from and store objects to a persistent local\n * cache in order supply a workable offline data model for the application to use.\n *\n * Tactical expects objects to change over a lifecycle of the application. Due to this expectation,\n * the Tactical Store is prepared to store multiple distinct versions of the same object. A single\n * version of an object is referred to as a Record. Multiple Records of an object combine to form a\n * Chain.\n *\n * Chains are identified by key. Each Chain should be identifiable by a single key and each\n * key should only identify a single Chain. Records are identified by key and version. The key\n * identifies the Chain to which the Record belongs and the version identifies the Record in that\n * Chain. Each Record should be identifiable by a single combination of a key and a version and\n * each combination should identify a single Record.",
        "* A wrapper class to handle serializing keys to identify a Chain.",
        "* ChainKeys are serialized only at instantiation.",
        "* Returns the provided key object.",
        "* Returns the serialization of the ChainKey.",
        "* An explicit Version type to store in Tactical's version store.",
        "* A wrapper class to handle serializing keys to identify a Record.",
        "* RecordKeys are serialized only at instantiation. Does not reserialize the ChainKey.",
        "* Returns the provided version.",
        "* Returns the provided ChainKey instance.",
        "* Returns the serialization of the RecordKey.",
        "* An instantiable class of the Tactical Store. Requires an abstraction API over a persistent local\n * cache, and also accepts a store extension to modify the storage location, in that cache, for the\n * instance of the Tactical Store to use.",
        "* Reads a Record from persistent local cache. Emits the Record that\n   * matches the provided key and version. If no version is supplied, then this will emit the\n   * most recent Record that matches the provided key. If either the key or version are\n   * non-matching, this will emit null.",
        "* Stores a Record into persistent local cache. This will set the most recent version\n   * to be the version provided and overwrite the most recent Record, if it is currently unanchored.\n   * TODO(ttowncompiled): overwrite unanchored Records."
    ],
    "functions": [
        "key",
        "serial",
        "version",
        "chain",
        "serial",
        "fetch",
        "commit"
    ],
    "classes": [
        "ChainKey",
        "RecordKey",
        "TacticalStore"
    ]
}