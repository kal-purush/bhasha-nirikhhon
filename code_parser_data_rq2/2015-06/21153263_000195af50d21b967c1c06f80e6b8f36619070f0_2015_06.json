{
    "identifiers": [
        "logging",
        "openravepy",
        "prpy",
        "prpy",
        "action",
        "ActionMethod",
        "prpy",
        "planning",
        "PlanningError",
        "contextlib",
        "contextmanager",
        "prpy",
        "util",
        "FindCatkinResource",
        "offscreen_render",
        "numpy",
        "json",
        "time",
        "os",
        "path",
        "logging",
        "getLogger",
        "ActionMethod",
        "robot",
        "focus",
        "manip",
        "focus",
        "openravepy",
        "Kinbody",
        "focus",
        "GetTransform",
        "focus",
        "GetName",
        "focus",
        "numpy",
        "ndarray",
        "focus",
        "ndim",
        "len",
        "focus",
        "prpy",
        "exceptions",
        "PrPyExceptions",
        "numpy",
        "eye",
        "focus",
        "prpy",
        "exceptions",
        "PrPyException",
        "manip",
        "robot",
        "right_arm",
        "manip",
        "GetName",
        "prpy",
        "exceptions",
        "PrPyException",
        "robot",
        "tsrlibrary",
        "focus_trans",
        "manip",
        "robot",
        "PlanToTSR",
        "point_tsr",
        "execute",
        "ranker",
        "Naturalness",
        "focus_trans",
        "goal_name",
        "robot",
        "right_hand",
        "MoveHand",
        "f1",
        "f2",
        "f3",
        "spread",
        "ActionMethod",
        "robot",
        "focus",
        "manip",
        "focus",
        "openravepy",
        "Kinbody",
        "focus",
        "GetTransform",
        "focus",
        "numpy",
        "ndarray",
        "focus",
        "ndim",
        "len",
        "focus",
        "prpy",
        "exceptions",
        "PrPyExceptions",
        "numpy",
        "eye",
        "focus",
        "prpy",
        "exceptions",
        "PrPyException",
        "manip",
        "robot",
        "right_arm",
        "manip",
        "GetName",
        "prpy",
        "exceptions",
        "PrPyException",
        "robot",
        "tsrlibrary",
        "focus_trans",
        "manip",
        "robot",
        "PlanToTSR",
        "present_tsr",
        "execute",
        "robot",
        "right_hand",
        "MoveHand",
        "f1",
        "f2",
        "f3",
        "spread",
        "ActionMethod",
        "robot",
        "focus_list",
        "manip",
        "NotImplementedError",
        "ActionMethod",
        "robot",
        "obj",
        "manip",
        "distance",
        "wait",
        "robot",
        "Grasp",
        "obj",
        "robot",
        "tsrlibrary",
        "obj",
        "manip",
        "distance",
        "distance",
        "robot",
        "PlanToTSR",
        "lift_tsr",
        "execute",
        "time",
        "sleep",
        "wait",
        "robot",
        "tsrlibrary",
        "obj",
        "manip",
        "distance",
        "distance",
        "robot",
        "PlanToTSR",
        "unlift_tsr",
        "execte",
        "ActionMethod",
        "robot",
        "focus_list",
        "manip",
        "NotImplementedError",
        "ActionMethod",
        "robot",
        "word",
        "robot",
        "head",
        "GetDOFValues",
        "word",
        "numpy",
        "array",
        "numpy",
        "array",
        "word",
        "numpy",
        "array",
        "numpy",
        "array",
        "prpy",
        "exceptions",
        "PrPyException",
        "robot",
        "head",
        "MoveTo",
        "first",
        "robot",
        "head",
        "MoveTo",
        "second",
        "robot",
        "head",
        "MoveTo",
        "before",
        "ActionMethod",
        "robot",
        "manip",
        "manip",
        "robot",
        "GetActiveManipulator",
        "manip",
        "GetName",
        "numpy",
        "array",
        "manip",
        "PlanToConfiguration",
        "pose",
        "robot",
        "right_hand",
        "MoveHand",
        "f1",
        "f2",
        "f3",
        "spread",
        "manip",
        "GetName",
        "numpy",
        "array",
        "manip",
        "PlanToConfiguration",
        "pose",
        "robot",
        "left_hand",
        "MoveHand",
        "f1",
        "f2",
        "f3",
        "spread",
        "prpy",
        "exceptions",
        "PrPyException",
        "ActionMethod",
        "robot",
        "manip",
        "wait",
        "manip",
        "robot",
        "GetActiveManipulator",
        "manip",
        "GetName",
        "robot",
        "left_hand",
        "manip",
        "GetName",
        "robot",
        "right_hand",
        "prpy",
        "exceptions",
        "PrPyException",
        "manip",
        "GetDOFValues",
        "hand",
        "TareForceTorqueSensor",
        "Stop",
        "robot",
        "manip",
        "time",
        "sleep",
        "wait",
        "manip",
        "PlanToConfiguration",
        "before",
        "ActionMethod",
        "robot",
        "manip",
        "manip",
        "robot",
        "GetActiveManipulator",
        "manip",
        "GetName",
        "numpy",
        "array",
        "manip",
        "PlanToConfiguration",
        "right_dof",
        "execute",
        "robot",
        "right_hand",
        "MoveHand",
        "f1",
        "f2",
        "f3",
        "spread",
        "manip",
        "GetName",
        "numpy",
        "array",
        "manip",
        "PlanToConfiguration",
        "left_dof",
        "execute",
        "robot",
        "left_hand",
        "MoveHand",
        "f1",
        "f2",
        "f3",
        "spread",
        "prpy",
        "exceptions",
        "PrPyException",
        "focus_trans",
        "goal_name",
        "focus_trans",
        "goal_name",
        "weightedScoreArray",
        "FindCatkinResource",
        "json",
        "load",
        "open",
        "feature_path",
        "IOError",
        "e",
        "ValueError",
        "format",
        "feature_path",
        "robot",
        "ik_solutions",
        "robot",
        "robot",
        "GetEnv",
        "robot",
        "GetActiveManipulator",
        "ik_solutions",
        "shape",
        "numpy",
        "zeros",
        "num_sols",
        "openravepy",
        "RaveCreateSensor",
        "env",
        "sensor",
        "SendCommand",
        "sensor",
        "SendCommand",
        "sensor_length",
        "sensor_width",
        "sensor",
        "Configure",
        "openravepy",
        "Sensor",
        "ConfigureCommand",
        "PowerOn",
        "i",
        "xrange",
        "num_sols",
        "score_pose",
        "ik_solutions",
        "i",
        "results",
        "ik_sol",
        "manip",
        "SetDOFValues",
        "ik_sol",
        "manip",
        "GetEndEffectorTransform",
        "total",
        "compute_score",
        "total",
        "compute_score",
        "total",
        "compute_score",
        "total",
        "compute_score",
        "total",
        "wristOffset",
        "total",
        "objectDistance",
        "goal_name",
        "total",
        "score_occulsion",
        "total",
        "joint",
        "dict_name",
        "optimal",
        "full_range",
        "offset",
        "robot",
        "GetJoint",
        "joint",
        "GetValue",
        "offset",
        "numpy",
        "pi",
        "optimal",
        "offset",
        "numpy",
        "pi",
        "full_range",
        "numpy",
        "pi",
        "featureWeights",
        "dict_name",
        "abs",
        "optimal_val",
        "actual",
        "full_range_val",
        "weight",
        "dict_name",
        "pose",
        "numpy",
        "sqrt",
        "z",
        "z",
        "z",
        "numpy",
        "arccos",
        "z",
        "z_length",
        "numpy",
        "pi",
        "abs",
        "optimal",
        "angle",
        "full_range",
        "featureWeights",
        "dict_name",
        "offset",
        "dict_name",
        "pose",
        "focus_trans",
        "numpy",
        "sqrt",
        "px",
        "gx",
        "py",
        "gy",
        "pz",
        "gz",
        "featureWeights",
        "dict_name",
        "dist",
        "sensor_length",
        "sensor_width",
        "numpy",
        "fromfunction",
        "i",
        "j",
        "numpy",
        "sqrt",
        "l",
        "i",
        "w",
        "j",
        "sensor_length",
        "sensor_width",
        "dtype",
        "numpy",
        "ravel",
        "w",
        "img",
        "img",
        "imagedata",
        "numpy",
        "apply_over_axes",
        "numpy",
        "sum",
        "data",
        "numpy",
        "ravel",
        "compact_array",
        "reshape_array",
        "sensor_weight",
        "numpy",
        "dot",
        "scoreMask",
        "divide_out",
        "goal",
        "manip",
        "GetEndEffectorTransform",
        "sensor",
        "SetTransform",
        "pose",
        "sensor",
        "SendCommand",
        "goal_name",
        "sensor_weight",
        "sensor",
        "SimulationStep",
        "sensor",
        "GetSensorData",
        "valFromPhoto",
        "data_solo",
        "env",
        "GetBodies",
        "j",
        "allObjs",
        "j",
        "GetName",
        "name",
        "goal_name",
        "name",
        "robot",
        "GetName",
        "sensor",
        "SendCommand",
        "name",
        "sensor",
        "SimulationStep",
        "sensor",
        "GetSensorData",
        "valFromPhoto",
        "data_all",
        "solo_goal",
        "solo_goal",
        "all_goal",
        "solo_goal",
        "sensor",
        "SendCommand",
        "score",
        "featureWeights"
    ],
    "literals": [
        "'herbpy'",
        "'A point in space must \\\n                    contain exactly three coordinates'",
        "'Focus of the point is an \\\n                unknown object'",
        "'right'",
        "'Pointing is only defined \\\n                on the right arm.'",
        "'point'",
        "'A presentation in space \\\n                    must contain exactly three coordinates'",
        "'Focus of the presentation is an \\\n                unknown object'",
        "'right'",
        "'Presenting is only defined \\\n                on the right arm.'",
        "'present'",
        "'lift'",
        "'lift'",
        "'yes'",
        "'yes'",
        "'no'",
        "'Word Not Recognized'",
        "'right'",
        "'left'",
        "'Stop is only defined \\\n                                                for the left and right arm.'",
        "'left'",
        "'right'",
        "'High Fiving is only defined \\\n                for the left and right arm'",
        "'right'",
        "'left'",
        "'The middle finger is only defined \\\n                                for the left and right arm.'",
        "'herbpy'",
        "'config/natural_feature_weights.txt'",
        "'rb'",
        "'Failed loading pointing weights \\\n                    from \"{:s}\".'",
        "'offscreen_render_camera'",
        "'setintrinsic 529 525 328 267 0.01 10'",
        "'setdims '",
        "' '",
        "'/right/j1'",
        "'ShoulderRotation'",
        "'/right/j5'",
        "'ElbowRotation'",
        "'/right/j6'",
        "'WristAngle'",
        "'/right/j7'",
        "'WristRotation'",
        "'WristRelative'",
        "'Distance'",
        "'addbody '",
        "' '",
        "' 0 0'",
        "'addbody '",
        "' 0 0 0 0'",
        "'clearbodies'",
        "'ShoulderRotation'"
    ],
    "variables": [
        "logger",
        "focus_trans",
        "goal_name",
        "focus_trans",
        "focus_trans",
        "goal_name",
        "manip",
        "point_tsr",
        "focus_trans",
        "focus_trans",
        "focus_trans",
        "manip",
        "present_tsr",
        "lift_tsr",
        "unlift_tsr",
        "before",
        "first",
        "second",
        "first",
        "second",
        "manip",
        "pose",
        "pose",
        "manip",
        "hand",
        "hand",
        "before",
        "manip",
        "right_dof",
        "left_dof",
        "focus_trans",
        "goal_name",
        "sensor_length",
        "sensor_width",
        "sensor_weight",
        "scoreMask",
        "feature_path",
        "featureWeights",
        "robot",
        "env",
        "manip",
        "num_sols",
        "results",
        "sensor",
        "results",
        "i",
        "pose",
        "total",
        "actual",
        "optimal_val",
        "full_range_val",
        "weight",
        "z",
        "z_length",
        "angle",
        "optimal",
        "full_range",
        "offset",
        "px",
        "py",
        "pz",
        "gx",
        "gy",
        "gz",
        "dist",
        "l",
        "w",
        "w",
        "data",
        "compact_array",
        "reshape_array",
        "divide_out",
        "goal",
        "pose",
        "data_solo",
        "solo_goal",
        "allObjs",
        "name",
        "data_all",
        "all_goal",
        "score",
        "score"
    ],
    "comments": [
        "pylint: disable-msg=C0103",
        "pylint: disable-msg=E1101",
        "Pointing at an object",
        "Pointing at a point in space",
        "Possible feature: if many objects then pass to multipoint",
        "TODO Remove this functionality from tsr lib?",
        "Won't work in till add dummy flag capability",
        "Presenting an object",
        "Presenting a point in space",
        "TODO Remove this functionality from tsr lib?",
        "Won't work in till add dummy flag capability",
        "Lift the object - write more tsrs",
        "Wait for 'time'",
        "'Unlift' the object, so place it back down",
        "create tsr list for each object.",
        "put all together and select plan based on ranking from",
        "nominal configuration",
        "remove that object from the list and repeat",
        "Down",
        "Up",
        "Left",
        "Right",
        "Move into canonical high fiving position",
        "TODO wait in till robot.right_hand.GetForceTorque() reads something",
        "Ask jen about testing this and reading from this",
        "After having felt force, wait a few seconds",
        "Retract the arm to where it was before the interaction",
        "Set up sensor parameters",
        "test the new method",
        "feature_path = '../../../config/natural_feature_weights.txt'",
        "self.featureWeights = json.load(open(feature_path, 'rb'))",
        "Create sensor",
        "Score each configuration",
        "If the focus is a point in space, not an object, there",
        "is no concept of occulsion",
        "Get all other objects in the scene and add them to the image"
    ],
    "docstrings": [
        "\"\"\"\n    @param robot The robot performing the point\n    @param focus The 3-D coordinate in space or object that is being pointed at\n    @param manip The manipulator to perform the point with. This mst be the right arm\n    \"\"\"",
        "\"\"\"\n    @param robot The robot performing the presentation\n    @param focus The 3-D coordinate in space or object that \n                 is being presented\n    @param manip The manipulator to perform the presentation with. \n                 This must be the right arm.\n    \"\"\"",
        "\"\"\"\n    @param robot The robot performing the sweep\n    @param focus_list The list 3-D coordinates in space or objects \n                      that are being sweeped at\n    @param manip The manipulator to perform the sweep. \n                 This must be the right arm\n    \"\"\"",
        "\"\"\"\n    @param robot The robot performing the exhibit\n    @param obj The object being exhibited\n    @param manip The maniplator to perform the exhibit\n    @param distance The distance the object will be lifted up\n    @param wait The amount of time the object will be held up in seconds\n    \"\"\"",
        "\"\"\"\n    @param robot The robot performing the various points\n    @param focus_list The unordered list of 3-D coordinates in space \n                      or objects to be pointed to \n    @param manip The manipulator being used to point\n    \"\"\"",
        "\"\"\"\n    @param robot The robot being used to nod\n    @param word Shakes up and down for 'yes' and left and right for 'no'\n    \"\"\"",
        "\"\"\"\n    @param robot The robot being used for the stopping gesture\n    @param manip The manipulator being used for the stopping gesture\n    \"\"\"",
        "\"\"\"\n    @param robot The robot being used to high five\n    @param manip The manipulator being used to high five\n    @param wait The time to hold the hand up after feeling the \n                force before the hand retracts\n    \"\"\"",
        "\"\"\"\n    @param robot The robot being used to give the middle finger\n    @param manip The manipulator being used to give the middle finger.\n                 Must be either the right or left arm.\n    \"\"\"",
        "\"\"\"Set the robot in the configuration and then total up, \n        for each scoring parameter, the weight of that parameter\n        times its score\"\"\"",
        "\"\"\"For the generic joint based parameter, score based on \n        who far the configuration differs from the 'optimal' \"\"\"",
        "\"\"\"For finding how far the rotation of the wrist is offset\n        from being horizontal, find the angle between z value of the\n        wrist pose and the j unit vector. Then score by how much it\n        differs from the optimal, being horizontal.\"\"\"",
        "\"\"\"Compute the distance between the end effector and the object.\"\"\"",
        "\"\"\"The occulsion value is scored against a weighted array that\n        weights items closer to the center, i.e near the point's focus\n        higher then the periphery.\"\"\"",
        "\"\"\"Takes the image generated by sensor and computes\n        the weighted score.\"\"\"",
        "\"\"\"Sensor captures base photo with just the goal object\n        and scores it against a photo with all objects in the scene\n        overlaid on the base photo.\"\"\""
    ],
    "functions": [
        "Point",
        "Present",
        "Sweep",
        "Exhibit",
        "Multipoint",
        "Nod",
        "Stop",
        "HighFive",
        "MiddleFinger",
        "__call__",
        "score_pose",
        "compute_score",
        "wristOffset",
        "objectDistance",
        "weightedScoreArray",
        "valFromPhoto",
        "score_occulsion"
    ],
    "classes": [
        "Naturalness"
    ]
}