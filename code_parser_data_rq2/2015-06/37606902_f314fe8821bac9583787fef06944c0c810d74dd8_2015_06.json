{
    "identifiers": [
        "_",
        "_",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "items",
        "seperator",
        "items",
        "start",
        "end",
        "compareFn",
        "a",
        "b",
        "start",
        "start",
        "deleteCount",
        "items",
        "items",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "interceptor",
        "value",
        "interceptor",
        "value",
        "array",
        "size",
        "array",
        "size",
        "size",
        "array",
        "array",
        "array",
        "others",
        "array",
        "others",
        "others",
        "others",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "whereDictionary",
        "array",
        "whereDictionary",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "whereDictionary",
        "array",
        "whereDictionary",
        "array",
        "array",
        "array",
        "n",
        "array",
        "n",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "whereValue",
        "array",
        "whereValue",
        "array",
        "array",
        "array",
        "n",
        "array",
        "n",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "whereValue",
        "array",
        "whereValue",
        "array",
        "array",
        "array",
        "n",
        "array",
        "n",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "whereValue",
        "array",
        "whereValue",
        "n",
        "callback",
        "thisArg",
        "pluckValue",
        "whereValue",
        "n",
        "callback",
        "thisArg",
        "pluckValue",
        "whereValue",
        "n",
        "callback",
        "thisArg",
        "pluckValue",
        "whereValue",
        "array",
        "isShallow",
        "array",
        "isShallow",
        "array",
        "isShallow",
        "callback",
        "thisArg",
        "array",
        "isShallow",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "isShallow",
        "whereValue",
        "array",
        "isShallow",
        "whereValue",
        "array",
        "whereValue",
        "array",
        "whereValue",
        "array",
        "isShallow",
        "pluckValue",
        "array",
        "isShallow",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "isShallow",
        "isShallow",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "isShallow",
        "pluckValue",
        "pluckValue",
        "isShallow",
        "whereValue",
        "whereValue",
        "array",
        "value",
        "array",
        "value",
        "array",
        "value",
        "fromIndex",
        "array",
        "value",
        "fromIndex",
        "array",
        "value",
        "isSorted",
        "array",
        "value",
        "isSorted",
        "array",
        "array",
        "array",
        "n",
        "array",
        "n",
        "array",
        "callback",
        "array",
        "callback",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "whereValue",
        "array",
        "whereValue",
        "arrays",
        "arrays",
        "array",
        "array",
        "array",
        "n",
        "array",
        "n",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "whereValue",
        "array",
        "whereValue",
        "array",
        "value",
        "fromIndex",
        "array",
        "value",
        "fromIndex",
        "array",
        "values",
        "array",
        "values",
        "start",
        "stop",
        "step",
        "stop",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "wherealue",
        "array",
        "wherealue",
        "array",
        "item",
        "array",
        "array",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "n",
        "array",
        "n",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "whereValue",
        "array",
        "whereValue",
        "array",
        "array",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "n",
        "array",
        "n",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "whereValue",
        "array",
        "whereValue",
        "array",
        "array",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "n",
        "array",
        "n",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "whereValue",
        "array",
        "whereValue",
        "array",
        "value",
        "callback",
        "x",
        "thisArg",
        "array",
        "value",
        "callback",
        "x",
        "thisArg",
        "array",
        "value",
        "pluckValue",
        "array",
        "value",
        "pluckValue",
        "array",
        "value",
        "whereValue",
        "array",
        "value",
        "whereValue",
        "arrays",
        "arrays",
        "array",
        "isSorted",
        "array",
        "isSorted",
        "array",
        "isSorted",
        "callback",
        "thisArg",
        "array",
        "isSorted",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "isSorted",
        "pluckValue",
        "array",
        "isSorted",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "isSorted",
        "whereValue",
        "array",
        "isSorted",
        "whereValue",
        "array",
        "whereValue",
        "array",
        "whereValue",
        "array",
        "isSorted",
        "array",
        "isSorted",
        "array",
        "callback",
        "thisArg",
        "array",
        "callback",
        "thisArg",
        "array",
        "isSorted",
        "callback",
        "thisArg",
        "array",
        "isSorted",
        "callback",
        "thisArg",
        "array",
        "isSorted",
        "pluckValue",
        "array",
        "isSorted",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "pluckValue",
        "array",
        "whereValue",
        "array",
        "whereValue",
        "array",
        "isSorted",
        "whereValue",
        "array",
        "isSorted",
        "whereValue",
        "isSorted",
        "isSorted",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "isSorted",
        "pluckValue",
        "pluckValue",
        "isSorted",
        "whereValue",
        "whereValue",
        "isSorted",
        "isSorted",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "isSorted",
        "pluckValue",
        "pluckValue",
        "isSorted",
        "whereValue",
        "whereValue",
        "array",
        "values",
        "array",
        "values",
        "array",
        "others",
        "array",
        "others",
        "others",
        "others",
        "arrays",
        "arrays",
        "arrays",
        "arrays",
        "arrays",
        "_",
        "arrays",
        "_",
        "props",
        "values",
        "props",
        "props",
        "values",
        "props",
        "values",
        "_",
        "values",
        "_",
        "collection",
        "indexes",
        "collection",
        "indexes",
        "collection",
        "indexes",
        "collection",
        "indexes",
        "collection",
        "indexes",
        "collection",
        "indexes",
        "collection",
        "target",
        "fromIndex",
        "collection",
        "target",
        "fromIndex",
        "dictionary",
        "key",
        "fromIndex",
        "searchString",
        "targetString",
        "fromIndex",
        "collection",
        "target",
        "fromIndex",
        "collection",
        "target",
        "fromIndex",
        "dictionary",
        "key",
        "fromIndex",
        "searchString",
        "targetString",
        "fromIndex",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "callback",
        "thisArg",
        "pluckValue",
        "whereValue",
        "callback",
        "thisArg",
        "pluckValue",
        "whereValue",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "callback",
        "thisArg",
        "whereValue",
        "pluckValue",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "callback",
        "thisArg",
        "whereValue",
        "pluckValue",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "callback",
        "thisArg",
        "_",
        "_",
        "pluckValue",
        "_",
        "_",
        "whereValue",
        "_",
        "_",
        "callback",
        "thisArg",
        "_",
        "_",
        "pluckValue",
        "_",
        "_",
        "whereValue",
        "_",
        "_",
        "iterator",
        "context",
        "iterator",
        "context",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "methodName",
        "args",
        "collection",
        "methodName",
        "args",
        "collection",
        "methodName",
        "args",
        "collection",
        "method",
        "args",
        "collection",
        "method",
        "args",
        "collection",
        "method",
        "args",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "callback",
        "thisArg",
        "pluckValue",
        "callback",
        "thisArg",
        "pluckValue",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "callback",
        "thisArg",
        "pluckValue",
        "whereValue",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "callback",
        "thisArg",
        "pluckValue",
        "whereValue",
        "collection",
        "collection",
        "collection",
        "collection",
        "iteratee",
        "thisArg",
        "collection",
        "iteratee",
        "thisArg",
        "collection",
        "iteratee",
        "thisArg",
        "collection",
        "property",
        "collection",
        "property",
        "collection",
        "property",
        "iteratee",
        "thisArg",
        "iteratee",
        "thisArg",
        "property",
        "iteratee",
        "thisArg",
        "property",
        "collection",
        "property",
        "collection",
        "property",
        "collection",
        "property",
        "property",
        "property",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "callback",
        "accumulator",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "accumulator",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "accumulator",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "accumulator",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "accumulator",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "accumulator",
        "thisArg",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "callback",
        "thisArg",
        "pluckValue",
        "whereValue",
        "collection",
        "collection",
        "collection",
        "collection",
        "n",
        "collection",
        "n",
        "collection",
        "n",
        "collection",
        "collection",
        "collection",
        "collection",
        "collection",
        "aString",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "pluckValue",
        "collection",
        "pluckValue",
        "collection",
        "whereValue",
        "collection",
        "whereValue",
        "callback",
        "thisArg",
        "pluckValue",
        "whereValue",
        "collection",
        "collection",
        "collection",
        "properties",
        "properties",
        "properties",
        "properties",
        "n",
        "func",
        "func",
        "func",
        "thisArg",
        "args",
        "args",
        "thisArg",
        "args",
        "args",
        "methodNames",
        "methodNames",
        "key",
        "args",
        "key",
        "args",
        "funcs",
        "funcs",
        "func",
        "thisArg",
        "argCount",
        "func",
        "thisArg",
        "argCount",
        "thisArg",
        "argCount",
        "thisArg",
        "argCount",
        "func",
        "arity",
        "arity",
        "func",
        "wait",
        "options",
        "wait",
        "options",
        "func",
        "args",
        "args",
        "func",
        "wait",
        "args",
        "wait",
        "args",
        "func",
        "resolver",
        "func",
        "func",
        "args",
        "func",
        "args",
        "func",
        "wait",
        "options",
        "value",
        "wrapper",
        "func",
        "args",
        "s1",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "s3",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "s3",
        "s4",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "s3",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "s3",
        "s4",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "s3",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "s3",
        "s4",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "s3",
        "s4",
        "s5",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "s3",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "s3",
        "s4",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "s3",
        "s4",
        "s5",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "value",
        "deep",
        "callback",
        "value",
        "thisArg",
        "value",
        "callback",
        "value",
        "thisArg",
        "sources",
        "sources",
        "callback",
        "value",
        "thisArg",
        "pluckValue",
        "whereValue",
        "callback",
        "value",
        "thisArg",
        "pluckValue",
        "whereValue",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "_",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "_",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "_",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "_",
        "_",
        "_",
        "path",
        "defaultValue",
        "property",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "a",
        "b",
        "callback",
        "a",
        "b",
        "thisArg",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "obj",
        "callback",
        "thisArg",
        "obj",
        "where",
        "obj",
        "pluck",
        "obj",
        "callback",
        "thisArg",
        "callback",
        "thisArg",
        "pluck",
        "pluck",
        "where",
        "where",
        "s1",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "s3",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "s1",
        "s2",
        "s3",
        "s4",
        "callback",
        "objectValue",
        "sourceValue",
        "thisArg",
        "keys",
        "keys",
        "callback",
        "thisArg",
        "keys",
        "keys",
        "callback",
        "thisArg",
        "keys",
        "keys",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "accumulator",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "collection",
        "callback",
        "thisArg",
        "target",
        "position",
        "length",
        "chars",
        "length",
        "chars",
        "length",
        "chars",
        "n",
        "target",
        "position",
        "chars",
        "chars",
        "chars",
        "len",
        "options",
        "pattern",
        "value",
        "radix",
        "value",
        "value",
        "_",
        "key",
        "obj",
        "max",
        "floating",
        "min",
        "max",
        "floating",
        "property",
        "context",
        "_",
        "text",
        "text",
        "data",
        "options",
        "sourceURL",
        "variable",
        "data",
        "n",
        "callback",
        "num",
        "context",
        "prefix",
        "value",
        "prototype",
        "properties",
        "value",
        "index",
        "collection",
        "value",
        "key",
        "collection",
        "element",
        "key",
        "collection",
        "prev",
        "curr",
        "indexOrKey",
        "prev",
        "curr",
        "indexOrKey",
        "index",
        "index",
        "_"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"lodash\""
    ],
    "variables": [
        "_"
    ],
    "comments": [
        "Type definitions for Lo-Dash",
        "Project: http://lodash.com/",
        "Definitions by: Brian Zengel <https://github.com/bczengel>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "_.chain",
        "_.tap",
        "_.chunk",
        "_.compact",
        "_.difference",
        "_.findIndex",
        "_.findLastIndex",
        "_.first",
        "_.flatten",
        "_.indexOf",
        "_.initial",
        "_.intersection",
        "_.last",
        "_.lastIndexOf",
        "_.pull",
        "_.range",
        "_.remove",
        "_.rest",
        "_.sortedIndex",
        "_.union",
        "_.uniq",
        "_.without",
        "_.xor",
        "_.zip",
        "_.zipObject",
        "_.at",
        "_.contains",
        "_.countBy",
        "_.every",
        "_.filter",
        "_.find",
        "_.findLast",
        "_.forEach",
        "_.forEachRight",
        "_.groupBy",
        "_.indexBy",
        "_.invoke",
        "_.map",
        "_.max",
        "_.min",
        "_.sum",
        "_.pluck",
        "_.reduce",
        "_.reduceRight",
        "_.reject",
        "_.sample",
        "_.shuffle",
        "_.size",
        "_.some",
        "_.sortBy",
        "_.toArray",
        "_.where",
        "_.now",
        "_.after",
        "_.bind",
        "_.bindAll",
        "_.bindKey",
        "_.compose",
        "_.createCallback",
        "_.curry",
        "_.debounce",
        "_.defer",
        "_.delay",
        "_.memoize",
        "_.once",
        "_.partial",
        "_.partialRight",
        "_.throttle",
        "_.wrap",
        "_.assign",
        "_.clone",
        "_.cloneDeep",
        "_.defaults",
        "_.findKey",
        "_.findLastKey",
        "_.forIn",
        "_.forInRight",
        "_.forOwn",
        "_.forOwnRight",
        "_.functions",
        "_.get",
        "_.has",
        "_.invert",
        "_.isArguments",
        "_.isArray",
        "_.isBoolean",
        "_.isDate",
        "_.isElement",
        "_.isEmpty",
        "_.isError",
        "_.isEqual",
        "_.isFinite",
        "_.isFunction",
        "_.isNaN",
        "_.isNull",
        "_.isNumber",
        "_.isObject",
        "_.isPlainObject",
        "_.isRegExp",
        "_.isString",
        "_.isUndefined",
        "_.keys",
        "_.mapValues",
        "_.merge",
        "_.omit",
        "_.pairs",
        "_.picks",
        "_.transform",
        "_.values",
        "_.parseInt",
        "_.escape",
        "_.identity",
        "_.mixin",
        "_.noConflict",
        "_.property",
        "_.random",
        "_.result",
        "_.runInContext",
        "_.template",
        "string or TemplateExecutor",
        "_.times",
        "_.unescape",
        "_.uniqueId",
        "_.noop",
        "_.constant",
        "_.create",
        "interface MemoListIterator<T, TResult> {\n        (prev: TResult, curr: T, index: number, list?: T[]): TResult;\n    }\n    interface MemoObjectIterator<T, TResult> {\n        (prev: TResult, curr: T, index: string, object?: Dictionary<T>): TResult;\n    }",
        "interface Collection<T> {}",
        "Common interface between Arrays and jQuery objects"
    ],
    "docstrings": [
        "* Creates a lodash object which wraps the given value to enable intuitive method chaining.\n        *\n        * In addition to Lo-Dash methods, wrappers also have the following Array methods:\n        * concat, join, pop, push, reverse, shift, slice, sort, splice, and unshift\n        *\n        * Chaining is supported in custom builds as long as the value method is implicitly or\n        * explicitly included in the build.\n        *\n        * The chainable wrapper functions are:\n        * after, assign, bind, bindAll, bindKey, chain, chunk, compact, compose, concat, countBy,\n        * createCallback, curry, debounce, defaults, defer, delay, difference, filter, flatten,\n        * forEach, forEachRight, forIn, forInRight, forOwn, forOwnRight, functions, groupBy,\n        * indexBy, initial, intersection, invert, invoke, keys, map, max, memoize, merge, min,\n        * object, omit, once, pairs, partial, partialRight, pick, pluck, pull, push, range, reject,\n        * remove, rest, reverse, shuffle, slice, sort, sortBy, splice, tap, throttle, times,\n        * toArray, transform, union, uniq, unshift, unzip, values, where, without, wrap, and zip\n        *\n        * The non-chainable wrapper functions are:\n        * clone, cloneDeep, contains, escape, every, find, findIndex, findKey, findLast,\n        * findLastIndex, findLastKey, has, identity, indexOf, isArguments, isArray, isBoolean,\n        * isDate, isElement, isEmpty, isEqual, isFinite, isFunction, isNaN, isNull, isNumber,\n        * isObject, isPlainObject, isRegExp, isString, isUndefined, join, lastIndexOf, mixin,\n        * noConflict, parseInt, pop, random, reduce, reduceRight, result, shift, size, some,\n        * sortedIndex, runInContext, template, unescape, uniqueId, and value\n        *\n        * The wrapper functions first and last return wrapped values when n is provided, otherwise\n        * they return unwrapped values.\n        *\n        * Explicit chaining can be enabled by using the _.chain method.\n        *",
        "* The semantic version number.\n        *",
        "* An object used to flag environments features.\n        *",
        "* By default, the template delimiters used by Lo-Dash are similar to those in embedded Ruby\n        * (ERB). Change the following template settings to use alternative delimiters.\n        *",
        "* By default, the template delimiters used by Lo-Dash are similar to those in embedded Ruby\n    * (ERB). Change the following template settings to use alternative delimiters.\n    *",
        "* The \"escape\" delimiter.\n        *",
        "* The \"evaluate\" delimiter.\n        *",
        "* An object to import into the template as local variables.\n        *",
        "* The \"interpolate\" delimiter.\n        *",
        "* Used to reference the data object in the template text.\n        *",
        "* An object used to flag environments features.\n    *",
        "* Detect if an arguments object's [[Class]] is resolvable (all but Firefox < 4, IE < 9).\n        *",
        "* Detect if arguments objects are Object objects (all but Narwhal and Opera < 10.5).\n        *",
        "* Detect if name or message properties of Error.prototype are enumerable by default.\n        * (IE < 9, Safari < 5.1)\n        *",
        "* Detect if Function#bind exists and is inferred to be fast (all but V8).\n        *",
        "* Detect if functions can be decompiled by Function#toString (all but PS3 and older Opera\n        * mobile browsers & avoided in Windows 8 apps).\n        *",
        "* Detect if Function#name is supported (all but IE).\n        *",
        "* Detect if arguments object indexes are non-enumerable (Firefox < 4, IE < 9, PhantomJS,\n        * Safari < 5.1).\n        *",
        "* Detect if properties shadowing those on Object.prototype are non-enumerable.\n        *\n        * In IE < 9 an objects own properties, shadowing non-enumerable ones, are made\n        * non-enumerable as well (a.k.a the JScript [[DontEnum]] bug).\n        *",
        "* Detect if own properties are iterated after inherited properties (all but IE < 9).\n        *",
        "* Detect if Array#shift and Array#splice augment array-like objects correctly.\n        *\n        * Firefox < 10, IE compatibility mode, and IE < 9 have buggy Array shift() and splice()\n        * functions that fail to remove the last element, value[0], of array-like objects even\n        * though the length property is set to 0. The shift() method is buggy in IE 8 compatibility\n        * mode, while splice() is buggy regardless of mode in IE < 9 and buggy in compatibility mode\n        * in IE 9.\n        *",
        "* Detect lack of support for accessing string characters by index.\n        *\n        * IE < 8 can't access characters by index and IE 8 can only access characters by index on\n        * string literals.\n        *",
        "* Produces the toString result of the wrapped value.\n        * @return Returns the string result.\n        *",
        "* Extracts the wrapped value.\n        * @return The wrapped value.\n        *",
        "* @see valueOf\n        *",
        "* Creates a lodash object that wraps the given value with explicit method chaining enabled.\n        * @param value The value to wrap.\n        * @return The wrapper object.\n        *",
        "* Enables explicit method chaining on the wrapper object.\n        * @see _.chain\n        * @return The wrapper object.\n        *",
        "* Invokes interceptor with the value as the first argument and then returns value. The\n        * purpose of this method is to \"tap into\" a method chain in order to perform operations on\n        * intermediate results within the chain.\n        * @param value The value to provide to interceptor\n        * @param interceptor The function to invoke.\n        * @return value\n        *",
        "* @see _.tap\n        *",
        "*******\n    * Arrays *\n    *********",
        "* Creates an array of elements split into groups the length of size. If collection can't be\n        * split evenly, the final chunk will be the remaining elements.\n        * @param array The array to process.\n        * @param size The length of each chunk.\n        * @return Returns the new array containing chunks.\n        *",
        "* @see _.chunk\n        *",
        "* @see _.chunk\n        *",
        "* Returns a copy of the array with all falsy values removed. In JavaScript, false, null, 0, \"\",\n        * undefined and NaN are all falsy.\n        * @param array Array to compact.\n        * @return (Array) Returns a new array of filtered values.\n        *",
        "* @see _.compact\n        *",
        "* @see _.compact\n        *",
        "* Creates an array excluding all values of the provided arrays using strict equality for comparisons\n        * , i.e. ===.\n        * @param array The array to process\n        * @param others The arrays of values to exclude.\n        * @return Returns a new array of filtered values.\n        *",
        "* @see _.difference\n        *",
        "* @see _.difference\n        *",
        "* @see _.difference\n        *",
        "* This method is like _.find except that it returns the index of the first element that passes\n        * the callback check, instead of the element itself.\n        * @param array The array to search.\n        * @param {(Function|Object|string)} callback The function called per iteration. If a property name or object is provided it will be\n        * used to create a \".pluck\" or \".where\" style callback, respectively.\n        * @param thisArg The this binding of callback.\n        * @return Returns the index of the found element, else -1.\n        *",
        "* @see _.findIndex\n        *",
        "* @see _.findIndex\n        *",
        "* @see _.findIndex\n        *",
        "* @see _.findIndex\n        *",
        "* @see _.findIndex\n        *",
        "* This method is like _.findIndex except that it iterates over elements of a collection from right to left.\n        * @param array The array to search.\n        * @param {(Function|Object|string)} callback The function called per iteration. If a property name or object is provided it will be\n        * used to create a \".pluck\" or \".where\" style callback, respectively.\n        * @param thisArg The this binding of callback.\n        * @return Returns the index of the found element, else -1.\n        *",
        "* @see _.findLastIndex\n        *",
        "* @see _.findLastIndex\n        *",
        "* @see _.findLastIndex\n        *",
        "* @see _.findLastIndex\n        *",
        "* @see _.findLastIndex\n        *",
        "* Gets the first element or first n elements of an array. If a callback is provided\n        * elements at the beginning of the array are returned as long as the callback returns\n        * truey. The callback is bound to thisArg and invoked with three arguments; (value,\n        * index, array).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback\n        * will return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return ]\n        * true for elements that have the properties of the given object, else false.\n        * @param array Retrieves the first element of this array.\n        * @return Returns the first element of `array`.\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        * @param n The number of elements to return.\n        *",
        "* @see _.first\n        * @param n The number of elements to return.\n        *",
        "* @see _.first\n        * @param callback The function called per element.\n        * @param [thisArg] The this binding of callback.\n        *",
        "* @see _.first\n        * @param callback The function called per element.\n        * @param [thisArg] The this binding of callback.\n        *",
        "* @see _.first\n        * @param pluckValue \"_.pluck\" style callback value\n        *",
        "* @see _.first\n        * @param pluckValue \"_.pluck\" style callback value\n        *",
        "* @see _.first\n        * @param whereValue \"_.where\" style callback value\n        *",
        "* @see _.first\n        * @param whereValue \"_.where\" style callback value\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        * @param n The number of elements to return.\n        *",
        "* @see _.first\n        * @param callback The function called per element.\n        * @param [thisArg] The this binding of callback.\n        *",
        "* @see _.first\n        * @param pluckValue \"_.pluck\" style callback value\n        *",
        "* @see _.first\n        * @param whereValue \"_.where\" style callback value\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        * @param n The number of elements to return.\n        *",
        "* @see _.first\n        * @param callback The function called per element.\n        * @param [thisArg] The this binding of callback.\n        *",
        "* @see _.first\n        * @param pluckValue \"_.pluck\" style callback value\n        *",
        "* @see _.first\n        * @param whereValue \"_.where\" style callback value\n        *",
        "* @see _.first\n        *",
        "* @see _.first\n        * @param n The number of elements to return.\n        *",
        "* @see _.first\n        * @param callback The function called per element.\n        * @param [thisArg] The this binding of callback.\n        *",
        "* @see _.first\n        * @param pluckValue \"_.pluck\" style callback value\n        *",
        "* @see _.first\n        * @param whereValue \"_.where\" style callback value\n        *",
        "* Flattens a nested array (the nesting can be to any depth). If isShallow is truey, the\n        * array will only be flattened a single level. If a callback is provided each element of\n        * the array is passed through the callback before flattening. The callback is bound to\n        * thisArg and invoked with three arguments; (value, index, array).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false.\n        * @param array The array to flatten.\n        * @param shallow If true then only flatten one level, optional, default = false.\n        * @return `array` flattened.\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* @see _.flatten\n        *",
        "* Gets the index at which the first occurrence of value is found using strict equality\n        * for comparisons, i.e. ===. If the array is already sorted providing true for fromIndex\n        * will run a faster binary search.\n        * @param array The array to search.\n        * @param value The value to search for.\n        * @param fromIndex The index to search from.\n        * @return The index of `value` within `array`.\n        *",
        "* @see _.indexOf\n        *",
        "* @see _.indexOf\n        * @param fromIndex The index to search from\n        *",
        "* @see _.indexOf\n        * @param fromIndex The index to search from\n        *",
        "* @see _.indexOf\n        * @param isSorted True to perform a binary search on a sorted array.\n        *",
        "* @see _.indexOf\n        * @param isSorted True to perform a binary search on a sorted array.\n        *",
        "* Gets all but the last element or last n elements of an array. If a callback is provided\n        * elements at the end of the array are excluded from the result as long as the callback\n        * returns truey. The callback is bound to thisArg and invoked with three arguments;\n        * (value, index, array).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false.\n        * @param array The array to query.\n        * @param n Leaves this many elements behind, optional.\n        * @return Returns everything but the last `n` elements of `array`.\n        *",
        "* @see _.initial\n        *",
        "* @see _.initial\n        * @param n The number of elements to exclude.\n        *",
        "* @see _.initial\n        * @param n The number of elements to exclude.\n        *",
        "* @see _.initial\n        * @param callback The function called per element\n        *",
        "* @see _.initial\n        * @param callback The function called per element\n        *",
        "* @see _.initial\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.initial\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.initial\n        * @param whereValue _.where style callback\n        *",
        "* @see _.initial\n        * @param whereValue _.where style callback\n        *",
        "* Creates an array of unique values present in all provided arrays using strict\n        * equality for comparisons, i.e. ===.\n        * @param arrays The arrays to inspect.\n        * @return Returns an array of composite values.\n        *",
        "* @see _.intersection\n        *",
        "* Gets the last element or last n elements of an array. If a callback is provided\n        * elements at the end of the array are returned as long as the callback returns truey.\n        * The callback is bound to thisArg and invoked with three arguments; (value, index, array).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false.\n        * @param array The array to query.\n        * @return Returns the last element(s) of array.\n        *",
        "* @see _.last\n        *",
        "* @see _.last\n        * @param n The number of elements to return\n        *",
        "* @see _.last\n        * @param n The number of elements to return\n        *",
        "* @see _.last\n        * @param callback The function called per element\n        *",
        "* @see _.last\n        * @param callback The function called per element\n        *",
        "* @see _.last\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.last\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.last\n        * @param whereValue _.where style callback\n        *",
        "* @see _.last\n        * @param whereValue _.where style callback\n        *",
        "* Gets the index at which the last occurrence of value is found using strict equality\n        * for comparisons, i.e. ===. If fromIndex is negative, it is used as the offset from the\n        * end of the collection.\n        * @param array The array to search.\n        * @param value The value to search for.\n        * @param fromIndex The index to search from.\n        * @return The index of the matched value or -1.\n        *",
        "* @see _.lastIndexOf\n        *",
        "* Removes all provided values from the given array using strict equality for comparisons,\n        * i.e. ===.\n        * @param array The array to modify.\n        * @param values The values to remove.\n        * @return array.\n        *",
        "* @see _.pull\n        *",
        "* Creates an array of numbers (positive and/or negative) progressing from start up\n        * to but not including end. If start is less than stop a zero-length range is created\n        * unless a negative step is specified.\n        * @param start The start of the range.\n        * @param end The end of the range.\n        * @param step The value to increment or decrement by.\n        * @return Returns a new range array.\n        *",
        "* @see _.range\n        * @param end The end of the range.\n        * @return Returns a new range array.\n        * @note If start is not specified the implementation will never pull the step (step = arguments[2] || 0)\n        *",
        "* Removes all elements from an array that the callback returns truey for and returns\n        * an array of removed elements. The callback is bound to thisArg and invoked with three\n        * arguments; (value, index, array).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false.\n        * @param array The array to modify.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return A new array of removed elements.\n        *",
        "* @see _.remove\n        *",
        "* @see _.remove\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.remove\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.remove\n        * @param whereValue _.where style callback\n        *",
        "* @see _.remove\n        * @param whereValue _.where style callback\n        *",
        "* @see _.remove\n         * @param item The item to remove\n         *",
        "* The opposite of _.initial this method gets all but the first element or first n elements of\n        * an array. If a callback function is provided elements at the beginning of the array are excluded\n        * from the result as long as the callback returns truey. The callback is bound to thisArg and\n        * invoked with three arguments; (value, index, array).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will return\n        * the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return true\n        * for elements that have the properties of the given object, else false.\n        * @param array The array to query.\n        * @param {(Function|Object|number|string)} [callback=1] The function called per element or the number\n        * of elements to exclude. If a property name or object is provided it will be used to create a\n        * \".pluck\" or \".where\" style callback, respectively.\n        * @param {*} [thisArg] The this binding of callback.\n        * @return Returns a slice of array.\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* @see _.rest\n        *",
        "* Uses a binary search to determine the smallest index at which a value should be inserted\n        * into a given sorted array in order to maintain the sort order of the array. If a callback\n        * is provided it will be executed for value and each element of array to compute their sort\n        * ranking. The callback is bound to thisArg and invoked with one argument; (value).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false.\n        * @param array The sorted list.\n        * @param value The value to determine its index within `list`.\n        * @param callback Iterator to compute the sort ranking of each value, optional.\n        * @return The index at which value should be inserted into array.\n        *",
        "* @see _.sortedIndex\n        *",
        "* @see _.sortedIndex\n        * @param pluckValue the _.pluck style callback\n        *",
        "* @see _.sortedIndex\n        * @param pluckValue the _.pluck style callback\n        *",
        "* @see _.sortedIndex\n        * @param pluckValue the _.where style callback\n        *",
        "* @see _.sortedIndex\n        * @param pluckValue the _.where style callback\n        *",
        "* Creates an array of unique values, in order, of the provided arrays using strict\n        * equality for comparisons, i.e. ===.\n        * @param arrays The arrays to inspect.\n        * @return Returns an array of composite values.\n        *",
        "* @see _.union\n        *",
        "* Creates a duplicate-value-free version of an array using strict equality for comparisons,\n        * i.e. ===. If the array is sorted, providing true for isSorted will use a faster algorithm.\n        * If a callback is provided each element of array is passed through the callback before\n        * uniqueness is computed. The callback is bound to thisArg and invoked with three arguments;\n        * (value, index, array).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false.\n        * @param array Array to remove duplicates from.\n        * @param isSorted True if `array` is already sorted, optiona, default = false.\n        * @param iterator Transform the elements of `array` before comparisons for uniqueness.\n        * @param context 'this' object in `iterator`, optional.\n        * @return Copy of `array` where all elements are unique.\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.uniq\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.uniq\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.uniq\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.uniq\n        * @param whereValue _.where style callback\n        *",
        "* @see _.uniq\n        * @param whereValue _.where style callback\n        *",
        "* @see _.uniq\n        * @param whereValue _.where style callback\n        *",
        "* @see _.uniq\n        * @param whereValue _.where style callback\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.uniq\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.uniq\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.uniq\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.uniq\n        * @param whereValue _.where style callback\n        *",
        "* @see _.uniq\n        * @param whereValue _.where style callback\n        *",
        "* @see _.uniq\n        * @param whereValue _.where style callback\n        *",
        "* @see _.uniq\n        * @param whereValue _.where style callback\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.uniq\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.uniq\n        * @param whereValue _.where style callback\n        *",
        "* @see _.uniq\n        * @param whereValue _.where style callback\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        *",
        "* @see _.uniq\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.uniq\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.uniq\n        * @param whereValue _.where style callback\n        *",
        "* @see _.uniq\n        * @param whereValue _.where style callback\n        *",
        "* Creates an array excluding all provided values using strict equality for comparisons, i.e. ===.\n        * @param array The array to filter.\n        * @param values The value(s) to exclude.\n        * @return A new array of filtered values.\n        *",
        "* @see _.without\n        *",
        "* Creates an array that is the symmetric difference of the provided arrays.\n        * @param array The array to process\n        * @param others The arrays of values to calculate the symmetric difference.\n        * @return Returns a new array of filtered values.\n        *",
        "* @see _.xor\n        *",
        "* @see _.xor\n        *",
        "* @see _.xor\n        *",
        "* Creates an array of grouped elements, the first of which contains the first\n        * elements of the given arrays, the second of which contains the second elements\n        * of the given arrays, and so on.\n        * @param arrays Arrays to process.\n        * @return A new array of grouped elements.\n        *",
        "* @see _.zip\n        *",
        "* @see _.zip\n        *",
        "* @see _.zip\n        *",
        "* @see _.zip\n        *",
        "* @see _.zip\n        *",
        "* The inverse of _.pairs; this method returns an object composed from arrays of property\n        * names and values. Provide either a single two dimensional array, e.g. [[key1, value1],\n        * [key2, value2]] or two arrays, one of property names and one of corresponding values.\n        * @param props The property names.\n        * @param values The property values.\n        * @return Returns the new object.\n        *",
        "* @see _.zipObject\n        *",
        "* @see _.zipObject\n        *",
        "* @see _.zipObject\n        *",
        "* @see _.zipObject\n        *",
        "* @see _.zipObject\n        *",
        "*************\n     * Collections *\n     *************",
        "* Creates an array of elements from the specified indexes, or keys, of the collection.\n        * Indexes may be specified as individual arguments or as arrays of indexes.\n        * @param collection The collection to iterate over.\n        * @param indexes The indexes of collection to retrieve, specified as individual indexes or\n        * arrays of indexes.\n        * @return A new array of elements corresponding to the provided indexes.\n        *",
        "* @see _.at\n        *",
        "* @see _.at\n        *",
        "* @see _.at\n        *",
        "* @see _.at\n        *",
        "* @see _.at\n        *",
        "* Checks if a given value is present in a collection using strict equality for comparisons,\n        * i.e. ===. If fromIndex is negative, it is used as the offset from the end of the collection.\n        * @param collection The collection to iterate over.\n        * @param target The value to check for.\n        * @param fromIndex The index to search from.\n        * @return True if the target element is found, else false.\n        *",
        "* @see _.contains\n        *",
        "* @see _.contains\n        * @param dictionary The dictionary to iterate over.\n        * @param key The key in the dictionary to search for.\n        *",
        "* @see _.contains\n        * @param searchString the string to search\n        * @param targetString the string to search for\n        *",
        "* @see _.contains\n        *",
        "* @see _.contains\n        *",
        "* @see _.contains\n        *",
        "* @see _.contains\n        *",
        "* Creates an object composed of keys generated from the results of running each element\n        * of collection through the callback. The corresponding value of each key is the number\n        * of times the key was returned by the callback. The callback is bound to thisArg and\n        * invoked with three arguments; (value, index|key, collection).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return Returns the composed aggregate object.\n        *",
        "* @see _.countBy\n        * @param callback Function name\n        *",
        "* @see _.countBy\n        * @param callback Function name\n        *",
        "* @see _.countBy\n        * @param callback Function name\n        *",
        "* @see _.countBy\n        * @param callback Function name\n        *",
        "* @see _.countBy\n        * @param callback Function name\n        *",
        "* @see _.countBy\n        *",
        "* @see _.countBy\n        * @param callback Function name\n        *",
        "* Checks if the given callback returns truey value for all elements of a collection.\n        * The callback is bound to thisArg and invoked with three arguments; (value, index|key,\n        * collection).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return True if all elements passed the callback check, else false.\n        *",
        "* @see _.every\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.every\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.every\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.every\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.every\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.every\n        * @param whereValue _.where style callback\n        *",
        "* @see _.every\n        * @param whereValue _.where style callback\n        *",
        "* @see _.every\n        * @param whereValue _.where style callback\n        *",
        "* @see _.every\n        *",
        "* @see _.every\n        *",
        "* @see _.every\n        *",
        "* @see _.every\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.every\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.every\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.every\n        * @param whereValue _.where style callback\n        *",
        "* @see _.every\n        * @param whereValue _.where style callback\n        *",
        "* @see _.every\n        * @param whereValue _.where style callback\n        *",
        "* Iterates over elements of a collection, returning an array of all elements the\n        * callback returns truey for. The callback is bound to thisArg and invoked with three\n        * arguments; (value, index|key, collection).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param context The this binding of callback.\n        * @return Returns a new array of elements that passed the callback check.\n        *",
        "* @see _.filter\n        *",
        "* @see _.filter\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        *",
        "* @see _.filter\n        *",
        "* @see _.filter\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.filter\n        *",
        "* Iterates over elements of a collection, returning the first element that the callback\n        * returns truey for. The callback is bound to thisArg and invoked with three arguments;\n        * (value, index|key, collection).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false.\n        * @param collection Searches for a value in this list.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return The found element, else undefined.\n        *",
        "* @see _.find\n        *",
        "* @see _.find\n        *",
        "* @see _.find\n        * @param _.pluck style callback\n        *",
        "* @see _.find\n        * @param _.pluck style callback\n        *",
        "* @see _.find\n        * @param _.pluck style callback\n        *",
        "* @see _.find\n        * @param _.where style callback\n        *",
        "* @see _.find\n        * @param _.where style callback\n        *",
        "* @see _.find\n        * @param _.where style callback\n        *",
        "* @see _.find\n        *",
        "* @see _.find\n        *",
        "* @see _.find\n        *",
        "* @see _.find\n        * @param _.pluck style callback\n        *",
        "* @see _.find\n        * @param _.pluck style callback\n        *",
        "* @see _.find\n        * @param _.pluck style callback\n        *",
        "* @see _.find\n        * @param _.where style callback\n        *",
        "* @see _.find\n        * @param _.where style callback\n        *",
        "* @see _.find\n        * @param _.where style callback\n        *",
        "* @see _.find\n        *",
        "* @see _.find\n        *",
        "* @see _.find\n        *",
        "* @see _.find\n        * @param _.pluck style callback\n        *",
        "* @see _.find\n        * @param _.pluck style callback\n        *",
        "* @see _.find\n        * @param _.pluck style callback\n        *",
        "* @see _.find\n        * @param _.where style callback\n        *",
        "* @see _.find\n        * @param _.where style callback\n        *",
        "* @see _.find\n        * @param _.where style callback\n        *",
        "* @see _.find",
        "* @see _.find\n        * @param _.where style callback",
        "* @see _.find\n        * @param _.where style callback",
        "* This method is like _.find except that it iterates over elements of a collection from\n        * right to left.\n        * @param collection Searches for a value in this list.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return The found element, else undefined.\n        *",
        "* @see _.find\n        *",
        "* @see _.find\n        *",
        "* @see _.find\n        * @param _.pluck style callback\n        *",
        "* @see _.find\n        * @param _.pluck style callback\n        *",
        "* @see _.find\n        * @param _.pluck style callback\n        *",
        "* @see _.find\n        * @param _.where style callback\n        *",
        "* @see _.find\n        * @param _.where style callback\n        *",
        "* @see _.find\n        * @param _.where style callback\n        *",
        "* @see _.findLast",
        "* @see _.findLast\n        * @param _.where style callback",
        "* @see _.findLast\n        * @param _.where style callback",
        "* Iterates over elements of a collection, executing the callback for each element.\n        * The callback is bound to thisArg and invoked with three arguments; (value, index|key,\n        * collection). Callbacks may exit iteration early by explicitly returning false.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        *",
        "* @see _.forEach\n        *",
        "* @see _.forEach\n        *",
        "* @see _.each\n        *",
        "* @see _.forEach\n        *",
        "* @see _.forEach\n        *",
        "* @see _.forEach\n        * @param object The object to iterate over\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        *",
        "* @see _.each\n        *",
        "* @see _.forEach\n        *",
        "* @see _.forEach\n        *",
        "* @see _.forEach\n        *",
        "* @see _.forEach\n        *",
        "* This method is like _.forEach except that it iterates over elements of a\n        * collection from right to left.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        *",
        "* @see _.forEachRight\n        *",
        "* @see _.forEachRight\n        *",
        "* @see _.forEachRight\n        *",
        "* @see _.forEachRight\n        *",
        "* @see _.forEachRight\n        * @param object The object to iterate over\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        *",
        "* @see _.forEachRight\n        *",
        "* @see _.forEachRight\n        *",
        "* @see _.forEachRight\n        *",
        "* @see _.forEachRight\n        * @param object The object to iterate over\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        *",
        "* Creates an object composed of keys generated from the results of running each element\n        * of a collection through the callback. The corresponding value of each key is an array\n        * of the elements responsible for generating the key. The callback is bound to thisArg\n        * and invoked with three arguments; (value, index|key, collection).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return Returns the composed aggregate object.\n        *",
        "* @see _.groupBy\n        *",
        "* @see _.groupBy\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.groupBy\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.groupBy\n        * @param whereValue _.where style callback\n        *",
        "* @see _.groupBy\n        * @param whereValue _.where style callback\n        *",
        "* @see _.groupBy\n        *",
        "* @see _.groupBy\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.groupBy\n        * @param whereValue _.where style callback\n        *",
        "* @see _.groupBy\n        *",
        "* @see _.groupBy\n        *",
        "* @see _.groupBy\n        *",
        "* @see _.groupBy\n        *",
        "* @see _.groupBy\n        *",
        "* @see _.groupBy\n        *",
        "* Creates an object composed of keys generated from the results of running each element\n        * of the collection through the given callback. The corresponding value of each key is\n        * the last element responsible for generating the key. The callback is bound to thisArg\n        * and invoked with three arguments; (value, index|key, collection).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return Returns the composed aggregate object.\n        *",
        "* @see _.indexBy\n        *",
        "* @see _.indexBy\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.indexBy\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.indexBy\n        * @param whereValue _.where style callback\n        *",
        "* @see _.indexBy\n        * @param whereValue _.where style callback\n        *",
        "* Invokes the method named by methodName on each element in the collection returning\n        * an array of the results of each invoked method. Additional arguments will be provided\n        * to each invoked method. If methodName is a function it will be invoked for, and this\n        * bound to, each element in the collection.\n        * @param collection The collection to iterate over.\n        * @param methodName The name of the method to invoke.\n        * @param args Arguments to invoke the method with.\n        *",
        "* @see _.invoke\n        *",
        "* @see _.invoke\n        *",
        "* @see _.invoke\n        *",
        "* @see _.invoke\n        *",
        "* @see _.invoke\n        *",
        "* Creates an array of values by running each element in the collection through the callback.\n        * The callback is bound to thisArg and invoked with three arguments; (value, index|key,\n        * collection).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will return\n        * the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return true\n        * for elements that have the properties of the given object, else false.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param theArg The this binding of callback.\n        * @return The mapped array result.\n        *",
        "* @see _.map\n        *",
        "* @see _.map\n        * @param object The object to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg `this` object in `iterator`, optional.\n        * @return The mapped object result.\n        *",
        "* @see _.map\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.map\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.map\n        *",
        "* @see _.map\n        *",
        "* @see _.map\n        *",
        "* @see _.map\n        *",
        "* @see _.map\n        *",
        "* @see _.map\n        *",
        "* @see _.map\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.map\n        *",
        "* @see _.map\n        *",
        "* @see _.map\n        *",
        "* @see _.map\n        *",
        "* Retrieves the maximum value of a collection. If the collection is empty or falsey -Infinity is\n        * returned. If a callback is provided it will be executed for each value in the collection to\n        * generate the criterion by which the value is ranked. The callback is bound to thisArg and invoked\n        * with three arguments; (value, index, collection).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will return the\n        * property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return true for\n        * elements that have the properties of the given object, else false.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return Returns the maximum value.\n        *",
        "* @see _.max\n        *",
        "* @see _.max\n        *",
        "* @see _.max\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.max\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.max\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.max\n        * @param whereValue _.where style callback\n        *",
        "* @see _.max\n        * @param whereValue _.where style callback\n        *",
        "* @see _.max\n        * @param whereValue _.where style callback\n        *",
        "* @see _.max\n        *",
        "* @see _.max\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.max\n        * @param whereValue _.where style callback\n        *",
        "* Retrieves the minimum value of a collection. If the collection is empty or falsey\n        * Infinity is returned. If a callback is provided it will be executed for each value\n        * in the collection to generate the criterion by which the value is ranked. The callback\n        * is bound to thisArg and invoked with three arguments; (value, index, collection).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback\n        * will return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will\n        * return true for elements that have the properties of the given object, else false.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return Returns the maximum value.\n        *",
        "* @see _.min\n        *",
        "* @see _.min\n        *",
        "* @see _.min\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.min\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.min\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.min\n        * @param whereValue _.where style callback\n        *",
        "* @see _.min\n        * @param whereValue _.where style callback\n        *",
        "* @see _.min\n        * @param whereValue _.where style callback\n        *",
        "* @see _.min\n        *",
        "* @see _.min\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.min\n        * @param whereValue _.where style callback\n        *",
        "* Gets the sum of the values in collection.\n        *\n        * @param collection The collection to iterate over.\n        * @param iteratee The function invoked per iteration.\n        * @param thisArg The this binding of iteratee.\n        * @return Returns the sum.\n        *",
        "* @see _.sum\n        *",
        "* @see _.sum\n        *",
        "* @see _.sum\n        *",
        "* @see _.sum\n        *",
        "* @see _.sum\n        *",
        "* @see _.sum\n        * @param property _.property callback shorthand.\n        *",
        "* @see _.sum\n        * @param property _.property callback shorthand.\n        *",
        "* @see _.sum\n        * @param property _.property callback shorthand.\n        *",
        "* @see _.sum\n        *",
        "* @see _.sum\n        *",
        "* @see _.sum\n        *",
        "* @see _.sum\n        * @param property _.property callback shorthand.\n        *",
        "* @see _.sum\n        *",
        "* @see _.sum\n        *",
        "* @see _.sum\n        * @param property _.property callback shorthand.\n        *",
        "* Retrieves the value of a specified property from all elements in the collection.\n        * @param collection The collection to iterate over.\n        * @param property The property to pluck.\n        * @return A new array of property values.\n        *",
        "* @see _.pluck\n        *",
        "* @see _.pluck\n        *",
        "* @see _.pluck\n        *",
        "* @see _.pluck\n        *",
        "* Reduces a collection to a value which is the accumulated result of running each\n        * element in the collection through the callback, where each successive callback execution\n        * consumes the return value of the previous execution. If accumulator is not provided the\n        * first element of the collection will be used as the initial accumulator value. The callback\n        * is bound to thisArg and invoked with four arguments; (accumulator, value, index|key, collection).\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param accumulator Initial value of the accumulator.\n        * @param thisArg The this binding of callback.\n        * @return Returns the accumulated value.\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* @see _.reduce\n        *",
        "* This method is like _.reduce except that it iterates over elements of a collection from\n        * right to left.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param accumulator Initial value of the accumulator.\n        * @param thisArg The this binding of callback.\n        * @return The accumulated value.\n        *",
        "* @see _.reduceRight\n        *",
        "* @see _.reduceRight\n        *",
        "* @see _.reduceRight\n        *",
        "* @see _.reduceRight\n        *",
        "* @see _.reduceRight\n        *",
        "* @see _.reduceRight\n        *",
        "* @see _.reduceRight\n        *",
        "* @see _.reduceRight\n        *",
        "* @see _.reduceRight\n        *",
        "* @see _.reduceRight\n        *",
        "* @see _.reduceRight\n        *",
        "* The opposite of _.filter this method returns the elements of a collection that\n        * the callback does not return truey for.\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback\n        * will return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will\n        * return true for elements that have the properties of the given object, else false.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return A new array of elements that failed the callback check.\n        *",
        "* @see _.reject\n        *",
        "* @see _.reject\n        *",
        "* @see _.reject\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.reject\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.reject\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.reject\n        * @param whereValue _.where style callback\n        *",
        "* @see _.reject\n        * @param whereValue _.where style callback\n        *",
        "* @see _.reject\n        * @param whereValue _.where style callback\n        *",
        "* @see _.reject\n        *",
        "* @see _.reject\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.reject\n        * @param whereValue _.where style callback\n        *",
        "* Retrieves a random element or n random elements from a collection.\n        * @param collection The collection to sample.\n        * @return Returns the random sample(s) of collection.\n        *",
        "* @see _.sample\n        *",
        "* @see _.sample\n        *",
        "* @see _.sample\n        * @param n The number of elements to sample.\n        *",
        "* @see _.sample\n        * @param n The number of elements to sample.\n        *",
        "* @see _.sample\n        * @param n The number of elements to sample.\n        *",
        "* Creates an array of shuffled values, using a version of the Fisher-Yates shuffle.\n        * See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n        * @param collection The collection to shuffle.\n        * @return Returns a new shuffled collection.\n        *",
        "* @see _.shuffle\n        *",
        "* @see _.shuffle\n        *",
        "* @see _.shuffle\n         *",
        "* @see _.shuffle\n         *",
        "* Gets the size of the collection by returning collection.length for arrays and array-like\n        * objects or the number of own enumerable properties for objects.\n        * @param collection The collection to inspect.\n        * @return collection.length\n        *",
        "* @see _.size\n        *",
        "* @see _.size\n        * @param object The object to inspect\n        * @return The number of own enumerable properties.\n        *",
        "* @see _.size\n        * @param aString The string to inspect\n        * @return The length of aString\n        *",
        "* Checks if the callback returns a truey value for any element of a collection. The function\n        * returns as soon as it finds a passing value and does not iterate over the entire collection.\n        * The callback is bound to thisArg and invoked with three arguments; (value, index|key, collection).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will return\n        * the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return true for\n        * elements that have the properties of the given object, else false.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return True if any element passed the callback check, else false.\n        *",
        "* @see _.some\n        *",
        "* @see _.some\n        *",
        "* @see _.some\n         *",
        "* @see _.some\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.some\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.some\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.some\n        * @param whereValue _.where style callback\n        *",
        "* @see _.some\n        * @param whereValue _.where style callback\n        *",
        "* @see _.some\n        * @param whereValue _.where style callback\n        *",
        "* @see _.some\n        *",
        "* @see _.some\n        *",
        "* @see _.some\n        *",
        "* @see _.some\n         *",
        "* @see _.some\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.some\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.some\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.some\n        * @param whereValue _.where style callback\n        *",
        "* @see _.some\n        * @param whereValue _.where style callback\n        *",
        "* @see _.some\n        * @param whereValue _.where style callback\n        *",
        "* Creates an array of elements, sorted in ascending order by the results of running each\n        * element in a collection through the callback. This method performs a stable sort, that\n        * is, it will preserve the original sort order of equal elements. The callback is bound\n        * to thisArg and invoked with three arguments; (value, index|key, collection).\n        *\n        * If a property name is provided for callback the created \"_.pluck\" style callback will\n        * return the property value of the given element.\n        *\n        * If an object is provided for callback the created \"_.where\" style callback will return\n        * true for elements that have the properties of the given object, else false.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return A new array of sorted elements.\n        *",
        "* @see _.sortBy\n        *",
        "* @see _.sortBy\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.sortBy\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.sortBy\n        * @param whereValue _.where style callback\n        *",
        "* @see _.sortBy\n        * @param whereValue _.where style callback\n        *",
        "* @see _.sortBy\n        *",
        "* @see _.sortBy\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.sortBy\n        * @param whereValue _.where style callback\n        *",
        "* Converts the collection to an array.\n        * @param collection The collection to convert.\n        * @return The new converted array.\n        *",
        "* @see _.toArray\n        *",
        "* @see _.toArray\n        *",
        "* @see _.toArray\n        *",
        "* @see _.toArray\n        *",
        "* Performs a deep comparison of each element in a collection to the given properties\n        * object, returning an array of all elements that have equivalent property values.\n        * @param collection The collection to iterate over.\n        * @param properties The object of property values to filter by.\n        * @return A new array of elements that have the given properties.\n        *",
        "* @see _.where\n        *",
        "* @see _.where\n        *",
        "* @see _.where\n        *",
        "******\n     * Date *\n     *******",
        "* Gets the number of milliseconds that have elapsed since the Unix epoch\n        * (1 January 1970 00:00:00 UTC).\n        * @return The number of milliseconds.\n        *",
        "***********\n     * Functions *\n     ************",
        "* Creates a function that executes func, with the this binding and arguments of the\n        * created function, only after being called n times.\n        * @param n The number of times the function must be called before func is executed.\n        * @param func The function to restrict.\n        * @return The new restricted function.\n        *",
        "* @see _.after\n        *",
        "* Creates a function that, when called, invokes func with the this binding of thisArg\n        * and prepends any additional bind arguments to those provided to the bound function.\n        * @param func The function to bind.\n        * @param thisArg The this binding of func.\n        * @param args Arguments to be partially applied.\n        * @return The new bound function.\n        *",
        "* @see _.bind\n        *",
        "* Binds methods of an object to the object itself, overwriting the existing method. Method\n        * names may be specified as individual arguments or as arrays of method names. If no method\n        * names are provided all the function properties of object will be bound.\n        * @param object The object to bind and assign the bound methods to.\n        * @param methodNames The object method names to bind, specified as individual method names\n        * or arrays of method names.\n        * @return object\n        *",
        "* @see _.bindAll\n        *",
        "* Creates a function that, when called, invokes the method at object[key] and prepends any\n        * additional bindKey arguments to those provided to the bound function. This method differs\n        * from _.bind by allowing bound functions to reference methods that will be redefined or don't\n        * yet exist. See http://michaux.ca/articles/lazy-function-definition-pattern.\n        * @param object The object the method belongs to.\n        * @param key The key of the method.\n        * @param args Arguments to be partially applied.\n        * @return The new bound function.\n        *",
        "* @see _.bindKey\n        *",
        "* Creates a function that is the composition of the provided functions, where each function\n        * consumes the return value of the function that follows. For example, composing the functions\n        * f(), g(), and h() produces f(g(h())). Each function is executed with the this binding of the\n        * composed function.\n        * @param funcs Functions to compose.\n        * @return The new composed function.\n        *",
        "* @see _.compose\n        *",
        "* Produces a callback bound to an optional thisArg. If func is a property name the created\n        * callback will return the property value for a given element. If func is an object the created\n        * callback will return true for elements that contain the equivalent object properties,\n        * otherwise it will return false.\n        * @param func The value to convert to a callback.\n        * @param thisArg The this binding of the created callback.\n        * @param argCount The number of arguments the callback accepts.\n        * @return A callback function.\n        *",
        "* @see _.createCallback\n        *",
        "* @see _.createCallback\n        *",
        "* @see _.createCallback\n        *",
        "* Creates a function which accepts one or more arguments of func that when invoked either\n        * executes func returning its result, if all func arguments have been provided, or returns\n        * a function that accepts one or more of the remaining func arguments, and so on. The arity\n        * of func can be specified if func.length is not sufficient.\n        * @param func The function to curry.\n        * @param arity The arity of func.\n        * @return The new curried function.\n        *",
        "* @see _.curry\n        *",
        "* Creates a function that will delay the execution of func until after wait milliseconds have\n        * elapsed since the last time it was invoked. Provide an options object to indicate that func\n        * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls\n        * to the debounced function will return the result of the last func call.\n        *\n        * Note: If leading and trailing options are true func will be called on the trailing edge of\n        * the timeout only if the the debounced function is invoked more than once during the wait\n        * timeout.\n        * @param func The function to debounce.\n        * @param wait The number of milliseconds to delay.\n        * @param options The options object.\n        * @param options.leading Specify execution on the leading edge of the timeout.\n        * @param options.maxWait The maximum time func is allowed to be delayed before it's called.\n        * @param options.trailing Specify execution on the trailing edge of the timeout.\n        * @return The new debounced function.\n        *",
        "* @see _.debounce\n        *",
        "* Specify execution on the leading edge of the timeout.\n        *",
        "* The maximum time func is allowed to be delayed before it's called.\n        *",
        "* Specify execution on the trailing edge of the timeout.\n        *",
        "* Defers executing the func function until the current call stack has cleared. Additional\n        * arguments will be provided to func when it is invoked.\n        * @param func The function to defer.\n        * @param args Arguments to invoke the function with.\n        * @return The timer id.\n        *",
        "* @see _.defer\n        *",
        "* Executes the func function after wait milliseconds. Additional arguments will be provided\n        * to func when it is invoked.\n        * @param func The function to delay.\n        * @param wait The number of milliseconds to delay execution.\n        * @param args Arguments to invoke the function with.\n        * @return The timer id.\n        *",
        "* @see _.delay\n        *",
        "* Creates a function that memoizes the result of func. If resolver is provided it will be\n        * used to determine the cache key for storing the result based on the arguments provided to\n        * the memoized function. By default, the first argument provided to the memoized function is\n        * used as the cache key. The func is executed with the this binding of the memoized function.\n        * The result cache is exposed as the cache property on the memoized function.\n        * @param func Computationally expensive function that will now memoized results.\n        * @param resolver Hash function for storing the result of `fn`.\n        * @return Returns the new memoizing function.\n        *",
        "* Creates a function that is restricted to execute func once. Repeat calls to the function\n        * will return the value of the first call. The func is executed with the this binding of the\n        * created function.\n        * @param func Function to only execute once.\n        * @return The new restricted function.\n        *",
        "* Creates a function that, when called, invokes func with any additional partial arguments\n        * prepended to those provided to the new function. This method is similar to _.bind except\n        * it does not alter the this binding.\n        * @param func The function to partially apply arguments to.\n        * @param args Arguments to be partially applied.\n        * @return The new partially applied function.\n        *",
        "* This method is like _.partial except that partial arguments are appended to those provided\n        * to the new function.\n        * @param func The function to partially apply arguments to.\n        * @param args Arguments to be partially applied.\n        * @return The new partially applied function.\n        *",
        "* Creates a function that, when executed, will only call the func function at most once per\n        * every wait milliseconds. Provide an options object to indicate that func should be invoked\n        * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled\n        * function will return the result of the last func call.\n        *\n        * Note: If leading and trailing options are true func will be called on the trailing edge of\n        * the timeout only if the the throttled function is invoked more than once during the wait timeout.\n        * @param func The function to throttle.\n        * @param wait The number of milliseconds to throttle executions to.\n        * @param options The options object.\n        * @param options.leading Specify execution on the leading edge of the timeout.\n        * @param options.trailing Specify execution on the trailing edge of the timeout.\n        * @return The new throttled function.\n        *",
        "* If you'd like to disable the leading-edge call, pass this as false.\n        *",
        "* If you'd like to disable the execution on the trailing-edge, pass false.\n        *",
        "* Creates a function that provides value to the wrapper function as its first argument.\n        * Additional arguments provided to the function are appended to those provided to the\n        * wrapper function. The wrapper is executed with the this binding of the created function.\n        * @param value The value to wrap.\n        * @param wrapper The wrapper function.\n        * @return The new function.\n        *",
        "***********\n     * Objects   *\n     ************",
        "* Assigns own enumerable properties of source object(s) to the destination object. Subsequent\n        * sources will overwrite property assignments of previous sources. If a callback is provided\n        * it will be executed to produce the assigned values. The callback is bound to thisArg and\n        * invoked with two arguments; (objectValue, sourceValue).\n        * @param object The destination object.\n        * @param s1-8 The source object(s)\n        * @param callback The function to customize merging properties.\n        * @param thisArg The this binding of callback.\n        * @return The destination object.\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* @see _.assign\n        *",
        "* Creates a clone of value. If deep is true nested objects will also be cloned, otherwise\n        * they will be assigned by reference. If a callback is provided it will be executed to produce\n        * the cloned values. If the callback returns undefined cloning will be handled by the method\n        * instead. The callback is bound to thisArg and invoked with one argument; (value).\n        * @param value The value to clone.\n        * @param deep Specify a deep clone.\n        * @param callback The function to customize cloning values.\n        * @param thisArg The this binding of callback.\n        * @return The cloned value.\n        *",
        "* Creates a deep clone of value. If a callback is provided it will be executed to produce the\n        * cloned values. If the callback returns undefined cloning will be handled by the method instead.\n        * The callback is bound to thisArg and invoked with one argument; (value).\n        *\n        * Note: This method is loosely based on the structured clone algorithm. Functions and DOM nodes\n        * are not cloned. The enumerable properties of arguments objects and objects created by constructors\n        * other than Object are cloned to plain Object objects.\n        * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.\n        * @param value The value to clone.\n        * @param callback The function to customize cloning values.\n        * @param thisArg The this binding of callback.\n        * @return The cloned value.\n        *",
        "* Assigns own enumerable properties of source object(s) to the destination object for all\n        * destination properties that resolve to undefined. Once a property is set, additional defaults\n        * of the same property will be ignored.\n        * @param object The destination object.\n        * @param sources The source objects.\n        * @return The destination object.\n        *",
        "* @see _.defaults\n        *",
        "* This method is like _.findIndex except that it returns the key of the first element that\n        * passes the callback check, instead of the element itself.\n        * @param object The object to search.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return The key of the found element, else undefined.\n        *",
        "* @see _.findKey\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.findKey\n        * @param whereValue _.where style callback\n        *",
        "* This method is like _.findKey except that it iterates over elements of a collection in the opposite order.\n        * @param object The object to search.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return The key of the found element, else undefined.\n        *",
        "* @see _.findLastKey\n        * @param pluckValue _.pluck style callback\n        *",
        "* @see _.findLastKey\n        * @param whereValue _.where style callback\n        *",
        "* Iterates over own and inherited enumerable properties of an object, executing the callback for\n        * each property. The callback is bound to thisArg and invoked with three arguments; (value, key,\n        * object). Callbacks may exit iteration early by explicitly returning false.\n        * @param object The object to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return object\n        *",
        "* @see _.forIn\n        *",
        "* @see _.forIn\n        *",
        "* This method is like _.forIn except that it iterates over elements of a collection in the\n        * opposite order.\n        * @param object The object to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return object\n        *",
        "* @see _.forInRight\n        *",
        "* @see _.forInRight\n        *",
        "* Iterates over own enumerable properties of an object, executing the callback for each\n        * property. The callback is bound to thisArg and invoked with three arguments; (value, key,\n        * object). Callbacks may exit iteration early by explicitly returning false.\n        * @param object The object to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return object\n        *",
        "* @see _.forOwn\n        *",
        "* @see _.forOwn\n        *",
        "* This method is like _.forOwn except that it iterates over elements of a collection in the\n        * opposite order.\n        * @param object The object to iterate over.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        * @return object\n        *",
        "* @see _.forOwnRight\n        *",
        "* @see _.forOwnRight\n        *",
        "* Creates a sorted array of property names of all enumerable properties, own and inherited, of\n        * object that have function values.\n        * @param object The object to inspect.\n        * @return An array of property names that have function values.\n        *",
        "* @see _functions\n        *",
        "* @see _.functions\n        *",
        "* @see _.functions\n        *",
        "* Gets the property value at path of object. If the resolved\n         * value is undefined the defaultValue is used in its place.\n         * @param object The object to query.\n         * @param path The path of the property to get.\n         * @param defaultValue The value returned if the resolved value is undefined.\n         * @return Returns the resolved value.\n         *",
        "* Checks if the specified object property exists and is a direct property, instead of an\n        * inherited property.\n        * @param object The object to check.\n        * @param property The property to check for.\n        * @return True if key is a direct property, else false.\n        *",
        "* Creates an object composed of the inverted keys and values of the given object.\n        * @param object The object to invert.\n        * @return The created inverted object.\n        *",
        "* Checks if value is an arguments object.\n        * @param value The value to check.\n        * @return True if the value is an arguments object, else false.\n        *",
        "* Checks if value is an array.\n        * @param value The value to check.\n        * @return True if the value is an array, else false.\n        *",
        "* Checks if value is a boolean value.\n        * @param value The value to check.\n        * @return True if the value is a boolean value, else false.\n        *",
        "* Checks if value is a date.\n        * @param value The value to check.\n        * @return True if the value is a date, else false.\n        *",
        "* Checks if value is a DOM element.\n        * @param value The value to check.\n        * @return True if the value is a DOM element, else false.\n        *",
        "* Checks if value is empty. Arrays, strings, or arguments objects with a length of 0 and objects\n        * with no own enumerable properties are considered \"empty\".\n        * @param value The value to inspect.\n        * @return True if the value is empty, else false.\n        *",
        "* Checks if value is an Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError,\n        * or URIError object.\n        * @param value The value to check.\n        * @return True if value is an error object, else false.",
        "* Performs a deep comparison between two values to determine if they are equivalent to each\n        * other. If a callback is provided it will be executed to compare values. If the callback\n        * returns undefined comparisons will be handled by the method instead. The callback is bound to\n        * thisArg and invoked with two arguments; (a, b).\n        * @param a The value to compare.\n        * @param b The other value to compare.\n        * @param callback The function to customize comparing values.\n        * @param thisArg The this binding of callback.\n        * @return True if the values are equivalent, else false.\n        *",
        "* Checks if value is, or can be coerced to, a finite number.\n        *\n        * Note: This is not the same as native isFinite which will return true for booleans and empty\n        * strings. See http://es5.github.io/#x15.1.2.5.\n        * @param value The value to check.\n        * @return True if the value is finite, else false.\n        *",
        "* Checks if value is a function.\n        * @param value The value to check.\n        * @return True if the value is a function, else false.\n        *",
        "* Checks if value is NaN.\n        *\n        * Note: This is not the same as native isNaN which will return true for undefined and other\n        * non-numeric values. See http://es5.github.io/#x15.1.2.4.\n        * @param value The value to check.\n        * @return True if the value is NaN, else false.\n        *",
        "* Checks if value is null.\n        * @param value The value to check.\n        * @return True if the value is null, else false.\n        *",
        "* Checks if value is a number.\n        *\n        * Note: NaN is considered a number. See http://es5.github.io/#x8.5.\n        * @param value The value to check.\n        * @return True if the value is a number, else false.\n        *",
        "* Checks if value is the language type of Object. (e.g. arrays, functions, objects, regexes,\n        * new Number(0), and new String(''))\n        * @param value The value to check.\n        * @return True if the value is an object, else false.\n        *",
        "* Checks if value is an object created by the Object constructor.\n        * @param value The value to check.\n        * @return True if value is a plain object, else false.\n        *",
        "* Checks if value is a regular expression.\n        * @param value The value to check.\n        * @return True if the value is a regular expression, else false.\n        *",
        "* Checks if value is a string.\n        * @param value The value to check.\n        * @return True if the value is a string, else false.\n        *",
        "* Checks if value is undefined.\n        * @param value The value to check.\n        * @return True if the value is undefined, else false.\n        *",
        "* Creates an array composed of the own enumerable property names of an object.\n        * @param object The object to inspect.\n        * @return An array of property names.\n        *",
        "* @see _.keys\n        *",
        "* Creates an object with the same keys as object and values generated by running each own\n        * enumerable property of object through iteratee. The iteratee function is bound to thisArg\n        * and invoked with three arguments: (value, key, object).\n        *\n        * If a property name is provided iteratee the created \"_.property\" style callback returns\n        * the property value of the given element.\n        *\n        * If a value is also provided for thisArg the creted \"_.matchesProperty\" style callback returns\n        * true for elements that have a matching property value, else false;.\n        *\n        * If an object is provided for iteratee the created \"_.matches\" style callback returns true\n        * for elements that have the properties of the given object, else false.\n        *\n        * @param {Object} object The object to iterate over.\n        * @param {Function|Object|string} [iteratee=_.identity]  The function invoked per iteration.\n        * @param {Object} [thisArg] The `this` binding of `iteratee`.\n        * @return {Object} Returns the new mapped object.",
        "* @see _.mapValues\n         * TValue is the type of the property values of T.\n         * TResult is the type output by the ObjectIterator function",
        "* @see _.mapValues\n         * TResult is the type of the property specified by pluck.\n         * T should be a Dictionary<Dictionary<TResult>>",
        "* @see _.mapValues\n         * TResult is the type of the properties on the object specified by pluck.\n         * T should be a Dictionary<Dictionary<Dictionary<TResult>>>",
        "* @see _.mapValues\n         * TResult is the type of the properties of each object in the values of T\n         * T should be a Dictionary<Dictionary<TResult>>",
        "* Recursively merges own enumerable properties of the source object(s), that don't resolve\n        * to undefined into the destination object. Subsequent sources will overwrite property\n        * assignments of previous sources. If a callback is provided it will be executed to produce\n        * the merged values of the destination and source properties. If the callback returns undefined\n        * merging will be handled by the method instead. The callback is bound to thisArg and invoked\n        * with two arguments; (objectValue, sourceValue).\n        * @param object The destination object.\n        * @param s1-8 The source object(s)\n        * @param callback The function to customize merging properties.\n        * @param thisArg The this binding of callback.\n        * @return The destination object.\n        *",
        "* @see _.merge\n        *",
        "* @see _.merge\n        *",
        "* @see _.merge\n        *",
        "* Creates a shallow clone of object excluding the specified properties. Property names may be\n        * specified as individual arguments or as arrays of property names. If a callback is provided\n        * it will be executed for each property of object omitting the properties the callback returns\n        * truey for. The callback is bound to thisArg and invoked with three arguments; (value, key,\n        * object).\n        * @param object The source object.\n        * @param keys The properties to omit.\n        * @return An object without the omitted properties.\n        *",
        "* @see _.omit\n        *",
        "* @see _.omit\n        *",
        "* @see _.omit\n        *",
        "* @see _.omit\n        *",
        "* @see _.omit\n        *",
        "* Creates a two dimensional array of an object's key-value pairs,\n        * i.e. [[key1, value1], [key2, value2]].\n        * @param object The object to inspect.\n        * @return Aew array of key-value pairs.\n        *",
        "* @see _.pairs\n        *",
        "* Creates a shallow clone of object composed of the specified properties. Property names may be\n        * specified as individual arguments or as arrays of property names. If a callback is provided\n        * it will be executed for each property of object picking the properties the callback returns\n        * truey for. The callback is bound to thisArg and invoked with three arguments; (value, key,\n        * object).\n        * @param object Object to strip unwanted key/value pairs.\n        * @param keys Property names to pick\n        * @return An object composed of the picked properties.\n        *",
        "* @see _.pick\n        *",
        "* @see _.pick\n        *",
        "* An alternative to _.reduce this method transforms object to a new accumulator object which is\n        * the result of running each of its elements through a callback, with each callback execution\n        * potentially mutating the accumulator object. The callback is bound to thisArg and invoked with\n        * four arguments; (accumulator, value, key, object). Callbacks may exit iteration early by\n        * explicitly returning false.\n        * @param collection The collection to iterate over.\n        * @param callback The function called per iteration.\n        * @param accumulator The custom accumulator value.\n        * @param thisArg The this binding of callback.\n        * @return The accumulated value.\n        *",
        "* @see _.transform\n        *",
        "* @see _.transform\n        *",
        "* @see _.transform\n        *",
        "* @see _.transform\n        *",
        "* @see _.transform\n        *",
        "* Creates an array composed of the own enumerable property values of object.\n        * @param object The object to inspect.\n        * @return Returns an array of property values.\n        *",
        "********\n     * String *\n     *********",
        "* Converts the given value into an integer of the specified radix. If radix is undefined or 0 a\n        * radix of 10 is used unless the value is a hexadecimal, in which case a radix of 16 is used.\n        *\n        * Note: This method avoids differences in native ES3 and ES5 parseInt implementations. See\n        * http://es5.github.io/#E.\n        * @param value The value to parse.\n        * @param radix The radix used to interpret the value to parse.\n        * @return The new integer value.\n        *",
        "***********\n     * Utilities *\n     ************",
        "* Converts the characters &, <, >, \", and ' in string to their corresponding HTML entities.\n        * @param string The string to escape.\n        * @return The escaped string.\n        *",
        "* This method returns the first argument provided to it.\n        * @param value Any value.\n        * @return value.\n        *",
        "* Adds function properties of a source object to the lodash function and chainable wrapper.\n        * @param object The object of function properties to add to lodash.\n        *",
        "* Reverts the '_' variable to its previous value and returns a reference to the lodash function.\n        * @return The lodash function.\n        *",
        "* # S\n         * Creates a \"_.pluck\" style function, which returns the key value of a given object.\n         * @param key (string)\n         * @return the value of that key on the object\n         *",
        "* Produces a random number between min and max (inclusive). If only one argument is provided a\n        * number between 0 and the given number will be returned. If floating is truey or either min or\n        * max are floats a floating-point number will be returned instead of an integer.\n        * @param max The maximum possible value.\n        * @param floating Specify returning a floating-point number.\n        * @return A random number.\n        *",
        "* @see _.random\n        * @param min The minimum possible value.\n        * @return A random number between `min` and `max`.\n        *",
        "* Resolves the value of property on object. If property is a function it will be invoked with\n        * the this binding of object and its result returned, else the property value is returned. If\n        * object is falsey then undefined is returned.\n        * @param object The object to inspect.\n        * @param property The property to get the value of.\n        * @return The resolved value.\n        *",
        "* Create a new lodash function using the given context object.\n        * @param context The context object\n        * @returns The lodash function.\n        *",
        "* A micro-templating method that handles arbitrary delimiters, preserves whitespace, and\n        * correctly escapes quotes within interpolated code.\n        *\n        * Note: In the development build, _.template utilizes sourceURLs for easier debugging. See\n        * http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n        *\n        * For more information on precompiling templates see:\n        * http://lodash.com/#custom-builds\n        *\n        * For more information on Chrome extension sandboxes see:\n        * http://developer.chrome.com/stable/extensions/sandboxingEval.html\n        * @param text The template text.\n        * @param data The data object used to populate the text.\n        * @param options The options object.\n        * @param options.escape The \"escape\" delimiter.\n        * @param options.evaluate The \"evaluate\" delimiter.\n        * @param options.import An object to import into the template as local variables.\n        * @param options.interpolate The \"interpolate\" delimiter.\n        * @param sourceURL The sourceURL of the template's compiled source.\n        * @param variable The data object variable name.\n        * @return Returns the compiled Lo-Dash HTML template or a TemplateExecutor if no data is passed.\n        *",
        "* @see _.template\n        *",
        "* Executes the callback n times, returning an array of the results of each callback execution.\n        * The callback is bound to thisArg and invoked with one argument; (index).\n        * @param n The number of times to execute the callback.\n        * @param callback The function called per iteration.\n        * @param thisArg The this binding of callback.\n        *",
        "* The inverse of _.escape this method converts the HTML entities &amp;, <, &gt;, &quot;, and\n        * &#39; in string to their corresponding characters.\n        * @param string The string to unescape.\n        * @return The unescaped string.\n        *",
        "* Generates a unique ID. If prefix is provided the ID will be appended to it.\n        * @param prefix The value to prefix the ID with.\n        * @return Returns the unique ID.\n        *",
        "* A no-operation function.\n         *",
        "* Creates a function that returns value..\n         *",
        "* Creates an object that inherits from the given prototype object. If a properties object is provided its own enumerable properties are assigned to the created object.\n         * @param prototype The object to inherit from.\n         * @param properties The properties to assign to the object."
    ],
    "functions": [],
    "classes": []
}