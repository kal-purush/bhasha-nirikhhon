{
    "identifiers": [
        "com",
        "pi4j",
        "io",
        "serial",
        "Serial",
        "com",
        "pi4j",
        "io",
        "serial",
        "SerialDataEvent",
        "com",
        "pi4j",
        "io",
        "serial",
        "SerialDataListener",
        "com",
        "pi4j",
        "io",
        "serial",
        "SerialFactory",
        "com",
        "pi4j",
        "io",
        "serial",
        "SerialPortException",
        "java",
        "util",
        "Random",
        "args",
        "rnd",
        "serialPort",
        "SerialFactory",
        "createInstance",
        "serialPort",
        "addListener",
        "Override",
        "serialPort",
        "open",
        "serialPort",
        "DEFAULT_COM_PORT",
        "serialPort",
        "write",
        "valueOf",
        "rnd",
        "nextInt",
        "serialPort",
        "write",
        "valueOf",
        "rnd",
        "nextInt",
        "serialPort",
        "write",
        "valueOf",
        "rnd",
        "nextInt",
        "serialPort",
        "write",
        "serialPort",
        "write",
        "serialPort",
        "write",
        "serialPort",
        "write",
        "ex",
        "ex",
        "printStackTrace",
        "sleep",
        "ex",
        "ex",
        "printStackTrace"
    ],
    "literals": [
        "\">>> pi4j example...\"",
        "\">>> connection settings: 38400, N, 8, 1\"",
        "\">>> receiving data on serial port...\"",
        "\"Not supported yet.\"",
        "\"Hey there! This is %sth formatted string\"",
        "\"Hey there! This is %sth formatted string\"",
        "\"Hey there! This is %sth formatted string\"",
        "\">>> SERIAL PORT ERROR!\""
    ],
    "variables": [],
    "comments": [
        "Trying out pi4j",
        "creating instance of the serial communication class",
        "creating and registering serial data listener",
        "open the default serial port provided on the GPIO header with",
        "DEFAULT_COM_PORT = /dev/ttyAMA0, speed = 38400",
        "keeping the program running until user terminates it",
        "writing a formatted string to the serial transmit buffer",
        "writing individual bytes to the serial transmit buffer",
        "writing individual chars to the serial transmit buffer",
        "wait 1 second"
    ],
    "docstrings": [],
    "functions": [
        "main",
        "dataReceived"
    ],
    "classes": [
        "SerialController"
    ]
}