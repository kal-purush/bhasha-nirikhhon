{
    "identifiers": [
        "require",
        "ripplelib",
        "sjcl",
        "ripplelib",
        "ripplelib",
        "ripplelib",
        "ripplelib",
        "Message",
        "sjcl",
        "Message",
        "Message",
        "message",
        "secret_key",
        "account",
        "Message",
        "Message",
        "Message",
        "message",
        "secret_key",
        "account",
        "Message",
        "_hash",
        "secret_key_",
        "account",
        "_hash",
        "_hash",
        "sjcl",
        "_hash",
        "_hash",
        "hash",
        "hash",
        "hash",
        "secret_key_",
        "sjcl",
        "Seed",
        "secret_key_",
        "account",
        "secret_key_",
        "secret_key",
        "hash",
        "PARANOIA_256_BITS",
        "sjcl",
        "signature_bits",
        "signature_base64",
        "Message",
        "data",
        "remote",
        "callback",
        "data",
        "data",
        "Message",
        "Message",
        "data",
        "callback",
        "Message",
        "data",
        "remote",
        "callback",
        "Message",
        "data",
        "remote",
        "callback",
        "callback",
        "REGEX_HEX",
        "data",
        "sjcl",
        "data",
        "data",
        "hash",
        "hash",
        "hash",
        "callback",
        "data",
        "data",
        "account",
        "UInt160",
        "account",
        "callback",
        "data",
        "signature",
        "REGEX_BASE64",
        "signature",
        "callback",
        "sjcl",
        "signature",
        "remote",
        "Remote",
        "remote",
        "callback",
        "async_callback",
        "public_key",
        "sjcl",
        "hash",
        "signature_bits",
        "err",
        "async_callback",
        "err",
        "public_key",
        "async_callback",
        "public_key",
        "async_callback",
        "public_key",
        "async_callback",
        "sjcl",
        "public_key",
        "sjcl",
        "bits",
        "Account",
        "remote",
        "account",
        "account_class_instance",
        "public_key_hex",
        "async_callback",
        "recoverPublicKey",
        "checkPublicKeyIsValid",
        "async",
        "steps",
        "callback",
        "Message"
    ],
    "literals": [
        "'use strict'",
        "'async'",
        "'Ripple Signed Message:\\n'",
        "'string'",
        "'object'",
        "'number'",
        "'Hash must be a bitArray or hex-encoded string'",
        "'string'",
        "'Data object must contain message field to verify signature'",
        "'function'",
        "'Must supply callback function'",
        "'object'",
        "'number'",
        "'Hash must be a bitArray or hex-encoded string'",
        "'Account must be a valid ripple address'",
        "'string'",
        "'Signature must be a Base64-encoded string'",
        "'online'",
        "'Must supply connected Remote to verify signature'",
        "'Could not recover public key from signature'"
    ],
    "variables": [
        "async",
        "Remote",
        "Seed",
        "Account",
        "UInt160",
        "Message",
        "REGEX_HEX",
        "REGEX_BASE64",
        "hash",
        "secret_key",
        "PARANOIA_256_BITS",
        "signature_bits",
        "signature_base64",
        "hash",
        "account",
        "signature",
        "signature_bits",
        "public_key",
        "bits",
        "public_key_hex",
        "account_class_instance",
        "steps"
    ],
    "comments": [
        "eslint-disable valid-jsdoc",
        "Factory function",
        "Message class (static)",
        "sjcl constant for ensuring 256 bits of entropy",
        "Get hex-encoded public key"
    ],
    "docstrings": [
        "*  Produce a Base64-encoded signature on the given message with\n *  the string 'Ripple Signed Message:\\n' prepended.\n *\n *  Note that this signature uses the signing function that includes\n *  a recovery_factor to be able to extract the public key from the signature\n *  without having to pass the public key along with the signature.\n *\n *  @static\n *\n *  @param {String} message\n *  @param {sjcl.ecc.ecdsa.secretKey|Any format accepted by Seed.from_json}\n *         secret_key\n *  @param {RippleAddress} [The first key] account Field to specify the signing\n *      account. If this is omitted the first account produced by the secret\n *      generator will be used.\n *  @return {Base64-encoded String} signature",
        "*  Produce a Base64-encoded signature on the given hex-encoded hash.\n *\n *  Note that this signature uses the signing function that includes\n *  a recovery_factor to be able to extract the public key from the signature\n *  without having to pass the public key along with the signature.\n *\n *  @static\n *\n *  @param {bitArray|Hex-encoded String} hash\n *  @param {sjcl.ecc.ecdsa.secretKey|Any format accepted by Seed.from_json}\n *          secret_key\n *  @param {RippleAddress} [The first key] account Field to specify the\n *          signing account. If this is omitted the first account produced by\n *          the secret generator will be used.\n *  @returns {Base64-encoded String} signature",
        "*  Verify the signature on a given message.\n *\n *  Note that this function is asynchronous.\n *  The ripple-lib remote is used to check that the public\n *  key extracted from the signature corresponds to one that is currently\n *  active for the given account.\n *\n *  @static\n *\n *  @param {String} data.message\n *  @param {RippleAddress} data.account\n *  @param {Base64-encoded String} data.signature\n *  @param {ripple-lib Remote} remote\n *  @param {Function} callback\n *\n *  @callback callback\n *  @param {Error} error\n *  @param {boolean} is_valid true if the signature is valid, false otherwise",
        "*  Verify the signature on a given hash.\n *\n *  Note that this function is asynchronous.\n *  The ripple-lib remote is used to check that the public\n *  key extracted from the signature corresponds to one that is currently\n *  active for the given account.\n *\n *  @static\n *\n *  @param {bitArray|Hex-encoded String} data.hash\n *  @param {RippleAddress} data.account\n *  @param {Base64-encoded String} data.signature\n *  @param {ripple-lib Remote} remote\n *  @param {Function} callback\n *\n *  @callback callback\n *  @param {Error} error\n *  @param {boolean} is_valid true if the signature is valid, false otherwise"
    ],
    "functions": [
        "recoverPublicKey",
        "checkPublicKeyIsValid"
    ],
    "classes": []
}