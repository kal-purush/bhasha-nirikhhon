{
    "identifiers": [
        "argparse",
        "sys",
        "yaml",
        "parse_args",
        "open",
        "args",
        "parameter_file_path",
        "yaml_file",
        "yaml",
        "load",
        "yaml_file",
        "run",
        "args",
        "errors",
        "sys",
        "exit",
        "argparse",
        "ArgumentParser",
        "description",
        "__doc__",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "args",
        "args",
        "args",
        "parameter_map",
        "CONFIG",
        "open",
        "args",
        "input_file_path",
        "fin",
        "open",
        "args",
        "output_file_path",
        "fout",
        "write_fixed_headers",
        "fout",
        "fixed_headers",
        "write_sample_lines",
        "fout",
        "CONFIG",
        "args",
        "parameter_map",
        "process_headers",
        "fin",
        "fout",
        "fixed_headers",
        "raw_line",
        "fin",
        "fout",
        "write",
        "raw_line",
        "errors",
        "fout",
        "fixed_headers",
        "name",
        "ignored",
        "value",
        "fixed_headers",
        "write_meta_line",
        "fout",
        "name",
        "value",
        "fout",
        "config",
        "samples",
        "config",
        "replace",
        "id",
        "samples",
        "items",
        "SAMPLE_LINE_FORMAT",
        "format",
        "id",
        "id",
        "config",
        "write_stripped_line",
        "fout",
        "sample_line",
        "fin",
        "fout",
        "fixed_headers",
        "item",
        "item",
        "fixed_headers",
        "filtered_headers",
        "add",
        "name",
        "value",
        "name",
        "asserted",
        "value",
        "fixed_headers",
        "asserted",
        "raw_line",
        "fin",
        "raw_line",
        "startswith",
        "raw_line",
        "rstrip",
        "split",
        "name",
        "filtered_headers",
        "name",
        "expected_values",
        "value",
        "expected_values",
        "name",
        "sys",
        "stderr",
        "write",
        "format",
        "name",
        "value",
        "fout",
        "write",
        "raw_line",
        "fout",
        "write",
        "raw_line",
        "errors",
        "fout",
        "name",
        "value",
        "fout",
        "write",
        "format",
        "name",
        "value",
        "fout",
        "line",
        "fout",
        "write",
        "line",
        "fout",
        "write",
        "main"
    ],
    "literals": [
        "'1.0.0'",
        "'input_file_path'",
        "'the VCF to read'",
        "'output_file_path'",
        "'the VCF to write'",
        "'parameter_file_path'",
        "'the YAML with details'",
        "'config'",
        "'fixed_headers'",
        "'w'",
        "'samples'",
        "'##'",
        "'sample_line_format'",
        "' '",
        "''",
        "'fixed_sample_params'",
        "\"SAMPLE\"",
        "'##'",
        "'='",
        "'tcga-vcf-reheader: mismatch {}={}\\n'",
        "'##{}={}\\n'",
        "'\\n'",
        "'__main__'"
    ],
    "variables": [
        "__version__",
        "args",
        "args",
        "parameter_map",
        "errors",
        "parser",
        "args",
        "CONFIG",
        "fixed_headers",
        "errors",
        "SAMPLE_LINE_FORMAT",
        "sample_line",
        "filtered_headers",
        "expected_values",
        "errors",
        "name",
        "value",
        "errors"
    ],
    "comments": [
        "!/usr/bin/env python2.7",
        "TODO: Configure logging",
        "TODO: This will break if the metadata header is bad.",
        "TODO: propper logging",
        "Just some other header...",
        "raw_line should now be the data header line."
    ],
    "docstrings": [
        "\"\"\"Tool to read a TCGA Variant Call Format (VCF) file and output an\nequivalent file with a different header.\n\nReturns exit code 1 for bad parameters and 2 for header errors detected.\n\"\"\"",
        "\"\"\"Main entry point for testing and higher-level automation\"\"\"",
        "\"\"\"Keep processing until we write the data header line.\"\"\"",
        "\"\"\"Just adds the newline.\"\"\""
    ],
    "functions": [
        "main",
        "parse_args",
        "run",
        "write_fixed_headers",
        "write_sample_lines",
        "process_headers",
        "write_meta_line",
        "write_stripped_line"
    ],
    "classes": []
}