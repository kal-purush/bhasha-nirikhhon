{
    "identifiers": [
        "division",
        "print_function",
        "sys",
        "kombine",
        "numpy",
        "np",
        "scipy",
        "stats",
        "multivariate_normal",
        "mpipool",
        "MPIPool",
        "ImportError",
        "ImportError",
        "mean",
        "cov",
        "np",
        "atleast_1d",
        "mean",
        "np",
        "array",
        "cov",
        "cov",
        "shape",
        "x",
        "multivariate_normal",
        "logpdf",
        "x",
        "mean",
        "mean",
        "cov",
        "cov",
        "np",
        "random",
        "rand",
        "ndim",
        "ndim",
        "np",
        "zeros",
        "ndim",
        "A",
        "A",
        "T",
        "ndim",
        "np",
        "eye",
        "ndim",
        "Model",
        "mean",
        "cov",
        "MPIPool",
        "pool",
        "is_master",
        "pool",
        "wait",
        "sys",
        "exit",
        "kombine",
        "Sampler",
        "nwalkers",
        "ndim",
        "model",
        "lnposterior",
        "np",
        "random",
        "uniform",
        "size",
        "nwalkers",
        "ndim",
        "sampler",
        "burnin",
        "p0",
        "sampler",
        "run_mcmc",
        "pool",
        "close",
        "sys",
        "exit"
    ],
    "literals": [
        "\"adrn <adrn@astro.columbia.edu>\"",
        "\"mpipool (https://github.com/dfm/mpipool/) is required \"",
        "\"for this example, along with a working installation of \"",
        "\"openMPI.\""
    ],
    "variables": [
        "__author__",
        "mean",
        "cov",
        "ndim",
        "ndim",
        "A",
        "mean",
        "cov",
        "model",
        "pool",
        "pool",
        "nwalkers",
        "sampler",
        "p0",
        "p",
        "post",
        "q",
        "p",
        "post",
        "q"
    ],
    "comments": [
        "coding: utf-8",
        "Standard library",
        "Third-party",
        "create an ND Gaussian model",
        "define an MPI pool",
        "# Make sure the thread we're running on is the master",
        "close the MPI poll"
    ],
    "docstrings": [
        "\"\"\"\n    Demonstrate how to use MPI with kombine. Run this module with\n\n        mpiexec -n <nprocesses> python mpi-demo.py\n\n    where <nprocesses> is the number of processes to spawn.\n \"\"\""
    ],
    "functions": [
        "lnposterior"
    ],
    "classes": [
        "Model"
    ]
}