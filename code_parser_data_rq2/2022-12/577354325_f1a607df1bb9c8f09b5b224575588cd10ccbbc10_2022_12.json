{
    "identifiers": [
        "data",
        "next",
        "data",
        "next",
        "Node",
        "data",
        "Node",
        "data",
        "head",
        "node",
        "head",
        "head",
        "itr",
        "itr",
        "data",
        "itr",
        "next",
        "data",
        "head",
        "Node",
        "data",
        "head",
        "itr",
        "next",
        "itr",
        "next",
        "Node",
        "data",
        "data_list",
        "i",
        "data_list",
        "insert_atEnd",
        "i",
        "head",
        "head",
        "itr",
        "count",
        "itr",
        "next",
        "count",
        "index",
        "index",
        "index",
        "count_nodes",
        "index",
        "head",
        "next",
        "head",
        "itr",
        "index",
        "count",
        "itr",
        "next",
        "next",
        "count",
        "itr",
        "next",
        "index",
        "data",
        "index",
        "index",
        "count_nodes",
        "index",
        "insertATbeginning",
        "data",
        "head",
        "itr",
        "index",
        "count",
        "Node",
        "data",
        "itr",
        "next",
        "node",
        "count",
        "itr",
        "next",
        "data",
        "head",
        "Node",
        "data",
        "head",
        "cur",
        "next",
        "cur",
        "next",
        "new_node",
        "index",
        "index",
        "index",
        "count_nodes",
        "head",
        "occ",
        "occ",
        "next",
        "index",
        "count",
        "occ",
        "next",
        "count",
        "ll",
        "insert_atEnd",
        "ll",
        "insert_values",
        "ll",
        "append",
        "ll",
        "append",
        "ll",
        "append",
        "ll"
    ],
    "literals": [
        "' LinkedList is Empty'",
        "' '",
        "' --->  '",
        "' LinkedList is Empty'",
        "' this is the length of the LinkedList '",
        "\"  \"",
        "'Invalid Index'",
        "'this is the new head of the list'",
        "'out of Lista'",
        "' The index is out of range'",
        "'__main__'",
        "'Marocco '",
        "'try'",
        "'worldcup'",
        "'Victory'",
        "'gipus'"
    ],
    "variables": [
        "data",
        "next",
        "head",
        "node",
        "head",
        "itr",
        "itr",
        "head",
        "itr",
        "itr",
        "itr",
        "next",
        "head",
        "itr",
        "count",
        "itr",
        "head",
        "itr",
        "count",
        "itr",
        "next",
        "itr",
        "itr",
        "count",
        "node",
        "itr",
        "next",
        "itr",
        "new_node",
        "cur",
        "cur",
        "cur",
        "next",
        "occ",
        "count",
        "last_occ",
        "occ",
        "last_occ",
        "next",
        "ll"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "-*- coding: utf-8 -*-",
        "initially the emptyhead is passed two fields value and next",
        "first method that adds an item to the head of the list",
        "creating and empty string first",
        "in the iteration it returns all the values ​​of the linked list represented in the form of a string",
        "parte da zero index indi per cui non può essere uguale a self.length",
        "else Throws an Exception, because Index not found",
        "correct way since count starts from zero",
        "that is, that the input data is created with the records of the class constructor",
        "I save the position where I am on a variable",
        "if I found the index to delete the last value pointer",
        "before exiting the if condition hooks to the next of the next value"
    ],
    "docstrings": [
        "\"\"\"\n Class Node for records with key_value information and pointer to next field\nAll the most common methods of a LinkedList:\nAttach an item to the head of the LinkedList\nattack at the end\nprint(linkedList)\ndelete value at index\ninsert value at index etc..\n \n\"\"\"",
        "'''attach an item to the tail of the LinkedList'''",
        "''' builds a LInkedList starting from an input list and looping \n        on the function that attaches an element to the end of the LinkedList'''",
        "''' counts the items in the list'''",
        "''' function that given an index if present removes the element that is in that index'''",
        "''' now I define a function that\n        insert a new value into the index\n        desired '''",
        "''' function that deletes an element at the requested index'''"
    ],
    "functions": [
        "insertATbeginning",
        "insert_atEnd",
        "insert_values",
        "count_nodes",
        "remove_atIndex",
        "insertAt",
        "append",
        "erease"
    ],
    "classes": [
        "Node"
    ]
}