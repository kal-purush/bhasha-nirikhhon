{
    "identifiers": [
        "django",
        "forms",
        "forms",
        "models",
        "formset",
        "widgets",
        "DualSelector",
        "Selectize",
        "SelectizeMultiple",
        "testapp",
        "models",
        "County",
        "State",
        "forms",
        "Form",
        "models",
        "ModelChoiceField",
        "label",
        "queryset",
        "State",
        "objects",
        "all",
        "widget",
        "Selectize",
        "search_lookup",
        "required",
        "models",
        "ModelChoiceField",
        "label",
        "queryset",
        "County",
        "objects",
        "all",
        "widget",
        "Selectize",
        "search_lookup",
        "filter_by",
        "forms",
        "Form",
        "models",
        "ModelMultipleChoiceField",
        "label",
        "queryset",
        "State",
        "objects",
        "all",
        "widget",
        "SelectizeMultiple",
        "search_lookup",
        "required",
        "models",
        "ModelMultipleChoiceField",
        "label",
        "queryset",
        "County",
        "objects",
        "all",
        "widget",
        "DualSelector",
        "search_lookup",
        "filter_by"
    ],
    "literals": [
        "\"State\"",
        "'name__icontains'",
        "\"County\"",
        "'name__icontains'",
        "'state'",
        "'state__id'",
        "\"States\"",
        "'name__icontains'",
        "\"Counties\"",
        "'name__icontains'",
        "'states'",
        "'state__id'"
    ],
    "variables": [
        "state",
        "county",
        "states",
        "counties"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    Using adjacent fields for preselecting options\n    ----------------------------------------------\n\n    This form shows the usage of two adjacent fields, where one field's value is used to filter\n    the options for another field. Here with the field **state**, the user can make a preselection.\n    When the state is changed, the other field **county** gets filled with all counties belonging\n    to that state. Setting up a form using this functionality, can improve the user experience,\n    because it reduces the available options to user must choose from. This can be a better\n    alternative rather than using option groups.\n\n    To make use of this feature, the widgets ``Selectize``, ``SelectizeMultiple`` and\n    ``DualSelector`` accept the optional argument ``filter_by`` which must contain a dictionary\n    where each key maps to an adjacent field and its value contains a lookup expression:\n\n    .. code-block:: python\n\n        from django.db import models\n        from formset.widgets import Selectize\n        from myapp.model import County, State\n\n        class StateForm(forms.Form):\n            state = models.ModelChoiceField(\n                queryset=State.objects.all(),\n            )\n\n            county = models.ModelChoiceField(\n                queryset=County.objects.all(),\n                widget=Selectize(\n                    search_lookup=['name__icontains'],\n                    filter_by={'state': 'state__id'},\n                ),\n            )\n\n    There is another example named \"states\" which can handle multiple options.\n    \"\"\"",
        "\"\"\"\n    Using adjacent fields for preselecting options\n    ----------------------------------------------\n\n    This form shows the usage of two adjacent fields, where one field's value is used to filter\n    the options for another field. Here with the field **states**, the user can make a preselection\n    of one or more states. When the state is changed, the other field **counties** gets filled with\n    all counties belonging to one of the selectd states. Setting up a form using this\n    functionality, can improve the user experience, because it reduces the available options to\n    user must choose from. This can be a better alternative rather than using option groups.\n\n    To make use of this feature, the widgets ``Selectize``, ``SelectizeMultiple`` and\n    ``DualSelector`` accept the optional argument ``filter_by`` which must contain a dictionary\n    where each key maps to an adjacent field and its value contains a lookup expression:\n\n    .. code-block:: python\n\n        from django.db import models\n        from formset.widgets import DualSelector, Selectize\n        from myapp.model import County, State\n\n        class StateForm(forms.Form):\n            states = models.ModelMultipleChoiceField(\n                queryset=State.objects.all(),\n                widget=SelectizeMultiple(\n                    search_lookup='name__icontains',\n                ),\n            )\n\n            counties = models.ModelMultipleChoiceField(\n                queryset=County.objects.all(),\n                widget=DualSelector(\n                    search_lookup=['name__icontains'],\n                    filter_by={'state': 'state__id'},\n                ),\n            )\n\n    There is another example named \"state\" which shows how to use this with a single\n    option.\n    \"\"\""
    ],
    "functions": [],
    "classes": [
        "StateForm",
        "StatesForm"
    ]
}