{
    "identifiers": [
        "microservice",
        "spark",
        "Spark",
        "get",
        "spark",
        "Spark",
        "put",
        "com",
        "google",
        "gson",
        "Gson",
        "spark",
        "Spark",
        "port",
        "java",
        "io",
        "BufferedReader",
        "java",
        "io",
        "InputStreamReader",
        "java",
        "io",
        "OutputStreamWriter",
        "java",
        "net",
        "HttpURLConnection",
        "java",
        "net",
        "URL",
        "java",
        "sql",
        "Connection",
        "java",
        "sql",
        "PreparedStatement",
        "java",
        "sql",
        "ResultSet",
        "java",
        "sql",
        "SQLException",
        "java",
        "sql",
        "DriverManager",
        "org",
        "json",
        "JSONArray",
        "org",
        "json",
        "JSONException",
        "org",
        "json",
        "JSONObject",
        "catalogIP_Port1",
        "url",
        "conn",
        "conn",
        "DriverManager",
        "getConnection",
        "url",
        "printf",
        "e",
        "e",
        "getMessage",
        "conn",
        "topic",
        "sql",
        "pstmt",
        "conn",
        "prepareStatement",
        "sql",
        "pstmt",
        "setString",
        "topic",
        "res",
        "pstmt",
        "executeQuery",
        "res",
        "isBeforeFirst",
        "resultStr",
        "res",
        "resultStr",
        "res",
        "e",
        "e",
        "getMessage",
        "resultStr",
        "id",
        "sql",
        "pstmt",
        "conn",
        "prepareStatement",
        "sql",
        "pstmt",
        "setInt",
        "id",
        "res",
        "pstmt",
        "executeQuery",
        "res",
        "isBeforeFirst",
        "resultStr",
        "res",
        "resultStr",
        "res",
        "e",
        "e",
        "getMessage",
        "resultStr",
        "conn",
        "connect",
        "resultSet",
        "jsonArray",
        "resultSet",
        "next",
        "columns",
        "resultSet",
        "getMetaData",
        "getColumnCount",
        "obj",
        "i",
        "i",
        "columns",
        "i",
        "obj",
        "put",
        "resultSet",
        "getMetaData",
        "getColumnLabel",
        "i",
        "toLowerCase",
        "resultSet",
        "getObject",
        "i",
        "jsonArray",
        "put",
        "obj",
        "jsonArray",
        "resultStr",
        "equals",
        "jsonArray",
        "put",
        "resultStr",
        "jsonArray",
        "id",
        "sql",
        "pstmt",
        "conn",
        "prepareStatement",
        "sql",
        "pstmt",
        "setInt",
        "id",
        "res",
        "pstmt",
        "executeQuery",
        "res",
        "getInt",
        "res",
        "getInt",
        "res",
        "getInt",
        "res",
        "next",
        "e",
        "e",
        "getMessage",
        "resultStr",
        "id",
        "quantity",
        "sql",
        "pstmt",
        "conn",
        "prepareStatement",
        "sql",
        "pstmt",
        "setInt",
        "quantity",
        "pstmt",
        "setInt",
        "id",
        "pstmt",
        "execute",
        "e",
        "e",
        "getMessage",
        "toJson",
        "quantity",
        "id",
        "quantity",
        "url2",
        "catalogIP_Port1",
        "id",
        "con",
        "url2",
        "openConnection",
        "con",
        "url2",
        "openConnection",
        "con",
        "setDoOutput",
        "con",
        "setRequestMethod",
        "con",
        "getOutputStream",
        "write",
        "quantity",
        "close",
        "in2",
        "con",
        "getInputStream",
        "inputLine2",
        "content2",
        "inputLine2",
        "in2",
        "readLine",
        "content2",
        "append",
        "inputLine2",
        "in2",
        "close",
        "content2",
        "contentEquals",
        "content2",
        "toJson",
        "quantity",
        "toJson",
        "quantity",
        "resultStr",
        "args",
        "app",
        "port",
        "get",
        "req",
        "res",
        "res",
        "convert",
        "app",
        "search",
        "req",
        "get",
        "req",
        "res",
        "res",
        "convert",
        "app",
        "info",
        "parseInt",
        "req",
        "get",
        "req",
        "res",
        "res",
        "app",
        "quantity",
        "parseInt",
        "req",
        "put",
        "req",
        "res",
        "res",
        "app",
        "purchaseFromMain",
        "parseInt",
        "req",
        "parseInt",
        "req",
        "body",
        "put",
        "req",
        "res",
        "res",
        "app",
        "purchase",
        "parseInt",
        "req",
        "parseInt",
        "req",
        "body"
    ],
    "literals": [
        "\"localhost:8077\"",
        "\"jdbc:sqlite:catalogdb\"",
        "\"COnnect Success\"",
        "\"SELECT id,title FROM  products WHERE topic = ?\"",
        "\"Not Found\"",
        "\"\"",
        "\"Not Found\"",
        "\"SELECT title,price,quantity FROM  products WHERE id = ?\"",
        "\"Not Found\"",
        "\"\"",
        "\"Not Found\"",
        "\"\"",
        "\"SELECT quantity FROM  products WHERE id = ?\"",
        "\"quantity = \"",
        "\"Sold out\"",
        "\"Not Found\"",
        "\"UPDATE products SET quantity = ? WHERE id = ?\"",
        "\"Purchase Successfully  \"",
        "\"Remaining = \"",
        "\"http://\"",
        "\"/purchase/\"",
        "\"PUT\"",
        "\"\"",
        "\"\"",
        "\"Purchase Successfully  \"",
        "\"Remaining = \"",
        "\"Purchase Error  \"",
        "\"Remaining = \"",
        "\"\"",
        "\"/search/:topic\"",
        "\"application/json\"",
        "\":topic\"",
        "\"/info/:id\"",
        "\"application/json\"",
        "\":id\"",
        "\"/purchase/:id\"",
        "\"application/json\"",
        "\":id\"",
        "\"/purchase/:id\"",
        "\"application/json\"",
        "\":id\"",
        "\"/purchaseConsistancy/:id\"",
        "\"application/json\"",
        "\":id\""
    ],
    "variables": [
        "inputLine2"
    ],
    "comments": [
        "ip and port for  catalog microservice",
        "Connect to sqlite catalog database",
        "SQLite connection string to the catalog database",
        "Method to search for the books And return the response (for each book return (id,title))",
        "sql query",
        "execute sql",
        "not found",
        "return values",
        "Method to return info about the book (title,price,quantity)",
        "sql query",
        "execute query",
        "not found",
        "return values",
        "create just one connection to the database",
        "Method to convert ResultSet to JSONArray (Also Add resultStr to the Array)",
        "Method to return the available quantity in stock",
        "sql query",
        "execute query",
        "return the available quantity",
        "not found",
        "empty",
        "Method to update the quantity and return the Remaining quantity after the update",
        "sql query",
        "no return value",
        "return message",
        "put in the message (quantity -1)",
        "read the response",
        "return message",
        "return message",
        "contain the message if there is to respond to user",
        "create an instance of the class",
        "start the microservice at port 8077",
        "when it receive a get http request for an topic use search method to search for the books",
        "And return the response",
        "when it receive a get http request for an id use info method to return info about the book",
        "when it receive a get http request for an id for purchase use quantity method to",
        "return the available quantity in stock",
        "when it receive a put http request for an id for purchase use purchase method to",
        "update the quantity and return the Remaining quantity after the update"
    ],
    "docstrings": [],
    "functions": [
        "Connection",
        "connect",
        "ResultSet",
        "search",
        "ResultSet",
        "info",
        "JSONArray",
        "convert",
        "quantity",
        "purchase",
        "purchaseFromMain",
        "main"
    ],
    "classes": [
        "CatalogMain2"
    ]
}