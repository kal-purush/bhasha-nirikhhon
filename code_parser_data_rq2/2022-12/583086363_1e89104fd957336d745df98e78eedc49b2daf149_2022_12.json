{
    "identifiers": [
        "WorkflowRunEvent",
        "APIMessage",
        "request",
        "env",
        "request",
        "Response",
        "workflowEvent",
        "request",
        "err",
        "Response",
        "env",
        "workflowEvent",
        "workflowMessageState",
        "workflowMessageState",
        "sendWebhook",
        "env",
        "workflowEvent",
        "workflowMessageState",
        "sendWebhook",
        "env",
        "workflowEvent",
        "env",
        "webhookResponse",
        "workflowEvent",
        "workflowEvent",
        "env",
        "workflowEvent",
        "Response",
        "env",
        "workflowEvent",
        "messageId",
        "env",
        "messageId",
        "url",
        "env",
        "messageId",
        "workflowEvent",
        "embedColour",
        "colours",
        "workflowEvent",
        "fetch",
        "url",
        "messageId",
        "workflowEvent",
        "workflowEvent",
        "workflowEvent",
        "workflowEvent",
        "workflowEvent",
        "workflowEvent",
        "workflowEvent",
        "workflowEvent",
        "workflowEvent",
        "embedColour",
        "workflowEvent",
        "workflowEvent",
        "workflowEvent",
        "workflowEvent",
        "resp",
        "resp",
        "resp",
        "webhookResp",
        "webhookResp"
    ],
    "literals": [
        "\"@octokit/webhooks-types\"",
        "\"discord-api-types/v10\"",
        "string",
        "string",
        "string",
        "\"POST\"",
        "\"Only POST method is supported.\"",
        "\"Malformed or missing JSON.\"",
        "\"SELECT * FROM DiscordWebhook WHERE WorkflowRunID = ?\"",
        "Existing run found, updating message: ${workflowMessageState}",
        "\"No `MessageID` stored for this workflow run, sending a new message.\"",
        "\"INSERT INTO DiscordWebhook (MessageID, WorkflowRunID) VALUES (?, ?)\"",
        "\"completed\"",
        "\"DELETE FROM DiscordWebhook WHERE WorkflowRunID = ?\"",
        "string",
        "${env.DISCORD_WEBHOOK}?wait=true",
        "${env.DISCORD_WEBHOOK}/messages/${messageId}?wait=true",
        "\"PATCH\"",
        "\"POST\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"\"",
        "\"rich\"",
        "[${workflowEvent?.repository.full_name}] Workflow ${workflowEvent?.workflow_run.name} triggered by ${workflowEvent?.workflow_run.actor.login} is ${workflowEvent?.workflow_run.status} on branch ${workflowEvent?.workflow_run.head_branch}",
        "**Trigger**: \\`${workflowEvent?.workflow_run.event}\\`\\n**Status**: ${workflowEvent?.workflow_run.status}\\n**Conclusion**: ${workflowEvent?.workflow_run.conclusion}\\n**Commit**: ${workflowEvent?.workflow_run.head_sha}",
        "Discord returned ${resp.status} ${\n      resp.statusText\n    } with body ${JSON.stringify(webhookResp)}"
    ],
    "variables": [
        "workflowEvent",
        "workflowMessageState",
        "webhookResponse",
        "url",
        "colours",
        "embedColour",
        "resp",
        "webhookResp"
    ],
    "comments": [
        "Check for an existing Discord message that we can update instead of posting a new one",
        "If the workflow is in a completed state, remove the entry from the database",
        "TODO: Support colours and info for workflow failures"
    ],
    "docstrings": [
        "* Sends or updates a Discord Webhook via the API.\n   * @param env Worker environment variables\n   * @param requestJson Workflow Run event from GitHub\n   * @param messageId If specified, a `PATCH` request will be sent to update the existing `messageId`"
    ],
    "functions": [
        "fetch",
        "sendWebhook"
    ],
    "classes": []
}