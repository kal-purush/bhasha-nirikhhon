{
    "identifiers": [
        "torch",
        "torch",
        "nn",
        "Parameter",
        "torch_scatter",
        "scatter_add",
        "torch_geometric",
        "nn",
        "conv",
        "MessagePassing",
        "torch_geometric",
        "utils",
        "add_remaining_self_loops",
        "torch_geometric",
        "nn",
        "inits",
        "glorot",
        "zeros",
        "MessagePassing",
        "in_channels",
        "out_channels",
        "weight",
        "bias",
        "improved",
        "use_bias",
        "kwargs",
        "aggr",
        "kwargs",
        "in_channels",
        "out_channels",
        "improved",
        "weight",
        "Parameter",
        "torch",
        "Tensor",
        "in_channels",
        "out_channels",
        "to",
        "torch",
        "float32",
        "glorot",
        "weight",
        "weight",
        "bias",
        "use_bias",
        "Parameter",
        "torch",
        "Tensor",
        "out_channels",
        "to",
        "torch",
        "float32",
        "register_parameter",
        "zeros",
        "bias",
        "bias",
        "staticmethod",
        "edge_index",
        "num_nodes",
        "edge_weight",
        "improved",
        "dtype",
        "edge_weight",
        "torch",
        "ones",
        "edge_index",
        "size",
        "dtype",
        "dtype",
        "device",
        "edge_index",
        "device",
        "improved",
        "add_remaining_self_loops",
        "edge_index",
        "edge_weight",
        "fill_value",
        "num_nodes",
        "edge_index",
        "scatter_add",
        "edge_weight",
        "row",
        "dim",
        "dim_size",
        "num_nodes",
        "deg",
        "pow",
        "deg_inv_sqrt",
        "edge_index",
        "deg_inv_sqrt",
        "row",
        "edge_weight",
        "deg_inv_sqrt",
        "col",
        "x",
        "edge_index",
        "cache_name",
        "edge_weight",
        "torch",
        "matmul",
        "x",
        "weight",
        "cache_name",
        "cache_dict",
        "norm",
        "edge_index",
        "x",
        "size",
        "edge_weight",
        "improved",
        "x",
        "dtype",
        "cache_dict",
        "edge_index",
        "norm",
        "cache_dict",
        "cache_name",
        "propagate",
        "edge_index",
        "x",
        "x",
        "norm",
        "norm",
        "x_j",
        "norm",
        "norm",
        "view",
        "x_j",
        "aggr_out",
        "bias",
        "aggr_out",
        "bias",
        "aggr_out",
        "format",
        "__class__",
        "in_channels",
        "out_channels"
    ],
    "literals": [
        "r\"\"\"The graph convolutional operator from the `\"Semi-supervised\n    Classification with Graph Convolutional Networks\"\n    <https://arxiv.org/abs/1609.02907>`_ paper\n\n    .. math::\n        \\mathbf{X}^{\\prime} = \\mathbf{\\hat{D}}^{-1/2} \\mathbf{\\hat{A}}\n        \\mathbf{\\hat{D}}^{-1/2} \\mathbf{X} \\mathbf{\\Theta},\n\n    where :math:`\\mathbf{\\hat{A}} = \\mathbf{A} + \\mathbf{I}` denotes the\n    adjacency matrix with inserted self-loops and\n    :math:`\\hat{D}_{ii} = \\sum_{j=0} \\hat{A}_{ij}` its diagonal degree matrix.\n\n    Args:\n        in_channels (int): Size of each input sample.\n        out_channels (int): Size of each output sample.\n        improved (bool, optional): If set to :obj:`True`, the layer computes\n            :math:`\\mathbf{\\hat{A}}` as :math:`\\mathbf{A} + 2\\mathbf{I}`.\n            (default: :obj:`False`)\n        cached (bool, optional): If set to :obj:`True`, the layer will cache\n            the computation of :math:`\\mathbf{\\hat{D}}^{-1/2} \\mathbf{\\hat{A}}\n            \\mathbf{\\hat{D}}^{-1/2}` on first execution, and will use the\n            cached version for further executions.\n            This parameter should only be set to :obj:`True` in transductive\n            learning scenarios. (default: :obj:`False`)\n        bias (bool, optional): If set to :obj:`False`, the layer will not learn\n            an additive bias. (default: :obj:`True`)\n        **kwargs (optional): Additional arguments of\n            :class:`torch_geometric.nn.conv.MessagePassing`.\n    \"\"\"",
        "'add'",
        "\"use shared weight\"",
        "'bias'",
        "\"use shared bias\"",
        "'inf'",
        "\"default_cache\"",
        "'{}({}, {})'"
    ],
    "variables": [
        "in_channels",
        "out_channels",
        "improved",
        "cache_dict",
        "weight",
        "weight",
        "bias",
        "bias",
        "edge_weight",
        "fill_value",
        "edge_index",
        "edge_weight",
        "row",
        "col",
        "deg",
        "deg_inv_sqrt",
        "deg_inv_sqrt",
        "x",
        "edge_index",
        "norm",
        "cache_name",
        "edge_index",
        "norm",
        "aggr_out"
    ],
    "comments": [
        "self.weight = Parameter(torch.Tensor(in_channels, out_channels))",
        "",
        "if bias:",
        "self.bias = Parameter(torch.Tensor(out_channels))",
        "else:",
        "self.register_parameter('bias', None)",
        "self.reset_parameters()",
        "def reset_parameters(self):",
        "glorot(self.weight)",
        "zeros(self.bias)",
        "self.cached_result = None",
        "self.cached_num_edges = None"
    ],
    "docstrings": [
        "\"\"\"\"\"\""
    ],
    "functions": [
        "norm",
        "forward",
        "message",
        "update",
        "__repr__"
    ],
    "classes": [
        "CachedGCNConv"
    ]
}