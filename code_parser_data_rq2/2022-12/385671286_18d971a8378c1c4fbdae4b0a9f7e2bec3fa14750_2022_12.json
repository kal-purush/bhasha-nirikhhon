{
    "identifiers": [
        "org",
        "apache",
        "guacamole",
        "auth",
        "jdbc",
        "tunnel",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicReference",
        "javax",
        "annotation",
        "Nonnull",
        "org",
        "apache",
        "guacamole",
        "GuacamoleException",
        "org",
        "apache",
        "guacamole",
        "GuacamoleUnauthorizedException",
        "org",
        "apache",
        "guacamole",
        "auth",
        "jdbc",
        "user",
        "ModeledAuthenticatedUser",
        "org",
        "apache",
        "guacamole",
        "auth",
        "jdbc",
        "user",
        "ModeledUser",
        "org",
        "apache",
        "guacamole",
        "auth",
        "jdbc",
        "user",
        "UserService",
        "org",
        "apache",
        "guacamole",
        "io",
        "GuacamoleReader",
        "org",
        "apache",
        "guacamole",
        "net",
        "DelegatingGuacamoleTunnel",
        "org",
        "apache",
        "guacamole",
        "net",
        "GuacamoleTunnel",
        "org",
        "apache",
        "guacamole",
        "protocol",
        "FilteredGuacamoleReader",
        "org",
        "apache",
        "guacamole",
        "protocol",
        "GuacamoleFilter",
        "org",
        "apache",
        "guacamole",
        "protocol",
        "GuacamoleInstruction",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "com",
        "google",
        "inject",
        "Inject",
        "com",
        "google",
        "inject",
        "assistedinject",
        "Assisted",
        "com",
        "google",
        "inject",
        "assistedinject",
        "AssistedInject",
        "logger",
        "LoggerFactory",
        "getLogger",
        "USER_MODEL_REFRESH_INTERVAL",
        "user",
        "userRefreshThread",
        "Inject",
        "userService",
        "AssistedInject",
        "Nonnull",
        "Assisted",
        "tunnel",
        "Nonnull",
        "Assisted",
        "modeledAuthenticatedUser",
        "tunnel",
        "user",
        "modeledAuthenticatedUser",
        "getUser",
        "userRefreshThread",
        "user",
        "userService",
        "retrieveUser",
        "modeledAuthenticatedUser",
        "getAuthenticationProvider",
        "modeledAuthenticatedUser",
        "e",
        "logger",
        "warn",
        "e",
        "getMessage",
        "logger",
        "debug",
        "e",
        "sleep",
        "USER_MODEL_REFRESH_INTERVAL",
        "e",
        "Override",
        "userRefreshThread",
        "start",
        "acquireReader",
        "Override",
        "instruction",
        "modeledUser",
        "user",
        "get",
        "modeledUser",
        "isAccountAccessible",
        "modeledUser",
        "isAccountValid",
        "modeledUser",
        "isDisabled",
        "instruction",
        "Override",
        "userRefreshThread",
        "interrupt",
        "releaseReader",
        "Override",
        "userRefreshThread",
        "interrupt",
        "close"
    ],
    "literals": [
        "\"Aborting user refresh thread due to error: {}\"",
        "\"Exception caught while attempting to refresh user.\"",
        "\"Permission Denied.\""
    ],
    "variables": [
        "user",
        "userRefreshThread",
        "userService"
    ],
    "comments": [
        "Fetch an up-to-date user record from the DB to ensure",
        "that any access restrictions modified while this tunnel",
        "is open will be taken into account",
        "If an error occurs while trying to fetch the updated user,",
        "log the warning / exception and stop the refresh thread",
        "Wait a bit before refreshing the user record again",
        "If interrupted by the tunnel, exit immediately",
        "Start periodically refreshing the user record",
        "Filter received instructions, checking if the user's login",
        "is still valid for each one. If the login is invalid,",
        "log them out immediately and close the tunnel.",
        "The user record, at most USER_MODEL_REFRESH_INTERVAL",
        "milliseconds old",
        "If the user is outside of a valid access time window,",
        "or disabled, throw an exception to immediately log them out",
        "Interrupt the refresh thread; it will clean itself up",
        "Interrupt the refresh thread; it will clean itself up"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.",
        "* A tunnel implementation that enforces access window restriction for the\n * provided ModeledUser, throwing a GuacamoleUnauthorizedException if the\n * user's configured access window has closed, or if the user has become\n * disabled. All other tunnel implementation is delegated to the underlying\n * tunnel object.",
        "* Logger for this class.",
        "* The number of milliseconds between subsequent refreshes of the user\n     * from the DB.",
        "* The user who's access window restrictions should be applied for the\n     * wrapped tunnel.",
        "* A thread that will continously refresh the user",
        "* A service to use for refreshing the user from the DB.",
        "* Create a new tunnel that will enforce the access window restrictions of\n     * the provided user, during usage of the provided tunnel.\n     *\n     * @param tunnel\n     *     The tunnel to delegate to.\n     *\n     * @param modeledAuthenticatedUser\n     *     The user whose access restrictions should be applied.\n     *"
    ],
    "functions": [
        "AccessEnforcingDelegatingTunnel",
        "GuacamoleReader",
        "acquireReader",
        "GuacamoleInstruction",
        "releaseReader",
        "close"
    ],
    "classes": [
        "AccessEnforcingDelegatingTunnel"
    ]
}