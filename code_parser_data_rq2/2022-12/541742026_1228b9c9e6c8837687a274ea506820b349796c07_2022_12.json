{
    "identifiers": [
        "json",
        "logging",
        "collections",
        "namedtuple",
        "datetime",
        "datetime",
        "typing",
        "Optional",
        "ops",
        "charm",
        "CharmEvents",
        "RelationChangedEvent",
        "RelationEvent",
        "RelationJoinedEvent",
        "ops",
        "framework",
        "EventSource",
        "ops",
        "model",
        "Relation",
        "logging",
        "getLogger",
        "RelationEvent",
        "property",
        "Optional",
        "relation",
        "data",
        "relation",
        "app",
        "get",
        "property",
        "Optional",
        "relation",
        "data",
        "relation",
        "app",
        "get",
        "property",
        "Optional",
        "relation",
        "data",
        "relation",
        "app",
        "get",
        "property",
        "Optional",
        "relation",
        "data",
        "relation",
        "app",
        "get",
        "property",
        "Optional",
        "relation",
        "data",
        "relation",
        "app",
        "get",
        "property",
        "Optional",
        "relation",
        "data",
        "relation",
        "app",
        "get",
        "property",
        "Optional",
        "relation",
        "data",
        "relation",
        "app",
        "get",
        "property",
        "Optional",
        "relation",
        "data",
        "relation",
        "app",
        "get",
        "property",
        "Optional",
        "relation",
        "data",
        "relation",
        "app",
        "get",
        "DatabaseEvent",
        "DatabaseEvent",
        "DatabaseEvent",
        "CharmEvents",
        "EventSource",
        "DatabaseCreatedEvent",
        "EventSource",
        "DatabaseEndpointsChangedEvent",
        "EventSource",
        "DatabaseReadOnlyEndpointsChangedEvent",
        "namedtuple",
        "DatabaseEvents",
        "charm",
        "relation_name",
        "database_name",
        "extra_user_roles",
        "relations_aliases",
        "charm",
        "relation_name",
        "charm",
        "database_name",
        "extra_user_roles",
        "charm",
        "model",
        "app",
        "charm",
        "unit",
        "relation_name",
        "relations_aliases",
        "framework",
        "observe",
        "charm",
        "on",
        "relation_name",
        "relation_joined",
        "_on_relation_joined_event",
        "framework",
        "observe",
        "charm",
        "on",
        "relation_name",
        "relation_changed",
        "_on_relation_changed_event",
        "relations_aliases",
        "charm",
        "meta",
        "requires",
        "relation_name",
        "limit",
        "len",
        "relations_aliases",
        "relation_connection_limit",
        "ValueError",
        "relation_connection_limit",
        "len",
        "relations_aliases",
        "relation_alias",
        "relations_aliases",
        "on",
        "define_event",
        "relation_alias",
        "DatabaseCreatedEvent",
        "on",
        "define_event",
        "relation_alias",
        "DatabaseEndpointsChangedEvent",
        "on",
        "define_event",
        "relation_alias",
        "DatabaseReadOnlyEndpointsChangedEvent",
        "relation_id",
        "relations_aliases",
        "charm",
        "model",
        "get_relation",
        "relation_name",
        "relation_id",
        "data",
        "local_unit",
        "get",
        "relations_aliases",
        "relation",
        "charm",
        "model",
        "relations",
        "relation_name",
        "relation",
        "data",
        "local_unit",
        "get",
        "alias",
        "logger",
        "debug",
        "alias",
        "relation",
        "id",
        "available_aliases",
        "remove",
        "alias",
        "charm",
        "model",
        "get_relation",
        "relation_name",
        "relation_id",
        "relation",
        "data",
        "local_unit",
        "update",
        "available_aliases",
        "RelationChangedEvent",
        "Diff",
        "json",
        "loads",
        "relation",
        "data",
        "local_unit",
        "get",
        "key",
        "value",
        "key",
        "value",
        "relation",
        "data",
        "app",
        "items",
        "key",
        "new_data",
        "keys",
        "old_data",
        "keys",
        "old_data",
        "keys",
        "new_data",
        "keys",
        "key",
        "key",
        "old_data",
        "keys",
        "new_data",
        "keys",
        "old_data",
        "key",
        "new_data",
        "key",
        "relation",
        "data",
        "local_unit",
        "update",
        "json",
        "dumps",
        "new_data",
        "Diff",
        "added",
        "changed",
        "deleted",
        "RelationChangedEvent",
        "event_name",
        "_get_relation_alias",
        "relation",
        "id",
        "alias",
        "getattr",
        "on",
        "alias",
        "event_name",
        "emit",
        "relation",
        "app",
        "app",
        "unit",
        "unit",
        "relation_id",
        "Optional",
        "relation",
        "charm",
        "model",
        "relations",
        "relation_name",
        "relation",
        "id",
        "relation_id",
        "relation",
        "data",
        "local_unit",
        "get",
        "relation",
        "relations",
        "relation",
        "id",
        "key",
        "value",
        "key",
        "value",
        "relation",
        "data",
        "relation",
        "app",
        "items",
        "key",
        "data",
        "relation",
        "relations",
        "relation",
        "data",
        "relation",
        "app",
        "relation",
        "data",
        "relation",
        "app",
        "relation_id",
        "data",
        "local_unit",
        "is_leader",
        "charm",
        "model",
        "get_relation",
        "relation_name",
        "relation_id",
        "relation",
        "data",
        "local_app",
        "update",
        "data",
        "RelationJoinedEvent",
        "_assign_relation_alias",
        "relation",
        "id",
        "extra_user_roles",
        "_update_relation_data",
        "relation",
        "id",
        "database",
        "extra_user_roles",
        "_update_relation_data",
        "relation",
        "id",
        "database",
        "RelationChangedEvent",
        "_diff",
        "diff",
        "added",
        "diff",
        "added",
        "logger",
        "info",
        "datetime",
        "now",
        "on",
        "database_created",
        "emit",
        "relation",
        "app",
        "app",
        "unit",
        "unit",
        "_emit_aliased_event",
        "diff",
        "added",
        "diff",
        "changed",
        "logger",
        "info",
        "datetime",
        "now",
        "on",
        "endpoints_changed",
        "emit",
        "relation",
        "app",
        "app",
        "unit",
        "unit",
        "_emit_aliased_event",
        "diff",
        "added",
        "diff",
        "changed",
        "logger",
        "info",
        "datetime",
        "now",
        "on",
        "read_only_endpoints_changed",
        "emit",
        "relation",
        "app",
        "app",
        "unit",
        "unit",
        "_emit_aliased_event",
        "property",
        "Relation",
        "charm",
        "model",
        "relations",
        "relation_name"
    ],
    "literals": [
        "\"0241e088ffa9440fb4e3126349b2fb62\"",
        "\"endpoints\"",
        "\"password\"",
        "\"read-only-endpoints\"",
        "\"replset\"",
        "\"tls\"",
        "\"tls-ca\"",
        "\"uris\"",
        "\"username\"",
        "\"version\"",
        "\"Diff\"",
        "\"added changed deleted\"",
        "f\"The number of aliases must match the maximum number of connections allowed in the relation. \"",
        "f\"Expected {relation_connection_limit}, got {len(relations_aliases)}\"",
        "f\"{relation_alias}_database_created\"",
        "f\"{relation_alias}_endpoints_changed\"",
        "f\"{relation_alias}_read_only_endpoints_changed\"",
        "\"alias\"",
        "\"alias\"",
        "\"Alias %s was already assigned to relation %d\"",
        "\"alias\"",
        "\"data\"",
        "\"{}\"",
        "\"data\"",
        "\"data\"",
        "f\"{alias}_{event_name}\"",
        "\"alias\"",
        "\"data\"",
        "\"username\"",
        "\"password\"",
        "\"database\"",
        "\"extra-user-roles\"",
        "\"database\"",
        "\"username\"",
        "\"password\"",
        "\"database created at %s\"",
        "\"database_created\"",
        "\"endpoints\"",
        "\"endpoints\"",
        "\"endpoints changed on %s\"",
        "\"endpoints_changed\"",
        "\"read-only-endpoints\"",
        "\"read-only-endpoints\"",
        "\"read-only-endpoints changed on %s\"",
        "\"read_only_endpoints_changed\""
    ],
    "variables": [
        "LIBID",
        "LIBAPI",
        "LIBPATCH",
        "logger",
        "database_created",
        "endpoints_changed",
        "read_only_endpoints_changed",
        "Diff",
        "Diff",
        "__doc__",
        "on",
        "charm",
        "database",
        "extra_user_roles",
        "local_app",
        "local_unit",
        "relation_name",
        "relations_aliases",
        "relation_connection_limit",
        "available_aliases",
        "alias",
        "relation",
        "old_data",
        "new_data",
        "added",
        "deleted",
        "changed",
        "alias",
        "data",
        "data",
        "relation",
        "diff"
    ],
    "comments": [
        "Copyright 2022 Canonical Ltd.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "The unique Charmhub library identifier, never change it",
        "Increment this major API version when introducing breaking changes",
        "Increment this PATCH version before using `charmcraft publish-lib` or reset",
        "to 0 if you are raising the major API version.",
        "Define custom event names for each alias.",
        "Ensure the number of aliases does not exceed the maximum",
        "of connections allowed in the specific relation.",
        "If no aliases were provided, return immediately.",
        "Return if an alias was already assigned to this relation",
        "(like when there are more than one unit joining the relation).",
        "Retrieve the available aliases (the ones that weren't assigned to any relation).",
        "Set the alias in the unit relation databag of the specific relation.",
        "Retrieve the old data from the data key in the local unit relation databag.",
        "Retrieve the new data from the event relation databag.",
        "These are the keys that were added to the databag and triggered this event.",
        "These are the keys that were removed from the databag and triggered this event.",
        "These are the keys that already existed in the databag,",
        "but had their values changed.",
        "TODO: evaluate the possibility of losing the diff if some error",
        "happens in the charm before the diff is completely checked (DPE-412).",
        "Convert the new_data to a serializable format and save it for a next diff check.",
        "Return the diff with all possible changes.",
        "If relations aliases were provided, assign one to the relation.",
        "Sets both database and extra user roles in the relation",
        "if the roles are provided. Otherwise, sets only the database.",
        "Check which data has changed to emit customs events.",
        "Check if the database is created",
        "(the database charm shared the credentials).",
        "Emit the default event (the one without an alias).",
        "Emit the aliased event (if any).",
        "To avoid unnecessary application restarts do not trigger",
        "“endpoints_changed“ event if “database_created“ is triggered.",
        "Emit an endpoints changed event if the database",
        "added or changed this info in the relation databag.",
        "Emit the default event (the one without an alias).",
        "Emit the aliased event (if any).",
        "To avoid unnecessary application restarts do not trigger",
        "“read_only_endpoints_changed“ event if “endpoints_changed“ is triggered.",
        "Emit a read only endpoints changed event if the database",
        "added or changed this info in the relation databag.",
        "Emit the default event (the one without an alias).",
        "Emit the aliased event (if any)."
    ],
    "docstrings": [
        "\"\"\"Relation 'requires' side abstraction for database relation.\n\nThis library is a uniform interface to a selection of common database\nmetadata, with added custom events that add convenience to database management,\nand methods to consume the application related data.\n\nFollowing an example of using the DatabaseCreatedEvent, in the context of the\napplication charm code:\n\n```python\n\nfrom charms.data_platform_libs.v0.database_requires import DatabaseRequires\n\nclass ApplicationCharm(CharmBase):\n    # Application charm that connects to database charms.\n\n    def __init__(self, *args):\n        super().__init__(*args)\n\n        # Charm events defined in the database requires charm library.\n        self.database = DatabaseRequires(self, relation_name=\"database\", database_name=\"database\")\n        self.framework.observe(self.database.on.database_created, self._on_database_created)\n\n    def _on_database_created(self, event: DatabaseCreatedEvent) -> None:\n        # Handle the created database\n\n        # Create configuration file for app\n        config_file = self._render_app_config_file(\n            event.username,\n            event.password,\n            event.endpoints,\n        )\n\n        # Start application with rendered configuration\n        self._start_application(config_file)\n\n        # Set active status\n        self.unit.status = ActiveStatus(\"received database credentials\")\n```\n\nAs shown above, the library provides some custom events to handle specific situations,\nwhich are listed below:\n\n— database_created: event emitted when the requested database is created.\n— endpoints_changed: event emitted when the read/write endpoints of the database have changed.\n— read_only_endpoints_changed: event emitted when the read-only endpoints of the database\n  have changed. Event is not triggered if read/write endpoints changed too.\n\nIf it is needed to connect multiple database clusters to the same relation endpoint\nthe application charm can implement the same code as if it would connect to only\none database cluster (like the above code example).\n\nTo differentiate multiple clusters connected to the same relation endpoint\nthe application charm can use the name of the remote application:\n\n```python\n\ndef _on_database_created(self, event: DatabaseCreatedEvent) -> None:\n    # Get the remote app name of the cluster that triggered this event\n    cluster = event.relation.app.name\n```\n\nIt is also possible to provide an alias for each different database cluster/relation.\n\nSo, it is possible to differentiate the clusters in two ways.\nThe first is to use the remote application name, i.e., `event.relation.app.name`, as above.\n\nThe second way is to use different event handlers to handle each cluster events.\nThe implementation would be something like the following code:\n\n```python\n\nfrom charms.data_platform_libs.v0.database_requires import DatabaseRequires\n\nclass ApplicationCharm(CharmBase):\n    # Application charm that connects to database charms.\n\n    def __init__(self, *args):\n        super().__init__(*args)\n\n        # Define the cluster aliases and one handler for each cluster database created event.\n        self.database = DatabaseRequires(\n            self,\n            relation_name=\"database\",\n            database_name=\"database\",\n            relations_aliases = [\"cluster1\", \"cluster2\"],\n        )\n        self.framework.observe(\n            self.database.on.cluster1_database_created, self._on_cluster1_database_created\n        )\n        self.framework.observe(\n            self.database.on.cluster2_database_created, self._on_cluster2_database_created\n        )\n\n    def _on_cluster1_database_created(self, event: DatabaseCreatedEvent) -> None:\n        # Handle the created database on the cluster named cluster1\n\n        # Create configuration file for app\n        config_file = self._render_app_config_file(\n            event.username,\n            event.password,\n            event.endpoints,\n        )\n        ...\n\n    def _on_cluster2_database_created(self, event: DatabaseCreatedEvent) -> None:\n        # Handle the created database on the cluster named cluster2\n\n        # Create configuration file for app\n        config_file = self._render_app_config_file(\n            event.username,\n            event.password,\n            event.endpoints,\n        )\n        ...\n\n```\n\"\"\"",
        "\"\"\"Base class for database events.\"\"\"",
        "\"\"\"Returns a comma separated list of read/write endpoints.\"\"\"",
        "\"\"\"Returns the password for the created user.\"\"\"",
        "\"\"\"Returns a comma separated list of read only endpoints.\"\"\"",
        "\"\"\"Returns the replicaset name.\n\n        MongoDB only.\n        \"\"\"",
        "\"\"\"Returns whether TLS is configured.\"\"\"",
        "\"\"\"Returns TLS CA.\"\"\"",
        "\"\"\"Returns the connection URIs.\n\n        MongoDB, Redis, OpenSearch and Kafka only.\n        \"\"\"",
        "\"\"\"Returns the created username.\"\"\"",
        "\"\"\"Returns the version of the database.\n\n        Version as informed by the database daemon.\n        \"\"\"",
        "\"\"\"Event emitted when a new database is created for use on this relation.\"\"\"",
        "\"\"\"Event emitted when the read/write endpoints are changed.\"\"\"",
        "\"\"\"Event emitted when the read only endpoints are changed.\"\"\"",
        "\"\"\"Database events.\n\n    This class defines the events that the database can emit.\n    \"\"\"",
        "\"\"\"\nA tuple for storing the diff between two data mappings.\n\n— added — keys that were added.\n— changed — keys that still exist but have new values.\n— deleted — keys that were deleted.\n\"\"\"",
        "\"\"\"Requires-side of the database relation.\"\"\"",
        "\"\"\"Manager of database client relations.\"\"\"",
        "\"\"\"Assigns an alias to a relation.\n\n        This function writes in the unit data bag.\n\n        Args:\n            relation_id: the identifier for a particular relation.\n        \"\"\"",
        "\"\"\"Retrieves the diff of the data in the relation changed databag.\n\n        Args:\n            event: relation changed event.\n\n        Returns:\n            a Diff instance containing the added, deleted and changed\n                keys from the event relation databag.\n        \"\"\"",
        "\"\"\"Emit an aliased event to a particular relation if it has an alias.\n\n        Args:\n            event: the relation changed event that was received.\n            event_name: the name of the event to emit.\n        \"\"\"",
        "\"\"\"Returns the relation alias.\n\n        Args:\n            relation_id: the identifier for a particular relation.\n\n        Returns:\n            the relation alias or None if the relation was not found.\n        \"\"\"",
        "\"\"\"Retrieves data from relation.\n\n        This function can be used to retrieve data from a relation\n        in the charm code when outside an event callback.\n\n        Returns:\n            a dict of the values stored in the relation data bag\n                for all relation instances (indexed by the relation ID).\n        \"\"\"",
        "\"\"\"Check if a database created.\n        This function can be used to check if the Provider answered with data\n        in the charm code when outside an event callback.\n        Returns:\n            True or False\n        \"\"\"",
        "\"\"\"Updates a set of key-value pairs in the relation.\n\n        This function writes in the application data bag, therefore,\n        only the leader unit can call it.\n\n        Args:\n            relation_id: the identifier for a particular relation.\n            data: dict containing the key-value pairs\n                that should be updated in the relation.\n        \"\"\"",
        "\"\"\"Event emitted when the application joins the database relation.\"\"\"",
        "\"\"\"Event emitted when the database relation has changed.\"\"\"",
        "\"\"\"The list of Relation instances associated with this relation_name.\"\"\""
    ],
    "functions": [
        "endpoints",
        "password",
        "read_only_endpoints",
        "replset",
        "tls",
        "tls_ca",
        "uris",
        "username",
        "version",
        "_assign_relation_alias",
        "_diff",
        "_emit_aliased_event",
        "_get_relation_alias",
        "fetch_relation_data",
        "is_database_created",
        "_update_relation_data",
        "_on_relation_joined_event",
        "_on_relation_changed_event",
        "relations"
    ],
    "classes": [
        "DatabaseEvent",
        "DatabaseCreatedEvent",
        "DatabaseEndpointsChangedEvent",
        "DatabaseReadOnlyEndpointsChangedEvent",
        "DatabaseEvents",
        "DatabaseRequires"
    ]
}