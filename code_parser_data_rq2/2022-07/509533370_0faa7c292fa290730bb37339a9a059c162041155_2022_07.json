{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "process",
        "Sequelize",
        "sequelizeConfig",
        "NODE_ENV",
        "getAllCongregations",
        "Congregation",
        "Address",
        "District",
        "City",
        "congregations",
        "getCongregationById",
        "id",
        "Congregation",
        "Address",
        "District",
        "City",
        "congregation",
        "httpStatus",
        "error",
        "congregation",
        "verifyIfExistsAddress",
        "addressData",
        "Address",
        "addressData",
        "address",
        "httpStatus",
        "error",
        "createCongregation",
        "data",
        "sequelize",
        "t",
        "verifyIfExistsAddress",
        "address",
        "City",
        "address",
        "t",
        "District",
        "address",
        "address",
        "city",
        "t",
        "Address",
        "address",
        "district",
        "district",
        "created",
        "address",
        "address",
        "t",
        "Congregation",
        "addressCreated",
        "t",
        "congregation",
        "congregationCreated",
        "er",
        "httpStatus",
        "er",
        "error"
    ],
    "literals": [
        "'dotenv'",
        "'sequelize'",
        "'../../database/config/config'",
        "'../../utils/httpStatus'",
        "'../../database/models'",
        "'address'",
        "'district'",
        "'city'",
        "'cityId'",
        "'districtId'",
        "'addressId'",
        "'address'",
        "'district'",
        "'city'",
        "'cityId'",
        "'districtId'",
        "'addressId'",
        "'Congregation not found'",
        "'Address already exists'"
    ],
    "variables": [
        "Sequelize",
        "sequelizeConfig",
        "httpStatus",
        "sequelize",
        "getAllCongregations",
        "congregations",
        "getCongregationById",
        "congregation",
        "error",
        "verifyIfExistsAddress",
        "address",
        "error",
        "createCongregation",
        "data",
        "congregationCreated",
        "city",
        "district",
        "created",
        "addressCreated",
        "congregation",
        "error"
    ],
    "comments": [
        "const updateCongregation = async (data) => {",
        "const {",
        "id, name, address, shepherd, region,",
        "} = data;",
        "try {",
        "const congregationUpdated = sequelize.transaction(async (t) => {",
        "const congregationFound = await Congregation.findByPk(id, { transaction: t });",
        "if (!congregationFound) {",
        "const error = {",
        "status: httpStatus.NOT_FOUND,",
        "message: 'Congregation not found',",
        "};",
        "throw error;",
        "}",
        "const addressFound = await Address.findByPk(congregationFound.address, { transaction: t });",
        "if (!addressFound) {",
        "const error = {",
        "status: httpStatus.NOT_FOUND,",
        "message: 'Address not found',",
        "};",
        "throw error;",
        "}",
        "const city = await City.findOne({",
        "where: { name: address.city },",
        "}, { transaction: t });",
        "const [district, created] = await District.findOrCreate({",
        "where: { name: address.district },",
        "defaults: { name: address.district, city: city.id },",
        "}, { transaction: t });",
        "await addressFound.update({",
        "address: address.address,",
        "district: district ? district.id : created.id,",
        "number: address.number,",
        "complement: address.complement,",
        "}, { transaction: t });",
        "await congregationFound.update({",
        "name,",
        "shepherd,",
        "region,",
        "}, { transaction: t });",
        "return congregationFound;",
        "});",
        "return congregationUpdated;",
        "} catch (er) {",
        "const error = {",
        "status: httpStatus.INTERNAL_SERVER_ERROR,",
        "message: er.message,",
        "};",
        "throw error;",
        "}",
        "};"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}