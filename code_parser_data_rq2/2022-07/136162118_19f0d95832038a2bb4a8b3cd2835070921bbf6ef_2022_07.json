{
    "identifiers": [
        "generateRandomNodeId",
        "runTestIfPlatforms",
        "testBinUtils",
        "path",
        "Logger",
        "LogLevel",
        "StreamHandler",
        "fs",
        "sleep",
        "globalRootKeyPems",
        "nodesUtils",
        "PolykeyAgent",
        "Host",
        "child_process",
        "nodeUtils",
        "Status",
        "config",
        "describe",
        "Logger",
        "LogLevel",
        "StreamHandler",
        "Logger",
        "LogLevel",
        "StreamHandler",
        "beforeEach",
        "dataDir",
        "fs",
        "path",
        "afterEach",
        "fs",
        "dataDir",
        "runTestIfPlatforms",
        "hosts",
        "host",
        "host",
        "path",
        "dataDir",
        "PolykeyAgent",
        "globalRootKeyPems",
        "loggerWarn",
        "host",
        "nodeUtils",
        "pkAgent",
        "host",
        "pkAgent",
        "dataDir",
        "nodePath",
        "generateRandomNodeId",
        "testBinUtils",
        "nodesUtils",
        "nodeId",
        "password",
        "envs",
        "dataDir",
        "host",
        "result1",
        "pkAgent",
        "pkAgent"
    ],
    "literals": [
        "'../utils'",
        "'./utils'",
        "'path'",
        "'@matrixai/logger'",
        "'fs'",
        "'@/utils/index'",
        "'../globalRootKeyPems'",
        "'@/nodes/utils'",
        "'@/PolykeyAgent'",
        "'@/network/types'",
        "'child_process'",
        "'@/nodes/utils'",
        "'@/status/index'",
        "'@/config'",
        "'sanity'",
        "'start test'",
        "'start test'",
        "'password'",
        "string",
        "'polykey-test-'",
        "'ENDING'",
        "'127.0.0.1'",
        "'docker'",
        "'weird problem with normal PK, %s'",
        "weird problem with normal PK, ${host}",
        "'polykey'",
        "'127.0.0.1'",
        "'127.0.0.1'",
        "'127.0.0.1'",
        "'127.0.0.1'",
        "${pkAgent.grpcServerClient.getPort()}",
        "'nodes'",
        "'add'",
        "'--verbose'",
        "'127.0.0.1'",
        "55555"
    ],
    "variables": [
        "loggerWarn",
        "loggerInfo",
        "password",
        "dataDir",
        "hosts",
        "nodePath",
        "pkAgent",
        "envs",
        "nodeId",
        "result1"
    ],
    "comments": [
        "runTestIfPlatforms('docker')('pkStdioTarget', async () => {",
        "console.log('pkStdioTarget')",
        "const result = await testBinUtils.pkStdioSwitch(global.testCmd)(",
        "[],",
        "{",
        "PK_PASSWORD: password,",
        "},",
        "dataDir,",
        ");",
        "console.log(result);",
        "});",
        "runTestIfPlatforms('docker')('pkSpawnTarget', async () => {",
        "console.log('pkSpawnTarget')",
        "const agentProcess = await testBinUtils.pkSpawnSwitch(global.testCmd)(",
        "[],",
        "{",
        "PK_PASSWORD: password,",
        "},",
        "dataDir,",
        "loggerWarn",
        ");",
        "await sleep(10000);",
        "agentProcess.kill();",
        "});",
        "runTestIfPlatforms('docker')('pkExecTarget', async () => {",
        "console.log('pkExecTarget')",
        "const result = await testBinUtils.pkExecSwitch(global.testCmd)(",
        "[],",
        "{",
        "PK_PASSWORD: password,",
        "},",
        "dataDir,",
        ");",
        "console.log(result);",
        "});",
        "runTestIfPlatforms('docker')('test agent', async () => {",
        "console.log('test agent')",
        "const testAgent1 =",
        "await testBinUtils.setupTestAgent(",
        "global.testCmd,",
        "globalRootKeyPems[0],",
        "loggerWarn",
        ");",
        "const testAgent2 =",
        "await testBinUtils.setupTestAgent(",
        "global.testCmd,",
        "globalRootKeyPems[1],",
        "loggerWarn",
        ");",
        "console.log(testAgent1.agentStatus);",
        "console.log(testAgent2.agentStatus);",
        "// console.log(child_process.execSync('docker network inspect $(docker network ls -q)').toString())",
        "await testAgent1.agentClose();",
        "await testAgent2.agentClose();",
        "});",
        "const hosts = ['docker', 'build', '127.0.0.1', 'localhost', undefined];",
        "runTestIfPlatforms('docker').each(hosts)('weird problem, %s', async (host) => {",
        "console.log(`weird problem, ${host}`)",
        "const testAgent =",
        "await testBinUtils.setupTestAgent(",
        "global.testCmd,",
        "globalRootKeyPems[0],",
        "loggerWarn",
        ");",
        "const envs = host != null ? {",
        "PK_NODE_ID: nodeUtils.encodeNodeId(testAgent.agentStatus.data.nodeId),",
        "PK_CLIENT_HOST: host,",
        "PK_CLIENT_PORT: `${testAgent.agentStatus.data.clientPort}`,",
        "PK_NODE_PATH: dataDir,",
        "} :",
        "{ PK_NODE_PATH: testAgent.agentDir };",
        "// const status = new Status({",
        "//   statusPath: path.join(testAgent.agentDir, config.defaults.statusBase),",
        "//   statusLockPath: path.join(",
        "//     testAgent.agentDir,",
        "//     'polykey',",
        "//     config.defaults.statusLockBase,",
        "//   ),",
        "//   fs,",
        "//   logger: loggerWarn,",
        "// })",
        "// console.log(await status.readStatus());",
        "const nodeId = generateRandomNodeId();",
        "const result1 = await testBinUtils.pkStdioSwitch(global.testCmd)(",
        "[",
        "'nodes',",
        "'add',",
        "'--verbose',",
        "// '--force',",
        "// '--no-ping',",
        "nodesUtils.encodeNodeId(nodeId),",
        "'127.0.0.1',",
        "`55555`,",
        "],",
        "{",
        "PK_PASSWORD: password,",
        "...envs,",
        "},",
        "host != null ? dataDir : testAgent.agentDir,",
        ");",
        "console.log(`weird problem, ${host}`, result1);",
        "await testAgent.agentClose();",
        "}, 60000);",
        "'--force',",
        "'--no-ping',"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}