{
    "identifiers": [
        "HW3",
        "rawData",
        "size",
        "size",
        "obj",
        "size",
        "rawData",
        "size",
        "size",
        "temp",
        "rawData",
        "rawData",
        "size",
        "i",
        "i",
        "size",
        "i",
        "rawData",
        "i",
        "temp",
        "i",
        "temp",
        "rawData",
        "obj",
        "size",
        "obj",
        "size",
        "rawData",
        "size",
        "size",
        "temp",
        "rawData",
        "rawData",
        "size",
        "i",
        "i",
        "size",
        "i",
        "rawData",
        "i",
        "temp",
        "i",
        "temp",
        "rawData",
        "size",
        "obj",
        "size",
        "size",
        "del_value",
        "getFront",
        "temp",
        "rawData",
        "rawData",
        "size",
        "i",
        "i",
        "size",
        "i",
        "rawData",
        "i",
        "temp",
        "i",
        "size",
        "del_value",
        "size",
        "del_value",
        "getRear",
        "rawData",
        "size",
        "size",
        "del_value",
        "size",
        "rawData",
        "size",
        "rawData",
        "size",
        "size",
        "index",
        "rawData",
        "index",
        "args",
        "hw",
        "hw",
        "insertFront",
        "hw",
        "insertFront",
        "hw",
        "insertFront",
        "hw",
        "insertFront",
        "hw",
        "insertRear",
        "hw",
        "insertFront",
        "i",
        "i",
        "hw",
        "size",
        "i",
        "hw",
        "rawData",
        "i",
        "hw",
        "size",
        "hw",
        "deleteFront",
        "hw",
        "deleteRear",
        "i",
        "i",
        "hw",
        "size",
        "i",
        "hw",
        "rawData",
        "i"
    ],
    "literals": [
        "\"deleting the front item is not possible.\"",
        "\"deleting the rear item is not possible.\"",
        "\"There is no element.\"",
        "\"There is no element.\"",
        "\" \"",
        "\" \""
    ],
    "variables": [
        "rawData",
        "size"
    ],
    "comments": [
        "You may add whatever fields/methods that are deemed necessary"
    ],
    "docstrings": [
        "* TODO: implement the following methods with appropriate header comments.",
        "* insertFront(E obj)\n\t * First check the array is empty. When array is empty just increase one for the size => constant time. \n\t * When the array has elements already, make new rawData[size + 1] => constant time.\n\t * And move all the elements from old array into new rawData start with index = 1 one by one => linear time. \n\t * Finally put obj to rawData[0] => constant time.\n\t * So time complexity is linear complexity which affected by the size of rawData.\n\t * O(N)",
        "* insertRear(E obj)\n\t * First check the array is empty. When array is empty just increase one for the size => constant time. \n\t * When the array has elements already, make new rawData[size + 1] => constant time. \n\t * And move all the elements from old array into new rawData start with index = 0 one by one => linear time.\n\t * And then put obj in the last of rawData => constant time\n\t * So time complexity is constant time.\n\t * O(N)",
        "* Return the deleted element.\n\t * Your code should also take appropriate action when deleting the front item is not possible.\n\t * (same for deleteRear(), getFront(), and getRear())",
        "* deleteFront(E obj)\n\t * First check the array is empty. When array is empty, throw exception => constant time. \n\t * When the array has elements already, make new rawData[size - 1] => constant time.\n\t * Move all the elements from the old array to sizeddown rawData one by one (except front value) => linear time.\n\t * So time complexity is linear complexity which affected by the size of rawData.\n\t * O(N)",
        "* deleteRear(E obj)\n\t * First check the array is empty. When array is empty, throw exception => constant time. \n\t * When the array has elements already, just delete rawData[size - 1] => constant time.\n\t * So time complexity is constant time\n\t * O(1)",
        "* TODO: Implement getFront(), getRear(), and size() methods.\n\t * I'm not providing the skeleton for these, so you'll have to come up with your own."
    ],
    "functions": [
        "HW3",
        "insertFront",
        "insertRear",
        "E",
        "deleteFront",
        "E",
        "deleteRear",
        "E",
        "getFront",
        "E",
        "getRear",
        "size",
        "E",
        "get",
        "main"
    ],
    "classes": [
        "HW3"
    ]
}