{
    "identifiers": [
        "browser",
        "element",
        "by",
        "protractor",
        "ElementFinder",
        "ElementArrayFinder",
        "describe",
        "beforeAll",
        "browser",
        "describe",
        "beforeAll",
        "getPage",
        "tests",
        "bobTests",
        "asyncValidationTests",
        "crossValidationTests",
        "describe",
        "beforeAll",
        "getPage",
        "tests",
        "bobTests",
        "asyncValidationTests",
        "crossValidationTests",
        "sectionTag",
        "element",
        "by",
        "sectionTag",
        "section",
        "by",
        "page",
        "section",
        "by",
        "section",
        "by",
        "section",
        "by",
        "section",
        "by",
        "section",
        "by",
        "section",
        "by",
        "section",
        "by",
        "buttons",
        "section",
        "by",
        "section",
        "by",
        "section",
        "by",
        "title",
        "it",
        "expect",
        "page",
        "title",
        "it",
        "expect",
        "page",
        "by",
        "it",
        "expect",
        "page",
        "it",
        "expectFormIsInvalid",
        "it",
        "expect",
        "page",
        "it",
        "page",
        "expect",
        "ele",
        "ele",
        "ele",
        "testName",
        "expectFormIsValid",
        "it",
        "page",
        "page",
        "protractor",
        "expect",
        "page",
        "expect",
        "page",
        "it",
        "page",
        "page",
        "expectFormIsInvalid",
        "expect",
        "page",
        "it",
        "page",
        "testName",
        "expectFormIsValid",
        "it",
        "page",
        "expect",
        "submitBtn",
        "it",
        "page",
        "expect",
        "page",
        "it",
        "expect",
        "page",
        "by",
        "it",
        "expect",
        "page",
        "testName",
        "it",
        "page",
        "by",
        "newFormBtn",
        "expect",
        "page",
        "by",
        "expect",
        "page",
        "expect",
        "page",
        "expect",
        "page",
        "element",
        "by",
        "browser",
        "it",
        "page",
        "page",
        "page",
        "page",
        "expectFormIsInvalid",
        "expect",
        "page",
        "emsg",
        "it",
        "page",
        "page",
        "testName",
        "expectFormIsValid",
        "it",
        "emsg",
        "page",
        "page",
        "triggerAlterEgoValidation",
        "waitForAlterEgoValidation",
        "expectFormIsInvalid",
        "expect",
        "page",
        "emsg",
        "it",
        "page",
        "page",
        "triggerAlterEgoValidation",
        "waitForAlterEgoValidation",
        "expectFormIsValid",
        "expect",
        "page",
        "it",
        "emsg",
        "page",
        "page",
        "page",
        "page",
        "triggerAlterEgoValidation",
        "waitForAlterEgoValidation",
        "expectFormIsInvalid",
        "expect",
        "page",
        "emsg",
        "it",
        "page",
        "page",
        "page",
        "page",
        "triggerAlterEgoValidation",
        "waitForAlterEgoValidation",
        "expectFormIsValid",
        "expect",
        "page"
    ],
    "literals": [
        "'protractor'",
        "'Form Validation Tests'",
        "''",
        "'Template-driven form'",
        "'app-hero-form-template'",
        "'Template-Driven Form'",
        "'Reactive form'",
        "'app-hero-form-reactive'",
        "'Reactive Form'",
        "'Test Name'",
        "string",
        "'button'",
        "'form'",
        "'h2'",
        "'#name'",
        "'#alterEgo'",
        "'#power'",
        "'#power option'",
        "'div.alert'",
        "'.submitted-message'",
        "'.alter-ego-errors'",
        "'.cross-validation-error-message'",
        "string",
        "'should display correct title'",
        "'should not display submitted message before submit'",
        "'p'",
        "'should have form buttons'",
        "'should have error at start'",
        "'should have disabled submit button'",
        "'resetting name to valid name should clear errors'",
        "'nameInput should exist'",
        "'should produce \"required\" error after clearing name'",
        "'x'",
        "'class'",
        "'ng-invalid'",
        "'required'",
        "'should produce \"at least 4 characters\" error when name=\"x\"'",
        "'x'",
        "'at least 4 characters'",
        "'resetting name to valid name again should clear errors'",
        "'should have enabled submit button'",
        "'should hide form after submit'",
        "'submitted form should be displayed'",
        "'p'",
        "'submitted form should have new hero name'",
        "'clicking edit button should reveal form again'",
        "'button'",
        "'p'",
        "'submitted hidden again'",
        "'can see form title'",
        "'class'",
        "'ng-valid'",
        "'class'",
        "'ng-invalid'",
        "'app-root'",
        "'Name cannot be Bob.'",
        "'should produce \"no bob\" error after setting name to \"Bobby\"'",
        "'Bobby'",
        "'should be ok again with valid name'",
        "'Alter ego is already taken.'",
        "should produce \"${emsg}\" error after setting alterEgo to Eric",
        "'Eric'",
        "'should be ok again with different values'",
        "'John'",
        "'Name cannot match alter ego.'",
        "should produce \"${emsg}\" error after setting name and alter ego to the same value",
        "'Batman'",
        "'Batman'",
        "'should be ok again with different values'",
        "'Batman'",
        "'Superman'"
    ],
    "variables": [
        "testName",
        "page",
        "section",
        "buttons",
        "ele",
        "submitBtn",
        "newFormBtn",
        "emsg",
        "emsg",
        "emsg"
    ],
    "comments": [
        "THESE TESTS ARE INCOMPLETE",
        "",
        "it('showForm', () => {",
        "page.form.getInnerHtml().then(html => console.log(html));",
        "});",
        "await page.alterEgoInput.click(); // to blur ... didn't work",
        "ugh!",
        "too short",
        "alterEgo has updateOn set to 'blur', click outside of the input to trigger the blur event",
        "alterEgo async validation will be performed in 400ms",
        "Re-populate select element"
    ],
    "docstrings": [],
    "functions": [
        "getPage",
        "tests",
        "expectFormIsValid",
        "expectFormIsInvalid",
        "triggerAlterEgoValidation",
        "waitForAlterEgoValidation",
        "bobTests",
        "asyncValidationTests",
        "crossValidationTests"
    ],
    "classes": []
}