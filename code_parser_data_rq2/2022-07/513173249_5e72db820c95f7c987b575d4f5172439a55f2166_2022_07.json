{
    "identifiers": [
        "input",
        "input",
        "split",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "array",
        "n",
        "array",
        "i",
        "size",
        "answer",
        "counter",
        "i",
        "leftChild",
        "i",
        "left_child",
        "size",
        "array",
        "left_child",
        "array",
        "min_ind",
        "left_child",
        "rightChild",
        "i",
        "right_child",
        "size",
        "array",
        "right_child",
        "array",
        "min_ind",
        "right_child",
        "min_ind",
        "i",
        "counter",
        "array",
        "min_ind",
        "array",
        "i",
        "array",
        "i",
        "array",
        "min_ind",
        "answer",
        "i",
        "min_ind",
        "_shiftDown",
        "array",
        "min_ind",
        "size",
        "i",
        "n",
        "_shiftDown",
        "array",
        "i",
        "n",
        "buildHeap",
        "nodes",
        "n",
        "counter",
        "val",
        "answer",
        "join",
        "val",
        "end",
        "input",
        "split",
        "input",
        "split",
        "i",
        "i",
        "n",
        "i",
        "i",
        "i",
        "n",
        "heap",
        "i",
        "heap",
        "minIndex",
        "i",
        "i",
        "n",
        "heap",
        "i",
        "heap",
        "minIndex",
        "i",
        "minIndex",
        "i",
        "heap",
        "minIndex",
        "heap",
        "i",
        "heap",
        "i",
        "heap",
        "minIndex",
        "shiftDown",
        "minIndex",
        "task",
        "tasks",
        "heap",
        "heap",
        "heap",
        "task",
        "shiftDown",
        "heapq",
        "heappush",
        "heappop",
        "input",
        "split",
        "input",
        "split",
        "i",
        "i",
        "n",
        "task",
        "tasks",
        "heappop",
        "heap",
        "cpu",
        "start",
        "heappush",
        "heap",
        "start",
        "task",
        "cpu"
    ],
    "literals": [
        "' '",
        "'\\n'"
    ],
    "variables": [
        "n",
        "nodes",
        "counter",
        "answer",
        "min_ind",
        "left_child",
        "min_ind",
        "right_child",
        "min_ind",
        "n",
        "m",
        "tasks",
        "heap",
        "minIndex",
        "minIndex",
        "minIndex",
        "n",
        "m",
        "tasks",
        "heap",
        "start",
        "cpu"
    ],
    "comments": [
        "Число узлов в куче",
        "Узлы",
        "-*- coding: utf-8 -*-",
        "Число процессоров и задач",
        "Решение с использованием встроенной библиотеки heapq",
        "Число процессоров и задач"
    ],
    "docstrings": [
        "\"\"\"\nПостроение кучи in place из входного массива\nhttps://stepik.org/lesson/41235/step/6?unit=19819\n10:30\n\"\"\"",
        "'''\nПо данным n процессорам и m задач определите, для каждой из задач,\nкаким процессором она будет обработана.\n\nВход. Число процессоров n и последовательность чисел\nt0, . . . , tm−1, где ti — время, необходимое на обработку i-й\nзадачи.\n\nВыход. Для каждой задачи определите, какой процессор\nи в какое время начнёт её обрабатывать, предполагая, что\nкаждая задача поступает на обработку первому освободившемуся процессору\n'''",
        "'''\nSample Input:\n\n2 5\n1 2 3 4 5\nSample Output:\n\n0 0\n1 0\n0 1\n1 2\n0 4\n'''"
    ],
    "functions": [
        "parent_id",
        "leftChild",
        "rightChild",
        "buildHeap",
        "_shiftDown",
        "shiftDown"
    ],
    "classes": []
}