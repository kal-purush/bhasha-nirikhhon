{
    "identifiers": [
        "abc",
        "six",
        "six",
        "add_metaclass",
        "abc",
        "ABCMeta",
        "abc",
        "ABCMeta",
        "abc",
        "abstractmethod",
        "name",
        "onnx_type",
        "shape",
        "content",
        "abc",
        "abstractmethod",
        "op_type",
        "inputs",
        "outputs",
        "op_domain",
        "op_version",
        "attrs",
        "six",
        "add_metaclass",
        "abc",
        "ABCMeta",
        "abc",
        "ABCMeta",
        "property",
        "abc",
        "abstractmethod",
        "property",
        "abc",
        "abstractmethod",
        "property",
        "abc",
        "abstractmethod",
        "property",
        "abc",
        "abstractmethod",
        "six",
        "add_metaclass",
        "abc",
        "ABCMeta",
        "abc",
        "ABCMeta"
    ],
    "literals": [
        "''"
    ],
    "variables": [
        "__metaclass",
        "__metaclass__",
        "__metaclass__"
    ],
    "comments": [
        "-------------------------------------------------------------------------",
        "Copyright (c) Microsoft Corporation. All rights reserved.",
        "Licensed under the MIT License. See License.txt in the project root for",
        "license information.",
        "--------------------------------------------------------------------------",
        "This file defines the interface of the converter internal object for callback,",
        "So the usage of the methods and properties list here will not be affected among the different versions."
    ],
    "docstrings": [
        "\"\"\"\n        Add a TensorProto into the initializer list of the final ONNX model\n\n        :param name: Variable name in the produced ONNX model.\n        :param onnx_type: Element types allowed in ONNX tensor, e.g., TensorProto.FLOAT and TensorProto.STRING.\n        :param shape: Tensor shape, a list of integers.\n        :param content: Flattened tensor values (i.e., a float list or a float array).\n        \"\"\"",
        "\"\"\"\n        Add a NodeProto into the node list of the final ONNX model. If the input operator's domain-version information\n        cannot be found in our domain-version pool (a Python set), we may add it.\n\n        :param op_type: A string (e.g., Pool and Conv) indicating the type of the NodeProto\n        :param inputs: A list of strings. They are the input variables' names of the considered NodeProto\n        :param outputs: A list of strings. They are the output variables' names of the considered NodeProto\n        :param op_domain: The domain name (e.g., ai.onnx.ml) of the operator we are trying to add.\n        :param op_version: The version number (e.g., 0 and 1) of the operator we are trying to add.\n        :param attrs: A Python dictionary. Keys and values are attributes' names and attributes' values, respectively.\n        \"\"\"",
        "\"\"\"\n        Return a globally unique operator ID\n        \"\"\"",
        "\"\"\"\n        Return all input variables' names\n        \"\"\"",
        "\"\"\"\n        Return all outpu variables' names\n        \"\"\"",
        "\"\"\"\n        Return the original operator/layer\n        \"\"\""
    ],
    "functions": [
        "add_initializer",
        "add_node",
        "full_name",
        "input_full_names",
        "output_full_names",
        "original_operator"
    ],
    "classes": [
        "ModelContainer",
        "OperatorBase",
        "ScopeBase"
    ]
}