{
    "identifiers": [
        "applyPendingChannelConnections",
        "Identity",
        "ProviderIdentity",
        "EventPayload",
        "ofEvents",
        "route",
        "getExternalOrOfWindowIdentity",
        "Channel",
        "targetIdentity",
        "listener",
        "eventPayload",
        "route",
        "targetIdentity",
        "ofEvents",
        "eventString",
        "listener",
        "ofEvents",
        "eventString",
        "listener",
        "channelId",
        "channelMap",
        "channelId",
        "uuid",
        "channelMap",
        "channel",
        "channel",
        "uuid",
        "providerIdentity",
        "channel",
        "providerIdentity",
        "identity",
        "channelName",
        "getExternalOrOfWindowIdentity",
        "identity",
        "targetApp",
        "getChannelByUuid",
        "identity",
        "nackString",
        "uuid",
        "name",
        "channelName",
        "targetApp",
        "channelMap",
        "channelId",
        "providerIdentity",
        "isExternal",
        "route",
        "uuid",
        "route",
        "uuid",
        "ofEvents",
        "eventString",
        "channelMap",
        "channelId",
        "ofEvents",
        "route",
        "uuid",
        "providerIdentity",
        "ofEvents",
        "route",
        "uuid",
        "providerIdentity",
        "setTimeout",
        "applyPendingChannelConnections",
        "uuid",
        "providerIdentity"
    ],
    "literals": [
        "'../api_protocol/api_handlers/channel_middleware'",
        "'../../shapes'",
        "'../of_events'",
        "'../../common/route'",
        "'../core_state'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'Register Failed: Please note that only one channel may be registered per application.'",
        "${uuid}/${name}/${channelName}",
        "'closed'",
        "'closed'",
        "'disconnected'",
        "'connected'"
    ],
    "variables": [
        "channelMap",
        "eventString",
        "providerIdentity",
        "targetApp",
        "nackString",
        "targetApp",
        "channelId",
        "providerIdentity",
        "eventString"
    ],
    "comments": [
        "Could be any identifier",
        "If a channel is already registered from that uuid, nack",
        "When channel exits, remove from channelMap",
        "execute requests to connect for channel that occured before channel registration. Timeout ensures registration concludes first."
    ],
    "docstrings": [],
    "functions": [
        "addEventListener",
        "getChannelByChannelId",
        "getChannelByUuid",
        "createChannel"
    ],
    "classes": []
}