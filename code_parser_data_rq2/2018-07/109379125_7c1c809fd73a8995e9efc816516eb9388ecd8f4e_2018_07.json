{
    "identifiers": [
        "emit",
        "action",
        "target",
        "callback",
        "action",
        "action",
        "target",
        "target",
        "action",
        "callback",
        "target",
        "elm",
        "target",
        "elm",
        "action",
        "callback",
        "target",
        "cbName",
        "Helpers",
        "events",
        "Events",
        "Events",
        "Events",
        "Events",
        "Events",
        "cbName",
        "Events",
        "cbName",
        "target",
        "cbName",
        "cbName",
        "Events",
        "cbName",
        "Helpers",
        "target",
        "callback",
        "target",
        "cbName",
        "Helpers",
        "events",
        "Events",
        "Events",
        "Events",
        "cbName",
        "Events",
        "cbName",
        "Events",
        "cbName",
        "Events",
        "Events",
        "Events",
        "Events",
        "Helpers",
        "target",
        "callback",
        "target",
        "opts",
        "emit",
        "target",
        "opts",
        "Events",
        "EventService"
    ],
    "literals": [
        "'../../../skatejs/dist/esnext/emit.js'",
        "' '",
        "' '",
        "'add'",
        "'addEventListener'",
        "'removeEventListener'",
        "'add'",
        "'remove'"
    ],
    "variables": [
        "Helpers",
        "EventService",
        "Events",
        "events",
        "callback",
        "events",
        "callback"
    ],
    "comments": [
        ":string[]",
        ":void",
        ":{} (this = consumer's module)",
        "Private\n\t *********",
        "Public API\n\t ************",
        ":void (space separated events)",
        "bind to module",
        "console.log(Events)",
        ":void (space separated events)",
        "console.log(Events)",
        ":boolean",
        "returns elm.dispatchEvent(e)",
        ":{}",
        "Export it!\n ************"
    ],
    "docstrings": [
        "***********************************************\n * EVENT SERVICE\n *************************************************\n * How To Use (import then call in constructor):\n - import EventService from './event-service.js';\n - this.rbEvent = EventService.call(this);\n ************************************************"
    ],
    "functions": [
        "getEvents",
        "handleEventListener"
    ],
    "classes": []
}