{
    "identifiers": [
        "argparse",
        "copy",
        "logging",
        "time",
        "urllib",
        "parse",
        "agithub",
        "GitHub",
        "GitHub",
        "func",
        "args",
        "expected_rc",
        "new_only",
        "headers",
        "no_cache",
        "kwargs",
        "urllib",
        "parse",
        "quote_plus",
        "kwargs",
        "headers",
        "func",
        "keywords",
        "kwargs",
        "setdefault",
        "real_headers",
        "update",
        "headers",
        "expected_rc",
        "func",
        "args",
        "kwargs",
        "rc",
        "logger",
        "error",
        "format",
        "url",
        "rc",
        "rc",
        "expected_rc",
        "logger",
        "error",
        "format",
        "query_string",
        "logger",
        "error",
        "format",
        "repr",
        "body",
        "expected_rc",
        "append",
        "rc",
        "rc",
        "rc",
        "expected_rc",
        "logger",
        "error",
        "format",
        "url",
        "expected_rc",
        "append",
        "rc",
        "logger",
        "debug",
        "format",
        "rc",
        "url",
        "rc",
        "expected_rc",
        "DEBUG",
        "pudb",
        "pudb",
        "set_trace",
        "logger",
        "error",
        "format",
        "rc",
        "url",
        "AG_Exception",
        "body",
        "func",
        "orig_args",
        "orig_kwargs",
        "copy",
        "deepcopy",
        "orig_kwargs",
        "copy",
        "deepcopy",
        "orig_args",
        "ag_call",
        "func",
        "args",
        "kwargs",
        "isinstance",
        "body",
        "body",
        "len",
        "body",
        "isinstance",
        "body",
        "body",
        "len",
        "body",
        "elem",
        "body",
        "elem",
        "kwargs",
        "open",
        "CREDENTIALS_FILE",
        "cf",
        "cf",
        "readline",
        "cf",
        "readline",
        "strip",
        "token",
        "get_token",
        "GitHub",
        "token",
        "token",
        "gh",
        "generateAuthHeader",
        "gh",
        "ag_call",
        "gh",
        "rate_limit",
        "get",
        "no_cache",
        "body",
        "ratelimit_dict",
        "body",
        "min_karma",
        "msg",
        "gh",
        "ag_call",
        "gh",
        "rate_limit",
        "get",
        "no_cache",
        "payload",
        "min_karma",
        "payload",
        "time",
        "time",
        "max",
        "core",
        "now",
        "logger",
        "info",
        "nap",
        "msg",
        "logger",
        "info",
        "msg",
        "time",
        "sleep",
        "nap",
        "logging",
        "getLogger",
        "scope",
        "term",
        "term",
        "scope",
        "q",
        "format",
        "scope",
        "q",
        "format",
        "scope",
        "q",
        "body",
        "ag_get_all",
        "gh",
        "search",
        "code",
        "get",
        "kwargs",
        "body",
        "logger",
        "error",
        "format",
        "join",
        "body",
        "keys",
        "logger",
        "debug",
        "format",
        "len",
        "body",
        "match",
        "body",
        "match",
        "repo",
        "found_repos",
        "found_repos",
        "add",
        "repo",
        "repo",
        "logger",
        "debug",
        "format",
        "repo",
        "owner",
        "repo",
        "format",
        "locals",
        "strip",
        "logger",
        "debug",
        "title",
        "logger",
        "debug",
        "message",
        "title",
        "message",
        "owner",
        "repo",
        "logger",
        "warning",
        "NoIssue",
        "owner",
        "repo",
        "issue",
        "get_message",
        "owner",
        "repo",
        "gh",
        "repos",
        "owner",
        "repo",
        "issues",
        "issue",
        "patch",
        "func",
        "keywords",
        "logger",
        "debug",
        "locals",
        "DRY_RUN",
        "func",
        "body",
        "payload",
        "status",
        "logger",
        "error",
        "locals",
        "text",
        "gh",
        "repos",
        "owner",
        "repo",
        "issues",
        "issue",
        "comments",
        "post",
        "body",
        "payload",
        "owner",
        "repo",
        "get_message",
        "owner",
        "repo",
        "title",
        "text",
        "gh",
        "repos",
        "owner",
        "repo",
        "issues",
        "post",
        "func",
        "keywords",
        "logger",
        "debug",
        "locals",
        "DRY_RUN",
        "func",
        "body",
        "payload",
        "status",
        "logger",
        "error",
        "locals",
        "driver",
        "parse_args",
        "gh",
        "get_github_client",
        "wait_for_ratelimit",
        "ag_call",
        "gh",
        "user",
        "get",
        "body",
        "logger",
        "info",
        "format",
        "collected_as",
        "ratelimit_remaining",
        "repo_full_name",
        "args",
        "repos",
        "logger",
        "info",
        "format",
        "repo_full_name",
        "repo_full_name",
        "split",
        "find_existing_issue",
        "owner",
        "repo",
        "update_issue",
        "owner",
        "repo",
        "issue",
        "NoIssue",
        "create_issue",
        "owner",
        "repo",
        "logger",
        "info",
        "format",
        "ratelimit_remaining",
        "argparse",
        "ArgumentParser",
        "description",
        "__doc__",
        "epilog",
        "help_epilog",
        "parser",
        "add_argument",
        "help",
        "nargs",
        "parser",
        "add_argument",
        "help",
        "action",
        "parser",
        "add_argument",
        "help",
        "action",
        "parser",
        "parse_args",
        "DEBUG",
        "DRY_RUN",
        "args",
        "dry_run",
        "args",
        "debug",
        "DRY_RUN",
        "DEBUG",
        "logger",
        "setLevel",
        "logging",
        "DEBUG",
        "args",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "INFO",
        "format",
        "main",
        "KeyboardInterrupt",
        "SystemExit"
    ],
    "literals": [
        "\".credentials\"",
        "\"messages.yaml\"",
        "\"q\"",
        "\"url\"",
        "\"headers\"",
        "\"Permanent Redirect for '{}'\"",
        "\"403 for query string '{}'\"",
        "\"response: '{}'\"",
        "\"No longer available or access denied: {}\"",
        "\"{} for {}\"",
        "\"{} for {}\"",
        "\"page\"",
        "\"items\"",
        "\"items\"",
        "\"page\"",
        "\"new_only\"",
        "\"\"",
        "\"r\"",
        "\"resources\"",
        "\"core\"",
        "\"remaining\"",
        "\"resources\"",
        "\"core\"",
        "\"remaining\"",
        "\"resources\"",
        "\"core\"",
        "\"reset\"",
        "\"napping for %s seconds\"",
        "\" in:file\"",
        "\"/\"",
        "\" repo:{}\"",
        "\" user:{}\"",
        "\"q\"",
        "\"items\"",
        "\"Unexpected keys: {}\"",
        "\" \"",
        "\"items in body: {}\"",
        "\"items\"",
        "\"items\"",
        "\"repository\"",
        "\"full_name\"",
        "\"another hit for {}\"",
        "\"Set protected status on production branch\"",
        "\"title: '%s'\"",
        "\"message: '%s'\"",
        "\"Search not yet implemented, will always open new issue\"",
        "\"state\"",
        "\"open\"",
        "\"url\"",
        "\"Commenting on %(issue)s via %(url)s\"",
        "\"Could not reopen %(url)s. Likely no write permission.\"",
        "\"body\"",
        "\"title\"",
        "\"body\"",
        "\"url\"",
        "\"Opening new issue via %(url)s\"",
        "\"Issue not opened for %(url)s status %(status)s\"",
        "\"login\"",
        "\"Running as {} ({} API calls remaining)\"",
        "\"Starting on {}\"",
        "\"/\"",
        "\"Done with {} API calls remaining\"",
        "\"repos\"",
        "\"owner/repo to open issue on\"",
        "\"+\"",
        "\"--debug\"",
        "\"log at DEBUG level\"",
        "\"store_true\"",
        "\"--dry-run\"",
        "\"Do not open issues\"",
        "\"store_true\"",
        "\"__main__\"",
        "\"%(asctime)s %(levelname)s: %(message)s\""
    ],
    "variables": [
        "help_epilog",
        "DEBUG",
        "CREDENTIALS_FILE",
        "MESSAGES_FILE",
        "headers",
        "url",
        "real_headers",
        "expected_rc",
        "rc",
        "body",
        "body",
        "body",
        "kwargs",
        "args",
        "kwargs",
        "body",
        "kwargs",
        "token",
        "token",
        "token",
        "gh",
        "body",
        "body",
        "payload",
        "core",
        "now",
        "nap",
        "logger",
        "Pseudo_code",
        "gh",
        "q",
        "kwargs",
        "found_repos",
        "repo",
        "title",
        "message",
        "_",
        "text",
        "payload",
        "func",
        "url",
        "status",
        "_",
        "payload",
        "title",
        "text",
        "payload",
        "func",
        "url",
        "status",
        "_",
        "args",
        "gh",
        "body",
        "collected_as",
        "owner",
        "repo",
        "issue",
        "parser",
        "args",
        "DRY_RUN",
        "DEBUG"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "agithub utility functions",
        "Insert our (possibly modified) headers",
        "If we have new information, we want to use it (and store it unless",
        "no_cache is true)",
        "If we are told our existing info is ok, or there's an error, use the",
        "stored info",
        "Handle repo rename/removal corner cases",
        "TODO: do something better, like switch to using id's",
        "for now, act like nothing is there",
        "don't throw on this one, but do show query string",
        "for search, there is a seperate rate limit we don't yet take into",
        "account:",
        "https://developer.github.com/v3/search/#rate-limit",
        "TODO: Figure out what to do here. Maybe it's just that message, but",
        "maybe need to delete from DB before next run",
        "don't throw on this one",
        "noqa: E702",
        "search results are ugly",
        "fix up to get next page, without changing query set",
        "GitHub API v3 support",
        "skip first line",
        "gh = github3.login(token=token)",
        "return gh.ratelimit_remaining",
        "finally, our app!",
        "SHH, globals, don't tell anyone",
        "403 or something we don't expect",
        "open bug in case it was closed",
        "multiple calls, all debug info out already, so bail",
        "add comment",
        "multiple calls, all debug info out already, so bail"
    ],
    "docstrings": [
        "\"\"\"\nCreate issue in supplied org/repositories\n\nWe reopen an issue if it already exists\n\"\"\"",
        "\"\"\"\nUses GitHub's search to find existing issues, then reopens or creates one as\nappropriate.\n\"\"\"",
        "\"\"\"\n    Wrap AGitHub calls with basic error detection\n\n    Not smart, and hides any error information from caller.\n    But very convenient. :)\n    \"\"\"",
        "\"\"\"\n    Generator for multi-page GitHub responses\n\n    It hacks the \"page\" query parameter to each call to get the next page. This\n    is Not a general solution - it does not follow the links in the headers\n    like a good client should.\n    \"\"\"",
        "\"\"\"\n    for each repo\n        search for existing issue\n        if none:\n            create new issue with message\n        else if issue closed:\n            reopen with message\n        else:\n            add message\n\"\"\"",
        "\"\"\"\n    Generator for repositories containing term\n    \"\"\"",
        "\"\"\"\n    Return a fully expanded message body & title\n\n    ToDo: read from yaml file\n    \"\"\"",
        "\"\"\"\nThe production branch on this repository is not protected against \\\nforce pushes. This setting is recommended as part of [Mozilla's \\\nGuidelines][guidelines_url] for a Sensitive Repository.\n\n**Anyone with admin permissions for this repository can correct the \\\nsetting using [this URL][protect_url].**\n\nIf you have any questions, or believe this issue was opened in \\\nerror, please contact [us][email] and mention SOGH0001 and this repository.\n\nThank you for your prompt attention to this issue.\n--Firefox Security Operations team\n\n[guidelines_url]: https://wiki.mozilla.org/GitHub/Repository_Security\n[protect_url]: https://github.com/{owner}/{repo}/settings/branches\n[email]: <mailto:secops+github@mozilla.com?subject=SOGH0001+Question+re+\\\n{owner}/{repo}>\n    \"\"\"",
        "\"\"\"\n        Update an existing issue, and make sure it is not closed.\n\n        ToDo: consider different message text when reopening\n              maybe prepend \"REOPENED: \" to title?\n    \"\"\"",
        "\"\"\"\n        Create a new issue\n    \"\"\""
    ],
    "functions": [
        "ag_call",
        "query_string",
        "ag_get_all",
        "get_github_client",
        "get_token",
        "ratelimit_dict",
        "ratelimit_remaining",
        "wait_for_ratelimit",
        "matching_repos",
        "get_message",
        "find_existing_issue",
        "update_issue",
        "create_issue",
        "main",
        "parse_args"
    ],
    "classes": [
        "AG_Exception",
        "NoIssue"
    ]
}