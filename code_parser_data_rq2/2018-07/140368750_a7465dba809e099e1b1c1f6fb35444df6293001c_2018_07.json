{
    "identifiers": [
        "process",
        "isNodeJS",
        "require",
        "require",
        "require",
        "b",
        "nodeCrypto",
        "b",
        "process",
        "sec",
        "nsec",
        "require",
        "util",
        "util",
        "fd",
        "buf",
        "outputBuf",
        "decoder",
        "buf",
        "outputBuf",
        "nl",
        "outputBuf",
        "nl",
        "outputBuf",
        "outputBuf",
        "nl",
        "buf",
        "path",
        "flags",
        "mode",
        "err",
        "err",
        "TextEncoder",
        "TextDecoder",
        "code",
        "code",
        "code",
        "mem",
        "DataView",
        "setInt64",
        "addr",
        "v",
        "mem",
        "addr",
        "v",
        "mem",
        "addr",
        "v",
        "getInt64",
        "addr",
        "mem",
        "addr",
        "mem",
        "addr",
        "low",
        "high",
        "loadValue",
        "addr",
        "mem",
        "addr",
        "isNaN",
        "f",
        "f",
        "mem",
        "addr",
        "id",
        "storeValue",
        "addr",
        "v",
        "v",
        "isNaN",
        "v",
        "mem",
        "addr",
        "nanHead",
        "mem",
        "addr",
        "mem",
        "addr",
        "v",
        "v",
        "mem",
        "addr",
        "nanHead",
        "mem",
        "addr",
        "mem",
        "addr",
        "nanHead",
        "mem",
        "addr",
        "mem",
        "addr",
        "nanHead",
        "mem",
        "addr",
        "mem",
        "addr",
        "nanHead",
        "mem",
        "addr",
        "v",
        "v",
        "v",
        "v",
        "typeFlag",
        "typeFlag",
        "typeFlag",
        "mem",
        "addr",
        "nanHead",
        "typeFlag",
        "mem",
        "addr",
        "loadSlice",
        "addr",
        "getInt64",
        "addr",
        "getInt64",
        "addr",
        "Uint8Array",
        "array",
        "len",
        "loadSliceOfValues",
        "addr",
        "getInt64",
        "addr",
        "getInt64",
        "addr",
        "len",
        "i",
        "len",
        "i",
        "a",
        "i",
        "loadValue",
        "array",
        "i",
        "a",
        "loadString",
        "addr",
        "getInt64",
        "addr",
        "getInt64",
        "addr",
        "decoder",
        "DataView",
        "saddr",
        "len",
        "performance",
        "sp",
        "mem",
        "sp",
        "sp",
        "getInt64",
        "sp",
        "getInt64",
        "sp",
        "mem",
        "sp",
        "fs",
        "fd",
        "Uint8Array",
        "p",
        "n",
        "sp",
        "setInt64",
        "sp",
        "timeOrigin",
        "performance",
        "sp",
        "setInt64",
        "sp",
        "msec",
        "mem",
        "sp",
        "msec",
        "sp",
        "id",
        "setTimeout",
        "getInt64",
        "sp",
        "mem",
        "sp",
        "id",
        "sp",
        "mem",
        "sp",
        "clearTimeout",
        "id",
        "id",
        "sp",
        "crypto",
        "loadSlice",
        "sp",
        "sp",
        "storeValue",
        "sp",
        "loadString",
        "sp",
        "sp",
        "storeValue",
        "sp",
        "loadValue",
        "sp",
        "loadString",
        "sp",
        "sp",
        "loadValue",
        "sp",
        "loadString",
        "sp",
        "loadValue",
        "sp",
        "sp",
        "storeValue",
        "sp",
        "loadValue",
        "sp",
        "getInt64",
        "sp",
        "sp",
        "loadValue",
        "sp",
        "getInt64",
        "sp",
        "loadValue",
        "sp",
        "sp",
        "loadValue",
        "sp",
        "v",
        "loadString",
        "sp",
        "loadSliceOfValues",
        "sp",
        "storeValue",
        "sp",
        "m",
        "v",
        "args",
        "mem",
        "sp",
        "err",
        "storeValue",
        "sp",
        "err",
        "mem",
        "sp",
        "sp",
        "loadValue",
        "sp",
        "loadSliceOfValues",
        "sp",
        "storeValue",
        "sp",
        "v",
        "args",
        "mem",
        "sp",
        "err",
        "storeValue",
        "sp",
        "err",
        "mem",
        "sp",
        "sp",
        "loadValue",
        "sp",
        "loadSliceOfValues",
        "sp",
        "storeValue",
        "sp",
        "v",
        "args",
        "mem",
        "sp",
        "err",
        "storeValue",
        "sp",
        "err",
        "mem",
        "sp",
        "sp",
        "setInt64",
        "sp",
        "parseInt",
        "loadValue",
        "sp",
        "sp",
        "encoder",
        "loadValue",
        "sp",
        "storeValue",
        "sp",
        "setInt64",
        "sp",
        "sp",
        "loadValue",
        "sp",
        "loadSlice",
        "sp",
        "sp",
        "mem",
        "sp",
        "loadValue",
        "sp",
        "loadValue",
        "sp",
        "value",
        "value",
        "instance",
        "instance",
        "NaN",
        "setTimeout",
        "DataView",
        "strPtr",
        "Uint8Array",
        "mem",
        "offset",
        "encoder",
        "offset",
        "ptr",
        "arg",
        "argvPtrs",
        "strPtr",
        "arg",
        "argvPtrs",
        "keys",
        "keys",
        "key",
        "argvPtrs",
        "strPtr",
        "key",
        "key",
        "argvPtrs",
        "ptr",
        "mem",
        "offset",
        "ptr",
        "mem",
        "offset",
        "offset",
        "resolve",
        "resolve",
        "argc",
        "argv",
        "callbackPromise",
        "isNodeJS",
        "process",
        "process",
        "process",
        "Go",
        "go",
        "process",
        "go",
        "process",
        "go",
        "process",
        "WebAssembly",
        "fs",
        "process",
        "go",
        "result",
        "process",
        "go",
        "process",
        "go",
        "result",
        "err",
        "err",
        "go",
        "process"
    ],
    "literals": [
        "\"undefined\"",
        "\"fs\"",
        "\"crypto\"",
        "\"util\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"cannot export Go (neither window nor self is defined)\"",
        "\"\"",
        "\"\\n\"",
        "\"not implemented\"",
        "\"ENOSYS\"",
        "\"utf-8\"",
        "\"utf-8\"",
        "\"js\"",
        "\"exit code:\"",
        "\"number\"",
        "\"string\"",
        "\"symbol\"",
        "\"function\"",
        "\"runtime.wasmExit\"",
        "\"runtime.wasmWrite\"",
        "\"runtime.nanotime\"",
        "\"runtime.walltime\"",
        "\"runtime.scheduleCallback\"",
        "\"runtime.clearScheduledCallback\"",
        "\"runtime.getRandomData\"",
        "\"syscall/js.stringVal\"",
        "\"syscall/js.valueGet\"",
        "\"syscall/js.valueSet\"",
        "\"syscall/js.valueIndex\"",
        "\"syscall/js.valueSetIndex\"",
        "\"syscall/js.valueCall\"",
        "\"syscall/js.valueInvoke\"",
        "\"syscall/js.valueNew\"",
        "\"syscall/js.valueLength\"",
        "\"syscall/js.valuePrepareString\"",
        "\"syscall/js.valueLoadString\"",
        "\"syscall/js.valueInstanceOf\"",
        "\"debug\"",
        "\"bad callback: Go program has already exited\"",
        "\"\\0\"",
        "${key}=${this.env[key]}",
        "\"usage: go_js_wasm_exec [wasm binary] [arguments]\\n\"",
        "\"exit\"",
        "\"error: all goroutines asleep and no JavaScript callback pending - deadlock!\""
    ],
    "variables": [
        "isNodeJS",
        "nodeCrypto",
        "sec",
        "nsec",
        "util",
        "outputBuf",
        "nl",
        "err",
        "encoder",
        "decoder",
        "mem",
        "setInt64",
        "getInt64",
        "low",
        "high",
        "loadValue",
        "f",
        "id",
        "storeValue",
        "nanHead",
        "typeFlag",
        "loadSlice",
        "array",
        "len",
        "loadSliceOfValues",
        "array",
        "len",
        "a",
        "i",
        "loadString",
        "saddr",
        "len",
        "timeOrigin",
        "fd",
        "p",
        "n",
        "msec",
        "id",
        "id",
        "v",
        "m",
        "args",
        "v",
        "args",
        "v",
        "args",
        "mem",
        "offset",
        "strPtr",
        "ptr",
        "offset",
        "argc",
        "argvPtrs",
        "keys",
        "argv",
        "offset",
        "callbackPromise",
        "go"
    ],
    "comments": [
        "Copyright 2018 The Go Authors. All rights reserved.",
        "Use of this source code is governed by a BSD-style",
        "license that can be found in the LICENSE file.",
        "Map web browser API and Node.js API to a single common API (preferring web standards over Node.js API).",
        "unused",
        "The buffer may change when requesting more memory.",
        "func wasmExit(code int32)",
        "func wasmWrite(fd uintptr, p unsafe.Pointer, n int32)",
        "func nanotime() int64",
        "func walltime() (sec int64, nsec int32)",
        "func scheduleCallback(delay int64) int32",
        "setTimeout has been seen to fire up to 1 millisecond early",
        "func clearScheduledCallback(id int32)",
        "func getRandomData(r []byte)",
        "func stringVal(value string) ref",
        "func valueGet(v ref, p string) ref",
        "func valueSet(v ref, p string, x ref)",
        "func valueIndex(v ref, i int) ref",
        "valueSetIndex(v ref, i int, x ref)",
        "func valueCall(v ref, m string, args []ref) (ref, bool)",
        "func valueInvoke(v ref, args []ref) (ref, bool)",
        "func valueNew(v ref, args []ref) (ref, bool)",
        "func valueLength(v ref) int",
        "valuePrepareString(v ref) (ref, int)",
        "valueLoadString(v ref, b []byte)",
        "func valueInstanceOf(v ref, t ref) bool",
        "TODO: garbage collection",
        "resolveCallbackPromise",
        "make sure it is asynchronous",
        "Pass command line arguments and environment variables to WebAssembly by writing them to the linear memory.",
        "Node.js exits if no callback is pending"
    ],
    "docstrings": [],
    "functions": [
        "getRandomValues",
        "now",
        "writeSync",
        "openSync",
        "run"
    ],
    "classes": []
}