{
    "identifiers": [
        "argparse",
        "os",
        "elektronn3",
        "models",
        "fcn_2d",
        "elektronn3",
        "data",
        "transforms",
        "RandomFlip",
        "elektronn3",
        "data",
        "transforms",
        "torch",
        "torch",
        "nn",
        "torch",
        "optim",
        "elektronn3",
        "training",
        "loss",
        "BlurryBoarderLoss",
        "DiceLoss",
        "LovaszLoss",
        "VGGNet",
        "model",
        "requires_grad",
        "in_channels",
        "FCNs",
        "base_net",
        "vgg_model",
        "n_class",
        "model",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "args",
        "disable_cuda",
        "torch",
        "cuda",
        "is_available",
        "torch",
        "device",
        "torch",
        "device",
        "device",
        "elektronn3",
        "elektronn3",
        "select_mpl_backend",
        "elektronn3",
        "training",
        "Trainer",
        "Backup",
        "syconn",
        "cnn",
        "TrainData",
        "MultiviewData",
        "torch",
        "manual_seed",
        "os",
        "path",
        "expanduser",
        "args",
        "max_steps",
        "get_model",
        "torch",
        "cuda",
        "device_count",
        "torch",
        "cuda",
        "device_count",
        "batch_size",
        "torch",
        "cuda",
        "device_count",
        "nn",
        "DataParallel",
        "model",
        "model",
        "to",
        "device",
        "transforms",
        "Compose",
        "RandomFlip",
        "ndim_spatial",
        "MultiviewData",
        "train",
        "transform",
        "transform",
        "MultiviewData",
        "train",
        "transform",
        "transform",
        "optim",
        "Adam",
        "model",
        "parameters",
        "weight_decay",
        "lr",
        "lr",
        "amsgrad",
        "optim",
        "lr_scheduler",
        "StepLR",
        "optimizer",
        "lr_stepsize",
        "lr_dec",
        "BlurryBoarderLoss",
        "to",
        "device",
        "Trainer",
        "model",
        "model",
        "criterion",
        "criterion",
        "optimizer",
        "optimizer",
        "device",
        "device",
        "train_dataset",
        "train_dataset",
        "valid_dataset",
        "valid_dataset",
        "batchsize",
        "batch_size",
        "num_workers",
        "save_root",
        "save_root",
        "exp_name",
        "args",
        "exp_name",
        "schedulers",
        "lr_sched",
        "ipython_on_error",
        "Backup",
        "script_path",
        "save_path",
        "trainer",
        "save_path",
        "archive_backup",
        "trainer",
        "train",
        "max_steps"
    ],
    "literals": [
        "'vgg13'",
        "\"__main__\"",
        "'Train a network.'",
        "'--disable-cuda'",
        "'store_true'",
        "'Disable CUDA'",
        "'-n'",
        "'--exp-name'",
        "\"FCN-VGG13--BlurryBoundary--NewGT\"",
        "'Manually set experiment name'",
        "'-m'",
        "'--max-steps'",
        "'Maximum number of training steps to perform.'",
        "'cuda'",
        "'cpu'",
        "f'Running on device: {device}'",
        "'Agg'",
        "'~/e3training/'",
        "\"Let's use\"",
        "\"GPUs!\"",
        "\"lr\""
    ],
    "variables": [
        "vgg_model",
        "model",
        "parser",
        "args",
        "device",
        "device",
        "save_root",
        "max_steps",
        "lr",
        "lr_stepsize",
        "lr_dec",
        "batch_size",
        "model",
        "batch_size",
        "model",
        "transform",
        "train_dataset",
        "valid_dataset",
        "optimizer",
        "lr_sched",
        "criterion",
        "trainer",
        "bk"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "Copyright (c) 2017 - now",
        "Max Planck Institute of Neurobiology, Munich, Germany",
        "Authors: Philipp Schubert",
        "Don't move this stuff, it needs to be run this early to work",
        "USER PATHS",
        "dim = 0 [20, xxx] -> [10, ...], [10, ...] on 2 GPUs",
        "Specify data set",
        "Set up optimization",
        "Create and run trainer",
        "Archiving training script, src folder, env info"
    ],
    "docstrings": [
        "\"\"\"\nWorkflow of spinal semantic segmentation based on multiviews (2D semantic segmentation).\n\nIt learns how to differentiate between spine head, spine neck and spine shaft.\nCaution! The input dataset was not manually corrected.\n\"\"\""
    ],
    "functions": [
        "get_model"
    ],
    "classes": []
}