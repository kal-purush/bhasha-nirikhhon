{
    "identifiers": [
        "java",
        "io",
        "UnsupportedEncodingException",
        "ch",
        "getBytes",
        "ascii",
        "ch",
        "iso",
        "ch",
        "ch",
        "length",
        "byte2hex",
        "ch",
        "ascii",
        "iso",
        "e",
        "e",
        "printStackTrace",
        "src",
        "stringBuilder",
        "src",
        "src",
        "length",
        "i",
        "i",
        "src",
        "length",
        "i",
        "v",
        "src",
        "i",
        "hv",
        "toHexString",
        "v",
        "hv",
        "length",
        "stringBuilder",
        "append",
        "stringBuilder",
        "append",
        "hv",
        "i",
        "src",
        "length",
        "stringBuilder",
        "append",
        "stringBuilder",
        "toString",
        "ch",
        "ch",
        "getBytes",
        "ch",
        "length",
        "byte2hex",
        "ch",
        "ch",
        "getBytes",
        "ch",
        "length",
        "byte2hex",
        "ch",
        "e",
        "e",
        "printStackTrace",
        "str1",
        "ch",
        "ch",
        "str1",
        "getBytes",
        "str1",
        "length",
        "str1",
        "ch",
        "length",
        "byte2hex",
        "ch",
        "ch",
        "str1",
        "getBytes",
        "str1",
        "ch",
        "length",
        "byte2hex",
        "ch",
        "ch",
        "str1",
        "getBytes",
        "str1",
        "ch",
        "length",
        "byte2hex",
        "ch",
        "ch",
        "str1",
        "getBytes",
        "str1",
        "ch",
        "length",
        "byte2hex",
        "ch",
        "str1",
        "str1",
        "length",
        "ch",
        "str1",
        "getBytes",
        "str1",
        "ch",
        "length",
        "byte2hex",
        "ch",
        "ch",
        "str1",
        "getBytes",
        "str1",
        "ch",
        "length",
        "byte2hex",
        "ch",
        "ch",
        "str1",
        "getBytes",
        "str1",
        "ch",
        "length",
        "byte2hex",
        "ch",
        "ch",
        "str1",
        "getBytes",
        "str1",
        "ch",
        "length",
        "byte2hex",
        "ch",
        "e",
        "e",
        "printStackTrace",
        "args"
    ],
    "literals": [
        "\"úù§abc\"",
        "\"ISO-8859-1\"",
        "\"ASCII\"",
        "\"ISO-8859-1\"",
        "\" length:\"",
        "\"\\nbytecode:\"",
        "\"\\nASCII:\"",
        "\"\\nISO-8859-1:\"",
        "\"\"",
        "\" \"",
        "\"啊aA\"",
        "\"GB2312\"",
        "\"ch length:\"",
        "\" bytecode:\"",
        "\"GBK\"",
        "\"ch length:\"",
        "\" bytecode:\"",
        "\"中文测试\"",
        "\"unicode\"",
        "\" length:\"",
        "\" unicode \"",
        "\"utf-8\"",
        "\" length:\"",
        "\" utf-8 \"",
        "\"utf-16\"",
        "\" length:\"",
        "\" utf-16 \"",
        "\"utf-32\"",
        "\" length:\"",
        "\" utf-32 \"",
        "\"test\"",
        "\"unicode\"",
        "\" length:\"",
        "\" unicode \"",
        "\"utf-8\"",
        "\" length:\"",
        "\" utf-8 \"",
        "\"utf-16\"",
        "\" length:\"",
        "\" utf-16 \"",
        "\"utf-32\"",
        "\" length:\"",
        "\" utf-32 \""
    ],
    "variables": [
        "ch",
        "ch"
    ],
    "comments": [
        "String str = \"&#$abc\";",
        "java中使用Unicode编码，所以两个字节相当于一个字符",
        "长度不是固定的",
        "由于表示汉字或者图形符号的高位字节的首个bit都为1，而ASCII的是个bit为0，从而",
        "实现了这两个字符对ASCII的兼容",
        "前面会有一个fe ff这个字节，该字节为BOM(Byte Order Mark)表示字节读取顺序",
        "utf-8使用3个字节表示汉字，1个字节表示英文字符",
        "ISO-8859-1(Latin1)编码是单字节编码，向下兼容ASCII，编码",
        "范围是0x00-0xFF,0x00-0x7F之间完全和ASCII一致，0x80-0x9F",
        "之间是控制字符，0xA0-0xFF之间是文字符号。因为ISO-8859-1",
        "编码范围使用了单字节内的所有空间，在支持ISO-8859-1的系统",
        "中传输和存储其它任何编码的字节流都不会被抛弃。换言之，把",
        "其它任何编码的字节流当做ISO-8859-1编码看待都没有问题",
        "iso();",
        "gb();",
        "UTF(Unicode transfromation format)是Unicode的不同实现，这里的",
        "实现是指字符在计算机中的表示方式",
        "UTF-8是一种针对Unicode的可变长度的字符编码，可以用来表示Unicode",
        "中的任何字元，且其编码的中的第一个字节仍与ASCII兼容",
        "UTF-16使用两个字节表示常用的字符(码位从U+0000到U+FFFF)，对于超出",
        "U+FFFF外的字符需要4字节表示",
        "UTF-32是另一种将Unicode字符编码的协议，对每一个Unicode码位均使用",
        "4字节来表示",
        "unicode();",
        "Unicode和GBK之间的转换是可逆的,每个汉字转换为2个字节，通过字节可以转换回字符串",
        "Unicode和utf-8之间的转换是可逆的，每个汉字转换为3个字节，通过字节可以转换回字符串",
        "Unicode和ISO-8859-1转化非可逆，字符串可以转换为字节，但字符串中有汉字的话",
        "就不能通过字节在转换回字符串了"
    ],
    "docstrings": [],
    "functions": [
        "iso",
        "byte2hex",
        "gb",
        "unicode",
        "main"
    ],
    "classes": [
        "iso88951ascii"
    ]
}