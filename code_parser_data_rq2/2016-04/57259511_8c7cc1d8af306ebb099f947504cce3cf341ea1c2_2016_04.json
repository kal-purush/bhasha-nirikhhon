{
    "identifiers": [
        "com",
        "koushikdutta",
        "async",
        "java",
        "util",
        "AbstractCollection",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "Collection",
        "java",
        "util",
        "ConcurrentModificationException",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "NoSuchElementException",
        "elements",
        "head",
        "tail",
        "MIN_INITIAL_CAPACITY",
        "numElements",
        "initialCapacity",
        "MIN_INITIAL_CAPACITY",
        "numElements",
        "initialCapacity",
        "initialCapacity",
        "numElements",
        "initialCapacity",
        "initialCapacity",
        "initialCapacity",
        "initialCapacity",
        "initialCapacity",
        "initialCapacity",
        "initialCapacity",
        "initialCapacity",
        "initialCapacity",
        "initialCapacity",
        "initialCapacity",
        "initialCapacity",
        "initialCapacity",
        "elements",
        "initialCapacity",
        "head",
        "tail",
        "p",
        "head",
        "n",
        "elements",
        "length",
        "r",
        "n",
        "p",
        "newCapacity",
        "n",
        "newCapacity",
        "a",
        "newCapacity",
        "arraycopy",
        "elements",
        "p",
        "a",
        "r",
        "arraycopy",
        "elements",
        "a",
        "r",
        "p",
        "elements",
        "a",
        "head",
        "tail",
        "n",
        "a",
        "head",
        "tail",
        "arraycopy",
        "elements",
        "head",
        "a",
        "size",
        "head",
        "tail",
        "headPortionLen",
        "elements",
        "length",
        "head",
        "arraycopy",
        "elements",
        "head",
        "a",
        "headPortionLen",
        "arraycopy",
        "elements",
        "a",
        "headPortionLen",
        "tail",
        "a",
        "elements",
        "numElements",
        "allocateElements",
        "numElements",
        "c",
        "allocateElements",
        "c",
        "size",
        "addAll",
        "c",
        "e",
        "e",
        "elements",
        "head",
        "head",
        "elements",
        "length",
        "e",
        "head",
        "tail",
        "doubleCapacity",
        "e",
        "e",
        "elements",
        "tail",
        "e",
        "tail",
        "tail",
        "elements",
        "length",
        "head",
        "doubleCapacity",
        "e",
        "addFirst",
        "e",
        "e",
        "addLast",
        "e",
        "x",
        "pollFirst",
        "x",
        "x",
        "x",
        "pollLast",
        "x",
        "x",
        "h",
        "head",
        "SuppressWarnings",
        "result",
        "elements",
        "h",
        "result",
        "elements",
        "h",
        "head",
        "h",
        "elements",
        "length",
        "result",
        "t",
        "tail",
        "elements",
        "length",
        "SuppressWarnings",
        "result",
        "elements",
        "t",
        "result",
        "elements",
        "t",
        "tail",
        "t",
        "result",
        "SuppressWarnings",
        "result",
        "elements",
        "head",
        "result",
        "result",
        "SuppressWarnings",
        "result",
        "elements",
        "tail",
        "elements",
        "length",
        "result",
        "result",
        "SuppressWarnings",
        "result",
        "elements",
        "head",
        "result",
        "SuppressWarnings",
        "result",
        "elements",
        "tail",
        "elements",
        "length",
        "result",
        "o",
        "o",
        "mask",
        "elements",
        "length",
        "i",
        "head",
        "x",
        "x",
        "elements",
        "i",
        "o",
        "equals",
        "x",
        "i",
        "i",
        "i",
        "mask",
        "o",
        "o",
        "mask",
        "elements",
        "length",
        "i",
        "tail",
        "mask",
        "x",
        "x",
        "elements",
        "i",
        "o",
        "equals",
        "x",
        "i",
        "i",
        "i",
        "mask",
        "e",
        "addLast",
        "e",
        "e",
        "offerLast",
        "e",
        "removeFirst",
        "pollFirst",
        "getFirst",
        "peekFirst",
        "e",
        "addFirst",
        "e",
        "removeFirst",
        "elements",
        "tail",
        "head",
        "tail",
        "elements",
        "head",
        "elements",
        "head",
        "elements",
        "tail",
        "elements",
        "length",
        "elements",
        "head",
        "elements",
        "length",
        "i",
        "checkInvariants",
        "elements",
        "elements",
        "mask",
        "elements",
        "length",
        "h",
        "head",
        "t",
        "tail",
        "front",
        "i",
        "h",
        "mask",
        "back",
        "t",
        "i",
        "mask",
        "front",
        "t",
        "h",
        "mask",
        "front",
        "back",
        "h",
        "i",
        "arraycopy",
        "elements",
        "h",
        "elements",
        "h",
        "front",
        "arraycopy",
        "elements",
        "elements",
        "i",
        "elements",
        "elements",
        "mask",
        "arraycopy",
        "elements",
        "h",
        "elements",
        "h",
        "mask",
        "h",
        "elements",
        "h",
        "head",
        "h",
        "mask",
        "i",
        "t",
        "arraycopy",
        "elements",
        "i",
        "elements",
        "i",
        "back",
        "tail",
        "t",
        "arraycopy",
        "elements",
        "i",
        "elements",
        "i",
        "mask",
        "i",
        "elements",
        "mask",
        "elements",
        "arraycopy",
        "elements",
        "elements",
        "t",
        "tail",
        "t",
        "mask",
        "tail",
        "head",
        "elements",
        "length",
        "head",
        "tail",
        "cursor",
        "head",
        "fence",
        "tail",
        "lastRet",
        "cursor",
        "fence",
        "cursor",
        "fence",
        "SuppressWarnings",
        "result",
        "elements",
        "cursor",
        "tail",
        "fence",
        "result",
        "lastRet",
        "cursor",
        "cursor",
        "cursor",
        "elements",
        "length",
        "result",
        "lastRet",
        "lastRet",
        "cursor",
        "cursor",
        "elements",
        "length",
        "fence",
        "tail",
        "lastRet",
        "cursor",
        "tail",
        "fence",
        "head",
        "lastRet",
        "cursor",
        "fence",
        "cursor",
        "fence",
        "cursor",
        "cursor",
        "elements",
        "length",
        "SuppressWarnings",
        "result",
        "elements",
        "cursor",
        "head",
        "fence",
        "result",
        "lastRet",
        "cursor",
        "result",
        "lastRet",
        "lastRet",
        "cursor",
        "cursor",
        "elements",
        "length",
        "fence",
        "head",
        "lastRet",
        "o",
        "o",
        "mask",
        "elements",
        "length",
        "i",
        "head",
        "x",
        "x",
        "elements",
        "i",
        "o",
        "equals",
        "x",
        "i",
        "i",
        "mask",
        "o",
        "removeFirstOccurrence",
        "o",
        "h",
        "head",
        "t",
        "tail",
        "h",
        "t",
        "head",
        "tail",
        "i",
        "h",
        "mask",
        "elements",
        "length",
        "elements",
        "i",
        "i",
        "i",
        "mask",
        "i",
        "t",
        "copyElements",
        "size",
        "SuppressWarnings",
        "a",
        "size",
        "size",
        "a",
        "length",
        "size",
        "a",
        "java",
        "lang",
        "reflect",
        "newInstance",
        "a",
        "getClass",
        "getComponentType",
        "size",
        "copyElements",
        "a",
        "a",
        "length",
        "size",
        "a",
        "size",
        "a",
        "SuppressWarnings",
        "result",
        "clone",
        "arraycopy",
        "elements",
        "result",
        "elements",
        "elements",
        "length",
        "result",
        "e",
        "serialVersionUID",
        "s",
        "s",
        "defaultWriteObject",
        "s",
        "writeInt",
        "size",
        "mask",
        "elements",
        "length",
        "i",
        "head",
        "i",
        "tail",
        "i",
        "i",
        "mask",
        "s",
        "writeObject",
        "elements",
        "i",
        "s",
        "s",
        "defaultReadObject",
        "size",
        "s",
        "readInt",
        "allocateElements",
        "size",
        "head",
        "tail",
        "size",
        "i",
        "i",
        "size",
        "i",
        "elements",
        "i",
        "s",
        "readObject"
    ],
    "literals": [
        "\"Sorry, deque too big\"",
        "\"e == null\"",
        "\"e == null\"",
        "\"unchecked\"",
        "\"unchecked\"",
        "\"unchecked\"",
        "\"unchecked\"",
        "\"unchecked\"",
        "\"unchecked\"",
        "\"unchecked\"",
        "\"unchecked\"",
        "\"unchecked\"",
        "\"unchecked\""
    ],
    "variables": [
        "elements",
        "head",
        "tail",
        "x",
        "x",
        "x"
    ],
    "comments": [
        "BEGIN android-note",
        "removed link to collections framework docs",
        "END android-note",
        "Find the best power of two to hold elements.",
        "Tests \"<=\" because arrays aren't kept full.",
        "Too many elements, must back off",
        "Good luck allocating 2 ^ 30 elements",
        "number of elements to the right of p",
        "The main insertion and extraction methods are addFirst,",
        "addLast, pollFirst, pollLast. The other methods are defined in",
        "terms of these.",
        "Element is null if deque empty",
        "Must null out slot",
        "elements[head] is null if deque empty",
        "Invariant: head <= i < tail mod circularity",
        "Optimize for least element motion",
        "Wrap around",
        "Copy the null tail as well",
        "Wrap around",
        "This check doesn't catch all possible comodifications,",
        "but does catch the ones that corrupt traversal",
        "if left-shifted, undo increment in next()",
        "clear all cells",
        "Write out size",
        "Write out elements in order.",
        "Read in size and allocate array",
        "Read in all elements in the proper order."
    ],
    "docstrings": [
        "* Written by Josh Bloch of Google Inc. and released to the public domain,\n * as explained at http://creativecommons.org/publicdomain/zero/1.0/.",
        "* Resizable-array implementation of the {@link Deque} interface.  Array\n * deques have no capacity restrictions; they grow as necessary to support\n * usage.  They are not thread-safe; in the absence of external\n * synchronization, they do not support concurrent access by multiple threads.\n * Null elements are prohibited.  This class is likely to be faster than\n * {@link Stack} when used as a stack, and faster than {@link LinkedList}\n * when used as a queue.\n *\n * <p>Most <tt>ArrayDeque</tt> operations run in amortized constant time.\n * Exceptions include {@link #remove(Object) remove}, {@link\n * #removeFirstOccurrence removeFirstOccurrence}, {@link #removeLastOccurrence\n * removeLastOccurrence}, {@link #contains contains}, {@link #iterator\n * iterator.remove()}, and the bulk operations, all of which run in linear\n * time.\n *\n * <p>The iterators returned by this class's <tt>iterator</tt> method are\n * <i>fail-fast</i>: If the deque is modified at any time after the iterator\n * is created, in any way except through the iterator's own <tt>remove</tt>\n * method, the iterator will generally throw a {@link\n * ConcurrentModificationException}.  Thus, in the face of concurrent\n * modification, the iterator fails quickly and cleanly, rather than risking\n * arbitrary, non-deterministic behavior at an undetermined time in the\n * future.\n *\n * <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n * as it is, generally speaking, impossible to make any hard guarantees in the\n * presence of unsynchronized concurrent modification.  Fail-fast iterators\n * throw <tt>ConcurrentModificationException</tt> on a best-effort basis.\n * Therefore, it would be wrong to write a program that depended on this\n * exception for its correctness: <i>the fail-fast behavior of iterators\n * should be used only to detect bugs.</i>\n *\n * <p>This class and its iterator implement all of the\n * <em>optional</em> methods of the {@link Collection} and {@link\n * Iterator} interfaces.\n *\n * @author  Josh Bloch and Doug Lea\n * @since   1.6\n * @param <E> the type of elements held in this collection",
        "* The array in which the elements of the deque are stored.\n     * The capacity of the deque is the length of this array, which is\n     * always a power of two. The array is never allowed to become\n     * full, except transiently within an addX method where it is\n     * resized (see doubleCapacity) immediately upon becoming full,\n     * thus avoiding head and tail wrapping around to equal each\n     * other.  We also guarantee that all array cells not holding\n     * deque elements are always null.",
        "* The index of the element at the head of the deque (which is the\n     * element that would be removed by remove() or pop()); or an\n     * arbitrary number equal to tail if the deque is empty.",
        "* The index at which the next element would be added to the tail\n     * of the deque (via addLast(E), add(E), or push(E)).",
        "* The minimum capacity that we'll use for a newly created deque.\n     * Must be a power of 2.",
        "******  Array allocation and resizing utilities ******",
        "* Allocate empty array to hold the given number of elements.\n     *\n     * @param numElements  the number of elements to hold",
        "* Double the capacity of this deque.  Call only when full, i.e.,\n     * when head and tail have wrapped around to become equal.",
        "* Copies the elements from our element array into the specified array,\n     * in order (from first to last element in the deque).  It is assumed\n     * that the array is large enough to hold all elements in the deque.\n     *\n     * @return its argument",
        "* Constructs an empty array deque with an initial capacity\n     * sufficient to hold 16 elements.",
        "* Constructs an empty array deque with an initial capacity\n     * sufficient to hold the specified number of elements.\n     *\n     * @param numElements  lower bound on initial capacity of the deque",
        "* Constructs a deque containing the elements of the specified\n     * collection, in the order they are returned by the collection's\n     * iterator.  (The first element returned by the collection's\n     * iterator becomes the first element, or <i>front</i> of the\n     * deque.)\n     *\n     * @param c the collection whose elements are to be placed into the deque\n     * @throws NullPointerException if the specified collection is null",
        "* Inserts the specified element at the front of this deque.\n     *\n     * @param e the element to add\n     * @throws NullPointerException if the specified element is null",
        "* Inserts the specified element at the end of this deque.\n     *\n     * <p>This method is equivalent to {@link #add}.\n     *\n     * @param e the element to add\n     * @throws NullPointerException if the specified element is null",
        "* Inserts the specified element at the front of this deque.\n     *\n     * @param e the element to add\n     * @return <tt>true</tt> (as specified by {@link Deque#offerFirst})\n     * @throws NullPointerException if the specified element is null",
        "* Inserts the specified element at the end of this deque.\n     *\n     * @param e the element to add\n     * @return <tt>true</tt> (as specified by {@link Deque#offerLast})\n     * @throws NullPointerException if the specified element is null",
        "* @throws NoSuchElementException {@inheritDoc}",
        "* @throws NoSuchElementException {@inheritDoc}",
        "* @throws NoSuchElementException {@inheritDoc}",
        "* @throws NoSuchElementException {@inheritDoc}",
        "* Removes the first occurrence of the specified element in this\n     * deque (when traversing the deque from head to tail).\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element <tt>e</tt> such that\n     * <tt>o.equals(e)</tt> (if such an element exists).\n     * Returns <tt>true</tt> if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * @param o element to be removed from this deque, if present\n     * @return <tt>true</tt> if the deque contained the specified element",
        "* Removes the last occurrence of the specified element in this\n     * deque (when traversing the deque from head to tail).\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the last element <tt>e</tt> such that\n     * <tt>o.equals(e)</tt> (if such an element exists).\n     * Returns <tt>true</tt> if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * @param o element to be removed from this deque, if present\n     * @return <tt>true</tt> if the deque contained the specified element",
        "*** Queue methods ***",
        "* Inserts the specified element at the end of this deque.\n     *\n     * <p>This method is equivalent to {@link #addLast}.\n     *\n     * @param e the element to add\n     * @return <tt>true</tt> (as specified by {@link Collection#add})\n     * @throws NullPointerException if the specified element is null",
        "* Inserts the specified element at the end of this deque.\n     *\n     * <p>This method is equivalent to {@link #offerLast}.\n     *\n     * @param e the element to add\n     * @return <tt>true</tt> (as specified by {@link Queue#offer})\n     * @throws NullPointerException if the specified element is null",
        "* Retrieves and removes the head of the queue represented by this deque.\n     *\n     * This method differs from {@link #poll poll} only in that it throws an\n     * exception if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #removeFirst}.\n     *\n     * @return the head of the queue represented by this deque\n     * @throws NoSuchElementException {@inheritDoc}",
        "* Retrieves and removes the head of the queue represented by this deque\n     * (in other words, the first element of this deque), or returns\n     * <tt>null</tt> if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #pollFirst}.\n     *\n     * @return the head of the queue represented by this deque, or\n     *         <tt>null</tt> if this deque is empty",
        "* Retrieves, but does not remove, the head of the queue represented by\n     * this deque.  This method differs from {@link #peek peek} only in\n     * that it throws an exception if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #getFirst}.\n     *\n     * @return the head of the queue represented by this deque\n     * @throws NoSuchElementException {@inheritDoc}",
        "* Retrieves, but does not remove, the head of the queue represented by\n     * this deque, or returns <tt>null</tt> if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #peekFirst}.\n     *\n     * @return the head of the queue represented by this deque, or\n     *         <tt>null</tt> if this deque is empty",
        "*** Stack methods ***",
        "* Pushes an element onto the stack represented by this deque.  In other\n     * words, inserts the element at the front of this deque.\n     *\n     * <p>This method is equivalent to {@link #addFirst}.\n     *\n     * @param e the element to push\n     * @throws NullPointerException if the specified element is null",
        "* Pops an element from the stack represented by this deque.  In other\n     * words, removes and returns the first element of this deque.\n     *\n     * <p>This method is equivalent to {@link #removeFirst()}.\n     *\n     * @return the element at the front of this deque (which is the top\n     *         of the stack represented by this deque)\n     * @throws NoSuchElementException {@inheritDoc}",
        "* Removes the element at the specified position in the elements array,\n     * adjusting head and tail as necessary.  This can result in motion of\n     * elements backwards or forwards in the array.\n     *\n     * <p>This method is called delete rather than remove to emphasize\n     * that its semantics differ from those of {@link List#remove(int)}.\n     *\n     * @return true if elements moved backwards",
        "*** Collection Methods ***",
        "* Returns the number of elements in this deque.\n     *\n     * @return the number of elements in this deque",
        "* Returns <tt>true</tt> if this deque contains no elements.\n     *\n     * @return <tt>true</tt> if this deque contains no elements",
        "* Returns an iterator over the elements in this deque.  The elements\n     * will be ordered from first (head) to last (tail).  This is the same\n     * order that elements would be dequeued (via successive calls to\n     * {@link #remove} or popped (via successive calls to {@link #pop}).\n     *\n     * @return an iterator over the elements in this deque",
        "* Index of element to be returned by subsequent call to next.",
        "* Tail recorded at construction (also in remove), to stop\n         * iterator and also to check for comodification.",
        "* Index of element returned by most recent call to next.\n         * Reset to -1 if element is deleted by a call to remove.",
        "* This class is nearly a mirror-image of DeqIterator, using\n         * tail instead of head for initial cursor, and head instead of\n         * tail for fence.",
        "* Returns <tt>true</tt> if this deque contains the specified element.\n     * More formally, returns <tt>true</tt> if and only if this deque contains\n     * at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.\n     *\n     * @param o object to be checked for containment in this deque\n     * @return <tt>true</tt> if this deque contains the specified element",
        "* Removes a single instance of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element <tt>e</tt> such that\n     * <tt>o.equals(e)</tt> (if such an element exists).\n     * Returns <tt>true</tt> if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * <p>This method is equivalent to {@link #removeFirstOccurrence}.\n     *\n     * @param o element to be removed from this deque, if present\n     * @return <tt>true</tt> if this deque contained the specified element",
        "* Removes all of the elements from this deque.\n     * The deque will be empty after this call returns.",
        "* Returns an array containing all of the elements in this deque\n     * in proper sequence (from first to last element).\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this deque.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this deque",
        "* Returns an array containing all of the elements in this deque in\n     * proper sequence (from first to last element); the runtime type of the\n     * returned array is that of the specified array.  If the deque fits in\n     * the specified array, it is returned therein.  Otherwise, a new array\n     * is allocated with the runtime type of the specified array and the\n     * size of this deque.\n     *\n     * <p>If this deque fits in the specified array with room to spare\n     * (i.e., the array has more elements than this deque), the element in\n     * the array immediately following the end of the deque is set to\n     * <tt>null</tt>.\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>Suppose <tt>x</tt> is a deque known to contain only strings.\n     * The following code can be used to dump the deque into a newly\n     * allocated array of <tt>String</tt>:\n     *\n     *  <pre> {@code String[] y = x.toArray(new String[0]);}</pre>\n     *\n     * Note that <tt>toArray(new Object[0])</tt> is identical in function to\n     * <tt>toArray()</tt>.\n     *\n     * @param a the array into which the elements of the deque are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose\n     * @return an array containing all of the elements in this deque\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in\n     *         this deque\n     * @throws NullPointerException if the specified array is null",
        "*** Object methods ***",
        "* Returns a copy of this deque.\n     *\n     * @return a copy of this deque",
        "* Appease the serialization gods.",
        "* Serialize this deque.\n     *\n     * @serialData The current size (<tt>int</tt>) of the deque,\n     * followed by all of its elements (each an object reference) in\n     * first-to-last order.",
        "* Deserialize this deque."
    ],
    "functions": [
        "allocateElements",
        "doubleCapacity",
        "copyElements",
        "ArrayDeque",
        "ArrayDeque",
        "ArrayDeque",
        "addFirst",
        "addLast",
        "offerFirst",
        "offerLast",
        "E",
        "removeFirst",
        "E",
        "removeLast",
        "E",
        "pollFirst",
        "E",
        "pollLast",
        "E",
        "getFirst",
        "E",
        "getLast",
        "E",
        "peekFirst",
        "E",
        "peekLast",
        "removeFirstOccurrence",
        "removeLastOccurrence",
        "add",
        "offer",
        "E",
        "remove",
        "E",
        "poll",
        "E",
        "element",
        "E",
        "peek",
        "push",
        "E",
        "pop",
        "checkInvariants",
        "size",
        "isEmpty",
        "iterator",
        "descendingIterator",
        "hasNext",
        "E",
        "next",
        "remove",
        "hasNext",
        "E",
        "next",
        "remove",
        "contains",
        "remove",
        "clear",
        "toArray",
        "toArray",
        "clone",
        "writeObject",
        "readObject"
    ],
    "classes": [
        "ArrayDeque",
        "DeqIterator",
        "DescendingIterator"
    ]
}