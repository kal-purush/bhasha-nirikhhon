{
    "identifiers": [
        "sys",
        "os",
        "roslib",
        "rospy",
        "copy",
        "math",
        "gazebo_msgs",
        "srv",
        "SpawnModel",
        "SpawnModelRequest",
        "DeleteModel",
        "DeleteModelRequest",
        "geometry_msgs",
        "msg",
        "Pose",
        "tf",
        "transformations",
        "tft",
        "objects",
        "parent_name",
        "key",
        "value",
        "objects",
        "iteritems",
        "parent_name",
        "parents",
        "parent_name",
        "parent_name",
        "key",
        "compound_keys",
        "parent_name",
        "key",
        "value",
        "copy",
        "deepcopy",
        "value",
        "tmp_value",
        "child_key",
        "child_value",
        "tmp_value",
        "iteritems",
        "objects",
        "key",
        "objects",
        "key",
        "math",
        "cos",
        "yaw",
        "child_value",
        "math",
        "sin",
        "yaw",
        "child_value",
        "objects",
        "key",
        "math",
        "sin",
        "yaw",
        "child_value",
        "math",
        "cos",
        "yaw",
        "child_value",
        "child_value",
        "x",
        "child_value",
        "y",
        "child_value",
        "objects",
        "key",
        "child_value",
        "child_value",
        "yaw",
        "child_value",
        "tmp_value",
        "flat_objects",
        "update",
        "compound_keys",
        "key",
        "tmp_value",
        "flat_objects",
        "update",
        "get_flat_dict",
        "to_process",
        "compound_keys",
        "key",
        "flat_objects",
        "update",
        "compound_keys",
        "key",
        "value",
        "flat_objects",
        "len",
        "sys",
        "argv",
        "sys",
        "exit",
        "rospy",
        "init_node",
        "rospy",
        "has_param",
        "rospy",
        "logerr",
        "sys",
        "exit",
        "rospy",
        "get_param",
        "get_flat_dict",
        "objects",
        "flat_objects",
        "keys",
        "sys",
        "argv",
        "flat_objects",
        "sys",
        "argv",
        "flat_objects",
        "keys",
        "rospy",
        "logerr",
        "sys",
        "argv",
        "sys",
        "exit",
        "sys",
        "argv",
        "flat_objects",
        "sys",
        "argv",
        "rospy",
        "loginfo",
        "objects",
        "keys",
        "key",
        "value",
        "objects",
        "iteritems",
        "value",
        "rospy",
        "logerr",
        "key",
        "value",
        "model_string",
        "split",
        "model_string",
        "replace",
        "model_package",
        "model_string",
        "split",
        "pop",
        "value",
        "rospy",
        "logerr",
        "key",
        "value",
        "value",
        "rospy",
        "logerr",
        "key",
        "value",
        "tft",
        "quaternion_from_euler",
        "orientation",
        "orientation",
        "orientation",
        "Pose",
        "object_pose",
        "position",
        "position",
        "object_pose",
        "position",
        "position",
        "object_pose",
        "position",
        "position",
        "object_pose",
        "orientation",
        "quaternion",
        "object_pose",
        "orientation",
        "quaternion",
        "object_pose",
        "orientation",
        "quaternion",
        "object_pose",
        "orientation",
        "quaternion",
        "roslib",
        "packages",
        "get_pkg_dir",
        "model_package",
        "model_path",
        "open",
        "file_location",
        "roslib",
        "packages",
        "InvalidROSPkgException",
        "rospy",
        "logerr",
        "key",
        "model_package",
        "rospy",
        "logerr",
        "key",
        "file_location",
        "model_type",
        "rospy",
        "wait_for_service",
        "rospy",
        "exceptions",
        "ROSException",
        "rospy",
        "logerr",
        "sys",
        "exit",
        "rospy",
        "ServiceProxy",
        "SpawnModel",
        "f",
        "read",
        "model_type",
        "os",
        "popen",
        "file_location",
        "p",
        "read",
        "p",
        "close",
        "rospy",
        "wait_for_service",
        "rospy",
        "exceptions",
        "ROSException",
        "rospy",
        "logerr",
        "sys",
        "exit",
        "rospy",
        "ServiceProxy",
        "SpawnModel",
        "model_type",
        "rospy",
        "wait_for_service",
        "rospy",
        "exceptions",
        "ROSException",
        "rospy",
        "logerr",
        "sys",
        "exit",
        "rospy",
        "ServiceProxy",
        "SpawnModel",
        "f",
        "read",
        "rospy",
        "logerr",
        "model_type",
        "rospy",
        "ServiceProxy",
        "DeleteModel",
        "DeleteModelRequest",
        "key",
        "srv_delete_model",
        "key",
        "rospy",
        "ServiceException",
        "e",
        "exists",
        "rospy",
        "loginfo",
        "key",
        "SpawnModelRequest",
        "key",
        "xml_string",
        "object_pose",
        "srv_spawn_model",
        "req",
        "res",
        "success",
        "rospy",
        "loginfo",
        "res",
        "status_message",
        "key",
        "key",
        "res",
        "status_message"
    ],
    "literals": [
        "'parent_name'",
        "'_'",
        "\"children\"",
        "\"children\"",
        "\"children\"",
        "\"orientation\"",
        "\"position\"",
        "\"position\"",
        "\"position\"",
        "\"position\"",
        "\"position\"",
        "\"position\"",
        "\"position\"",
        "\"position\"",
        "\"position\"",
        "\"position\"",
        "\"position\"",
        "\"orientation\"",
        "\"orientation\"",
        "\"children\"",
        "\"__main__\"",
        "'[spawn_object.py] Please specify the names of the objects to be loaded'",
        "\"object_spawner\"",
        "\"/objects\"",
        "\"No objects uploaded to /objects\"",
        "\"/objects\"",
        "\"all\"",
        "\"Object %s not found\"",
        "\"Trying to spawn %s\"",
        "\"model\"",
        "\"No model for \"",
        "\" found.\"",
        "\"model\"",
        "\"/\"",
        "\"/\"",
        "\"\"",
        "\".\"",
        "\"position\"",
        "\"No position for \"",
        "\" found.\"",
        "\"position\"",
        "\"orientation\"",
        "\"No orientation for \"",
        "\" found.\"",
        "\"orientation\"",
        "\"/\"",
        "\"No model package found for \"",
        "\": \"",
        "\" does not exist in ROS_PACKAGE_PATH\"",
        "\"No model file found for \"",
        "\" at \"",
        "\"urdf\"",
        "'/gazebo/spawn_urdf_model'",
        "\"Service /gazebo/spawn_urdf_model not available.\"",
        "'/gazebo/spawn_urdf_model'",
        "\"urdf.xacro\"",
        "\"rosrun xacro xacro.py \"",
        "'/gazebo/spawn_urdf_model'",
        "\"Service /gazebo/spawn_urdf_model not available.\"",
        "'/gazebo/spawn_urdf_model'",
        "\"model\"",
        "'/gazebo/spawn_gazebo_model'",
        "\"Service /gazebo/spawn_gazebo_model not available.\"",
        "'/gazebo/spawn_gazebo_model'",
        "'Model type not know. model_type = '",
        "'gazebo/delete_model'",
        "\"Model %s already exists in gazebo. Model will be updated.\"",
        "\" \"",
        "\"Error: model %s not spawn. error message = \""
    ],
    "variables": [
        "parents",
        "compound_keys",
        "flat_objects",
        "parents",
        "key",
        "compound_keys",
        "parent_name",
        "compound_keys",
        "key",
        "compound_keys",
        "key",
        "tmp_value",
        "to_process",
        "yaw",
        "x",
        "y",
        "objects",
        "flat_objects",
        "objects",
        "objects",
        "model_string",
        "model_package",
        "model_path",
        "model_type",
        "position",
        "orientation",
        "quaternion",
        "object_pose",
        "x",
        "y",
        "z",
        "x",
        "y",
        "z",
        "w",
        "file_location",
        "f",
        "srv_spawn_model",
        "xml_string",
        "p",
        "xml_string",
        "srv_spawn_model",
        "srv_spawn_model",
        "xml_string",
        "srv_delete_model",
        "req",
        "req",
        "model_name",
        "exists",
        "res",
        "exists",
        "req",
        "req",
        "model_name",
        "req",
        "model_xml",
        "req",
        "initial_pose",
        "res"
    ],
    "comments": [
        "!/usr/bin/python",
        "",
        "\\file",
        "",
        "\\note",
        "Copyright (c) 2010 \\n",
        "Fraunhofer Institute for Manufacturing Engineering",
        "and Automation (IPA) \\n\\n",
        "",
        "",
        "",
        "\\note",
        "Project name: Jungheinrich",
        "\\note",
        "ROS package name: jungheinrich_bringup_sim",
        "",
        "\\author",
        "Author: Nadia Hammoudeh Garcia, email:nadia.hammoudeh.garcia@ipa.fhg.de",
        "",
        "\\date Date of creation: Nov 2013",
        "",
        "\\brief",
        "This script is able to spawn objects into gazebo which are uploaded",
        "to the parameter server under /objects",
        "",
        "",
        "",
        "Redistribution and use in source and binary forms, with or without",
        "modification, are permitted provided that the following conditions are met:",
        "",
        "- Redistributions of source code must retain the above copyright",
        "notice, this list of conditions and the following disclaimer. \\n",
        "- Redistributions in binary form must reproduce the above copyright",
        "notice, this list of conditions and the following disclaimer in the",
        "documentation and/or other materials provided with the distribution. \\n",
        "- Neither the name of the Fraunhofer Institute for Manufacturing",
        "Engineering and Automation (IPA) nor the names of its",
        "contributors may be used to endorse or promote products derived from",
        "this software without specific prior written permission. \\n",
        "",
        "This program is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU Lesser General Public License LGPL as",
        "published by the Free Software Foundation, either version 3 of the",
        "License, or (at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
        "GNU Lesser General Public License LGPL for more details.",
        "",
        "You should have received a copy of the GNU Lesser General Public",
        "License LGPL along with this program.",
        "If not, see < http://www.gnu.org/licenses/>.",
        "",
        "",
        "check if we have an atomic object",
        "add parent object without children to flat_objects",
        "add position and orientation of parent to all children",
        "add flattened children to flat_objects",
        "add object to flat_objects",
        "check for all objects on parameter server",
        "if keyword all is in list of object names we'll load all models uploaded to parameter server",
        "check for model",
        "check for position",
        "check for orientation",
        "convert rpy to quaternion for Pose message",
        "compose pose of object",
        "call gazebo service to spawn model (see http://ros.org/wiki/gazebo)",
        "check if object is already spawned",
        "TODO this service causes gazebo (current groovy version) to crash",
        "rospy.logdebug(\"Model %s does not exist in gazebo.\", key)",
        "spawn new model",
        "model name from command line input",
        "evaluate response"
    ],
    "docstrings": [
        "\"\"\"expands all objects to a flat dictionary\"\"\""
    ],
    "functions": [
        "get_flat_dict"
    ],
    "classes": []
}