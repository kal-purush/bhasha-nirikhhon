{
    "identifiers": [
        "ch",
        "lihsmi",
        "end2end",
        "ch",
        "lihsmi",
        "Application",
        "ch",
        "lihsmi",
        "rabbitconsumer",
        "ConsumerBuilder",
        "ch",
        "lihsmi",
        "rabbitconsumer",
        "FaultyReceiver",
        "ch",
        "lihsmi",
        "rabbitconsumer",
        "Receiver",
        "ch",
        "lihsmi",
        "rabbitproducer",
        "Message",
        "ch",
        "lihsmi",
        "rabbitproducer",
        "Producer",
        "org",
        "hamcrest",
        "collection",
        "IsIterableContainingInAnyOrder",
        "org",
        "hamcrest",
        "collection",
        "IsIterableContainingInOrder",
        "org",
        "junit",
        "Test",
        "org",
        "junit",
        "runner",
        "RunWith",
        "org",
        "springframework",
        "amqp",
        "rabbit",
        "connection",
        "ConnectionFactory",
        "org",
        "springframework",
        "amqp",
        "rabbit",
        "core",
        "RabbitTemplate",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Autowired",
        "org",
        "springframework",
        "boot",
        "test",
        "SpringApplicationConfiguration",
        "org",
        "springframework",
        "test",
        "context",
        "junit4",
        "SpringJUnit4ClassRunner",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "CountDownLatch",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "org",
        "junit",
        "Assert",
        "RunWith",
        "SpringApplicationConfiguration",
        "classes",
        "Autowired",
        "consumerBuilder",
        "Autowired",
        "connectionFactory",
        "Autowired",
        "producer",
        "Autowired",
        "rabbitTemplate",
        "Test",
        "routingKey",
        "countingReceiver",
        "consumerBuilder",
        "withReceiver",
        "countingReceiver",
        "build",
        "routingKey",
        "producer",
        "send",
        "routingKey",
        "producer",
        "send",
        "routingKey",
        "await",
        "TimeUnit",
        "MILLISECONDS",
        "assertEquals",
        "countingReceiver",
        "getMessageCount",
        "Test",
        "routingKey",
        "consumer1",
        "consumer2",
        "consumer3",
        "consumerBuilder",
        "withReceiver",
        "consumer1",
        "build",
        "routingKey",
        "consumerBuilder",
        "withReceiver",
        "consumer2",
        "build",
        "routingKey",
        "consumerBuilder",
        "withReceiver",
        "consumer3",
        "build",
        "routingKey",
        "i",
        "i",
        "i",
        "producer",
        "send",
        "routingKey",
        "toString",
        "i",
        "await",
        "TimeUnit",
        "MILLISECONDS",
        "assertEquals",
        "consumer1",
        "getMessageCount",
        "consumer2",
        "getMessageCount",
        "consumer3",
        "getMessageCount",
        "assertTrue",
        "consumer1",
        "getMessageCount",
        "assertTrue",
        "consumer2",
        "getMessageCount",
        "assertTrue",
        "consumer3",
        "getMessageCount",
        "Test",
        "routingKey",
        "consumer1",
        "consumer2",
        "consumerBuilder",
        "withReceiver",
        "consumer1",
        "build",
        "routingKey",
        "consumerBuilder",
        "withReceiver",
        "consumer2",
        "build",
        "routingKey",
        "producer",
        "send",
        "routingKey",
        "producer",
        "send",
        "routingKey",
        "await",
        "TimeUnit",
        "MILLISECONDS",
        "assertEquals",
        "consumer1",
        "getMessageCount",
        "Test",
        "routingKey",
        "busyCountingReceiver",
        "countingReceiver",
        "consumerBuilder",
        "withReceiver",
        "countingReceiver",
        "build",
        "routingKey",
        "consumerBuilder",
        "withReceiver",
        "busyCountingReceiver",
        "build",
        "routingKey",
        "i",
        "i",
        "i",
        "producer",
        "send",
        "routingKey",
        "toString",
        "i",
        "await",
        "TimeUnit",
        "MILLISECONDS",
        "assertEquals",
        "countingReceiver",
        "getMessageCount",
        "assertEquals",
        "busyCountingReceiver",
        "getMessageCount",
        "Test",
        "routingKey",
        "consumerPool1",
        "consumerPool2",
        "receiver",
        "consumerPool1",
        "consumerBuilder",
        "withReceiver",
        "receiver",
        "build",
        "routingKey",
        "receiver",
        "consumerPool2",
        "consumerBuilder",
        "withReceiver",
        "receiver",
        "build",
        "routingKey",
        "expectedMessagesInPools",
        "Arrays",
        "asList",
        "message",
        "expectedMessagesInPools",
        "producer",
        "send",
        "routingKey",
        "message",
        "await",
        "TimeUnit",
        "MILLISECONDS",
        "assertEquals",
        "consumerPool1",
        "getMessageCount",
        "consumerPool1",
        "getMessageCount",
        "assertEquals",
        "consumerPool2",
        "getMessageCount",
        "consumerPool2",
        "getMessageCount",
        "messagesConsumedByPool1",
        "consumerPool1",
        "getMessages",
        "messagesConsumedByPool1",
        "addAll",
        "consumerPool1",
        "getMessages",
        "messagesConsumedByPool2",
        "consumerPool2",
        "getMessages",
        "messagesConsumedByPool2",
        "addAll",
        "consumerPool2",
        "getMessages",
        "assertThat",
        "expectedMessagesInPools",
        "IsIterableContainingInAnyOrder",
        "containsInAnyOrder",
        "messagesConsumedByPool1",
        "toArray",
        "assertThat",
        "expectedMessagesInPools",
        "IsIterableContainingInAnyOrder",
        "containsInAnyOrder",
        "messagesConsumedByPool2",
        "toArray",
        "messageCount",
        "consumedMessages",
        "consumedMessages",
        "messageCount",
        "consumedMessages",
        "Override",
        "message",
        "messageCount",
        "consumedMessages",
        "add",
        "message",
        "countDown",
        "runtime",
        "runtime",
        "runtime",
        "runtime",
        "Override",
        "message",
        "sleep",
        "runtime",
        "receiveMessage",
        "message"
    ],
    "literals": [
        "\"key-1\"",
        "\"testConsumer-1\"",
        "\"test-1\"",
        "\"message 1\"",
        "\"message 2\"",
        "\"key-2\"",
        "\"testConsumer-1\"",
        "\"test-2\"",
        "\"testConsumer-2\"",
        "\"test-2\"",
        "\"testConsumer-3\"",
        "\"test-2\"",
        "\"message \"",
        "\"key-3\"",
        "\"faulty consumer\"",
        "\"testConsumer-1\"",
        "\"test-3\"",
        "\"testConsumer-2\"",
        "\"test-3\"",
        "\"message 1\"",
        "\"message 2\"",
        "\"key-4\"",
        "\"testConsumer-1\"",
        "\"test-4\"",
        "\"testConsumer-2\"",
        "\"test-4\"",
        "\"message \"",
        "\"key-5\"",
        "\"test-consumer\"",
        "\"test-5-1\"",
        "\"test-consumer\"",
        "\"test-5-2\"",
        "\"1\"",
        "\"2\"",
        "\"3\"",
        "\"4\"",
        "\"Processing Message...\"",
        "\"Before sleep...\"",
        "\"...after sleep\""
    ],
    "variables": [
        "consumerBuilder",
        "connectionFactory",
        "producer",
        "rabbitTemplate",
        "lock",
        "consumedMessages",
        "runtime"
    ],
    "comments": [
        "given",
        "\"2\" refers to the number of messages expected to be sent",
        "when",
        "then",
        "given",
        "when",
        "then",
        "given",
        "when",
        "then",
        "given",
        "consumer needs 1 sec to handle message",
        "when",
        "then",
        "given",
        "when",
        "then",
        "once the message is processed, we count down the lock"
    ],
    "docstrings": [
        "this test illustrates how to set up \"everything by hand\"\n\n    @Test\n    public void manualTest() throws Exception {\n\n        // for the async waiting with the CountDownLatch, see http://stackoverflow.com/questions/631598/how-to-use-junit-to-test-asynchronous-processes\n        // the \"1\" here refers to the number of messages we are expecting to be sent.\n        CountDownLatch lock = new CountDownLatch(1);\n\n        String queueName = \"test-queue\";\n        String routingKey = \"test-routing-key\";\n        CountingReceiver receiver = new CountingReceiver(lock);\n\n        // set up the queue, exchange, binding on the broker\n        RabbitAdmin admin = new RabbitAdmin(connectionFactory);\n        Queue queue = new Queue(queueName);\n        admin.declareQueue(queue);\n        TopicExchange exchange = new TopicExchange(GlobalConfig.DISTRIBUTION_EXCHANGE);\n        admin.declareExchange(exchange);\n        admin.declareBinding(BindingBuilder.bind(queue).to(exchange).with(routingKey));\n\n        // set up the listener and container\n        SimpleMessageListenerContainer container =\n                new SimpleMessageListenerContainer(connectionFactory);\n\n        MessageListenerAdapter adapter = new MessageListenerAdapter(receiver, \"receiveMessage\");\n        container.setMessageListener(adapter);\n        container.setQueueNames(queueName);\n        container.start();\n\n        rabbitTemplate.convertAndSend(GlobalConfig.DISTRIBUTION_EXCHANGE, routingKey, \"message body\");\n\n        // we wait max 2000 millisecs for the message to be processed\n        lock.await(2000, TimeUnit.MILLISECONDS);\n\n        assertEquals(1, receiver.getMessageCount());\n    }"
    ],
    "functions": [
        "messagesAreProcessedBySingleConsumer",
        "messagesAreLoadBalancedAmongstConsumers",
        "messagesAreReassignedToAnotherConsumerIfOneConsumerFails",
        "messagesAreNotRoutedToBusyConsumers",
        "messagesAreFannedOutToMultipleConsumerPools",
        "CountingReceiver",
        "getMessageCount",
        "getMessages",
        "receiveMessage",
        "BusyCountingReceiver",
        "receiveMessage"
    ],
    "classes": [
        "UniqueMessageProcessingTest",
        "CountingReceiver",
        "BusyCountingReceiver"
    ]
}