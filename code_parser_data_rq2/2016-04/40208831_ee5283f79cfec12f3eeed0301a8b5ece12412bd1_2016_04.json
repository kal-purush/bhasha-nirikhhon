{
    "identifiers": [
        "print_function",
        "absolute_import",
        "division",
        "unicode_literals",
        "numpy",
        "np",
        "basestring",
        "NameError",
        "obj",
        "debug",
        "isinstance",
        "obj",
        "np",
        "float64",
        "np",
        "float32",
        "obj",
        "isinstance",
        "obj",
        "np",
        "int32",
        "np",
        "int64",
        "np",
        "int16",
        "obj",
        "isinstance",
        "obj",
        "np",
        "bool_",
        "obj",
        "isinstance",
        "obj",
        "np",
        "string_",
        "basestring",
        "obj",
        "isinstance",
        "obj",
        "np",
        "ndarray",
        "obj",
        "tolist",
        "isinstance",
        "obj",
        "key",
        "value",
        "key",
        "value",
        "obj",
        "items",
        "key",
        "value",
        "obj",
        "items",
        "yamlify",
        "value",
        "debug",
        "debug",
        "isinstance",
        "obj",
        "i",
        "item",
        "obj",
        "yamlify",
        "item",
        "debug",
        "debug",
        "isinstance",
        "obj",
        "obj",
        "i",
        "item",
        "obj",
        "yamlify",
        "item",
        "debug",
        "debug",
        "obj",
        "debug",
        "obj",
        "obj"
    ],
    "literals": [],
    "variables": [
        "basestring",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "key",
        "obj",
        "i",
        "obj",
        "obj",
        "i",
        "obj"
    ],
    "comments": [
        "Licensed under a 3-clause BSD style license - see LICENSE.rst",
        "-*- coding: utf-8 -*-",
        "For Python 3",
        "elif isinstance(obj, Quantity):",
        "obj = dict(value=obj.value, unit=obj.unit.to_string())",
        "Must come after Quantity",
        "First convert keys",
        "Now recursive",
        "elif isinstance(obj, Unit):",
        "obj = obj.name",
        "elif obj is u.dimensionless_unscaled:",
        "obj = 'dimensionless_unit'"
    ],
    "docstrings": [
        "\"\"\"\n==================\ndesiutils.io\n==================\n\nModule for I/O related code\n\"\"\"",
        "\"\"\" Recursively process an object so it can be serialised for yaml\n    Based on jsonify in linetools\n\n    Note: All keys in dicts are converted to str type\n\n    Parameters\n    ----------\n    obj : any object\n    debug : bool, optional\n\n    Returns\n    -------\n    obj\n       An object suitable for yaml serialization.  For example :class:`numpy.ndarray` is converted to :class:`list`,\n       :class:`numpy.int64` is converted to :class:`int`, etc.\n    \"\"\""
    ],
    "functions": [
        "yamlify"
    ],
    "classes": []
}