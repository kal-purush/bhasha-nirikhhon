{
    "identifiers": [
        "NgRestAdapterException",
        "NgRestAdapterService",
        "Chai",
        "chai",
        "ng",
        "ng",
        "describe",
        "ng",
        "ng",
        "beforeEach",
        "angular",
        "angular",
        "$exceptionHandlerProvider",
        "$exceptionHandlerProvider",
        "inject",
        "_$httpBackend_",
        "_ngRestAdapter_",
        "_$http_",
        "_$q_",
        "_$exceptionHandler_",
        "_$rootScope_",
        "$httpBackend",
        "_$httpBackend_",
        "ngRestAdapterService",
        "_ngRestAdapter_",
        "$http",
        "_$http_",
        "$q",
        "_$q_",
        "$exceptionHandler",
        "_$exceptionHandler_",
        "$rootScope",
        "_$rootScope_",
        "afterEach",
        "$httpBackend",
        "$httpBackend",
        "describe",
        "sinon",
        "errorHandlerMock",
        "requestConfig",
        "ng",
        "responseObject",
        "ng",
        "errorHandlerSpy",
        "requestConfig",
        "responseObject",
        "throwException",
        "describe",
        "it",
        "done",
        "$httpBackend",
        "ngRestAdapterService",
        "$httpBackend",
        "expect",
        "errorHandlerSpy",
        "expect",
        "response",
        "done",
        "$rootScope",
        "it",
        "ngRestAdapterService",
        "errorHandlerMock",
        "expect",
        "errorHandlerSpy",
        "it",
        "ngRestAdapterService",
        "errorHandlerMock",
        "setFactoryFn",
        "ngRestAdapterService",
        "errorHandlerMock",
        "expect",
        "setFactoryFn",
        "NgRestAdapterException",
        "describe",
        "beforeEach",
        "ngRestAdapterService",
        "errorHandlerMock",
        "it",
        "$httpBackend",
        "ngRestAdapterService",
        "$httpBackend",
        "expect",
        "errorHandlerSpy",
        "it",
        "$httpBackend",
        "ngRestAdapterService",
        "$httpBackend",
        "expect",
        "errorHandlerSpy",
        "it",
        "$httpBackend",
        "ngRestAdapterService",
        "$httpBackend",
        "expect",
        "errorHandlerSpy",
        "it",
        "customInterceptor",
        "rejection",
        "ng",
        "rejection",
        "$httpBackend",
        "ngRestAdapterService",
        "customInterceptor",
        "$httpBackend",
        "expect",
        "errorHandlerSpy",
        "$httpBackend",
        "ngRestAdapterService",
        "customInterceptor",
        "$httpBackend",
        "expect",
        "errorHandlerSpy",
        "it",
        "$httpBackend",
        "throwException",
        "ngRestAdapterService",
        "expect",
        "$exceptionHandler",
        "$httpBackend",
        "expect",
        "$exceptionHandler",
        "describe",
        "beforeEach",
        "$exceptionHandler",
        "it",
        "done",
        "ngRestAdapterService",
        "spiedHandler",
        "sinon",
        "ngRestAdapterService",
        "spiedHandler",
        "$httpBackend",
        "$http",
        "$httpBackend",
        "expect",
        "$exceptionHandler",
        "expect",
        "httpPromise",
        "done",
        "$rootScope",
        "it",
        "ngRestAdapterService",
        "routeRegex",
        "stringMatch",
        "expect",
        "ngRestAdapterService",
        "routeRegex",
        "expect",
        "ngRestAdapterService",
        "stringMatch",
        "it",
        "done",
        "$httpBackend",
        "$http",
        "$httpBackend",
        "expect",
        "spiedHandler",
        "expect",
        "httpPromise",
        "done",
        "$rootScope",
        "it",
        "done",
        "$httpBackend",
        "$http",
        "$httpBackend",
        "expect",
        "spiedHandler",
        "expect",
        "httpPromise",
        "done",
        "$rootScope",
        "it",
        "done",
        "$httpBackend",
        "$http",
        "$httpBackend",
        "expect",
        "spiedHandler",
        "expect",
        "$exceptionHandler",
        "expect",
        "httpPromise",
        "done",
        "$rootScope"
    ],
    "literals": [
        "\"angular\"",
        "\"angular-mocks\"",
        "\"../ngRestAdapter\"",
        "\"../provider/ngRestAdapterServiceProvider\"",
        "\"../service/ngRestAdapterService\"",
        "'Interceptor tests'",
        "'ngRestAdapter'",
        "'log'",
        "'Error interceptor'",
        "\"An error occurred!\"",
        "'registration'",
        "'should respond with error when no error handler is set'",
        "'/api/any'",
        "'/any'",
        "'should be able to register an api error handler factory'",
        "'should not be able to re-set the api error handler'",
        "'intercepting'",
        "'should not call the api error handler when the api responds with a success'",
        "'/api/any'",
        "'/any'",
        "'should call the api error handler when the api responds with an error'",
        "'/api/any'",
        "'/any'",
        "'should not call the api error handler the api service specifies the interceptor should be skipped'",
        "'/api/any'",
        "'/any'",
        "'should be able to define a custom interceptor function to only fail in some conditions'",
        "'/api/fatal'",
        "'/fatal'",
        "'/api/recoverable'",
        "'/recoverable'",
        "'should not catch an exception thrown from an error interceptor if it is user supplied'",
        "'/api/any'",
        "'/any'",
        "'Base $http usage'",
        "'should allow the $http service to be used as normal (success)'",
        "'/any'",
        "'ok'",
        "'/any'",
        "'data'",
        "'ok'",
        "'should be able to set interceptor routes'",
        "'/excluded/string/example'",
        "'should not intercept excluded (by regex) domains'",
        "'/excluded/regex/example'",
        "'error'",
        "'/excluded/regex/example'",
        "'data'",
        "'error'",
        "'should not intercept excluded (by string match) domains'",
        "'/excluded/string/example'",
        "'error'",
        "'/excluded/string/example'",
        "'data'",
        "'error'",
        "'should allow the $http service to be used as normal (error intercepted)'",
        "'/any'",
        "'error'",
        "'/any'",
        "'data'",
        "'error'"
    ],
    "variables": [
        "expect",
        "$http",
        "$q",
        "$httpBackend",
        "ngRestAdapterService",
        "$exceptionHandler",
        "$rootScope",
        "throwException",
        "errorHandlerSpy",
        "errorHandlerMock",
        "response",
        "setFactoryFn",
        "customInterceptor",
        "spiedHandler",
        "httpPromise",
        "routeRegex",
        "stringMatch",
        "httpPromise",
        "httpPromise",
        "httpPromise"
    ],
    "comments": [
        "register injected service provider",
        "spy on the options",
        "try to get a resource",
        "set credential promise factory",
        "try to get a resource",
        "try to get a resource",
        "try to get a resource",
        "get a failing url",
        "get a recoverable url",
        "should not have been called again",
        "make the error interceptor throw an error",
        "try to get a resource=",
        "no errors initially",
        "clear errors",
        "unset the error handler (normally not allowed)",
        "spy on (private) error handler",
        "the original base",
        "no errors initially",
        "the original base",
        "no errors after the fact"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}