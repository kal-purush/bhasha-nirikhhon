{
    "identifiers": [
        "unittest",
        "errno",
        "time",
        "pyverbs",
        "pyverbs_error",
        "PyverbsError",
        "PyverbsRDMAError",
        "pyverbs",
        "cq",
        "CqInitAttrEx",
        "PollCqAttr",
        "CQEX",
        "pyverbs",
        "srq",
        "SrqInitAttrEx",
        "OpsWr",
        "SRQ",
        "tests",
        "RDMATestCase",
        "RCResources",
        "pyverbs",
        "wr",
        "SGE",
        "RecvWR",
        "SendWR",
        "pyverbs",
        "PyverbsRDMAErrno",
        "pyverbs",
        "qp",
        "QPAttr",
        "QPCap",
        "pyverbs",
        "mr",
        "MR",
        "pyverbs",
        "enums",
        "e",
        "tests",
        "utils",
        "u",
        "mr",
        "tag",
        "tm_opcode",
        "mr",
        "write",
        "tm_opcode",
        "to_bytes",
        "byteorder",
        "TM_OPCODE_LENGTH",
        "TM_OPCODE_OFFSET",
        "mr",
        "write",
        "tag",
        "to_bytes",
        "byteorder",
        "TM_TAG_LENGTH",
        "TM_TAG_OFFSET",
        "player",
        "mr",
        "tag",
        "tm_opcode",
        "write_tm_header",
        "mr",
        "mr",
        "tag",
        "tag",
        "tm_opcode",
        "tm_opcode",
        "mr",
        "write",
        "player",
        "mr",
        "buf",
        "to_bytes",
        "byteorder",
        "RNDV_VA_LENGTH",
        "RNDV_VA_OFFSET",
        "mr",
        "write",
        "player",
        "mr",
        "rkey",
        "to_bytes",
        "byteorder",
        "RNDV_RKEY_LENGTH",
        "RNDV_RKEY_OFFSET",
        "mr",
        "write",
        "player",
        "msg_size",
        "to_bytes",
        "byteorder",
        "RNDV_LEN_LENGTH",
        "RNDV_LEN_OFFSET",
        "RCResources",
        "dev_name",
        "ib_port",
        "gid_index",
        "qp_count",
        "with_srq",
        "dev_name",
        "dev_name",
        "ib_port",
        "ib_port",
        "gid_index",
        "gid_index",
        "with_srq",
        "with_srq",
        "qp_count",
        "qp_count",
        "ctx",
        "query_device_ex",
        "tm_caps",
        "flags",
        "e",
        "IBV_TM_CAP_RC",
        "unittest",
        "SkipTest",
        "SrqInitAttrEx",
        "e",
        "IBV_SRQ_INIT_ATTR_TYPE",
        "e",
        "IBV_SRQ_INIT_ATTR_PD",
        "e",
        "IBV_SRQ_INIT_ATTR_CQ",
        "e",
        "IBV_SRQ_INIT_ATTR_TM",
        "e",
        "IBV_SRQT_TM",
        "pd",
        "cq",
        "ctx",
        "query_device_ex",
        "tm_caps",
        "max_num_tags",
        "SRQ",
        "ctx",
        "srq_attr",
        "CqInitAttrEx",
        "wc_flags",
        "e",
        "IBV_WC_EX_WITH_TM_INFO",
        "e",
        "IBV_WC_STANDARD_FLAGS",
        "CQEX",
        "ctx",
        "cq_init_attr",
        "PyverbsRDMAError",
        "ex",
        "ex",
        "error_code",
        "errno",
        "EOPNOTSUPP",
        "unittest",
        "SkipTest",
        "ex",
        "QPCap",
        "max_send_wr",
        "max_send_sge",
        "max_recv_wr",
        "max_recv_sge",
        "with_srq",
        "QPCap",
        "max_send_wr",
        "max_send_sge",
        "max_recv_wr",
        "num_msgs",
        "max_recv_sge",
        "QPAttr",
        "port_num",
        "ib_port",
        "e",
        "IBV_ACCESS_LOCAL_WRITE",
        "e",
        "IBV_ACCESS_REMOTE_READ",
        "e",
        "IBV_ACCESS_REMOTE_WRITE",
        "qp_attr",
        "e",
        "IBV_ACCESS_LOCAL_WRITE",
        "e",
        "IBV_ACCESS_REMOTE_READ",
        "e",
        "IBV_ACCESS_REMOTE_WRITE",
        "MR",
        "pd",
        "msg_size",
        "access",
        "access",
        "RDMATestCase",
        "setUp",
        "create_players",
        "TMResources",
        "prepare_to_traffic",
        "resource",
        "resource",
        "dev_info",
        "with_srq",
        "resource",
        "dev_info",
        "client",
        "pre_run",
        "server",
        "psns",
        "server",
        "qps_num",
        "server",
        "pre_run",
        "client",
        "psns",
        "client",
        "qps_num",
        "_",
        "server",
        "qp_count",
        "u",
        "post_recv",
        "client",
        "u",
        "get_recv_wr",
        "client",
        "num_wqes",
        "HW_LIMITAION",
        "u",
        "post_recv",
        "server",
        "u",
        "get_recv_wr",
        "server",
        "num_wqes",
        "HW_LIMITAION",
        "tag",
        "tm_opcode",
        "e",
        "IBV_TMH_EAGER",
        "tm",
        "SGE",
        "client",
        "mr",
        "buf",
        "client",
        "msg_size",
        "client",
        "mr_lkey",
        "tm_opcode",
        "e",
        "IBV_TMH_RNDV",
        "server",
        "ctx",
        "query_device_ex",
        "tm_caps",
        "max_rndv_hdr_size",
        "max_rndv_hdr_size",
        "max_rndv_hdr_size",
        "server",
        "mr",
        "length",
        "server",
        "mr",
        "length",
        "write_rndvu_header",
        "player",
        "client",
        "mr",
        "client",
        "mr",
        "tag",
        "tag",
        "tm_opcode",
        "tm_opcode",
        "RecvWR",
        "wr_id",
        "tag",
        "sg",
        "sge",
        "num_sge",
        "u",
        "post_recv",
        "client",
        "c_recv_wr",
        "client",
        "msg_size",
        "client",
        "mr",
        "write",
        "msg",
        "client",
        "msg_size",
        "tm",
        "write_tm_header",
        "mr",
        "client",
        "mr",
        "tag",
        "tag",
        "tm_opcode",
        "tm_opcode",
        "SendWR",
        "opcode",
        "e",
        "IBV_WR_SEND",
        "num_sge",
        "sg",
        "sge",
        "client",
        "mr",
        "read",
        "client",
        "msg_size",
        "send_wr",
        "exp_msg",
        "tm_opcode",
        "e",
        "IBV_TMH_EAGER",
        "fixed_send_tag",
        "tm_opcode",
        "e",
        "IBV_TMH_RNDV",
        "e",
        "IBV_WC_TM_MATCH",
        "fixed_send_tag",
        "e",
        "IBV_WC_TM_MATCH",
        "e",
        "IBV_WC_TM_DATA_VALID",
        "fixed_send_tag",
        "send_tag",
        "tm_opcode",
        "e",
        "IBV_TMH_EAGER",
        "get_exp_wc_flags",
        "tm_opcode",
        "tm_opcode",
        "fixed_send_tag",
        "fixed_send_tag",
        "fixed_send_tag",
        "wc_flags",
        "fixed_send_tag",
        "send_tag",
        "send_tag",
        "send_tag",
        "wc_flags",
        "actual_msg",
        "expected_msg",
        "msg_size",
        "actual_msg",
        "msg_size",
        "expected_msg",
        "msg_size",
        "PyverbsError",
        "expected_msg",
        "actual_msg",
        "actual_cqe",
        "wr_id",
        "opcode",
        "wc_flags",
        "tag",
        "is_server",
        "wr_id",
        "opcode",
        "wc_flags",
        "is_server",
        "tag",
        "key",
        "expected_cqe",
        "expected_cqe",
        "key",
        "actual_cqe",
        "key",
        "PyverbsError",
        "key",
        "expected_cqe",
        "key",
        "actual_cqe",
        "key",
        "exp_parm",
        "recv_parm",
        "descriptor",
        "exp_parm",
        "recv_parm",
        "PyverbsError",
        "descriptor",
        "exp_parm",
        "recv_parm",
        "cqex",
        "is_server",
        "to_valid",
        "time",
        "perf_counter",
        "PollCqAttr",
        "cqex",
        "start_poll",
        "poll_attr",
        "ret",
        "time",
        "perf_counter",
        "start",
        "u",
        "POLL_CQ_TIMEOUT",
        "cqex",
        "start_poll",
        "poll_attr",
        "ret",
        "PyverbsRDMAErrno",
        "cqex",
        "status",
        "e",
        "IBV_WC_SUCCESS",
        "PyverbsError",
        "cqex",
        "status",
        "to_valid",
        "cqex",
        "read_wc_flags",
        "cqex",
        "read_opcode",
        "cqex",
        "wr_id",
        "cqex",
        "read_opcode",
        "cqex",
        "read_wc_flags",
        "is_server",
        "cqex",
        "read_tm_info",
        "tag",
        "recv_opcode",
        "e",
        "IBV_WC_TM_RECV",
        "recv_flags",
        "e",
        "IBV_WC_TM_MATCH",
        "e",
        "IBV_WC_TM_DATA_VALID",
        "server",
        "unexp_cnt",
        "cqex",
        "end_poll",
        "post_sync",
        "actual_cqe_dict",
        "recv_opcode",
        "e",
        "IBV_WC_TM_ADD",
        "recv_flags",
        "e",
        "IBV_WC_TM_SYNC_REQ",
        "cqex",
        "end_poll",
        "post_sync",
        "actual_cqe_dict",
        "cqex",
        "end_poll",
        "actual_cqe_dict",
        "wr_id",
        "SYNC_WRID",
        "OpsWr",
        "wr_id",
        "wr_id",
        "opcode",
        "e",
        "IBV_WR_TAG_SYNC",
        "unexpected_cnt",
        "server",
        "unexp_cnt",
        "recv_wr_id",
        "wr_id",
        "flags",
        "e",
        "IBV_OPS_SIGNALED",
        "e",
        "IBV_OPS_TM_SYNC",
        "server",
        "srq",
        "post_srq_ops",
        "wr",
        "poll_cq_ex",
        "cqex",
        "server",
        "cq",
        "verify_cqe",
        "actual_cqe",
        "actual_cqe",
        "wr_id",
        "SYNC_WRID",
        "opcode",
        "e",
        "IBV_WC_TM_SYNC",
        "tag",
        "wrid",
        "SGE",
        "server",
        "mr",
        "buf",
        "server",
        "msg_size",
        "server",
        "mr",
        "lkey",
        "OpsWr",
        "wr_id",
        "wrid",
        "unexpected_cnt",
        "server",
        "unexp_cnt",
        "recv_wr_id",
        "wrid",
        "num_sge",
        "tag",
        "tag",
        "mask",
        "TAG_MASK",
        "sg_list",
        "recv_sge",
        "server",
        "srq",
        "post_srq_ops",
        "wr",
        "wr",
        "exp_msg",
        "tm_opcode",
        "e",
        "IBV_TMH_EAGER",
        "fixed_send_tag",
        "tm_opcode",
        "e",
        "IBV_TMH_RNDV",
        "fixed_send_tag",
        "server",
        "mr",
        "read",
        "server",
        "msg_size",
        "actual_msg",
        "exp_msg",
        "client",
        "msg_size",
        "no_tag",
        "actual_msg",
        "decode",
        "client",
        "msg_size",
        "TMH_SIZE",
        "client",
        "msg_size",
        "TMH_SIZE",
        "tm_opcode",
        "e",
        "IBV_TMH_EAGER",
        "fixed_send_tag",
        "iters",
        "recv_tag",
        "tags_list",
        "post_recv_tm",
        "tag",
        "recv_tag",
        "wrid",
        "recv_tag",
        "poll_cq_ex",
        "cqex",
        "server",
        "cq",
        "verify_cqe",
        "actual_cqe",
        "actual_cqe",
        "wr_id",
        "recv_tag",
        "opcode",
        "e",
        "IBV_WC_TM_ADD",
        "tags_list",
        "reverse",
        "send_tag",
        "tags_list",
        "get_exp_params",
        "fixed_send_tag",
        "fixed_send_tag",
        "send_tag",
        "send_tag",
        "tm_opcode",
        "tm_opcode",
        "get_send_elements",
        "tag",
        "send_tag",
        "tm_opcode",
        "tm_opcode",
        "u",
        "send",
        "client",
        "send_wr",
        "poll_cq_ex",
        "cqex",
        "client",
        "cq",
        "to_valid",
        "poll_cq_ex",
        "cqex",
        "server",
        "cq",
        "e",
        "IBV_WC_TM_NO_TAG",
        "tm_opcode",
        "e",
        "IBV_TMH_NO_TAG",
        "e",
        "IBV_WC_TM_RECV",
        "verify_cqe",
        "actual_cqe",
        "actual_cqe",
        "wr_id",
        "wrid_exp",
        "opcode",
        "exp_recv_tm_opcode",
        "wc_flags",
        "wc_flags",
        "tag",
        "tag_exp",
        "tm_opcode",
        "e",
        "IBV_TMH_RNDV",
        "poll_cq_ex",
        "cqex",
        "client",
        "cq",
        "verify_cqe",
        "actual_cqe",
        "actual_cqe",
        "opcode",
        "e",
        "IBV_WC_RECV",
        "is_server",
        "poll_cq_ex",
        "cqex",
        "server",
        "cq",
        "verify_cqe",
        "actual_cqe",
        "actual_cqe",
        "wr_id",
        "wrid_exp",
        "opcode",
        "e",
        "IBV_WC_TM_RECV",
        "wc_flags",
        "e",
        "IBV_WC_TM_DATA_VALID",
        "build_expected_and_recv_msgs",
        "exp_msg",
        "exp_msg",
        "tm_opcode",
        "tm_opcode",
        "fixed_send_tag",
        "fixed_send_tag",
        "validate_msg",
        "actual_msg",
        "exp_msg",
        "msg_size",
        "fixed_send_tag",
        "tm_opcode",
        "e",
        "IBV_TMH_NO_TAG",
        "validate_exp_recv_params",
        "exp_parm",
        "curr_unexpected_cnt",
        "recv_parm",
        "server",
        "unexp_cnt",
        "descriptor",
        "curr_unexpected_cnt",
        "u",
        "post_recv",
        "server",
        "u",
        "get_recv_wr",
        "server",
        "tm_traffic",
        "tm_traffic",
        "fixed_send_tag",
        "FIXED_SEND_TAG",
        "tm_traffic",
        "tm_opcode",
        "e",
        "IBV_TMH_NO_TAG",
        "fixed_send_tag",
        "FIXED_SEND_TAG",
        "tm_traffic",
        "tm_opcode",
        "e",
        "IBV_TMH_RNDV"
    ],
    "literals": [
        "'big'",
        "'big'",
        "'big'",
        "'big'",
        "'big'",
        "\"Tag matching is not supported\"",
        "'Extended CQ is not supported'",
        "'c'",
        "f'Data validation failure: expected {expected_msg}, '",
        "f'received {actual_msg}'",
        "'wr_id'",
        "'opcode'",
        "'wc_flags'",
        "'tag'",
        "f'CQE validation failure: {key} expected value: '",
        "f'{expected_cqe[key]}, received {actual_cqe[key]}'",
        "f'{descriptor} validation failure: expected value {exp_parm}, '",
        "f'received {recv_parm}'",
        "'Failed to poll CQ - got a timeout'",
        "f'Completion status is {cqex.status}'",
        "'wr_id'",
        "'opcode'",
        "'wc_flags'",
        "'tag'",
        "'c'",
        "'unexpected_count'"
    ],
    "variables": [
        "TAG_MASK",
        "TMH_SIZE",
        "SYNC_WRID",
        "HW_LIMITAION",
        "FIXED_SEND_TAG",
        "TM_OPCODE_OFFSET",
        "TM_OPCODE_LENGTH",
        "TM_TAG_OFFSET",
        "TM_TAG_LENGTH",
        "RNDV_VA_OFFSET",
        "RNDV_VA_LENGTH",
        "RNDV_RKEY_OFFSET",
        "RNDV_RKEY_LENGTH",
        "RNDV_LEN_OFFSET",
        "RNDV_LEN_LENGTH",
        "unexp_cnt",
        "srq_attr",
        "srq_attr",
        "comp_mask",
        "srq_attr",
        "srq_type",
        "srq_attr",
        "pd",
        "srq_attr",
        "cq",
        "srq_attr",
        "max_num_tags",
        "srq_attr",
        "max_ops",
        "srq",
        "cq_init_attr",
        "cq",
        "qp_attr",
        "qp_attr",
        "qp_access_flags",
        "access",
        "mr",
        "server",
        "client",
        "iters",
        "curr_unexpected_cnt",
        "client",
        "server",
        "sge",
        "max_rndv_hdr_size",
        "sge",
        "length",
        "c_recv_wr",
        "msg",
        "send_wr",
        "exp_msg",
        "wc_flags",
        "expected_cqe",
        "expected_cqe",
        "start",
        "poll_attr",
        "ret",
        "ret",
        "actual_cqe_dict",
        "recv_flags",
        "recv_opcode",
        "actual_cqe_dict",
        "actual_cqe_dict",
        "wr",
        "actual_cqe",
        "recv_sge",
        "wr",
        "no_tag",
        "actual_msg",
        "tags_list",
        "actual_cqe",
        "send_tag",
        "tag_exp",
        "wrid_exp",
        "wc_flags",
        "send_wr",
        "exp_msg",
        "actual_cqe",
        "exp_recv_tm_opcode",
        "actual_cqe",
        "actual_cqe",
        "actual_msg",
        "exp_msg",
        "msg_size"
    ],
    "comments": [
        "SPDX-License-Identifier: (GPL-2.0 OR Linux-OpenIB)",
        "Copyright (c) 2022 Nvidia, Inc. All rights reserved. See COPYING file",
        "Tag matching header lengths and offsets",
        "Need to post_recv client because the server sends rdma-read request to client",
        "In case of receiving unexpected tag, HW doesn't return such wc_flags",
        "updadte unexpected count and sync is required.",
        "These completion is complemented by the IBV_WC_TM_SYNC_REQ flag,",
        "which indicates whether further HW synchronization is needed."
    ],
    "docstrings": [
        "\"\"\"\n    Build a tag matching header, the header is written on the base address of the given mr.\n    \"\"\"",
        "\"\"\"\n    Build a tag matching header + rendezvous header\n    \"\"\"",
        "\"\"\"\n    Test various functionalities of tag matching.\n    \"\"\"",
        "\"\"\"\n        Prepare the TM SRQ for tag matching traffic by posing 33\n        (hardware limitation) recv WR for fill his queue\n        \"\"\"",
        "\"\"\"\n        Creates a single SGE and a single Send WR for client QP. The content\n        of the message is 'c' for client side. The function also generates TMH\n        and RVH to the msg\n        :return: Send wr and expected msg that is read from mr\n        \"\"\"",
        "\"\"\"\n        Whenever HW deems a message unexpected, tag matching must be disabled\n        for new tags until SW and HW synchronize. This synchronization is\n        achieved by reporting to HW the number of unexpected messages handled by\n        SW (with respect to the current posted tags). When the SW and HW are in\n        sync, tag matching resumes normally.\n        \"\"\"",
        "\"\"\"\n        Create opswr according to user chooce of wr_id and a tag\n        and post recv it with the srq and the special func\n        post_srq_ops that posted opswr wqe.\n        :return: The opswr'\n        \"\"\"",
        "\"\"\"\n        Runs Tag matching traffic between two sides (server and client)\n        :param tm_opcode: The TM opcode in the send WR\n        :param fixed_send_tag: If not None complitions are expected to be with no tag\n        \"\"\"",
        "\"\"\"\n        Test basic Tag Matching traffic, client sends tagged WRs server receives\n        and validates it.\n        \"\"\"",
        "\"\"\"\n        Test unexpected Tag Matching traffic, client sends unexpected tagged WRs,\n        server receives and validates it,\n        completions are expected to be with no tag,\n        and unexpected_count field of the server TM-SRQ expected to be increased.\n        \"\"\"",
        "\"\"\"\n        Test no_tag Tag Matching traffic,\n        client sends WRs with tag and with opcode NO_TAG,\n        server receives and validates it,\n        completions are expected to be with no tag.\n        \"\"\"",
        "\"\"\"\n        Test rendezvous Tag Matching traffic,\n        client sends WRs with tag and with opcode RNDV,\n        server receives and validates it,\n        2 completions are expected to be received for every WRs.\n        \"\"\""
    ],
    "functions": [
        "write_tm_header",
        "write_rndvu_header",
        "create_srq",
        "create_cq",
        "create_qp_cap",
        "create_qp_attr",
        "create_mr",
        "setUp",
        "create_players",
        "prepare_to_traffic",
        "get_send_elements",
        "get_exp_wc_flags",
        "get_exp_params",
        "validate_msg",
        "verify_cqe",
        "validate_exp_recv_params",
        "poll_cq_ex",
        "post_sync",
        "post_recv_tm",
        "build_expected_and_recv_msgs",
        "tm_traffic",
        "test_tm_traffic",
        "test_tm_unexpected_tag",
        "test_tm_no_tag",
        "test_tm_rndv"
    ],
    "classes": [
        "TMResources",
        "TMTest"
    ]
}