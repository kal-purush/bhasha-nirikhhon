{
    "identifiers": [
        "org",
        "tquadrat",
        "foundation",
        "javadoc",
        "java",
        "lang",
        "format",
        "java",
        "lang",
        "getProperty",
        "java",
        "lang",
        "java",
        "util",
        "Objects",
        "nonNull",
        "java",
        "util",
        "stream",
        "Collectors",
        "joining",
        "java",
        "util",
        "stream",
        "Collectors",
        "toList",
        "org",
        "apiguardian",
        "api",
        "API",
        "Status",
        "INTERNAL",
        "org",
        "apiguardian",
        "api",
        "API",
        "Status",
        "STABLE",
        "org",
        "tquadrat",
        "foundation",
        "javadoc",
        "Common",
        "createLineNumberFormatString",
        "org",
        "tquadrat",
        "foundation",
        "javadoc",
        "Common",
        "initHelperTaglets",
        "org",
        "tquadrat",
        "foundation",
        "javadoc",
        "ToolKit",
        "isNotEmptyOrBlank",
        "org",
        "tquadrat",
        "foundation",
        "javadoc",
        "ToolKit",
        "loadToString",
        "javax",
        "lang",
        "model",
        "element",
        "Element",
        "javax",
        "tools",
        "FileObject",
        "java",
        "io",
        "BufferedReader",
        "java",
        "io",
        "File",
        "java",
        "io",
        "java",
        "io",
        "Reader",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Optional",
        "java",
        "util",
        "org",
        "apiguardian",
        "api",
        "API",
        "org",
        "tquadrat",
        "foundation",
        "javadoc",
        "foundation",
        "annotation",
        "ClassVersion",
        "com",
        "sun",
        "source",
        "doctree",
        "DocTree",
        "jdk",
        "javadoc",
        "doclet",
        "Doclet",
        "jdk",
        "javadoc",
        "doclet",
        "DocletEnvironment",
        "jdk",
        "javadoc",
        "doclet",
        "Taglet",
        "ClassVersion",
        "sourceVersion",
        "API",
        "status",
        "STABLE",
        "since",
        "SuppressWarnings",
        "ClassVersion",
        "sourceVersion",
        "API",
        "status",
        "INTERNAL",
        "since",
        "consumers",
        "ProcessMode",
        "API",
        "status",
        "INTERNAL",
        "since",
        "DEFAULT",
        "Override",
        "fileName",
        "reader",
        "ESCAPE",
        "processFile",
        "fileName",
        "reader",
        "API",
        "status",
        "INTERNAL",
        "since",
        "ESCAPE",
        "Override",
        "fileName",
        "reader",
        "retValue",
        "bufferedReader",
        "reader",
        "retValue",
        "bufferedReader",
        "lines",
        "ToolKit",
        "escapeHTML",
        "collect",
        "joining",
        "e",
        "format",
        "MSG_ProcessingProblem",
        "fileName",
        "e",
        "retValue",
        "API",
        "status",
        "INTERNAL",
        "since",
        "PLAIN",
        "Override",
        "fileName",
        "reader",
        "retValue",
        "retValue",
        "loadToString",
        "reader",
        "e",
        "format",
        "MSG_ProcessingProblem",
        "fileName",
        "e",
        "retValue",
        "API",
        "status",
        "INTERNAL",
        "since",
        "SOURCE",
        "Override",
        "fileName",
        "reader",
        "lines",
        "bufferedReader",
        "reader",
        "lines",
        "bufferedReader",
        "lines",
        "ToolKit",
        "escapeHTML",
        "collect",
        "toList",
        "e",
        "format",
        "MSG_ProcessingProblem",
        "fileName",
        "e",
        "lineNumberFormat",
        "createLineNumberFormatString",
        "lines",
        "size",
        "lineNumber",
        "buffer",
        "line",
        "lines",
        "buffer",
        "append",
        "format",
        "lineNumberFormat",
        "lineNumber",
        "append",
        "line",
        "append",
        "retValue",
        "buffer",
        "append",
        "toString",
        "retValue",
        "API",
        "status",
        "INTERNAL",
        "since",
        "SOURCE_SNIPPET",
        "buffer",
        "lines",
        "lineNumberFormat",
        "lineNumber",
        "includeLine",
        "AppendLoop",
        "line",
        "lines",
        "line",
        "startsWith",
        "SOURCE_SNIP_START",
        "includeLine",
        "lineNumber",
        "buffer",
        "append",
        "AppendLoop",
        "line",
        "startsWith",
        "SOURCE_SNIP_END",
        "includeLine",
        "buffer",
        "append",
        "AppendLoop",
        "includeLine",
        "buffer",
        "append",
        "format",
        "lineNumberFormat",
        "lineNumber",
        "append",
        "line",
        "append",
        "lineNumber",
        "buffer",
        "lines",
        "lineNumberFormat",
        "index",
        "lineNumber",
        "snippets",
        "localBuffer",
        "AppendLoop",
        "line",
        "lines",
        "line",
        "startsWith",
        "SOURCE_SNIP_START",
        "localBuffer",
        "snippets",
        "add",
        "localBuffer",
        "lineNumber",
        "localBuffer",
        "append",
        "AppendLoop",
        "line",
        "startsWith",
        "SOURCE_SNIP_END",
        "nonNull",
        "localBuffer",
        "localBuffer",
        "append",
        "localBuffer",
        "AppendLoop",
        "nonNull",
        "localBuffer",
        "localBuffer",
        "append",
        "format",
        "lineNumberFormat",
        "lineNumber",
        "append",
        "line",
        "append",
        "lineNumber",
        "index",
        "snippets",
        "size",
        "buffer",
        "append",
        "snippets",
        "get",
        "index",
        "printf",
        "index",
        "snippets",
        "size",
        "Override",
        "fileName",
        "reader",
        "lines",
        "bufferedReader",
        "reader",
        "lines",
        "bufferedReader",
        "lines",
        "ToolKit",
        "escapeHTML",
        "collect",
        "toList",
        "e",
        "format",
        "MSG_ProcessingProblem",
        "fileName",
        "e",
        "lineNumberFormat",
        "createLineNumberFormatString",
        "lines",
        "size",
        "buffer",
        "length",
        "allSnippets",
        "buffer",
        "lines",
        "lineNumberFormat",
        "index",
        "parseInt",
        "oneSnippet",
        "buffer",
        "lines",
        "lineNumberFormat",
        "index",
        "SuppressWarnings",
        "e",
        "printf",
        "allSnippets",
        "buffer",
        "lines",
        "lineNumberFormat",
        "retValue",
        "buffer",
        "append",
        "toString",
        "retValue",
        "API",
        "status",
        "INTERNAL",
        "since",
        "fileName",
        "reader",
        "file",
        "retValue",
        "reader",
        "file",
        "openReader",
        "retValue",
        "processFile",
        "file",
        "getName",
        "reader",
        "e",
        "format",
        "file",
        "getName",
        "e",
        "retValue",
        "MSG_ProcessingProblem",
        "API",
        "status",
        "STABLE",
        "since",
        "PROPERTY_INCLUDE_ROOT_PREFIX",
        "SOURCE_SNIP_END",
        "SOURCE_SNIP_START",
        "m_AllowedLocations",
        "SuppressWarnings",
        "m_Doclet",
        "m_DocletEnvironment",
        "m_IsInlineTag",
        "m_Name",
        "name",
        "isInlineTag",
        "allowedLocations",
        "m_Name",
        "name",
        "m_IsInlineTag",
        "isInlineTag",
        "m_AllowedLocations",
        "allowedLocations",
        "Override",
        "m_AllowedLocations",
        "m_Doclet",
        "m_DocletEnvironment",
        "Override",
        "m_Name",
        "Override",
        "docletEnvironment",
        "doclet",
        "Taglet",
        "init",
        "docletEnvironment",
        "doclet",
        "m_Doclet",
        "doclet",
        "m_DocletEnvironment",
        "docletEnvironment",
        "initHelperTaglets",
        "docletEnvironment",
        "doclet",
        "Override",
        "m_IsInlineTag",
        "variable",
        "retValue",
        "Optional",
        "empty",
        "isNotEmptyOrBlank",
        "variable",
        "key",
        "format",
        "PROPERTY_INCLUDE_ROOT_PREFIX",
        "variable",
        "fileName",
        "getProperty",
        "key",
        "nonNull",
        "fileName",
        "retValue",
        "Optional",
        "of",
        "fileName",
        "getAbsolutePath",
        "retValue",
        "Override",
        "tags",
        "element"
    ],
    "literals": [
        "\"$Id: IncludeTaglet.java 976 2022-01-06 11:39:58Z tquadrat $\"",
        "\"0.1.0\"",
        "\"InnerClassTooDeeplyNested\"",
        "\"$Id: IncludeTaglet.java 976 2022-01-06 11:39:58Z tquadrat $\"",
        "\"0.0.5\"",
        "\"org.tquadrat.foundation.javadoc\"",
        "\"0.0.5\"",
        "\"0.0.5\"",
        "\"<br>\"",
        "\"0.0.5\"",
        "\"0.0.5\"",
        "\"<div class=\\\"source-container\\\"><pre>\"",
        "\"</pre></div>\"",
        "\"0.0.5\"",
        "\"&hellip;\\n\"",
        "\"&hellip;\\n\"",
        "\"&hellip;\\n\"",
        "\"&hellip;\\n\"",
        "\"Cannot include snippet %d, only %d defined\\n\"",
        "\"<div class=\\\"source-container\\\"><pre>\"",
        "\"unused\"",
        "\"Invalid value for snippet index: %s\\n\"",
        "\"</pre></div>\"",
        "\"0.1.0\"",
        "\"Cannot open Reader on file '%s'\"",
        "\"Problems on processing '%s'\"",
        "\"0.1.0\"",
        "\"org.tquadrat.foundation.include.root\"",
        "\"/\\u002ASNIP_END\\u002A/\"",
        "\"/\\u002ASNIP_START\\u002A/\"",
        "\"FieldCanBeLocal\"",
        "\"unused\"",
        "\"%s.%s\""
    ],
    "variables": [
        "params",
        "params",
        "retValue",
        "params",
        "retValue",
        "params",
        "lines",
        "params",
        "lines",
        "params",
        "params",
        "retValue",
        "m_AllowedLocations",
        "m_Doclet",
        "m_DocletEnvironment",
        "m_IsInlineTag",
        "m_Name"
    ],
    "comments": [
        "processFile()",
        "---* Done *--------------------------------------------------",
        "processFile()",
        "---* Done *--------------------------------------------------",
        "processFile()",
        "---* Done *--------------------------------------------------",
        "processFile()",
        "AppendLoop:",
        "allSnippets()",
        "noinspection AssignmentToNull",
        "AppendLoop:",
        "oneSnippet()",
        "---* Done *--------------------------------------------------",
        "processFile()",
        "---* Done *------------------------------------------------------",
        "processFile()",
        "enum ProcessMode",
        "OtherFileTagletBase()",
        "init()",
        "---* Done *----------------------------------------------------------",
        "rootPathRetriever()",
        "class OtherFileTagletBase"
    ],
    "docstrings": [
        "* ============================================================================\n * Copyright © 2002-2022 by Thomas Thrien.\n * All Rights Reserved.\n * ============================================================================\n *\n * Licensed to the public under the agreements of the GNU Lesser General Public\n * License, version 3.0 (the \"License\"). You may obtain a copy of the License at\n *\n *      http://www.gnu.org/licenses/lgpl.html\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.",
        "*  <p>{@summary This class is the base class for taglet that allow to include\n *  the contents of an external file into the JavaDoc documentation.} This is\n *  particularly useful when the contents of resource files (like a DTD or an\n *  XML Schema) should be shown in the documentation.</p>\n *  <p>Usually, that file is stored somewhere on the\n *  {@link Common#SOURCE_PATH SOURCE_PATH}; this means that a file is addressed\n *  by its path name on the source tree. For example to include this file, the\n *  path would be\n *  {@code org/tquadrat/foundation/javadoc/internal/OtherFileTagletBase.java}.</p>\n *  <p>But additional roots can be provided through system properties, where\n *  the name of the new root will be prefixed by\n *  {@value #PROPERTY_INCLUDE_ROOT_PREFIX}, like\n *  {@code org.tquadrat.foundation.include.root.resources}. To use this root,\n *  prefix the path in the tag with {@code ${resources}}.</p>\n *  <p>The file contents can be processed in some way before it will be\n *  included; refer to\n *  {@link ProcessMode}\n *  for the details.</p>\n *  <p><b>Notes:</b></p>\n *  <ul>\n *      <li>If Maven is used, and the include file is not placed at the\n *      {@code java} path (but on the {@code resources} path, for example}, it\n *      is required to add the parameter <code>&lt;sourcepath&gt;</code> to the\n *      configuration of the {@code maven-javadoc-plugin}, where the path of\n *      the include file is added; otherwise, it will not be found.\n *      Alternatively an external root can be used, as described above.</li>\n *      <li>At default, Gradle adds only {@code *.java} files as sources for\n *      the Javadoc task. To make other files available for the\n *      {@code @include} tag, an external root should be used. This is\n *      mandatory for files that are stored at the {@code resources} path.</li>\n *      <li>In general, both Maven and Gradle may have funny ideas about the\n *      source path, so the recommendation is to use an external root\n *      always.</li>\n *      <li>If the source of a class should be included, the path to the source\n *      file is relative to the module directory, if one exists.</li>\n *      <li>The {@code {@include}} tag is an inline tag; that means that the\n *      contents of the included file will be seamlessly integrated into the\n *      other text of the respective Javadoc comment.</li>\n *  </ul>\n *\n *  @author Thomas Thrien - thomas.thrien@tquadrat.org\n *  @version $Id: IncludeTaglet.java 976 2022-01-06 11:39:58Z tquadrat $\n *  @since 0.1.0",
        "--------------*\\\n    ====** Inner Classes **====================================================\n        \\*---------------",
        "*  The process modes for the included file.\n     *\n     *  @author Thomas Thrien - thomas.thrien@tquadrat.org\n     *  @version $Id: IncludeTaglet.java 976 2022-01-06 11:39:58Z tquadrat $\n     *  @since 0.0.5",
        "-----------------*\\\n        ====** Enum Declaration **=============================================\n            \\*------------------",
        "*  The default mode that is used if no process mode is given; the same\n         *  as\n         *  {@link #ESCAPE}.",
        "*  {@inheritDoc}",
        "*  HTML relevant characters will be escaped in the file contents, and\n         *  line breaks are replaced by the HTML tag {@code <br>}.",
        "*  {@inheritDoc}",
        "*  <p>{@summary The file contents will be included as is; this works\n         *  for really simple plain text files that do not contain any HTML\n         *  relevant characters, or for valid HTML snippets.}</p>\n         *  <p>Line breaks are ignored by HTML browsers; this means that a\n         *  plain text file will appear as a long single line.</p>",
        "*  {@inheritDoc}",
        "*  The file contents is source code of some kind. It will be treated\n         *  as for\n         *  {@link #ESCAPE},\n         *  and additionally, each line will be prefixed with a line number.",
        "*  {@inheritDoc}",
        "*  <p>{@summary The file contents is source code of some kind.} It will\n         *  be treated as for\n         *  {@link #SOURCE},\n         *  but only the lines between a line starting with\n         *  {@value #SOURCE_SNIP_START}\n         *  and another one beginning with\n         *  {@value #SOURCE_SNIP_END}\n         *  or the end of the file.</p>\n         *  <p>The line numbers are as for the full file.</p>\n         *  <p>Additionally, a snippet can be selected by its index if there\n         *  are more than one snippet marked in the source file.</p>",
        "*  Returns all snippets.\n             *\n             *  @param  buffer  The output buffer.\n             *  @param  lines   The lines of the file.\n             *  @param  lineNumberFormat    The line number format String.",
        "*  Returns one single snippet, identified by the index.\n             *\n             *  @param  buffer  The output buffer.\n             *  @param  lines   The lines of the file.\n             *  @param  lineNumberFormat    The line number format String.\n             *  @param  index   The number of the snippet, with 1 for the first\n             *      snippet.",
        "*  {@inheritDoc}",
        "--------*\\\n        ====** Methods **======================================================\n            \\*---------",
        "*  Processes the given file.\n         *\n         *  @param  fileName    The name of the file to process; used for error\n         *      messages only.\n         *  @param  reader    The file to process.\n         *  @param  params  Optional parameters for the processing.\n         *  @return  The processed file contents.\n         *\n         *  @since 0.1.0",
        "*  Processes the given file.\n         *\n         *  @param  file    The file to process.\n         *  @param  params  Optional parameters for the processing.\n         *  @return  The processed file contents.",
        "----------*\\\n    ====** Constants **========================================================\n        \\*-----------",
        "*  The error message indicating a problem when processing the include\n     *  file.",
        "*  The prefix for the name of a property that holds the root for path of\n     *  an include file: {@value}. It will be set on the {@code javadoc}\n     *  command line like this:\n     *  <pre><code>-J-Dorg.tquadrat.foundation.include.root.&lt;<i>name</i>&gt;=&lt;<i>path</i>&gt;</code></pre>",
        "*  The snippet end marker for source code: {@value}.",
        "*  The snippet start marker for source code: {@value}.",
        "-----------*\\\n    ====** Attributes **=======================================================\n        \\*------------",
        "*  The allowed locations.",
        "*  The doclet.",
        "*  The doclet environment.",
        "*  The flag that indicates whether this taglet is an inline taglet.",
        "*  The name of the taglet.",
        "-------------*\\\n    ====** Constructors **=====================================================\n        \\*--------------",
        "*  Creates a new {@code IncludeTaglet} instance.\n     *\n     *  @param  name    The name of the taglet.\n     *  @param  isInlineTag {@code true} if the tag implemented by this taglet\n     *      is an inline tag, {@code false} if it is a block tag.\n     *  @param  allowedLocations    The locations that are allowed for this\n     *      taglet.\n     *\n     *  @see #getName()\n     *  @see #isInlineTag()\n     *  @see #getAllowedLocations()",
        "--------*\\\n    ====** Methods **==========================================================\n        \\*---------",
        "*  {@inheritDoc}",
        "*  Returns a reference to the\n     *  {@link Doclet}\n     *  instance that uses this taglet.\n     *\n     *  @return The reference to the doclet.",
        "*  Returns a reference to the\n     *  {@link DocletEnvironment}\n     *  instance that is used by the\n     *  {@link Doclet}\n     *  running this taglet.\n     *\n     *  @return The reference to the doclet processing environment.",
        "*  {@inheritDoc}",
        "*  {@inheritDoc}",
        "*  {@inheritDoc}",
        "*  Looks up the system properties for a root path for include files with\n     *  the given name (the full name would be the prefix\n     *  {@value #PROPERTY_INCLUDE_ROOT_PREFIX}\n     *  appended by the argument, separated by a '.'.\n     *\n     *  @param  variable    The name of the root path.\n     *  @return An instance of\n     *      {@link Optional}\n     *      that holds the path.",
        "*  {@inheritDoc}",
        "*  End of File"
    ],
    "functions": [
        "processFile",
        "processFile",
        "processFile",
        "processFile",
        "allSnippets",
        "oneSnippet",
        "processFile",
        "processFile",
        "processFile",
        "OtherFileTagletBase",
        "getAllowedLocations",
        "Doclet",
        "getDoclet",
        "DocletEnvironment",
        "getEnvironment",
        "getName",
        "init",
        "isInlineTag",
        "rootPathRetriever",
        "toString"
    ],
    "classes": [
        "OtherFileTagletBase"
    ]
}