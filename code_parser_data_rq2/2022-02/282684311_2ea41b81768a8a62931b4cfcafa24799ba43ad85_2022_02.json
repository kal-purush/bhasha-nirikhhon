{
    "identifiers": [
        "NodeHttpTransport",
        "PythImplementation__factory",
        "http",
        "net",
        "fs",
        "ethers",
        "getSignedAttestation",
        "parseBatchAttestation",
        "p2w_core",
        "sol_addr2buf",
        "setDefaultWasm",
        "importCoreWasm",
        "port",
        "net",
        "srv",
        "port",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "P2W_ATTESTATIONS_POLL_INTERVAL_MS",
        "setDefaultWasm",
        "importCoreWasm",
        "ethers",
        "ETH_NODE_URL",
        "fs",
        "ETH_MNEMONIC_FILE",
        "ethers",
        "mnemonic",
        "ETH_HD_WALLET_PATH",
        "wallet",
        "ethers",
        "wallet",
        "provider",
        "signer",
        "balance",
        "PythImplementation__factory",
        "signer",
        "p2w_eth",
        "factory",
        "ETH_P2W_CONTRACT",
        "e",
        "e",
        "e",
        "http",
        "P2W_ATTESTATIONS_HOST",
        "P2W_ATTESTATIONS_PORT",
        "res",
        "res",
        "res",
        "res",
        "res",
        "chunk",
        "chunks",
        "chunk",
        "res",
        "chunks",
        "body",
        "response",
        "response",
        "seqno",
        "response",
        "seqnoPool",
        "seqno",
        "e",
        "e",
        "seqnoPool",
        "poolEntry",
        "seqnoPool",
        "poolEntry",
        "poolEntry",
        "attempts",
        "P2W_RELAY_RETRY_COUNT",
        "poolEntry",
        "seqnoPool",
        "seqno",
        "vaaResponse",
        "getSignedAttestation",
        "GUARDIAN_RPC_HOST_PORT",
        "P2W_SOL_ADDRESS",
        "seqno",
        "NodeHttpTransport",
        "e",
        "poolEntry",
        "e",
        "seqnoPool",
        "seqno",
        "attempts",
        "poolEntry",
        "vaaResponse",
        "parse_vaa",
        "vaaResponse",
        "poolEntry",
        "parsedVaa",
        "parseBatchAttestation",
        "parsedVaa",
        "poolEntry",
        "parsedAttestations",
        "parsedAttestations",
        "readinessProbe",
        "poolEntry",
        "readinessProbe",
        "readinessProbeRoutine",
        "READINESS_PROBE_PORT",
        "seqnoPool",
        "seqno",
        "f",
        "setTimeout",
        "f",
        "P2W_ATTESTATIONS_POLL_INTERVAL_MS"
    ],
    "literals": [
        "\"@improbable-eng/grpc-web-node-http-transport\"",
        "\"./ethers-contracts\"",
        "\"http\"",
        "\"net\"",
        "\"fs\"",
        "\"ethers\"",
        "\"@certusone/p2w-sdk\"",
        "\"@certusone/wormhole-sdk/lib/cjs/solana/wasm\"",
        "\"p2w-attest\"",
        "\"4343\"",
        "\"5000\"",
        "\"P2WH424242424242424242424242424242424242424\"",
        "\"2000\"",
        "\"3\"",
        "\"ws://eth-devnet:8545\"",
        "\"0xA94B7f0465E98609391C623d0560C5720a3f2D33\"",
        "\"../../../ethereum/devnet_mnemonic.txt\"",
        "\"m/44'/60'/0'/0/0\"",
        "\"http://guardian:7071\"",
        "Polling attestations endpoint every ${P2W_ATTESTATIONS_POLL_INTERVAL_MS / 1000} seconds",
        "\"node\"",
        "string",
        "\"utf-8\"",
        "Using ETH wallet pubkey: ${wallet.publicKey}",
        "Account balance is ${balance}",
        "Error: Could not instantiate ETH contract:",
        "\"/\"",
        "\"Could not reach attestations endpoint\"",
        "string",
        "\"utf-8\"",
        "'data'",
        "'end'",
        "''",
        "Got ${response.pendingSeqnos.length} new seqnos: ${response.pendingSeqnos}",
        "'error'",
        "Got error: ${e.message}",
        "\"Processing seqnos:\"",
        "[seqno ${poolEntry}] Exceeded retry count, removing from list",
        "[seqno ${poolEntry}] Error: Could not call getSignedAttestation:",
        "[seqno ${poolEntry}] Price attestation VAA bytes:\\n",
        "[seqno ${poolEntry}] Parsed VAA:\\n",
        "[seqno ${poolEntry}] Parsed ${parsedAttestations.length} price attestations:\\n",
        "\"TODO: implement relayer ETH call\"",
        "[seqno ${poolEntry}] Attestation successful. Starting readiness probe."
    ],
    "variables": [
        "srv",
        "P2W_ATTESTATIONS_HOST",
        "P2W_ATTESTATIONS_PORT",
        "P2W_ATTESTATIONS_POLL_INTERVAL_MS",
        "P2W_SOL_ADDRESS",
        "READINESS_PROBE_PORT",
        "P2W_RELAY_RETRY_COUNT",
        "ETH_NODE_URL",
        "ETH_P2W_CONTRACT",
        "ETH_MNEMONIC_FILE",
        "ETH_HD_WALLET_PATH",
        "GUARDIAN_RPC_HOST_PORT",
        "readinessProbe",
        "seqnoPool",
        "p2w_eth",
        "provider",
        "mnemonic",
        "wallet",
        "signer",
        "balance",
        "factory",
        "chunks",
        "body",
        "response",
        "seqno",
        "attempts",
        "vaaResponse",
        "parsedVaa",
        "parsedAttestations"
    ],
    "comments": [
        "p2w-attest exposes an HTTP endpoint that shares the currently pending sequence numbers",
        "ETH node connection details; Currently, we expect to read BIP44",
        "wallet recovery mnemonics from a text file.",
        "Public RPC address for use with signed attestation queries",
        "Connect to ETH",
        "try {",
        "let tx = await p2w_eth.attestPrice(vaaResponse.vaaBytes, {gasLimit: 1000000});",
        "let retval = await tx.wait();",
        "console.log(`[seqno ${poolEntry}] attestPrice() output:\\n`, retval);",
        "} catch(e) {",
        "console.error(`[seqno ${poolEntry}, {parsedAttestations.length} symbols] Error: Could not call attestPrice() on ETH:`, e);",
        "seqnoPool.set(seqno, attempts + 1);",
        "continue;",
        "}",
        "for (let att of parsedAttestations) {",
        "let product_id = att.product_id;",
        "let price_type = att.price_type == \"Price\" ? 1 : 0;",
        "let latest_attestation: any;",
        "try {",
        "let p2w = await p2w_core();",
        "console.log(`Looking up latestAttestation for `, product_id, price_type);",
        "latest_attestation = await p2w_eth.latestAttestation(product_id, price_type);",
        "} catch(e) {",
        "console.error(`[seqno ${poolEntry}] Error: Could not call latestAttestation() on ETH:`, e);",
        "seqnoPool.set(seqno, attempts + 1);",
        "continue;",
        "}",
        "console.log(`[seqno ${poolEntry}] Latest price type ${price_type} attestation of ${product_id} is ${latest_attestation}`);",
        "}",
        "Everything went well, seqno no longer pending."
    ],
    "docstrings": [],
    "functions": [
        "readinessProbeRoutine"
    ],
    "classes": []
}