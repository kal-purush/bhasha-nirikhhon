{
    "identifiers": [
        "HKT",
        "Type",
        "Type2",
        "Type3",
        "URIS",
        "URIS2",
        "URIS3",
        "Semigroup",
        "identity",
        "Option",
        "some",
        "none",
        "Semialign",
        "Semialign1",
        "Semialign2",
        "Semialign2C",
        "Semialign3",
        "Semialign3C",
        "salign",
        "F",
        "S",
        "fx",
        "fy",
        "salign",
        "F",
        "S",
        "fx",
        "fy",
        "salign",
        "F",
        "S",
        "fx",
        "fy",
        "salign",
        "F",
        "S",
        "fx",
        "fy",
        "salign",
        "F",
        "S",
        "fx",
        "fy",
        "salign",
        "F",
        "S",
        "fx",
        "fy",
        "F",
        "S",
        "fx",
        "fy",
        "fx",
        "fy",
        "F",
        "fx",
        "fy",
        "xy",
        "xy",
        "identity",
        "identity",
        "S",
        "padZip",
        "F",
        "fa",
        "fb",
        "padZip",
        "F",
        "fa",
        "fb",
        "padZip",
        "F",
        "fa",
        "fb",
        "padZip",
        "F",
        "fa",
        "fb",
        "padZip",
        "F",
        "fa",
        "fb",
        "padZip",
        "F",
        "fa",
        "fb",
        "F",
        "fa",
        "fb",
        "fa",
        "fb",
        "padZipWith",
        "F",
        "fa",
        "fb",
        "a",
        "b",
        "a",
        "b",
        "padZipWith",
        "F",
        "fa",
        "fb",
        "f",
        "a",
        "b",
        "padZipWith",
        "F",
        "fa",
        "fb",
        "f",
        "a",
        "b",
        "padZipWith",
        "F",
        "fa",
        "fb",
        "f",
        "a",
        "b",
        "padZipWith",
        "F",
        "fa",
        "fb",
        "f",
        "a",
        "b",
        "padZipWith",
        "F",
        "fa",
        "fb",
        "f",
        "a",
        "b",
        "padZipWith",
        "F",
        "fa",
        "fb",
        "f",
        "a",
        "b",
        "F",
        "fa",
        "fb",
        "f",
        "a",
        "b",
        "fa",
        "fb",
        "f",
        "F",
        "fa",
        "fb",
        "ab",
        "ab",
        "some",
        "some",
        "a",
        "f",
        "a",
        "none",
        "b",
        "f",
        "none",
        "b",
        "a",
        "b",
        "f",
        "a",
        "b"
    ],
    "literals": [
        "'fp-ts/lib/HKT'",
        "'fp-ts/lib/Semigroup'",
        "'fp-ts/lib/function'",
        "'fp-ts/lib/Option'",
        "'../Semialign'"
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* @file The `Align` type class extends the `Semialign` type class with a value `nil`, which\n * acts as a unit in regards to `align`.\n *\n * `Align` instances must satisfy the following laws in addition to the `Semialign` laws:\n *\n * 1. Right identity: `F.align(fa, nil) = F.map(fa, this_)`\n * 2. Left identity: `F.align(nil, fa) = F.map(fa, that)`\n *\n * Adapted from http://hackage.haskell.org/package/these-0.8/docs/Data-Align.html",
        "* @since 0.0.3",
        "* Align two structures, using a semigroup for combining values.\n *\n * @example\n * import { semigroupSum } from 'fp-ts/lib/Semigroup'\n * import { salign } from 'fp-ts-contrib/lib/Align'\n * import { alignArray } from 'fp-ts-contrib/lib/Align/Array'\n *\n * assert.deepStrictEqual(salign(alignArray, semigroupSum)([1, 2, 3], [4, 5]), [5, 7, 3])\n *\n * @since 0.0.3",
        "* Align two structures, using `none` to fill blanks.\n *\n * It is similar to `zip`, but it doesn't discard elements.\n *\n * @example\n * import { some, none } from 'fp-ts/lib/Option'\n * import { padZip } from 'fp-ts-contrib/lib/Align'\n * import { alignArray } from 'fp-ts-contrib/lib/Align/Array'\n *\n * assert.deepStrictEqual(padZip(alignArray)([1, 2, 3], [4, 5]), [[some(1), some(4)], [some(2), some(5)], [some(3), none]])\n *\n * @since 0.0.3",
        "* Align two structures by applying a function to each pair of aligned elements, using `none` to fill blanks.\n *\n * It is similar to `zipWith`, but it doesn't discard elements.\n *\n * @example\n * import { Option } from 'fp-ts/lib/Option'\n * import { padZipWith } from 'fp-ts-contrib/lib/Align'\n * import { alignArray } from 'fp-ts-contrib/lib/Align/Array'\n *\n * const f = (ma: Option<number>, mb: Option<string>) => ma.fold('*', a => a.toString()) + mb.getOrElse('#')\n * assert.deepStrictEqual(padZipWith(alignArray)([1, 2], ['a'], f), ['1a', '2#'])\n * assert.deepStrictEqual(padZipWith(alignArray)([1], ['a', 'b'], f), ['1a', '*b'])\n *\n * @since 0.0.3"
    ],
    "functions": [
        "salign",
        "padZip",
        "padZipWith"
    ],
    "classes": []
}