{
    "identifiers": [
        "skmultiflow",
        "core",
        "StreamModel",
        "numpy",
        "np",
        "StreamModel",
        "estimator",
        "weight",
        "estimator",
        "weight",
        "other",
        "weight",
        "other",
        "weight",
        "max_estimators",
        "base_estimator",
        "beta",
        "gamma",
        "max_estimators",
        "base_estimator",
        "beta",
        "gamma",
        "reset",
        "X",
        "y",
        "classes",
        "weight",
        "NotImplementedError",
        "X",
        "y",
        "classes",
        "weight",
        "X",
        "np",
        "argmax",
        "predict_proba",
        "X",
        "X",
        "exp",
        "estimator",
        "predict",
        "X",
        "exp",
        "weight",
        "exp",
        "experts",
        "ipdb",
        "ipdb",
        "set_trace",
        "np",
        "sum",
        "predictions",
        "axis",
        "np",
        "sum",
        "predictions",
        "WeightedClassifier",
        "base_estimator",
        "X",
        "y",
        "X",
        "y",
        "ipdb",
        "ipdb",
        "set_trace",
        "get_expert_predictions_probs",
        "X",
        "np",
        "argmax",
        "np",
        "sum",
        "pred_probs",
        "w",
        "pred_probs",
        "w",
        "predictions_probs",
        "exp",
        "weight",
        "exp",
        "experts",
        "axis",
        "update_expert_weights",
        "np",
        "argmax",
        "predictions_probs",
        "y",
        "output_pred",
        "y",
        "sum",
        "exp",
        "weight",
        "exp",
        "experts",
        "WeightedClassifier",
        "base_estimator",
        "ensemble_weight",
        "gamma",
        "exp",
        "experts",
        "exp",
        "partial_fit",
        "X",
        "y",
        "X",
        "exp",
        "estimator",
        "predict",
        "X",
        "exp",
        "experts",
        "expert_predictions",
        "y_true",
        "exp",
        "y_pred",
        "experts",
        "expert_predictions",
        "y_pred",
        "y_true",
        "exp",
        "weight",
        "beta",
        "sorted",
        "experts",
        "key",
        "exp",
        "exp",
        "weight",
        "reverse"
    ],
    "literals": [],
    "variables": [
        "estimator",
        "weight",
        "max_estimators",
        "base_estimator",
        "beta",
        "gamma",
        "predictions",
        "experts",
        "predictions_probs",
        "output_pred",
        "ensemble_weight",
        "new_exp",
        "exp",
        "weight",
        "experts"
    ],
    "comments": [
        "@staticmethod",
        "def from_base_estimator(n_estimators, base_estimator, beta, gamma):",
        "\"\"\"",
        "Cosntructor from a base_estimator.",
        "\"\"\"",
        "return DynamicWeightedEnsemble({base_estimator() for _ in n_estimators}, beta, gamma)",
        "1. Get expert predictions:",
        "2. Output prediction:",
        "3. Update expert weights:",
        "4. If y_pred != y_true, then add a new expert:",
        "new expert's weight is equal to the total weight of the ensemble times the gamma constant",
        "5. Train each expert on X",
        "6. Pruning",
        "TODO Pruning to max_estimators",
        "(either by age or weight)",
        "TODO Improve efficieny",
        "there are lots of repeated iterations and O(n) accesses to collections..."
    ],
    "docstrings": [
        "\"\"\"\n    Additive Expert Ensemble [1].\n\n    Parameters\n    __________\n    max_estimators: maximum number of estimators to hold.\n    base_estimator: constructor for new estimators.\n    beta: factor for decreasing weights.\n    gamma: factor for new expert weight.\n\n    References\n    __________\n    [1]\n    Kolter and Maloof, Using additive expert ensembles to cope with Concept\n    drift, Proc. 22 International Conference on Machine Learning, 2005.\n    \"\"\"",
        "\"\"\"\n        Wrapper that includes an estimator and its weight, for easier ordering.\n        - Inspired by PR #97\n        \"\"\"",
        "\"\"\"\n        Predict + update weights + modify experts + train on new sample.\n        (As was originally described by [1])\n        \"\"\"",
        "\"\"\"\n        Returns prediction probabilities of each class for each expert.\n        In shape: (rows, cols) = (n_experts, n_classes)\n        \"\"\""
    ],
    "functions": [
        "__lt__",
        "fit",
        "partial_fit",
        "predict",
        "predict_proba",
        "reset",
        "score",
        "get_info",
        "predict_fit",
        "get_expert_predictions_probs",
        "update_expert_weights"
    ],
    "classes": [
        "AdditiveExpertEnsemble",
        "WeightedClassifier"
    ]
}