{
    "identifiers": [
        "express",
        "fs",
        "git",
        "getNow",
        "git",
        "fs",
        "ary",
        "ary",
        "ary",
        "catchError",
        "res",
        "express",
        "e",
        "e",
        "res",
        "e",
        "makePath",
        "p",
        "p",
        "key",
        "git",
        "fs",
        "getNow",
        "fs",
        "now",
        "cloneInfo",
        "now",
        "now",
        "pullInfo",
        "filepath",
        "oid",
        "blob",
        "blob",
        "fileText",
        "commit",
        "cdn",
        "fileText",
        "baseRE",
        "makePath",
        "cdn",
        "commit",
        "filepath",
        "cdn",
        "replaceFunction",
        "s1",
        "s2",
        "s3",
        "filepath",
        "replaceFunction",
        "s1",
        "s2",
        "s3",
        "s1",
        "s2",
        "s3",
        "f",
        "buffer",
        "commit",
        "cdn",
        "express",
        "root",
        "config",
        "inject",
        "req",
        "express",
        "res",
        "express",
        "next",
        "express",
        "path",
        "req",
        "p",
        "p",
        "resolveCommit",
        "sha",
        "sha",
        "command",
        "root",
        "reqtype",
        "reqtype",
        "reqtype",
        "isCommit",
        "resolveCommit",
        "s",
        "s",
        "makePath",
        "path",
        "getCommit",
        "refId",
        "oid",
        "blob",
        "res",
        "isCommit",
        "blob",
        "permanentHeaders",
        "isCommit",
        "makePath",
        "root",
        "blob",
        "last",
        "path",
        "catchError",
        "res",
        "reqtype",
        "res",
        "oid",
        "permanentHeaders",
        "last",
        "path",
        "catchError",
        "res",
        "next",
        "root",
        "config",
        "Grassland",
        "root",
        "config"
    ],
    "literals": [
        "'express'",
        "'fs'",
        "\"isomorphic-git\"",
        "'fs'",
        "string",
        "'/'",
        "string",
        "string",
        "string",
        "'github'",
        "'bitbucket'",
        "'gitlab'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'utf8'",
        "string",
        "string",
        "string",
        "string",
        "'$1'",
        "''",
        "'commit'",
        "''",
        "'$2'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'Cache-Control'",
        "'immutable, public'",
        "'Expires'",
        "'Tue Dec 31 2069 16:00:00 GMT-0800'",
        "'/'",
        "string",
        "'ref'",
        "'commit'",
        "'commit'",
        "string",
        "''",
        "'ETag'",
        "''",
        "'blob'",
        "'blob'",
        "'ETag'",
        "string"
    ],
    "variables": [
        "getNow",
        "catchError",
        "makePath",
        "now",
        "cloneInfo",
        "pullInfo",
        "baseRE",
        "buffer",
        "commit",
        "f",
        "permanentHeaders",
        "command",
        "reqtype",
        "refId",
        "resolveCommit",
        "isCommit",
        "getCommit",
        "filepath",
        "oid",
        "refId"
    ],
    "comments": [
        "preserve the file-name, for MIME-type"
    ],
    "docstrings": [
        "*    Copyright 2019 Google LLC\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *        https://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.",
        "* Given a path and a reference (a commit or a ref -- a ref being a tag or a branch), \n   * returns the underlying object.",
        "* What it says on the tin: given a ref (that is, a tag or a branch), finds the\n   * commit-id that, as of the most recent pull, is pointed to by that ref.",
        "* Perform the standard substitution in the html file.\n   * the first occurance of <base href=\"/\"> will be transmuted into\n   * <base href=\"https://example.somecdn.com/root/commit/5fbe1f58671/\" >\n   * (assuming those are the value for cdn, root, and commit.\n   * It's done with a reg-exp, which is getting into \"the pony, he comes\" \n   * territory https://is.gd/41FT2p but should be OK.",
        "* Get an actual file at a filepath and tag or commit, not just a\n   * redirect.  This is used for getting index.html (and equivalent\n   * files), where a <base> tag must be updated with the path to the\n   * CDN and a commit-id.  By default, it uses replaceBase() to\n   * re-write the file, but the caller can pass in some other function\n   * of type (string) => string.",
        "* For testing ONLY -- you can inject replacement mocks for fs, git, and now()\n     const {fs, git, getNow} = Object.assign({\n     fs: realFs,\n     git: isomorphicGit,\n     getNow: realNow,\n     }, inject);",
        "* the redirect sent in response to a request-by-commit or a file sent in request\n     * to a request-by-blob-id is permanent and any cache can hold it as long as it wishes.",
        "* This is the actual Grassland function.  It responds to three kinds of requests\n     * * /ref, a request by tag or branch -- it responds with a temporary redirect to a blob\n     * * /commit, a request by commit -- it responds with a permanent redirect to a blob\n     * * /blob, a request by blob -- it responds with the content of the file\n     * It is a function, not a method, so the user does not have to worry about binding."
    ],
    "functions": [
        "last",
        "checkRepo",
        "getFileByReference",
        "getCommitForRef",
        "replaceBase",
        "serveFile",
        "grassland"
    ],
    "classes": [
        "Grassland"
    ]
}