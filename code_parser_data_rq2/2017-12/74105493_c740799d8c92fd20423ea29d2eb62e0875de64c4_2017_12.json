{
    "identifiers": [
        "com",
        "gosuncn",
        "image",
        "android",
        "graphics",
        "Bitmap",
        "android",
        "graphics",
        "Matrix",
        "android",
        "os",
        "Environment",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileOutputStream",
        "SuppressWarnings",
        "LOGGER",
        "kMaxChannelValue",
        "useNativeConversion",
        "loadLibrary",
        "e",
        "LOGGER",
        "e",
        "input",
        "output",
        "width",
        "height",
        "halfSize",
        "y",
        "u",
        "v",
        "output",
        "width",
        "height",
        "yRowStride",
        "uvRowStride",
        "uvPixelStride",
        "halfSize",
        "input",
        "output",
        "width",
        "height",
        "input",
        "output",
        "width",
        "height",
        "input",
        "output",
        "width",
        "height",
        "width",
        "height",
        "ySize",
        "width",
        "height",
        "uvSize",
        "width",
        "height",
        "ySize",
        "uvSize",
        "input",
        "width",
        "height",
        "output",
        "useNativeConversion",
        "ImageUtil",
        "convertYUV420SPToARGB8888",
        "input",
        "output",
        "width",
        "height",
        "e",
        "LOGGER",
        "w",
        "useNativeConversion",
        "frameSize",
        "width",
        "height",
        "j",
        "yp",
        "j",
        "height",
        "j",
        "uvp",
        "frameSize",
        "j",
        "width",
        "u",
        "v",
        "i",
        "i",
        "width",
        "i",
        "yp",
        "y",
        "input",
        "yp",
        "i",
        "v",
        "input",
        "uvp",
        "u",
        "input",
        "uvp",
        "output",
        "yp",
        "YUV2RGB",
        "y",
        "u",
        "v",
        "yData",
        "uData",
        "vData",
        "width",
        "height",
        "yRowStride",
        "uvRowStride",
        "uvPixelStride",
        "useNativeConversion",
        "convertYUV420ToARGB8888",
        "yData",
        "uData",
        "vData",
        "width",
        "height",
        "yRowStride",
        "uvRowStride",
        "uvPixelStride",
        "e",
        "LOGGER",
        "w",
        "useNativeConversion",
        "yp",
        "j",
        "j",
        "height",
        "j",
        "pY",
        "yRowStride",
        "j",
        "pUV",
        "uvRowStride",
        "j",
        "i",
        "i",
        "width",
        "i",
        "uv_offset",
        "pUV",
        "i",
        "uvPixelStride",
        "yp",
        "YUV2RGB",
        "yData",
        "pY",
        "i",
        "uData",
        "uv_offset",
        "vData",
        "uv_offset",
        "y",
        "u",
        "v",
        "y",
        "y",
        "y",
        "u",
        "v",
        "y1192",
        "y",
        "r",
        "y1192",
        "v",
        "g",
        "y1192",
        "v",
        "u",
        "b",
        "y1192",
        "u",
        "r",
        "r",
        "kMaxChannelValue",
        "kMaxChannelValue",
        "r",
        "r",
        "g",
        "g",
        "kMaxChannelValue",
        "kMaxChannelValue",
        "g",
        "g",
        "b",
        "b",
        "kMaxChannelValue",
        "kMaxChannelValue",
        "b",
        "b",
        "r",
        "g",
        "b",
        "srcWidth",
        "srcHeight",
        "dstWidth",
        "dstHeight",
        "applyRotation",
        "maintainAspectRatio",
        "matrix",
        "applyRotation",
        "applyRotation",
        "LOGGER",
        "w",
        "applyRotation",
        "matrix",
        "postTranslate",
        "srcWidth",
        "srcHeight",
        "matrix",
        "postRotate",
        "applyRotation",
        "transpose",
        "abs",
        "applyRotation",
        "inWidth",
        "transpose",
        "srcHeight",
        "srcWidth",
        "inHeight",
        "transpose",
        "srcWidth",
        "srcHeight",
        "inWidth",
        "dstWidth",
        "inHeight",
        "dstHeight",
        "scaleFactorX",
        "dstWidth",
        "inWidth",
        "scaleFactorY",
        "dstHeight",
        "inHeight",
        "maintainAspectRatio",
        "scaleFactor",
        "max",
        "scaleFactorX",
        "scaleFactorY",
        "matrix",
        "postScale",
        "scaleFactor",
        "scaleFactor",
        "matrix",
        "postScale",
        "scaleFactorX",
        "scaleFactorY",
        "applyRotation",
        "matrix",
        "postTranslate",
        "dstWidth",
        "dstHeight",
        "matrix"
    ],
    "literals": [
        "\"unused\"",
        "\"imageutil-lib\"",
        "\"Native library imageutil-lib not found, native RGB <-> YUV conversion may be unavailable.\"",
        "\"Native YUV420SP -> RGB implementation not found, falling back to Java implementation\"",
        "\"Native YUV420 -> RGB implementation not found, falling back to Java implementation\"",
        "\"Rotation of %d % 90 != 0\""
    ],
    "variables": [],
    "comments": [
        "This value is 2 ^ 18 - 1, and is used to clamp the RGB values before their ranges",
        "are normalized to eight bits.",
        "Always prefer the native implementation if available.",
        ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>jni>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
        "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<jni<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<",
        "The luminance plane requires 1 byte per pixel.",
        "The UV plane works on 2x2 blocks, so dimensions with odd size must be rounded up.",
        "Each 2x2 block takes 2 bytes to encode, one each for U and V.",
        "Java implementation of YUV420SP to ARGB8888 converting",
        "Adjust and check YUV values",
        "This is the floating point equivalent. We do the conversion in integer",
        "because some Android devices do not have floating point in hardware.",
        "nR = (int)(1.164 * nY + 2.018 * nU);",
        "nG = (int)(1.164 * nY - 0.813 * nV - 0.391 * nU);",
        "nB = (int)(1.164 * nY + 1.596 * nV);",
        "Clipping RGB values to be inside boundaries [ 0 , kMaxChannelValue ]",
        "Translate so center of image is at origin.",
        "Rotate around origin.",
        "Account for the already applied rotation, if any, and then determine how",
        "much scaling is needed for each axis.",
        "Apply scaling if necessary.",
        "Scale by minimum factor so that dst is filled completely while",
        "maintaining the aspect ratio. Some image may fall off the edge.",
        "Scale exactly to fill dst from src.",
        "Translate back from origin centered reference to destination frame."
    ],
    "docstrings": [
        "Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================",
        "* Utility class for manipulating images.\n *",
        "* Converts YUV420 semi-planar data to ARGB 8888 data using the supplied width and height. The\n     * input and output must already be allocated and non-null. For efficiency, no error checking is\n     * performed.\n     *\n     * @param input    The array of YUV 4:2:0 input data.\n     * @param output   A pre-allocated array for the ARGB 8:8:8:8 output data.\n     * @param width    The width of the input image.\n     * @param height   The height of the input image.\n     * @param halfSize If true, downsample to 50% in each dimension, otherwise not.",
        "* Converts YUV420 semi-planar data to ARGB 8888 data using the supplied width\n     * and height. The input and output must already be allocated and non-null.\n     * For efficiency, no error checking is performed.\n     * @param y\n     * @param u\n     * @param v\n     * @param output            A pre-allocated array for the ARGB 8:8:8:8 output data.\n     * @param width             The width of the input image.\n     * @param height            The height of the input image.\n     * @param yRowStride\n     * @param uvRowStride\n     * @param uvPixelStride\n     * @param halfSize          If true, downsample to 50% in each dimension, otherwise not.",
        "* Converts YUV420 semi-planar data to RGB 565 data using the supplied width\n     * and height. The input and output must already be allocated and non-null.\n     * For efficiency, no error checking is performed.\n     *\n     * @param input  The array of YUV 4:2:0 input data.\n     * @param output A pre-allocated array for the RGB 5:6:5 output data.\n     * @param width  The width of the input image.\n     * @param height The height of the input image.",
        "* Converts 32-bit ARGB8888 image data to YUV420SP data.  This is useful, for\n     * instance, in creating data to feed the classes that rely on raw camera\n     * preview frames.\n     *\n     * @param input  An array of input pixels in ARGB8888 format.\n     * @param output A pre-allocated array for the YUV420SP output data.\n     * @param width  The width of the input image.\n     * @param height The height of the input image.",
        "* Converts 16-bit RGB565 image data to YUV420SP data.  This is useful, for\n     * instance, in creating data to feed the classes that rely on raw camera\n     * preview frames.\n     *\n     * @param input  An array of input pixels in RGB565 format.\n     * @param output A pre-allocated array for the YUV420SP output data.\n     * @param width  The width of the input image.\n     * @param height The height of the input image.",
        "* Utility method to compute the allocated size in bytes of a YUV420SP image\n     * of the given dimensions.",
        "*\n     * @param input\n     * @param width\n     * @param height\n     * @param output",
        "*\n     * @param yData\n     * @param uData\n     * @param vData\n     * @param width\n     * @param height\n     * @param yRowStride\n     * @param uvRowStride\n     * @param uvPixelStride\n     * @param out",
        "* Returns a transformation matrix from one reference frame into another.\n     * Handles cropping (if maintaining aspect ratio is desired) and rotation.\n     *\n     * @param srcWidth            Width of source frame.\n     * @param srcHeight           Height of source frame.\n     * @param dstWidth            Width of destination frame.\n     * @param dstHeight           Height of destination frame.\n     * @param applyRotation       Amount of rotation to apply from one frame to another.\n     *                            Must be a multiple of 90.\n     * @param maintainAspectRatio If true, will ensure that scaling in x and y remains constant,\n     *                            cropping the image if necessary.\n     * @return The transformation fulfilling the desired requirements."
    ],
    "functions": [
        "convertYUV420SPToARGB8888",
        "convertYUV420ToARGB8888",
        "convertYUV420SPToRGB565",
        "convertARGB8888ToYUV420SP",
        "convertRGB565ToYUV420SP",
        "getYUVByteSize",
        "convertYUV420SPToARGB8888",
        "convertYUV420ToARGB8888",
        "YUV2RGB",
        "Matrix",
        "getTransformationMatrix"
    ],
    "classes": [
        "ImageUtil"
    ]
}