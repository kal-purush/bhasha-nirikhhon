{
    "identifiers": [
        "root",
        "factory",
        "define",
        "define",
        "define",
        "factory",
        "exports",
        "factory",
        "root",
        "factory",
        "x",
        "y",
        "x",
        "y",
        "SAT",
        "SAT",
        "other",
        "other",
        "other",
        "x",
        "angle",
        "x",
        "angle",
        "y",
        "angle",
        "x",
        "angle",
        "y",
        "angle",
        "d",
        "d",
        "d",
        "other",
        "other",
        "other",
        "other",
        "other",
        "other",
        "x",
        "y",
        "x",
        "y",
        "x",
        "other",
        "other",
        "other",
        "amt",
        "other",
        "amt",
        "other",
        "other",
        "other",
        "amt",
        "other",
        "amt",
        "other",
        "axis",
        "axis",
        "x",
        "y",
        "axis",
        "axis",
        "x",
        "y",
        "other",
        "other",
        "other",
        "pos",
        "r",
        "pos",
        "r",
        "SAT",
        "Circle",
        "Circle",
        "Circle",
        "r",
        "r",
        "Box",
        "corner",
        "r",
        "r",
        "pos",
        "points",
        "pos",
        "points",
        "SAT",
        "Polygon",
        "Polygon",
        "Polygon",
        "points",
        "points",
        "lengthChanged",
        "i",
        "i",
        "points",
        "i",
        "calcPoints",
        "edges",
        "normals",
        "points",
        "Polygon",
        "Polygon",
        "angle",
        "angle",
        "Polygon",
        "Polygon",
        "offset",
        "offset",
        "Polygon",
        "Polygon",
        "angle",
        "points",
        "i",
        "len",
        "i",
        "points",
        "i",
        "angle",
        "Polygon",
        "Polygon",
        "x",
        "y",
        "points",
        "i",
        "len",
        "i",
        "points",
        "i",
        "x",
        "points",
        "i",
        "y",
        "Polygon",
        "points",
        "i",
        "i",
        "len",
        "i",
        "calcPoints",
        "i",
        "points",
        "i",
        "calcPoint",
        "offset",
        "calcPoint",
        "offset",
        "angle",
        "calcPoint",
        "angle",
        "i",
        "i",
        "len",
        "i",
        "calcPoints",
        "i",
        "i",
        "len",
        "calcPoints",
        "i",
        "calcPoints",
        "edges",
        "i",
        "p2",
        "p1",
        "normals",
        "i",
        "e",
        "Polygon",
        "Polygon",
        "points",
        "points",
        "points",
        "points",
        "points",
        "i",
        "len",
        "i",
        "points",
        "i",
        "point",
        "xMin",
        "xMin",
        "point",
        "point",
        "xMax",
        "xMax",
        "point",
        "point",
        "yMin",
        "yMin",
        "point",
        "point",
        "yMax",
        "yMax",
        "point",
        "Box",
        "xMin",
        "yMin",
        "xMax",
        "xMin",
        "yMax",
        "yMin",
        "pos",
        "w",
        "h",
        "pos",
        "w",
        "h",
        "SAT",
        "Box",
        "Box",
        "Box",
        "Polygon",
        "pos",
        "pos",
        "w",
        "w",
        "h",
        "h",
        "SAT",
        "Response",
        "Response",
        "Response",
        "i",
        "i",
        "T_VECTORS",
        "i",
        "i",
        "T_ARRAYS",
        "Response",
        "Box",
        "points",
        "normal",
        "result",
        "points",
        "i",
        "len",
        "i",
        "points",
        "i",
        "normal",
        "dot",
        "min",
        "min",
        "dot",
        "dot",
        "max",
        "max",
        "dot",
        "result",
        "min",
        "result",
        "max",
        "aPos",
        "bPos",
        "aPoints",
        "bPoints",
        "axis",
        "response",
        "T_ARRAYS",
        "T_ARRAYS",
        "T_VECTORS",
        "bPos",
        "aPos",
        "offsetV",
        "axis",
        "flattenPointsOn",
        "aPoints",
        "axis",
        "rangeA",
        "flattenPointsOn",
        "bPoints",
        "axis",
        "rangeB",
        "rangeB",
        "projectedOffset",
        "rangeB",
        "projectedOffset",
        "rangeA",
        "rangeB",
        "rangeB",
        "rangeA",
        "T_VECTORS",
        "offsetV",
        "T_ARRAYS",
        "rangeA",
        "T_ARRAYS",
        "rangeB",
        "response",
        "rangeA",
        "rangeB",
        "response",
        "rangeA",
        "rangeB",
        "overlap",
        "rangeA",
        "rangeB",
        "response",
        "rangeA",
        "rangeB",
        "rangeB",
        "rangeA",
        "overlap",
        "option1",
        "option2",
        "option1",
        "option2",
        "response",
        "rangeA",
        "rangeB",
        "overlap",
        "rangeA",
        "rangeB",
        "response",
        "rangeA",
        "rangeB",
        "rangeB",
        "rangeA",
        "overlap",
        "option1",
        "option2",
        "option1",
        "option2",
        "overlap",
        "absOverlap",
        "response",
        "response",
        "absOverlap",
        "response",
        "axis",
        "overlap",
        "response",
        "T_VECTORS",
        "offsetV",
        "T_ARRAYS",
        "rangeA",
        "T_ARRAYS",
        "rangeB",
        "SAT",
        "isSeparatingAxis",
        "line",
        "point",
        "line",
        "point",
        "line",
        "dp",
        "LEFT_VORONOI_REGION",
        "dp",
        "len2",
        "RIGHT_VORONOI_REGION",
        "MIDDLE_VORONOI_REGION",
        "p",
        "c",
        "T_VECTORS",
        "p",
        "c",
        "c",
        "c",
        "differenceV",
        "T_VECTORS",
        "differenceV",
        "distanceSq",
        "radiusSq",
        "SAT",
        "pointInCircle",
        "p",
        "poly",
        "TEST_POINT",
        "p",
        "T_RESPONSE",
        "testPolygonPolygon",
        "TEST_POINT",
        "poly",
        "T_RESPONSE",
        "result",
        "result",
        "T_RESPONSE",
        "result",
        "SAT",
        "pointInPolygon",
        "a",
        "b",
        "response",
        "T_VECTORS",
        "b",
        "a",
        "a",
        "b",
        "totalRadius",
        "totalRadius",
        "differenceV",
        "distanceSq",
        "totalRadiusSq",
        "T_VECTORS",
        "differenceV",
        "response",
        "distanceSq",
        "response",
        "a",
        "response",
        "b",
        "response",
        "totalRadius",
        "dist",
        "response",
        "differenceV",
        "response",
        "differenceV",
        "response",
        "response",
        "a",
        "b",
        "dist",
        "b",
        "a",
        "response",
        "b",
        "a",
        "dist",
        "a",
        "b",
        "T_VECTORS",
        "differenceV",
        "SAT",
        "testCircleCircle",
        "polygon",
        "circle",
        "response",
        "T_VECTORS",
        "circle",
        "polygon",
        "circle",
        "radius",
        "radius",
        "polygon",
        "points",
        "T_VECTORS",
        "T_VECTORS",
        "i",
        "len",
        "i",
        "i",
        "len",
        "i",
        "i",
        "len",
        "i",
        "edge",
        "polygon",
        "i",
        "point",
        "circlePos",
        "points",
        "i",
        "response",
        "point",
        "radius2",
        "response",
        "voronoiRegion",
        "edge",
        "point",
        "region",
        "LEFT_VORONOI_REGION",
        "edge",
        "polygon",
        "prev",
        "T_VECTORS",
        "circlePos",
        "points",
        "prev",
        "region",
        "voronoiRegion",
        "edge",
        "point2",
        "region",
        "RIGHT_VORONOI_REGION",
        "point",
        "dist",
        "radius",
        "T_VECTORS",
        "circlePos",
        "T_VECTORS",
        "edge",
        "T_VECTORS",
        "point",
        "T_VECTORS",
        "point2",
        "response",
        "response",
        "overlapN",
        "point",
        "overlap",
        "radius",
        "dist",
        "T_VECTORS",
        "point2",
        "region",
        "RIGHT_VORONOI_REGION",
        "edge",
        "polygon",
        "next",
        "point",
        "circlePos",
        "points",
        "next",
        "region",
        "voronoiRegion",
        "edge",
        "point",
        "region",
        "LEFT_VORONOI_REGION",
        "point",
        "dist",
        "radius",
        "T_VECTORS",
        "circlePos",
        "T_VECTORS",
        "edge",
        "T_VECTORS",
        "point",
        "response",
        "response",
        "overlapN",
        "point",
        "overlap",
        "radius",
        "dist",
        "edge",
        "point",
        "normal",
        "dist",
        "dist",
        "distAbs",
        "radius",
        "T_VECTORS",
        "circlePos",
        "T_VECTORS",
        "normal",
        "T_VECTORS",
        "point",
        "response",
        "overlapN",
        "normal",
        "overlap",
        "radius",
        "dist",
        "dist",
        "overlap",
        "radius",
        "response",
        "overlapN",
        "response",
        "overlap",
        "response",
        "response",
        "overlap",
        "response",
        "overlapN",
        "response",
        "response",
        "polygon",
        "response",
        "circle",
        "response",
        "response",
        "response",
        "T_VECTORS",
        "circlePos",
        "T_VECTORS",
        "edge",
        "T_VECTORS",
        "point",
        "SAT",
        "testPolygonCircle",
        "circle",
        "polygon",
        "response",
        "testPolygonCircle",
        "polygon",
        "circle",
        "response",
        "result",
        "response",
        "response",
        "response",
        "response",
        "response",
        "response",
        "response",
        "response",
        "a",
        "response",
        "response",
        "response",
        "aInB",
        "result",
        "SAT",
        "testCirclePolygon",
        "a",
        "b",
        "response",
        "a",
        "aPoints",
        "b",
        "bPoints",
        "i",
        "aLen",
        "i",
        "isSeparatingAxis",
        "a",
        "b",
        "aPoints",
        "bPoints",
        "a",
        "i",
        "response",
        "i",
        "bLen",
        "i",
        "isSeparatingAxis",
        "a",
        "b",
        "aPoints",
        "bPoints",
        "b",
        "i",
        "response",
        "response",
        "response",
        "a",
        "response",
        "b",
        "response",
        "response",
        "response",
        "SAT",
        "testPolygonPolygon",
        "SAT"
    ],
    "literals": [
        "\"use strict\"",
        "'function'",
        "'amd'",
        "'object'",
        "'exports'",
        "'SAT'",
        "\"use strict\"",
        "'x'",
        "'y'",
        "'Vector'",
        "'V'",
        "'copy'",
        "'x'",
        "'x'",
        "'y'",
        "'y'",
        "'clone'",
        "'x'",
        "'y'",
        "'perp'",
        "'x'",
        "'x'",
        "'y'",
        "'y'",
        "'rotate'",
        "'x'",
        "'y'",
        "'x'",
        "'y'",
        "'reverse'",
        "'x'",
        "'x'",
        "'y'",
        "'y'",
        "'normalize'",
        "'x'",
        "'x'",
        "'y'",
        "'y'",
        "'add'",
        "'x'",
        "'x'",
        "'y'",
        "'y'",
        "'sub'",
        "'x'",
        "'x'",
        "'y'",
        "'y'",
        "'scale'",
        "'x'",
        "'y'",
        "'project'",
        "'x'",
        "'x'",
        "'y'",
        "'y'",
        "'projectN'",
        "'x'",
        "'x'",
        "'y'",
        "'y'",
        "'reflect'",
        "'x'",
        "'y'",
        "'x'",
        "'y'",
        "'reflectN'",
        "'x'",
        "'y'",
        "'x'",
        "'y'",
        "'dot'",
        "'x'",
        "'x'",
        "'y'",
        "'y'",
        "'len2'",
        "'len'",
        "'pos'",
        "'r'",
        "'Circle'",
        "'getAABB'",
        "'r'",
        "\"pos\"",
        "'pos'",
        "'angle'",
        "'offset'",
        "'Polygon'",
        "'setPoints'",
        "'points'",
        "'points'",
        "'calcPoints'",
        "'edges'",
        "'normals'",
        "'points'",
        "'setAngle'",
        "'angle'",
        "'setOffset'",
        "'offset'",
        "'rotate'",
        "'points'",
        "'translate'",
        "'points'",
        "'calcPoints'",
        "'edges'",
        "'normals'",
        "'points'",
        "'offset'",
        "'angle'",
        "\"getAABB\"",
        "\"calcPoints\"",
        "\"x\"",
        "\"y\"",
        "\"x\"",
        "\"y\"",
        "\"x\"",
        "\"x\"",
        "\"x\"",
        "\"x\"",
        "\"y\"",
        "\"y\"",
        "\"y\"",
        "\"y\"",
        "\"pos\"",
        "'pos'",
        "'w'",
        "'h'",
        "'Box'",
        "'toPolygon'",
        "'pos'",
        "'w'",
        "'h'",
        "'x'",
        "'y'",
        "'a'",
        "'b'",
        "'overlapN'",
        "'overlapV'",
        "'Response'",
        "'clear'",
        "'aInB'",
        "'bInA'",
        "'overlap'",
        "'aInB'",
        "'bInA'",
        "'bInA'",
        "'aInB'",
        "'overlap'",
        "'overlap'",
        "'overlapN'",
        "'overlapN'",
        "'isSeparatingAxis'",
        "'pos'",
        "'r'",
        "'r'",
        "'pointInCircle'",
        "'pos'",
        "'aInB'",
        "'pointInPolygon'",
        "'pos'",
        "'pos'",
        "'r'",
        "'r'",
        "'a'",
        "'b'",
        "'overlap'",
        "'overlapN'",
        "'overlapV'",
        "'overlap'",
        "'aInB'",
        "'r'",
        "'r'",
        "'r'",
        "'r'",
        "'bInA'",
        "'r'",
        "'r'",
        "'r'",
        "'r'",
        "'testCircleCircle'",
        "'pos'",
        "'pos'",
        "'r'",
        "'calcPoints'",
        "'edges'",
        "'aInB'",
        "'edges'",
        "'bInA'",
        "'edges'",
        "'bInA'",
        "'bInA'",
        "'overlap'",
        "'overlap'",
        "'overlapN'",
        "'a'",
        "'b'",
        "'overlapV'",
        "'overlapN'",
        "'overlap'",
        "'testPolygonCircle'",
        "'a'",
        "'aInB'",
        "'overlapN'",
        "'overlapV'",
        "'a'",
        "'b'",
        "'b'",
        "'aInB'",
        "'bInA'",
        "'bInA'",
        "'testCirclePolygon'",
        "'calcPoints'",
        "'calcPoints'",
        "'pos'",
        "'pos'",
        "'normals'",
        "'pos'",
        "'pos'",
        "'normals'",
        "'a'",
        "'b'",
        "'overlapV'",
        "'overlapN'",
        "'overlap'",
        "'testPolygonPolygon'"
    ],
    "variables": [
        "SAT",
        "x",
        "x",
        "y",
        "d",
        "amt",
        "amt",
        "x",
        "y",
        "x",
        "y",
        "r",
        "corner",
        "lengthChanged",
        "i",
        "calcPoints",
        "edges",
        "normals",
        "points",
        "len",
        "i",
        "points",
        "len",
        "i",
        "calcPoints",
        "edges",
        "normals",
        "points",
        "offset",
        "angle",
        "len",
        "i",
        "calcPoint",
        "p1",
        "p2",
        "e",
        "points",
        "len",
        "xMin",
        "yMin",
        "xMax",
        "yMax",
        "i",
        "point",
        "pos",
        "w",
        "h",
        "T_VECTORS",
        "i",
        "T_ARRAYS",
        "i",
        "T_RESPONSE",
        "TEST_POINT",
        "min",
        "max",
        "len",
        "i",
        "dot",
        "rangeA",
        "rangeB",
        "offsetV",
        "projectedOffset",
        "overlap",
        "option1",
        "option2",
        "option1",
        "option2",
        "absOverlap",
        "len2",
        "dp",
        "LEFT_VORONOI_REGION",
        "MIDDLE_VORONOI_REGION",
        "RIGHT_VORONOI_REGION",
        "differenceV",
        "radiusSq",
        "distanceSq",
        "result",
        "differenceV",
        "totalRadius",
        "totalRadiusSq",
        "distanceSq",
        "dist",
        "circlePos",
        "radius",
        "radius2",
        "points",
        "len",
        "edge",
        "point",
        "i",
        "next",
        "prev",
        "overlap",
        "overlapN",
        "region",
        "point2",
        "dist",
        "dist",
        "normal",
        "dist",
        "distAbs",
        "result",
        "a",
        "aInB",
        "aPoints",
        "aLen",
        "bPoints",
        "bLen",
        "i",
        "i"
    ],
    "comments": [
        "Version 0.6.0 - Copyright 2012 - 2016 -  Jim Riecken <jimr@jimr.ca>",
        "",
        "Released under the MIT License - https://github.com/jriecken/sat-js",
        "",
        "A simple library for determining intersections of circles and",
        "polygons using the Separating Axis Theorem.",
        "@preserve SAT.js - Version 0.6.0 - Copyright 2012 - 2016 - Jim Riecken <jimr@jimr.ca> - released under the MIT License. https://github.com/jriecken/sat-js",
        "global define: false, module: false",
        "jshint shadow:true, sub:true, forin:true, noarg:true, noempty:true, \n  eqeqeq:true, bitwise:true, strict:true, undef:true, \n  curly:true, browser:true",
        "Create a UMD wrapper for SAT. Works in:",
        "",
        "- Plain browser via global SAT variable",
        "- AMD loader (like require.js)",
        "- Node.js",
        "",
        "The quoted properties all over the place are used so that the Closure Compiler",
        "does not mangle the exposed API in advanced mode.",
        "",
        "## Vector",
        "",
        "Represents a vector in two dimensions with `x` and `y` properties.",
        "Create a new Vector, optionally passing in the `x` and `y` coordinates. If",
        "a coordinate is not specified, it will be set to `0`",
        "Alias `Vector` as `V`",
        "Copy the values of another Vector into this one.",
        "Create a new vector with the same coordinates as this on.",
        "Change this vector to be perpendicular to what it was before. (Effectively",
        "roatates it 90 degrees in a clockwise direction)",
        "Rotate this vector (counter-clockwise) by the specified angle (in radians).",
        "Reverse this vector.",
        "Normalize this vector.  (make it have length of `1`)",
        "Add another vector to this one.",
        "Subtract another vector from this one.",
        "Scale this vector. An independant scaling factor can be provided",
        "for each axis, or a single scaling factor that will scale both `x` and `y`.",
        "Project this vector on to another vector.",
        "Project this vector onto a vector of unit length. This is slightly more efficient",
        "than `project` when dealing with unit vectors.",
        "Reflect this vector on an arbitrary axis.",
        "Reflect this vector on an arbitrary axis (represented by a unit vector). This is",
        "slightly more efficient than `reflect` when dealing with an axis that is a unit vector.",
        "Get the dot product of this vector and another.",
        "Get the squared length of this vector.",
        "Get the length of this vector.",
        "## Circle",
        "",
        "Represents a circle with a position and a radius.",
        "Create a new circle, optionally passing in a position and/or radius. If no position",
        "is given, the circle will be at `(0,0)`. If no radius is provided, the circle will",
        "have a radius of `0`.",
        "Compute the axis-aligned bounding box (AABB) of this Circle.",
        "",
        "Note: Returns a _new_ `Polygon` each time you call this.",
        "## Polygon",
        "",
        "Represents a *convex* polygon with any number of points (specified in counter-clockwise order)",
        "",
        "Note: Do _not_ manually change the `points`, `angle`, or `offset` properties. Use the",
        "provided setters. Otherwise the calculated properties will not be updated correctly.",
        "",
        "`pos` can be changed directly.",
        "Create a new polygon, passing in a position vector, and an array of points (represented",
        "by vectors relative to the position vector). If no position is passed in, the position",
        "of the polygon will be `(0,0)`.",
        "Set the points of the polygon.",
        "",
        "Note: The points are counter-clockwise *with respect to the coordinate system*.",
        "If you directly draw the points on a screen that has the origin at the top-left corner",
        "it will _appear_ visually that the points are being specified clockwise. This is just",
        "because of the inversion of the Y-axis when being displayed.",
        "Only re-allocate if this is a new polygon or the number of points has changed.",
        "Allocate the vector arrays for the calculated properties",
        "Set the current rotation angle of the polygon.",
        "Set the current offset to apply to the `points` before applying the `angle` rotation.",
        "Rotates this polygon counter-clockwise around the origin of *its local coordinate system* (i.e. `pos`).",
        "",
        "Note: This changes the **original** points (so any `angle` will be applied on top of this rotation).",
        "Translates the points of this polygon by a specified amount relative to the origin of *its own coordinate",
        "system* (i.e. `pos`).",
        "",
        "This is most useful to change the \"center point\" of a polygon. If you just want to move the whole polygon, change",
        "the coordinates of `pos`.",
        "",
        "Note: This changes the **original** points (so any `offset` will be applied on top of this translation)",
        "Computes the calculated collision polygon. Applies the `angle` and `offset` to the original points then recalculates the",
        "edges and normals of the collision polygon.",
        "Calculated points - this is what is used for underlying collisions and takes into account",
        "the angle/offset set on the polygon.",
        "The edges here are the direction of the `n`th edge of the polygon, relative to",
        "the `n`th point. If you want to draw a given edge from the edge value, you must",
        "first translate to the position of the starting point.",
        "The normals here are the direction of the normal for the `n`th edge of the polygon, relative",
        "to the position of the `n`th point. If you want to draw an edge normal, you must first",
        "translate to the position of the starting point.",
        "Copy the original points array and apply the offset/angle",
        "Calculate the edges/normals",
        "Compute the axis-aligned bounding box. Any current state",
        "(translations/rotations) will be applied before constructing the AABB.",
        "",
        "Note: Returns a _new_ `Polygon` each time you call this.",
        "## Box",
        "",
        "Represents an axis-aligned box, with a width and height.",
        "Create a new box, with the specified position, width, and height. If no position",
        "is given, the position will be `(0,0)`. If no width or height are given, they will",
        "be set to `0`.",
        "Returns a polygon whose edges are the same as this box.",
        "## Response",
        "",
        "An object representing the result of an intersection. Contains:",
        "- The two objects participating in the intersection",
        "- The vector representing the minimum change necessary to extract the first object",
        "from the second one (as well as a unit vector in that direction and the magnitude",
        "of the overlap)",
        "- Whether the first object is entirely inside the second, and vice versa.",
        "Set some values of the response back to their defaults.  Call this between tests if",
        "you are going to reuse a single Response object for multiple intersection tests (recommented",
        "as it will avoid allcating extra memory)",
        "## Object Pools",
        "A pool of `Vector` objects that are used in calculations to avoid",
        "allocating memory.",
        "A pool of arrays of numbers used in calculations to avoid allocating",
        "memory.",
        "Temporary response used for polygon hit detection.",
        "Tiny \"point\" polygon used for polygon hit detection.",
        "## Helper Functions",
        "Flattens the specified array of points onto a unit vector axis,",
        "resulting in a one dimensional range of the minimum and",
        "maximum value on that axis.",
        "The magnitude of the projection of the point onto the normal",
        "Check whether two convex polygons are separated by the specified",
        "axis (must be a unit vector).",
        "The magnitude of the offset between the two polygons",
        "Project the polygons onto the axis.",
        "Move B's range to its position relative to A.",
        "Check if there is a gap. If there is, this is a separating axis and we can stop",
        "This is not a separating axis. If we're calculating a response, calculate the overlap.",
        "A starts further left than B",
        "A ends before B does. We have to pull A out of B",
        "B is fully inside A.  Pick the shortest way out.",
        "B starts further left than A",
        "B ends before A ends. We have to push A out of B",
        "A is fully inside B.  Pick the shortest way out.",
        "If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.",
        "Calculates which Voronoi region a point is on a line segment.",
        "It is assumed that both the line and the point are relative to `(0,0)`",
        "",
        "|       (0)      |",
        "(-1)  [S]--------------[E]  (1)",
        "|       (0)      |",
        "If the point is beyond the start of the line, it is in the",
        "left voronoi region.",
        "If the point is beyond the end of the line, it is in the",
        "right voronoi region.",
        "Otherwise, it's in the middle one.",
        "Constants for Voronoi regions",
        "## Collision Tests",
        "Check if a point is inside a circle.",
        "If the distance between is smaller than the radius then the point is inside the circle.",
        "Check if a point is inside a convex polygon.",
        "Check if two circles collide.",
        "Check if the distance between the centers of the two",
        "circles is greater than their combined radius.",
        "If the distance is bigger than the combined radius, they don't intersect.",
        "They intersect.  If we're calculating a response, calculate the overlap.",
        "Check if a polygon and a circle collide.",
        "Get the position of the circle relative to the polygon.",
        "For each edge in the polygon:",
        "Get the edge.",
        "Calculate the center of the circle relative to the starting point of the edge.",
        "If the distance between the center of the circle and the point",
        "is bigger than the radius, the polygon is definitely not fully in",
        "the circle.",
        "Calculate which Voronoi region the center of the circle is in.",
        "If it's the left region:",
        "We need to make sure we're in the RIGHT_VORONOI_REGION of the previous edge.",
        "Calculate the center of the circle relative the starting point of the previous edge",
        "It's in the region we want.  Check if the circle intersects the point.",
        "No intersection",
        "It intersects, calculate the overlap.",
        "If it's the right region:",
        "We need to make sure we're in the left region on the next edge",
        "Calculate the center of the circle relative to the starting point of the next edge.",
        "It's in the region we want.  Check if the circle intersects the point.",
        "No intersection",
        "It intersects, calculate the overlap.",
        "Otherwise, it's the middle region:",
        "Need to check if the circle is intersecting the edge,",
        "Change the edge into its \"edge normal\".",
        "Find the perpendicular distance between the center of the",
        "circle and the edge.",
        "If the circle is on the outside of the edge, there is no intersection.",
        "No intersection",
        "It intersects, calculate the overlap.",
        "If the center of the circle is on the outside of the edge, or part of the",
        "circle is on the outside, the circle is not fully inside the polygon.",
        "If this is the smallest overlap we've seen, keep it.",
        "(overlapN may be null if the circle was in the wrong Voronoi region).",
        "Calculate the final overlap vector - based on the smallest overlap.",
        "Check if a circle and a polygon collide.",
        "",
        "runs polygonCircle and reverses everything at the end.",
        "Test the polygon against the circle.",
        "Swap A and B in the response.",
        "Checks whether polygons collide.",
        "If any of the edge normals of A is a separating axis, no intersection.",
        "If any of the edge normals of B is a separating axis, no intersection.",
        "Since none of the edge normals of A or B are a separating axis, there is an intersection",
        "and we've already calculated the smallest overlap (in isSeparatingAxis).  Calculate the",
        "final overlap vector."
    ],
    "docstrings": [
        "* @param {*} root - The global scope\n * @param {Function} factory - Factory that creates SAT module",
        "* @param {?number=} x The x position.\n   * @param {?number=} y The y position.\n   * @constructor",
        "* @param {Vector} other The other Vector.\n   * @return {Vector} This for chaining.",
        "* @return {Vector} The new cloned vector",
        "* @return {Vector} This for chaining.",
        "* @param {number} angle The angle to rotate (in radians)\n   * @return {Vector} This for chaining.",
        "* @return {Vector} This for chaining.",
        "* @return {Vector} This for chaining.",
        "* @param {Vector} other The other Vector.\n   * @return {Vector} This for chaining.",
        "* @param {Vector} other The other Vector.\n   * @return {Vector} This for chaiing.",
        "* @param {number} x The scaling factor in the x direction.\n   * @param {?number=} y The scaling factor in the y direction.  If this\n   *   is not specified, the x scaling factor will be used.\n   * @return {Vector} This for chaining.",
        "* @param {Vector} other The vector to project onto.\n   * @return {Vector} This for chaining.",
        "* @param {Vector} other The unit vector to project onto.\n   * @return {Vector} This for chaining.",
        "* @param {Vector} axis The vector representing the axis.\n   * @return {Vector} This for chaining.",
        "* @param {Vector} axis The unit vector representing the axis.\n   * @return {Vector} This for chaining.",
        "* @param {Vector}  other The vector to dot this one against.\n   * @return {number} The dot product.",
        "* @return {number} The length^2 of this vector.",
        "* @return {number} The length of this vector.",
        "* @param {Vector=} pos A vector representing the position of the center of the circle\n   * @param {?number=} r The radius of the circle\n   * @constructor",
        "* @return {Polygon} The AABB",
        "* @param {Vector=} pos A vector representing the origin of the polygon. (all other\n   *   points are relative to this one)\n   * @param {Array.<Vector>=} points An array of vectors representing the points in the polygon,\n   *   in counter-clockwise order.\n   * @constructor",
        "* @param {Array.<Vector>=} points An array of vectors representing the points in the polygon,\n   *   in counter-clockwise order.\n   * @return {Polygon} This for chaining.",
        "* @param {number} angle The current rotation angle (in radians).\n   * @return {Polygon} This for chaining.",
        "* @param {Vector} offset The new offset vector.\n   * @return {Polygon} This for chaining.",
        "* @param {number} angle The angle to rotate (in radians)\n   * @return {Polygon} This for chaining.",
        "* @param {number} x The horizontal amount to translate.\n   * @param {number} y The vertical amount to translate.\n   * @return {Polygon} This for chaining.",
        "* @return {Polygon} This for chaining.",
        "* @return {Polygon} The AABB",
        "* @param {Vector=} pos A vector representing the bottom-left of the box (i.e. the smallest x and smallest y value).\n   * @param {?number=} w The width of the box.\n   * @param {?number=} h The height of the box.\n   * @constructor",
        "* @return {Polygon} A new Polygon that represents this box.",
        "* @constructor",
        "* @return {Response} This for chaining",
        "* @type {Array.<Vector>}",
        "* @type {Array.<Array.<number>>}",
        "* @type {Response}",
        "* @type {Polygon}",
        "* @param {Array.<Vector>} points The points to flatten.\n   * @param {Vector} normal The unit vector axis to flatten on.\n   * @param {Array.<number>} result An array.  After calling this function,\n   *   result[0] will be the minimum value,\n   *   result[1] will be the maximum value.",
        "* @param {Vector} aPos The position of the first polygon.\n   * @param {Vector} bPos The position of the second polygon.\n   * @param {Array.<Vector>} aPoints The points in the first polygon.\n   * @param {Array.<Vector>} bPoints The points in the second polygon.\n   * @param {Vector} axis The axis (unit sized) to test against.  The points of both polygons\n   *   will be projected onto this axis.\n   * @param {Response=} response A Response object (optional) which will be populated\n   *   if the axis is not a separating axis.\n   * @return {boolean} true if it is a separating axis, false otherwise.  If false,\n   *   and a response is passed in, information about how much overlap and\n   *   the direction of the overlap will be populated.",
        "* @param {Vector} line The line segment.\n   * @param {Vector} point The point.\n   * @return  {number} LEFT_VORONOI_REGION (-1) if it is the left region,\n   *          MIDDLE_VORONOI_REGION (0) if it is the middle region,\n   *          RIGHT_VORONOI_REGION (1) if it is the right region.",
        "* @const",
        "* @const",
        "* @const",
        "* @param {Vector} p The point to test.\n   * @param {Circle} c The circle to test.\n   * @return {boolean} true if the point is inside the circle, false if it is not.",
        "* @param {Vector} p The point to test.\n   * @param {Polygon} poly The polygon to test.\n   * @return {boolean} true if the point is inside the polygon, false if it is not.",
        "* @param {Circle} a The first circle.\n   * @param {Circle} b The second circle.\n   * @param {Response=} response Response object (optional) that will be populated if\n   *   the circles intersect.\n   * @return {boolean} true if the circles intersect, false if they don't.",
        "* @param {Polygon} polygon The polygon.\n   * @param {Circle} circle The circle.\n   * @param {Response=} response Response object (optional) that will be populated if\n   *   they interset.\n   * @return {boolean} true if they intersect, false if they don't.",
        "**NOTE:** This is slightly less efficient than polygonCircle as it just",
        "* @param {Circle} circle The circle.\n   * @param {Polygon} polygon The polygon.\n   * @param {Response=} response Response object (optional) that will be populated if\n   *   they interset.\n   * @return {boolean} true if they intersect, false if they don't.",
        "* @param {Polygon} a The first polygon.\n   * @param {Polygon} b The second polygon.\n   * @param {Response=} response Response object (optional) that will be populated if\n   *   they interset.\n   * @return {boolean} true if they intersect, false if they don't."
    ],
    "functions": [
        "Circle",
        "Polygon",
        "Box",
        "Response",
        "flattenPointsOn",
        "isSeparatingAxis",
        "voronoiRegion",
        "pointInCircle",
        "pointInPolygon",
        "testCircleCircle",
        "testPolygonCircle",
        "testCirclePolygon",
        "testPolygonPolygon"
    ],
    "classes": []
}