{
    "identifiers": [
        "sax",
        "sax",
        "strict",
        "opt",
        "SAXParser",
        "strict",
        "opt",
        "sax",
        "SAXParser",
        "sax",
        "SAXStream",
        "sax",
        "createStream",
        "sax",
        "sax",
        "strict",
        "opt",
        "SAXParser",
        "SAXParser",
        "strict",
        "opt",
        "clearBuffers",
        "parser",
        "parser",
        "parser",
        "parser",
        "sax",
        "parser",
        "opt",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "strict",
        "parser",
        "strict",
        "parser",
        "parser",
        "S",
        "parser",
        "parser",
        "parser",
        "parser",
        "sax",
        "sax",
        "parser",
        "parser",
        "parser",
        "rootNS",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "emit",
        "parser",
        "o",
        "F",
        "o",
        "F",
        "newf",
        "o",
        "i",
        "o",
        "o",
        "i",
        "a",
        "i",
        "a",
        "parser",
        "sax",
        "buffers",
        "i",
        "l",
        "i",
        "parser",
        "buffers",
        "i",
        "len",
        "maxAllowed",
        "buffers",
        "i",
        "closeText",
        "parser",
        "emitNode",
        "parser",
        "parser",
        "parser",
        "emitNode",
        "parser",
        "parser",
        "parser",
        "error",
        "parser",
        "buffers",
        "i",
        "maxActual",
        "maxActual",
        "len",
        "sax",
        "maxActual",
        "parser",
        "m",
        "parser",
        "parser",
        "buffers",
        "i",
        "l",
        "i",
        "parser",
        "buffers",
        "i",
        "parser",
        "closeText",
        "parser",
        "parser",
        "emitNode",
        "parser",
        "parser",
        "parser",
        "parser",
        "emitNode",
        "parser",
        "parser",
        "parser",
        "SAXParser",
        "end",
        "write",
        "flushBuffers",
        "Stream",
        "require",
        "ex",
        "Stream",
        "sax",
        "ev",
        "ev",
        "ev",
        "strict",
        "opt",
        "SAXStream",
        "strict",
        "opt",
        "strict",
        "opt",
        "SAXStream",
        "SAXStream",
        "strict",
        "opt",
        "Stream",
        "SAXParser",
        "strict",
        "opt",
        "me",
        "er",
        "me",
        "er",
        "me",
        "streamWraps",
        "ev",
        "me",
        "ev",
        "me",
        "ev",
        "h",
        "h",
        "me",
        "ev",
        "me",
        "ev",
        "h",
        "h",
        "me",
        "ev",
        "h",
        "SAXStream",
        "Stream",
        "SAXStream",
        "SAXStream",
        "data",
        "Buffer",
        "Buffer",
        "Buffer",
        "data",
        "require",
        "SD",
        "data",
        "data",
        "data",
        "data",
        "SAXStream",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "SAXStream",
        "ev",
        "handler",
        "me",
        "ev",
        "streamWraps",
        "ev",
        "me",
        "ev",
        "arguments",
        "arguments",
        "arguments",
        "args",
        "ev",
        "me",
        "me",
        "args",
        "Stream",
        "me",
        "ev",
        "handler",
        "XML_NAMESPACE",
        "XMLNS_NAMESPACE",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "isWhitespace",
        "c",
        "regex",
        "c",
        "regex",
        "c",
        "regex",
        "c",
        "isMatch",
        "regex",
        "c",
        "sax",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "S",
        "sax",
        "sax",
        "sax",
        "key",
        "sax",
        "key",
        "e",
        "e",
        "e",
        "sax",
        "key",
        "s",
        "s",
        "sax",
        "sax",
        "sax",
        "s",
        "s",
        "S",
        "sax",
        "parser",
        "data",
        "parser",
        "parser",
        "data",
        "parser",
        "nodeType",
        "data",
        "parser",
        "closeText",
        "parser",
        "emit",
        "parser",
        "nodeType",
        "data",
        "parser",
        "parser",
        "textopts",
        "parser",
        "parser",
        "parser",
        "emit",
        "parser",
        "parser",
        "parser",
        "opt",
        "text",
        "opt",
        "text",
        "text",
        "opt",
        "text",
        "text",
        "text",
        "parser",
        "er",
        "closeText",
        "parser",
        "parser",
        "er",
        "parser",
        "parser",
        "parser",
        "er",
        "er",
        "parser",
        "er",
        "emit",
        "parser",
        "er",
        "parser",
        "parser",
        "parser",
        "parser",
        "strictFail",
        "parser",
        "parser",
        "S",
        "parser",
        "S",
        "parser",
        "S",
        "error",
        "parser",
        "closeText",
        "parser",
        "parser",
        "parser",
        "emit",
        "parser",
        "SAXParser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "message",
        "parser",
        "parser",
        "SAXParser",
        "parser",
        "error",
        "parser",
        "message",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "tag",
        "parent",
        "parser",
        "emitNode",
        "parser",
        "tag",
        "name",
        "attribute",
        "name",
        "i",
        "name",
        "name",
        "qualName",
        "qualName",
        "attribute",
        "name",
        "prefix",
        "local",
        "prefix",
        "local",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "qname",
        "parser",
        "qn",
        "qn",
        "prefix",
        "local",
        "parser",
        "XML_NAMESPACE",
        "strictFail",
        "parser",
        "XML_NAMESPACE",
        "parser",
        "local",
        "parser",
        "XMLNS_NAMESPACE",
        "strictFail",
        "parser",
        "XMLNS_NAMESPACE",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "tag",
        "parent",
        "tag",
        "parent",
        "tag",
        "local",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "emitNode",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "selfClosing",
        "parser",
        "parser",
        "qname",
        "parser",
        "tag",
        "qn",
        "tag",
        "qn",
        "tag",
        "tag",
        "qn",
        "tag",
        "tag",
        "strictFail",
        "parser",
        "parser",
        "tag",
        "qn",
        "parser",
        "parser",
        "parser",
        "tag",
        "parent",
        "tag",
        "tag",
        "p",
        "emitNode",
        "parser",
        "p",
        "tag",
        "p",
        "parser",
        "i",
        "l",
        "i",
        "parser",
        "i",
        "nv",
        "nv",
        "qname",
        "name",
        "qualName",
        "qualName",
        "prefix",
        "tag",
        "prefix",
        "name",
        "value",
        "prefix",
        "local",
        "uri",
        "prefix",
        "prefix",
        "uri",
        "strictFail",
        "parser",
        "prefix",
        "a",
        "prefix",
        "parser",
        "name",
        "a",
        "emitNode",
        "parser",
        "a",
        "parser",
        "parser",
        "selfClosing",
        "parser",
        "parser",
        "parser",
        "emitNode",
        "parser",
        "parser",
        "selfClosing",
        "parser",
        "parser",
        "parser",
        "S",
        "parser",
        "S",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "strictFail",
        "parser",
        "parser",
        "parser",
        "S",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "S",
        "emitNode",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "tagName",
        "tagName",
        "parser",
        "t",
        "parser",
        "t",
        "close",
        "closeTo",
        "strictFail",
        "parser",
        "t",
        "strictFail",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "S",
        "parser",
        "tagName",
        "parser",
        "s",
        "t",
        "parser",
        "parser",
        "parser",
        "parser",
        "emitNode",
        "parser",
        "parser",
        "i",
        "tag",
        "x",
        "i",
        "tag",
        "i",
        "parser",
        "parser",
        "parser",
        "parser",
        "tag",
        "parent",
        "tag",
        "p",
        "tag",
        "p",
        "emitNode",
        "parser",
        "p",
        "n",
        "t",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "S",
        "parser",
        "parser",
        "entity",
        "parser",
        "entity",
        "parser",
        "entity",
        "parser",
        "entityLC",
        "parser",
        "entityLC",
        "entity",
        "entityLC",
        "entity",
        "entity",
        "entity",
        "entity",
        "num",
        "parseInt",
        "entity",
        "numStr",
        "num",
        "entity",
        "entity",
        "num",
        "parseInt",
        "entity",
        "numStr",
        "num",
        "entity",
        "entity",
        "isNaN",
        "num",
        "numStr",
        "entity",
        "strictFail",
        "parser",
        "parser",
        "num",
        "parser",
        "c",
        "c",
        "parser",
        "S",
        "parser",
        "parser",
        "isWhitespace",
        "c",
        "strictFail",
        "parser",
        "parser",
        "c",
        "parser",
        "S",
        "chunk",
        "i",
        "i",
        "chunk",
        "result",
        "chunk",
        "i",
        "result",
        "chunk",
        "parser",
        "error",
        "parser",
        "chunk",
        "end",
        "parser",
        "chunk",
        "chunk",
        "chunk",
        "c",
        "charAt",
        "chunk",
        "i",
        "parser",
        "c",
        "c",
        "parser",
        "parser",
        "c",
        "parser",
        "parser",
        "parser",
        "parser",
        "S",
        "parser",
        "S",
        "c",
        "beginWhiteSpace",
        "parser",
        "c",
        "S",
        "beginWhiteSpace",
        "parser",
        "c",
        "S",
        "parser",
        "parser",
        "i",
        "c",
        "c",
        "c",
        "c",
        "charAt",
        "chunk",
        "i",
        "c",
        "parser",
        "parser",
        "c",
        "parser",
        "parser",
        "parser",
        "parser",
        "chunk",
        "starti",
        "i",
        "c",
        "parser",
        "parser",
        "parser",
        "parser",
        "S",
        "parser",
        "parser",
        "isWhitespace",
        "c",
        "parser",
        "parser",
        "strictFail",
        "parser",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "S",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "S",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "parser",
        "S",
        "S",
        "c",
        "parser",
        "S",
        "parser",
        "isWhitespace",
        "c",
        "isMatch",
        "nameStart",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "parser",
        "S",
        "parser",
        "parser",
        "strictFail",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "c",
        "pad",
        "c",
        "parser",
        "c",
        "parser",
        "S",
        "S",
        "parser",
        "c",
        "CDATA",
        "emitNode",
        "parser",
        "parser",
        "S",
        "parser",
        "parser",
        "parser",
        "c",
        "parser",
        "S",
        "parser",
        "parser",
        "parser",
        "c",
        "DOCTYPE",
        "parser",
        "S",
        "parser",
        "parser",
        "strictFail",
        "parser",
        "parser",
        "parser",
        "c",
        "emitNode",
        "parser",
        "parser",
        "parser",
        "parser",
        "S",
        "isQuote",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "parser",
        "c",
        "S",
        "c",
        "parser",
        "parser",
        "S",
        "parser",
        "parser",
        "c",
        "S",
        "c",
        "parser",
        "S",
        "emitNode",
        "parser",
        "parser",
        "parser",
        "parser",
        "c",
        "c",
        "parser",
        "S",
        "isQuote",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "S",
        "parser",
        "c",
        "c",
        "parser",
        "parser",
        "parser",
        "S",
        "S",
        "parser",
        "c",
        "c",
        "parser",
        "S",
        "isQuote",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "S",
        "parser",
        "c",
        "c",
        "parser",
        "parser",
        "S",
        "parser",
        "S",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "S",
        "c",
        "parser",
        "S",
        "parser",
        "textopts",
        "parser",
        "parser",
        "parser",
        "emitNode",
        "parser",
        "parser",
        "parser",
        "parser",
        "c",
        "parser",
        "S",
        "S",
        "c",
        "strictFail",
        "parser",
        "parser",
        "c",
        "parser",
        "S",
        "parser",
        "S",
        "S",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "S",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "parser",
        "S",
        "S",
        "c",
        "parser",
        "emitNode",
        "parser",
        "parser",
        "emitNode",
        "parser",
        "parser",
        "parser",
        "S",
        "c",
        "parser",
        "parser",
        "c",
        "parser",
        "S",
        "S",
        "c",
        "parser",
        "S",
        "isWhitespace",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "S",
        "parser",
        "isWhitespace",
        "c",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "S",
        "c",
        "emitNode",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "S",
        "parser",
        "c",
        "parser",
        "S",
        "S",
        "isMatch",
        "nameBody",
        "c",
        "parser",
        "c",
        "newTag",
        "parser",
        "c",
        "openTag",
        "parser",
        "c",
        "parser",
        "S",
        "isWhitespace",
        "c",
        "strictFail",
        "parser",
        "parser",
        "S",
        "S",
        "c",
        "openTag",
        "parser",
        "closeTag",
        "parser",
        "strictFail",
        "parser",
        "parser",
        "S",
        "S",
        "isWhitespace",
        "c",
        "c",
        "openTag",
        "parser",
        "c",
        "parser",
        "S",
        "isMatch",
        "nameStart",
        "c",
        "parser",
        "c",
        "parser",
        "parser",
        "S",
        "strictFail",
        "parser",
        "S",
        "c",
        "parser",
        "S",
        "c",
        "strictFail",
        "parser",
        "parser",
        "parser",
        "attrib",
        "parser",
        "openTag",
        "parser",
        "isWhitespace",
        "c",
        "parser",
        "S",
        "isMatch",
        "nameBody",
        "c",
        "parser",
        "c",
        "strictFail",
        "parser",
        "S",
        "c",
        "parser",
        "S",
        "isWhitespace",
        "c",
        "strictFail",
        "parser",
        "parser",
        "parser",
        "parser",
        "emitNode",
        "parser",
        "parser",
        "parser",
        "c",
        "openTag",
        "parser",
        "isMatch",
        "nameStart",
        "c",
        "parser",
        "c",
        "parser",
        "S",
        "strictFail",
        "parser",
        "parser",
        "S",
        "S",
        "isWhitespace",
        "c",
        "isQuote",
        "c",
        "parser",
        "c",
        "parser",
        "S",
        "strictFail",
        "parser",
        "parser",
        "S",
        "parser",
        "c",
        "S",
        "c",
        "parser",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "attrib",
        "parser",
        "parser",
        "parser",
        "S",
        "S",
        "isWhitespace",
        "c",
        "parser",
        "S",
        "c",
        "openTag",
        "parser",
        "c",
        "parser",
        "S",
        "isMatch",
        "nameStart",
        "c",
        "strictFail",
        "parser",
        "parser",
        "c",
        "parser",
        "parser",
        "S",
        "strictFail",
        "parser",
        "S",
        "isAttribEnd",
        "c",
        "c",
        "parser",
        "S",
        "parser",
        "c",
        "attrib",
        "parser",
        "c",
        "openTag",
        "parser",
        "parser",
        "S",
        "S",
        "parser",
        "isWhitespace",
        "c",
        "notMatch",
        "nameStart",
        "c",
        "parser",
        "parser",
        "c",
        "parser",
        "S",
        "strictFail",
        "parser",
        "parser",
        "c",
        "c",
        "closeTag",
        "parser",
        "isMatch",
        "nameBody",
        "c",
        "parser",
        "c",
        "parser",
        "parser",
        "parser",
        "parser",
        "parser",
        "S",
        "isWhitespace",
        "c",
        "strictFail",
        "parser",
        "parser",
        "S",
        "S",
        "isWhitespace",
        "c",
        "c",
        "closeTag",
        "parser",
        "strictFail",
        "parser",
        "S",
        "S",
        "S",
        "parser",
        "S",
        "returnState",
        "S",
        "buffer",
        "S",
        "returnState",
        "S",
        "buffer",
        "S",
        "returnState",
        "S",
        "buffer",
        "c",
        "parser",
        "buffer",
        "parseEntity",
        "parser",
        "parser",
        "parser",
        "returnState",
        "isMatch",
        "parser",
        "entityBody",
        "entityStart",
        "c",
        "parser",
        "c",
        "strictFail",
        "parser",
        "parser",
        "buffer",
        "parser",
        "c",
        "parser",
        "parser",
        "returnState",
        "parser",
        "parser",
        "parser",
        "parser",
        "checkBufferLength",
        "parser",
        "parser",
        "arguments",
        "length",
        "index",
        "length",
        "arguments",
        "index",
        "isFinite",
        "codePoint",
        "codePoint",
        "codePoint",
        "floor",
        "codePoint",
        "codePoint",
        "RangeError",
        "codePoint",
        "codePoint",
        "codeUnits",
        "codePoint",
        "codePoint",
        "highSurrogate",
        "codePoint",
        "lowSurrogate",
        "codePoint",
        "codeUnits",
        "highSurrogate",
        "lowSurrogate",
        "index",
        "length",
        "codeUnits",
        "MAX_SIZE",
        "result",
        "stringFromCharCode",
        "codeUnits",
        "codeUnits",
        "result",
        "fromCodePoint",
        "fromCodePoint",
        "exports",
        "exports"
    ],
    "literals": [
        "'comment'",
        "'sgmlDecl'",
        "'textNode'",
        "'tagName'",
        "'doctype'",
        "'procInstName'",
        "'procInstBody'",
        "'entity'",
        "'attribName'",
        "'attribValue'",
        "'cdata'",
        "'script'",
        "'text'",
        "'processinginstruction'",
        "'sgmldeclaration'",
        "'doctype'",
        "'comment'",
        "'opentagstart'",
        "'attribute'",
        "'opentag'",
        "'closetag'",
        "'opencdata'",
        "'cdata'",
        "'closecdata'",
        "'error'",
        "'end'",
        "'ready'",
        "'script'",
        "'opennamespace'",
        "'closenamespace'",
        "''",
        "'toLowerCase'",
        "'toUpperCase'",
        "'onready'",
        "'textNode'",
        "'cdata'",
        "'oncdata'",
        "''",
        "'script'",
        "'onscript'",
        "''",
        "'Max buffer length exceeded: '",
        "''",
        "''",
        "'oncdata'",
        "''",
        "''",
        "'onscript'",
        "''",
        "'stream'",
        "'error'",
        "'end'",
        "'end'",
        "'error'",
        "'on'",
        "'on'",
        "'on'",
        "'function'",
        "'function'",
        "'string_decoder'",
        "'utf8'",
        "'data'",
        "'on'",
        "'on'",
        "'[CDATA['",
        "'DOCTYPE'",
        "'http://www.w3.org/XML/1998/namespace'",
        "'http://www.w3.org/2000/xmlns/'",
        "' '",
        "'\\n'",
        "'\\r'",
        "'\\t'",
        "'\"'",
        "'\\''",
        "'>'",
        "'amp'",
        "'&'",
        "'gt'",
        "'>'",
        "'lt'",
        "'<'",
        "'quot'",
        "'\"'",
        "'apos'",
        "\"'\"",
        "'amp'",
        "'&'",
        "'gt'",
        "'>'",
        "'lt'",
        "'<'",
        "'quot'",
        "'\"'",
        "'apos'",
        "\"'\"",
        "'AElig'",
        "'Aacute'",
        "'Acirc'",
        "'Agrave'",
        "'Aring'",
        "'Atilde'",
        "'Auml'",
        "'Ccedil'",
        "'ETH'",
        "'Eacute'",
        "'Ecirc'",
        "'Egrave'",
        "'Euml'",
        "'Iacute'",
        "'Icirc'",
        "'Igrave'",
        "'Iuml'",
        "'Ntilde'",
        "'Oacute'",
        "'Ocirc'",
        "'Ograve'",
        "'Oslash'",
        "'Otilde'",
        "'Ouml'",
        "'THORN'",
        "'Uacute'",
        "'Ucirc'",
        "'Ugrave'",
        "'Uuml'",
        "'Yacute'",
        "'aacute'",
        "'acirc'",
        "'aelig'",
        "'agrave'",
        "'aring'",
        "'atilde'",
        "'auml'",
        "'ccedil'",
        "'eacute'",
        "'ecirc'",
        "'egrave'",
        "'eth'",
        "'euml'",
        "'iacute'",
        "'icirc'",
        "'igrave'",
        "'iuml'",
        "'ntilde'",
        "'oacute'",
        "'ocirc'",
        "'ograve'",
        "'oslash'",
        "'otilde'",
        "'ouml'",
        "'szlig'",
        "'thorn'",
        "'uacute'",
        "'ucirc'",
        "'ugrave'",
        "'uuml'",
        "'yacute'",
        "'yuml'",
        "'copy'",
        "'reg'",
        "'nbsp'",
        "'iexcl'",
        "'cent'",
        "'pound'",
        "'curren'",
        "'yen'",
        "'brvbar'",
        "'sect'",
        "'uml'",
        "'ordf'",
        "'laquo'",
        "'not'",
        "'shy'",
        "'macr'",
        "'deg'",
        "'plusmn'",
        "'sup1'",
        "'sup2'",
        "'sup3'",
        "'acute'",
        "'micro'",
        "'para'",
        "'middot'",
        "'cedil'",
        "'ordm'",
        "'raquo'",
        "'frac14'",
        "'frac12'",
        "'frac34'",
        "'iquest'",
        "'times'",
        "'divide'",
        "'OElig'",
        "'oelig'",
        "'Scaron'",
        "'scaron'",
        "'Yuml'",
        "'fnof'",
        "'circ'",
        "'tilde'",
        "'Alpha'",
        "'Beta'",
        "'Gamma'",
        "'Delta'",
        "'Epsilon'",
        "'Zeta'",
        "'Eta'",
        "'Theta'",
        "'Iota'",
        "'Kappa'",
        "'Lambda'",
        "'Mu'",
        "'Nu'",
        "'Xi'",
        "'Omicron'",
        "'Pi'",
        "'Rho'",
        "'Sigma'",
        "'Tau'",
        "'Upsilon'",
        "'Phi'",
        "'Chi'",
        "'Psi'",
        "'Omega'",
        "'alpha'",
        "'beta'",
        "'gamma'",
        "'delta'",
        "'epsilon'",
        "'zeta'",
        "'eta'",
        "'theta'",
        "'iota'",
        "'kappa'",
        "'lambda'",
        "'mu'",
        "'nu'",
        "'xi'",
        "'omicron'",
        "'pi'",
        "'rho'",
        "'sigmaf'",
        "'sigma'",
        "'tau'",
        "'upsilon'",
        "'phi'",
        "'chi'",
        "'psi'",
        "'omega'",
        "'thetasym'",
        "'upsih'",
        "'piv'",
        "'ensp'",
        "'emsp'",
        "'thinsp'",
        "'zwnj'",
        "'zwj'",
        "'lrm'",
        "'rlm'",
        "'ndash'",
        "'mdash'",
        "'lsquo'",
        "'rsquo'",
        "'sbquo'",
        "'ldquo'",
        "'rdquo'",
        "'bdquo'",
        "'dagger'",
        "'Dagger'",
        "'bull'",
        "'hellip'",
        "'permil'",
        "'prime'",
        "'Prime'",
        "'lsaquo'",
        "'rsaquo'",
        "'oline'",
        "'frasl'",
        "'euro'",
        "'image'",
        "'weierp'",
        "'real'",
        "'trade'",
        "'alefsym'",
        "'larr'",
        "'uarr'",
        "'rarr'",
        "'darr'",
        "'harr'",
        "'crarr'",
        "'lArr'",
        "'uArr'",
        "'rArr'",
        "'dArr'",
        "'hArr'",
        "'forall'",
        "'part'",
        "'exist'",
        "'empty'",
        "'nabla'",
        "'isin'",
        "'notin'",
        "'ni'",
        "'prod'",
        "'sum'",
        "'minus'",
        "'lowast'",
        "'radic'",
        "'prop'",
        "'infin'",
        "'ang'",
        "'and'",
        "'or'",
        "'cap'",
        "'cup'",
        "'int'",
        "'there4'",
        "'sim'",
        "'cong'",
        "'asymp'",
        "'ne'",
        "'equiv'",
        "'le'",
        "'ge'",
        "'sub'",
        "'sup'",
        "'nsub'",
        "'sube'",
        "'supe'",
        "'oplus'",
        "'otimes'",
        "'perp'",
        "'sdot'",
        "'lceil'",
        "'rceil'",
        "'lfloor'",
        "'rfloor'",
        "'lang'",
        "'rang'",
        "'loz'",
        "'spades'",
        "'clubs'",
        "'hearts'",
        "'diams'",
        "'number'",
        "'ontext'",
        "''",
        "' '",
        "'\\nLine: '",
        "'\\nColumn: '",
        "'\\nChar: '",
        "'onerror'",
        "'Unclosed root tag'",
        "'Unexpected end'",
        "''",
        "'onend'",
        "'object'",
        "'bad call to strictFail'",
        "'onopentagstart'",
        "':'",
        "''",
        "':'",
        "'xmlns'",
        "'xmlns'",
        "''",
        "''",
        "'xmlns'",
        "'xml'",
        "'xml: prefix must be bound to '",
        "'\\n'",
        "'Actual: '",
        "'xmlns'",
        "'xmlns: prefix must be bound to '",
        "'\\n'",
        "'Actual: '",
        "'onattribute'",
        "''",
        "''",
        "'Unbound namespace prefix: '",
        "'onopennamespace'",
        "''",
        "''",
        "''",
        "'xmlns'",
        "'Unbound namespace prefix: '",
        "'onattribute'",
        "'onopentag'",
        "'script'",
        "''",
        "''",
        "'Weird empty close tag.'",
        "'</>'",
        "'script'",
        "'</'",
        "'>'",
        "''",
        "'onscript'",
        "''",
        "'Unexpected close tag'",
        "'Unmatched closing tag: '",
        "'</'",
        "'>'",
        "'onclosetag'",
        "'onclosenamespace'",
        "''",
        "''",
        "'#'",
        "'x'",
        "''",
        "'Invalid character entity'",
        "'&'",
        "';'",
        "'<'",
        "'Non-whitespace before first tag.'",
        "''",
        "'Cannot write after close. Assign an onready handler.'",
        "'object'",
        "''",
        "'\\n'",
        "'\\uFEFF'",
        "'<'",
        "'&'",
        "'\\n'",
        "'<'",
        "'Text data outside of root node.'",
        "'&'",
        "'<'",
        "'/'",
        "'<'",
        "'!'",
        "''",
        "'/'",
        "''",
        "'?'",
        "''",
        "'Unencoded <'",
        "' '",
        "'<'",
        "'onopencdata'",
        "''",
        "''",
        "'--'",
        "''",
        "''",
        "'Inappropriately located doctype declaration'",
        "''",
        "''",
        "'>'",
        "'onsgmldeclaration'",
        "''",
        "''",
        "'>'",
        "'ondoctype'",
        "'['",
        "''",
        "']'",
        "''",
        "'-'",
        "'-'",
        "'oncomment'",
        "''",
        "'-'",
        "'>'",
        "'Malformed comment'",
        "'--'",
        "']'",
        "']'",
        "']'",
        "'>'",
        "'oncdata'",
        "'onclosecdata'",
        "''",
        "']'",
        "']'",
        "']]'",
        "'?'",
        "'?'",
        "'>'",
        "'onprocessinginstruction'",
        "''",
        "'?'",
        "'>'",
        "'/'",
        "'Invalid character in tag name'",
        "'>'",
        "'Forward-slash in opening tag not followed by >'",
        "'>'",
        "'/'",
        "''",
        "'Invalid attribute name'",
        "'='",
        "'>'",
        "'Attribute without value'",
        "'Invalid attribute name'",
        "'='",
        "'Attribute without value'",
        "''",
        "''",
        "'onattribute'",
        "''",
        "''",
        "'>'",
        "'Invalid attribute name'",
        "'Unquoted attribute value'",
        "'&'",
        "''",
        "'>'",
        "'/'",
        "'No whitespace between attributes'",
        "''",
        "'Invalid attribute name'",
        "'&'",
        "'>'",
        "'</'",
        "'Invalid tagname in closing tag.'",
        "'>'",
        "'</'",
        "''",
        "'Invalid tagname in closing tag'",
        "'>'",
        "'Invalid characters in closing tag'",
        "'textNode'",
        "'attribValue'",
        "'attribValue'",
        "';'",
        "''",
        "'Invalid character in entity name'",
        "'&'",
        "''",
        "'Unknown state: '",
        "''",
        "''",
        "'Invalid code point: '",
        "'fromCodePoint'",
        "'undefined'"
    ],
    "variables": [
        "buffers",
        "parser",
        "newf",
        "a",
        "maxAllowed",
        "maxActual",
        "i",
        "l",
        "len",
        "m",
        "i",
        "l",
        "Stream",
        "streamWraps",
        "me",
        "SD",
        "me",
        "args",
        "CDATA",
        "DOCTYPE",
        "XML_NAMESPACE",
        "XMLNS_NAMESPACE",
        "rootNS",
        "nameStart",
        "nameBody",
        "entityStart",
        "entityBody",
        "S",
        "e",
        "s",
        "parent",
        "tag",
        "i",
        "qualName",
        "prefix",
        "local",
        "qn",
        "prefix",
        "local",
        "tag",
        "parent",
        "tag",
        "qn",
        "parent",
        "i",
        "l",
        "nv",
        "name",
        "value",
        "qualName",
        "prefix",
        "local",
        "uri",
        "a",
        "t",
        "tagName",
        "closeTo",
        "tagName",
        "close",
        "s",
        "tag",
        "x",
        "parent",
        "n",
        "entity",
        "entityLC",
        "num",
        "numStr",
        "result",
        "parser",
        "i",
        "c",
        "starti",
        "pad",
        "returnState",
        "buffer",
        "stringFromCharCode",
        "floor",
        "fromCodePoint",
        "MAX_SIZE",
        "codeUnits",
        "highSurrogate",
        "lowSurrogate",
        "index",
        "length",
        "result",
        "codePoint"
    ],
    "comments": [
        "wrapper for non-node envs",
        "When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.",
        "When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),",
        "since that's the earliest that a buffer overrun could occur.  This way, checks are",
        "as rare as required, but as often as necessary to ensure never crossing this bound.",
        "Furthermore, buffers are only tested at most once per write(), so passing a very",
        "large string into write() might have undesirable effects, but this is manageable by",
        "the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme",
        "edge case, result in creating at most one complete copy of the string passed in.",
        "Set to Infinity to have unlimited buffers.",
        "namespaces form a prototype chain.",
        "it always points at the current tag,",
        "which protos to its parent tag.",
        "mostly just for error reporting",
        "Text/cdata nodes can get big, and since they're buffered,",
        "we can get here under normal conditions.",
        "Avoid issues by emitting the text node now,",
        "so at least it won't get any bigger.",
        "schedule the next check for the earliest possible buffer overrun.",
        "if didn't throw, then means error was handled.",
        "go ahead and clear error, so we can write again.",
        "this really needs to be replaced with character classes.",
        "XML allows all manner of ridiculous numbers and digits.",
        "http://www.w3.org/TR/REC-xml/#NT-NameStartChar",
        "This implementation works on strings, a single character at a time",
        "as such, it cannot ever support astral-plane characters (10000-EFFFF)",
        "without a significant breaking change to either this  parser, or the",
        "JavaScript language.  Implementation of an emoji-capable xml parser",
        "is left as an exercise for the reader.",
        "leading byte order mark or whitespace",
        "leading whitespace",
        "general stuff",
        "&amp and such.",
        "<",
        "<!BLARG",
        "<!BLARG foo \"bar",
        "<!DOCTYPE",
        "<!DOCTYPE \"//blah",
        "<!DOCTYPE \"//blah\" [ ...",
        "<!DOCTYPE \"//blah\" [ \"foo",
        "<!-",
        "<!--",
        "<!-- blah -",
        "<!-- blah --",
        "<![CDATA[ something",
        "]",
        "]]",
        "<?hi",
        "<?hi there",
        "<?hi \"there\" ?",
        "<strong",
        "<strong /",
        "<a",
        "<a foo",
        "<a foo _",
        "<a foo=",
        "<a foo=\"bar",
        "<a foo=\"bar\"",
        "<a foo=bar",
        "<foo bar=\"&quot;\"",
        "<foo bar=&quot",
        "</a",
        "</a   >",
        "<script> ...",
        "<script> ... <",
        "shorthand",
        "will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"",
        "<x \"xmlns\"=\"http://foo\">",
        "namespace binding attribute. push the binding into scope",
        "defer onattribute events until all attributes have been seen",
        "so any new bindings can take effect. preserve attribute order",
        "so deferred events can be emitted in document order",
        "in non-xmlns mode, we can emit the event right away",
        "emit namespace binding events",
        "add namespace info to tag",
        "handle deferred onattribute events",
        "Note: do not apply default ns to attributes:",
        "http://www.w3.org/TR/REC-xml-names/#defaulting",
        "if there's any attributes with an undefined namespace,",
        "then fail on them now.",
        "process the tag",
        "special case for <script> in non-strict mode.",
        "first make sure that the closing tag actually exists.",
        "<a><b></c></b></a> will close everything, otherwise.",
        "fail the first time in strict mode",
        "didn't find it.  we already failed for strict, so just abort.",
        "remove namespace bindings introduced by tag",
        "have to process this as a text node.",
        "weird, but happens.",
        "only non-strict",
        "either a /, ?, !, or text is coming next.",
        "wait for it...",
        "if there was some whitespace, then add that in.",
        "just remember that we saw it.",
        "allow <!-- blah -- bloo --> in non-strict mode,",
        "which is a comment of \" blah -- bloo \"",
        "haven't read the attribute name yet.",
        "while",
        "! http://mths.be/fromcodepoint v0.1.0 by @mathias",
        "istanbul ignore next",
        "`NaN`, `+Infinity`, or `-Infinity`",
        "not a valid Unicode code point",
        "not a valid Unicode code point",
        "not an integer",
        "BMP code point",
        "Astral code point; split in surrogate halves",
        "http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae",
        "istanbul ignore next"
    ],
    "docstrings": [],
    "functions": [
        "SAXParser",
        "F",
        "checkBufferLength",
        "clearBuffers",
        "flushBuffers",
        "createStream",
        "SAXStream",
        "isWhitespace",
        "isQuote",
        "isAttribEnd",
        "isMatch",
        "notMatch",
        "emit",
        "emitNode",
        "closeText",
        "textopts",
        "error",
        "end",
        "strictFail",
        "newTag",
        "qname",
        "attrib",
        "openTag",
        "closeTag",
        "parseEntity",
        "beginWhiteSpace",
        "charAt",
        "write"
    ],
    "classes": []
}