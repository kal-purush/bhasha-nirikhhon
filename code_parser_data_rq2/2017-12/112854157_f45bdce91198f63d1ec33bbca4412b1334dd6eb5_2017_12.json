{
    "identifiers": [
        "flask",
        "Flask",
        "request",
        "jsonify",
        "tensorflow",
        "tf",
        "re",
        "numpy",
        "np",
        "Flask",
        "app",
        "route",
        "app",
        "route",
        "user",
        "user",
        "user_input_text",
        "tf",
        "contrib",
        "learn",
        "preprocessing",
        "VocabularyProcessor",
        "restore",
        "storage_dir",
        "vocab_text_processor",
        "re",
        "sub",
        "user_input_text",
        "join",
        "text_string",
        "split",
        "text_string",
        "lower",
        "text_string",
        "split",
        "np",
        "array",
        "vocab_processor",
        "transform",
        "text_string",
        "app",
        "route",
        "methods",
        "request",
        "get_json",
        "json",
        "len",
        "json",
        "jsonify",
        "json",
        "vectorize_user_input",
        "json",
        "vectorized_user_input_text",
        "shape",
        "tf",
        "Graph",
        "graph",
        "as_default",
        "tf",
        "Session",
        "sess",
        "as_default",
        "tf",
        "train",
        "import_meta_graph",
        "format",
        "storage_dir",
        "MODEL_NAME",
        "saver",
        "restore",
        "sess",
        "storage_dir",
        "MODEL_NAME",
        "graph",
        "get_operation_by_name",
        "input_text_node",
        "outputs",
        "graph",
        "get_operation_by_name",
        "keep_prob_node",
        "outputs",
        "graph",
        "get_operation_by_name",
        "probability_outputs",
        "outputs",
        "input_",
        "vectorized_user_input_text",
        "keep_prob",
        "sess",
        "run",
        "tf",
        "reduce_mean",
        "probability_output",
        "eval_feed_dict",
        "format",
        "probability_prediction",
        "jsonify",
        "format",
        "probability_prediction",
        "app",
        "run",
        "host",
        "port"
    ],
    "literals": [
        "'/'",
        "\"This is just a RNN TextClassifier web app\"",
        "'/users/<user>'",
        "\"Hello %s!\"",
        "r'([^\\s\\w]|_|[0-9])+'",
        "''",
        "\" \"",
        "'/api/get_text_prediction'",
        "'POST'",
        "'text'",
        "'error'",
        "'invalid input'",
        "'---user_data before processing :: '",
        "'text'",
        "'text'",
        "'---user_data after vectorized user_input_text.shape :: '",
        "\"{}.meta\"",
        "'.ckpt'",
        "'.ckpt'",
        "'Probability of Ham: {:.4}'",
        "'Ham probability'",
        "'{:.4}'",
        "'__main__'",
        "'/Users/mohammed-2284/Documents/ZTF_projects/RNNTextClassifier/out/'",
        "'vocab'",
        "'rnn_text_classifier'",
        "'input_text'",
        "'keep_prob'",
        "'probability_outputs'",
        "'0.0.0.0'"
    ],
    "variables": [
        "app",
        "vocab_processor",
        "text_string",
        "text_string",
        "text_string",
        "text_string",
        "json",
        "vectorized_user_input_text",
        "graph",
        "sess",
        "saver",
        "input_",
        "keep_prob",
        "probability_output",
        "eval_feed_dict",
        "probability_prediction",
        "storage_dir",
        "vocab_text_processor",
        "MODEL_NAME",
        "input_text_node",
        "keep_prob_node",
        "probability_outputs"
    ],
    "comments": [
        "load the model",
        "Load the saved meta graph and restore variables",
        "Get the placeholders from the graph by name",
        "Make the prediction",
        "Print output (Or save to file or DB connection?)"
    ],
    "docstrings": [
        "\"\"\"\n    this is a root dir of my server\n    :return: str\n    \"\"\"",
        "\"\"\"\n    this serves as a demo purpose\n    :param user:\n    :return: str\n    \"\"\"",
        "\"\"\"\n    vectorizing user input\n    :param user_input_text:\n    :return:\n    \"\"\"",
        "\"\"\"\n    predicts requested text whether it is ham or spam\n    :return: json\n    \"\"\""
    ],
    "functions": [
        "index",
        "hello_user",
        "vectorize_user_input",
        "get_text_prediction"
    ],
    "classes": []
}