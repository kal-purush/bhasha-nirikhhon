{
    "identifiers": [
        "builtins",
        "os",
        "subprocess",
        "Popen",
        "STDOUT",
        "PIPE",
        "tempfile",
        "gettempdir",
        "NamedTemporaryFile",
        "airflow",
        "utils",
        "decorators",
        "apply_defaults",
        "airflow",
        "operators",
        "sensors",
        "BaseSensorOperator",
        "airflow",
        "utils",
        "file",
        "TemporaryDirectory",
        "BaseSensorOperator",
        "apply_defaults",
        "bash_command",
        "env",
        "output_encoding",
        "args",
        "kwargs",
        "BashSensor",
        "args",
        "kwargs",
        "bash_command",
        "env",
        "output_encoding",
        "context",
        "bash_command",
        "log",
        "info",
        "gettempdir",
        "TemporaryDirectory",
        "prefix",
        "tmp_dir",
        "NamedTemporaryFile",
        "dir",
        "tmp_dir",
        "prefix",
        "task_id",
        "f",
        "f",
        "write",
        "bash_command",
        "f",
        "flush",
        "f",
        "name",
        "tmp_dir",
        "fname",
        "log",
        "info",
        "script_location",
        "log",
        "info",
        "bash_command",
        "Popen",
        "fname",
        "stdout",
        "PIPE",
        "stderr",
        "STDOUT",
        "close_fds",
        "cwd",
        "tmp_dir",
        "env",
        "env",
        "preexec_fn",
        "os",
        "setsid",
        "sp",
        "log",
        "info",
        "line",
        "iter",
        "sp",
        "stdout",
        "readline",
        "line",
        "decode",
        "output_encoding",
        "strip",
        "log",
        "info",
        "line",
        "sp",
        "wait",
        "log",
        "info",
        "format",
        "sp",
        "returncode",
        "sp",
        "returncode"
    ],
    "literals": [
        "'bash_command'",
        "'env'",
        "'utf-8'",
        "\"Tmp dir root location: \\n %s\"",
        "'airflowtmp'",
        "'utf_8'",
        "\"/\"",
        "\"Temporary script location: %s\"",
        "\"Running command: %s\"",
        "'bash'",
        "\"Output:\"",
        "''",
        "b''",
        "\"Command exited with \"",
        "\"return code {0}\""
    ],
    "variables": [
        "template_fields",
        "bash_command",
        "env",
        "output_encoding",
        "bash_command",
        "fname",
        "script_location",
        "sp",
        "sp",
        "line",
        "line"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License."
    ],
    "docstrings": [
        "\"\"\"\n    Executes a bash command/script and returns True if and only if the\n    return code is 0.\n\n    :param bash_command: The command, set of commands or reference to a\n        bash script (must be '.sh') to be executed.\n    :type bash_command: string\n\n    :param env: If env is not None, it must be a mapping that defines the\n        environment variables for the new process; these are used instead\n        of inheriting the current process environment, which is the default\n        behavior. (templated)\n    :type env: dict\n    :param output_encoding: output encoding of bash command.\n    :type output_encoding: string\n    \"\"\"",
        "\"\"\"\n        Execute the bash command in a temporary directory\n        which will be cleaned afterwards\n        \"\"\""
    ],
    "functions": [
        "poke"
    ],
    "classes": [
        "BashSensor"
    ]
}