{
    "identifiers": [
        "argparse",
        "matplotlib",
        "pyplot",
        "plt",
        "pandas",
        "pd",
        "re",
        "math",
        "numpy",
        "np",
        "scipy",
        "scipy",
        "stats",
        "randint",
        "uniform",
        "sklearn",
        "model_selection",
        "train_test_split",
        "sklearn",
        "svm",
        "SVC",
        "sklearn",
        "metrics",
        "cohen_kappa_score",
        "sklearn",
        "model_selection",
        "GridSearchCV",
        "RandomizedSearchCV",
        "sklearn",
        "metrics",
        "classification_report",
        "make_scorer",
        "pyspark",
        "sql",
        "SparkSession",
        "file_paths",
        "load_data_X",
        "file_path",
        "file_path",
        "file_paths",
        "pd",
        "concat",
        "frames",
        "file_path",
        "pd",
        "read_csv",
        "file_path",
        "index_col",
        "skiprows",
        "names",
        "SLIDE_ID",
        "ROI_ID",
        "MITOSIS_NUM_PER_ROI",
        "ROW_NUM",
        "COL_NUM",
        "SCORE",
        "X",
        "MITOSIS_NUM_PER_ROI",
        "apply",
        "pd",
        "to_numeric",
        "errors",
        "X",
        "ROW_NUM",
        "apply",
        "pd",
        "to_numeric",
        "errors",
        "X",
        "COL_NUM",
        "apply",
        "pd",
        "to_numeric",
        "errors",
        "X",
        "SCORE",
        "apply",
        "pd",
        "to_numeric",
        "errors",
        "X",
        "SLIDE_ID",
        "apply",
        "x",
        "re",
        "findall",
        "x",
        "X",
        "file_path",
        "pd",
        "read_csv",
        "file_path",
        "names",
        "MITOSIS_SCORE",
        "MOLECULAR_SCORE",
        "Y",
        "MITOSIS_SCORE",
        "apply",
        "pd",
        "to_numeric",
        "errors",
        "Y",
        "MOLECULAR_SCORE",
        "apply",
        "pd",
        "to_numeric",
        "errors",
        "Y",
        "insert",
        "SLIDE_ID",
        "len",
        "Y",
        "Y",
        "x_files",
        "y_file",
        "test_size",
        "selected_feature_names",
        "y_name",
        "seed",
        "load_data_X_in_batch",
        "x_files",
        "load_data_Y",
        "y_file",
        "gen_feature_table",
        "X",
        "join_df",
        "features",
        "Y",
        "SLIDE_ID",
        "datasets",
        "to_csv",
        "selected_feature_names",
        "issubset",
        "feature_col_names",
        "datasets",
        "selected_feature_names",
        "values",
        "datasets",
        "y_name",
        "values",
        "train_test_split",
        "X_clean",
        "Y_clean",
        "shuffle",
        "test_size",
        "test_size",
        "random_state",
        "seed",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "datasets",
        "columns",
        "datasets",
        "columns",
        "plot",
        "plt",
        "show",
        "df",
        "df",
        "groupby",
        "SLIDE_ID",
        "ROI_ID",
        "MITOSIS_NUM_PER_ROI",
        "count",
        "reset_index",
        "name",
        "MITOSIS_NUM_PER_ROI",
        "get_descriptive_statistics",
        "mitosis_df",
        "SLIDE_ID",
        "MITOSIS_NUM_PER_ROI",
        "suffix",
        "feature_col_names",
        "feature_names",
        "mitosis_df",
        "groupby",
        "SLIDE_ID",
        "apply",
        "row",
        "row",
        "sort_values",
        "MITOSIS_NUM_PER_ROI",
        "ascending",
        "max",
        "len",
        "row",
        "get_descriptive_statistics",
        "mitosis_df_top10",
        "SLIDE_ID",
        "MITOSIS_NUM_PER_ROI",
        "suffix",
        "feature_col_names",
        "feature_names",
        "mitosis_df",
        "groupby",
        "SLIDE_ID",
        "apply",
        "row",
        "row",
        "sort_values",
        "MITOSIS_NUM_PER_ROI",
        "ascending",
        "len",
        "row",
        "max",
        "len",
        "row",
        "get_descriptive_statistics",
        "mitosis_df_top30_70",
        "SLIDE_ID",
        "MITOSIS_NUM_PER_ROI",
        "suffix",
        "feature_col_names",
        "feature_names",
        "join_df",
        "mitosis_sum",
        "mitosis_std",
        "mitosis_avg",
        "mitosis_sum_top10",
        "mitosis_std_top10",
        "mitosis_avg_top10",
        "mitosis_sum_top30_70",
        "mitosis_std_top30_70",
        "mitosis_avg_top30_70",
        "SLIDE_ID",
        "feature_df",
        "feature_col_names",
        "df",
        "groupby_col",
        "target_col",
        "suffix",
        "suffix",
        "len",
        "suffix",
        "suffix",
        "len",
        "suffix",
        "suffix",
        "len",
        "suffix",
        "df",
        "groupby",
        "groupby_col",
        "target_col",
        "sum",
        "reset_index",
        "name",
        "sum_col_name",
        "df",
        "groupby",
        "groupby_col",
        "target_col",
        "std",
        "reset_index",
        "name",
        "std_col_name",
        "df",
        "groupby",
        "groupby_col",
        "target_col",
        "mean",
        "reset_index",
        "name",
        "avg_col_name",
        "std",
        "std_col_name",
        "apply",
        "x",
        "math",
        "isnan",
        "x",
        "x",
        "sum",
        "std",
        "avg",
        "sum_col_name",
        "std_col_name",
        "avg_col_name",
        "df_list",
        "key",
        "df_list",
        "right",
        "df_list",
        "pd",
        "merge",
        "left",
        "right",
        "on",
        "key",
        "left",
        "y_truth",
        "y_pred",
        "weights",
        "cohen_kappa_score",
        "y_pred",
        "y_truth",
        "weights",
        "weights",
        "kappa_score",
        "results",
        "n_top",
        "i",
        "n_top",
        "np",
        "flatnonzero",
        "results",
        "i",
        "candidate",
        "candidates",
        "format",
        "i",
        "format",
        "results",
        "candidate",
        "results",
        "candidate",
        "format",
        "results",
        "candidate",
        "score",
        "score",
        "make_scorer",
        "compute_kappa_score",
        "greater_is_better",
        "score",
        "parameters",
        "parameter_search_mode",
        "x_files",
        "y_file",
        "selected_feature_names",
        "y_name",
        "test_size",
        "scores",
        "cv",
        "seed",
        "n_iter",
        "generate_model_input_data",
        "x_files",
        "x_files",
        "y_file",
        "y_file",
        "test_size",
        "test_size",
        "selected_feature_names",
        "selected_feature_names",
        "y_name",
        "y_name",
        "seed",
        "seed",
        "get_scoring",
        "scores",
        "parameter_search_mode",
        "GridSearchCV",
        "SVC",
        "param_grid",
        "parameters",
        "scoring",
        "scoring",
        "cv",
        "cv",
        "parameter_search_mode",
        "RandomizedSearchCV",
        "SVC",
        "param_distributions",
        "parameters",
        "n_iter",
        "n_iter",
        "cv",
        "cv",
        "scoring",
        "scoring",
        "parameter_search_mode",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "report",
        "clf",
        "cv_results_",
        "n_top",
        "y_test",
        "clf",
        "predict",
        "X_test",
        "compute_kappa_score",
        "y_true",
        "y_pred",
        "clf",
        "best_score_",
        "test_kappa_score",
        "clf",
        "best_params_",
        "result",
        "sparkContext",
        "parameters",
        "parameter_search_mode",
        "score",
        "x_files",
        "y_file",
        "selected_feature_names",
        "y_name",
        "test_size",
        "cv",
        "seed",
        "n_iter",
        "parameter",
        "x_files",
        "y_file",
        "parameter",
        "parameters",
        "sparkContext",
        "parallelize",
        "model_intputs",
        "len",
        "model_intputs",
        "para_rdd",
        "input",
        "search_hyper_parameter_help",
        "parameters",
        "input",
        "parameter_search_mode",
        "parameter_search_mode",
        "x_files",
        "input",
        "y_file",
        "input",
        "selected_feature_names",
        "selected_feature_names",
        "y_name",
        "y_name",
        "test_size",
        "test_size",
        "scores",
        "score",
        "cv",
        "cv",
        "seed",
        "seed",
        "n_iter",
        "n_iter",
        "model_evaluation_rdd",
        "collect",
        "model_evaluation_results",
        "args",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "required",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "MITOSIS_SCORE",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "args",
        "SparkSession",
        "builder",
        "appName",
        "args",
        "appName",
        "getOrCreate",
        "spark",
        "sparkContext",
        "FEATURE_COLUMNS",
        "len",
        "FEATURE_COLUMNS",
        "args",
        "parameter_search_mode",
        "args",
        "parameter_search_mode",
        "scipy",
        "stats",
        "expon",
        "loc",
        "scale",
        "scipy",
        "stats",
        "expon",
        "loc",
        "scale",
        "scipy",
        "stats",
        "expon",
        "loc",
        "scale",
        "scipy",
        "stats",
        "expon",
        "loc",
        "scale",
        "scipy",
        "stats",
        "expon",
        "loc",
        "scale",
        "scipy",
        "stats",
        "expon",
        "loc",
        "scale",
        "uniform",
        "loc",
        "scale",
        "uniform",
        "loc",
        "scale",
        "uniform",
        "loc",
        "scale",
        "uniform",
        "loc",
        "scale",
        "args",
        "parameter_search_mode",
        "search_hyper_parameter",
        "sparkContext",
        "sparkContext",
        "parameters",
        "tuned_parameters",
        "parameter_search_mode",
        "args",
        "parameter_search_mode",
        "score",
        "args",
        "score",
        "x_files",
        "args",
        "pred_file_paths",
        "y_file",
        "args",
        "ground_truth_file_path",
        "selected_feature_names",
        "selected_feature_names",
        "y_name",
        "args",
        "y_name",
        "test_size",
        "args",
        "test_data_size",
        "cv",
        "args",
        "cv",
        "seed",
        "args",
        "seed",
        "n_iter",
        "args",
        "n_iter",
        "model_evaluation_results",
        "main"
    ],
    "literals": [
        "'slide_id'",
        "'ROI_ID'",
        "'mitosis_num_per_ROI'",
        "'row_num'",
        "'col_num'",
        "'score'",
        "'mitosis_score'",
        "'molecular_score'",
        "'sum'",
        "'std'",
        "'avg'",
        "'sum_top10'",
        "'std_top10'",
        "'avg_top10'",
        "'sum_top30_70'",
        "'std_top30_70'",
        "'avg_top30_70'",
        "'coerce'",
        "'coerce'",
        "'coerce'",
        "'coerce'",
        "\"\\d+\"",
        "'coerce'",
        "'coerce'",
        "\"svs_prediction.csv\"",
        "\"\"",
        "\"top10\"",
        "\"top30_70\"",
        "\"\"",
        "f\"sum_{suffix}\"",
        "\"sum\"",
        "f\"std_{suffix}\"",
        "\"std\"",
        "f\"avg_{suffix}\"",
        "\"avg\"",
        "\"quadratic\"",
        "'rank_test_score'",
        "\"Model with rank: {0}\"",
        "\"Mean validation score: {0:.3f} (std: {1:.3f})\"",
        "'mean_test_score'",
        "'std_test_score'",
        "\"Parameters: {0}\"",
        "'params'",
        "\"\"",
        "'kappa'",
        "f\"scoring mode unknown: {score}\"",
        "\"grid\"",
        "\"random\"",
        "f\"hyper parameter searching mode unknown: {parameter_search_mode}\"",
        "\"--appName\"",
        "\"Proliferation Score Prediction\"",
        "\"application name\"",
        "\"--ground_truth_file_path\"",
        "\"path to the ground truth file\"",
        "\"--pred_file_paths\"",
        "'*'",
        "\"list of paths for the prediction results \"",
        "\"--cv\"",
        "\"integer to determine the cross-validation splitting strategy\"",
        "\"--score\"",
        "'kappa'",
        "\"string for the evaluation of predictions on the test set (\"",
        "\"default: %(default)s).\"",
        "\"--test_data_size\"",
        "\"float ratio of the test data\"",
        "\"--seed\"",
        "\"integer seed for the train and test data split shuffling\"",
        "\"--y_name\"",
        "\"column name for Y, (default: %(default)s)\"",
        "\"--parameter_search_mode\"",
        "\"random\"",
        "\"hyper parameter searching mode (e.g. random/grid), (default: %(\"",
        "\"default)s)\"",
        "\"--n_iter\"",
        "\"number of parameter settings that are sampled for RandomizedSearchCV\"",
        "\"grid\"",
        "'kernel'",
        "'rbf'",
        "'gamma'",
        "'C'",
        "'class_weight'",
        "'balanced'",
        "'kernel'",
        "'rbf'",
        "'gamma'",
        "'C'",
        "'class_weight'",
        "'balanced'",
        "'kernel'",
        "'linear'",
        "'C'",
        "\"random\"",
        "'C'",
        "'gamma'",
        "'kernel'",
        "'rbf'",
        "'class_weight'",
        "'balanced'",
        "'C'",
        "'gamma'",
        "'kernel'",
        "'rbf'",
        "'class_weight'",
        "'balanced'",
        "'C'",
        "'gamma'",
        "'kernel'",
        "'rbf'",
        "'class_weight'",
        "'balanced'",
        "'C'",
        "'gamma'",
        "'kernel'",
        "'rbf'",
        "'class_weight'",
        "'balanced'",
        "'C'",
        "'gamma'",
        "'kernel'",
        "'rbf'",
        "'class_weight'",
        "'balanced'",
        "f\"hyper parameter searching mode unknown: {args.parameter_search_mode}\"",
        "\"__main__\""
    ],
    "variables": [
        "SLIDE_ID",
        "ROI_ID",
        "MITOSIS_NUM_PER_ROI",
        "ROW_NUM",
        "COL_NUM",
        "SCORE",
        "MITOSIS_SCORE",
        "MOLECULAR_SCORE",
        "FEATURE_COLUMNS",
        "frames",
        "X",
        "X",
        "MITOSIS_NUM_PER_ROI",
        "X",
        "ROW_NUM",
        "X",
        "COL_NUM",
        "X",
        "SCORE",
        "X",
        "SLIDE_ID",
        "Y",
        "Y",
        "MITOSIS_SCORE",
        "Y",
        "MOLECULAR_SCORE",
        "X",
        "Y",
        "features",
        "feature_col_names",
        "datasets",
        "X_clean",
        "Y_clean",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "feature_col_names",
        "mitosis_df",
        "mitosis_sum",
        "mitosis_std",
        "mitosis_avg",
        "feature_names",
        "mitosis_df_top10",
        "mitosis_sum_top10",
        "mitosis_std_top10",
        "mitosis_avg_top10",
        "feature_names",
        "mitosis_df_top30_70",
        "mitosis_sum_top30_70",
        "mitosis_std_top30_70",
        "mitosis_avg_top30_70",
        "feature_names",
        "feature_df",
        "sum_col_name",
        "std_col_name",
        "avg_col_name",
        "sum",
        "std",
        "avg",
        "std",
        "std_col_name",
        "left",
        "left",
        "kappa_score",
        "candidates",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "scoring",
        "clf",
        "clf",
        "y_true",
        "y_pred",
        "test_kappa_score",
        "result",
        "model_intputs",
        "para_rdd",
        "model_evaluation_rdd",
        "model_evaluation_results",
        "parser",
        "args",
        "spark",
        "sparkContext",
        "selected_feature_names",
        "tuned_parameters",
        "tuned_parameters",
        "model_evaluation_results"
    ],
    "comments": [
        "the schema for the input df is as [slide_id, roi_id, mitosis_num_per_roi,",
        "row_num, col_num, score]; Each row in the df represents a detected",
        "mitosis point. Grouping by the slide_id and roi_id, we will get the",
        "number of mitoses for each ROI.",
        "generate the features (sum, std, avg) all the ROIs",
        "collect the name of features",
        "get the top 10% ROIs with the largest number of mitoses for each slide",
        "generate the features (sum, std, avg) for the top 10% ROIs",
        "collect the name of features",
        "get the top 30%  - 70% ROIs with the largest number of mitoses for",
        "each slide",
        "generate the features (sum, std, avg) for the top 30-70% ROIs",
        "collect the name of features",
        "join these tree group of features together by slide_id",
        "handle the special case that the std df only has one row, pd will",
        "set the value to be NaN. Here we set it to be 0, which will be",
        "compatible with the SVM algorithm.",
        "generate the training and test datasets from the input raw dataset",
        "print the information for the n_top models",
        "compute the kappa score of the best model on the validation dataset",
        "parse args",
        "Set the parameters by cross-validation"
    ],
    "docstrings": [
        "\"\"\"\nThis script predict the breast cancer proliferation score for the input slide images\n\"\"\"",
        "\"\"\" Generate the X dataframe from a list of csv files\n\n  Args:\n    file_paths: list of csv file paths for X\n\n  Return:\n    a dataframe for X\n  \"\"\"",
        "\"\"\" Generate the Y dataframe from the input csv file\n\n  Args:\n    file_path: csv file path for Y\n\n  Return:\n    a dataframe for Y\n  \"\"\"",
        "\"\"\" Prepare the input data for the training model\n\n  Args:\n    x_files: input file paths for X.\n    y_file: input file paths for y.\n    test_size: ratio of input data for the test.\n    selected_feature_names: training features selected for the SVM model.\n    y_name: feature name selected for target values.\n    seed: integer seed for the train and test data split shuffling.\n\n  Return:\n    the dataframe for the training and test.\n  \"\"\"",
        "\"\"\" Visualize the selected columns in the\n\n  Args:\n    datasets: dataframe for the visualization\n    columns: column names for the visualization\n  \"\"\"",
        "\"\"\" Generate the features from the input prediction data\n\n  Args:\n    df: dataframe of the input prediction result\n\n  Return:\n    the dataframe of the features for the model training\n  \"\"\"",
        "\"\"\"Compute the descriptive statistics (sum, std, mean) for the input\n    features\n\n  Args:\n    df: dataframe for the input prediction data\n    groupby_col: column name used to group the table\n    target_col: column name for the descriptive statistics\n    suffix: suffix for the new statistic features\n\n  Return:\n    the dataframes for the descriptive statistics\n  \"\"\"",
        "\"\"\" Join the dataframes by the key column\n\n  Args:\n    df_list: list of dataframes for joining\n    key: column name to join on\n\n  Return:\n    the merged dataframe\n  \"\"\"",
        "\"\"\"Compute the Cohen's kappa score between the prediction and the\n    ground truth\n\n  Args:\n    y_pred: prediction results.\n    y_truth: ground truth.\n    weights: string of weighting type to calculate the score. None\n      means no weighted; “linear” means linear weighted; “quadratic”\n      means quadratic weighted.\n\n  Return:\n    the kappa score, which is a float number between -1 and 1.\n  \"\"\"",
        "\"\"\"report the model training result\n\n  Args:\n    results: cross validation result with keys as column headers and\n      values as columns\n    n_top: number of the top-ranked models\n  \"\"\"",
        "\"\"\" get the scoring function to evaluate the prediction on the test set\n  Args:\n    score: string for the scoring method\n\n  Return:\n    the scoring function\n  \"\"\"",
        "\"\"\"Help function for searching the hyper parameters of the SVM model\n\n  Args:\n    parameters: hyper parameters for SVM model, e.g. [{'kernel': ['rbf'],\n     'gamma': [0.8, 0.7, 0.6], 'C': [1, 2, 3]}, {'kernel': ['linear'],\n     'C': [1, 2, 3]}].\n    parameter_search_mode: mode for hyper parameter searching, e.g. random/grid\n    x_files: input file paths for X.\n    y_file: input file path for y.\n    selected_feature_names: training features selected for the SVM model.\n    y_name: feature name selected for target values.\n    test_size: ratio of input data for the test.\n    scores: list of strings for the evaluation of predictions on the test\n      set, e.g., ['precision', 'recall'].\n    cv: integer to determine the cross-validation splitting strategy.\n    seed: integer seed for the train and test data split shuffling.\n    n_iter: number of parameter settings that are sampled.\n\n  Return:\n    the model evaluation result, a tuple (clf.best_score_, test_kappa_score, clf.best_params_).\n  \"\"\"",
        "\"\"\" Utilize PySpark to search the hyper parameters of the SVM model\n\n  Args:\n    sparkContext: Spark context.\n    parameters: hyper parameters for SVM model, e.g. [{'kernel': ['rbf'],\n      'gamma': [0.8, 0.7, 0.6], 'C': [1, 2, 3]}, {'kernel': ['linear'],\n      'C': [1, 2, 3]}].\n    parameter_search_mode: mode for hyper parameter searching, e.g. random/grid\n    score: list of strings for the evaluation of predictions on the\n      test set, e.g., ['precision', 'recall'].\n    x_files: input file paths for X.\n    y_file: input file path for y.\n    selected_feature_names: selected training features for the SVM model.\n    y_name: selected feature name for target values.\n    test_size: ratio of input data for the test.\n    cv: integer to determine the cross-validation splitting strategy.\n    seed: integer seed for the train and test data split shuffling.\n    n_iter: number of parameter settings that are sampled.\n\n  Return:\n    the model evaluation results.\n  \"\"\""
    ],
    "functions": [
        "load_data_X_in_batch",
        "load_data_X",
        "load_data_Y",
        "generate_model_input_data",
        "visualize",
        "gen_feature_table",
        "get_descriptive_statistics",
        "join_df",
        "compute_kappa_score",
        "report",
        "get_scoring",
        "search_hyper_parameter_help",
        "search_hyper_parameter",
        "main"
    ],
    "classes": []
}