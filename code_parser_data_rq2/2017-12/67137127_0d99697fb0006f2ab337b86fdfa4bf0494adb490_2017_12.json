{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "conf",
        "IdmCore",
        "IdmCore",
        "IdmCore",
        "conf",
        "clone",
        "elisa",
        "elisa_auth",
        "elisa_auth",
        "clone",
        "bob",
        "bob_auth",
        "bob_auth",
        "clone",
        "admin",
        "admin_auth",
        "admin_auth",
        "c",
        "done",
        "dbconnection",
        "rmdir",
        "dbName",
        "err",
        "dirs",
        "files",
        "rmdir",
        "dbName",
        "err",
        "dirs",
        "files",
        "rmdir",
        "conf",
        "err",
        "dirs",
        "files",
        "done",
        "disconnect",
        "c",
        "done",
        "idmcore",
        "admin_auth",
        "admin_auth",
        "idmcore",
        "admin_auth",
        "admin_auth",
        "admin_auth",
        "admin",
        "arr",
        "read",
        "idmcore",
        "admin_auth",
        "bob_auth",
        "bob_auth",
        "bob",
        "bob_auth",
        "read",
        "idmcore",
        "admin_auth",
        "elisa_auth",
        "elisa_auth",
        "elisa",
        "elisa_auth",
        "read",
        "idmcore",
        "admin_auth",
        "group_name",
        "read",
        "idmcore",
        "admin_auth",
        "group_name",
        "admin_auth",
        "bob_auth",
        "bob_auth",
        "read",
        "done",
        "err",
        "err",
        "describe",
        "beforeEach",
        "done",
        "buildUsers",
        "done",
        "afterEach",
        "done",
        "cleanDb",
        "done",
        "it",
        "done",
        "idmcore",
        "dbconnection",
        "idmcore",
        "elisa_auth",
        "elisa_auth",
        "elisa_auth",
        "policies",
        "res",
        "idmcore",
        "elisa_auth",
        "elisa_auth",
        "elisa_auth",
        "res",
        "res",
        "done",
        "err",
        "err",
        "it",
        "done",
        "idmcore",
        "dbconnection",
        "idmcore",
        "elisa_auth",
        "elisa_auth",
        "elisa_auth",
        "policies",
        "res",
        "idmcore",
        "admin_auth",
        "elisa_auth",
        "elisa_auth",
        "res",
        "res",
        "done",
        "err",
        "err",
        "it",
        "done",
        "idmcore",
        "dbconnection",
        "idmcore",
        "bob_auth",
        "elisa_auth",
        "elisa_auth",
        "policies",
        "res",
        "idmcore",
        "bob_auth",
        "bob_auth",
        "bob_auth",
        "bob_saved",
        "bob_saved",
        "idmcore",
        "bob_saved",
        "elisa_auth",
        "elisa_auth",
        "res",
        "res",
        "done",
        "err",
        "err"
    ],
    "literals": [
        "'../index'",
        "'clone'",
        "'assert'",
        "'deep-diff'",
        "'http-errors'",
        "'fs'",
        "'agile-idm-entity-storage'",
        "\"./database\"",
        "'rmdir'",
        "'./entity-policies-conf'",
        "\"group\"",
        "\"user_name\"",
        "\"elisa\"",
        "\"auth_type\"",
        "\"agile-local\"",
        "\"password\"",
        "\"secret\"",
        "\"role\"",
        "\"admin\"",
        "\"owner\"",
        "\"elisa!@!agile-local\"",
        "\"id\"",
        "\"elisa!@!agile-local\"",
        "\"type\"",
        "\"/user\"",
        "\"elisa!@!agile-local\"",
        "\"/user\"",
        "\"user_name\"",
        "\"bob\"",
        "\"auth_type\"",
        "\"agile-local\"",
        "\"password\"",
        "\"secret\"",
        "\"role\"",
        "\"admin\"",
        "\"owner\"",
        "\"bob!@!agile-local\"",
        "\"id\"",
        "\"bob!@!agile-local\"",
        "\"type\"",
        "\"/user\"",
        "\"bob!@!agile-local\"",
        "\"/user\"",
        "\"user_name\"",
        "\"admin\"",
        "\"auth_type\"",
        "\"agile-local\"",
        "\"password\"",
        "\"secret\"",
        "\"role\"",
        "\"admin\"",
        "\"owner\"",
        "\"admin!@!agile-local\"",
        "\"id\"",
        "\"admin!@!agile-local\"",
        "\"type\"",
        "\"/user\"",
        "\"admin!@!agile-local\"",
        "\"/user\"",
        "\"disconnect\"",
        "\"_entities\"",
        "\"_groups\"",
        "\"_policies\"",
        "\"not able to close database\"",
        "'GROUP ACTIONS'",
        "'should return user entity \"elisa\" with password attribute for owner elisa'",
        "\"op\"",
        "\"read\"",
        "\"locks\"",
        "\"lock\"",
        "\"isOwner\"",
        "\"op\"",
        "\"read\"",
        "\"locks\"",
        "\"lock\"",
        "\"isGroupMember\"",
        "\"args\"",
        "\"group\"",
        "\"op\"",
        "\"write\"",
        "\"password\"",
        "\"password\"",
        "'should return user entity \"elisa\" without password attribute for user admin'",
        "\"op\"",
        "\"read\"",
        "\"locks\"",
        "\"lock\"",
        "\"isOwner\"",
        "\"op\"",
        "\"read\"",
        "\"locks\"",
        "\"lock\"",
        "\"isGroupMember\"",
        "\"args\"",
        "\"group\"",
        "\"op\"",
        "\"write\"",
        "\"password\"",
        "\"password\"",
        "'should return user entity \"elisa\" with password attribute for group member bob'",
        "\"op\"",
        "\"read\"",
        "\"locks\"",
        "\"lock\"",
        "\"isOwner\"",
        "\"op\"",
        "\"read\"",
        "\"locks\"",
        "\"lock\"",
        "\"isGroupMember\"",
        "\"args\"",
        "\"group\"",
        "\"op\"",
        "\"write\"",
        "\"password\"",
        "\"password\""
    ],
    "variables": [
        "IdmCore",
        "clone",
        "deepdif",
        "createError",
        "fs",
        "dbconnection",
        "db",
        "dbName",
        "rmdir",
        "conf",
        "dbName",
        "idmcore",
        "group_name",
        "elisa",
        "elisa_auth",
        "bob",
        "bob_auth",
        "admin",
        "admin_auth",
        "arr",
        "policies",
        "policies",
        "policies",
        "bob_saved"
    ],
    "comments": [
        "DEBUG",
        "console.log(\"#### DEBUG INFORMATION FROM buildUsers()\");",
        "Sets default entity policies and creates user 'admin'",
        "DEBUG",
        "console.log(\"User '\" + read[1].id + \"' was successfully created!\");",
        "Creates user 'bob'",
        "DEBUG",
        "console.log(\"User '\" + read.id + \"' was successfully created!\");",
        "Creates user 'elsia'",
        "DEBUG",
        "console.log(\"User '\" + read.id + \"' was successfully created!\");",
        "Creates group 'group'",
        "DEBUG",
        "console.log(\"Group '\" + read.group_name + \"' was successfully created and is owned by '\" + read.owner + \"'!\");",
        "Adds user 'admin' to group 'group'",
        "DEBUG",
        "console.log(\"User '\" + read.id + \"' was successfully added to group '\" + read.groups[0].group_name + \"'!\");",
        "Fulfills promise",
        "policies for user attribute password",
        "DEBUG",
        "console.log(\"#### DEBUG INFORMATION FROM 'test'\");",
        "Sets password policy for elisa. Password can be read by the owner and a member of the group 'group'.",
        "DEBUG",
        "if (res != null) {",
        "console.log(\"Policies were successfully applied!\");",
        "}",
        "Retrieves user entity elisa",
        "console.log(elisa_auth);",
        "DEBUG",
        "console.log(JSON.stringify(res));",
        "Fulfills promise",
        "policies for user attribute password",
        "DEBUG",
        "console.log(\"#### DEBUG INFORMATION FROM 'test'\");",
        "Sets password policy for elisa. Password can be read by the owner and a member of the group 'group'.",
        "DEBUG",
        "if (res != null) {",
        "console.log(\"Policies were successfully applied!\");",
        "}",
        "Retrieves user entity elisa",
        "console.log(elisa_auth);",
        "DEBUG",
        "console.log(JSON.stringify(res));",
        "Fulfills promise",
        "policies for user attribute password",
        "Sets password policy for elisa. Password can be read by the owner and a member of the group 'group'.",
        "DEBUG",
        "if (res != null) {",
        "console.log(\"Policies were successfully applied!\");",
        "}",
        "Retrieves user entity bob from database, otherwise the group relation would be missing",
        "DEBUG",
        "console.log(\"User '\" + bob_saved.id + \"' was successfully retrieved from the database!\");",
        "Read user entity elisa",
        "DEBUG",
        "console.log(JSON.stringify(res));",
        "Fulfills promise"
    ],
    "docstrings": [
        "* elisa is the owner of its own entity\n     * she should be able to read the password",
        "* admin is another user. he is not the owner of the user entity 'elisa' and not a member of group 'group'\n     * he should not be able to read the password",
        "* bob is member of group 'group'.\n     * he should be able to read the password, while he is not the owner of the user entity, but member of the group 'group'."
    ],
    "functions": [
        "cleanDb",
        "disconnect",
        "buildUsers"
    ],
    "classes": []
}