{
    "identifiers": [
        "sys",
        "types",
        "copy",
        "deepcopy",
        "collections",
        "inspect",
        "AttributeError",
        "_HAS_DEFAULT_FACTORY_CLASS",
        "_MISSING_FACTORY",
        "types",
        "MappingProxyType",
        "metaclass",
        "_InitVarMeta",
        "default_factory",
        "init",
        "repr",
        "hash",
        "compare",
        "metadata",
        "default_factory",
        "init",
        "repr",
        "hash",
        "compare",
        "_EMPTY_METADATA",
        "metadata",
        "len",
        "metadata",
        "types",
        "MappingProxyType",
        "metadata",
        "name",
        "default_factory",
        "init",
        "repr",
        "hash",
        "compare",
        "metadata",
        "_MISSING",
        "default_factory",
        "_MISSING",
        "init",
        "repr",
        "hash",
        "compare",
        "metadata",
        "_MISSING",
        "default_factory",
        "_MISSING",
        "ValueError",
        "Field",
        "default_factory",
        "init",
        "repr",
        "hash",
        "compare",
        "metadata",
        "obj_name",
        "fields",
        "len",
        "fields",
        "join",
        "obj_name",
        "f",
        "name",
        "f",
        "fields",
        "name",
        "args",
        "body",
        "globals",
        "locals",
        "return_type",
        "_MISSING",
        "locals",
        "return_type",
        "_MISSING",
        "return_type",
        "join",
        "args",
        "join",
        "b",
        "b",
        "body",
        "name",
        "args",
        "return_annotation",
        "body",
        "exec",
        "txt",
        "globals",
        "locals",
        "locals",
        "name",
        "frozen",
        "name",
        "value",
        "self_name",
        "frozen",
        "self_name",
        "name",
        "value",
        "self_name",
        "name",
        "value",
        "f",
        "frozen",
        "globals",
        "self_name",
        "f",
        "name",
        "f",
        "default_factory",
        "_MISSING",
        "f",
        "init",
        "f",
        "default_factory",
        "default_name",
        "f",
        "name",
        "f",
        "name",
        "f",
        "default_factory",
        "default_name",
        "f",
        "init",
        "f",
        "_MISSING",
        "f",
        "name",
        "f",
        "_MISSING",
        "f",
        "f",
        "name",
        "f",
        "_field_type",
        "_FIELD_INITVAR",
        "_field_assign",
        "frozen",
        "f",
        "name",
        "value",
        "self_name",
        "f",
        "f",
        "_MISSING",
        "f",
        "default_factory",
        "_MISSING",
        "f",
        "_MISSING",
        "f",
        "name",
        "f",
        "default_factory",
        "_MISSING",
        "f",
        "name",
        "f",
        "name",
        "fields",
        "frozen",
        "has_post_init",
        "self_name",
        "f",
        "fields",
        "f",
        "init",
        "f",
        "_MISSING",
        "f",
        "default_factory",
        "_MISSING",
        "seen_default",
        "f",
        "name",
        "_MISSING",
        "_HAS_DEFAULT_FACTORY",
        "f",
        "fields",
        "_field_init",
        "f",
        "frozen",
        "globals",
        "self_name",
        "line",
        "body_lines",
        "append",
        "line",
        "has_post_init",
        "join",
        "f",
        "name",
        "f",
        "fields",
        "f",
        "_field_type",
        "_FIELD_INITVAR",
        "body_lines",
        "self_name",
        "_POST_INIT_NAME",
        "params_str",
        "len",
        "body_lines",
        "f",
        "name",
        "f",
        "f",
        "fields",
        "_create_fn",
        "self_name",
        "_init_param",
        "f",
        "f",
        "fields",
        "f",
        "init",
        "body_lines",
        "locals",
        "locals",
        "globals",
        "globals",
        "return_type",
        "fields",
        "_create_fn",
        "join",
        "f",
        "name",
        "f",
        "name",
        "f",
        "fields",
        "name",
        "value",
        "FrozenInstanceError",
        "name",
        "name",
        "FrozenInstanceError",
        "name",
        "name",
        "op",
        "self_tuple",
        "other_tuple",
        "_create_fn",
        "name",
        "self_tuple",
        "op",
        "other_tuple",
        "cls",
        "fields",
        "_tuple_str",
        "fields",
        "_tuple_str",
        "fields",
        "name",
        "op",
        "_set_attribute",
        "cls",
        "name",
        "_cmp_fn",
        "name",
        "op",
        "self_tuple",
        "other_tuple",
        "cls",
        "fields",
        "_tuple_str",
        "fields",
        "_tuple_str",
        "fields",
        "name",
        "op",
        "_set_attribute",
        "cls",
        "name",
        "_cmp_fn",
        "name",
        "op",
        "self_tuple",
        "other_tuple",
        "fields",
        "_tuple_str",
        "fields",
        "_create_fn",
        "self_tuple",
        "cls",
        "a_name",
        "a_type",
        "getattr",
        "cls",
        "a_name",
        "_MISSING",
        "isinstance",
        "Field",
        "field",
        "_FIELD",
        "a_name",
        "a_type",
        "sys",
        "modules",
        "get",
        "typing",
        "a_type",
        "typing",
        "_ClassVar",
        "_FIELD_CLASSVAR",
        "f",
        "_field_type",
        "_FIELD",
        "a_type",
        "InitVar",
        "_FIELD_INITVAR",
        "f",
        "_field_type",
        "_FIELD_CLASSVAR",
        "_FIELD_INITVAR",
        "f",
        "default_factory",
        "_MISSING",
        "f",
        "name",
        "f",
        "_field_type",
        "_FIELD",
        "isinstance",
        "f",
        "ValueError",
        "f",
        "f",
        "name",
        "f",
        "cls",
        "getattr",
        "cls",
        "_get_field",
        "cls",
        "a_name",
        "a_type",
        "a_name",
        "a_type",
        "annotations",
        "items",
        "cls",
        "name",
        "value",
        "name",
        "cls",
        "__dict__",
        "name",
        "cls",
        "setattr",
        "cls",
        "name",
        "value",
        "cls",
        "repr",
        "eq",
        "order",
        "hash",
        "init",
        "frozen",
        "collections",
        "OrderedDict",
        "b",
        "cls",
        "__mro__",
        "getattr",
        "b",
        "_MARKER",
        "base_fields",
        "f",
        "base_fields",
        "values",
        "f",
        "name",
        "f",
        "f",
        "_find_fields",
        "cls",
        "f",
        "name",
        "f",
        "isinstance",
        "getattr",
        "cls",
        "f",
        "name",
        "Field",
        "f",
        "_MISSING",
        "delattr",
        "cls",
        "f",
        "name",
        "setattr",
        "cls",
        "f",
        "name",
        "f",
        "setattr",
        "cls",
        "_MARKER",
        "fields",
        "frozen",
        "cls",
        "__setattr__",
        "_frozen_setattr",
        "order",
        "eq",
        "ValueError",
        "init",
        "hasattr",
        "cls",
        "_POST_INIT_NAME",
        "_set_attribute",
        "cls",
        "_init_fn",
        "f",
        "f",
        "_field_type",
        "_FIELD",
        "_FIELD_INITVAR",
        "fields",
        "values",
        "is_frozen",
        "has_post_init",
        "fields",
        "f",
        "f",
        "_field_type",
        "_FIELD",
        "fields",
        "values",
        "repr",
        "_set_attribute",
        "cls",
        "_repr_fn",
        "f",
        "f",
        "repr",
        "field_list",
        "is_frozen",
        "_set_attribute",
        "cls",
        "_frozen_setattr",
        "_set_attribute",
        "cls",
        "_frozen_delattr",
        "hash",
        "eq",
        "frozen",
        "eq",
        "frozen",
        "_set_attribute",
        "cls",
        "eq",
        "hash",
        "generate_hash",
        "_set_attribute",
        "cls",
        "_hash_fn",
        "f",
        "f",
        "compare",
        "f",
        "hash",
        "f",
        "hash",
        "field_list",
        "eq",
        "_set_eq_fns",
        "cls",
        "f",
        "f",
        "compare",
        "field_list",
        "order",
        "_set_order_fns",
        "cls",
        "f",
        "f",
        "compare",
        "field_list",
        "getattr",
        "cls",
        "cls",
        "inspect",
        "signature",
        "cls",
        "replace",
        "cls",
        "_cls",
        "init",
        "repr",
        "eq",
        "order",
        "hash",
        "frozen",
        "cls",
        "_process_class",
        "cls",
        "repr",
        "eq",
        "order",
        "hash",
        "init",
        "frozen",
        "_cls",
        "wrap",
        "wrap",
        "_cls",
        "class_or_instance",
        "getattr",
        "class_or_instance",
        "_MARKER",
        "AttributeError",
        "f",
        "f",
        "fields",
        "values",
        "f",
        "_field_type",
        "_FIELD",
        "obj",
        "isinstance",
        "obj",
        "hasattr",
        "obj",
        "_MARKER",
        "obj",
        "dict_factory",
        "_isdataclass",
        "obj",
        "_asdict_inner",
        "obj",
        "dict_factory",
        "obj",
        "dict_factory",
        "_isdataclass",
        "obj",
        "f",
        "fields",
        "obj",
        "_asdict_inner",
        "getattr",
        "obj",
        "f",
        "name",
        "dict_factory",
        "result",
        "append",
        "f",
        "name",
        "value",
        "dict_factory",
        "result",
        "isinstance",
        "obj",
        "obj",
        "_asdict_inner",
        "v",
        "dict_factory",
        "v",
        "obj",
        "isinstance",
        "obj",
        "obj",
        "_asdict_inner",
        "k",
        "dict_factory",
        "_asdict_inner",
        "v",
        "dict_factory",
        "k",
        "v",
        "obj",
        "items",
        "deepcopy",
        "obj",
        "obj",
        "tuple_factory",
        "_isdataclass",
        "obj",
        "_astuple_inner",
        "obj",
        "tuple_factory",
        "obj",
        "tuple_factory",
        "_isdataclass",
        "obj",
        "f",
        "fields",
        "obj",
        "_astuple_inner",
        "getattr",
        "obj",
        "f",
        "name",
        "tuple_factory",
        "result",
        "append",
        "value",
        "tuple_factory",
        "result",
        "isinstance",
        "obj",
        "obj",
        "_astuple_inner",
        "v",
        "tuple_factory",
        "v",
        "obj",
        "isinstance",
        "obj",
        "obj",
        "_astuple_inner",
        "k",
        "tuple_factory",
        "_astuple_inner",
        "v",
        "tuple_factory",
        "k",
        "v",
        "obj",
        "items",
        "deepcopy",
        "obj",
        "cls_name",
        "fields",
        "bases",
        "copy",
        "collections",
        "OrderedDict",
        "name",
        "tp",
        "name",
        "tp",
        "_",
        "fields",
        "anns",
        "item",
        "fields",
        "len",
        "item",
        "item",
        "spec",
        "cls_name",
        "bases",
        "dataclass",
        "cls",
        "obj",
        "changes",
        "_isdataclass",
        "obj",
        "f",
        "getattr",
        "obj",
        "_MARKER",
        "values",
        "f",
        "init",
        "f",
        "name",
        "changes",
        "ValueError",
        "f",
        "name",
        "f",
        "name",
        "changes",
        "f",
        "name",
        "getattr",
        "obj",
        "f",
        "name",
        "obj",
        "__class__",
        "changes"
    ],
    "literals": [
        "'dataclass'",
        "'field'",
        "'FrozenInstanceError'",
        "'InitVar'",
        "'fields'",
        "'asdict'",
        "'astuple'",
        "'make_dataclass'",
        "'replace'",
        "'<factory>'",
        "'<missing>'",
        "'__dataclass_fields__'",
        "'__post_init__'",
        "'name'",
        "'type'",
        "'default'",
        "'default_factory'",
        "'repr'",
        "'hash'",
        "'init'",
        "'compare'",
        "'metadata'",
        "'_field_type'",
        "'Field('",
        "f'name={self.name!r},'",
        "f'type={self.type},'",
        "f'default={self.default},'",
        "f'default_factory={self.default_factory},'",
        "f'init={self.init},'",
        "f'repr={self.repr},'",
        "f'hash={self.hash},'",
        "f'compare={self.compare},'",
        "f'metadata={self.metadata}'",
        "')'",
        "'cannot specify both default and default_factory'",
        "'()'",
        "f'({\",\".join([f\"{obj_name}.{f.name}\" for f in fields])},)'",
        "\",\"",
        "f\"{obj_name}.{f.name}\"",
        "''",
        "'_return_type'",
        "'->_return_type'",
        "','",
        "'\\n'",
        "f' {b}'",
        "f'def {name}({args}){return_annotation}:\\n{body}'",
        "f'object.__setattr__({self_name},{name!r},{value})'",
        "f'{self_name}.{name}={value}'",
        "f'_dflt_{f.name}'",
        "f'{default_name}() '",
        "f'if {f.name} is _HAS_DEFAULT_FACTORY '",
        "f'else {f.name}'",
        "f'{default_name}()'",
        "''",
        "f'=_dflt_{f.name}'",
        "'=_HAS_DEFAULT_FACTORY'",
        "f'{f.name}:_type_{f.name}{default}'",
        "f'non-default argument {f.name!r} '",
        "'follows default argument'",
        "'_MISSING'",
        "'_HAS_DEFAULT_FACTORY'",
        "','",
        "f'{self_name}.{_POST_INIT_NAME}({params_str})'",
        "'pass'",
        "f'_type_{f.name}'",
        "'__init__'",
        "'__repr__'",
        "'self'",
        "'return self.__class__.__qualname__ + f\"('",
        "', '",
        "f\"{f.name}={{self.{f.name}!r}}\"",
        "')\"'",
        "f'cannot assign to field {name!r}'",
        "f'cannot delete field {name!r}'",
        "'self'",
        "'other'",
        "'if other.__class__ is self.__class__:'",
        "f' return {self_tuple}{op}{other_tuple}'",
        "'return NotImplemented'",
        "'self'",
        "'other'",
        "'__eq__'",
        "'=='",
        "'__ne__'",
        "'!='",
        "'self'",
        "'other'",
        "'__lt__'",
        "'<'",
        "'__le__'",
        "'<='",
        "'__gt__'",
        "'>'",
        "'__ge__'",
        "'>='",
        "'self'",
        "'__hash__'",
        "'self'",
        "f'return hash({self_tuple})'",
        "'typing'",
        "f'field {f.name} cannot have a '",
        "'default factory'",
        "f'mutable default {type(f.default)} for field '",
        "f'{f.name} is not allowed: use default_factory'",
        "'__annotations__'",
        "f'Cannot overwrite attribute {name} '",
        "f'in {cls.__name__}'",
        "'eq must be true if order is true'",
        "'__init__'",
        "'__dataclass_self__'",
        "'self'",
        "'self'",
        "'__repr__'",
        "'__setattr__'",
        "'__delattr__'",
        "'__hash__'",
        "\"can't get here\"",
        "'__hash__'",
        "'__doc__'",
        "' -> None'",
        "''",
        "'must be called with a dataclass type or instance'",
        "\"asdict() should be called on dataclass instances\"",
        "\"astuple() should be called on dataclass instances\"",
        "'__annotations__'",
        "\"replace() should be called on dataclass instances\"",
        "f'field {f.name} is declared with '",
        "'init=False, it cannot be specified with '",
        "'replace()'"
    ],
    "variables": [
        "__all__",
        "_HAS_DEFAULT_FACTORY",
        "_MISSING",
        "_EMPTY_METADATA",
        "_FIELD",
        "_FIELD_CLASSVAR",
        "_FIELD_INITVAR",
        "_MARKER",
        "_POST_INIT_NAME",
        "__slots__",
        "name",
        "default_factory",
        "init",
        "repr",
        "hash",
        "compare",
        "metadata",
        "_field_type",
        "locals",
        "return_annotation",
        "locals",
        "return_annotation",
        "args",
        "body",
        "txt",
        "default_name",
        "globals",
        "default_name",
        "value",
        "globals",
        "default_name",
        "value",
        "value",
        "globals",
        "default_name",
        "value",
        "seen_default",
        "seen_default",
        "globals",
        "body_lines",
        "line",
        "params_str",
        "body_lines",
        "locals",
        "self_tuple",
        "other_tuple",
        "self_tuple",
        "other_tuple",
        "self_tuple",
        "f",
        "f",
        "f",
        "_field_type",
        "f",
        "name",
        "f",
        "typing",
        "f",
        "_field_type",
        "f",
        "_field_type",
        "annotations",
        "fields",
        "base_fields",
        "fields",
        "fields",
        "is_frozen",
        "has_post_init",
        "field_list",
        "generate_hash",
        "generate_hash",
        "generate_hash",
        "cls",
        "__doc__",
        "fields",
        "result",
        "value",
        "result",
        "value",
        "anns",
        "name",
        "tp",
        "spec",
        "name",
        "cls",
        "changes"
    ],
    "comments": [
        "Helper functions.",
        "Raised when an attempt is made to modify a frozen class.",
        "A sentinel object for default values to signal that a",
        "default-factory will be used.",
        "This is given a nice repr() which will appear in the function",
        "signature of dataclasses' constructors.",
        "A sentinel object to detect if a parameter is supplied or not.",
        "Since most per-field metadata will be unused, create an empty",
        "read-only proxy that can be shared among all fields.",
        "Markers for the various kinds of fields and pseudo-fields.",
        "An actual field.",
        "Not a field, but a ClassVar.",
        "Not a field, but an InitVar.",
        "The name of an attribute on the class where we store the Field",
        "objects. Also used to check if a class is a Data Class.",
        "The name of the function, that if it exists, is called at the end of",
        "__init__.",
        "Instances of Field are only ever created from within this module,",
        "and only from the field() function, although Field instances are",
        "exposed externally as (conceptually) read-only objects.",
        "name and type are filled in after the fact, not in __init__. They're",
        "not known at the time this class is instantiated, but it's",
        "convenient if they're available later.",
        "When cls._MARKER is filled in with a list of Field objects, the name",
        "and type fields will have been populated.",
        "Private: not to be used by user code.",
        "This function is used instead of exposing Field creation directly,",
        "so that a type checker can be told (via overloads) that this is a",
        "function whose type depends on its parameters.",
        "Return a string representing each field of obj_name as a tuple",
        "member. So, if fields is ['x', 'y'] and obj_name is \"self\",",
        "return \"(self.x,self.y)\".",
        "Special case for the 0-tuple.",
        "Note the trailing comma, needed if this turns out to be a 1-tuple.",
        "Note that we mutate locals when exec() is called. Caller beware!",
        "If we're a frozen class, then assign to our fields in __init__",
        "via object.__setattr__.  Otherwise, just use a simple",
        "assignment.",
        "self_name is what \"self\" is called in this function: don't",
        "hard-code \"self\", since that might be a field name.",
        "Return the text of the line in the body of __init__ that will",
        "initialize this field.",
        "This field has a default factory.  If a parameter is",
        "given, use it.  If not, call the factory.",
        "This is a field that's not in the __init__ params, but",
        "has a default factory function.  It needs to be",
        "initialized here by calling the factory function,",
        "because there's no other way to initialize it.",
        "For a field initialized with a default=defaultvalue, the",
        "class dict just has the default value",
        "(cls.fieldname=defaultvalue). But that won't work for a",
        "default factory, the factory must be called in __init__",
        "and we must assign that to self.fieldname. We can't",
        "fall back to the class dict's value, both because it's",
        "not set, and because it might be different per-class",
        "(which, after all, is why we have a factory function!).",
        "No default factory.",
        "There's no default, just do an assignment.",
        "This field does not need initialization. Signify that to",
        "the caller by returning None.",
        "Only test this now, so that we can create variables for the",
        "default.  However, return None to signify that we're not going",
        "to actually do the assignment statement for InitVars.",
        "Now, actually generate the field assignment.",
        "Return the __init__ parameter string for this field.",
        "For example, the equivalent of 'x:int=3' (except instead of 'int',",
        "reference a variable set to int, and instead of '3', reference a",
        "variable set to 3).",
        "There's no default, and no default_factory, just",
        "output the variable name and type.",
        "There's a default, this will be the name that's used to look it up.",
        "There's a factory function. Set a marker.",
        "fields contains both real fields and InitVar pseudo-fields.",
        "Make sure we don't have fields without defaults following fields",
        "with defaults.  This actually would be caught when exec-ing the",
        "function source code, but catching it here gives a better error",
        "message, and future-proofs us in case we build up the function",
        "using ast.",
        "Only consider fields in the __init__ call.",
        "Do not initialize the pseudo-fields, only the real ones.",
        "line is None means that this field doesn't require",
        "initialization. Just skip it.",
        "Does this class have a post-init function?",
        "If no body lines, use 'pass'.",
        "Create a comparison function.  If the fields in the object are",
        "named 'x' and 'y', then self_tuple is the string",
        "'(self.x,self.y)' and other_tuple is the string",
        "'(other.x,other.y)'.",
        "Create and set the equality comparison methods on cls.",
        "Pre-compute self_tuple and other_tuple, then re-use them for",
        "each function.",
        "Create and set the ordering methods on cls.",
        "Pre-compute self_tuple and other_tuple, then re-use them for",
        "each function.",
        "Return a Field object, for this field name and type.  ClassVars",
        "and InitVars are also returned, but marked as such (see",
        "f._field_type).",
        "If the default value isn't derived from field, then it's",
        "only a normal default value.  Convert it to a Field().",
        "Assume it's a normal field until proven otherwise.",
        "Only at this point do we know the name and the type. Set them.",
        "If typing has not been imported, then it's impossible for",
        "any annotation to be a ClassVar. So, only look for ClassVar",
        "if typing has been imported.",
        "This test uses a typing internal class, but it's the best",
        "way to test if this is a ClassVar.",
        "This field is a ClassVar, so it's not a field.",
        "Check if this is an InitVar.",
        "InitVars are not fields, either.",
        "Validations for fields.  This is delayed until now, instead of",
        "in the Field() constructor, since only here do we know the field",
        "name, which allows better error reporting.",
        "Special restrictions for ClassVar and InitVar.",
        "Should I check for other field settings? default_factory",
        "seems the most serious to check for. Maybe add others.  For",
        "example, how about init=False (or really,",
        "init=<not-the-default-init-value>)? It makes no sense for",
        "ClassVar and InitVar to specify init=<anything>.",
        "For real fields, disallow mutable defaults for known types.",
        "Return a list of Field objects, in order, for this class (and no",
        "base classes).  Fields are found from __annotations__ (which is",
        "guaranteed to be ordered).  Default values are from class",
        "attributes, if a field has a default.  If the default value is",
        "a Field(), then it contains additional info beyond (and",
        "possibly including) the actual default value.  Pseudo-fields",
        "ClassVars and InitVars are included, despite the fact that",
        "they're not real fields.  That's deal with later.",
        "Raise TypeError if an attribute by this name already exists.",
        "Use an OrderedDict because:",
        "- Order matters!",
        "- Derived class fields overwrite base class fields, but the",
        "order is defined by the base class, which is found first.",
        "Find our base classes in reverse MRO order, and exclude",
        "ourselves.  In reversed order so that more derived classes",
        "override earlier field definitions in base classes.",
        "Only process classes that have been processed by our",
        "decorator.  That is, they have a _MARKER attribute.",
        "Now find fields in our class.  While doing so, validate some",
        "things, and set the default values (as class attributes)",
        "where we can.",
        "If the class attribute (which is the default value for",
        "this field) exists and is of type 'Field', replace it",
        "with the real default.  This is so that normal class",
        "introspection sees a real default value, not a Field.",
        "If there's no default, delete the class attribute.",
        "This happens if we specify field(repr=False), for",
        "example (that is, we specified a field object, but",
        "no default value).  Also if we're using a default",
        "factory.  The class attribute should not be set at",
        "all in the post-processed class.",
        "Remember all of the fields on our class (including bases).  This",
        "marks this class as being a dataclass.",
        "We also need to check if a parent class is frozen: frozen has to",
        "be inherited down.",
        "If we're generating ordering methods, we must be generating",
        "the eq methods.",
        "Does this class have a post-init function?",
        "Include InitVars and regular fields (so, not ClassVars).",
        "The name to use for the \"self\" param",
        "in __init__.  Use \"self\" if possible.",
        "Get the fields as a list, and include only real fields.  This is",
        "used in all of the following methods.",
        "Generate a hash function.",
        "Not hashable.",
        "Otherwise, use the base class definition of hash().  That is,",
        "don't set anything on this class.",
        "Create and __eq__ and __ne__ methods.",
        "Create and __lt__, __le__, __gt__, and __ge__ methods.",
        "Create and set the comparison functions.",
        "Create a class doc-string.",
        "_cls should never be specified by keyword, so start it with an",
        "underscore. The presense of _cls is used to detect if this",
        "decorator is being called with parameters or not.",
        "See if we're being called as @dataclass or @dataclass().",
        "We're called with parens.",
        "We're called as @dataclass without parens.",
        "Might it be worth caching this, per class?",
        "Exclude pseudo-fields.",
        "Copy namespace since we're going to mutate it.",
        "We're going to mutate 'changes', but that's okay because it's a new",
        "dict, even if called with 'replace(obj, **my_changes)'.",
        "It's an error to have init=False fields in 'changes'.",
        "If a field is not in 'changes', read its value from the provided obj.",
        "Error if this field is specified in changes.",
        "Create the new object, which calls __init__() and __post_init__",
        "(if defined), using all of the init fields we've added and/or",
        "left in 'changes'.",
        "If there are values supplied in changes that aren't fields, this",
        "will correctly raise a TypeError."
    ],
    "docstrings": [
        "\"\"\"Return an object to identify dataclass fields.\n\n    default is the default value of the field. default_factory is a\n    0-argument function called to initialize a field's value. If init\n    is True, the field will be a parameter to the class's __init__()\n    function. If repr is True, the field will be included in the\n    object's repr(). If hash is True, the field will be included in\n    the object's hash(). If compare is True, the field will be used in\n    comparison functions. metadata, if specified, must be a mapping\n    which is stored but not otherwise examined by dataclass.\n\n    It is an error to specify both default and default_factory.\n    \"\"\"",
        "\"\"\"Returns the same class as was passed in, with dunder methods\n    added based on the fields defined in the class.\n\n    Examines PEP 526 __annotations__ to determine fields.\n\n    If init is true, an __init__() method is added to the class. If\n    repr is true, a __repr__() method is added. If order is true, rich\n    comparison dunder methods are added. If hash is true, a __hash__()\n    method function is added. If frozen is true, fields may not be\n    assigned to after instance creation.\n    \"\"\"",
        "\"\"\"Return a tuple describing the fields of this dataclass.\n\n    Accepts a dataclass or an instance of one. Tuple elements are of\n    type Field.\n    \"\"\"",
        "\"\"\"Returns True if obj is an instance of a dataclass.\"\"\"",
        "\"\"\"Return the fields of a dataclass instance as a new dictionary mapping\n    field names to field values.\n\n    Example usage:\n\n      @dataclass\n      class C:\n          x: int\n          y: int\n\n      c = C(1, 2)\n      assert asdict(c) == {'x': 1, 'y': 2}\n\n    If given, 'dict_factory' will be used instead of built-in dict.\n    The function applies recursively to field values that are\n    dataclass instances. This will also look into built-in containers:\n    tuples, lists, and dicts.\n    \"\"\"",
        "\"\"\"Return the fields of a dataclass instance as a new tuple of field values.\n\n    Example usage::\n\n      @dataclass\n      class C:\n          x: int\n          y: int\n\n    c = C(1, 2)\n    assert asdtuple(c) == (1, 2)\n\n    If given, 'tuple_factory' will be used instead of built-in tuple.\n    The function applies recursively to field values that are\n    dataclass instances. This will also look into built-in containers:\n    tuples, lists, and dicts.\n    \"\"\"",
        "\"\"\"Return a new dynamically created dataclass.\n\n    The dataclass name will be 'cls_name'.  'fields' is an interable\n    of either (name, type) or (name, type, Field) objects. Field\n    objects are created by calling 'field(name, type [, Field])'.\n\n      C = make_class('C', [('a', int', ('b', int, Field(init=False))], bases=Base)\n\n    is equivalent to:\n\n      @dataclass\n      class C(Base):\n          a: int\n          b: int = field(init=False)\n\n    For the bases and namespace paremeters, see the builtin type() function.\n    \"\"\"",
        "\"\"\"Return a new object replacing specified fields with new values.\n\n    This is especially useful for frozen classes.  Example usage:\n\n      @dataclass(frozen=True)\n      class C:\n          x: int\n          y: int\n\n      c = C(1, 2)\n      c1 = replace(c, x=3)\n      assert c1.x == 3 and c1.y == 2\n      \"\"\""
    ],
    "functions": [
        "__repr__",
        "__repr__",
        "__getitem__",
        "__repr__",
        "field",
        "_tuple_str",
        "_create_fn",
        "_field_assign",
        "_field_init",
        "_init_param",
        "_init_fn",
        "_repr_fn",
        "_frozen_setattr",
        "_frozen_delattr",
        "_cmp_fn",
        "_set_eq_fns",
        "_set_order_fns",
        "_hash_fn",
        "_get_field",
        "_find_fields",
        "_set_attribute",
        "_process_class",
        "dataclass",
        "wrap",
        "fields",
        "_isdataclass",
        "asdict",
        "_asdict_inner",
        "astuple",
        "_astuple_inner",
        "make_dataclass",
        "replace"
    ],
    "classes": [
        "FrozenInstanceError",
        "_HAS_DEFAULT_FACTORY_CLASS",
        "_MISSING_FACTORY",
        "_InitVarMeta",
        "InitVar",
        "Field"
    ]
}