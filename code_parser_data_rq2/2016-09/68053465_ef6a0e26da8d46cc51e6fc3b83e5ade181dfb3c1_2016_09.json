{
    "identifiers": [
        "modules",
        "moduleId",
        "installedModules",
        "moduleId",
        "installedModules",
        "moduleId",
        "installedModules",
        "moduleId",
        "moduleId",
        "modules",
        "moduleId",
        "__webpack_require__",
        "__webpack_require__",
        "modules",
        "__webpack_require__",
        "installedModules",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "DraftEditor",
        "DraftEditorBlock",
        "EditorState",
        "CompositeDraftDecorator",
        "DraftEntity",
        "DraftEntityInstance",
        "BlockMapBuilder",
        "CharacterMetadata",
        "ContentBlock",
        "ContentState",
        "SelectionState",
        "AtomicBlockUtils",
        "KeyBindingUtil",
        "DraftModifier",
        "RichTextEditorUtil",
        "DefaultDraftBlockRenderMap",
        "DefaultDraftInlineStyle",
        "convertFromHTMLToContentBlocks",
        "convertFromRawToDraftState",
        "convertFromDraftStateToRaw",
        "generateRandomKey",
        "getDefaultKeyBinding",
        "getVisibleSelectionRect",
        "DraftPublic",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "_assign",
        "target",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "key",
        "source",
        "source",
        "key",
        "target",
        "key",
        "source",
        "key",
        "target",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "Immutable",
        "Immutable",
        "defaultRecord",
        "EditorState",
        "createEmpty",
        "decorator",
        "EditorState",
        "ContentState",
        "decorator",
        "EditorState",
        "createWithContent",
        "contentState",
        "decorator",
        "contentState",
        "EditorState",
        "contentState",
        "decorator",
        "SelectionState",
        "firstKey",
        "EditorState",
        "create",
        "config",
        "config",
        "config",
        "_extends",
        "config",
        "generateNewTreeMap",
        "currentContent",
        "decorator",
        "EditorBidiService",
        "currentContent",
        "EditorState",
        "EditorStateRecord",
        "recordConfig",
        "EditorState",
        "editorState",
        "put",
        "editorState",
        "state",
        "state",
        "put",
        "decorator",
        "put",
        "decorator",
        "put",
        "put",
        "editorState",
        "decorator",
        "existingDecorator",
        "state",
        "decorator",
        "existingDecorator",
        "newTreeMap",
        "regenerateTreeForNewDecorator",
        "newContent",
        "treeMap",
        "decorator",
        "existingDecorator",
        "newTreeMap",
        "generateNewTreeMap",
        "newContent",
        "decorator",
        "state",
        "decorator",
        "newTreeMap",
        "editorState",
        "newContent",
        "existingContent",
        "state",
        "regenerateTreeForNewBlocks",
        "editorState",
        "newContent",
        "decorator",
        "state",
        "put",
        "EditorState",
        "EditorState",
        "toJS",
        "EditorState",
        "getAllowUndo",
        "EditorState",
        "getCurrentContent",
        "EditorState",
        "getUndoStack",
        "EditorState",
        "getRedoStack",
        "EditorState",
        "getSelection",
        "EditorState",
        "getDecorator",
        "EditorState",
        "isInCompositionMode",
        "EditorState",
        "mustForceSelection",
        "EditorState",
        "getNativelyRenderedContent",
        "EditorState",
        "getLastChangeType",
        "EditorState",
        "getInlineStyleOverride",
        "EditorState",
        "setInlineStyleOverride",
        "editorState",
        "inlineStyleOverride",
        "EditorState",
        "editorState",
        "inlineStyleOverride",
        "EditorState",
        "getCurrentInlineStyle",
        "selection",
        "getInlineStyleForCollapsedSelection",
        "content",
        "selection",
        "getInlineStyleForNonCollapsedSelection",
        "content",
        "selection",
        "EditorState",
        "getBlockTree",
        "blockKey",
        "blockKey",
        "EditorState",
        "isSelectionAtStartOfContent",
        "firstKey",
        "EditorState",
        "isSelectionAtEndOfContent",
        "content",
        "blockMap",
        "last",
        "last",
        "end",
        "end",
        "EditorState",
        "getDirectionMap",
        "EditorState",
        "acceptSelection",
        "editorState",
        "selection",
        "updateSelection",
        "editorState",
        "selection",
        "EditorState",
        "forceSelection",
        "editorState",
        "selection",
        "selection",
        "selection",
        "selection",
        "updateSelection",
        "editorState",
        "selection",
        "EditorState",
        "moveSelectionToEnd",
        "editorState",
        "editorState",
        "content",
        "lastBlock",
        "lastBlock",
        "EditorState",
        "editorState",
        "SelectionState",
        "lastKey",
        "length",
        "lastKey",
        "length",
        "EditorState",
        "moveFocusToEnd",
        "editorState",
        "EditorState",
        "editorState",
        "EditorState",
        "afterSelectionMove",
        "afterSelectionMove",
        "EditorState",
        "push",
        "editorState",
        "contentState",
        "changeType",
        "editorState",
        "contentState",
        "editorState",
        "changeType",
        "EditorBidiService",
        "contentState",
        "editorState",
        "editorState",
        "EditorState",
        "editorState",
        "contentState",
        "directionMap",
        "changeType",
        "contentState",
        "forceSelection",
        "editorState",
        "editorState",
        "editorState",
        "selection",
        "currentContent",
        "mustBecomeBoundary",
        "editorState",
        "changeType",
        "undoStack",
        "undoStack",
        "currentContent",
        "newContent",
        "newContent",
        "selection",
        "changeType",
        "changeType",
        "changeType",
        "newContent",
        "newContent",
        "currentContent",
        "editorState",
        "changeType",
        "changeType",
        "inlineStyleOverride",
        "newContent",
        "directionMap",
        "undoStack",
        "changeType",
        "contentState",
        "forceSelection",
        "inlineStyleOverride",
        "EditorState",
        "editorState",
        "editorStateChanges",
        "EditorState",
        "undo",
        "editorState",
        "editorState",
        "editorState",
        "editorState",
        "undoStack",
        "newCurrentContent",
        "editorState",
        "editorState",
        "EditorBidiService",
        "newCurrentContent",
        "editorState",
        "EditorState",
        "editorState",
        "newCurrentContent",
        "directionMap",
        "undoStack",
        "editorState",
        "currentContent",
        "currentContent",
        "EditorState",
        "redo",
        "editorState",
        "editorState",
        "editorState",
        "editorState",
        "redoStack",
        "newCurrentContent",
        "editorState",
        "editorState",
        "EditorBidiService",
        "newCurrentContent",
        "editorState",
        "EditorState",
        "editorState",
        "newCurrentContent",
        "directionMap",
        "editorState",
        "currentContent",
        "redoStack",
        "newCurrentContent",
        "immutable",
        "_classCallCheck",
        "EditorState",
        "immutable",
        "EditorState",
        "getImmutable",
        "EditorState",
        "editorState",
        "selection",
        "forceSelection",
        "EditorState",
        "editorState",
        "selection",
        "forceSelection",
        "contentState",
        "decorator",
        "contentState",
        "block",
        "BlockTree",
        "block",
        "decorator",
        "editorState",
        "newBlockMap",
        "decorator",
        "editorState",
        "editorState",
        "prevTreeMap",
        "newBlockMap",
        "block",
        "key",
        "block",
        "prevBlockMap",
        "key",
        "block",
        "BlockTree",
        "block",
        "decorator",
        "blockMap",
        "previousTreeMap",
        "decorator",
        "existingDecorator",
        "previousTreeMap",
        "blockMap",
        "block",
        "decorator",
        "block",
        "existingDecorator",
        "block",
        "block",
        "BlockTree",
        "block",
        "decorator",
        "editorState",
        "changeType",
        "editorState",
        "changeType",
        "lastChangeType",
        "changeType",
        "changeType",
        "changeType",
        "content",
        "selection",
        "selection",
        "selection",
        "content",
        "startKey",
        "startOffset",
        "startBlock",
        "startOffset",
        "startBlock",
        "startBlock",
        "lookUpwardForInlineStyle",
        "content",
        "startKey",
        "content",
        "selection",
        "selection",
        "selection",
        "content",
        "startKey",
        "startOffset",
        "startBlock",
        "startBlock",
        "startOffset",
        "startOffset",
        "startBlock",
        "startOffset",
        "lookUpwardForInlineStyle",
        "content",
        "startKey",
        "content",
        "fromKey",
        "content",
        "fromKey",
        "previousBlock",
        "previousLength",
        "previousBlock",
        "previousLength",
        "previousBlock",
        "previousLength",
        "previousBlock",
        "content",
        "previousBlock",
        "OrderedSet",
        "EditorState",
        "exports",
        "Immutable",
        "exports",
        "__webpack_require__",
        "condition",
        "format",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "format",
        "condition",
        "format",
        "error",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "error",
        "format",
        "args",
        "argIndex",
        "error",
        "error",
        "error",
        "invariant",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "replaceText",
        "contentState",
        "rangeToReplace",
        "text",
        "inlineStyle",
        "entityKey",
        "removeEntitiesAtEdges",
        "contentState",
        "rangeToReplace",
        "removeRangeFromContentState",
        "withoutEntities",
        "rangeToReplace",
        "CharacterMetadata",
        "inlineStyle",
        "OrderedSet",
        "entityKey",
        "insertTextIntoContentState",
        "withoutText",
        "withoutText",
        "text",
        "character",
        "insertText",
        "contentState",
        "targetRange",
        "text",
        "inlineStyle",
        "entityKey",
        "targetRange",
        "invariant",
        "invariant",
        "DraftModifier",
        "contentState",
        "targetRange",
        "text",
        "inlineStyle",
        "entityKey",
        "moveText",
        "contentState",
        "removalRange",
        "targetRange",
        "getContentStateFragment",
        "contentState",
        "removalRange",
        "DraftModifier",
        "contentState",
        "removalRange",
        "DraftModifier",
        "afterRemoval",
        "targetRange",
        "movedFragment",
        "replaceWithFragment",
        "contentState",
        "targetRange",
        "fragment",
        "removeEntitiesAtEdges",
        "contentState",
        "targetRange",
        "removeRangeFromContentState",
        "withoutEntities",
        "targetRange",
        "insertFragmentIntoContentState",
        "withoutText",
        "withoutText",
        "fragment",
        "removeRange",
        "contentState",
        "rangeToRemove",
        "removalDirection",
        "rangeToRemove",
        "rangeToRemove",
        "rangeToRemove",
        "rangeToRemove",
        "rangeToRemove",
        "contentState",
        "key",
        "block",
        "startOffset",
        "block",
        "endOffset",
        "startEntity",
        "startEntity",
        "endEntity",
        "getCharacterRemovalRange",
        "block",
        "rangeToRemove",
        "removalDirection",
        "removeRangeFromContentState",
        "contentState",
        "adjustedRemovalRange",
        "removeEntitiesAtEdges",
        "contentState",
        "rangeToRemove",
        "removeRangeFromContentState",
        "withoutEntities",
        "rangeToRemove",
        "splitBlock",
        "contentState",
        "selectionState",
        "removeEntitiesAtEdges",
        "contentState",
        "selectionState",
        "removeRangeFromContentState",
        "withoutEntities",
        "selectionState",
        "splitBlockInContentState",
        "withoutText",
        "withoutText",
        "applyInlineStyle",
        "contentState",
        "selectionState",
        "inlineStyle",
        "ContentStateInlineStyle",
        "contentState",
        "selectionState",
        "inlineStyle",
        "removeInlineStyle",
        "contentState",
        "selectionState",
        "inlineStyle",
        "ContentStateInlineStyle",
        "contentState",
        "selectionState",
        "inlineStyle",
        "setBlockType",
        "contentState",
        "selectionState",
        "blockType",
        "modifyBlockForContentState",
        "contentState",
        "selectionState",
        "block",
        "block",
        "blockType",
        "setBlockData",
        "contentState",
        "selectionState",
        "blockData",
        "modifyBlockForContentState",
        "contentState",
        "selectionState",
        "block",
        "block",
        "blockData",
        "mergeBlockData",
        "contentState",
        "selectionState",
        "blockData",
        "modifyBlockForContentState",
        "contentState",
        "selectionState",
        "block",
        "block",
        "block",
        "blockData",
        "applyEntity",
        "contentState",
        "selectionState",
        "entityKey",
        "removeEntitiesAtEdges",
        "contentState",
        "selectionState",
        "applyEntityToContentState",
        "withoutEntities",
        "selectionState",
        "entityKey",
        "DraftModifier",
        "exports",
        "nullthrows",
        "x",
        "x",
        "x",
        "nullthrows",
        "exports",
        "__webpack_require__",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "call",
        "ReferenceError",
        "call",
        "call",
        "call",
        "call",
        "subClass",
        "superClass",
        "superClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "__webpack_require__",
        "_require",
        "_require",
        "_require",
        "OrderedSet",
        "EMPTY_SET",
        "defaultRecord",
        "_CharacterMetadataRec",
        "_inherits",
        "CharacterMetadata",
        "_CharacterMetadataRec",
        "_classCallCheck",
        "CharacterMetadata",
        "_possibleConstructorReturn",
        "_CharacterMetadataRec",
        "arguments",
        "CharacterMetadata",
        "getStyle",
        "CharacterMetadata",
        "getEntity",
        "CharacterMetadata",
        "hasStyle",
        "style",
        "style",
        "CharacterMetadata",
        "applyStyle",
        "record",
        "style",
        "record",
        "record",
        "style",
        "CharacterMetadata",
        "withStyle",
        "CharacterMetadata",
        "removeStyle",
        "record",
        "style",
        "record",
        "record",
        "style",
        "CharacterMetadata",
        "withoutStyle",
        "CharacterMetadata",
        "applyEntity",
        "record",
        "entityKey",
        "record",
        "entityKey",
        "record",
        "record",
        "entityKey",
        "CharacterMetadata",
        "withEntity",
        "CharacterMetadata",
        "create",
        "config",
        "config",
        "EMPTY",
        "EMPTY_SET",
        "config",
        "pool",
        "configMap",
        "existing",
        "existing",
        "CharacterMetadata",
        "configMap",
        "pool",
        "pool",
        "configMap",
        "newCharacter",
        "newCharacter",
        "CharacterMetadata",
        "CharacterMetadataRecord",
        "CharacterMetadata",
        "defaultRecord",
        "EMPTY",
        "CharacterMetadata",
        "EMPTY",
        "CharacterMetadata",
        "exports",
        "key",
        "seenKeys",
        "key",
        "isNaN",
        "key",
        "key",
        "MULTIPLIER",
        "seenKeys",
        "key",
        "key",
        "generateRandomKey",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "name",
        "version",
        "query",
        "normalizer",
        "name",
        "query",
        "query",
        "name",
        "query",
        "name",
        "version",
        "normalizer",
        "normalizer",
        "VersionRange",
        "version",
        "version",
        "UserAgentData",
        "version",
        "version",
        "isBrowser",
        "query",
        "compare",
        "UserAgentData",
        "UserAgentData",
        "query",
        "isBrowserArchitecture",
        "query",
        "compare",
        "UserAgentData",
        "query",
        "isDevice",
        "query",
        "compare",
        "UserAgentData",
        "query",
        "isEngine",
        "query",
        "compare",
        "UserAgentData",
        "UserAgentData",
        "query",
        "isPlatform",
        "query",
        "compare",
        "UserAgentData",
        "UserAgentData",
        "query",
        "normalizePlatformVersion",
        "isPlatformArchitecture",
        "query",
        "compare",
        "UserAgentData",
        "query",
        "mapObject",
        "UserAgent",
        "memoizeStringOnly",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "_assign",
        "target",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "key",
        "source",
        "source",
        "key",
        "target",
        "key",
        "source",
        "key",
        "target",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "create",
        "mutability",
        "data",
        "DraftEntity",
        "DraftEntityInstance",
        "mutability",
        "data",
        "add",
        "instance",
        "instanceKey",
        "instances",
        "instances",
        "key",
        "instance",
        "key",
        "get",
        "key",
        "instances",
        "key",
        "instance",
        "invariant",
        "invariant",
        "instance",
        "mergeData",
        "key",
        "toMerge",
        "DraftEntity",
        "key",
        "_extends",
        "instance",
        "toMerge",
        "instance",
        "newData",
        "instances",
        "instances",
        "key",
        "newInstance",
        "newInstance",
        "replaceData",
        "key",
        "newData",
        "DraftEntity",
        "key",
        "instance",
        "newData",
        "instances",
        "instances",
        "key",
        "newInstance",
        "newInstance",
        "DraftEntity",
        "exports",
        "__webpack_require__",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "call",
        "ReferenceError",
        "call",
        "call",
        "call",
        "call",
        "subClass",
        "superClass",
        "superClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "Immutable",
        "Immutable",
        "Immutable",
        "OrderedSet",
        "defaultRecord",
        "_ContentBlockRecord",
        "_inherits",
        "ContentBlock",
        "_ContentBlockRecord",
        "_classCallCheck",
        "ContentBlock",
        "_possibleConstructorReturn",
        "_ContentBlockRecord",
        "arguments",
        "ContentBlock",
        "getKey",
        "ContentBlock",
        "getType",
        "ContentBlock",
        "getText",
        "ContentBlock",
        "getCharacterList",
        "ContentBlock",
        "getLength",
        "ContentBlock",
        "getDepth",
        "ContentBlock",
        "getData",
        "ContentBlock",
        "getInlineStyleAt",
        "offset",
        "offset",
        "character",
        "character",
        "EMPTY_SET",
        "ContentBlock",
        "getEntityAt",
        "offset",
        "offset",
        "character",
        "character",
        "ContentBlock",
        "findStyleRanges",
        "filterFn",
        "callback",
        "findRangesImmutable",
        "haveEqualStyle",
        "filterFn",
        "callback",
        "ContentBlock",
        "findEntityRanges",
        "filterFn",
        "callback",
        "findRangesImmutable",
        "haveEqualEntity",
        "filterFn",
        "callback",
        "ContentBlock",
        "ContentBlockRecord",
        "charA",
        "charB",
        "charA",
        "charB",
        "charA",
        "charB",
        "charA",
        "charB",
        "ContentBlock",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "codeUnit",
        "SURROGATE_HIGH_START",
        "codeUnit",
        "codeUnit",
        "SURROGATE_LOW_END",
        "index",
        "index",
        "index",
        "invariant",
        "index",
        "invariant",
        "index",
        "index",
        "index",
        "SURROGATE_HIGH_START",
        "first",
        "first",
        "SURROGATE_HIGH_END",
        "SURROGATE_LOW_START",
        "second",
        "second",
        "SURROGATE_LOW_END",
        "SURROGATE_UNITS_REGEX",
        "pos",
        "isCodeUnitInSurrogateRange",
        "pos",
        "hasSurrogateUnit",
        "pos",
        "pos",
        "getUTF16Length",
        "pos",
        "len",
        "len",
        "start",
        "length",
        "start",
        "start",
        "length",
        "length",
        "Infinity",
        "length",
        "hasSurrogateUnit",
        "start",
        "length",
        "size",
        "start",
        "size",
        "length",
        "start",
        "start",
        "posA",
        "size",
        "start",
        "posA",
        "getUTF16Length",
        "posA",
        "posA",
        "size",
        "start",
        "posA",
        "size",
        "start",
        "posA",
        "start",
        "posA",
        "getUTF16Length",
        "posA",
        "posA",
        "posA",
        "length",
        "size",
        "posB",
        "posA",
        "length",
        "posB",
        "size",
        "length",
        "posB",
        "getUTF16Length",
        "posB",
        "posA",
        "posB",
        "start",
        "end",
        "start",
        "start",
        "end",
        "end",
        "Infinity",
        "end",
        "start",
        "start",
        "end",
        "end",
        "end",
        "start",
        "start",
        "start",
        "end",
        "start",
        "end",
        "substr",
        "start",
        "length",
        "pos",
        "pos",
        "getUTF16Length",
        "pos",
        "codePoints",
        "pos",
        "codePoints",
        "getCodePoints",
        "getUTF16Length",
        "hasSurrogateUnit",
        "isCodeUnitInSurrogateRange",
        "isSurrogatePair",
        "strlen",
        "substring",
        "substr",
        "UnicodeUtils",
        "exports",
        "val",
        "val",
        "val",
        "val",
        "test1",
        "test1",
        "i",
        "i",
        "test2",
        "i",
        "i",
        "test2",
        "n",
        "test2",
        "n",
        "order2",
        "letter",
        "test3",
        "letter",
        "letter",
        "test3",
        "e",
        "shouldUseNative",
        "target",
        "source",
        "toObject",
        "target",
        "s",
        "arguments",
        "s",
        "arguments",
        "s",
        "key",
        "hasOwnProperty",
        "key",
        "to",
        "key",
        "key",
        "symbols",
        "i",
        "symbols",
        "i",
        "propIsEnumerable",
        "symbols",
        "i",
        "to",
        "symbols",
        "i",
        "symbols",
        "i",
        "to",
        "exports",
        "React",
        "exports",
        "__webpack_require__",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "call",
        "ReferenceError",
        "call",
        "call",
        "call",
        "call",
        "subClass",
        "superClass",
        "superClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "__webpack_require__",
        "Immutable",
        "defaultRecord",
        "_SelectionStateRecord",
        "_inherits",
        "SelectionState",
        "_SelectionStateRecord",
        "_classCallCheck",
        "SelectionState",
        "_possibleConstructorReturn",
        "_SelectionStateRecord",
        "arguments",
        "SelectionState",
        "serialize",
        "SelectionState",
        "getAnchorKey",
        "SelectionState",
        "getAnchorOffset",
        "SelectionState",
        "getFocusKey",
        "SelectionState",
        "getFocusOffset",
        "SelectionState",
        "getIsBackward",
        "SelectionState",
        "getHasFocus",
        "SelectionState",
        "hasEdgeWithin",
        "blockKey",
        "start",
        "end",
        "anchorKey",
        "focusKey",
        "anchorKey",
        "blockKey",
        "start",
        "selectionEnd",
        "selectionStart",
        "end",
        "blockKey",
        "anchorKey",
        "blockKey",
        "focusKey",
        "blockKey",
        "anchorKey",
        "start",
        "offsetToCheck",
        "end",
        "offsetToCheck",
        "SelectionState",
        "isCollapsed",
        "SelectionState",
        "getStartKey",
        "SelectionState",
        "getStartOffset",
        "SelectionState",
        "getEndKey",
        "SelectionState",
        "getEndOffset",
        "SelectionState",
        "createEmpty",
        "key",
        "SelectionState",
        "key",
        "key",
        "SelectionState",
        "SelectionStateRecord",
        "SelectionState",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "createFromArray",
        "blocks",
        "OrderedMap",
        "blocks",
        "block",
        "block",
        "block",
        "BlockMapBuilder",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "strategy",
        "direction",
        "editorState",
        "editorState",
        "selection",
        "direction",
        "editorState",
        "content",
        "editorState",
        "content",
        "target",
        "strategy",
        "editorState",
        "target",
        "selection",
        "content",
        "DraftModifier",
        "content",
        "target",
        "direction",
        "removeTextWithStrategy",
        "exports",
        "classNames",
        "classNames",
        "classNames",
        "className",
        "classNames",
        "className",
        "replace",
        "arguments",
        "replace",
        "cx",
        "exports",
        "ReactDOM",
        "exports",
        "encode",
        "blockKey",
        "decoratorKey",
        "leafKey",
        "blockKey",
        "KEY_DELIMITER",
        "decoratorKey",
        "KEY_DELIMITER",
        "leafKey",
        "decode",
        "offsetKey",
        "offsetKey",
        "KEY_DELIMITER",
        "_offsetKey$split",
        "_offsetKey$split",
        "_offsetKey$split",
        "blockKey",
        "parseInt",
        "decoratorKey",
        "parseInt",
        "leafKey",
        "DraftOffsetKey",
        "exports",
        "haystack",
        "areEqualFn",
        "filterFn",
        "foundFn",
        "haystack",
        "haystack",
        "value",
        "nextValue",
        "nextIndex",
        "areEqualFn",
        "value",
        "nextValue",
        "filterFn",
        "value",
        "foundFn",
        "cursor",
        "nextIndex",
        "cursor",
        "nextIndex",
        "nextValue",
        "filterFn",
        "haystack",
        "foundFn",
        "cursor",
        "haystack",
        "findRangesImmutable",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "contentState",
        "selectionState",
        "selectionState",
        "selectionState",
        "selectionState",
        "selectionState",
        "removeEntitiesAtEdges",
        "contentState",
        "selectionState",
        "contentWithoutEdgeEntities",
        "blockMap",
        "blockKeys",
        "startKey",
        "blockKeys",
        "endKey",
        "blockMap",
        "startIndex",
        "endIndex",
        "block",
        "blockKey",
        "generateRandomKey",
        "block",
        "block",
        "startKey",
        "endKey",
        "block",
        "newKey",
        "text",
        "startOffset",
        "endOffset",
        "chars",
        "startOffset",
        "endOffset",
        "blockKey",
        "startKey",
        "block",
        "newKey",
        "text",
        "startOffset",
        "chars",
        "startOffset",
        "blockKey",
        "endKey",
        "block",
        "newKey",
        "text",
        "endOffset",
        "chars",
        "endOffset",
        "block",
        "newKey",
        "getContentStateFragment",
        "exports",
        "value",
        "value",
        "value",
        "isEventHandled",
        "exports",
        "__webpack_require__",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "call",
        "ReferenceError",
        "call",
        "call",
        "call",
        "call",
        "subClass",
        "superClass",
        "superClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "Immutable",
        "Immutable",
        "defaultRecord",
        "_ContentStateRecord",
        "_inherits",
        "ContentState",
        "_ContentStateRecord",
        "_classCallCheck",
        "ContentState",
        "_possibleConstructorReturn",
        "_ContentStateRecord",
        "arguments",
        "ContentState",
        "getBlockMap",
        "ContentState",
        "getSelectionBefore",
        "ContentState",
        "getSelectionAfter",
        "ContentState",
        "getBlockForKey",
        "key",
        "key",
        "block",
        "ContentState",
        "getKeyBefore",
        "key",
        "v",
        "v",
        "key",
        "ContentState",
        "getKeyAfter",
        "key",
        "v",
        "v",
        "key",
        "ContentState",
        "getBlockAfter",
        "key",
        "_",
        "k",
        "k",
        "key",
        "ContentState",
        "getBlockBefore",
        "key",
        "_",
        "k",
        "k",
        "key",
        "ContentState",
        "getBlocksAsArray",
        "ContentState",
        "getFirstBlock",
        "ContentState",
        "getLastBlock",
        "ContentState",
        "getPlainText",
        "delimiter",
        "block",
        "block",
        "block",
        "delimiter",
        "ContentState",
        "hasText",
        "blockMap",
        "blockMap",
        "ContentState",
        "createFromBlockArray",
        "blocks",
        "BlockMapBuilder",
        "blocks",
        "SelectionState",
        "blockMap",
        "ContentState",
        "blockMap",
        "selectionState",
        "selectionState",
        "ContentState",
        "createFromText",
        "text",
        "arguments",
        "arguments",
        "arguments",
        "text",
        "delimiter",
        "strings",
        "block",
        "block",
        "sanitizeDraftText",
        "block",
        "ContentBlock",
        "generateRandomKey",
        "block",
        "Repeat",
        "CharacterMetadata",
        "block",
        "ContentState",
        "blocks",
        "ContentState",
        "ContentStateRecord",
        "ContentState",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "_require",
        "__webpack_require__",
        "__webpack_require__",
        "React",
        "cx",
        "React",
        "cx",
        "React",
        "cx",
        "UL_WRAP",
        "OL_WRAP",
        "PRE_WRAP",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "UserAgent",
        "isCtrlKeyCommand",
        "e",
        "e",
        "e",
        "isOptionKeyCommand",
        "e",
        "isOSX",
        "e",
        "hasCommandModifier",
        "e",
        "isOSX",
        "e",
        "e",
        "KeyBindingUtil",
        "e",
        "KeyBindingUtil",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "node",
        "searchNode",
        "searchNode",
        "getSelectionOffsetKeyForNode",
        "searchNode",
        "key",
        "key",
        "searchNode",
        "searchNode",
        "findAncestorOffsetKey",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "contentState",
        "targetSelection",
        "targetSelection",
        "targetSelection",
        "targetSelection",
        "offset",
        "entityKey",
        "contentState",
        "key",
        "offset",
        "filterKey",
        "entityKey",
        "targetSelection",
        "targetSelection",
        "contentState",
        "startKey",
        "entityKey",
        "startOffset",
        "startBlock",
        "startBlock",
        "startOffset",
        "filterKey",
        "entityKey",
        "entityKey",
        "entityKey",
        "DraftEntity",
        "entityKey",
        "entity",
        "entityKey",
        "getEntityKeyForSelection",
        "exports",
        "editorState",
        "maxDistance",
        "editorState",
        "editorState",
        "selection",
        "selection",
        "maxDistance",
        "offset",
        "content",
        "key",
        "keyBefore",
        "focusKey",
        "key",
        "focusKey",
        "keyBefore",
        "content",
        "keyBefore",
        "focusOffset",
        "blockBefore",
        "focusOffset",
        "offset",
        "maxDistance",
        "selection",
        "focusKey",
        "focusOffset",
        "moveSelectionBackward",
        "exports",
        "input",
        "input",
        "REGEX_BLOCK_DELIMITER",
        "sanitizeDraftText",
        "exports",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "element",
        "name",
        "Style",
        "element",
        "name",
        "overflow",
        "overflow",
        "getStyleProperty",
        "getScrollParent",
        "node",
        "node",
        "node",
        "node",
        "_isNodeScrollable",
        "node",
        "_isNodeScrollable",
        "node",
        "_isNodeScrollable",
        "node",
        "node",
        "node",
        "node",
        "Style",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "dir",
        "dir",
        "LTR",
        "dir",
        "RTL",
        "dir",
        "isStrong",
        "dir",
        "invariant",
        "invariant",
        "dir",
        "LTR",
        "dir",
        "otherDir",
        "isStrong",
        "dir",
        "invariant",
        "invariant",
        "isStrong",
        "otherDir",
        "invariant",
        "invariant",
        "dir",
        "otherDir",
        "getHTMLDir",
        "dir",
        "dir",
        "globalDir",
        "dir",
        "setGlobalDir",
        "LTR",
        "globalDir",
        "globalDir",
        "invariant",
        "invariant",
        "globalDir",
        "NEUTRAL",
        "LTR",
        "RTL",
        "isStrong",
        "getHTMLDir",
        "getHTMLDirIfDifferent",
        "setGlobalDir",
        "initGlobalDir",
        "getGlobalDir",
        "UnicodeBidiDirection",
        "exports",
        "arg",
        "arg",
        "emptyFunction",
        "emptyFunction",
        "makeEmptyFunction",
        "emptyFunction",
        "makeEmptyFunction",
        "emptyFunction",
        "makeEmptyFunction",
        "emptyFunction",
        "makeEmptyFunction",
        "emptyFunction",
        "emptyFunction",
        "arg",
        "arg",
        "emptyFunction",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "scrollable",
        "getDocumentScrollElement",
        "scrollable",
        "scrollable",
        "documentScrollElement",
        "getUnboundedScrollPosition",
        "scrollable",
        "scrollable",
        "documentScrollElement",
        "scrollable",
        "scrollable",
        "viewport",
        "scrollable",
        "viewport",
        "scrollPosition",
        "scrollPosition",
        "xMax",
        "scrollPosition",
        "scrollPosition",
        "yMax",
        "scrollPosition",
        "getScrollPosition",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "Immutable",
        "Immutable",
        "emptyFunction",
        "defaultLeafRange",
        "defaultDecoratorRange",
        "generate",
        "block",
        "decorator",
        "block",
        "textLength",
        "DecoratorRange",
        "LeafRange",
        "decorator",
        "decorator",
        "block",
        "Repeat",
        "textLength",
        "block",
        "findRangesImmutable",
        "decorations",
        "areEqual",
        "returnTrue",
        "start",
        "end",
        "leafSets",
        "DecoratorRange",
        "start",
        "end",
        "decorations",
        "start",
        "generateLeaves",
        "chars",
        "start",
        "end",
        "start",
        "leafSets",
        "getFingerprint",
        "tree",
        "tree",
        "leafSet",
        "leafSet",
        "decoratorKey",
        "decoratorKey",
        "leafSet",
        "leafSet",
        "fingerprintString",
        "leafSet",
        "FINGERPRINT_DELIMITER",
        "characters",
        "offset",
        "characters",
        "c",
        "c",
        "findRangesImmutable",
        "inlineStyles",
        "areEqual",
        "returnTrue",
        "start",
        "end",
        "leaves",
        "LeafRange",
        "start",
        "offset",
        "end",
        "offset",
        "leaves",
        "a",
        "b",
        "a",
        "b",
        "BlockTree",
        "exports",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "_assign",
        "target",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "key",
        "source",
        "source",
        "key",
        "target",
        "key",
        "source",
        "key",
        "target",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "call",
        "ReferenceError",
        "call",
        "call",
        "call",
        "call",
        "subClass",
        "superClass",
        "superClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "_React$Component",
        "_inherits",
        "DraftEditorBlock",
        "_React$Component",
        "_classCallCheck",
        "DraftEditorBlock",
        "_possibleConstructorReturn",
        "_React$Component",
        "arguments",
        "DraftEditorBlock",
        "shouldComponentUpdate",
        "nextProps",
        "nextProps",
        "nextProps",
        "nextProps",
        "isBlockOnSelectionEdge",
        "nextProps",
        "nextProps",
        "nextProps",
        "DraftEditorBlock",
        "componentDidMount",
        "selection",
        "selection",
        "endKey",
        "ReactDOM",
        "Style",
        "blockNode",
        "getScrollPosition",
        "scrollParent",
        "scrollParent",
        "getElementPosition",
        "blockNode",
        "nodePosition",
        "nodePosition",
        "getViewportDimensions",
        "scrollDelta",
        "nodeBottom",
        "viewportHeight",
        "scrollDelta",
        "scrollPosition",
        "scrollPosition",
        "scrollDelta",
        "SCROLL_BUFFER",
        "blockNode",
        "blockNode",
        "scrollParent",
        "scrollPosition",
        "scrollDelta",
        "blockBottom",
        "scrollBottom",
        "scrollDelta",
        "Scroll",
        "scrollParent",
        "Scroll",
        "scrollParent",
        "scrollDelta",
        "SCROLL_BUFFER",
        "DraftEditorBlock",
        "_renderChildren",
        "block",
        "block",
        "isBlockOnSelectionEdge",
        "blockKey",
        "leafSet",
        "ii",
        "leafSet",
        "leavesForLeafSet",
        "leavesForLeafSet",
        "leaf",
        "jj",
        "DraftOffsetKey",
        "blockKey",
        "ii",
        "jj",
        "leaf",
        "leaf",
        "React",
        "DraftEditorLeaf",
        "offsetKey",
        "offsetKey",
        "blockKey",
        "start",
        "hasSelection",
        "_this2",
        "_this2",
        "text",
        "start",
        "end",
        "block",
        "start",
        "_this2",
        "_this2",
        "ii",
        "lastLeafSet",
        "jj",
        "lastLeaf",
        "leafSet",
        "decoratorKey",
        "leaves",
        "_this2",
        "leaves",
        "nullthrows",
        "_this2",
        "decorator",
        "decoratorKey",
        "DecoratorComponent",
        "leaves",
        "decorator",
        "decoratorKey",
        "DraftOffsetKey",
        "blockKey",
        "ii",
        "text",
        "leavesForLeafSet",
        "leavesForLeafSet",
        "UnicodeBidiDirection",
        "UnicodeBidi",
        "decoratedText",
        "_this2",
        "React",
        "DecoratorComponent",
        "_extends",
        "decoratorProps",
        "decoratedText",
        "dir",
        "decoratorOffsetKey",
        "block",
        "leafSet",
        "decoratorOffsetKey",
        "leaves",
        "DraftEditorBlock",
        "render",
        "_props",
        "_props",
        "cx",
        "direction",
        "direction",
        "React",
        "offsetKey",
        "className",
        "DraftEditorBlock",
        "React",
        "selection",
        "key",
        "selection",
        "key",
        "selection",
        "key",
        "DraftEditorBlock",
        "exports",
        "__webpack_require__",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "call",
        "ReferenceError",
        "call",
        "call",
        "call",
        "call",
        "subClass",
        "superClass",
        "superClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "__webpack_require__",
        "Immutable",
        "_DraftEntityInstanceR",
        "_inherits",
        "DraftEntityInstance",
        "_DraftEntityInstanceR",
        "_classCallCheck",
        "DraftEntityInstance",
        "_possibleConstructorReturn",
        "_DraftEntityInstanceR",
        "arguments",
        "DraftEntityInstance",
        "getType",
        "DraftEntityInstance",
        "getMutability",
        "DraftEntityInstance",
        "getData",
        "DraftEntityInstance",
        "DraftEntityInstanceRecord",
        "DraftEntityInstance",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "TokenizeUtil",
        "punctuation",
        "WHITESPACE_AND_PUNCTUATION",
        "CHAMELEON_CHARS",
        "WHITESPACE_AND_PUNCTUATION",
        "WHITESPACE_AND_PUNCTUATION",
        "DELETE_STRING",
        "WHITESPACE_AND_PUNCTUATION",
        "CHAMELEON_CHARS",
        "WHITESPACE_AND_PUNCTUATION",
        "WHITESPACE_AND_PUNCTUATION",
        "BACKSPACE_STRING",
        "text",
        "isBackward",
        "isBackward",
        "BACKSPACE_REGEX",
        "text",
        "DELETE_REGEX",
        "text",
        "matches",
        "matches",
        "text",
        "getBackward",
        "text",
        "getRemovableWord",
        "text",
        "getForward",
        "text",
        "getRemovableWord",
        "text",
        "DraftRemovableWord",
        "exports",
        "stringify",
        "key",
        "key",
        "unstringify",
        "key",
        "key",
        "DraftStringKey",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "Immutable",
        "NBSP",
        "inEntity",
        "inEntity",
        "entities",
        "inEntity",
        "SPACE",
        "OrderedSet",
        "entities",
        "OrderedSet",
        "block",
        "depth",
        "OrderedSet",
        "block",
        "MAX_DEPTH",
        "depth",
        "tag",
        "lastList",
        "tag",
        "lastList",
        "blockRenderMap",
        "blockRenderMap",
        "blockRenderMap",
        "config",
        "config",
        "tag",
        "tag",
        "tag",
        "unstyledElement",
        "tag",
        "lastList",
        "multiMatchExtractor",
        "ii",
        "multiMatchExtractor",
        "ii",
        "multiMatchExtractor",
        "ii",
        "tag",
        "lastList",
        "matchType",
        "matchType",
        "tag",
        "lastList",
        "blockRenderMap",
        "blockRenderMap",
        "config",
        "config",
        "tag",
        "config",
        "tag",
        "matchedTypes",
        "matchedTypes",
        "getMultiMatchedType",
        "tag",
        "lastList",
        "getListBlockType",
        "tag",
        "node",
        "currentStyle",
        "inlineTags",
        "tag",
        "styleToCheck",
        "currentStyle",
        "currentStyle",
        "styleToCheck",
        "node",
        "HTMLElement",
        "currentStyle",
        "currentStyle",
        "style",
        "htmlElement",
        "htmlElement",
        "htmlElement",
        "boldValues",
        "fontWeight",
        "style",
        "notBoldValues",
        "fontWeight",
        "style",
        "fontStyle",
        "style",
        "fontStyle",
        "style",
        "textDecoration",
        "style",
        "textDecoration",
        "style",
        "textDecoration",
        "style",
        "style",
        "currentStyle",
        "A",
        "B",
        "A",
        "B",
        "lastInA",
        "firstInB",
        "A",
        "B",
        "A",
        "A",
        "A",
        "A",
        "A",
        "lastInA",
        "B",
        "SPACE",
        "B",
        "A",
        "firstInB",
        "SPACE",
        "firstInB",
        "B",
        "B",
        "B",
        "B",
        "A",
        "B",
        "A",
        "B",
        "A",
        "B",
        "A",
        "B",
        "html",
        "blockTags",
        "blockTags",
        "tag",
        "html",
        "tag",
        "link",
        "link",
        "HTMLAnchorElement",
        "invariant",
        "invariant",
        "link",
        "protocol",
        "protocol",
        "protocol",
        "node",
        "inlineStyle",
        "lastList",
        "inBlock",
        "blockTags",
        "depth",
        "blockRenderMap",
        "inEntity",
        "node",
        "nodeName",
        "node",
        "text",
        "inBlock",
        "getWhitespaceChunk",
        "inEntity",
        "inBlock",
        "text",
        "text",
        "REGEX_LF",
        "SPACE",
        "lastBlock",
        "nodeName",
        "text",
        "text",
        "inlineStyle",
        "text",
        "inEntity",
        "lastBlock",
        "nodeName",
        "nodeName",
        "lastLastBlock",
        "inBlock",
        "getBlockTypeForTag",
        "inBlock",
        "lastList",
        "blockRenderMap",
        "getBlockDividerChunk",
        "depth",
        "getSoftNewlineChunk",
        "getEmptyChunk",
        "inlineStyle",
        "processInlineTag",
        "nodeName",
        "node",
        "inlineStyle",
        "nodeName",
        "nodeName",
        "lastList",
        "depth",
        "lastList",
        "nodeName",
        "inBlock",
        "blockTags",
        "nodeName",
        "chunk",
        "getBlockDividerChunk",
        "getBlockTypeForTag",
        "nodeName",
        "lastList",
        "blockRenderMap",
        "depth",
        "inBlock",
        "nodeName",
        "newBlock",
        "lastList",
        "inBlock",
        "nodeName",
        "chunk",
        "getBlockDividerChunk",
        "getBlockTypeForTag",
        "nodeName",
        "lastList",
        "blockRenderMap",
        "depth",
        "inBlock",
        "nodeName",
        "newBlock",
        "nextBlockType",
        "lastList",
        "node",
        "child",
        "nodeName",
        "child",
        "child",
        "child",
        "HTMLAnchorElement",
        "child",
        "hasValidLinkText",
        "child",
        "anchorAttr",
        "attr",
        "anchor",
        "attr",
        "anchorAttribute",
        "entityConfig",
        "attr",
        "anchorAttribute",
        "entityConfig",
        "URI",
        "anchor",
        "entityId",
        "DraftEntity",
        "entityConfig",
        "entityId",
        "newChunk",
        "genFragment",
        "child",
        "inlineStyle",
        "lastList",
        "inBlock",
        "blockTags",
        "depth",
        "blockRenderMap",
        "entityId",
        "inEntity",
        "chunk",
        "joinChunks",
        "chunk",
        "newChunk",
        "child",
        "sibling",
        "blockTags",
        "nodeName",
        "inBlock",
        "chunk",
        "joinChunks",
        "chunk",
        "getSoftNewlineChunk",
        "sibling",
        "nodeName",
        "sibling",
        "child",
        "sibling",
        "newBlock",
        "chunk",
        "joinChunks",
        "chunk",
        "getBlockDividerChunk",
        "nextBlockType",
        "depth",
        "chunk",
        "html",
        "DOMBuilder",
        "blockRenderMap",
        "html",
        "html",
        "REGEX_CR",
        "REGEX_NBSP",
        "SPACE",
        "REGEX_CARRIAGE",
        "REGEX_ZWS",
        "getBlockMapSupportedTags",
        "blockRenderMap",
        "DOMBuilder",
        "html",
        "safeBody",
        "lastBlock",
        "containsSemanticBlockMarkup",
        "html",
        "supportedBlockTags",
        "supportedBlockTags",
        "genFragment",
        "safeBody",
        "OrderedSet",
        "workingBlocks",
        "blockRenderMap",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "html",
        "arguments",
        "arguments",
        "getSafeBodyFromHTML",
        "arguments",
        "arguments",
        "arguments",
        "DefaultDraftBlockRenderMap",
        "arguments",
        "getChunkForHTML",
        "html",
        "DOMBuilder",
        "blockRenderMap",
        "chunk",
        "chunk",
        "textBlock",
        "ii",
        "textBlock",
        "sanitizeDraftText",
        "textBlock",
        "start",
        "textBlock",
        "nullthrows",
        "chunk",
        "start",
        "end",
        "nullthrows",
        "chunk",
        "start",
        "end",
        "inlines",
        "style",
        "ii",
        "style",
        "entities",
        "ii",
        "data",
        "entities",
        "ii",
        "CharacterMetadata",
        "data",
        "start",
        "end",
        "ContentBlock",
        "generateRandomKey",
        "nullthrows",
        "chunk",
        "ii",
        "nullthrows",
        "chunk",
        "ii",
        "textBlock",
        "characterList",
        "convertFromHTMLtoContentBlocks",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "UserAgent",
        "UserAgent",
        "isOSX",
        "UserAgent",
        "KeyBindingUtil",
        "KeyBindingUtil",
        "e",
        "isOSX",
        "e",
        "isCtrlKeyCommand",
        "e",
        "e",
        "hasCommandModifier",
        "e",
        "e",
        "e",
        "isWindows",
        "e",
        "shouldRemoveWord",
        "e",
        "e",
        "hasCommandModifier",
        "e",
        "isOSX",
        "shouldRemoveWord",
        "e",
        "e",
        "e",
        "hasCommandModifier",
        "e",
        "isCtrlKeyCommand",
        "e",
        "isCtrlKeyCommand",
        "e",
        "hasCommandModifier",
        "e",
        "hasCommandModifier",
        "e",
        "isWindows",
        "isCtrlKeyCommand",
        "e",
        "isCtrlKeyCommand",
        "e",
        "isCtrlKeyCommand",
        "e",
        "isOSX",
        "isCtrlKeyCommand",
        "e",
        "hasCommandModifier",
        "e",
        "isOSX",
        "isCtrlKeyCommand",
        "e",
        "isCtrlKeyCommand",
        "e",
        "isWindows",
        "getZCommand",
        "e",
        "Keys",
        "Keys",
        "getDeleteCommand",
        "e",
        "Keys",
        "getBackspaceCommand",
        "e",
        "Keys",
        "shouldFixFirefoxMovement",
        "hasCommandModifier",
        "e",
        "Keys",
        "shouldFixFirefoxMovement",
        "hasCommandModifier",
        "e",
        "getDefaultKeyBinding",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "root",
        "anchorNode",
        "anchorOffset",
        "focusNode",
        "focusOffset",
        "anchorNode",
        "Node",
        "focusNode",
        "Node",
        "anchorIsTextNode",
        "focusIsTextNode",
        "getUpdatedSelectionState",
        "editorState",
        "nullthrows",
        "findAncestorOffsetKey",
        "anchorNode",
        "anchorOffset",
        "nullthrows",
        "findAncestorOffsetKey",
        "focusNode",
        "focusOffset",
        "anchorIsTextNode",
        "anchorPoint",
        "nullthrows",
        "findAncestorOffsetKey",
        "anchorNode",
        "anchorOffset",
        "focusPoint",
        "getPointForNonTextNode",
        "root",
        "focusNode",
        "focusOffset",
        "focusIsTextNode",
        "focusPoint",
        "nullthrows",
        "findAncestorOffsetKey",
        "focusNode",
        "focusOffset",
        "anchorPoint",
        "getPointForNonTextNode",
        "root",
        "anchorNode",
        "anchorOffset",
        "anchorPoint",
        "getPointForNonTextNode",
        "root",
        "anchorNode",
        "anchorOffset",
        "focusPoint",
        "getPointForNonTextNode",
        "root",
        "focusNode",
        "focusOffset",
        "anchorNode",
        "focusNode",
        "anchorOffset",
        "focusOffset",
        "needsRecovery",
        "anchorNode",
        "anchorNode",
        "getUpdatedSelectionState",
        "editorState",
        "anchorPoint",
        "anchorPoint",
        "focusPoint",
        "focusPoint",
        "needsRecovery",
        "node",
        "node",
        "getSelectionOffsetKeyForNode",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "getSelectionOffsetKeyForNode",
        "node",
        "node",
        "node",
        "node",
        "editorRoot",
        "startNode",
        "childOffset",
        "findAncestorOffsetKey",
        "node",
        "offsetKey",
        "editorRoot",
        "editorRoot",
        "node",
        "editorRoot",
        "node",
        "invariant",
        "invariant",
        "editorRoot",
        "node",
        "node",
        "node",
        "node",
        "Element",
        "node",
        "invariant",
        "invariant",
        "childOffset",
        "childOffset",
        "node",
        "childOffset",
        "offsetKey",
        "key",
        "offsetKey",
        "getFirstLeaf",
        "node",
        "key",
        "nullthrows",
        "getSelectionOffsetKeyForNode",
        "firstLeaf",
        "key",
        "node",
        "childOffset",
        "getSelectionOffsetKeyForNode",
        "nodeBeforeCursor",
        "leafKey",
        "nullthrows",
        "offsetKey",
        "textLength",
        "getTextContentLength",
        "nodeBeforeCursor",
        "getLastLeaf",
        "nodeBeforeCursor",
        "leafKey",
        "nullthrows",
        "getSelectionOffsetKeyForNode",
        "lastLeaf",
        "textLength",
        "getTextContentLength",
        "lastLeaf",
        "leafKey",
        "textLength",
        "node",
        "node",
        "textContent",
        "textContent",
        "getDraftEditorSelectionWithNodes",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "editorState",
        "selectionState",
        "getContentStateFragment",
        "editorState",
        "selectionState",
        "getFragmentFromSelection",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "UserAgent",
        "ancestor",
        "ancestor",
        "ancestor",
        "ancestor",
        "atCommonAncestor",
        "tempRange",
        "tempRange",
        "tempRange",
        "tempRange",
        "clientRects",
        "rects",
        "atCommonAncestor",
        "clientRects",
        "_ref",
        "_ref",
        "clientRects",
        "tempRange",
        "ancestor",
        "invariant",
        "invariant",
        "isChrome",
        "getRangeClientRectsChrome",
        "getRangeClientRects",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "UserAgent",
        "html",
        "isOldIE",
        "doc",
        "doc",
        "html",
        "root",
        "doc",
        "root",
        "getSafeBodyFromHTML",
        "exports",
        "node",
        "node",
        "Element",
        "node",
        "offsetKey",
        "offsetKey",
        "ii",
        "node",
        "ii",
        "getSelectionOffsetKeyForNode",
        "node",
        "ii",
        "childOffsetKey",
        "childOffsetKey",
        "getSelectionOffsetKeyForNode",
        "exports",
        "files",
        "callback",
        "files",
        "file",
        "readFile",
        "file",
        "text",
        "readCount",
        "text",
        "results",
        "text",
        "TEXT_SIZE_UPPER_BOUND",
        "readCount",
        "files",
        "callback",
        "results",
        "file",
        "callback",
        "file",
        "file",
        "TEXT_TYPES",
        "callback",
        "file",
        "TEXT_CLIPPING_REGEX",
        "file",
        "contents",
        "file",
        "TEXT_CLIPPING_REGEX",
        "callback",
        "contents",
        "FileReader",
        "reader",
        "callback",
        "reader",
        "reader",
        "callback",
        "reader",
        "file",
        "getTextContentFromFiles",
        "exports",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "anchorKey",
        "anchorOffset",
        "focusKey",
        "focusOffset",
        "nullthrows",
        "editorState",
        "anchorKey",
        "focusKey",
        "arguments",
        "editorState",
        "selection",
        "DraftOffsetKey",
        "anchorKey",
        "anchorPath",
        "editorState",
        "anchorBlockKey",
        "anchorPath",
        "anchorPath",
        "DraftOffsetKey",
        "focusKey",
        "focusPath",
        "editorState",
        "focusBlockKey",
        "focusPath",
        "focusPath",
        "anchorLeaf",
        "focusLeaf",
        "anchorLeaf",
        "anchorLeafStart",
        "anchorOffset",
        "focusLeaf",
        "focusLeafStart",
        "focusOffset",
        "selection",
        "anchorBlockKey",
        "selection",
        "anchorBlockOffset",
        "selection",
        "focusBlockKey",
        "selection",
        "focusBlockOffset",
        "areEqual",
        "selection",
        "anchorBlockKey",
        "focusBlockKey",
        "anchorLeaf",
        "focusLeaf",
        "focusLeafStart",
        "anchorLeafStart",
        "focusLeafEnd",
        "anchorLeafEnd",
        "isBackward",
        "focusOffset",
        "anchorOffset",
        "isBackward",
        "focusLeafStart",
        "anchorLeafStart",
        "editorState",
        "v",
        "v",
        "anchorBlockKey",
        "v",
        "focusBlockKey",
        "isBackward",
        "startKey",
        "focusBlockKey",
        "selection",
        "anchorBlockKey",
        "anchorBlockOffset",
        "focusBlockKey",
        "focusBlockOffset",
        "isBackward",
        "getUpdatedSelectionState",
        "exports",
        "targetList",
        "toInsert",
        "offset",
        "offset",
        "targetList",
        "toInsert",
        "c",
        "targetList",
        "targetList",
        "c",
        "offset",
        "toInsert",
        "c",
        "targetList",
        "targetList",
        "c",
        "targetList",
        "offset",
        "targetList",
        "offset",
        "targetList",
        "head",
        "toInsert",
        "tail",
        "targetList",
        "insertIntoList",
        "exports",
        "editorState",
        "editorState",
        "selection",
        "editorState",
        "anchorKey",
        "selection",
        "blockTree",
        "leafSet",
        "offset",
        "leafSet",
        "isAtStart",
        "offset",
        "leafSet",
        "leafSet",
        "leaf",
        "leaf",
        "offset",
        "leafStart",
        "isAtStart",
        "isAtStart",
        "isSelectionAtLeafStart",
        "exports",
        "editorState",
        "maxDistance",
        "editorState",
        "selection",
        "selection",
        "editorState",
        "content",
        "key",
        "maxDistance",
        "block",
        "offset",
        "focusKey",
        "content",
        "key",
        "focusOffset",
        "focusOffset",
        "offset",
        "maxDistance",
        "selection",
        "focusKey",
        "focusOffset",
        "moveSelectionForward",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "contentState",
        "selectionState",
        "contentState",
        "selectionState",
        "selectionState",
        "blockMap",
        "startKey",
        "removeForBlock",
        "startBlock",
        "startOffset",
        "updatedStart",
        "startBlock",
        "updatedBlocks",
        "startKey",
        "updatedStart",
        "selectionState",
        "selectionState",
        "blockMap",
        "endKey",
        "startKey",
        "endKey",
        "endBlock",
        "updatedStart",
        "removeForBlock",
        "endBlock",
        "endOffset",
        "updatedEnd",
        "endBlock",
        "updatedBlocks",
        "endKey",
        "updatedEnd",
        "updatedBlocks",
        "contentState",
        "selectionState",
        "contentState",
        "blockMap",
        "updatedBlocks",
        "selectionState",
        "characters",
        "key",
        "offset",
        "findRangesImmutable",
        "characters",
        "a",
        "b",
        "a",
        "b",
        "element",
        "element",
        "key",
        "start",
        "end",
        "start",
        "offset",
        "end",
        "offset",
        "removalRange",
        "start",
        "end",
        "removalRange",
        "invariant",
        "invariant",
        "removalRange",
        "block",
        "offset",
        "block",
        "offset",
        "chars",
        "offset",
        "offset",
        "chars",
        "chars",
        "offset",
        "charBefore",
        "charBefore",
        "charAfter",
        "charAfter",
        "entityAfterCursor",
        "entityAfterCursor",
        "entityBeforeCursor",
        "DraftEntity",
        "entityAfterCursor",
        "entity",
        "getRemovalRange",
        "chars",
        "entityAfterCursor",
        "offset",
        "_getRemovalRange",
        "_getRemovalRange",
        "start",
        "end",
        "current",
        "chars",
        "start",
        "chars",
        "chars",
        "start",
        "CharacterMetadata",
        "current",
        "start",
        "block",
        "chars",
        "block",
        "removeEntitiesAtEdges",
        "exports",
        "__webpack_require__",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "item",
        "item",
        "item",
        "data",
        "_classCallCheck",
        "DataTransfer",
        "data",
        "data",
        "createArrayFromMixed",
        "data",
        "DataTransfer",
        "isRichText",
        "RICH_TEXT_TYPES",
        "DataTransfer",
        "getText",
        "text",
        "text",
        "text",
        "text",
        "CR_LF_REGEX",
        "LF_ONLY",
        "DataTransfer",
        "getHTML",
        "DataTransfer",
        "isLink",
        "DataTransfer",
        "getLink",
        "url",
        "DataTransfer",
        "isImage",
        "isImage",
        "i",
        "items",
        "i",
        "items",
        "i",
        "PhotosMimeType",
        "DataTransfer",
        "getCount",
        "DataTransfer",
        "getFiles",
        "getFileFromDataTransfer",
        "emptyFunction",
        "DataTransfer",
        "hasFiles",
        "DataTransfer",
        "DataTransfer",
        "exports",
        "element",
        "doc",
        "doc",
        "element",
        "doc",
        "element",
        "doc",
        "getTop",
        "element",
        "element",
        "_isViewportScrollElement",
        "element",
        "doc",
        "doc",
        "doc",
        "element",
        "setTop",
        "element",
        "newTop",
        "element",
        "_isViewportScrollElement",
        "element",
        "doc",
        "doc",
        "doc",
        "newTop",
        "element",
        "newTop",
        "getLeft",
        "element",
        "element",
        "_isViewportScrollElement",
        "element",
        "doc",
        "doc",
        "doc",
        "element",
        "setLeft",
        "element",
        "newLeft",
        "element",
        "_isViewportScrollElement",
        "element",
        "doc",
        "doc",
        "doc",
        "newLeft",
        "element",
        "newLeft",
        "Scroll",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "RANGE_BY_BIDI_TYPE",
        "RANGE_BY_BIDI_TYPE",
        "RANGE_BY_BIDI_TYPE",
        "RANGE_BY_BIDI_TYPE",
        "RANGE_BY_BIDI_TYPE",
        "REGEX_STRONG",
        "match",
        "match",
        "firstStrongChar",
        "strongChar",
        "UnicodeBidiDirection",
        "REGEX_RTL",
        "strongChar",
        "UnicodeBidiDirection",
        "UnicodeBidiDirection",
        "fallback",
        "fallback",
        "fallback",
        "UnicodeBidiDirection",
        "fallback",
        "firstStrongCharDir",
        "blockDir",
        "UnicodeBidiDirection",
        "fallback",
        "blockDir",
        "strongFallback",
        "strongFallback",
        "strongFallback",
        "UnicodeBidiDirection",
        "UnicodeBidiDirection",
        "strongFallback",
        "invariant",
        "invariant",
        "resolveBlockDir",
        "strongFallback",
        "strongFallback",
        "getDirection",
        "strongFallback",
        "UnicodeBidiDirection",
        "strongFallback",
        "getDirection",
        "strongFallback",
        "UnicodeBidiDirection",
        "firstStrongChar",
        "firstStrongCharDir",
        "resolveBlockDir",
        "getDirection",
        "isDirectionLTR",
        "isDirectionRTL",
        "UnicodeBidi",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "outerNode",
        "innerNode",
        "outerNode",
        "innerNode",
        "outerNode",
        "innerNode",
        "isTextNode",
        "outerNode",
        "isTextNode",
        "innerNode",
        "containsNode",
        "outerNode",
        "innerNode",
        "outerNode",
        "outerNode",
        "innerNode",
        "outerNode",
        "outerNode",
        "innerNode",
        "containsNode",
        "exports",
        "e",
        "getActiveElement",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "Immutable",
        "insertAtomicBlock",
        "editorState",
        "entityKey",
        "character",
        "editorState",
        "editorState",
        "DraftModifier",
        "contentState",
        "selectionState",
        "afterRemoval",
        "DraftModifier",
        "afterRemoval",
        "targetSelection",
        "afterSplit",
        "DraftModifier",
        "afterSplit",
        "insertionTarget",
        "CharacterMetadata",
        "entityKey",
        "ContentBlock",
        "generateRandomKey",
        "character",
        "Repeat",
        "charData",
        "character",
        "ContentBlock",
        "generateRandomKey",
        "BlockMapBuilder",
        "fragmentArray",
        "DraftModifier",
        "asAtomicBlock",
        "insertionTarget",
        "fragment",
        "withAtomicBlock",
        "selectionState",
        "withAtomicBlock",
        "EditorState",
        "editorState",
        "newContent",
        "AtomicBlockUtils",
        "exports",
        "__webpack_require__",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "__webpack_require__",
        "Immutable",
        "decorators",
        "_classCallCheck",
        "CompositeDraftDecorator",
        "decorators",
        "CompositeDraftDecorator",
        "getDecorations",
        "block",
        "block",
        "decorator",
        "ii",
        "decorator",
        "strategy",
        "block",
        "start",
        "end",
        "canOccupySlice",
        "decorations",
        "start",
        "end",
        "occupySlice",
        "decorations",
        "start",
        "end",
        "ii",
        "DELIMITER",
        "counter",
        "counter",
        "decorations",
        "CompositeDraftDecorator",
        "getComponentForKey",
        "key",
        "parseInt",
        "key",
        "DELIMITER",
        "componentKey",
        "CompositeDraftDecorator",
        "getPropsForKey",
        "key",
        "parseInt",
        "key",
        "DELIMITER",
        "componentKey",
        "CompositeDraftDecorator",
        "decorations",
        "start",
        "end",
        "ii",
        "end",
        "ii",
        "decorations",
        "ii",
        "targetArr",
        "start",
        "end",
        "componentKey",
        "ii",
        "end",
        "ii",
        "targetArr",
        "ii",
        "componentKey",
        "CompositeDraftDecorator",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "_require",
        "add",
        "contentState",
        "selectionState",
        "inlineStyle",
        "modifyInlineStyle",
        "contentState",
        "selectionState",
        "inlineStyle",
        "remove",
        "contentState",
        "selectionState",
        "inlineStyle",
        "modifyInlineStyle",
        "contentState",
        "selectionState",
        "inlineStyle",
        "contentState",
        "selectionState",
        "inlineStyle",
        "addOrRemove",
        "contentState",
        "selectionState",
        "selectionState",
        "selectionState",
        "selectionState",
        "blockMap",
        "_",
        "k",
        "k",
        "startKey",
        "_",
        "k",
        "k",
        "endKey",
        "endKey",
        "blockMap",
        "endKey",
        "block",
        "blockKey",
        "startKey",
        "endKey",
        "sliceStart",
        "startOffset",
        "sliceEnd",
        "endOffset",
        "sliceStart",
        "blockKey",
        "startKey",
        "startOffset",
        "sliceEnd",
        "blockKey",
        "endKey",
        "endOffset",
        "block",
        "block",
        "sliceStart",
        "sliceEnd",
        "current",
        "chars",
        "sliceStart",
        "chars",
        "chars",
        "sliceStart",
        "addOrRemove",
        "CharacterMetadata",
        "current",
        "inlineStyle",
        "CharacterMetadata",
        "current",
        "inlineStyle",
        "sliceStart",
        "block",
        "chars",
        "contentState",
        "blockMap",
        "newBlocks",
        "selectionState",
        "selectionState",
        "ContentStateInlineStyle",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "_assign",
        "target",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "key",
        "source",
        "source",
        "key",
        "target",
        "key",
        "source",
        "key",
        "target",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "call",
        "ReferenceError",
        "call",
        "call",
        "call",
        "call",
        "subClass",
        "superClass",
        "superClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "UserAgent",
        "isIE",
        "DraftEditorEditHandler",
        "DraftEditorCompositionHandler",
        "DraftEditorDragHandler",
        "_React$Component",
        "_inherits",
        "DraftEditor",
        "_React$Component",
        "props",
        "_classCallCheck",
        "DraftEditor",
        "_possibleConstructorReturn",
        "_React$Component",
        "props",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "generateRandomKey",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "_this",
        "DraftEditor",
        "_buildHandler",
        "eventName",
        "e",
        "_this2",
        "_this2",
        "_this2",
        "eventName",
        "method",
        "method",
        "_this2",
        "e",
        "DraftEditor",
        "_showPlaceholder",
        "DraftEditor",
        "_renderPlaceholder",
        "React",
        "DraftEditorPlaceholder",
        "nullthrows",
        "DraftEditor",
        "render",
        "_props",
        "_props",
        "cx",
        "textAlignment",
        "textAlignment",
        "textAlignment",
        "React",
        "rootClass",
        "React",
        "cx",
        "React",
        "readOnly",
        "readOnly",
        "readOnly",
        "readOnly",
        "readOnly",
        "cx",
        "readOnly",
        "readOnly",
        "allowSpellCheck",
        "contentStyle",
        "React",
        "DraftEditorContents",
        "_extends",
        "DefaultDraftInlineStyle",
        "DraftEditor",
        "componentDidMount",
        "isIE",
        "DraftEditor",
        "componentWillUpdate",
        "DraftEditor",
        "componentDidUpdate",
        "DraftEditor",
        "_focus",
        "scrollPosition",
        "editorState",
        "ReactDOM",
        "Style",
        "editorNode",
        "scrollPosition",
        "getScrollPosition",
        "scrollParent",
        "_ref",
        "_ref",
        "editorNode",
        "scrollParent",
        "x",
        "y",
        "Scroll",
        "scrollParent",
        "y",
        "alreadyHasFocus",
        "EditorState",
        "editorState",
        "editorState",
        "DraftEditor",
        "_blur",
        "ReactDOM",
        "DraftEditor",
        "_setMode",
        "mode",
        "handlerMap",
        "mode",
        "DraftEditor",
        "_exitCurrentMode",
        "DraftEditor",
        "_restoreEditorDOM",
        "scrollPosition",
        "_this3",
        "scrollPosition",
        "DraftEditor",
        "_setRenderGuard",
        "DraftEditor",
        "_removeRenderGuard",
        "DraftEditor",
        "_setClipboard",
        "clipboard",
        "clipboard",
        "DraftEditor",
        "_getClipboard",
        "DraftEditor",
        "_update",
        "editorState",
        "editorState",
        "DraftEditor",
        "_onDragEnter",
        "DraftEditor",
        "_onDragLeave",
        "DraftEditor",
        "React",
        "DraftEditor",
        "DefaultDraftBlockRenderMap",
        "emptyFunction",
        "emptyFunction",
        "getDefaultKeyBinding",
        "DraftEditor",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "onBeforeInput",
        "e",
        "textInputData",
        "textInputData",
        "e",
        "onCompositionStart",
        "stillComposing",
        "onCompositionEnd",
        "resolved",
        "stillComposing",
        "setTimeout",
        "resolved",
        "DraftEditorCompositionHandler",
        "_this",
        "RESOLVE_DELAY",
        "onKeyDown",
        "e",
        "e",
        "Keys",
        "e",
        "Keys",
        "e",
        "onKeyPress",
        "e",
        "e",
        "Keys",
        "e",
        "resolveComposition",
        "stillComposing",
        "resolved",
        "textInputData",
        "EditorState",
        "editorState",
        "getEntityKeyForSelection",
        "editorState",
        "editorState",
        "composedChars",
        "isSelectionAtLeafStart",
        "editorState",
        "currentStyle",
        "entityKey",
        "mustReset",
        "composedChars",
        "DraftModifier",
        "editorState",
        "editorState",
        "composedChars",
        "currentStyle",
        "entityKey",
        "EditorState",
        "editorState",
        "contentState",
        "mustReset",
        "EditorState",
        "editorState",
        "DraftEditorCompositionHandler",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "_assign",
        "target",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "key",
        "source",
        "source",
        "key",
        "target",
        "key",
        "source",
        "key",
        "target",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "call",
        "ReferenceError",
        "call",
        "call",
        "call",
        "call",
        "subClass",
        "superClass",
        "superClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "_React$Component",
        "_inherits",
        "DraftEditorContents",
        "_React$Component",
        "_classCallCheck",
        "DraftEditorContents",
        "_possibleConstructorReturn",
        "_React$Component",
        "arguments",
        "DraftEditorContents",
        "shouldComponentUpdate",
        "nextProps",
        "nextProps",
        "prevEditorState",
        "nextEditorState",
        "prevDirectionMap",
        "nextDirectionMap",
        "prevEditorState",
        "nextEditorState",
        "didHaveFocus",
        "nowHasFocus",
        "nextEditorState",
        "prevEditorState",
        "nextEditorState",
        "prevEditorState",
        "nextEditorState",
        "nextNativeContent",
        "nextEditorState",
        "nextNativeContent",
        "wasComposing",
        "nowComposing",
        "prevEditorState",
        "nextEditorState",
        "prevEditorState",
        "nextEditorState",
        "wasComposing",
        "nowComposing",
        "prevContent",
        "nextContent",
        "prevDecorator",
        "nextDecorator",
        "nextEditorState",
        "DraftEditorContents",
        "render",
        "_props",
        "_props",
        "_props",
        "_props",
        "_props",
        "editorState",
        "editorState",
        "editorState",
        "editorState",
        "nullthrows",
        "editorState",
        "content",
        "ii",
        "blocksAsArray",
        "ii",
        "blocksAsArray",
        "ii",
        "_block",
        "_block",
        "blockRendererFn",
        "_block",
        "customRenderer",
        "CustomComponent",
        "customRenderer",
        "customProps",
        "customRenderer",
        "customEditable",
        "customRenderer",
        "directionMap",
        "key",
        "DraftOffsetKey",
        "key",
        "_block",
        "customProps",
        "customStyleMap",
        "customStyleFn",
        "decorator",
        "direction",
        "forceSelection",
        "key",
        "offsetKey",
        "selection",
        "editorState",
        "key",
        "blockRenderMap",
        "blockType",
        "configForType",
        "configForType",
        "blockRenderMap",
        "_block",
        "_block",
        "_Element",
        "lastWrapperTemplate",
        "wrapperTemplate",
        "currentDepth",
        "depth",
        "currentDepth",
        "className",
        "joinClasses",
        "className",
        "getListItemClasses",
        "blockType",
        "depth",
        "shouldResetCount",
        "direction",
        "CustomComponent",
        "DraftEditorBlock",
        "className",
        "offsetKey",
        "key",
        "customEditable",
        "childProps",
        "_extends",
        "childProps",
        "customEditable",
        "React",
        "_Element",
        "childProps",
        "React",
        "Component",
        "componentProps",
        "processedBlocks",
        "child",
        "wrapperTemplate",
        "key",
        "offsetKey",
        "wrapperTemplate",
        "currentDepth",
        "_block",
        "currentDepth",
        "lastWrapperTemplate",
        "wrapperTemplate",
        "_ii",
        "processedBlocks",
        "processedBlocks",
        "_ii",
        "info",
        "blocks",
        "processedBlocks",
        "_ii",
        "_ii",
        "_ii",
        "processedBlocks",
        "processedBlocks",
        "_ii",
        "info",
        "React",
        "info",
        "info",
        "info",
        "blocks",
        "outputBlocks",
        "wrapperElement",
        "outputBlocks",
        "info",
        "_ii",
        "React",
        "outputBlocks",
        "DraftEditorContents",
        "React",
        "depth",
        "shouldResetCount",
        "direction",
        "cx",
        "shouldResetCount",
        "depth",
        "depth",
        "depth",
        "depth",
        "depth",
        "direction",
        "direction",
        "DraftEditorContents",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "node",
        "dropRange",
        "offset",
        "dropRange",
        "node",
        "offset",
        "node",
        "nullthrows",
        "node",
        "offset",
        "nullthrows",
        "offset",
        "nullthrows",
        "findAncestorOffsetKey",
        "node",
        "getUpdatedSelectionState",
        "editorState",
        "offsetKey",
        "offset",
        "offsetKey",
        "offset",
        "onDragEnd",
        "onDrop",
        "e",
        "DataTransfer",
        "e",
        "getSelectionForEvent",
        "e",
        "editorState",
        "e",
        "dropSelection",
        "data",
        "files",
        "isEventHandled",
        "dropSelection",
        "files",
        "getTextContentFromFiles",
        "files",
        "fileText",
        "fileText",
        "_this",
        "insertTextAtSelection",
        "editorState",
        "nullthrows",
        "dropSelection",
        "fileText",
        "isEventHandled",
        "dropSelection",
        "data",
        "dragType",
        "moveText",
        "editorState",
        "dropSelection",
        "insertTextAtSelection",
        "editorState",
        "dropSelection",
        "data",
        "editorState",
        "targetSelection",
        "DraftModifier",
        "editorState",
        "editorState",
        "targetSelection",
        "EditorState",
        "editorState",
        "newContentState",
        "editorState",
        "selection",
        "text",
        "DraftModifier",
        "editorState",
        "selection",
        "text",
        "editorState",
        "EditorState",
        "editorState",
        "newContentState",
        "DraftEditorDragHandler",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "onBeforeInput",
        "onBlur",
        "onCompositionStart",
        "onCopy",
        "onCut",
        "onDragOver",
        "onDragStart",
        "onFocus",
        "onInput",
        "onKeyDown",
        "onPaste",
        "onSelect",
        "DraftEditorEditHandler",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "call",
        "ReferenceError",
        "call",
        "call",
        "call",
        "call",
        "subClass",
        "superClass",
        "superClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "_React$Component",
        "_inherits",
        "DraftEditorLeaf",
        "_React$Component",
        "_classCallCheck",
        "DraftEditorLeaf",
        "_possibleConstructorReturn",
        "_React$Component",
        "arguments",
        "DraftEditorLeaf",
        "_setSelection",
        "selection",
        "selection",
        "_props",
        "_props",
        "_props",
        "start",
        "text",
        "selection",
        "blockKey",
        "start",
        "end",
        "ReactDOM",
        "node",
        "child",
        "Node",
        "targetNode",
        "child",
        "child",
        "targetNode",
        "node",
        "targetNode",
        "child",
        "setDraftEditorSelection",
        "selection",
        "targetNode",
        "blockKey",
        "start",
        "end",
        "DraftEditorLeaf",
        "shouldComponentUpdate",
        "nextProps",
        "ReactDOM",
        "nextProps",
        "nextProps",
        "nextProps",
        "DraftEditorLeaf",
        "componentDidUpdate",
        "DraftEditorLeaf",
        "componentDidMount",
        "DraftEditorLeaf",
        "render",
        "text",
        "text",
        "_props2",
        "_props2",
        "_props2",
        "_props2",
        "styleSet",
        "styleName",
        "customStyleMap",
        "styleName",
        "style",
        "style",
        "mergedStyles",
        "style",
        "_assign",
        "style",
        "mergedStyles",
        "customStyleFn",
        "customStyleFn",
        "styleSet",
        "styleObj",
        "_assign",
        "styleObj",
        "newStyles",
        "React",
        "offsetKey",
        "styleObj",
        "React",
        "DraftEditorTextNode",
        "text",
        "DraftEditorLeaf",
        "React",
        "DraftEditorLeaf",
        "exports",
        "__webpack_require__",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "call",
        "ReferenceError",
        "call",
        "call",
        "call",
        "call",
        "subClass",
        "superClass",
        "superClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "__webpack_require__",
        "__webpack_require__",
        "_React$Component",
        "_inherits",
        "DraftEditorPlaceholder",
        "_React$Component",
        "_classCallCheck",
        "DraftEditorPlaceholder",
        "_possibleConstructorReturn",
        "_React$Component",
        "arguments",
        "DraftEditorPlaceholder",
        "shouldComponentUpdate",
        "nextProps",
        "nextProps",
        "nextProps",
        "DraftEditorPlaceholder",
        "render",
        "cx",
        "hasFocus",
        "React",
        "className",
        "React",
        "cx",
        "DraftEditorPlaceholder",
        "React",
        "DraftEditorPlaceholder",
        "exports",
        "__webpack_require__",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "call",
        "ReferenceError",
        "call",
        "call",
        "call",
        "call",
        "subClass",
        "superClass",
        "superClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "subClass",
        "superClass",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "UserAgent",
        "node",
        "useNewlineChar",
        "node",
        "node",
        "useNewlineChar",
        "React",
        "React",
        "useNewlineChar",
        "React",
        "React",
        "_React$Component",
        "_inherits",
        "DraftEditorTextNode",
        "_React$Component",
        "props",
        "_classCallCheck",
        "DraftEditorTextNode",
        "_possibleConstructorReturn",
        "_React$Component",
        "props",
        "_this",
        "_this",
        "DraftEditorTextNode",
        "shouldComponentUpdate",
        "nextProps",
        "ReactDOM",
        "nextProps",
        "shouldBeNewline",
        "isNewline",
        "node",
        "node",
        "nextProps",
        "DraftEditorTextNode",
        "componentWillUpdate",
        "DraftEditorTextNode",
        "render",
        "NEWLINE_A",
        "NEWLINE_B",
        "React",
        "DraftEditorTextNode",
        "React",
        "DraftEditorTextNode",
        "exports",
        "getRemovalRange",
        "selectionStart",
        "selectionEnd",
        "text",
        "entityStart",
        "direction",
        "text",
        "segments",
        "segments",
        "segment",
        "ii",
        "direction",
        "ii",
        "segment",
        "ii",
        "segments",
        "segment",
        "segment",
        "jj",
        "segments",
        "jj",
        "segment",
        "segments",
        "jj",
        "segmentEnd",
        "segmentStart",
        "segment",
        "selectionStart",
        "segmentEnd",
        "segmentStart",
        "selectionEnd",
        "removalStart",
        "removalEnd",
        "segmentEnd",
        "removalStart",
        "segmentStart",
        "removalEnd",
        "segmentEnd",
        "removalStart",
        "segmentStart",
        "segmentEnd",
        "entityStart",
        "text",
        "removalStart",
        "entityStart",
        "removalEnd",
        "entityEnd",
        "atStart",
        "atEnd",
        "atStart",
        "atEnd",
        "direction",
        "removalEnd",
        "entityEnd",
        "removalEnd",
        "removalStart",
        "entityStart",
        "removalStart",
        "removalStart",
        "removalEnd",
        "DraftEntitySegments",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "Immutable",
        "processHTML",
        "html",
        "blockRenderMap",
        "convertFromHTMLtoContentBlocks",
        "html",
        "getSafeBodyFromHTML",
        "blockRenderMap",
        "processText",
        "textBlocks",
        "character",
        "textBlocks",
        "textLine",
        "textLine",
        "sanitizeDraftText",
        "textLine",
        "ContentBlock",
        "generateRandomKey",
        "textLine",
        "Repeat",
        "character",
        "textLine",
        "DraftPasteProcessor",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "getDirectionMap",
        "content",
        "prevBidiMap",
        "bidiService",
        "bidiService",
        "UnicodeBidiService",
        "bidiService",
        "content",
        "blockMap",
        "block",
        "nullthrows",
        "bidiService",
        "block",
        "OrderedMap",
        "blockMap",
        "nextBidi",
        "prevBidiMap",
        "Immutable",
        "prevBidiMap",
        "bidiMap",
        "prevBidiMap",
        "bidiMap",
        "EditorBidiService",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "currentBlockContainsLink",
        "editorState",
        "editorState",
        "editorState",
        "selection",
        "selection",
        "selection",
        "v",
        "v",
        "entity",
        "DraftEntity",
        "entity",
        "getCurrentBlockType",
        "editorState",
        "editorState",
        "editorState",
        "selection",
        "getDataObjectForLinkURL",
        "uri",
        "uri",
        "handleKeyCommand",
        "editorState",
        "command",
        "command",
        "RichTextEditorUtil",
        "editorState",
        "RichTextEditorUtil",
        "editorState",
        "RichTextEditorUtil",
        "editorState",
        "RichTextEditorUtil",
        "editorState",
        "RichTextEditorUtil",
        "editorState",
        "RichTextEditorUtil",
        "editorState",
        "insertSoftNewline",
        "editorState",
        "DraftModifier",
        "editorState",
        "editorState",
        "editorState",
        "EditorState",
        "editorState",
        "contentState",
        "EditorState",
        "newEditorState",
        "contentState",
        "onBackspace",
        "editorState",
        "editorState",
        "selection",
        "selection",
        "selection",
        "editorState",
        "selection",
        "content",
        "startKey",
        "blockBefore",
        "blockBefore",
        "selection",
        "blockBefore",
        "DraftModifier",
        "content",
        "atomicBlockTarget",
        "content",
        "startKey",
        "DraftModifier",
        "asCurrentStyle",
        "atomicBlockTarget",
        "withoutAtomicBlock",
        "content",
        "EditorState",
        "editorState",
        "withoutAtomicBlock",
        "RichTextEditorUtil",
        "editorState",
        "withoutBlockStyle",
        "EditorState",
        "editorState",
        "withoutBlockStyle",
        "onDelete",
        "editorState",
        "editorState",
        "selection",
        "editorState",
        "selection",
        "content",
        "startKey",
        "block",
        "selection",
        "length",
        "content",
        "startKey",
        "blockAfter",
        "blockAfter",
        "selection",
        "blockAfter",
        "blockAfter",
        "DraftModifier",
        "content",
        "atomicBlockTarget",
        "withoutAtomicBlock",
        "content",
        "EditorState",
        "editorState",
        "withoutAtomicBlock",
        "onTab",
        "editorState",
        "maxDepth",
        "editorState",
        "selection",
        "key",
        "selection",
        "editorState",
        "editorState",
        "content",
        "key",
        "block",
        "editorState",
        "content",
        "key",
        "blockAbove",
        "editorState",
        "blockAbove",
        "typeAbove",
        "typeAbove",
        "editorState",
        "block",
        "depth",
        "maxDepth",
        "editorState",
        "maxDepth",
        "blockAbove",
        "maxDepth",
        "adjustBlockDepthForContentState",
        "content",
        "selection",
        "maxDepth",
        "EditorState",
        "editorState",
        "withAdjustment",
        "toggleBlockType",
        "editorState",
        "blockType",
        "editorState",
        "selection",
        "selection",
        "editorState",
        "startKey",
        "endKey",
        "selection",
        "nullthrows",
        "content",
        "endKey",
        "endKey",
        "blockBefore",
        "target",
        "target",
        "startKey",
        "selection",
        "endKey",
        "blockBefore",
        "content",
        "_",
        "k",
        "k",
        "startKey",
        "_",
        "k",
        "k",
        "endKey",
        "v",
        "v",
        "hasAtomicBlock",
        "editorState",
        "content",
        "startKey",
        "blockType",
        "blockType",
        "EditorState",
        "editorState",
        "DraftModifier",
        "content",
        "target",
        "typeToSet",
        "toggleCode",
        "editorState",
        "editorState",
        "selection",
        "selection",
        "selection",
        "anchorKey",
        "focusKey",
        "RichTextEditorUtil",
        "editorState",
        "RichTextEditorUtil",
        "editorState",
        "toggleInlineStyle",
        "editorState",
        "inlineStyle",
        "editorState",
        "editorState",
        "selection",
        "EditorState",
        "editorState",
        "currentStyle",
        "inlineStyle",
        "currentStyle",
        "inlineStyle",
        "currentStyle",
        "inlineStyle",
        "editorState",
        "currentStyle",
        "inlineStyle",
        "newContent",
        "DraftModifier",
        "content",
        "selection",
        "inlineStyle",
        "newContent",
        "DraftModifier",
        "content",
        "selection",
        "inlineStyle",
        "EditorState",
        "editorState",
        "newContent",
        "toggleLink",
        "editorState",
        "targetSelection",
        "entityKey",
        "DraftModifier",
        "editorState",
        "targetSelection",
        "entityKey",
        "EditorState",
        "editorState",
        "withoutLink",
        "tryToRemoveBlockStyle",
        "editorState",
        "editorState",
        "selection",
        "selection",
        "offset",
        "selection",
        "editorState",
        "content",
        "key",
        "block",
        "block",
        "content",
        "key",
        "blockBefore",
        "blockBefore",
        "DraftModifier",
        "content",
        "selection",
        "RichTextEditorUtil",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "cut",
        "editorState",
        "editorState",
        "editorState",
        "selection",
        "selection",
        "content",
        "anchorKey",
        "blockEnd",
        "selection",
        "editorState",
        "targetRange",
        "selection",
        "blockEnd",
        "targetRange",
        "selection",
        "targetRange",
        "nullthrows",
        "targetRange",
        "clipboard",
        "getContentStateFragment",
        "content",
        "targetRange",
        "DraftModifier",
        "content",
        "targetRange",
        "afterRemoval",
        "content",
        "editorState",
        "EditorState",
        "editorState",
        "afterRemoval",
        "paste",
        "editorState",
        "clipboard",
        "editorState",
        "DraftModifier",
        "editorState",
        "editorState",
        "clipboard",
        "EditorState",
        "editorState",
        "newContent",
        "SecondaryClipboard",
        "exports",
        "contentState",
        "selectionState",
        "adjustment",
        "maxDepth",
        "selectionState",
        "selectionState",
        "contentState",
        "blockMap",
        "_",
        "k",
        "k",
        "startKey",
        "_",
        "k",
        "k",
        "endKey",
        "endKey",
        "blockMap",
        "endKey",
        "block",
        "block",
        "adjustment",
        "depth",
        "depth",
        "maxDepth",
        "block",
        "depth",
        "blockMap",
        "blockMap",
        "blocks",
        "contentState",
        "blockMap",
        "selectionState",
        "selectionState",
        "adjustBlockDepthForContentState",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "contentBlock",
        "start",
        "end",
        "entityKey",
        "contentBlock",
        "start",
        "end",
        "characterList",
        "characterList",
        "start",
        "CharacterMetadata",
        "characterList",
        "start",
        "entityKey",
        "start",
        "contentBlock",
        "characterList",
        "applyEntityToContentBlock",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "contentState",
        "selectionState",
        "entityKey",
        "contentState",
        "selectionState",
        "selectionState",
        "selectionState",
        "selectionState",
        "blockMap",
        "_",
        "k",
        "k",
        "startKey",
        "_",
        "k",
        "k",
        "endKey",
        "Immutable",
        "endKey",
        "blockMap",
        "endKey",
        "block",
        "blockKey",
        "blockKey",
        "startKey",
        "startOffset",
        "blockKey",
        "endKey",
        "endOffset",
        "block",
        "applyEntityToContentBlock",
        "block",
        "sliceStart",
        "sliceEnd",
        "entityKey",
        "contentState",
        "blockMap",
        "newBlocks",
        "selectionState",
        "selectionState",
        "applyEntityToContentState",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "contentState",
        "contentState",
        "block",
        "blockKey",
        "block",
        "character",
        "character",
        "start",
        "DraftStringKey",
        "block",
        "start",
        "entityStorageMap",
        "stringifiedEntityKey",
        "entityStorageMap",
        "stringifiedEntityKey",
        "entityStorageKey",
        "rawBlocks",
        "blockKey",
        "block",
        "block",
        "block",
        "encodeInlineStyleRanges",
        "block",
        "encodeEntityRanges",
        "block",
        "entityStorageMap",
        "block",
        "entityStorageMap",
        "entityKeys",
        "key",
        "jj",
        "DraftEntity",
        "DraftStringKey",
        "key",
        "flippedStorageMap",
        "jj",
        "entity",
        "entity",
        "entity",
        "flippedStorageMap",
        "rawBlocks",
        "convertFromDraftStateToRaw",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "_assign",
        "target",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "key",
        "source",
        "source",
        "key",
        "target",
        "key",
        "source",
        "key",
        "target",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "rawState",
        "rawState",
        "rawState",
        "entityMap",
        "storageKey",
        "entityMap",
        "storageKey",
        "encodedEntity",
        "encodedEntity",
        "encodedEntity",
        "DraftEntity",
        "mutability",
        "data",
        "fromStorageToLocal",
        "storageKey",
        "newKey",
        "blocks",
        "block",
        "block",
        "block",
        "block",
        "block",
        "block",
        "block",
        "block",
        "key",
        "key",
        "generateRandomKey",
        "depth",
        "depth",
        "inlineStyleRanges",
        "inlineStyleRanges",
        "entityRanges",
        "entityRanges",
        "data",
        "data",
        "decodeInlineStyleRanges",
        "text",
        "inlineStyleRanges",
        "entityRanges",
        "fromStorageToLocal",
        "_extends",
        "fromStorageToLocal",
        "decodeEntityRanges",
        "text",
        "filteredEntityRanges",
        "createCharacterList",
        "inlineStyles",
        "entities",
        "ContentBlock",
        "key",
        "text",
        "depth",
        "characterList",
        "data",
        "ContentState",
        "contentBlocks",
        "convertFromRawToDraftState",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "inlineStyles",
        "entities",
        "inlineStyles",
        "style",
        "ii",
        "entities",
        "ii",
        "CharacterMetadata",
        "style",
        "entity",
        "characterArray",
        "createCharacterList",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "UnicodeUtils",
        "text",
        "ranges",
        "text",
        "ranges",
        "ranges",
        "substr",
        "text",
        "start",
        "substr",
        "text",
        "ii",
        "end",
        "ii",
        "entities",
        "ii",
        "entities",
        "decodeEntityRanges",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "_require",
        "UnicodeUtils",
        "OrderedSet",
        "text",
        "ranges",
        "text",
        "EMPTY_SET",
        "ranges",
        "ranges",
        "substr",
        "text",
        "cursor",
        "substr",
        "text",
        "cursor",
        "end",
        "styles",
        "cursor",
        "styles",
        "cursor",
        "cursor",
        "styles",
        "decodeInlineStyleRanges",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "UserAgent",
        "character",
        "isFirefox",
        "character",
        "FF_QUICKFIND_CHAR",
        "character",
        "FF_QUICKFIND_LINK_CHAR",
        "editorState",
        "text",
        "inlineStyle",
        "entityKey",
        "DraftModifier",
        "editorState",
        "editorState",
        "text",
        "inlineStyle",
        "entityKey",
        "EditorState",
        "editorState",
        "contentState",
        "e",
        "e",
        "chars",
        "isEventHandled",
        "chars",
        "e",
        "editorState",
        "selection",
        "e",
        "replaceText",
        "editorState",
        "chars",
        "editorState",
        "getEntityKeyForSelection",
        "editorState",
        "editorState",
        "isSelectionAtLeafStart",
        "editorState",
        "replaceText",
        "editorState",
        "chars",
        "editorState",
        "getEntityKeyForSelection",
        "editorState",
        "editorState",
        "mayAllowNative",
        "e",
        "newEditorState",
        "selection",
        "editorState",
        "anchorKey",
        "BlockTree",
        "anchorTree",
        "BlockTree",
        "newEditorState",
        "anchorKey",
        "mustPreventDefaultForCharacter",
        "chars",
        "originalFingerprint",
        "newFingerprint",
        "nullthrows",
        "newEditorState",
        "anchorKey",
        "nullthrows",
        "editorState",
        "anchorKey",
        "e",
        "newEditorState",
        "EditorState",
        "newEditorState",
        "newEditorState",
        "newEditorState",
        "editOnBeforeInput",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "UserAgent",
        "e",
        "isWebKit",
        "getActiveElement",
        "editorState",
        "currentSelection",
        "currentSelection",
        "e",
        "EditorState",
        "editorState",
        "selection",
        "editOnBlur",
        "exports",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "EditorState",
        "editOnCompositionStart",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "e",
        "editorState",
        "selection",
        "e",
        "getFragmentFromSelection",
        "editOnCopy",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "e",
        "editorState",
        "selection",
        "e",
        "Style",
        "e",
        "getScrollPosition",
        "scrollParent",
        "_getScrollPosition",
        "_getScrollPosition",
        "getFragmentFromSelection",
        "editorState",
        "fragment",
        "setTimeout",
        "_this",
        "x",
        "y",
        "_this",
        "_this",
        "_this",
        "removeFragment",
        "editorState",
        "editorState",
        "DraftModifier",
        "editorState",
        "editorState",
        "EditorState",
        "editorState",
        "newContent",
        "editOnCut",
        "exports",
        "e",
        "e",
        "editOnDragOver",
        "exports",
        "editOnDragStart",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "e",
        "editorState",
        "currentSelection",
        "currentSelection",
        "e",
        "EditorState",
        "editorState",
        "selection",
        "editOnFocus",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "UserAgent",
        "domSelection",
        "domSelection",
        "anchorNode",
        "Node",
        "anchorNode",
        "nullthrows",
        "findAncestorOffsetKey",
        "anchorNode",
        "DraftOffsetKey",
        "offsetKey",
        "_DraftOffsetKey$decod",
        "_DraftOffsetKey$decod",
        "_DraftOffsetKey$decod",
        "editorState",
        "blockKey",
        "decoratorKey",
        "leafKey",
        "_editorState$getBlock",
        "_editorState$getBlock",
        "editorState",
        "content",
        "blockKey",
        "block",
        "start",
        "end",
        "domText",
        "DOUBLE_NEWLINE",
        "domText",
        "domText",
        "domText",
        "modelText",
        "editorState",
        "selection",
        "start",
        "end",
        "block",
        "start",
        "entityKey",
        "Entity",
        "entityKey",
        "entity",
        "entity",
        "entityType",
        "preserveEntity",
        "DraftModifier",
        "content",
        "targetRange",
        "domText",
        "block",
        "start",
        "preserveEntity",
        "block",
        "start",
        "isGecko",
        "anchorOffset",
        "domSelection",
        "focusOffset",
        "domSelection",
        "startOffset",
        "start",
        "anchorOffset",
        "focusOffset",
        "endOffset",
        "startOffset",
        "anchorOffset",
        "focusOffset",
        "anchorOffset",
        "startOffset",
        "focusOffset",
        "endOffset",
        "domText",
        "modelText",
        "startOffset",
        "selection",
        "endOffset",
        "selection",
        "anchorOffset",
        "isCollapsed",
        "endOffset",
        "charDelta",
        "startOffset",
        "focusOffset",
        "endOffset",
        "charDelta",
        "newContent",
        "content",
        "selection",
        "anchorOffset",
        "focusOffset",
        "EditorState",
        "editorState",
        "contentWithAdjustedDOMSelection",
        "changeType",
        "editOnInput",
        "exports",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "KeyBindingUtil",
        "UserAgent",
        "command",
        "editorState",
        "command",
        "EditorState",
        "editorState",
        "keyCommandPlainDelete",
        "editorState",
        "keyCommandDeleteWord",
        "editorState",
        "keyCommandPlainBackspace",
        "editorState",
        "keyCommandBackspaceWord",
        "editorState",
        "keyCommandBackspaceToStartOfLine",
        "editorState",
        "keyCommandInsertNewline",
        "editorState",
        "keyCommandTransposeCharacters",
        "editorState",
        "keyCommandMoveSelectionToStartOfBlock",
        "editorState",
        "keyCommandMoveSelectionToEndOfBlock",
        "editorState",
        "SecondaryClipboard",
        "editorState",
        "SecondaryClipboard",
        "editorState",
        "editorState",
        "e",
        "e",
        "keyCode",
        "Keys",
        "e",
        "isEventHandled",
        "e",
        "Keys",
        "e",
        "e",
        "Keys",
        "e",
        "Keys",
        "e",
        "Keys",
        "e",
        "Keys",
        "isChrome",
        "isOptionKeyCommand",
        "e",
        "e",
        "DraftModifier",
        "editorState",
        "editorState",
        "EditorState",
        "editorState",
        "contentState",
        "e",
        "command",
        "command",
        "keyCommandUndo",
        "e",
        "editorState",
        "e",
        "isEventHandled",
        "command",
        "onKeyCommand",
        "command",
        "editorState",
        "newState",
        "editorState",
        "newState",
        "editOnKeyDown",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "e",
        "e",
        "DataTransfer",
        "e",
        "data",
        "data",
        "data",
        "files",
        "isEventHandled",
        "files",
        "getTextContentFromFiles",
        "files",
        "fileText",
        "fileText",
        "fileText",
        "defaultFileText",
        "fileText",
        "_this",
        "splitTextIntoTextBlocks",
        "fileText",
        "CharacterMetadata",
        "editorState",
        "getEntityKeyForSelection",
        "editorState",
        "editorState",
        "DraftPasteProcessor",
        "blocks",
        "character",
        "BlockMapBuilder",
        "text",
        "DraftModifier",
        "editorState",
        "editorState",
        "fragment",
        "_this",
        "EditorState",
        "editorState",
        "withInsertedText",
        "data",
        "data",
        "isEventHandled",
        "text",
        "html",
        "text",
        "textBlocks",
        "splitTextIntoTextBlocks",
        "text",
        "data",
        "internalClipboard",
        "html",
        "textBlocks",
        "internalClipboard",
        "internalClipboard",
        "text",
        "insertFragment",
        "internalClipboard",
        "internalClipboard",
        "data",
        "data",
        "areTextBlocksAndClipboardEqual",
        "textBlocks",
        "internalClipboard",
        "insertFragment",
        "internalClipboard",
        "html",
        "DraftPasteProcessor",
        "html",
        "htmlFragment",
        "BlockMapBuilder",
        "htmlFragment",
        "insertFragment",
        "htmlMap",
        "textBlocks",
        "CharacterMetadata",
        "editorState",
        "getEntityKeyForSelection",
        "editorState",
        "editorState",
        "DraftPasteProcessor",
        "textBlocks",
        "character",
        "BlockMapBuilder",
        "textFragment",
        "insertFragment",
        "textMap",
        "editorState",
        "fragment",
        "DraftModifier",
        "editorState",
        "editorState",
        "fragment",
        "EditorState",
        "editorState",
        "newContent",
        "textBlocks",
        "blockMap",
        "textBlocks",
        "blockMap",
        "blockMap",
        "block",
        "ii",
        "block",
        "textBlocks",
        "ii",
        "editOnPaste",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "getDraftEditorSelection",
        "editorState",
        "ReactDOM",
        "documentSelection",
        "updatedSelectionState",
        "editorState",
        "documentSelection",
        "editorState",
        "EditorState",
        "editorState",
        "updatedSelectionState",
        "editorState",
        "EditorState",
        "editorState",
        "updatedSelectionState",
        "editorState",
        "editOnSelect",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "UnicodeUtils",
        "block",
        "storageMap",
        "block",
        "character",
        "character",
        "start",
        "end",
        "block",
        "block",
        "start",
        "encoded",
        "strlen",
        "text",
        "start",
        "strlen",
        "text",
        "start",
        "end",
        "storageMap",
        "DraftStringKey",
        "key",
        "encoded",
        "encodeEntityRanges",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "areEqual",
        "a",
        "b",
        "a",
        "b",
        "isTruthy",
        "a",
        "a",
        "block",
        "styleList",
        "styleToEncode",
        "styleList",
        "style",
        "style",
        "styleToEncode",
        "findRangesImmutable",
        "filteredInlines",
        "areEqual",
        "isTruthy",
        "start",
        "end",
        "block",
        "ranges",
        "UnicodeUtils",
        "text",
        "start",
        "UnicodeUtils",
        "text",
        "start",
        "end",
        "styleToEncode",
        "ranges",
        "block",
        "block",
        "c",
        "c",
        "styleList",
        "style",
        "getEncodedInlinesForType",
        "block",
        "styleList",
        "style",
        "EMPTY_ARRAY",
        "ranges",
        "encodeInlineStyleRanges",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "element",
        "getComputedStyle",
        "element",
        "div",
        "computed",
        "div",
        "computed",
        "div",
        "computed",
        "div",
        "computed",
        "div",
        "computed",
        "div",
        "div",
        "div",
        "div",
        "div",
        "rect",
        "rects",
        "lineHeight",
        "Infinity",
        "Infinity",
        "ii",
        "rects",
        "ii",
        "rects",
        "ii",
        "rect",
        "rect",
        "minTop",
        "minTop",
        "rect",
        "minBottom",
        "minBottom",
        "rect",
        "maxTop",
        "maxTop",
        "rect",
        "maxBottom",
        "maxBottom",
        "rect",
        "maxTop",
        "minBottom",
        "maxTop",
        "minTop",
        "lineHeight",
        "maxBottom",
        "minBottom",
        "lineHeight",
        "node",
        "node",
        "Node",
        "Node",
        "Node",
        "Node",
        "node",
        "node",
        "invariant",
        "invariant",
        "containingElement",
        "containingElement",
        "containingElement",
        "getLineHeightPx",
        "containingElement",
        "areRectsOnOneLine",
        "getRangeClientRects",
        "lineHeight",
        "bestContainer",
        "bestOffset",
        "bestContainer",
        "invariant",
        "invariant",
        "bestContainer",
        "bestContainer",
        "getComputedStyle",
        "bestContainer",
        "bestOffset",
        "currentContainer",
        "ii",
        "ii",
        "nodeValue",
        "ii",
        "UnicodeUtils",
        "nodeValue",
        "ii",
        "currentContainer",
        "ii",
        "areRectsOnOneLine",
        "getRangeClientRects",
        "lineHeight",
        "bestContainer",
        "currentContainer",
        "bestOffset",
        "ii",
        "ii",
        "currentContainer",
        "currentContainer",
        "currentContainer",
        "ii",
        "maxIndexToConsider",
        "getNodeLength",
        "currentContainer",
        "bestContainer",
        "bestOffset",
        "expandRangeToStartOfLine",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "block",
        "selectionState",
        "direction",
        "selectionState",
        "selectionState",
        "block",
        "start",
        "entityKey",
        "selectionState",
        "DraftEntity",
        "entityKey",
        "entity",
        "mutability",
        "selectionState",
        "getRangesForDraftEntity",
        "block",
        "entityKey",
        "start",
        "end",
        "entityRanges",
        "invariant",
        "invariant",
        "entityRanges",
        "mutability",
        "selectionState",
        "entityRange",
        "entityRange",
        "DraftEntitySegments",
        "start",
        "end",
        "block",
        "entityRange",
        "entityRange",
        "entityRange",
        "direction",
        "selectionState",
        "removalRange",
        "removalRange",
        "getCharacterRemovalRange",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "root",
        "selection",
        "editorState",
        "getDraftEditorSelectionWithNodes",
        "editorState",
        "root",
        "selection",
        "selection",
        "selection",
        "selection",
        "getDraftEditorSelection",
        "exports",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "getRangeClientRects",
        "rects",
        "rects",
        "top",
        "_rects$",
        "right",
        "_rects$",
        "bottom",
        "_rects$",
        "left",
        "_rects$",
        "ii",
        "rects",
        "ii",
        "rects",
        "ii",
        "rect",
        "rect",
        "top",
        "top",
        "rect",
        "right",
        "right",
        "rect",
        "bottom",
        "bottom",
        "rect",
        "left",
        "left",
        "rect",
        "top",
        "right",
        "bottom",
        "left",
        "right",
        "left",
        "bottom",
        "top",
        "getRangeBoundingClientRect",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "block",
        "key",
        "block",
        "c",
        "c",
        "key",
        "start",
        "end",
        "ranges",
        "start",
        "end",
        "ranges",
        "invariant",
        "invariant",
        "ranges",
        "getRangesForDraftEntity",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "selection",
        "selection",
        "getRangeBoundingClientRect",
        "boundingRect",
        "boundingRect",
        "boundingRect",
        "boundingRect",
        "top",
        "right",
        "bottom",
        "left",
        "boundingRect",
        "getVisibleSelectionRect",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "contentState",
        "selectionState",
        "fragment",
        "selectionState",
        "invariant",
        "invariant",
        "selectionState",
        "selectionState",
        "contentState",
        "fragment",
        "fragmentSize",
        "blockMap",
        "targetKey",
        "fragment",
        "targetBlock",
        "targetBlock",
        "targetBlock",
        "text",
        "targetOffset",
        "pastedBlock",
        "text",
        "targetOffset",
        "insertIntoList",
        "chars",
        "pastedBlock",
        "targetOffset",
        "pastedBlock",
        "blockMap",
        "blockMap",
        "targetKey",
        "newBlock",
        "finalKey",
        "targetKey",
        "finalOffset",
        "targetOffset",
        "pastedBlock",
        "contentState",
        "blockMap",
        "targetKey",
        "newBlock",
        "selectionState",
        "selectionState",
        "finalKey",
        "finalOffset",
        "finalKey",
        "finalOffset",
        "contentState",
        "block",
        "blockKey",
        "blockKey",
        "targetKey",
        "newBlockArr",
        "block",
        "block",
        "block",
        "text",
        "text",
        "targetOffset",
        "chars",
        "targetOffset",
        "fragment",
        "block",
        "headText",
        "appendToHead",
        "headCharacters",
        "appendToHead",
        "headText",
        "block",
        "appendToHead",
        "appendToHead",
        "newBlockArr",
        "modifiedHead",
        "fragment",
        "fragmentSize",
        "fragmentBlock",
        "newBlockArr",
        "fragmentBlock",
        "generateRandomKey",
        "text",
        "targetOffset",
        "blockSize",
        "chars",
        "targetOffset",
        "blockSize",
        "fragment",
        "finalKey",
        "generateRandomKey",
        "prependToTail",
        "finalKey",
        "prependToTail",
        "tailText",
        "prependToTail",
        "tailCharacters",
        "prependToTail",
        "newBlockArr",
        "modifiedTail",
        "finalOffset",
        "fragment",
        "contentState",
        "BlockMapBuilder",
        "newBlockArr",
        "selectionState",
        "selectionState",
        "finalKey",
        "finalOffset",
        "finalKey",
        "finalOffset",
        "insertFragmentIntoContentState",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "contentState",
        "selectionState",
        "text",
        "characterMetadata",
        "selectionState",
        "invariant",
        "invariant",
        "text",
        "len",
        "contentState",
        "contentState",
        "selectionState",
        "selectionState",
        "blockMap",
        "key",
        "block",
        "block",
        "blockText",
        "offset",
        "text",
        "blockText",
        "offset",
        "block",
        "insertIntoList",
        "block",
        "Repeat",
        "characterMetadata",
        "len",
        "offset",
        "offset",
        "len",
        "contentState",
        "blockMap",
        "key",
        "newBlock",
        "selectionState",
        "newOffset",
        "newOffset",
        "insertTextIntoContentState",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "removeTextWithStrategy",
        "editorState",
        "strategyState",
        "strategyState",
        "selection",
        "selection",
        "moveSelectionBackward",
        "strategyState",
        "domSelection",
        "expandRangeToStartOfLine",
        "getDraftEditorSelectionWithNodes",
        "strategyState",
        "afterRemoval",
        "editorState",
        "editorState",
        "EditorState",
        "editorState",
        "afterRemoval",
        "keyCommandBackspaceToStartOfLine",
        "exports",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "removeTextWithStrategy",
        "editorState",
        "strategyState",
        "strategyState",
        "selection",
        "offset",
        "moveSelectionBackward",
        "strategyState",
        "selection",
        "strategyState",
        "content",
        "key",
        "offset",
        "DraftRemovableWord",
        "text",
        "moveSelectionBackward",
        "strategyState",
        "toRemove",
        "afterRemoval",
        "editorState",
        "editorState",
        "EditorState",
        "editorState",
        "afterRemoval",
        "keyCommandBackspaceWord",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "removeTextWithStrategy",
        "editorState",
        "strategyState",
        "strategyState",
        "selection",
        "selection",
        "strategyState",
        "content",
        "key",
        "offset",
        "DraftRemovableWord",
        "text",
        "moveSelectionForward",
        "strategyState",
        "toRemove",
        "afterRemoval",
        "editorState",
        "editorState",
        "EditorState",
        "editorState",
        "afterRemoval",
        "keyCommandDeleteWord",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "DraftModifier",
        "editorState",
        "editorState",
        "EditorState",
        "editorState",
        "contentState",
        "keyCommandInsertNewline",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "editorState",
        "selection",
        "editorState",
        "content",
        "endKey",
        "EditorState",
        "editorState",
        "selection",
        "endKey",
        "textLength",
        "endKey",
        "textLength",
        "keyCommandMoveSelectionToEndOfBlock",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "editorState",
        "selection",
        "EditorState",
        "editorState",
        "selection",
        "startKey",
        "startKey",
        "keyCommandMoveSelectionToStartOfBlock",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "removeTextWithStrategy",
        "editorState",
        "strategyState",
        "strategyState",
        "strategyState",
        "selection",
        "selection",
        "content",
        "key",
        "offset",
        "moveSelectionBackward",
        "strategyState",
        "charBehind",
        "UnicodeUtils",
        "charBehind",
        "afterRemoval",
        "editorState",
        "editorState",
        "editorState",
        "EditorState",
        "editorState",
        "afterRemoval",
        "selection",
        "selection",
        "keyCommandPlainBackspace",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "removeTextWithStrategy",
        "editorState",
        "strategyState",
        "strategyState",
        "strategyState",
        "selection",
        "selection",
        "content",
        "key",
        "offset",
        "moveSelectionForward",
        "strategyState",
        "charAhead",
        "UnicodeUtils",
        "charAhead",
        "afterRemoval",
        "editorState",
        "editorState",
        "editorState",
        "EditorState",
        "editorState",
        "afterRemoval",
        "selection",
        "selection",
        "keyCommandPlainDelete",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "editorState",
        "editorState",
        "selection",
        "editorState",
        "selection",
        "offset",
        "editorState",
        "selection",
        "editorState",
        "content",
        "blockKey",
        "block",
        "length",
        "editorState",
        "offset",
        "length",
        "removalRange",
        "selection",
        "offset",
        "finalSelection",
        "selection",
        "removalRange",
        "selection",
        "offset",
        "finalSelection",
        "removalRange",
        "offset",
        "getContentStateFragment",
        "content",
        "removalRange",
        "DraftModifier",
        "content",
        "removalRange",
        "afterRemoval",
        "selectionAfter",
        "selectionAfter",
        "targetOffset",
        "targetOffset",
        "DraftModifier",
        "afterRemoval",
        "targetRange",
        "movedFragment",
        "EditorState",
        "editorState",
        "afterInsert",
        "EditorState",
        "newEditorState",
        "finalSelection",
        "keyCommandTransposeCharacters",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "e",
        "editorState",
        "updateFn",
        "EditorState",
        "editorState",
        "editorState",
        "undoneState",
        "updateFn",
        "EditorState",
        "undoneState",
        "nativelyRenderedContent",
        "e",
        "editorState",
        "updateFn",
        "undoneState",
        "updateFn",
        "EditorState",
        "editorState",
        "setTimeout",
        "updateFn",
        "undoneState",
        "keyCommandUndo",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "contentState",
        "selectionState",
        "operation",
        "selectionState",
        "selectionState",
        "contentState",
        "blockMap",
        "_",
        "k",
        "k",
        "startKey",
        "_",
        "k",
        "k",
        "endKey",
        "endKey",
        "blockMap",
        "endKey",
        "operation",
        "contentState",
        "blockMap",
        "newBlocks",
        "selectionState",
        "selectionState",
        "modifyBlockForContentState",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "contentState",
        "selectionState",
        "selectionState",
        "contentState",
        "contentState",
        "selectionState",
        "selectionState",
        "selectionState",
        "selectionState",
        "blockMap",
        "startKey",
        "blockMap",
        "endKey",
        "startBlock",
        "endBlock",
        "characterList",
        "removeFromList",
        "startBlock",
        "startOffset",
        "endOffset",
        "characterList",
        "startBlock",
        "startOffset",
        "endBlock",
        "endOffset",
        "startBlock",
        "startBlock",
        "startOffset",
        "endBlock",
        "endOffset",
        "characterList",
        "blockMap",
        "_",
        "k",
        "k",
        "startKey",
        "_",
        "k",
        "k",
        "endKey",
        "Immutable",
        "endKey",
        "_",
        "k",
        "k",
        "startKey",
        "modifiedStart",
        "blockMap",
        "blockMap",
        "newBlocks",
        "block",
        "block",
        "contentState",
        "blockMap",
        "selectionState",
        "selectionState",
        "startKey",
        "startOffset",
        "startKey",
        "startOffset",
        "targetList",
        "startOffset",
        "endOffset",
        "startOffset",
        "startOffset",
        "endOffset",
        "targetList",
        "targetList",
        "startOffset",
        "endOffset",
        "targetList",
        "endOffset",
        "startOffset",
        "targetList",
        "targetList",
        "endOffset",
        "targetList",
        "startOffset",
        "targetList",
        "endOffset",
        "targetList",
        "head",
        "tail",
        "targetList",
        "removeRangeFromContentState",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "selectionState",
        "node",
        "blockKey",
        "nodeStart",
        "nodeEnd",
        "containsNode",
        "node",
        "selectionState",
        "selectionState",
        "selectionState",
        "selectionState",
        "selectionState",
        "selection",
        "isBackward",
        "anchorKey",
        "focusKey",
        "anchorOffset",
        "focusOffset",
        "focusKey",
        "tempKey",
        "focusOffset",
        "tempOffset",
        "isBackward",
        "anchorKey",
        "blockKey",
        "nodeStart",
        "anchorOffset",
        "nodeEnd",
        "anchorOffset",
        "focusKey",
        "blockKey",
        "nodeStart",
        "focusOffset",
        "nodeEnd",
        "focusOffset",
        "hasAnchor",
        "hasFocus",
        "selection",
        "addPointToSelection",
        "selection",
        "node",
        "anchorOffset",
        "nodeStart",
        "addFocusToSelection",
        "selection",
        "node",
        "focusOffset",
        "nodeStart",
        "isBackward",
        "hasAnchor",
        "selection",
        "addPointToSelection",
        "selection",
        "node",
        "anchorOffset",
        "nodeStart",
        "hasFocus",
        "addFocusToSelection",
        "selection",
        "node",
        "focusOffset",
        "nodeStart",
        "hasFocus",
        "selection",
        "addPointToSelection",
        "selection",
        "node",
        "focusOffset",
        "nodeStart",
        "hasAnchor",
        "selection",
        "selection",
        "selection",
        "addPointToSelection",
        "selection",
        "node",
        "anchorOffset",
        "nodeStart",
        "addFocusToSelection",
        "selection",
        "storedFocusNode",
        "storedFocusOffset",
        "selection",
        "node",
        "offset",
        "selection",
        "containsNode",
        "getActiveElement",
        "node",
        "selection",
        "node",
        "offset",
        "selection",
        "node",
        "offset",
        "selection",
        "selection",
        "node",
        "offset",
        "node",
        "offset",
        "selection",
        "setDraftEditorSelection",
        "exports",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Immutable",
        "contentState",
        "selectionState",
        "selectionState",
        "invariant",
        "invariant",
        "selectionState",
        "selectionState",
        "contentState",
        "blockMap",
        "key",
        "blockToSplit",
        "blockToSplit",
        "blockToSplit",
        "text",
        "offset",
        "chars",
        "offset",
        "generateRandomKey",
        "blockAbove",
        "keyBelow",
        "text",
        "offset",
        "chars",
        "offset",
        "blockMap",
        "v",
        "v",
        "blockToSplit",
        "blockMap",
        "v",
        "v",
        "blockToSplit",
        "blocksBefore",
        "blockAbove",
        "blockAbove",
        "blockBelow",
        "blockBelow",
        "blocksAfter",
        "contentState",
        "newBlocks",
        "selectionState",
        "selectionState",
        "keyBelow",
        "keyBelow",
        "splitBlockInContentState",
        "exports",
        "text",
        "text",
        "NEWLINE_REGEX",
        "splitTextIntoTextBlocks",
        "exports",
        "isImage",
        "mimeString",
        "getParts",
        "mimeString",
        "isJpeg",
        "mimeString",
        "getParts",
        "mimeString",
        "PhotosMimeType",
        "mimeString",
        "parts",
        "parts",
        "mimeString",
        "mimeString",
        "PhotosMimeType",
        "exports",
        "getPunctuation",
        "PUNCTUATION",
        "exports",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "uri",
        "_classCallCheck",
        "URI",
        "uri",
        "URI",
        "toString",
        "URI",
        "URI",
        "exports",
        "__webpack_require__",
        "instance",
        "Constructor",
        "instance",
        "Constructor",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "defaultDir",
        "_classCallCheck",
        "UnicodeBidiService",
        "defaultDir",
        "defaultDir",
        "UnicodeBidiDirection",
        "UnicodeBidiDirection",
        "defaultDir",
        "invariant",
        "invariant",
        "defaultDir",
        "UnicodeBidiService",
        "reset",
        "UnicodeBidiService",
        "getDirection",
        "UnicodeBidi",
        "UnicodeBidiService",
        "UnicodeBidiService",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "name",
        "PLATFORM_MAP",
        "name",
        "name",
        "version",
        "version",
        "version",
        "parts",
        "parts",
        "UAParser",
        "parser",
        "getBrowserVersion",
        "results",
        "results",
        "UNKNOWN",
        "results",
        "UNKNOWN",
        "browserVersionData",
        "UNKNOWN",
        "results",
        "UNKNOWN",
        "results",
        "UNKNOWN",
        "results",
        "UNKNOWN",
        "results",
        "UNKNOWN",
        "results",
        "UNKNOWN",
        "results",
        "UNKNOWN",
        "convertPlatformName",
        "results",
        "UNKNOWN",
        "results",
        "UNKNOWN",
        "results",
        "UNKNOWN",
        "uaData",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "version",
        "orRegex",
        "expressions",
        "expressions",
        "VersionRange",
        "version",
        "expressions",
        "checkRangeExpression",
        "version",
        "version",
        "rangeRegex",
        "expressions",
        "expressions",
        "invariant",
        "invariant",
        "expressions",
        "checkSimpleExpression",
        "expressions",
        "version",
        "expressions",
        "expressions",
        "isSimpleVersion",
        "startVersion",
        "isSimpleVersion",
        "endVersion",
        "invariant",
        "invariant",
        "checkSimpleExpression",
        "startVersion",
        "version",
        "checkSimpleExpression",
        "endVersion",
        "version",
        "version",
        "version",
        "componentRegex",
        "getModifierAndComponents",
        "_getModifierAndCompon",
        "_getModifierAndCompon",
        "modifier",
        "checkLessThan",
        "versionComponents",
        "rangeComponents",
        "checkLessThanOrEqual",
        "versionComponents",
        "rangeComponents",
        "checkGreaterThanOrEqual",
        "versionComponents",
        "rangeComponents",
        "checkGreaterThan",
        "versionComponents",
        "rangeComponents",
        "checkApproximateVersion",
        "versionComponents",
        "rangeComponents",
        "checkEqual",
        "versionComponents",
        "rangeComponents",
        "a",
        "b",
        "compareComponents",
        "a",
        "b",
        "a",
        "b",
        "compareComponents",
        "a",
        "b",
        "result",
        "result",
        "a",
        "b",
        "compareComponents",
        "a",
        "b",
        "a",
        "b",
        "compareComponents",
        "a",
        "b",
        "result",
        "result",
        "a",
        "b",
        "compareComponents",
        "a",
        "b",
        "a",
        "b",
        "b",
        "b",
        "upperBound",
        "upperBound",
        "upperBound",
        "parseInt",
        "upperBound",
        "lastIndex",
        "isNumber",
        "numeric",
        "upperBound",
        "lastIndex",
        "numeric",
        "checkGreaterThanOrEqual",
        "a",
        "lowerBound",
        "checkLessThan",
        "a",
        "upperBound",
        "componentRegex",
        "rangeComponents",
        "modifierRegex",
        "matches",
        "invariant",
        "invariant",
        "matches",
        "matches",
        "rangeComponents",
        "number",
        "isNaN",
        "number",
        "isFinite",
        "number",
        "getModifierAndComponents",
        "array",
        "length",
        "array",
        "i",
        "length",
        "i",
        "array",
        "i",
        "a",
        "b",
        "a",
        "a",
        "b",
        "b",
        "zeroPad",
        "a",
        "b",
        "i",
        "b",
        "i",
        "b",
        "i",
        "matches",
        "b",
        "i",
        "a",
        "i",
        "matches",
        "i",
        "b",
        "j",
        "a",
        "j",
        "a",
        "j",
        "zeroPad",
        "b",
        "a",
        "a",
        "b",
        "a",
        "b",
        "a",
        "numericRegex",
        "b",
        "numericRegex",
        "parseInt",
        "aPrefix",
        "parseInt",
        "bPrefix",
        "isNumber",
        "aNumeric",
        "isNumber",
        "bNumeric",
        "aNumeric",
        "bNumeric",
        "compare",
        "aNumeric",
        "bNumeric",
        "compare",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "invariant",
        "invariant",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "normalizeVersions",
        "a",
        "b",
        "_normalizeVersions",
        "_normalizeVersions",
        "i",
        "bNormalized",
        "i",
        "compareNumeric",
        "aNormalized",
        "i",
        "bNormalized",
        "i",
        "result",
        "result",
        "contains",
        "version",
        "checkOrExpression",
        "version",
        "VersionRange",
        "exports",
        "_hyphenPattern",
        "_",
        "character",
        "character",
        "camelize",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "invariant",
        "invariant",
        "length",
        "invariant",
        "invariant",
        "length",
        "length",
        "obj",
        "invariant",
        "invariant",
        "obj",
        "invariant",
        "invariant",
        "obj",
        "obj",
        "e",
        "length",
        "ii",
        "length",
        "ii",
        "ret",
        "ii",
        "obj",
        "ii",
        "ret",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "hasArrayNature",
        "obj",
        "obj",
        "obj",
        "obj",
        "toArray",
        "obj",
        "createArrayFromMixed",
        "exports",
        "navigator",
        "navigator",
        "doc",
        "doc",
        "doc",
        "isWebkit",
        "doc",
        "doc",
        "doc",
        "getDocumentScrollElement",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "element",
        "getElementRect",
        "element",
        "rect",
        "rect",
        "rect",
        "rect",
        "rect",
        "rect",
        "getElementPosition",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "elem",
        "elem",
        "containsNode",
        "docElem",
        "elem",
        "elem",
        "rect",
        "docElem",
        "rect",
        "docElem",
        "rect",
        "docElem",
        "rect",
        "docElem",
        "getElementRect",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "value",
        "value",
        "value",
        "value",
        "node",
        "name",
        "computedStyle",
        "node",
        "computedStyle",
        "asString",
        "computedStyle",
        "hyphenate",
        "name",
        "computedStyle",
        "node",
        "computedStyle",
        "asString",
        "computedStyle",
        "hyphenate",
        "name",
        "name",
        "node",
        "name",
        "asString",
        "node",
        "node",
        "asString",
        "node",
        "camelize",
        "name",
        "asString",
        "node",
        "node",
        "camelize",
        "name",
        "getStyleProperty",
        "exports",
        "scrollable",
        "scrollable",
        "scrollable",
        "scrollable",
        "getUnboundedScrollPosition",
        "exports",
        "width",
        "width",
        "width",
        "width",
        "height",
        "height",
        "height",
        "height",
        "getViewportWidth",
        "getViewportHeight",
        "getViewportDimensions",
        "getViewportWidth",
        "getViewportHeight",
        "getViewportDimensions",
        "exports",
        "_uppercasePattern",
        "hyphenate",
        "exports",
        "Node",
        "Node",
        "isNode",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "isNode",
        "isTextNode",
        "exports",
        "className",
        "className",
        "className",
        "arguments",
        "argLength",
        "ii",
        "argLength",
        "ii",
        "nextClass",
        "arguments",
        "ii",
        "nextClass",
        "className",
        "className",
        "className",
        "nextClass",
        "className",
        "joinClasses",
        "exports",
        "callback",
        "context",
        "name",
        "hasOwnProperty",
        "name",
        "result",
        "name",
        "callback",
        "context",
        "name",
        "name",
        "result",
        "mapObject",
        "exports",
        "callback",
        "cache",
        "cache",
        "callback",
        "cache",
        "memoizeStringOnly",
        "exports",
        "__webpack_require__",
        "regexes",
        "extensions",
        "i",
        "extensions",
        "i",
        "extensions",
        "i",
        "regexes",
        "i",
        "extensions",
        "i",
        "regexes",
        "i",
        "regexes",
        "str1",
        "str2",
        "str1",
        "str2",
        "str1",
        "version",
        "version",
        "STR_TYPE",
        "version",
        "i",
        "args",
        "matches",
        "args",
        "i",
        "args",
        "i",
        "result",
        "UNDEF_TYPE",
        "result",
        "p",
        "props",
        "props",
        "p",
        "q",
        "props",
        "p",
        "q",
        "OBJ_TYPE",
        "result",
        "q",
        "result",
        "q",
        "j",
        "k",
        "j",
        "regex",
        "matches",
        "matches",
        "regex",
        "j",
        "matches",
        "p",
        "p",
        "props",
        "p",
        "match",
        "matches",
        "k",
        "q",
        "props",
        "p",
        "q",
        "OBJ_TYPE",
        "q",
        "q",
        "q",
        "FUNC_TYPE",
        "result",
        "q",
        "q",
        "match",
        "result",
        "q",
        "q",
        "q",
        "q",
        "FUNC_TYPE",
        "q",
        "q",
        "result",
        "q",
        "match",
        "q",
        "match",
        "q",
        "result",
        "q",
        "match",
        "match",
        "q",
        "q",
        "q",
        "result",
        "q",
        "match",
        "q",
        "match",
        "q",
        "q",
        "result",
        "q",
        "match",
        "match",
        "i",
        "result",
        "i",
        "i",
        "OBJ_TYPE",
        "i",
        "j",
        "i",
        "j",
        "util",
        "i",
        "j",
        "i",
        "UNKNOWN",
        "i",
        "util",
        "i",
        "i",
        "UNKNOWN",
        "i",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "NAME",
        "VERSION",
        "mapper",
        "maps",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "ARCHITECTURE",
        "ARCHITECTURE",
        "util",
        "ARCHITECTURE",
        "ARCHITECTURE",
        "ARCHITECTURE",
        "util",
        "ARCHITECTURE",
        "ARCHITECTURE",
        "util",
        "MODEL",
        "VENDOR",
        "TYPE",
        "TABLET",
        "MODEL",
        "VENDOR",
        "TYPE",
        "TABLET",
        "MODEL",
        "VENDOR",
        "VENDOR",
        "MODEL",
        "TYPE",
        "TABLET",
        "MODEL",
        "VENDOR",
        "TYPE",
        "TABLET",
        "MODEL",
        "mapper",
        "maps",
        "VENDOR",
        "TYPE",
        "MOBILE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "MOBILE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "MOBILE",
        "VENDOR",
        "MODEL",
        "TYPE",
        "MOBILE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "MOBILE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "TABLET",
        "VENDOR",
        "MODEL",
        "TYPE",
        "TABLET",
        "VENDOR",
        "MODEL",
        "TYPE",
        "MOBILE",
        "VENDOR",
        "MODEL",
        "TYPE",
        "CONSOLE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "CONSOLE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "CONSOLE",
        "VENDOR",
        "mapper",
        "maps",
        "MODEL",
        "mapper",
        "maps",
        "TYPE",
        "MOBILE",
        "VENDOR",
        "MODEL",
        "TYPE",
        "TABLET",
        "VENDOR",
        "MODEL",
        "TYPE",
        "MOBILE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "TABLET",
        "MODEL",
        "VENDOR",
        "TYPE",
        "CONSOLE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "MOBILE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "MOBILE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "TABLET",
        "VENDOR",
        "MODEL",
        "TYPE",
        "TABLET",
        "VENDOR",
        "MODEL",
        "TYPE",
        "MOBILE",
        "VENDOR",
        "MODEL",
        "TYPE",
        "SMARTTV",
        "MODEL",
        "VENDOR",
        "TYPE",
        "SMARTTV",
        "MODEL",
        "VENDOR",
        "TYPE",
        "MOBILE",
        "VENDOR",
        "MODEL",
        "TYPE",
        "MOBILE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "TABLET",
        "VENDOR",
        "MODEL",
        "TYPE",
        "TABLET",
        "VENDOR",
        "MODEL",
        "TYPE",
        "SMARTTV",
        "MODEL",
        "VENDOR",
        "TYPE",
        "MOBILE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "TABLET",
        "VENDOR",
        "MODEL",
        "TYPE",
        "MOBILE",
        "VENDOR",
        "MODEL",
        "TYPE",
        "WEARABLE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "WEARABLE",
        "MODEL",
        "VENDOR",
        "TYPE",
        "MOBILE",
        "TYPE",
        "util",
        "VENDOR",
        "MODEL",
        "VERSION",
        "NAME",
        "NAME",
        "VERSION",
        "VERSION",
        "NAME",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "mapper",
        "maps",
        "NAME",
        "VERSION",
        "mapper",
        "maps",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "NAME",
        "VERSION",
        "uastring",
        "extensions",
        "UAParser",
        "UAParser",
        "uastring",
        "extensions",
        "uastring",
        "EMPTY",
        "extensions",
        "util",
        "regexes",
        "extensions",
        "regexes",
        "mapper",
        "rgxmap",
        "browser",
        "util",
        "browser",
        "browser",
        "mapper",
        "rgxmap",
        "mapper",
        "rgxmap",
        "mapper",
        "rgxmap",
        "mapper",
        "rgxmap",
        "ua",
        "uastring",
        "ua",
        "uastring",
        "ua",
        "UAParser",
        "LIBVERSION",
        "UAParser",
        "NAME",
        "MAJOR",
        "VERSION",
        "UAParser",
        "ARCHITECTURE",
        "UAParser",
        "MODEL",
        "VENDOR",
        "TYPE",
        "CONSOLE",
        "MOBILE",
        "SMARTTV",
        "TABLET",
        "WEARABLE",
        "EMBEDDED",
        "UAParser",
        "NAME",
        "VERSION",
        "UAParser",
        "NAME",
        "VERSION",
        "exports",
        "UNDEF_TYPE",
        "UNDEF_TYPE",
        "exports",
        "UAParser",
        "exports",
        "UAParser",
        "FUNC_TYPE",
        "__webpack_require__",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "UAParser",
        "exports",
        "__webpack_require__",
        "exports",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "UAParser",
        "$",
        "UNDEF_TYPE",
        "UAParser",
        "$",
        "parser",
        "$",
        "parser",
        "$",
        "uastring",
        "parser",
        "uastring",
        "parser",
        "prop",
        "result",
        "$",
        "prop",
        "result",
        "prop",
        "exports",
        "__webpack_amd_options__",
        "__webpack_amd_options__",
        "exports"
    ],
    "literals": [
        "\"\"",
        "'use strict'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "''",
        "'decorator'",
        "'treeMap'",
        "'treeMap'",
        "'allowUndo'",
        "'currentContent'",
        "'undoStack'",
        "'redoStack'",
        "'selection'",
        "'decorator'",
        "'inCompositionMode'",
        "'forceSelection'",
        "'nativelyRenderedContent'",
        "'lastChangeType'",
        "'inlineStyleOverride'",
        "'treeMap'",
        "'directionMap'",
        "'hasFocus'",
        "'insert-characters'",
        "'selectionBefore'",
        "'insert-characters'",
        "'backspace-character'",
        "'delete-character'",
        "'selectionBefore'",
        "'adjust-depth'",
        "'change-block-type'",
        "'undo'",
        "'redo'",
        "'treeMap'",
        "'insert-characters'",
        "'backspace-character'",
        "'delete-character'",
        "'use strict'",
        "'invariant requires an error message argument'",
        "'Minified exception occurred; use the non-minified dev environment '",
        "'for the full error message and additional helpful warnings.'",
        "'Invariant Violation'",
        "'use strict'",
        "'Target range must be collapsed for `insertText`.'",
        "'backward'",
        "\"use strict\"",
        "\"Got unexpected null or undefined\"",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "\"this hasn't been initialised - super() hasn't been called\"",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"Super expression must either be null or a function, not \"",
        "'style'",
        "'entity'",
        "'style'",
        "'style'",
        "'entity'",
        "'use strict'",
        "'use strict'",
        "'Windows'",
        "''",
        "'use strict'",
        "''",
        "'Unknown DraftEntity key.'",
        "'data'",
        "'data'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "\"this hasn't been initialised - super() hasn't been called\"",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"Super expression must either be null or a function, not \"",
        "''",
        "'unstyled'",
        "''",
        "'key'",
        "'type'",
        "'text'",
        "'characterList'",
        "'depth'",
        "'data'",
        "'use strict'",
        "'isSurrogatePair: Invalid index %s for string length %s.'",
        "''",
        "''",
        "'use strict'",
        "'Object.assign cannot be called with null or undefined'",
        "'abc'",
        "'de'",
        "'5'",
        "'_'",
        "''",
        "'0123456789'",
        "'abcdefghijklmnopqrst'",
        "''",
        "''",
        "'abcdefghijklmnopqrst'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "\"this hasn't been initialised - super() hasn't been called\"",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"Super expression must either be null or a function, not \"",
        "''",
        "''",
        "'Anchor: '",
        "':'",
        "', '",
        "'Focus: '",
        "':'",
        "', '",
        "'Is Backward: '",
        "', '",
        "'Has Focus: '",
        "'anchorKey'",
        "'anchorOffset'",
        "'focusKey'",
        "'focusOffset'",
        "'isBackward'",
        "'hasFocus'",
        "'use strict'",
        "'use strict'",
        "'forward'",
        "'use strict'",
        "'object'",
        "' '",
        "' '",
        "'-'",
        "'use strict'",
        "'-'",
        "'use strict'",
        "'use strict'",
        "'key'",
        "'use strict'",
        "'handled'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "\"this hasn't been initialised - super() hasn't been called\"",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"Super expression must either be null or a function, not \"",
        "'blockMap'",
        "'selectionBefore'",
        "'selectionAfter'",
        "''",
        "'\\n'",
        "'unstyled'",
        "'use strict'",
        "'ul'",
        "'public/DraftStyleDefault/ul'",
        "'ol'",
        "'public/DraftStyleDefault/ol'",
        "'pre'",
        "'public/DraftStyleDefault/pre'",
        "'header-one'",
        "'h1'",
        "'header-two'",
        "'h2'",
        "'header-three'",
        "'h3'",
        "'header-four'",
        "'h4'",
        "'header-five'",
        "'h5'",
        "'header-six'",
        "'h6'",
        "'unordered-list-item'",
        "'li'",
        "'ordered-list-item'",
        "'li'",
        "'blockquote'",
        "'blockquote'",
        "'atomic'",
        "'figure'",
        "'code-block'",
        "'pre'",
        "'unstyled'",
        "'div'",
        "'use strict'",
        "'Mac OS X'",
        "'use strict'",
        "'use strict'",
        "'MUTABLE'",
        "'use strict'",
        "'use strict'",
        "'\\r'",
        "'g'",
        "''",
        "\"use strict\"",
        "'use strict'",
        "'auto'",
        "'scroll'",
        "'overflow'",
        "'overflowY'",
        "'overflowX'",
        "'use strict'",
        "'NEUTRAL'",
        "'LTR'",
        "'RTL'",
        "'`dir` must be a strong direction to be converted to HTML Direction'",
        "'ltr'",
        "'rtl'",
        "'`dir` must be a strong direction to be converted to HTML Direction'",
        "'`otherDir` must be a strong direction to be converted to HTML Direction'",
        "'Global direction not set.'",
        "\"use strict\"",
        "'use strict'",
        "'use strict'",
        "'-'",
        "'decoratorKey'",
        "'.'",
        "'end'",
        "'start'",
        "''",
        "''",
        "'.'",
        "'leaves'",
        "'use strict'",
        "'bold'",
        "'monospace'",
        "'break-word'",
        "'italic'",
        "'line-through'",
        "'underline'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "\"this hasn't been initialised - super() hasn't been called\"",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"Super expression must either be null or a function, not \"",
        "'leaves'",
        "'start'",
        "'end'",
        "'decoratorKey'",
        "'start'",
        "'end'",
        "'start'",
        "'public/DraftStyleDefault/block'",
        "'public/DraftStyleDefault/ltr'",
        "'LTR'",
        "'public/DraftStyleDefault/rtl'",
        "'RTL'",
        "'div'",
        "'data-offset-key'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "\"this hasn't been initialised - super() hasn't been called\"",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"Super expression must either be null or a function, not \"",
        "'TOKEN'",
        "'IMMUTABLE'",
        "'type'",
        "'mutability'",
        "'data'",
        "'use strict'",
        "'[\\'‘’]'",
        "'\\\\s|(?![_])'",
        "'^'",
        "'(?:'",
        "')*'",
        "'(?:'",
        "'|(?!'",
        "').)*'",
        "'(?:(?!'",
        "').)'",
        "'(?:(?!'",
        "').)'",
        "'(?:'",
        "'|(?!'",
        "').)*'",
        "'(?:'",
        "')*'",
        "'$'",
        "'use strict'",
        "'_'",
        "'use strict'",
        "'&nbsp;'",
        "' '",
        "'\\r'",
        "'g'",
        "'\\n'",
        "'g'",
        "'g'",
        "'&#13;?'",
        "'g'",
        "'&#8203;?'",
        "'g'",
        "'bold'",
        "'bolder'",
        "'500'",
        "'600'",
        "'700'",
        "'800'",
        "'900'",
        "'light'",
        "'lighter'",
        "'100'",
        "'200'",
        "'300'",
        "'400'",
        "'BOLD'",
        "'CODE'",
        "'STRIKETHROUGH'",
        "'ITALIC'",
        "'ITALIC'",
        "'STRIKETHROUGH'",
        "'STRIKETHROUGH'",
        "'BOLD'",
        "'UNDERLINE'",
        "'className'",
        "'href'",
        "'rel'",
        "'target'",
        "'title'",
        "''",
        "'\\n'",
        "'\\r'",
        "'li'",
        "'ol'",
        "'ordered-list-item'",
        "'unordered-list-item'",
        "'unstyled'",
        "'unstyled'",
        "'unstyled'",
        "'BOLD'",
        "'BOLD'",
        "'italic'",
        "'ITALIC'",
        "'normal'",
        "'ITALIC'",
        "'underline'",
        "'UNDERLINE'",
        "'line-through'",
        "'STRIKETHROUGH'",
        "'none'",
        "'UNDERLINE'",
        "'STRIKETHROUGH'",
        "'\\r'",
        "'\\r'",
        "'\\r'",
        "'\\r'",
        "'\\r'",
        "'\\n'",
        "'\\n'",
        "'<'",
        "'Link must be an HTMLAnchorElement.'",
        "'http:'",
        "'https:'",
        "'mailto:'",
        "'unstyled'",
        "'#text'",
        "''",
        "'pre'",
        "'pre'",
        "'br'",
        "'br'",
        "'unstyled'",
        "'unstyled'",
        "'ul'",
        "'ol'",
        "'li'",
        "'li'",
        "'ul'",
        "'unordered-list-item'",
        "'ordered-list-item'",
        "'LINK'",
        "'MUTABLE'",
        "''",
        "''",
        "''",
        "'div'",
        "'ul'",
        "'\\r'",
        "'\\r'",
        "'unstyled'",
        "'\\r'",
        "'unstyled'",
        "'\\r'",
        "'use strict'",
        "'Mac OS X'",
        "'Windows'",
        "'Firefox < 29'",
        "'redo'",
        "'undo'",
        "'delete-word'",
        "'delete'",
        "'backspace-to-start-of-line'",
        "'backspace-word'",
        "'backspace'",
        "'bold'",
        "'delete'",
        "'backspace'",
        "'italic'",
        "'code'",
        "'secondary-cut'",
        "'split-block'",
        "'split-block'",
        "'transpose-characters'",
        "'underline'",
        "'backspace-word'",
        "'redo'",
        "'secondary-paste'",
        "'split-block'",
        "'move-selection-to-start-of-block'",
        "'move-selection-to-end-of-block'",
        "'use strict'",
        "'BR'",
        "'Unknown node in selection range.'",
        "'data-contents'",
        "'true'",
        "'Invalid DraftEditorContents structure.'",
        "'\\n'",
        "'use strict'",
        "'use strict'",
        "'Chrome'",
        "'Found an unexpected detached subtree when getting range client rects.'",
        "'use strict'",
        "'IE <= 9'",
        "'foo'",
        "'body'",
        "'use strict'",
        "'data-offset-key'",
        "'use strict'",
        "'text/plain'",
        "'text/html'",
        "'text/rtf'",
        "'\\r'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'use strict'",
        "'Invalid selection state.'",
        "'leaves'",
        "'leaves'",
        "'start'",
        "'start'",
        "'end'",
        "'end'",
        "'use strict'",
        "'use strict'",
        "'start'",
        "'end'",
        "'leaves'",
        "'start'",
        "'use strict'",
        "'use strict'",
        "'selectionAfter'",
        "'object'",
        "'Removal range must exist within character list.'",
        "'MUTABLE'",
        "'characterList'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "'\\r\\n'",
        "'g'",
        "'\\n'",
        "'text/rtf'",
        "'text/html'",
        "'file'",
        "'Text'",
        "'text/plain'",
        "'text/plain'",
        "'Text'",
        "'text/html'",
        "'text/html'",
        "'Url'",
        "'text/uri-list'",
        "'text/x-moz-url'",
        "'text/x-moz-url'",
        "'text/x-moz-url'",
        "'\\n'",
        "'text/uri-list'",
        "'text/uri-list'",
        "'url'",
        "'application/x-moz-file'",
        "'items'",
        "'mozItemCount'",
        "\"use strict\"",
        "'use strict'",
        "'A-Za-zªµºÀ-ÖØ-öø-ƺƻ'",
        "'Ƽ-ƿǀ-ǃǄ-ʓʔʕ-ʯʰ-ʸ'",
        "'ʻ-ˁː-ˑˠ-ˤˮͰ-ͳͶ-ͷ'",
        "'ͺͻ-ͽͿΆΈ-ΊΌΎ-Ρ'",
        "'Σ-ϵϷ-ҁ҂Ҋ-ԯԱ-Ֆՙ'",
        "'՚-՟ա-և։ःऄ-हऻऽ'",
        "'ा-ीॉ-ौॎ-ॏॐक़-ॡ।-॥'",
        "'०-९॰ॱॲ-ঀং-ঃঅ-ঌ'",
        "'এ-ঐও-নপ-রলশ-হঽ'",
        "'া-ীে-ৈো-ৌৎৗড়-ঢ়'",
        "'য়-ৡ০-৯ৰ-ৱ৴-৹৺ਃ'",
        "'ਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼'",
        "'ਵ-ਸ਼ਸ-ਹਾ-ੀਖ਼-ੜਫ਼੦-੯'",
        "'ੲ-ੴઃઅ-ઍએ-ઑઓ-નપ-ર'",
        "'લ-ળવ-હઽા-ીૉો-ૌૐ'",
        "'ૠ-ૡ૦-૯૰ଂ-ଃଅ-ଌଏ-ଐ'",
        "'ଓ-ନପ-ରଲ-ଳଵ-ହଽାୀ'",
        "'େ-ୈୋ-ୌୗଡ଼-ଢ଼ୟ-ୡ୦-୯'",
        "'୰ୱ୲-୷ஃஅ-ஊஎ-ஐஒ-க'",
        "'ங-சஜஞ-டண-தந-பம-ஹ'",
        "'ா-ிு-ூெ-ைொ-ௌௐௗ'",
        "'௦-௯௰-௲ఁ-ఃఅ-ఌఎ-ఐ'",
        "'ఒ-నప-హఽు-ౄౘ-ౙౠ-ౡ'",
        "'౦-౯౿ಂ-ಃಅ-ಌಎ-ಐಒ-ನ'",
        "'ಪ-ಳವ-ಹಽಾಿೀ-ೄೆ'",
        "'ೇ-ೈೊ-ೋೕ-ೖೞೠ-ೡ೦-೯'",
        "'ೱ-ೲം-ഃഅ-ഌഎ-ഐഒ-ഺഽ'",
        "'ാ-ീെ-ൈൊ-ൌൎൗൠ-ൡ'",
        "'൦-൯൰-൵൹ൺ-ൿං-ඃඅ-ඖ'",
        "'ක-නඳ-රලව-ෆා-ෑෘ-ෟ'",
        "'෦-෯ෲ-ෳ෴ก-ะา-ำเ-ๅ'",
        "'ๆ๏๐-๙๚-๛ກ-ຂຄງ-ຈ'",
        "'ຊຍດ-ທນ-ຟມ-ຣລວ'",
        "'ສ-ຫອ-ະາ-ຳຽເ-ໄໆ'",
        "'໐-໙ໜ-ໟༀ༁-༃༄-༒༓༔'",
        "'༕-༗༚-༟༠-༩༪-༳༴༶༸'",
        "'༾-༿ཀ-ཇཉ-ཬཿ྅ྈ-ྌ'",
        "'྾-࿅࿇-࿌࿎-࿏࿐-࿔࿕-࿘'",
        "'࿙-࿚က-ဪါ-ာေးျ-ြဿ'",
        "'၀-၉၊-၏ၐ-ၕၖ-ၗၚ-ၝၡ'",
        "'ၢ-ၤၥ-ၦၧ-ၭၮ-ၰၵ-ႁ'",
        "'ႃ-ႄႇ-ႌႎႏ႐-႙ႚ-ႜ'",
        "'႞-႟Ⴀ-ჅჇჍა-ჺ჻ჼ'",
        "'ჽ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈ'",
        "'ኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅ'",
        "'ወ-ዖዘ-ጐጒ-ጕጘ-ፚ፠-፨'",
        "'፩-፼ᎀ-ᎏᎠ-Ᏼᐁ-ᙬ᙭-᙮'",
        "'ᙯ-ᙿᚁ-ᚚᚠ-ᛪ᛫-᛭ᛮ-ᛰ'",
        "'ᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱ᜵-᜶'",
        "'ᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳាើ-ៅ'",
        "'ះ-ៈ។-៖ៗ៘-៚ៜ០-៩'",
        "'᠐-᠙ᠠ-ᡂᡃᡄ-ᡷᢀ-ᢨᢪ'",
        "'ᢰ-ᣵᤀ-ᤞᤣ-ᤦᤩ-ᤫᤰ-ᤱ'",
        "'ᤳ-ᤸ᥆-᥏ᥐ-ᥭᥰ-ᥴᦀ-ᦫ'",
        "'ᦰ-ᧀᧁ-ᧇᧈ-ᧉ᧐-᧙᧚ᨀ-ᨖ'",
        "'ᨙ-ᨚ᨞-᨟ᨠ-ᩔᩕᩗᩡᩣ-ᩤ'",
        "'ᩭ-ᩲ᪀-᪉᪐-᪙᪠-᪦ᪧ᪨-᪭'",
        "'ᬄᬅ-ᬳᬵᬻᬽ-ᭁᭃ-᭄ᭅ-ᭋ'",
        "'᭐-᭙᭚-᭠᭡-᭪᭴-᭼ᮂᮃ-ᮠ'",
        "'ᮡᮦ-ᮧ᮪ᮮ-ᮯ᮰-᮹ᮺ-ᯥᯧ'",
        "'ᯪ-ᯬᯮ᯲-᯳᯼-᯿ᰀ-ᰣᰤ-ᰫ'",
        "'ᰴ-ᰵ᰻-᰿᱀-᱉ᱍ-ᱏ᱐-᱙'",
        "'ᱚ-ᱷᱸ-ᱽ᱾-᱿᳀-᳇᳓᳡'",
        "'ᳩ-ᳬᳮ-ᳱᳲ-ᳳᳵ-ᳶᴀ-ᴫ'",
        "'ᴬ-ᵪᵫ-ᵷᵸᵹ-ᶚᶛ-ᶿḀ-ἕ'",
        "'Ἐ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝ'",
        "'Ὗ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌ'",
        "'ῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ‎'",
        "'ⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝ'",
        "'ℤΩℨK-ℭℯ-ℴℵ-ℸℹ'",
        "'ℼ-ℿⅅ-ⅉⅎ⅏Ⅰ-ↂↃ-ↄ'",
        "'ↅ-ↈ⌶-⍺⎕⒜-ⓩ⚬⠀-⣿'",
        "'Ⰰ-Ⱞⰰ-ⱞⱠ-ⱻⱼ-ⱽⱾ-ⳤ'",
        "'Ⳬ-ⳮⳲ-ⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯ'",
        "'⵰ⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾ'",
        "'ⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々〆〇'",
        "'〡-〩〮-〯〱-〵〸-〺〻〼'",
        "'ぁ-ゖゝ-ゞゟァ-ヺー-ヾヿ'",
        "'ㄅ-ㄭㄱ-ㆎ㆐-㆑㆒-㆕㆖-㆟'",
        "'ㆠ-ㆺㇰ-ㇿ㈀-㈜㈠-㈩㈪-㉇'",
        "'㉈-㉏㉠-㉻㉿㊀-㊉㊊-㊰㋀-㋋'",
        "'㋐-㋾㌀-㍶㍻-㏝㏠-㏾㐀-䶵'",
        "'一-鿌ꀀ-ꀔꀕꀖ-ꒌꓐ-ꓷꓸ-ꓽ'",
        "'꓾-꓿ꔀ-ꘋꘌꘐ-ꘟ꘠-꘩ꘪ-ꘫ'",
        "'Ꙁ-ꙭꙮꚀ-ꚛꚜ-ꚝꚠ-ꛥꛦ-ꛯ'",
        "'꛲-꛷Ꜣ-ꝯꝰꝱ-ꞇ꞉-꞊Ꞌ-ꞎ'",
        "'Ꞑ-ꞭꞰ-Ʇꟷꟸ-ꟹꟺꟻ-ꠁ'",
        "'ꠃ-ꠅꠇ-ꠊꠌ-ꠢꠣ-ꠤꠧ꠰-꠵'",
        "'꠶-꠷ꡀ-ꡳꢀ-ꢁꢂ-ꢳꢴ-ꣃ'",
        "'꣎-꣏꣐-꣙ꣲ-ꣷ꣸-꣺ꣻ꤀-꤉'",
        "'ꤊ-ꤥ꤮-꤯ꤰ-ꥆꥒ-꥓꥟ꥠ-ꥼ'",
        "'ꦃꦄ-ꦲꦴ-ꦵꦺ-ꦻꦽ-꧀꧁-꧍'",
        "'ꧏ꧐-꧙꧞-꧟ꧠ-ꧤꧦꧧ-ꧯ'",
        "'꧰-꧹ꧺ-ꧾꨀ-ꨨꨯ-ꨰꨳ-ꨴ'",
        "'ꩀ-ꩂꩄ-ꩋꩍ꩐-꩙꩜-꩟ꩠ-ꩯ'",
        "'ꩰꩱ-ꩶ꩷-꩹ꩺꩻꩽꩾ-ꪯꪱ'",
        "'ꪵ-ꪶꪹ-ꪽꫀꫂꫛ-ꫜꫝ꫞-꫟'",
        "'ꫠ-ꫪꫫꫮ-ꫯ꫰-꫱ꫲꫳ-ꫴꫵ'",
        "'ꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮ'",
        "'ꬰ-ꭚ꭛ꭜ-ꭟꭤ-ꭥꯀ-ꯢꯣ-ꯤ'",
        "'ꯦ-ꯧꯩ-ꯪ꯫꯬꯰-꯹가-힣'",
        "'ힰ-ퟆퟋ-ퟻ-豈-舘並-龎'",
        "'ﬀ-ﬆﬓ-ﬗＡ-Ｚａ-ｚｦ-ｯｰ'",
        "'ｱ-ﾝﾞ-ﾟﾠ-ﾾￂ-ￇￊ-ￏ'",
        "'ￒ-ￗￚ-ￜ'",
        "'֐־׀׃׆׈-׏א-ת׫-ׯ'",
        "'װ-ײ׳-״׵-׿߀-߉ߊ-ߪ'",
        "'ߴ-ߵߺ߻-߿ࠀ-ࠕࠚࠤࠨ'",
        "'࠮-࠯࠰-࠾࠿ࡀ-ࡘ࡜-࡝࡞'",
        "'࡟-࢟‏יִײַ-ﬨשׁ-זּ﬷טּ-לּ'",
        "'﬽מּ﬿נּ-סּ﭂ףּ-פּ﭅צּ-ﭏ'",
        "'؈؋؍؛؜؝؞-؟ؠ-ؿـ'",
        "'ف-ي٭ٮ-ٯٱ-ۓ۔ەۥ-ۦ'",
        "'ۮ-ۯۺ-ۼ۽-۾ۿ܀-܍܎܏'",
        "'ܐܒ-ܯ݋-݌ݍ-ޥޱ޲-޿'",
        "'ࢠ-ࢲࢳ-ࣣﭐ-ﮱ﮲-﯁﯂-﯒'",
        "'ﯓ-ﴽ﵀-﵏ﵐ-ﶏ﶐-﶑ﶒ-ﷇ'",
        "'﷈-﷏ﷰ-ﷻ﷼﷾-﷿ﹰ-ﹴ﹵'",
        "'ﹶ-ﻼ﻽-﻾'",
        "'['",
        "']'",
        "'['",
        "']'",
        "'Fallback direction must be a strong direction'",
        "'use strict'",
        "'contains'",
        "'use strict'",
        "'undefined'",
        "'use strict'",
        "'backward'",
        "'atomic'",
        "'atomic'",
        "'unstyled'",
        "''",
        "'hasFocus'",
        "'insert-fragment'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "'.'",
        "'use strict'",
        "'characterList'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "\"this hasn't been initialised - super() hasn't been called\"",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"Super expression must either be null or a function, not \"",
        "'IE'",
        "'edit'",
        "'composite'",
        "'drag'",
        "'cut'",
        "'render'",
        "'placeholder-'",
        "'onBeforeInput'",
        "'onBlur'",
        "'onCharacterData'",
        "'onCompositionEnd'",
        "'onCompositionStart'",
        "'onCopy'",
        "'onCut'",
        "'onDragEnd'",
        "'onDragOver'",
        "'onDragStart'",
        "'onDrop'",
        "'onInput'",
        "'onFocus'",
        "'onKeyDown'",
        "'onKeyPress'",
        "'onKeyUp'",
        "'onMouseDown'",
        "'onMouseUp'",
        "'onPaste'",
        "'onSelect'",
        "'DraftEditor/root'",
        "'DraftEditor/alignLeft'",
        "'left'",
        "'DraftEditor/alignRight'",
        "'right'",
        "'DraftEditor/alignCenter'",
        "'center'",
        "'none'",
        "'pre-wrap'",
        "'break-word'",
        "'div'",
        "'div'",
        "'DraftEditor/editorContainer'",
        "'editor'",
        "'editorContainer'",
        "'div'",
        "'aria-activedescendant'",
        "'aria-autocomplete'",
        "'aria-describedby'",
        "'aria-expanded'",
        "'aria-haspopup'",
        "'aria-label'",
        "'aria-owns'",
        "'public/DraftEditor/content'",
        "'data-testid'",
        "'editor'",
        "'textbox'",
        "'edit'",
        "'AutoUrlDetect'",
        "'edit'",
        "''",
        "'use strict'",
        "''",
        "''",
        "''",
        "'insert-characters'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "\"this hasn't been initialised - super() hasn't been called\"",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"Super expression must either be null or a function, not \"",
        "'unstyled'",
        "'li'",
        "'data-block'",
        "'data-editor'",
        "'data-offset-key'",
        "'-wrap'",
        "'data-offset-key'",
        "'div'",
        "'data-contents'",
        "'true'",
        "'public/DraftStyleDefault/unorderedListItem'",
        "'unordered-list-item'",
        "'public/DraftStyleDefault/orderedListItem'",
        "'ordered-list-item'",
        "'public/DraftStyleDefault/reset'",
        "'public/DraftStyleDefault/depth0'",
        "'public/DraftStyleDefault/depth1'",
        "'public/DraftStyleDefault/depth2'",
        "'public/DraftStyleDefault/depth3'",
        "'public/DraftStyleDefault/depth4'",
        "'public/DraftStyleDefault/listLTR'",
        "'LTR'",
        "'public/DraftStyleDefault/listRTL'",
        "'RTL'",
        "'use strict'",
        "'internal'",
        "'external'",
        "'insert-fragment'",
        "'insert-fragment'",
        "'use strict'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "\"this hasn't been initialised - super() hasn't been called\"",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"Super expression must either be null or a function, not \"",
        "'BR'",
        "'\\n'",
        "'\\n'",
        "' '",
        "'span'",
        "'data-offset-key'",
        "'leaf'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "\"this hasn't been initialised - super() hasn't been called\"",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"Super expression must either be null or a function, not \"",
        "'public/DraftEditorPlaceholder/root'",
        "'public/DraftEditorPlaceholder/hasFocus'",
        "'div'",
        "'div'",
        "'public/DraftEditorPlaceholder/inner'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "\"this hasn't been initialised - super() hasn't been called\"",
        "\"object\"",
        "\"function\"",
        "\"function\"",
        "\"Super expression must either be null or a function, not \"",
        "'IE <= 11'",
        "'\\n'",
        "'BR'",
        "'span'",
        "'A'",
        "'data-text'",
        "'true'",
        "'\\n'",
        "'br'",
        "'A'",
        "'data-text'",
        "'true'",
        "'span'",
        "'B'",
        "'data-text'",
        "'true'",
        "'\\n'",
        "'br'",
        "'B'",
        "'data-text'",
        "'true'",
        "''",
        "''",
        "'span'",
        "'A'",
        "'B'",
        "'data-text'",
        "'true'",
        "'use strict'",
        "' '",
        "'forward'",
        "' '",
        "' '",
        "'forward'",
        "'use strict'",
        "'unstyled'",
        "'use strict'",
        "'use strict'",
        "'LINK'",
        "'bold'",
        "'BOLD'",
        "'italic'",
        "'ITALIC'",
        "'underline'",
        "'UNDERLINE'",
        "'code'",
        "'backspace'",
        "'backspace-word'",
        "'backspace-to-start-of-line'",
        "'delete'",
        "'delete-word'",
        "'delete-to-end-of-block'",
        "'\\n'",
        "'insert-characters'",
        "'atomic'",
        "'backward'",
        "'remove-range'",
        "'change-block-type'",
        "'atomic'",
        "'forward'",
        "'remove-range'",
        "'unordered-list-item'",
        "'ordered-list-item'",
        "'unordered-list-item'",
        "'ordered-list-item'",
        "'adjust-depth'",
        "'atomic'",
        "'unstyled'",
        "'change-block-type'",
        "'code-block'",
        "'CODE'",
        "'change-inline-style'",
        "'apply-entity'",
        "'code-block'",
        "'code-block'",
        "'unstyled'",
        "'unstyled'",
        "'use strict'",
        "'focusOffset'",
        "'forward'",
        "'remove-range'",
        "'insert-fragment'",
        "'use strict'",
        "'depth'",
        "'use strict'",
        "'characterList'",
        "'use strict'",
        "'use strict'",
        "''",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'\\''",
        "'\\/'",
        "'Firefox'",
        "'insert-characters'",
        "'use strict'",
        "'WebKit'",
        "'hasFocus'",
        "'use strict'",
        "'composite'",
        "'use strict'",
        "'use strict'",
        "'cut'",
        "'forward'",
        "'remove-range'",
        "'use strict'",
        "'drag'",
        "'use strict'",
        "'drag'",
        "'use strict'",
        "'hasFocus'",
        "'use strict'",
        "'Gecko'",
        "'\\n\\n'",
        "'leaves'",
        "'MUTABLE'",
        "'spellcheck-change'",
        "'apply-entity'",
        "'use strict'",
        "'Chrome'",
        "'redo'",
        "'delete'",
        "'delete-word'",
        "'backspace'",
        "'backspace-word'",
        "'backspace-to-start-of-line'",
        "'split-block'",
        "'transpose-characters'",
        "'move-selection-to-start-of-block'",
        "'move-selection-to-end-of-block'",
        "'secondary-cut'",
        "'secondary-paste'",
        "' '",
        "'insert-characters'",
        "'undo'",
        "'use strict'",
        "'insert-fragment'",
        "'com.apple.webarchive'",
        "'text/html'",
        "'insert-fragment'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'div'",
        "'absolute'",
        "'M'",
        "'expandRangeToStartOfLine: Provided range is not collapsed.'",
        "'Found unexpected detached subtree when traversing.'",
        "'inline'",
        "'use strict'",
        "'MUTABLE'",
        "'There should only be one entity range within this removal range.'",
        "'IMMUTABLE'",
        "'use strict'",
        "'hasFocus'",
        "'use strict'",
        "'use strict'",
        "'Entity key not found in this range.'",
        "'use strict'",
        "'use strict'",
        "'`insertFragment` should only be called with a collapsed selection state.'",
        "'key'",
        "'use strict'",
        "'`insertText` should only be called with a collapsed range.'",
        "'use strict'",
        "'backward'",
        "'remove-range'",
        "'use strict'",
        "'backward'",
        "'remove-range'",
        "'use strict'",
        "'forward'",
        "'remove-range'",
        "'use strict'",
        "'split-block'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'backward'",
        "'selectionBefore'",
        "'backspace-character'",
        "'remove-range'",
        "'use strict'",
        "'forward'",
        "'selectionBefore'",
        "'delete-character'",
        "'remove-range'",
        "'use strict'",
        "'anchorOffset'",
        "'focusOffset'",
        "'anchorOffset'",
        "'backward'",
        "'insert-fragment'",
        "'use strict'",
        "'spellcheck-change'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'Selection range must be collapsed.'",
        "'use strict'",
        "'use strict'",
        "'image'",
        "'jpeg'",
        "'pjpeg'",
        "'/'",
        "'use strict'",
        "'[.,+*?$|#{}()\\'\\\\^\\\\-\\\\[\\\\]\\\\\\\\\\\\/!@%\"~=<>_:;'",
        "'・、。〈-】〔-〟：-？！-／'",
        "'［-｀｛-･⸮؟٪-٬؛،؍'",
        "'﴾﴿᠁।၊။‐-‧‰-⁞'",
        "'¡-±´-¸º»¿]'",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "'use strict'",
        "\"Cannot call a class as a function\"",
        "'Default direction must be a strong direction (LTR or RTL)'",
        "'use strict'",
        "'Unknown'",
        "'Mac OS'",
        "'Mac OS X'",
        "''",
        "''",
        "'.'",
        "'use strict'",
        "'the \"-\" operator expects exactly 2 operands'",
        "'operands to the \"-\" operator must be simple (no modifiers)'",
        "'>='",
        "'<='",
        "''",
        "'<'",
        "'<='",
        "'>='",
        "'>'",
        "'~'",
        "'~>'",
        "''",
        "'expected regex to match but it did not'",
        "'0'",
        "'0'",
        "'*'",
        "'0'",
        "'\"a\" and \"b\" must be of the same type'",
        "\"use strict\"",
        "'use strict'",
        "'object'",
        "'function'",
        "'toArray: Array-like object expected'",
        "'number'",
        "'toArray: Object needs a length property'",
        "'toArray: Object should have keys for indices'",
        "'function'",
        "'toArray: Object can\\'t be `arguments`. Use rest params '",
        "'(function(...args) {}) or Array.from() instead.'",
        "'object'",
        "'function'",
        "'length'",
        "'setInterval'",
        "'number'",
        "'callee'",
        "'item'",
        "'use strict'",
        "'undefined'",
        "'AppleWebKit'",
        "'CSS1Compat'",
        "'use strict'",
        "'use strict'",
        "'getBoundingClientRect'",
        "'use strict'",
        "'display'",
        "'none'",
        "'float'",
        "'use strict'",
        "\"use strict\"",
        "'use strict'",
        "'-$1'",
        "'use strict'",
        "'function'",
        "'object'",
        "'number'",
        "'string'",
        "'use strict'",
        "'use strict'",
        "''",
        "' '",
        "''",
        "'use strict'",
        "'use strict'",
        "'use strict'",
        "'0.7.10'",
        "''",
        "'?'",
        "'function'",
        "'undefined'",
        "'object'",
        "'string'",
        "'major'",
        "'model'",
        "'name'",
        "'type'",
        "'vendor'",
        "'version'",
        "'architecture'",
        "'console'",
        "'mobile'",
        "'tablet'",
        "'smarttv'",
        "'wearable'",
        "'embedded'",
        "\"browser cpu device engine os\"",
        "\"string\"",
        "\".\"",
        "'1.0'",
        "'/8'",
        "'1.2'",
        "'/1'",
        "'1.3'",
        "'/3'",
        "'2.0'",
        "'/412'",
        "'2.0.2'",
        "'/416'",
        "'2.0.3'",
        "'/417'",
        "'2.0.4'",
        "'/419'",
        "'?'",
        "'/'",
        "'Fire Phone'",
        "'SD'",
        "'KF'",
        "'Evo Shift 4G'",
        "'7373KT'",
        "'HTC'",
        "'APA'",
        "'Sprint'",
        "'Sprint'",
        "'ME'",
        "'4.90'",
        "'NT 3.11'",
        "'NT3.51'",
        "'NT 4.0'",
        "'NT4.0'",
        "'2000'",
        "'NT 5.0'",
        "'XP'",
        "'NT 5.1'",
        "'NT 5.2'",
        "'Vista'",
        "'NT 6.0'",
        "'7'",
        "'NT 6.1'",
        "'8'",
        "'NT 6.2'",
        "'8.1'",
        "'NT 6.3'",
        "'10'",
        "'NT 6.4'",
        "'NT 10.0'",
        "'RT'",
        "'ARM'",
        "'Opera'",
        "'IE'",
        "'Yandex'",
        "' '",
        "'UCBrowser'",
        "'Dolphin'",
        "'Chrome'",
        "'MIUI Browser'",
        "'Android Browser'",
        "'Facebook'",
        "'Firefox'",
        "'Mobile Safari'",
        "'Netscape'",
        "'amd64'",
        "'ia32'",
        "'arm'",
        "''",
        "'sparc'",
        "'Apple'",
        "'Apple TV'",
        "'Apple'",
        "'Amazon'",
        "'Amazon'",
        "'Apple'",
        "'BlackBerry'",
        "'Asus'",
        "'Sony'",
        "'Xperia Tablet'",
        "'Sony'",
        "'Xperia Phone'",
        "'Nvidia'",
        "'Sony'",
        "' '",
        "'HTC'",
        "'Microsoft'",
        "' '",
        "'Microsoft'",
        "'Motorola'",
        "'Motorola'",
        "'Samsung'",
        "'Samsung'",
        "'Sharp'",
        "'Siemens'",
        "'Nokia'",
        "'Acer'",
        "'LG'",
        "'LG'",
        "'Lenovo'",
        "'Google'",
        "' '",
        "'Xiaomi'",
        "'EdgeHTML'",
        "'Windows'",
        "'BlackBerry'",
        "'Symbian'",
        "'Firefox OS'",
        "'Chromium OS'",
        "'Solaris'",
        "'iOS'",
        "'.'",
        "'Mac OS'",
        "'.'",
        "\"function\"",
        "'object'"
    ],
    "variables": [
        "Draft",
        "installedModules",
        "AtomicBlockUtils",
        "BlockMapBuilder",
        "CharacterMetadata",
        "CompositeDraftDecorator",
        "ContentBlock",
        "ContentState",
        "DefaultDraftBlockRenderMap",
        "DefaultDraftInlineStyle",
        "DraftEditor",
        "DraftEditorBlock",
        "DraftModifier",
        "DraftEntity",
        "DraftEntityInstance",
        "EditorState",
        "KeyBindingUtil",
        "RichTextEditorUtil",
        "SelectionState",
        "convertFromDraftStateToRaw",
        "convertFromHTMLToContentBlocks",
        "convertFromRawToDraftState",
        "generateRandomKey",
        "getDefaultKeyBinding",
        "getVisibleSelectionRect",
        "DraftPublic",
        "_assign",
        "_extends",
        "i",
        "source",
        "BlockTree",
        "ContentState",
        "EditorBidiService",
        "Immutable",
        "SelectionState",
        "OrderedSet",
        "defaultRecord",
        "EditorStateRecord",
        "EditorState",
        "firstKey",
        "currentContent",
        "decorator",
        "recordConfig",
        "existingDecorator",
        "decorator",
        "existingDecorator",
        "newContent",
        "treeMap",
        "newTreeMap",
        "existingContent",
        "content",
        "selection",
        "firstKey",
        "content",
        "blockMap",
        "last",
        "end",
        "content",
        "lastBlock",
        "lastKey",
        "length",
        "afterSelectionMove",
        "forceSelection",
        "directionMap",
        "selection",
        "currentContent",
        "undoStack",
        "newContent",
        "contentState",
        "inlineStyleOverride",
        "editorStateChanges",
        "undoStack",
        "newCurrentContent",
        "currentContent",
        "directionMap",
        "redoStack",
        "newCurrentContent",
        "currentContent",
        "directionMap",
        "prevBlockMap",
        "prevTreeMap",
        "lastChangeType",
        "startKey",
        "startOffset",
        "startBlock",
        "startKey",
        "startOffset",
        "startBlock",
        "previousBlock",
        "previousLength",
        "error",
        "args",
        "argIndex",
        "CharacterMetadata",
        "ContentStateInlineStyle",
        "Immutable",
        "applyEntityToContentState",
        "getCharacterRemovalRange",
        "getContentStateFragment",
        "insertFragmentIntoContentState",
        "insertTextIntoContentState",
        "invariant",
        "modifyBlockForContentState",
        "removeEntitiesAtEdges",
        "removeRangeFromContentState",
        "splitBlockInContentState",
        "OrderedSet",
        "DraftModifier",
        "withoutEntities",
        "withoutText",
        "character",
        "movedFragment",
        "afterRemoval",
        "withoutEntities",
        "withoutText",
        "key",
        "startOffset",
        "endOffset",
        "block",
        "startEntity",
        "endEntity",
        "adjustedRemovalRange",
        "withoutEntities",
        "withoutEntities",
        "withoutText",
        "withoutEntities",
        "nullthrows",
        "_require",
        "OrderedSet",
        "EMPTY_SET",
        "defaultRecord",
        "CharacterMetadataRecord",
        "CharacterMetadata",
        "withStyle",
        "withoutStyle",
        "withEntity",
        "configMap",
        "existing",
        "newCharacter",
        "EMPTY",
        "pool",
        "seenKeys",
        "MULTIPLIER",
        "key",
        "UserAgentData",
        "VersionRange",
        "mapObject",
        "memoizeStringOnly",
        "UserAgent",
        "_assign",
        "_extends",
        "i",
        "source",
        "DraftEntityInstance",
        "Immutable",
        "invariant",
        "instances",
        "instanceKey",
        "DraftEntity",
        "key",
        "instance",
        "instance",
        "newData",
        "newInstance",
        "instance",
        "newInstance",
        "Immutable",
        "findRangesImmutable",
        "OrderedSet",
        "EMPTY_SET",
        "defaultRecord",
        "ContentBlockRecord",
        "ContentBlock",
        "character",
        "character",
        "invariant",
        "SURROGATE_HIGH_START",
        "SURROGATE_HIGH_END",
        "SURROGATE_LOW_START",
        "SURROGATE_LOW_END",
        "SURROGATE_UNITS_REGEX",
        "first",
        "second",
        "len",
        "pos",
        "size",
        "posA",
        "posB",
        "size",
        "length",
        "codePoints",
        "pos",
        "UnicodeUtils",
        "hasOwnProperty",
        "propIsEnumerable",
        "test1",
        "test2",
        "i",
        "order2",
        "test3",
        "to",
        "symbols",
        "s",
        "i",
        "Immutable",
        "defaultRecord",
        "SelectionStateRecord",
        "SelectionState",
        "anchorKey",
        "focusKey",
        "selectionStart",
        "selectionEnd",
        "offsetToCheck",
        "Immutable",
        "OrderedMap",
        "BlockMapBuilder",
        "DraftModifier",
        "selection",
        "content",
        "target",
        "selection",
        "KEY_DELIMITER",
        "DraftOffsetKey",
        "_offsetKey$split",
        "blockKey",
        "decoratorKey",
        "leafKey",
        "cursor",
        "generateRandomKey",
        "removeEntitiesAtEdges",
        "startKey",
        "startOffset",
        "endKey",
        "endOffset",
        "contentWithoutEdgeEntities",
        "blockMap",
        "blockKeys",
        "startIndex",
        "endIndex",
        "newKey",
        "text",
        "chars",
        "BlockMapBuilder",
        "CharacterMetadata",
        "ContentBlock",
        "Immutable",
        "SelectionState",
        "generateRandomKey",
        "sanitizeDraftText",
        "Repeat",
        "defaultRecord",
        "ContentStateRecord",
        "ContentState",
        "block",
        "blockMap",
        "blockMap",
        "selectionState",
        "delimiter",
        "strings",
        "blocks",
        "_require",
        "React",
        "cx",
        "UL_WRAP",
        "OL_WRAP",
        "PRE_WRAP",
        "UserAgent",
        "isOSX",
        "KeyBindingUtil",
        "getSelectionOffsetKeyForNode",
        "searchNode",
        "node",
        "key",
        "DraftEntity",
        "entityKey",
        "key",
        "offset",
        "startKey",
        "startOffset",
        "startBlock",
        "entity",
        "selection",
        "content",
        "key",
        "offset",
        "focusKey",
        "key",
        "focusOffset",
        "keyBefore",
        "blockBefore",
        "REGEX_BLOCK_DELIMITER",
        "getStyleProperty",
        "overflow",
        "Style",
        "invariant",
        "NEUTRAL",
        "LTR",
        "RTL",
        "globalDir",
        "UnicodeBidiDirection",
        "emptyFunction",
        "getDocumentScrollElement",
        "getUnboundedScrollPosition",
        "documentScrollElement",
        "scrollPosition",
        "viewport",
        "xMax",
        "yMax",
        "Immutable",
        "emptyFunction",
        "findRangesImmutable",
        "Repeat",
        "returnTrue",
        "FINGERPRINT_DELIMITER",
        "defaultLeafRange",
        "LeafRange",
        "defaultDecoratorRange",
        "DecoratorRange",
        "BlockTree",
        "textLength",
        "leafSets",
        "decorations",
        "chars",
        "decoratorKey",
        "fingerprintString",
        "leaves",
        "inlineStyles",
        "_assign",
        "_extends",
        "i",
        "source",
        "ContentBlock",
        "DraftEditorLeaf",
        "DraftOffsetKey",
        "React",
        "ReactDOM",
        "Scroll",
        "SelectionState",
        "Style",
        "UnicodeBidi",
        "UnicodeBidiDirection",
        "cx",
        "getElementPosition",
        "getScrollPosition",
        "getViewportDimensions",
        "nullthrows",
        "SCROLL_BUFFER",
        "DraftEditorBlock",
        "selection",
        "endKey",
        "blockNode",
        "scrollParent",
        "scrollPosition",
        "scrollDelta",
        "nodePosition",
        "nodeBottom",
        "viewportHeight",
        "blockBottom",
        "scrollBottom",
        "_this2",
        "block",
        "blockKey",
        "text",
        "lastLeafSet",
        "hasSelection",
        "leavesForLeafSet",
        "lastLeaf",
        "leaves",
        "offsetKey",
        "start",
        "end",
        "decoratorKey",
        "decorator",
        "DecoratorComponent",
        "decoratorProps",
        "decoratorOffsetKey",
        "decoratedText",
        "dir",
        "_props",
        "direction",
        "offsetKey",
        "className",
        "Immutable",
        "DraftEntityInstanceRecord",
        "DraftEntityInstance",
        "TokenizeUtil",
        "punctuation",
        "CHAMELEON_CHARS",
        "WHITESPACE_AND_PUNCTUATION",
        "DELETE_STRING",
        "DELETE_REGEX",
        "BACKSPACE_STRING",
        "BACKSPACE_REGEX",
        "matches",
        "DraftRemovableWord",
        "DraftStringKey",
        "CharacterMetadata",
        "ContentBlock",
        "DefaultDraftBlockRenderMap",
        "DraftEntity",
        "Immutable",
        "URI",
        "generateRandomKey",
        "getSafeBodyFromHTML",
        "invariant",
        "nullthrows",
        "sanitizeDraftText",
        "OrderedSet",
        "NBSP",
        "SPACE",
        "MAX_DEPTH",
        "REGEX_CR",
        "REGEX_LF",
        "REGEX_NBSP",
        "REGEX_CARRIAGE",
        "REGEX_ZWS",
        "boldValues",
        "notBoldValues",
        "inlineTags",
        "anchorAttr",
        "lastBlock",
        "entities",
        "unstyledElement",
        "ii",
        "matchType",
        "matchedTypes",
        "styleToCheck",
        "htmlElement",
        "node",
        "fontWeight",
        "fontStyle",
        "textDecoration",
        "lastInA",
        "firstInB",
        "protocol",
        "nodeName",
        "newBlock",
        "nextBlockType",
        "lastLastBlock",
        "lastBlock",
        "text",
        "chunk",
        "newChunk",
        "child",
        "entityId",
        "anchor",
        "child",
        "entityConfig",
        "anchorAttribute",
        "sibling",
        "supportedBlockTags",
        "safeBody",
        "workingBlocks",
        "chunk",
        "DOMBuilder",
        "blockRenderMap",
        "chunk",
        "start",
        "end",
        "inlines",
        "entities",
        "characterList",
        "data",
        "KeyBindingUtil",
        "Keys",
        "UserAgent",
        "isOSX",
        "isWindows",
        "shouldFixFirefoxMovement",
        "hasCommandModifier",
        "isCtrlKeyCommand",
        "findAncestorOffsetKey",
        "getSelectionOffsetKeyForNode",
        "getUpdatedSelectionState",
        "invariant",
        "nullthrows",
        "anchorIsTextNode",
        "focusIsTextNode",
        "anchorPoint",
        "focusPoint",
        "needsRecovery",
        "node",
        "startNode",
        "offsetKey",
        "key",
        "firstLeaf",
        "nodeBeforeCursor",
        "leafKey",
        "textLength",
        "lastLeaf",
        "textContent",
        "getContentStateFragment",
        "selectionState",
        "UserAgent",
        "invariant",
        "isChrome",
        "tempRange",
        "clientRects",
        "ancestor",
        "atCommonAncestor",
        "rects",
        "_ref",
        "getRangeClientRects",
        "UserAgent",
        "isOldIE",
        "doc",
        "root",
        "offsetKey",
        "ii",
        "childOffsetKey",
        "TEXT_CLIPPING_REGEX",
        "TEXT_TYPES",
        "TEXT_SIZE_UPPER_BOUND",
        "readCount",
        "results",
        "contents",
        "reader",
        "DraftOffsetKey",
        "nullthrows",
        "selection",
        "anchorPath",
        "anchorBlockKey",
        "anchorLeaf",
        "focusPath",
        "focusBlockKey",
        "focusLeaf",
        "anchorLeafStart",
        "focusLeafStart",
        "anchorBlockOffset",
        "focusBlockOffset",
        "areEqual",
        "isBackward",
        "anchorLeafEnd",
        "focusLeafEnd",
        "startKey",
        "head",
        "tail",
        "selection",
        "anchorKey",
        "blockTree",
        "offset",
        "isAtStart",
        "leafStart",
        "selection",
        "key",
        "offset",
        "content",
        "focusKey",
        "key",
        "focusOffset",
        "block",
        "CharacterMetadata",
        "DraftEntity",
        "findRangesImmutable",
        "invariant",
        "blockMap",
        "updatedBlocks",
        "startKey",
        "startOffset",
        "startBlock",
        "updatedStart",
        "endKey",
        "endOffset",
        "endBlock",
        "updatedEnd",
        "removalRange",
        "chars",
        "charBefore",
        "charAfter",
        "entityBeforeCursor",
        "entityAfterCursor",
        "entity",
        "_getRemovalRange",
        "start",
        "end",
        "current",
        "PhotosMimeType",
        "createArrayFromMixed",
        "emptyFunction",
        "CR_LF_REGEX",
        "LF_ONLY",
        "RICH_TEXT_TYPES",
        "DataTransfer",
        "text",
        "url",
        "isImage",
        "items",
        "i",
        "Scroll",
        "doc",
        "doc",
        "doc",
        "doc",
        "UnicodeBidiDirection",
        "invariant",
        "RANGE_BY_BIDI_TYPE",
        "REGEX_STRONG",
        "REGEX_RTL",
        "match",
        "strongChar",
        "blockDir",
        "UnicodeBidi",
        "isTextNode",
        "BlockMapBuilder",
        "CharacterMetadata",
        "ContentBlock",
        "DraftModifier",
        "EditorState",
        "Immutable",
        "generateRandomKey",
        "Repeat",
        "AtomicBlockUtils",
        "contentState",
        "selectionState",
        "afterRemoval",
        "targetSelection",
        "afterSplit",
        "insertionTarget",
        "asAtomicBlock",
        "charData",
        "fragmentArray",
        "fragment",
        "withAtomicBlock",
        "newContent",
        "Immutable",
        "DELIMITER",
        "CompositeDraftDecorator",
        "decorations",
        "counter",
        "strategy",
        "componentKey",
        "componentKey",
        "ii",
        "start",
        "ii",
        "start",
        "CharacterMetadata",
        "_require",
        "ContentStateInlineStyle",
        "blockMap",
        "startKey",
        "startOffset",
        "endKey",
        "endOffset",
        "newBlocks",
        "sliceStart",
        "sliceEnd",
        "chars",
        "current",
        "_assign",
        "_extends",
        "i",
        "source",
        "DefaultDraftBlockRenderMap",
        "DefaultDraftInlineStyle",
        "DraftEditorCompositionHandler",
        "DraftEditorContents",
        "DraftEditorDragHandler",
        "DraftEditorEditHandler",
        "DraftEditorPlaceholder",
        "EditorState",
        "React",
        "ReactDOM",
        "Scroll",
        "Style",
        "UserAgent",
        "cx",
        "emptyFunction",
        "generateRandomKey",
        "getDefaultKeyBinding",
        "nullthrows",
        "getScrollPosition",
        "isIE",
        "allowSpellCheck",
        "handlerMap",
        "DraftEditor",
        "_this",
        "_this2",
        "method",
        "_props",
        "readOnly",
        "textAlignment",
        "rootClass",
        "contentStyle",
        "editorState",
        "alreadyHasFocus",
        "editorNode",
        "scrollParent",
        "_ref",
        "x",
        "y",
        "_this3",
        "DraftModifier",
        "EditorState",
        "Keys",
        "getEntityKeyForSelection",
        "isSelectionAtLeafStart",
        "RESOLVE_DELAY",
        "resolved",
        "stillComposing",
        "textInputData",
        "DraftEditorCompositionHandler",
        "_this",
        "composedChars",
        "textInputData",
        "editorState",
        "currentStyle",
        "entityKey",
        "mustReset",
        "contentState",
        "_assign",
        "_extends",
        "i",
        "source",
        "DraftEditorBlock",
        "DraftOffsetKey",
        "EditorState",
        "React",
        "cx",
        "joinClasses",
        "nullthrows",
        "DraftEditorContents",
        "prevEditorState",
        "nextEditorState",
        "prevDirectionMap",
        "nextDirectionMap",
        "didHaveFocus",
        "nowHasFocus",
        "nextNativeContent",
        "wasComposing",
        "nowComposing",
        "prevContent",
        "nextContent",
        "prevDecorator",
        "nextDecorator",
        "_props",
        "blockRenderMap",
        "blockRendererFn",
        "customStyleMap",
        "customStyleFn",
        "editorState",
        "content",
        "selection",
        "forceSelection",
        "decorator",
        "directionMap",
        "blocksAsArray",
        "processedBlocks",
        "currentDepth",
        "lastWrapperTemplate",
        "ii",
        "_block",
        "key",
        "blockType",
        "customRenderer",
        "CustomComponent",
        "customProps",
        "customEditable",
        "direction",
        "offsetKey",
        "componentProps",
        "configForType",
        "wrapperTemplate",
        "_Element",
        "depth",
        "className",
        "shouldResetCount",
        "Component",
        "childProps",
        "child",
        "outputBlocks",
        "_ii",
        "info",
        "blocks",
        "wrapperElement",
        "DataTransfer",
        "DraftModifier",
        "EditorState",
        "findAncestorOffsetKey",
        "getTextContentFromFiles",
        "getUpdatedSelectionState",
        "nullthrows",
        "isEventHandled",
        "node",
        "offset",
        "dropRange",
        "offsetKey",
        "DraftEditorDragHandler",
        "_this",
        "data",
        "editorState",
        "dropSelection",
        "files",
        "dragType",
        "newContentState",
        "newContentState",
        "onBeforeInput",
        "onBlur",
        "onCompositionStart",
        "onCopy",
        "onCut",
        "onDragOver",
        "onDragStart",
        "onFocus",
        "onInput",
        "onKeyDown",
        "onPaste",
        "onSelect",
        "DraftEditorEditHandler",
        "_assign",
        "DraftEditorTextNode",
        "React",
        "ReactDOM",
        "SelectionState",
        "setDraftEditorSelection",
        "DraftEditorLeaf",
        "selection",
        "_props",
        "blockKey",
        "start",
        "text",
        "end",
        "node",
        "child",
        "targetNode",
        "text",
        "_props2",
        "customStyleMap",
        "customStyleFn",
        "offsetKey",
        "styleSet",
        "styleObj",
        "mergedStyles",
        "style",
        "newStyles",
        "React",
        "cx",
        "DraftEditorPlaceholder",
        "hasFocus",
        "className",
        "React",
        "ReactDOM",
        "UserAgent",
        "useNewlineChar",
        "NEWLINE_A",
        "NEWLINE_B",
        "DraftEditorTextNode",
        "_this",
        "node",
        "shouldBeNewline",
        "DraftEntitySegments",
        "segments",
        "segmentStart",
        "entityStart",
        "segmentEnd",
        "segment",
        "removalStart",
        "removalEnd",
        "jj",
        "entityEnd",
        "atStart",
        "atEnd",
        "CharacterMetadata",
        "ContentBlock",
        "Immutable",
        "convertFromHTMLtoContentBlocks",
        "generateRandomKey",
        "getSafeBodyFromHTML",
        "sanitizeDraftText",
        "Repeat",
        "DraftPasteProcessor",
        "Immutable",
        "UnicodeBidiService",
        "nullthrows",
        "OrderedMap",
        "bidiService",
        "EditorBidiService",
        "blockMap",
        "nextBidi",
        "bidiMap",
        "DraftEntity",
        "DraftModifier",
        "EditorState",
        "SelectionState",
        "adjustBlockDepthForContentState",
        "nullthrows",
        "RichTextEditorUtil",
        "selection",
        "entity",
        "selection",
        "contentState",
        "newEditorState",
        "selection",
        "content",
        "startKey",
        "blockBefore",
        "atomicBlockTarget",
        "asCurrentStyle",
        "withoutAtomicBlock",
        "withoutBlockStyle",
        "selection",
        "content",
        "startKey",
        "block",
        "length",
        "blockAfter",
        "atomicBlockTarget",
        "withoutAtomicBlock",
        "selection",
        "key",
        "content",
        "block",
        "blockAbove",
        "typeAbove",
        "depth",
        "withAdjustment",
        "selection",
        "startKey",
        "endKey",
        "content",
        "target",
        "selection",
        "blockBefore",
        "hasAtomicBlock",
        "typeToSet",
        "selection",
        "anchorKey",
        "focusKey",
        "selection",
        "currentStyle",
        "content",
        "newContent",
        "withoutLink",
        "selection",
        "offset",
        "key",
        "content",
        "block",
        "blockBefore",
        "DraftModifier",
        "EditorState",
        "getContentStateFragment",
        "nullthrows",
        "clipboard",
        "SecondaryClipboard",
        "content",
        "selection",
        "targetRange",
        "anchorKey",
        "blockEnd",
        "afterRemoval",
        "newContent",
        "startKey",
        "endKey",
        "blockMap",
        "blocks",
        "depth",
        "CharacterMetadata",
        "characterList",
        "Immutable",
        "applyEntityToContentBlock",
        "blockMap",
        "startKey",
        "startOffset",
        "endKey",
        "endOffset",
        "newBlocks",
        "sliceStart",
        "sliceEnd",
        "DraftEntity",
        "DraftStringKey",
        "encodeEntityRanges",
        "encodeInlineStyleRanges",
        "entityStorageKey",
        "entityStorageMap",
        "rawBlocks",
        "stringifiedEntityKey",
        "entityKeys",
        "flippedStorageMap",
        "entity",
        "_assign",
        "_extends",
        "i",
        "source",
        "ContentBlock",
        "ContentState",
        "DraftEntity",
        "Immutable",
        "createCharacterList",
        "decodeEntityRanges",
        "decodeInlineStyleRanges",
        "generateRandomKey",
        "blocks",
        "entityMap",
        "fromStorageToLocal",
        "encodedEntity",
        "mutability",
        "data",
        "newKey",
        "contentBlocks",
        "key",
        "text",
        "depth",
        "inlineStyleRanges",
        "entityRanges",
        "data",
        "inlineStyles",
        "filteredEntityRanges",
        "entities",
        "characterList",
        "CharacterMetadata",
        "Immutable",
        "characterArray",
        "entity",
        "UnicodeUtils",
        "substr",
        "entities",
        "start",
        "end",
        "ii",
        "start",
        "UnicodeUtils",
        "_require",
        "OrderedSet",
        "substr",
        "EMPTY_SET",
        "styles",
        "cursor",
        "end",
        "BlockTree",
        "DraftModifier",
        "EditorState",
        "UserAgent",
        "getEntityKeyForSelection",
        "isSelectionAtLeafStart",
        "nullthrows",
        "isEventHandled",
        "FF_QUICKFIND_CHAR",
        "FF_QUICKFIND_LINK_CHAR",
        "isFirefox",
        "contentState",
        "chars",
        "editorState",
        "selection",
        "mayAllowNative",
        "newEditorState",
        "anchorKey",
        "anchorTree",
        "originalFingerprint",
        "newFingerprint",
        "EditorState",
        "UserAgent",
        "getActiveElement",
        "isWebKit",
        "editorState",
        "currentSelection",
        "selection",
        "EditorState",
        "getFragmentFromSelection",
        "editorState",
        "selection",
        "DraftModifier",
        "EditorState",
        "Style",
        "getFragmentFromSelection",
        "getScrollPosition",
        "_this",
        "editorState",
        "selection",
        "scrollParent",
        "_getScrollPosition",
        "x",
        "y",
        "fragment",
        "newContent",
        "EditorState",
        "editorState",
        "currentSelection",
        "selection",
        "DraftModifier",
        "DraftOffsetKey",
        "EditorState",
        "Entity",
        "UserAgent",
        "findAncestorOffsetKey",
        "nullthrows",
        "isGecko",
        "DOUBLE_NEWLINE",
        "domSelection",
        "anchorNode",
        "isCollapsed",
        "domText",
        "editorState",
        "offsetKey",
        "_DraftOffsetKey$decod",
        "blockKey",
        "decoratorKey",
        "leafKey",
        "_editorState$getBlock",
        "start",
        "end",
        "content",
        "block",
        "modelText",
        "selection",
        "targetRange",
        "entityKey",
        "entity",
        "entityType",
        "preserveEntity",
        "changeType",
        "newContent",
        "anchorOffset",
        "focusOffset",
        "startOffset",
        "endOffset",
        "charDelta",
        "contentWithAdjustedDOMSelection",
        "DraftModifier",
        "EditorState",
        "KeyBindingUtil",
        "Keys",
        "SecondaryClipboard",
        "UserAgent",
        "keyCommandBackspaceToStartOfLine",
        "keyCommandBackspaceWord",
        "keyCommandDeleteWord",
        "keyCommandInsertNewline",
        "keyCommandPlainBackspace",
        "keyCommandPlainDelete",
        "keyCommandMoveSelectionToEndOfBlock",
        "keyCommandMoveSelectionToStartOfBlock",
        "keyCommandTransposeCharacters",
        "keyCommandUndo",
        "isEventHandled",
        "isOptionKeyCommand",
        "isChrome",
        "keyCode",
        "editorState",
        "contentState",
        "command",
        "newState",
        "BlockMapBuilder",
        "CharacterMetadata",
        "DataTransfer",
        "DraftModifier",
        "DraftPasteProcessor",
        "EditorState",
        "getEntityKeyForSelection",
        "getTextContentFromFiles",
        "splitTextIntoTextBlocks",
        "isEventHandled",
        "_this",
        "data",
        "files",
        "defaultFileText",
        "editorState",
        "blocks",
        "character",
        "text",
        "fragment",
        "withInsertedText",
        "textBlocks",
        "text",
        "html",
        "internalClipboard",
        "htmlFragment",
        "htmlMap",
        "editorState",
        "character",
        "textFragment",
        "textMap",
        "newContent",
        "EditorState",
        "ReactDOM",
        "getDraftEditorSelection",
        "editorState",
        "documentSelection",
        "updatedSelectionState",
        "DraftStringKey",
        "UnicodeUtils",
        "strlen",
        "encoded",
        "text",
        "key",
        "UnicodeUtils",
        "findRangesImmutable",
        "areEqual",
        "isTruthy",
        "EMPTY_ARRAY",
        "ranges",
        "filteredInlines",
        "text",
        "styleList",
        "ranges",
        "UnicodeUtils",
        "getRangeClientRects",
        "invariant",
        "computed",
        "div",
        "rect",
        "minTop",
        "Infinity",
        "minBottom",
        "Infinity",
        "maxTop",
        "maxBottom",
        "ii",
        "rect",
        "containingElement",
        "lineHeight",
        "bestContainer",
        "bestOffset",
        "currentContainer",
        "bestContainer",
        "maxIndexToConsider",
        "nodeValue",
        "ii",
        "maxIndexToConsider",
        "DraftEntity",
        "DraftEntitySegments",
        "getRangesForDraftEntity",
        "invariant",
        "start",
        "end",
        "entityKey",
        "entity",
        "mutability",
        "entityRanges",
        "entityRange",
        "removalRange",
        "getDraftEditorSelectionWithNodes",
        "selection",
        "getRangeClientRects",
        "rects",
        "top",
        "right",
        "bottom",
        "left",
        "_rects$",
        "ii",
        "rect",
        "invariant",
        "ranges",
        "getRangeBoundingClientRect",
        "selection",
        "boundingRect",
        "top",
        "right",
        "bottom",
        "left",
        "BlockMapBuilder",
        "generateRandomKey",
        "insertIntoList",
        "invariant",
        "targetKey",
        "targetOffset",
        "blockMap",
        "fragmentSize",
        "finalKey",
        "finalOffset",
        "targetBlock",
        "pastedBlock",
        "text",
        "chars",
        "newBlock",
        "newBlockArr",
        "text",
        "chars",
        "blockSize",
        "headText",
        "headCharacters",
        "appendToHead",
        "modifiedHead",
        "tailText",
        "tailCharacters",
        "prependToTail",
        "modifiedTail",
        "Immutable",
        "insertIntoList",
        "invariant",
        "Repeat",
        "len",
        "blockMap",
        "key",
        "offset",
        "block",
        "blockText",
        "newBlock",
        "newOffset",
        "EditorState",
        "expandRangeToStartOfLine",
        "getDraftEditorSelectionWithNodes",
        "moveSelectionBackward",
        "removeTextWithStrategy",
        "afterRemoval",
        "selection",
        "domSelection",
        "DraftRemovableWord",
        "EditorState",
        "moveSelectionBackward",
        "removeTextWithStrategy",
        "afterRemoval",
        "selection",
        "offset",
        "key",
        "content",
        "text",
        "toRemove",
        "DraftRemovableWord",
        "EditorState",
        "moveSelectionForward",
        "removeTextWithStrategy",
        "afterRemoval",
        "selection",
        "offset",
        "key",
        "content",
        "text",
        "toRemove",
        "DraftModifier",
        "EditorState",
        "contentState",
        "EditorState",
        "selection",
        "endKey",
        "content",
        "textLength",
        "EditorState",
        "selection",
        "startKey",
        "EditorState",
        "UnicodeUtils",
        "moveSelectionBackward",
        "removeTextWithStrategy",
        "afterRemoval",
        "selection",
        "content",
        "key",
        "offset",
        "charBehind",
        "selection",
        "EditorState",
        "UnicodeUtils",
        "moveSelectionForward",
        "removeTextWithStrategy",
        "afterRemoval",
        "selection",
        "content",
        "key",
        "offset",
        "charAhead",
        "selection",
        "DraftModifier",
        "EditorState",
        "getContentStateFragment",
        "selection",
        "offset",
        "blockKey",
        "content",
        "block",
        "length",
        "removalRange",
        "finalSelection",
        "movedFragment",
        "afterRemoval",
        "selectionAfter",
        "targetOffset",
        "targetRange",
        "afterInsert",
        "newEditorState",
        "EditorState",
        "undoneState",
        "nativelyRenderedContent",
        "Immutable",
        "startKey",
        "endKey",
        "blockMap",
        "newBlocks",
        "Immutable",
        "blockMap",
        "startKey",
        "startOffset",
        "endKey",
        "endOffset",
        "startBlock",
        "endBlock",
        "characterList",
        "modifiedStart",
        "newBlocks",
        "head",
        "tail",
        "containsNode",
        "getActiveElement",
        "selection",
        "anchorKey",
        "anchorOffset",
        "focusKey",
        "focusOffset",
        "isBackward",
        "tempKey",
        "anchorKey",
        "tempOffset",
        "anchorOffset",
        "hasAnchor",
        "hasFocus",
        "storedFocusNode",
        "storedFocusOffset",
        "Immutable",
        "generateRandomKey",
        "invariant",
        "key",
        "offset",
        "blockMap",
        "blockToSplit",
        "text",
        "chars",
        "blockAbove",
        "keyBelow",
        "blockBelow",
        "blocksBefore",
        "blocksAfter",
        "newBlocks",
        "NEWLINE_REGEX",
        "PhotosMimeType",
        "parts",
        "PUNCTUATION",
        "URI",
        "UnicodeBidi",
        "UnicodeBidiDirection",
        "invariant",
        "UnicodeBidiService",
        "UAParser",
        "UNKNOWN",
        "PLATFORM_MAP",
        "parts",
        "parser",
        "results",
        "browserVersionData",
        "uaData",
        "invariant",
        "componentRegex",
        "orRegex",
        "rangeRegex",
        "modifierRegex",
        "numericRegex",
        "expressions",
        "expressions",
        "startVersion",
        "endVersion",
        "versionComponents",
        "_getModifierAndCompon",
        "modifier",
        "rangeComponents",
        "result",
        "result",
        "lowerBound",
        "upperBound",
        "lastIndex",
        "numeric",
        "rangeComponents",
        "matches",
        "i",
        "i",
        "matches",
        "j",
        "i",
        "aPrefix",
        "bPrefix",
        "aNumeric",
        "bNumeric",
        "_normalizeVersions",
        "aNormalized",
        "bNormalized",
        "i",
        "result",
        "VersionRange",
        "_hyphenPattern",
        "invariant",
        "length",
        "ret",
        "ii",
        "isWebkit",
        "getElementRect",
        "rect",
        "containsNode",
        "docElem",
        "rect",
        "camelize",
        "hyphenate",
        "computedStyle",
        "width",
        "height",
        "_uppercasePattern",
        "isNode",
        "nextClass",
        "argLength",
        "ii",
        "hasOwnProperty",
        "result",
        "cache",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "LIBVERSION",
        "EMPTY",
        "UNKNOWN",
        "FUNC_TYPE",
        "UNDEF_TYPE",
        "OBJ_TYPE",
        "STR_TYPE",
        "MAJOR",
        "MODEL",
        "NAME",
        "TYPE",
        "VENDOR",
        "VERSION",
        "ARCHITECTURE",
        "CONSOLE",
        "MOBILE",
        "TABLET",
        "SMARTTV",
        "WEARABLE",
        "EMBEDDED",
        "util",
        "mapper",
        "result",
        "i",
        "j",
        "k",
        "p",
        "q",
        "matches",
        "match",
        "args",
        "arguments",
        "regex",
        "props",
        "j",
        "maps",
        "regexes",
        "UAParser",
        "ua",
        "rgxmap",
        "browser",
        "$",
        "parser",
        "result"
    ],
    "comments": [
        "webpackBootstrap",
        "The module cache",
        "The require function",
        "Check if module is in cache",
        "Create a new module (and put it into the cache)",
        "Execute the module function",
        "Flag the module as loaded",
        "Return the exports of the module",
        "expose the modules object (__webpack_modules__)",
        "expose the module cache",
        "__webpack_public_path__",
        "Load entry module and return exports",
        "0",
        "",
        "",
        "1",
        "",
        "Preserve the previous selection.",
        "Don't discard inline style overrides on block type or depth changes.",
        "If the cursor is not at the start of the block, look backward to",
        "preserve the style of the preceding character.",
        "The caret is at position zero in this block. If the block has any",
        "text at all, use the style of the first character.",
        "Otherwise, look upward in the document to find the closest character.",
        "If there is a character just inside the selection, use its style.",
        "Check if the selection at the end of a non-empty block. Use the last",
        "style in the block.",
        "Otherwise, look upward in the document to find the closest character.",
        "",
        "2",
        "",
        "",
        "3",
        "",
        "we don't care about invariant's own frame",
        "",
        "4",
        "",
        "Check whether the selection state overlaps with a single entity.",
        "If so, try to remove the appropriate substring of the entity text.",
        "",
        "5",
        "",
        "",
        "6",
        "",
        "Fill in unspecified properties, if necessary.",
        "",
        "7",
        "",
        "",
        "8",
        "",
        "check for exact match with no version",
        "check for non-matching names",
        "full comparison with version",
        "",
        "9",
        "",
        "",
        "10",
        "",
        "",
        "11",
        "",
        "These two ranges are consecutive so anything in [HIGH_START, LOW_END] is a",
        "surrogate code unit.",
        "Call the native functions if there's no surrogate char",
        "Call the native functions if there's no surrogate char",
        "Obvious cases",
        "Find the actual starting position",
        "Find the actual ending position",
        "",
        "12",
        "",
        "eslint-disable no-unused-vars",
        "Detect buggy property enumeration order in older V8 versions.",
        "https://bugs.chromium.org/p/v8/issues/detail?id=4118",
        "eslint-disable-line",
        "https://bugs.chromium.org/p/v8/issues/detail?id=3056",
        "https://bugs.chromium.org/p/v8/issues/detail?id=3056",
        "We don't expect any of the above to throw, but better to be safe.",
        "",
        "13",
        "",
        "",
        "14",
        "",
        "",
        "15",
        "",
        "",
        "16",
        "",
        "",
        "17",
        "",
        "",
        "18",
        "",
        "",
        "19",
        "",
        "",
        "20",
        "",
        "$FlowFixMe(>=0.28.0): `value` could be undefined!",
        "$FlowFixMe(>=0.28.0): `value` could be undefined!",
        "",
        "21",
        "",
        "Edge entities should be stripped to ensure that we don't preserve",
        "invalid partial entities when the fragment is reused. We do, however,",
        "preserve entities that are entirely within the selection range.",
        "",
        "22",
        "",
        "",
        "23",
        "",
        "",
        "24",
        "",
        "",
        "25",
        "",
        "",
        "26",
        "",
        "",
        "27",
        "",
        "",
        "28",
        "",
        "",
        "29",
        "",
        "",
        "30",
        "",
        "",
        "31",
        "",
        "",
        "32",
        "",
        "No strong direction",
        "Left-to-Right direction",
        "Right-to-Left direction",
        "== Helpers ==",
        "== Global Direction ==",
        "Values",
        "Helpers",
        "Global Direction",
        "",
        "33",
        "",
        "",
        "34",
        "",
        "",
        "35",
        "",
        "",
        "36",
        "",
        "",
        "37",
        "",
        "Resetting dir to the same value on a child node makes Chrome/Firefox",
        "confused on cursor movement. See http://jsfiddle.net/d157kLck/3/",
        "",
        "38",
        "",
        "",
        "39",
        "",
        "The apostrophe and curly single quotes behave in a curious way: when",
        "surrounded on both sides by word characters, they behave as word chars; when",
        "either neighbor is punctuation or an end of the string, they behave as",
        "punctuation.",
        "Remove the underscore, which should count as part of the removable word. The",
        "\"chameleon chars\" also count as punctuation in this regex.",
        "",
        "40",
        "",
        "",
        "41",
        "",
        "Arbitrary max indent",
        "used for replacing characters in HTML",
        "https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight",
        "Block tag flow is different because LIs do not have",
        "a deterministic style ;_;",
        "custom element conversions",
        "if we dont have any matched type, return unstyled",
        "if we have one matched type return it",
        "if we have multi matched types use the multi-match function to gather type",
        "Sometimes two blocks will touch in the DOM and we need to strip the",
        "extra delimiter to preserve niceness.",
        "Kill whitespace after blocks",
        "Base Case",
        "Can't use empty string because MSWord",
        "save the last block so we can use it later",
        "save the last block so we can use it later",
        "BR tags",
        "Inline tags",
        "Handle lists",
        "Block Tags",
        "Recurse through children",
        "Put in a newline to break up blocks inside blocks",
        "Sometimes we aren't dealing with content that contains nice semantic",
        "tags. In this case, use divs to separate everything out into paragraphs",
        "and hope for the best.",
        "Start with -1 block depth to offset the fact that we are passing in a fake",
        "UL block to start with.",
        "join with previous block to prevent weirdness on paste",
        "Kill block delimiter at the end",
        "If we saw no block tags, put an unstyled one in",
        "Sometimes we start with text that isn't in a block, which is then",
        "followed by blocks. Need to fix up the blocks to add in",
        "an unstyled block for this content",
        "Be ABSOLUTELY SURE that the dom builder you pass here won't execute",
        "arbitrary code in whatever environment you're running this in. For an",
        "example of how we try to do this in-browser, see getSafeBodyFromHTML.",
        "Make absolutely certain that our text is acceptable.",
        "",
        "42",
        "",
        "Firefox on OSX had a bug resulting in navigation instead of cursor movement.",
        "This bug was fixed in Firefox 29. Feature detection is virtually impossible",
        "so we just check the version number. See #342765.",
        "Allow default \"cut\" behavior for Windows on Shift + Delete.",
        "B",
        "D",
        "H",
        "I",
        "J",
        "K",
        "M",
        "O",
        "T",
        "U",
        "W",
        "Y",
        "Z",
        "LEFT/RIGHT handlers serve as a workaround for a Firefox bug.",
        "",
        "43",
        "",
        "If the selection range lies only on text nodes, the task is simple.",
        "Find the nearest offset-aware elements and use the",
        "offset values supplied by the selection range.",
        "An element is selected. Convert this selection range into leaf offset",
        "keys and offset values for consumption at the component level. This",
        "is common in Firefox, where select-all and triple click behavior leads",
        "to entire elements being selected.",
        "",
        "Note that we use the `needsRecovery` parameter in the callback here. This",
        "is because when certain elements are selected, the behavior for subsequent",
        "cursor movement (e.g. via arrow keys) is uncertain and may not match",
        "expectations at the component level. For example, if an entire <div> is",
        "selected and the user presses the right arrow, Firefox keeps the selection",
        "on the <div>. If we allow subsequent keypresses to insert characters",
        "natively, they will be inserted into a browser-created text node to the",
        "right of that <div>. This is obviously undesirable.",
        "",
        "With the `needsRecovery` flag, we inform the caller that it is responsible",
        "for manually setting the selection state on the rendered document to",
        "ensure proper selection state maintenance.",
        "If the selection is collapsed on an empty block, don't force recovery.",
        "This way, on arrow key selection changes, the browser can move the",
        "cursor from a non-zero offset on one block, through empty blocks,",
        "to a matching non-zero offset on other text blocks.",
        "If the editorRoot is the selection, step downward into the content",
        "wrapper.",
        "If the child offset is zero and we have an offset key, we're done.",
        "If there's no offset key because the entire editor is selected,",
        "find the leftmost (\"first\") leaf in the tree and use that as the offset",
        "key.",
        "Our target node may be a leaf or a text node, in which case we're",
        "already where we want to be and can just use the child's length as",
        "our offset.",
        "Otherwise, we'll look at the child to the left of the cursor and find",
        "the last leaf node in its subtree.",
        "",
        "44",
        "",
        "",
        "45",
        "",
        "In Chrome, the client rects will include the entire bounds of all nodes that",
        "begin (have a start tag) within the selection, even if the selection does",
        "not overlap the entire node. To resolve this, we split the range at each",
        "start tag and join the client rects together.",
        "https://code.google.com/p/chromium/issues/detail?id=324437",
        "eslint-disable consistent-return",
        "If we've climbed up to the common ancestor, we can now use the",
        "original start point and stop climbing the tree.",
        "eslint-enable consistent-return",
        "",
        "46",
        "",
        "Provides a dom node that will not execute scripts",
        "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation.createHTMLDocument",
        "https://developer.mozilla.org/en-US/Add-ons/Code_snippets/HTML_to_DOM",
        "Provides a safe context",
        "",
        "47",
        "",
        "",
        "48",
        "",
        "WEBPACK VAR INJECTION",
        "Somewhat arbitrary upper bound on text size. Let's not lock up the browser.",
        "blob",
        "string",
        "Special-case text clippings, which have an empty type but include",
        "`.textClipping` in the file name. `readAsText` results in an empty",
        "string for text clippings, so we force the file name to serve",
        "as the text value for the file.",
        "WEBPACK VAR INJECTION",
        "",
        "49",
        "",
        "eslint-disable no-console",
        "eslint-enable no-console",
        "",
        "50",
        "",
        "",
        "51",
        "",
        "",
        "52",
        "",
        "",
        "53",
        "",
        "",
        "54",
        "",
        "Types could be DOMStringList or array",
        "If HTML is available, treat this data as rich text. This way, we avoid",
        "using a pasted image if it is packaged with HTML -- this may occur with",
        "pastes from MS Word, for example.  However this is only rich text if",
        "there's accompanying text.",
        "When an image is copied from a preview window, you end up with two",
        "DataTransferItems one of which is a file's metadata as text.  Skip those.",
        "Firefox will have a type of application/x-moz-file for images during",
        "dragging",
        "createArrayFromMixed doesn't properly handle DataTransferItemLists.",
        "",
        "55",
        "",
        "In practice, they will either both have the same value,",
        "or one will be zero and the other will be the scroll position",
        "of the viewport. So we can use `X || Y` instead of `Math.max(X, Y)`",
        "",
        "56",
        "",
        "",
        "57",
        "",
        "eslint-disable no-bitwise",
        "",
        "58",
        "",
        "eslint-disable fb-www/typeof-undefined",
        "?DOMElement",
        "",
        "59",
        "",
        "",
        "60",
        "",
        "Copy the decorator array, since we use this array order to determine",
        "precedence of decoration matching. If the array is mutated externally,",
        "we don't want to be affected here.",
        "object",
        "number",
        "number",
        "number",
        "Find out if any of our matching range is already occupied",
        "by another decorator. If so, discard the match. Otherwise, store",
        "the component key for rendering.",
        "",
        "61",
        "",
        "",
        "62",
        "",
        "IE does not support the `input` event on contentEditable, so we can't",
        "observe spellcheck behavior.",
        "Define a set of handler objects to correspond to each possible `mode`",
        "of editor behavior.",
        "Manual binding for public and internal methods.",
        "See `_restoreEditorDOM()`.",
        "On Chrome and Safari, calling focus on contenteditable focuses the",
        "cursor at the first character. This is something you don't expect when",
        "you're clicking on an input element but not directly on a character.",
        "Put the cursor back where it was before the blur.",
        "",
        "63",
        "",
        "If characters have been composed, re-rendering with the update",
        "is sufficient to reset the editor.",
        "",
        "64",
        "",
        "Text direction has changed for one or more blocks. We must re-render.",
        "If the state is unchanged or we're currently rendering a natively",
        "rendered state, there's nothing new to be done.",
        "List items are special snowflakes, since we handle nesting and",
        "counters manually.",
        "Group contiguous runs of blocks that have the same wrapperTemplate",
        "",
        "65",
        "",
        "flow wtf",
        "",
        "66",
        "",
        "",
        "67",
        "",
        "If selection state is irrelevant to the parent block, no-op.",
        "Determine the appropriate target node for selection. If the child",
        "is not a text node, it is a <br /> spacer. In this case, use the",
        "<span> itself as the selection target.",
        "If the leaf is at the end of its block and ends in a soft newline, append",
        "an extra line feed character. Browsers collapse trailing newline",
        "characters, which leaves the cursor in the wrong place after a",
        "shift+enter. The extra character repairs this.",
        ".trim() is necessary for IE9/10/11 and Edge",
        "",
        "68",
        "",
        "",
        "69",
        "",
        "In IE, spans with <br> tags render as two newlines. By rendering a span",
        "with only a newline character, we can be sure to render a single line.",
        "By flipping this flag, we also keep flipping keys which forces",
        "React to remount this node every time it rerenders.",
        "",
        "70",
        "",
        "string",
        "number",
        "Our selection overlaps this segment.",
        "",
        "71",
        "",
        "",
        "72",
        "",
        "",
        "73",
        "",
        "First, try to remove a preceding atomic block.",
        "If that doesn't succeed, try to remove the current block style.",
        "The cursor is somewhere within the text. Behave normally.",
        "Only allow indenting one level beyond the block above, and only if",
        "the block above is a list item as well.",
        "Triple-click can lead to a selection that includes offset 0 of the",
        "following block. The `SelectionState` for this case is accurate, but",
        "we should avoid toggling block type for the trailing block because it",
        "is a confusing interaction.",
        "If the selection is collapsed, toggle the specified style on or off and",
        "set the result as the new inline style override. This will then be",
        "used as the inline style for the next character to be inserted.",
        "If characters are selected, immediately apply or remove the",
        "inline style on the document state itself.",
        "If the style is already present for the selection range, remove it.",
        "Otherwise, apply it.",
        "",
        "74",
        "",
        "",
        "75",
        "",
        "",
        "76",
        "",
        "",
        "77",
        "",
        "",
        "78",
        "",
        "Stringify to maintain order of otherwise numeric keys.",
        "Flip storage map so that our storage keys map to global",
        "DraftEntity keys.",
        "",
        "79",
        "",
        "Translate entity range keys to the DraftEntity map.",
        "",
        "80",
        "",
        "",
        "81",
        "",
        "Using Unicode-enabled substrings converted to JavaScript lengths,",
        "fill the output array with entity keys.",
        "",
        "82",
        "",
        "object",
        "",
        "83",
        "",
        "When nothing is focused, Firefox regards two characters, `'` and `/`, as",
        "commands that should open and focus the \"quickfind\" search bar. This should",
        "sometimes does, even when the keypress event target is the contenteditable.",
        "This breaks the input. Special case these characters to ensure that when",
        "they are typed, we prevent default on the event to make sure not to",
        "trigger quickfind.",
        "In some cases (ex: IE ideographic space insertion) no character data",
        "is provided. There's nothing to do when this happens.",
        "Allow the top-level component to handle the insertion manually. This is",
        "useful when triggering interesting behaviors for a character insertion,",
        "Simple examples: replacing a raw text ':)' with a smile emoji or image",
        "decorator, or setting a block to be a list item after typing '- ' at the",
        "start of the block.",
        "If selection is collapsed, conditionally allow native behavior. This",
        "reduces re-renders and preserves spellcheck highlighting. If the selection",
        "is not collapsed, we will re-render.",
        "Check the old and new \"fingerprints\" of the current block to determine",
        "whether this insertion requires any addition or removal of text nodes,",
        "in which case we would prevent the native character insertion.",
        "The native event is allowed to occur.",
        "",
        "84",
        "",
        "WEBPACK VAR INJECTION",
        "Webkit has a bug in which blurring a contenteditable by clicking on",
        "other active elements will trigger the `blur` event but will not remove",
        "the DOM selection from the contenteditable. We therefore force the",
        "issue to be certain, checking whether the active element is `body`",
        "to force it when blurring occurs within the window (as opposed to",
        "clicking to another tab or window).",
        "WEBPACK VAR INJECTION",
        "",
        "85",
        "",
        "",
        "86",
        "",
        "No selection, so there's nothing to copy.",
        "",
        "87",
        "",
        "No selection, so there's nothing to cut.",
        "Track the current scroll position so that it can be forced back in place",
        "after the editor regains control of the DOM.",
        "Set `cut` mode to disable all event handling temporarily.",
        "Let native `cut` behavior occur, then recover control.",
        "",
        "88",
        "",
        "",
        "89",
        "",
        "",
        "90",
        "",
        "When the tab containing this text editor is hidden and the user does a",
        "find-in-page in a _different_ tab, Chrome on Mac likes to forget what the",
        "selection was right after sending this focus event and (if you let it)",
        "moves the cursor back to the beginning of the editor, so we force the",
        "selection here instead of simply accepting it in order to preserve the",
        "old cursor position. See https://crbug.com/540004.",
        "",
        "91",
        "",
        "WEBPACK VAR INJECTION",
        "Special-case soft newlines here. If the DOM text ends in a soft newline,",
        "we will have manually inserted an extra soft newline in DraftEditorLeaf.",
        "We want to remove this extra newline for the purpose of our comparison",
        "of DOM and model text.",
        "No change -- the DOM is up to date. Nothing to do here.",
        "We'll replace the entire leaf with the text content of the target.",
        "Immutable or segmented entities cannot properly be handled by the",
        "default browser undo, so we have to use a different change type to",
        "force using our internal undo method instead of falling through to the",
        "native browser undo.",
        "Firefox selection does not change while the context menu is open, so",
        "we preserve the anchor and focus values of the DOM selection.",
        "Browsers other than Firefox may adjust DOM selection while the context",
        "menu is open, and Safari autocorrect is prone to providing an inaccurate",
        "DOM selection. Don't trust it. Instead, use our existing SelectionState",
        "and adjust it based on the number of characters changed during the",
        "mutation.",
        "Segmented entities are completely or partially removed when their",
        "text content changes. For this case we do not want any text to be selected",
        "after the change, so we are not merging the selection.",
        "WEBPACK VAR INJECTION",
        "",
        "92",
        "",
        "The top-level component may manually handle newline insertion. If",
        "no special handling is performed, fall through to command handling.",
        "Handling for OSX where option + space scrolls.",
        "Insert a nbsp into the editor.",
        "If no command is specified, allow keydown event to continue.",
        "Since undo requires some special updating behavior to keep the editor",
        "in sync, handle it separately.",
        "At this point, we know that we're handling a command of some kind, so",
        "we don't want to insert a character following the keydown.",
        "Allow components higher up the tree to handle the command first.",
        "",
        "93",
        "",
        "Get files, unless this is likely to be a string the user wants inline.",
        "Allow customized paste handling for images, etc. Otherwise, fall",
        "through to insert text contents into the editor.",
        "string",
        "If the text from the paste event is rich content that matches what we",
        "already have on the internal clipboard, assume that we should just use",
        "the clipboard fragment for the paste. This will allow us to preserve",
        "styling and entities, if any are present. Note that newlines are",
        "stripped during comparison -- this is because copy/paste within the",
        "editor in Firefox and IE will not include empty lines. The resulting",
        "paste will preserve the newlines correctly.",
        "If the editorKey is present in the pasted HTML, it should be safe to",
        "assume this is an internal paste.",
        "The copy may have been made within a single block, in which case the",
        "editor key won't be part of the paste. In this case, just check",
        "whether the pasted text matches the internal clipboard.",
        "Safari does not properly store text/html in some cases.",
        "Use the internalClipboard if present and equal to what is on",
        "the clipboard. See https://bugs.webkit.org/show_bug.cgi?id=19893.",
        "If there is html paste data, try to parse that.",
        "Otherwise, create a new fragment from our pasted text. Also",
        "empty the internal clipboard, since it's no longer valid.",
        "",
        "94",
        "",
        "",
        "95",
        "",
        "number",
        "number",
        "Encode the key as a number for range storage.",
        "",
        "96",
        "",
        "Obtain an array with ranges for only the specified style.",
        "We only want to keep ranges with nonzero style values.",
        "",
        "97",
        "",
        "forced layout here",
        "When a range starts or ends a soft wrap, many browsers (Chrome, IE,",
        "Safari) include an empty rect on the previous or next line. When the",
        "text lies in a container whose position is not integral (e.g., from",
        "margin: auto), Safari makes these empty rects have width 1 (instead of",
        "0). Having one-pixel-wide characters seems unlikely (and most browsers",
        "report widths in subpixel precision anyway) so it's relatively safe to",
        "skip over them.",
        "http://www.w3.org/TR/dom/#concept-node-length",
        "Imagine our text looks like:",
        "<div><span>once upon a time, there was a <em>boy",
        "who lived</em> </span><q><strong>under^ the",
        "stairs</strong> in a small closet.</q></div>",
        "where the caret represents the cursor. First, we crawl up the tree until",
        "the range spans multiple lines (setting the start point to before",
        "\"<strong>\", then before \"<div>\"), then at each level we do a search to",
        "find the latest point which is still on a previous line. We'll find that",
        "the break point is inside the span, then inside the <em>, then in its text",
        "node child, the actual break point before \"who\".",
        "The start of the line is never in a different block-level container.",
        "In the above example, range now spans from \"<div>\" to \"under\",",
        "bestContainer is <div>, and bestOffset is 1 (index of <q> inside <div>)].",
        "Picking out which child to recurse into here is a special case since we",
        "don't want to check past <q> -- once we find that the final range starts",
        "in <span>, we can look at all of its children (and all of their children)",
        "to find the break point.",
        "At all times, (bestContainer, bestOffset) is the latest single-line start",
        "point that we know of.",
        "We're in the middle of a surrogate pair -- skip over so we never",
        "return a range with an endpoint in the middle of a code point.",
        "If ii === -1, then (bestContainer, bestOffset), which is equal to",
        "(currentContainer, 0), was a single-line start point but a start",
        "point before currentContainer wasn't, so the line break seems to",
        "have occurred immediately after currentContainer's start tag",
        "",
        "If currentContainer.childNodes.length === 0, we're already at a",
        "terminal node (e.g., text node) and should return our current best.",
        "",
        "98",
        "",
        "`MUTABLE` entities can just have the specified range of text removed",
        "directly. No adjustments are needed.",
        "Find the entity range that overlaps with our removal range.",
        "For `IMMUTABLE` entity types, we will remove the entire entity range.",
        "For `SEGMENTED` entity types, determine the appropriate segment to",
        "remove.",
        "",
        "99",
        "",
        "WEBPACK VAR INJECTION",
        "No active selection.",
        "WEBPACK VAR INJECTION",
        "",
        "100",
        "",
        "\"Return a DOMRect object describing the smallest rectangle that includes",
        "the first rectangle in list and all of the remaining rectangles of which",
        "the height or width is not zero.\"",
        "http://www.w3.org/TR/cssom-view/#dom-range-getboundingclientrect",
        "",
        "101",
        "",
        "",
        "102",
        "",
        "When a re-render leads to a node being removed, the DOM selection will",
        "temporarily be placed on an ancestor node, which leads to an invalid",
        "bounding rect. Discard this state.",
        "",
        "103",
        "",
        "Modify head portion of block.",
        "Insert fragment blocks after the head and before the tail.",
        "Modify tail portion of block.",
        "",
        "104",
        "",
        "",
        "105",
        "",
        "WEBPACK VAR INJECTION",
        "WEBPACK VAR INJECTION",
        "",
        "106",
        "",
        "If there are no words before the cursor, remove the preceding newline.",
        "",
        "107",
        "",
        "If there are no words in front of the cursor, remove the newline.",
        "",
        "108",
        "",
        "",
        "109",
        "",
        "",
        "110",
        "",
        "",
        "111",
        "",
        "",
        "112",
        "",
        "",
        "113",
        "",
        "Nothing to transpose if there aren't two characters.",
        "The cursor is at the end of the block. Swap the last two characters.",
        "Extract the character to move as a fragment. This preserves its",
        "styling and entity, if any.",
        "After the removal, the insertion target is one character back.",
        "",
        "114",
        "",
        "If the last change to occur was a spellcheck change, allow the undo",
        "event to fall through to the browser. This allows the browser to record",
        "the unwanted change, which should soon lead it to learn not to suggest",
        "the correction again.",
        "Otheriwse, manage the undo behavior manually.",
        "Trigger a re-render with the current content state to ensure that the",
        "component tree has up-to-date props for comparison.",
        "Wait to ensure that the re-render has occurred before performing",
        "the undo action.",
        "",
        "115",
        "",
        "",
        "116",
        "",
        "",
        "117",
        "",
        "WEBPACK VAR INJECTION",
        "It's possible that the editor has been removed from the DOM but",
        "our selection code doesn't know it yet. Forcing selection in",
        "this case may lead to errors, so just bail now.",
        "IE doesn't support backward selection. Swap key/offset pairs.",
        "If the selection is entirely bound within this node, set the selection",
        "and be done.",
        "If the anchor is within this node, set the range start.",
        "If the focus is within this node, we can assume that we have",
        "already set the appropriate start range on the selection, and",
        "can simply extend the selection.",
        "If this node has the focus, set the selection range to be a",
        "collapsed range beginning here. Later, when we encounter the anchor,",
        "we'll use this information to extend the selection.",
        "If this node has the anchor, we may assume that the correct",
        "focus information is already stored on the selection object.",
        "We keep track of it, reset the selection range, and extend it",
        "back to the focus point.",
        "If `extend` is called while another element has focus, an error is",
        "thrown. We therefore disable `extend` if the active element is somewhere",
        "other than the node we are selecting. This should only occur in Firefox,",
        "since it is the only browser to support multiple selections.",
        "See https://bugzilla.mozilla.org/show_bug.cgi?id=921444.",
        "IE doesn't support extend. This will mean no backward selection.",
        "Extract the existing selection range and add focus to it.",
        "Additionally, clone the selection range. IE11 throws an",
        "InvalidStateError when attempting to access selection properties",
        "after the range is detached.",
        "WEBPACK VAR INJECTION",
        "",
        "118",
        "",
        "",
        "119",
        "",
        "",
        "120",
        "",
        "see http://fburl.com/10972194",
        "",
        "121",
        "",
        "\\u00a1-\\u00b1\\u00b4-\\u00b8\\u00ba\\u00bb\\u00bf",
        "is latin supplement punctuation except fractions and superscript",
        "numbers",
        "\\u2010-\\u2027\\u2030-\\u205e",
        "is punctuation from the general punctuation block:",
        "weird quotes, commas, bullets, dashes, etc.",
        "\\u30fb\\u3001\\u3002\\u3008-\\u3011\\u3014-\\u301f",
        "is CJK punctuation",
        "\\uff1a-\\uff1f\\uff01-\\uff0f\\uff3b-\\uff40\\uff5b-\\uff65",
        "is some full-width/half-width punctuation",
        "\\u2E2E\\u061f\\u066a-\\u066c\\u061b\\u060c\\u060d\\uFD3e\\uFD3F",
        "is some Arabic punctuation marks",
        "\\u1801\\u0964\\u104a\\u104b",
        "is misc. other language punctuation marks",
        "",
        "122",
        "",
        "",
        "123",
        "",
        "",
        "124",
        "",
        "Do some conversion first.",
        "",
        "125",
        "",
        "mark \"x\" and \"*\" components as equal",
        "final \"*\" greedily zeros all remaining components",
        "",
        "126",
        "",
        "",
        "127",
        "",
        "Some browsers builtin objects can report typeof 'function' (e.g. NodeList",
        "in old versions of Safari).",
        "Old IE doesn't give collections access to hasOwnProperty. Assume inputs",
        "without method will throw during the slice call and skip straight to the",
        "fallback.",
        "IE < 9 does not support Array#slice on collections objects",
        "Fall back to copying key by key. This assumes all keys have a value,",
        "so will not preserve sparsely populated inputs.",
        "not null/false",
        "arrays are objects, NodeLists are functions in Safari",
        "quacks like an array",
        "not window",
        "no DOM node should be considered an array-like",
        "a 'select' element has 'length' and 'item' properties on IE8",
        "a real array",
        "arguments",
        "HTMLCollection/NodeList",
        "",
        "128",
        "",
        "",
        "129",
        "",
        "",
        "130",
        "",
        "FF 2, Safari 3 and Opera 9.5- do not support getBoundingClientRect().",
        "IE9- will throw if the element is not in the document.",
        "Subtracts clientTop/Left because IE8- added a 2px border to the",
        "<html> element (see http://fburl.com/1493213). IE 7 in",
        "Quicksmode does not report clientLeft/clientTop so there",
        "will be an unaccounted offset of 2px when in quirksmode",
        "",
        "131",
        "",
        "?string",
        "DOMNode",
        "string",
        "?string",
        "W3C Standard",
        "In certain cases such as within an iframe in FF3, this returns null.",
        "Safari",
        "A Safari bug causes this to return null for `display: none` elements.",
        "Internet Explorer",
        "",
        "132",
        "",
        "",
        "133",
        "",
        "",
        "134",
        "",
        "",
        "135",
        "",
        "",
        "136",
        "",
        "",
        "137",
        "",
        ", ...",
        "",
        "138",
        "",
        "",
        "139",
        "",
        "",
        "140",
        "",
        "",
        "Constants",
        "",
        "deprecated",
        "",
        "Helper",
        "",
        "",
        "Map helper",
        "",
        "loop through all regexes maps",
        "even sequence (0,2,4,..)",
        "odd sequence (1,3,5,..)",
        "construct object barebones",
        "try matching uastring with regexes",
        "check if given property is actually array",
        "assign modified match",
        "assign given value, ignore regex match",
        "check whether function or regex",
        "call function (usually string mapper)",
        "sanitize match using given regex",
        "check if array",
        "",
        "String map",
        "",
        "",
        "Regex map",
        "",
        "Presto based",
        "Opera Mini",
        "Opera Mobi/Tablet",
        "Opera > 9.80",
        "Opera < 9.80",
        "Opera Webkit",
        "Mixed",
        "Kindle",
        "Lunascape/Maxthon/Netfront/Jasmine/Blazer",
        "Trident based",
        "Avant/IEMobile/SlimBrowser/Baidu",
        "Internet Explorer",
        "Webkit/KHTML based",
        "Rekonq",
        "Chromium/Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS",
        "IE11",
        "Microsoft Edge",
        "Yandex",
        "Comodo Dragon",
        "Chrome/OmniWeb/Arora/Tizen/Nokia",
        "QQBrowser",
        "UCBrowser",
        "Dolphin",
        "Chrome for Android/iOS",
        "MIUI Browser",
        "Android Browser",
        "Facebook App for iOS",
        "Firefox for iOS",
        "Mobile Safari",
        "Safari & Safari Mobile",
        "Safari < 3.0",
        "Konqueror",
        "Gecko based",
        "Netscape",
        "Swiftfox",
        "IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror",
        "Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix",
        "Mozilla",
        "Other",
        "Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir",
        "Links",
        "GoBrowser",
        "ICE Browser",
        "Mosaic",
        "/////////////////////\n\t            // Media players BEGIN\n\t            ////////////////////////\n\n\t            , [\n\n\t            /(apple(?:coremedia|))\\/((\\d+)[\\w\\._]+)/i,                          // Generic Apple CoreMedia\n\t            /(coremedia) v((\\d+)[\\w\\._]+)/i\n\t            ], [NAME, VERSION], [\n\n\t            /(aqualung|lyssna|bsplayer)\\/((\\d+)?[\\w\\.-]+)/i                     // Aqualung/Lyssna/BSPlayer\n\t            ], [NAME, VERSION], [\n\n\t            /(ares|ossproxy)\\s((\\d+)[\\w\\.-]+)/i                                 // Ares/OSSProxy\n\t            ], [NAME, VERSION], [\n\n\t            /(audacious|audimusicstream|amarok|bass|core|dalvik|gnomemplayer|music on console|nsplayer|psp-internetradioplayer|videos)\\/((\\d+)[\\w\\.-]+)/i,\n\t                                                                                // Audacious/AudiMusicStream/Amarok/BASS/OpenCORE/Dalvik/GnomeMplayer/MoC\n\t                                                                                // NSPlayer/PSP-InternetRadioPlayer/Videos\n\t            /(clementine|music player daemon)\\s((\\d+)[\\w\\.-]+)/i,               // Clementine/MPD\n\t            /(lg player|nexplayer)\\s((\\d+)[\\d\\.]+)/i,\n\t            /player\\/(nexplayer|lg player)\\s((\\d+)[\\w\\.-]+)/i                   // NexPlayer/LG Player\n\t            ], [NAME, VERSION], [\n\t            /(nexplayer)\\s((\\d+)[\\w\\.-]+)/i                                     // Nexplayer\n\t            ], [NAME, VERSION], [\n\n\t            /(flrp)\\/((\\d+)[\\w\\.-]+)/i                                          // Flip Player\n\t            ], [[NAME, 'Flip Player'], VERSION], [\n\n\t            /(fstream|nativehost|queryseekspider|ia-archiver|facebookexternalhit)/i\n\t                                                                                // FStream/NativeHost/QuerySeekSpider/IA Archiver/facebookexternalhit\n\t            ], [NAME], [\n\n\t            /(gstreamer) souphttpsrc (?:\\([^\\)]+\\)){0,1} libsoup\\/((\\d+)[\\w\\.-]+)/i\n\t                                                                                // Gstreamer\n\t            ], [NAME, VERSION], [\n\n\t            /(htc streaming player)\\s[\\w_]+\\s\\/\\s((\\d+)[\\d\\.]+)/i,              // HTC Streaming Player\n\t            /(java|python-urllib|python-requests|wget|libcurl)\\/((\\d+)[\\w\\.-_]+)/i,\n\t                                                                                // Java/urllib/requests/wget/cURL\n\t            /(lavf)((\\d+)[\\d\\.]+)/i                                             // Lavf (FFMPEG)\n\t            ], [NAME, VERSION], [\n\n\t            /(htc_one_s)\\/((\\d+)[\\d\\.]+)/i                                      // HTC One S\n\t            ], [[NAME, /_/g, ' '], VERSION], [\n\n\t            /(mplayer)(?:\\s|\\/)(?:(?:sherpya-){0,1}svn)(?:-|\\s)(r\\d+(?:-\\d+[\\w\\.-]+){0,1})/i\n\t                                                                                // MPlayer SVN\n\t            ], [NAME, VERSION], [\n\n\t            /(mplayer)(?:\\s|\\/|[unkow-]+)((\\d+)[\\w\\.-]+)/i                      // MPlayer\n\t            ], [NAME, VERSION], [\n\n\t            /(mplayer)/i,                                                       // MPlayer (no other info)\n\t            /(yourmuze)/i,                                                      // YourMuze\n\t            /(media player classic|nero showtime)/i                             // Media Player Classic/Nero ShowTime\n\t            ], [NAME], [\n\n\t            /(nero (?:home|scout))\\/((\\d+)[\\w\\.-]+)/i                           // Nero Home/Nero Scout\n\t            ], [NAME, VERSION], [\n\n\t            /(nokia\\d+)\\/((\\d+)[\\w\\.-]+)/i                                      // Nokia\n\t            ], [NAME, VERSION], [\n\n\t            /\\s(songbird)\\/((\\d+)[\\w\\.-]+)/i                                    // Songbird/Philips-Songbird\n\t            ], [NAME, VERSION], [\n\n\t            /(winamp)3 version ((\\d+)[\\w\\.-]+)/i,                               // Winamp\n\t            /(winamp)\\s((\\d+)[\\w\\.-]+)/i,\n\t            /(winamp)mpeg\\/((\\d+)[\\w\\.-]+)/i\n\t            ], [NAME, VERSION], [\n\n\t            /(ocms-bot|tapinradio|tunein radio|unknown|winamp|inlight radio)/i  // OCMS-bot/tap in radio/tunein/unknown/winamp (no other info)\n\t                                                                                // inlight radio\n\t            ], [NAME], [\n\n\t            /(quicktime|rma|radioapp|radioclientapplication|soundtap|totem|stagefright|streamium)\\/((\\d+)[\\w\\.-]+)/i\n\t                                                                                // QuickTime/RealMedia/RadioApp/RadioClientApplication/\n\t                                                                                // SoundTap/Totem/Stagefright/Streamium\n\t            ], [NAME, VERSION], [\n\n\t            /(smp)((\\d+)[\\d\\.]+)/i                                              // SMP\n\t            ], [NAME, VERSION], [\n\n\t            /(vlc) media player - version ((\\d+)[\\w\\.]+)/i,                     // VLC Videolan\n\t            /(vlc)\\/((\\d+)[\\w\\.-]+)/i,\n\t            /(xbmc|gvfs|xine|xmms|irapp)\\/((\\d+)[\\w\\.-]+)/i,                    // XBMC/gvfs/Xine/XMMS/irapp\n\t            /(foobar2000)\\/((\\d+)[\\d\\.]+)/i,                                    // Foobar2000\n\t            /(itunes)\\/((\\d+)[\\d\\.]+)/i                                         // iTunes\n\t            ], [NAME, VERSION], [\n\n\t            /(wmplayer)\\/((\\d+)[\\w\\.-]+)/i,                                     // Windows Media Player\n\t            /(windows-media-player)\\/((\\d+)[\\w\\.-]+)/i\n\t            ], [[NAME, /-/g, ' '], VERSION], [\n\n\t            /windows\\/((\\d+)[\\w\\.-]+) upnp\\/[\\d\\.]+ dlnadoc\\/[\\d\\.]+ (home media server)/i\n\t                                                                                // Windows Media Server\n\t            ], [VERSION, [NAME, 'Windows']], [\n\n\t            /(com\\.riseupradioalarm)\\/((\\d+)[\\d\\.]*)/i                          // RiseUP Radio Alarm\n\t            ], [NAME, VERSION], [\n\n\t            /(rad.io)\\s((\\d+)[\\d\\.]+)/i,                                        // Rad.io\n\t            /(radio.(?:de|at|fr))\\s((\\d+)[\\d\\.]+)/i\n\t            ], [[NAME, 'rad.io'], VERSION]\n\n\t            //////////////////////\n\t            // Media players END\n\t            ////////////////////",
        "AMD64",
        "IA32 (quicktime)",
        "IA32",
        "PocketPC mistakenly identified as PowerPC",
        "PowerPC",
        "SPARC",
        "IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC",
        "iPad/PlayBook",
        "iPad",
        "Apple TV",
        "Archos",
        "HP TouchPad",
        "Kindle",
        "Nook",
        "Dell Streak",
        "Kindle Fire HD",
        "Fire Phone",
        "iPod/iPhone",
        "iPod/iPhone",
        "BlackBerry",
        "BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Huawei/Meizu/Motorola/Polytron",
        "HP iPAQ",
        "Asus",
        "BlackBerry 10",
        "Asus Tablets",
        "Sony",
        "Ouya",
        "Nintendo",
        "Nvidia",
        "Playstation",
        "Sprint Phones",
        "Lenovo tablets",
        "HTC",
        "ZTE",
        "Alcatel/GeeksPhone/Huawei/Lenovo/Nexian/Panasonic/Sony",
        "HTC Nexus 9",
        "Microsoft Xbox",
        "Microsoft Kin",
        "Motorola",
        "Samsung",
        "Sharp",
        "Siemens",
        "Nokia",
        "Acer",
        "LG Tablet",
        "LG SmartTV",
        "LG",
        "Lenovo",
        "Jolla",
        "Pebble",
        "Google Glass",
        "Xiaomi Hongmi 'numeric' models",
        "Xiaomi Hongmi",
        "Xiaomi Mi",
        "Unidentifiable Tablet",
        "Unidentifiable Mobile",
        "//////////////////////////\n\t            // TODO: move to string map\n\t            ////////////////////////////\n\n\t            /(C6603)/i                                                          // Sony Xperia Z C6603\n\t            ], [[MODEL, 'Xperia Z C6603'], [VENDOR, 'Sony'], [TYPE, MOBILE]], [\n\t            /(C6903)/i                                                          // Sony Xperia Z 1\n\t            ], [[MODEL, 'Xperia Z 1'], [VENDOR, 'Sony'], [TYPE, MOBILE]], [\n\n\t            /(SM-G900[F|H])/i                                                   // Samsung Galaxy S5\n\t            ], [[MODEL, 'Galaxy S5'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [\n\t            /(SM-G7102)/i                                                       // Samsung Galaxy Grand 2\n\t            ], [[MODEL, 'Galaxy Grand 2'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [\n\t            /(SM-G530H)/i                                                       // Samsung Galaxy Grand Prime\n\t            ], [[MODEL, 'Galaxy Grand Prime'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [\n\t            /(SM-G313HZ)/i                                                      // Samsung Galaxy V\n\t            ], [[MODEL, 'Galaxy V'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [\n\t            /(SM-T805)/i                                                        // Samsung Galaxy Tab S 10.5\n\t            ], [[MODEL, 'Galaxy Tab S 10.5'], [VENDOR, 'Samsung'], [TYPE, TABLET]], [\n\t            /(SM-G800F)/i                                                       // Samsung Galaxy S5 Mini\n\t            ], [[MODEL, 'Galaxy S5 Mini'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [\n\t            /(SM-T311)/i                                                        // Samsung Galaxy Tab 3 8.0\n\t            ], [[MODEL, 'Galaxy Tab 3 8.0'], [VENDOR, 'Samsung'], [TYPE, TABLET]], [\n\n\t            /(R1001)/i                                                          // Oppo R1001\n\t            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [\n\t            /(X9006)/i                                                          // Oppo Find 7a\n\t            ], [[MODEL, 'Find 7a'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [\n\t            /(R2001)/i                                                          // Oppo YOYO R2001\n\t            ], [[MODEL, 'Yoyo R2001'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [\n\t            /(R815)/i                                                           // Oppo Clover R815\n\t            ], [[MODEL, 'Clover R815'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [\n\t             /(U707)/i                                                          // Oppo Find Way S\n\t            ], [[MODEL, 'Find Way S'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [\n\n\t            /(T3C)/i                                                            // Advan Vandroid T3C\n\t            ], [MODEL, [VENDOR, 'Advan'], [TYPE, TABLET]], [\n\t            /(ADVAN T1J\\+)/i                                                    // Advan Vandroid T1J+\n\t            ], [[MODEL, 'Vandroid T1J+'], [VENDOR, 'Advan'], [TYPE, TABLET]], [\n\t            /(ADVAN S4A)/i                                                      // Advan Vandroid S4A\n\t            ], [[MODEL, 'Vandroid S4A'], [VENDOR, 'Advan'], [TYPE, MOBILE]], [\n\n\t            /(V972M)/i                                                          // ZTE V972M\n\t            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [\n\n\t            /(i-mobile)\\s(IQ\\s[\\d\\.]+)/i                                        // i-mobile IQ\n\t            ], [VENDOR, MODEL, [TYPE, MOBILE]], [\n\t            /(IQ6.3)/i                                                          // i-mobile IQ IQ 6.3\n\t            ], [[MODEL, 'IQ 6.3'], [VENDOR, 'i-mobile'], [TYPE, MOBILE]], [\n\t            /(i-mobile)\\s(i-style\\s[\\d\\.]+)/i                                   // i-mobile i-STYLE\n\t            ], [VENDOR, MODEL, [TYPE, MOBILE]], [\n\t            /(i-STYLE2.1)/i                                                     // i-mobile i-STYLE 2.1\n\t            ], [[MODEL, 'i-STYLE 2.1'], [VENDOR, 'i-mobile'], [TYPE, MOBILE]], [\n\t            \n\t            /(mobiistar touch LAI 512)/i                                        // mobiistar touch LAI 512\n\t            ], [[MODEL, 'Touch LAI 512'], [VENDOR, 'mobiistar'], [TYPE, MOBILE]], [\n\n\t            /////////////\n\t            // END TODO\n\t            ///////////",
        "EdgeHTML",
        "Presto",
        "WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m",
        "KHTML/Tasman/Links",
        "iCab",
        "Gecko",
        "Windows based",
        "Windows (iTunes)",
        "Windows RT",
        "Mobile/Embedded OS",
        "BlackBerry 10",
        "Blackberry",
        "Tizen",
        "Android/WebOS/Palm/QNX/Bada/RIM/MeeGo/Contiki",
        "Sailfish OS",
        "Symbian",
        "Series 40",
        "Firefox OS",
        "Console",
        "Nintendo/Playstation",
        "GNU/Linux based",
        "Mint",
        "Mageia/VectorLinux",
        "Joli/Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware",
        "Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus",
        "Hurd/Linux",
        "GNU",
        "Chromium OS",
        "Solaris",
        "Solaris",
        "BSD based",
        "FreeBSD/NetBSD/OpenBSD/PC-BSD/DragonFly",
        "iOS",
        "Mac OS",
        "Other",
        "Solaris",
        "Haiku",
        "AIX",
        "Plan9/Minix/BeOS/OS2/AmigaOS/MorphOS/RISCOS/OpenVMS",
        "UNIX",
        "",
        "Constructor",
        "",
        "deprecated",
        "",
        "Export",
        "",
        "check js environment",
        "nodejs env",
        "requirejs env (optional)",
        "browser env",
        "jQuery/Zepto specific (optional)",
        "Note:",
        "In AMD env the global scope should be kept clean, but jQuery is an exception.",
        "jQuery always exports to global scope, unless jQuery.noConflict(true) is used,",
        "and we should catch that.",
        "",
        "141",
        "",
        "WEBPACK VAR INJECTION",
        "WEBPACK VAR INJECTION",
        ""
    ],
    "docstrings": [
        "* Draft v0.8.1\n *\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "*********************************************************************",
        "***",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule Draft",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule EditorState\n\t *",
        "* While editing, the user may apply inline style commands with a collapsed\n\t   * cursor, intending to type text that adopts the specified style. In this\n\t   * case, we track the specified style as an \"override\" that takes precedence\n\t   * over the inline style of the text adjacent to the cursor.\n\t   *\n\t   * If null, there is no override in place.",
        "* Get the appropriate inline style for the editor state. If an\n\t   * override is in place, use it. Otherwise, the current style is\n\t   * based on the location of the selection state.",
        "* Incorporate native DOM selection changes into the EditorState. This\n\t   * method can be used when we simply want to accept whatever the DOM\n\t   * has given us to represent selection, and we do not need to re-render\n\t   * the editor.\n\t   *\n\t   * To forcibly move the DOM selection, see `EditorState.forceSelection`.",
        "* At times, we need to force the DOM selection to be where we\n\t   * need it to be. This can occur when the anchor or focus nodes\n\t   * are non-text nodes, for instance. In this case, we want to trigger\n\t   * a re-render of the editor, which in turn forces selection into\n\t   * the correct place in the DOM. The `forceSelection` method\n\t   * accomplishes this.\n\t   *\n\t   * This method should be used in cases where you need to explicitly\n\t   * move the DOM selection from one place to another without a change\n\t   * in ContentState.",
        "* Move selection to the end of the editor without forcing focus.",
        "* Force focus to the end of the editor. This is useful in scenarios\n\t   * where we want to programmatically focus the input and it makes sense\n\t   * to allow the user to continue working seamlessly.",
        "* Push the current ContentState onto the undo stack if it should be\n\t   * considered a boundary state, and set the provided ContentState as the\n\t   * new current content.",
        "* Make the top ContentState in the undo stack the new current content and\n\t   * push the current content onto the redo stack.",
        "* Make the top ContentState in the redo stack the new current content and\n\t   * push the current content onto the undo stack.",
        "* Not for public consumption.",
        "* Not for public consumption.",
        "* Set the supplied SelectionState as the new current selection, and set\n\t * the `force` flag to trigger manual selection placement by the view.",
        "* Regenerate the entire tree map for a given ContentState and decorator.\n\t * Returns an OrderedMap that maps all available ContentBlock objects.",
        "* Regenerate tree map objects for all ContentBlocks that have changed\n\t * between the current editorState and newContent. Returns an OrderedMap\n\t * with only changed regenerated tree map objects.",
        "* Generate tree map objects for a new decorator object, preserving any\n\t * decorations that are unchanged from the previous decorator.\n\t *\n\t * Note that in order for this to perform optimally, decoration Lists for\n\t * decorators should be preserved when possible to allow for direct immutable\n\t * List comparison.",
        "* Return whether a change should be considered a boundary state, given\n\t * the previous change type. Allows us to discard potential boundary states\n\t * during standard typing or deletion behavior.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *",
        "* Use invariant() to assert state which your program assumes to be true.\n\t *\n\t * Provide sprintf-style format (only %s is supported) and arguments\n\t * to provide information about what broke and what you were\n\t * expecting.\n\t *\n\t * The invariant message will be stripped in production, but the invariant\n\t * will remain to ensure logic does not differ in production.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftModifier\n\t * @typechecks\n\t *",
        "* `DraftModifier` provides a set of convenience methods that apply\n\t * modifications to a `ContentState` object based on a target `SelectionState`.\n\t *\n\t * Any change to a `ContentState` should be decomposable into a series of\n\t * transaction functions that apply the required changes and return output\n\t * `ContentState` objects.\n\t *\n\t * These functions encapsulate some of the most common transaction sequences.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule CharacterMetadata\n\t * @typechecks\n\t *",
        "* Use this function instead of the `CharacterMetadata` constructor.\n\t   * Since most content generally uses only a very small number of\n\t   * style/entity permutations, we can reuse these objects as often as\n\t   * possible.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule generateRandomKey\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *",
        "* Checks to see whether `name` and `version` satisfy `query`.\n\t *\n\t * @param {string} name Name of the browser, device, engine or platform\n\t * @param {?string} version Version of the browser, engine or platform\n\t * @param {string} query Query of form \"Name [range expression]\"\n\t * @param {?function} normalizer Optional pre-processor for range expression\n\t * @return {boolean}",
        "* Normalizes `version` by stripping any \"NT\" prefix, but only on the Windows\n\t * platform.\n\t *\n\t * Mimics the stripping performed by the `UserAgentWindowsPlatform` PHP class.\n\t *\n\t * @param {string} version\n\t * @return {string}",
        "* Provides client-side access to the authoritative PHP-generated User Agent\n\t * information supplied by the server.",
        "* Check if the User Agent browser matches `query`.\n\t   *\n\t   * `query` should be a string like \"Chrome\" or \"Chrome > 33\".\n\t   *\n\t   * Valid browser names include:\n\t   *\n\t   * - ACCESS NetFront\n\t   * - AOL\n\t   * - Amazon Silk\n\t   * - Android\n\t   * - BlackBerry\n\t   * - BlackBerry PlayBook\n\t   * - Chrome\n\t   * - Chrome for iOS\n\t   * - Chrome frame\n\t   * - Facebook PHP SDK\n\t   * - Facebook for iOS\n\t   * - Firefox\n\t   * - IE\n\t   * - IE Mobile\n\t   * - Mobile Safari\n\t   * - Motorola Internet Browser\n\t   * - Nokia\n\t   * - Openwave Mobile Browser\n\t   * - Opera\n\t   * - Opera Mini\n\t   * - Opera Mobile\n\t   * - Safari\n\t   * - UIWebView\n\t   * - Unknown\n\t   * - webOS\n\t   * - etc...\n\t   *\n\t   * An authoritative list can be found in the PHP `BrowserDetector` class and\n\t   * related classes in the same file (see calls to `new UserAgentBrowser` here:\n\t   * https://fburl.com/50728104).\n\t   *\n\t   * @note Function results are memoized\n\t   *\n\t   * @param {string} query Query of the form \"Name [range expression]\"\n\t   * @return {boolean}",
        "* Check if the User Agent browser uses a 32 or 64 bit architecture.\n\t   *\n\t   * @note Function results are memoized\n\t   *\n\t   * @param {string} query Query of the form \"32\" or \"64\".\n\t   * @return {boolean}",
        "* Check if the User Agent device matches `query`.\n\t   *\n\t   * `query` should be a string like \"iPhone\" or \"iPad\".\n\t   *\n\t   * Valid device names include:\n\t   *\n\t   * - Kindle\n\t   * - Kindle Fire\n\t   * - Unknown\n\t   * - iPad\n\t   * - iPhone\n\t   * - iPod\n\t   * - etc...\n\t   *\n\t   * An authoritative list can be found in the PHP `DeviceDetector` class and\n\t   * related classes in the same file (see calls to `new UserAgentDevice` here:\n\t   * https://fburl.com/50728332).\n\t   *\n\t   * @note Function results are memoized\n\t   *\n\t   * @param {string} query Query of the form \"Name\"\n\t   * @return {boolean}",
        "* Check if the User Agent rendering engine matches `query`.\n\t   *\n\t   * `query` should be a string like \"WebKit\" or \"WebKit >= 537\".\n\t   *\n\t   * Valid engine names include:\n\t   *\n\t   * - Gecko\n\t   * - Presto\n\t   * - Trident\n\t   * - WebKit\n\t   * - etc...\n\t   *\n\t   * An authoritative list can be found in the PHP `RenderingEngineDetector`\n\t   * class related classes in the same file (see calls to `new\n\t   * UserAgentRenderingEngine` here: https://fburl.com/50728617).\n\t   *\n\t   * @note Function results are memoized\n\t   *\n\t   * @param {string} query Query of the form \"Name [range expression]\"\n\t   * @return {boolean}",
        "* Check if the User Agent platform matches `query`.\n\t   *\n\t   * `query` should be a string like \"Windows\" or \"iOS 5 - 6\".\n\t   *\n\t   * Valid platform names include:\n\t   *\n\t   * - Android\n\t   * - BlackBerry OS\n\t   * - Java ME\n\t   * - Linux\n\t   * - Mac OS X\n\t   * - Mac OS X Calendar\n\t   * - Mac OS X Internet Account\n\t   * - Symbian\n\t   * - SymbianOS\n\t   * - Windows\n\t   * - Windows Mobile\n\t   * - Windows Phone\n\t   * - iOS\n\t   * - iOS Facebook Integration Account\n\t   * - iOS Facebook Social Sharing UI\n\t   * - webOS\n\t   * - Chrome OS\n\t   * - etc...\n\t   *\n\t   * An authoritative list can be found in the PHP `PlatformDetector` class and\n\t   * related classes in the same file (see calls to `new UserAgentPlatform`\n\t   * here: https://fburl.com/50729226).\n\t   *\n\t   * @note Function results are memoized\n\t   *\n\t   * @param {string} query Query of the form \"Name [range expression]\"\n\t   * @return {boolean}",
        "* Check if the User Agent platform is a 32 or 64 bit architecture.\n\t   *\n\t   * @note Function results are memoized\n\t   *\n\t   * @param {string} query Query of the form \"32\" or \"64\".\n\t   * @return {boolean}",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftEntity\n\t * @typechecks\n\t *",
        "* A \"document entity\" is an object containing metadata associated with a\n\t * piece of text in a ContentBlock.\n\t *\n\t * For example, a `link` entity might include a `uri` property. When a\n\t * ContentBlock is rendered in the browser, text that refers to that link\n\t * entity may be rendered as an anchor, with the `uri` as the href value.\n\t *\n\t * In a ContentBlock, every position in the text may correspond to zero\n\t * or one entities. This correspondence is tracked using a key string,\n\t * generated via DraftEntity.create() and used to obtain entity metadata\n\t * via DraftEntity.get().",
        "* Create a DraftEntityInstance and store it for later retrieval.\n\t   *\n\t   * A random key string will be generated and returned. This key may\n\t   * be used to track the entity's usage in a ContentBlock, and for\n\t   * retrieving data about the entity at render time.",
        "* Add an existing DraftEntityInstance to the DraftEntity map. This is\n\t   * useful when restoring instances from the server.",
        "* Retrieve the entity corresponding to the supplied key string.",
        "* Entity instances are immutable. If you need to update the data for an\n\t   * instance, this method will merge your data updates and return a new\n\t   * instance.",
        "* Completely replace the data for a given instance.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule ContentBlock\n\t *",
        "* Execute a callback for every contiguous range of styles within the block.",
        "* Execute a callback for every contiguous range of entities within the block.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* Unicode-enabled replacesments for basic String functions.\n\t *\n\t * All the functions in this module assume that the input string is a valid\n\t * UTF-16 encoding of a Unicode sequence. If it's not the case, the behavior\n\t * will be undefined.\n\t *\n\t * WARNING: Since this module is typechecks-enforced, you may find new bugs\n\t * when replacing normal String functions with ones provided here.",
        "* @param {number} codeUnit   A Unicode code-unit, in range [0, 0x10FFFF]\n\t * @return {boolean}          Whether code-unit is in a surrogate (hi/low) range",
        "* Returns whether the two characters starting at `index` form a surrogate pair.\n\t * For example, given the string s = \"\\uD83D\\uDE0A\", (s, 0) returns true and\n\t * (s, 1) returns false.\n\t *\n\t * @param {string} str\n\t * @param {number} index\n\t * @return {boolean}",
        "* @param {string} str  Non-empty string\n\t * @return {boolean}    True if the input includes any surrogate code units",
        "* Return the length of the original Unicode character at given position in the\n\t * String by looking into the UTF-16 code unit; that is equal to 1 for any\n\t * non-surrogate characters in BMP ([U+0000..U+D7FF] and [U+E000, U+FFFF]); and\n\t * returns 2 for the hi/low surrogates ([U+D800..U+DFFF]), which are in fact\n\t * representing non-BMP characters ([U+10000..U+10FFFF]).\n\t *\n\t * Examples:\n\t * - '\\u0020' => 1\n\t * - '\\u3020' => 1\n\t * - '\\uD835' => 2\n\t * - '\\uD835\\uDDEF' => 2\n\t * - '\\uDDEF' => 2\n\t *\n\t * @param {string} str  Non-empty string\n\t * @param {number} pos  Position in the string to look for one code unit\n\t * @return {number}      Number 1 or 2",
        "* Fully Unicode-enabled replacement for String#length\n\t *\n\t * @param {string} str  Valid Unicode string\n\t * @return {number}     The number of Unicode characters in the string",
        "* Fully Unicode-enabled replacement for String#substr()\n\t *\n\t * @param {string} str      Valid Unicode string\n\t * @param {number} start    Location in Unicode sequence to begin extracting\n\t * @param {?number} length  The number of Unicode characters to extract\n\t *                          (default: to the end of the string)\n\t * @return {string}         Extracted sub-string",
        "* Fully Unicode-enabled replacement for String#substring()\n\t *\n\t * @param {string} str    Valid Unicode string\n\t * @param {number} start  Location in Unicode sequence to begin extracting\n\t * @param {?number} end   Location in Unicode sequence to end extracting\n\t *                        (default: end of the string)\n\t * @return {string}       Extracted sub-string",
        "* Get a list of Unicode code-points from a String\n\t *\n\t * @param {string} str        Valid Unicode string\n\t * @return {array<number>}    A list of code-points in [0..0x10FFFF]",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule SelectionState\n\t * @typechecks\n\t *",
        "* Return whether the specified range overlaps with an edge of the\n\t   * SelectionState.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule BlockMapBuilder\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule removeTextWithStrategy\n\t *",
        "* For a collapsed selection state, remove text based on the specified strategy.\n\t * If the selection state is not collapsed, remove the entire selected range.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *",
        "* This function is used to mark string literals representing CSS class names\n\t * so that they can be transformed statically. This allows for modularization\n\t * and minification of CSS class names.\n\t *\n\t * In static_upstream, this function is actually implemented, but it should\n\t * eventually be replaced with something more descriptive, and the transform\n\t * that is used in the main stack should be ported for use elsewhere.\n\t *\n\t * @param string|object className to modularize, or an object of key/values.\n\t *                      In the object case, the values are conditions that\n\t *                      determine if the className keys should be included.\n\t * @param [string ...]  Variable list of classNames in the string case.\n\t * @return string       Renderable space-separated CSS className.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftOffsetKey\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule findRangesImmutable\n\t *",
        "* Search through an array to find contiguous stretches of elements that\n\t * match a specified filter function.\n\t *\n\t * When ranges are found, execute a specified `found` function to supply\n\t * the values to the caller.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getContentStateFragment\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule isEventHandled\n\t * @typechecks\n\t *",
        "* Utility method for determining whether or not the value returned\n\t * from a handler indicates that it was handled.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule ContentState\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DefaultDraftBlockRenderMap\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule KeyBindingUtil\n\t * @typechecks\n\t *",
        "* Check whether the ctrlKey modifier is *not* being used in conjunction with\n\t   * the altKey modifier. If they are combined, the result is an `altGraph`\n\t   * key modifier, which should not be handled by this set of key bindings.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule findAncestorOffsetKey\n\t * @typechecks\n\t *",
        "* Get the key from the node's nearest offset-aware ancestor.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getEntityKeyForSelection\n\t * @typechecks\n\t *",
        "* Return the entity key that should be used when inserting text for the\n\t * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\n\t * and `SEGMENTED` entities should not be used for insertion behavior.",
        "* Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\n\t * return it. If not, return null.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule moveSelectionBackward\n\t *",
        "* Given a collapsed selection, move the focus `maxDistance` backward within\n\t * the selected block. If the selection will go beyond the start of the block,\n\t * move focus to the end of the previous block, but no further.\n\t *\n\t * This function is not Unicode-aware, so surrogate pairs will be treated\n\t * as having length 2.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule sanitizeDraftText\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* @param {DOMNode} element [description]\n\t * @param {string} name Overflow style property name.\n\t * @return {boolean} True if the supplied ndoe is scrollable.",
        "* Utilities for querying and mutating style properties.",
        "* Gets the style property for the supplied node. This will return either the\n\t   * computed style, if available, or the declared style.\n\t   *\n\t   * @param {DOMNode} node\n\t   * @param {string} name Style property name.\n\t   * @return {?string} Style property value.",
        "* Determines the nearest ancestor of a node that is scrollable.\n\t   *\n\t   * NOTE: This can be expensive if used repeatedly or on a node nested deeply.\n\t   *\n\t   * @param {?DOMNode} node Node from which to start searching.\n\t   * @return {?DOMWindow|DOMElement} Scroll parent of the supplied node.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks\n\t *",
        "* Constants to represent text directionality\n\t *\n\t * Also defines a *global* direciton, to be used in bidi algorithms as a\n\t * default fallback direciton, when no better direction is found or provided.\n\t *\n\t * NOTE: Use `setGlobalDir()`, or update `initGlobalDir()`, to set the initial\n\t *       global direction value based on the application.\n\t *\n\t * Part of the implementation of Unicode Bidirectional Algorithm (UBA)\n\t * Unicode Standard Annex #9 (UAX9)\n\t * http://www.unicode.org/reports/tr9/",
        "* Check if a directionality value is a Strong one",
        "* Get string value to be used for `dir` HTML attribute or `direction` CSS\n\t * property.",
        "* Get string value to be used for `dir` HTML attribute or `direction` CSS\n\t * property, but returns null if `dir` has same value as `otherDir`.\n\t * `null`.",
        "* Set the global direction.",
        "* Initialize the global direction",
        "* Get the global direction",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t *",
        "* This function accepts and discards inputs; it has no side effects. This is\n\t * primarily useful idiomatically for overridable function endpoints which\n\t * always need to be callable, since JS lacks a null-call idiom ala Cocoa.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* Gets the scroll position of the supplied element or window.\n\t *\n\t * The return values are bounded. This means that if the scroll position is\n\t * negative or exceeds the element boundaries (which is possible using inertial\n\t * scrolling), you will get zero or the maximum scroll position, respectively.\n\t *\n\t * If you need the unbound scroll position, use `getUnboundedScrollPosition`.\n\t *\n\t * @param {DOMWindow|DOMElement} scrollable\n\t * @return {object} Map with `x` and `y` keys.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule BlockTree\n\t *",
        "* Generate a block tree for a given ContentBlock/decorator pair.",
        "* Create a string representation of the given tree map. This allows us\n\t   * to rapidly determine whether a tree has undergone a significant\n\t   * structural change.",
        "* Generate LeafRange records for a given character list.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DefaultDraftInlineStyle\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftEditorBlock.react\n\t * @typechecks\n\t *",
        "* The default block renderer for a `DraftEditor` component.\n\t *\n\t * A `DraftEditorBlock` is able to render a given `ContentBlock` to its\n\t * appropriate decorator and inline style components.",
        "* When a block is mounted and overlaps the selection state, we need to make\n\t   * sure that the cursor is visible to match native behavior. This may not\n\t   * be the case if the user has pressed `RETURN` or pasted some content, since\n\t   * programatically creating these new blocks and setting the DOM selection\n\t   * will miss out on the browser natively scrolling to that position.\n\t   *\n\t   * To replicate native behavior, if the block overlaps the selection state\n\t   * on mount, force the scroll position. Check the scroll state of the scroll\n\t   * parent, and adjust it to align the entire block to the bottom of the\n\t   * scroll parent.",
        "* Return whether a block overlaps with either edge of the `SelectionState`.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftEntityInstance\n\t *",
        "* An instance of a document entity, consisting of a `type` and relevant\n\t * `data`, metadata about the entity.\n\t *\n\t * For instance, a \"link\" entity might provide a URI, and a \"mention\"\n\t * entity might provide the mentioned user's ID. These pieces of data\n\t * may be used when rendering the entity as part of a ContentBlock DOM\n\t * representation. For a link, the data would be used as an href for\n\t * the rendered anchor. For a mention, the ID could be used to retrieve\n\t * a hovercard.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftRemovableWord\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftStringKey\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule convertFromHTMLToContentBlocks\n\t * @typechecks\n\t *",
        "* Check to see if we have anything like <p> <blockquote> <h1>... to create\n\t * block tags from. If we do, we can use those and ignore <div> tags. If we\n\t * don't, we can treat <div> tags as meaningful (unstyled) blocks.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getDefaultKeyBinding\n\t * @typechecks\n\t *",
        "* Get the appropriate undo/redo command for a Z key command.",
        "* Retrieve a bound key command for the given event.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getDraftEditorSelectionWithNodes\n\t * @typechecks\n\t *",
        "* Convert the current selection range to an anchor/focus pair of offset keys\n\t * and values that can be interpreted by components.",
        "* Identify the first leaf descendant for the given node.",
        "* Identify the last leaf descendant for the given node.",
        "* Return the length of a node's textContent, regarding single newline\n\t * characters as zero-length. This allows us to avoid problems with identifying\n\t * the correct selection offset for empty blocks in IE, in which we\n\t * render newlines instead of break tags.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getFragmentFromSelection\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getRangeClientRects\n\t * @typechecks\n\t *",
        "* Like range.getClientRects() but normalizes for browser bugs.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getSafeBodyFromHTML\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getSelectionOffsetKeyForNode\n\t * @typechecks\n\t *",
        "* Get offset key from a node or it's child nodes. Return the first offset key\n\t * found on the DOM tree of given node.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getTextContentFromFiles\n\t *",
        "* Extract the text content from a file list.",
        "* todo isaac: Do work to turn html/rtf into a content fragment.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getUpdatedSelectionState\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule insertIntoList\n\t *",
        "* Maintain persistence for target list when appending and prepending.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule isSelectionAtLeafStart\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule moveSelectionForward\n\t *",
        "* Given a collapsed selection, move the focus `maxDistance` forward within\n\t * the selected block. If the selection will go beyond the end of the block,\n\t * move focus to the start of the next block, but no further.\n\t *\n\t * This function is not Unicode-aware, so surrogate pairs will be treated\n\t * as having length 2.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule removeEntitiesAtEdges\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* If DataTransferItem is a file then return the Blob of data.\n\t *\n\t * @param {object} item\n\t * @return {?blob}",
        "* @param {object} data",
        "* Is this likely to be a rich text data transfer?\n\t   *\n\t   * @return {boolean}",
        "* Get raw text.\n\t   *\n\t   * @return {?string}",
        "* Get HTML paste data\n\t   *\n\t   * @return {?string}",
        "* Is this a link data transfer?\n\t   *\n\t   * @return {boolean}",
        "* Get a link url.\n\t   *\n\t   * @return {?string}",
        "* Is this an image data transfer?\n\t   *\n\t   * @return {boolean}",
        "* Get files.\n\t   *\n\t   * @return {array}",
        "* Are there any files to fetch?\n\t   *\n\t   * @return {boolean}",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *",
        "* @param {DOMElement} element\n\t * @param {DOMDocument} doc\n\t * @return {boolean}",
        "* Scroll Module. This class contains 4 simple static functions\n\t * to be used to access Element.scrollTop/scrollLeft properties.\n\t * To solve the inconsistencies between browsers when either\n\t * document.body or document.documentElement is supplied,\n\t * below logic will be used to alleviate the issue:\n\t *\n\t * 1. If 'element' is either 'document.body' or 'document.documentElement,\n\t *    get whichever element's 'scroll{Top,Left}' is larger.\n\t * 2. If 'element' is either 'document.body' or 'document.documentElement',\n\t *    set the 'scroll{Top,Left}' on both elements.",
        "* @param {DOMElement} element\n\t   * @return {number}",
        "* @param {DOMElement} element\n\t   * @param {number} newTop",
        "* @param {DOMElement} element\n\t   * @return {number}",
        "* @param {DOMElement} element\n\t   * @param {number} newLeft",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks\n\t *",
        "* Basic (stateless) API for text direction detection\n\t *\n\t * Part of our implementation of Unicode Bidirectional Algorithm (UBA)\n\t * Unicode Standard Annex #9 (UAX9)\n\t * http://www.unicode.org/reports/tr9/",
        "* RegExp ranges of characters with a *Strong* Bidi_Class value.\n\t *\n\t * Data is based on DerivedBidiClass.txt in UCD version 7.0.0.\n\t *\n\t * NOTE: For performance reasons, we only support Unicode's\n\t *       Basic Multilingual Plane (BMP) for now.",
        "* Returns the first strong character (has Bidi_Class value of L, R, or AL).\n\t *\n\t * @param str  A text block; e.g. paragraph, table cell, tag\n\t * @return     A character with strong bidi direction, or null if not found",
        "* Returns the direction of a block of text, based on the direction of its\n\t * first strong character (has Bidi_Class value of L, R, or AL).\n\t *\n\t * @param str  A text block; e.g. paragraph, table cell, tag\n\t * @return     The resolved direction",
        "* Returns the direction of a block of text, based on the direction of its\n\t * first strong character (has Bidi_Class value of L, R, or AL), or a fallback\n\t * direction, if no strong character is found.\n\t *\n\t * This function is supposed to be used in respect to Higher-Level Protocol\n\t * rule HL1. (http://www.unicode.org/reports/tr9/#HL1)\n\t *\n\t * @param str       A text block; e.g. paragraph, table cell, tag\n\t * @param fallback  Fallback direction, used if no strong direction detected\n\t *                  for the block (default = NEUTRAL)\n\t * @return          The resolved direction",
        "* Returns the direction of a block of text, based on the direction of its\n\t * first strong character (has Bidi_Class value of L, R, or AL), or a fallback\n\t * direction, if no strong character is found.\n\t *\n\t * NOTE: This function is similar to resolveBlockDir(), but uses the global\n\t * direction as the fallback, so it *always* returns a Strong direction,\n\t * making it useful for integration in places that you need to make the final\n\t * decision, like setting some CSS class.\n\t *\n\t * This function is supposed to be used in respect to Higher-Level Protocol\n\t * rule HL1. (http://www.unicode.org/reports/tr9/#HL1)\n\t *\n\t * @param str             A text block; e.g. paragraph, table cell\n\t * @param strongFallback  Fallback direction, used if no strong direction\n\t *                        detected for the block (default = global direction)\n\t * @return                The resolved Strong direction",
        "* Returns true if getDirection(arguments...) returns LTR.\n\t *\n\t * @param str             A text block; e.g. paragraph, table cell\n\t * @param strongFallback  Fallback direction, used if no strong direction\n\t *                        detected for the block (default = global direction)\n\t * @return                True if the resolved direction is LTR",
        "* Returns true if getDirection(arguments...) returns RTL.\n\t *\n\t * @param str             A text block; e.g. paragraph, table cell\n\t * @param strongFallback  Fallback direction, used if no strong direction\n\t *                        detected for the block (default = global direction)\n\t * @return                True if the resolved direction is RTL",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t *",
        "* Checks if a given DOM node contains or is another DOM node.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* Same as document.activeElement but wraps in a try-catch block. In IE it is\n\t * not safe to call document.activeElement if there is nothing focused.\n\t *\n\t * The activeElement will be null only if the document or document body is not\n\t * yet defined.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule AtomicBlockUtils\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule CompositeDraftDecorator\n\t * @typechecks\n\t *",
        "* A CompositeDraftDecorator traverses through a list of DraftDecorator\n\t * instances to identify sections of a ContentBlock that should be rendered\n\t * in a \"decorated\" manner. For example, hashtags, mentions, and links may\n\t * be intended to stand out visually, be rendered as anchors, etc.\n\t *\n\t * The list of decorators supplied to the constructor will be used in the\n\t * order they are provided. This allows the caller to specify a priority for\n\t * string matching, in case of match collisions among decorators.\n\t *\n\t * For instance, I may have a link with a `#` in its text. Though this section\n\t * of text may match our hashtag decorator, it should not be treated as a\n\t * hashtag. I should therefore list my link DraftDecorator\n\t * before my hashtag DraftDecorator when constructing this composite\n\t * decorator instance.\n\t *\n\t * Thus, when a collision like this is encountered, the earlier match is\n\t * preserved and the new match is discarded.",
        "* Determine whether we can occupy the specified slice of the decorations\n\t * array.",
        "* Splice the specified component into our decoration array at the desired\n\t * range.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule ContentStateInlineStyle\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftEditor.react\n\t * @typechecks\n\t *",
        "* `DraftEditor` is the root editor component. It composes a `contentEditable`\n\t * div, and provides a wide variety of useful function props for managing the\n\t * state of the editor. See `DraftEditorProps` for details.",
        "* Build a method that will pass the event to the specified handler method.\n\t   * This allows us to look up the correct handler function for the current\n\t   * editor mode, if any has been specified.",
        "* Define proxies that can route events to the current handler.",
        "* IE has a hardcoded \"feature\" that attempts to convert link text into\n\t     * anchors in contentEditable DOM. This breaks the editor's expectations of\n\t     * the DOM, and control is lost. Disable it to make IE behave.\n\t     * See: http://blogs.msdn.com/b/ieinternals/archive/2010/09/15/\n\t     * ie9-beta-minor-change-list.aspx",
        "* Prevent selection events from affecting the current editor state. This\n\t   * is mostly intended to defend against IE, which fires off `selectionchange`\n\t   * events regardless of whether the selection is set via the browser or\n\t   * programmatically. We only care about selection events that occur because\n\t   * of browser interaction, not re-renders and forced selections.",
        "* Used via `this.focus()`.\n\t   *\n\t   * Force focus back onto the editor node.\n\t   *\n\t   * Forcing focus causes the browser to scroll to the top of the editor, which\n\t   * may be undesirable when the editor is taller than the viewport. To solve\n\t   * this, either use a specified scroll position (in cases like `cut` behavior\n\t   * where it should be restored to a known position) or store the current\n\t   * scroll state and put it back in place after focus has been forced.",
        "* Used via `this.setMode(...)`.\n\t   *\n\t   * Set the behavior mode for the editor component. This switches the current\n\t   * handler module to ensure that DOM events are managed appropriately for\n\t   * the active mode.",
        "* Used via `this.restoreEditorDOM()`.\n\t   *\n\t   * Force a complete re-render of the editor based on the current EditorState.\n\t   * This is useful when we know we are going to lose control of the DOM\n\t   * state (cut command, IME) and we want to make sure that reconciliation\n\t   * occurs on a version of the DOM that is synchronized with our EditorState.",
        "* Guard against rendering. Intended for use when we need to manually\n\t   * reset editor contents, to ensure that no outside influences lead to\n\t   * React reconciliation when we are in an uncertain state.",
        "* Used via `this.setClipboard(...)`.\n\t   *\n\t   * Set the clipboard state for a cut/copy event.",
        "* Used via `this.getClipboard()`.\n\t   *\n\t   * Retrieve the clipboard state for a cut/copy event.",
        "* Used via `this.update(...)`.\n\t   *\n\t   * Propagate a new `EditorState` object to higher-level components. This is\n\t   * the method by which event handlers inform the `DraftEditor` component of\n\t   * state changes. A component that composes a `DraftEditor` **must** provide\n\t   * an `onChange` prop to receive state updates passed along from this\n\t   * function.",
        "* Used in conjunction with `_onDragLeave()`, by counting the number of times\n\t   * a dragged element enters and leaves the editor (or any of its children),\n\t   * to determine when the dragged element absolutely leaves the editor.",
        "* See `_onDragEnter()`.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftEditorCompositionHandler\n\t *",
        "* Millisecond delay to allow `compositionstart` to fire again upon\n\t * `compositionend`.\n\t *\n\t * This is used for Korean input to ensure that typing can continue without\n\t * the editor trying to render too quickly. More specifically, Safari 7.1+\n\t * triggers `compositionstart` a little slower than Chrome/FF, which\n\t * leads to composed characters being resolved and re-render occurring\n\t * sooner than we want.",
        "* A handful of variables used to track the current composition and its\n\t * resolution status. These exist at the module level because it is not\n\t * possible to have compositions occurring in multiple editors simultaneously,\n\t * and it simplifies state management with respect to the DraftEditor component.",
        "* A `compositionstart` event has fired while we're still in composition\n\t   * mode. Continue the current composition session to prevent a re-render.",
        "* Attempt to end the current composition session.\n\t   *\n\t   * Defer handling because browser will still insert the chars into active\n\t   * element after `compositionend`. If a `compositionstart` event fires\n\t   * before `resolveComposition` executes, our composition session will\n\t   * continue.\n\t   *\n\t   * The `resolved` flag is useful because certain IME interfaces fire the\n\t   * `compositionend` event multiple times, thus queueing up multiple attempts\n\t   * at handling the composition. Since handling the same composition event\n\t   * twice could break the DOM, we only use the first event. Example: Arabic\n\t   * Google Input Tools on Windows 8.1 fires `compositionend` three times.",
        "* In Safari, keydown events may fire when committing compositions. If\n\t   * the arrow keys are used to commit, prevent default so that the cursor\n\t   * doesn't move, otherwise it will jump back noticeably on re-render.",
        "* Keypress events may fire when committing compositions. In Firefox,\n\t   * pressing RETURN commits the composition and inserts extra newline\n\t   * characters that we do not want. `preventDefault` allows the composition\n\t   * to be committed while preventing the extra characters.",
        "* Attempt to insert composed characters into the document.\n\t   *\n\t   * If we are still in a composition session, do nothing. Otherwise, insert\n\t   * the characters into the document and terminate the composition session.\n\t   *\n\t   * If no characters were composed -- for instance, the user\n\t   * deleted all composed characters and committed nothing new --\n\t   * force a re-render. We also re-render when the composition occurs\n\t   * at the beginning of a leaf, to ensure that if the browser has\n\t   * created a new text node for the composition, we will discard it.\n\t   *\n\t   * Resetting innerHTML will move focus to the beginning of the editor,\n\t   * so we update to force it back to the correct place.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftEditorContents.react\n\t * @typechecks\n\t *",
        "* `DraftEditorContents` is the container component for all block components\n\t * rendered for a `DraftEditor`. It is optimized to aggressively avoid\n\t * re-rendering blocks whenever possible.\n\t *\n\t * This component is separate from `DraftEditor` because certain props\n\t * (for instance, ARIA props) must be allowed to update without affecting\n\t * the contents of the editor.",
        "* Provide default styling for list items. This way, lists will be styled with\n\t * proper counters and indentation even if the caller does not specify\n\t * their own styling at all. If more than five levels of nesting are needed,\n\t * the necessary CSS classes can be provided via `blockStyleFn` configuration.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftEditorDragHandler\n\t * @typechecks\n\t *",
        "* Get a SelectionState for the supplied mouse event.",
        "* Drag originating from input terminated.",
        "* Handle data being dropped.",
        "* Insert text at a specified selection.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftEditorEditHandler\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftEditorLeaf.react\n\t * @typechecks\n\t *",
        "* All leaf nodes in the editor are spans with single text nodes. Leaf\n\t * elements are styled based on the merging of an optional custom style map\n\t * and a default style map.\n\t *\n\t * `DraftEditorLeaf` also provides a wrapper for calling into the imperative\n\t * DOM Selection API. In this way, top-level components can declaratively\n\t * maintain the selection state.",
        "* By making individual leaf instances aware of their context within\n\t   * the text of the editor, we can set our selection range more\n\t   * easily than we could in the non-React world.\n\t   *\n\t   * Note that this depends on our maintaining tight control over the\n\t   * DOM structure of the TextEditor component. If leaves had multiple\n\t   * text nodes, this would be harder.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftEditorPlaceholder.react\n\t * @typechecks\n\t *",
        "* This component is responsible for rendering placeholder text for the\n\t * `DraftEditor` component.\n\t *\n\t * Override placeholder style via CSS.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftEditorTextNode.react\n\t * @typechecks\n\t *",
        "* Check whether the node should be considered a newline.",
        "* Placeholder elements for empty text content.\n\t *\n\t * What is this `data-text` attribute, anyway? It turns out that we need to\n\t * put an attribute on the lowest-level text node in order to preserve correct\n\t * spellcheck handling. If the <span> is naked, Chrome and Safari may do\n\t * bizarre things to do the DOM -- split text nodes, create extra spans, etc.\n\t * If the <span> has an attribute, this appears not to happen.\n\t * See http://jsfiddle.net/9khdavod/ for the failure case, and\n\t * http://jsfiddle.net/7pg143f7/ for the fixed case.",
        "* The lowest-level component in a `DraftEditor`, the text node component\n\t * replaces the default React text node implementation. This allows us to\n\t * perform custom handling of newline behavior and avoid re-rendering text\n\t * nodes with DOM state that already matches the expectations of our immutable\n\t * editor state.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftEntitySegments\n\t * @typechecks\n\t *",
        "* Identify the range to delete from a segmented entity.\n\t *\n\t * Rules:\n\t *\n\t *  Example: 'John F. Kennedy'\n\t *\n\t *   - Deletion from within any non-whitespace (i.e. ['John', 'F.', 'Kennedy'])\n\t *     will return the range of that text.\n\t *\n\t *       'John F. Kennedy' -> 'John F.'\n\t *                  ^\n\t *\n\t *   - Forward deletion of whitespace will remove the following section:\n\t *\n\t *       'John F. Kennedy' -> 'John Kennedy'\n\t *            ^\n\t *\n\t *   - Backward deletion of whitespace will remove the previous section:\n\t *\n\t *       'John F. Kennedy' -> 'F. Kennedy'\n\t *            ^",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule DraftPasteProcessor\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule EditorBidiService\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule RichTextEditorUtil\n\t * @typechecks\n\t *",
        "* For collapsed selections at the start of styled blocks, backspace should\n\t   * just remove the existing style.",
        "* Toggle the specified inline style for the selection. If the\n\t   * user's selection is collapsed, apply or remove the style for the\n\t   * internal state. If it is not collapsed, apply the change directly\n\t   * to the document state.",
        "* When a collapsed cursor is at the start of an empty styled block, allow\n\t   * certain key commands (newline, backspace) to simply change the\n\t   * style of the block instead of the default behavior.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule SecondaryClipboard\n\t *",
        "* Some systems offer a \"secondary\" clipboard to allow quick internal cut\n\t * and paste behavior. For instance, Ctrl+K (cut) and Ctrl+Y (paste).",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule adjustBlockDepthForContentState\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule applyEntityToContentBlock\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule applyEntityToContentState\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule convertFromDraftStateToRaw\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule convertFromRawToDraftState\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule createCharacterList\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule decodeEntityRanges\n\t * @typechecks\n\t *",
        "* Convert to native JavaScript string lengths to determine ranges.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule decodeInlineStyleRanges\n\t * @typechecks\n\t *",
        "* Convert to native JavaScript string lengths to determine ranges.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule editOnBeforeInput\n\t *",
        "*never* happen while a contenteditable is focused, but as of v28, it",
        "* Replace the current selection with the specified text string, with the\n\t * inline style and entity key applied to the newly inserted text.",
        "* When `onBeforeInput` executes, the browser is attempting to insert a\n\t * character into the editor. Apply this character data to the document,\n\t * allowing native insertion if possible.\n\t *\n\t * Native insertion is encouraged in order to limit re-rendering and to\n\t * preserve spellcheck highlighting, which disappears or flashes if re-render\n\t * occurs on the relevant text nodes.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule editOnBlur\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule editOnCompositionStart\n\t *",
        "* The user has begun using an IME input system. Switching to `composite` mode\n\t * allows handling composition input and disables other edit behavior.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule editOnCopy\n\t *",
        "* If we have a selection, create a ContentState fragment and store\n\t * it in our internal clipboard. Subsequent paste events will use this\n\t * fragment if no external clipboard data is supplied.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule editOnCut\n\t *",
        "* On `cut` events, native behavior is allowed to occur so that the system\n\t * clipboard is set properly. This means that we need to take steps to recover\n\t * the editor DOM state after the `cut` has occurred in order to maintain\n\t * control of the component.\n\t *\n\t * In addition, we can keep a copy of the removed fragment, including all\n\t * styles and entities, for use as an internal paste.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule editOnDragOver\n\t *",
        "* Drag behavior has begun from outside the editor element.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule editOnDragStart\n\t *",
        "* A `dragstart` event has begun within the text editor component.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule editOnFocus\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule editOnInput\n\t *",
        "* This function is intended to handle spellcheck and autocorrect changes,\n\t * which occur in the DOM natively without any opportunity to observe or\n\t * interpret the changes before they occur.\n\t *\n\t * The `input` event fires in contentEditable elements reliably for non-IE\n\t * browsers, immediately after changes occur to the editor DOM. Since our other\n\t * handlers override or otherwise handle cover other varieties of text input,\n\t * the DOM state should match the model in all controlled input cases. Thus,\n\t * when an `input` change leads to a DOM/model mismatch, the change should be\n\t * due to a spellcheck change, and we can incorporate it into our model.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule editOnKeyDown\n\t *",
        "* Map a `DraftEditorCommand` command value to a corresponding function.",
        "* Intercept keydown behavior to handle keys and commands manually, if desired.\n\t *\n\t * Keydown combinations may be mapped to `DraftCommand` values, which may\n\t * correspond to command functions that modify the editor or its contents.\n\t *\n\t * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\n\t * component may provide a custom mapping via the `keyBindingFn` prop.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule editOnPaste\n\t *",
        "* Paste content.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule editOnSelect\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule encodeEntityRanges\n\t * @typechecks\n\t *",
        "* Convert to UTF-8 character counts for storage.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule encodeInlineStyleRanges\n\t *",
        "* Helper function for getting encoded styles for each inline style. Convert\n\t * to UTF-8 character counts for storage.",
        "* Retrieve the encoded arrays of inline styles, with each individual style\n\t * treated separately.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule expandRangeToStartOfLine\n\t * @typechecks\n\t *",
        "* Return the computed line height, in pixels, for the provided element.",
        "* Return whether every ClientRect in the provided list lies on the same line.\n\t *\n\t * We assume that the rects on the same line all contain the baseline, so the\n\t * lowest top line needs to be above the highest bottom line (i.e., if you were\n\t * to project the rects onto the y-axis, their intersection would be nonempty).\n\t *\n\t * In addition, we require that no two boxes are lineHeight (or more) apart at\n\t * either top or bottom, which helps protect against false positives for fonts\n\t * with extremely large glyph heights (e.g., with a font size of 17px, Zapfino\n\t * produces rects of height 58px!).",
        "* Return the length of a node, as used by Range offsets.",
        "* Given a collapsed range, move the start position backwards as far as\n\t * possible while the range still spans only a single line.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getCharacterRemovalRange\n\t * @typechecks\n\t *",
        "* Given a SelectionState and a removal direction, determine the entire range\n\t * that should be removed from a ContentState. This is based on any entities\n\t * within the target, with their `mutability` values taken into account.\n\t *\n\t * For instance, if we are attempting to remove part of an \"immutable\" entity\n\t * range, the entire entity must be removed. The returned `SelectionState`\n\t * will be adjusted accordingly.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getDraftEditorSelection\n\t * @typechecks\n\t *",
        "* Convert the current selection range to an anchor/focus pair of offset keys\n\t * and values that can be interpreted by components.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getRangeBoundingClientRect\n\t * @typechecks\n\t *",
        "* Like range.getBoundingClientRect() but normalizes for browser bugs.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getRangesForDraftEntity\n\t * @typechecks\n\t *",
        "* Obtain the start and end positions of the range that has the\n\t * specified entity applied to it.\n\t *\n\t * Entity keys are applied only to contiguous stretches of text, so this\n\t * method searches for the first instance of the entity key and returns\n\t * the subsequent range.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule getVisibleSelectionRect\n\t * @typechecks\n\t *",
        "* Return the bounding ClientRect for the visible DOM selection, if any.\n\t * In cases where there are no selected ranges or the bounding rect is\n\t * temporarily invalid, return null.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule insertFragmentIntoContentState\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule insertTextIntoContentState\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule keyCommandBackspaceToStartOfLine\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule keyCommandBackspaceWord\n\t *",
        "* Delete the word that is left of the cursor, as well as any spaces or\n\t * punctuation after the word.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule keyCommandDeleteWord\n\t *",
        "* Delete the word that is right of the cursor, as well as any spaces or\n\t * punctuation before the word.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule keyCommandInsertNewline\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule keyCommandMoveSelectionToEndOfBlock\n\t *",
        "* See comment for `moveSelectionToStartOfBlock`.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule keyCommandMoveSelectionToStartOfBlock\n\t *",
        "* Collapse selection at the start of the first selected block. This is used\n\t * for Firefox versions that attempt to navigate forward/backward instead of\n\t * moving the cursor. Other browsers are able to move the cursor natively.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule keyCommandPlainBackspace\n\t *",
        "* Remove the selected range. If the cursor is collapsed, remove the preceding\n\t * character. This operation is Unicode-aware, so removing a single character\n\t * will remove a surrogate pair properly as well.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule keyCommandPlainDelete\n\t *",
        "* Remove the selected range. If the cursor is collapsed, remove the following\n\t * character. This operation is Unicode-aware, so removing a single character\n\t * will remove a surrogate pair properly as well.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule keyCommandTransposeCharacters\n\t *",
        "* Transpose the characters on either side of a collapsed cursor, or\n\t * if the cursor is at the end of the block, transpose the last two\n\t * characters.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule keyCommandUndo\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule modifyBlockForContentState\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule removeRangeFromContentState\n\t *",
        "* Maintain persistence for target list when removing characters on the\n\t * head and tail of the character list.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule setDraftEditorSelection\n\t * @typechecks\n\t *",
        "* In modern non-IE browsers, we can support both forward and backward\n\t * selections.\n\t *\n\t * Note: IE10+ supports the Selection object, but it does not support\n\t * the `extend` method, which means that even in modern IE, it's not possible\n\t * to programatically create a backward selection. Thus, for all IE\n\t * versions, we use the old IE API to create our selections.",
        "* Extend selection towards focus point.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule splitBlockInContentState\n\t * @typechecks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule splitTextIntoTextBlocks\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks\n\t * @stub\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t *",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks\n\t *",
        "* Stateful API for text direction detection\n\t *\n\t * This class can be used in applications where you need to detect the\n\t * direction of a sequence of text blocks, where each direction shall be used\n\t * as the fallback direction for the next one.\n\t *\n\t * NOTE: A default direction, if not provided, is set based on the global\n\t *       direction, as defined by `UnicodeBidiDirection`.\n\t *\n\t * == Example ==\n\t * ```\n\t * var UnicodeBidiService = require('UnicodeBidiService');\n\t *\n\t * var bidiService = new UnicodeBidiService();\n\t *\n\t * ...\n\t *\n\t * bidiService.reset();\n\t * for (var para in paragraphs) {\n\t *   var dir = bidiService.getDirection(para);\n\t *   ...\n\t * }\n\t * ```\n\t *\n\t * Part of our implementation of Unicode Bidirectional Algorithm (UBA)\n\t * Unicode Standard Annex #9 (UAX9)\n\t * http://www.unicode.org/reports/tr9/",
        "* Stateful class for paragraph direction detection\n\t   *\n\t   * @param defaultDir  Default direction of the service",
        "* Reset the internal state\n\t   *\n\t   * Instead of creating a new instance, you can just reset() your instance\n\t   * everytime you start a new loop.",
        "* Returns the direction of a block of text, and remembers it as the\n\t   * fall-back direction for the next paragraph.\n\t   *\n\t   * @param str  A text block, e.g. paragraph, table cell, tag\n\t   * @return     The resolved direction",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *",
        "* Usage note:\n\t * This module makes a best effort to export the same data we would internally.\n\t * At Facebook we use a server-generated module that does the parsing and\n\t * exports the data for the client to use. We can't rely on a server-side\n\t * implementation in open source so instead we make use of an open source\n\t * library to do the heavy lifting and then make some adjustments as necessary.\n\t * It's likely there will be some differences. Some we can smooth over.\n\t * Others are going to be harder.",
        "* Convert from UAParser platform name to what we expect.",
        "* Get the version number in parts. This is very naive. We actually get major\n\t * version as a part of UAParser already, which is generally good enough, but\n\t * let's get the minor just in case.",
        "* Get the UA data fom UAParser and then convert it to the format we're\n\t * expecting for our APIS.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *",
        "* Splits input `range` on \"||\" and returns true if any subrange matches\n\t * `version`.\n\t *\n\t * @param {string} range\n\t * @param {string} version\n\t * @returns {boolean}",
        "* Splits input `range` on \" - \" (the surrounding whitespace is required) and\n\t * returns true if version falls between the two operands.\n\t *\n\t * @param {string} range\n\t * @param {string} version\n\t * @returns {boolean}",
        "* Checks if `range` matches `version`. `range` should be a \"simple\" range (ie.\n\t * not a compound range using the \" - \" or \"||\" operators).\n\t *\n\t * @param {string} range\n\t * @param {string} version\n\t * @returns {boolean}",
        "* Checks whether `a` is less than `b`.\n\t *\n\t * @param {array<string>} a\n\t * @param {array<string>} b\n\t * @returns {boolean}",
        "* Checks whether `a` is less than or equal to `b`.\n\t *\n\t * @param {array<string>} a\n\t * @param {array<string>} b\n\t * @returns {boolean}",
        "* Checks whether `a` is equal to `b`.\n\t *\n\t * @param {array<string>} a\n\t * @param {array<string>} b\n\t * @returns {boolean}",
        "* Checks whether `a` is greater than or equal to `b`.\n\t *\n\t * @param {array<string>} a\n\t * @param {array<string>} b\n\t * @returns {boolean}",
        "* Checks whether `a` is greater than `b`.\n\t *\n\t * @param {array<string>} a\n\t * @param {array<string>} b\n\t * @returns {boolean}",
        "* Checks whether `a` is \"reasonably close\" to `b` (as described in\n\t * https://www.npmjs.org/doc/misc/semver.html). For example, if `b` is \"1.3.1\"\n\t * then \"reasonably close\" is defined as \">= 1.3.1 and < 1.4\".\n\t *\n\t * @param {array<string>} a\n\t * @param {array<string>} b\n\t * @returns {boolean}",
        "* Extracts the optional modifier (<, <=, =, >=, >, ~, ~>) and version\n\t * components from `range`.\n\t *\n\t * For example, given `range` \">= 1.2.3\" returns an object with a `modifier` of\n\t * `\">=\"` and `components` of `[1, 2, 3]`.\n\t *\n\t * @param {string} range\n\t * @returns {object}",
        "* Determines if `number` is a number.\n\t *\n\t * @param {mixed} number\n\t * @returns {boolean}",
        "* Tests whether `range` is a \"simple\" version number without any modifiers\n\t * (\">\", \"~\" etc).\n\t *\n\t * @param {string} range\n\t * @returns {boolean}",
        "* Zero-pads array `array` until it is at least `length` long.\n\t *\n\t * @param {array} array\n\t * @param {number} length",
        "* Normalizes `a` and `b` in preparation for comparison by doing the following:\n\t *\n\t * - zero-pads `a` and `b`\n\t * - marks any \"x\", \"X\" or \"*\" component in `b` as equivalent by zero-ing it out\n\t *   in both `a` and `b`\n\t * - marks any final \"*\" component in `b` as a greedy wildcard by zero-ing it\n\t *   and all of its successors in `a`\n\t *\n\t * @param {array<string>} a\n\t * @param {array<string>} b\n\t * @returns {array<array<string>>}",
        "* Returns the numerical -- not the lexicographical -- ordering of `a` and `b`.\n\t *\n\t * For example, `10-alpha` is greater than `2-beta`.\n\t *\n\t * @param {string} a\n\t * @param {string} b\n\t * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n\t * or greater than `b`, respectively",
        "* Returns the ordering of `a` and `b`.\n\t *\n\t * @param {string|number} a\n\t * @param {string|number} b\n\t * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n\t * or greater than `b`, respectively",
        "* Compares arrays of version components.\n\t *\n\t * @param {array<string>} a\n\t * @param {array<string>} b\n\t * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n\t * or greater than `b`, respectively",
        "* Checks whether `version` satisfies the `range` specification.\n\t   *\n\t   * We support a subset of the expressions defined in\n\t   * https://www.npmjs.org/doc/misc/semver.html:\n\t   *\n\t   *    version   Must match version exactly\n\t   *    =version  Same as just version\n\t   *    >version  Must be greater than version\n\t   *    >=version Must be greater than or equal to version\n\t   *    <version  Must be less than version\n\t   *    <=version Must be less than or equal to version\n\t   *    ~version  Must be at least version, but less than the next significant\n\t   *              revision above version:\n\t   *              \"~1.2.3\" is equivalent to \">= 1.2.3 and < 1.3\"\n\t   *    ~>version Equivalent to ~version\n\t   *    1.2.x     Must match \"1.2.x\", where \"x\" is a wildcard that matches\n\t   *              anything\n\t   *    1.2.*     Similar to \"1.2.x\", but \"*\" in the trailing position is a\n\t   *              \"greedy\" wildcard, so will match any number of additional\n\t   *              components:\n\t   *              \"1.2.*\" will match \"1.2.1\", \"1.2.1.1\", \"1.2.1.1.1\" etc\n\t   *    *         Any version\n\t   *    \"\"        (Empty string) Same as *\n\t   *    v1 - v2   Equivalent to \">= v1 and <= v2\"\n\t   *    r1 || r2  Passes if either r1 or r2 are satisfied\n\t   *\n\t   * @param {string} range\n\t   * @param {string} version\n\t   * @returns {boolean}",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* Camelcases a hyphenated string, for example:\n\t *\n\t *   > camelize('background-color')\n\t *   < \"backgroundColor\"\n\t *\n\t * @param {string} string\n\t * @return {string}",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* Convert array-like objects to arrays.\n\t *\n\t * This API assumes the caller knows the contents of the data type. For less\n\t * well defined inputs use createArrayFromMixed.\n\t *\n\t * @param {object|function|filelist} obj\n\t * @return {array}",
        "* Perform a heuristic test to determine if an object is \"array-like\".\n\t *\n\t *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n\t *   Joshu replied: \"Mu.\"\n\t *\n\t * This function determines if its argument has \"array nature\": it returns\n\t * true if the argument is an actual array, an `arguments' object, or an\n\t * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n\t *\n\t * It will return false for other array-like objects like Filelist.\n\t *\n\t * @param {*} obj\n\t * @return {boolean}",
        "* Ensure that the argument is an array by wrapping it in an array if it is not.\n\t * Creates a copy of the argument if it is already an array.\n\t *\n\t * This is mostly useful idiomatically:\n\t *\n\t *   var createArrayFromMixed = require('createArrayFromMixed');\n\t *\n\t *   function takesOneOrMoreThings(things) {\n\t *     things = createArrayFromMixed(things);\n\t *     ...\n\t *   }\n\t *\n\t * This allows you to treat `things' as an array, but accept scalars in the API.\n\t *\n\t * If you need to convert an array-like object, like `arguments`, into an array\n\t * use toArray instead.\n\t *\n\t * @param {*} obj\n\t * @return {array}",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* Gets the element with the document scroll properties such as `scrollLeft` and\n\t * `scrollHeight`. This may differ across different browsers.\n\t *\n\t * NOTE: The return value can be null if the DOM is not yet ready.\n\t *\n\t * @param {?DOMDocument} doc Defaults to current document.\n\t * @return {?DOMElement}",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* Gets an element's position in pixels relative to the viewport. The returned\n\t * object represents the position of the element's top left corner.\n\t *\n\t * @param {DOMElement} element\n\t * @return {object}",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* Gets an element's bounding rect in pixels relative to the viewport.\n\t *\n\t * @param {DOMElement} elem\n\t * @return {object}",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* Gets the scroll position of the supplied element or window.\n\t *\n\t * The return values are unbounded, unlike `getScrollPosition`. This means they\n\t * may be negative or exceed the element boundaries (which is possible using\n\t * inertial scrolling).\n\t *\n\t * @param {DOMWindow|DOMElement} scrollable\n\t * @return {object} Map with `x` and `y` keys.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t   * All rights reserved.\n\t   *\n\t   * This source code is licensed under the BSD-style license found in the\n\t   * LICENSE file in the root directory of this source tree. An additional grant\n\t   * of patent rights can be found in the PATENTS file in the same directory.\n\t   *\n\t   * \n\t   * @typechecks",
        "* Gets the viewport dimensions including any scrollbars.",
        "* Gets the viewport dimensions excluding any scrollbars.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* Hyphenates a camelcased string, for example:\n\t *\n\t *   > hyphenate('backgroundColor')\n\t *   < \"background-color\"\n\t *\n\t * For CSS style names, use `hyphenateStyleName` instead which works properly\n\t * with all vendor prefixes, including `ms`.\n\t *\n\t * @param {string} string\n\t * @return {string}",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* @param {*} object The object to check.\n\t * @return {boolean} Whether or not the object is a DOM node.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks",
        "* @param {*} object The object to check.\n\t * @return {boolean} Whether or not the object is a DOM text node.",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks static-only",
        "* Combines multiple className strings into one.\n\t * http://jsperf.com/joinclasses-args-vs-array\n\t *\n\t * @param {...?string} className\n\t * @return {string}",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *",
        "* Executes the provided `callback` once for each enumerable own property in the\n\t * object and constructs a new object from the results. The `callback` is\n\t * invoked with three arguments:\n\t *\n\t *  - the property value\n\t *  - the property name\n\t *  - the object being traversed\n\t *\n\t * Properties that are added after the call to `mapObject` will not be visited\n\t * by `callback`. If the values of existing properties are changed, the value\n\t * passed to `callback` will be the value at the time `mapObject` visits them.\n\t * Properties that are deleted before being visited are not visited.\n\t *\n\t * @grep function objectMap()\n\t * @grep function objMap()\n\t *\n\t * @param {?object} object\n\t * @param {function} callback\n\t * @param {*} context\n\t * @return {?object}",
        "* Copyright (c) 2013-present, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * \n\t * @typechecks static-only",
        "* Memoizes the return value of a function that accepts one string argument.",
        "* UAParser.js v0.7.10\n\t * Lightweight JavaScript-based User-Agent string parser\n\t * https://github.com/faisalman/ua-parser-js\n\t *\n\t * Copyright © 2012-2015 Faisal Salman <fyzlman@gmail.com>\n\t * Dual licensed under GPLv2 & MIT",
        "***"
    ],
    "functions": [
        "__webpack_require__",
        "_classCallCheck",
        "EditorState",
        "updateSelection",
        "generateNewTreeMap",
        "regenerateTreeForNewBlocks",
        "regenerateTreeForNewDecorator",
        "mustBecomeBoundary",
        "getInlineStyleForCollapsedSelection",
        "getInlineStyleForNonCollapsedSelection",
        "lookUpwardForInlineStyle",
        "invariant",
        "_classCallCheck",
        "_possibleConstructorReturn",
        "_inherits",
        "CharacterMetadata",
        "generateRandomKey",
        "compare",
        "normalizePlatformVersion",
        "_classCallCheck",
        "_possibleConstructorReturn",
        "_inherits",
        "ContentBlock",
        "haveEqualStyle",
        "haveEqualEntity",
        "isCodeUnitInSurrogateRange",
        "isSurrogatePair",
        "hasSurrogateUnit",
        "getUTF16Length",
        "strlen",
        "substr",
        "substring",
        "getCodePoints",
        "toObject",
        "shouldUseNative",
        "_classCallCheck",
        "_possibleConstructorReturn",
        "_inherits",
        "SelectionState",
        "removeTextWithStrategy",
        "cx",
        "replace",
        "findRangesImmutable",
        "getContentStateFragment",
        "isEventHandled",
        "_classCallCheck",
        "_possibleConstructorReturn",
        "_inherits",
        "ContentState",
        "findAncestorOffsetKey",
        "getEntityKeyForSelection",
        "filterKey",
        "moveSelectionBackward",
        "sanitizeDraftText",
        "_isNodeScrollable",
        "isStrong",
        "getHTMLDir",
        "getHTMLDirIfDifferent",
        "setGlobalDir",
        "initGlobalDir",
        "getGlobalDir",
        "makeEmptyFunction",
        "getScrollPosition",
        "generateLeaves",
        "areEqual",
        "_classCallCheck",
        "_possibleConstructorReturn",
        "_inherits",
        "DraftEditorBlock",
        "isBlockOnSelectionEdge",
        "_classCallCheck",
        "_possibleConstructorReturn",
        "_inherits",
        "DraftEntityInstance",
        "getRemovableWord",
        "getEmptyChunk",
        "getWhitespaceChunk",
        "getSoftNewlineChunk",
        "getBlockDividerChunk",
        "getListBlockType",
        "getBlockMapSupportedTags",
        "getMultiMatchedType",
        "getBlockTypeForTag",
        "processInlineTag",
        "joinChunks",
        "containsSemanticBlockMarkup",
        "hasValidLinkText",
        "genFragment",
        "getChunkForHTML",
        "convertFromHTMLtoContentBlocks",
        "shouldRemoveWord",
        "getZCommand",
        "getDeleteCommand",
        "getBackspaceCommand",
        "getDefaultKeyBinding",
        "getDraftEditorSelectionWithNodes",
        "getFirstLeaf",
        "getLastLeaf",
        "getPointForNonTextNode",
        "getTextContentLength",
        "getFragmentFromSelection",
        "getRangeClientRectsChrome",
        "getSafeBodyFromHTML",
        "getSelectionOffsetKeyForNode",
        "getTextContentFromFiles",
        "readFile",
        "getUpdatedSelectionState",
        "insertIntoList",
        "isSelectionAtLeafStart",
        "moveSelectionForward",
        "removeEntitiesAtEdges",
        "getRemovalRange",
        "removeForBlock",
        "_classCallCheck",
        "getFileFromDataTransfer",
        "DataTransfer",
        "_isViewportScrollElement",
        "firstStrongChar",
        "firstStrongCharDir",
        "resolveBlockDir",
        "getDirection",
        "isDirectionLTR",
        "isDirectionRTL",
        "containsNode",
        "getActiveElement",
        "_classCallCheck",
        "CompositeDraftDecorator",
        "canOccupySlice",
        "occupySlice",
        "modifyInlineStyle",
        "_classCallCheck",
        "_possibleConstructorReturn",
        "_inherits",
        "DraftEditor",
        "_classCallCheck",
        "_possibleConstructorReturn",
        "_inherits",
        "DraftEditorContents",
        "getListItemClasses",
        "getSelectionForEvent",
        "moveText",
        "insertTextAtSelection",
        "_classCallCheck",
        "_possibleConstructorReturn",
        "_inherits",
        "DraftEditorLeaf",
        "_classCallCheck",
        "_possibleConstructorReturn",
        "_inherits",
        "DraftEditorPlaceholder",
        "_classCallCheck",
        "_possibleConstructorReturn",
        "_inherits",
        "isNewline",
        "DraftEditorTextNode",
        "adjustBlockDepthForContentState",
        "applyEntityToContentBlock",
        "applyEntityToContentState",
        "convertFromDraftStateToRaw",
        "convertFromRawToDraftState",
        "createCharacterList",
        "decodeEntityRanges",
        "decodeInlineStyleRanges",
        "mustPreventDefaultForCharacter",
        "replaceText",
        "editOnBeforeInput",
        "editOnBlur",
        "editOnCompositionStart",
        "editOnCopy",
        "editOnCut",
        "removeFragment",
        "editOnDragOver",
        "editOnDragStart",
        "editOnFocus",
        "editOnInput",
        "onKeyCommand",
        "editOnKeyDown",
        "editOnPaste",
        "insertFragment",
        "areTextBlocksAndClipboardEqual",
        "editOnSelect",
        "encodeEntityRanges",
        "getEncodedInlinesForType",
        "encodeInlineStyleRanges",
        "getLineHeightPx",
        "areRectsOnOneLine",
        "getNodeLength",
        "expandRangeToStartOfLine",
        "getCharacterRemovalRange",
        "getDraftEditorSelection",
        "getRangeBoundingClientRect",
        "getRangesForDraftEntity",
        "getVisibleSelectionRect",
        "insertFragmentIntoContentState",
        "insertTextIntoContentState",
        "keyCommandBackspaceToStartOfLine",
        "keyCommandBackspaceWord",
        "keyCommandDeleteWord",
        "keyCommandInsertNewline",
        "keyCommandMoveSelectionToEndOfBlock",
        "keyCommandMoveSelectionToStartOfBlock",
        "keyCommandPlainBackspace",
        "keyCommandPlainDelete",
        "keyCommandTransposeCharacters",
        "keyCommandUndo",
        "modifyBlockForContentState",
        "removeRangeFromContentState",
        "removeFromList",
        "setDraftEditorSelection",
        "addFocusToSelection",
        "addPointToSelection",
        "splitBlockInContentState",
        "splitTextIntoTextBlocks",
        "getParts",
        "_classCallCheck",
        "URI",
        "_classCallCheck",
        "UnicodeBidiService",
        "convertPlatformName",
        "getBrowserVersion",
        "checkOrExpression",
        "checkRangeExpression",
        "checkSimpleExpression",
        "checkLessThan",
        "checkLessThanOrEqual",
        "checkEqual",
        "checkGreaterThanOrEqual",
        "checkGreaterThan",
        "checkApproximateVersion",
        "getModifierAndComponents",
        "isNumber",
        "isSimpleVersion",
        "zeroPad",
        "normalizeVersions",
        "compareNumeric",
        "compare",
        "compareComponents",
        "camelize",
        "toArray",
        "hasArrayNature",
        "createArrayFromMixed",
        "getDocumentScrollElement",
        "getElementPosition",
        "getElementRect",
        "asString",
        "getStyleProperty",
        "getUnboundedScrollPosition",
        "getViewportWidth",
        "getViewportHeight",
        "getViewportDimensions",
        "hyphenate",
        "isNode",
        "isTextNode",
        "joinClasses",
        "mapObject",
        "memoizeStringOnly"
    ],
    "classes": []
}