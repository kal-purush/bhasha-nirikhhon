{
    "identifiers": [
        "org",
        "springframework",
        "integration",
        "dsl",
        "context",
        "org",
        "springframework",
        "beans",
        "factory",
        "config",
        "ConfigurableListableBeanFactory",
        "org",
        "springframework",
        "context",
        "Lifecycle",
        "org",
        "springframework",
        "integration",
        "core",
        "MessagingTemplate",
        "org",
        "springframework",
        "integration",
        "dsl",
        "IntegrationFlow",
        "org",
        "springframework",
        "integration",
        "dsl",
        "StandardIntegrationFlow",
        "org",
        "springframework",
        "messaging",
        "Message",
        "org",
        "springframework",
        "messaging",
        "MessageChannel",
        "integrationFlow",
        "integrationFlowContext",
        "id",
        "inputChannel",
        "messagingTemplate",
        "beanFactory",
        "integrationFlow",
        "integrationFlow",
        "integrationFlow",
        "beanFactory",
        "beanFactory",
        "beanFactory",
        "integrationFlowContext",
        "integrationFlowContext",
        "integrationFlowContext",
        "id",
        "id",
        "id",
        "integrationFlow",
        "integrationFlow",
        "integrationFlow",
        "id",
        "integrationFlow",
        "inputChannel",
        "inputChannel",
        "integrationFlow",
        "integrationFlow",
        "integrationFlow",
        "next",
        "integrationFlow",
        "getIntegrationComponents",
        "iterator",
        "next",
        "next",
        "inputChannel",
        "next",
        "integrationFlow",
        "integrationFlow",
        "inputChannel",
        "messagingTemplate",
        "messagingTemplate",
        "messagingTemplate",
        "getInputChannel",
        "Override",
        "receiveAndConvert",
        "Override",
        "targetClass",
        "messagingTemplate",
        "setBeanFactory",
        "beanFactory",
        "messagingTemplate",
        "integrationFlow",
        "integrationFlow",
        "start",
        "integrationFlow",
        "integrationFlow",
        "integrationFlow",
        "stop",
        "integrationFlowContext",
        "remove",
        "id"
    ],
    "literals": [
        "\"The 'IntegrationFlow' [\"",
        "\"] \"",
        "\"doesn't start with 'MessageChannel' for direct message sending.\"",
        "\"Only 'StandardIntegrationFlow' instances \"",
        "\"(e.g. extracted from 'IntegrationFlow' Lambdas) can be used \"",
        "\"for direct 'send' operation. \"",
        "\"But [\"",
        "\"] ins't one of them.\\n\"",
        "\"Consider 'BeanFactory.getBean()' usage for sending messages \"",
        "\"to the required 'MessageChannel'.\"",
        "\"The 'receive()/receiveAndConvert()' \"",
        "\"isn't supported on the 'IntegrationFlow' input channel.\"",
        "\"For 'autoStartup' mode the 'IntegrationFlow' \"",
        "\"must be an instance of 'Lifecycle'.\\n\"",
        "\"Consider to implement it for [\"",
        "\"]. \"",
        "\"Or start dependent components on their own.\""
    ],
    "variables": [
        "integrationFlow",
        "integrationFlowContext",
        "id",
        "inputChannel",
        "messagingTemplate",
        "beanFactory"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright 2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Instances of this classes are returned as a result of\n * {@link IntegrationFlowContext#registration(IntegrationFlow)} invocation\n * and provide an API for some useful {@link IntegrationFlow} options and its lifecycle.\n *\n * @author Artem Bilan\n * @since 1.2\n *\n * @see IntegrationFlowContext",
        "* Obtain a {@link MessagingTemplate} with its default destination set to the input channel\n\t * of the {@link IntegrationFlow}.\n\t * <p> Any {@link IntegrationFlow} bean (not only manually registered) can be used for this method.\n\t * <p> If {@link IntegrationFlow} doesn't start with the {@link MessageChannel}, the\n\t * {@link IllegalStateException} is thrown.\n\t * @return the {@link MessagingTemplate} instance",
        "* Destroy the {@link IntegrationFlow} bean (as well as all its dependant beans)\n\t * and clean up all the local cache for it."
    ],
    "functions": [
        "IntegrationFlowRegistration",
        "setBeanFactory",
        "setIntegrationFlowContext",
        "setId",
        "setIntegrationFlow",
        "getId",
        "IntegrationFlow",
        "getIntegrationFlow",
        "MessageChannel",
        "getInputChannel",
        "MessagingTemplate",
        "getMessagingTemplate",
        "receive",
        "T",
        "receiveAndConvert",
        "start",
        "stop",
        "destroy"
    ],
    "classes": [
        "IntegrationFlowRegistration"
    ]
}