{
    "identifiers": [
        "default1",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "Override",
        "root",
        "st",
        "root",
        "st",
        "root",
        "st",
        "push",
        "root",
        "root",
        "root",
        "left",
        "Override",
        "st",
        "isEmpty",
        "Override",
        "node",
        "st",
        "pop",
        "val",
        "node",
        "val",
        "node",
        "node",
        "right",
        "node",
        "st",
        "push",
        "node",
        "node",
        "node",
        "left",
        "val",
        "key",
        "val",
        "left",
        "right",
        "key",
        "val",
        "key",
        "key",
        "val",
        "val",
        "left",
        "right",
        "root",
        "tempNode",
        "root",
        "tempNode",
        "key",
        "val",
        "root",
        "put",
        "root",
        "key",
        "val",
        "node",
        "key",
        "val",
        "node",
        "node",
        "key",
        "val",
        "comp",
        "key",
        "compareTo",
        "node",
        "key",
        "comp",
        "node",
        "left",
        "put",
        "node",
        "left",
        "key",
        "val",
        "comp",
        "node",
        "right",
        "put",
        "node",
        "right",
        "key",
        "val",
        "node",
        "val",
        "val",
        "node",
        "key",
        "current",
        "root",
        "current",
        "comp",
        "key",
        "compareTo",
        "current",
        "key",
        "comp",
        "current",
        "current",
        "left",
        "comp",
        "current",
        "current",
        "right",
        "current",
        "val",
        "key",
        "root",
        "root",
        "key",
        "node",
        "key",
        "node",
        "comp",
        "key",
        "compareTo",
        "node",
        "key",
        "comp",
        "node",
        "left",
        "node",
        "left",
        "key",
        "comp",
        "node",
        "right",
        "node",
        "right",
        "key",
        "node",
        "left",
        "node",
        "right",
        "node",
        "right",
        "node",
        "left",
        "node",
        "right",
        "extractMin",
        "node",
        "right",
        "rightTreeMin",
        "tempNode",
        "rightTreeMin",
        "left",
        "node",
        "left",
        "rightTreeMin",
        "right",
        "node",
        "right",
        "rightTreeMin",
        "node",
        "node",
        "node",
        "left",
        "tempNode",
        "node",
        "node",
        "right",
        "node",
        "right",
        "node",
        "left",
        "extractMin",
        "node",
        "left",
        "node",
        "preOrderTraversal",
        "root",
        "inOrderTraversal",
        "root",
        "postOrderTraversal",
        "root",
        "node",
        "node",
        "key",
        "node",
        "val",
        "node",
        "left",
        "preOrderTraversal",
        "node",
        "left",
        "node",
        "right",
        "preOrderTraversal",
        "node",
        "right",
        "node",
        "node",
        "left",
        "inOrderTraversal",
        "node",
        "left",
        "node",
        "key",
        "node",
        "val",
        "node",
        "right",
        "inOrderTraversal",
        "node",
        "right",
        "node",
        "node",
        "left",
        "postOrderTraversal",
        "node",
        "left",
        "node",
        "right",
        "postOrderTraversal",
        "node",
        "right",
        "node",
        "key",
        "node",
        "val"
    ],
    "literals": [
        "\"valid types are: 1(pre order) 2(in order) 3(post order)\"",
        "\" \"",
        "\" \"",
        "\" \""
    ],
    "variables": [
        "st",
        "key",
        "val",
        "left",
        "right",
        "root",
        "tempNode"
    ],
    "comments": [
        "can be omitted",
        "can be omitted",
        "comp == 0, then update the value",
        "if (node == null) throw new IllegalArgumentException(\"key \" + key + \" doesn't exist\");",
        "doesn't change anything. (no delete).",
        "because it's null, and return null to whatever points to it. Nothing changed",
        "(comp == 0)",
        "}",
        "min found",
        "a global variable",
        "if (node.left != null)"
    ],
    "docstrings": [
        "* Created by Shiyi on 9/23/2016.\n * Based on code from algs4.cs.princeton.edu",
        "f (node.left == null && node.right == null)\n                return null;\n            else if (node.left == null && node.right != null)\n                return node.right;\n            else if (node.left != null && node.right == null)\n                return node.left;\n            else { //node.left != null && node.right != null"
    ],
    "functions": [
        "iterator",
        "BST2Iterator",
        "hasNext",
        "Value",
        "next",
        "Node",
        "BST2",
        "put",
        "Node",
        "put",
        "Value",
        "get",
        "Node",
        "Node",
        "extractMin",
        "treeTraversal",
        "preOrderTraversal",
        "inOrderTraversal",
        "postOrderTraversal"
    ],
    "classes": [
        "BST2",
        "BST2Iterator",
        "Node"
    ]
}