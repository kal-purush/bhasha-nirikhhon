{
    "identifiers": [
        "clientId",
        "clientId",
        "client",
        "sendToClient",
        "client",
        "sendToClient",
        "client",
        "INTEGRITY_CHECKSUM",
        "activeClientIds",
        "clientId",
        "sendToClient",
        "client",
        "activeClientIds",
        "clientId",
        "activeClientIds",
        "clientId",
        "allClients",
        "client",
        "client",
        "clientId",
        "remainingClients",
        "client",
        "client",
        "allClients",
        "client",
        "client",
        "client",
        "activeClientIds",
        "client",
        "requestId",
        "resolveMasterClient",
        "getResponse",
        "client",
        "requestId",
        "client",
        "activeClientIds",
        "client",
        "response",
        "sendToClient",
        "client",
        "clonedResponse",
        "clonedResponse",
        "clonedResponse",
        "clonedResponse",
        "clonedResponse",
        "clonedResponse",
        "serializeHeaders",
        "clonedResponse",
        "clonedResponse",
        "response",
        "client",
        "requestId",
        "request",
        "getOriginalResponse",
        "fetch",
        "requestClone",
        "client",
        "getOriginalResponse",
        "activeClientIds",
        "client",
        "getOriginalResponse",
        "requestClone",
        "bypassHeaderName",
        "serializeHeaders",
        "requestClone",
        "cleanRequestHeaders",
        "bypassHeaderName",
        "Request",
        "requestClone",
        "Headers",
        "cleanRequestHeaders",
        "fetch",
        "originalRequest",
        "serializeHeaders",
        "request",
        "request",
        "sendToClient",
        "client",
        "requestId",
        "request",
        "request",
        "reqHeaders",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "request",
        "clientMessage",
        "delayPromise",
        "respondWithMock",
        "clientMessage",
        "clientMessage",
        "getOriginalResponse",
        "clientMessage",
        "message",
        "networkError",
        "name",
        "networkError",
        "clientMessage",
        "parsedBody",
        "request",
        "request",
        "respondWithMock",
        "clientMessage",
        "getOriginalResponse",
        "request",
        "accept",
        "request",
        "request",
        "request",
        "activeClientIds",
        "uuidv4",
        "handleRequest",
        "requestId",
        "error",
        "error",
        "request",
        "request",
        "request",
        "request",
        "error",
        "error",
        "headers",
        "headers",
        "value",
        "name",
        "reqHeaders",
        "name",
        "reqHeaders",
        "name",
        "reqHeaders",
        "name",
        "value",
        "value",
        "reqHeaders",
        "client",
        "message",
        "resolve",
        "reject",
        "MessageChannel",
        "channel",
        "reject",
        "resolve",
        "client",
        "message",
        "channel",
        "cb",
        "duration",
        "resolve",
        "setTimeout",
        "resolve",
        "cb",
        "duration",
        "clientMessage",
        "Response",
        "clientMessage",
        "clientMessage",
        "clientMessage",
        "c",
        "c",
        "r",
        "r",
        "v"
    ],
    "literals": [
        "'f0a916b13c8acc2b526a03a6d26df85f'",
        "'x-msw-bypass'",
        "'install'",
        "'activate'",
        "'message'",
        "'KEEPALIVE_REQUEST'",
        "'KEEPALIVE_RESPONSE'",
        "'INTEGRITY_CHECK_REQUEST'",
        "'INTEGRITY_CHECK_RESPONSE'",
        "'MOCK_ACTIVATE'",
        "'MOCKING_ENABLED'",
        "'MOCK_DEACTIVATE'",
        "'CLIENT_CLOSED'",
        "'top-level'",
        "'visible'",
        "'RESPONSE'",
        "'true'",
        "'REQUEST'",
        "'MOCK_SUCCESS'",
        "'MOCK_NOT_FOUND'",
        "'NETWORK_ERROR'",
        "'INTERNAL_ERROR'",
        "\\\n[MSW] Uncaught exception in the request handler for \"%s %s\":\n\n${parsedBody.location}\n\nThis exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error, as it indicates a mistake in your code. If you wish to mock an error response, please see this guide: https://mswjs.io/docs/recipes/mocking-error-responses\\",
        "'fetch'",
        "'accept'",
        "''",
        "'text/event-stream'",
        "'navigate'",
        "'only-if-cached'",
        "'same-origin'",
        "'NetworkError'",
        "'[MSW] Successfully emulated a network error for the \"%s %s\" request.'",
        "\\\n[MSW] Caught an exception from the \"%s %s\" request (%s). This is probably not a problem with Mock Service Worker. There is likely an additional logging output above.",
        "${error.name}: ${error.message}",
        "'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'",
        "'x'"
    ],
    "variables": [
        "INTEGRITY_CHECKSUM",
        "bypassHeaderName",
        "activeClientIds",
        "clientId",
        "client",
        "allClients",
        "remainingClients",
        "client",
        "allClients",
        "client",
        "response",
        "clonedResponse",
        "requestClone",
        "getOriginalResponse",
        "cleanRequestHeaders",
        "originalRequest",
        "reqHeaders",
        "body",
        "clientMessage",
        "networkError",
        "parsedBody",
        "accept",
        "requestId",
        "reqHeaders",
        "channel",
        "r",
        "v"
    ],
    "comments": [
        "eslint-disable",
        "tslint:disable",
        "Unregister itself when there are no more clients",
        "Resolve the \"master\" client for the given event.",
        "Client that issues a request doesn't necessarily equal the client",
        "that registered the worker. It's with the latter the worker should",
        "communicate with during the response resolving phase.",
        "Get only those clients that are currently visible.",
        "Find the client ID that's recorded in the",
        "set of clients that have registered the worker.",
        "Send back the response clone for the \"response:*\" life-cycle events.",
        "Ensure MSW is active and ready to handle the message, otherwise",
        "this message will pend indefinitely.",
        "Bypass mocking when the request client is not active.",
        "Bypass initial page load requests (i.e. static assets).",
        "The absence of the immediate/parent client in the map of the active clients",
        "means that MSW hasn't dispatched the \"MOCK_ACTIVATE\" event yet",
        "and is not ready to handle requests.",
        "Bypass requests with the explicit bypass header",
        "Remove the bypass header to comply with the CORS preflight check.",
        "Send the request to the client-side MSW.",
        "Rejecting a request Promise emulates a network error.",
        "Bypass server-sent events.",
        "Bypass navigation requests.",
        "Opening the DevTools triggers the \"only-if-cached\" request",
        "that cannot be handled by the worker. Bypass such requests.",
        "Bypass all requests when there are no active clients.",
        "Prevents the self-unregistered worked from handling requests",
        "after it's been deleted (still remains active until the next reload).",
        "At this point, any exception indicates an issue with the original request/response."
    ],
    "docstrings": [
        "* Mock Service Worker (0.35.0).\n * @see https://github.com/mswjs/msw\n * - Please do NOT modify this file.\n * - Please do NOT serve this file on production."
    ],
    "functions": [
        "resolveMasterClient",
        "handleRequest",
        "getResponse",
        "serializeHeaders",
        "sendToClient",
        "delayPromise",
        "respondWithMock",
        "uuidv4"
    ],
    "classes": []
}