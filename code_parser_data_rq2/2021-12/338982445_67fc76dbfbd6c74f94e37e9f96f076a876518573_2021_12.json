{
    "identifiers": [
        "Microsoft",
        "AspNetCore",
        "Authentication",
        "Microsoft",
        "AspNetCore",
        "Authorization",
        "Microsoft",
        "Diagnostics",
        "Monitoring",
        "Microsoft",
        "Diagnostics",
        "Monitoring",
        "WebApi",
        "Microsoft",
        "Extensions",
        "DependencyInjection",
        "Microsoft",
        "Extensions",
        "Hosting",
        "Microsoft",
        "Extensions",
        "Logging",
        "Microsoft",
        "Extensions",
        "Options",
        "Collections",
        "Generic",
        "Threading",
        "Threading",
        "Tasks",
        "Microsoft",
        "Diagnostics",
        "Tools",
        "Monitor",
        "Commands",
        "CancellationToken",
        "token",
        "urls",
        "metricUrls",
        "metrics",
        "diagnosticPort",
        "noAuth",
        "tempApiKey",
        "noHttpEgress",
        "HostBuilderHelper",
        "CreateAuthConfiguration",
        "noAuth",
        "tempApiKey",
        "HostBuilderHelper",
        "CreateHostBuilder",
        "urls",
        "metricUrls",
        "metrics",
        "diagnosticPort",
        "authenticationOptions",
        "ConfigureServices",
        "authenticationOptions",
        "noHttpEgress",
        "Build",
        "host",
        "StartAsync",
        "token",
        "host",
        "WaitForShutdownAsync",
        "token",
        "MonitoringException",
        "OptionsValidationException",
        "ex",
        "host",
        "Services",
        "GetRequiredService",
        "ILoggerFactory",
        "CreateLogger",
        "CollectCommandHandler",
        "OptionsValidationFailure",
        "ex",
        "OperationCanceledException",
        "token",
        "IsCancellationRequested",
        "host",
        "IAsyncDisposable",
        "asyncDisposable",
        "asyncDisposable",
        "DisposeAsync",
        "host",
        "Dispose",
        "FormatException",
        "ex",
        "WriteLine",
        "ex",
        "Message",
        "ex",
        "InnerException",
        "WriteLine",
        "ex",
        "InnerException",
        "Message",
        "IHostBuilder",
        "builder",
        "AuthConfiguration",
        "authenticationOptions",
        "noHttpEgress",
        "builder",
        "ConfigureServices",
        "HostBuilderContext",
        "context",
        "IServiceCollection",
        "services",
        "services",
        "AddSingleton",
        "IAuthConfiguration",
        "authenticationOptions",
        "services",
        "AddSingleton",
        "IEgressOutputConfiguration",
        "EgressOutputConfiguration",
        "httpEgressEnabled",
        "noHttpEgress",
        "services",
        "AddSingleton",
        "MonitorApiKeyConfigurationObserver",
        "authenticationOptions",
        "EnableKeyAuth",
        "services",
        "ConfigureMonitorApiKeyAuthentication",
        "context",
        "Configuration",
        "authSchemas",
        "AuthConstants",
        "ApiKeySchema",
        "authenticationOptions",
        "EnableNegotiate",
        "authBuilder",
        "AddNegotiate",
        "authSchemas",
        "Add",
        "AuthConstants",
        "NegotiateSchema",
        "services",
        "AddAuthorization",
        "authenticationOptions",
        "EnableKeyAuth",
        "authOptions",
        "AddPolicy",
        "AuthConstants",
        "PolicyName",
        "builder",
        "builder",
        "AddRequirements",
        "AuthorizedUserRequirement",
        "builder",
        "RequireAuthenticatedUser",
        "builder",
        "AddAuthenticationSchemes",
        "authSchemas",
        "ToArray",
        "authOptions",
        "AddPolicy",
        "AuthConstants",
        "PolicyName",
        "builder",
        "builder",
        "RequireAssertion",
        "_",
        "authenticationOptions",
        "EnableKeyAuth",
        "services",
        "AddSingleton",
        "IAuthorizationHandler",
        "UserAuthorizationHandler",
        "services",
        "Configure",
        "DiagnosticPortOptions",
        "context",
        "Configuration",
        "GetSection",
        "ConfigurationKeys",
        "DiagnosticPort",
        "services",
        "AddSingleton",
        "IValidateOptions",
        "DiagnosticPortOptions",
        "DiagnosticPortValidateOptions",
        "services",
        "AddSingleton",
        "OperationTrackerService",
        "services",
        "ConfigureGlobalCounter",
        "context",
        "Configuration",
        "services",
        "AddSingleton",
        "IEndpointInfoSource",
        "FilteredEndpointInfoSource",
        "services",
        "AddSingleton",
        "ServerEndpointInfoSource",
        "services",
        "AddHostedServiceForwarder",
        "ServerEndpointInfoSource",
        "services",
        "AddSingleton",
        "IDiagnosticServices",
        "DiagnosticServices",
        "services",
        "AddSingleton",
        "IDumpService",
        "DumpService",
        "services",
        "AddSingleton",
        "IEndpointInfoSourceCallbacks",
        "OperationTrackerServiceEndpointInfoSourceCallback",
        "services",
        "AddSingleton",
        "RequestLimitTracker",
        "services",
        "ConfigureOperationStore",
        "services",
        "ConfigureEgress",
        "services",
        "ConfigureMetrics",
        "context",
        "Configuration",
        "services",
        "ConfigureStorage",
        "context",
        "Configuration",
        "services",
        "ConfigureDefaultProcess",
        "context",
        "Configuration",
        "services",
        "ConfigureCollectionRules"
    ],
    "literals": [],
    "variables": [
        "AuthConfiguration",
        "authenticationOptions",
        "IHost",
        "host",
        "authSchemas",
        "AuthenticationBuilder",
        "authBuilder"
    ],
    "comments": [
        "Licensed to the .NET Foundation under one or more agreements.",
        "The .NET Foundation licenses this file to you under the MIT license.",
        "See the LICENSE file in the project root for more information.",
        "It is the responsibility of throwers to ensure that the exceptions are logged.",
        "The host will throw a OperationCanceledException if it cannot shut down the",
        "hosted services gracefully within the shut down timeout period. Handle the",
        "exception and let the tool exit gracefully.",
        "TODO Many of these service additions should be done through extension methods",
        "Although this is only observing API key authentication changes, it does handle",
        "the case when API key authentication is not enabled. This class could evolve",
        "to observe other options in the future, at which point it might be good to",
        "refactor the options observers for each into separate implementations and are",
        "orchestrated by this single service.",
        "On Windows add Negotiate package. This will use NTLM to perform Windows Authentication.",
        "Apply Authorization Policy for NTLM. Without Authorization, any user with a valid login/password will be authorized. We only",
        "want to authorize the same user that is running dotnet-monitor, at least for now.",
        "Note this policy applies to both Authorization schemas."
    ],
    "docstrings": [],
    "functions": [
        "Invoke",
        "IHostBuilder",
        "ConfigureServices"
    ],
    "classes": [
        "CollectCommandHandler"
    ]
}