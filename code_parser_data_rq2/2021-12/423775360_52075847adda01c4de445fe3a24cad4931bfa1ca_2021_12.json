{
    "identifiers": [
        "typing",
        "Any",
        "Optional",
        "Union",
        "numpy",
        "np",
        "wandb",
        "matplotlib",
        "figure",
        "Figure",
        "pytorch_lightning",
        "loggers",
        "wandb",
        "WandbLogger",
        "pytorch_lightning",
        "utilities",
        "rank_zero_only",
        "ImageLoggerBase",
        "ImageLoggerBase",
        "WandbLogger",
        "name",
        "Optional",
        "save_dir",
        "Optional",
        "offline",
        "Optional",
        "id",
        "Optional",
        "anonymous",
        "Optional",
        "version",
        "Optional",
        "project",
        "Optional",
        "log_model",
        "Optional",
        "experiment",
        "prefix",
        "Optional",
        "sync_step",
        "Optional",
        "kwargs",
        "name",
        "name",
        "save_dir",
        "save_dir",
        "offline",
        "offline",
        "id",
        "id",
        "anonymous",
        "anonymous",
        "version",
        "version",
        "project",
        "project",
        "log_model",
        "log_model",
        "experiment",
        "experiment",
        "prefix",
        "prefix",
        "sync_step",
        "sync_step",
        "kwargs",
        "wandb",
        "Image",
        "rank_zero_only",
        "image",
        "Union",
        "np",
        "ndarray",
        "Figure",
        "name",
        "Optional",
        "kwargs",
        "Any",
        "wandb",
        "Image",
        "image",
        "caption",
        "name",
        "image_list",
        "append",
        "image",
        "rank_zero_only",
        "save",
        "len",
        "image_list",
        "wandb",
        "log",
        "image_list"
    ],
    "literals": [
        "\"\"",
        "\"Predictions\""
    ],
    "variables": [
        "image_list",
        "image"
    ],
    "comments": [
        "Copyright (C) 2020 Intel Corporation",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing,",
        "software distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions",
        "and limitations under the License.",
        "kept to match wandb init pylint: disable=redefined-builtin",
        "Cache images"
    ],
    "docstrings": [
        "\"\"\"wandb logger with add image interface.\"\"\"",
        "\"\"\"Logger for wandb.\n\n    Adds interface for `add_image` in the logger rather than calling the experiment object.\n\n    Note:\n        Same as the wandb Logger provided by PyTorch Lightning and the doc string is reproduced below.\n\n    Log using `Weights and Biases <https://www.wandb.com/>`_.\n\n    Install it with pip:\n\n    .. code-block:: bash\n\n        $ pip install wandb\n\n    Args:\n        name: Display name for the run.\n        save_dir: Path where data is saved (wandb dir by default).\n        offline: Run offline (data can be streamed later to wandb servers).\n        id: Sets the version, mainly used to resume a previous run.\n        version: Same as id.\n        anonymous: Enables or explicitly disables anonymous logging.\n        project: The name of the project to which this run will belong.\n        log_model: Save checkpoints in wandb dir to upload on W&B servers.\n        prefix: A string to put at the beginning of metric keys.\n        experiment: WandB experiment object. Automatically set when creating a run.\n        **kwargs: Arguments passed to :func:`wandb.init` like `entity`, `group`, `tags`, etc.\n\n    Raises:\n        ImportError:\n            If required WandB package is not installed on the device.\n        MisconfigurationException:\n            If both ``log_model`` and ``offline``is set to ``True``.\n\n    Example:\n        >>> from anomalib.loggers.wandb import AnomalibWandbLogger\n        >>> from pytorch_lightning import Trainer\n        >>> wandb_logger = AnomalibWandbLogger()\n        >>> trainer = Trainer(logger=wandb_logger)\n\n    Note: When logging manually through `wandb.log` or `trainer.logger.experiment.log`,\n    make sure to use `commit=False` so the logging step does not increase.\n\n    See Also:\n        - `Tutorial <https://colab.research.google.com/drive/16d1uctGaw2y9KhGBlINNTsWpmlXdJwRW?usp=sharing>`__\n          on how to use W&B with PyTorch Lightning\n        - `W&B Documentation <https://docs.wandb.ai/integrations/lightning>`__\n\n    \"\"\"",
        "\"\"\"Interface to add image to wandb logger.\n\n        Args:\n            image (Union[np.ndarray, Figure]): Image to log\n            name (Optional[str]): The tag of the image\n        \"\"\"",
        "\"\"\"Upload images to wandb server.\n\n        Note:\n            There is a limit on the number of images that can be logged together to the `wandb` server.\n        \"\"\""
    ],
    "functions": [
        "add_image",
        "save"
    ],
    "classes": [
        "AnomalibWandbLogger"
    ]
}