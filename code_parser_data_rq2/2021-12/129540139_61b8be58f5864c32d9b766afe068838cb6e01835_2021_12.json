{
    "identifiers": [
        "com",
        "google",
        "copybara",
        "transform",
        "patch",
        "com",
        "google",
        "common",
        "Preconditions",
        "checkNotNull",
        "java",
        "util",
        "stream",
        "Collectors",
        "joining",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableList",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableMap",
        "com",
        "google",
        "copybara",
        "TransformWork",
        "com",
        "google",
        "copybara",
        "Transformation",
        "com",
        "google",
        "copybara",
        "TransformationStatus",
        "com",
        "google",
        "copybara",
        "config",
        "ConfigFile",
        "com",
        "google",
        "copybara",
        "exception",
        "CannotResolveLabel",
        "com",
        "google",
        "copybara",
        "util",
        "BadExitStatusWithOutputException",
        "com",
        "google",
        "copybara",
        "util",
        "FileUtil",
        "com",
        "google",
        "copybara",
        "shell",
        "Command",
        "com",
        "google",
        "copybara",
        "shell",
        "CommandException",
        "java",
        "io",
        "BufferedWriter",
        "java",
        "io",
        "java",
        "nio",
        "file",
        "FileAlreadyExistsException",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "nio",
        "file",
        "Path",
        "java",
        "nio",
        "file",
        "Paths",
        "java",
        "util",
        "net",
        "starlark",
        "java",
        "syntax",
        "Location",
        "series",
        "patchConfigs",
        "options",
        "reverse",
        "location",
        "series",
        "patches",
        "options",
        "reverse",
        "location",
        "series",
        "series",
        "patchConfigs",
        "patches",
        "options",
        "options",
        "reverse",
        "reverse",
        "location",
        "checkNotNull",
        "location",
        "Override",
        "work",
        "verbose",
        "options",
        "getGeneralOptions",
        "isVerbose",
        "checkoutDir",
        "work",
        "getCheckoutDir",
        "work",
        "getConsole",
        "infoFmt",
        "patches",
        "copyPatchConfigsToTmpDir",
        "env",
        "options",
        "getGeneralOptions",
        "getEnvironment",
        "env",
        "initializeQuilt",
        "checkoutDir",
        "env",
        "importPatches",
        "checkoutDir",
        "patches",
        "env",
        "verbose",
        "restoreSeriesAndCleanup",
        "checkoutDir",
        "TransformationStatus",
        "success",
        "Override",
        "series",
        "patchConfigs",
        "options",
        "reverse",
        "location",
        "Override",
        "patchConfigs",
        "stream",
        "ConfigFile",
        "path",
        "collect",
        "joining",
        "Override",
        "location",
        "checkoutDir",
        "env",
        "verbose",
        "args",
        "ImmutableList",
        "builder",
        "add",
        "options",
        "quiltBin",
        "add",
        "args",
        "paramsList",
        "build",
        "cmd",
        "paramsList",
        "toArray",
        "env",
        "checkoutDir",
        "toFile",
        "options",
        "getGeneralOptions",
        "newCommandRunner",
        "cmd",
        "withVerbose",
        "verbose",
        "execute",
        "e",
        "format",
        "join",
        "paramsList",
        "e",
        "getMessage",
        "e",
        "getOutput",
        "getStdout",
        "e",
        "e",
        "e",
        "builder",
        "ImmutableList",
        "builder",
        "patchDir",
        "options",
        "getGeneralOptions",
        "getDirFactory",
        "newTempDir",
        "patch",
        "patchConfigs",
        "baseName",
        "Paths",
        "get",
        "patch",
        "path",
        "getFileName",
        "toString",
        "patchFile",
        "patchDir",
        "resolve",
        "baseName",
        "builder",
        "add",
        "patchFile",
        "Files",
        "write",
        "patchFile",
        "patch",
        "readContentBytes",
        "e",
        "e",
        "builder",
        "build",
        "checkoutDir",
        "env",
        "quiltOptions",
        "ImmutableMap",
        "of",
        "quilrcPath",
        "options",
        "getGeneralOptions",
        "getDirFactory",
        "getTmpRoot",
        "resolve",
        "wr",
        "Files",
        "newBufferedWriter",
        "quilrcPath",
        "entry",
        "quiltOptions",
        "entrySet",
        "wr",
        "append",
        "format",
        "entry",
        "getKey",
        "entry",
        "getValue",
        "envBuilder",
        "ImmutableMap",
        "builder",
        "envBuilder",
        "putAll",
        "env",
        "put",
        "quilrcPath",
        "toRealPath",
        "toString",
        "patchesDir",
        "checkoutDir",
        "resolve",
        "Files",
        "createDirectory",
        "patchesDir",
        "Files",
        "createFile",
        "patchesDir",
        "resolve",
        "pcDir",
        "checkoutDir",
        "resolve",
        "Files",
        "exists",
        "pcDir",
        "pcDir",
        "toRealPath",
        "toString",
        "envBuilder",
        "buildOrThrow",
        "checkoutDir",
        "patches",
        "env",
        "verbose",
        "patch",
        "patches",
        "runQuiltCommand",
        "checkoutDir",
        "env",
        "verbose",
        "patch",
        "toString",
        "runQuiltCommand",
        "checkoutDir",
        "env",
        "verbose",
        "runQuiltCommand",
        "checkoutDir",
        "env",
        "verbose",
        "checkoutDir",
        "Files",
        "write",
        "checkoutDir",
        "resolve",
        "resolve",
        "series",
        "readContentBytes",
        "e",
        "e",
        "FileUtil",
        "deleteRecursively",
        "checkoutDir",
        "resolve"
    ],
    "literals": [
        "\"Applying and updating patches with quilt.\"",
        "\"Patch.quilt_apply: using quilt to apply and update patches: \"",
        "\", \"",
        "\"Error executing '%s': %s. Stderr: \\n%s\"",
        "\" \"",
        "\"inputpatches\"",
        "\"Error reading input patch\"",
        "\"QUILT_DIFF_OPTS\"",
        "\"--show-c-function\"",
        "\"QUILT_DIFF_ARGS\"",
        "\"--no-timestamps -p ab\"",
        "\"QUILT_REFRESH_ARGS\"",
        "\"--no-timestamps -p ab\"",
        "\"QUILT_PATCHES_PREFIX\"",
        "\"yes\"",
        "\"copybara.quiltrc\"",
        "\"%s=\\\"%s\\\"\\n\"",
        "\"QUILTRC\"",
        "\"patches\"",
        "\"series\"",
        "\".pc\"",
        "\"import\"",
        "\"push\"",
        "\"refresh\"",
        "\"patches\"",
        "\"series\"",
        "\"Error reading original 'series' file\"",
        "\".pc\""
    ],
    "variables": [
        "series",
        "patchConfigs",
        "options",
        "reverse",
        "location",
        "args"
    ],
    "comments": [
        "TODO(copybara-team): Add support for reverse=True.",
        "We could possibly implement it without using quilt. Assuming reversal does not require updating",
        "any patch files, it can run \"patch -R\" for each patch in the reverse order of the series file.",
        "\"quilt import <patch_path>\" only works for a local path, so we copy the patch config files",
        "to a local temp directory first.",
        "Uses String instead of Path for baseName, because patchDir's FileSystem may not match",
        "the default FileSystem from Paths.get().",
        "Creates quiltrc file and sets up QUILTRC environment variable.",
        "Uses the \"-p ab\" format in order to keep patch files' content independent of the parent",
        "directory's name.",
        "It overwrites any existing copybara.quiltrc file, which is OK because it is in the",
        "temporary directory and its content is always the same.",
        "Creates and checks for necessary directories.",
        "Fails if \"patches\" already exists.",
        "Restores the original \"series\" file.",
        "Deletes \".pc\" directory."
    ],
    "docstrings": [
        "* Copyright (C) 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Transformation for applying and updating patch files using Quilt during a workflow. Instantiated\n * by {@link PatchModule}."
    ],
    "functions": [
        "QuiltTransformation",
        "TransformationStatus",
        "transform",
        "Transformation",
        "reverse",
        "describe",
        "Location",
        "location",
        "runQuiltCommand",
        "copyPatchConfigsToTmpDir",
        "initializeQuilt",
        "importPatches",
        "restoreSeriesAndCleanup"
    ],
    "classes": [
        "QuiltTransformation"
    ]
}