{
    "identifiers": [
        "el",
        "el",
        "el",
        "el",
        "el",
        "el",
        "el",
        "el",
        "el",
        "el",
        "tagName",
        "inputTypesWhitelist",
        "el",
        "tagName",
        "el",
        "el",
        "el",
        "el",
        "el",
        "el",
        "el",
        "el",
        "el",
        "el",
        "e",
        "isValidFocusTarget",
        "addFocusVisibleClass",
        "hadKeyboardEvent",
        "e",
        "hadKeyboardEvent",
        "e",
        "isValidFocusTarget",
        "e",
        "hadKeyboardEvent",
        "focusTriggersKeyboardModality",
        "e",
        "addFocusVisibleClass",
        "e",
        "e",
        "isValidFocusTarget",
        "e",
        "e",
        "e",
        "hadFocusVisibleRecently",
        "hadFocusVisibleRecentlyTimeout",
        "hadFocusVisibleRecentlyTimeout",
        "hadFocusVisibleRecently",
        "hadFocusVisibleRecentlyTimeout",
        "removeFocusVisibleClass",
        "e",
        "e",
        "hadFocusVisibleRecently",
        "hadKeyboardEvent",
        "addInitialPointerMoveListeners",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "onInitialPointerMove",
        "e",
        "e",
        "hadKeyboardEvent",
        "removeInitialPointerMoveListeners",
        "onKeyDown",
        "onPointerDown",
        "onPointerDown",
        "onPointerDown",
        "onFocus",
        "onBlur",
        "onVisibilityChange",
        "addInitialPointerMoveListeners",
        "callback",
        "loaded",
        "loaded",
        "callback",
        "callback",
        "loaded",
        "load",
        "load",
        "onDOMReady",
        "init"
    ],
    "literals": [
        "'datetime-local'",
        "'HTML'",
        "'BODY'",
        "'classList'",
        "'contains'",
        "'INPUT'",
        "'TEXTAREA'",
        "'focus-visible'",
        "'focus-visible'",
        "'data-focus-visible-added'",
        "''",
        "'data-focus-visible-added'",
        "'focus-visible'",
        "'data-focus-visible-added'",
        "'focus-visible'",
        "'data-focus-visible-added'",
        "'hidden'",
        "'mousemove'",
        "'mousedown'",
        "'mouseup'",
        "'pointermove'",
        "'pointerdown'",
        "'pointerup'",
        "'touchmove'",
        "'touchstart'",
        "'touchend'",
        "'mousemove'",
        "'mousedown'",
        "'mouseup'",
        "'pointermove'",
        "'pointerdown'",
        "'pointerup'",
        "'touchmove'",
        "'touchstart'",
        "'touchend'",
        "'html'",
        "'keydown'",
        "'mousedown'",
        "'pointerdown'",
        "'touchstart'",
        "'focus'",
        "'blur'",
        "'visibilitychange'",
        "'js-focus-visible'",
        "'interactive'",
        "'complete'",
        "'DOMContentLoaded'",
        "'load'",
        "'undefined'"
    ],
    "variables": [
        "hadKeyboardEvent",
        "hadFocusVisibleRecently",
        "hadFocusVisibleRecentlyTimeout",
        "inputTypesWhitelist",
        "tagName",
        "loaded"
    ],
    "comments": [
        "Prevent IE from focusing the document or HTML element.",
        "To detect a tab/window switch, we look for a blur event followed",
        "rapidly by a visibility change.",
        "If we don't see a visibility change within 100ms, it's probably a",
        "regular focus change.",
        "If the tab becomes active again, the browser will handle calling focus",
        "on the element (Safari actually calls it twice).",
        "If this tab change caused a blur on an element with focus-visible,",
        "re-apply the class when the user switches back to the tab.",
        "Work around a Safari quirk that fires a mousemove on <html> whenever the",
        "window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯"
    ],
    "docstrings": [
        "* https://github.com/WICG/focus-visible",
        "* Helper function for legacy browsers and iframes which sometimes focus\n   * elements like document, body, and non-interactive SVG.\n   * @param {Element} el",
        "* Computes whether the given element should automatically trigger the\n   * `focus-visible` class being added, i.e. whether it should always match\n   * `:focus-visible` when focused.\n   * @param {Element} el\n   * @return {boolean}",
        "* Add the `focus-visible` class to the given element if it was not added by\n   * the author.\n   * @param {Element} el",
        "* Remove the `focus-visible` class from the given element if it was not\n   * originally added by the author.\n   * @param {Element} el",
        "* Treat `keydown` as a signal that the user is in keyboard modality.\n   * Apply `focus-visible` to any current active element and keep track\n   * of our keyboard modality state with `hadKeyboardEvent`.\n   * @param {Event} e",
        "* If at any point a user clicks with a pointing device, ensure that we change\n   * the modality away from keyboard.\n   * This avoids the situation where a user presses a key on an already focused\n   * element, and then clicks on a different element, focusing it with a\n   * pointing device, while we still think we're in keyboard modality.\n   * @param {Event} e",
        "* On `focus`, add the `focus-visible` class to the target if:\n   * - the target received focus as a result of keyboard navigation, or\n   * - the event target is an element that will likely require interaction\n   *   via the keyboard (e.g. a text box)\n   * @param {Event} e",
        "* On `blur`, remove the `focus-visible` class from the target.\n   * @param {Event} e",
        "* If the user changes tabs, keep track of whether or not the previously\n   * focused element had .focus-visible.\n   * @param {Event} e",
        "* Add a group of listeners to detect usage of any pointing devices.\n   * These listeners will be added when the polyfill first loads, and anytime\n   * the window is blurred, so that they are active when the window regains\n   * focus.",
        "* When the polfyill first loads, assume the user is in keyboard modality.\n   * If any event is received from a pointing device (e.g. mouse, pointer,\n   * touch), turn off keyboard modality.\n   * This accounts for situations where focus enters the page from the URL bar.\n   * @param {Event} e",
        "* Subscription when the DOM is ready\n * @param {Function} callback",
        "* Callback wrapper for check loaded state"
    ],
    "functions": [
        "init",
        "isValidFocusTarget",
        "focusTriggersKeyboardModality",
        "addFocusVisibleClass",
        "removeFocusVisibleClass",
        "onKeyDown",
        "onPointerDown",
        "onFocus",
        "onBlur",
        "onVisibilityChange",
        "addInitialPointerMoveListeners",
        "removeInitialPointerMoveListeners",
        "onInitialPointerMove",
        "onDOMReady",
        "load"
    ],
    "classes": []
}