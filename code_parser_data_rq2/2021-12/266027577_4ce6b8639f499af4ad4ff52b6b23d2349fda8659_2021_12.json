{
    "identifiers": [
        "aero",
        "minova",
        "rcp",
        "rcp",
        "nattable",
        "java",
        "util",
        "java",
        "util",
        "org",
        "eclipse",
        "core",
        "commands",
        "ParameterizedCommand",
        "org",
        "eclipse",
        "e4",
        "core",
        "commands",
        "ECommandService",
        "org",
        "eclipse",
        "e4",
        "core",
        "commands",
        "EHandlerService",
        "org",
        "eclipse",
        "nebula",
        "widgets",
        "nattable",
        "selection",
        "SelectionLayer",
        "MoveDirectionEnum",
        "org",
        "eclipse",
        "nebula",
        "widgets",
        "nattable",
        "style",
        "CellStyleAttributes",
        "org",
        "eclipse",
        "nebula",
        "widgets",
        "nattable",
        "widget",
        "EditModeEnum",
        "org",
        "eclipse",
        "swt",
        "SWT",
        "org",
        "eclipse",
        "swt",
        "events",
        "KeyAdapter",
        "org",
        "eclipse",
        "swt",
        "events",
        "KeyEvent",
        "org",
        "eclipse",
        "swt",
        "graphics",
        "Cursor",
        "org",
        "eclipse",
        "swt",
        "widgets",
        "Composite",
        "org",
        "eclipse",
        "swt",
        "widgets",
        "Control",
        "org",
        "eclipse",
        "swt",
        "widgets",
        "Display",
        "org",
        "eclipse",
        "swt",
        "widgets",
        "Text",
        "commitOnUpDown",
        "commitOnUpDown",
        "commitOnUpDown",
        "moveSelectionOnEnter",
        "commitOnUpDown",
        "moveSelectionOnEnter",
        "commitOnUpDown",
        "moveSelectionOnEnter",
        "commitOnLeftRight",
        "commitOnUpDown",
        "moveSelectionOnEnter",
        "commitOnLeftRight",
        "control",
        "control",
        "getParent",
        "getData",
        "control",
        "control",
        "getParent",
        "getData",
        "Override",
        "parent",
        "style",
        "textControl",
        "parent",
        "style",
        "textControl",
        "setBackground",
        "cellStyle",
        "getAttributeValue",
        "CellStyleAttributes",
        "BACKGROUND_COLOR",
        "textControl",
        "setForeground",
        "cellStyle",
        "getAttributeValue",
        "CellStyleAttributes",
        "FOREGROUND_COLOR",
        "textControl",
        "setFont",
        "cellStyle",
        "getAttributeValue",
        "CellStyleAttributes",
        "FONT",
        "cursor",
        "Display",
        "getDefault",
        "SWT",
        "CURSOR_IBEAM",
        "textControl",
        "setCursor",
        "cursor",
        "textControl",
        "addDisposeListener",
        "e",
        "cursor",
        "cursor",
        "isDisposed",
        "cursor",
        "dispose",
        "textControl",
        "addKeyListener",
        "Override",
        "isCommitOnEnter",
        "keyCode",
        "SWT",
        "CR",
        "keyCode",
        "SWT",
        "KEYPAD_CR",
        "stateMask",
        "textControl",
        "getParent",
        "forceFocus",
        "commit",
        "MoveDirectionEnum",
        "NONE",
        "parameter",
        "command",
        "getCommandService",
        "textControl",
        "createCommand",
        "parameter",
        "handlerService",
        "getHandlerService",
        "textControl",
        "handlerService",
        "executeHandler",
        "command",
        "close",
        "keyCode",
        "SWT",
        "ESC",
        "stateMask",
        "close",
        "commitOnUpDown",
        "commitOnLeftRight",
        "editMode",
        "EditModeEnum",
        "INLINE",
        "control",
        "widget",
        "commitOnUpDown",
        "keyCode",
        "SWT",
        "ARROW_UP",
        "commit",
        "MoveDirectionEnum",
        "UP",
        "commitOnUpDown",
        "keyCode",
        "SWT",
        "ARROW_DOWN",
        "commit",
        "MoveDirectionEnum",
        "DOWN",
        "commitOnLeftRight",
        "control",
        "getSelectionCount",
        "keyCode",
        "SWT",
        "ARROW_LEFT",
        "control",
        "getCaretPosition",
        "commit",
        "MoveDirectionEnum",
        "LEFT",
        "commitOnLeftRight",
        "control",
        "getSelectionCount",
        "keyCode",
        "SWT",
        "ARROW_RIGHT",
        "control",
        "getCaretPosition",
        "control",
        "getCharCount",
        "commit",
        "MoveDirectionEnum",
        "RIGHT",
        "Override",
        "e",
        "canonicalValue",
        "getCanonicalValue",
        "inputConversionErrorHandler",
        "validateCanonicalValue",
        "canonicalValue",
        "inputValidationErrorHandler",
        "ex",
        "textControl"
    ],
    "literals": [
        "\"EHandlerService\"",
        "\"ECommandService\"",
        "\"aero.minova.rcp.rcp.command.traverseenter\""
    ],
    "variables": [],
    "comments": [
        "create the Text control based on the specified style",
        "set style information configured in the associated cell style",
        "add a key listener that will commit or close the editor for special",
        "key strokes and executes conversion/validation on input to the editor",
        "always do the conversion",
        "and always do the validation, even if for committing the",
        "validation should be skipped, on editing",
        "a validation failure should be made visible",
        "otherwise there would be no need for validation!",
        "do nothing as exceptions caused by conversion or",
        "validation are handled already we just need this catch",
        "block for stopping the process if conversion failed with",
        "an exception"
    ],
    "docstrings": [
        "* Creates a TextCellEditor that will not move the selection on committing a value by pressing enter.\n\t *\n\t * @param commitOnUpDown\n\t *            Flag to configure whether the editor should commit and move the selection in the corresponding way if the up or down key is pressed.",
        "* Creates a TextCellEditor that will not move the selection on pressing the left or right arrow keys on the according edges.\n\t *\n\t * @param commitOnUpDown\n\t *            Flag to configure whether the editor should commit and move the selection in the corresponding way if the up or down key is pressed.\n\t * @param moveSelectionOnEnter\n\t *            Flag to configure whether the selection should move after a value was committed after pressing enter.",
        "* Creates a TextCellEditor.\n\t *\n\t * @param commitOnUpDown\n\t *            Flag to configure whether the editor should commit and move the selection in the corresponding way if the up or down key is pressed.\n\t * @param moveSelectionOnEnter\n\t *            Flag to configure whether the selection should move after a value was committed after pressing enter.\n\t * @param commitOnLeftRight\n\t *            Flag to configure whether the editor should commit and move the selection in the corresponding way if the left or right key is pressed on the\n\t *            according content edge.\n\t * @since 1.4",
        "* Creates the editor control that is wrapped by this ICellEditor. Will use the style configurations in ConfigRegistry for styling the control.\n\t *\n\t * @param parent\n\t *            The Composite that will be the parent of the new editor control. Can not be <code>null</code>\n\t * @param style\n\t *            The SWT style of the text control to create.\n\t * @return The created editor control that is wrapped by this ICellEditor."
    ],
    "functions": [
        "MinovaGridTextCellEditor",
        "MinovaGridTextCellEditor",
        "MinovaGridTextCellEditor",
        "MinovaGridTextCellEditor",
        "EHandlerService",
        "getHandlerService",
        "ECommandService",
        "getCommandService",
        "Text",
        "createEditorControl",
        "keyPressed",
        "keyReleased"
    ],
    "classes": [
        "MinovaGridTextCellEditor"
    ]
}