{
    "identifiers": [
        "logging",
        "typing",
        "Dict",
        "catalogue",
        "spacy",
        "tokens",
        "Doc",
        "types",
        "logging",
        "getLogger",
        "catalogue",
        "create",
        "name",
        "Dict",
        "Dict",
        "types",
        "DocExtFunc",
        "doc_extensions_registry",
        "get",
        "name",
        "name",
        "force",
        "name",
        "kwargs",
        "get_doc_extensions",
        "name",
        "items",
        "Doc",
        "has_extension",
        "name",
        "Doc",
        "set_extension",
        "name",
        "kwargs",
        "force",
        "LOGGER",
        "warning",
        "name",
        "Doc",
        "set_extension",
        "name",
        "kwargs",
        "force",
        "LOGGER",
        "warning",
        "name",
        "name",
        "name",
        "get_doc_extensions",
        "name",
        "keys",
        "Doc",
        "remove_extension",
        "name"
    ],
    "literals": [
        "\"textacy\"",
        "\"doc_extensions\"",
        "\"%s `Doc` extension already exists; overwriting...\"",
        "\"%s `Doc` extension already exists, and was not overwritten\""
    ],
    "variables": [
        "LOGGER",
        "doc_extensions_registry",
        "_"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    Get a collection of custom doc extensions that can be set on or removed from\n    the global :class:`spacy.tokens.Doc` , specified by ``name`` .\n\n    Note:\n        If ``name`` isn't found, you may need to import the module from which it comes.\n        For example, the \"text_stats\" collection of doc extensions is only available\n        after running ``import textacy.text_stats`` .\n    \"\"\"",
        "\"\"\"\n    Set a collection of custom doc extensions on the global :class:`spacy.tokens.Doc` ,\n    specified by ``name`` .\n\n    Args:\n        name\n        force: If True, set extensions even if existing extensions already exist;\n            otherwise, don't overwrite existing extensions.\n    \"\"\"",
        "\"\"\"\n    Remove a collection of custom doc extensions from the global :class:`spacy.tokens.Doc` ,\n    specified by ``name`` .\n    \"\"\""
    ],
    "functions": [
        "get_doc_extensions",
        "set_doc_extensions",
        "remove_doc_extensions"
    ],
    "classes": []
}