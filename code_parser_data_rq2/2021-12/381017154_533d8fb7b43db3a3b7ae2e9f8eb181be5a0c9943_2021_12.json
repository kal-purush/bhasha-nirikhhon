{
    "identifiers": [
        "Diagnostics",
        "Contracts",
        "Runtime",
        "Serialization",
        "Text",
        "IO",
        "Serializable",
        "Runtime",
        "InteropServices",
        "ComVisible",
        "BigEndianBinaryWriter",
        "BigEndianBinaryWriter",
        "OptionalField",
        "OptionalField",
        "OutStream",
        "Stream",
        "Null",
        "_buffer",
        "_encoding",
        "UTF8Encoding",
        "_encoder",
        "_encoding",
        "GetEncoder",
        "Stream",
        "output",
        "output",
        "UTF8Encoding",
        "Stream",
        "output",
        "Encoding",
        "encoding",
        "output",
        "encoding",
        "Stream",
        "output",
        "Encoding",
        "encoding",
        "leaveOpen",
        "output",
        "ArgumentNullException",
        "encoding",
        "ArgumentNullException",
        "output",
        "CanWrite",
        "ArgumentException",
        "Contract",
        "EndContractBlock",
        "OutStream",
        "output",
        "_buffer",
        "_encoding",
        "encoding",
        "_encoder",
        "_encoding",
        "GetEncoder",
        "_leaveOpen",
        "leaveOpen",
        "Dispose",
        "disposing",
        "disposing",
        "_leaveOpen",
        "OutStream",
        "Flush",
        "OutStream",
        "Close",
        "Dispose",
        "Flush",
        "OutStream",
        "OutStream",
        "Flush",
        "offset",
        "SeekOrigin",
        "origin",
        "OutStream",
        "Seek",
        "offset",
        "origin",
        "value",
        "_buffer",
        "value",
        "OutStream",
        "Write",
        "_buffer",
        "value",
        "OutStream",
        "WriteByte",
        "value",
        "value",
        "OutStream",
        "WriteByte",
        "value",
        "buffer",
        "buffer",
        "ArgumentNullException",
        "Contract",
        "EndContractBlock",
        "OutStream",
        "Write",
        "buffer",
        "buffer",
        "Length",
        "buffer",
        "index",
        "count",
        "OutStream",
        "Write",
        "buffer",
        "index",
        "count",
        "Security",
        "SecuritySafeCritical",
        "ch",
        "Char",
        "IsSurrogate",
        "ch",
        "ArgumentException",
        "Contract",
        "EndContractBlock",
        "Contract",
        "Assert",
        "_encoding",
        "GetMaxByteCount",
        "numBytes",
        "_encoder",
        "GetBytes",
        "ch",
        "pBytes",
        "_buffer",
        "Length",
        "OutStream",
        "Write",
        "_buffer",
        "numBytes",
        "chars",
        "chars",
        "ArgumentNullException",
        "Contract",
        "EndContractBlock",
        "_encoding",
        "GetBytes",
        "chars",
        "chars",
        "Length",
        "OutStream",
        "Write",
        "Length",
        "chars",
        "index",
        "count",
        "_encoding",
        "GetBytes",
        "chars",
        "index",
        "count",
        "OutStream",
        "Write",
        "Length",
        "Security",
        "SecuritySafeCritical",
        "Write",
        "value",
        "TmpValue",
        "value",
        "TmpValue",
        "TmpValue",
        "TmpValue",
        "TmpValue",
        "TmpValue",
        "TmpValue",
        "_buffer",
        "TmpValue",
        "_buffer",
        "TmpValue",
        "OutStream",
        "Write",
        "_buffer",
        "Write",
        "value",
        "_buffer",
        "value",
        "value",
        "Write",
        "_buffer",
        "Write",
        "value",
        "_buffer",
        "value",
        "value",
        "Write",
        "_buffer",
        "Write",
        "value",
        "_buffer",
        "value",
        "value",
        "value",
        "value",
        "Write",
        "_buffer",
        "Write",
        "value",
        "_buffer",
        "value",
        "value",
        "value",
        "value",
        "Write",
        "_buffer",
        "Write",
        "value",
        "_buffer",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "_buffer",
        "value",
        "OutStream",
        "Write",
        "_buffer",
        "Write",
        "value",
        "_buffer",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "_buffer",
        "value",
        "OutStream",
        "Write",
        "_buffer",
        "Security",
        "SecuritySafeCritical",
        "Write",
        "value",
        "TmpValue",
        "value",
        "TmpValue",
        "TmpValue",
        "TmpValue",
        "TmpValue",
        "Write",
        "_buffer",
        "Security",
        "SecuritySafeCritical",
        "Write",
        "value",
        "value",
        "ArgumentNullException",
        "EndContractBlock",
        "GetByteCount",
        "value",
        "len",
        "_largeByteBuffer",
        "LargeByteBufferSize",
        "_largeByteBuffer",
        "Length",
        "_encoding",
        "GetMaxByteCount",
        "len",
        "_largeByteBuffer",
        "Length",
        "GetBytes",
        "value",
        "value",
        "Length",
        "_largeByteBuffer",
        "Write",
        "_largeByteBuffer",
        "len",
        "charStart",
        "_DEBUG",
        "totalBytes",
        "charCount",
        "charStart",
        "charCount",
        "charStart",
        "charCount",
        "value",
        "Length",
        "ArgumentOutOfRangeException",
        "nameof",
        "charCount",
        "pChars",
        "value",
        "pBytes",
        "_largeByteBuffer",
        "byteLen",
        "_encoder",
        "GetBytes",
        "pChars",
        "charStart",
        "charCount",
        "pBytes",
        "_largeByteBuffer",
        "Length",
        "charCount",
        "numLeft",
        "Assert",
        "totalBytes",
        "len",
        "byteLen",
        "_largeByteBuffer",
        "Length",
        "Write",
        "_largeByteBuffer",
        "byteLen",
        "Assert",
        "totalBytes",
        "len",
        "value",
        "value",
        "v",
        "Write",
        "v",
        "v",
        "Write",
        "v"
    ],
    "literals": [
        "\"output\"",
        "\"encoding\"",
        "\"Argument_StreamNotWritable\"",
        "\"buffer\"",
        "\"Arg_SurrogatesNotAllowedAsSingleChar\"",
        "\"_encoding.GetMaxByteCount(1) <= 16)\"",
        "\"chars\"",
        "\"value\"",
        "\"BinaryWriter::Write(String) - More bytes encoded than expected!\"",
        "\"BinaryWriter::Write(String) - Didn't write out all the bytes!\""
    ],
    "variables": [
        "BigEndianBinaryWriter",
        "Null",
        "Stream",
        "OutStream",
        "_buffer",
        "Encoding",
        "_encoding",
        "Encoder",
        "_encoder",
        "_leaveOpen",
        "_tmpOneCharBuffer",
        "_largeByteBuffer",
        "_maxChars",
        "LargeByteBufferSize",
        "Stream",
        "BaseStream",
        "numBytes",
        "pBytes",
        "_buffer"
    ],
    "comments": [
        "This abstract base class represents a writer that can write",
        "primitives to an arbitrary stream. A subclass can override methods to",
        "give unique encodings.",
        "temp space for writing primitives to.",
        "New in .NET FX 4.5.  False is the right default value.",
        "This field should never have been serialized and has not been used since before v2.0.",
        "However, this type is serializable, and we need to keep the field name around when deserializing.",
        "Also, we'll make .NET FX 4.5 not break if it's missing.",
        "Perf optimization stuff",
        "temp space for writing chars.",
        "max # of chars we can put in _largeByteBuffer",
        "Size should be around the max number of chars/string * Encoding's max bytes/char",
        "Protected default constructor that sets the output stream",
        "to a null stream (a bit bucket).",
        "Closes this writer and releases any system resources associated with the",
        "writer. Following a call to Close, any operations on the writer",
        "may raise exceptions.",
        "Clears all buffers for this writer and causes any buffered data to be",
        "written to the underlying device.",
        "Writes a boolean to this stream. A single byte is written to the stream",
        "with the value 0 representing false or the value 1 representing true.",
        "Writes a byte to this stream. The current position of the stream is",
        "advanced by one.",
        "Writes a signed byte to this stream. The current position of the stream",
        "is advanced by one.",
        "Writes a byte array to this stream.",
        "",
        "This default implementation calls the Write(Object, int, int)",
        "method to write the byte array.",
        "Writes a section of a byte array to this stream.",
        "",
        "This default implementation calls the Write(Object, int, int)",
        "method to write the byte array.",
        "Writes a character to this stream. The current position of the stream is",
        "advanced by two.",
        "Note this method cannot handle surrogates properly in UTF-8.",
        "auto-generated",
        "Writes a character array to this stream.",
        "",
        "This default implementation calls the Write(Object, int, int)",
        "method to write the character array.",
        "Writes a section of a character array to this stream.",
        "",
        "This default implementation calls the Write(Object, int, int)",
        "method to write the character array.",
        "Writes a double to this stream. The current position of the stream is",
        "advanced by eight.",
        "auto-generated",
        "Writes a two-byte signed integer to this stream. The current position of",
        "the stream is advanced by two.",
        "Writes a two-byte unsigned integer to this stream. The current position",
        "of the stream is advanced by two.",
        "Writes a four-byte signed integer to this stream. The current position",
        "of the stream is advanced by four.",
        "Writes a four-byte unsigned integer to this stream. The current position",
        "of the stream is advanced by four.",
        "Writes an eight-byte signed integer to this stream. The current position",
        "of the stream is advanced by eight.",
        "Writes an eight-byte unsigned integer to this stream. The current",
        "position of the stream is advanced by eight.",
        "Writes a float to this stream. The current position of the stream is",
        "advanced by four.",
        "auto-generated",
        "Writes a length-prefixed string to this stream in the BinaryWriter's",
        "current Encoding. This method first writes the length of the string as",
        "a four-byte unsigned integer, and then writes that many characters",
        "to the stream.",
        "auto-generated",
        "Contract.Assert(len == _encoding.GetBytes(chars, 0, chars.Length, _largeByteBuffer, 0), \"encoding's GetByteCount & GetBytes gave different answers!  encoding type: \"+_encoding.GetType().Name);",
        "Aggressively try to not allocate memory in this loop for",
        "runtime performance reasons.  Use an Encoder to write out",
        "the string correctly (handling surrogates crossing buffer",
        "boundaries properly).",
        "Figure out how many chars to process this round.",
        "Write out an int 7 bits at a time.  The high bit of the byte,",
        "when on, tells reader to continue reading more bytes.",
        "support negative numbers"
    ],
    "docstrings": [
        "****************************************************************************\n * SunnyUI 开源控件库、工具类库、扩展类库、多页面开发框架。\n * CopyRight (C) 2012-2021 ShenYongHua(沈永华).\n * QQ群：56829229 QQ：17612584 EMail：SunnyUI@QQ.Com\n *\n * Blog:   https://www.cnblogs.com/yhuse\n * Gitee:  https://gitee.com/yhuse/SunnyUI\n * GitHub: https://github.com/yhuse/SunnyUI\n *\n * SunnyUI.dll can be used for free under the GPL-3.0 license.\n * If you use this code, please keep this note.\n * 如果您使用此代码，请保留此说明。\n ******************************************************************************\n * 文件名称: UBigEndianBinaryWriter.cs\n * 文件说明: 大端字节序的二进制写入器\n * 当前版本: V3.0\n * 创建日期: 2021-12-15\n *\n * 2021-12-15: V3.0.9 增加文件说明\n*****************************************************************************",
        "* Returns the stream associate with the writer. It flushes all pending\n         * writes before returning. All subclasses should override Flush to\n         * ensure that all buffered data is sent to the stream."
    ],
    "functions": [
        "BigEndianBinaryWriter",
        "BigEndianBinaryWriter",
        "BigEndianBinaryWriter",
        "BigEndianBinaryWriter",
        "Close",
        "Dispose",
        "Dispose",
        "Flush",
        "Seek",
        "Write",
        "Write",
        "Write",
        "Write",
        "Write",
        "Write",
        "Write",
        "Write"
    ],
    "classes": []
}