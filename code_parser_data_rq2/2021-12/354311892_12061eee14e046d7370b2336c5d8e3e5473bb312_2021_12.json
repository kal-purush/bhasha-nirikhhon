{
    "identifiers": [
        "URL",
        "RequestInit",
        "Response",
        "fetch",
        "json",
        "json",
        "json",
        "timestamp",
        "globalRateLimit",
        "setGlobalRateLimit",
        "timestamp",
        "globalRateLimit",
        "setGlobalRateLimit",
        "resolve",
        "setTimeout",
        "resolve",
        "remaining",
        "resetAfter",
        "remaining",
        "resetAfter",
        "resetAfter",
        "resetAfter",
        "url",
        "options",
        "fetch",
        "url",
        "options",
        "response",
        "response",
        "parseInt",
        "response",
        "parseFloat",
        "response",
        "parseBoolean",
        "response",
        "id",
        "id",
        "url",
        "remaining",
        "resetAfter",
        "isGlobal",
        "response",
        "response",
        "parseRateLimit",
        "response",
        "json",
        "json",
        "response",
        "options",
        "url",
        "response",
        "response",
        "response",
        "error",
        "error",
        "error"
    ],
    "literals": [
        "'url'",
        "'node-fetch'",
        "'node-fetch'",
        "string",
        "'false'",
        "'False'",
        "'0'",
        "'true'",
        "'True'",
        "'1'",
        "string",
        "string",
        "'x-ratelimit-bucket'",
        "'x-ratelimit-remaining'",
        "'1'",
        "'x-ratelimit-reset-after'",
        "'0'",
        "'x-ratelimit-global'",
        "[BUCKET ERROR]: The url ${url.toString()} has an incorrect bucket assigment.",
        "string",
        "[BUCKET ERROR]: The url [${\n                    options?.method ?? 'GET'\n                  }] ${url.toString()} returned a status code ${\n                    response.status\n                  }\\n\\n${await response.text()}",
        "'GET'"
    ],
    "variables": [
        "response",
        "id",
        "remaining",
        "resetAfter",
        "isGlobal",
        "json"
    ],
    "comments": [
        "private retry(callback, times = 3) {}",
        "execute request",
        "Validate our bucket assigment is correct",
        "Assign reset variables",
        "Special handling for rate limits"
    ],
    "docstrings": [],
    "functions": [
        "parseBoolean",
        "parseRateLimit",
        "checkRateLimit",
        "setResetAfter",
        "request"
    ],
    "classes": [
        "Bucket"
    ]
}