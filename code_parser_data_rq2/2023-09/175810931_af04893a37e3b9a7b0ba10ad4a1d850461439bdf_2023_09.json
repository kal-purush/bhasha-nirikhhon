{
    "identifiers": [
        "CLIENT_ASYNC",
        "Collections",
        "Generic",
        "Linq",
        "Threading",
        "Threading",
        "Tasks",
        "Opc",
        "Ua",
        "Client",
        "INodeCache",
        "INode",
        "ExpandedNodeId",
        "nodeId",
        "CancellationToken",
        "ct",
        "NodeId",
        "IsNull",
        "nodeId",
        "m_cacheLock",
        "EnterReadLock",
        "node",
        "m_nodes",
        "Find",
        "nodeId",
        "m_cacheLock",
        "ExitReadLock",
        "node",
        "node",
        "GetType",
        "Node",
        "node",
        "FetchNodeAsync",
        "nodeId",
        "ct",
        "ConfigureAwait",
        "e",
        "Utils",
        "LogError",
        "nodeId",
        "e",
        "Message",
        "IList",
        "INode",
        "IList",
        "ExpandedNodeId",
        "nodeIds",
        "CancellationToken",
        "ct",
        "nodeIds",
        "nodeIds",
        "Count",
        "INode",
        "nodeIds",
        "Count",
        "IList",
        "INode",
        "INode",
        "count",
        "ExpandedNodeIdCollection",
        "ii",
        "ii",
        "count",
        "ii",
        "m_cacheLock",
        "EnterReadLock",
        "node",
        "m_nodes",
        "Find",
        "nodeIds",
        "ii",
        "m_cacheLock",
        "ExitReadLock",
        "node",
        "node",
        "GetType",
        "Node",
        "nodes",
        "Add",
        "node",
        "nodes",
        "Add",
        "fetchNodeIds",
        "Add",
        "nodeIds",
        "ii",
        "fetchNodeIds",
        "Count",
        "nodes",
        "IList",
        "Node",
        "fetchedNodes",
        "FetchNodesAsync",
        "fetchNodeIds",
        "ct",
        "ConfigureAwait",
        "e",
        "Utils",
        "LogError",
        "e",
        "Message",
        "nodes",
        "ii",
        "Node",
        "fetchedNode",
        "fetchedNodes",
        "ii",
        "count",
        "nodes",
        "ii",
        "ii",
        "ii",
        "count",
        "nodes",
        "ii",
        "nodes",
        "ii",
        "fetchedNode",
        "Utils",
        "LogError",
        "nodes",
        "NodeId",
        "ExpandedNodeId",
        "typeId",
        "CancellationToken",
        "ct",
        "FindAsync",
        "typeId",
        "ct",
        "ConfigureAwait",
        "m_cacheLock",
        "EnterReadLock",
        "m_typeTree",
        "FindSuperType",
        "typeId",
        "m_cacheLock",
        "ExitReadLock",
        "NodeId",
        "NodeId",
        "typeId",
        "CancellationToken",
        "ct",
        "FindAsync",
        "typeId",
        "ct",
        "ConfigureAwait",
        "m_cacheLock",
        "EnterReadLock",
        "m_typeTree",
        "FindSuperType",
        "typeId",
        "m_cacheLock",
        "ExitReadLock",
        "Node",
        "ExpandedNodeId",
        "nodeId",
        "CancellationToken",
        "ct",
        "ExpandedNodeId",
        "ToNodeId",
        "nodeId",
        "m_session",
        "NamespaceUris",
        "localId",
        "m_session",
        "ReadNodeAsync",
        "localId",
        "ct",
        "ConfigureAwait",
        "m_session",
        "FetchReferencesAsync",
        "localId",
        "ct",
        "ConfigureAwait",
        "m_cacheLock",
        "EnterUpgradeableReadLock",
        "ReferenceDescription",
        "reference",
        "references",
        "m_nodes",
        "Exists",
        "reference",
        "NodeId",
        "reference",
        "NodeId",
        "reference",
        "NodeId",
        "IsAbsolute",
        "reference",
        "NodeId",
        "ExpandedNodeId",
        "ToNodeId",
        "reference",
        "NodeId",
        "NamespaceUris",
        "Node",
        "reference",
        "InternalWriteLockedAttach",
        "target",
        "source",
        "ReferenceTable",
        "Add",
        "reference",
        "ReferenceTypeId",
        "reference",
        "IsForward",
        "reference",
        "NodeId",
        "m_cacheLock",
        "ExitUpgradeableReadLock",
        "e",
        "Utils",
        "LogError",
        "nodeId",
        "e",
        "Message",
        "InternalWriteLockedAttach",
        "source",
        "source",
        "IList",
        "Node",
        "IList",
        "ExpandedNodeId",
        "nodeIds",
        "CancellationToken",
        "ct",
        "nodeIds",
        "Count",
        "count",
        "Node",
        "NodeIdCollection",
        "nodeIds",
        "Select",
        "ExpandedNodeId",
        "ToNodeId",
        "nodeId",
        "m_session",
        "NamespaceUris",
        "IList",
        "Node",
        "sourceNodes",
        "IList",
        "ServiceResult",
        "readErrors",
        "m_session",
        "ReadNodesAsync",
        "localIds",
        "NodeClass",
        "Unspecified",
        "ct",
        "ct",
        "ConfigureAwait",
        "IList",
        "ReferenceDescriptionCollection",
        "referenceCollectionList",
        "IList",
        "ServiceResult",
        "fetchErrors",
        "m_session",
        "FetchReferencesAsync",
        "localIds",
        "ct",
        "ConfigureAwait",
        "ii",
        "ii",
        "count",
        "ii",
        "ServiceResult",
        "IsBad",
        "readErrors",
        "ii",
        "ServiceResult",
        "IsBad",
        "fetchErrors",
        "ii",
        "referenceCollectionList",
        "ii",
        "ReferenceDescription",
        "reference",
        "references",
        "m_cacheLock",
        "EnterUpgradeableReadLock",
        "m_nodes",
        "Exists",
        "reference",
        "NodeId",
        "reference",
        "NodeId",
        "reference",
        "NodeId",
        "IsAbsolute",
        "reference",
        "NodeId",
        "ExpandedNodeId",
        "ToNodeId",
        "reference",
        "NodeId",
        "NamespaceUris",
        "Node",
        "reference",
        "InternalWriteLockedAttach",
        "target",
        "m_cacheLock",
        "ExitUpgradeableReadLock",
        "sourceNodes",
        "ii",
        "ReferenceTable",
        "Add",
        "reference",
        "ReferenceTypeId",
        "reference",
        "IsForward",
        "reference",
        "NodeId",
        "InternalWriteLockedAttach",
        "sourceNodes",
        "ii",
        "sourceNodes",
        "IList",
        "INode",
        "ExpandedNodeId",
        "nodeId",
        "NodeId",
        "referenceTypeId",
        "isInverse",
        "includeSubtypes",
        "CancellationToken",
        "ct",
        "IList",
        "INode",
        "INode",
        "FindAsync",
        "nodeId",
        "ct",
        "ConfigureAwait",
        "Node",
        "source",
        "targets",
        "IList",
        "IReference",
        "m_cacheLock",
        "EnterReadLock",
        "references",
        "source",
        "ReferenceTable",
        "Find",
        "referenceTypeId",
        "isInverse",
        "includeSubtypes",
        "m_typeTree",
        "m_cacheLock",
        "ExitReadLock",
        "ExpandedNodeIdCollection",
        "references",
        "Select",
        "reference",
        "TargetId",
        "IList",
        "INode",
        "FindAsync",
        "targetIds",
        "ct",
        "ConfigureAwait",
        "INode",
        "target",
        "result",
        "target",
        "targets",
        "Add",
        "target",
        "targets",
        "IList",
        "INode",
        "IList",
        "ExpandedNodeId",
        "nodeIds",
        "IList",
        "NodeId",
        "referenceTypeIds",
        "isInverse",
        "includeSubtypes",
        "CancellationToken",
        "ct",
        "IList",
        "INode",
        "INode",
        "nodeIds",
        "Count",
        "referenceTypeIds",
        "Count",
        "targets",
        "ExpandedNodeIdCollection",
        "IList",
        "INode",
        "FindAsync",
        "nodeIds",
        "ct",
        "ConfigureAwait",
        "INode",
        "source",
        "sources",
        "source",
        "Node",
        "node",
        "referenceTypeId",
        "referenceTypeIds",
        "IList",
        "IReference",
        "m_cacheLock",
        "EnterReadLock",
        "references",
        "node",
        "ReferenceTable",
        "Find",
        "referenceTypeId",
        "isInverse",
        "includeSubtypes",
        "m_typeTree",
        "m_cacheLock",
        "ExitReadLock",
        "targetIds",
        "AddRange",
        "references",
        "Select",
        "reference",
        "TargetId",
        "IList",
        "INode",
        "FindAsync",
        "targetIds",
        "ct",
        "ConfigureAwait",
        "INode",
        "target",
        "result",
        "target",
        "targets",
        "Add",
        "target",
        "targets"
    ],
    "literals": [
        "\"Could not fetch node from server: NodeId={0}, Reason='{1}'.\"",
        "\"Could not fetch nodes from server: Reason='{0}'.\"",
        "\"Inconsistency fetching nodes from server. Not all nodes could be assigned.\"",
        "\"Could not fetch references for valid node with NodeId = {0}. Error = {1}\""
    ],
    "variables": [
        "INode",
        "node",
        "count",
        "nodes",
        "fetchNodeIds",
        "ii",
        "INode",
        "node",
        "fetchedNodes",
        "INode",
        "INode",
        "NodeId",
        "localId",
        "Node",
        "source",
        "ReferenceDescriptionCollection",
        "references",
        "Node",
        "target",
        "count",
        "NodeIdCollection",
        "localIds",
        "ii",
        "ReferenceDescriptionCollection",
        "references",
        "Node",
        "target",
        "targets",
        "Node",
        "source",
        "references",
        "targetIds",
        "result",
        "targets",
        "ExpandedNodeIdCollection",
        "targetIds",
        "sources",
        "references",
        "result"
    ],
    "comments": [
        "========================================================================\n * Copyright (c) 2005-2023 The OPC Foundation, Inc. All rights reserved.\n *\n * OPC Foundation MIT License 1.00\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n *\n * The complete license agreement can be found here:\n * http://opcfoundation.org/License/MIT/1.00/\n * ======================================================================",
        "An implementation of a client side nodecache.",
        "</summary>",
        "<inheritdoc/>",
        "check for null.",
        "check if node alredy exists.",
        "do not return temporary nodes created after a Browse().",
        "fetch node from server.",
        "m_nodes[nodeId] = null;",
        "<inheritdoc/>",
        "check for null.",
        "check if node already exists.",
        "do not return temporary nodes created after a Browse().",
        "fetch missing nodes from server.",
        "m_nodes[nodeId] = null;",
        "<inheritdoc/>",
        "<inheritdoc/>",
        "<inheritdoc/>",
        "fetch node from server.",
        "fetch references from server.",
        "create a placeholder for the node if it does not already exist.",
        "transform absolute identifiers.",
        "add the reference.",
        "<inheritdoc/>",
        "fetch nodes and references from server.",
        "fetch references from server.",
        "create a placeholder for the node if it does not already exist.",
        "transform absolute identifiers.",
        "add the reference.",
        "<inheritdoc/>",
        "<inheritdoc/>"
    ],
    "docstrings": [
        "<summary>"
    ],
    "functions": [
        "FindAsync",
        "FindAsync",
        "FindSuperTypeAsync",
        "FindSuperTypeAsync",
        "FetchNodeAsync",
        "FetchNodesAsync",
        "FindReferencesAsync",
        "FindReferencesAsync"
    ],
    "classes": [
        "NodeCache"
    ]
}