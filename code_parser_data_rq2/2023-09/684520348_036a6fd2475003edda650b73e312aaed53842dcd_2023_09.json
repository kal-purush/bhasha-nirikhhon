{
    "identifiers": [
        "__unused_webpack_module",
        "exports",
        "__nccwpck_require__",
        "o",
        "m",
        "k",
        "k2",
        "k2",
        "k2",
        "k",
        "o",
        "k2",
        "m",
        "k",
        "o",
        "m",
        "k",
        "k2",
        "k2",
        "k2",
        "k",
        "o",
        "k2",
        "m",
        "k",
        "o",
        "v",
        "o",
        "v",
        "o",
        "v",
        "o",
        "v",
        "mod",
        "mod",
        "mod",
        "mod",
        "mod",
        "k",
        "mod",
        "k",
        "mod",
        "k",
        "__createBinding",
        "result",
        "mod",
        "k",
        "__setModuleDefault",
        "result",
        "mod",
        "result",
        "thisArg",
        "_arguments",
        "P",
        "generator",
        "value",
        "value",
        "P",
        "value",
        "P",
        "resolve",
        "resolve",
        "value",
        "P",
        "P",
        "resolve",
        "reject",
        "value",
        "step",
        "generator",
        "value",
        "e",
        "reject",
        "e",
        "value",
        "step",
        "generator",
        "value",
        "e",
        "reject",
        "e",
        "result",
        "result",
        "resolve",
        "result",
        "adopt",
        "result",
        "fulfilled",
        "rejected",
        "step",
        "generator",
        "generator",
        "thisArg",
        "_arguments",
        "exports",
        "exports",
        "exports",
        "__nccwpck_require__",
        "__importStar",
        "__nccwpck_require__",
        "commandLine",
        "args",
        "options",
        "__awaiter",
        "tr",
        "commandLine",
        "commandArgs",
        "commandArgs",
        "args",
        "commandArgs",
        "args",
        "tr",
        "toolPath",
        "args",
        "options",
        "runner",
        "exports",
        "exec",
        "commandLine",
        "args",
        "options",
        "__awaiter",
        "string_decoder_1",
        "string_decoder_1",
        "_a",
        "options",
        "options",
        "options",
        "_a",
        "_a",
        "_b",
        "options",
        "options",
        "options",
        "_b",
        "_b",
        "stdErrListener",
        "data",
        "stderr",
        "stderrDecoder",
        "data",
        "originalStdErrListener",
        "originalStdErrListener",
        "data",
        "stdOutListener",
        "data",
        "stdout",
        "stdoutDecoder",
        "data",
        "originalStdoutListener",
        "originalStdoutListener",
        "data",
        "options",
        "options",
        "options",
        "stdOutListener",
        "stdErrListener",
        "exec",
        "commandLine",
        "args",
        "options",
        "stdout",
        "stdoutDecoder",
        "stderr",
        "stderrDecoder",
        "exports",
        "getExecOutput",
        "__unused_webpack_module",
        "exports",
        "__nccwpck_require__",
        "o",
        "m",
        "k",
        "k2",
        "k2",
        "k2",
        "k",
        "o",
        "k2",
        "m",
        "k",
        "o",
        "m",
        "k",
        "k2",
        "k2",
        "k2",
        "k",
        "o",
        "k2",
        "m",
        "k",
        "o",
        "v",
        "o",
        "v",
        "o",
        "v",
        "o",
        "v",
        "mod",
        "mod",
        "mod",
        "mod",
        "mod",
        "k",
        "mod",
        "k",
        "mod",
        "k",
        "__createBinding",
        "result",
        "mod",
        "k",
        "__setModuleDefault",
        "result",
        "mod",
        "result",
        "thisArg",
        "_arguments",
        "P",
        "generator",
        "value",
        "value",
        "P",
        "value",
        "P",
        "resolve",
        "resolve",
        "value",
        "P",
        "P",
        "resolve",
        "reject",
        "value",
        "step",
        "generator",
        "value",
        "e",
        "reject",
        "e",
        "value",
        "step",
        "generator",
        "value",
        "e",
        "reject",
        "e",
        "result",
        "result",
        "resolve",
        "result",
        "adopt",
        "result",
        "fulfilled",
        "rejected",
        "step",
        "generator",
        "generator",
        "thisArg",
        "_arguments",
        "exports",
        "exports",
        "exports",
        "__importStar",
        "__nccwpck_require__",
        "__importStar",
        "__nccwpck_require__",
        "__importStar",
        "__nccwpck_require__",
        "__importStar",
        "__nccwpck_require__",
        "__importStar",
        "__nccwpck_require__",
        "__importStar",
        "__nccwpck_require__",
        "__nccwpck_require__",
        "process",
        "events",
        "toolPath",
        "args",
        "options",
        "toolPath",
        "toolPath",
        "args",
        "options",
        "message",
        "message",
        "options",
        "noPrefix",
        "options",
        "noPrefix",
        "IS_WINDOWS",
        "cmd",
        "toolPath",
        "a",
        "args",
        "cmd",
        "a",
        "options",
        "cmd",
        "toolPath",
        "a",
        "args",
        "cmd",
        "a",
        "cmd",
        "toolPath",
        "a",
        "args",
        "cmd",
        "a",
        "cmd",
        "toolPath",
        "a",
        "args",
        "cmd",
        "a",
        "cmd",
        "data",
        "strBuffer",
        "onLine",
        "strBuffer",
        "data",
        "s",
        "os",
        "n",
        "s",
        "n",
        "onLine",
        "line",
        "s",
        "s",
        "n",
        "os",
        "n",
        "s",
        "os",
        "s",
        "err",
        "err",
        "IS_WINDOWS",
        "process",
        "options",
        "IS_WINDOWS",
        "a",
        "argline",
        "argline",
        "options",
        "a",
        "a",
        "argline",
        "argline",
        "end",
        "end",
        "upperToolPath",
        "upperToolPath",
        "arg",
        "arg",
        "arg",
        "arg",
        "cmdSpecialChars",
        "x",
        "x",
        "needsQuotes",
        "needsQuotes",
        "arg",
        "arg",
        "i",
        "i",
        "reverse",
        "arg",
        "i",
        "quoteHit",
        "arg",
        "i",
        "reverse",
        "arg",
        "i",
        "quoteHit",
        "reverse",
        "quoteHit",
        "reverse",
        "reverse",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "i",
        "i",
        "reverse",
        "arg",
        "i",
        "quoteHit",
        "arg",
        "i",
        "reverse",
        "arg",
        "i",
        "quoteHit",
        "reverse",
        "quoteHit",
        "reverse",
        "reverse",
        "options",
        "options",
        "options",
        "options",
        "process",
        "options",
        "process",
        "options",
        "options",
        "options",
        "options",
        "options",
        "result",
        "options",
        "process",
        "result",
        "options",
        "process",
        "result",
        "options",
        "toolPath",
        "options",
        "options",
        "result",
        "options",
        "result",
        "options",
        "result",
        "options",
        "options",
        "result",
        "toolPath",
        "result",
        "__awaiter",
        "ioUtil",
        "IS_WINDOWS",
        "path",
        "process",
        "process",
        "io",
        "resolve",
        "reject",
        "__awaiter",
        "arg",
        "arg",
        "optionsNonNull",
        "optionsNonNull",
        "optionsNonNull",
        "optionsNonNull",
        "os",
        "ExecState",
        "optionsNonNull",
        "state",
        "message",
        "message",
        "ioUtil",
        "reject",
        "child",
        "fileName",
        "optionsNonNull",
        "fileName",
        "cp",
        "cp",
        "data",
        "data",
        "optionsNonNull",
        "optionsNonNull",
        "optionsNonNull",
        "data",
        "stdbuffer",
        "data",
        "stdbuffer",
        "line",
        "line",
        "cp",
        "cp",
        "data",
        "state",
        "data",
        "optionsNonNull",
        "optionsNonNull",
        "optionsNonNull",
        "optionsNonNull",
        "optionsNonNull",
        "optionsNonNull",
        "s",
        "data",
        "errbuffer",
        "data",
        "errbuffer",
        "line",
        "line",
        "cp",
        "err",
        "state",
        "err",
        "state",
        "state",
        "state",
        "cp",
        "code",
        "state",
        "code",
        "state",
        "code",
        "state",
        "cp",
        "code",
        "state",
        "code",
        "state",
        "state",
        "state",
        "state",
        "error",
        "exitCode",
        "stdbuffer",
        "stdbuffer",
        "errbuffer",
        "errbuffer",
        "cp",
        "error",
        "reject",
        "error",
        "resolve",
        "exitCode",
        "cp",
        "cp",
        "exports",
        "ToolRunner",
        "argString",
        "c",
        "escaped",
        "c",
        "arg",
        "arg",
        "c",
        "escaped",
        "i",
        "argString",
        "i",
        "argString",
        "i",
        "c",
        "escaped",
        "inQuotes",
        "inQuotes",
        "append",
        "c",
        "c",
        "escaped",
        "append",
        "c",
        "c",
        "inQuotes",
        "escaped",
        "c",
        "inQuotes",
        "arg",
        "args",
        "arg",
        "arg",
        "append",
        "c",
        "arg",
        "args",
        "arg",
        "args",
        "exports",
        "argStringToArray",
        "events",
        "options",
        "toolPath",
        "toolPath",
        "options",
        "toolPath",
        "options",
        "options",
        "timers_1",
        "ExecState",
        "message",
        "message",
        "error",
        "error",
        "error",
        "clearTimeout",
        "error",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "message",
        "state",
        "__unused_webpack_module",
        "exports",
        "__nccwpck_require__",
        "o",
        "m",
        "k",
        "k2",
        "k2",
        "k2",
        "k",
        "o",
        "k2",
        "m",
        "k",
        "o",
        "m",
        "k",
        "k2",
        "k2",
        "k2",
        "k",
        "o",
        "k2",
        "m",
        "k",
        "o",
        "v",
        "o",
        "v",
        "o",
        "v",
        "o",
        "v",
        "mod",
        "mod",
        "mod",
        "mod",
        "mod",
        "k",
        "mod",
        "k",
        "mod",
        "k",
        "__createBinding",
        "result",
        "mod",
        "k",
        "__setModuleDefault",
        "result",
        "mod",
        "result",
        "thisArg",
        "_arguments",
        "P",
        "generator",
        "value",
        "value",
        "P",
        "value",
        "P",
        "resolve",
        "resolve",
        "value",
        "P",
        "P",
        "resolve",
        "reject",
        "value",
        "step",
        "generator",
        "value",
        "e",
        "reject",
        "e",
        "value",
        "step",
        "generator",
        "value",
        "e",
        "reject",
        "e",
        "result",
        "result",
        "resolve",
        "result",
        "adopt",
        "result",
        "fulfilled",
        "rejected",
        "step",
        "generator",
        "generator",
        "thisArg",
        "_arguments",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "__importStar",
        "__nccwpck_require__",
        "__importStar",
        "__nccwpck_require__",
        "_a",
        "fs",
        "exports",
        "_a",
        "exports",
        "_a",
        "exports",
        "_a",
        "exports",
        "_a",
        "exports",
        "_a",
        "exports",
        "_a",
        "exports",
        "_a",
        "exports",
        "_a",
        "exports",
        "_a",
        "exports",
        "_a",
        "exports",
        "_a",
        "exports",
        "_a",
        "exports",
        "_a",
        "exports",
        "process",
        "exports",
        "exports",
        "fs",
        "fsPath",
        "__awaiter",
        "exports",
        "fsPath",
        "err",
        "err",
        "err",
        "exports",
        "exists",
        "fsPath",
        "useStat",
        "__awaiter",
        "useStat",
        "exports",
        "fsPath",
        "exports",
        "fsPath",
        "stats",
        "exports",
        "isDirectory",
        "p",
        "p",
        "normalizeSeparators",
        "p",
        "p",
        "exports",
        "p",
        "p",
        "p",
        "exports",
        "isRooted",
        "filePath",
        "extensions",
        "__awaiter",
        "stats",
        "exports",
        "filePath",
        "err",
        "err",
        "filePath",
        "err",
        "stats",
        "stats",
        "exports",
        "path",
        "filePath",
        "extensions",
        "validExt",
        "validExt",
        "upperExt",
        "filePath",
        "isUnixExecutable",
        "stats",
        "filePath",
        "extension",
        "extensions",
        "filePath",
        "originalFilePath",
        "extension",
        "stats",
        "stats",
        "exports",
        "filePath",
        "err",
        "err",
        "filePath",
        "err",
        "stats",
        "stats",
        "exports",
        "path",
        "filePath",
        "path",
        "filePath",
        "actualName",
        "exports",
        "directory",
        "upperName",
        "actualName",
        "filePath",
        "path",
        "directory",
        "actualName",
        "err",
        "filePath",
        "err",
        "filePath",
        "isUnixExecutable",
        "stats",
        "filePath",
        "exports",
        "tryGetExecutablePath",
        "p",
        "p",
        "p",
        "exports",
        "p",
        "p",
        "p",
        "p",
        "stats",
        "stats",
        "stats",
        "stats",
        "process",
        "stats",
        "stats",
        "process",
        "_a",
        "process",
        "_a",
        "_a",
        "exports",
        "getCmdPath",
        "__unused_webpack_module",
        "exports",
        "__nccwpck_require__",
        "o",
        "m",
        "k",
        "k2",
        "k2",
        "k2",
        "k",
        "o",
        "k2",
        "m",
        "k",
        "o",
        "m",
        "k",
        "k2",
        "k2",
        "k2",
        "k",
        "o",
        "k2",
        "m",
        "k",
        "o",
        "v",
        "o",
        "v",
        "o",
        "v",
        "o",
        "v",
        "mod",
        "mod",
        "mod",
        "mod",
        "mod",
        "k",
        "mod",
        "k",
        "mod",
        "k",
        "__createBinding",
        "result",
        "mod",
        "k",
        "__setModuleDefault",
        "result",
        "mod",
        "result",
        "thisArg",
        "_arguments",
        "P",
        "generator",
        "value",
        "value",
        "P",
        "value",
        "P",
        "resolve",
        "resolve",
        "value",
        "P",
        "P",
        "resolve",
        "reject",
        "value",
        "step",
        "generator",
        "value",
        "e",
        "reject",
        "e",
        "value",
        "step",
        "generator",
        "value",
        "e",
        "reject",
        "e",
        "result",
        "result",
        "resolve",
        "result",
        "adopt",
        "result",
        "fulfilled",
        "rejected",
        "step",
        "generator",
        "generator",
        "thisArg",
        "_arguments",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "__nccwpck_require__",
        "__importStar",
        "__nccwpck_require__",
        "__importStar",
        "__nccwpck_require__",
        "source",
        "dest",
        "options",
        "__awaiter",
        "readCopyOptions",
        "options",
        "ioUtil",
        "dest",
        "ioUtil",
        "dest",
        "destStat",
        "destStat",
        "force",
        "destStat",
        "destStat",
        "copySourceDirectory",
        "path",
        "dest",
        "path",
        "source",
        "dest",
        "ioUtil",
        "source",
        "source",
        "ioUtil",
        "source",
        "sourceStat",
        "recursive",
        "source",
        "cpDirRecursive",
        "source",
        "newDest",
        "force",
        "path",
        "source",
        "newDest",
        "newDest",
        "source",
        "copyFile",
        "source",
        "newDest",
        "force",
        "exports",
        "cp",
        "source",
        "dest",
        "options",
        "__awaiter",
        "ioUtil",
        "dest",
        "ioUtil",
        "dest",
        "dest",
        "path",
        "dest",
        "path",
        "source",
        "destExists",
        "ioUtil",
        "dest",
        "destExists",
        "options",
        "options",
        "rmRF",
        "dest",
        "mkdirP",
        "path",
        "dest",
        "ioUtil",
        "source",
        "dest",
        "exports",
        "mv",
        "inputPath",
        "__awaiter",
        "ioUtil",
        "inputPath",
        "ioUtil",
        "inputPath",
        "err",
        "err",
        "exports",
        "rmRF",
        "fsPath",
        "__awaiter",
        "assert_1",
        "fsPath",
        "ioUtil",
        "fsPath",
        "exports",
        "mkdirP",
        "tool",
        "check",
        "__awaiter",
        "tool",
        "check",
        "which",
        "tool",
        "result",
        "ioUtil",
        "tool",
        "tool",
        "result",
        "findInPath",
        "tool",
        "matches",
        "matches",
        "matches",
        "exports",
        "which",
        "tool",
        "__awaiter",
        "tool",
        "ioUtil",
        "process",
        "extension",
        "process",
        "path",
        "extension",
        "extensions",
        "extension",
        "ioUtil",
        "tool",
        "ioUtil",
        "tool",
        "extensions",
        "filePath",
        "filePath",
        "tool",
        "path",
        "process",
        "p",
        "process",
        "path",
        "p",
        "directories",
        "p",
        "directory",
        "directories",
        "ioUtil",
        "path",
        "directory",
        "tool",
        "extensions",
        "filePath",
        "matches",
        "filePath",
        "matches",
        "exports",
        "findInPath",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "sourceDir",
        "destDir",
        "currentDepth",
        "force",
        "__awaiter",
        "currentDepth",
        "currentDepth",
        "mkdirP",
        "destDir",
        "ioUtil",
        "sourceDir",
        "fileName",
        "files",
        "sourceDir",
        "fileName",
        "destDir",
        "fileName",
        "ioUtil",
        "srcFile",
        "srcFileStat",
        "cpDirRecursive",
        "srcFile",
        "destFile",
        "currentDepth",
        "force",
        "copyFile",
        "srcFile",
        "destFile",
        "force",
        "ioUtil",
        "destDir",
        "ioUtil",
        "sourceDir",
        "srcFile",
        "destFile",
        "force",
        "__awaiter",
        "ioUtil",
        "srcFile",
        "ioUtil",
        "destFile",
        "ioUtil",
        "destFile",
        "e",
        "e",
        "ioUtil",
        "destFile",
        "ioUtil",
        "destFile",
        "ioUtil",
        "srcFile",
        "ioUtil",
        "symlinkFull",
        "destFile",
        "ioUtil",
        "ioUtil",
        "destFile",
        "force",
        "ioUtil",
        "srcFile",
        "destFile",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "moduleId",
        "__webpack_module_cache__",
        "moduleId",
        "cachedModule",
        "cachedModule",
        "__webpack_module_cache__",
        "moduleId",
        "__webpack_modules__",
        "moduleId",
        "__nccwpck_require__",
        "threw",
        "threw",
        "__webpack_module_cache__",
        "moduleId",
        "__nccwpck_require__",
        "__nccwpck_require__",
        "__dirname",
        "__nccwpck_require__",
        "__nccwpck_require__",
        "exec",
        "path",
        "process",
        "run",
        "__webpack_exports__"
    ],
    "literals": [
        "\"use strict\"",
        "\"default\"",
        "\"default\"",
        "\"default\"",
        "\"throw\"",
        "\"__esModule\"",
        "Parameter 'commandLine' cannot be null or empty.",
        "''",
        "''",
        "'utf8'",
        "'utf8'",
        "\"use strict\"",
        "\"default\"",
        "\"default\"",
        "\"default\"",
        "\"throw\"",
        "\"__esModule\"",
        "'win32'",
        "\"Parameter 'toolPath' cannot be null or empty.\"",
        "''",
        "'[command]'",
        "${a}",
        "\"${toolPath}\"",
        "${a}",
        "${this._windowsQuoteCmdArg(a)}",
        "${a}",
        "error processing line. Failed with error ${err}",
        "''",
        "'COMSPEC'",
        "'cmd.exe'",
        "/D /S /C \"${this._windowsQuoteCmdArg(this.toolPath)}",
        "' '",
        "'\"'",
        "'.CMD'",
        "'.BAT'",
        "'\"\"'",
        "' '",
        "'\\t'",
        "'&'",
        "'('",
        "')'",
        "'['",
        "']'",
        "'{'",
        "'}'",
        "'^'",
        "'='",
        "';'",
        "'!'",
        "\"'\"",
        "'+'",
        "','",
        "'`'",
        "'~'",
        "'|'",
        "'<'",
        "'>'",
        "'\"'",
        "'\"'",
        "'\\\\'",
        "'\\\\'",
        "'\"'",
        "'\"'",
        "'\"'",
        "''",
        "''",
        "'\"\"'",
        "' '",
        "'\\t'",
        "'\"'",
        "'\"'",
        "'\\\\'",
        "\"${arg}\"",
        "'\"'",
        "'\\\\'",
        "'\\\\'",
        "'\"'",
        "'\\\\'",
        "'\"'",
        "''",
        "''",
        "'windowsVerbatimArguments'",
        "\"${toolPath}\"",
        "'/'",
        "'\\\\'",
        "exec tool: ${this.toolPath}",
        "'arguments:'",
        "${arg}",
        "'debug'",
        "The cwd: ${this.options.cwd} does not exist!",
        "''",
        "'data'",
        "''",
        "'data'",
        "'error'",
        "'exit'",
        "Exit code ${code} received from tool '${this.toolPath}'",
        "'close'",
        "STDIO streams have closed for tool '${this.toolPath}'",
        "'done'",
        "'stdline'",
        "'errline'",
        "'child process missing stdin'",
        "''",
        "'\"'",
        "'\\\\'",
        "'\"'",
        "'\\\\'",
        "'\\\\'",
        "' '",
        "''",
        "''",
        "'toolPath must not be empty'",
        "'debug'",
        "There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}",
        "The process '${this.toolPath}' failed with exit code ${this.processExitCode}",
        "The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream",
        "'done'",
        "The STDIO streams did not close within ${state.delay /\n                1000} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.",
        "\"use strict\"",
        "\"default\"",
        "\"default\"",
        "\"default\"",
        "\"throw\"",
        "\"__esModule\"",
        "'win32'",
        "'ENOENT'",
        "'isRooted() parameter \"p\" cannot be empty'",
        "'\\\\'",
        "'/'",
        "'ENOENT'",
        "Unexpected error attempting to determine if executable file exists '${filePath}': ${err}",
        "'ENOENT'",
        "Unexpected error attempting to determine if executable file exists '${filePath}': ${err}",
        "Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}",
        "''",
        "''",
        "'\\\\'",
        "'\\\\'",
        "'/'",
        "'COMSPEC'",
        "cmd.exe",
        "\"use strict\"",
        "\"default\"",
        "\"default\"",
        "\"default\"",
        "\"throw\"",
        "\"__esModule\"",
        "no such file or directory: ${source}",
        "Failed to copy. ${source} is a directory, but tried to copy without recursive flag.",
        "''",
        "'${newDest}' and '${source}' are the same file",
        "'Destination already exists'",
        "'File path must not contain `*`, `\"`, `<`, `>` or `|` on Windows'",
        "File was unable to be removed ${err}",
        "'a path argument must be provided'",
        "\"parameter 'tool' is required\"",
        "Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.",
        "Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.",
        "''",
        "\"parameter 'tool' is required\"",
        "'PATHEXT'",
        "'PATHEXT'",
        "${sourceDir}/${fileName}",
        "${destDir}/${fileName}",
        "'EPERM'",
        "'0666'",
        "'junction'",
        "\"use strict\"",
        "\"assert\"",
        "\"use strict\"",
        "\"child_process\"",
        "\"use strict\"",
        "\"events\"",
        "\"use strict\"",
        "\"fs\"",
        "\"use strict\"",
        "\"os\"",
        "\"use strict\"",
        "\"path\"",
        "\"use strict\"",
        "\"string_decoder\"",
        "\"use strict\"",
        "\"timers\"",
        "'undefined'",
        "\"/\"",
        "'reg'",
        "'restore'",
        "'HKCU\\\\Software\\\\Epic Games\\\\Unreal Engine\\\\Builds'",
        "'UEBuilds.hiv'"
    ],
    "variables": [
        "__webpack_modules__",
        "__createBinding",
        "__setModuleDefault",
        "__importStar",
        "result",
        "__awaiter",
        "string_decoder_1",
        "tr",
        "commandArgs",
        "toolPath",
        "runner",
        "_a",
        "_b",
        "stdout",
        "stderr",
        "stdoutDecoder",
        "stderrDecoder",
        "originalStdoutListener",
        "originalStdErrListener",
        "stdErrListener",
        "stdOutListener",
        "listeners",
        "exitCode",
        "__createBinding",
        "__setModuleDefault",
        "__importStar",
        "result",
        "__awaiter",
        "os",
        "events",
        "child",
        "path",
        "io",
        "ioUtil",
        "timers_1",
        "IS_WINDOWS",
        "toolPath",
        "args",
        "cmd",
        "s",
        "n",
        "line",
        "argline",
        "upperToolPath",
        "cmdSpecialChars",
        "needsQuotes",
        "reverse",
        "quoteHit",
        "i",
        "reverse",
        "quoteHit",
        "i",
        "result",
        "result",
        "optionsNonNull",
        "state",
        "fileName",
        "cp",
        "stdbuffer",
        "errbuffer",
        "s",
        "args",
        "inQuotes",
        "escaped",
        "arg",
        "i",
        "c",
        "error",
        "message",
        "__createBinding",
        "__setModuleDefault",
        "__importStar",
        "result",
        "__awaiter",
        "_a",
        "fs",
        "path",
        "stats",
        "stats",
        "upperExt",
        "originalFilePath",
        "filePath",
        "directory",
        "upperName",
        "_a",
        "__createBinding",
        "__setModuleDefault",
        "__importStar",
        "result",
        "__awaiter",
        "assert_1",
        "path",
        "ioUtil",
        "destStat",
        "newDest",
        "sourceStat",
        "destExists",
        "result",
        "matches",
        "extensions",
        "filePath",
        "directories",
        "matches",
        "filePath",
        "force",
        "recursive",
        "copySourceDirectory",
        "files",
        "srcFile",
        "destFile",
        "srcFileStat",
        "symlinkFull",
        "__webpack_module_cache__",
        "cachedModule",
        "threw",
        "__webpack_exports__",
        "exec",
        "path"
    ],
    "comments": [
        "webpackBootstrap",
        "",
        "",
        "Path to tool to execute should be first arg",
        "Using string decoder covers the case where a mult-byte character is split",
        "flush any remaining characters",
        "# sourceMappingURL=exec.js.map",
        "",
        "",
        "",
        "eslint-disable @typescript-eslint/unbound-method",
        "omit prefix when piped to a second tool",
        "Windows + cmd file",
        "Windows + verbatim",
        "Windows (regular)",
        "OSX/Linux - this can likely be improved with some form of quoting.",
        "creating processes on Unix is fundamentally different than Windows.",
        "on Unix, execvp() takes an arg array.",
        "the rest of the string ...",
        "streaming lines to console is best effort.  Don't fail a build.",
        "for .exe, apply the normal quoting rules that libuv applies",
        "otherwise apply quoting rules specific to the cmd.exe command line parser.",
        "the libuv rules are generic and are not designed specifically for cmd.exe",
        "command line parser.",
        "",
        "for a detailed description of the cmd.exe command line parser, refer to",
        "http://stackoverflow.com/questions/4094699/how-does-the-windows-command-interpreter-cmd-exe-parse-scripts/7970912#7970912",
        "need quotes for empty arg",
        "determine whether the arg needs to be quoted",
        "short-circuit if quotes not needed",
        "the following quoting rules are very similar to the rules that by libuv applies.",
        "",
        "1) wrap the string in quotes",
        "",
        "2) double-up quotes - i.e. \" => \"\"",
        "",
        "this is different from the libuv quoting rules. libuv replaces \" with \\\", which unfortunately",
        "doesn't work well with a cmd.exe command line.",
        "",
        "note, replacing \" with \"\" also works well if the arg is passed to a downstream .NET console app.",
        "for example, the command line:",
        "foo.exe \"myarg:\"\"my val\"\"\"",
        "is parsed by a .NET console app into an arg array:",
        "[ \"myarg:\\\"my val\\\"\" ]",
        "which is the same end result when applying libuv quoting rules. although the actual",
        "command line from libuv quoting rules would look like:",
        "foo.exe \"myarg:\\\"my val\\\"\"",
        "",
        "3) double-up slashes that precede a quote,",
        "e.g.  hello \\world    => \"hello \\world\"",
        "hello\\\"world    => \"hello\\\\\"\"world\"",
        "hello\\\\\"world   => \"hello\\\\\\\\\"\"world\"",
        "hello world\\    => \"hello world\\\\\"",
        "",
        "technically this is not required for a cmd.exe command line, or the batch argument parser.",
        "the reasons for including this as a .cmd quoting rule are:",
        "",
        "a) this is optimized for the scenario where the argument is passed from the .cmd file to an",
        "external program. many programs (e.g. .NET console apps) rely on the slash-doubling rule.",
        "",
        "b) it's what we've been doing previously (by deferring to node default behavior) and we",
        "haven't heard any complaints about that aspect.",
        "",
        "note, a weakness of the quoting rules chosen here, is that % is not escaped. in fact, % cannot be",
        "escaped when used on the command line directly - even though within a .cmd file % can be escaped",
        "by using %%.",
        "",
        "the saving grace is, on the command line, %var% is left as-is if var is not defined. this contrasts",
        "the line parsing rules within a .cmd file, where if var is not defined it is replaced with nothing.",
        "",
        "one option that was explored was replacing % with ^% - i.e. %var% => ^%var^%. this hack would",
        "often work, since it is unlikely that var^ would exist, and the ^ character is removed when the",
        "variable is used. the problem, however, is that ^ is not removed when %* is used to pass the args",
        "to an external program.",
        "",
        "an unexplored potential solution for the % escaping problem, is to create a wrapper .cmd file.",
        "% can be escaped within a .cmd file.",
        "walk the string in reverse",
        "double the slash",
        "double the quote",
        "Tool runner wraps child_process.spawn() and needs to apply the same quoting as",
        "Node in certain cases where the undocumented spawn option windowsVerbatimArguments",
        "is used.",
        "",
        "Since this function is a port of quote_cmd_arg from Node 4.x (technically, lib UV,",
        "see https://github.com/nodejs/node/blob/v4.x/deps/uv/src/win/process.c for details),",
        "pasting copyright notice from Node within this function:",
        "",
        "Copyright Joyent, Inc. and other Node contributors. All rights reserved.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to",
        "deal in the Software without restriction, including without limitation the",
        "rights to use, copy, modify, merge, publish, distribute, sublicense, and/or",
        "sell copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included in",
        "all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",
        "FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS",
        "IN THE SOFTWARE.",
        "Need double quotation for empty argument",
        "No quotation needed",
        "No embedded double quotes or backslashes, so I can just wrap",
        "quote marks around the whole thing.",
        "Expected input/output:",
        "input : hello\"world",
        "output: \"hello\\\"world\"",
        "input : hello\"\"world",
        "output: \"hello\\\"\\\"world\"",
        "input : hello\\world",
        "output: hello\\world",
        "input : hello\\\\world",
        "output: hello\\\\world",
        "input : hello\\\"world",
        "output: \"hello\\\\\\\"world\"",
        "input : hello\\\\\"world",
        "output: \"hello\\\\\\\\\\\"world\"",
        "input : hello world\\",
        "output: \"hello world\\\\\" - note the comment in libuv actually reads \"hello world\\\"",
        "but it appears the comment is wrong, it should be \"hello world\\\\\"",
        "walk the string in reverse",
        "root the tool path if it is unrooted and contains relative pathing",
        "prefer options.cwd if it is specified, however options.cwd may also need to be rooted",
        "if the tool is only a file name, then resolve it from the PATH",
        "otherwise verify it exists (add extension on Windows if necessary)",
        "we only escape double quotes.",
        "tracks whether the process has exited and stdio is closed",
        "tracks whether the process has exited",
        "tracks whether stderr was written to",
        "10 seconds",
        "determine whether there is an error",
        "clear the timeout",
        "# sourceMappingURL=toolrunner.js.map",
        "",
        "",
        "",
        "export const {open} = 'fs'",
        "export const {open} = 'fs'",
        "See https://github.com/nodejs/node/blob/d0153aee367422d0858105abec186da4dff0a0c5/deps/uv/include/uv/win.h#L691",
        "e.g. \\ or \\hello or \\\\hello",
        "e.g. C: or C:\\hello",
        "test file exists",
        "eslint-disable-next-line no-console",
        "on Windows, test for valid extension",
        "try each extension",
        "eslint-disable-next-line no-console",
        "preserve the case of the actual file (since an extension was appended)",
        "eslint-disable-next-line no-console",
        "convert slashes on Windows",
        "remove redundant slashes",
        "remove redundant slashes",
        "on Mac/Linux, test the execute bit",
        "R   W  X  R  W X R W X",
        "256 128 64 32 16 8 4 2 1",
        "Get the path of cmd.exe in windows",
        "# sourceMappingURL=io-util.js.map",
        "",
        "",
        "",
        "Dest is an existing file, but not forcing",
        "If dest is an existing directory, should copy inside.",
        "a file cannot be copied to itself",
        "If dest is directory copy src into dest",
        "Check for invalid characters",
        "https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file",
        "note if path does not exist, error is silent",
        "recursive when check=true",
        "build the list of extensions to try",
        "if it's rooted, return it if exists. otherwise return empty.",
        "if any path separators, return empty",
        "build the list of directories",
        "",
        "Note, technically \"where\" checks the current directory on Windows. From a toolkit perspective,",
        "it feels like we should not do this. Checking the current directory seems like more of a use",
        "case of a shell, and the which() function exposed by the toolkit should strive for consistency",
        "across platforms.",
        "find all matches",
        "Ensure there is not a run away recursive copy",
        "Recurse",
        "Change the mode for the newly created directory",
        "Buffered file copy",
        "unlink/re-link it",
        "Try to override file permission",
        "other errors = it doesn't exist, no work to do",
        "Copy over symlink",
        "# sourceMappingURL=io.js.map",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "The module cache",
        "The require function",
        "Check if module is in cache",
        "Create a new module (and put it into the cache)",
        "no module.id needed",
        "no module.loaded needed",
        "Execute the module function",
        "Return the exports of the module",
        "webpack/runtime/compat",
        "This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk."
    ],
    "docstrings": [
        "***",
        "***",
        "* Exec a command.\n * Output will be streamed to the live console.\n * Returns promise with return code\n *\n * @param     commandLine        command to execute (can include additional args). Must be correctly escaped.\n * @param     args               optional arguments for tool. Escaping is handled by the lib.\n * @param     options            optional exec options.  See ExecOptions\n * @returns   Promise<number>    exit code",
        "* Exec a command and get the output.\n * Output will be streamed to the live console.\n * Returns promise with the exit code and collected stdout and stderr\n *\n * @param     commandLine           command to execute (can include additional args). Must be correctly escaped.\n * @param     args                  optional arguments for tool. Escaping is handled by the lib.\n * @param     options               optional exec options.  See ExecOptions\n * @returns   Promise<ExecOutput>   exit code, stdout, and stderr",
        "* Class for running command line tools. Handles quoting and arg parsing in a platform agnostic way.",
        "* Exec a tool.\n     * Output will be streamed to the live console.\n     * Returns promise with return code\n     *\n     * @param     tool     path to tool to exec\n     * @param     options  optional exec options.  See ExecOptions\n     * @returns   number",
        "* Convert an arg string to an array of args. Handles escaping\n *\n * @param    argString   string of arguments\n * @returns  string[]    array of arguments",
        "* On OSX/Linux, true if path starts with '/'. On Windows, true for paths like:\n * \\, \\hello, \\\\hello\\share, C:, and C:\\hello (and corresponding alternate separator cases).",
        "* Best effort attempt to determine whether a file exists and is executable.\n * @param filePath    file path to check\n * @param extensions  additional file extensions to try\n * @return if file exists and is executable, returns the file path. otherwise empty string.",
        "* Copies a file or folder.\n * Based off of shelljs - https://github.com/shelljs/shelljs/blob/9237f66c52e5daa40458f94f9565e18e8132f5a6/src/cp.js\n *\n * @param     source    source path\n * @param     dest      destination path\n * @param     options   optional. See CopyOptions.",
        "* Moves a path.\n *\n * @param     source    source path\n * @param     dest      destination path\n * @param     options   optional. See MoveOptions.",
        "* Remove a path recursively with force\n *\n * @param inputPath path to remove",
        "* Make a directory.  Creates the full path with folders in between\n * Will throw if it fails\n *\n * @param   fsPath        path to create\n * @returns Promise<void>",
        "* Returns path of a tool had the tool actually been invoked.  Resolves via paths.\n * If you check and the tool does not exist, it will throw.\n *\n * @param     tool              name of the tool\n * @param     check             whether to check if tool exists\n * @returns   Promise<string>   path to tool",
        "* Returns a list of all occurrences of the given tool on the system path.\n *\n * @returns   Promise<string[]>  the paths of the tool",
        "***",
        "*********************************************************************",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "*********************************************************************",
        "***",
        "***",
        "***",
        "***",
        "*********************************************************************",
        "***"
    ],
    "functions": [
        "adopt",
        "fulfilled",
        "rejected",
        "step",
        "exec",
        "getExecOutput",
        "adopt",
        "fulfilled",
        "rejected",
        "step",
        "_debug",
        "_getCommandString",
        "_processLineBuffer",
        "_getSpawnFileName",
        "_getSpawnArgs",
        "_endsWith",
        "_isCmdFile",
        "_windowsQuoteCmdArg",
        "_uvQuoteCmdArg",
        "_cloneExecOptions",
        "_getSpawnOptions",
        "exec",
        "argStringToArray",
        "append",
        "CheckComplete",
        "_debug",
        "_setResult",
        "HandleTimeout",
        "adopt",
        "fulfilled",
        "rejected",
        "step",
        "exists",
        "isDirectory",
        "isRooted",
        "tryGetExecutablePath",
        "normalizeSeparators",
        "isUnixExecutable",
        "getCmdPath",
        "adopt",
        "fulfilled",
        "rejected",
        "step",
        "cp",
        "mv",
        "rmRF",
        "mkdirP",
        "which",
        "findInPath",
        "readCopyOptions",
        "cpDirRecursive",
        "copyFile",
        "__nccwpck_require__",
        "run"
    ],
    "classes": [
        "ToolRunner",
        "ExecState"
    ]
}