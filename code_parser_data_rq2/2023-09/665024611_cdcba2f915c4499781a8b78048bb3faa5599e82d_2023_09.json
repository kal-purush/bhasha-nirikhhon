{
    "identifiers": [
        "logging",
        "os",
        "typing",
        "click",
        "jwt",
        "google",
        "api_core",
        "exceptions",
        "NotFound",
        "google",
        "auth",
        "google",
        "auth",
        "transport",
        "requests",
        "Request",
        "google",
        "cloud",
        "secretmanager",
        "google",
        "oauth2",
        "id_token",
        "flytekit",
        "clients",
        "auth",
        "auth_client",
        "AuthorizationClient",
        "flytekit",
        "clients",
        "auth",
        "authenticator",
        "Authenticator",
        "flytekit",
        "clients",
        "auth",
        "exceptions",
        "AccessTokenNotFoundError",
        "flytekit",
        "clients",
        "auth",
        "keyring",
        "Credentials",
        "KeyringStore",
        "Authenticator",
        "audience",
        "client_id",
        "client_secret",
        "verify",
        "typing",
        "Optional",
        "typing",
        "Union",
        "audience",
        "KeyringStore",
        "retrieve",
        "audience",
        "verify",
        "verify",
        "audience",
        "client_id",
        "client_secret",
        "_auth_client",
        "AuthorizationClient",
        "endpoint",
        "audience",
        "auth_endpoint",
        "token_endpoint",
        "scopes",
        "client_id",
        "client_id",
        "redirect_uri",
        "redirect_uri",
        "verify",
        "_verify",
        "request_auth_code_params",
        "request_access_token_params",
        "client_id",
        "client_secret",
        "audience",
        "redirect_uri",
        "refresh_access_token_params",
        "client_secret",
        "audience",
        "_initialize_auth_client",
        "_creds",
        "_auth_client",
        "refresh_access_token",
        "_creds",
        "_creds",
        "KeyringStore",
        "store",
        "_creds",
        "AccessTokenNotFoundError",
        "logging",
        "warning",
        "KeyringStore",
        "_endpoint",
        "_auth_client",
        "get_creds_from_remote",
        "KeyringStore",
        "store",
        "_creds",
        "project_id",
        "secret_id",
        "version",
        "typing",
        "Optional",
        "secretmanager",
        "SecretManagerServiceClient",
        "project_id",
        "secret_id",
        "version",
        "client",
        "access_secret_version",
        "name",
        "name",
        "NotFound",
        "e",
        "click",
        "BadParameter",
        "e",
        "message",
        "response",
        "payload",
        "data",
        "decode",
        "payload",
        "click",
        "group",
        "cli",
        "command",
        "click",
        "option",
        "required",
        "help",
        "click",
        "option",
        "required",
        "help",
        "click",
        "option",
        "required",
        "help",
        "WEBAPP_CLIENT_ID_HELP",
        "click",
        "option",
        "required",
        "help",
        "desktop_client_id",
        "desktop_client_secret_gcp_secret_name",
        "webapp_client_id",
        "project",
        "get_gcp_secret_manager_secret",
        "project",
        "desktop_client_secret_gcp_secret_name",
        "GCPIdentityAwareProxyAuthenticator",
        "audience",
        "webapp_client_id",
        "client_id",
        "desktop_client_id",
        "client_secret",
        "desktop_client_secret",
        "iap_authenticator",
        "refresh_credentials",
        "e",
        "click",
        "ClickException",
        "e",
        "click",
        "echo",
        "iap_authenticator",
        "get_credentials",
        "id_token",
        "audience",
        "service_account_email",
        "audience",
        "service_account_email",
        "KeyringStore",
        "retrieve",
        "audience_and_account_key",
        "creds",
        "jwt",
        "decode",
        "creds",
        "id_token",
        "encode",
        "options",
        "leeway",
        "exp_margin",
        "jwt",
        "ExpiredSignatureError",
        "is_expired",
        "creds",
        "id_token",
        "id_token",
        "fetch_id_token",
        "Request",
        "audience",
        "KeyringStore",
        "store",
        "Credentials",
        "for_endpoint",
        "audience_and_account_key",
        "access_token",
        "id_token",
        "token",
        "token",
        "cli",
        "command",
        "click",
        "option",
        "required",
        "help",
        "WEBAPP_CLIENT_ID_HELP",
        "click",
        "option",
        "click",
        "Path",
        "exists",
        "dir_okay",
        "required",
        "help",
        "webapp_client_id",
        "service_account_key",
        "service_account_key",
        "os",
        "environ",
        "service_account_key",
        "get_service_account_id_token",
        "webapp_client_id",
        "application_default_credentials",
        "service_account_email",
        "click",
        "echo",
        "token",
        "cli"
    ],
    "literals": [
        "\"Webapp type OAuth 2.0 client ID used by the IAP. \"",
        "\"Typically in the form of `<xyz>.apps.googleusercontent.com`. \"",
        "\"Created when activating IAP for the Flyte deployment. \"",
        "\"https://cloud.google.com/iap/docs/enabling-kubernetes-howto#oauth-credentials\"",
        "\"proxy-authorization\"",
        "\"http://localhost:4444\"",
        "\"https://accounts.google.com/o/oauth2/v2/auth\"",
        "\"https://oauth2.googleapis.com/token\"",
        "\"openid\"",
        "\"email\"",
        "\"cred_ref\"",
        "\"true\"",
        "\"access_type\"",
        "\"offline\"",
        "\"client_id\"",
        "\"client_secret\"",
        "\"audience\"",
        "\"redirect_uri\"",
        "\"client_secret\"",
        "\"audience\"",
        "\"Failed to refresh token. Kicking off a full authorization flow.\"",
        "\"latest\"",
        "f\"projects/{project_id}/secrets/{secret_id}/versions/{version}\"",
        "\"UTF-8\"",
        "\"--desktop_client_id\"",
        "\"Desktop type OAuth 2.0 client ID. Typically in the form of `<xyz>.apps.googleusercontent.com`. \"",
        "\"Create by following https://cloud.google.com/iap/docs/authentication-howto#setting_up_the_client_id\"",
        "\"--desktop_client_secret_gcp_secret_name\"",
        "\"Name of a GCP secret manager secret containing the desktop type OAuth 2.0 client secret \"",
        "\"obtained together with desktop type OAuth 2.0 client ID.\"",
        "\"--webapp_client_id\"",
        "\"--project\"",
        "\"GCP project ID (in which `desktop_client_secret_gcp_secret_name` is saved).\"",
        "f\"Failed to obtain credentials for GCP Identity Aware Proxy (IAP): {e}\"",
        "\"-\"",
        "\"utf-8\"",
        "\"verify_signature\"",
        "\"verify_exp\"",
        "\"\"",
        "\"--webapp_client_id\"",
        "\"--service_account_key\"",
        "\"Path to a service account key file. Alternatively set the environment variable \"",
        "\"`GOOGLE_APPLICATION_CREDENTIALS` to the path of the service account key file. \"",
        "\"If not provided and in Compute Engine, App Engine, or Cloud Run, will retrieve \"",
        "\"the ID token from the metadata server.\"",
        "\"GOOGLE_APPLICATION_CREDENTIALS\"",
        "\"__main__\""
    ],
    "variables": [
        "WEBAPP_CLIENT_ID_HELP",
        "_auth_client",
        "audience",
        "client_id",
        "client_secret",
        "redirect_uri",
        "_auth_client",
        "_creds",
        "_creds",
        "client",
        "name",
        "response",
        "payload",
        "desktop_client_secret",
        "iap_authenticator",
        "audience_and_account_key",
        "creds",
        "is_expired",
        "exp_margin",
        "is_expired",
        "token",
        "application_default_credentials",
        "_",
        "token"
    ],
    "comments": [
        "See step 3 in https://cloud.google.com/iap/docs/authentication-howto#signing_in_to_the_application",
        "See step 3 in https://cloud.google.com/iap/docs/authentication-howto#signing_in_to_the_application",
        "See step 3 in https://cloud.google.com/iap/docs/authentication-howto#signing_in_to_the_application",
        "See step 4 in https://cloud.google.com/iap/docs/authentication-howto#signing_in_to_the_application",
        "See https://cloud.google.com/iap/docs/authentication-howto#refresh_token",
        "Flytekit's KeyringStore, by default, uses the endpoint as the key to store the credentials",
        "We use the audience and the service account email as the key",
        "Generate a new token if it expires in less than 5 minutes"
    ],
    "docstrings": [
        "\"\"\"\n    This Authenticator encapsulates the entire OAauth 2.0 flow with GCP Identity Aware Proxy.\n\n    The auth flow is described in https://cloud.google.com/iap/docs/authentication-howto#signing_in_to_the_application\n\n    Automatically opens a browser window for login.\n    \"\"\"",
        "\"\"\"\n        Initialize with default creds from KeyStore using the audience name.\n        \"\"\"",
        "\"\"\"Refresh the IAP credentials. If no credentials are found, it will kick off a full OAuth 2.0 authorization flow.\"\"\"",
        "\"\"\"We have an id token so lets try to refresh it\"\"\"",
        "\"\"\"Retrieve secret from GCP secret manager.\"\"\"",
        "\"\"\"Generate ID tokens for GCP Identity Aware Proxy (IAP).\"\"\"",
        "\"\"\"Generate a user account ID token for proxy-authorization with GCP Identity Aware Proxy.\"\"\"",
        "\"\"\"Fetch an ID Token for the service account used by the current environment.\n\n    Uses flytekit's KeyringStore to cache the ID token.\n\n    This function acquires ID token from the environment in the following order.\n    See https://google.aip.dev/auth/4110.\n\n    1. If the environment variable ``GOOGLE_APPLICATION_CREDENTIALS`` is set\n       to the path of a valid service account JSON file, then ID token is\n       acquired using this service account credentials.\n    2. If the application is running in Compute Engine, App Engine or Cloud Run,\n       then the ID token are obtained from the metadata server.\n\n    Args:\n        audience (str): The audience that this ID token is intended for.\n        service_account_email (str): The email address of the service account.\n    \"\"\"",
        "\"\"\"Generate a service account ID token for proxy-authorization with GCP Identity Aware Proxy.\"\"\""
    ],
    "functions": [
        "_initialize_auth_client",
        "refresh_credentials",
        "get_gcp_secret_manager_secret",
        "cli",
        "generate_user_id_token",
        "get_service_account_id_token",
        "generate_service_account_id_token"
    ],
    "classes": [
        "GCPIdentityAwareProxyAuthenticator"
    ]
}