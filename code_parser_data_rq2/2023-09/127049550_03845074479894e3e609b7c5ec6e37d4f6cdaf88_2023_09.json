{
    "identifiers": [
        "activateFirstItem",
        "activateLastItem",
        "activateNextItem",
        "activatePreviousItem",
        "getActiveItem",
        "getFirstActivatableItem",
        "ListItem",
        "NavigableKeys",
        "NavigableKeys",
        "item",
        "item",
        "item",
        "item",
        "key",
        "item",
        "item",
        "item",
        "item",
        "key",
        "config",
        "isItem",
        "getPossibleItems",
        "isRtl",
        "deactivateItem",
        "activateItem",
        "isNavigableKey",
        "itemOrParent",
        "maybeItems",
        "itemOrParent",
        "isItem",
        "items",
        "itemOrParent",
        "itemOrParent",
        "subItem",
        "subItem",
        "items",
        "subItem",
        "items",
        "key",
        "items",
        "getActiveItem",
        "items",
        "activeItemRecord",
        "activeItemRecord",
        "isRtl",
        "NavigableKeys",
        "NavigableKeys",
        "isRtl",
        "NavigableKeys",
        "NavigableKeys",
        "key",
        "NavigableKeys",
        "inlineNext",
        "activateNextItem",
        "items",
        "activeItemRecord",
        "NavigableKeys",
        "inlinePrevious",
        "activatePreviousItem",
        "items",
        "activeItemRecord",
        "NavigableKeys",
        "activateFirstItem",
        "items",
        "NavigableKeys",
        "activateLastItem",
        "items",
        "getActiveItem",
        "items",
        "activeItemRecord",
        "activeItemRecord",
        "activateNextItem",
        "items",
        "activeItemRecord",
        "getActiveItem",
        "items",
        "activeItemRecord",
        "activeItemRecord",
        "activatePreviousItem",
        "items",
        "activeItemRecord",
        "item",
        "items",
        "item",
        "target",
        "target",
        "item",
        "items",
        "item",
        "item",
        "isActivated",
        "encounteredActivated",
        "encounteredActivated",
        "item",
        "item",
        "encounteredActivated",
        "getFirstActivatableItem",
        "items",
        "firstActivatableItem",
        "firstActivatableItem"
    ],
    "literals": [
        "'./list-navigation-helpers.js'",
        "'ArrowDown'",
        "'ArrowLeft'",
        "'ArrowUp'",
        "'ArrowRight'",
        "'Home'",
        "'End'",
        "string",
        "string"
    ],
    "variables": [
        "NavigableKeys",
        "config",
        "maybeItems",
        "items",
        "isItem",
        "subItem",
        "key",
        "items",
        "activeItemRecord",
        "isRtl",
        "inlinePrevious",
        "inlineNext",
        "items",
        "activeItemRecord",
        "items",
        "activeItemRecord",
        "items",
        "target",
        "items",
        "encounteredActivated",
        "isActivated",
        "firstActivatableItem"
    ],
    "comments": [
        "TODO: move this file to List and make List use this",
        "tslint:disable:enforce-name-casing Following Enum style",
        "tslint:enable:enforce-name-casing",
        "if the item is a list item, add it to the list of items",
        "If the item exposes an `item` property check if it is a list item.",
        "do not use this.items directly in upcoming calculations so we don't",
        "re-query the DOM unnecessarily",
        "Activate the next item",
        "Activate the previous item",
        "Activate the first item",
        "Activate the last item",
        "Whether we have encountered an item that has been activated",
        "Deactivate the rest including disabled"
    ],
    "docstrings": [
        "* @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0",
        "* Default keys that trigger navigation.",
        "* Default set of navigable keys.",
        "* The configuration object to customize the behavior of the List Controller",
        "* A function that determines whether or not the given element is an Item",
        "* A function that returns an array of elements to consider as items. For\n   * example, all the slotted elements.",
        "* A function that returns whether or not the list is in an RTL context.",
        "* Deactivates an item such as setting the tabindex to -1 and or sets selected\n   * to false.",
        "* Activates an item such as setting the tabindex to 1 and or sets selected to\n   * true (but does not focus).",
        "* Whether or not the key should be handled by the list for navigation.",
        "* A controller that handles list keyboard navigation and item management.",
        "* The items being managed by the list. Additionally, attempts to see if the\n   * object has a sub-item in the `.item` property.",
        "* Handles keyboard navigation. Should be bound to the node that will act as\n   * the List.",
        "* Activates the next item in the list. If at the end of the list, the first\n   * item will be activated.\n   *\n   * @return The activated list item or `null` if there are no items.",
        "* Activates the previous item in the list. If at the start of the list, the\n   * last item will be activated.\n   *\n   * @return The activated list item or `null` if there are no items.",
        "* Listener to be bound to the `deactivate-items` item event.",
        "* Listener to be bound to the `request-activation` item event..",
        "* Listener to be bound to the `slotchange` event for the slot that renders\n   * the items."
    ],
    "functions": [
        "items",
        "activateNextItem",
        "activatePreviousItem",
        "onDeactivateItems",
        "onRequestActivation"
    ],
    "classes": [
        "ListController"
    ]
}