{
    "identifiers": [
        "Router",
        "PrismaClient",
        "Router",
        "PrismaClient",
        "router",
        "req",
        "res",
        "parseInt",
        "req",
        "parseInt",
        "req",
        "page",
        "res",
        "limit",
        "limit",
        "res",
        "prisma",
        "page",
        "limit",
        "limit",
        "res",
        "page",
        "limit",
        "products",
        "error",
        "res",
        "error",
        "router",
        "req",
        "res",
        "req",
        "res",
        "prisma",
        "req",
        "existsProduct",
        "res",
        "res",
        "existsProduct",
        "error",
        "res",
        "error",
        "router",
        "req",
        "res",
        "prisma",
        "res",
        "total",
        "error",
        "res",
        "error",
        "router",
        "req",
        "res",
        "req",
        "res",
        "error",
        "res",
        "error",
        "router"
    ],
    "literals": [
        "\"express\"",
        "\"@prisma/client\"",
        "'/product'",
        "'You cannot enter a page number less than 1'",
        "'In the limit of minimum 1 and maximum 100'",
        "'Something went wrong'",
        "'/product/:id'",
        "'A parameter was expected'",
        "'Product does not exists'",
        "'Something went wrong'",
        "'/products/count'",
        "'Something went wrong'",
        "'/product'",
        "'A body was expected'",
        "'Something went wrong'"
    ],
    "variables": [
        "router",
        "prisma",
        "page",
        "limit",
        "products",
        "existsProduct",
        "total"
    ],
    "comments": [
        "const {",
        "title,",
        "description,",
        "status,",
        "reference,",
        "idSubCategory,",
        "idCategory,",
        "idBrand",
        "} = req.body;",
        "const body = Object.keys(req.body);",
        "const isEmpty = body.filter(field => {",
        "const value = req.body[field];",
        "return value === undefined || value === null || value === ''",
        "});",
        "const {",
        "variant_title,",
        "sku,",
        "barcode,",
        "variant_status,",
        "inventoryTracking,",
        "InheritProductPrice,",
        "idOption",
        "} = req.body?.variants;",
        "if(!title || !description || !status || !reference || !idSubCategory || !idCategory || !idBrand) {",
        "}"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}