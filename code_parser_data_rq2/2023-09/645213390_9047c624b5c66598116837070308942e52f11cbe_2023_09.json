{
    "identifiers": [
        "alluxio",
        "cli",
        "alluxio",
        "AlluxioURI",
        "alluxio",
        "client",
        "WriteType",
        "alluxio",
        "client",
        "block",
        "BlockWorkerInfo",
        "alluxio",
        "client",
        "file",
        "DoraCacheFileSystem",
        "alluxio",
        "client",
        "file",
        "FileInStream",
        "alluxio",
        "client",
        "file",
        "FileOutStream",
        "alluxio",
        "client",
        "file",
        "FileSystem",
        "alluxio",
        "client",
        "file",
        "FileSystemContext",
        "alluxio",
        "client",
        "file",
        "URIStatus",
        "alluxio",
        "client",
        "file",
        "dora",
        "WorkerLocationPolicy",
        "alluxio",
        "conf",
        "Configuration",
        "alluxio",
        "conf",
        "PropertyKey",
        "alluxio",
        "exception",
        "status",
        "ResourceExhaustedException",
        "alluxio",
        "grpc",
        "CreateFilePOptions",
        "alluxio",
        "grpc",
        "DeletePOptions",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Random",
        "DIRECTORY",
        "AlluxioURI",
        "SEPARATOR",
        "TEST_CONTENT",
        "sNumFiles",
        "ANSI_RESET",
        "ANSI_RED",
        "ANSI_GREEN",
        "FAILED_WORKER",
        "sWorkerInfoList",
        "sPolicy",
        "args",
        "setupConfiguration",
        "fsContext",
        "FileSystemContext",
        "create",
        "Configuration",
        "fs",
        "FileSystem",
        "Factory",
        "create",
        "fsContext",
        "sWorkerInfoList",
        "fsContext",
        "getCachedWorkers",
        "numWorkers",
        "sWorkerInfoList",
        "size",
        "numWorkers",
        "numWorkers",
        "sNumFiles",
        "sNumFiles",
        "numWorkers",
        "runTestWithCaching",
        "fs",
        "e",
        "handleException",
        "e",
        "runTestWithoutCaching",
        "fs",
        "fsContext",
        "e",
        "handleException",
        "e",
        "e",
        "handleException",
        "e",
        "e",
        "e",
        "getMessage",
        "Configuration",
        "PropertyKey",
        "USER_WORKER_SELECTION_POLICY",
        "Configuration",
        "PropertyKey",
        "DORA_CLIENT_UFS_FALLBACK_ENABLED",
        "fs",
        "underlyingFileSystem",
        "fs",
        "getUnderlyingFileSystem",
        "testDirName",
        "getSimpleName",
        "currentTimeMillis",
        "testDir",
        "DIRECTORY",
        "testDirName",
        "doraFs",
        "fs",
        "testDir",
        "doraFs",
        "convertToUfsPath",
        "testDir",
        "underlyingFileSystem",
        "exists",
        "testDir",
        "underlyingFileSystem",
        "createDirectory",
        "testDir",
        "testDir",
        "fs",
        "testDir",
        "throughOnly",
        "workerMap",
        "sPolicy",
        "WorkerLocationPolicy",
        "Factory",
        "create",
        "Configuration",
        "i",
        "i",
        "sNumFiles",
        "workerMap",
        "size",
        "sWorkerInfoList",
        "size",
        "i",
        "testFile",
        "testDir",
        "getPath",
        "i",
        "writeFile",
        "fs",
        "testFile",
        "throughOnly",
        "assignedWorkers",
        "sPolicy",
        "getPreferredWorkers",
        "sWorkerInfoList",
        "testFile",
        "getPath",
        "workerMap",
        "containsKey",
        "assignedWorkers",
        "get",
        "fs",
        "testFile",
        "DeletePOptions",
        "newBuilder",
        "setRecursive",
        "build",
        "FAILED_WORKER",
        "contains",
        "assignedWorkers",
        "get",
        "workerMap",
        "put",
        "assignedWorkers",
        "get",
        "testFile",
        "iterator",
        "sWorkerInfoList",
        "iterator",
        "iterator",
        "hasNext",
        "worker",
        "iterator",
        "next",
        "failedWorker",
        "FAILED_WORKER",
        "failedWorker",
        "getNetAddress",
        "getRpcPort",
        "worker",
        "getNetAddress",
        "getRpcPort",
        "iterator",
        "remove",
        "workerMap",
        "fs",
        "testFile",
        "throughOnly",
        "writeType",
        "throughOnly",
        "WriteType",
        "THROUGH",
        "WriteType",
        "CACHE_THROUGH",
        "outStream",
        "fs",
        "createFile",
        "testFile",
        "CreateFilePOptions",
        "newBuilder",
        "setWriteType",
        "writeType",
        "toProto",
        "build",
        "outStream",
        "write",
        "TEST_CONTENT",
        "getBytes",
        "e",
        "workers",
        "sPolicy",
        "getPreferredWorkers",
        "sWorkerInfoList",
        "testFile",
        "getPath",
        "FAILED_WORKER",
        "contains",
        "workers",
        "get",
        "FAILED_WORKER",
        "add",
        "workers",
        "get",
        "fs",
        "workerMap",
        "throughOnly",
        "entry",
        "workerMap",
        "entrySet",
        "worker",
        "entry",
        "getKey",
        "testFile",
        "entry",
        "getValue",
        "fileInfo",
        "fs",
        "getStatus",
        "testFile",
        "isFailure",
        "throughOnly",
        "fileInfo",
        "getInAlluxioPercentage",
        "isFailure",
        "throughOnly",
        "fileInfo",
        "getInAlluxioPercentage",
        "isFailure",
        "isFailure",
        "FAILED_WORKER",
        "add",
        "worker",
        "fs",
        "testFile",
        "inStream",
        "fs",
        "openFile",
        "testFile",
        "buf",
        "TEST_CONTENT",
        "length",
        "bytesRead",
        "inStream",
        "read",
        "buf",
        "readContent",
        "buf",
        "bytesRead",
        "TEST_CONTENT",
        "equals",
        "readContent",
        "successfulWorkers",
        "sWorkerInfoList",
        "size",
        "failedWorkers",
        "FAILED_WORKER",
        "size",
        "totalWorkers",
        "successfulWorkers",
        "failedWorkers",
        "totalWorkers",
        "ANSI_GREEN",
        "successfulWorkers",
        "ANSI_RESET",
        "ANSI_RED",
        "failedWorkers",
        "ANSI_RESET",
        "failedWorkers",
        "failedWorker",
        "FAILED_WORKER",
        "hostname",
        "failedWorker",
        "getNetAddress",
        "getHost",
        "port",
        "failedWorker",
        "getNetAddress",
        "getRpcPort",
        "availableSpace",
        "failedWorker",
        "getCapacityBytes",
        "failedWorker",
        "getUsedBytes",
        "capacity",
        "failedWorker",
        "getCapacityBytes",
        "workerInfo",
        "format",
        "hostname",
        "port",
        "availableSpace",
        "capacity",
        "workerInfo",
        "fs",
        "testDir",
        "initializeTestDirectory",
        "fs",
        "workerMap",
        "assignToWorkers",
        "fs",
        "testDir",
        "verifyFileAssignments",
        "fs",
        "workerMap",
        "entry",
        "workerMap",
        "entrySet",
        "verifyFileContent",
        "fs",
        "entry",
        "getValue",
        "printInfo",
        "e",
        "handleException",
        "e",
        "fs",
        "testDir",
        "DeletePOptions",
        "newBuilder",
        "setRecursive",
        "build",
        "e",
        "handleException",
        "e",
        "fs",
        "fsContext",
        "FAILED_WORKER",
        "clear",
        "sWorkerInfoList",
        "fsContext",
        "getCachedWorkers",
        "testDir",
        "initializeTestDirectory",
        "fs",
        "workerMap",
        "assignToWorkers",
        "fs",
        "testDir",
        "verifyFileAssignments",
        "fs",
        "workerMap",
        "entry",
        "workerMap",
        "entrySet",
        "verifyFileContent",
        "fs",
        "entry",
        "getValue",
        "printInfo",
        "e",
        "handleException",
        "e",
        "fs",
        "testDir",
        "DeletePOptions",
        "newBuilder",
        "setRecursive",
        "build",
        "e",
        "handleException",
        "e"
    ],
    "literals": [
        "\"Hello Alluxio!\"",
        "\"\\u001B[0m\"",
        "\"\\u001B[31m\"",
        "\"\\u001B[32m\"",
        "\"No workers found.\"",
        "\"Exception occurred during cache through test.\"",
        "\"-----------------------\"",
        "\"Exception occurred during through test.\"",
        "\"Exception occurred during FileSystemContext creation or worker retrieval.\"",
        "\"Exception details: \"",
        "\"alluxio.client.file.dora.ConsistentHashPolicy\"",
        "\"/\"",
        "\"Read content does not match written content!\"",
        "\"\\nTotal workers: \"",
        "\"Successful workers: \"",
        "\"Failed workers: \"",
        "\"\\nList of failed workers:\"",
        "\"[%s:%d] Available space %d/%d\"",
        "\"Test with CACHE_THROUGH write type\"",
        "\"Exception occurred during cache through test.\"",
        "\"Failed to clean up the test directory.\"",
        "\"Test with THROUGH write type\"",
        "\"Exception occurred during through test.\"",
        "\"Failed to clean up the test directory.\""
    ],
    "variables": [
        "sNumFiles",
        "sWorkerInfoList",
        "sPolicy"
    ],
    "comments": [
        "Constants should be all uppercase with underscores",
        "Prevent instantiation",
        "Test with caching",
        "Test without caching (only UFS)",
        "Clean up the test directory and its contents",
        "Clean up the test directory and its contents"
    ],
    "docstrings": [
        "* The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n * (the \"License\"). You may not use this work except in compliance with the License, which is\n * available at www.apache.org/licenses/LICENSE-2.0\n *\n * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied, as more fully set forth in the License.\n *\n * See the NOTICE file distributed with this work for information regarding copyright ownership.",
        "* In this test, we cover all workers by performing the following steps:\n * 1. We initialize a test directory in Alluxio's distributed file system.\n * 2. We assign files to different block workers based on a policy (e.g., consistent hashing).\n * 3. We verify the assignments and content of the files.\n * 4. If a worker fails during the test, we add it to the list of FAILED_WORKER.\n * 5. At the end of the test, this method prints information about all the failed workers,\n *    including their hostname, port, available space, and capacity.\n * This allows us to analyze which workers encountered issues during the test and get insights\n * into their resource availability and capacity.",
        "* Main function to test the cluster setup.\n   *\n   * @param args command line arguments (none expected)"
    ],
    "functions": [
        "CheckCluster",
        "main",
        "handleException",
        "setupConfiguration",
        "AlluxioURI",
        "initializeTestDirectory",
        "assignToWorkers",
        "writeFile",
        "verifyFileAssignments",
        "verifyFileContent",
        "printInfo",
        "runTestWithCaching",
        "runTestWithoutCaching"
    ],
    "classes": [
        "CheckCluster"
    ]
}