{
    "identifiers": [
        "typing",
        "Optional",
        "Protocol",
        "TypeVar",
        "Generic",
        "Type",
        "Union",
        "Any",
        "pydantic",
        "BaseModel",
        "PydanticBaseModel",
        "ValidationError",
        "PydanticValidationError",
        "create_model",
        "ModuleNotFoundError",
        "dlt",
        "extract",
        "exceptions",
        "ValidationError",
        "dlt",
        "common",
        "typing",
        "TDataItems",
        "dlt",
        "common",
        "schema",
        "typing",
        "TAnySchemaColumns",
        "dlt",
        "extract",
        "typing",
        "TTableHintTemplate",
        "ValidateItem",
        "TypeVar",
        "bound",
        "PydanticBaseModel",
        "ValidateItem",
        "Generic",
        "_TPydanticModel",
        "Type",
        "_TPydanticModel",
        "model",
        "Type",
        "_TPydanticModel",
        "model",
        "create_model",
        "model",
        "items",
        "model",
        "item",
        "TDataItems",
        "meta",
        "Any",
        "Union",
        "_TPydanticModel",
        "_TPydanticModel",
        "item",
        "isinstance",
        "item",
        "list_model",
        "items",
        "item",
        "items",
        "model",
        "parse_obj",
        "item",
        "PydanticValidationError",
        "e",
        "ValidationError",
        "item",
        "e",
        "e",
        "args",
        "Any",
        "kwargs",
        "Any",
        "model",
        "__qualname__",
        "columns",
        "TTableHintTemplate",
        "TAnySchemaColumns",
        "Optional",
        "ValidateItem",
        "PydanticBaseModel",
        "isinstance",
        "columns",
        "issubclass",
        "columns",
        "PydanticBaseModel",
        "PydanticValidator",
        "columns"
    ],
    "literals": [
        "\"_TPydanticModel\"",
        "\"List\"",
        "f\"PydanticValidator(model={self.model.__qualname__})\""
    ],
    "variables": [
        "PydanticBaseModel",
        "_TPydanticModel",
        "model",
        "model",
        "list_model"
    ],
    "comments": [
        "type: ignore[misc]",
        "Create a model for validating list of items in batch",
        "type: ignore[valid-type]",
        "type: ignore[attr-defined, no-any-return]"
    ],
    "docstrings": [
        "\"\"\"Validate a data item against the pydantic model\"\"\""
    ],
    "functions": [
        "__call__",
        "__str__",
        "get_column_validator"
    ],
    "classes": [
        "PydanticValidator"
    ]
}