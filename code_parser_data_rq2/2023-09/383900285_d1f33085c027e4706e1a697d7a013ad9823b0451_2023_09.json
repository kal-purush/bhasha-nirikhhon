{
    "identifiers": [
        "typing",
        "IO",
        "rcmt",
        "rcmt",
        "action",
        "Action",
        "rcmt",
        "action",
        "semgrep",
        "Semgrep",
        "rcmt",
        "matcher",
        "RepoName",
        "rcmt",
        "util",
        "iglob",
        "Action",
        "repo_path",
        "tpl_data",
        "path",
        "iglob",
        "root",
        "repo_path",
        "selector",
        "open",
        "path",
        "f",
        "needs_import_sys",
        "f",
        "f",
        "seek",
        "f",
        "read",
        "open",
        "path",
        "mode",
        "f",
        "f",
        "write",
        "data",
        "staticmethod",
        "f",
        "IO",
        "line",
        "f",
        "readlines",
        "line",
        "line",
        "has_exit",
        "has_import",
        "task",
        "task",
        "add_matcher",
        "RepoName",
        "task",
        "add_action",
        "Semgrep",
        "rules",
        "task",
        "load_file",
        "selector",
        "task",
        "add_action",
        "SysModuleImport"
    ],
    "literals": [
        "\"**/*.py\"",
        "\"w\"",
        "\"import sys\\n\"",
        "\"import sys\"",
        "\"sys.exit(\"",
        "\"Semgrep Example\"",
        "\"^github.com/MyOrg/example$\"",
        "\"semgrep-rules.yaml\"",
        "\"**/*.py\""
    ],
    "variables": [
        "data",
        "has_import",
        "has_exit",
        "has_import",
        "has_exit"
    ],
    "comments": [
        "Match a specific repository.",
        "Use Semgrep to refactor Python files. The rules that define what to refactor are",
        "stored in the file semgrep-rules.yaml.",
        "Semgrep can refactor a line, but does not add the necessary import statement.",
        "This Action does that."
    ],
    "docstrings": [
        "\"\"\"\nThis file demonstrates how to refactor code with Semgrep.\n\nSupport for Semgrep is experimental to better understand how useful the integration is\nand how it works in production.\n\"\"\"",
        "\"\"\"\n    Add statement \"import sys\" if it is missing.\n    \"\"\""
    ],
    "functions": [
        "apply",
        "needs_import_sys"
    ],
    "classes": [
        "SysModuleImport"
    ]
}