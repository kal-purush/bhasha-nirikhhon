{
    "identifiers": [
        "secretString",
        "secretString",
        "secretString",
        "secretString",
        "guess",
        "guess",
        "length",
        "guess",
        "length",
        "secretString",
        "length",
        "occurrence",
        "i",
        "i",
        "secretString",
        "length",
        "guess",
        "length",
        "i",
        "substring",
        "secretString",
        "substring",
        "i",
        "i",
        "guess",
        "length",
        "guess",
        "equals",
        "substring",
        "occurrence",
        "occurrence",
        "guess",
        "length",
        "guess",
        "length",
        "guess1",
        "guess2",
        "scoreGuess",
        "guess1",
        "scoreGuess",
        "guess2",
        "guess1",
        "scoreGuess",
        "guess1",
        "scoreGuess",
        "guess2",
        "guess2",
        "i",
        "i",
        "min",
        "guess1",
        "length",
        "guess2",
        "length",
        "i",
        "guess1",
        "charAt",
        "i",
        "guess2",
        "charAt",
        "i",
        "guess1",
        "guess1",
        "charAt",
        "i",
        "guess2",
        "charAt",
        "i",
        "guess2",
        "guess1"
    ],
    "literals": [
        "\"Your guess cannot be an empty String!\"",
        "\"Your guess cannot exceed the number of characters in the Secret word\""
    ],
    "variables": [
        "secretString"
    ],
    "comments": [
        "properties",
        "constructors",
        "methods",
        "throws IllegalArgumentException empty String",
        "throws IllegalArgumentException exceed length of secret word",
        "occurrence counts how many times guess appears in secretString",
        "substring goes from i, i+1, i+2, ... i + guess.length - 1",
        "else if scoreGuess same, alphabetically greater guess is returned",
        "using Math.min(guess1.length(), guess2.length()) to prevent OutOfBounds Error",
        "if scoreGuess and alphabet order are EXACT SAME, return any one of them is fine"
    ],
    "docstrings": [
        "e.g. guess \"iss\" for \"mississippi\", guess length = 3, secretString length = 11\n         * \"ppi\" is the last substring to be checked, or else OutOfBounds\n         * so index must end at index 8\n         * index < 11 - 3 + 1, in this case index < 9",
        "if char at index i are equal, program continues checking next letter\n                 * if char at index i are not equal, then the one with greater ASCII value is returned\n                 * e.g. in cat and con, 1st char 'c' is the same\n                 * program moves to the next char, char 'o' >  char 'a'\n                 * Therefore con has larger alphabet value, con is returned"
    ],
    "functions": [
        "WordMatch",
        "scoreGuess",
        "findBetterGuess"
    ],
    "classes": [
        "WordMatch"
    ]
}