{
    "identifiers": [
        "com",
        "seproject",
        "admin",
        "post",
        "application",
        "com",
        "seproject",
        "account",
        "account",
        "domain",
        "Account",
        "com",
        "seproject",
        "account",
        "utils",
        "SecurityUtils",
        "com",
        "seproject",
        "admin",
        "post",
        "controller",
        "dto",
        "PostRequest",
        "AdminPostRetrieveCondition",
        "com",
        "seproject",
        "admin",
        "post",
        "controller",
        "dto",
        "PostResponse",
        "DeletedPostResponse",
        "com",
        "seproject",
        "admin",
        "post",
        "controller",
        "dto",
        "PostResponse",
        "PostRetrieveResponse",
        "com",
        "seproject",
        "admin",
        "post",
        "service",
        "AdminPostService",
        "com",
        "seproject",
        "board",
        "menu",
        "domain",
        "Menu",
        "com",
        "seproject",
        "board",
        "menu",
        "service",
        "MenuService",
        "com",
        "seproject",
        "board",
        "post",
        "domain",
        "repository",
        "AdminPostSearchRepository",
        "com",
        "seproject",
        "board",
        "post",
        "service",
        "PostService",
        "com",
        "seproject",
        "error",
        "errorCode",
        "ErrorCode",
        "com",
        "seproject",
        "error",
        "exception",
        "CustomAccessDeniedException",
        "com",
        "seproject",
        "error",
        "exception",
        "CustomAuthenticationException",
        "com",
        "seproject",
        "error",
        "exception",
        "InvalidAuthorizationException",
        "com",
        "seproject",
        "error",
        "exception",
        "NoSuchResourceException",
        "com",
        "seproject",
        "board",
        "menu",
        "domain",
        "Category",
        "com",
        "seproject",
        "member",
        "domain",
        "BoardUser",
        "com",
        "seproject",
        "board",
        "post",
        "domain",
        "model",
        "Post",
        "com",
        "seproject",
        "board",
        "menu",
        "domain",
        "repository",
        "CategoryRepository",
        "com",
        "seproject",
        "board",
        "common",
        "domain",
        "repository",
        "ReportRepository",
        "com",
        "seproject",
        "member",
        "domain",
        "repository",
        "BoardUserRepository",
        "com",
        "seproject",
        "board",
        "post",
        "domain",
        "repository",
        "PostRepository",
        "lombok",
        "RequiredArgsConstructor",
        "org",
        "springframework",
        "data",
        "domain",
        "Page",
        "org",
        "springframework",
        "data",
        "domain",
        "PageRequest",
        "org",
        "springframework",
        "data",
        "domain",
        "Pageable",
        "org",
        "springframework",
        "stereotype",
        "Service",
        "org",
        "springframework",
        "transaction",
        "annotation",
        "Transactional",
        "java",
        "nio",
        "file",
        "AccessDeniedException",
        "java",
        "util",
        "com",
        "seproject",
        "board",
        "common",
        "utils",
        "AppServiceHelper",
        "findByIdOrThrow",
        "Service",
        "RequiredArgsConstructor",
        "Transactional",
        "readOnly",
        "categoryRepository",
        "adminPostService",
        "postService",
        "adminPostSearchRepository",
        "condition",
        "page",
        "perPage",
        "adminPostSearchRepository",
        "findPostListByCondition",
        "condition",
        "PageRequest",
        "of",
        "page",
        "perPage",
        "pageable",
        "adminPostSearchRepository",
        "findDeletedPostList",
        "pageable",
        "Transactional",
        "postId",
        "changePostPinState",
        "postId",
        "Transactional",
        "postId",
        "changePostPinState",
        "postId",
        "postId",
        "state",
        "post",
        "postService",
        "findById",
        "postId",
        "category",
        "post",
        "getCategory",
        "account",
        "SecurityUtils",
        "getAccount",
        "orElseThrow",
        "ErrorCode",
        "NOT_LOGIN",
        "manageable",
        "category",
        "manageable",
        "account",
        "getRoles",
        "manageable",
        "post",
        "changePin",
        "state",
        "ErrorCode",
        "ACCESS_DENIED",
        "Transactional",
        "postId",
        "post",
        "postService",
        "findById",
        "postId",
        "adminPostService",
        "restore",
        "post",
        "Transactional",
        "postIds",
        "adminPostService",
        "restore",
        "postIds",
        "Transactional",
        "postIds",
        "isPermanent",
        "adminPostService",
        "deleteAllByIds",
        "postIds",
        "isPermanent",
        "Transactional",
        "fromCategoryId",
        "toCategoryId",
        "categoryRepository",
        "findById",
        "fromCategoryId",
        "orElseThrow",
        "ErrorCode",
        "NOT_EXIST_CATEGORY",
        "to",
        "categoryRepository",
        "findById",
        "toCategoryId",
        "orElseThrow",
        "ErrorCode",
        "NOT_EXIST_CATEGORY",
        "adminPostService",
        "changeCategory",
        "to"
    ],
    "literals": [],
    "variables": [
        "categoryRepository",
        "adminPostService",
        "postService",
        "adminPostSearchRepository"
    ],
    "comments": [
        "Account account = SecurityUtils.getAccount()",
        ".orElseThrow(() -> new InvalidAuthorizationException(ErrorCode.NOT_LOGIN));",
        "",
        "boolean isAdmin = account.getAuthorities().stream().anyMatch(authority -> authority.getAuthority().equals(\"ROLE_ADMIN\"));",
        "",
        "if(!isAdmin){",
        "throw new InvalidAuthorizationException(ErrorCode.ACCESS_DENIED);",
        "}",
        "Account account = SecurityUtils.getAccount()",
        ".orElseThrow(() -> new InvalidAuthorizationException(ErrorCode.NOT_LOGIN));",
        "",
        "boolean isAdmin = account.getAuthorities().stream().anyMatch(authority -> authority.getAuthority().equals(\"ROLE_ADMIN\"));",
        "",
        "if(!isAdmin){",
        "throw new InvalidAuthorizationException(ErrorCode.ACCESS_DENIED);",
        "}",
        "Account account = SecurityUtils.getAccount()",
        ".orElseThrow(() -> new InvalidAuthorizationException(ErrorCode.NOT_LOGIN));",
        "",
        "boolean isAdmin = account.getAuthorities().stream().anyMatch(authority -> authority.getAuthority().equals(\"ROLE_ADMIN\"));",
        "",
        "if(!isAdmin){",
        "throw new InvalidAuthorizationException(ErrorCode.ACCESS_DENIED);",
        "}",
        "Account account = SecurityUtils.getAccount()",
        ".orElseThrow(() -> new InvalidAuthorizationException(ErrorCode.NOT_LOGIN));",
        "",
        "boolean isAdmin = account.getAuthorities().stream().anyMatch(authority -> authority.getAuthority().equals(\"ROLE_ADMIN\"));",
        "",
        "if(!isAdmin){",
        "throw new InvalidAuthorizationException(ErrorCode.ACCESS_DENIED);",
        "}",
        "Account account = SecurityUtils.getAccount()",
        ".orElseThrow(() -> new InvalidAuthorizationException(ErrorCode.NOT_LOGIN));",
        "",
        "boolean isAdmin = account.getAuthorities().stream().anyMatch(authority -> authority.getAuthority().equals(\"ROLE_ADMIN\"));",
        "",
        "if(!isAdmin){",
        "throw new InvalidAuthorizationException(ErrorCode.ACCESS_DENIED);",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "findPostList",
        "findDeletedPostList",
        "enrollPin",
        "cancelPin",
        "changePostPinState",
        "restorePost",
        "restoreBulkPost",
        "deleteBulkPost",
        "migratePost"
    ],
    "classes": [
        "AdminPostAppService"
    ]
}