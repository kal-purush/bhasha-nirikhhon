{
    "identifiers": [
        "json",
        "r2",
        "tests",
        "RedditTestCase",
        "pylons",
        "app_globals",
        "g",
        "mock",
        "MagicMock",
        "patch",
        "RedditTestCase",
        "patch",
        "json",
        "x",
        "x",
        "p",
        "start",
        "addCleanup",
        "p",
        "stop",
        "patch",
        "p",
        "start",
        "addCleanup",
        "p",
        "stop",
        "k",
        "v",
        "orig",
        "g",
        "live_config",
        "k",
        "g",
        "live_config",
        "orig",
        "g",
        "live_config",
        "v",
        "addCleanup",
        "cleanup",
        "queue",
        "expected_data",
        "assertEqual",
        "queue",
        "add_item",
        "call_count",
        "queue",
        "add_item",
        "call_args_list",
        "calla",
        "assertEqual",
        "queue_name",
        "assertNotEqual",
        "data",
        "pop",
        "assertNotEqual",
        "data",
        "pop",
        "assertIn",
        "data",
        "data",
        "expected_data",
        "assert_same_dict",
        "data",
        "expected_data",
        "_patch_liveconfig",
        "patch",
        "g",
        "events",
        "queue",
        "MagicMock",
        "_name",
        "MagicMock",
        "direction",
        "g",
        "events",
        "vote_event",
        "upvote",
        "oldvote",
        "assert_event_item",
        "queue",
        "event_topic",
        "event_type",
        "payload",
        "upvote",
        "_thing2",
        "subreddit_slow",
        "_id",
        "upvote",
        "_thing2",
        "subreddit_slow",
        "name",
        "upvote",
        "_thing2",
        "_fullname",
        "_patch_liveconfig",
        "patch",
        "g",
        "events",
        "queue",
        "MagicMock",
        "MagicMock",
        "MagicMock",
        "g",
        "events",
        "submit_event",
        "new_link",
        "context",
        "context",
        "request",
        "request",
        "assert_event_item",
        "queue",
        "request",
        "ip",
        "request",
        "user_agent",
        "context",
        "user",
        "_id",
        "context",
        "oauth2_client",
        "_id",
        "new_link",
        "subreddit_slow",
        "name",
        "new_link",
        "title",
        "request",
        "host",
        "new_link",
        "selftext",
        "new_link",
        "subreddit_slow",
        "_id",
        "new_link",
        "ban_info",
        "get",
        "new_link",
        "_fullname",
        "_patch_liveconfig",
        "patch",
        "g",
        "events",
        "queue",
        "MagicMock",
        "MagicMock",
        "MagicMock",
        "MagicMock",
        "g",
        "events",
        "mod_event",
        "modaction",
        "subreddit",
        "mod",
        "context",
        "context",
        "request",
        "request",
        "assert_event_item",
        "queue",
        "modaction",
        "action",
        "subreddit",
        "_id",
        "subreddit",
        "name",
        "request",
        "host",
        "request",
        "user_agent",
        "request",
        "headers",
        "get",
        "context",
        "user",
        "_id",
        "context",
        "user",
        "name",
        "context",
        "oauth2_client",
        "_id",
        "domain_mock",
        "modaction",
        "details_text",
        "request",
        "ip",
        "_patch_liveconfig",
        "patch",
        "g",
        "events",
        "queue",
        "MagicMock",
        "MagicMock",
        "MagicMock",
        "MagicMock",
        "g",
        "events",
        "quarantine_event",
        "event_type",
        "subreddit",
        "context",
        "context",
        "request",
        "request",
        "assert_event_item",
        "queue",
        "event_type",
        "request",
        "host",
        "domain_mock",
        "context",
        "user",
        "email_verified",
        "context",
        "user",
        "_id",
        "subreddit",
        "name",
        "request",
        "headers",
        "get",
        "request",
        "user_agent",
        "subreddit",
        "_id",
        "context",
        "user",
        "name",
        "context",
        "oauth2_client",
        "_id",
        "request",
        "ip"
    ],
    "literals": [
        "\"dumps\"",
        "\"r2.lib.eventcollector.domain\"",
        "\"event_collector\"",
        "\"event_ts\"",
        "\"uuid\"",
        "\"event_topic\"",
        "\"GOT: \"",
        "\"WANT:\"",
        "\"events_collector_vote_sample_rate\"",
        "\"queue\"",
        "\"1\"",
        "\"-1\"",
        "\"vote_server\"",
        "\"server_vote\"",
        "'vote_direction'",
        "'up'",
        "'target_type'",
        "'magicmock'",
        "'sr_id'",
        "'sr_name'",
        "'target_fullname'",
        "'prev_vote_ts'",
        "'prev_vote_direction'",
        "'down'",
        "\"events_collector_submit_sample_rate\"",
        "\"queue\"",
        "'event_topic'",
        "'submit'",
        "'event_name'",
        "'submit_server'",
        "'length'",
        "'client_ip'",
        "'user_agent'",
        "'user_id'",
        "'oauth_client_id'",
        "'flagged_spam'",
        "'type'",
        "'self'",
        "'sr'",
        "'title'",
        "'domain'",
        "'text'",
        "'sr_id'",
        "'spam_reason'",
        "'id'",
        "\"events_collector_mod_sample_rate\"",
        "\"queue\"",
        "'event_type'",
        "'event_topic'",
        "'mod_events'",
        "'payload'",
        "'sr_id'",
        "'sr_name'",
        "'domain'",
        "'user_agent'",
        "'referrer_url'",
        "'user_id'",
        "'user_name'",
        "'oauth2_client_id'",
        "'referrer_domain'",
        "'details_text'",
        "'obfuscated_data'",
        "'client_ip'",
        "\"events_collector_quarantine_sample_rate\"",
        "\"queue\"",
        "'event_type'",
        "'event_topic'",
        "'quarantine'",
        "\"payload\"",
        "'domain'",
        "'referrer_domain'",
        "'verified_email'",
        "'user_id'",
        "'sr_name'",
        "'referrer_url'",
        "'user_agent'",
        "'sr_id'",
        "'user_name'",
        "'oauth2_client_id'",
        "'obfuscated_data'",
        "'client_ip'"
    ],
    "variables": [
        "p",
        "p",
        "domain_mock",
        "k",
        "k",
        "calla",
        "_",
        "queue_name",
        "data",
        "upvote",
        "oldvote",
        "new_link",
        "context",
        "request",
        "mod",
        "modaction",
        "subreddit",
        "context",
        "request",
        "event_type",
        "subreddit",
        "context",
        "request"
    ],
    "comments": [
        "!/usr/bin/env python",
        "coding=utf-8",
        "The contents of this file are subject to the Common Public Attribution",
        "License Version 1.0. (the \"License\"); you may not use this file except in",
        "compliance with the License. You may obtain a copy of the License at",
        "http://code.reddit.com/LICENSE. The License is based on the Mozilla Public",
        "License Version 1.1, but Sections 14 and 15 have been added to cover use of",
        "software over a computer network and provide for limited attribution for the",
        "Original Developer. In addition, Exhibit A has been modified to be consistent",
        "with Exhibit B.",
        "",
        "Software distributed under the License is distributed on an \"AS IS\" basis,",
        "WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for",
        "the specific language governing rights and limitations under the License.",
        "",
        "The Original Code is reddit.",
        "",
        "The Original Developer is the Initial Developer.  The Initial Developer of",
        "the Original Code is reddit Inc.",
        "",
        "All portions of the code written by reddit are Copyright (c) 2006-2015 reddit",
        "Inc. All Rights Reserved.",
        "",
        "there should have been a call to add item!",
        "pull the args",
        "queued properly?",
        "and do they have a timestamp, uuid, and payload?",
        "there is some variability, but this should at least be present",
        "these prints are for debgging when the subsequent assert fails",
        "values from the request",
        "values from the context",
        "values from the new_link",
        "bool(new_link._spam) == True",
        "TODO: this value appears to not be used?"
    ],
    "docstrings": [],
    "functions": [
        "setUp",
        "_patch_liveconfig",
        "cleanup",
        "assert_event_item",
        "test_vote_event",
        "test_submit_event",
        "test_mod_event",
        "test_quarantine_event"
    ],
    "classes": [
        "TestEventCollector"
    ]
}