{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "config",
        "Events",
        "config",
        "config",
        "config",
        "config",
        "i",
        "config",
        "i",
        "config",
        "i",
        "c",
        "c",
        "config",
        "setInterval",
        "config",
        "util",
        "RedisClustr",
        "Events",
        "RedisClustr",
        "port",
        "host",
        "redis",
        "createClient",
        "port",
        "host",
        "cli",
        "RedisClustr",
        "port",
        "host",
        "master",
        "host",
        "port",
        "name",
        "cli",
        "cli",
        "master",
        "cli",
        "cli",
        "port",
        "host",
        "cli",
        "master",
        "cli",
        "err",
        "err",
        "err",
        "err",
        "err",
        "name",
        "err",
        "cli",
        "err",
        "cli",
        "cli",
        "cli",
        "c",
        "c",
        "c",
        "wasConnected",
        "setImmediate",
        "c",
        "c",
        "cc",
        "cc",
        "cc",
        "wasEnded",
        "name",
        "cli",
        "cli",
        "RedisClustr",
        "exclude",
        "f",
        "f",
        "f",
        "exclude",
        "exclude",
        "f",
        "available",
        "available",
        "randomIndex",
        "RedisClustr",
        "cb",
        "q",
        "cb",
        "q",
        "q",
        "err",
        "cb",
        "err",
        "q",
        "cb",
        "q",
        "cb",
        "q",
        "cb",
        "err",
        "slots",
        "cb",
        "cb",
        "err",
        "slots",
        "readyTimeout",
        "clearTimeout",
        "readyTimeout",
        "runCbs",
        "exclude",
        "client",
        "err",
        "tryErrors",
        "runCbs",
        "err",
        "client",
        "err",
        "slots",
        "err",
        "exclude",
        "client",
        "tryErrors",
        "tryErrors",
        "tryErrors",
        "err",
        "tryClient",
        "runCbs",
        "i",
        "slots",
        "i",
        "slots",
        "i",
        "s",
        "s",
        "s",
        "c",
        "index",
        "c",
        "seenClients",
        "name",
        "seenClients",
        "name",
        "c",
        "c",
        "index",
        "j",
        "end",
        "j",
        "j",
        "clients",
        "i",
        "i",
        "seenClients",
        "i",
        "i",
        "i",
        "i",
        "seenClients",
        "i",
        "seenClients",
        "i",
        "c",
        "ready",
        "seenClients",
        "c",
        "ready",
        "seenClients",
        "runCbs",
        "tryClient",
        "RedisClustr",
        "key",
        "conf",
        "conf",
        "key",
        "key",
        "key",
        "Buffer",
        "key",
        "key",
        "key",
        "key",
        "openKey",
        "key",
        "openKey",
        "tmpKey",
        "closeKey",
        "key",
        "tmpKey",
        "closeKey",
        "crc",
        "key",
        "slot",
        "clients",
        "clients",
        "conf",
        "clients",
        "index",
        "clients",
        "index",
        "clients",
        "clients",
        "index",
        "index",
        "cli",
        "cli",
        "cli",
        "index",
        "cli",
        "cli",
        "cli",
        "cli",
        "RedisClustr",
        "args",
        "cb",
        "err",
        "err",
        "err",
        "args",
        "args",
        "argsCb",
        "commandCB",
        "args",
        "args",
        "cb",
        "err",
        "err",
        "commandCB",
        "err",
        "args",
        "cb",
        "argsCb",
        "args",
        "args",
        "args",
        "args",
        "cb",
        "cb",
        "args",
        "commandCB",
        "args",
        "commandCB",
        "RedisClustr",
        "cmd",
        "conf",
        "args",
        "args",
        "_",
        "args",
        "cb",
        "args",
        "key",
        "cb",
        "cmd",
        "key",
        "conf",
        "r",
        "cb",
        "r",
        "cmd",
        "cb",
        "cmd",
        "r",
        "cmd",
        "args",
        "cb",
        "r",
        "cmd",
        "r",
        "args",
        "RedisClustr",
        "cmd",
        "conf",
        "origArgs",
        "origArgs",
        "_",
        "args",
        "cb",
        "args",
        "conf",
        "cmd",
        "conf",
        "origArgs",
        "i",
        "args",
        "i",
        "conf",
        "b",
        "cmd",
        "b",
        "args",
        "i",
        "i",
        "conf",
        "b",
        "err",
        "resp",
        "resp",
        "resp",
        "conf",
        "resp",
        "cb",
        "err",
        "resp",
        "RedisClustr",
        "cli",
        "cmd",
        "args",
        "cb",
        "args",
        "err",
        "resp",
        "err",
        "err",
        "retries",
        "err",
        "msg",
        "ask",
        "msg",
        "moved",
        "ask",
        "moved",
        "err",
        "addr",
        "saddr",
        "saddr",
        "ask",
        "c",
        "c",
        "cmd",
        "c",
        "args",
        "msg",
        "err",
        "setTimeout",
        "cli",
        "cmd",
        "cli",
        "args",
        "retries",
        "cb",
        "err",
        "resp",
        "RedisClustr",
        "cmd",
        "args",
        "cb",
        "err",
        "err",
        "cb",
        "err",
        "cmd",
        "args",
        "cb",
        "err",
        "resp",
        "err",
        "errs",
        "errs",
        "errs",
        "err",
        "fullResp",
        "resp",
        "todo",
        "i",
        "fullResp",
        "i",
        "fullResp",
        "i",
        "fullResp",
        "cb",
        "errs",
        "fullResp",
        "cb",
        "errs",
        "fullResp",
        "i",
        "i",
        "cli",
        "cli",
        "todo",
        "cli",
        "cmd",
        "args",
        "isDone",
        "RedisClustr",
        "evt",
        "already",
        "cb",
        "cb",
        "already",
        "cb",
        "already",
        "already",
        "evt",
        "cb",
        "already",
        "cb",
        "waitTimeout",
        "clearTimeout",
        "waitTimeout",
        "cb",
        "evt",
        "done",
        "waitTimeout",
        "setTimeout",
        "evt",
        "done",
        "cb",
        "RedisClustr",
        "exclude",
        "exclude",
        "con",
        "exclude",
        "con",
        "con",
        "cli",
        "err",
        "err",
        "err",
        "err",
        "err",
        "err",
        "cli",
        "cli",
        "err",
        "cli",
        "cli",
        "cli",
        "events",
        "evt",
        "cli",
        "evt",
        "a",
        "b",
        "c",
        "evt",
        "a",
        "b",
        "c",
        "cmd",
        "cli",
        "cmd",
        "cmd",
        "cli",
        "setupCommands",
        "RedisClustr",
        "RedisClustr",
        "RedisClustr",
        "RedisBatch",
        "RedisClustr",
        "arguments",
        "i",
        "arguments",
        "i",
        "args",
        "i",
        "arguments",
        "i",
        "args",
        "_",
        "args",
        "cb",
        "args",
        "cb",
        "RedisClustr",
        "cmd",
        "args",
        "args",
        "_",
        "args",
        "cb",
        "args",
        "numKeys",
        "r",
        "r",
        "args",
        "r",
        "cmd",
        "args",
        "cb",
        "r",
        "cmd",
        "r",
        "args",
        "handler",
        "fn",
        "arguments",
        "i",
        "arguments",
        "i",
        "args",
        "i",
        "arguments",
        "i",
        "handler",
        "fn",
        "args",
        "RedisClustr",
        "overwriteFn",
        "RedisClustr",
        "overwriteFn",
        "RedisClustr",
        "cmd",
        "args",
        "args",
        "_",
        "args",
        "cb",
        "cli",
        "cli",
        "cli",
        "cb",
        "cmd",
        "cmd",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "args",
        "key",
        "cli",
        "cmd",
        "cb",
        "i",
        "args",
        "i",
        "key",
        "args",
        "i",
        "key",
        "args",
        "i",
        "cli",
        "cmd",
        "args",
        "cb",
        "RedisClustr",
        "overwriteFn",
        "RedisClustr",
        "overwriteFn",
        "RedisClustr",
        "overwriteFn",
        "RedisClustr",
        "overwriteFn",
        "RedisClustr",
        "cb",
        "clearInterval",
        "err",
        "err",
        "errs",
        "errs",
        "err",
        "errs",
        "err",
        "todo",
        "cb",
        "cb",
        "errs",
        "i",
        "i",
        "todo",
        "i",
        "quitCb",
        "todo",
        "quitCb"
    ],
    "literals": [
        "'use strict'",
        "'./setupCommands'",
        "'./crc16-xmodem'",
        "'redis'",
        "'./RedisBatch'",
        "'events'",
        "'util'",
        "'double-ended-queue'",
        "':'",
        "'error'",
        "'CONNECTION_BROKEN'",
        "'UNCERTAIN_STATE'",
        "'CONNECTION_BROKEN'",
        "'connectionError'",
        "'error'",
        "'ready'",
        "'connect'",
        "'end'",
        "'disconnect'",
        "'end'",
        "'max slot queue length reached'",
        "'undefined'",
        "'cluster is quitting'",
        "'couldn\\'t get slot allocation'",
        "'slots'",
        "'cluster is quitting'",
        "':'",
        "'ready'",
        "'fullReady'",
        "'ready'",
        "'fullReady'",
        "'connect'",
        "'{'",
        "'}'",
        "'never'",
        "'always'",
        "'share'",
        "'readwrite'",
        "'readonly'",
        "'error'",
        "'function'",
        "'no key for command: '",
        "'couldn\\'t get client'",
        "'NodeRedis doesn\\'t know the '",
        "' command'",
        "'ASK '",
        "'MOVED '",
        "' '",
        "':'",
        "'asking'",
        "'TRYAGAIN'",
        "'CLUSTERDOWN'",
        "'function'",
        "'cluster is quitting'",
        "'ready timeout reached'",
        "'ready'",
        "'error'",
        "'CONNECTION_BROKEN'",
        "'UNCERTAIN_STATE'",
        "'connectionError'",
        "'error'",
        "'end'",
        "'message'",
        "'pmessage'",
        "'subscribe'",
        "'unsubscribe'",
        "'psubscribe'",
        "'punsubscribe'",
        "'script'",
        "'_eval'",
        "'eval'",
        "'_eval'",
        "'evalsha'",
        "'couldn\\'t get subscriber client'",
        "'unsubscribe'",
        "'punsubscribe'",
        "'unsubscribe'",
        "'subscribe'",
        "'punsubscribe'",
        "'psubscribe'",
        "'_subscribe'",
        "'subscribe'",
        "'_subscribe'",
        "'psubscribe'",
        "'_subscribe'",
        "'unsubscribe'",
        "'_subscribe'",
        "'punsubscribe'"
    ],
    "variables": [
        "setupCommands",
        "crc",
        "redis",
        "RedisBatch",
        "Events",
        "util",
        "RedisClustr",
        "i",
        "c",
        "createClient",
        "cli",
        "name",
        "cli",
        "wasConnected",
        "wasEnded",
        "cc",
        "available",
        "randomIndex",
        "q",
        "err",
        "runCbs",
        "cb",
        "exclude",
        "tryErrors",
        "tryClient",
        "client",
        "err",
        "seenClients",
        "i",
        "s",
        "start",
        "end",
        "clients",
        "name",
        "j",
        "start",
        "ready",
        "i",
        "c",
        "openKey",
        "tmpKey",
        "closeKey",
        "slot",
        "clients",
        "index",
        "cli",
        "commandCB",
        "argsCb",
        "key",
        "r",
        "b",
        "i",
        "retries",
        "msg",
        "ask",
        "moved",
        "addr",
        "saddr",
        "c",
        "todo",
        "errs",
        "fullResp",
        "isDone",
        "i",
        "cli",
        "waitTimeout",
        "done",
        "con",
        "cli",
        "events",
        "args",
        "i",
        "numKeys",
        "r",
        "overwriteFn",
        "args",
        "i",
        "cli",
        "key",
        "cmd",
        "i",
        "todo",
        "errs",
        "quitCb"
    ],
    "comments": [
        "handle just an array of clients",
        "fetch slots from the cluster immediately to ensure slots are correct",
        "ability to update slots on an interval (should be unnecessary)",
        "already have a connection to this client, return that",
        "broken connection so force a new client to be created (node_redis will reconnect other errors)",
        "re-emit the error ourselves",
        "as soon as one client is ready, we're connected (ready to fetch slot allocation)",
        "setImmediate as node_redis sets emitted_end after emitting end",
        "shift the earliest queue item off and give it an error",
        "send this callback the error instead",
        "exclude this client from then next attempt",
        "array of all clients, clients[0] = master, others are slaves",
        "quit now-unused clients",
        "this command doesnt have keys, return any connection",
        "NOTE: this means slaves may be used for no key commands regardless of slave config",
        "support for hash tags to keep keys on the same slot",
        "http://redis.io/topics/cluster-spec#keys-hash-tags",
        "} in key and it's not {}",
        "if we haven't got config for this slot, try any connection",
        "always, never, share",
        "always use a slave for read commands",
        "share read commands across master + slaves",
        "now take cb off args so we can attach our own callback wrapper",
        "already split into an individual command",
        "batch the multi-key command into individual ones",
        "number of attempts/redirects when we get connection errors",
        "or when we get MOVED/ASK responses",
        "https://github.com/antirez/redis-rb-cluster/blob/fd931ed34dfc53159e2f52c9ea2d4a5073faabeb/cluster.rb#L29",
        "key has been moved!",
        "lets refetch slots from redis to get an up to date allocation",
        "REQUERY THE NEW ONE (we've got the correct details)",
        "TRYAGAIN response or cluster down, retry with backoff up to 1280ms",
        "if we've got different responses, callback with the full array",
        "callback with the first response if they're all the same",
        "don't set a timeout (wait indefinitely for connection)",
        "ignore errors",
        "duplicate the random connection and make that our subscriber client",
        "immediately try to re-subscribe",
        "re-emit the error ourselves",
        "bubble all messages for pubsub",
        "select based on the first KEYS argument",
        "we *could* validate that all keys are together, but it's easier",
        "to allow redis to error instead",
        "kill all subscriptions"
    ],
    "docstrings": [
        "* Get a Redis client via the connection cache (one per host)\n * @date   2015-02-14\n * @param  {number}   port   Port to connect to\n * @param  {string}   host   Host to connect to\n * @param  {boolean}  master Whether this client is a master or not (a slave)\n * @return {Redis}           The Redis client",
        "* Get a random Redis connection\n * @date   2015-02-18\n * @param  {array}   exclude  List of addresses to exclude (falsy to ignore none)\n * @return {Redis}            A random, ready, Redis connection.",
        "* Get the cluster slot allocation\n * @date   2015-02-14\n * @param  {Function} cb",
        "* Select a Redis client for the given key and conf\n * @date   2015-11-23\n * @param  {string}   key  The Redis key (can also be an Array or Buffer)\n * @param  {object}   conf Configuration relating to the command (e.g. if it's readOnly)\n * @return {Redis}         A Redis client",
        "* Take arguments and convert them to an array of Redis command args and a callback\n * @date   2015-11-23\n * @param  {array}   args   Arguments which can be in a few different formats\n * @param  {Function} [cb]  Callback function so we can wait for the slot allocation\n * @return {array}          The parsed arguments and the callback function",
        "* Handle Redis commands\n * @date   2013-11-23\n * @param  {string}   cmd  The Redis command (e.g. set)\n * @param  {object}   conf Configuration related to this command (e.g. whether the key is readOnly)\n * @param  {array}    args Arguments to be passed to the command (including commandCallback)",
        "* Handle Redis commands that may contain multiple keys (and therefore need splitting across slots)\n * @date   2013-11-23\n * @param  {string}   cmd  The Redis command (e.g. mset)\n * @param  {object}   conf Configuration related to this command (e.g. the key interval)\n * @param  {array}    args Arguments to be passed to the command (including commandCallback)",
        "* Adds a custom callback to command args so cluster errors can be properly handled\n * @date   2015-11-14\n * @param  {Redis}    cli  A Redis client\n * @param  {string}   cmd  The Redis command (e.g. get)\n * @param  {array}    args Arguments to be passed to the command (and to have our callback added to)\n * @param  {Function} cb   The main callback to wrap around",
        "* Run a command on all master nodes\n * @date   2015-11-23\n * @param  {string}   cmd  The Redis command (e.g. script)\n * @param  {array}   args Arguments to be passed to the command\n * @param  {Function} cb\n * @example\n * redis.onMasters('script', [ 'load', 'return redis.call(\"get\", \"a-key\")' ], function(err) {});",
        "* Wait for an event, or call back immediately if it's already been fired\n * @date   2015-11-23\n * @param  {string}   evt     The event to wait for\n * @param  {boolean}  [already=self[evt]] The property that indicates if the event has already been fired\n * @param  {Function} cb\n * @example\n * redis.waitFor('ready', function(err) { });\n * @example\n * redis.waitFor('connect', redis.connected, function(err) {}) ;",
        "* Create/recreate a subscription client and resubscribe to all pub/sub channels\n * @date   2015-11-23\n * @return {Redis}   A Redis client which can be used to subscribe",
        "* Start a new batch/group of pipelined commands\n * @date   2014-11-19\n * @return {RedisBatch}   A RedisBatch which has a very similar interface                                                 to redis/",
        "* Run script commands on all master connections (especially for script load etc)\n * @date   2015-11-23",
        "* Custom handling for eval and evalsha to try to select the\n * correct node based on the given keys\n * @date    2015-11-23\n * @param   {string}   cmd  The Redis command - eval or evalsha\n * @param   {array}   args Arguments to be passed to the command\n * @private",
        "* Handle subscription commands, creating sub client if necessary and remembers what channels\n * we're currently subscribed to\n * @date    2015-11-23\n * @param   {string}   cmd  The subscription command (subscribe, unsubscribe...)\n * @param   {array}   args  Arguments to be passed to the command (list of channels) (including commandCallback)\n * @private",
        "* Quit the Redis cluster, closing all underlying connections\n * @date   2014-07-29\n * @param  {Function} cb"
    ],
    "functions": [],
    "classes": []
}