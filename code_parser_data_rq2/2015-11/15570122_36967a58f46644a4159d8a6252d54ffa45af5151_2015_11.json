{
    "identifiers": [
        "os",
        "pytest",
        "tempfile",
        "pytest",
        "fixture",
        "expected_attrs",
        "gooey",
        "gui",
        "image_repository",
        "all",
        "attr",
        "image_repository",
        "__dict__",
        "attr",
        "expected_attrs",
        "gooey",
        "gui",
        "image_repository",
        "pytest",
        "raises",
        "IOError",
        "kaboom",
        "image_repository",
        "patch_images",
        "kaboom",
        "value",
        "kaboom",
        "value",
        "expected_attrs",
        "gooey",
        "gui",
        "image_repository",
        "make_user_files",
        "testing_icons",
        "image_repository",
        "config_icon",
        "image_repository",
        "patch_images",
        "tempfile",
        "tempdir",
        "image_repository",
        "config_icon",
        "old_icon",
        "new_icon",
        "cleanup_temp",
        "testing_icons",
        "filenames",
        "filename",
        "filenames",
        "open",
        "os",
        "path",
        "join",
        "tempfile",
        "gettempdir",
        "filename",
        "f",
        "f",
        "write",
        "filenames",
        "filename",
        "filenames",
        "os",
        "remove",
        "os",
        "path",
        "join",
        "tempfile",
        "gettempdir",
        "filename"
    ],
    "literals": [
        "'program_icon'",
        "'success_icon'",
        "'running_icon'",
        "'loading_icon'",
        "'config_icon'",
        "'error_icon'",
        "'foo/bar/not/a/path'",
        "' user supplied'",
        "'foo/bar/not/a/path'",
        "'config_icon.png'",
        "'success_icon.png'",
        "'w'",
        "'temp'"
    ],
    "variables": [
        "testing_icons",
        "old_icon",
        "new_icon"
    ],
    "comments": [
        "our error",
        "setup",
        "load up our new icon(s)",
        "helpers"
    ],
    "docstrings": [
        "'''\nImage Repository acts as a funky dynamic singlton module.\n'''",
        "'''\n  The dynamically initialized Globals() should contain the expected images at runtime\n  '''",
        "'''\n  patch should explode with a helpful message if it\n  cannot find the supplied directory\n  '''",
        "'''\n  Patch should update the module's globals() on success\n  '''"
    ],
    "functions": [
        "expected_attrs",
        "test_variable_names_are_pushed_to_module_scope",
        "test_patch_returns_error_on_invalid_dir",
        "test_module_scope_is_updated_on_patch",
        "make_user_files",
        "cleanup_temp"
    ],
    "classes": []
}