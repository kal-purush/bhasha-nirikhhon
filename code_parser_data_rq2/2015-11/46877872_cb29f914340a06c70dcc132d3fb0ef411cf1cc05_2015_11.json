{
    "identifiers": [
        "root",
        "get_date_offset",
        "date",
        "date",
        "offset",
        "offset",
        "lookup_key",
        "get_date_offset",
        "consts",
        "get_date_offset",
        "consts",
        "january_offset",
        "june_offset",
        "diff",
        "january_offset",
        "diff",
        "june_offset",
        "HEMISPHERE_SOUTH",
        "january_offset",
        "get_from_internationalization_api",
        "format",
        "format",
        "format",
        "timezone",
        "format",
        "timezone",
        "timezone",
        "timezone",
        "timezone",
        "dst_dates",
        "year",
        "year",
        "year",
        "current",
        "current",
        "yearend",
        "current",
        "dateToCheck",
        "dateToCheckOffset",
        "offset",
        "dateToCheckOffset",
        "offset",
        "dst_start",
        "dateToCheck",
        "dateToCheckOffset",
        "offset",
        "dst_end",
        "dateToCheck",
        "offset",
        "dateToCheckOffset",
        "current",
        "dst_start",
        "dst_end",
        "find_dst_fold",
        "dst_start",
        "find_dst_fold",
        "dst_end",
        "find_dst_fold",
        "a_date",
        "padding",
        "iterator",
        "padding",
        "padding",
        "consts",
        "iterator",
        "consts",
        "a_date",
        "padding",
        "a_date",
        "padding",
        "date_start",
        "current",
        "date_end",
        "iterator",
        "current",
        "dateToCheck",
        "dateToCheckOffset",
        "offset",
        "dst_change",
        "dateToCheck",
        "current",
        "iterator",
        "padding",
        "consts",
        "find_dst_fold",
        "dst_change",
        "consts",
        "consts",
        "padding",
        "consts",
        "find_dst_fold",
        "dst_change",
        "consts",
        "consts",
        "dst_change",
        "windows7_adaptions",
        "rule_list",
        "preliminary_timezone",
        "score",
        "sample",
        "score",
        "score",
        "preliminary_timezone",
        "sample",
        "rule_list",
        "rule_list",
        "sample",
        "rule_list",
        "rule_list",
        "preliminary_timezone",
        "sample",
        "rule_list",
        "rule_list",
        "sample",
        "rule_list",
        "rule_list",
        "preliminary_timezone",
        "sample",
        "rule_list",
        "rule_list",
        "preliminary_timezone",
        "sample",
        "rule_list",
        "rule_list",
        "score",
        "best_dst_match",
        "rule_list",
        "preliminary_timezone",
        "score_sample",
        "sample",
        "j",
        "rule_list",
        "j",
        "sample",
        "j",
        "rule_list",
        "j",
        "rule_list",
        "j",
        "sample",
        "j",
        "rule_list",
        "j",
        "sample",
        "j",
        "score",
        "score",
        "rule_list",
        "j",
        "sample",
        "j",
        "score",
        "sample",
        "j",
        "rule_list",
        "j",
        "score",
        "score",
        "consts",
        "score",
        "score",
        "windows7_adaptations",
        "rule_list",
        "preliminary_timezone",
        "score",
        "sample",
        "score",
        "jstz",
        "dst_zones",
        "consts",
        "preliminary_timezone",
        "i",
        "dst_zones_length",
        "i",
        "dst_zones",
        "i",
        "score_sample",
        "dst_zones",
        "i",
        "score",
        "scoreboard",
        "sample",
        "score",
        "tz",
        "scoreboard",
        "scoreboard",
        "tz",
        "j",
        "ambiguities",
        "j",
        "ambiguities",
        "j",
        "tz",
        "tz",
        "preliminary_timezone",
        "get_by_dst",
        "preliminary_timezone",
        "get_rules",
        "i",
        "jstz",
        "i",
        "dst_dates",
        "jstz",
        "i",
        "rule_list",
        "year_rules",
        "rule_list",
        "check_has_dst",
        "rules",
        "i",
        "rules",
        "i",
        "rules",
        "i",
        "get_rules",
        "check_has_dst",
        "rules",
        "has_dst",
        "best_dst_match",
        "rules",
        "preliminary_timezone",
        "preliminary_timezone",
        "determine",
        "get_from_internationalization_api",
        "preliminary_tz",
        "preliminary_tz",
        "jstz",
        "lookup_key",
        "consts",
        "preliminary_tz",
        "preliminary_tz",
        "get_by_dst",
        "preliminary_tz",
        "preliminary_tz",
        "determine",
        "jstz",
        "jstz",
        "jstz",
        "jstz",
        "jstz",
        "define",
        "define",
        "define",
        "define",
        "jstz",
        "root",
        "jstz",
        "root",
        "jstz"
    ],
    "literals": [
        "'use strict'",
        "'s'",
        "'America/Denver'",
        "'America/Mazatlan'",
        "'Europe/London'",
        "'Africa/Casablanca'",
        "'America/Chicago'",
        "'America/Mexico_City'",
        "'America/Asuncion'",
        "'America/Campo_Grande'",
        "'America/Santiago'",
        "'America/Montevideo'",
        "'America/Sao_Paulo'",
        "'America/Santiago'",
        "'Asia/Beirut'",
        "'Asia/Amman'",
        "'Asia/Jerusalem'",
        "'Europe/Helsinki'",
        "'Asia/Damascus'",
        "'Africa/Cairo'",
        "'Asia/Gaza'",
        "'Europe/Minsk'",
        "'Pacific/Auckland'",
        "'Pacific/Fiji'",
        "'America/Los_Angeles'",
        "'America/Santa_Isabel'",
        "'America/New_York'",
        "'America/Havana'",
        "'America/Halifax'",
        "'America/Goose_Bay'",
        "'America/Godthab'",
        "'America/Miquelon'",
        "'Asia/Dubai'",
        "'Asia/Yerevan'",
        "'Asia/Jakarta'",
        "'Asia/Krasnoyarsk'",
        "'Asia/Shanghai'",
        "'Asia/Irkutsk'",
        "'Australia/Perth'",
        "'Australia/Sydney'",
        "'Australia/Lord_Howe'",
        "'Asia/Tokyo'",
        "'Asia/Yakutsk'",
        "'Asia/Dhaka'",
        "'Asia/Omsk'",
        "'Asia/Baku'",
        "'Asia/Yerevan'",
        "'Australia/Brisbane'",
        "'Asia/Vladivostok'",
        "'Pacific/Noumea'",
        "'Asia/Vladivostok'",
        "'Pacific/Majuro'",
        "'Asia/Kamchatka'",
        "'Pacific/Fiji'",
        "'Pacific/Tongatapu'",
        "'Pacific/Apia'",
        "'Asia/Baghdad'",
        "'Europe/Minsk'",
        "'Europe/Moscow'",
        "'Asia/Karachi'",
        "'Asia/Yekaterinburg'",
        "'Africa/Johannesburg'",
        "'Asia/Gaza'",
        "'Africa/Cairo'",
        "\",1\"",
        "\",1,\"",
        "\",0\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"/\"",
        "'UTC'",
        "'undefined'",
        "'N/A'",
        "'Asia/Beirut'",
        "'Africa/Cairo'",
        "'Asia/Jerusalem'",
        "'America/Santiago'",
        "'America/Asuncion'",
        "'America/Campo_Grande'",
        "'America/Montevideo'",
        "'America/Sao_Paulo'",
        "'Pacific/Auckland'",
        "'Pacific/Fiji'",
        "'N/A'",
        "'N/A'",
        "'N/A'",
        "'undefined'",
        "'-720,0'",
        "'Etc/GMT+12'",
        "'-660,0'",
        "'Pacific/Pago_Pago'",
        "'-660,1,s'",
        "'Pacific/Apia'",
        "'-600,1'",
        "'America/Adak'",
        "'-600,0'",
        "'Pacific/Honolulu'",
        "'-570,0'",
        "'Pacific/Marquesas'",
        "'-540,0'",
        "'Pacific/Gambier'",
        "'-540,1'",
        "'America/Anchorage'",
        "'-480,1'",
        "'America/Los_Angeles'",
        "'-480,0'",
        "'Pacific/Pitcairn'",
        "'-420,0'",
        "'America/Phoenix'",
        "'-420,1'",
        "'America/Denver'",
        "'-360,0'",
        "'America/Guatemala'",
        "'-360,1'",
        "'America/Chicago'",
        "'-360,1,s'",
        "'Pacific/Easter'",
        "'-300,0'",
        "'America/Bogota'",
        "'-300,1'",
        "'America/New_York'",
        "'-270,0'",
        "'America/Caracas'",
        "'-240,1'",
        "'America/Halifax'",
        "'-240,0'",
        "'America/Santo_Domingo'",
        "'-240,1,s'",
        "'America/Asuncion'",
        "'-210,1'",
        "'America/St_Johns'",
        "'-180,1'",
        "'America/Godthab'",
        "'-180,0'",
        "'America/Argentina/Buenos_Aires'",
        "'-180,1,s'",
        "'America/Montevideo'",
        "'-120,0'",
        "'America/Noronha'",
        "'-120,1'",
        "'America/Noronha'",
        "'-60,1'",
        "'Atlantic/Azores'",
        "'-60,0'",
        "'Atlantic/Cape_Verde'",
        "'0,0'",
        "'UTC'",
        "'0,1'",
        "'Europe/London'",
        "'60,1'",
        "'Europe/Berlin'",
        "'60,0'",
        "'Africa/Lagos'",
        "'60,1,s'",
        "'Africa/Windhoek'",
        "'120,1'",
        "'Asia/Beirut'",
        "'120,0'",
        "'Africa/Johannesburg'",
        "'180,0'",
        "'Asia/Baghdad'",
        "'180,1'",
        "'Europe/Moscow'",
        "'210,1'",
        "'Asia/Tehran'",
        "'240,0'",
        "'Asia/Dubai'",
        "'240,1'",
        "'Asia/Baku'",
        "'270,0'",
        "'Asia/Kabul'",
        "'300,1'",
        "'Asia/Yekaterinburg'",
        "'300,0'",
        "'Asia/Karachi'",
        "'330,0'",
        "'Asia/Kolkata'",
        "'345,0'",
        "'Asia/Kathmandu'",
        "'360,0'",
        "'Asia/Dhaka'",
        "'360,1'",
        "'Asia/Omsk'",
        "'390,0'",
        "'Asia/Rangoon'",
        "'420,1'",
        "'Asia/Krasnoyarsk'",
        "'420,0'",
        "'Asia/Jakarta'",
        "'480,0'",
        "'Asia/Shanghai'",
        "'480,1'",
        "'Asia/Irkutsk'",
        "'525,0'",
        "'Australia/Eucla'",
        "'525,1,s'",
        "'Australia/Eucla'",
        "'540,1'",
        "'Asia/Yakutsk'",
        "'540,0'",
        "'Asia/Tokyo'",
        "'570,0'",
        "'Australia/Darwin'",
        "'570,1,s'",
        "'Australia/Adelaide'",
        "'600,0'",
        "'Australia/Brisbane'",
        "'600,1'",
        "'Asia/Vladivostok'",
        "'600,1,s'",
        "'Australia/Sydney'",
        "'630,1,s'",
        "'Australia/Lord_Howe'",
        "'660,1'",
        "'Asia/Kamchatka'",
        "'660,0'",
        "'Pacific/Noumea'",
        "'690,0'",
        "'Pacific/Norfolk'",
        "'720,1,s'",
        "'Pacific/Auckland'",
        "'720,0'",
        "'Pacific/Majuro'",
        "'765,1,s'",
        "'Pacific/Chatham'",
        "'780,0'",
        "'Pacific/Tongatapu'",
        "'780,1,s'",
        "'Pacific/Apia'",
        "'840,0'",
        "'Pacific/Kiritimati'",
        "\"years\"",
        "\"zones\"",
        "\"name\"",
        "\"Africa/Cairo\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Africa/Casablanca\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"America/Asuncion\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"America/Campo_Grande\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"America/Goose_Bay\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"America/Havana\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"America/Mazatlan\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"America/Mexico_City\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"America/Miquelon\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"America/Santa_Isabel\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"America/Santiago\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"America/Sao_Paulo\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Asia/Amman\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Asia/Damascus\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Asia/Dubai\"",
        "\"rules\"",
        "\"name\"",
        "\"Asia/Gaza\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Asia/Irkutsk\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Asia/Jerusalem\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Asia/Kamchatka\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Asia/Krasnoyarsk\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Asia/Omsk\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Asia/Vladivostok\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Asia/Yakutsk\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Asia/Yekaterinburg\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Asia/Yerevan\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Australia/Lord_Howe\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Australia/Perth\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Europe/Helsinki\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Europe/Minsk\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Europe/Moscow\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Pacific/Apia\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Pacific/Fiji\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"name\"",
        "\"Europe/London\"",
        "\"rules\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "\"e\"",
        "\"s\"",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'undefined'"
    ],
    "variables": [
        "jstz",
        "HEMISPHERE_SOUTH",
        "consts",
        "get_date_offset",
        "offset",
        "lookup_key",
        "january_offset",
        "june_offset",
        "diff",
        "get_from_internationalization_api",
        "format",
        "timezone",
        "dst_dates",
        "yearstart",
        "yearend",
        "current",
        "yearstart",
        "offset",
        "dst_start",
        "dst_end",
        "dateToCheck",
        "dateToCheckOffset",
        "find_dst_fold",
        "date_start",
        "date_end",
        "offset",
        "current",
        "date_start",
        "dst_change",
        "dateToCheck",
        "dateToCheckOffset",
        "windows7_adaptations",
        "best_dst_match",
        "score_sample",
        "score",
        "j",
        "scoreboard",
        "dst_zones",
        "dst_zones_length",
        "ambiguities",
        "i",
        "sample",
        "score",
        "j",
        "get_by_dst",
        "get_rules",
        "rule_list",
        "i",
        "year_rules",
        "check_has_dst",
        "i",
        "rules",
        "has_dst",
        "determine",
        "preliminary_tz"
    ],
    "comments": [
        "global exports, Intl",
        "10 days",
        "Europe/Minsk should not be in this list... but Windows.",
        "In the real world Yerevan is not ambigous for Baku... but Windows.",
        "Both sample and current time zone report DST during the year.",
        "The current time zone's DST rules are inside the sample's. Include.",
        "The current time zone's DST rules are outside the sample's. Discard.",
        "The max score has been reached. Discard.",
        "Why? Because windows... cry!",
        "Build time: 2015-11-02 13:01:00Z Build by invoking python utilities/dst.py generate"
    ],
    "docstrings": [
        "* This script gives you the zone info key representing your device's time zone setting.\n *\n * @name jsTimezoneDetect\n * @version 1.0.6\n * @author Jon Nylander\n * @license MIT License - https://bitbucket.org/pellepim/jstimezonedetect/src/default/LICENCE.txt\n *\n * For usage and examples, visit:\n * http://pellepim.bitbucket.org/jstz/\n *\n * Copyright (c) Jon Nylander",
        "* Namespace to hold all the code for timezone detection.",
        "* Gets the offset in minutes from UTC for a certain date.\n         * @param {Date} date\n         * @returns {Number}",
        "* This function does some basic calculations to create information about\n         * the user's timezone. It uses REFERENCE_YEAR as a solid year for which\n         * the script has been tested rather than depend on the year set by the\n         * client device.\n         *\n         * Returns a key that can be used to do lookups in jstz.olson.timezones.\n         * eg: \"720,1,2\".\n         *\n         * @returns {String}",
        "* Tries to get the time zone key directly from the operating system for those\n         * environments that support the ECMAScript Internationalization API.",
        "* Starting point for getting all the DST rules for a specific year\n         * for the current timezone (as described by the client system).\n         *\n         * Returns an object with start and end attributes, or false if no\n         * DST rules were found for the year.\n         *\n         * @param year\n         * @returns {Object} || {Boolean}",
        "* Probably completely unnecessary function that recursively finds the\n         * exact (to the second) time when a DST rule was changed.\n         *\n         * @param a_date - The candidate Date.\n         * @param padding - integer specifying the padding to allow around the candidate\n         *                  date for finding the fold.\n         * @param iterator - integer specifying how many milliseconds to iterate while\n         *                   searching for the fold.\n         *\n         * @returns {Date}",
        "* Takes the DST rules for the current timezone, and proceeds to find matches\n         * in the jstz.olson.dst_rules.zones array.\n         *\n         * Compares samples to the current timezone on a scoring basis.\n         *\n         * Candidates are ruled immediately if either the candidate or the current zone\n         * has a DST rule where the other does not.\n         *\n         * Candidates are ruled out immediately if the current zone has a rule that is\n         * outside the DST scope of the candidate.\n         *\n         * Candidates are included for scoring if the current zones rules fall within the\n         * span of the samples rules.\n         *\n         * Low score is best, the score is calculated by summing up the differences in DST\n         * rules and if the consts.MAX_SCORE is overreached the candidate is ruled out.\n         *\n         * Yah follow? :)\n         *\n         * @param rule_list\n         * @param preliminary_timezone\n         * @returns {*}",
        "* Takes the preliminary_timezone as detected by lookup_key().\n         *\n         * Builds up the current timezones DST rules for the years defined\n         * in the jstz.olson.dst_rules.years array.\n         *\n         * If there are no DST occurences for those years, immediately returns\n         * the preliminary timezone. Otherwise proceeds and tries to solve\n         * ambiguities.\n         *\n         * @param preliminary_timezone\n         * @returns {String} timezone_name",
        "* Uses get_timezone_info() to formulate a key to use in the olson.timezones dictionary.\n         *\n         * Returns an object with one function \".name()\"\n         *\n         * @returns Object",
        "* The keys in this dictionary are comma separated as such:\n *\n * First the offset compared to UTC time in minutes.\n *\n * Then a flag which is 0 if the timezone does not take daylight savings into account and 1 if it\n * does.\n *\n * Thirdly an optional 's' signifies that the timezone is in the southern hemisphere,\n * only interesting for timezones with DST.\n *\n * The mapped arrays is used for constructing the jstz.TimeZone object from within\n * jstz.determine();"
    ],
    "functions": [],
    "classes": []
}