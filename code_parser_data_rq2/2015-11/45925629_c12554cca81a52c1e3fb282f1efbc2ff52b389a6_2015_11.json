{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Ploeh",
        "AutoFixture",
        "Ploeh",
        "AutoFixture",
        "AutoMoq",
        "Moq",
        "Linq",
        "Expressions",
        "Tests",
        "Utilities",
        "M",
        "M",
        "M",
        "Enums",
        "DBContexts",
        "Context1",
        "Enums",
        "DBContexts",
        "Context2",
        "Enums",
        "DBContexts",
        "Context3",
        "Mock",
        "IBaseRepositoryContext1",
        "M",
        "Mock",
        "IBaseRepositoryContext2",
        "M",
        "Mock",
        "IBaseRepositoryContext3",
        "M",
        "IBaseRepositoryContext1",
        "M",
        "BringToLife",
        "CONTEXT1",
        "Context1Repo",
        "IBaseRepositoryContext2",
        "M",
        "BringToLife",
        "CONTEXT2",
        "Context2Repo",
        "IBaseRepositoryContext3",
        "M",
        "BringToLife",
        "CONTEXT3",
        "Context3Repo",
        "ignoreCircles",
        "howMany",
        "fixture",
        "Fixture",
        "Customize",
        "AutoMoqCustomization",
        "ignoreCircles",
        "StopCaringAboutCircles",
        "records",
        "fixture",
        "CreateMany",
        "M",
        "howMany",
        "ToList",
        "Repo",
        "M",
        "context",
        "context",
        "CONTEXT1",
        "Context1Repo",
        "fixture",
        "Freeze",
        "Mock",
        "IBaseRepositoryContext1Repo",
        "M",
        "Context1Repo",
        "Setup",
        "u",
        "Get",
        "Returns",
        "records",
        "AsQueryable",
        "CONTEXT2",
        "Context2Repo",
        "fixture",
        "Freeze",
        "Mock",
        "IBaseRepositoryContext2Repo",
        "M",
        "Context2Repo",
        "Setup",
        "u",
        "Get",
        "Returns",
        "records",
        "AsQueryable",
        "CONTEXT3",
        "Context3Repo",
        "fixture",
        "Freeze",
        "Mock",
        "IBaseRepositoryContext3Repo",
        "M",
        "Context3Repo",
        "Setup",
        "u",
        "Get",
        "Returns",
        "records",
        "AsQueryable",
        "Repo",
        "M",
        "V",
        "prop1",
        "V",
        "val1",
        "records",
        "Add",
        "fixture",
        "Build",
        "M",
        "With",
        "MakeExpression",
        "prop1",
        "val1",
        "val1",
        "Create",
        "Repo",
        "M",
        "V1",
        "V2",
        "prop1",
        "V1",
        "val1",
        "prop2",
        "V2",
        "val2",
        "records",
        "Add",
        "fixture",
        "Build",
        "M",
        "With",
        "MakeExpression",
        "prop1",
        "val1",
        "val1",
        "With",
        "MakeExpression",
        "prop2",
        "val2",
        "val2",
        "Create",
        "Repo",
        "M",
        "V1",
        "V2",
        "V3",
        "prop1",
        "V1",
        "val1",
        "prop2",
        "V2",
        "val2",
        "prop3",
        "V3",
        "val3",
        "records",
        "Add",
        "fixture",
        "Build",
        "M",
        "With",
        "MakeExpression",
        "prop1",
        "val1",
        "val1",
        "With",
        "MakeExpression",
        "prop2",
        "val2",
        "val2",
        "With",
        "MakeExpression",
        "prop3",
        "val3",
        "val3",
        "Create",
        "Repo",
        "M",
        "V1",
        "V2",
        "V3",
        "V4",
        "prop1",
        "V1",
        "val1",
        "prop2",
        "V2",
        "val2",
        "prop3",
        "V3",
        "val3",
        "prop4",
        "V4",
        "val4",
        "records",
        "Add",
        "fixture",
        "Build",
        "M",
        "With",
        "MakeExpression",
        "prop1",
        "val1",
        "val1",
        "With",
        "MakeExpression",
        "prop2",
        "val2",
        "val2",
        "With",
        "MakeExpression",
        "prop3",
        "val3",
        "val3",
        "With",
        "MakeExpression",
        "prop4",
        "val4",
        "val4",
        "Create",
        "Repo",
        "M",
        "V1",
        "V2",
        "V3",
        "V4",
        "V5",
        "prop1",
        "V1",
        "val1",
        "prop2",
        "V2",
        "val2",
        "prop3",
        "V3",
        "val3",
        "prop4",
        "V4",
        "val4",
        "prop5",
        "V5",
        "val5",
        "records",
        "Add",
        "fixture",
        "Build",
        "M",
        "With",
        "MakeExpression",
        "prop1",
        "val1",
        "val1",
        "With",
        "MakeExpression",
        "prop2",
        "val2",
        "val2",
        "With",
        "MakeExpression",
        "prop3",
        "val3",
        "val3",
        "With",
        "MakeExpression",
        "prop4",
        "val4",
        "val4",
        "With",
        "MakeExpression",
        "prop5",
        "val5",
        "val5",
        "Create",
        "Repo",
        "M",
        "howMany",
        "records",
        "Clear",
        "howMany",
        "records",
        "fixture",
        "CreateMany",
        "M",
        "howMany",
        "ToList",
        "fixture",
        "Behaviors",
        "Remove",
        "ThrowingRecursionBehavior",
        "fixture",
        "Behaviors",
        "Add",
        "OmitOnRecursionBehavior",
        "Expression",
        "Func",
        "M",
        "V",
        "V",
        "prop",
        "V",
        "val",
        "M",
        "GetProperty",
        "prop",
        "PropertyType",
        "V",
        "propType",
        "valType",
        "propType",
        "valType",
        "Expression",
        "Parameter",
        "M",
        "Expression",
        "Property",
        "entityParam",
        "M",
        "GetProperty",
        "prop",
        "Expression",
        "Lambda",
        "Func",
        "M",
        "V",
        "columnExpr",
        "entityParam"
    ],
    "literals": [
        "\"Invalid context value. Must be 0-2.\"",
        "\"Error in MakeExpression. \"",
        "\" must match \"",
        "\"m\""
    ],
    "variables": [
        "IFixture",
        "fixture",
        "records",
        "CONTEXT1",
        "CONTEXT2",
        "CONTEXT3",
        "Context1Repo",
        "Context2Repo",
        "Context3Repo",
        "propType",
        "valType",
        "entityParam",
        "Expression",
        "columnExpr"
    ],
    "comments": [
        "=================",
        "MAKE SURE TO ADD TO INCLUDE USING STATEMENTS FOR YOUR REPOSITORIES",
        "EXAMPLE:",
        "using MyProject.Repositories",
        "================",
        "Class: Repo\n        Written by: Aaron Gates\n        Date: September 11, 2015\n\n        This class abstracts the process of making fake repositories\n        used for unit testing using AutoFixture and Moq.\n\n        CONSTRUCTOR:\n        Repo<M>(ignoreCirlces?, howMany?) = constructor, M is the database model you want to fake in the repository\n                                            @ignoreCircles (optional) : whether or not to ignore circular\n                                                                        references in the database models,\n                                                                        defaults to false\n                                            @howMany (optional) : how many completely random fake records\n                                                                  to make to fill out the repository,\n                                                                  defaults to 3\n\n        CHAINABLE METHODS:\n        .Add(property, value) = adds a specific record to the repository. \n                                @property : name of the property of the model as a string. \n                                @value : what you want the property to be [can be any type]\n                                **(property1, value1, property2, value2, etc) up to 5 will add more than one property to the same record\n\n        .Empty(howMany?) = removes all records from the repository\n                           @howMany (optional) : same as in the constructor, but defaults to 0\n\n        FINISHING METHODS (MUST CALL AFTER ADDS TO MAKE REPOSITORY USABLE): \n        .C1() = completes and returns a Context1 context repository\n\n        .C2() = completes and returns a Context2 context repository\n\n        .C3() = completes and returns a Context3 context repository",
        "============================",
        "",
        "REPLACE ALL 'CONTEXT1','CONTEXT2','CONTEXT3' WITH YOUR OWN DATABASE CONTEXTS",
        "",
        "============================",
        "the contexts=====IF YOU HAVE MULTIPLE DATABASE CONTEXTS, ADD ENUMERABLE CONSTANTS HERE, OTHERWISE IGNORE",
        "the mock repos",
        "the money makers",
        "the constructor",
        "bring the fake repo to life -- depends on which DB context",
        "------OVERLOADED ADD FUNCTIONS FOR ADDING SPECIFIC PROPERTIES TO RECORDS----//",
        "----------------END OF ADD METHODS-------------//",
        "separated for code clarity",
        "create Expression<Func<M, T>> for add method"
    ],
    "docstrings": [],
    "functions": [
        "C1",
        "C2",
        "C3",
        "Repo",
        "BringToLife",
        "Add",
        "Add",
        "Add",
        "Add",
        "Add",
        "Empty",
        "StopCaringAboutCircles",
        "MakeExpression"
    ],
    "classes": [
        "Repo"
    ]
}