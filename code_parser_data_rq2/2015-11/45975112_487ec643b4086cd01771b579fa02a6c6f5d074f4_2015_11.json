{
    "identifiers": [
        "DebugProtocol",
        "key"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------",
        "Declaration module describing the VS Code debug protocol",
        "---- V8 inspired protocol",
        "Base class of V8 requests, responses, and events.",
        "Sequence number",
        "One of \"request\", \"response\", or \"event\"",
        "Client-initiated request",
        "The command to execute",
        "Object containing arguments for the command",
        "Server-initiated event",
        "Type of event",
        "Event-specific information",
        "Server-initiated response to client request",
        "Sequence number of the corresponding request",
        "Outcome of the request",
        "The command requested",
        "Contains error message if success == false.",
        "Contains request result if success is true and optional error details if success is false.",
        "---- Events",
        "Event message for \"initialized\" event type.\n\t\tThe event indicates that the debugee is ready to accept SetBreakpoint calls.",
        "Event message for \"stopped\" event type.\n\t\tThe event indicates that the execution of the debugee has stopped due to a break condition.\n\t\tThis can be caused by by a break point previously set, a stepping action has completed or by executing a debugger statement.",
        "The reason for the event (such as: 'step', 'breakpoint', 'exception', 'pause')",
        "The thread which was stopped.",
        "Additonal information. E.g. if reason is 'exception', text contains the exception name.",
        "Event message for \"exited\" event type.\n\t\tThe event indicates that the debugee has exited.",
        "The exit code returned from the debuggee.",
        "Event message for \"terminated\" event types.\n\t\tThe event indicates that debugging of the debuggee has terminated.",
        "Event message for \"thread\" event type.\n\t\tThe event indicates that a thread has started or exited.",
        "The reason for the event (such as: 'started', 'exited').",
        "The identifier of the thread.",
        "Event message for \"output\" event type.\n\t\tThe event indicates that the target has produced output.",
        "The category of output (such as: 'console', 'stdout', 'stderr'). If not specified, 'console' is assumed.",
        "The output",
        "---- Requests",
        "On error that is whenever 'success' is false, the body can provide more details.",
        "An optional, structured error message.",
        "Initialize request; value of command field is \"initialize\".",
        "Arguments for \"initialize\" request.",
        "The ID of the debugger adapter. Used to select or verify debugger adapter.",
        "If true all line numbers are 1-based (default).",
        "If true all column numbers are 1-based (default).",
        "Determines in what format paths are specified. Possible values are 'path' or 'uri'. The default is 'path', which is the native format.",
        "Response to Initialize request.",
        "Launch request; value of command field is \"launch\".",
        "Arguments for \"launch\" request.",
        "The launch request has no standardized attributes.",
        "Response to \"launch\" request. This is just an acknowledgement, so no body field is required.",
        "Attach request; value of command field is \"attach\".",
        "Arguments for \"attach\" request.",
        "The attach request has no standardized attributes.",
        "Response to \"attach\" request. This is just an acknowledgement, so no body field is required.",
        "Disconnect request; value of command field is \"disconnect\".",
        "Arguments for \"disconnect\" request.",
        "Response to \"disconnect\" request. This is just an acknowledgement, so no body field is required.",
        "SetBreakpoints request; value of command field is \"setBreakpoints\".\n\t\tSets multiple breakpoints for a single source and clears all previous breakpoints in that source.\n\t\tTo clear all breakpoint for a source, specify an empty array.\n\t\tWhen a breakpoint is hit, a StoppedEvent (event type 'breakpoint') is generated.",
        "Arguments for \"setBreakpoints\" request.",
        "The source location of the breakpoints; either source.path or source.reference must be specified.",
        "The code locations of the breakpoints",
        "Response to \"setBreakpoints\" request.\n\t\tReturned is information about each breakpoint created by this request.\n\t\tThis includes the actual code location and whether the breakpoint could be verified.",
        "Information about the breakpoints. The array elements correspond to the elements of the 'lines' array.",
        "SetExceptionBreakpoints request; value of command field is \"setExceptionBreakpoints\".\n\t\tEnable that the debuggee stops on exceptions with a StoppedEvent (event type 'exception').",
        "Arguments for \"setExceptionBreakpoints\" request.",
        "Names of enabled exception breakpoints.",
        "Response to \"setExceptionBreakpoints\" request. This is just an acknowledgement, so no body field is required.",
        "Continue request; value of command field is \"continue\".\n\t\tThe request starts the debuggee to run again.",
        "Arguments for \"continue\" request.",
        "continue execution for this thread.",
        "Response to \"continue\" request. This is just an acknowledgement, so no body field is required.",
        "Next request; value of command field is \"next\".\n\t\tThe request starts the debuggee to run again for one step.\n\t\tpenDebug will respond with a StoppedEvent (event type 'step') after running the step.",
        "Arguments for \"next\" request.",
        "Continue execution for this thread.",
        "Response to \"next\" request. This is just an acknowledgement, so no body field is required.",
        "StepIn request; value of command field is \"stepIn\".\n\t\tThe request starts the debuggee to run again for one step.\n\t\tThe debug adapter will respond with a StoppedEvent (event type 'step') after running the step.",
        "Arguments for \"stepIn\" request.",
        "Continue execution for this thread.",
        "Response to \"stepIn\" request. This is just an acknowledgement, so no body field is required.",
        "StepOutIn request; value of command field is \"stepOut\".\n\t\tThe request starts the debuggee to run again for one step.\n\t\tpenDebug will respond with a StoppedEvent (event type 'step') after running the step.",
        "Arguments for \"stepOut\" request.",
        "Continue execution for this thread.",
        "Response to \"stepOut\" request. This is just an acknowledgement, so no body field is required.",
        "Pause request; value of command field is \"pause\".\n\t\tThe request suspenses the debuggee.\n\t\tpenDebug will respond with a StoppedEvent (event type 'pause') after a successful 'pause' command.",
        "Arguments for \"pause\" request.",
        "Pause execution for this thread.",
        "Response to \"pause\" request. This is just an acknowledgement, so no body field is required.",
        "StackTrace request; value of command field is \"stackTrace\".\n\t\tThe request returns a stacktrace from the current execution state.",
        "Arguments for \"stackTrace\" request.",
        "Retrieve the stacktrace for this thread.",
        "The maximum number of frames to return. If levels is not specified or 0, all frames are returned.",
        "Response to \"stackTrace\" request.",
        "The frames of the stackframe. If the array has length zero, there are no stackframes available.\n\t\t\t\tThis means that there is no location information available.",
        "Scopes request; value of command field is \"scopes\".\n\t\tThe request returns the variable scopes for a given stackframe ID.",
        "Arguments for \"scopes\" request.",
        "Retrieve the scopes for this stackframe.",
        "Response to \"scopes\" request.",
        "The scopes of the stackframe. If the array has length zero, there are no scopes available.",
        "Variables request; value of command field is \"variables\".\n\t\tRetrieves all children for the given variable reference.",
        "Arguments for \"variables\" request.",
        "The Variable reference.",
        "Response to \"variables\" request.",
        "All children for the given variable reference",
        "Source request; value of command field is \"source\".\n\t\tThe request retrieves the source code for a given source reference.",
        "Arguments for \"source\" request.",
        "The reference to the source. This is the value received in Source.reference.",
        "Response to \"source\" request.",
        "Content of the source reference",
        "Thread request; value of command field is \"threads\".\n\t\tThe request retrieves a list of all threads.",
        "Response to \"threads\" request.",
        "All threads.",
        "Evaluate request; value of command field is \"evaluate\".\n\t\tEvaluates the given expression in the context of the top most stack frame.\n\t\tThe expression has access to any variables and arguments that are in scope.",
        "Arguments for \"evaluate\" request.",
        "The expression to evaluate",
        "Evaluate the expression in the context of this stack frame. If not specified, the expression is evaluated in the global context.",
        "Response to \"evaluate\" request.",
        "The result of the evaluate.",
        "If variablesReference is > 0, the evaluate result is structured and its children can be retrieved by passing variablesReference to the VariablesRequest",
        "---- Types",
        "A structured message object. Used to return errors from requests.",
        "Unique identifier for the message.",
        "A format string for the message. Embedded variables have the form '{name}'.\n\t\t    If variable name starts with an underscore character, the variable does not contain user data (PII) and can be safely used for telemetry purposes.",
        "An object used as a dictionary for looking up the variables in the format string.",
        "if true send to telemetry (Experimental)",
        "if true show user (Experimental)",
        "A Thread",
        "Unique identifier for the thread.",
        "A name of the thread.",
        "A Source .",
        "The short name of the source. Every source returned from the debug adapter has a name. When specifying a source to the debug adapter this name is optional.",
        "The long (absolute) path of the source. It is not guaranteed that the source exists at this location.",
        "If sourceReference > 0 the contents of the source can be retrieved through the SourceRequest. A sourceReference is only valid for a session, so it must not be used to persist a source.",
        "A Stackframe contains the source location.",
        "An identifier for the stack frame. This id can be used to retrieve the scopes of the frame with the 'scopesRequest'.",
        "The name of the stack frame, typically a method name",
        "The optional source of the frame.",
        "The line within the file of the frame. If source is null or doesn't exist, line is 0 and must be ignored.",
        "The column within the line. If source is null or doesn't exist, column is 0 and must be ignored.",
        "A Scope is a named container for variables.",
        "name of the scope (as such 'Arguments', 'Locals')",
        "The variables of this scope can be retrieved by passing the value of variablesReference to the VariablesRequest.",
        "If true, the number of variables in this scope is large or expensive to retrieve.",
        "A Variable is a name/value pair.\n\t\tIf the value is structured (has children), a handle is provided to retrieve the children with the VariablesRequest.",
        "The variable's name",
        "The variable's value. For structured objects this can be a multi line text, e.g. for a function the body of a function.",
        "If variablesReference is > 0, the variable is structured and its children can be retrieved by passing variablesReference to the VariablesRequest.",
        "Information about a Breakpoint created in the setBreakpoints request.",
        "If true breakpoint could be set (but not necessarily at the correct location).",
        "The actual location of the breakpoint."
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}