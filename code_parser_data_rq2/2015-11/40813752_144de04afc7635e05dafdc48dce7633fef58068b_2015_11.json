{
    "identifiers": [
        "abc",
        "six",
        "jarvis",
        "log",
        "logging",
        "jarvis",
        "common",
        "exception",
        "logging",
        "get_logger",
        "six",
        "add_metaclass",
        "abc",
        "ABCMeta",
        "__class__",
        "property",
        "_name",
        "abc",
        "abstractmethod",
        "result",
        "abc",
        "abstractmethod",
        "exc",
        "abc",
        "abstractmethod",
        "abc",
        "abstractmethod",
        "abc",
        "abstractmethod",
        "prologue",
        "work",
        "epilogue",
        "KeyboardInterrupt",
        "interrupted",
        "exception",
        "JarvisException",
        "exc",
        "task_fail",
        "exc",
        "task_done",
        "result",
        "result",
        "Worker",
        "parent",
        "parser",
        "Command",
        "parent",
        "parser",
        "setup",
        "property",
        "_parent",
        "property",
        "_args",
        "_discover_attribute",
        "_args",
        "property",
        "_command_line",
        "_discover_attribute",
        "_command_line",
        "attribute",
        "parent",
        "command_tree",
        "command_tree",
        "pop",
        "hasattr",
        "parent",
        "attribute",
        "getattr",
        "parent",
        "attribute",
        "parent",
        "parent",
        "command_tree",
        "append",
        "parent",
        "parent",
        "ValueError",
        "attribute",
        "result",
        "LOG",
        "info",
        "name",
        "result",
        "exc",
        "LOG",
        "exception",
        "name",
        "exc",
        "exc",
        "LOG",
        "warning",
        "name",
        "KeyboardInterrupt",
        "abc",
        "abstractmethod",
        "abc",
        "abstractmethod",
        "parent",
        "parser",
        "Group",
        "parent",
        "parser",
        "setup",
        "_bind_commands",
        "property",
        "_parent",
        "command",
        "parser",
        "commands",
        "check_command",
        "command",
        "LOG",
        "error",
        "command",
        "bind",
        "command",
        "parser",
        "name",
        "parser",
        "_parsers",
        "parser",
        "name",
        "_parsers",
        "name",
        "KeyError",
        "ValueError",
        "name",
        "command",
        "issubclass",
        "command",
        "Command",
        "Group",
        "command",
        "parser_name",
        "_get_parser",
        "parser_name",
        "_childs",
        "append",
        "command",
        "parser",
        "abc",
        "abstractmethod",
        "Group",
        "Worker",
        "command_line",
        "Client",
        "parent",
        "parser",
        "command_line",
        "property",
        "_args",
        "property",
        "_command_line",
        "result",
        "exc",
        "isinstance",
        "exc",
        "exception",
        "JarvisException",
        "LOG",
        "exception",
        "exc",
        "abc",
        "abstractmethod",
        "_parser",
        "parse_args",
        "command_line",
        "_args",
        "LOG",
        "warning",
        "getattr",
        "_args",
        "work_function",
        "exception",
        "NotFound",
        "container",
        "_args",
        "work_function"
    ],
    "literals": [
        "\"args\"",
        "\"command_line\"",
        "\"The %(attribute)s attribute is missing from the \"",
        "\"client tree.\"",
        "\"attribute\"",
        "\"Execution of command %(name)s ends with success. \"",
        "\"(%(result)s)\"",
        "\"name\"",
        "\"result\"",
        "\"Failed to run %(name)r: %(reason)s\"",
        "\"name\"",
        "\"reason\"",
        "\"Command %(name)s interrupted by the user.\"",
        "\"name\"",
        "\"The command %(command)r is not recognized.\"",
        "\"command\"",
        "\"Invalid parser name %(name)s\"",
        "\"name\"",
        "\"Command line parsing failed.\"",
        "\"work\"",
        "\"work\""
    ],
    "variables": [
        "LOG",
        "_name",
        "result",
        "result",
        "_args",
        "_command_line",
        "_parent",
        "_parser",
        "_defaults",
        "_install",
        "_args",
        "_command_line",
        "command_tree",
        "parent",
        "commands",
        "_parent",
        "_parser",
        "_parsers",
        "_childs",
        "name",
        "parser",
        "_args",
        "_command_line",
        "_args",
        "work_function"
    ],
    "comments": [
        "pylint: disable=no-self-use",
        "Setup the current command group",
        "Bind all the received commands"
    ],
    "docstrings": [
        "\"\"\"\nClient base-classes:\n    (Beginning of) the contract that commands and parsers must follow.\n\"\"\"",
        "\"\"\"Contract class for all the commands and clients.\"\"\"",
        "\"\"\"Command name.\"\"\"",
        "\"\"\"What to execute after successfully finished processing a task.\"\"\"",
        "\"\"\"What to do when the program fails processing a task.\"\"\"",
        "\"\"\"Extend the parser configuration in order to expose this command.\"\"\"",
        "\"\"\"What to execute when keyboard interrupts arrive.\"\"\"",
        "\"\"\"Executed once before the command running.\"\"\"",
        "\"\"\"Override this with your desired procedures.\"\"\"",
        "\"\"\"Executed once after the command running.\"\"\"",
        "\"\"\"Run the command.\"\"\"",
        "\"\"\"Contract class for all the commands.\"\"\"",
        "\"\"\"Return the object that contains the current command.\"\"\"",
        "\"\"\"The command line arguments parsed by the client.\"\"\"",
        "\"\"\"Command line provided to parser.\"\"\"",
        "\"\"\"Search for the received attribute in the command tree.\"\"\"",
        "\"\"\"What to execute after successfully finished processing a task.\"\"\"",
        "\"\"\"What to do when the program fails processing a task.\"\"\"",
        "\"\"\"What to execute when keyboard interrupts arrive.\"\"\"",
        "\"\"\"Extend the parser configuration in order to expose this command.\"\"\"",
        "\"\"\"Override this with your desired procedures.\"\"\"",
        "\"\"\"Contract class for all the command groups.\n\n    :ivar: commands: A list which contains (command, parser_name) tuples.\n\n    ::\n    Example:\n    ::\n        class Example(Group):\n\n            commands = [\n                (ExampleOne, \"main_parser\"),\n                (ExampleTwo, \"main_parser),\n                (ExampleThree, \"second_parser\")\n            ]\n\n            # ...\n    \"\"\"",
        "\"\"\"Return the object that contains the current command group.\"\"\"",
        "\"\"\"Bind the received commands to the current command group.\"\"\"",
        "\"\"\"Register a new parser in this command.\"\"\"",
        "\"\"\"Get an parser from the current command group.\"\"\"",
        "\"\"\"Check if the received command is valid and can be\n        property used.\n        \"\"\"",
        "\"\"\"Bind the received command to the current one.\"\"\"",
        "\"\"\"Extend the parser configuration in order to expose this command.\"\"\"",
        "\"\"\"Contract class for all the command line applications.\n\n    :ivar: commands: A list which contains (command, parser_name) tuples\n\n    ::\n    Example:\n    ::\n        class Example(CommandGroup):\n\n            commands = [\n                (ExampleOne, \"main_parser\"),\n                (ExampleTwo, \"main_parser),\n                (ExampleThree, \"second_parser\")\n            ]\n\n            # ...\n    \"\"\"",
        "\"\"\"The arguments after the command line was parsed.\"\"\"",
        "\"\"\"Command line provided to parser.\"\"\"",
        "\"\"\"What to execute after successfully finished processing a task.\"\"\"",
        "\"\"\"What to do when the program fails processing a task.\"\"\"",
        "\"\"\"What to execute when keyboard interrupts arrive.\"\"\"",
        "\"\"\"Extend the parser configuration in order to expose all\n        the received commands.\n\n        Exemple:\n        ::\n            # ...\n            self._parser = argparse.ArgumentParser(\n                description=description)\n            self._main_parser.add_argument(\n                \"--example\", help=\"just an example\")\n            subcommands = self._parser.add_subparsers(\n                title=\"[sub-commands]\")\n            self._register_parser(\"subcommands\", subcommands)\n            # ...\n        \"\"\"",
        "\"\"\"Executed once before the command running.\"\"\"",
        "\"\"\"Parse the command line.\"\"\""
    ],
    "functions": [
        "name",
        "task_done",
        "task_fail",
        "setup",
        "interrupted",
        "prologue",
        "work",
        "epilogue",
        "run",
        "parent",
        "args",
        "command_line",
        "_discover_attribute",
        "task_done",
        "task_fail",
        "interrupted",
        "setup",
        "work",
        "parent",
        "_bind_commands",
        "_register_parser",
        "_get_parser",
        "check_command",
        "bind",
        "setup",
        "args",
        "command_line",
        "task_done",
        "task_fail",
        "interrupted",
        "setup",
        "prologue",
        "work"
    ],
    "classes": [
        "Worker",
        "Command",
        "Group",
        "Client"
    ]
}