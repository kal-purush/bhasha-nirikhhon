{
    "identifiers": [
        "image",
        "image",
        "image",
        "image",
        "CanvasImage",
        "CanvasImage",
        "imageData",
        "imageData",
        "CanvasImage",
        "CanvasImage",
        "CanvasImage",
        "ColorThief",
        "sourceImage",
        "quality",
        "sourceImage",
        "quality",
        "palette",
        "dominantColor",
        "ColorThief",
        "sourceImage",
        "colorCount",
        "quality",
        "colorCount",
        "colorCount",
        "quality",
        "quality",
        "quality",
        "CanvasImage",
        "sourceImage",
        "image",
        "imageData",
        "image",
        "i",
        "pixelCount",
        "i",
        "i",
        "quality",
        "offset",
        "i",
        "r",
        "pixels",
        "offset",
        "g",
        "pixels",
        "offset",
        "b",
        "pixels",
        "offset",
        "a",
        "pixels",
        "offset",
        "a",
        "r",
        "g",
        "b",
        "pixelArray",
        "r",
        "g",
        "b",
        "MMCQ",
        "pixelArray",
        "colorCount",
        "cmap",
        "cmap",
        "image",
        "palette",
        "pv",
        "array",
        "f",
        "f",
        "array",
        "d",
        "i",
        "o",
        "i",
        "f",
        "o",
        "d",
        "array",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "array",
        "f",
        "array",
        "f",
        "p",
        "d",
        "i",
        "o",
        "i",
        "p",
        "f",
        "o",
        "d",
        "p",
        "d",
        "p",
        "d",
        "array",
        "f",
        "f",
        "pv",
        "array",
        "f",
        "array",
        "sigbits",
        "r",
        "g",
        "b",
        "r",
        "sigbits",
        "g",
        "sigbits",
        "b",
        "comparator",
        "contents",
        "comparator",
        "sorted",
        "o",
        "contents",
        "o",
        "sorted",
        "index",
        "sorted",
        "sort",
        "index",
        "index",
        "contents",
        "contents",
        "index",
        "sorted",
        "sort",
        "contents",
        "contents",
        "f",
        "contents",
        "f",
        "sorted",
        "sort",
        "contents",
        "r1",
        "r2",
        "g1",
        "g2",
        "b1",
        "b2",
        "histo",
        "vbox",
        "r1",
        "vbox",
        "r2",
        "vbox",
        "g1",
        "vbox",
        "g2",
        "vbox",
        "b1",
        "vbox",
        "b2",
        "vbox",
        "histo",
        "VBox",
        "force",
        "vbox",
        "force",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "force",
        "vbox",
        "vbox",
        "force",
        "i",
        "vbox",
        "i",
        "vbox",
        "i",
        "j",
        "vbox",
        "j",
        "vbox",
        "j",
        "k",
        "vbox",
        "k",
        "vbox",
        "k",
        "index",
        "getColorIndex",
        "i",
        "j",
        "k",
        "npix",
        "histo",
        "index",
        "vbox",
        "npix",
        "vbox",
        "vbox",
        "VBox",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "force",
        "vbox",
        "vbox",
        "force",
        "sigbits",
        "i",
        "vbox",
        "i",
        "vbox",
        "i",
        "j",
        "vbox",
        "j",
        "vbox",
        "j",
        "k",
        "vbox",
        "k",
        "vbox",
        "k",
        "histoindex",
        "getColorIndex",
        "i",
        "j",
        "k",
        "hval",
        "histo",
        "histoindex",
        "ntot",
        "hval",
        "rsum",
        "hval",
        "i",
        "mult",
        "gsum",
        "hval",
        "j",
        "mult",
        "bsum",
        "hval",
        "k",
        "mult",
        "ntot",
        "vbox",
        "rsum",
        "ntot",
        "gsum",
        "ntot",
        "bsum",
        "ntot",
        "vbox",
        "mult",
        "vbox",
        "vbox",
        "mult",
        "vbox",
        "vbox",
        "mult",
        "vbox",
        "vbox",
        "vbox",
        "pixel",
        "pixel",
        "rshift",
        "gval",
        "pixel",
        "rshift",
        "bval",
        "pixel",
        "rshift",
        "rval",
        "vbox",
        "rval",
        "vbox",
        "gval",
        "vbox",
        "gval",
        "vbox",
        "bval",
        "vbox",
        "bval",
        "vbox",
        "PQueue",
        "a",
        "b",
        "pv",
        "a",
        "a",
        "b",
        "b",
        "CMap",
        "vbox",
        "vbox",
        "vbox",
        "vb",
        "vb",
        "color",
        "i",
        "vboxes",
        "i",
        "vboxes",
        "i",
        "color",
        "vboxes",
        "i",
        "color",
        "color",
        "i",
        "vboxes",
        "i",
        "d2",
        "color",
        "vboxes",
        "i",
        "color",
        "vboxes",
        "i",
        "color",
        "vboxes",
        "i",
        "d2",
        "d1",
        "d1",
        "d1",
        "d2",
        "pColor",
        "vboxes",
        "i",
        "pColor",
        "vboxes",
        "a",
        "b",
        "pv",
        "pv",
        "a",
        "pv",
        "b",
        "vboxes",
        "lowest",
        "lowest",
        "lowest",
        "vboxes",
        "vboxes",
        "vboxes",
        "idx",
        "highest",
        "highest",
        "highest",
        "vboxes",
        "idx",
        "pixels",
        "sigbits",
        "histosize",
        "pixels",
        "pixel",
        "rval",
        "pixel",
        "rshift",
        "gval",
        "pixel",
        "rshift",
        "bval",
        "pixel",
        "rshift",
        "index",
        "getColorIndex",
        "rval",
        "gval",
        "bval",
        "histo",
        "index",
        "histo",
        "index",
        "histo",
        "pixels",
        "histo",
        "pixels",
        "pixel",
        "rval",
        "pixel",
        "rshift",
        "gval",
        "pixel",
        "rshift",
        "bval",
        "pixel",
        "rshift",
        "rval",
        "rmin",
        "rmin",
        "rval",
        "rval",
        "rmax",
        "rmax",
        "rval",
        "gval",
        "gmin",
        "gmin",
        "gval",
        "gval",
        "gmax",
        "gmax",
        "gval",
        "bval",
        "bmin",
        "bmin",
        "bval",
        "bval",
        "bmax",
        "bmax",
        "bval",
        "VBox",
        "rmin",
        "rmax",
        "gmin",
        "gmax",
        "bmin",
        "bmax",
        "histo",
        "histo",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "vbox",
        "pv",
        "rw",
        "gw",
        "bw",
        "vbox",
        "vbox",
        "maxw",
        "rw",
        "i",
        "vbox",
        "i",
        "vbox",
        "i",
        "sum",
        "j",
        "vbox",
        "j",
        "vbox",
        "j",
        "k",
        "vbox",
        "k",
        "vbox",
        "k",
        "index",
        "getColorIndex",
        "i",
        "j",
        "k",
        "sum",
        "histo",
        "index",
        "total",
        "sum",
        "partialsum",
        "i",
        "total",
        "maxw",
        "gw",
        "i",
        "vbox",
        "i",
        "vbox",
        "i",
        "sum",
        "j",
        "vbox",
        "j",
        "vbox",
        "j",
        "k",
        "vbox",
        "k",
        "vbox",
        "k",
        "index",
        "getColorIndex",
        "j",
        "i",
        "k",
        "sum",
        "histo",
        "index",
        "total",
        "sum",
        "partialsum",
        "i",
        "total",
        "i",
        "vbox",
        "i",
        "vbox",
        "i",
        "sum",
        "j",
        "vbox",
        "j",
        "vbox",
        "j",
        "k",
        "vbox",
        "k",
        "vbox",
        "k",
        "index",
        "getColorIndex",
        "j",
        "k",
        "i",
        "sum",
        "histo",
        "index",
        "total",
        "sum",
        "partialsum",
        "i",
        "total",
        "partialsum",
        "d",
        "i",
        "lookaheadsum",
        "i",
        "total",
        "d",
        "color",
        "color",
        "color",
        "i",
        "vbox",
        "dim1",
        "i",
        "vbox",
        "dim2",
        "i",
        "partialsum",
        "i",
        "total",
        "vbox1",
        "vbox",
        "vbox2",
        "vbox",
        "left",
        "i",
        "vbox",
        "dim1",
        "right",
        "vbox",
        "dim2",
        "i",
        "left",
        "right",
        "d2",
        "vbox",
        "dim2",
        "i",
        "right",
        "d2",
        "vbox",
        "dim1",
        "i",
        "left",
        "partialsum",
        "d2",
        "d2",
        "count2",
        "lookaheadsum",
        "d2",
        "count2",
        "partialsum",
        "d2",
        "count2",
        "lookaheadsum",
        "d2",
        "vbox1",
        "dim2",
        "d2",
        "vbox2",
        "dim1",
        "vbox1",
        "dim2",
        "vbox1",
        "vbox2",
        "maxw",
        "rw",
        "doCut",
        "maxw",
        "gw",
        "doCut",
        "doCut",
        "pixels",
        "maxcolors",
        "pixels",
        "maxcolors",
        "maxcolors",
        "getHisto",
        "pixels",
        "sigbits",
        "histo",
        "nColors",
        "nColors",
        "maxcolors",
        "vboxFromPixels",
        "pixels",
        "histo",
        "PQueue",
        "a",
        "b",
        "pv",
        "a",
        "b",
        "pq",
        "vbox",
        "lh",
        "target",
        "niters",
        "maxIterations",
        "vbox",
        "lh",
        "vbox",
        "lh",
        "vbox",
        "niters",
        "medianCutApply",
        "histo",
        "vbox",
        "vboxes",
        "vboxes",
        "vbox1",
        "lh",
        "vbox1",
        "vbox2",
        "lh",
        "vbox2",
        "ncolors",
        "ncolors",
        "target",
        "niters",
        "maxIterations",
        "iter",
        "pq",
        "fractByPopulations",
        "maxcolors",
        "PQueue",
        "a",
        "b",
        "pv",
        "a",
        "a",
        "b",
        "b",
        "pq",
        "pq2",
        "pq",
        "iter",
        "pq2",
        "maxcolors",
        "pq2",
        "CMap",
        "pq2",
        "cmap",
        "pq2",
        "cmap",
        "quantize"
    ],
    "literals": [
        "'canvas'",
        "'2d'",
        "'undefined'",
        "'undefined'",
        "'1'",
        "'2'",
        "'r'",
        "'g'",
        "'b'"
    ],
    "variables": [
        "CanvasImage",
        "ColorThief",
        "palette",
        "dominantColor",
        "image",
        "imageData",
        "pixels",
        "pixelCount",
        "pixelArray",
        "i",
        "offset",
        "r",
        "g",
        "b",
        "a",
        "cmap",
        "palette",
        "pv",
        "o",
        "o",
        "MMCQ",
        "sigbits",
        "rshift",
        "maxIterations",
        "fractByPopulations",
        "contents",
        "sorted",
        "vbox",
        "vbox",
        "vbox",
        "histo",
        "npix",
        "i",
        "j",
        "k",
        "vbox",
        "vbox",
        "histo",
        "ntot",
        "mult",
        "rsum",
        "gsum",
        "bsum",
        "hval",
        "i",
        "j",
        "k",
        "histoindex",
        "vbox",
        "rval",
        "vboxes",
        "i",
        "vboxes",
        "d1",
        "d2",
        "pColor",
        "i",
        "vboxes",
        "lowest",
        "idx",
        "highest",
        "histosize",
        "histo",
        "index",
        "rval",
        "gval",
        "bval",
        "rmin",
        "rmax",
        "gmin",
        "gmax",
        "bmin",
        "bmax",
        "rval",
        "gval",
        "bval",
        "rw",
        "gw",
        "bw",
        "maxw",
        "total",
        "partialsum",
        "lookaheadsum",
        "i",
        "j",
        "k",
        "sum",
        "index",
        "dim1",
        "dim2",
        "left",
        "right",
        "vbox1",
        "vbox2",
        "d2",
        "count2",
        "histo",
        "histosize",
        "nColors",
        "vbox",
        "pq",
        "ncolors",
        "niters",
        "vbox",
        "vboxes",
        "vbox1",
        "vbox2",
        "pq2",
        "cmap"
    ],
    "comments": [
        "!\n * Color Thief v2.0\n * by Lokesh Dhakar - http://www.lokeshdhakar.com\n *\n * Thanks\n * ------\n * Nick Rabinowitz - For creating quantize.js.\n * John Schulz - For clean up and optimization. @JFSIII\n * Nathan Spady - For adding drag and drop support to the demo page.\n *\n * License\n * -------\n * Copyright 2011, 2015 Lokesh Dhakar\n * Released under the MIT license\n * https://raw.githubusercontent.com/lokesh/color-thief/master/LICENSE\n *",
        "CanvasImage Class\n  Class that wraps the html image element and canvas.\n  It also simplifies some of the canvas context manipulation\n  with a set of helper functions.",
        "Create custom CanvasImage object",
        "Store the RGB values in an array format suitable for quantize function",
        "If pixel is mostly opaque and not white",
        "Send array to quantize function which clusters values",
        "using median cut algorithm",
        "Clean up",
        "!\n * quantize.js Copyright 2008 Nick Rabinowitz.\n * Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php",
        "fill out a couple protovis dependencies",
        "!\n * Block below copied from Protovis: http://mbostock.github.com/protovis/\n * Copyright 2010 Stanford Visualization Group\n * Licensed under the BSD License: http://www.opensource.org/licenses/bsd-license.php",
        "private constants",
        "get reduced-space color index for a pixel",
        "Simple priority queue",
        "3d color space box",
        "console.log('empty box');",
        "Color map",
        "XXX: won't  work yet",
        "force darkest color to black if everything < 5",
        "force lightest color to white if everything > 251",
        "histo (1-d array, giving the number of pixels in",
        "each quantized region of color space), or null on error",
        "find min/max",
        "only one pixel, no split",
        "Find the partial sum arrays along the selected axis.",
        "maxw == bw",
        "avoid 0-count boxes",
        "set dimensions",
        "console.log('vbox counts:', vbox.count(), vbox1.count(), vbox2.count());",
        "determine the cut planes",
        "short-circuit",
        "console.log('wrong number of maxcolors');",
        "XXX: check color content and convert to grayscale if insufficient",
        "check that we aren't below maxcolors already",
        "XXX: generate the new colors from the histo and return",
        "get the beginning vbox from the colors",
        "inner function to do the iteration",
        "just put it back",
        "do the cut",
        "console.log(\"vbox1 not defined; shouldn't happen!\");",
        "vbox2 can be null",
        "console.log(\"infinite loop; perhaps too few pixels!\");",
        "first set of colors, sorted by population",
        "Re-sort by the product of pixel occupancy times the size in color space.",
        "next set - generate the median cuts using the (npix * vol) sorting.",
        "calculate the actual colors"
    ],
    "docstrings": [
        "* getColor(sourceImage[, quality])\n * returns {r: num, g: num, b: num}\n *\n * Use the median cut algorithm provided by quantize.js to cluster similar\n * colors and return the base color from the largest cluster.\n *\n * Quality is an optional argument. It needs to be an integer. 1 is the highest quality settings.\n * 10 is the default. There is a trade-off between quality and speed. The bigger the number, the\n * faster a color will be returned but the greater the likelihood that it will not be the visually\n * most dominant color.\n *\n *",
        "* getPalette(sourceImage[, colorCount, quality])\n * returns array[ {r: num, g: num, b: num}, {r: num, g: num, b: num}, ...]\n *\n * Use the median cut algorithm provided by quantize.js to cluster similar colors.\n *\n * colorCount determines the size of the palette; the number of colors returned. If not set, it\n * defaults to 10.\n *\n * BUGGY: Function does not always return the requested amount of colors. It can be +/- 2.\n *\n * quality is an optional argument. It needs to be an integer. 1 is the highest quality settings.\n * 10 is the default. There is a trade-off between quality and speed. The bigger the number, the\n * faster the palette generation but the greater the likelihood that colors will be missed.\n *\n *",
        "* Basic Javascript port of the MMCQ (modified median cut quantization)\n * algorithm from the Leptonica library (http://www.leptonica.com/).\n * Returns a color map you can use to map original pixels to the reduced\n * palette. Still a work in progress.\n *\n * @author Nick Rabinowitz\n * @example\n\n// array of pixels as [R,G,B] arrays\nvar myPixels = [[190,197,190], [202,204,200], [207,214,210], [211,214,211], [205,207,207]\n                // etc\n                ];\nvar maxColors = 4;\n\nvar cmap = MMCQ.quantize(myPixels, maxColors);\nvar newPalette = cmap.palette();\nvar newPixels = myPixels.map(function(p) {\n    return cmap.map(p);\n});"
    ],
    "functions": [
        "getColorIndex",
        "PQueue",
        "sort",
        "VBox",
        "CMap",
        "getHisto",
        "vboxFromPixels",
        "medianCutApply",
        "doCut",
        "quantize",
        "iter"
    ],
    "classes": []
}