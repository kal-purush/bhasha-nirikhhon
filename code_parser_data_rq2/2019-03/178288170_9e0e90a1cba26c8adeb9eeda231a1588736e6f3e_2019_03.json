{
    "identifiers": [
        "io",
        "rainfall",
        "store",
        "client",
        "io",
        "rainfall",
        "store",
        "core",
        "ChangeReport",
        "io",
        "rainfall",
        "store",
        "core",
        "ClientJob",
        "io",
        "rainfall",
        "store",
        "core",
        "OperationOutput",
        "io",
        "rainfall",
        "store",
        "core",
        "StatsLog",
        "io",
        "rainfall",
        "store",
        "core",
        "TestRun",
        "io",
        "rainfall",
        "store",
        "data",
        "CompressionService",
        "io",
        "rainfall",
        "store",
        "data",
        "Payload",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "com",
        "terracottatech",
        "qa",
        "angela",
        "client",
        "filesystem",
        "TransportableFile",
        "com",
        "terracottatech",
        "qa",
        "angela",
        "common",
        "clientconfig",
        "ClientId",
        "java",
        "io",
        "File",
        "java",
        "io",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Stream",
        "java",
        "lang",
        "getenv",
        "java",
        "util",
        "Optional",
        "ofNullable",
        "LOGGER",
        "LoggerFactory",
        "getLogger",
        "outputFileExtensions",
        "OperationOutput",
        "allFormats",
        "writer",
        "compressionService",
        "writer",
        "compressionService",
        "writer",
        "writer",
        "compressionService",
        "compressionService",
        "Override",
        "caseName",
        "className",
        "terracottaVersion",
        "run",
        "TestRun",
        "builder",
        "checksum",
        "getPreviousSuccessfulCommit",
        "className",
        "className",
        "version",
        "terracottaVersion",
        "build",
        "runId",
        "writer",
        "addRun",
        "caseName",
        "run",
        "LOGGER",
        "info",
        "runId",
        "run",
        "caseName",
        "runId",
        "e",
        "LOGGER",
        "error",
        "caseName",
        "e",
        "Override",
        "runId",
        "status",
        "success",
        "writer",
        "setStatus",
        "runId",
        "status",
        "success",
        "LOGGER",
        "info",
        "runId",
        "status",
        "LOGGER",
        "error",
        "runId",
        "success",
        "e",
        "LOGGER",
        "error",
        "runId",
        "status",
        "e",
        "getMessage",
        "e",
        "envVar",
        "ofNullable",
        "getenv",
        "envVar",
        "orElseGet",
        "LOGGER",
        "warn",
        "envVar",
        "Override",
        "runId",
        "clientNumber",
        "clientId",
        "details",
        "outputPath",
        "clientJob",
        "ClientJob",
        "builder",
        "host",
        "clientId",
        "getHostname",
        "clientNumber",
        "clientNumber",
        "symbolicName",
        "clientId",
        "getSymbolicName",
        "getSymbolicName",
        "details",
        "join",
        "details",
        "build",
        "jobId",
        "writer",
        "addClientJob",
        "runId",
        "clientJob",
        "LOGGER",
        "info",
        "jobId",
        "clientJob",
        "runId",
        "uploadOutputs",
        "jobId",
        "outputPath",
        "jobId",
        "e",
        "LOGGER",
        "error",
        "runId",
        "e",
        "getMessage",
        "e",
        "jobId",
        "outputPath",
        "files",
        "outputPath",
        "listFiles",
        "f",
        "f",
        "isDirectory",
        "f",
        "getName",
        "contains",
        "files",
        "msg",
        "format",
        "jobId",
        "outputPath",
        "LOGGER",
        "error",
        "msg",
        "msg",
        "Stream",
        "of",
        "files",
        "forEach",
        "file",
        "toks",
        "file",
        "getName",
        "split",
        "extension",
        "toks",
        "outputFileExtensions",
        "contains",
        "extension",
        "data",
        "Files",
        "readAllBytes",
        "file",
        "toPath",
        "payload",
        "compressionService",
        "compress",
        "data",
        "output",
        "OperationOutput",
        "builder",
        "operation",
        "toks",
        "format",
        "extension",
        "payload",
        "payload",
        "build",
        "outputId",
        "writer",
        "addOutput",
        "jobId",
        "output",
        "LOGGER",
        "info",
        "file",
        "outputId",
        "jobId",
        "e",
        "LOGGER",
        "error",
        "jobId",
        "file",
        "getPath",
        "e",
        "Override",
        "runId",
        "host",
        "transFile",
        "fileNameBase",
        "transFile",
        "getName",
        "replaceAll",
        "content",
        "transFile",
        "getContent",
        "payload",
        "compressionService",
        "compress",
        "content",
        "statsLog",
        "StatsLog",
        "builder",
        "host",
        "host",
        "fileNameBase",
        "payload",
        "payload",
        "build",
        "logId",
        "writer",
        "addStatsLog",
        "runId",
        "statsLog",
        "LOGGER",
        "info",
        "logId",
        "statsLog",
        "runId",
        "logId",
        "e",
        "LOGGER",
        "error",
        "runId",
        "e",
        "getMessage",
        "e",
        "Override",
        "runId",
        "threshold",
        "writer",
        "checkRegression",
        "runId",
        "threshold",
        "e",
        "LOGGER",
        "error",
        "runId",
        "threshold",
        "e",
        "getMessage",
        "e"
    ],
    "literals": [
        "\"Test run created: ID={}, run={}, test case = {}.\"",
        "\"Failed to add a run for the test case name '{}'; \"",
        "\"check that the test case exists.\"",
        "\"Status of run {} set to {}.\"",
        "\"Run ID not found: {}.\"",
        "\"Failed to update the status for the run '{}' to {}: {}\"",
        "\"GIT_PREVIOUS_SUCCESSFUL_COMMIT\"",
        "\" environment variable not defined.\"",
        "\"\"",
        "\"\\n\"",
        "\"Client job created: ID={}, job={}, run ID = {}.\"",
        "\"Failed to add client job to run {}: {}.\"",
        "\"Failed to add client job.\"",
        "\".\"",
        "\"Failed to locate the output for client job %d in %s.\"",
        "\"\\\\.\"",
        "\"Output file {} uploaded: ID={}, job ID = {}.\"",
        "\"Output upload failed for client job {}, file is {}.\"",
        "\"Output upload failed.\"",
        "\"\\\\.log$\"",
        "\"\"",
        "\"Stats log created: ID={}, log = {}, run ID = {}.\"",
        "\"Failed to add stats log to run {}: {}.\"",
        "\"Failed to add stats log.\"",
        "\"Failed to check regression for run {} \"",
        "\"with threshold {}: {}.\""
    ],
    "variables": [
        "writer",
        "compressionService"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright (c) 2014-2019 Aur√©lien Broszniowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License."
    ],
    "functions": [
        "DefaultStoreClientService",
        "addRun",
        "setStatus",
        "getPreviousSuccessfulCommit",
        "addClientJob",
        "uploadOutputs",
        "addMetrics",
        "ChangeReport",
        "checkRegression"
    ],
    "classes": [
        "DefaultStoreClientService"
    ]
}