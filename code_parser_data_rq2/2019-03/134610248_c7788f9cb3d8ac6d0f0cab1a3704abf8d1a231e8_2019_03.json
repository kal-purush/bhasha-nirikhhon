{
    "identifiers": [
        "n",
        "nx",
        "ny",
        "hcp",
        "math",
        "numpy",
        "np",
        "nx",
        "n",
        "ny",
        "math",
        "sqrt",
        "third",
        "math",
        "sqrt",
        "np",
        "zeros",
        "n",
        "node",
        "n",
        "node",
        "nx",
        "node",
        "nx",
        "ny",
        "node",
        "nx",
        "ny",
        "hcp",
        "ix",
        "jx",
        "kx",
        "root3",
        "jx",
        "third",
        "kx",
        "twothirdroot6",
        "kx",
        "xyz",
        "node",
        "ix",
        "jx",
        "kx",
        "node",
        "xyz",
        "model",
        "n",
        "nx",
        "ny",
        "hcp",
        "crpm",
        "ffn_bodyplan",
        "get_bodyplan",
        "crpm",
        "ffn_bodyplan",
        "init_ffn",
        "model",
        "model",
        "stop",
        "model",
        "get_bodyplan",
        "model",
        "bodyplan",
        "n",
        "bodyplan",
        "bodyplan",
        "bodyplan",
        "init_ffn",
        "bodyplan",
        "coords",
        "n",
        "nx",
        "ny",
        "hcp",
        "nclass",
        "model",
        "data",
        "n",
        "nx",
        "ny",
        "hcp",
        "numpy",
        "np",
        "random",
        "crpm",
        "fwdprop",
        "fwdprop",
        "crpm",
        "activationfunctions",
        "activation",
        "np",
        "exp",
        "np",
        "log",
        "maxepoch",
        "np",
        "arange",
        "maxepoch",
        "init_map",
        "model",
        "n",
        "nx",
        "ny",
        "hcp",
        "np",
        "zeros",
        "nclass",
        "data",
        "shape",
        "fwdprop",
        "data",
        "model",
        "continuelearning",
        "np",
        "random",
        "randint",
        "data",
        "shape",
        "state",
        "obv",
        "np",
        "linalg",
        "norm",
        "axis",
        "np",
        "argmin",
        "dist",
        "np",
        "exp",
        "count",
        "activation",
        "dist",
        "sigma",
        "reshape",
        "n",
        "lfunc",
        "count",
        "nfunc",
        "count",
        "count",
        "maxepoch",
        "node",
        "n",
        "inode",
        "n",
        "node",
        "inode",
        "cum",
        "np",
        "linalg",
        "norm",
        "inode",
        "node",
        "np",
        "linalg",
        "norm",
        "inode",
        "node",
        "cum",
        "np",
        "max",
        "np",
        "exp",
        "cum",
        "cum",
        "np",
        "sum",
        "cum",
        "cum",
        "nclass",
        "np",
        "zeros",
        "nclass",
        "np",
        "random",
        "randint",
        "n",
        "size",
        "nclass",
        "icent",
        "nclass",
        "cidx",
        "icent",
        "np",
        "zeros",
        "nclass",
        "continuelearning",
        "np",
        "zeros",
        "nclass",
        "np",
        "zeros",
        "nclass",
        "node",
        "n",
        "icent",
        "nclass",
        "np",
        "linalg",
        "norm",
        "node",
        "centroid",
        "icent",
        "np",
        "argmin",
        "dist",
        "cum",
        "closestnode",
        "node",
        "node",
        "norm",
        "closestnode",
        "node",
        "cum",
        "norm",
        "count",
        "count",
        "maxepoch",
        "obv",
        "data",
        "shape",
        "np",
        "argmin",
        "np",
        "linalg",
        "norm",
        "state",
        "obv",
        "axis",
        "icent",
        "nclass",
        "np",
        "linalg",
        "norm",
        "node",
        "centroid",
        "icent",
        "np",
        "argmin",
        "dist",
        "binary",
        "closestnode",
        "pred"
    ],
    "literals": [
        "\"activation\"",
        "\"logistic\"",
        "\"activation\"",
        "\"softmax\"",
        "\"som::init_map - input model is not a classifier.\"",
        "\"n\"",
        "\"n\"",
        "\"activation\"",
        "\"gaussian\"",
        "\"regval\"",
        "\"lreg\"",
        "\"coord\"",
        "\"weightdot\"",
        "\"activity\"",
        "\"weight\"",
        "\"weightdot\"",
        "\"lreg\"",
        "\"regval\"",
        "\"activation\"",
        "\"weight\"",
        "\"weightdot\"",
        "\"Warning som.py: Training is taking a long time!\"",
        "\" - Try increaseing maxepoch - Training will end\"",
        "\"weight\"",
        "\"weight\"",
        "\"coord\"",
        "\"coord\"",
        "\"bias\"",
        "\"bias\"",
        "\"bias\"",
        "\"bias\"",
        "\"coord\"",
        "\"coord\"",
        "\"coord\"",
        "\"bias\"",
        "\"bias\"",
        "\"Warning som.py: Tesselation is taking a long time!\"",
        "\" - Try increaseing maxepoch - Training will end\"",
        "\"activity\"",
        "\"weight\"",
        "\"coord\""
    ],
    "variables": [
        "nx",
        "ny",
        "root3",
        "third",
        "twothirdroot6",
        "xyz",
        "node",
        "ix",
        "jx",
        "kx",
        "xyz",
        "node",
        "xyz",
        "node",
        "xyz",
        "node",
        "xyz",
        "node",
        "xyz",
        "node",
        "xyz",
        "node",
        "nclass",
        "bodyplan",
        "maxepoch",
        "lfunc",
        "nclass",
        "pred",
        "modelpred",
        "state",
        "count",
        "continuelearning",
        "obv",
        "dist",
        "closestnode",
        "sigma",
        "nfunc",
        "continuelearning",
        "cum",
        "node",
        "cum",
        "cum",
        "binary",
        "nclass",
        "binary",
        "centroid",
        "cidx",
        "centroid",
        "icent",
        "dist",
        "count",
        "continuelearning",
        "cum",
        "norm",
        "dist",
        "icent",
        "closestnode",
        "centroid",
        "continuelearning",
        "node",
        "dist",
        "icent",
        "closestnode",
        "pred",
        "obv",
        "pred",
        "obv",
        "pred",
        "closestnode",
        "obv"
    ],
    "comments": [
        "get number of nodes in x direction (defalut is linear arrangement)",
        "get number of nodes in y direction (default is linear arrangement)",
        "some konstants",
        "init coordinate array",
        "loop over nodes",
        "get hcp coordinates",
        "get cubic coordinates",
        "increment node",
        "return coordinates",
        "make sure ffn top layer has logistic or softmax activation",
        "define number of clusters from model top layer",
        "get model bodyplan",
        "edit bodyplan toplayer to reflect number of mapping nodes and create map",
        "decay rate",
        "init neighbor length",
        "create map",
        "add node geometry to top layer",
        "define hyperparameters",
        "setup Learning function",
        "create map from model",
        "set initial predictions all to 0",
        "update state of model and get model predictions",
        "iterate learning:",
        "1) too many iterations - hardcoded to ensure loop exit",
        "choose random sample",
        "calculate node vectors pointing to observation",
        "calcuate distances",
        "get winning node",
        "calculate Neighborhood function",
        "evolve nodes parameterized by winning node",
        "update current learning step",
        "- EXIT CONDITIONS -",
        "exit if learning is taking too long",
        "calcualate umatrix and save in bias",
        "normalize cumulative and assume boltzman-like distribution",
        "import csv",
        "file = open(\"test.csv\", \"w\")",
        "with file:",
        "writer = csv.writer(file)",
        "writer.writerows(map[-1][\"bias\"])",
        "make predicitons by k-means",
        "check for binary classification",
        "init centroids",
        "randomly assign nclusters using the n mapping node coordinates.",
        "create a distance measure for each centroid",
        "k-means loop",
        "iterate learning:",
        "1) too many iterations - hardcoded to ensure loop exit",
        "init weighted center of mass",
        "accumulate center of mass for closest centroid",
        "get distance to each centroid",
        "find closest centroid",
        "calculate the center of mass weighted by the boltzman prob saved in bias",
        "assign new centroid positions at the normalized center of mass",
        "update current learning step",
        "- EXIT CONDITIONS -",
        "exit if learning is taking too long",
        "classify each observation",
        "find closest node to observation",
        "find closest centroid to node",
        "find closest centroid",
        "classify observation",
        "return predictions and converged map"
    ],
    "docstrings": [
        "\"\"\" Clustering by Kohonen self-organizing map\n\"\"\"",
        "\"\"\" returns the coordinates of n points in 3 dimensions\n        Args:\n            n: integer number of coordinates to return\n            nx: length of cell in x direction\n            ny: length of cell in y direction\n            hcp: boolean if True will arrange in hexagonal close packed else\n                    will arrange in cubic\n        Returns:\n            an numpy array of 3D coordinates where the 3rd dimension is zero.\n            The function returns 3D coordinates to conform with som format.\n    \"\"\"",
        "\"\"\"initializes a map from an ffn model\"\"\"",
        "\"\"\"train fnn model by gradient decent\n\n        Args:\n            model: FFN model\n            data: input features\n            targets: targets\n            geom: map topology either \"square\",...\n            n: number of mapping nodes default is 10000\n        Returns: final predictions and converged map.\n    \"\"\""
    ],
    "functions": [
        "coords",
        "init_map",
        "som"
    ],
    "classes": []
}