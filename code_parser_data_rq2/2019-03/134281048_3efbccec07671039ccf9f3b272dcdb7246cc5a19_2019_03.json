{
    "identifiers": [
        "Menu",
        "Menu",
        "alert",
        "alert",
        "alert"
    ],
    "literals": [
        "'metro4'",
        "'electron'",
        "'File'",
        "'Open'",
        "'CmdOrCtrl+O'",
        "\"Open\"",
        "'Save'",
        "'CmdOrCtrl+S'",
        "\"save\"",
        "'Save As'",
        "'CmdOrCtrl+Shift+S'",
        "\"save as\"",
        "'quit'",
        "'Edit'",
        "'undo'",
        "'redo'",
        "'separator'",
        "'cut'",
        "'copy'",
        "'paste'",
        "'pasteandmatchstyle'",
        "'delete'",
        "'selectall'",
        "'View'",
        "'reload'",
        "'forcereload'",
        "'toggledevtools'",
        "'separator'",
        "'resetzoom'",
        "'zoomin'",
        "'zoomout'",
        "'separator'",
        "'togglefullscreen'",
        "'window'",
        "'minimize'",
        "'close'"
    ],
    "variables": [
        "Metro"
    ],
    "comments": [
        "open();",
        "save();",
        "saveAs();",
        "function saveInternal(state: IGentron) {",
        "const writeResult: Result<TGentronFsResult> = Gentron.save(state);",
        "if (writeResult.IsError) {",
        "Metro.toast.create(writeResult.ErrorMessage, null, 7500, 'alert');",
        "}",
        "else if (ObjectUtils.hasStringValue(writeResult.Result.InfoMessage)) {",
        "Metro.toast.create(writeResult.Result.InfoMessage, null, 7500, 'warning');",
        "}",
        "else {",
        "Metro.toast.create('Saved Successfully!', null, 3000, 'success');",
        "}",
        "}",
        "function save(store: Gentron): void {",
        "//const state: IGentron = store.getState();",
        "}",
        "function saveAs(store: Gentron): void {",
        "dialog.showSaveDialog({",
        "title: 'Gentron Save',",
        "filters: [",
        "{ name: 'Gentron Project', extensions: ['gproj'] },",
        "{ name: 'JSON', extensions: ['json'] }",
        "]},",
        "function (fileName: string) {",
        "if (fileName && fileName.length > 0) {",
        "//const state: IGentron = store.getState();",
        "//saveInternal(state);",
        "}",
        "}",
        ");",
        "}",
        "function open(store: Gentron): void {",
        "dialog.showOpenDialog({",
        "title: 'Gentron Open',",
        "filters: [",
        "{ name: 'Gentron Project', extensions: ['gproj'] },",
        "{ name: 'JSON', extensions: ['json'] }",
        "]",
        "},",
        "function (filePaths: string[]) {",
        "if (filePaths && filePaths.length > 0) {",
        "const readResult: Result<TGentronFsResult> = Gentron.open(filePaths[0]);",
        "if (readResult.IsError) {",
        "Metro.toast.create(readResult.ErrorMessage, null, null, 'warning');",
        "return;",
        "}",
        "else if (ObjectUtils.hasStringValue(readResult.Result.InfoMessage)) {",
        "Metro.toast.create(readResult.Result.InfoMessage, null, 7500, 'warning');",
        "}",
        "else {",
        "// store.dispatch({",
        "//     newState: readResult.Result.Gentron,",
        "//     type: GentronActionNames.OpenProject,",
        "// });",
        "}",
        "}",
        "}",
        ");",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "click",
        "click",
        "click"
    ],
    "classes": []
}