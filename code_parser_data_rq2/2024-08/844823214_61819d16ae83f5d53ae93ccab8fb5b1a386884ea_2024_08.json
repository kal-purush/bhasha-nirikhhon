{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "process",
        "fastify",
        "require",
        "__dirname",
        "fastify",
        "require",
        "callClaudeAPI",
        "messages",
        "systemPrompt",
        "axios",
        "CLAUDE_API_URL",
        "CLAUDE_MODEL",
        "messages",
        "systemPrompt",
        "process",
        "response",
        "error",
        "error",
        "error",
        "error",
        "error",
        "error",
        "error",
        "fastify",
        "request",
        "reply",
        "request",
        "data",
        "PDFParser",
        "buffer",
        "pdfContext",
        "pdf",
        "systemPrompt",
        "pdfContext",
        "conversationHistory",
        "error",
        "error",
        "fastify",
        "request",
        "reply",
        "request",
        "question",
        "pdfContext",
        "conversationHistory",
        "question",
        "callClaudeAPI",
        "conversationHistory",
        "systemPrompt",
        "conversationHistory",
        "answer",
        "error",
        "error",
        "fastify",
        "request",
        "reply",
        "reply",
        "start",
        "fastify",
        "PORT",
        "PORT",
        "err",
        "fastify",
        "err",
        "process",
        "start"
    ],
    "literals": [
        "'fastify'",
        "'fs'",
        "'pdf-parse'",
        "'axios'",
        "'https://api.anthropic.com/v1/messages'",
        "'claude-3-opus-20240229'",
        "'@fastify/static'",
        "'/public/'",
        "'@fastify/multipart'",
        "''",
        "''",
        "'Content-Type'",
        "'application/json'",
        "'x-api-key'",
        "'anthropic-version'",
        "'2023-06-01'",
        "'Error calling Claude API:'",
        "'Failed to get response from Claude API: '",
        "'/upload'",
        "You are an assistant that answers questions based on the following PDF content: ${pdfContext}",
        "'PDF uploaded and processed successfully.'",
        "'Error processing PDF: '",
        "'/ask'",
        "'No question provided.'",
        "'Please upload a PDF first.'",
        "\"user\"",
        "\"assistant\"",
        "'/'",
        "'text/html'",
        "<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>PDF Chat Interface</title>\n        <script src=\"https://cdn.tailwindcss.com\"></script>\n    </head>\n    <body class=\"bg-gray-100\">\n        <div class=\"container mx-auto p-4\">\n            <div class=\"bg-white shadow-lg rounded-lg p-6\">\n                <h1 class=\"text-2xl font-bold mb-4\">PDF Chat Interface</h1>\n                <div class=\"mb-4\">\n                    <input type=\"file\" id=\"pdfInput\" accept=\".pdf\" class=\"mb-2\">\n                    <button onclick=\"uploadPDF()\" class=\"bg-blue-500 text-white px-4 py-2 rounded\">Upload PDF</button>\n                </div>\n                <div id=\"chatContainer\" class=\"mt-6 h-96 overflow-y-auto border p-4 mb-4\"></div>\n                <div class=\"flex space-x-2\">\n                    <input type=\"text\" id=\"questionInput\" placeholder=\"Ask a question\" class=\"flex-grow p-2 border rounded\">\n                    <button onclick=\"askQuestion()\" class=\"bg-green-500 text-white px-4 py-2 rounded\">Ask</button>\n                </div>\n            </div>\n        </div>\n        <script>\n            async function uploadPDF() {\n                const fileInput = document.getElementById('pdfInput');\n                const file = fileInput.files[0];\n                if (!file) {\n                    alert('Please select a PDF file');\n                    return;\n                }\n                const formData = new FormData();\n                formData.append('pdf', file);\n                try {\n                    const response = await fetch('/upload', {\n                        method: 'POST',\n                        body: formData\n                    });\n                    const result = await response.json();\n                    alert(result.message);\n                    if (result.success) {\n                        addMessageToChat('system', 'PDF uploaded successfully. You can now ask questions about its content.');\n                    }\n                } catch (error) {\n                    alert('Error uploading PDF: ' + error.message);\n                }\n            }\n\n            async function askQuestion() {\n                const questionInput = document.getElementById('questionInput');\n                const question = questionInput.value.trim();\n                if (!question) {\n                    alert('Please enter a question');\n                    return;\n                }\n                addMessageToChat('user', question);\n                try {\n                    const response = await fetch('/ask', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({ question })\n                    });\n                    const result = await response.json();\n                    if (result.success) {\n                        addMessageToChat('assistant', result.answer);\n                    } else {\n                        addMessageToChat('system', 'Error: ' + result.message);\n                    }\n                    questionInput.value = '';\n                } catch (error) {\n                    addMessageToChat('system', 'Error asking question: ' + error.message);\n                }\n            }\n\n            function addMessageToChat(role, content) {\n                const chatContainer = document.getElementById('chatContainer');\n                const messageDiv = document.createElement('div');\n                messageDiv.className = role === 'user' ? 'bg-blue-100 p-2 rounded mb-2' : 'bg-green-100 p-2 rounded mb-2';\n                messageDiv.textContent = content;\n                chatContainer.appendChild(messageDiv);\n                chatContainer.scrollTop = chatContainer.scrollHeight;\n            }\n        </script>\n    </body>\n    </html>",
        "Server is running on http://localhost:${PORT}"
    ],
    "variables": [
        "fastify",
        "fs",
        "PDFParser",
        "axios",
        "PORT",
        "CLAUDE_API_URL",
        "CLAUDE_MODEL",
        "pdfContext",
        "systemPrompt",
        "conversationHistory",
        "callClaudeAPI",
        "response",
        "data",
        "buffer",
        "pdf",
        "answer",
        "start"
    ],
    "comments": [
        "Reset conversation history"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}