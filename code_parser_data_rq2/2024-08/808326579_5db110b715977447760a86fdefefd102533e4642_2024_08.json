{
    "identifiers": [
        "App",
        "model",
        "Item",
        "model",
        "Person",
        "org",
        "hibernate",
        "Hibernate",
        "org",
        "hibernate",
        "Session",
        "org",
        "hibernate",
        "SessionFactory",
        "org",
        "hibernate",
        "cfg",
        "Configuration",
        "java",
        "util",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "args",
        "configuration",
        "addAnnotatedClass",
        "addAnnotatedClass",
        "sessionFactory",
        "configuration",
        "buildSessionFactory",
        "session",
        "sessionFactory",
        "getCurrentSession",
        "session",
        "beginTransaction",
        "person",
        "session",
        "get",
        "session",
        "getTransaction",
        "commit",
        "session",
        "sessionFactory",
        "getCurrentSession",
        "session",
        "beginTransaction",
        "person",
        "session",
        "merge",
        "person",
        "Hibernate",
        "initialize",
        "person",
        "getItems",
        "items",
        "session",
        "createQuery",
        "setParameter",
        "person",
        "getId",
        "getResultList",
        "items",
        "session",
        "getTransaction",
        "commit",
        "person",
        "getItems",
        "sessionFactory",
        "close"
    ],
    "literals": [
        "\"Получили человека из таблицы\"",
        "\"Сессия закончилась\"",
        "\"Внутри второй транзакции\"",
        "\"select i from Item i where i.owner.id=:personId\"",
        "\"personId\"",
        "\"Все второй сессии\""
    ],
    "variables": [],
    "comments": [
        "Добавление 2х сущностей",
        "Получили сессию для работы с Hibernate",
        "Начинаем транзакцию",
        "Person person = session.get(Person.class,1);",
        "System.out.println(\"Получили человека\");",
        "",
        "//Получим связанные сущности                       <--- Ленивая загрузка, получаем (1)",
        "System.out.println(person.getItems());                  товары только после запроса",
        "Item item = session.get(Item.class,1);",
        "System.out.println(\"Получили товар\");     <-- не ленивая загрузка. Получили всю (2)",
        "о человека запросив информацию о товаре",
        "System.out.println(item.getOwner());",
        "Добавили в аргумент @OneToMany(mappedBy = \"owner\", fetch = FetchType.EAGER)",
        "System.out.println(person);          //  <--- Теперь загрузка стала не ленивой (3)",
        "",
        "Запрос товаров при ленивой загрузке, чтобы можно было запрашивать товары вне сессии без ошибок",
        "System.out.println(person.getItems());  // не будет работать без sout",
        "",
        "Hibernate.initialize(person.getItems()); //Спец метод чтобы не использовать sout (4)",
        "session.close() происходит автоматически после commit()",
        "// Вне сессии товары можно получать, так как они уже были подгружены (3)",
        "System.out.println(person.getItems()); // Возможно то при НЕ ленивой загрузке",
        "Открываем сессию и транзакцию еще раз (Возможно сделать в любом месте в коде)",
        "Метод merge \"пристегивает объект к новой сессии,",
        "так как сессии между собой не связаны и новая сессия не знает о существовании",
        "объекта из первой сессии. А поскольку метод возвращает объект класса Object его",
        "нужно задаункастить до Person",
        "Получение товаров через Hibernate (4)",
        "2 способ получить товары после завершения сессии выполнить HQL запрос вручную",
        "Пристегивать объект к новой сессии в этом случае не нужно. Используется редко(5)",
        "Это работает, так как связанные товары были загружены (4)"
    ],
    "docstrings": [],
    "functions": [
        "main"
    ],
    "classes": [
        "App"
    ]
}