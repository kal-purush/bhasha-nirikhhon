{
    "identifiers": [
        "Prop",
        "Schema",
        "SchemaFactory",
        "HydratedDocument",
        "Types",
        "IScore",
        "TermEnum",
        "mongoosePaginate",
        "Schema",
        "Prop",
        "Types",
        "Types",
        "Prop",
        "Types",
        "Types",
        "Prop",
        "Types",
        "Types",
        "Prop",
        "TermEnum",
        "Prop",
        "Prop",
        "Prop",
        "total",
        "total",
        "total",
        "total",
        "total",
        "SchemaFactory",
        "Score",
        "ScoreSchema",
        "ScoreSchema",
        "total",
        "total",
        "total",
        "total",
        "total",
        "ScoreSchema",
        "ScoreSchema",
        "ScoreSchema",
        "mongoosePaginate",
        "ScoreSchema",
        "ScoreSchema"
    ],
    "literals": [
        "'@nestjs/mongoose'",
        "'mongoose'",
        "'src/shared/interfaces/schema.interface'",
        "'mongoose-paginate-v2'",
        "'Student'",
        "'ClassSubject'",
        "'AcademicYear'",
        "string",
        "string",
        "'A'",
        "'B'",
        "'C'",
        "'D'",
        "'E'",
        "'F'",
        "'total'",
        "'grade'",
        "'A'",
        "'B'",
        "'C'",
        "'D'",
        "'E'",
        "'F'",
        "'toJSON'",
        "'toObject'"
    ],
    "variables": [
        "total",
        "ScoreSchema",
        "total"
    ],
    "comments": [
        "Could be 'FIRST', 'SECOND'",
        "Optional field for remarks",
        "@Prop({ required: true, min: 0, max: 100 })",
        "total: number;",
        "A virtual field for the total score",
        "Virtual field for grade calculation",
        "Define the virtual field in the schema",
        "Ensure the virtuals are included when converting to JSON or Object",
        "// Virtual field for term average",
        "async termAverage(): Promise<number> {",
        "const scores = await this.model('Score').find({ student: this.student, academicYear: this.academicYear, term: this.term }).exec();",
        "const totalScore = scores.reduce((sum, score) => sum + (score.ca + score.exam), 0);",
        "return scores.length ? totalScore / scores.length : 0;",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "total",
        "grade"
    ],
    "classes": [
        "Score"
    ]
}