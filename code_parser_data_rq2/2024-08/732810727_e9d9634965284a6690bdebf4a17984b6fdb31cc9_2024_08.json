{
    "identifiers": [
        "patchState",
        "signalStore",
        "withComputed",
        "withMethods",
        "withState",
        "fakeAsync",
        "TestBed",
        "tick",
        "withUndoRedo",
        "addEntity",
        "withEntities",
        "computed",
        "inject",
        "withCallState",
        "describe",
        "it",
        "TestBed",
        "signalStore",
        "withState",
        "testState",
        "withUndoRedo",
        "testKeys",
        "Store",
        "expect",
        "store",
        "it",
        "signalStore",
        "withState",
        "testState",
        "withUndoRedo",
        "signalStore",
        "withState",
        "testState",
        "withEntities",
        "withUndoRedo",
        "signalStore",
        "withState",
        "testState",
        "withUndoRedo",
        "signalStore",
        "withState",
        "testState",
        "withComputed",
        "store",
        "computed",
        "store",
        "withUndoRedo",
        "signalStore",
        "withEntities",
        "withUndoRedo",
        "signalStore",
        "withEntities",
        "withUndoRedo",
        "describe",
        "it",
        "fakeAsync",
        "TestBed",
        "signalStore",
        "withState",
        "testState",
        "withMethods",
        "store",
        "newTest",
        "patchState",
        "store",
        "newTest",
        "withUndoRedo",
        "testKeys",
        "Store",
        "tick",
        "store",
        "newValue",
        "tick",
        "expect",
        "store",
        "newValue",
        "expect",
        "store",
        "expect",
        "store",
        "store",
        "tick",
        "expect",
        "store",
        "expect",
        "store",
        "expect",
        "store",
        "it",
        "fakeAsync",
        "TestBed",
        "signalStore",
        "withState",
        "testState",
        "withMethods",
        "store",
        "newTest",
        "patchState",
        "store",
        "newTest",
        "withUndoRedo",
        "testKeys",
        "Store",
        "tick",
        "store",
        "newValue",
        "tick",
        "expect",
        "store",
        "newValue",
        "store",
        "newerValue",
        "tick",
        "store",
        "tick",
        "expect",
        "store",
        "newValue",
        "expect",
        "store",
        "store",
        "tick",
        "expect",
        "store",
        "newValue",
        "it",
        "fakeAsync",
        "signalStore",
        "withEntities",
        "withMethods",
        "store",
        "newTest",
        "patchState",
        "store",
        "addEntity",
        "newTest",
        "withUndoRedo",
        "TestBed",
        "Store",
        "TestBed",
        "inject",
        "Store",
        "tick",
        "expect",
        "store",
        "expect",
        "store",
        "expect",
        "store",
        "store",
        "newValue",
        "tick",
        "expect",
        "store",
        "newValue",
        "expect",
        "store",
        "expect",
        "store",
        "store",
        "newerValue",
        "tick",
        "expect",
        "store",
        "newValue",
        "newerValue",
        "expect",
        "store",
        "expect",
        "store",
        "store",
        "expect",
        "store",
        "newValue",
        "expect",
        "store",
        "expect",
        "store",
        "store",
        "expect",
        "store",
        "expect",
        "store",
        "expect",
        "store",
        "store",
        "tick",
        "expect",
        "store",
        "newValue",
        "expect",
        "store",
        "expect",
        "store",
        "store",
        "tick",
        "expect",
        "store",
        "expect",
        "store",
        "it",
        "fakeAsync",
        "TestBed",
        "signalStore",
        "withEntities",
        "withMethods",
        "store",
        "newTest",
        "patchState",
        "store",
        "addEntity",
        "newTest",
        "withCallState",
        "withUndoRedo",
        "Store",
        "tick",
        "store",
        "newValue",
        "tick",
        "expect",
        "store",
        "newValue",
        "expect",
        "store",
        "expect",
        "store",
        "store",
        "tick",
        "expect",
        "store",
        "expect",
        "store",
        "expect",
        "store"
    ],
    "literals": [
        "'@ngrx/signals'",
        "'@angular/core/testing'",
        "'./with-undo-redo'",
        "'@ngrx/signals/entities'",
        "'@angular/core'",
        "'./with-call-state'",
        "''",
        "'test'",
        "'new value'",
        "'newer value'",
        "'withUndoRedo'",
        "'adds methods for undo, redo, canUndo, canRedo'",
        "'test'",
        "'canUndo'",
        "'canRedo'",
        "'undo'",
        "'redo'",
        "'should check keys and collection types'",
        "'tes'",
        "'flight'",
        "'flightIdsTest'",
        "'tee'",
        "'tested'",
        "'test'",
        "'flight'",
        "'test'",
        "'undo and redo'",
        "'restores previous state for regular store key'",
        "string",
        "''",
        "'restores previous state for regular store key and respects skip'",
        "string",
        "'undoes and redoes previous state for entity'",
        "string",
        "string",
        "'newest'",
        "'restores previous state for named entity'",
        "string",
        "'flight'",
        "string",
        "'flight'",
        "'flight'",
        "'flight'"
    ],
    "variables": [
        "testState",
        "testKeys",
        "newValue",
        "newerValue",
        "Store",
        "store",
        "Store",
        "store",
        "Store",
        "store",
        "Store",
        "store",
        "Store",
        "store"
    ],
    "comments": [
        "@ts-expect-error - should not allow invalid keys",
        "@ts-expect-error - should not allow invalid keys when entities are present",
        "@ts-expect-error - should not allow collections without named entities",
        "@ts-expect-error - should not allow collections without named entities with other computed",
        "@ts-expect-error - should not allow collections without named entities",
        "@ts-expect-error - should not allow invalid collections",
        "should not change",
        "should return canRedo=false after a change"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}