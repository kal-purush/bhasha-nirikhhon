{
    "identifiers": [
        "streamlit",
        "st",
        "logging",
        "os",
        "tempfile",
        "shutil",
        "pdfplumber",
        "ollama",
        "langchain_community",
        "document_loaders",
        "UnstructuredPDFLoader",
        "langchain_community",
        "embeddings",
        "OllamaEmbeddings",
        "langchain_text_splitters",
        "RecursiveCharacterTextSplitter",
        "langchain_community",
        "vectorstores",
        "Chroma",
        "langchain",
        "prompts",
        "ChatPromptTemplate",
        "PromptTemplate",
        "langchain_core",
        "output_parsers",
        "StrOutputParser",
        "langchain_community",
        "chat_models",
        "ChatOllama",
        "langchain_core",
        "runnables",
        "RunnablePassthrough",
        "langchain",
        "retrievers",
        "multi_query",
        "MultiQueryRetriever",
        "typing",
        "Tuple",
        "Dict",
        "Any",
        "Optional",
        "st",
        "set_page_config",
        "page_title",
        "page_icon",
        "layout",
        "initial_sidebar_state",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "INFO",
        "format",
        "datefmt",
        "logging",
        "getLogger",
        "st",
        "cache_resource",
        "show_spinner",
        "models_info",
        "Dict",
        "Dict",
        "Any",
        "Tuple",
        "logger",
        "info",
        "model",
        "model",
        "models_info",
        "logger",
        "info",
        "model_names",
        "model_names",
        "file_upload",
        "Chroma",
        "logger",
        "info",
        "file_upload",
        "name",
        "tempfile",
        "mkdtemp",
        "os",
        "path",
        "join",
        "temp_dir",
        "file_upload",
        "name",
        "open",
        "path",
        "f",
        "f",
        "write",
        "file_upload",
        "getvalue",
        "logger",
        "info",
        "path",
        "UnstructuredPDFLoader",
        "path",
        "loader",
        "load",
        "RecursiveCharacterTextSplitter",
        "chunk_size",
        "chunk_overlap",
        "text_splitter",
        "split_documents",
        "data",
        "logger",
        "info",
        "OllamaEmbeddings",
        "model",
        "show_progress",
        "Chroma",
        "from_documents",
        "documents",
        "chunks",
        "embedding",
        "embeddings",
        "collection_name",
        "logger",
        "info",
        "shutil",
        "rmtree",
        "temp_dir",
        "logger",
        "info",
        "temp_dir",
        "vector_db",
        "question",
        "vector_db",
        "Chroma",
        "selected_model",
        "logger",
        "info",
        "question",
        "selected_model",
        "ChatOllama",
        "model",
        "selected_model",
        "temperature",
        "PromptTemplate",
        "input_variables",
        "template",
        "MultiQueryRetriever",
        "from_llm",
        "vector_db",
        "as_retriever",
        "llm",
        "prompt",
        "QUERY_PROMPT",
        "ChatPromptTemplate",
        "from_template",
        "template",
        "retriever",
        "RunnablePassthrough",
        "prompt",
        "llm",
        "StrOutputParser",
        "chain",
        "invoke",
        "question",
        "logger",
        "info",
        "response",
        "st",
        "cache_data",
        "file_upload",
        "Any",
        "logger",
        "info",
        "file_upload",
        "name",
        "pdfplumber",
        "open",
        "file_upload",
        "pdf",
        "page",
        "to_image",
        "original",
        "page",
        "pdf",
        "pages",
        "logger",
        "info",
        "pdf_pages",
        "vector_db",
        "Optional",
        "Chroma",
        "logger",
        "info",
        "vector_db",
        "vector_db",
        "delete_collection",
        "st",
        "session_state",
        "pop",
        "st",
        "session_state",
        "pop",
        "st",
        "session_state",
        "pop",
        "st",
        "success",
        "logger",
        "info",
        "st",
        "rerun",
        "st",
        "error",
        "logger",
        "warning",
        "st",
        "subheader",
        "divider",
        "anchor",
        "ollama",
        "extract_model_names",
        "models_info",
        "st",
        "columns",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "available_models",
        "col2",
        "selectbox",
        "available_models",
        "col1",
        "file_uploader",
        "accept_multiple_files",
        "file_upload",
        "st",
        "session_state",
        "file_upload",
        "st",
        "session_state",
        "st",
        "session_state",
        "create_vector_db",
        "file_upload",
        "extract_all_pages_as_images",
        "file_upload",
        "st",
        "session_state",
        "pdf_pages",
        "col1",
        "slider",
        "min_value",
        "max_value",
        "value",
        "step",
        "col1",
        "st",
        "container",
        "height",
        "border",
        "page_image",
        "pdf_pages",
        "st",
        "image",
        "page_image",
        "width",
        "zoom_level",
        "col1",
        "button",
        "delete_collection",
        "delete_vector_db",
        "st",
        "session_state",
        "col2",
        "st",
        "container",
        "height",
        "border",
        "message",
        "st",
        "session_state",
        "message",
        "message_container",
        "chat_message",
        "message",
        "avatar",
        "avatar",
        "st",
        "markdown",
        "message",
        "prompt",
        "st",
        "chat_input",
        "st",
        "session_state",
        "append",
        "prompt",
        "message_container",
        "chat_message",
        "avatar",
        "markdown",
        "prompt",
        "message_container",
        "chat_message",
        "avatar",
        "st",
        "spinner",
        "st",
        "session_state",
        "process_question",
        "prompt",
        "st",
        "session_state",
        "selected_model",
        "st",
        "markdown",
        "response",
        "st",
        "warning",
        "st",
        "session_state",
        "st",
        "session_state",
        "append",
        "response",
        "e",
        "st",
        "error",
        "e",
        "icon",
        "logger",
        "error",
        "e",
        "st",
        "session_state",
        "st",
        "warning",
        "main"
    ],
    "literals": [
        "\"Ollama PDF RAG Streamlit UI\"",
        "\"üéà\"",
        "\"wide\"",
        "\"collapsed\"",
        "\"%(asctime)s - %(levelname)s - %(message)s\"",
        "\"%Y-%m-%d %H:%M:%S\"",
        "\"Extracting model names from models_info\"",
        "\"name\"",
        "\"models\"",
        "f\"Extracted model names: {model_names}\"",
        "f\"Creating vector DB from file upload: {file_upload.name}\"",
        "\"wb\"",
        "f\"File saved to temporary path: {path}\"",
        "\"Document split into chunks\"",
        "\"nomic-embed-text\"",
        "\"myRAG\"",
        "\"Vector DB created\"",
        "f\"Temporary directory {temp_dir} removed\"",
        "f\"\"\"Processing question: {\n                question} using model: {selected_model}\"\"\"",
        "\"question\"",
        "\"context\"",
        "\"question\"",
        "\"Question processed and response generated\"",
        "f\"\"\"Extracting all pages as images from file: {\n                file_upload.name}\"\"\"",
        "\"PDF pages extracted as images\"",
        "\"Deleting vector DB\"",
        "\"pdf_pages\"",
        "\"file_upload\"",
        "\"vector_db\"",
        "\"Collection and temporary files deleted successfully.\"",
        "\"Vector DB and related session state cleared\"",
        "\"No vector database found to delete.\"",
        "\"Attempted to delete vector DB, but none was found\"",
        "\"üß† Ollama PDF RAG playground\"",
        "\"gray\"",
        "\"messages\"",
        "\"messages\"",
        "\"vector_db\"",
        "\"vector_db\"",
        "\"Pick a model available locally on your system ‚Üì\"",
        "\"Upload a PDF file ‚Üì\"",
        "\"pdf\"",
        "\"file_upload\"",
        "\"vector_db\"",
        "\"vector_db\"",
        "\"pdf_pages\"",
        "\"Zoom Level\"",
        "\"‚ö†Ô∏è Delete collection\"",
        "\"secondary\"",
        "\"vector_db\"",
        "\"messages\"",
        "\"ü§ñ\"",
        "\"role\"",
        "\"assistant\"",
        "\"üòé\"",
        "\"role\"",
        "\"content\"",
        "\"Enter a prompt here...\"",
        "\"messages\"",
        "\"role\"",
        "\"user\"",
        "\"content\"",
        "\"user\"",
        "\"üòé\"",
        "\"assistant\"",
        "\"ü§ñ\"",
        "\":green[processing...]\"",
        "\"vector_db\"",
        "\"vector_db\"",
        "\"Please upload a PDF file first.\"",
        "\"vector_db\"",
        "\"messages\"",
        "\"role\"",
        "\"assistant\"",
        "\"content\"",
        "\"‚õîÔ∏è\"",
        "f\"Error processing prompt: {e}\"",
        "\"vector_db\"",
        "\"Upload a PDF file to begin chat...\"",
        "\"__main__\""
    ],
    "variables": [
        "logger",
        "model_names",
        "temp_dir",
        "path",
        "loader",
        "data",
        "text_splitter",
        "chunks",
        "embeddings",
        "vector_db",
        "llm",
        "QUERY_PROMPT",
        "retriever",
        "template",
        "prompt",
        "chain",
        "response",
        "pdf_pages",
        "pdf_pages",
        "models_info",
        "available_models",
        "col1",
        "col2",
        "selected_model",
        "file_upload",
        "pdf_pages",
        "zoom_level",
        "delete_collection",
        "message_container",
        "avatar",
        "response"
    ],
    "comments": [
        "Streamlit page configuration",
        "Logging configuration"
    ],
    "docstrings": [
        "\"\"\"\nStreamlit application for PDF-based Retrieval-Augmented Generation (RAG) using Ollama + LangChain.\n\nThis application allows users to upload a PDF, process it,\nand then ask questions about the content using a selected language model.\n\"\"\"",
        "\"\"\"\n    Extract model names from the provided models information.\n\n    Args:\n        models_info (Dict[str, List[Dict[str, Any]]]): Dictionary containing information about available models.\n\n    Returns:\n        Tuple[str, ...]: A tuple of model names.\n    \"\"\"",
        "\"\"\"\n    Create a vector database from an uploaded PDF file.\n\n    Args:\n        file_upload (st.UploadedFile): Streamlit file upload object containing the PDF.\n\n    Returns:\n        Chroma: A vector store containing the processed document chunks.\n    \"\"\"",
        "\"\"\"\n    Process a user question using the vector database and selected language model.\n\n    Args:\n        question (str): The user's question.\n        vector_db (Chroma): The vector database containing document embeddings.\n        selected_model (str): The name of the selected language model.\n\n    Returns:\n        str: The generated response to the user's question.\n    \"\"\"",
        "\"\"\"You are an AI language model assistant. Your task is to generate 3\n        different versions of the given user question to retrieve relevant documents from\n        a vector database. By generating multiple perspectives on the user question, your\n        goal is to help the user overcome some of the limitations of the distance-based\n        similarity search. Provide these alternative questions separated by newlines.\n        Original question: {question}\"\"\"",
        "\"\"\"Answer the question based ONLY on the following context:\n    {context}\n    Question: {question}\n    If you don't know the answer, just say that you don't know, don't try to make up an answer.\n    Only provide the answer from the {context}, nothing else.\n    Add snippets of the context you used to answer the question.\n    \"\"\"",
        "\"\"\"\n    Extract all pages from a PDF file as images.\n\n    Args:\n        file_upload (st.UploadedFile): Streamlit file upload object containing the PDF.\n\n    Returns:\n        List[Any]: A list of image objects representing each page of the PDF.\n    \"\"\"",
        "\"\"\"\n    Delete the vector database and clear related session state.\n\n    Args:\n        vector_db (Optional[Chroma]): The vector database to be deleted.\n    \"\"\"",
        "\"\"\"\n    Main function to run the Streamlit application.\n\n    This function sets up the user interface, handles file uploads,\n    processes user queries, and displays results.\n    \"\"\""
    ],
    "functions": [
        "extract_model_names",
        "create_vector_db",
        "process_question",
        "extract_all_pages_as_images",
        "delete_vector_db",
        "main"
    ],
    "classes": []
}