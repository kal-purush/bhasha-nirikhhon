{
    "identifiers": [
        "org",
        "openqa",
        "selenium",
        "org",
        "assertj",
        "core",
        "api",
        "AssertionsForClassTypes",
        "assertThat",
        "java",
        "math",
        "BigInteger",
        "java",
        "time",
        "Instant",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "org",
        "junit",
        "jupiter",
        "api",
        "AfterEach",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "org",
        "openqa",
        "selenium",
        "bidi",
        "script",
        "RegExpValue",
        "org",
        "openqa",
        "selenium",
        "bidi",
        "script",
        "RemoteValue",
        "org",
        "openqa",
        "selenium",
        "PrintOptions",
        "org",
        "openqa",
        "selenium",
        "remote",
        "RemoteWebDriver",
        "org",
        "openqa",
        "selenium",
        "testing",
        "JupiterTestBase",
        "Test",
        "value",
        "driver",
        "script",
        "execute",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "Test",
        "value",
        "driver",
        "script",
        "execute",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "Test",
        "value",
        "driver",
        "script",
        "execute",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "assertThat",
        "value",
        "getValue",
        "get",
        "isEqualTo",
        "Test",
        "value",
        "driver",
        "script",
        "execute",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "assertThat",
        "value",
        "getValue",
        "get",
        "isEqualTo",
        "Test",
        "value",
        "driver",
        "script",
        "execute",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "assertThat",
        "value",
        "getValue",
        "get",
        "isEqualTo",
        "Test",
        "value",
        "driver",
        "script",
        "execute",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "assertThat",
        "value",
        "getValue",
        "get",
        "isEqualTo",
        "Test",
        "value",
        "driver",
        "script",
        "execute",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "assertThat",
        "value",
        "getValue",
        "get",
        "isEqualTo",
        "Test",
        "value",
        "driver",
        "script",
        "execute",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "assertThat",
        "value",
        "getValue",
        "get",
        "isEqualTo",
        "Test",
        "value",
        "driver",
        "script",
        "execute",
        "BigInteger",
        "valueOf",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "assertThat",
        "value",
        "getValue",
        "get",
        "isEqualTo",
        "Test",
        "add",
        "add",
        "value",
        "driver",
        "script",
        "execute",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "values",
        "value",
        "getValue",
        "get",
        "assertThat",
        "values",
        "size",
        "isEqualTo",
        "Test",
        "add",
        "add",
        "value",
        "driver",
        "script",
        "execute",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "values",
        "value",
        "getValue",
        "get",
        "assertThat",
        "values",
        "size",
        "isEqualTo",
        "Test",
        "value",
        "driver",
        "script",
        "execute",
        "Instant",
        "now",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "Test",
        "mapValue",
        "mapValue",
        "put",
        "mapValue",
        "put",
        "of",
        "of",
        "value",
        "driver",
        "script",
        "execute",
        "mapValue",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "values",
        "value",
        "getValue",
        "get",
        "assertThat",
        "values",
        "size",
        "isEqualTo",
        "Test",
        "options",
        "value",
        "driver",
        "script",
        "execute",
        "options",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "values",
        "value",
        "getValue",
        "get",
        "assertThat",
        "values",
        "size",
        "isEqualTo",
        "Test",
        "value",
        "driver",
        "script",
        "execute",
        "assertThat",
        "value",
        "getType",
        "isEqualTo",
        "resultValue",
        "value",
        "getValue",
        "get",
        "assertThat",
        "resultValue",
        "getPattern",
        "isEqualTo",
        "assertThat",
        "resultValue",
        "getFlags",
        "isEqualTo",
        "AfterEach",
        "driver",
        "quit"
    ],
    "literals": [
        "\"(arg) => {{\\n\"",
        "\"            if(arg!==undefined)\\n\"",
        "\"                throw Error(\\\"Argument should be undefined, but was\"",
        "\" \\\"+arg);\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"undefined\"",
        "\"undefined\"",
        "\"(arg) => {{\\n\"",
        "\"            if(arg!==null)\\n\"",
        "\"                throw Error(\\\"Argument should be undefined, but was\"",
        "\" \\\"+arg);\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"null\"",
        "\"null\"",
        "\"(arg) => {{\\n\"",
        "\"            if(arg!==-0)\\n\"",
        "\"                throw Error(\\\"Argument should be -0, but was \\\"+arg);\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"-0\"",
        "\"number\"",
        "\"-0\"",
        "\"(arg) => {{\\n\"",
        "\"            if(arg!==Infinity)\\n\"",
        "\"                throw Error(\\\"Argument should be Infinity, but was\"",
        "\" \\\"+arg);\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"Infinity\"",
        "\"number\"",
        "\"Infinity\"",
        "\"(arg) => {{\\n\"",
        "\"            if(arg!==-Infinity)\\n\"",
        "\"                throw Error(\\\"Argument should be -Infinity, but was\"",
        "\" \\\"+arg);\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"-Infinity\"",
        "\"number\"",
        "\"-Infinity\"",
        "\"(arg) => {{\\n\"",
        "\"            if(arg!==1.4)\\n\"",
        "\"                throw Error(\\\"Argument should be 1.4, but was \\\"+arg);\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"number\"",
        "\"(arg) => {{\\n\"",
        "\"            if(arg!==1)\\n\"",
        "\"                throw Error(\\\"Argument should be 1, but was \\\"+arg);\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"number\"",
        "\"(arg) => {{\\n\"",
        "\"            if(arg!==true)\\n\"",
        "\"                throw Error(\\\"Argument should be true, but was \\\"+arg);\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"boolean\"",
        "\"(arg) => {{\\n\"",
        "\"            if(arg!==42n)\\n\"",
        "\"                throw Error(\\\"Argument should be 42n, but was \\\"+arg);\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"bigint\"",
        "\"42\"",
        "\"(arg) => {{\\n\"",
        "\"            if(! (arg instanceof Array))\\n\"",
        "\"                throw Error(\\\"Argument type should be Array, but was \\\"+\\n\"",
        "\"                    Object.prototype.toString.call(arg));\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"array\"",
        "\"(arg) => {{\\n\"",
        "\"            if(! (arg instanceof Set))\\n\"",
        "\"                throw Error(\\\"Argument type should be Set, but was \\\"+\\n\"",
        "\"                    Object.prototype.toString.call(arg));\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"set\"",
        "\"(arg) => {{\\n\"",
        "\"            if(! (arg instanceof Date))\\n\"",
        "\"                throw Error(\\\"Argument type should be Date, but was \\\"+\\n\"",
        "\"                    Object.prototype.toString.call(arg));\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"date\"",
        "\"foobar\"",
        "\"(arg) => {{\\n\"",
        "\"            if(! (arg instanceof Map))\\n\"",
        "\"                throw Error(\\\"Argument type should be Map, but was \\\"+\\n\"",
        "\"                    Object.prototype.toString.call(arg));\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"map\"",
        "\"(arg) => {{\\n\"",
        "\"            if(! (arg instanceof Object))\\n\"",
        "\"                throw Error(\\\"Argument type should be Object, but was \\\"+\\n\"",
        "\"                    Object.prototype.toString.call(arg));\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"object\"",
        "\"(arg) => {{\\n\"",
        "\"            if(! (arg instanceof RegExp))\\n\"",
        "\"                throw Error(\\\"Argument type should be RegExp, but was \\\"+\\n\"",
        "\"                    Object.prototype.toString.call(arg));\\n\"",
        "\"            return arg;\\n\"",
        "\"        }}\"",
        "\"foo\"",
        "\"g\"",
        "\"regexp\"",
        "\"foo\"",
        "\"g\""
    ],
    "variables": [],
    "comments": [
        "Licensed to the Software Freedom Conservancy (SFC) under one",
        "or more contributor license agreements.  See the NOTICE file",
        "distributed with this work for additional information",
        "regarding copyright ownership.  The SFC licenses this file",
        "to you under the Apache License, Version 2.0 (the",
        "\"License\"); you may not use this file except in compliance",
        "with the License.  You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing,",
        "software distributed under the License is distributed on an",
        "\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
        "KIND, either express or implied.  See the License for the",
        "specific language governing permissions and limitations",
        "under the License."
    ],
    "docstrings": [],
    "functions": [
        "canExecuteScriptWithUndefinedArgument",
        "canExecuteScriptWithNullArgument",
        "canExecuteScriptWithMinusZeroArgument",
        "canExecuteScriptWithInfinityArgument",
        "canExecuteScriptWithMinusInfinityArgument",
        "canExecuteScriptWithNumberArgument",
        "canExecuteScriptWithIntegerArgument",
        "canExecuteScriptWithBooleanArgument",
        "canExecuteScriptWithBigIntArgument",
        "canExecuteScriptWithArrayArgument",
        "canExecuteScriptWithSetArgument",
        "canExecuteScriptWithDateArgument",
        "canExecuteScriptWithMapArgument",
        "canExecuteScriptWithObjectArgument",
        "canExecuteScriptWithRegExpArgument",
        "cleanUp"
    ],
    "classes": [
        "WebScriptExecuteTest"
    ]
}