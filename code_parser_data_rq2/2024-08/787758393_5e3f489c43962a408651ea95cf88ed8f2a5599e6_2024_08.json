{
    "identifiers": [
        "Cluster",
        "Worker",
        "cpus",
        "ArchiverReceipt",
        "verifyArchiverReceipt",
        "ReceiptVerificationResult",
        "EventEmitter",
        "cpus",
        "EventEmitter",
        "setupWorkerProcesses",
        "cluster",
        "process",
        "setInterval",
        "receiptLoadTraker",
        "receiptLoadTrakerLimit",
        "receiptLoadTraker",
        "receiptLoadTrakerLimit",
        "workers",
        "i",
        "i",
        "workers",
        "worker",
        "extraWorkers",
        "worker",
        "worker",
        "receiptLoadTraker",
        "receiptLoadTrakerLimit",
        "neededWorkers",
        "MAX_WORKERS",
        "neededWorkers",
        "MAX_WORKERS",
        "workers",
        "neededWorkers",
        "currentWorkers",
        "neededWorkers",
        "currentWorkers",
        "i",
        "neededWorkers",
        "i",
        "cluster",
        "workers",
        "worker",
        "setupWorkerListeners",
        "worker",
        "neededWorkers",
        "currentWorkers",
        "currentWorkers",
        "i",
        "neededWorkers",
        "i",
        "workers",
        "worker",
        "extraWorkers",
        "worker",
        "worker",
        "workers",
        "receiptLoadTraker",
        "receiptLoadTraker",
        "receiptLoadTrakerInterval",
        "setupWorkerListeners",
        "worker",
        "worker",
        "worker",
        "emitter",
        "txId",
        "timestamp",
        "data",
        "workerId",
        "extraWorkers",
        "workerId",
        "workerId",
        "extraWorkers",
        "workerId",
        "worker",
        "worker",
        "workerId",
        "workers",
        "worker",
        "worker",
        "workerId",
        "workerIndex",
        "workerId",
        "workerId",
        "process",
        "data",
        "worker",
        "code",
        "signal",
        "worker",
        "code",
        "signal",
        "extraWorkers",
        "workerId",
        "workerId",
        "isExtraWorker",
        "extraWorkers",
        "workerId",
        "extraWorkers",
        "workerId",
        "workers",
        "worker",
        "worker",
        "workerId",
        "workerIndex",
        "isExtraWorker",
        "workerId",
        "workers",
        "workerIndex",
        "workers",
        "workerIndex",
        "isExtraWorker",
        "workerId",
        "forwardReceiptVerificationResult",
        "txId",
        "timestamp",
        "worker",
        "resolve",
        "emitter",
        "txId",
        "timestamp",
        "result",
        "resolve",
        "result",
        "worker",
        "resolve",
        "txId",
        "timestamp",
        "offloadReceipt",
        "receipt",
        "receiptCount",
        "receiptLoadTraker",
        "workers",
        "verificationResult",
        "verifyArchiverReceipt",
        "receipt",
        "verifiedCount",
        "verificationResult",
        "successCount",
        "failureCount",
        "verificationResult",
        "workers",
        "currentWorker",
        "currentWorker",
        "currentWorker",
        "workers",
        "worker",
        "worker",
        "workers",
        "currentWorker",
        "currentWorker",
        "currentWorker",
        "workers",
        "worker",
        "worker",
        "verificationResult",
        "forwardReceiptVerificationResult",
        "receipt",
        "receipt",
        "worker",
        "verificationResult",
        "verifyArchiverReceipt",
        "receipt",
        "worker",
        "verifiedCount",
        "verificationResult",
        "successCount",
        "failureCount",
        "verificationResult"
    ],
    "literals": [
        "'cluster'",
        "'os'",
        "'../dbstore/receipts'",
        "'../Data/Collector'",
        "'events'",
        "string",
        "string",
        "string",
        "string",
        "Master ${process.pid} is running",
        "Receipt load is below the limit: ${receiptLoadTraker}/${receiptLoadTrakerLimit}",
        "Needed workers: ${neededWorkers}",
        "Current workers: ${currentWorkers}",
        "Adjusted worker count to ${workers.length}, based on ${receiptLoadTraker} receipts received.",
        "'message'",
        "'receipt-verification'",
        "'clild_close'",
        "Worker ${workerId} is requesting to close",
        "Worker ${workerId} is in extraWorkers, killing it now",
        "Worker ${workerId} is not in extraWorkers",
        "Worker ${workerId} is in workers now, we can't kill it as it might be processing a receipt",
        "Worker ${workerId} is not in workers",
        "Worker ${process.pid} is sending unknown message type: ${type}",
        "'exit'",
        "Worker ${worker.process.pid} died with code ${code} and signal ${signal}",
        "Worker ${workerId} is in extraWorkers, removing it now",
        "Worker ${workerId} is in workers list as well",
        "Worker ${workerId} is not in workers list",
        "string",
        "'exit'",
        "Worker exited before sending the receipt verification result for ${txId} with timestamp ${timestamp}",
        "'Worker exited before sending the receipt verification result'",
        "'No worker available to process the receipt 1'",
        "'receipt-verification'",
        "'No worker available to process the receipt 2'",
        "'receipt-verification'"
    ],
    "variables": [
        "MAX_WORKERS",
        "receiptCount",
        "verifiedCount",
        "successCount",
        "failureCount",
        "receiptLoadTraker",
        "receiptLoadTrakerInterval",
        "receiptLoadTrakerLimit",
        "workers",
        "extraWorkers",
        "currentWorker",
        "receiptsInVerificationMap",
        "emitter",
        "setupWorkerProcesses",
        "i",
        "worker",
        "neededWorkers",
        "currentWorkers",
        "i",
        "currentWorkers",
        "worker",
        "i",
        "worker",
        "setupWorkerListeners",
        "workerId",
        "data",
        "worker",
        "workerIndex",
        "isExtraWorker",
        "workerIndex",
        "forwardReceiptVerificationResult",
        "offloadReceipt",
        "verificationResult",
        "worker"
    ],
    "comments": [
        "Leaving 1 core for the master process",
        "Variable to keep track of the number of receipts received",
        "Variable to keep track of the number of receipts verified",
        "Variable to keep track of the number of receipts successful verification",
        "Variable to keep track of the number of receipts failed verification",
        "Variable to keep track of the receipt load within the last receiptLoadTrakerInterval",
        "Interval to track the receipt load",
        "Limit to track the receipt load",
        "Creating a worker pool",
        "Set interval to check receipt count every 15 seconds",
        "Kill the extra workers from the end of the array",
        "console.log(`Killing worker ${workers[i].process.pid} with index ${i}`);",
        "workers[i].kill();",
        "workers.pop();",
        "Instead of killing the worker, move it to the extraWorkers map",
        "results.set(worker.process.pid, { success: 0, failure: 0 })",
        "Kill the extra workers from the end of the array",
        "console.log(`Killing worker ${workers[i].process.pid} with index ${i}`);",
        "workers[i].kill();",
        "workers.pop();",
        "Instead of killing the worker, move it to the extraWorkers map",
        "Reset the count",
        "Handle messages from workers",
        "const result = results.get(workerId)",
        "if (result) {",
        "verifiedCount++",
        "if (data.success) {",
        "result.success++",
        "successCount++",
        "} else {",
        "result.failure++",
        "failureCount++",
        "}",
        "}",
        "Check if the worker is in the extraWorkers map",
        "Check if the worker is in the workers array",
        "Remove the worker from the workers list if not present in extraWorkers",
        "goActive() {",
        "nestedCountersInstance.countEvent('p2p', 'goActive')",
        "const activePromise = new Promise<void>((resolve, reject) => {",
        "Self.emitter.on('active', () => resolve())",
        "})",
        "//Active.requestActive()",
        "console.log('return goActive promise...')",
        "return activePromise",
        "}",
        "Increment the counter for each receipt received",
        "Increment the receipt load tracker",
        "Forward the request to a worker in a round-robin fashion",
        "Verifying the receipt in the main thread"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}