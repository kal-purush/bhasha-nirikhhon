{
    "identifiers": [
        "org",
        "apache",
        "cassandra",
        "db",
        "compaction",
        "java",
        "util",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "org",
        "junit",
        "Assert",
        "org",
        "junit",
        "Before",
        "org",
        "junit",
        "BeforeClass",
        "org",
        "junit",
        "Test",
        "org",
        "apache",
        "cassandra",
        "SchemaLoader",
        "org",
        "apache",
        "cassandra",
        "config",
        "CassandraRelevantProperties",
        "org",
        "apache",
        "cassandra",
        "cql3",
        "QueryProcessor",
        "org",
        "apache",
        "cassandra",
        "cql3",
        "statements",
        "schema",
        "CreateTableStatement",
        "org",
        "apache",
        "cassandra",
        "db",
        "ColumnFamilyStore",
        "org",
        "apache",
        "cassandra",
        "db",
        "lifecycle",
        "LifecycleTransaction",
        "org",
        "apache",
        "cassandra",
        "io",
        "sstable",
        "format",
        "SSTableReader",
        "org",
        "apache",
        "cassandra",
        "schema",
        "KeyspaceParams",
        "org",
        "apache",
        "cassandra",
        "schema",
        "Schema",
        "org",
        "apache",
        "cassandra",
        "schema",
        "TableMetadata",
        "org",
        "apache",
        "cassandra",
        "service",
        "ActiveRepairService",
        "org",
        "apache",
        "cassandra",
        "utils",
        "FBUtilities",
        "org",
        "apache",
        "cassandra",
        "utils",
        "UUIDGen",
        "org",
        "apache",
        "cassandra",
        "db",
        "ColumnFamilyStore",
        "FlushReason",
        "UNIT_TESTS",
        "org",
        "apache",
        "cassandra",
        "db",
        "compaction",
        "CompactionTaskTest",
        "mockStrategy",
        "org",
        "apache",
        "cassandra",
        "db",
        "compaction",
        "CompactionTaskTest",
        "mutateRepaired",
        "org",
        "junit",
        "Assert",
        "assertFalse",
        "org",
        "junit",
        "Assert",
        "assertNotNull",
        "org",
        "junit",
        "Assert",
        "assertNull",
        "cfm",
        "cfs",
        "mockStrategy",
        "mockStrategy",
        "mockStrategy",
        "cfs",
        "BeforeClass",
        "CassandraRelevantProperties",
        "COMPACTION_SKIP_REPAIR_STATE_CHECKING",
        "setBoolean",
        "SchemaLoader",
        "prepareServer",
        "cfm",
        "CreateTableStatement",
        "parse",
        "build",
        "SchemaLoader",
        "createKeyspace",
        "KeyspaceParams",
        "simple",
        "cfm",
        "cfs",
        "Schema",
        "instance",
        "getColumnFamilyStoreInstance",
        "cfm",
        "id",
        "Before",
        "cfs",
        "getCompactionStrategyContainer",
        "enable",
        "cfs",
        "truncateBlocking",
        "Test",
        "cfs",
        "getCompactionStrategyContainer",
        "disable",
        "m",
        "m",
        "m",
        "bitCount",
        "m",
        "order",
        "order",
        "bitCount",
        "m",
        "order",
        "cfs",
        "truncateBlocking",
        "QueryProcessor",
        "executeInternal",
        "cfs",
        "forceBlockingFlush",
        "UNIT_TESTS",
        "QueryProcessor",
        "executeInternal",
        "cfs",
        "forceBlockingFlush",
        "UNIT_TESTS",
        "QueryProcessor",
        "executeInternal",
        "cfs",
        "forceBlockingFlush",
        "UNIT_TESTS",
        "QueryProcessor",
        "executeInternal",
        "cfs",
        "forceBlockingFlush",
        "UNIT_TESTS",
        "sstables",
        "cfs",
        "getLiveSSTables",
        "Assert",
        "assertEquals",
        "sstables",
        "size",
        "unrepaired",
        "sstables",
        "get",
        "repaired",
        "sstables",
        "get",
        "pending1",
        "sstables",
        "get",
        "pending2",
        "sstables",
        "get",
        "mutateRepaired",
        "repaired",
        "FBUtilities",
        "nowInSeconds",
        "ActiveRepairService",
        "NO_PENDING_REPAIR",
        "mutateRepaired",
        "pending1",
        "ActiveRepairService",
        "UNREPAIRED_SSTABLE",
        "UUIDGen",
        "getTimeUUID",
        "mutateRepaired",
        "pending2",
        "ActiveRepairService",
        "UNREPAIRED_SSTABLE",
        "UUIDGen",
        "getTimeUUID",
        "i",
        "i",
        "i",
        "m",
        "i",
        "sstables",
        "remove",
        "i",
        "Collections",
        "rotate",
        "sstables",
        "order",
        "txn",
        "cfs",
        "getTracker",
        "tryModify",
        "sstables",
        "OperationType",
        "COMPACTION",
        "assertNotNull",
        "txn",
        "task",
        "cfs",
        "txn",
        "mockStrategy",
        "assertNotNull",
        "task",
        "task",
        "executeInternal",
        "s",
        "txn",
        "current",
        "assertFalse",
        "s",
        "isRepaired",
        "assertNull",
        "s",
        "getPendingRepair"
    ],
    "literals": [
        "\"CREATE TABLE tbl (k INT PRIMARY KEY, v INT)\"",
        "\"ks\"",
        "\"ks\"",
        "\"INSERT INTO ks.tbl (k, v) VALUES (1, 1);\"",
        "\"INSERT INTO ks.tbl (k, v) VALUES (2, 2);\"",
        "\"INSERT INTO ks.tbl (k, v) VALUES (3, 3);\"",
        "\"INSERT INTO ks.tbl (k, v) VALUES (4, 4);\""
    ],
    "variables": [
        "cfm",
        "cfs",
        "mockStrategy"
    ],
    "comments": [
        "test all combinations of two or more sstables with different repair marking",
        "task must be successfully created",
        "and run",
        "and the resulting files must be marked unrepaired"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Duplicate of {@link CompactionTaskTest#mixedSSTableFailure()} with disabled repair state checking. Creating the\n     * task should succeed."
    ],
    "functions": [
        "DisabledRepairStateCheckingTest",
        "setUpClass",
        "setUp",
        "mixedSSTableFailure"
    ],
    "classes": [
        "DisabledRepairStateCheckingTest"
    ]
}