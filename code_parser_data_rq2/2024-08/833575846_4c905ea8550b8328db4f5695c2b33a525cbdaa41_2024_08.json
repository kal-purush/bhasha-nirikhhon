{
    "identifiers": [
        "dotenv",
        "load_dotenv",
        "os",
        "langchain_core",
        "messages",
        "AIMessage",
        "HumanMessage",
        "SystemMessage",
        "langchain_openai",
        "ChatOpenAI",
        "langchain",
        "text_splitter",
        "CharacterTextSplitter",
        "langchain_community",
        "document_loaders",
        "TextLoader",
        "langchain_chroma",
        "Chroma",
        "langchain_openai",
        "OpenAIEmbeddings",
        "load_dotenv",
        "ChatOpenAI",
        "model",
        "ChatOpenAI",
        "model",
        "chat_history",
        "append",
        "SystemMessage",
        "content",
        "chat_history",
        "append",
        "SystemMessage",
        "content",
        "chat_history",
        "append",
        "SystemMessage",
        "content",
        "answer_history",
        "append",
        "SystemMessage",
        "content",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "abspath",
        "os",
        "path",
        "join",
        "current_dir",
        "OpenAIEmbeddings",
        "model",
        "Chroma",
        "persist_directory",
        "persistent_directory",
        "embedding_function",
        "embeddings",
        "input",
        "query",
        "lower",
        "chat_history",
        "append",
        "HumanMessage",
        "content",
        "query",
        "model",
        "invoke",
        "chat_history",
        "query",
        "result",
        "content",
        "chat_history",
        "append",
        "AIMessage",
        "content",
        "response",
        "db",
        "as_retriever",
        "search_type",
        "search_kwargs",
        "retriever",
        "invoke",
        "response",
        "result",
        "content",
        "query",
        "join",
        "doc",
        "page_content",
        "doc",
        "relevant_docs",
        "answer_history",
        "append",
        "HumanMessage",
        "content",
        "combined_input",
        "model2",
        "invoke",
        "answer_history",
        "reply",
        "content"
    ],
    "literals": [
        "\"gpt-4o-mini\"",
        "\"gpt-4o-mini\"",
        "\"You are an AI assistant that will help me classify the emotion conveyed in the user's sentence.\"",
        "\"The classification must fall within one of the following categories: [joy, sadness, anger, fear, disgust, embarrassment, anxiety, nostalgia, envy, boredom].\"",
        "\"Your responses should just state the emotion. e.g. 'Joy' or 'Anger'\"",
        "\"Your responses should just reflect what the character says, no other information is needed. Think of it as having a conversation.\"",
        "\"db\"",
        "\"chroma_db\"",
        "\"text-embedding-3-small\"",
        "\"You: \"",
        "\"exit\"",
        "\" \"",
        "\"similarity_score_threshold\"",
        "\"k\"",
        "\"score_threshold\"",
        "\"Here are some documents that might help answer the question: \"",
        "f\"How would {result.content} respond to the user's query, {query} if they were having a conversation?\"",
        "\"\\n\\nRelevant Documents:\\n\"",
        "\"\\n\\n\"",
        "\"\\n\\nUnderstand how that character responds semantically and provide a reply to the user's query.\"",
        "f\"AI: {reply.content}\""
    ],
    "variables": [
        "model",
        "model2",
        "chat_history",
        "answer_history",
        "current_dir",
        "persistent_directory",
        "embeddings",
        "db",
        "query",
        "result",
        "response",
        "retriever",
        "relevant_docs",
        "combined_input",
        "reply"
    ],
    "comments": [
        "Use a list to store messages",
        "Stores the conversation between the user and the AI.",
        "Set an initial system message (optional)",
        "Add system message to chat history",
        "Define the persistent directory",
        "Define the embedding model",
        "Load the existing vector store with the embedding function",
        "Chat loop",
        "Add user message",
        "Get AI response using history",
        "Add AI message",
        "Retrieve relevant documents based on the query",
        "Add AI message",
        "print(\"---- Message History ----\")",
        "print(chat_history)",
        "Invoke the model with a message",
        "result = model.invoke(\"What is 81 divided by 9?\")",
        "print(\"Full result:\")",
        "print(result)",
        "print(\"Content only:\")",
        "print(result.content)"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}